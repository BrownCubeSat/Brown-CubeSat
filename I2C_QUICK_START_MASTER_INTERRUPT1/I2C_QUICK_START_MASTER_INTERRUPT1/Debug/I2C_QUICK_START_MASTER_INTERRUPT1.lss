
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df8  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00002df8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  20000074  00002e6c  00010074  2**2
                  ALLOC
  3 .stack        00002004  2000017c  00002f74  00010074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001cb19  00000000  00000000  000100f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029f3  00000000  00000000  0002cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004b70  00000000  00000000  0002f603  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004a8  00000000  00000000  00034173  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000488  00000000  00000000  0003461b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000194ad  00000000  00000000  00034aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a86c  00000000  00000000  0004df50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089768  00000000  00000000  000587bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001290  00000000  00000000  000e1f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002180 	.word	0x20002180
       4:	0000161d 	.word	0x0000161d
       8:	00001619 	.word	0x00001619
       c:	00001619 	.word	0x00001619
	...
      2c:	00001619 	.word	0x00001619
	...
      38:	00001619 	.word	0x00001619
      3c:	00001619 	.word	0x00001619
      40:	00001619 	.word	0x00001619
      44:	00001619 	.word	0x00001619
      48:	00001619 	.word	0x00001619
      4c:	00001619 	.word	0x00001619
      50:	00001619 	.word	0x00001619
      54:	00001619 	.word	0x00001619
      58:	00001619 	.word	0x00001619
      5c:	00001619 	.word	0x00001619
      60:	00001619 	.word	0x00001619
      64:	00000af1 	.word	0x00000af1
      68:	00000b01 	.word	0x00000b01
      6c:	00000b11 	.word	0x00000b11
      70:	00000b21 	.word	0x00000b21
      74:	00000b31 	.word	0x00000b31
      78:	00000b41 	.word	0x00000b41
      7c:	00001619 	.word	0x00001619
      80:	00001619 	.word	0x00001619
      84:	00001619 	.word	0x00001619
      88:	00001619 	.word	0x00001619
      8c:	00001619 	.word	0x00001619
      90:	00001619 	.word	0x00001619
      94:	00001619 	.word	0x00001619
      98:	00001619 	.word	0x00001619
      9c:	00001619 	.word	0x00001619
      a0:	00001619 	.word	0x00001619
      a4:	00001619 	.word	0x00001619
      a8:	00001619 	.word	0x00001619
      ac:	00001619 	.word	0x00001619

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000074 	.word	0x20000074
      d0:	00000000 	.word	0x00000000
      d4:	00002df8 	.word	0x00002df8

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002df8 	.word	0x00002df8
     104:	20000078 	.word	0x20000078
     108:	00002df8 	.word	0x00002df8
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b00      	cmp	r3, #0
     116:	d110      	bne.n	13a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     11c:	2b00      	cmp	r3, #0
     11e:	d109      	bne.n	134 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     120:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     122:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     126:	2200      	movs	r2, #0
     128:	4b07      	ldr	r3, [pc, #28]	; (148 <cpu_irq_enter_critical+0x38>)
     12a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     12c:	2201      	movs	r2, #1
     12e:	4b07      	ldr	r3, [pc, #28]	; (14c <cpu_irq_enter_critical+0x3c>)
     130:	701a      	strb	r2, [r3, #0]
     132:	e002      	b.n	13a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     134:	2200      	movs	r2, #0
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <cpu_irq_enter_critical+0x3c>)
     138:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <cpu_irq_enter_critical+0x34>)
     13c:	681a      	ldr	r2, [r3, #0]
     13e:	3201      	adds	r2, #1
     140:	601a      	str	r2, [r3, #0]
}
     142:	4770      	bx	lr
     144:	20000090 	.word	0x20000090
     148:	20000000 	.word	0x20000000
     14c:	20000094 	.word	0x20000094

00000150 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     150:	4b08      	ldr	r3, [pc, #32]	; (174 <cpu_irq_leave_critical+0x24>)
     152:	681a      	ldr	r2, [r3, #0]
     154:	3a01      	subs	r2, #1
     156:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     158:	681b      	ldr	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d109      	bne.n	172 <cpu_irq_leave_critical+0x22>
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <cpu_irq_leave_critical+0x28>)
     160:	781b      	ldrb	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d005      	beq.n	172 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     166:	2201      	movs	r2, #1
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_leave_critical+0x2c>)
     16a:	701a      	strb	r2, [r3, #0]
     16c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     170:	b662      	cpsie	i
	}
}
     172:	4770      	bx	lr
     174:	20000090 	.word	0x20000090
     178:	20000094 	.word	0x20000094
     17c:	20000000 	.word	0x20000000

00000180 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     184:	ac01      	add	r4, sp, #4
     186:	2501      	movs	r5, #1
     188:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18a:	2700      	movs	r7, #0
     18c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     18e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     190:	203e      	movs	r0, #62	; 0x3e
     192:	1c21      	adds	r1, r4, #0
     194:	4e06      	ldr	r6, [pc, #24]	; (1b0 <system_board_init+0x30>)
     196:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     198:	2280      	movs	r2, #128	; 0x80
     19a:	05d2      	lsls	r2, r2, #23
     19c:	4b05      	ldr	r3, [pc, #20]	; (1b4 <system_board_init+0x34>)
     19e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a4:	200f      	movs	r0, #15
     1a6:	1c21      	adds	r1, r4, #0
     1a8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1aa:	b003      	add	sp, #12
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	000001b9 	.word	0x000001b9
     1b4:	41004480 	.word	0x41004480

000001b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1b8:	b500      	push	{lr}
     1ba:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1bc:	ab01      	add	r3, sp, #4
     1be:	2280      	movs	r2, #128	; 0x80
     1c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1c2:	780a      	ldrb	r2, [r1, #0]
     1c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1c6:	784a      	ldrb	r2, [r1, #1]
     1c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1ca:	788a      	ldrb	r2, [r1, #2]
     1cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1ce:	1c19      	adds	r1, r3, #0
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <port_pin_set_config+0x20>)
     1d2:	4798      	blx	r3
}
     1d4:	b003      	add	sp, #12
     1d6:	bd00      	pop	{pc}
     1d8:	000015c5 	.word	0x000015c5

000001dc <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1dc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1de:	2207      	movs	r2, #7
     1e0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1e2:	421a      	tst	r2, r3
     1e4:	d1fc      	bne.n	1e0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1e6:	4770      	bx	lr

000001e8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	4647      	mov	r7, r8
     1ec:	b480      	push	{r7}
     1ee:	b082      	sub	sp, #8
     1f0:	1c07      	adds	r7, r0, #0
     1f2:	1c0c      	adds	r4, r1, #0
     1f4:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1f6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1f8:	1c08      	adds	r0, r1, #0
     1fa:	4b5d      	ldr	r3, [pc, #372]	; (370 <i2c_master_init+0x188>)
     1fc:	4798      	blx	r3
     1fe:	1c06      	adds	r6, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     200:	4b5c      	ldr	r3, [pc, #368]	; (374 <i2c_master_init+0x18c>)
     202:	6a19      	ldr	r1, [r3, #32]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     204:	1c82      	adds	r2, r0, #2
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     206:	2001      	movs	r0, #1
     208:	4090      	lsls	r0, r2
     20a:	1c02      	adds	r2, r0, #0
     20c:	430a      	orrs	r2, r1
     20e:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     210:	a901      	add	r1, sp, #4
     212:	7b2b      	ldrb	r3, [r5, #12]
     214:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     216:	3614      	adds	r6, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     218:	b2f6      	uxtb	r6, r6
     21a:	1c30      	adds	r0, r6, #0
     21c:	4b56      	ldr	r3, [pc, #344]	; (378 <i2c_master_init+0x190>)
     21e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     220:	1c30      	adds	r0, r6, #0
     222:	4b56      	ldr	r3, [pc, #344]	; (37c <i2c_master_init+0x194>)
     224:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     226:	7b28      	ldrb	r0, [r5, #12]
     228:	2100      	movs	r1, #0
     22a:	4b55      	ldr	r3, [pc, #340]	; (380 <i2c_master_init+0x198>)
     22c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     22e:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     230:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     232:	0799      	lsls	r1, r3, #30
     234:	d500      	bpl.n	238 <i2c_master_init+0x50>
     236:	e097      	b.n	368 <i2c_master_init+0x180>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     238:	6823      	ldr	r3, [r4, #0]
		return STATUS_BUSY;
     23a:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     23c:	07da      	lsls	r2, r3, #31
     23e:	d500      	bpl.n	242 <i2c_master_init+0x5a>
     240:	e092      	b.n	368 <i2c_master_init+0x180>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     242:	2314      	movs	r3, #20
     244:	6023      	str	r3, [r4, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     246:	683c      	ldr	r4, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     248:	1c20      	adds	r0, r4, #0
     24a:	4b49      	ldr	r3, [pc, #292]	; (370 <i2c_master_init+0x188>)
     24c:	4798      	blx	r3
     24e:	4680      	mov	r8, r0
     250:	2380      	movs	r3, #128	; 0x80
     252:	4669      	mov	r1, sp
     254:	700b      	strb	r3, [r1, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     256:	2300      	movs	r3, #0
     258:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     25a:	2201      	movs	r2, #1
     25c:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     25e:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     260:	69e8      	ldr	r0, [r5, #28]
	uint32_t pad1 = config->pinmux_pad1;
     262:	6a2e      	ldr	r6, [r5, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     264:	2800      	cmp	r0, #0
     266:	d103      	bne.n	270 <i2c_master_init+0x88>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     268:	1c20      	adds	r0, r4, #0
     26a:	2100      	movs	r1, #0
     26c:	4b45      	ldr	r3, [pc, #276]	; (384 <i2c_master_init+0x19c>)
     26e:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     270:	466a      	mov	r2, sp
     272:	7010      	strb	r0, [r2, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     274:	2202      	movs	r2, #2
     276:	466b      	mov	r3, sp
     278:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     27a:	0c03      	lsrs	r3, r0, #16
     27c:	b2d8      	uxtb	r0, r3
     27e:	4669      	mov	r1, sp
     280:	4b41      	ldr	r3, [pc, #260]	; (388 <i2c_master_init+0x1a0>)
     282:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     284:	2e00      	cmp	r6, #0
     286:	d104      	bne.n	292 <i2c_master_init+0xaa>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     288:	1c20      	adds	r0, r4, #0
     28a:	2101      	movs	r1, #1
     28c:	4b3d      	ldr	r3, [pc, #244]	; (384 <i2c_master_init+0x19c>)
     28e:	4798      	blx	r3
     290:	1c06      	adds	r6, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     292:	4669      	mov	r1, sp
     294:	700e      	strb	r6, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     296:	2302      	movs	r3, #2
     298:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     29a:	0c36      	lsrs	r6, r6, #16
     29c:	b2f0      	uxtb	r0, r6
     29e:	4b3a      	ldr	r3, [pc, #232]	; (388 <i2c_master_init+0x1a0>)
     2a0:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2a2:	8aab      	ldrh	r3, [r5, #20]
     2a4:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     2a6:	8aeb      	ldrh	r3, [r5, #22]
     2a8:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2aa:	7e2a      	ldrb	r2, [r5, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ac:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2ae:	2a00      	cmp	r2, #0
     2b0:	d104      	bne.n	2bc <i2c_master_init+0xd4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2b2:	4b36      	ldr	r3, [pc, #216]	; (38c <i2c_master_init+0x1a4>)
     2b4:	789b      	ldrb	r3, [r3, #2]
     2b6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     2b8:	0fdb      	lsrs	r3, r3, #31
     2ba:	01db      	lsls	r3, r3, #7
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     2bc:	692a      	ldr	r2, [r5, #16]
     2be:	2a00      	cmp	r2, #0
     2c0:	d000      	beq.n	2c4 <i2c_master_init+0xdc>
		tmp_ctrla |= config->start_hold_time;
     2c2:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     2c4:	68aa      	ldr	r2, [r5, #8]
     2c6:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     2c8:	2224      	movs	r2, #36	; 0x24
     2ca:	5caa      	ldrb	r2, [r5, r2]
     2cc:	2a00      	cmp	r2, #0
     2ce:	d002      	beq.n	2d6 <i2c_master_init+0xee>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2d0:	2280      	movs	r2, #128	; 0x80
     2d2:	05d2      	lsls	r2, r2, #23
     2d4:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     2d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     2d8:	2a00      	cmp	r2, #0
     2da:	d000      	beq.n	2de <i2c_master_init+0xf6>
		tmp_ctrla |= config->inactive_timeout;
     2dc:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     2de:	222c      	movs	r2, #44	; 0x2c
     2e0:	5caa      	ldrb	r2, [r5, r2]
     2e2:	2a00      	cmp	r2, #0
     2e4:	d002      	beq.n	2ec <i2c_master_init+0x104>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2e6:	2280      	movs	r2, #128	; 0x80
     2e8:	0512      	lsls	r2, r2, #20
     2ea:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     2ec:	222d      	movs	r2, #45	; 0x2d
     2ee:	5caa      	ldrb	r2, [r5, r2]
     2f0:	2a00      	cmp	r2, #0
     2f2:	d002      	beq.n	2fa <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0412      	lsls	r2, r2, #16
     2f8:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     2fa:	222e      	movs	r2, #46	; 0x2e
     2fc:	5caa      	ldrb	r2, [r5, r2]
     2fe:	2a00      	cmp	r2, #0
     300:	d002      	beq.n	308 <i2c_master_init+0x120>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     302:	2280      	movs	r2, #128	; 0x80
     304:	03d2      	lsls	r2, r2, #15
     306:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     308:	6822      	ldr	r2, [r4, #0]
     30a:	4313      	orrs	r3, r2
     30c:	6023      	str	r3, [r4, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     30e:	2380      	movs	r3, #128	; 0x80
     310:	005b      	lsls	r3, r3, #1
     312:	6063      	str	r3, [r4, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     314:	4646      	mov	r6, r8
     316:	3614      	adds	r6, #20
     318:	b2f6      	uxtb	r6, r6
     31a:	1c30      	adds	r0, r6, #0
     31c:	4b1c      	ldr	r3, [pc, #112]	; (390 <i2c_master_init+0x1a8>)
     31e:	4798      	blx	r3
     320:	21fa      	movs	r1, #250	; 0xfa
     322:	00c9      	lsls	r1, r1, #3
     324:	682b      	ldr	r3, [r5, #0]
     326:	4359      	muls	r1, r3
     328:	1e4b      	subs	r3, r1, #1
     32a:	1818      	adds	r0, r3, r0
     32c:	4b19      	ldr	r3, [pc, #100]	; (394 <i2c_master_init+0x1ac>)
     32e:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     330:	1f47      	subs	r7, r0, #5

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     332:	2fff      	cmp	r7, #255	; 0xff
     334:	d80d      	bhi.n	352 <i2c_master_init+0x16a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     336:	1c30      	adds	r0, r6, #0
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <i2c_master_init+0x1a8>)
     33a:	4798      	blx	r3
     33c:	686b      	ldr	r3, [r5, #4]
     33e:	21fa      	movs	r1, #250	; 0xfa
     340:	00c9      	lsls	r1, r1, #3
     342:	4359      	muls	r1, r3
     344:	1e4b      	subs	r3, r1, #1
     346:	1818      	adds	r0, r3, r0
     348:	4b12      	ldr	r3, [pc, #72]	; (394 <i2c_master_init+0x1ac>)
     34a:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     34c:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     34e:	28ff      	cmp	r0, #255	; 0xff
     350:	d901      	bls.n	356 <i2c_master_init+0x16e>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     352:	2040      	movs	r0, #64	; 0x40
     354:	e008      	b.n	368 <i2c_master_init+0x180>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     356:	0400      	lsls	r0, r0, #16
     358:	23ff      	movs	r3, #255	; 0xff
     35a:	041b      	lsls	r3, r3, #16
     35c:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     35e:	23ff      	movs	r3, #255	; 0xff
     360:	401f      	ands	r7, r3
     362:	4307      	orrs	r7, r0
     364:	60e7      	str	r7, [r4, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     366:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     368:	b002      	add	sp, #8
     36a:	bc04      	pop	{r2}
     36c:	4690      	mov	r8, r2
     36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     370:	00000a49 	.word	0x00000a49
     374:	40000400 	.word	0x40000400
     378:	000014e9 	.word	0x000014e9
     37c:	0000145d 	.word	0x0000145d
     380:	00000871 	.word	0x00000871
     384:	000008c1 	.word	0x000008c1
     388:	000015c5 	.word	0x000015c5
     38c:	41002000 	.word	0x41002000
     390:	00001505 	.word	0x00001505
     394:	00001ac5 	.word	0x00001ac5

00000398 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     398:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     39a:	7e1a      	ldrb	r2, [r3, #24]
     39c:	0791      	lsls	r1, r2, #30
     39e:	d506      	bpl.n	3ae <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     3a0:	2202      	movs	r2, #2
     3a2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3a4:	8b5b      	ldrh	r3, [r3, #26]
     3a6:	079a      	lsls	r2, r3, #30
     3a8:	d50b      	bpl.n	3c2 <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     3aa:	2041      	movs	r0, #65	; 0x41
     3ac:	e00c      	b.n	3c8 <_i2c_master_address_response+0x30>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     3ae:	8b5a      	ldrh	r2, [r3, #26]
     3b0:	0751      	lsls	r1, r2, #29
     3b2:	d508      	bpl.n	3c6 <_i2c_master_address_response+0x2e>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     3b4:	6859      	ldr	r1, [r3, #4]
     3b6:	22c0      	movs	r2, #192	; 0xc0
     3b8:	0292      	lsls	r2, r2, #10
     3ba:	430a      	orrs	r2, r1
     3bc:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     3be:	2018      	movs	r0, #24
     3c0:	e002      	b.n	3c8 <_i2c_master_address_response+0x30>
	}

	return STATUS_OK;
     3c2:	2000      	movs	r0, #0
     3c4:	e000      	b.n	3c8 <_i2c_master_address_response+0x30>
     3c6:	2000      	movs	r0, #0
}
     3c8:	4770      	bx	lr
     3ca:	46c0      	nop			; (mov r8, r8)

000003cc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     3cc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3ce:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     3d0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3d2:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3d4:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3d6:	e004      	b.n	3e2 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     3d8:	3301      	adds	r3, #1
     3da:	b29b      	uxth	r3, r3
     3dc:	8901      	ldrh	r1, [r0, #8]
     3de:	4299      	cmp	r1, r3
     3e0:	d907      	bls.n	3f2 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3e2:	7e11      	ldrb	r1, [r2, #24]
     3e4:	4221      	tst	r1, r4
     3e6:	d106      	bne.n	3f6 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3e8:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3ea:	4229      	tst	r1, r5
     3ec:	d0f4      	beq.n	3d8 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     3ee:	2000      	movs	r0, #0
     3f0:	e002      	b.n	3f8 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     3f2:	2012      	movs	r0, #18
     3f4:	e000      	b.n	3f8 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     3f6:	2000      	movs	r0, #0
}
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	46c0      	nop			; (mov r8, r8)

000003fc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     3fc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3fe:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     400:	6862      	ldr	r2, [r4, #4]
     402:	2380      	movs	r3, #128	; 0x80
     404:	02db      	lsls	r3, r3, #11
     406:	4313      	orrs	r3, r2
     408:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     40a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     40c:	4b02      	ldr	r3, [pc, #8]	; (418 <_i2c_master_send_hs_master_code+0x1c>)
     40e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     410:	2301      	movs	r3, #1
     412:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     414:	bd10      	pop	{r4, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	000003cd 	.word	0x000003cd

0000041c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     41c:	b5f0      	push	{r4, r5, r6, r7, lr}
     41e:	465f      	mov	r7, fp
     420:	4656      	mov	r6, sl
     422:	464d      	mov	r5, r9
     424:	4644      	mov	r4, r8
     426:	b4f0      	push	{r4, r5, r6, r7}
     428:	b083      	sub	sp, #12
     42a:	1c06      	adds	r6, r0, #0
     42c:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     42e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     430:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     432:	682b      	ldr	r3, [r5, #0]
     434:	011b      	lsls	r3, r3, #4
     436:	0fdb      	lsrs	r3, r3, #31
     438:	4699      	mov	r9, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     43a:	7a4b      	ldrb	r3, [r1, #9]
     43c:	2b00      	cmp	r3, #0
     43e:	d002      	beq.n	446 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     440:	7a89      	ldrb	r1, [r1, #10]
     442:	4b4a      	ldr	r3, [pc, #296]	; (56c <_i2c_master_read_packet+0x150>)
     444:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     446:	686a      	ldr	r2, [r5, #4]
     448:	4b49      	ldr	r3, [pc, #292]	; (570 <_i2c_master_read_packet+0x154>)
     44a:	4013      	ands	r3, r2
     44c:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     44e:	7a3b      	ldrb	r3, [r7, #8]
     450:	2b00      	cmp	r3, #0
     452:	d022      	beq.n	49a <_i2c_master_read_packet+0x7e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     454:	7a7a      	ldrb	r2, [r7, #9]
     456:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     458:	883b      	ldrh	r3, [r7, #0]
     45a:	005b      	lsls	r3, r3, #1
     45c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     45e:	2280      	movs	r2, #128	; 0x80
     460:	0212      	lsls	r2, r2, #8
     462:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     464:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     466:	1c30      	adds	r0, r6, #0
     468:	4b42      	ldr	r3, [pc, #264]	; (574 <_i2c_master_read_packet+0x158>)
     46a:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     46c:	686a      	ldr	r2, [r5, #4]
     46e:	4b40      	ldr	r3, [pc, #256]	; (570 <_i2c_master_read_packet+0x154>)
     470:	4013      	ands	r3, r2
     472:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     474:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     476:	d170      	bne.n	55a <_i2c_master_read_packet+0x13e>
			tmp_status = _i2c_master_address_response(module);
     478:	1c30      	adds	r0, r6, #0
     47a:	4b3f      	ldr	r3, [pc, #252]	; (578 <_i2c_master_read_packet+0x15c>)
     47c:	4798      	blx	r3
     47e:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     480:	d16b      	bne.n	55a <_i2c_master_read_packet+0x13e>
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     482:	7a7b      	ldrb	r3, [r7, #9]
     484:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     486:	2201      	movs	r2, #1
     488:	4313      	orrs	r3, r2
     48a:	883a      	ldrh	r2, [r7, #0]
     48c:	0a12      	lsrs	r2, r2, #8
     48e:	2178      	movs	r1, #120	; 0x78
     490:	430a      	orrs	r2, r1
     492:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     494:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     496:	626b      	str	r3, [r5, #36]	; 0x24
     498:	e007      	b.n	4aa <_i2c_master_read_packet+0x8e>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     49a:	883a      	ldrh	r2, [r7, #0]
     49c:	0052      	lsls	r2, r2, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     49e:	7a7b      	ldrb	r3, [r7, #9]
     4a0:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4a2:	4313      	orrs	r3, r2
     4a4:	2201      	movs	r2, #1
     4a6:	4313      	orrs	r3, r2
     4a8:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4aa:	1c30      	adds	r0, r6, #0
     4ac:	4b31      	ldr	r3, [pc, #196]	; (574 <_i2c_master_read_packet+0x158>)
     4ae:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     4b0:	686a      	ldr	r2, [r5, #4]
     4b2:	4b2f      	ldr	r3, [pc, #188]	; (570 <_i2c_master_read_packet+0x154>)
     4b4:	4013      	ands	r3, r2
     4b6:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4b8:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     4ba:	d14e      	bne.n	55a <_i2c_master_read_packet+0x13e>
		tmp_status = _i2c_master_address_response(module);
     4bc:	1c30      	adds	r0, r6, #0
     4be:	4b2e      	ldr	r3, [pc, #184]	; (578 <_i2c_master_read_packet+0x15c>)
     4c0:	4798      	blx	r3
     4c2:	9001      	str	r0, [sp, #4]
     4c4:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     4c6:	d148      	bne.n	55a <_i2c_master_read_packet+0x13e>
     4c8:	3c01      	subs	r4, #1
     4ca:	b2a4      	uxth	r4, r4
     4cc:	2100      	movs	r1, #0
     4ce:	4688      	mov	r8, r1
		/* Read data buffer. */
		while (tmp_data_length--) {
     4d0:	4a2a      	ldr	r2, [pc, #168]	; (57c <_i2c_master_read_packet+0x160>)
     4d2:	4693      	mov	fp, r2
     4d4:	e026      	b.n	524 <_i2c_master_read_packet+0x108>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     4d6:	8b6b      	ldrh	r3, [r5, #26]
     4d8:	0699      	lsls	r1, r3, #26
     4da:	d53d      	bpl.n	558 <_i2c_master_read_packet+0x13c>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     4dc:	464a      	mov	r2, r9
     4de:	2a00      	cmp	r2, #0
     4e0:	d102      	bne.n	4e8 <_i2c_master_read_packet+0xcc>
     4e2:	2c00      	cmp	r4, #0
     4e4:	d002      	beq.n	4ec <_i2c_master_read_packet+0xd0>
     4e6:	e009      	b.n	4fc <_i2c_master_read_packet+0xe0>
					((sclsm_flag) && (tmp_data_length == 1))) {
     4e8:	2c01      	cmp	r4, #1
     4ea:	d107      	bne.n	4fc <_i2c_master_read_packet+0xe0>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4ec:	686a      	ldr	r2, [r5, #4]
     4ee:	2380      	movs	r3, #128	; 0x80
     4f0:	02db      	lsls	r3, r3, #11
     4f2:	4313      	orrs	r3, r2
     4f4:	606b      	str	r3, [r5, #4]
     4f6:	3c01      	subs	r4, #1
     4f8:	b2a4      	uxth	r4, r4
     4fa:	e013      	b.n	524 <_i2c_master_read_packet+0x108>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     4fc:	1c30      	adds	r0, r6, #0
     4fe:	4b20      	ldr	r3, [pc, #128]	; (580 <_i2c_master_read_packet+0x164>)
     500:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     502:	4643      	mov	r3, r8
     504:	3301      	adds	r3, #1
     506:	b29b      	uxth	r3, r3
     508:	469a      	mov	sl, r3
     50a:	2328      	movs	r3, #40	; 0x28
     50c:	5ceb      	ldrb	r3, [r5, r3]
     50e:	6879      	ldr	r1, [r7, #4]
     510:	4642      	mov	r2, r8
     512:	548b      	strb	r3, [r1, r2]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     514:	1c30      	adds	r0, r6, #0
     516:	4b17      	ldr	r3, [pc, #92]	; (574 <_i2c_master_read_packet+0x158>)
     518:	4798      	blx	r3
     51a:	3c01      	subs	r4, #1
     51c:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     51e:	2800      	cmp	r0, #0
     520:	d103      	bne.n	52a <_i2c_master_read_packet+0x10e>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     522:	46d0      	mov	r8, sl
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     524:	455c      	cmp	r4, fp
     526:	d1d6      	bne.n	4d6 <_i2c_master_read_packet+0xba>
     528:	e001      	b.n	52e <_i2c_master_read_packet+0x112>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     52a:	46d0      	mov	r8, sl
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     52c:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     52e:	7ab3      	ldrb	r3, [r6, #10]
     530:	2b00      	cmp	r3, #0
     532:	d007      	beq.n	544 <_i2c_master_read_packet+0x128>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     534:	1c30      	adds	r0, r6, #0
     536:	4b12      	ldr	r3, [pc, #72]	; (580 <_i2c_master_read_packet+0x164>)
     538:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     53a:	686a      	ldr	r2, [r5, #4]
     53c:	23c0      	movs	r3, #192	; 0xc0
     53e:	029b      	lsls	r3, r3, #10
     540:	4313      	orrs	r3, r2
     542:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     544:	1c30      	adds	r0, r6, #0
     546:	4b0e      	ldr	r3, [pc, #56]	; (580 <_i2c_master_read_packet+0x164>)
     548:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     54a:	2328      	movs	r3, #40	; 0x28
     54c:	5cea      	ldrb	r2, [r5, r3]
     54e:	687b      	ldr	r3, [r7, #4]
     550:	4641      	mov	r1, r8
     552:	545a      	strb	r2, [r3, r1]
     554:	9b01      	ldr	r3, [sp, #4]
     556:	e000      	b.n	55a <_i2c_master_read_packet+0x13e>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     558:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     55a:	1c18      	adds	r0, r3, #0
     55c:	b003      	add	sp, #12
     55e:	bc3c      	pop	{r2, r3, r4, r5}
     560:	4690      	mov	r8, r2
     562:	4699      	mov	r9, r3
     564:	46a2      	mov	sl, r4
     566:	46ab      	mov	fp, r5
     568:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	000003fd 	.word	0x000003fd
     570:	fffbffff 	.word	0xfffbffff
     574:	000003cd 	.word	0x000003cd
     578:	00000399 	.word	0x00000399
     57c:	0000ffff 	.word	0x0000ffff
     580:	000001dd 	.word	0x000001dd

00000584 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     584:	b5f0      	push	{r4, r5, r6, r7, lr}
     586:	465f      	mov	r7, fp
     588:	4656      	mov	r6, sl
     58a:	464d      	mov	r5, r9
     58c:	4644      	mov	r4, r8
     58e:	b4f0      	push	{r4, r5, r6, r7}
     590:	b083      	sub	sp, #12
     592:	1c06      	adds	r6, r0, #0
     594:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     596:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     598:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     59a:	4b32      	ldr	r3, [pc, #200]	; (664 <_i2c_master_write_packet+0xe0>)
     59c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     59e:	7a7b      	ldrb	r3, [r7, #9]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d003      	beq.n	5ac <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5a4:	7ab9      	ldrb	r1, [r7, #10]
     5a6:	1c30      	adds	r0, r6, #0
     5a8:	4b2f      	ldr	r3, [pc, #188]	; (668 <_i2c_master_write_packet+0xe4>)
     5aa:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5ac:	686a      	ldr	r2, [r5, #4]
     5ae:	4b2f      	ldr	r3, [pc, #188]	; (66c <_i2c_master_write_packet+0xe8>)
     5b0:	4013      	ands	r3, r2
     5b2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     5b4:	7a3b      	ldrb	r3, [r7, #8]
     5b6:	2b00      	cmp	r3, #0
     5b8:	d009      	beq.n	5ce <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5ba:	7a7a      	ldrb	r2, [r7, #9]
     5bc:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5be:	883b      	ldrh	r3, [r7, #0]
     5c0:	005b      	lsls	r3, r3, #1
     5c2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5c4:	2280      	movs	r2, #128	; 0x80
     5c6:	0212      	lsls	r2, r2, #8
     5c8:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5ca:	626b      	str	r3, [r5, #36]	; 0x24
     5cc:	e005      	b.n	5da <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5ce:	7a7a      	ldrb	r2, [r7, #9]
     5d0:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5d2:	883b      	ldrh	r3, [r7, #0]
     5d4:	005b      	lsls	r3, r3, #1
     5d6:	4313      	orrs	r3, r2
     5d8:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5da:	1c30      	adds	r0, r6, #0
     5dc:	4b24      	ldr	r3, [pc, #144]	; (670 <_i2c_master_write_packet+0xec>)
     5de:	4798      	blx	r3
     5e0:	1c03      	adds	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     5e2:	2b00      	cmp	r3, #0
     5e4:	d136      	bne.n	654 <_i2c_master_write_packet+0xd0>
		tmp_status = _i2c_master_address_response(module);
     5e6:	1c30      	adds	r0, r6, #0
     5e8:	4b22      	ldr	r3, [pc, #136]	; (674 <_i2c_master_write_packet+0xf0>)
     5ea:	4798      	blx	r3
     5ec:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     5ee:	2800      	cmp	r0, #0
     5f0:	d130      	bne.n	654 <_i2c_master_write_packet+0xd0>
     5f2:	46a0      	mov	r8, r4
     5f4:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     5f6:	2320      	movs	r3, #32
     5f8:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     5fa:	4a1a      	ldr	r2, [pc, #104]	; (664 <_i2c_master_write_packet+0xe0>)
     5fc:	4693      	mov	fp, r2
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     5fe:	4b1c      	ldr	r3, [pc, #112]	; (670 <_i2c_master_write_packet+0xec>)
     600:	469a      	mov	sl, r3
     602:	e011      	b.n	628 <_i2c_master_write_packet+0xa4>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     604:	8b6b      	ldrh	r3, [r5, #26]
     606:	464a      	mov	r2, r9
     608:	4213      	tst	r3, r2
     60a:	d022      	beq.n	652 <_i2c_master_write_packet+0xce>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     60c:	1c30      	adds	r0, r6, #0
     60e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     610:	687b      	ldr	r3, [r7, #4]
     612:	5d1a      	ldrb	r2, [r3, r4]
     614:	2328      	movs	r3, #40	; 0x28
     616:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     618:	1c30      	adds	r0, r6, #0
     61a:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     61c:	2800      	cmp	r0, #0
     61e:	d106      	bne.n	62e <_i2c_master_write_packet+0xaa>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     620:	8b6b      	ldrh	r3, [r5, #26]
     622:	3401      	adds	r4, #1
     624:	075a      	lsls	r2, r3, #29
     626:	d404      	bmi.n	632 <_i2c_master_write_packet+0xae>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     628:	4544      	cmp	r4, r8
     62a:	d1eb      	bne.n	604 <_i2c_master_write_packet+0x80>
     62c:	e003      	b.n	636 <_i2c_master_write_packet+0xb2>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     62e:	9001      	str	r0, [sp, #4]
     630:	e001      	b.n	636 <_i2c_master_write_packet+0xb2>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     632:	231e      	movs	r3, #30
     634:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     636:	7ab3      	ldrb	r3, [r6, #10]
     638:	9801      	ldr	r0, [sp, #4]
     63a:	2b00      	cmp	r3, #0
     63c:	d00a      	beq.n	654 <_i2c_master_write_packet+0xd0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     63e:	1c30      	adds	r0, r6, #0
     640:	4b08      	ldr	r3, [pc, #32]	; (664 <_i2c_master_write_packet+0xe0>)
     642:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     644:	686a      	ldr	r2, [r5, #4]
     646:	23c0      	movs	r3, #192	; 0xc0
     648:	029b      	lsls	r3, r3, #10
     64a:	4313      	orrs	r3, r2
     64c:	606b      	str	r3, [r5, #4]
     64e:	9801      	ldr	r0, [sp, #4]
     650:	e000      	b.n	654 <_i2c_master_write_packet+0xd0>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     652:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     654:	b003      	add	sp, #12
     656:	bc3c      	pop	{r2, r3, r4, r5}
     658:	4690      	mov	r8, r2
     65a:	4699      	mov	r9, r3
     65c:	46a2      	mov	sl, r4
     65e:	46ab      	mov	fp, r5
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	000001dd 	.word	0x000001dd
     668:	000003fd 	.word	0x000003fd
     66c:	fffbffff 	.word	0xfffbffff
     670:	000003cd 	.word	0x000003cd
     674:	00000399 	.word	0x00000399

00000678 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     678:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     67a:	2301      	movs	r3, #1
     67c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     67e:	4b01      	ldr	r3, [pc, #4]	; (684 <i2c_master_read_packet_wait+0xc>)
     680:	4798      	blx	r3
}
     682:	bd08      	pop	{r3, pc}
     684:	0000041d 	.word	0x0000041d

00000688 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     688:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     68a:	2301      	movs	r3, #1
     68c:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     68e:	4b01      	ldr	r3, [pc, #4]	; (694 <i2c_master_write_packet_wait+0xc>)
     690:	4798      	blx	r3
}
     692:	bd08      	pop	{r3, pc}
     694:	00000585 	.word	0x00000585

00000698 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     698:	b510      	push	{r4, lr}
     69a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     69c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     69e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     6a0:	4299      	cmp	r1, r3
     6a2:	d30c      	bcc.n	6be <_sercom_get_sync_baud_val+0x26>
     6a4:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     6a6:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     6a8:	1c60      	adds	r0, r4, #1
     6aa:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     6ac:	428b      	cmp	r3, r1
     6ae:	d801      	bhi.n	6b4 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     6b0:	1c04      	adds	r4, r0, #0
     6b2:	e7f8      	b.n	6a6 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6b4:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     6b6:	2cff      	cmp	r4, #255	; 0xff
     6b8:	d801      	bhi.n	6be <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     6ba:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     6bc:	2000      	movs	r0, #0
	}
}
     6be:	bd10      	pop	{r4, pc}

000006c0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c2:	465f      	mov	r7, fp
     6c4:	4656      	mov	r6, sl
     6c6:	464d      	mov	r5, r9
     6c8:	4644      	mov	r4, r8
     6ca:	b4f0      	push	{r4, r5, r6, r7}
     6cc:	b087      	sub	sp, #28
     6ce:	1c06      	adds	r6, r0, #0
     6d0:	1c0d      	adds	r5, r1, #0
     6d2:	9204      	str	r2, [sp, #16]
     6d4:	aa10      	add	r2, sp, #64	; 0x40
     6d6:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6d8:	1c32      	adds	r2, r6, #0
     6da:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6dc:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6de:	428a      	cmp	r2, r1
     6e0:	d900      	bls.n	6e4 <_sercom_get_async_baud_val+0x24>
     6e2:	e0b3      	b.n	84c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     6e4:	2b00      	cmp	r3, #0
     6e6:	d14b      	bne.n	780 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     6e8:	2100      	movs	r1, #0
     6ea:	1c32      	adds	r2, r6, #0
     6ec:	4c5e      	ldr	r4, [pc, #376]	; (868 <_sercom_get_async_baud_val+0x1a8>)
     6ee:	47a0      	blx	r4
     6f0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     6f2:	1c2e      	adds	r6, r5, #0
     6f4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6f6:	2000      	movs	r0, #0
     6f8:	2100      	movs	r1, #0
     6fa:	2200      	movs	r2, #0
     6fc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     6fe:	243f      	movs	r4, #63	; 0x3f
     700:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     702:	2501      	movs	r5, #1
     704:	46a8      	mov	r8, r5
     706:	9002      	str	r0, [sp, #8]
     708:	9103      	str	r1, [sp, #12]
     70a:	4661      	mov	r1, ip
     70c:	3920      	subs	r1, #32
     70e:	d403      	bmi.n	718 <_sercom_get_async_baud_val+0x58>
     710:	4640      	mov	r0, r8
     712:	4088      	lsls	r0, r1
     714:	4681      	mov	r9, r0
     716:	e005      	b.n	724 <_sercom_get_async_baud_val+0x64>
     718:	2120      	movs	r1, #32
     71a:	4665      	mov	r5, ip
     71c:	1b4c      	subs	r4, r1, r5
     71e:	4640      	mov	r0, r8
     720:	40e0      	lsrs	r0, r4
     722:	4681      	mov	r9, r0
     724:	4641      	mov	r1, r8
     726:	4664      	mov	r4, ip
     728:	40a1      	lsls	r1, r4
     72a:	468a      	mov	sl, r1

		r = r << 1;
     72c:	1c10      	adds	r0, r2, #0
     72e:	1c19      	adds	r1, r3, #0
     730:	1880      	adds	r0, r0, r2
     732:	4159      	adcs	r1, r3
     734:	1c02      	adds	r2, r0, #0
     736:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     738:	465d      	mov	r5, fp
     73a:	464c      	mov	r4, r9
     73c:	4225      	tst	r5, r4
     73e:	d002      	beq.n	746 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     740:	4642      	mov	r2, r8
     742:	4302      	orrs	r2, r0
     744:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     746:	429f      	cmp	r7, r3
     748:	d80c      	bhi.n	764 <_sercom_get_async_baud_val+0xa4>
     74a:	d101      	bne.n	750 <_sercom_get_async_baud_val+0x90>
     74c:	4296      	cmp	r6, r2
     74e:	d809      	bhi.n	764 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     750:	1b92      	subs	r2, r2, r6
     752:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     754:	4650      	mov	r0, sl
     756:	9d02      	ldr	r5, [sp, #8]
     758:	4328      	orrs	r0, r5
     75a:	4649      	mov	r1, r9
     75c:	9c03      	ldr	r4, [sp, #12]
     75e:	4321      	orrs	r1, r4
     760:	9002      	str	r0, [sp, #8]
     762:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     764:	4665      	mov	r5, ip
     766:	3d01      	subs	r5, #1
     768:	46ac      	mov	ip, r5
     76a:	d2ce      	bcs.n	70a <_sercom_get_async_baud_val+0x4a>
     76c:	9802      	ldr	r0, [sp, #8]
     76e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     770:	4b3c      	ldr	r3, [pc, #240]	; (864 <_sercom_get_async_baud_val+0x1a4>)
     772:	4a3b      	ldr	r2, [pc, #236]	; (860 <_sercom_get_async_baud_val+0x1a0>)
     774:	1a12      	subs	r2, r2, r0
     776:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     778:	0c12      	lsrs	r2, r2, #16
     77a:	041b      	lsls	r3, r3, #16
     77c:	431a      	orrs	r2, r3
     77e:	e062      	b.n	846 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     780:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     782:	2b01      	cmp	r3, #1
     784:	d15f      	bne.n	846 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     786:	0f4f      	lsrs	r7, r1, #29
     788:	46b9      	mov	r9, r7
     78a:	00cd      	lsls	r5, r1, #3
     78c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     78e:	2100      	movs	r1, #0
     790:	1c32      	adds	r2, r6, #0
     792:	2300      	movs	r3, #0
     794:	4c34      	ldr	r4, [pc, #208]	; (868 <_sercom_get_async_baud_val+0x1a8>)
     796:	47a0      	blx	r4
     798:	1c06      	adds	r6, r0, #0
     79a:	1c0f      	adds	r7, r1, #0
     79c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     79e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     7a0:	9602      	str	r6, [sp, #8]
     7a2:	9703      	str	r7, [sp, #12]
     7a4:	469a      	mov	sl, r3
     7a6:	4650      	mov	r0, sl
     7a8:	b2c0      	uxtb	r0, r0
     7aa:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7ac:	2100      	movs	r1, #0
     7ae:	4688      	mov	r8, r1
     7b0:	2200      	movs	r2, #0
     7b2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     7b4:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     7b6:	1c27      	adds	r7, r4, #0
     7b8:	3f20      	subs	r7, #32
     7ba:	d403      	bmi.n	7c4 <_sercom_get_async_baud_val+0x104>
     7bc:	1c2e      	adds	r6, r5, #0
     7be:	40be      	lsls	r6, r7
     7c0:	9601      	str	r6, [sp, #4]
     7c2:	e004      	b.n	7ce <_sercom_get_async_baud_val+0x10e>
     7c4:	2020      	movs	r0, #32
     7c6:	1b07      	subs	r7, r0, r4
     7c8:	1c29      	adds	r1, r5, #0
     7ca:	40f9      	lsrs	r1, r7
     7cc:	9101      	str	r1, [sp, #4]
     7ce:	1c2e      	adds	r6, r5, #0
     7d0:	40a6      	lsls	r6, r4
     7d2:	9600      	str	r6, [sp, #0]

		r = r << 1;
     7d4:	1c10      	adds	r0, r2, #0
     7d6:	1c19      	adds	r1, r3, #0
     7d8:	1880      	adds	r0, r0, r2
     7da:	4159      	adcs	r1, r3
     7dc:	1c02      	adds	r2, r0, #0
     7de:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     7e0:	465f      	mov	r7, fp
     7e2:	4037      	ands	r7, r6
     7e4:	46bc      	mov	ip, r7
     7e6:	9e01      	ldr	r6, [sp, #4]
     7e8:	464f      	mov	r7, r9
     7ea:	403e      	ands	r6, r7
     7ec:	4667      	mov	r7, ip
     7ee:	433e      	orrs	r6, r7
     7f0:	d002      	beq.n	7f8 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     7f2:	1c2a      	adds	r2, r5, #0
     7f4:	4302      	orrs	r2, r0
     7f6:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     7f8:	9803      	ldr	r0, [sp, #12]
     7fa:	4298      	cmp	r0, r3
     7fc:	d80b      	bhi.n	816 <_sercom_get_async_baud_val+0x156>
     7fe:	d102      	bne.n	806 <_sercom_get_async_baud_val+0x146>
     800:	9902      	ldr	r1, [sp, #8]
     802:	4291      	cmp	r1, r2
     804:	d807      	bhi.n	816 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     806:	9e02      	ldr	r6, [sp, #8]
     808:	9f03      	ldr	r7, [sp, #12]
     80a:	1b92      	subs	r2, r2, r6
     80c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     80e:	4647      	mov	r7, r8
     810:	9800      	ldr	r0, [sp, #0]
     812:	4307      	orrs	r7, r0
     814:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     816:	3c01      	subs	r4, #1
     818:	d2cd      	bcs.n	7b6 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     81a:	4641      	mov	r1, r8
     81c:	4652      	mov	r2, sl
     81e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     820:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     822:	4c12      	ldr	r4, [pc, #72]	; (86c <_sercom_get_async_baud_val+0x1ac>)
     824:	42a3      	cmp	r3, r4
     826:	d908      	bls.n	83a <_sercom_get_async_baud_val+0x17a>
     828:	9a05      	ldr	r2, [sp, #20]
     82a:	3201      	adds	r2, #1
     82c:	b2d2      	uxtb	r2, r2
     82e:	9205      	str	r2, [sp, #20]
     830:	2601      	movs	r6, #1
     832:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     834:	4657      	mov	r7, sl
     836:	2f08      	cmp	r7, #8
     838:	d1b5      	bne.n	7a6 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     83a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     83c:	9805      	ldr	r0, [sp, #20]
     83e:	2808      	cmp	r0, #8
     840:	d004      	beq.n	84c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     842:	0342      	lsls	r2, r0, #13
     844:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     846:	9c04      	ldr	r4, [sp, #16]
     848:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     84a:	2400      	movs	r4, #0
}
     84c:	1c20      	adds	r0, r4, #0
     84e:	b007      	add	sp, #28
     850:	bc3c      	pop	{r2, r3, r4, r5}
     852:	4690      	mov	r8, r2
     854:	4699      	mov	r9, r3
     856:	46a2      	mov	sl, r4
     858:	46ab      	mov	fp, r5
     85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00000000 	.word	0x00000000
     864:	00000001 	.word	0x00000001
     868:	00001b65 	.word	0x00001b65
     86c:	00001fff 	.word	0x00001fff

00000870 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     870:	b510      	push	{r4, lr}
     872:	b082      	sub	sp, #8
     874:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     876:	4b0f      	ldr	r3, [pc, #60]	; (8b4 <sercom_set_gclk_generator+0x44>)
     878:	781b      	ldrb	r3, [r3, #0]
     87a:	2b00      	cmp	r3, #0
     87c:	d001      	beq.n	882 <sercom_set_gclk_generator+0x12>
     87e:	2900      	cmp	r1, #0
     880:	d00d      	beq.n	89e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     882:	a901      	add	r1, sp, #4
     884:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     886:	2013      	movs	r0, #19
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <sercom_set_gclk_generator+0x48>)
     88a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     88c:	2013      	movs	r0, #19
     88e:	4b0b      	ldr	r3, [pc, #44]	; (8bc <sercom_set_gclk_generator+0x4c>)
     890:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     892:	4b08      	ldr	r3, [pc, #32]	; (8b4 <sercom_set_gclk_generator+0x44>)
     894:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     896:	2201      	movs	r2, #1
     898:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     89a:	2000      	movs	r0, #0
     89c:	e007      	b.n	8ae <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     89e:	4b05      	ldr	r3, [pc, #20]	; (8b4 <sercom_set_gclk_generator+0x44>)
     8a0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     8a2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     8a4:	1b14      	subs	r4, r2, r4
     8a6:	1e62      	subs	r2, r4, #1
     8a8:	4194      	sbcs	r4, r2
     8aa:	4264      	negs	r4, r4
     8ac:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     8ae:	b002      	add	sp, #8
     8b0:	bd10      	pop	{r4, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	20000098 	.word	0x20000098
     8b8:	000014e9 	.word	0x000014e9
     8bc:	0000145d 	.word	0x0000145d

000008c0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     8c0:	4b44      	ldr	r3, [pc, #272]	; (9d4 <_sercom_get_default_pad+0x114>)
     8c2:	4298      	cmp	r0, r3
     8c4:	d033      	beq.n	92e <_sercom_get_default_pad+0x6e>
     8c6:	d806      	bhi.n	8d6 <_sercom_get_default_pad+0x16>
     8c8:	4b43      	ldr	r3, [pc, #268]	; (9d8 <_sercom_get_default_pad+0x118>)
     8ca:	4298      	cmp	r0, r3
     8cc:	d00d      	beq.n	8ea <_sercom_get_default_pad+0x2a>
     8ce:	4b43      	ldr	r3, [pc, #268]	; (9dc <_sercom_get_default_pad+0x11c>)
     8d0:	4298      	cmp	r0, r3
     8d2:	d01b      	beq.n	90c <_sercom_get_default_pad+0x4c>
     8d4:	e06f      	b.n	9b6 <_sercom_get_default_pad+0xf6>
     8d6:	4b42      	ldr	r3, [pc, #264]	; (9e0 <_sercom_get_default_pad+0x120>)
     8d8:	4298      	cmp	r0, r3
     8da:	d04a      	beq.n	972 <_sercom_get_default_pad+0xb2>
     8dc:	4b41      	ldr	r3, [pc, #260]	; (9e4 <_sercom_get_default_pad+0x124>)
     8de:	4298      	cmp	r0, r3
     8e0:	d058      	beq.n	994 <_sercom_get_default_pad+0xd4>
     8e2:	4b41      	ldr	r3, [pc, #260]	; (9e8 <_sercom_get_default_pad+0x128>)
     8e4:	4298      	cmp	r0, r3
     8e6:	d166      	bne.n	9b6 <_sercom_get_default_pad+0xf6>
     8e8:	e032      	b.n	950 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ea:	2901      	cmp	r1, #1
     8ec:	d065      	beq.n	9ba <_sercom_get_default_pad+0xfa>
     8ee:	2900      	cmp	r1, #0
     8f0:	d004      	beq.n	8fc <_sercom_get_default_pad+0x3c>
     8f2:	2902      	cmp	r1, #2
     8f4:	d006      	beq.n	904 <_sercom_get_default_pad+0x44>
     8f6:	2903      	cmp	r1, #3
     8f8:	d006      	beq.n	908 <_sercom_get_default_pad+0x48>
     8fa:	e001      	b.n	900 <_sercom_get_default_pad+0x40>
     8fc:	483b      	ldr	r0, [pc, #236]	; (9ec <_sercom_get_default_pad+0x12c>)
     8fe:	e067      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     900:	2000      	movs	r0, #0
     902:	e065      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     904:	483a      	ldr	r0, [pc, #232]	; (9f0 <_sercom_get_default_pad+0x130>)
     906:	e063      	b.n	9d0 <_sercom_get_default_pad+0x110>
     908:	483a      	ldr	r0, [pc, #232]	; (9f4 <_sercom_get_default_pad+0x134>)
     90a:	e061      	b.n	9d0 <_sercom_get_default_pad+0x110>
     90c:	2901      	cmp	r1, #1
     90e:	d056      	beq.n	9be <_sercom_get_default_pad+0xfe>
     910:	2900      	cmp	r1, #0
     912:	d004      	beq.n	91e <_sercom_get_default_pad+0x5e>
     914:	2902      	cmp	r1, #2
     916:	d006      	beq.n	926 <_sercom_get_default_pad+0x66>
     918:	2903      	cmp	r1, #3
     91a:	d006      	beq.n	92a <_sercom_get_default_pad+0x6a>
     91c:	e001      	b.n	922 <_sercom_get_default_pad+0x62>
     91e:	2003      	movs	r0, #3
     920:	e056      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     922:	2000      	movs	r0, #0
     924:	e054      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     926:	4834      	ldr	r0, [pc, #208]	; (9f8 <_sercom_get_default_pad+0x138>)
     928:	e052      	b.n	9d0 <_sercom_get_default_pad+0x110>
     92a:	4834      	ldr	r0, [pc, #208]	; (9fc <_sercom_get_default_pad+0x13c>)
     92c:	e050      	b.n	9d0 <_sercom_get_default_pad+0x110>
     92e:	2901      	cmp	r1, #1
     930:	d047      	beq.n	9c2 <_sercom_get_default_pad+0x102>
     932:	2900      	cmp	r1, #0
     934:	d004      	beq.n	940 <_sercom_get_default_pad+0x80>
     936:	2902      	cmp	r1, #2
     938:	d006      	beq.n	948 <_sercom_get_default_pad+0x88>
     93a:	2903      	cmp	r1, #3
     93c:	d006      	beq.n	94c <_sercom_get_default_pad+0x8c>
     93e:	e001      	b.n	944 <_sercom_get_default_pad+0x84>
     940:	482f      	ldr	r0, [pc, #188]	; (a00 <_sercom_get_default_pad+0x140>)
     942:	e045      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     944:	2000      	movs	r0, #0
     946:	e043      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     948:	482e      	ldr	r0, [pc, #184]	; (a04 <_sercom_get_default_pad+0x144>)
     94a:	e041      	b.n	9d0 <_sercom_get_default_pad+0x110>
     94c:	482e      	ldr	r0, [pc, #184]	; (a08 <_sercom_get_default_pad+0x148>)
     94e:	e03f      	b.n	9d0 <_sercom_get_default_pad+0x110>
     950:	2901      	cmp	r1, #1
     952:	d038      	beq.n	9c6 <_sercom_get_default_pad+0x106>
     954:	2900      	cmp	r1, #0
     956:	d004      	beq.n	962 <_sercom_get_default_pad+0xa2>
     958:	2902      	cmp	r1, #2
     95a:	d006      	beq.n	96a <_sercom_get_default_pad+0xaa>
     95c:	2903      	cmp	r1, #3
     95e:	d006      	beq.n	96e <_sercom_get_default_pad+0xae>
     960:	e001      	b.n	966 <_sercom_get_default_pad+0xa6>
     962:	482a      	ldr	r0, [pc, #168]	; (a0c <_sercom_get_default_pad+0x14c>)
     964:	e034      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     966:	2000      	movs	r0, #0
     968:	e032      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     96a:	4829      	ldr	r0, [pc, #164]	; (a10 <_sercom_get_default_pad+0x150>)
     96c:	e030      	b.n	9d0 <_sercom_get_default_pad+0x110>
     96e:	4829      	ldr	r0, [pc, #164]	; (a14 <_sercom_get_default_pad+0x154>)
     970:	e02e      	b.n	9d0 <_sercom_get_default_pad+0x110>
     972:	2901      	cmp	r1, #1
     974:	d029      	beq.n	9ca <_sercom_get_default_pad+0x10a>
     976:	2900      	cmp	r1, #0
     978:	d004      	beq.n	984 <_sercom_get_default_pad+0xc4>
     97a:	2902      	cmp	r1, #2
     97c:	d006      	beq.n	98c <_sercom_get_default_pad+0xcc>
     97e:	2903      	cmp	r1, #3
     980:	d006      	beq.n	990 <_sercom_get_default_pad+0xd0>
     982:	e001      	b.n	988 <_sercom_get_default_pad+0xc8>
     984:	4824      	ldr	r0, [pc, #144]	; (a18 <_sercom_get_default_pad+0x158>)
     986:	e023      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     988:	2000      	movs	r0, #0
     98a:	e021      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     98c:	4823      	ldr	r0, [pc, #140]	; (a1c <_sercom_get_default_pad+0x15c>)
     98e:	e01f      	b.n	9d0 <_sercom_get_default_pad+0x110>
     990:	4823      	ldr	r0, [pc, #140]	; (a20 <_sercom_get_default_pad+0x160>)
     992:	e01d      	b.n	9d0 <_sercom_get_default_pad+0x110>
     994:	2901      	cmp	r1, #1
     996:	d01a      	beq.n	9ce <_sercom_get_default_pad+0x10e>
     998:	2900      	cmp	r1, #0
     99a:	d004      	beq.n	9a6 <_sercom_get_default_pad+0xe6>
     99c:	2902      	cmp	r1, #2
     99e:	d006      	beq.n	9ae <_sercom_get_default_pad+0xee>
     9a0:	2903      	cmp	r1, #3
     9a2:	d006      	beq.n	9b2 <_sercom_get_default_pad+0xf2>
     9a4:	e001      	b.n	9aa <_sercom_get_default_pad+0xea>
     9a6:	481f      	ldr	r0, [pc, #124]	; (a24 <_sercom_get_default_pad+0x164>)
     9a8:	e012      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9aa:	2000      	movs	r0, #0
     9ac:	e010      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ae:	481e      	ldr	r0, [pc, #120]	; (a28 <_sercom_get_default_pad+0x168>)
     9b0:	e00e      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9b2:	481e      	ldr	r0, [pc, #120]	; (a2c <_sercom_get_default_pad+0x16c>)
     9b4:	e00c      	b.n	9d0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9b6:	2000      	movs	r0, #0
     9b8:	e00a      	b.n	9d0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ba:	481d      	ldr	r0, [pc, #116]	; (a30 <_sercom_get_default_pad+0x170>)
     9bc:	e008      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9be:	481d      	ldr	r0, [pc, #116]	; (a34 <_sercom_get_default_pad+0x174>)
     9c0:	e006      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9c2:	481d      	ldr	r0, [pc, #116]	; (a38 <_sercom_get_default_pad+0x178>)
     9c4:	e004      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9c6:	481d      	ldr	r0, [pc, #116]	; (a3c <_sercom_get_default_pad+0x17c>)
     9c8:	e002      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9ca:	481d      	ldr	r0, [pc, #116]	; (a40 <_sercom_get_default_pad+0x180>)
     9cc:	e000      	b.n	9d0 <_sercom_get_default_pad+0x110>
     9ce:	481d      	ldr	r0, [pc, #116]	; (a44 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     9d0:	4770      	bx	lr
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	42001000 	.word	0x42001000
     9d8:	42000800 	.word	0x42000800
     9dc:	42000c00 	.word	0x42000c00
     9e0:	42001800 	.word	0x42001800
     9e4:	42001c00 	.word	0x42001c00
     9e8:	42001400 	.word	0x42001400
     9ec:	00040003 	.word	0x00040003
     9f0:	00060003 	.word	0x00060003
     9f4:	00070003 	.word	0x00070003
     9f8:	001e0003 	.word	0x001e0003
     9fc:	001f0003 	.word	0x001f0003
     a00:	00080003 	.word	0x00080003
     a04:	000a0003 	.word	0x000a0003
     a08:	000b0003 	.word	0x000b0003
     a0c:	00100003 	.word	0x00100003
     a10:	00120003 	.word	0x00120003
     a14:	00130003 	.word	0x00130003
     a18:	000c0003 	.word	0x000c0003
     a1c:	000e0003 	.word	0x000e0003
     a20:	000f0003 	.word	0x000f0003
     a24:	00160003 	.word	0x00160003
     a28:	00180003 	.word	0x00180003
     a2c:	00190003 	.word	0x00190003
     a30:	00050003 	.word	0x00050003
     a34:	00010003 	.word	0x00010003
     a38:	00090003 	.word	0x00090003
     a3c:	00110003 	.word	0x00110003
     a40:	000d0003 	.word	0x000d0003
     a44:	00170003 	.word	0x00170003

00000a48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     a48:	b570      	push	{r4, r5, r6, lr}
     a4a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a4c:	4a0c      	ldr	r2, [pc, #48]	; (a80 <_sercom_get_sercom_inst_index+0x38>)
     a4e:	466b      	mov	r3, sp
     a50:	ca70      	ldmia	r2!, {r4, r5, r6}
     a52:	c370      	stmia	r3!, {r4, r5, r6}
     a54:	ca32      	ldmia	r2!, {r1, r4, r5}
     a56:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a58:	9e00      	ldr	r6, [sp, #0]
     a5a:	4286      	cmp	r6, r0
     a5c:	d006      	beq.n	a6c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a5e:	2301      	movs	r3, #1
     a60:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a62:	4669      	mov	r1, sp
     a64:	5852      	ldr	r2, [r2, r1]
     a66:	4282      	cmp	r2, r0
     a68:	d103      	bne.n	a72 <_sercom_get_sercom_inst_index+0x2a>
     a6a:	e000      	b.n	a6e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a6c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     a6e:	b2d8      	uxtb	r0, r3
     a70:	e003      	b.n	a7a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a72:	3301      	adds	r3, #1
     a74:	2b06      	cmp	r3, #6
     a76:	d1f3      	bne.n	a60 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     a78:	2000      	movs	r0, #0
}
     a7a:	b006      	add	sp, #24
     a7c:	bd70      	pop	{r4, r5, r6, pc}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	00002bf4 	.word	0x00002bf4

00000a84 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a84:	4770      	bx	lr
     a86:	46c0      	nop			; (mov r8, r8)

00000a88 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     a8a:	4b0a      	ldr	r3, [pc, #40]	; (ab4 <_sercom_set_handler+0x2c>)
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b00      	cmp	r3, #0
     a90:	d10c      	bne.n	aac <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a92:	4f09      	ldr	r7, [pc, #36]	; (ab8 <_sercom_set_handler+0x30>)
     a94:	4e09      	ldr	r6, [pc, #36]	; (abc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a96:	4d0a      	ldr	r5, [pc, #40]	; (ac0 <_sercom_set_handler+0x38>)
     a98:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a9a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a9c:	195a      	adds	r2, r3, r5
     a9e:	6014      	str	r4, [r2, #0]
     aa0:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aa2:	2b18      	cmp	r3, #24
     aa4:	d1f9      	bne.n	a9a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     aa6:	2201      	movs	r2, #1
     aa8:	4b02      	ldr	r3, [pc, #8]	; (ab4 <_sercom_set_handler+0x2c>)
     aaa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     aac:	0080      	lsls	r0, r0, #2
     aae:	4b02      	ldr	r3, [pc, #8]	; (ab8 <_sercom_set_handler+0x30>)
     ab0:	50c1      	str	r1, [r0, r3]
}
     ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab4:	2000009c 	.word	0x2000009c
     ab8:	200000a0 	.word	0x200000a0
     abc:	00000a85 	.word	0x00000a85
     ac0:	20000118 	.word	0x20000118

00000ac4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ac4:	b510      	push	{r4, lr}
     ac6:	b082      	sub	sp, #8
     ac8:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     aca:	4668      	mov	r0, sp
     acc:	4905      	ldr	r1, [pc, #20]	; (ae4 <_sercom_get_interrupt_vector+0x20>)
     ace:	2206      	movs	r2, #6
     ad0:	4b05      	ldr	r3, [pc, #20]	; (ae8 <_sercom_get_interrupt_vector+0x24>)
     ad2:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ad4:	1c20      	adds	r0, r4, #0
     ad6:	4b05      	ldr	r3, [pc, #20]	; (aec <_sercom_get_interrupt_vector+0x28>)
     ad8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ada:	466b      	mov	r3, sp
     adc:	5618      	ldrsb	r0, [r3, r0]
}
     ade:	b002      	add	sp, #8
     ae0:	bd10      	pop	{r4, pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	00002c0c 	.word	0x00002c0c
     ae8:	00001bf5 	.word	0x00001bf5
     aec:	00000a49 	.word	0x00000a49

00000af0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     af0:	b508      	push	{r3, lr}
     af2:	4b02      	ldr	r3, [pc, #8]	; (afc <SERCOM0_Handler+0xc>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	2000      	movs	r0, #0
     af8:	4798      	blx	r3
     afa:	bd08      	pop	{r3, pc}
     afc:	200000a0 	.word	0x200000a0

00000b00 <SERCOM1_Handler>:
     b00:	b508      	push	{r3, lr}
     b02:	4b02      	ldr	r3, [pc, #8]	; (b0c <SERCOM1_Handler+0xc>)
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	2001      	movs	r0, #1
     b08:	4798      	blx	r3
     b0a:	bd08      	pop	{r3, pc}
     b0c:	200000a0 	.word	0x200000a0

00000b10 <SERCOM2_Handler>:
     b10:	b508      	push	{r3, lr}
     b12:	4b02      	ldr	r3, [pc, #8]	; (b1c <SERCOM2_Handler+0xc>)
     b14:	689b      	ldr	r3, [r3, #8]
     b16:	2002      	movs	r0, #2
     b18:	4798      	blx	r3
     b1a:	bd08      	pop	{r3, pc}
     b1c:	200000a0 	.word	0x200000a0

00000b20 <SERCOM3_Handler>:
     b20:	b508      	push	{r3, lr}
     b22:	4b02      	ldr	r3, [pc, #8]	; (b2c <SERCOM3_Handler+0xc>)
     b24:	68db      	ldr	r3, [r3, #12]
     b26:	2003      	movs	r0, #3
     b28:	4798      	blx	r3
     b2a:	bd08      	pop	{r3, pc}
     b2c:	200000a0 	.word	0x200000a0

00000b30 <SERCOM4_Handler>:
     b30:	b508      	push	{r3, lr}
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <SERCOM4_Handler+0xc>)
     b34:	691b      	ldr	r3, [r3, #16]
     b36:	2004      	movs	r0, #4
     b38:	4798      	blx	r3
     b3a:	bd08      	pop	{r3, pc}
     b3c:	200000a0 	.word	0x200000a0

00000b40 <SERCOM5_Handler>:
     b40:	b508      	push	{r3, lr}
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <SERCOM5_Handler+0xc>)
     b44:	695b      	ldr	r3, [r3, #20]
     b46:	2005      	movs	r0, #5
     b48:	4798      	blx	r3
     b4a:	bd08      	pop	{r3, pc}
     b4c:	200000a0 	.word	0x200000a0

00000b50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b50:	b5f0      	push	{r4, r5, r6, r7, lr}
     b52:	465f      	mov	r7, fp
     b54:	4656      	mov	r6, sl
     b56:	464d      	mov	r5, r9
     b58:	4644      	mov	r4, r8
     b5a:	b4f0      	push	{r4, r5, r6, r7}
     b5c:	b091      	sub	sp, #68	; 0x44
     b5e:	1c05      	adds	r5, r0, #0
     b60:	1c0c      	adds	r4, r1, #0
     b62:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b64:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b66:	1c08      	adds	r0, r1, #0
     b68:	4bad      	ldr	r3, [pc, #692]	; (e20 <usart_init+0x2d0>)
     b6a:	4798      	blx	r3
     b6c:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b6e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b70:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b72:	07d9      	lsls	r1, r3, #31
     b74:	d500      	bpl.n	b78 <usart_init+0x28>
     b76:	e14b      	b.n	e10 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b78:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     b7a:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b7c:	079f      	lsls	r7, r3, #30
     b7e:	d500      	bpl.n	b82 <usart_init+0x32>
     b80:	e146      	b.n	e10 <usart_init+0x2c0>
     b82:	4ba8      	ldr	r3, [pc, #672]	; (e24 <usart_init+0x2d4>)
     b84:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b86:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b88:	2701      	movs	r7, #1
     b8a:	408f      	lsls	r7, r1
     b8c:	1c39      	adds	r1, r7, #0
     b8e:	4301      	orrs	r1, r0
     b90:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b92:	a90f      	add	r1, sp, #60	; 0x3c
     b94:	272d      	movs	r7, #45	; 0x2d
     b96:	5df3      	ldrb	r3, [r6, r7]
     b98:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b9a:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b9c:	b2d2      	uxtb	r2, r2
     b9e:	4690      	mov	r8, r2
     ba0:	1c10      	adds	r0, r2, #0
     ba2:	4ba1      	ldr	r3, [pc, #644]	; (e28 <usart_init+0x2d8>)
     ba4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ba6:	4640      	mov	r0, r8
     ba8:	4ba0      	ldr	r3, [pc, #640]	; (e2c <usart_init+0x2dc>)
     baa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     bac:	5df0      	ldrb	r0, [r6, r7]
     bae:	2100      	movs	r1, #0
     bb0:	4b9f      	ldr	r3, [pc, #636]	; (e30 <usart_init+0x2e0>)
     bb2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     bb4:	7af3      	ldrb	r3, [r6, #11]
     bb6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     bb8:	2324      	movs	r3, #36	; 0x24
     bba:	5cf3      	ldrb	r3, [r6, r3]
     bbc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     bbe:	2325      	movs	r3, #37	; 0x25
     bc0:	5cf3      	ldrb	r3, [r6, r3]
     bc2:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     bc4:	7ef3      	ldrb	r3, [r6, #27]
     bc6:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     bc8:	7f33      	ldrb	r3, [r6, #28]
     bca:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bcc:	6829      	ldr	r1, [r5, #0]
     bce:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bd0:	1c08      	adds	r0, r1, #0
     bd2:	4b93      	ldr	r3, [pc, #588]	; (e20 <usart_init+0x2d0>)
     bd4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bd6:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     bd8:	2200      	movs	r2, #0
     bda:	466b      	mov	r3, sp
     bdc:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     bde:	8a32      	ldrh	r2, [r6, #16]
     be0:	9202      	str	r2, [sp, #8]
     be2:	2380      	movs	r3, #128	; 0x80
     be4:	01db      	lsls	r3, r3, #7
     be6:	429a      	cmp	r2, r3
     be8:	d021      	beq.n	c2e <usart_init+0xde>
     bea:	2380      	movs	r3, #128	; 0x80
     bec:	01db      	lsls	r3, r3, #7
     bee:	429a      	cmp	r2, r3
     bf0:	d804      	bhi.n	bfc <usart_init+0xac>
     bf2:	2380      	movs	r3, #128	; 0x80
     bf4:	019b      	lsls	r3, r3, #6
     bf6:	429a      	cmp	r2, r3
     bf8:	d011      	beq.n	c1e <usart_init+0xce>
     bfa:	e008      	b.n	c0e <usart_init+0xbe>
     bfc:	23c0      	movs	r3, #192	; 0xc0
     bfe:	01db      	lsls	r3, r3, #7
     c00:	9f02      	ldr	r7, [sp, #8]
     c02:	429f      	cmp	r7, r3
     c04:	d00f      	beq.n	c26 <usart_init+0xd6>
     c06:	2380      	movs	r3, #128	; 0x80
     c08:	021b      	lsls	r3, r3, #8
     c0a:	429f      	cmp	r7, r3
     c0c:	d003      	beq.n	c16 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c0e:	2710      	movs	r7, #16
     c10:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c12:	2700      	movs	r7, #0
     c14:	e00e      	b.n	c34 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c16:	2703      	movs	r7, #3
     c18:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c1a:	2700      	movs	r7, #0
     c1c:	e00a      	b.n	c34 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c1e:	2710      	movs	r7, #16
     c20:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c22:	2701      	movs	r7, #1
     c24:	e006      	b.n	c34 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c26:	2708      	movs	r7, #8
     c28:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c2a:	2701      	movs	r7, #1
     c2c:	e002      	b.n	c34 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c2e:	2708      	movs	r7, #8
     c30:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c32:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c34:	6831      	ldr	r1, [r6, #0]
     c36:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     c38:	68f2      	ldr	r2, [r6, #12]
     c3a:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c3c:	6973      	ldr	r3, [r6, #20]
     c3e:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c40:	7e31      	ldrb	r1, [r6, #24]
     c42:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c44:	2326      	movs	r3, #38	; 0x26
     c46:	5cf3      	ldrb	r3, [r6, r3]
     c48:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     c4a:	6873      	ldr	r3, [r6, #4]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d013      	beq.n	c78 <usart_init+0x128>
     c50:	2280      	movs	r2, #128	; 0x80
     c52:	0552      	lsls	r2, r2, #21
     c54:	4293      	cmp	r3, r2
     c56:	d12e      	bne.n	cb6 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     c58:	2327      	movs	r3, #39	; 0x27
     c5a:	5cf3      	ldrb	r3, [r6, r3]
     c5c:	2b00      	cmp	r3, #0
     c5e:	d12e      	bne.n	cbe <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c60:	6a37      	ldr	r7, [r6, #32]
     c62:	b2c0      	uxtb	r0, r0
     c64:	4b73      	ldr	r3, [pc, #460]	; (e34 <usart_init+0x2e4>)
     c66:	4798      	blx	r3
     c68:	1c01      	adds	r1, r0, #0
     c6a:	1c38      	adds	r0, r7, #0
     c6c:	466a      	mov	r2, sp
     c6e:	3226      	adds	r2, #38	; 0x26
     c70:	4b71      	ldr	r3, [pc, #452]	; (e38 <usart_init+0x2e8>)
     c72:	4798      	blx	r3
     c74:	1c03      	adds	r3, r0, #0
     c76:	e01f      	b.n	cb8 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     c78:	2327      	movs	r3, #39	; 0x27
     c7a:	5cf3      	ldrb	r3, [r6, r3]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d00a      	beq.n	c96 <usart_init+0x146>
				status_code =
     c80:	9a06      	ldr	r2, [sp, #24]
     c82:	9200      	str	r2, [sp, #0]
     c84:	6a30      	ldr	r0, [r6, #32]
     c86:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     c88:	466a      	mov	r2, sp
     c8a:	3226      	adds	r2, #38	; 0x26
     c8c:	1c3b      	adds	r3, r7, #0
     c8e:	4f6b      	ldr	r7, [pc, #428]	; (e3c <usart_init+0x2ec>)
     c90:	47b8      	blx	r7
     c92:	1c03      	adds	r3, r0, #0
     c94:	e010      	b.n	cb8 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     c96:	6a31      	ldr	r1, [r6, #32]
     c98:	9107      	str	r1, [sp, #28]
     c9a:	b2c0      	uxtb	r0, r0
     c9c:	4b65      	ldr	r3, [pc, #404]	; (e34 <usart_init+0x2e4>)
     c9e:	4798      	blx	r3
     ca0:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     ca2:	9a06      	ldr	r2, [sp, #24]
     ca4:	9200      	str	r2, [sp, #0]
     ca6:	9807      	ldr	r0, [sp, #28]
     ca8:	466a      	mov	r2, sp
     caa:	3226      	adds	r2, #38	; 0x26
     cac:	1c3b      	adds	r3, r7, #0
     cae:	4f63      	ldr	r7, [pc, #396]	; (e3c <usart_init+0x2ec>)
     cb0:	47b8      	blx	r7
     cb2:	1c03      	adds	r3, r0, #0
     cb4:	e000      	b.n	cb8 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     cb6:	2300      	movs	r3, #0
     cb8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     cba:	d000      	beq.n	cbe <usart_init+0x16e>
     cbc:	e0a8      	b.n	e10 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     cbe:	7e73      	ldrb	r3, [r6, #25]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d002      	beq.n	cca <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     cc4:	7eb3      	ldrb	r3, [r6, #26]
     cc6:	4641      	mov	r1, r8
     cc8:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cca:	682a      	ldr	r2, [r5, #0]
     ccc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cce:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     cd0:	2b00      	cmp	r3, #0
     cd2:	d1fc      	bne.n	cce <usart_init+0x17e>
     cd4:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     cd6:	466b      	mov	r3, sp
     cd8:	3326      	adds	r3, #38	; 0x26
     cda:	881b      	ldrh	r3, [r3, #0]
     cdc:	4642      	mov	r2, r8
     cde:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ce0:	464b      	mov	r3, r9
     ce2:	9f03      	ldr	r7, [sp, #12]
     ce4:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     ce6:	9f04      	ldr	r7, [sp, #16]
     ce8:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     cea:	6871      	ldr	r1, [r6, #4]
     cec:	430b      	orrs	r3, r1
		config->sample_rate |
     cee:	9f02      	ldr	r7, [sp, #8]
     cf0:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cf2:	4652      	mov	r2, sl
     cf4:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     cf6:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cf8:	4659      	mov	r1, fp
     cfa:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     cfc:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     cfe:	2327      	movs	r3, #39	; 0x27
     d00:	5cf3      	ldrb	r3, [r6, r3]
     d02:	2b00      	cmp	r3, #0
     d04:	d101      	bne.n	d0a <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d06:	2304      	movs	r3, #4
     d08:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d0a:	7e71      	ldrb	r1, [r6, #25]
     d0c:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d0e:	7f33      	ldrb	r3, [r6, #28]
     d10:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     d12:	4319      	orrs	r1, r3
     d14:	7af2      	ldrb	r2, [r6, #11]
     d16:	7ab3      	ldrb	r3, [r6, #10]
     d18:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d1a:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d1c:	7f73      	ldrb	r3, [r6, #29]
     d1e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d20:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d22:	2324      	movs	r3, #36	; 0x24
     d24:	5cf3      	ldrb	r3, [r6, r3]
     d26:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d28:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d2a:	2325      	movs	r3, #37	; 0x25
     d2c:	5cf3      	ldrb	r3, [r6, r3]
     d2e:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     d30:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     d32:	8933      	ldrh	r3, [r6, #8]
     d34:	2bff      	cmp	r3, #255	; 0xff
     d36:	d00b      	beq.n	d50 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     d38:	7ef2      	ldrb	r2, [r6, #27]
     d3a:	2a00      	cmp	r2, #0
     d3c:	d003      	beq.n	d46 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     d3e:	22a0      	movs	r2, #160	; 0xa0
     d40:	04d2      	lsls	r2, r2, #19
     d42:	4317      	orrs	r7, r2
     d44:	e002      	b.n	d4c <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     d46:	2280      	movs	r2, #128	; 0x80
     d48:	0452      	lsls	r2, r2, #17
     d4a:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     d4c:	4319      	orrs	r1, r3
     d4e:	e005      	b.n	d5c <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     d50:	7ef3      	ldrb	r3, [r6, #27]
     d52:	2b00      	cmp	r3, #0
     d54:	d002      	beq.n	d5c <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d56:	2380      	movs	r3, #128	; 0x80
     d58:	04db      	lsls	r3, r3, #19
     d5a:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     d5c:	232c      	movs	r3, #44	; 0x2c
     d5e:	5cf3      	ldrb	r3, [r6, r3]
     d60:	2b00      	cmp	r3, #0
     d62:	d103      	bne.n	d6c <usart_init+0x21c>
     d64:	4b36      	ldr	r3, [pc, #216]	; (e40 <usart_init+0x2f0>)
     d66:	789b      	ldrb	r3, [r3, #2]
     d68:	079a      	lsls	r2, r3, #30
     d6a:	d501      	bpl.n	d70 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     d6c:	2380      	movs	r3, #128	; 0x80
     d6e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d70:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d72:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d74:	2b00      	cmp	r3, #0
     d76:	d1fc      	bne.n	d72 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     d78:	4643      	mov	r3, r8
     d7a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d7c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d7e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d80:	2b00      	cmp	r3, #0
     d82:	d1fc      	bne.n	d7e <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     d84:	4641      	mov	r1, r8
     d86:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d88:	ab0e      	add	r3, sp, #56	; 0x38
     d8a:	2280      	movs	r2, #128	; 0x80
     d8c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d8e:	2200      	movs	r2, #0
     d90:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d92:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d94:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     d96:	6b32      	ldr	r2, [r6, #48]	; 0x30
     d98:	920a      	str	r2, [sp, #40]	; 0x28
     d9a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     d9c:	930b      	str	r3, [sp, #44]	; 0x2c
     d9e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     da0:	970c      	str	r7, [sp, #48]	; 0x30
     da2:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     da4:	960d      	str	r6, [sp, #52]	; 0x34
     da6:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     da8:	ae0e      	add	r6, sp, #56	; 0x38
     daa:	b2f9      	uxtb	r1, r7
     dac:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dae:	aa0a      	add	r2, sp, #40	; 0x28
     db0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     db2:	2800      	cmp	r0, #0
     db4:	d102      	bne.n	dbc <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     db6:	1c20      	adds	r0, r4, #0
     db8:	4a22      	ldr	r2, [pc, #136]	; (e44 <usart_init+0x2f4>)
     dba:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     dbc:	1c43      	adds	r3, r0, #1
     dbe:	d005      	beq.n	dcc <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     dc0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     dc2:	0c00      	lsrs	r0, r0, #16
     dc4:	b2c0      	uxtb	r0, r0
     dc6:	1c31      	adds	r1, r6, #0
     dc8:	4a1f      	ldr	r2, [pc, #124]	; (e48 <usart_init+0x2f8>)
     dca:	4790      	blx	r2
     dcc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     dce:	2f04      	cmp	r7, #4
     dd0:	d1eb      	bne.n	daa <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     dd2:	2300      	movs	r3, #0
     dd4:	60eb      	str	r3, [r5, #12]
     dd6:	612b      	str	r3, [r5, #16]
     dd8:	616b      	str	r3, [r5, #20]
     dda:	61ab      	str	r3, [r5, #24]
     ddc:	61eb      	str	r3, [r5, #28]
     dde:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     de0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     de2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     de4:	2200      	movs	r2, #0
     de6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     de8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     dea:	2330      	movs	r3, #48	; 0x30
     dec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     dee:	2331      	movs	r3, #49	; 0x31
     df0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     df2:	2332      	movs	r3, #50	; 0x32
     df4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     df6:	2333      	movs	r3, #51	; 0x33
     df8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     dfa:	6828      	ldr	r0, [r5, #0]
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <usart_init+0x2d0>)
     dfe:	4798      	blx	r3
     e00:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e02:	4912      	ldr	r1, [pc, #72]	; (e4c <usart_init+0x2fc>)
     e04:	4b12      	ldr	r3, [pc, #72]	; (e50 <usart_init+0x300>)
     e06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e08:	00a4      	lsls	r4, r4, #2
     e0a:	4b12      	ldr	r3, [pc, #72]	; (e54 <usart_init+0x304>)
     e0c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     e0e:	2000      	movs	r0, #0
}
     e10:	b011      	add	sp, #68	; 0x44
     e12:	bc3c      	pop	{r2, r3, r4, r5}
     e14:	4690      	mov	r8, r2
     e16:	4699      	mov	r9, r3
     e18:	46a2      	mov	sl, r4
     e1a:	46ab      	mov	fp, r5
     e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	00000a49 	.word	0x00000a49
     e24:	40000400 	.word	0x40000400
     e28:	000014e9 	.word	0x000014e9
     e2c:	0000145d 	.word	0x0000145d
     e30:	00000871 	.word	0x00000871
     e34:	00001505 	.word	0x00001505
     e38:	00000699 	.word	0x00000699
     e3c:	000006c1 	.word	0x000006c1
     e40:	41002000 	.word	0x41002000
     e44:	000008c1 	.word	0x000008c1
     e48:	000015c5 	.word	0x000015c5
     e4c:	00000efd 	.word	0x00000efd
     e50:	00000a89 	.word	0x00000a89
     e54:	20000118 	.word	0x20000118

00000e58 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     e58:	b510      	push	{r4, lr}
     e5a:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e5c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e5e:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     e60:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e62:	2c00      	cmp	r4, #0
     e64:	d00d      	beq.n	e82 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     e66:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     e68:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e6a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     e6c:	2a00      	cmp	r2, #0
     e6e:	d108      	bne.n	e82 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     e70:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     e72:	2a00      	cmp	r2, #0
     e74:	d1fc      	bne.n	e70 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     e76:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e78:	2102      	movs	r1, #2
     e7a:	7e1a      	ldrb	r2, [r3, #24]
     e7c:	420a      	tst	r2, r1
     e7e:	d0fc      	beq.n	e7a <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     e80:	2000      	movs	r0, #0
}
     e82:	bd10      	pop	{r4, pc}

00000e84 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     e84:	b510      	push	{r4, lr}
     e86:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e88:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e8a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e8c:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e8e:	2a00      	cmp	r2, #0
     e90:	d033      	beq.n	efa <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     e94:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     e96:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     e98:	2b00      	cmp	r3, #0
     e9a:	d12e      	bne.n	efa <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     e9c:	7e23      	ldrb	r3, [r4, #24]
     e9e:	075a      	lsls	r2, r3, #29
     ea0:	d52b      	bpl.n	efa <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ea2:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ea4:	2b00      	cmp	r3, #0
     ea6:	d1fc      	bne.n	ea2 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ea8:	8b63      	ldrh	r3, [r4, #26]
     eaa:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     eac:	069a      	lsls	r2, r3, #26
     eae:	d021      	beq.n	ef4 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     eb0:	079a      	lsls	r2, r3, #30
     eb2:	d503      	bpl.n	ebc <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     eb4:	2302      	movs	r3, #2
     eb6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     eb8:	201a      	movs	r0, #26
     eba:	e01e      	b.n	efa <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ebc:	075a      	lsls	r2, r3, #29
     ebe:	d503      	bpl.n	ec8 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ec0:	2304      	movs	r3, #4
     ec2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     ec4:	201e      	movs	r0, #30
     ec6:	e018      	b.n	efa <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ec8:	07da      	lsls	r2, r3, #31
     eca:	d503      	bpl.n	ed4 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ecc:	2301      	movs	r3, #1
     ece:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     ed0:	2013      	movs	r0, #19
     ed2:	e012      	b.n	efa <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     ed4:	06da      	lsls	r2, r3, #27
     ed6:	d505      	bpl.n	ee4 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     ed8:	8b62      	ldrh	r2, [r4, #26]
     eda:	2310      	movs	r3, #16
     edc:	4313      	orrs	r3, r2
     ede:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     ee0:	2042      	movs	r0, #66	; 0x42
     ee2:	e00a      	b.n	efa <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ee4:	069a      	lsls	r2, r3, #26
     ee6:	d505      	bpl.n	ef4 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     ee8:	8b62      	ldrh	r2, [r4, #26]
     eea:	2320      	movs	r3, #32
     eec:	4313      	orrs	r3, r2
     eee:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     ef0:	2041      	movs	r0, #65	; 0x41
     ef2:	e002      	b.n	efa <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     ef4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ef6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     ef8:	2000      	movs	r0, #0
}
     efa:	bd10      	pop	{r4, pc}

00000efc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     efe:	0080      	lsls	r0, r0, #2
     f00:	4b64      	ldr	r3, [pc, #400]	; (1094 <_usart_interrupt_handler+0x198>)
     f02:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f04:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f06:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f08:	2b00      	cmp	r3, #0
     f0a:	d1fc      	bne.n	f06 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f0c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f0e:	7da6      	ldrb	r6, [r4, #22]
     f10:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     f12:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     f14:	5ceb      	ldrb	r3, [r5, r3]
     f16:	2230      	movs	r2, #48	; 0x30
     f18:	5caf      	ldrb	r7, [r5, r2]
     f1a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f1c:	07f1      	lsls	r1, r6, #31
     f1e:	d520      	bpl.n	f62 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     f20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f22:	b29b      	uxth	r3, r3
     f24:	2b00      	cmp	r3, #0
     f26:	d01a      	beq.n	f5e <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f28:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f2a:	781a      	ldrb	r2, [r3, #0]
     f2c:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f2e:	1c59      	adds	r1, r3, #1
     f30:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f32:	7969      	ldrb	r1, [r5, #5]
     f34:	2901      	cmp	r1, #1
     f36:	d104      	bne.n	f42 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f38:	7859      	ldrb	r1, [r3, #1]
     f3a:	0209      	lsls	r1, r1, #8
     f3c:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     f3e:	3302      	adds	r3, #2
     f40:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f42:	05d3      	lsls	r3, r2, #23
     f44:	0ddb      	lsrs	r3, r3, #23
     f46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f4a:	3b01      	subs	r3, #1
     f4c:	b29b      	uxth	r3, r3
     f4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f50:	2b00      	cmp	r3, #0
     f52:	d106      	bne.n	f62 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f54:	2301      	movs	r3, #1
     f56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f58:	2302      	movs	r3, #2
     f5a:	75a3      	strb	r3, [r4, #22]
     f5c:	e001      	b.n	f62 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f5e:	2301      	movs	r3, #1
     f60:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f62:	07b2      	lsls	r2, r6, #30
     f64:	d509      	bpl.n	f7a <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f66:	2302      	movs	r3, #2
     f68:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f6a:	2200      	movs	r2, #0
     f6c:	2333      	movs	r3, #51	; 0x33
     f6e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f70:	07fb      	lsls	r3, r7, #31
     f72:	d502      	bpl.n	f7a <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     f74:	1c28      	adds	r0, r5, #0
     f76:	68e9      	ldr	r1, [r5, #12]
     f78:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f7a:	0772      	lsls	r2, r6, #29
     f7c:	d56a      	bpl.n	1054 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     f7e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f80:	b29b      	uxth	r3, r3
     f82:	2b00      	cmp	r3, #0
     f84:	d064      	beq.n	1050 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f86:	8b63      	ldrh	r3, [r4, #26]
     f88:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f8a:	0719      	lsls	r1, r3, #28
     f8c:	d402      	bmi.n	f94 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f8e:	223f      	movs	r2, #63	; 0x3f
     f90:	4013      	ands	r3, r2
     f92:	e001      	b.n	f98 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     f94:	2237      	movs	r2, #55	; 0x37
     f96:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f98:	2b00      	cmp	r3, #0
     f9a:	d037      	beq.n	100c <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     f9c:	079a      	lsls	r2, r3, #30
     f9e:	d507      	bpl.n	fb0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     fa0:	221a      	movs	r2, #26
     fa2:	2332      	movs	r3, #50	; 0x32
     fa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     fa6:	8b62      	ldrh	r2, [r4, #26]
     fa8:	2302      	movs	r3, #2
     faa:	4313      	orrs	r3, r2
     fac:	8363      	strh	r3, [r4, #26]
     fae:	e027      	b.n	1000 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fb0:	0759      	lsls	r1, r3, #29
     fb2:	d507      	bpl.n	fc4 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     fb4:	221e      	movs	r2, #30
     fb6:	2332      	movs	r3, #50	; 0x32
     fb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     fba:	8b62      	ldrh	r2, [r4, #26]
     fbc:	2304      	movs	r3, #4
     fbe:	4313      	orrs	r3, r2
     fc0:	8363      	strh	r3, [r4, #26]
     fc2:	e01d      	b.n	1000 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fc4:	07da      	lsls	r2, r3, #31
     fc6:	d507      	bpl.n	fd8 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     fc8:	2213      	movs	r2, #19
     fca:	2332      	movs	r3, #50	; 0x32
     fcc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     fce:	8b62      	ldrh	r2, [r4, #26]
     fd0:	2301      	movs	r3, #1
     fd2:	4313      	orrs	r3, r2
     fd4:	8363      	strh	r3, [r4, #26]
     fd6:	e013      	b.n	1000 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     fd8:	06d9      	lsls	r1, r3, #27
     fda:	d507      	bpl.n	fec <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     fdc:	2242      	movs	r2, #66	; 0x42
     fde:	2332      	movs	r3, #50	; 0x32
     fe0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     fe2:	8b62      	ldrh	r2, [r4, #26]
     fe4:	2310      	movs	r3, #16
     fe6:	4313      	orrs	r3, r2
     fe8:	8363      	strh	r3, [r4, #26]
     fea:	e009      	b.n	1000 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     fec:	2220      	movs	r2, #32
     fee:	421a      	tst	r2, r3
     ff0:	d006      	beq.n	1000 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ff2:	2241      	movs	r2, #65	; 0x41
     ff4:	2332      	movs	r3, #50	; 0x32
     ff6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     ff8:	8b62      	ldrh	r2, [r4, #26]
     ffa:	2320      	movs	r3, #32
     ffc:	4313      	orrs	r3, r2
     ffe:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1000:	077a      	lsls	r2, r7, #29
    1002:	d527      	bpl.n	1054 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1004:	1c28      	adds	r0, r5, #0
    1006:	696b      	ldr	r3, [r5, #20]
    1008:	4798      	blx	r3
    100a:	e023      	b.n	1054 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    100c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    100e:	05d2      	lsls	r2, r2, #23
    1010:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1012:	b2d3      	uxtb	r3, r2
    1014:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1016:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1018:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    101a:	1c59      	adds	r1, r3, #1
    101c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    101e:	7969      	ldrb	r1, [r5, #5]
    1020:	2901      	cmp	r1, #1
    1022:	d104      	bne.n	102e <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1024:	0a12      	lsrs	r2, r2, #8
    1026:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    102a:	3301      	adds	r3, #1
    102c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    102e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1030:	3b01      	subs	r3, #1
    1032:	b29b      	uxth	r3, r3
    1034:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1036:	2b00      	cmp	r3, #0
    1038:	d10c      	bne.n	1054 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    103a:	2304      	movs	r3, #4
    103c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    103e:	2200      	movs	r2, #0
    1040:	2332      	movs	r3, #50	; 0x32
    1042:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1044:	07ba      	lsls	r2, r7, #30
    1046:	d505      	bpl.n	1054 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1048:	1c28      	adds	r0, r5, #0
    104a:	692b      	ldr	r3, [r5, #16]
    104c:	4798      	blx	r3
    104e:	e001      	b.n	1054 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1050:	2304      	movs	r3, #4
    1052:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1054:	06f1      	lsls	r1, r6, #27
    1056:	d507      	bpl.n	1068 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1058:	2310      	movs	r3, #16
    105a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    105c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    105e:	06fa      	lsls	r2, r7, #27
    1060:	d502      	bpl.n	1068 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1062:	1c28      	adds	r0, r5, #0
    1064:	69eb      	ldr	r3, [r5, #28]
    1066:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1068:	06b1      	lsls	r1, r6, #26
    106a:	d507      	bpl.n	107c <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    106c:	2320      	movs	r3, #32
    106e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1070:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1072:	073a      	lsls	r2, r7, #28
    1074:	d502      	bpl.n	107c <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1076:	1c28      	adds	r0, r5, #0
    1078:	69ab      	ldr	r3, [r5, #24]
    107a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    107c:	0731      	lsls	r1, r6, #28
    107e:	d507      	bpl.n	1090 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1080:	2308      	movs	r3, #8
    1082:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1084:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1086:	06ba      	lsls	r2, r7, #26
    1088:	d502      	bpl.n	1090 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    108a:	6a2b      	ldr	r3, [r5, #32]
    108c:	1c28      	adds	r0, r5, #0
    108e:	4798      	blx	r3
		}
	}
#endif
}
    1090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	20000118 	.word	0x20000118

00001098 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1098:	b508      	push	{r3, lr}
	switch (clock_source) {
    109a:	2808      	cmp	r0, #8
    109c:	d834      	bhi.n	1108 <system_clock_source_get_hz+0x70>
    109e:	0080      	lsls	r0, r0, #2
    10a0:	4b1b      	ldr	r3, [pc, #108]	; (1110 <system_clock_source_get_hz+0x78>)
    10a2:	581b      	ldr	r3, [r3, r0]
    10a4:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10a6:	2080      	movs	r0, #128	; 0x80
    10a8:	0200      	lsls	r0, r0, #8
    10aa:	e030      	b.n	110e <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    10ac:	4b19      	ldr	r3, [pc, #100]	; (1114 <system_clock_source_get_hz+0x7c>)
    10ae:	6918      	ldr	r0, [r3, #16]
    10b0:	e02d      	b.n	110e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10b2:	4b19      	ldr	r3, [pc, #100]	; (1118 <system_clock_source_get_hz+0x80>)
    10b4:	6a18      	ldr	r0, [r3, #32]
    10b6:	0580      	lsls	r0, r0, #22
    10b8:	0f80      	lsrs	r0, r0, #30
    10ba:	4b18      	ldr	r3, [pc, #96]	; (111c <system_clock_source_get_hz+0x84>)
    10bc:	40c3      	lsrs	r3, r0
    10be:	1c18      	adds	r0, r3, #0
    10c0:	e025      	b.n	110e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10c2:	4b14      	ldr	r3, [pc, #80]	; (1114 <system_clock_source_get_hz+0x7c>)
    10c4:	6958      	ldr	r0, [r3, #20]
    10c6:	e022      	b.n	110e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10c8:	4b12      	ldr	r3, [pc, #72]	; (1114 <system_clock_source_get_hz+0x7c>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	2002      	movs	r0, #2
    10ce:	4018      	ands	r0, r3
    10d0:	d01d      	beq.n	110e <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10d2:	4911      	ldr	r1, [pc, #68]	; (1118 <system_clock_source_get_hz+0x80>)
    10d4:	2210      	movs	r2, #16
    10d6:	68cb      	ldr	r3, [r1, #12]
    10d8:	421a      	tst	r2, r3
    10da:	d0fc      	beq.n	10d6 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <system_clock_source_get_hz+0x7c>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	075a      	lsls	r2, r3, #29
    10e2:	d513      	bpl.n	110c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10e4:	2000      	movs	r0, #0
    10e6:	4b0e      	ldr	r3, [pc, #56]	; (1120 <system_clock_source_get_hz+0x88>)
    10e8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10ea:	4b0a      	ldr	r3, [pc, #40]	; (1114 <system_clock_source_get_hz+0x7c>)
    10ec:	689b      	ldr	r3, [r3, #8]
    10ee:	041b      	lsls	r3, r3, #16
    10f0:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10f2:	4358      	muls	r0, r3
    10f4:	e00b      	b.n	110e <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10f6:	2350      	movs	r3, #80	; 0x50
    10f8:	4a07      	ldr	r2, [pc, #28]	; (1118 <system_clock_source_get_hz+0x80>)
    10fa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10fc:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10fe:	075a      	lsls	r2, r3, #29
    1100:	d505      	bpl.n	110e <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1102:	4b04      	ldr	r3, [pc, #16]	; (1114 <system_clock_source_get_hz+0x7c>)
    1104:	68d8      	ldr	r0, [r3, #12]
    1106:	e002      	b.n	110e <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1108:	2000      	movs	r0, #0
    110a:	e000      	b.n	110e <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    110c:	4805      	ldr	r0, [pc, #20]	; (1124 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    110e:	bd08      	pop	{r3, pc}
    1110:	00002c14 	.word	0x00002c14
    1114:	200000b8 	.word	0x200000b8
    1118:	40000800 	.word	0x40000800
    111c:	007a1200 	.word	0x007a1200
    1120:	00001505 	.word	0x00001505
    1124:	02dc6c00 	.word	0x02dc6c00

00001128 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1128:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    112a:	4b0c      	ldr	r3, [pc, #48]	; (115c <system_clock_source_osc8m_set_config+0x34>)
    112c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    112e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1130:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1132:	7840      	ldrb	r0, [r0, #1]
    1134:	2201      	movs	r2, #1
    1136:	4010      	ands	r0, r2
    1138:	0180      	lsls	r0, r0, #6
    113a:	2640      	movs	r6, #64	; 0x40
    113c:	43b4      	bics	r4, r6
    113e:	4304      	orrs	r4, r0
    1140:	402a      	ands	r2, r5
    1142:	01d0      	lsls	r0, r2, #7
    1144:	2280      	movs	r2, #128	; 0x80
    1146:	4394      	bics	r4, r2
    1148:	1c22      	adds	r2, r4, #0
    114a:	4302      	orrs	r2, r0
    114c:	2003      	movs	r0, #3
    114e:	4001      	ands	r1, r0
    1150:	0209      	lsls	r1, r1, #8
    1152:	4803      	ldr	r0, [pc, #12]	; (1160 <system_clock_source_osc8m_set_config+0x38>)
    1154:	4002      	ands	r2, r0
    1156:	430a      	orrs	r2, r1
    1158:	621a      	str	r2, [r3, #32]
}
    115a:	bd70      	pop	{r4, r5, r6, pc}
    115c:	40000800 	.word	0x40000800
    1160:	fffffcff 	.word	0xfffffcff

00001164 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1164:	2808      	cmp	r0, #8
    1166:	d843      	bhi.n	11f0 <system_clock_source_enable+0x8c>
    1168:	0080      	lsls	r0, r0, #2
    116a:	4b22      	ldr	r3, [pc, #136]	; (11f4 <system_clock_source_enable+0x90>)
    116c:	581b      	ldr	r3, [r3, r0]
    116e:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1170:	2000      	movs	r0, #0
    1172:	e03e      	b.n	11f2 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1174:	4b20      	ldr	r3, [pc, #128]	; (11f8 <system_clock_source_enable+0x94>)
    1176:	6a19      	ldr	r1, [r3, #32]
    1178:	2202      	movs	r2, #2
    117a:	430a      	orrs	r2, r1
    117c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    117e:	2000      	movs	r0, #0
    1180:	e037      	b.n	11f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1182:	4b1d      	ldr	r3, [pc, #116]	; (11f8 <system_clock_source_enable+0x94>)
    1184:	6999      	ldr	r1, [r3, #24]
    1186:	2202      	movs	r2, #2
    1188:	430a      	orrs	r2, r1
    118a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    118c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    118e:	e030      	b.n	11f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1190:	4b19      	ldr	r3, [pc, #100]	; (11f8 <system_clock_source_enable+0x94>)
    1192:	8a19      	ldrh	r1, [r3, #16]
    1194:	2202      	movs	r2, #2
    1196:	430a      	orrs	r2, r1
    1198:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    119a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    119c:	e029      	b.n	11f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    119e:	4b16      	ldr	r3, [pc, #88]	; (11f8 <system_clock_source_enable+0x94>)
    11a0:	8a99      	ldrh	r1, [r3, #20]
    11a2:	2202      	movs	r2, #2
    11a4:	430a      	orrs	r2, r1
    11a6:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    11aa:	e022      	b.n	11f2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11ac:	4b13      	ldr	r3, [pc, #76]	; (11fc <system_clock_source_enable+0x98>)
    11ae:	6819      	ldr	r1, [r3, #0]
    11b0:	2202      	movs	r2, #2
    11b2:	430a      	orrs	r2, r1
    11b4:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    11b6:	681a      	ldr	r2, [r3, #0]
    11b8:	4b11      	ldr	r3, [pc, #68]	; (1200 <system_clock_source_enable+0x9c>)
    11ba:	401a      	ands	r2, r3
    11bc:	4b0e      	ldr	r3, [pc, #56]	; (11f8 <system_clock_source_enable+0x94>)
    11be:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11c0:	1c19      	adds	r1, r3, #0
    11c2:	2210      	movs	r2, #16
    11c4:	68cb      	ldr	r3, [r1, #12]
    11c6:	421a      	tst	r2, r3
    11c8:	d0fc      	beq.n	11c4 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11ca:	4a0c      	ldr	r2, [pc, #48]	; (11fc <system_clock_source_enable+0x98>)
    11cc:	6891      	ldr	r1, [r2, #8]
    11ce:	4b0a      	ldr	r3, [pc, #40]	; (11f8 <system_clock_source_enable+0x94>)
    11d0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11d2:	6851      	ldr	r1, [r2, #4]
    11d4:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    11d6:	6812      	ldr	r2, [r2, #0]
    11d8:	b292      	uxth	r2, r2
    11da:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11dc:	2000      	movs	r0, #0
    11de:	e008      	b.n	11f2 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    11e0:	4a05      	ldr	r2, [pc, #20]	; (11f8 <system_clock_source_enable+0x94>)
    11e2:	2344      	movs	r3, #68	; 0x44
    11e4:	5cd0      	ldrb	r0, [r2, r3]
    11e6:	2102      	movs	r1, #2
    11e8:	4301      	orrs	r1, r0
    11ea:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11ec:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    11ee:	e000      	b.n	11f2 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11f0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    11f2:	4770      	bx	lr
    11f4:	00002c38 	.word	0x00002c38
    11f8:	40000800 	.word	0x40000800
    11fc:	200000b8 	.word	0x200000b8
    1200:	0000ff7f 	.word	0x0000ff7f

00001204 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1208:	22c2      	movs	r2, #194	; 0xc2
    120a:	00d2      	lsls	r2, r2, #3
    120c:	4b20      	ldr	r3, [pc, #128]	; (1290 <system_clock_init+0x8c>)
    120e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1210:	4b20      	ldr	r3, [pc, #128]	; (1294 <system_clock_init+0x90>)
    1212:	685a      	ldr	r2, [r3, #4]
    1214:	211e      	movs	r1, #30
    1216:	438a      	bics	r2, r1
    1218:	605a      	str	r2, [r3, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    121a:	2302      	movs	r3, #2
    121c:	466a      	mov	r2, sp
    121e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1220:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1222:	4d1d      	ldr	r5, [pc, #116]	; (1298 <system_clock_init+0x94>)
    1224:	b2e0      	uxtb	r0, r4
    1226:	4669      	mov	r1, sp
    1228:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    122a:	3401      	adds	r4, #1
    122c:	2c25      	cmp	r4, #37	; 0x25
    122e:	d1f9      	bne.n	1224 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1230:	a803      	add	r0, sp, #12
    1232:	2400      	movs	r4, #0
    1234:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1236:	2501      	movs	r5, #1
    1238:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    123a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    123c:	4b17      	ldr	r3, [pc, #92]	; (129c <system_clock_init+0x98>)
    123e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1240:	2006      	movs	r0, #6
    1242:	4b17      	ldr	r3, [pc, #92]	; (12a0 <system_clock_init+0x9c>)
    1244:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1246:	4b17      	ldr	r3, [pc, #92]	; (12a4 <system_clock_init+0xa0>)
    1248:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    124a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    124c:	466b      	mov	r3, sp
    124e:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1250:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1252:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1254:	2304      	movs	r3, #4
    1256:	466a      	mov	r2, sp
    1258:	7013      	strb	r3, [r2, #0]
    125a:	2001      	movs	r0, #1
    125c:	4669      	mov	r1, sp
    125e:	4f12      	ldr	r7, [pc, #72]	; (12a8 <system_clock_init+0xa4>)
    1260:	47b8      	blx	r7
    1262:	2001      	movs	r0, #1
    1264:	4e11      	ldr	r6, [pc, #68]	; (12ac <system_clock_init+0xa8>)
    1266:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1268:	4b11      	ldr	r3, [pc, #68]	; (12b0 <system_clock_init+0xac>)
    126a:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    126c:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    126e:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1270:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1272:	466b      	mov	r3, sp
    1274:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1276:	2306      	movs	r3, #6
    1278:	466a      	mov	r2, sp
    127a:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    127c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    127e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1280:	2000      	movs	r0, #0
    1282:	4669      	mov	r1, sp
    1284:	47b8      	blx	r7
    1286:	2000      	movs	r0, #0
    1288:	47b0      	blx	r6
#endif
}
    128a:	b005      	add	sp, #20
    128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	40000800 	.word	0x40000800
    1294:	41004000 	.word	0x41004000
    1298:	000014e9 	.word	0x000014e9
    129c:	00001129 	.word	0x00001129
    12a0:	00001165 	.word	0x00001165
    12a4:	000012b5 	.word	0x000012b5
    12a8:	000012d9 	.word	0x000012d9
    12ac:	0000138d 	.word	0x0000138d
    12b0:	40000400 	.word	0x40000400

000012b4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <system_gclk_init+0x1c>)
    12b6:	6999      	ldr	r1, [r3, #24]
    12b8:	2208      	movs	r2, #8
    12ba:	430a      	orrs	r2, r1
    12bc:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12be:	2201      	movs	r2, #1
    12c0:	4b04      	ldr	r3, [pc, #16]	; (12d4 <system_gclk_init+0x20>)
    12c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12c4:	1c19      	adds	r1, r3, #0
    12c6:	780b      	ldrb	r3, [r1, #0]
    12c8:	4213      	tst	r3, r2
    12ca:	d1fc      	bne.n	12c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12cc:	4770      	bx	lr
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	40000400 	.word	0x40000400
    12d4:	40000c00 	.word	0x40000c00

000012d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12da:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12dc:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12de:	780d      	ldrb	r5, [r1, #0]
    12e0:	022d      	lsls	r5, r5, #8
    12e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12e4:	784b      	ldrb	r3, [r1, #1]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d002      	beq.n	12f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12ea:	2380      	movs	r3, #128	; 0x80
    12ec:	02db      	lsls	r3, r3, #11
    12ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12f0:	7a4b      	ldrb	r3, [r1, #9]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d002      	beq.n	12fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	031b      	lsls	r3, r3, #12
    12fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12fc:	684c      	ldr	r4, [r1, #4]
    12fe:	2c01      	cmp	r4, #1
    1300:	d917      	bls.n	1332 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1302:	1e63      	subs	r3, r4, #1
    1304:	421c      	tst	r4, r3
    1306:	d10f      	bne.n	1328 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1308:	2c02      	cmp	r4, #2
    130a:	d906      	bls.n	131a <system_gclk_gen_set_config+0x42>
    130c:	2302      	movs	r3, #2
    130e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1310:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1312:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1314:	429c      	cmp	r4, r3
    1316:	d8fb      	bhi.n	1310 <system_gclk_gen_set_config+0x38>
    1318:	e000      	b.n	131c <system_gclk_gen_set_config+0x44>
    131a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    131c:	0217      	lsls	r7, r2, #8
    131e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	035b      	lsls	r3, r3, #13
    1324:	431d      	orrs	r5, r3
    1326:	e004      	b.n	1332 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1328:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    132a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	029b      	lsls	r3, r3, #10
    1330:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1332:	7a0b      	ldrb	r3, [r1, #8]
    1334:	2b00      	cmp	r3, #0
    1336:	d002      	beq.n	133e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	039b      	lsls	r3, r3, #14
    133c:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    133e:	4a0f      	ldr	r2, [pc, #60]	; (137c <system_gclk_gen_set_config+0xa4>)
    1340:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1342:	b25b      	sxtb	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	dbfb      	blt.n	1340 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1348:	4b0d      	ldr	r3, [pc, #52]	; (1380 <system_gclk_gen_set_config+0xa8>)
    134a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    134c:	4b0d      	ldr	r3, [pc, #52]	; (1384 <system_gclk_gen_set_config+0xac>)
    134e:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1350:	4a0a      	ldr	r2, [pc, #40]	; (137c <system_gclk_gen_set_config+0xa4>)
    1352:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1354:	b25b      	sxtb	r3, r3
    1356:	2b00      	cmp	r3, #0
    1358:	dbfb      	blt.n	1352 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    135a:	4b08      	ldr	r3, [pc, #32]	; (137c <system_gclk_gen_set_config+0xa4>)
    135c:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    135e:	1c1a      	adds	r2, r3, #0
    1360:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1362:	b25b      	sxtb	r3, r3
    1364:	2b00      	cmp	r3, #0
    1366:	dbfb      	blt.n	1360 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <system_gclk_gen_set_config+0xa4>)
    136a:	6859      	ldr	r1, [r3, #4]
    136c:	2280      	movs	r2, #128	; 0x80
    136e:	0252      	lsls	r2, r2, #9
    1370:	400a      	ands	r2, r1
    1372:	4315      	orrs	r5, r2
    1374:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1376:	4b04      	ldr	r3, [pc, #16]	; (1388 <system_gclk_gen_set_config+0xb0>)
    1378:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    137c:	40000c00 	.word	0x40000c00
    1380:	00000111 	.word	0x00000111
    1384:	40000c08 	.word	0x40000c08
    1388:	00000151 	.word	0x00000151

0000138c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    138c:	b510      	push	{r4, lr}
    138e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1390:	4a0b      	ldr	r2, [pc, #44]	; (13c0 <system_gclk_gen_enable+0x34>)
    1392:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1394:	b25b      	sxtb	r3, r3
    1396:	2b00      	cmp	r3, #0
    1398:	dbfb      	blt.n	1392 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    139a:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <system_gclk_gen_enable+0x38>)
    139c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    139e:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <system_gclk_gen_enable+0x3c>)
    13a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13a2:	4a07      	ldr	r2, [pc, #28]	; (13c0 <system_gclk_gen_enable+0x34>)
    13a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13a6:	b25b      	sxtb	r3, r3
    13a8:	2b00      	cmp	r3, #0
    13aa:	dbfb      	blt.n	13a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <system_gclk_gen_enable+0x34>)
    13ae:	6859      	ldr	r1, [r3, #4]
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	0252      	lsls	r2, r2, #9
    13b4:	430a      	orrs	r2, r1
    13b6:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <system_gclk_gen_enable+0x40>)
    13ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	40000c00 	.word	0x40000c00
    13c4:	00000111 	.word	0x00000111
    13c8:	40000c04 	.word	0x40000c04
    13cc:	00000151 	.word	0x00000151

000013d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13d0:	b570      	push	{r4, r5, r6, lr}
    13d2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13d4:	4a1a      	ldr	r2, [pc, #104]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13d6:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    13d8:	b25b      	sxtb	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	dbfb      	blt.n	13d6 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13de:	4b19      	ldr	r3, [pc, #100]	; (1444 <system_gclk_gen_get_hz+0x74>)
    13e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13e2:	4b19      	ldr	r3, [pc, #100]	; (1448 <system_gclk_gen_get_hz+0x78>)
    13e4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e6:	4a16      	ldr	r2, [pc, #88]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13e8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13ea:	b25b      	sxtb	r3, r3
    13ec:	2b00      	cmp	r3, #0
    13ee:	dbfb      	blt.n	13e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13f0:	4e13      	ldr	r6, [pc, #76]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13f2:	6870      	ldr	r0, [r6, #4]
    13f4:	04c0      	lsls	r0, r0, #19
    13f6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <system_gclk_gen_get_hz+0x7c>)
    13fa:	4798      	blx	r3
    13fc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13fe:	4b12      	ldr	r3, [pc, #72]	; (1448 <system_gclk_gen_get_hz+0x78>)
    1400:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1402:	6876      	ldr	r6, [r6, #4]
    1404:	02f6      	lsls	r6, r6, #11
    1406:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1408:	4b11      	ldr	r3, [pc, #68]	; (1450 <system_gclk_gen_get_hz+0x80>)
    140a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    140c:	4a0c      	ldr	r2, [pc, #48]	; (1440 <system_gclk_gen_get_hz+0x70>)
    140e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1410:	b25b      	sxtb	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	dbfb      	blt.n	140e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <system_gclk_gen_get_hz+0x70>)
    1418:	689c      	ldr	r4, [r3, #8]
    141a:	0a24      	lsrs	r4, r4, #8
    141c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <system_gclk_gen_get_hz+0x84>)
    1420:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1422:	2e00      	cmp	r6, #0
    1424:	d107      	bne.n	1436 <system_gclk_gen_get_hz+0x66>
    1426:	2c01      	cmp	r4, #1
    1428:	d907      	bls.n	143a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    142a:	1c28      	adds	r0, r5, #0
    142c:	1c21      	adds	r1, r4, #0
    142e:	4b0a      	ldr	r3, [pc, #40]	; (1458 <system_gclk_gen_get_hz+0x88>)
    1430:	4798      	blx	r3
    1432:	1c05      	adds	r5, r0, #0
    1434:	e001      	b.n	143a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1436:	3401      	adds	r4, #1
    1438:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    143a:	1c28      	adds	r0, r5, #0
    143c:	bd70      	pop	{r4, r5, r6, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	40000c00 	.word	0x40000c00
    1444:	00000111 	.word	0x00000111
    1448:	40000c04 	.word	0x40000c04
    144c:	00001099 	.word	0x00001099
    1450:	40000c08 	.word	0x40000c08
    1454:	00000151 	.word	0x00000151
    1458:	00001ac5 	.word	0x00001ac5

0000145c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    145c:	b510      	push	{r4, lr}
    145e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1460:	4b06      	ldr	r3, [pc, #24]	; (147c <system_gclk_chan_enable+0x20>)
    1462:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <system_gclk_chan_enable+0x24>)
    1466:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_enable+0x28>)
    146a:	8859      	ldrh	r1, [r3, #2]
    146c:	2280      	movs	r2, #128	; 0x80
    146e:	01d2      	lsls	r2, r2, #7
    1470:	430a      	orrs	r2, r1
    1472:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <system_gclk_chan_enable+0x2c>)
    1476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	00000111 	.word	0x00000111
    1480:	40000c02 	.word	0x40000c02
    1484:	40000c00 	.word	0x40000c00
    1488:	00000151 	.word	0x00000151

0000148c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    148c:	b510      	push	{r4, lr}
    148e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <system_gclk_chan_disable+0x44>)
    1492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1494:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <system_gclk_chan_disable+0x48>)
    1496:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1498:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <system_gclk_chan_disable+0x4c>)
    149a:	8858      	ldrh	r0, [r3, #2]
    149c:	0500      	lsls	r0, r0, #20
    149e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    14a0:	8859      	ldrh	r1, [r3, #2]
    14a2:	4a0e      	ldr	r2, [pc, #56]	; (14dc <system_gclk_chan_disable+0x50>)
    14a4:	400a      	ands	r2, r1
    14a6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    14a8:	8859      	ldrh	r1, [r3, #2]
    14aa:	4a0d      	ldr	r2, [pc, #52]	; (14e0 <system_gclk_chan_disable+0x54>)
    14ac:	400a      	ands	r2, r1
    14ae:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    14b0:	1c19      	adds	r1, r3, #0
    14b2:	2280      	movs	r2, #128	; 0x80
    14b4:	01d2      	lsls	r2, r2, #7
    14b6:	884b      	ldrh	r3, [r1, #2]
    14b8:	4213      	tst	r3, r2
    14ba:	d1fc      	bne.n	14b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <system_gclk_chan_disable+0x4c>)
    14be:	0201      	lsls	r1, r0, #8
    14c0:	8858      	ldrh	r0, [r3, #2]
    14c2:	4a06      	ldr	r2, [pc, #24]	; (14dc <system_gclk_chan_disable+0x50>)
    14c4:	4002      	ands	r2, r0
    14c6:	430a      	orrs	r2, r1
    14c8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <system_gclk_chan_disable+0x58>)
    14cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00000111 	.word	0x00000111
    14d4:	40000c02 	.word	0x40000c02
    14d8:	40000c00 	.word	0x40000c00
    14dc:	fffff0ff 	.word	0xfffff0ff
    14e0:	ffffbfff 	.word	0xffffbfff
    14e4:	00000151 	.word	0x00000151

000014e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    14e8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14ea:	780c      	ldrb	r4, [r1, #0]
    14ec:	0224      	lsls	r4, r4, #8
    14ee:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <system_gclk_chan_set_config+0x14>)
    14f2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14f4:	b2a4      	uxth	r4, r4
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <system_gclk_chan_set_config+0x18>)
    14f8:	805c      	strh	r4, [r3, #2]
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	0000148d 	.word	0x0000148d
    1500:	40000c00 	.word	0x40000c00

00001504 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1504:	b510      	push	{r4, lr}
    1506:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <system_gclk_chan_get_hz+0x20>)
    150a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <system_gclk_chan_get_hz+0x24>)
    150e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <system_gclk_chan_get_hz+0x28>)
    1512:	885c      	ldrh	r4, [r3, #2]
    1514:	0524      	lsls	r4, r4, #20
    1516:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <system_gclk_chan_get_hz+0x2c>)
    151a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    151c:	1c20      	adds	r0, r4, #0
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <system_gclk_chan_get_hz+0x30>)
    1520:	4798      	blx	r3
}
    1522:	bd10      	pop	{r4, pc}
    1524:	00000111 	.word	0x00000111
    1528:	40000c02 	.word	0x40000c02
    152c:	40000c00 	.word	0x40000c00
    1530:	00000151 	.word	0x00000151
    1534:	000013d1 	.word	0x000013d1

00001538 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1538:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    153a:	78d3      	ldrb	r3, [r2, #3]
    153c:	2b00      	cmp	r3, #0
    153e:	d11e      	bne.n	157e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1540:	7813      	ldrb	r3, [r2, #0]
    1542:	2b80      	cmp	r3, #128	; 0x80
    1544:	d004      	beq.n	1550 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1546:	061b      	lsls	r3, r3, #24
    1548:	2480      	movs	r4, #128	; 0x80
    154a:	0264      	lsls	r4, r4, #9
    154c:	4323      	orrs	r3, r4
    154e:	e000      	b.n	1552 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1550:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1552:	7854      	ldrb	r4, [r2, #1]
    1554:	2502      	movs	r5, #2
    1556:	43ac      	bics	r4, r5
    1558:	d10a      	bne.n	1570 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    155a:	7894      	ldrb	r4, [r2, #2]
    155c:	2c00      	cmp	r4, #0
    155e:	d103      	bne.n	1568 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1560:	2480      	movs	r4, #128	; 0x80
    1562:	02a4      	lsls	r4, r4, #10
    1564:	4323      	orrs	r3, r4
    1566:	e002      	b.n	156e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1568:	24c0      	movs	r4, #192	; 0xc0
    156a:	02e4      	lsls	r4, r4, #11
    156c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    156e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1570:	7854      	ldrb	r4, [r2, #1]
    1572:	3c01      	subs	r4, #1
    1574:	2c01      	cmp	r4, #1
    1576:	d804      	bhi.n	1582 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1578:	4c11      	ldr	r4, [pc, #68]	; (15c0 <_system_pinmux_config+0x88>)
    157a:	4023      	ands	r3, r4
    157c:	e001      	b.n	1582 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    157e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1580:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1582:	040d      	lsls	r5, r1, #16
    1584:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1586:	24a0      	movs	r4, #160	; 0xa0
    1588:	05e4      	lsls	r4, r4, #23
    158a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    158c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    158e:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1590:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1592:	24d0      	movs	r4, #208	; 0xd0
    1594:	0624      	lsls	r4, r4, #24
    1596:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1598:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    159a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    159c:	78d4      	ldrb	r4, [r2, #3]
    159e:	2c00      	cmp	r4, #0
    15a0:	d10c      	bne.n	15bc <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15a2:	035c      	lsls	r4, r3, #13
    15a4:	d505      	bpl.n	15b2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15a6:	7893      	ldrb	r3, [r2, #2]
    15a8:	2b01      	cmp	r3, #1
    15aa:	d101      	bne.n	15b0 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    15ac:	6181      	str	r1, [r0, #24]
    15ae:	e000      	b.n	15b2 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    15b0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15b2:	7853      	ldrb	r3, [r2, #1]
    15b4:	3b01      	subs	r3, #1
    15b6:	2b01      	cmp	r3, #1
    15b8:	d800      	bhi.n	15bc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    15ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    15bc:	bd30      	pop	{r4, r5, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	fffbffff 	.word	0xfffbffff

000015c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15c4:	b508      	push	{r3, lr}
    15c6:	1c03      	adds	r3, r0, #0
    15c8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ca:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15cc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ce:	2900      	cmp	r1, #0
    15d0:	d103      	bne.n	15da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15d2:	0958      	lsrs	r0, r3, #5
    15d4:	01c0      	lsls	r0, r0, #7
    15d6:	4904      	ldr	r1, [pc, #16]	; (15e8 <system_pinmux_pin_set_config+0x24>)
    15d8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15da:	211f      	movs	r1, #31
    15dc:	400b      	ands	r3, r1
    15de:	2101      	movs	r1, #1
    15e0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    15e2:	4b02      	ldr	r3, [pc, #8]	; (15ec <system_pinmux_pin_set_config+0x28>)
    15e4:	4798      	blx	r3
}
    15e6:	bd08      	pop	{r3, pc}
    15e8:	41004400 	.word	0x41004400
    15ec:	00001539 	.word	0x00001539

000015f0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15f4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15f6:	4b04      	ldr	r3, [pc, #16]	; (1608 <system_init+0x14>)
    15f8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15fa:	4b04      	ldr	r3, [pc, #16]	; (160c <system_init+0x18>)
    15fc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15fe:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_init+0x1c>)
    1600:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_init+0x20>)
    1604:	4798      	blx	r3
}
    1606:	bd08      	pop	{r3, pc}
    1608:	00001205 	.word	0x00001205
    160c:	00000181 	.word	0x00000181
    1610:	000015f1 	.word	0x000015f1
    1614:	000015f1 	.word	0x000015f1

00001618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1618:	e7fe      	b.n	1618 <Dummy_Handler>
    161a:	46c0      	nop			; (mov r8, r8)

0000161c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    161c:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    161e:	2102      	movs	r1, #2
    1620:	2390      	movs	r3, #144	; 0x90
    1622:	005b      	lsls	r3, r3, #1
    1624:	4a28      	ldr	r2, [pc, #160]	; (16c8 <Reset_Handler+0xac>)
    1626:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1628:	4b28      	ldr	r3, [pc, #160]	; (16cc <Reset_Handler+0xb0>)
    162a:	78d8      	ldrb	r0, [r3, #3]
    162c:	2103      	movs	r1, #3
    162e:	4388      	bics	r0, r1
    1630:	2202      	movs	r2, #2
    1632:	4310      	orrs	r0, r2
    1634:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1636:	78dd      	ldrb	r5, [r3, #3]
    1638:	240c      	movs	r4, #12
    163a:	43a5      	bics	r5, r4
    163c:	2008      	movs	r0, #8
    163e:	4305      	orrs	r5, r0
    1640:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1642:	4b23      	ldr	r3, [pc, #140]	; (16d0 <Reset_Handler+0xb4>)
    1644:	7b9e      	ldrb	r6, [r3, #14]
    1646:	2530      	movs	r5, #48	; 0x30
    1648:	43ae      	bics	r6, r5
    164a:	2520      	movs	r5, #32
    164c:	4335      	orrs	r5, r6
    164e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1650:	7b9d      	ldrb	r5, [r3, #14]
    1652:	43a5      	bics	r5, r4
    1654:	4328      	orrs	r0, r5
    1656:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1658:	7b98      	ldrb	r0, [r3, #14]
    165a:	4388      	bics	r0, r1
    165c:	4302      	orrs	r2, r0
    165e:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1660:	4b1c      	ldr	r3, [pc, #112]	; (16d4 <Reset_Handler+0xb8>)
    1662:	4a1d      	ldr	r2, [pc, #116]	; (16d8 <Reset_Handler+0xbc>)
    1664:	429a      	cmp	r2, r3
    1666:	d003      	beq.n	1670 <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    1668:	4b1c      	ldr	r3, [pc, #112]	; (16dc <Reset_Handler+0xc0>)
    166a:	4a1a      	ldr	r2, [pc, #104]	; (16d4 <Reset_Handler+0xb8>)
    166c:	429a      	cmp	r2, r3
    166e:	d304      	bcc.n	167a <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1670:	4b1b      	ldr	r3, [pc, #108]	; (16e0 <Reset_Handler+0xc4>)
    1672:	4a1c      	ldr	r2, [pc, #112]	; (16e4 <Reset_Handler+0xc8>)
    1674:	429a      	cmp	r2, r3
    1676:	d310      	bcc.n	169a <Reset_Handler+0x7e>
    1678:	e01b      	b.n	16b2 <Reset_Handler+0x96>
    167a:	4b1b      	ldr	r3, [pc, #108]	; (16e8 <Reset_Handler+0xcc>)
    167c:	4817      	ldr	r0, [pc, #92]	; (16dc <Reset_Handler+0xc0>)
    167e:	3003      	adds	r0, #3
    1680:	1ac0      	subs	r0, r0, r3
    1682:	0880      	lsrs	r0, r0, #2
    1684:	3001      	adds	r0, #1
    1686:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1688:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    168a:	4912      	ldr	r1, [pc, #72]	; (16d4 <Reset_Handler+0xb8>)
    168c:	4a12      	ldr	r2, [pc, #72]	; (16d8 <Reset_Handler+0xbc>)
    168e:	58d4      	ldr	r4, [r2, r3]
    1690:	50cc      	str	r4, [r1, r3]
    1692:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1694:	4283      	cmp	r3, r0
    1696:	d1fa      	bne.n	168e <Reset_Handler+0x72>
    1698:	e7ea      	b.n	1670 <Reset_Handler+0x54>
    169a:	4b12      	ldr	r3, [pc, #72]	; (16e4 <Reset_Handler+0xc8>)
    169c:	1d1a      	adds	r2, r3, #4
    169e:	4910      	ldr	r1, [pc, #64]	; (16e0 <Reset_Handler+0xc4>)
    16a0:	3103      	adds	r1, #3
    16a2:	1a89      	subs	r1, r1, r2
    16a4:	0889      	lsrs	r1, r1, #2
    16a6:	0089      	lsls	r1, r1, #2
    16a8:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    16aa:	2100      	movs	r1, #0
    16ac:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16ae:	4293      	cmp	r3, r2
    16b0:	d1fc      	bne.n	16ac <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16b2:	4b0e      	ldr	r3, [pc, #56]	; (16ec <Reset_Handler+0xd0>)
    16b4:	217f      	movs	r1, #127	; 0x7f
    16b6:	4a0e      	ldr	r2, [pc, #56]	; (16f0 <Reset_Handler+0xd4>)
    16b8:	438a      	bics	r2, r1
    16ba:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <Reset_Handler+0xd8>)
    16be:	4798      	blx	r3

        /* Branch to main function */
        main();
    16c0:	4b0d      	ldr	r3, [pc, #52]	; (16f8 <Reset_Handler+0xdc>)
    16c2:	4798      	blx	r3
    16c4:	e7fe      	b.n	16c4 <Reset_Handler+0xa8>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	41007000 	.word	0x41007000
    16cc:	41005000 	.word	0x41005000
    16d0:	41004800 	.word	0x41004800
    16d4:	20000000 	.word	0x20000000
    16d8:	00002df8 	.word	0x00002df8
    16dc:	20000074 	.word	0x20000074
    16e0:	2000017c 	.word	0x2000017c
    16e4:	20000074 	.word	0x20000074
    16e8:	20000004 	.word	0x20000004
    16ec:	e000ed00 	.word	0xe000ed00
    16f0:	00000000 	.word	0x00000000
    16f4:	00001ba9 	.word	0x00001ba9
    16f8:	000018a9 	.word	0x000018a9

000016fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	4647      	mov	r7, r8
    1700:	b480      	push	{r7}
    1702:	1c0c      	adds	r4, r1, #0
    1704:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1706:	2800      	cmp	r0, #0
    1708:	d10c      	bne.n	1724 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    170a:	2a00      	cmp	r2, #0
    170c:	dd0d      	ble.n	172a <_read+0x2e>
    170e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1710:	4e09      	ldr	r6, [pc, #36]	; (1738 <_read+0x3c>)
    1712:	4d0a      	ldr	r5, [pc, #40]	; (173c <_read+0x40>)
    1714:	6830      	ldr	r0, [r6, #0]
    1716:	1c21      	adds	r1, r4, #0
    1718:	682b      	ldr	r3, [r5, #0]
    171a:	4798      	blx	r3
		ptr++;
    171c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    171e:	42bc      	cmp	r4, r7
    1720:	d1f8      	bne.n	1714 <_read+0x18>
    1722:	e004      	b.n	172e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1724:	2001      	movs	r0, #1
    1726:	4240      	negs	r0, r0
    1728:	e002      	b.n	1730 <_read+0x34>
	}

	for (; len > 0; --len) {
    172a:	2000      	movs	r0, #0
    172c:	e000      	b.n	1730 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    172e:	4640      	mov	r0, r8
	}
	return nChars;
}
    1730:	bc04      	pop	{r2}
    1732:	4690      	mov	r8, r2
    1734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	20000138 	.word	0x20000138
    173c:	20000130 	.word	0x20000130

00001740 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1740:	b5f0      	push	{r4, r5, r6, r7, lr}
    1742:	4647      	mov	r7, r8
    1744:	b480      	push	{r7}
    1746:	1c0e      	adds	r6, r1, #0
    1748:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    174a:	3801      	subs	r0, #1
    174c:	2802      	cmp	r0, #2
    174e:	d810      	bhi.n	1772 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1750:	2a00      	cmp	r2, #0
    1752:	d011      	beq.n	1778 <_write+0x38>
    1754:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1756:	4b0d      	ldr	r3, [pc, #52]	; (178c <_write+0x4c>)
    1758:	4698      	mov	r8, r3
    175a:	4f0d      	ldr	r7, [pc, #52]	; (1790 <_write+0x50>)
    175c:	4643      	mov	r3, r8
    175e:	6818      	ldr	r0, [r3, #0]
    1760:	5d31      	ldrb	r1, [r6, r4]
    1762:	683b      	ldr	r3, [r7, #0]
    1764:	4798      	blx	r3
    1766:	2800      	cmp	r0, #0
    1768:	db08      	blt.n	177c <_write+0x3c>
			return -1;
		}
		++nChars;
    176a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    176c:	42a5      	cmp	r5, r4
    176e:	d1f5      	bne.n	175c <_write+0x1c>
    1770:	e007      	b.n	1782 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1772:	2001      	movs	r0, #1
    1774:	4240      	negs	r0, r0
    1776:	e005      	b.n	1784 <_write+0x44>
	}

	for (; len != 0; --len) {
    1778:	2000      	movs	r0, #0
    177a:	e003      	b.n	1784 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    177c:	2001      	movs	r0, #1
    177e:	4240      	negs	r0, r0
    1780:	e000      	b.n	1784 <_write+0x44>
		}
		++nChars;
    1782:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    1784:	bc04      	pop	{r2}
    1786:	4690      	mov	r8, r2
    1788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000138 	.word	0x20000138
    1790:	20000134 	.word	0x20000134

00001794 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <_sbrk+0x1c>)
    1796:	681b      	ldr	r3, [r3, #0]
    1798:	2b00      	cmp	r3, #0
    179a:	d102      	bne.n	17a2 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    179c:	4a05      	ldr	r2, [pc, #20]	; (17b4 <_sbrk+0x20>)
    179e:	4b04      	ldr	r3, [pc, #16]	; (17b0 <_sbrk+0x1c>)
    17a0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    17a2:	4a03      	ldr	r2, [pc, #12]	; (17b0 <_sbrk+0x1c>)
    17a4:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    17a6:	1818      	adds	r0, r3, r0
    17a8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    17aa:	1c18      	adds	r0, r3, #0
    17ac:	4770      	bx	lr
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	200000d0 	.word	0x200000d0
    17b4:	20002180 	.word	0x20002180

000017b8 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    17b8:	2001      	movs	r0, #1
}
    17ba:	4240      	negs	r0, r0
    17bc:	4770      	bx	lr
    17be:	46c0      	nop			; (mov r8, r8)

000017c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    17c0:	2380      	movs	r3, #128	; 0x80
    17c2:	019b      	lsls	r3, r3, #6
    17c4:	604b      	str	r3, [r1, #4]

	return 0;
}
    17c6:	2000      	movs	r0, #0
    17c8:	4770      	bx	lr
    17ca:	46c0      	nop			; (mov r8, r8)

000017cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    17cc:	2001      	movs	r0, #1
    17ce:	4770      	bx	lr

000017d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    17d0:	2000      	movs	r0, #0
    17d2:	4770      	bx	lr

000017d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	b082      	sub	sp, #8
    17d8:	1c05      	adds	r5, r0, #0
    17da:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    17dc:	2200      	movs	r2, #0
    17de:	466b      	mov	r3, sp
    17e0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    17e2:	4c06      	ldr	r4, [pc, #24]	; (17fc <usart_serial_getchar+0x28>)
    17e4:	1c28      	adds	r0, r5, #0
    17e6:	4669      	mov	r1, sp
    17e8:	3106      	adds	r1, #6
    17ea:	47a0      	blx	r4
    17ec:	2800      	cmp	r0, #0
    17ee:	d1f9      	bne.n	17e4 <usart_serial_getchar+0x10>

	*c = temp;
    17f0:	466b      	mov	r3, sp
    17f2:	3306      	adds	r3, #6
    17f4:	881b      	ldrh	r3, [r3, #0]
    17f6:	7033      	strb	r3, [r6, #0]
}
    17f8:	b002      	add	sp, #8
    17fa:	bd70      	pop	{r4, r5, r6, pc}
    17fc:	00000e85 	.word	0x00000e85

00001800 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1800:	b570      	push	{r4, r5, r6, lr}
    1802:	1c06      	adds	r6, r0, #0
    1804:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1806:	4c03      	ldr	r4, [pc, #12]	; (1814 <usart_serial_putchar+0x14>)
    1808:	1c30      	adds	r0, r6, #0
    180a:	1c29      	adds	r1, r5, #0
    180c:	47a0      	blx	r4
    180e:	2800      	cmp	r0, #0
    1810:	d1fa      	bne.n	1808 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1812:	bd70      	pop	{r4, r5, r6, pc}
    1814:	00000e59 	.word	0x00000e59

00001818 <configure_i2c>:
}
//! [callback_func]

//! [initialize_i2c]
void configure_i2c(void)
{
    1818:	b570      	push	{r4, r5, r6, lr}
    181a:	b08c      	sub	sp, #48	; 0x30
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    181c:	2364      	movs	r3, #100	; 0x64
    181e:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1820:	4b1d      	ldr	r3, [pc, #116]	; (1898 <configure_i2c+0x80>)
    1822:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1824:	2300      	movs	r3, #0
    1826:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1828:	4669      	mov	r1, sp
    182a:	730b      	strb	r3, [r1, #12]
	config->run_in_standby   = false;
    182c:	760b      	strb	r3, [r1, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    182e:	2280      	movs	r2, #128	; 0x80
    1830:	0392      	lsls	r2, r2, #14
    1832:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
    1834:	2201      	movs	r2, #1
    1836:	4252      	negs	r2, r2
    1838:	82ca      	strh	r2, [r1, #22]
	config->unknown_bus_state_timeout = 65535;
    183a:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    183c:	9307      	str	r3, [sp, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    183e:	9308      	str	r3, [sp, #32]
	config->scl_low_timeout  = false;
    1840:	2224      	movs	r2, #36	; 0x24
    1842:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1844:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1846:	222c      	movs	r2, #44	; 0x2c
    1848:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    184a:	222d      	movs	r2, #45	; 0x2d
    184c:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    184e:	222e      	movs	r2, #46	; 0x2e
    1850:	548b      	strb	r3, [r1, r2]
	config_i2c_master.buffer_timeout = 65535;
	//! [conf_change]

	/* Initialize and enable device with config */
	//! [init_module]
	while(i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master)
    1852:	4e12      	ldr	r6, [pc, #72]	; (189c <configure_i2c+0x84>)
    1854:	4d12      	ldr	r5, [pc, #72]	; (18a0 <configure_i2c+0x88>)
    1856:	4c13      	ldr	r4, [pc, #76]	; (18a4 <configure_i2c+0x8c>)
    1858:	1c30      	adds	r0, r6, #0
    185a:	1c29      	adds	r1, r5, #0
    185c:	466a      	mov	r2, sp
    185e:	47a0      	blx	r4
    1860:	2800      	cmp	r0, #0
    1862:	d1f9      	bne.n	1858 <configure_i2c+0x40>
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <configure_i2c+0x84>)
    1866:	681a      	ldr	r2, [r3, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1868:	2107      	movs	r1, #7
    186a:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    186c:	4219      	tst	r1, r3
    186e:	d1fc      	bne.n	186a <configure_i2c+0x52>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1870:	6811      	ldr	r1, [r2, #0]
    1872:	2302      	movs	r3, #2
    1874:	430b      	orrs	r3, r1
    1876:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <configure_i2c+0x84>)
    187a:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    187c:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    187e:	2010      	movs	r0, #16
    1880:	e005      	b.n	188e <configure_i2c+0x76>
		timeout_counter++;
    1882:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1884:	42a3      	cmp	r3, r4
    1886:	d302      	bcc.n	188e <configure_i2c+0x76>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1888:	2310      	movs	r3, #16
    188a:	8353      	strh	r3, [r2, #26]
    188c:	e002      	b.n	1894 <configure_i2c+0x7c>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    188e:	8b51      	ldrh	r1, [r2, #26]
    1890:	4201      	tst	r1, r0
    1892:	d0f6      	beq.n	1882 <configure_i2c+0x6a>
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    1894:	b00c      	add	sp, #48	; 0x30
    1896:	bd70      	pop	{r4, r5, r6, pc}
    1898:	00000d48 	.word	0x00000d48
    189c:	20000160 	.word	0x20000160
    18a0:	42001000 	.word	0x42001000
    18a4:	000001e9 	.word	0x000001e9

000018a8 <main>:
	//! [callback_en]
}
//! [setup_callback]

int main(void)
{
    18a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18aa:	4647      	mov	r7, r8
    18ac:	b480      	push	{r7}
    18ae:	b094      	sub	sp, #80	; 0x50
	system_init();
    18b0:	4b5c      	ldr	r3, [pc, #368]	; (1a24 <main+0x17c>)
    18b2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18b4:	aa04      	add	r2, sp, #16
    18b6:	2380      	movs	r3, #128	; 0x80
    18b8:	05db      	lsls	r3, r3, #23
    18ba:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18bc:	2300      	movs	r3, #0
    18be:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    18c0:	21ff      	movs	r1, #255	; 0xff
    18c2:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    18c4:	2100      	movs	r1, #0
    18c6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18c8:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18ca:	2601      	movs	r6, #1
    18cc:	2024      	movs	r0, #36	; 0x24
    18ce:	5416      	strb	r6, [r2, r0]
	config->transmitter_enable = true;
    18d0:	2025      	movs	r0, #37	; 0x25
    18d2:	5416      	strb	r6, [r2, r0]
	config->clock_polarity_inverted = false;
    18d4:	2026      	movs	r0, #38	; 0x26
    18d6:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    18d8:	2027      	movs	r0, #39	; 0x27
    18da:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    18dc:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18de:	202c      	movs	r0, #44	; 0x2c
    18e0:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    18e2:	202d      	movs	r0, #45	; 0x2d
    18e4:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    18e6:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    18e8:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    18ea:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    18ec:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    18ee:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    18f0:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    18f2:	2313      	movs	r3, #19
    18f4:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    18f6:	7751      	strb	r1, [r2, #29]
 */
static void configure_console(void) {
    struct usart_config usart_conf;

    usart_get_config_defaults(&usart_conf);
    usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    18f8:	2380      	movs	r3, #128	; 0x80
    18fa:	035b      	lsls	r3, r3, #13
    18fc:	60d3      	str	r3, [r2, #12]
    usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    18fe:	4b4a      	ldr	r3, [pc, #296]	; (1a28 <main+0x180>)
    1900:	6313      	str	r3, [r2, #48]	; 0x30
    usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    1902:	4b4a      	ldr	r3, [pc, #296]	; (1a2c <main+0x184>)
    1904:	6353      	str	r3, [r2, #52]	; 0x34
    usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    1906:	2301      	movs	r3, #1
    1908:	425b      	negs	r3, r3
    190a:	6393      	str	r3, [r2, #56]	; 0x38
    usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    190c:	63d3      	str	r3, [r2, #60]	; 0x3c
    usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    190e:	2396      	movs	r3, #150	; 0x96
    1910:	021b      	lsls	r3, r3, #8
    1912:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1914:	4c46      	ldr	r4, [pc, #280]	; (1a30 <main+0x188>)
    1916:	4b47      	ldr	r3, [pc, #284]	; (1a34 <main+0x18c>)
    1918:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    191a:	4947      	ldr	r1, [pc, #284]	; (1a38 <main+0x190>)
    191c:	4b47      	ldr	r3, [pc, #284]	; (1a3c <main+0x194>)
    191e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1920:	4947      	ldr	r1, [pc, #284]	; (1a40 <main+0x198>)
    1922:	4b48      	ldr	r3, [pc, #288]	; (1a44 <main+0x19c>)
    1924:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1926:	1c20      	adds	r0, r4, #0
    1928:	4947      	ldr	r1, [pc, #284]	; (1a48 <main+0x1a0>)
    192a:	4b48      	ldr	r3, [pc, #288]	; (1a4c <main+0x1a4>)
    192c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    192e:	4f48      	ldr	r7, [pc, #288]	; (1a50 <main+0x1a8>)
    1930:	683b      	ldr	r3, [r7, #0]
    1932:	6898      	ldr	r0, [r3, #8]
    1934:	2100      	movs	r1, #0
    1936:	4d47      	ldr	r5, [pc, #284]	; (1a54 <main+0x1ac>)
    1938:	47a8      	blx	r5
	setbuf(stdin, NULL);
    193a:	683b      	ldr	r3, [r7, #0]
    193c:	6858      	ldr	r0, [r3, #4]
    193e:	2100      	movs	r1, #0
    1940:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1942:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1944:	1c28      	adds	r0, r5, #0
    1946:	4b44      	ldr	r3, [pc, #272]	; (1a58 <main+0x1b0>)
    1948:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    194a:	231f      	movs	r3, #31
    194c:	4018      	ands	r0, r3
    194e:	4086      	lsls	r6, r0
    1950:	4b42      	ldr	r3, [pc, #264]	; (1a5c <main+0x1b4>)
    1952:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1954:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1956:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1958:	2b00      	cmp	r3, #0
    195a:	d1fc      	bne.n	1956 <main+0xae>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    195c:	682a      	ldr	r2, [r5, #0]
    195e:	2302      	movs	r3, #2
    1960:	4313      	orrs	r3, r2
    1962:	602b      	str	r3, [r5, #0]

	//! [run_initialize_i2c]
	/* Configure device and enable. */
	//! [config]
	configure_console();
	printf("Running...\n\r");
    1964:	483e      	ldr	r0, [pc, #248]	; (1a60 <main+0x1b8>)
    1966:	4b3f      	ldr	r3, [pc, #252]	; (1a64 <main+0x1bc>)
    1968:	4798      	blx	r3
	configure_i2c();
    196a:	4b3f      	ldr	r3, [pc, #252]	; (1a68 <main+0x1c0>)
    196c:	4798      	blx	r3
	//! [config_callback]
	//! [run_initialize_i2c]

	/* Init i2c packet. */
	//! [write_packet]
	cra_wr_packet.address     = SLAVE_WRITE_ADDRESS;
    196e:	4b3f      	ldr	r3, [pc, #252]	; (1a6c <main+0x1c4>)
    1970:	213c      	movs	r1, #60	; 0x3c
    1972:	8019      	strh	r1, [r3, #0]
	cra_wr_packet.data_length = WRITE_DATA_LENGTH;
    1974:	2203      	movs	r2, #3
    1976:	805a      	strh	r2, [r3, #2]
	cra_wr_packet.data        = cra_wr_buffer;
    1978:	483d      	ldr	r0, [pc, #244]	; (1a70 <main+0x1c8>)
    197a:	6058      	str	r0, [r3, #4]
	crb_wr_packet.address     = SLAVE_WRITE_ADDRESS;
    197c:	4b3d      	ldr	r3, [pc, #244]	; (1a74 <main+0x1cc>)
    197e:	8019      	strh	r1, [r3, #0]
	crb_wr_packet.data_length = WRITE_DATA_LENGTH;
    1980:	805a      	strh	r2, [r3, #2]
	crb_wr_packet.data        = crb_wr_buffer;
    1982:	483d      	ldr	r0, [pc, #244]	; (1a78 <main+0x1d0>)
    1984:	6058      	str	r0, [r3, #4]
	measure_mode_wr_packet.address     = SLAVE_WRITE_ADDRESS;
    1986:	4b3d      	ldr	r3, [pc, #244]	; (1a7c <main+0x1d4>)
    1988:	8019      	strh	r1, [r3, #0]
	measure_mode_wr_packet.data_length = WRITE_DATA_LENGTH;
    198a:	805a      	strh	r2, [r3, #2]
	measure_mode_wr_packet.data        = measure_mode_wr_buffer;
    198c:	4a3c      	ldr	r2, [pc, #240]	; (1a80 <main+0x1d8>)
    198e:	605a      	str	r2, [r3, #4]
	
	
	//! [write_packet]
	//! [read_packet]
	rd_packet.address     = SLAVE_READ_ADDRESS;
    1990:	4b3c      	ldr	r3, [pc, #240]	; (1a84 <main+0x1dc>)
    1992:	223d      	movs	r2, #61	; 0x3d
    1994:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = DATA_LENGTH;
    1996:	2206      	movs	r2, #6
    1998:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
    199a:	4a3b      	ldr	r2, [pc, #236]	; (1a88 <main+0x1e0>)
    199c:	605a      	str	r2, [r3, #4]
			//! [write_packet]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
			//! [write_packet]
		}*/
		//printf("About to read...\n\n");
		printf("Writing CRA...\r\n");
    199e:	4b3b      	ldr	r3, [pc, #236]	; (1a8c <main+0x1e4>)
    19a0:	4698      	mov	r8, r3
    19a2:	4f3b      	ldr	r7, [pc, #236]	; (1a90 <main+0x1e8>)
		int status = i2c_master_write_packet_wait(&i2c_master_instance, &cra_wr_packet);
    19a4:	4e3b      	ldr	r6, [pc, #236]	; (1a94 <main+0x1ec>)
			//! [write_packet]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
			//! [write_packet]
		}*/
		//printf("About to read...\n\n");
		printf("Writing CRA...\r\n");
    19a6:	4640      	mov	r0, r8
    19a8:	47b8      	blx	r7
		int status = i2c_master_write_packet_wait(&i2c_master_instance, &cra_wr_packet);
    19aa:	1c30      	adds	r0, r6, #0
    19ac:	492f      	ldr	r1, [pc, #188]	; (1a6c <main+0x1c4>)
    19ae:	4d3a      	ldr	r5, [pc, #232]	; (1a98 <main+0x1f0>)
    19b0:	47a8      	blx	r5
    19b2:	1c01      	adds	r1, r0, #0
		printf("CRA write status: %d\r\r", status);
    19b4:	4839      	ldr	r0, [pc, #228]	; (1a9c <main+0x1f4>)
    19b6:	4c2b      	ldr	r4, [pc, #172]	; (1a64 <main+0x1bc>)
    19b8:	47a0      	blx	r4
		printf("Writing CRB...\r\n");
    19ba:	4839      	ldr	r0, [pc, #228]	; (1aa0 <main+0x1f8>)
    19bc:	47b8      	blx	r7
		status = i2c_master_write_packet_wait(&i2c_master_instance, &crb_wr_packet);
    19be:	1c30      	adds	r0, r6, #0
    19c0:	492c      	ldr	r1, [pc, #176]	; (1a74 <main+0x1cc>)
    19c2:	47a8      	blx	r5
    19c4:	1c01      	adds	r1, r0, #0
		printf("CRB write status: %d\r\r", status);
    19c6:	4837      	ldr	r0, [pc, #220]	; (1aa4 <main+0x1fc>)
    19c8:	47a0      	blx	r4
		printf("Writing measure mode...\r\n");
    19ca:	4837      	ldr	r0, [pc, #220]	; (1aa8 <main+0x200>)
    19cc:	47b8      	blx	r7
		status = i2c_master_write_packet_wait(&i2c_master_instance, &measure_mode_wr_packet);
    19ce:	1c30      	adds	r0, r6, #0
    19d0:	492a      	ldr	r1, [pc, #168]	; (1a7c <main+0x1d4>)
    19d2:	47a8      	blx	r5
    19d4:	1c01      	adds	r1, r0, #0
		printf("Measure mode write status: %d\r\r", status);
    19d6:	4835      	ldr	r0, [pc, #212]	; (1aac <main+0x204>)
    19d8:	47a0      	blx	r4
    19da:	4b35      	ldr	r3, [pc, #212]	; (1ab0 <main+0x208>)
    19dc:	3b01      	subs	r3, #1
		//usleep(6000);
		int a=0;
		for(int i=0; i<60000; i++) {
    19de:	2b00      	cmp	r3, #0
    19e0:	d1fc      	bne.n	19dc <main+0x134>
			a++;
		}
		
		printf("Reading...\r\n");
    19e2:	4834      	ldr	r0, [pc, #208]	; (1ab4 <main+0x20c>)
    19e4:	4b2a      	ldr	r3, [pc, #168]	; (1a90 <main+0x1e8>)
    19e6:	4798      	blx	r3
		status = i2c_master_read_packet_wait(&i2c_master_instance, &rd_packet);
    19e8:	482a      	ldr	r0, [pc, #168]	; (1a94 <main+0x1ec>)
    19ea:	4926      	ldr	r1, [pc, #152]	; (1a84 <main+0x1dc>)
    19ec:	4b32      	ldr	r3, [pc, #200]	; (1ab8 <main+0x210>)
    19ee:	4798      	blx	r3
    19f0:	1c04      	adds	r4, r0, #0
		printf("read status: %d\n\r", status);
    19f2:	4832      	ldr	r0, [pc, #200]	; (1abc <main+0x214>)
    19f4:	1c21      	adds	r1, r4, #0
    19f6:	4b1b      	ldr	r3, [pc, #108]	; (1a64 <main+0x1bc>)
    19f8:	4798      	blx	r3
		if(status != STATUS_OK) {
    19fa:	2c00      	cmp	r4, #0
    19fc:	d10d      	bne.n	1a1a <main+0x172>
			if(timeout++ == TIMEOUT) {
				break;
			}
		}
		printf("Data: %d %d %d %d %d %d\r\n", rd_buffer[0], rd_buffer[1], rd_buffer[2], rd_buffer[3], rd_buffer[4], rd_buffer[5]);
    19fe:	4c22      	ldr	r4, [pc, #136]	; (1a88 <main+0x1e0>)
    1a00:	7821      	ldrb	r1, [r4, #0]
    1a02:	7862      	ldrb	r2, [r4, #1]
    1a04:	78a3      	ldrb	r3, [r4, #2]
    1a06:	78e0      	ldrb	r0, [r4, #3]
    1a08:	9000      	str	r0, [sp, #0]
    1a0a:	7920      	ldrb	r0, [r4, #4]
    1a0c:	9001      	str	r0, [sp, #4]
    1a0e:	7960      	ldrb	r0, [r4, #5]
    1a10:	9002      	str	r0, [sp, #8]
    1a12:	482b      	ldr	r0, [pc, #172]	; (1ac0 <main+0x218>)
    1a14:	4c13      	ldr	r4, [pc, #76]	; (1a64 <main+0x1bc>)
    1a16:	47a0      	blx	r4
	}
    1a18:	e7c5      	b.n	19a6 <main+0xfe>

	//! [while]
}
    1a1a:	2000      	movs	r0, #0
    1a1c:	b014      	add	sp, #80	; 0x50
    1a1e:	bc04      	pop	{r2}
    1a20:	4690      	mov	r8, r2
    1a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a24:	000015f5 	.word	0x000015f5
    1a28:	00160002 	.word	0x00160002
    1a2c:	00170002 	.word	0x00170002
    1a30:	200000d4 	.word	0x200000d4
    1a34:	20000138 	.word	0x20000138
    1a38:	00001801 	.word	0x00001801
    1a3c:	20000134 	.word	0x20000134
    1a40:	000017d5 	.word	0x000017d5
    1a44:	20000130 	.word	0x20000130
    1a48:	42001400 	.word	0x42001400
    1a4c:	00000b51 	.word	0x00000b51
    1a50:	20000070 	.word	0x20000070
    1a54:	00001d25 	.word	0x00001d25
    1a58:	00000ac5 	.word	0x00000ac5
    1a5c:	e000e100 	.word	0xe000e100
    1a60:	00002c64 	.word	0x00002c64
    1a64:	00001c19 	.word	0x00001c19
    1a68:	00001819 	.word	0x00001819
    1a6c:	20000154 	.word	0x20000154
    1a70:	20000008 	.word	0x20000008
    1a74:	2000013c 	.word	0x2000013c
    1a78:	20000004 	.word	0x20000004
    1a7c:	20000148 	.word	0x20000148
    1a80:	2000000c 	.word	0x2000000c
    1a84:	2000016c 	.word	0x2000016c
    1a88:	20000108 	.word	0x20000108
    1a8c:	00002c74 	.word	0x00002c74
    1a90:	00001d11 	.word	0x00001d11
    1a94:	20000160 	.word	0x20000160
    1a98:	00000689 	.word	0x00000689
    1a9c:	00002c84 	.word	0x00002c84
    1aa0:	00002c9c 	.word	0x00002c9c
    1aa4:	00002cac 	.word	0x00002cac
    1aa8:	00002cc4 	.word	0x00002cc4
    1aac:	00002ce0 	.word	0x00002ce0
    1ab0:	0000ea60 	.word	0x0000ea60
    1ab4:	00002d00 	.word	0x00002d00
    1ab8:	00000679 	.word	0x00000679
    1abc:	00002d0c 	.word	0x00002d0c
    1ac0:	00002d20 	.word	0x00002d20

00001ac4 <__aeabi_uidiv>:
    1ac4:	2900      	cmp	r1, #0
    1ac6:	d034      	beq.n	1b32 <.udivsi3_skip_div0_test+0x6a>

00001ac8 <.udivsi3_skip_div0_test>:
    1ac8:	2301      	movs	r3, #1
    1aca:	2200      	movs	r2, #0
    1acc:	b410      	push	{r4}
    1ace:	4288      	cmp	r0, r1
    1ad0:	d32c      	bcc.n	1b2c <.udivsi3_skip_div0_test+0x64>
    1ad2:	2401      	movs	r4, #1
    1ad4:	0724      	lsls	r4, r4, #28
    1ad6:	42a1      	cmp	r1, r4
    1ad8:	d204      	bcs.n	1ae4 <.udivsi3_skip_div0_test+0x1c>
    1ada:	4281      	cmp	r1, r0
    1adc:	d202      	bcs.n	1ae4 <.udivsi3_skip_div0_test+0x1c>
    1ade:	0109      	lsls	r1, r1, #4
    1ae0:	011b      	lsls	r3, r3, #4
    1ae2:	e7f8      	b.n	1ad6 <.udivsi3_skip_div0_test+0xe>
    1ae4:	00e4      	lsls	r4, r4, #3
    1ae6:	42a1      	cmp	r1, r4
    1ae8:	d204      	bcs.n	1af4 <.udivsi3_skip_div0_test+0x2c>
    1aea:	4281      	cmp	r1, r0
    1aec:	d202      	bcs.n	1af4 <.udivsi3_skip_div0_test+0x2c>
    1aee:	0049      	lsls	r1, r1, #1
    1af0:	005b      	lsls	r3, r3, #1
    1af2:	e7f8      	b.n	1ae6 <.udivsi3_skip_div0_test+0x1e>
    1af4:	4288      	cmp	r0, r1
    1af6:	d301      	bcc.n	1afc <.udivsi3_skip_div0_test+0x34>
    1af8:	1a40      	subs	r0, r0, r1
    1afa:	431a      	orrs	r2, r3
    1afc:	084c      	lsrs	r4, r1, #1
    1afe:	42a0      	cmp	r0, r4
    1b00:	d302      	bcc.n	1b08 <.udivsi3_skip_div0_test+0x40>
    1b02:	1b00      	subs	r0, r0, r4
    1b04:	085c      	lsrs	r4, r3, #1
    1b06:	4322      	orrs	r2, r4
    1b08:	088c      	lsrs	r4, r1, #2
    1b0a:	42a0      	cmp	r0, r4
    1b0c:	d302      	bcc.n	1b14 <.udivsi3_skip_div0_test+0x4c>
    1b0e:	1b00      	subs	r0, r0, r4
    1b10:	089c      	lsrs	r4, r3, #2
    1b12:	4322      	orrs	r2, r4
    1b14:	08cc      	lsrs	r4, r1, #3
    1b16:	42a0      	cmp	r0, r4
    1b18:	d302      	bcc.n	1b20 <.udivsi3_skip_div0_test+0x58>
    1b1a:	1b00      	subs	r0, r0, r4
    1b1c:	08dc      	lsrs	r4, r3, #3
    1b1e:	4322      	orrs	r2, r4
    1b20:	2800      	cmp	r0, #0
    1b22:	d003      	beq.n	1b2c <.udivsi3_skip_div0_test+0x64>
    1b24:	091b      	lsrs	r3, r3, #4
    1b26:	d001      	beq.n	1b2c <.udivsi3_skip_div0_test+0x64>
    1b28:	0909      	lsrs	r1, r1, #4
    1b2a:	e7e3      	b.n	1af4 <.udivsi3_skip_div0_test+0x2c>
    1b2c:	1c10      	adds	r0, r2, #0
    1b2e:	bc10      	pop	{r4}
    1b30:	4770      	bx	lr
    1b32:	2800      	cmp	r0, #0
    1b34:	d001      	beq.n	1b3a <.udivsi3_skip_div0_test+0x72>
    1b36:	2000      	movs	r0, #0
    1b38:	43c0      	mvns	r0, r0
    1b3a:	b407      	push	{r0, r1, r2}
    1b3c:	4802      	ldr	r0, [pc, #8]	; (1b48 <.udivsi3_skip_div0_test+0x80>)
    1b3e:	a102      	add	r1, pc, #8	; (adr r1, 1b48 <.udivsi3_skip_div0_test+0x80>)
    1b40:	1840      	adds	r0, r0, r1
    1b42:	9002      	str	r0, [sp, #8]
    1b44:	bd03      	pop	{r0, r1, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00000019 	.word	0x00000019

00001b4c <__aeabi_uidivmod>:
    1b4c:	2900      	cmp	r1, #0
    1b4e:	d0f0      	beq.n	1b32 <.udivsi3_skip_div0_test+0x6a>
    1b50:	b503      	push	{r0, r1, lr}
    1b52:	f7ff ffb9 	bl	1ac8 <.udivsi3_skip_div0_test>
    1b56:	bc0e      	pop	{r1, r2, r3}
    1b58:	4342      	muls	r2, r0
    1b5a:	1a89      	subs	r1, r1, r2
    1b5c:	4718      	bx	r3
    1b5e:	46c0      	nop			; (mov r8, r8)

00001b60 <__aeabi_idiv0>:
    1b60:	4770      	bx	lr
    1b62:	46c0      	nop			; (mov r8, r8)

00001b64 <__aeabi_lmul>:
    1b64:	469c      	mov	ip, r3
    1b66:	0403      	lsls	r3, r0, #16
    1b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b6a:	0c1b      	lsrs	r3, r3, #16
    1b6c:	0417      	lsls	r7, r2, #16
    1b6e:	0c3f      	lsrs	r7, r7, #16
    1b70:	0c15      	lsrs	r5, r2, #16
    1b72:	1c1e      	adds	r6, r3, #0
    1b74:	1c04      	adds	r4, r0, #0
    1b76:	0c00      	lsrs	r0, r0, #16
    1b78:	437e      	muls	r6, r7
    1b7a:	436b      	muls	r3, r5
    1b7c:	4347      	muls	r7, r0
    1b7e:	4345      	muls	r5, r0
    1b80:	18fb      	adds	r3, r7, r3
    1b82:	0c30      	lsrs	r0, r6, #16
    1b84:	1818      	adds	r0, r3, r0
    1b86:	4287      	cmp	r7, r0
    1b88:	d902      	bls.n	1b90 <__aeabi_lmul+0x2c>
    1b8a:	2380      	movs	r3, #128	; 0x80
    1b8c:	025b      	lsls	r3, r3, #9
    1b8e:	18ed      	adds	r5, r5, r3
    1b90:	0c03      	lsrs	r3, r0, #16
    1b92:	18ed      	adds	r5, r5, r3
    1b94:	4663      	mov	r3, ip
    1b96:	435c      	muls	r4, r3
    1b98:	434a      	muls	r2, r1
    1b9a:	0436      	lsls	r6, r6, #16
    1b9c:	0c36      	lsrs	r6, r6, #16
    1b9e:	18a1      	adds	r1, r4, r2
    1ba0:	0400      	lsls	r0, r0, #16
    1ba2:	1980      	adds	r0, r0, r6
    1ba4:	1949      	adds	r1, r1, r5
    1ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ba8 <__libc_init_array>:
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	4b0e      	ldr	r3, [pc, #56]	; (1be4 <__libc_init_array+0x3c>)
    1bac:	4d0e      	ldr	r5, [pc, #56]	; (1be8 <__libc_init_array+0x40>)
    1bae:	2400      	movs	r4, #0
    1bb0:	1aed      	subs	r5, r5, r3
    1bb2:	10ad      	asrs	r5, r5, #2
    1bb4:	1c1e      	adds	r6, r3, #0
    1bb6:	42ac      	cmp	r4, r5
    1bb8:	d004      	beq.n	1bc4 <__libc_init_array+0x1c>
    1bba:	00a3      	lsls	r3, r4, #2
    1bbc:	58f3      	ldr	r3, [r6, r3]
    1bbe:	4798      	blx	r3
    1bc0:	3401      	adds	r4, #1
    1bc2:	e7f8      	b.n	1bb6 <__libc_init_array+0xe>
    1bc4:	f001 f908 	bl	2dd8 <_init>
    1bc8:	4b08      	ldr	r3, [pc, #32]	; (1bec <__libc_init_array+0x44>)
    1bca:	4d09      	ldr	r5, [pc, #36]	; (1bf0 <__libc_init_array+0x48>)
    1bcc:	2400      	movs	r4, #0
    1bce:	1aed      	subs	r5, r5, r3
    1bd0:	10ad      	asrs	r5, r5, #2
    1bd2:	1c1e      	adds	r6, r3, #0
    1bd4:	42ac      	cmp	r4, r5
    1bd6:	d004      	beq.n	1be2 <__libc_init_array+0x3a>
    1bd8:	00a3      	lsls	r3, r4, #2
    1bda:	58f3      	ldr	r3, [r6, r3]
    1bdc:	4798      	blx	r3
    1bde:	3401      	adds	r4, #1
    1be0:	e7f8      	b.n	1bd4 <__libc_init_array+0x2c>
    1be2:	bd70      	pop	{r4, r5, r6, pc}
    1be4:	00002de4 	.word	0x00002de4
    1be8:	00002de4 	.word	0x00002de4
    1bec:	00002de4 	.word	0x00002de4
    1bf0:	00002de8 	.word	0x00002de8

00001bf4 <memcpy>:
    1bf4:	b510      	push	{r4, lr}
    1bf6:	2300      	movs	r3, #0
    1bf8:	4293      	cmp	r3, r2
    1bfa:	d003      	beq.n	1c04 <memcpy+0x10>
    1bfc:	5ccc      	ldrb	r4, [r1, r3]
    1bfe:	54c4      	strb	r4, [r0, r3]
    1c00:	3301      	adds	r3, #1
    1c02:	e7f9      	b.n	1bf8 <memcpy+0x4>
    1c04:	bd10      	pop	{r4, pc}

00001c06 <memset>:
    1c06:	1c03      	adds	r3, r0, #0
    1c08:	1882      	adds	r2, r0, r2
    1c0a:	4293      	cmp	r3, r2
    1c0c:	d002      	beq.n	1c14 <memset+0xe>
    1c0e:	7019      	strb	r1, [r3, #0]
    1c10:	3301      	adds	r3, #1
    1c12:	e7fa      	b.n	1c0a <memset+0x4>
    1c14:	4770      	bx	lr
	...

00001c18 <iprintf>:
    1c18:	b40f      	push	{r0, r1, r2, r3}
    1c1a:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <iprintf+0x30>)
    1c1c:	b513      	push	{r0, r1, r4, lr}
    1c1e:	681c      	ldr	r4, [r3, #0]
    1c20:	2c00      	cmp	r4, #0
    1c22:	d005      	beq.n	1c30 <iprintf+0x18>
    1c24:	69a3      	ldr	r3, [r4, #24]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d102      	bne.n	1c30 <iprintf+0x18>
    1c2a:	1c20      	adds	r0, r4, #0
    1c2c:	f000 fd98 	bl	2760 <__sinit>
    1c30:	ab05      	add	r3, sp, #20
    1c32:	68a1      	ldr	r1, [r4, #8]
    1c34:	1c20      	adds	r0, r4, #0
    1c36:	9a04      	ldr	r2, [sp, #16]
    1c38:	9301      	str	r3, [sp, #4]
    1c3a:	f000 f92b 	bl	1e94 <_vfiprintf_r>
    1c3e:	bc16      	pop	{r1, r2, r4}
    1c40:	bc08      	pop	{r3}
    1c42:	b004      	add	sp, #16
    1c44:	4718      	bx	r3
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	20000070 	.word	0x20000070

00001c4c <_puts_r>:
    1c4c:	b570      	push	{r4, r5, r6, lr}
    1c4e:	1c05      	adds	r5, r0, #0
    1c50:	1c0e      	adds	r6, r1, #0
    1c52:	2800      	cmp	r0, #0
    1c54:	d004      	beq.n	1c60 <_puts_r+0x14>
    1c56:	6982      	ldr	r2, [r0, #24]
    1c58:	2a00      	cmp	r2, #0
    1c5a:	d101      	bne.n	1c60 <_puts_r+0x14>
    1c5c:	f000 fd80 	bl	2760 <__sinit>
    1c60:	68ac      	ldr	r4, [r5, #8]
    1c62:	89a3      	ldrh	r3, [r4, #12]
    1c64:	071a      	lsls	r2, r3, #28
    1c66:	d502      	bpl.n	1c6e <_puts_r+0x22>
    1c68:	6923      	ldr	r3, [r4, #16]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d119      	bne.n	1ca2 <_puts_r+0x56>
    1c6e:	1c28      	adds	r0, r5, #0
    1c70:	1c21      	adds	r1, r4, #0
    1c72:	f000 fbf9 	bl	2468 <__swsetup_r>
    1c76:	2800      	cmp	r0, #0
    1c78:	d013      	beq.n	1ca2 <_puts_r+0x56>
    1c7a:	2001      	movs	r0, #1
    1c7c:	4240      	negs	r0, r0
    1c7e:	e045      	b.n	1d0c <_puts_r+0xc0>
    1c80:	7831      	ldrb	r1, [r6, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	da1b      	bge.n	1cbe <_puts_r+0x72>
    1c86:	69a2      	ldr	r2, [r4, #24]
    1c88:	4293      	cmp	r3, r2
    1c8a:	da11      	bge.n	1cb0 <_puts_r+0x64>
    1c8c:	1c28      	adds	r0, r5, #0
    1c8e:	1c22      	adds	r2, r4, #0
    1c90:	f000 fb92 	bl	23b8 <__swbuf_r>
    1c94:	3001      	adds	r0, #1
    1c96:	4243      	negs	r3, r0
    1c98:	4158      	adcs	r0, r3
    1c9a:	b2c0      	uxtb	r0, r0
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d1ec      	bne.n	1c7a <_puts_r+0x2e>
    1ca0:	3601      	adds	r6, #1
    1ca2:	68a3      	ldr	r3, [r4, #8]
    1ca4:	7832      	ldrb	r2, [r6, #0]
    1ca6:	3b01      	subs	r3, #1
    1ca8:	60a3      	str	r3, [r4, #8]
    1caa:	2a00      	cmp	r2, #0
    1cac:	d1e8      	bne.n	1c80 <_puts_r+0x34>
    1cae:	e00c      	b.n	1cca <_puts_r+0x7e>
    1cb0:	6823      	ldr	r3, [r4, #0]
    1cb2:	7019      	strb	r1, [r3, #0]
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	7819      	ldrb	r1, [r3, #0]
    1cb8:	290a      	cmp	r1, #10
    1cba:	d103      	bne.n	1cc4 <_puts_r+0x78>
    1cbc:	e7e6      	b.n	1c8c <_puts_r+0x40>
    1cbe:	6822      	ldr	r2, [r4, #0]
    1cc0:	7011      	strb	r1, [r2, #0]
    1cc2:	6823      	ldr	r3, [r4, #0]
    1cc4:	3301      	adds	r3, #1
    1cc6:	6023      	str	r3, [r4, #0]
    1cc8:	e7ea      	b.n	1ca0 <_puts_r+0x54>
    1cca:	2b00      	cmp	r3, #0
    1ccc:	da17      	bge.n	1cfe <_puts_r+0xb2>
    1cce:	69a2      	ldr	r2, [r4, #24]
    1cd0:	4293      	cmp	r3, r2
    1cd2:	db08      	blt.n	1ce6 <_puts_r+0x9a>
    1cd4:	6822      	ldr	r2, [r4, #0]
    1cd6:	230a      	movs	r3, #10
    1cd8:	7013      	strb	r3, [r2, #0]
    1cda:	6823      	ldr	r3, [r4, #0]
    1cdc:	7819      	ldrb	r1, [r3, #0]
    1cde:	290a      	cmp	r1, #10
    1ce0:	d111      	bne.n	1d06 <_puts_r+0xba>
    1ce2:	1c28      	adds	r0, r5, #0
    1ce4:	e001      	b.n	1cea <_puts_r+0x9e>
    1ce6:	1c28      	adds	r0, r5, #0
    1ce8:	210a      	movs	r1, #10
    1cea:	1c22      	adds	r2, r4, #0
    1cec:	f000 fb64 	bl	23b8 <__swbuf_r>
    1cf0:	3001      	adds	r0, #1
    1cf2:	4243      	negs	r3, r0
    1cf4:	4158      	adcs	r0, r3
    1cf6:	b2c0      	uxtb	r0, r0
    1cf8:	2800      	cmp	r0, #0
    1cfa:	d006      	beq.n	1d0a <_puts_r+0xbe>
    1cfc:	e7bd      	b.n	1c7a <_puts_r+0x2e>
    1cfe:	6822      	ldr	r2, [r4, #0]
    1d00:	230a      	movs	r3, #10
    1d02:	7013      	strb	r3, [r2, #0]
    1d04:	6823      	ldr	r3, [r4, #0]
    1d06:	3301      	adds	r3, #1
    1d08:	6023      	str	r3, [r4, #0]
    1d0a:	200a      	movs	r0, #10
    1d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001d10 <puts>:
    1d10:	b508      	push	{r3, lr}
    1d12:	4b03      	ldr	r3, [pc, #12]	; (1d20 <puts+0x10>)
    1d14:	1c01      	adds	r1, r0, #0
    1d16:	6818      	ldr	r0, [r3, #0]
    1d18:	f7ff ff98 	bl	1c4c <_puts_r>
    1d1c:	bd08      	pop	{r3, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	20000070 	.word	0x20000070

00001d24 <setbuf>:
    1d24:	b508      	push	{r3, lr}
    1d26:	424a      	negs	r2, r1
    1d28:	414a      	adcs	r2, r1
    1d2a:	2380      	movs	r3, #128	; 0x80
    1d2c:	0052      	lsls	r2, r2, #1
    1d2e:	00db      	lsls	r3, r3, #3
    1d30:	f000 f802 	bl	1d38 <setvbuf>
    1d34:	bd08      	pop	{r3, pc}
	...

00001d38 <setvbuf>:
    1d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d3a:	1c1e      	adds	r6, r3, #0
    1d3c:	4b3c      	ldr	r3, [pc, #240]	; (1e30 <setvbuf+0xf8>)
    1d3e:	1c04      	adds	r4, r0, #0
    1d40:	681d      	ldr	r5, [r3, #0]
    1d42:	1c0f      	adds	r7, r1, #0
    1d44:	9201      	str	r2, [sp, #4]
    1d46:	2d00      	cmp	r5, #0
    1d48:	d005      	beq.n	1d56 <setvbuf+0x1e>
    1d4a:	69aa      	ldr	r2, [r5, #24]
    1d4c:	2a00      	cmp	r2, #0
    1d4e:	d102      	bne.n	1d56 <setvbuf+0x1e>
    1d50:	1c28      	adds	r0, r5, #0
    1d52:	f000 fd05 	bl	2760 <__sinit>
    1d56:	4b37      	ldr	r3, [pc, #220]	; (1e34 <setvbuf+0xfc>)
    1d58:	429c      	cmp	r4, r3
    1d5a:	d101      	bne.n	1d60 <setvbuf+0x28>
    1d5c:	686c      	ldr	r4, [r5, #4]
    1d5e:	e008      	b.n	1d72 <setvbuf+0x3a>
    1d60:	4b35      	ldr	r3, [pc, #212]	; (1e38 <setvbuf+0x100>)
    1d62:	429c      	cmp	r4, r3
    1d64:	d101      	bne.n	1d6a <setvbuf+0x32>
    1d66:	68ac      	ldr	r4, [r5, #8]
    1d68:	e003      	b.n	1d72 <setvbuf+0x3a>
    1d6a:	4b34      	ldr	r3, [pc, #208]	; (1e3c <setvbuf+0x104>)
    1d6c:	429c      	cmp	r4, r3
    1d6e:	d100      	bne.n	1d72 <setvbuf+0x3a>
    1d70:	68ec      	ldr	r4, [r5, #12]
    1d72:	9b01      	ldr	r3, [sp, #4]
    1d74:	2b02      	cmp	r3, #2
    1d76:	d857      	bhi.n	1e28 <setvbuf+0xf0>
    1d78:	2e00      	cmp	r6, #0
    1d7a:	db55      	blt.n	1e28 <setvbuf+0xf0>
    1d7c:	1c28      	adds	r0, r5, #0
    1d7e:	1c21      	adds	r1, r4, #0
    1d80:	f000 fc6e 	bl	2660 <_fflush_r>
    1d84:	2300      	movs	r3, #0
    1d86:	6063      	str	r3, [r4, #4]
    1d88:	61a3      	str	r3, [r4, #24]
    1d8a:	89a3      	ldrh	r3, [r4, #12]
    1d8c:	061a      	lsls	r2, r3, #24
    1d8e:	d503      	bpl.n	1d98 <setvbuf+0x60>
    1d90:	1c28      	adds	r0, r5, #0
    1d92:	6921      	ldr	r1, [r4, #16]
    1d94:	f000 fdba 	bl	290c <_free_r>
    1d98:	89a3      	ldrh	r3, [r4, #12]
    1d9a:	2283      	movs	r2, #131	; 0x83
    1d9c:	4393      	bics	r3, r2
    1d9e:	81a3      	strh	r3, [r4, #12]
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	2b02      	cmp	r3, #2
    1da4:	d013      	beq.n	1dce <setvbuf+0x96>
    1da6:	2f00      	cmp	r7, #0
    1da8:	d125      	bne.n	1df6 <setvbuf+0xbe>
    1daa:	2e00      	cmp	r6, #0
    1dac:	d101      	bne.n	1db2 <setvbuf+0x7a>
    1dae:	2680      	movs	r6, #128	; 0x80
    1db0:	00f6      	lsls	r6, r6, #3
    1db2:	1c30      	adds	r0, r6, #0
    1db4:	f000 fd94 	bl	28e0 <malloc>
    1db8:	1e07      	subs	r7, r0, #0
    1dba:	d118      	bne.n	1dee <setvbuf+0xb6>
    1dbc:	2080      	movs	r0, #128	; 0x80
    1dbe:	00c0      	lsls	r0, r0, #3
    1dc0:	f000 fd8e 	bl	28e0 <malloc>
    1dc4:	1e07      	subs	r7, r0, #0
    1dc6:	d110      	bne.n	1dea <setvbuf+0xb2>
    1dc8:	2001      	movs	r0, #1
    1dca:	4240      	negs	r0, r0
    1dcc:	e000      	b.n	1dd0 <setvbuf+0x98>
    1dce:	2000      	movs	r0, #0
    1dd0:	89a3      	ldrh	r3, [r4, #12]
    1dd2:	2202      	movs	r2, #2
    1dd4:	4313      	orrs	r3, r2
    1dd6:	81a3      	strh	r3, [r4, #12]
    1dd8:	2300      	movs	r3, #0
    1dda:	60a3      	str	r3, [r4, #8]
    1ddc:	1c23      	adds	r3, r4, #0
    1dde:	3347      	adds	r3, #71	; 0x47
    1de0:	6023      	str	r3, [r4, #0]
    1de2:	6123      	str	r3, [r4, #16]
    1de4:	2301      	movs	r3, #1
    1de6:	6163      	str	r3, [r4, #20]
    1de8:	e020      	b.n	1e2c <setvbuf+0xf4>
    1dea:	2680      	movs	r6, #128	; 0x80
    1dec:	00f6      	lsls	r6, r6, #3
    1dee:	89a3      	ldrh	r3, [r4, #12]
    1df0:	2280      	movs	r2, #128	; 0x80
    1df2:	4313      	orrs	r3, r2
    1df4:	81a3      	strh	r3, [r4, #12]
    1df6:	9a01      	ldr	r2, [sp, #4]
    1df8:	2a01      	cmp	r2, #1
    1dfa:	d104      	bne.n	1e06 <setvbuf+0xce>
    1dfc:	89a3      	ldrh	r3, [r4, #12]
    1dfe:	4313      	orrs	r3, r2
    1e00:	81a3      	strh	r3, [r4, #12]
    1e02:	4273      	negs	r3, r6
    1e04:	61a3      	str	r3, [r4, #24]
    1e06:	4b0e      	ldr	r3, [pc, #56]	; (1e40 <setvbuf+0x108>)
    1e08:	2000      	movs	r0, #0
    1e0a:	62ab      	str	r3, [r5, #40]	; 0x28
    1e0c:	89a3      	ldrh	r3, [r4, #12]
    1e0e:	6027      	str	r7, [r4, #0]
    1e10:	6127      	str	r7, [r4, #16]
    1e12:	6166      	str	r6, [r4, #20]
    1e14:	071a      	lsls	r2, r3, #28
    1e16:	d509      	bpl.n	1e2c <setvbuf+0xf4>
    1e18:	2203      	movs	r2, #3
    1e1a:	4013      	ands	r3, r2
    1e1c:	425a      	negs	r2, r3
    1e1e:	4153      	adcs	r3, r2
    1e20:	425b      	negs	r3, r3
    1e22:	401e      	ands	r6, r3
    1e24:	60a6      	str	r6, [r4, #8]
    1e26:	e001      	b.n	1e2c <setvbuf+0xf4>
    1e28:	2001      	movs	r0, #1
    1e2a:	4240      	negs	r0, r0
    1e2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	20000070 	.word	0x20000070
    1e34:	00002d78 	.word	0x00002d78
    1e38:	00002d98 	.word	0x00002d98
    1e3c:	00002db8 	.word	0x00002db8
    1e40:	000026b9 	.word	0x000026b9

00001e44 <__sfputc_r>:
    1e44:	6893      	ldr	r3, [r2, #8]
    1e46:	b510      	push	{r4, lr}
    1e48:	3b01      	subs	r3, #1
    1e4a:	6093      	str	r3, [r2, #8]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	da05      	bge.n	1e5c <__sfputc_r+0x18>
    1e50:	6994      	ldr	r4, [r2, #24]
    1e52:	42a3      	cmp	r3, r4
    1e54:	db08      	blt.n	1e68 <__sfputc_r+0x24>
    1e56:	b2cb      	uxtb	r3, r1
    1e58:	2b0a      	cmp	r3, #10
    1e5a:	d005      	beq.n	1e68 <__sfputc_r+0x24>
    1e5c:	6813      	ldr	r3, [r2, #0]
    1e5e:	1c58      	adds	r0, r3, #1
    1e60:	6010      	str	r0, [r2, #0]
    1e62:	7019      	strb	r1, [r3, #0]
    1e64:	b2c8      	uxtb	r0, r1
    1e66:	e001      	b.n	1e6c <__sfputc_r+0x28>
    1e68:	f000 faa6 	bl	23b8 <__swbuf_r>
    1e6c:	bd10      	pop	{r4, pc}

00001e6e <__sfputs_r>:
    1e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e70:	1c06      	adds	r6, r0, #0
    1e72:	1c0f      	adds	r7, r1, #0
    1e74:	1c14      	adds	r4, r2, #0
    1e76:	18d5      	adds	r5, r2, r3
    1e78:	42ac      	cmp	r4, r5
    1e7a:	d008      	beq.n	1e8e <__sfputs_r+0x20>
    1e7c:	7821      	ldrb	r1, [r4, #0]
    1e7e:	1c30      	adds	r0, r6, #0
    1e80:	1c3a      	adds	r2, r7, #0
    1e82:	f7ff ffdf 	bl	1e44 <__sfputc_r>
    1e86:	3401      	adds	r4, #1
    1e88:	1c43      	adds	r3, r0, #1
    1e8a:	d1f5      	bne.n	1e78 <__sfputs_r+0xa>
    1e8c:	e000      	b.n	1e90 <__sfputs_r+0x22>
    1e8e:	2000      	movs	r0, #0
    1e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001e94 <_vfiprintf_r>:
    1e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e96:	b09f      	sub	sp, #124	; 0x7c
    1e98:	1c06      	adds	r6, r0, #0
    1e9a:	1c0f      	adds	r7, r1, #0
    1e9c:	9203      	str	r2, [sp, #12]
    1e9e:	9305      	str	r3, [sp, #20]
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d004      	beq.n	1eae <_vfiprintf_r+0x1a>
    1ea4:	6981      	ldr	r1, [r0, #24]
    1ea6:	2900      	cmp	r1, #0
    1ea8:	d101      	bne.n	1eae <_vfiprintf_r+0x1a>
    1eaa:	f000 fc59 	bl	2760 <__sinit>
    1eae:	4b75      	ldr	r3, [pc, #468]	; (2084 <STACK_SIZE+0x84>)
    1eb0:	429f      	cmp	r7, r3
    1eb2:	d101      	bne.n	1eb8 <_vfiprintf_r+0x24>
    1eb4:	6877      	ldr	r7, [r6, #4]
    1eb6:	e008      	b.n	1eca <_vfiprintf_r+0x36>
    1eb8:	4b73      	ldr	r3, [pc, #460]	; (2088 <STACK_SIZE+0x88>)
    1eba:	429f      	cmp	r7, r3
    1ebc:	d101      	bne.n	1ec2 <_vfiprintf_r+0x2e>
    1ebe:	68b7      	ldr	r7, [r6, #8]
    1ec0:	e003      	b.n	1eca <_vfiprintf_r+0x36>
    1ec2:	4b72      	ldr	r3, [pc, #456]	; (208c <STACK_SIZE+0x8c>)
    1ec4:	429f      	cmp	r7, r3
    1ec6:	d100      	bne.n	1eca <_vfiprintf_r+0x36>
    1ec8:	68f7      	ldr	r7, [r6, #12]
    1eca:	89bb      	ldrh	r3, [r7, #12]
    1ecc:	071a      	lsls	r2, r3, #28
    1ece:	d50a      	bpl.n	1ee6 <_vfiprintf_r+0x52>
    1ed0:	693b      	ldr	r3, [r7, #16]
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d007      	beq.n	1ee6 <_vfiprintf_r+0x52>
    1ed6:	ad06      	add	r5, sp, #24
    1ed8:	2300      	movs	r3, #0
    1eda:	616b      	str	r3, [r5, #20]
    1edc:	2320      	movs	r3, #32
    1ede:	766b      	strb	r3, [r5, #25]
    1ee0:	2330      	movs	r3, #48	; 0x30
    1ee2:	76ab      	strb	r3, [r5, #26]
    1ee4:	e03b      	b.n	1f5e <_vfiprintf_r+0xca>
    1ee6:	1c30      	adds	r0, r6, #0
    1ee8:	1c39      	adds	r1, r7, #0
    1eea:	f000 fabd 	bl	2468 <__swsetup_r>
    1eee:	2800      	cmp	r0, #0
    1ef0:	d0f1      	beq.n	1ed6 <_vfiprintf_r+0x42>
    1ef2:	2001      	movs	r0, #1
    1ef4:	4240      	negs	r0, r0
    1ef6:	e0c2      	b.n	207e <STACK_SIZE+0x7e>
    1ef8:	9a05      	ldr	r2, [sp, #20]
    1efa:	1d11      	adds	r1, r2, #4
    1efc:	6812      	ldr	r2, [r2, #0]
    1efe:	9105      	str	r1, [sp, #20]
    1f00:	2a00      	cmp	r2, #0
    1f02:	db76      	blt.n	1ff2 <_vfiprintf_r+0x15e>
    1f04:	9209      	str	r2, [sp, #36]	; 0x24
    1f06:	3401      	adds	r4, #1
    1f08:	7823      	ldrb	r3, [r4, #0]
    1f0a:	2b2e      	cmp	r3, #46	; 0x2e
    1f0c:	d100      	bne.n	1f10 <_vfiprintf_r+0x7c>
    1f0e:	e081      	b.n	2014 <STACK_SIZE+0x14>
    1f10:	7821      	ldrb	r1, [r4, #0]
    1f12:	485f      	ldr	r0, [pc, #380]	; (2090 <STACK_SIZE+0x90>)
    1f14:	2203      	movs	r2, #3
    1f16:	f000 fced 	bl	28f4 <memchr>
    1f1a:	2800      	cmp	r0, #0
    1f1c:	d007      	beq.n	1f2e <_vfiprintf_r+0x9a>
    1f1e:	495c      	ldr	r1, [pc, #368]	; (2090 <STACK_SIZE+0x90>)
    1f20:	682a      	ldr	r2, [r5, #0]
    1f22:	1a43      	subs	r3, r0, r1
    1f24:	2040      	movs	r0, #64	; 0x40
    1f26:	4098      	lsls	r0, r3
    1f28:	4310      	orrs	r0, r2
    1f2a:	6028      	str	r0, [r5, #0]
    1f2c:	3401      	adds	r4, #1
    1f2e:	7821      	ldrb	r1, [r4, #0]
    1f30:	1c63      	adds	r3, r4, #1
    1f32:	4858      	ldr	r0, [pc, #352]	; (2094 <STACK_SIZE+0x94>)
    1f34:	2206      	movs	r2, #6
    1f36:	9303      	str	r3, [sp, #12]
    1f38:	7629      	strb	r1, [r5, #24]
    1f3a:	f000 fcdb 	bl	28f4 <memchr>
    1f3e:	2800      	cmp	r0, #0
    1f40:	d100      	bne.n	1f44 <_vfiprintf_r+0xb0>
    1f42:	e08a      	b.n	205a <STACK_SIZE+0x5a>
    1f44:	4b54      	ldr	r3, [pc, #336]	; (2098 <STACK_SIZE+0x98>)
    1f46:	2b00      	cmp	r3, #0
    1f48:	d17e      	bne.n	2048 <STACK_SIZE+0x48>
    1f4a:	9b05      	ldr	r3, [sp, #20]
    1f4c:	2207      	movs	r2, #7
    1f4e:	3307      	adds	r3, #7
    1f50:	4393      	bics	r3, r2
    1f52:	3308      	adds	r3, #8
    1f54:	9305      	str	r3, [sp, #20]
    1f56:	696a      	ldr	r2, [r5, #20]
    1f58:	9904      	ldr	r1, [sp, #16]
    1f5a:	1853      	adds	r3, r2, r1
    1f5c:	616b      	str	r3, [r5, #20]
    1f5e:	9c03      	ldr	r4, [sp, #12]
    1f60:	7823      	ldrb	r3, [r4, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d104      	bne.n	1f70 <_vfiprintf_r+0xdc>
    1f66:	9903      	ldr	r1, [sp, #12]
    1f68:	1a61      	subs	r1, r4, r1
    1f6a:	9102      	str	r1, [sp, #8]
    1f6c:	d010      	beq.n	1f90 <_vfiprintf_r+0xfc>
    1f6e:	e003      	b.n	1f78 <_vfiprintf_r+0xe4>
    1f70:	2b25      	cmp	r3, #37	; 0x25
    1f72:	d0f8      	beq.n	1f66 <_vfiprintf_r+0xd2>
    1f74:	3401      	adds	r4, #1
    1f76:	e7f3      	b.n	1f60 <_vfiprintf_r+0xcc>
    1f78:	1c30      	adds	r0, r6, #0
    1f7a:	1c39      	adds	r1, r7, #0
    1f7c:	9a03      	ldr	r2, [sp, #12]
    1f7e:	9b02      	ldr	r3, [sp, #8]
    1f80:	f7ff ff75 	bl	1e6e <__sfputs_r>
    1f84:	3001      	adds	r0, #1
    1f86:	d075      	beq.n	2074 <STACK_SIZE+0x74>
    1f88:	696a      	ldr	r2, [r5, #20]
    1f8a:	9902      	ldr	r1, [sp, #8]
    1f8c:	1853      	adds	r3, r2, r1
    1f8e:	616b      	str	r3, [r5, #20]
    1f90:	7823      	ldrb	r3, [r4, #0]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d06e      	beq.n	2074 <STACK_SIZE+0x74>
    1f96:	2201      	movs	r2, #1
    1f98:	4252      	negs	r2, r2
    1f9a:	606a      	str	r2, [r5, #4]
    1f9c:	466a      	mov	r2, sp
    1f9e:	2300      	movs	r3, #0
    1fa0:	325b      	adds	r2, #91	; 0x5b
    1fa2:	3401      	adds	r4, #1
    1fa4:	602b      	str	r3, [r5, #0]
    1fa6:	60eb      	str	r3, [r5, #12]
    1fa8:	60ab      	str	r3, [r5, #8]
    1faa:	7013      	strb	r3, [r2, #0]
    1fac:	65ab      	str	r3, [r5, #88]	; 0x58
    1fae:	7821      	ldrb	r1, [r4, #0]
    1fb0:	483a      	ldr	r0, [pc, #232]	; (209c <STACK_SIZE+0x9c>)
    1fb2:	2205      	movs	r2, #5
    1fb4:	f000 fc9e 	bl	28f4 <memchr>
    1fb8:	2800      	cmp	r0, #0
    1fba:	d008      	beq.n	1fce <_vfiprintf_r+0x13a>
    1fbc:	4a37      	ldr	r2, [pc, #220]	; (209c <STACK_SIZE+0x9c>)
    1fbe:	3401      	adds	r4, #1
    1fc0:	1a83      	subs	r3, r0, r2
    1fc2:	2001      	movs	r0, #1
    1fc4:	4098      	lsls	r0, r3
    1fc6:	682b      	ldr	r3, [r5, #0]
    1fc8:	4318      	orrs	r0, r3
    1fca:	6028      	str	r0, [r5, #0]
    1fcc:	e7ef      	b.n	1fae <_vfiprintf_r+0x11a>
    1fce:	682b      	ldr	r3, [r5, #0]
    1fd0:	06d9      	lsls	r1, r3, #27
    1fd2:	d503      	bpl.n	1fdc <_vfiprintf_r+0x148>
    1fd4:	466a      	mov	r2, sp
    1fd6:	2120      	movs	r1, #32
    1fd8:	325b      	adds	r2, #91	; 0x5b
    1fda:	7011      	strb	r1, [r2, #0]
    1fdc:	071a      	lsls	r2, r3, #28
    1fde:	d503      	bpl.n	1fe8 <_vfiprintf_r+0x154>
    1fe0:	466a      	mov	r2, sp
    1fe2:	212b      	movs	r1, #43	; 0x2b
    1fe4:	325b      	adds	r2, #91	; 0x5b
    1fe6:	7011      	strb	r1, [r2, #0]
    1fe8:	7822      	ldrb	r2, [r4, #0]
    1fea:	2a2a      	cmp	r2, #42	; 0x2a
    1fec:	d084      	beq.n	1ef8 <_vfiprintf_r+0x64>
    1fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ff0:	e005      	b.n	1ffe <_vfiprintf_r+0x16a>
    1ff2:	4252      	negs	r2, r2
    1ff4:	60ea      	str	r2, [r5, #12]
    1ff6:	2202      	movs	r2, #2
    1ff8:	4313      	orrs	r3, r2
    1ffa:	602b      	str	r3, [r5, #0]
    1ffc:	e783      	b.n	1f06 <_vfiprintf_r+0x72>
    1ffe:	7822      	ldrb	r2, [r4, #0]
    2000:	3a30      	subs	r2, #48	; 0x30
    2002:	2a09      	cmp	r2, #9
    2004:	d804      	bhi.n	2010 <STACK_SIZE+0x10>
    2006:	210a      	movs	r1, #10
    2008:	434b      	muls	r3, r1
    200a:	3401      	adds	r4, #1
    200c:	189b      	adds	r3, r3, r2
    200e:	e7f6      	b.n	1ffe <_vfiprintf_r+0x16a>
    2010:	9309      	str	r3, [sp, #36]	; 0x24
    2012:	e779      	b.n	1f08 <_vfiprintf_r+0x74>
    2014:	7863      	ldrb	r3, [r4, #1]
    2016:	2b2a      	cmp	r3, #42	; 0x2a
    2018:	d109      	bne.n	202e <STACK_SIZE+0x2e>
    201a:	9b05      	ldr	r3, [sp, #20]
    201c:	3402      	adds	r4, #2
    201e:	1d1a      	adds	r2, r3, #4
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	9205      	str	r2, [sp, #20]
    2024:	2b00      	cmp	r3, #0
    2026:	da0d      	bge.n	2044 <STACK_SIZE+0x44>
    2028:	2301      	movs	r3, #1
    202a:	425b      	negs	r3, r3
    202c:	e00a      	b.n	2044 <STACK_SIZE+0x44>
    202e:	3401      	adds	r4, #1
    2030:	2300      	movs	r3, #0
    2032:	7822      	ldrb	r2, [r4, #0]
    2034:	3a30      	subs	r2, #48	; 0x30
    2036:	2a09      	cmp	r2, #9
    2038:	d804      	bhi.n	2044 <STACK_SIZE+0x44>
    203a:	210a      	movs	r1, #10
    203c:	434b      	muls	r3, r1
    203e:	3401      	adds	r4, #1
    2040:	189b      	adds	r3, r3, r2
    2042:	e7f6      	b.n	2032 <STACK_SIZE+0x32>
    2044:	9307      	str	r3, [sp, #28]
    2046:	e763      	b.n	1f10 <_vfiprintf_r+0x7c>
    2048:	ab05      	add	r3, sp, #20
    204a:	9300      	str	r3, [sp, #0]
    204c:	1c30      	adds	r0, r6, #0
    204e:	1c29      	adds	r1, r5, #0
    2050:	1c3a      	adds	r2, r7, #0
    2052:	4b13      	ldr	r3, [pc, #76]	; (20a0 <STACK_SIZE+0xa0>)
    2054:	e000      	b.n	2058 <STACK_SIZE+0x58>
    2056:	bf00      	nop
    2058:	e007      	b.n	206a <STACK_SIZE+0x6a>
    205a:	ab05      	add	r3, sp, #20
    205c:	9300      	str	r3, [sp, #0]
    205e:	1c30      	adds	r0, r6, #0
    2060:	1c29      	adds	r1, r5, #0
    2062:	1c3a      	adds	r2, r7, #0
    2064:	4b0e      	ldr	r3, [pc, #56]	; (20a0 <STACK_SIZE+0xa0>)
    2066:	f000 f891 	bl	218c <_printf_i>
    206a:	9004      	str	r0, [sp, #16]
    206c:	9904      	ldr	r1, [sp, #16]
    206e:	3101      	adds	r1, #1
    2070:	d000      	beq.n	2074 <STACK_SIZE+0x74>
    2072:	e770      	b.n	1f56 <_vfiprintf_r+0xc2>
    2074:	89bb      	ldrh	r3, [r7, #12]
    2076:	065a      	lsls	r2, r3, #25
    2078:	d500      	bpl.n	207c <STACK_SIZE+0x7c>
    207a:	e73a      	b.n	1ef2 <_vfiprintf_r+0x5e>
    207c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    207e:	b01f      	add	sp, #124	; 0x7c
    2080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	00002d78 	.word	0x00002d78
    2088:	00002d98 	.word	0x00002d98
    208c:	00002db8 	.word	0x00002db8
    2090:	00002d4a 	.word	0x00002d4a
    2094:	00002d4e 	.word	0x00002d4e
    2098:	00000000 	.word	0x00000000
    209c:	00002d44 	.word	0x00002d44
    20a0:	00001e6f 	.word	0x00001e6f

000020a4 <_printf_common>:
    20a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20a6:	1c15      	adds	r5, r2, #0
    20a8:	9301      	str	r3, [sp, #4]
    20aa:	690a      	ldr	r2, [r1, #16]
    20ac:	688b      	ldr	r3, [r1, #8]
    20ae:	1c06      	adds	r6, r0, #0
    20b0:	1c0c      	adds	r4, r1, #0
    20b2:	4293      	cmp	r3, r2
    20b4:	da00      	bge.n	20b8 <_printf_common+0x14>
    20b6:	1c13      	adds	r3, r2, #0
    20b8:	1c22      	adds	r2, r4, #0
    20ba:	602b      	str	r3, [r5, #0]
    20bc:	3243      	adds	r2, #67	; 0x43
    20be:	7812      	ldrb	r2, [r2, #0]
    20c0:	2a00      	cmp	r2, #0
    20c2:	d001      	beq.n	20c8 <_printf_common+0x24>
    20c4:	3301      	adds	r3, #1
    20c6:	602b      	str	r3, [r5, #0]
    20c8:	6820      	ldr	r0, [r4, #0]
    20ca:	0680      	lsls	r0, r0, #26
    20cc:	d502      	bpl.n	20d4 <_printf_common+0x30>
    20ce:	682b      	ldr	r3, [r5, #0]
    20d0:	3302      	adds	r3, #2
    20d2:	602b      	str	r3, [r5, #0]
    20d4:	6821      	ldr	r1, [r4, #0]
    20d6:	2706      	movs	r7, #6
    20d8:	400f      	ands	r7, r1
    20da:	d01f      	beq.n	211c <_printf_common+0x78>
    20dc:	1c23      	adds	r3, r4, #0
    20de:	3343      	adds	r3, #67	; 0x43
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	1e5a      	subs	r2, r3, #1
    20e4:	4193      	sbcs	r3, r2
    20e6:	6822      	ldr	r2, [r4, #0]
    20e8:	0692      	lsls	r2, r2, #26
    20ea:	d51f      	bpl.n	212c <_printf_common+0x88>
    20ec:	18e1      	adds	r1, r4, r3
    20ee:	3140      	adds	r1, #64	; 0x40
    20f0:	2030      	movs	r0, #48	; 0x30
    20f2:	70c8      	strb	r0, [r1, #3]
    20f4:	1c21      	adds	r1, r4, #0
    20f6:	1c5a      	adds	r2, r3, #1
    20f8:	3145      	adds	r1, #69	; 0x45
    20fa:	7809      	ldrb	r1, [r1, #0]
    20fc:	18a2      	adds	r2, r4, r2
    20fe:	3240      	adds	r2, #64	; 0x40
    2100:	3302      	adds	r3, #2
    2102:	70d1      	strb	r1, [r2, #3]
    2104:	e012      	b.n	212c <_printf_common+0x88>
    2106:	1c22      	adds	r2, r4, #0
    2108:	1c30      	adds	r0, r6, #0
    210a:	9901      	ldr	r1, [sp, #4]
    210c:	3219      	adds	r2, #25
    210e:	2301      	movs	r3, #1
    2110:	9f08      	ldr	r7, [sp, #32]
    2112:	47b8      	blx	r7
    2114:	3001      	adds	r0, #1
    2116:	d011      	beq.n	213c <_printf_common+0x98>
    2118:	9f00      	ldr	r7, [sp, #0]
    211a:	3701      	adds	r7, #1
    211c:	9700      	str	r7, [sp, #0]
    211e:	68e0      	ldr	r0, [r4, #12]
    2120:	6829      	ldr	r1, [r5, #0]
    2122:	9f00      	ldr	r7, [sp, #0]
    2124:	1a43      	subs	r3, r0, r1
    2126:	429f      	cmp	r7, r3
    2128:	dbed      	blt.n	2106 <_printf_common+0x62>
    212a:	e7d7      	b.n	20dc <_printf_common+0x38>
    212c:	1c22      	adds	r2, r4, #0
    212e:	1c30      	adds	r0, r6, #0
    2130:	9901      	ldr	r1, [sp, #4]
    2132:	3243      	adds	r2, #67	; 0x43
    2134:	9f08      	ldr	r7, [sp, #32]
    2136:	47b8      	blx	r7
    2138:	3001      	adds	r0, #1
    213a:	d102      	bne.n	2142 <_printf_common+0x9e>
    213c:	2001      	movs	r0, #1
    213e:	4240      	negs	r0, r0
    2140:	e023      	b.n	218a <_printf_common+0xe6>
    2142:	6820      	ldr	r0, [r4, #0]
    2144:	2106      	movs	r1, #6
    2146:	682b      	ldr	r3, [r5, #0]
    2148:	68e2      	ldr	r2, [r4, #12]
    214a:	4001      	ands	r1, r0
    214c:	2500      	movs	r5, #0
    214e:	2904      	cmp	r1, #4
    2150:	d103      	bne.n	215a <_printf_common+0xb6>
    2152:	1ad5      	subs	r5, r2, r3
    2154:	43eb      	mvns	r3, r5
    2156:	17db      	asrs	r3, r3, #31
    2158:	401d      	ands	r5, r3
    215a:	68a2      	ldr	r2, [r4, #8]
    215c:	6923      	ldr	r3, [r4, #16]
    215e:	429a      	cmp	r2, r3
    2160:	dd01      	ble.n	2166 <_printf_common+0xc2>
    2162:	1ad3      	subs	r3, r2, r3
    2164:	18ed      	adds	r5, r5, r3
    2166:	2700      	movs	r7, #0
    2168:	9700      	str	r7, [sp, #0]
    216a:	9f00      	ldr	r7, [sp, #0]
    216c:	42af      	cmp	r7, r5
    216e:	da0b      	bge.n	2188 <_printf_common+0xe4>
    2170:	1c22      	adds	r2, r4, #0
    2172:	1c30      	adds	r0, r6, #0
    2174:	9901      	ldr	r1, [sp, #4]
    2176:	321a      	adds	r2, #26
    2178:	2301      	movs	r3, #1
    217a:	9f08      	ldr	r7, [sp, #32]
    217c:	47b8      	blx	r7
    217e:	3001      	adds	r0, #1
    2180:	d0dc      	beq.n	213c <_printf_common+0x98>
    2182:	9f00      	ldr	r7, [sp, #0]
    2184:	3701      	adds	r7, #1
    2186:	e7ef      	b.n	2168 <_printf_common+0xc4>
    2188:	2000      	movs	r0, #0
    218a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000218c <_printf_i>:
    218c:	b5f0      	push	{r4, r5, r6, r7, lr}
    218e:	1c0d      	adds	r5, r1, #0
    2190:	b08b      	sub	sp, #44	; 0x2c
    2192:	3543      	adds	r5, #67	; 0x43
    2194:	9206      	str	r2, [sp, #24]
    2196:	9005      	str	r0, [sp, #20]
    2198:	9307      	str	r3, [sp, #28]
    219a:	9504      	str	r5, [sp, #16]
    219c:	7e0b      	ldrb	r3, [r1, #24]
    219e:	1c0c      	adds	r4, r1, #0
    21a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    21a2:	2b6e      	cmp	r3, #110	; 0x6e
    21a4:	d100      	bne.n	21a8 <_printf_i+0x1c>
    21a6:	e0a7      	b.n	22f8 <_printf_i+0x16c>
    21a8:	d811      	bhi.n	21ce <_printf_i+0x42>
    21aa:	2b63      	cmp	r3, #99	; 0x63
    21ac:	d022      	beq.n	21f4 <_printf_i+0x68>
    21ae:	d809      	bhi.n	21c4 <_printf_i+0x38>
    21b0:	2b00      	cmp	r3, #0
    21b2:	d100      	bne.n	21b6 <_printf_i+0x2a>
    21b4:	e0b0      	b.n	2318 <_printf_i+0x18c>
    21b6:	2b58      	cmp	r3, #88	; 0x58
    21b8:	d000      	beq.n	21bc <_printf_i+0x30>
    21ba:	e0c0      	b.n	233e <_printf_i+0x1b2>
    21bc:	3145      	adds	r1, #69	; 0x45
    21be:	700b      	strb	r3, [r1, #0]
    21c0:	4d7b      	ldr	r5, [pc, #492]	; (23b0 <_printf_i+0x224>)
    21c2:	e04e      	b.n	2262 <_printf_i+0xd6>
    21c4:	2b64      	cmp	r3, #100	; 0x64
    21c6:	d01c      	beq.n	2202 <_printf_i+0x76>
    21c8:	2b69      	cmp	r3, #105	; 0x69
    21ca:	d01a      	beq.n	2202 <_printf_i+0x76>
    21cc:	e0b7      	b.n	233e <_printf_i+0x1b2>
    21ce:	2b73      	cmp	r3, #115	; 0x73
    21d0:	d100      	bne.n	21d4 <_printf_i+0x48>
    21d2:	e0a5      	b.n	2320 <_printf_i+0x194>
    21d4:	d809      	bhi.n	21ea <_printf_i+0x5e>
    21d6:	2b6f      	cmp	r3, #111	; 0x6f
    21d8:	d029      	beq.n	222e <_printf_i+0xa2>
    21da:	2b70      	cmp	r3, #112	; 0x70
    21dc:	d000      	beq.n	21e0 <_printf_i+0x54>
    21de:	e0ae      	b.n	233e <_printf_i+0x1b2>
    21e0:	680e      	ldr	r6, [r1, #0]
    21e2:	2320      	movs	r3, #32
    21e4:	4333      	orrs	r3, r6
    21e6:	600b      	str	r3, [r1, #0]
    21e8:	e036      	b.n	2258 <_printf_i+0xcc>
    21ea:	2b75      	cmp	r3, #117	; 0x75
    21ec:	d01f      	beq.n	222e <_printf_i+0xa2>
    21ee:	2b78      	cmp	r3, #120	; 0x78
    21f0:	d032      	beq.n	2258 <_printf_i+0xcc>
    21f2:	e0a4      	b.n	233e <_printf_i+0x1b2>
    21f4:	6813      	ldr	r3, [r2, #0]
    21f6:	1c0d      	adds	r5, r1, #0
    21f8:	1d19      	adds	r1, r3, #4
    21fa:	3542      	adds	r5, #66	; 0x42
    21fc:	6011      	str	r1, [r2, #0]
    21fe:	681b      	ldr	r3, [r3, #0]
    2200:	e09f      	b.n	2342 <_printf_i+0x1b6>
    2202:	6821      	ldr	r1, [r4, #0]
    2204:	6813      	ldr	r3, [r2, #0]
    2206:	060e      	lsls	r6, r1, #24
    2208:	d503      	bpl.n	2212 <_printf_i+0x86>
    220a:	1d19      	adds	r1, r3, #4
    220c:	6011      	str	r1, [r2, #0]
    220e:	681e      	ldr	r6, [r3, #0]
    2210:	e005      	b.n	221e <_printf_i+0x92>
    2212:	0648      	lsls	r0, r1, #25
    2214:	d5f9      	bpl.n	220a <_printf_i+0x7e>
    2216:	1d19      	adds	r1, r3, #4
    2218:	6011      	str	r1, [r2, #0]
    221a:	2100      	movs	r1, #0
    221c:	5e5e      	ldrsh	r6, [r3, r1]
    221e:	4b64      	ldr	r3, [pc, #400]	; (23b0 <_printf_i+0x224>)
    2220:	2e00      	cmp	r6, #0
    2222:	da3b      	bge.n	229c <_printf_i+0x110>
    2224:	9d04      	ldr	r5, [sp, #16]
    2226:	222d      	movs	r2, #45	; 0x2d
    2228:	4276      	negs	r6, r6
    222a:	702a      	strb	r2, [r5, #0]
    222c:	e036      	b.n	229c <_printf_i+0x110>
    222e:	6821      	ldr	r1, [r4, #0]
    2230:	6813      	ldr	r3, [r2, #0]
    2232:	060e      	lsls	r6, r1, #24
    2234:	d503      	bpl.n	223e <_printf_i+0xb2>
    2236:	1d19      	adds	r1, r3, #4
    2238:	6011      	str	r1, [r2, #0]
    223a:	681e      	ldr	r6, [r3, #0]
    223c:	e004      	b.n	2248 <_printf_i+0xbc>
    223e:	0648      	lsls	r0, r1, #25
    2240:	d5f9      	bpl.n	2236 <_printf_i+0xaa>
    2242:	1d19      	adds	r1, r3, #4
    2244:	881e      	ldrh	r6, [r3, #0]
    2246:	6011      	str	r1, [r2, #0]
    2248:	4b59      	ldr	r3, [pc, #356]	; (23b0 <_printf_i+0x224>)
    224a:	7e22      	ldrb	r2, [r4, #24]
    224c:	9303      	str	r3, [sp, #12]
    224e:	2708      	movs	r7, #8
    2250:	2a6f      	cmp	r2, #111	; 0x6f
    2252:	d01e      	beq.n	2292 <_printf_i+0x106>
    2254:	270a      	movs	r7, #10
    2256:	e01c      	b.n	2292 <_printf_i+0x106>
    2258:	1c23      	adds	r3, r4, #0
    225a:	2178      	movs	r1, #120	; 0x78
    225c:	3345      	adds	r3, #69	; 0x45
    225e:	4d55      	ldr	r5, [pc, #340]	; (23b4 <_printf_i+0x228>)
    2260:	7019      	strb	r1, [r3, #0]
    2262:	6811      	ldr	r1, [r2, #0]
    2264:	6823      	ldr	r3, [r4, #0]
    2266:	1d08      	adds	r0, r1, #4
    2268:	9503      	str	r5, [sp, #12]
    226a:	6010      	str	r0, [r2, #0]
    226c:	061e      	lsls	r6, r3, #24
    226e:	d501      	bpl.n	2274 <_printf_i+0xe8>
    2270:	680e      	ldr	r6, [r1, #0]
    2272:	e002      	b.n	227a <_printf_i+0xee>
    2274:	0658      	lsls	r0, r3, #25
    2276:	d5fb      	bpl.n	2270 <_printf_i+0xe4>
    2278:	880e      	ldrh	r6, [r1, #0]
    227a:	07d9      	lsls	r1, r3, #31
    227c:	d502      	bpl.n	2284 <_printf_i+0xf8>
    227e:	2220      	movs	r2, #32
    2280:	4313      	orrs	r3, r2
    2282:	6023      	str	r3, [r4, #0]
    2284:	2710      	movs	r7, #16
    2286:	2e00      	cmp	r6, #0
    2288:	d103      	bne.n	2292 <_printf_i+0x106>
    228a:	6822      	ldr	r2, [r4, #0]
    228c:	2320      	movs	r3, #32
    228e:	439a      	bics	r2, r3
    2290:	6022      	str	r2, [r4, #0]
    2292:	1c23      	adds	r3, r4, #0
    2294:	2200      	movs	r2, #0
    2296:	3343      	adds	r3, #67	; 0x43
    2298:	701a      	strb	r2, [r3, #0]
    229a:	e001      	b.n	22a0 <_printf_i+0x114>
    229c:	9303      	str	r3, [sp, #12]
    229e:	270a      	movs	r7, #10
    22a0:	6863      	ldr	r3, [r4, #4]
    22a2:	60a3      	str	r3, [r4, #8]
    22a4:	2b00      	cmp	r3, #0
    22a6:	db03      	blt.n	22b0 <_printf_i+0x124>
    22a8:	6825      	ldr	r5, [r4, #0]
    22aa:	2204      	movs	r2, #4
    22ac:	4395      	bics	r5, r2
    22ae:	6025      	str	r5, [r4, #0]
    22b0:	2e00      	cmp	r6, #0
    22b2:	d102      	bne.n	22ba <_printf_i+0x12e>
    22b4:	9d04      	ldr	r5, [sp, #16]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d00e      	beq.n	22d8 <_printf_i+0x14c>
    22ba:	9d04      	ldr	r5, [sp, #16]
    22bc:	1c30      	adds	r0, r6, #0
    22be:	1c39      	adds	r1, r7, #0
    22c0:	f7ff fc44 	bl	1b4c <__aeabi_uidivmod>
    22c4:	9803      	ldr	r0, [sp, #12]
    22c6:	3d01      	subs	r5, #1
    22c8:	5c43      	ldrb	r3, [r0, r1]
    22ca:	1c30      	adds	r0, r6, #0
    22cc:	702b      	strb	r3, [r5, #0]
    22ce:	1c39      	adds	r1, r7, #0
    22d0:	f7ff fbf8 	bl	1ac4 <__aeabi_uidiv>
    22d4:	1e06      	subs	r6, r0, #0
    22d6:	d1f1      	bne.n	22bc <_printf_i+0x130>
    22d8:	2f08      	cmp	r7, #8
    22da:	d109      	bne.n	22f0 <_printf_i+0x164>
    22dc:	6821      	ldr	r1, [r4, #0]
    22de:	07c9      	lsls	r1, r1, #31
    22e0:	d506      	bpl.n	22f0 <_printf_i+0x164>
    22e2:	6862      	ldr	r2, [r4, #4]
    22e4:	6923      	ldr	r3, [r4, #16]
    22e6:	429a      	cmp	r2, r3
    22e8:	dc02      	bgt.n	22f0 <_printf_i+0x164>
    22ea:	3d01      	subs	r5, #1
    22ec:	2330      	movs	r3, #48	; 0x30
    22ee:	702b      	strb	r3, [r5, #0]
    22f0:	9e04      	ldr	r6, [sp, #16]
    22f2:	1b73      	subs	r3, r6, r5
    22f4:	6123      	str	r3, [r4, #16]
    22f6:	e02a      	b.n	234e <_printf_i+0x1c2>
    22f8:	6808      	ldr	r0, [r1, #0]
    22fa:	6813      	ldr	r3, [r2, #0]
    22fc:	6949      	ldr	r1, [r1, #20]
    22fe:	0605      	lsls	r5, r0, #24
    2300:	d504      	bpl.n	230c <_printf_i+0x180>
    2302:	1d18      	adds	r0, r3, #4
    2304:	6010      	str	r0, [r2, #0]
    2306:	681b      	ldr	r3, [r3, #0]
    2308:	6019      	str	r1, [r3, #0]
    230a:	e005      	b.n	2318 <_printf_i+0x18c>
    230c:	0646      	lsls	r6, r0, #25
    230e:	d5f8      	bpl.n	2302 <_printf_i+0x176>
    2310:	1d18      	adds	r0, r3, #4
    2312:	6010      	str	r0, [r2, #0]
    2314:	681b      	ldr	r3, [r3, #0]
    2316:	8019      	strh	r1, [r3, #0]
    2318:	2300      	movs	r3, #0
    231a:	6123      	str	r3, [r4, #16]
    231c:	9d04      	ldr	r5, [sp, #16]
    231e:	e016      	b.n	234e <_printf_i+0x1c2>
    2320:	6813      	ldr	r3, [r2, #0]
    2322:	1d19      	adds	r1, r3, #4
    2324:	6011      	str	r1, [r2, #0]
    2326:	681d      	ldr	r5, [r3, #0]
    2328:	1c28      	adds	r0, r5, #0
    232a:	f000 fbe9 	bl	2b00 <strlen>
    232e:	6863      	ldr	r3, [r4, #4]
    2330:	6120      	str	r0, [r4, #16]
    2332:	4298      	cmp	r0, r3
    2334:	d900      	bls.n	2338 <_printf_i+0x1ac>
    2336:	6123      	str	r3, [r4, #16]
    2338:	6920      	ldr	r0, [r4, #16]
    233a:	6060      	str	r0, [r4, #4]
    233c:	e004      	b.n	2348 <_printf_i+0x1bc>
    233e:	1c25      	adds	r5, r4, #0
    2340:	3542      	adds	r5, #66	; 0x42
    2342:	702b      	strb	r3, [r5, #0]
    2344:	2301      	movs	r3, #1
    2346:	6123      	str	r3, [r4, #16]
    2348:	9e04      	ldr	r6, [sp, #16]
    234a:	2300      	movs	r3, #0
    234c:	7033      	strb	r3, [r6, #0]
    234e:	9e07      	ldr	r6, [sp, #28]
    2350:	9805      	ldr	r0, [sp, #20]
    2352:	9600      	str	r6, [sp, #0]
    2354:	1c21      	adds	r1, r4, #0
    2356:	aa09      	add	r2, sp, #36	; 0x24
    2358:	9b06      	ldr	r3, [sp, #24]
    235a:	f7ff fea3 	bl	20a4 <_printf_common>
    235e:	3001      	adds	r0, #1
    2360:	d102      	bne.n	2368 <_printf_i+0x1dc>
    2362:	2001      	movs	r0, #1
    2364:	4240      	negs	r0, r0
    2366:	e021      	b.n	23ac <_printf_i+0x220>
    2368:	1c2a      	adds	r2, r5, #0
    236a:	9805      	ldr	r0, [sp, #20]
    236c:	9906      	ldr	r1, [sp, #24]
    236e:	6923      	ldr	r3, [r4, #16]
    2370:	9d07      	ldr	r5, [sp, #28]
    2372:	47a8      	blx	r5
    2374:	3001      	adds	r0, #1
    2376:	d0f4      	beq.n	2362 <_printf_i+0x1d6>
    2378:	6826      	ldr	r6, [r4, #0]
    237a:	07b6      	lsls	r6, r6, #30
    237c:	d405      	bmi.n	238a <_printf_i+0x1fe>
    237e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2380:	68e0      	ldr	r0, [r4, #12]
    2382:	4298      	cmp	r0, r3
    2384:	da12      	bge.n	23ac <_printf_i+0x220>
    2386:	1c18      	adds	r0, r3, #0
    2388:	e010      	b.n	23ac <_printf_i+0x220>
    238a:	2500      	movs	r5, #0
    238c:	68e0      	ldr	r0, [r4, #12]
    238e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2390:	1a43      	subs	r3, r0, r1
    2392:	429d      	cmp	r5, r3
    2394:	daf3      	bge.n	237e <_printf_i+0x1f2>
    2396:	1c22      	adds	r2, r4, #0
    2398:	9805      	ldr	r0, [sp, #20]
    239a:	9906      	ldr	r1, [sp, #24]
    239c:	3219      	adds	r2, #25
    239e:	2301      	movs	r3, #1
    23a0:	9e07      	ldr	r6, [sp, #28]
    23a2:	47b0      	blx	r6
    23a4:	3001      	adds	r0, #1
    23a6:	d0dc      	beq.n	2362 <_printf_i+0x1d6>
    23a8:	3501      	adds	r5, #1
    23aa:	e7ef      	b.n	238c <_printf_i+0x200>
    23ac:	b00b      	add	sp, #44	; 0x2c
    23ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23b0:	00002d55 	.word	0x00002d55
    23b4:	00002d66 	.word	0x00002d66

000023b8 <__swbuf_r>:
    23b8:	b570      	push	{r4, r5, r6, lr}
    23ba:	1c05      	adds	r5, r0, #0
    23bc:	1c0e      	adds	r6, r1, #0
    23be:	1c14      	adds	r4, r2, #0
    23c0:	2800      	cmp	r0, #0
    23c2:	d004      	beq.n	23ce <__swbuf_r+0x16>
    23c4:	6982      	ldr	r2, [r0, #24]
    23c6:	2a00      	cmp	r2, #0
    23c8:	d101      	bne.n	23ce <__swbuf_r+0x16>
    23ca:	f000 f9c9 	bl	2760 <__sinit>
    23ce:	4b23      	ldr	r3, [pc, #140]	; (245c <__swbuf_r+0xa4>)
    23d0:	429c      	cmp	r4, r3
    23d2:	d101      	bne.n	23d8 <__swbuf_r+0x20>
    23d4:	686c      	ldr	r4, [r5, #4]
    23d6:	e008      	b.n	23ea <__swbuf_r+0x32>
    23d8:	4b21      	ldr	r3, [pc, #132]	; (2460 <__swbuf_r+0xa8>)
    23da:	429c      	cmp	r4, r3
    23dc:	d101      	bne.n	23e2 <__swbuf_r+0x2a>
    23de:	68ac      	ldr	r4, [r5, #8]
    23e0:	e003      	b.n	23ea <__swbuf_r+0x32>
    23e2:	4b20      	ldr	r3, [pc, #128]	; (2464 <__swbuf_r+0xac>)
    23e4:	429c      	cmp	r4, r3
    23e6:	d100      	bne.n	23ea <__swbuf_r+0x32>
    23e8:	68ec      	ldr	r4, [r5, #12]
    23ea:	69a3      	ldr	r3, [r4, #24]
    23ec:	60a3      	str	r3, [r4, #8]
    23ee:	89a3      	ldrh	r3, [r4, #12]
    23f0:	071a      	lsls	r2, r3, #28
    23f2:	d50a      	bpl.n	240a <__swbuf_r+0x52>
    23f4:	6923      	ldr	r3, [r4, #16]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d007      	beq.n	240a <__swbuf_r+0x52>
    23fa:	6822      	ldr	r2, [r4, #0]
    23fc:	6923      	ldr	r3, [r4, #16]
    23fe:	b2f6      	uxtb	r6, r6
    2400:	1ad0      	subs	r0, r2, r3
    2402:	6962      	ldr	r2, [r4, #20]
    2404:	4290      	cmp	r0, r2
    2406:	db0f      	blt.n	2428 <__swbuf_r+0x70>
    2408:	e008      	b.n	241c <__swbuf_r+0x64>
    240a:	1c28      	adds	r0, r5, #0
    240c:	1c21      	adds	r1, r4, #0
    240e:	f000 f82b 	bl	2468 <__swsetup_r>
    2412:	2800      	cmp	r0, #0
    2414:	d0f1      	beq.n	23fa <__swbuf_r+0x42>
    2416:	2001      	movs	r0, #1
    2418:	4240      	negs	r0, r0
    241a:	e01d      	b.n	2458 <__swbuf_r+0xa0>
    241c:	1c28      	adds	r0, r5, #0
    241e:	1c21      	adds	r1, r4, #0
    2420:	f000 f91e 	bl	2660 <_fflush_r>
    2424:	2800      	cmp	r0, #0
    2426:	d1f6      	bne.n	2416 <__swbuf_r+0x5e>
    2428:	68a3      	ldr	r3, [r4, #8]
    242a:	3001      	adds	r0, #1
    242c:	3b01      	subs	r3, #1
    242e:	60a3      	str	r3, [r4, #8]
    2430:	6823      	ldr	r3, [r4, #0]
    2432:	1c5a      	adds	r2, r3, #1
    2434:	6022      	str	r2, [r4, #0]
    2436:	701e      	strb	r6, [r3, #0]
    2438:	6963      	ldr	r3, [r4, #20]
    243a:	4298      	cmp	r0, r3
    243c:	d005      	beq.n	244a <__swbuf_r+0x92>
    243e:	89a3      	ldrh	r3, [r4, #12]
    2440:	1c30      	adds	r0, r6, #0
    2442:	07da      	lsls	r2, r3, #31
    2444:	d508      	bpl.n	2458 <__swbuf_r+0xa0>
    2446:	2e0a      	cmp	r6, #10
    2448:	d106      	bne.n	2458 <__swbuf_r+0xa0>
    244a:	1c28      	adds	r0, r5, #0
    244c:	1c21      	adds	r1, r4, #0
    244e:	f000 f907 	bl	2660 <_fflush_r>
    2452:	2800      	cmp	r0, #0
    2454:	d1df      	bne.n	2416 <__swbuf_r+0x5e>
    2456:	1c30      	adds	r0, r6, #0
    2458:	bd70      	pop	{r4, r5, r6, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	00002d78 	.word	0x00002d78
    2460:	00002d98 	.word	0x00002d98
    2464:	00002db8 	.word	0x00002db8

00002468 <__swsetup_r>:
    2468:	4b34      	ldr	r3, [pc, #208]	; (253c <__swsetup_r+0xd4>)
    246a:	b570      	push	{r4, r5, r6, lr}
    246c:	681d      	ldr	r5, [r3, #0]
    246e:	1c06      	adds	r6, r0, #0
    2470:	1c0c      	adds	r4, r1, #0
    2472:	2d00      	cmp	r5, #0
    2474:	d005      	beq.n	2482 <__swsetup_r+0x1a>
    2476:	69a9      	ldr	r1, [r5, #24]
    2478:	2900      	cmp	r1, #0
    247a:	d102      	bne.n	2482 <__swsetup_r+0x1a>
    247c:	1c28      	adds	r0, r5, #0
    247e:	f000 f96f 	bl	2760 <__sinit>
    2482:	4b2f      	ldr	r3, [pc, #188]	; (2540 <__swsetup_r+0xd8>)
    2484:	429c      	cmp	r4, r3
    2486:	d101      	bne.n	248c <__swsetup_r+0x24>
    2488:	686c      	ldr	r4, [r5, #4]
    248a:	e008      	b.n	249e <__swsetup_r+0x36>
    248c:	4b2d      	ldr	r3, [pc, #180]	; (2544 <__swsetup_r+0xdc>)
    248e:	429c      	cmp	r4, r3
    2490:	d101      	bne.n	2496 <__swsetup_r+0x2e>
    2492:	68ac      	ldr	r4, [r5, #8]
    2494:	e003      	b.n	249e <__swsetup_r+0x36>
    2496:	4b2c      	ldr	r3, [pc, #176]	; (2548 <__swsetup_r+0xe0>)
    2498:	429c      	cmp	r4, r3
    249a:	d100      	bne.n	249e <__swsetup_r+0x36>
    249c:	68ec      	ldr	r4, [r5, #12]
    249e:	89a2      	ldrh	r2, [r4, #12]
    24a0:	b293      	uxth	r3, r2
    24a2:	0719      	lsls	r1, r3, #28
    24a4:	d421      	bmi.n	24ea <__swsetup_r+0x82>
    24a6:	06d9      	lsls	r1, r3, #27
    24a8:	d405      	bmi.n	24b6 <__swsetup_r+0x4e>
    24aa:	2309      	movs	r3, #9
    24ac:	6033      	str	r3, [r6, #0]
    24ae:	2340      	movs	r3, #64	; 0x40
    24b0:	431a      	orrs	r2, r3
    24b2:	81a2      	strh	r2, [r4, #12]
    24b4:	e03f      	b.n	2536 <__swsetup_r+0xce>
    24b6:	075a      	lsls	r2, r3, #29
    24b8:	d513      	bpl.n	24e2 <__swsetup_r+0x7a>
    24ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    24bc:	2900      	cmp	r1, #0
    24be:	d008      	beq.n	24d2 <__swsetup_r+0x6a>
    24c0:	1c23      	adds	r3, r4, #0
    24c2:	3344      	adds	r3, #68	; 0x44
    24c4:	4299      	cmp	r1, r3
    24c6:	d002      	beq.n	24ce <__swsetup_r+0x66>
    24c8:	1c30      	adds	r0, r6, #0
    24ca:	f000 fa1f 	bl	290c <_free_r>
    24ce:	2300      	movs	r3, #0
    24d0:	6363      	str	r3, [r4, #52]	; 0x34
    24d2:	89a3      	ldrh	r3, [r4, #12]
    24d4:	2224      	movs	r2, #36	; 0x24
    24d6:	4393      	bics	r3, r2
    24d8:	81a3      	strh	r3, [r4, #12]
    24da:	2300      	movs	r3, #0
    24dc:	6063      	str	r3, [r4, #4]
    24de:	6923      	ldr	r3, [r4, #16]
    24e0:	6023      	str	r3, [r4, #0]
    24e2:	89a3      	ldrh	r3, [r4, #12]
    24e4:	2208      	movs	r2, #8
    24e6:	4313      	orrs	r3, r2
    24e8:	81a3      	strh	r3, [r4, #12]
    24ea:	6921      	ldr	r1, [r4, #16]
    24ec:	2900      	cmp	r1, #0
    24ee:	d10b      	bne.n	2508 <__swsetup_r+0xa0>
    24f0:	89a3      	ldrh	r3, [r4, #12]
    24f2:	22a0      	movs	r2, #160	; 0xa0
    24f4:	0092      	lsls	r2, r2, #2
    24f6:	401a      	ands	r2, r3
    24f8:	2380      	movs	r3, #128	; 0x80
    24fa:	009b      	lsls	r3, r3, #2
    24fc:	429a      	cmp	r2, r3
    24fe:	d003      	beq.n	2508 <__swsetup_r+0xa0>
    2500:	1c30      	adds	r0, r6, #0
    2502:	1c21      	adds	r1, r4, #0
    2504:	f000 f99c 	bl	2840 <__smakebuf_r>
    2508:	89a3      	ldrh	r3, [r4, #12]
    250a:	2201      	movs	r2, #1
    250c:	401a      	ands	r2, r3
    250e:	d005      	beq.n	251c <__swsetup_r+0xb4>
    2510:	6961      	ldr	r1, [r4, #20]
    2512:	2200      	movs	r2, #0
    2514:	60a2      	str	r2, [r4, #8]
    2516:	424a      	negs	r2, r1
    2518:	61a2      	str	r2, [r4, #24]
    251a:	e003      	b.n	2524 <__swsetup_r+0xbc>
    251c:	0799      	lsls	r1, r3, #30
    251e:	d400      	bmi.n	2522 <__swsetup_r+0xba>
    2520:	6962      	ldr	r2, [r4, #20]
    2522:	60a2      	str	r2, [r4, #8]
    2524:	6922      	ldr	r2, [r4, #16]
    2526:	2000      	movs	r0, #0
    2528:	4282      	cmp	r2, r0
    252a:	d106      	bne.n	253a <__swsetup_r+0xd2>
    252c:	0619      	lsls	r1, r3, #24
    252e:	d504      	bpl.n	253a <__swsetup_r+0xd2>
    2530:	2240      	movs	r2, #64	; 0x40
    2532:	4313      	orrs	r3, r2
    2534:	81a3      	strh	r3, [r4, #12]
    2536:	2001      	movs	r0, #1
    2538:	4240      	negs	r0, r0
    253a:	bd70      	pop	{r4, r5, r6, pc}
    253c:	20000070 	.word	0x20000070
    2540:	00002d78 	.word	0x00002d78
    2544:	00002d98 	.word	0x00002d98
    2548:	00002db8 	.word	0x00002db8

0000254c <__sflush_r>:
    254c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    254e:	898b      	ldrh	r3, [r1, #12]
    2550:	1c05      	adds	r5, r0, #0
    2552:	1c0c      	adds	r4, r1, #0
    2554:	0719      	lsls	r1, r3, #28
    2556:	d45e      	bmi.n	2616 <__sflush_r+0xca>
    2558:	6862      	ldr	r2, [r4, #4]
    255a:	2a00      	cmp	r2, #0
    255c:	dc02      	bgt.n	2564 <__sflush_r+0x18>
    255e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2560:	2f00      	cmp	r7, #0
    2562:	dd1a      	ble.n	259a <__sflush_r+0x4e>
    2564:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2566:	2f00      	cmp	r7, #0
    2568:	d017      	beq.n	259a <__sflush_r+0x4e>
    256a:	2200      	movs	r2, #0
    256c:	682e      	ldr	r6, [r5, #0]
    256e:	602a      	str	r2, [r5, #0]
    2570:	2280      	movs	r2, #128	; 0x80
    2572:	0152      	lsls	r2, r2, #5
    2574:	401a      	ands	r2, r3
    2576:	d001      	beq.n	257c <__sflush_r+0x30>
    2578:	6d62      	ldr	r2, [r4, #84]	; 0x54
    257a:	e015      	b.n	25a8 <__sflush_r+0x5c>
    257c:	1c28      	adds	r0, r5, #0
    257e:	6a21      	ldr	r1, [r4, #32]
    2580:	2301      	movs	r3, #1
    2582:	47b8      	blx	r7
    2584:	1c02      	adds	r2, r0, #0
    2586:	1c41      	adds	r1, r0, #1
    2588:	d10e      	bne.n	25a8 <__sflush_r+0x5c>
    258a:	682b      	ldr	r3, [r5, #0]
    258c:	2b00      	cmp	r3, #0
    258e:	d00b      	beq.n	25a8 <__sflush_r+0x5c>
    2590:	2b1d      	cmp	r3, #29
    2592:	d001      	beq.n	2598 <__sflush_r+0x4c>
    2594:	2b16      	cmp	r3, #22
    2596:	d102      	bne.n	259e <__sflush_r+0x52>
    2598:	602e      	str	r6, [r5, #0]
    259a:	2000      	movs	r0, #0
    259c:	e05e      	b.n	265c <__sflush_r+0x110>
    259e:	89a3      	ldrh	r3, [r4, #12]
    25a0:	2140      	movs	r1, #64	; 0x40
    25a2:	430b      	orrs	r3, r1
    25a4:	81a3      	strh	r3, [r4, #12]
    25a6:	e059      	b.n	265c <__sflush_r+0x110>
    25a8:	89a3      	ldrh	r3, [r4, #12]
    25aa:	075f      	lsls	r7, r3, #29
    25ac:	d506      	bpl.n	25bc <__sflush_r+0x70>
    25ae:	6861      	ldr	r1, [r4, #4]
    25b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    25b2:	1a52      	subs	r2, r2, r1
    25b4:	2b00      	cmp	r3, #0
    25b6:	d001      	beq.n	25bc <__sflush_r+0x70>
    25b8:	6c27      	ldr	r7, [r4, #64]	; 0x40
    25ba:	1bd2      	subs	r2, r2, r7
    25bc:	1c28      	adds	r0, r5, #0
    25be:	6a21      	ldr	r1, [r4, #32]
    25c0:	2300      	movs	r3, #0
    25c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    25c4:	47b8      	blx	r7
    25c6:	89a2      	ldrh	r2, [r4, #12]
    25c8:	1c41      	adds	r1, r0, #1
    25ca:	d106      	bne.n	25da <__sflush_r+0x8e>
    25cc:	682b      	ldr	r3, [r5, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d003      	beq.n	25da <__sflush_r+0x8e>
    25d2:	2b1d      	cmp	r3, #29
    25d4:	d001      	beq.n	25da <__sflush_r+0x8e>
    25d6:	2b16      	cmp	r3, #22
    25d8:	d119      	bne.n	260e <__sflush_r+0xc2>
    25da:	2300      	movs	r3, #0
    25dc:	6063      	str	r3, [r4, #4]
    25de:	6923      	ldr	r3, [r4, #16]
    25e0:	6023      	str	r3, [r4, #0]
    25e2:	04d7      	lsls	r7, r2, #19
    25e4:	d505      	bpl.n	25f2 <__sflush_r+0xa6>
    25e6:	1c41      	adds	r1, r0, #1
    25e8:	d102      	bne.n	25f0 <__sflush_r+0xa4>
    25ea:	682a      	ldr	r2, [r5, #0]
    25ec:	2a00      	cmp	r2, #0
    25ee:	d100      	bne.n	25f2 <__sflush_r+0xa6>
    25f0:	6560      	str	r0, [r4, #84]	; 0x54
    25f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    25f4:	602e      	str	r6, [r5, #0]
    25f6:	2900      	cmp	r1, #0
    25f8:	d0cf      	beq.n	259a <__sflush_r+0x4e>
    25fa:	1c23      	adds	r3, r4, #0
    25fc:	3344      	adds	r3, #68	; 0x44
    25fe:	4299      	cmp	r1, r3
    2600:	d002      	beq.n	2608 <__sflush_r+0xbc>
    2602:	1c28      	adds	r0, r5, #0
    2604:	f000 f982 	bl	290c <_free_r>
    2608:	2000      	movs	r0, #0
    260a:	6360      	str	r0, [r4, #52]	; 0x34
    260c:	e026      	b.n	265c <__sflush_r+0x110>
    260e:	2340      	movs	r3, #64	; 0x40
    2610:	431a      	orrs	r2, r3
    2612:	81a2      	strh	r2, [r4, #12]
    2614:	e022      	b.n	265c <__sflush_r+0x110>
    2616:	6926      	ldr	r6, [r4, #16]
    2618:	2e00      	cmp	r6, #0
    261a:	d0be      	beq.n	259a <__sflush_r+0x4e>
    261c:	6827      	ldr	r7, [r4, #0]
    261e:	2200      	movs	r2, #0
    2620:	1bbf      	subs	r7, r7, r6
    2622:	9701      	str	r7, [sp, #4]
    2624:	6026      	str	r6, [r4, #0]
    2626:	0799      	lsls	r1, r3, #30
    2628:	d100      	bne.n	262c <__sflush_r+0xe0>
    262a:	6962      	ldr	r2, [r4, #20]
    262c:	60a2      	str	r2, [r4, #8]
    262e:	9f01      	ldr	r7, [sp, #4]
    2630:	2f00      	cmp	r7, #0
    2632:	ddb2      	ble.n	259a <__sflush_r+0x4e>
    2634:	1c28      	adds	r0, r5, #0
    2636:	6a21      	ldr	r1, [r4, #32]
    2638:	1c32      	adds	r2, r6, #0
    263a:	9b01      	ldr	r3, [sp, #4]
    263c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    263e:	47b8      	blx	r7
    2640:	2800      	cmp	r0, #0
    2642:	dc06      	bgt.n	2652 <__sflush_r+0x106>
    2644:	89a3      	ldrh	r3, [r4, #12]
    2646:	2240      	movs	r2, #64	; 0x40
    2648:	4313      	orrs	r3, r2
    264a:	2001      	movs	r0, #1
    264c:	81a3      	strh	r3, [r4, #12]
    264e:	4240      	negs	r0, r0
    2650:	e004      	b.n	265c <__sflush_r+0x110>
    2652:	9f01      	ldr	r7, [sp, #4]
    2654:	1836      	adds	r6, r6, r0
    2656:	1a3f      	subs	r7, r7, r0
    2658:	9701      	str	r7, [sp, #4]
    265a:	e7e8      	b.n	262e <__sflush_r+0xe2>
    265c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002660 <_fflush_r>:
    2660:	690a      	ldr	r2, [r1, #16]
    2662:	b538      	push	{r3, r4, r5, lr}
    2664:	1c05      	adds	r5, r0, #0
    2666:	1c0c      	adds	r4, r1, #0
    2668:	2a00      	cmp	r2, #0
    266a:	d101      	bne.n	2670 <_fflush_r+0x10>
    266c:	2000      	movs	r0, #0
    266e:	e01c      	b.n	26aa <_fflush_r+0x4a>
    2670:	2800      	cmp	r0, #0
    2672:	d004      	beq.n	267e <_fflush_r+0x1e>
    2674:	6983      	ldr	r3, [r0, #24]
    2676:	2b00      	cmp	r3, #0
    2678:	d101      	bne.n	267e <_fflush_r+0x1e>
    267a:	f000 f871 	bl	2760 <__sinit>
    267e:	4b0b      	ldr	r3, [pc, #44]	; (26ac <_fflush_r+0x4c>)
    2680:	429c      	cmp	r4, r3
    2682:	d101      	bne.n	2688 <_fflush_r+0x28>
    2684:	686c      	ldr	r4, [r5, #4]
    2686:	e008      	b.n	269a <_fflush_r+0x3a>
    2688:	4b09      	ldr	r3, [pc, #36]	; (26b0 <_fflush_r+0x50>)
    268a:	429c      	cmp	r4, r3
    268c:	d101      	bne.n	2692 <_fflush_r+0x32>
    268e:	68ac      	ldr	r4, [r5, #8]
    2690:	e003      	b.n	269a <_fflush_r+0x3a>
    2692:	4b08      	ldr	r3, [pc, #32]	; (26b4 <_fflush_r+0x54>)
    2694:	429c      	cmp	r4, r3
    2696:	d100      	bne.n	269a <_fflush_r+0x3a>
    2698:	68ec      	ldr	r4, [r5, #12]
    269a:	220c      	movs	r2, #12
    269c:	5ea3      	ldrsh	r3, [r4, r2]
    269e:	2b00      	cmp	r3, #0
    26a0:	d0e4      	beq.n	266c <_fflush_r+0xc>
    26a2:	1c28      	adds	r0, r5, #0
    26a4:	1c21      	adds	r1, r4, #0
    26a6:	f7ff ff51 	bl	254c <__sflush_r>
    26aa:	bd38      	pop	{r3, r4, r5, pc}
    26ac:	00002d78 	.word	0x00002d78
    26b0:	00002d98 	.word	0x00002d98
    26b4:	00002db8 	.word	0x00002db8

000026b8 <_cleanup_r>:
    26b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ba:	1c04      	adds	r4, r0, #0
    26bc:	1c07      	adds	r7, r0, #0
    26be:	3448      	adds	r4, #72	; 0x48
    26c0:	2c00      	cmp	r4, #0
    26c2:	d012      	beq.n	26ea <_cleanup_r+0x32>
    26c4:	68a5      	ldr	r5, [r4, #8]
    26c6:	6866      	ldr	r6, [r4, #4]
    26c8:	3e01      	subs	r6, #1
    26ca:	d40c      	bmi.n	26e6 <_cleanup_r+0x2e>
    26cc:	89ab      	ldrh	r3, [r5, #12]
    26ce:	2b01      	cmp	r3, #1
    26d0:	d907      	bls.n	26e2 <_cleanup_r+0x2a>
    26d2:	220e      	movs	r2, #14
    26d4:	5eab      	ldrsh	r3, [r5, r2]
    26d6:	3301      	adds	r3, #1
    26d8:	d003      	beq.n	26e2 <_cleanup_r+0x2a>
    26da:	1c38      	adds	r0, r7, #0
    26dc:	1c29      	adds	r1, r5, #0
    26de:	f7ff ffbf 	bl	2660 <_fflush_r>
    26e2:	3568      	adds	r5, #104	; 0x68
    26e4:	e7f0      	b.n	26c8 <_cleanup_r+0x10>
    26e6:	6824      	ldr	r4, [r4, #0]
    26e8:	e7ea      	b.n	26c0 <_cleanup_r+0x8>
    26ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000026ec <std.isra.0>:
    26ec:	2300      	movs	r3, #0
    26ee:	b510      	push	{r4, lr}
    26f0:	1c04      	adds	r4, r0, #0
    26f2:	6003      	str	r3, [r0, #0]
    26f4:	6043      	str	r3, [r0, #4]
    26f6:	6083      	str	r3, [r0, #8]
    26f8:	8181      	strh	r1, [r0, #12]
    26fa:	6643      	str	r3, [r0, #100]	; 0x64
    26fc:	81c2      	strh	r2, [r0, #14]
    26fe:	6103      	str	r3, [r0, #16]
    2700:	6143      	str	r3, [r0, #20]
    2702:	6183      	str	r3, [r0, #24]
    2704:	1c19      	adds	r1, r3, #0
    2706:	2208      	movs	r2, #8
    2708:	305c      	adds	r0, #92	; 0x5c
    270a:	f7ff fa7c 	bl	1c06 <memset>
    270e:	4b05      	ldr	r3, [pc, #20]	; (2724 <std.isra.0+0x38>)
    2710:	6224      	str	r4, [r4, #32]
    2712:	6263      	str	r3, [r4, #36]	; 0x24
    2714:	4b04      	ldr	r3, [pc, #16]	; (2728 <std.isra.0+0x3c>)
    2716:	62a3      	str	r3, [r4, #40]	; 0x28
    2718:	4b04      	ldr	r3, [pc, #16]	; (272c <std.isra.0+0x40>)
    271a:	62e3      	str	r3, [r4, #44]	; 0x2c
    271c:	4b04      	ldr	r3, [pc, #16]	; (2730 <std.isra.0+0x44>)
    271e:	6323      	str	r3, [r4, #48]	; 0x30
    2720:	bd10      	pop	{r4, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00002a69 	.word	0x00002a69
    2728:	00002a91 	.word	0x00002a91
    272c:	00002ac9 	.word	0x00002ac9
    2730:	00002af5 	.word	0x00002af5

00002734 <__sfmoreglue>:
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	1e4b      	subs	r3, r1, #1
    2738:	2568      	movs	r5, #104	; 0x68
    273a:	435d      	muls	r5, r3
    273c:	1c0e      	adds	r6, r1, #0
    273e:	1c29      	adds	r1, r5, #0
    2740:	3174      	adds	r1, #116	; 0x74
    2742:	f000 f92b 	bl	299c <_malloc_r>
    2746:	1e04      	subs	r4, r0, #0
    2748:	d008      	beq.n	275c <__sfmoreglue+0x28>
    274a:	2100      	movs	r1, #0
    274c:	6001      	str	r1, [r0, #0]
    274e:	6046      	str	r6, [r0, #4]
    2750:	1c2a      	adds	r2, r5, #0
    2752:	300c      	adds	r0, #12
    2754:	60a0      	str	r0, [r4, #8]
    2756:	3268      	adds	r2, #104	; 0x68
    2758:	f7ff fa55 	bl	1c06 <memset>
    275c:	1c20      	adds	r0, r4, #0
    275e:	bd70      	pop	{r4, r5, r6, pc}

00002760 <__sinit>:
    2760:	6983      	ldr	r3, [r0, #24]
    2762:	b513      	push	{r0, r1, r4, lr}
    2764:	1c04      	adds	r4, r0, #0
    2766:	2b00      	cmp	r3, #0
    2768:	d127      	bne.n	27ba <__sinit+0x5a>
    276a:	6483      	str	r3, [r0, #72]	; 0x48
    276c:	64c3      	str	r3, [r0, #76]	; 0x4c
    276e:	6503      	str	r3, [r0, #80]	; 0x50
    2770:	4b12      	ldr	r3, [pc, #72]	; (27bc <__sinit+0x5c>)
    2772:	4a13      	ldr	r2, [pc, #76]	; (27c0 <__sinit+0x60>)
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	6282      	str	r2, [r0, #40]	; 0x28
    2778:	4298      	cmp	r0, r3
    277a:	d101      	bne.n	2780 <__sinit+0x20>
    277c:	2301      	movs	r3, #1
    277e:	6183      	str	r3, [r0, #24]
    2780:	1c20      	adds	r0, r4, #0
    2782:	f000 f81f 	bl	27c4 <__sfp>
    2786:	6060      	str	r0, [r4, #4]
    2788:	1c20      	adds	r0, r4, #0
    278a:	f000 f81b 	bl	27c4 <__sfp>
    278e:	60a0      	str	r0, [r4, #8]
    2790:	1c20      	adds	r0, r4, #0
    2792:	f000 f817 	bl	27c4 <__sfp>
    2796:	2104      	movs	r1, #4
    2798:	60e0      	str	r0, [r4, #12]
    279a:	2200      	movs	r2, #0
    279c:	6860      	ldr	r0, [r4, #4]
    279e:	f7ff ffa5 	bl	26ec <std.isra.0>
    27a2:	68a0      	ldr	r0, [r4, #8]
    27a4:	2109      	movs	r1, #9
    27a6:	2201      	movs	r2, #1
    27a8:	f7ff ffa0 	bl	26ec <std.isra.0>
    27ac:	68e0      	ldr	r0, [r4, #12]
    27ae:	2112      	movs	r1, #18
    27b0:	2202      	movs	r2, #2
    27b2:	f7ff ff9b 	bl	26ec <std.isra.0>
    27b6:	2301      	movs	r3, #1
    27b8:	61a3      	str	r3, [r4, #24]
    27ba:	bd13      	pop	{r0, r1, r4, pc}
    27bc:	00002d40 	.word	0x00002d40
    27c0:	000026b9 	.word	0x000026b9

000027c4 <__sfp>:
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27c6:	4b1d      	ldr	r3, [pc, #116]	; (283c <__sfp+0x78>)
    27c8:	1c07      	adds	r7, r0, #0
    27ca:	681e      	ldr	r6, [r3, #0]
    27cc:	69b2      	ldr	r2, [r6, #24]
    27ce:	2a00      	cmp	r2, #0
    27d0:	d102      	bne.n	27d8 <__sfp+0x14>
    27d2:	1c30      	adds	r0, r6, #0
    27d4:	f7ff ffc4 	bl	2760 <__sinit>
    27d8:	3648      	adds	r6, #72	; 0x48
    27da:	68b4      	ldr	r4, [r6, #8]
    27dc:	6873      	ldr	r3, [r6, #4]
    27de:	3b01      	subs	r3, #1
    27e0:	d405      	bmi.n	27ee <__sfp+0x2a>
    27e2:	220c      	movs	r2, #12
    27e4:	5ea5      	ldrsh	r5, [r4, r2]
    27e6:	2d00      	cmp	r5, #0
    27e8:	d010      	beq.n	280c <__sfp+0x48>
    27ea:	3468      	adds	r4, #104	; 0x68
    27ec:	e7f7      	b.n	27de <__sfp+0x1a>
    27ee:	6833      	ldr	r3, [r6, #0]
    27f0:	2b00      	cmp	r3, #0
    27f2:	d106      	bne.n	2802 <__sfp+0x3e>
    27f4:	1c38      	adds	r0, r7, #0
    27f6:	2104      	movs	r1, #4
    27f8:	f7ff ff9c 	bl	2734 <__sfmoreglue>
    27fc:	6030      	str	r0, [r6, #0]
    27fe:	2800      	cmp	r0, #0
    2800:	d001      	beq.n	2806 <__sfp+0x42>
    2802:	6836      	ldr	r6, [r6, #0]
    2804:	e7e9      	b.n	27da <__sfp+0x16>
    2806:	230c      	movs	r3, #12
    2808:	603b      	str	r3, [r7, #0]
    280a:	e016      	b.n	283a <__sfp+0x76>
    280c:	2301      	movs	r3, #1
    280e:	425b      	negs	r3, r3
    2810:	81e3      	strh	r3, [r4, #14]
    2812:	1c20      	adds	r0, r4, #0
    2814:	2301      	movs	r3, #1
    2816:	81a3      	strh	r3, [r4, #12]
    2818:	6665      	str	r5, [r4, #100]	; 0x64
    281a:	6025      	str	r5, [r4, #0]
    281c:	60a5      	str	r5, [r4, #8]
    281e:	6065      	str	r5, [r4, #4]
    2820:	6125      	str	r5, [r4, #16]
    2822:	6165      	str	r5, [r4, #20]
    2824:	61a5      	str	r5, [r4, #24]
    2826:	305c      	adds	r0, #92	; 0x5c
    2828:	1c29      	adds	r1, r5, #0
    282a:	2208      	movs	r2, #8
    282c:	f7ff f9eb 	bl	1c06 <memset>
    2830:	6365      	str	r5, [r4, #52]	; 0x34
    2832:	63a5      	str	r5, [r4, #56]	; 0x38
    2834:	64a5      	str	r5, [r4, #72]	; 0x48
    2836:	64e5      	str	r5, [r4, #76]	; 0x4c
    2838:	1c20      	adds	r0, r4, #0
    283a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    283c:	00002d40 	.word	0x00002d40

00002840 <__smakebuf_r>:
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	898b      	ldrh	r3, [r1, #12]
    2844:	b091      	sub	sp, #68	; 0x44
    2846:	1c05      	adds	r5, r0, #0
    2848:	1c0c      	adds	r4, r1, #0
    284a:	079a      	lsls	r2, r3, #30
    284c:	d425      	bmi.n	289a <__smakebuf_r+0x5a>
    284e:	230e      	movs	r3, #14
    2850:	5ec9      	ldrsh	r1, [r1, r3]
    2852:	2900      	cmp	r1, #0
    2854:	da06      	bge.n	2864 <__smakebuf_r+0x24>
    2856:	89a7      	ldrh	r7, [r4, #12]
    2858:	2380      	movs	r3, #128	; 0x80
    285a:	401f      	ands	r7, r3
    285c:	d00f      	beq.n	287e <__smakebuf_r+0x3e>
    285e:	2700      	movs	r7, #0
    2860:	2640      	movs	r6, #64	; 0x40
    2862:	e00e      	b.n	2882 <__smakebuf_r+0x42>
    2864:	aa01      	add	r2, sp, #4
    2866:	f000 f979 	bl	2b5c <_fstat_r>
    286a:	2800      	cmp	r0, #0
    286c:	dbf3      	blt.n	2856 <__smakebuf_r+0x16>
    286e:	9b02      	ldr	r3, [sp, #8]
    2870:	27f0      	movs	r7, #240	; 0xf0
    2872:	023f      	lsls	r7, r7, #8
    2874:	4a18      	ldr	r2, [pc, #96]	; (28d8 <__smakebuf_r+0x98>)
    2876:	401f      	ands	r7, r3
    2878:	18bf      	adds	r7, r7, r2
    287a:	427b      	negs	r3, r7
    287c:	415f      	adcs	r7, r3
    287e:	2680      	movs	r6, #128	; 0x80
    2880:	00f6      	lsls	r6, r6, #3
    2882:	1c28      	adds	r0, r5, #0
    2884:	1c31      	adds	r1, r6, #0
    2886:	f000 f889 	bl	299c <_malloc_r>
    288a:	2800      	cmp	r0, #0
    288c:	d10c      	bne.n	28a8 <__smakebuf_r+0x68>
    288e:	89a3      	ldrh	r3, [r4, #12]
    2890:	059a      	lsls	r2, r3, #22
    2892:	d41f      	bmi.n	28d4 <__smakebuf_r+0x94>
    2894:	2202      	movs	r2, #2
    2896:	4313      	orrs	r3, r2
    2898:	81a3      	strh	r3, [r4, #12]
    289a:	1c23      	adds	r3, r4, #0
    289c:	3347      	adds	r3, #71	; 0x47
    289e:	6023      	str	r3, [r4, #0]
    28a0:	6123      	str	r3, [r4, #16]
    28a2:	2301      	movs	r3, #1
    28a4:	6163      	str	r3, [r4, #20]
    28a6:	e015      	b.n	28d4 <__smakebuf_r+0x94>
    28a8:	4b0c      	ldr	r3, [pc, #48]	; (28dc <__smakebuf_r+0x9c>)
    28aa:	2280      	movs	r2, #128	; 0x80
    28ac:	62ab      	str	r3, [r5, #40]	; 0x28
    28ae:	89a3      	ldrh	r3, [r4, #12]
    28b0:	6020      	str	r0, [r4, #0]
    28b2:	4313      	orrs	r3, r2
    28b4:	81a3      	strh	r3, [r4, #12]
    28b6:	6120      	str	r0, [r4, #16]
    28b8:	6166      	str	r6, [r4, #20]
    28ba:	2f00      	cmp	r7, #0
    28bc:	d00a      	beq.n	28d4 <__smakebuf_r+0x94>
    28be:	230e      	movs	r3, #14
    28c0:	5ee1      	ldrsh	r1, [r4, r3]
    28c2:	1c28      	adds	r0, r5, #0
    28c4:	f000 f95c 	bl	2b80 <_isatty_r>
    28c8:	2800      	cmp	r0, #0
    28ca:	d003      	beq.n	28d4 <__smakebuf_r+0x94>
    28cc:	89a3      	ldrh	r3, [r4, #12]
    28ce:	2201      	movs	r2, #1
    28d0:	4313      	orrs	r3, r2
    28d2:	81a3      	strh	r3, [r4, #12]
    28d4:	b011      	add	sp, #68	; 0x44
    28d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28d8:	ffffe000 	.word	0xffffe000
    28dc:	000026b9 	.word	0x000026b9

000028e0 <malloc>:
    28e0:	b508      	push	{r3, lr}
    28e2:	4b03      	ldr	r3, [pc, #12]	; (28f0 <malloc+0x10>)
    28e4:	1c01      	adds	r1, r0, #0
    28e6:	6818      	ldr	r0, [r3, #0]
    28e8:	f000 f858 	bl	299c <_malloc_r>
    28ec:	bd08      	pop	{r3, pc}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	20000070 	.word	0x20000070

000028f4 <memchr>:
    28f4:	b2c9      	uxtb	r1, r1
    28f6:	1882      	adds	r2, r0, r2
    28f8:	4290      	cmp	r0, r2
    28fa:	d004      	beq.n	2906 <memchr+0x12>
    28fc:	7803      	ldrb	r3, [r0, #0]
    28fe:	428b      	cmp	r3, r1
    2900:	d002      	beq.n	2908 <memchr+0x14>
    2902:	3001      	adds	r0, #1
    2904:	e7f8      	b.n	28f8 <memchr+0x4>
    2906:	2000      	movs	r0, #0
    2908:	4770      	bx	lr
	...

0000290c <_free_r>:
    290c:	b530      	push	{r4, r5, lr}
    290e:	2900      	cmp	r1, #0
    2910:	d040      	beq.n	2994 <_free_r+0x88>
    2912:	3904      	subs	r1, #4
    2914:	680b      	ldr	r3, [r1, #0]
    2916:	2b00      	cmp	r3, #0
    2918:	da00      	bge.n	291c <_free_r+0x10>
    291a:	18c9      	adds	r1, r1, r3
    291c:	4a1e      	ldr	r2, [pc, #120]	; (2998 <_free_r+0x8c>)
    291e:	6813      	ldr	r3, [r2, #0]
    2920:	1c14      	adds	r4, r2, #0
    2922:	2b00      	cmp	r3, #0
    2924:	d102      	bne.n	292c <_free_r+0x20>
    2926:	604b      	str	r3, [r1, #4]
    2928:	6011      	str	r1, [r2, #0]
    292a:	e033      	b.n	2994 <_free_r+0x88>
    292c:	4299      	cmp	r1, r3
    292e:	d20f      	bcs.n	2950 <_free_r+0x44>
    2930:	6808      	ldr	r0, [r1, #0]
    2932:	180a      	adds	r2, r1, r0
    2934:	429a      	cmp	r2, r3
    2936:	d105      	bne.n	2944 <_free_r+0x38>
    2938:	6813      	ldr	r3, [r2, #0]
    293a:	6852      	ldr	r2, [r2, #4]
    293c:	18c0      	adds	r0, r0, r3
    293e:	6008      	str	r0, [r1, #0]
    2940:	604a      	str	r2, [r1, #4]
    2942:	e000      	b.n	2946 <_free_r+0x3a>
    2944:	604b      	str	r3, [r1, #4]
    2946:	6021      	str	r1, [r4, #0]
    2948:	e024      	b.n	2994 <_free_r+0x88>
    294a:	428a      	cmp	r2, r1
    294c:	d803      	bhi.n	2956 <_free_r+0x4a>
    294e:	1c13      	adds	r3, r2, #0
    2950:	685a      	ldr	r2, [r3, #4]
    2952:	2a00      	cmp	r2, #0
    2954:	d1f9      	bne.n	294a <_free_r+0x3e>
    2956:	681d      	ldr	r5, [r3, #0]
    2958:	195c      	adds	r4, r3, r5
    295a:	428c      	cmp	r4, r1
    295c:	d10b      	bne.n	2976 <_free_r+0x6a>
    295e:	6809      	ldr	r1, [r1, #0]
    2960:	1869      	adds	r1, r5, r1
    2962:	1858      	adds	r0, r3, r1
    2964:	6019      	str	r1, [r3, #0]
    2966:	4290      	cmp	r0, r2
    2968:	d114      	bne.n	2994 <_free_r+0x88>
    296a:	6814      	ldr	r4, [r2, #0]
    296c:	6852      	ldr	r2, [r2, #4]
    296e:	1909      	adds	r1, r1, r4
    2970:	6019      	str	r1, [r3, #0]
    2972:	605a      	str	r2, [r3, #4]
    2974:	e00e      	b.n	2994 <_free_r+0x88>
    2976:	428c      	cmp	r4, r1
    2978:	d902      	bls.n	2980 <_free_r+0x74>
    297a:	230c      	movs	r3, #12
    297c:	6003      	str	r3, [r0, #0]
    297e:	e009      	b.n	2994 <_free_r+0x88>
    2980:	6808      	ldr	r0, [r1, #0]
    2982:	180c      	adds	r4, r1, r0
    2984:	4294      	cmp	r4, r2
    2986:	d103      	bne.n	2990 <_free_r+0x84>
    2988:	6814      	ldr	r4, [r2, #0]
    298a:	6852      	ldr	r2, [r2, #4]
    298c:	1900      	adds	r0, r0, r4
    298e:	6008      	str	r0, [r1, #0]
    2990:	604a      	str	r2, [r1, #4]
    2992:	6059      	str	r1, [r3, #4]
    2994:	bd30      	pop	{r4, r5, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	20000114 	.word	0x20000114

0000299c <_malloc_r>:
    299c:	b570      	push	{r4, r5, r6, lr}
    299e:	2303      	movs	r3, #3
    29a0:	1ccd      	adds	r5, r1, #3
    29a2:	439d      	bics	r5, r3
    29a4:	3508      	adds	r5, #8
    29a6:	1c06      	adds	r6, r0, #0
    29a8:	2d0c      	cmp	r5, #12
    29aa:	d201      	bcs.n	29b0 <_malloc_r+0x14>
    29ac:	250c      	movs	r5, #12
    29ae:	e001      	b.n	29b4 <_malloc_r+0x18>
    29b0:	2d00      	cmp	r5, #0
    29b2:	db3f      	blt.n	2a34 <_malloc_r+0x98>
    29b4:	428d      	cmp	r5, r1
    29b6:	d33d      	bcc.n	2a34 <_malloc_r+0x98>
    29b8:	4b20      	ldr	r3, [pc, #128]	; (2a3c <_malloc_r+0xa0>)
    29ba:	681c      	ldr	r4, [r3, #0]
    29bc:	1c1a      	adds	r2, r3, #0
    29be:	1c21      	adds	r1, r4, #0
    29c0:	2900      	cmp	r1, #0
    29c2:	d013      	beq.n	29ec <_malloc_r+0x50>
    29c4:	6808      	ldr	r0, [r1, #0]
    29c6:	1b43      	subs	r3, r0, r5
    29c8:	d40d      	bmi.n	29e6 <_malloc_r+0x4a>
    29ca:	2b0b      	cmp	r3, #11
    29cc:	d902      	bls.n	29d4 <_malloc_r+0x38>
    29ce:	600b      	str	r3, [r1, #0]
    29d0:	18cc      	adds	r4, r1, r3
    29d2:	e01e      	b.n	2a12 <_malloc_r+0x76>
    29d4:	428c      	cmp	r4, r1
    29d6:	d102      	bne.n	29de <_malloc_r+0x42>
    29d8:	6863      	ldr	r3, [r4, #4]
    29da:	6013      	str	r3, [r2, #0]
    29dc:	e01a      	b.n	2a14 <_malloc_r+0x78>
    29de:	6848      	ldr	r0, [r1, #4]
    29e0:	6060      	str	r0, [r4, #4]
    29e2:	1c0c      	adds	r4, r1, #0
    29e4:	e016      	b.n	2a14 <_malloc_r+0x78>
    29e6:	1c0c      	adds	r4, r1, #0
    29e8:	6849      	ldr	r1, [r1, #4]
    29ea:	e7e9      	b.n	29c0 <_malloc_r+0x24>
    29ec:	4c14      	ldr	r4, [pc, #80]	; (2a40 <_malloc_r+0xa4>)
    29ee:	6820      	ldr	r0, [r4, #0]
    29f0:	2800      	cmp	r0, #0
    29f2:	d103      	bne.n	29fc <_malloc_r+0x60>
    29f4:	1c30      	adds	r0, r6, #0
    29f6:	f000 f825 	bl	2a44 <_sbrk_r>
    29fa:	6020      	str	r0, [r4, #0]
    29fc:	1c30      	adds	r0, r6, #0
    29fe:	1c29      	adds	r1, r5, #0
    2a00:	f000 f820 	bl	2a44 <_sbrk_r>
    2a04:	1c43      	adds	r3, r0, #1
    2a06:	d015      	beq.n	2a34 <_malloc_r+0x98>
    2a08:	1cc4      	adds	r4, r0, #3
    2a0a:	2303      	movs	r3, #3
    2a0c:	439c      	bics	r4, r3
    2a0e:	4284      	cmp	r4, r0
    2a10:	d10a      	bne.n	2a28 <_malloc_r+0x8c>
    2a12:	6025      	str	r5, [r4, #0]
    2a14:	1c20      	adds	r0, r4, #0
    2a16:	300b      	adds	r0, #11
    2a18:	2207      	movs	r2, #7
    2a1a:	1d23      	adds	r3, r4, #4
    2a1c:	4390      	bics	r0, r2
    2a1e:	1ac3      	subs	r3, r0, r3
    2a20:	d00b      	beq.n	2a3a <_malloc_r+0x9e>
    2a22:	425a      	negs	r2, r3
    2a24:	50e2      	str	r2, [r4, r3]
    2a26:	e008      	b.n	2a3a <_malloc_r+0x9e>
    2a28:	1a21      	subs	r1, r4, r0
    2a2a:	1c30      	adds	r0, r6, #0
    2a2c:	f000 f80a 	bl	2a44 <_sbrk_r>
    2a30:	3001      	adds	r0, #1
    2a32:	d1ee      	bne.n	2a12 <_malloc_r+0x76>
    2a34:	230c      	movs	r3, #12
    2a36:	6033      	str	r3, [r6, #0]
    2a38:	2000      	movs	r0, #0
    2a3a:	bd70      	pop	{r4, r5, r6, pc}
    2a3c:	20000114 	.word	0x20000114
    2a40:	20000110 	.word	0x20000110

00002a44 <_sbrk_r>:
    2a44:	b538      	push	{r3, r4, r5, lr}
    2a46:	4c07      	ldr	r4, [pc, #28]	; (2a64 <_sbrk_r+0x20>)
    2a48:	2300      	movs	r3, #0
    2a4a:	1c05      	adds	r5, r0, #0
    2a4c:	1c08      	adds	r0, r1, #0
    2a4e:	6023      	str	r3, [r4, #0]
    2a50:	f7fe fea0 	bl	1794 <_sbrk>
    2a54:	1c43      	adds	r3, r0, #1
    2a56:	d103      	bne.n	2a60 <_sbrk_r+0x1c>
    2a58:	6823      	ldr	r3, [r4, #0]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d000      	beq.n	2a60 <_sbrk_r+0x1c>
    2a5e:	602b      	str	r3, [r5, #0]
    2a60:	bd38      	pop	{r3, r4, r5, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000178 	.word	0x20000178

00002a68 <__sread>:
    2a68:	b538      	push	{r3, r4, r5, lr}
    2a6a:	1c0c      	adds	r4, r1, #0
    2a6c:	250e      	movs	r5, #14
    2a6e:	5f49      	ldrsh	r1, [r1, r5]
    2a70:	f000 f8ac 	bl	2bcc <_read_r>
    2a74:	2800      	cmp	r0, #0
    2a76:	db03      	blt.n	2a80 <__sread+0x18>
    2a78:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2a7a:	1813      	adds	r3, r2, r0
    2a7c:	6563      	str	r3, [r4, #84]	; 0x54
    2a7e:	e003      	b.n	2a88 <__sread+0x20>
    2a80:	89a2      	ldrh	r2, [r4, #12]
    2a82:	4b02      	ldr	r3, [pc, #8]	; (2a8c <__sread+0x24>)
    2a84:	4013      	ands	r3, r2
    2a86:	81a3      	strh	r3, [r4, #12]
    2a88:	bd38      	pop	{r3, r4, r5, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	ffffefff 	.word	0xffffefff

00002a90 <__swrite>:
    2a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a92:	1c1e      	adds	r6, r3, #0
    2a94:	898b      	ldrh	r3, [r1, #12]
    2a96:	1c05      	adds	r5, r0, #0
    2a98:	1c0c      	adds	r4, r1, #0
    2a9a:	1c17      	adds	r7, r2, #0
    2a9c:	05da      	lsls	r2, r3, #23
    2a9e:	d505      	bpl.n	2aac <__swrite+0x1c>
    2aa0:	230e      	movs	r3, #14
    2aa2:	5ec9      	ldrsh	r1, [r1, r3]
    2aa4:	2200      	movs	r2, #0
    2aa6:	2302      	movs	r3, #2
    2aa8:	f000 f87c 	bl	2ba4 <_lseek_r>
    2aac:	89a2      	ldrh	r2, [r4, #12]
    2aae:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <__swrite+0x34>)
    2ab0:	1c28      	adds	r0, r5, #0
    2ab2:	4013      	ands	r3, r2
    2ab4:	81a3      	strh	r3, [r4, #12]
    2ab6:	220e      	movs	r2, #14
    2ab8:	5ea1      	ldrsh	r1, [r4, r2]
    2aba:	1c33      	adds	r3, r6, #0
    2abc:	1c3a      	adds	r2, r7, #0
    2abe:	f000 f827 	bl	2b10 <_write_r>
    2ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ac4:	ffffefff 	.word	0xffffefff

00002ac8 <__sseek>:
    2ac8:	b538      	push	{r3, r4, r5, lr}
    2aca:	1c0c      	adds	r4, r1, #0
    2acc:	250e      	movs	r5, #14
    2ace:	5f49      	ldrsh	r1, [r1, r5]
    2ad0:	f000 f868 	bl	2ba4 <_lseek_r>
    2ad4:	89a3      	ldrh	r3, [r4, #12]
    2ad6:	1c42      	adds	r2, r0, #1
    2ad8:	d103      	bne.n	2ae2 <__sseek+0x1a>
    2ada:	4a05      	ldr	r2, [pc, #20]	; (2af0 <__sseek+0x28>)
    2adc:	4013      	ands	r3, r2
    2ade:	81a3      	strh	r3, [r4, #12]
    2ae0:	e004      	b.n	2aec <__sseek+0x24>
    2ae2:	2280      	movs	r2, #128	; 0x80
    2ae4:	0152      	lsls	r2, r2, #5
    2ae6:	4313      	orrs	r3, r2
    2ae8:	81a3      	strh	r3, [r4, #12]
    2aea:	6560      	str	r0, [r4, #84]	; 0x54
    2aec:	bd38      	pop	{r3, r4, r5, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	ffffefff 	.word	0xffffefff

00002af4 <__sclose>:
    2af4:	b508      	push	{r3, lr}
    2af6:	230e      	movs	r3, #14
    2af8:	5ec9      	ldrsh	r1, [r1, r3]
    2afa:	f000 f81d 	bl	2b38 <_close_r>
    2afe:	bd08      	pop	{r3, pc}

00002b00 <strlen>:
    2b00:	2300      	movs	r3, #0
    2b02:	5cc2      	ldrb	r2, [r0, r3]
    2b04:	3301      	adds	r3, #1
    2b06:	2a00      	cmp	r2, #0
    2b08:	d1fb      	bne.n	2b02 <strlen+0x2>
    2b0a:	1e58      	subs	r0, r3, #1
    2b0c:	4770      	bx	lr
	...

00002b10 <_write_r>:
    2b10:	b538      	push	{r3, r4, r5, lr}
    2b12:	4c08      	ldr	r4, [pc, #32]	; (2b34 <_write_r+0x24>)
    2b14:	1c05      	adds	r5, r0, #0
    2b16:	2000      	movs	r0, #0
    2b18:	6020      	str	r0, [r4, #0]
    2b1a:	1c08      	adds	r0, r1, #0
    2b1c:	1c11      	adds	r1, r2, #0
    2b1e:	1c1a      	adds	r2, r3, #0
    2b20:	f7fe fe0e 	bl	1740 <_write>
    2b24:	1c43      	adds	r3, r0, #1
    2b26:	d103      	bne.n	2b30 <_write_r+0x20>
    2b28:	6823      	ldr	r3, [r4, #0]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d000      	beq.n	2b30 <_write_r+0x20>
    2b2e:	602b      	str	r3, [r5, #0]
    2b30:	bd38      	pop	{r3, r4, r5, pc}
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	20000178 	.word	0x20000178

00002b38 <_close_r>:
    2b38:	b538      	push	{r3, r4, r5, lr}
    2b3a:	4c07      	ldr	r4, [pc, #28]	; (2b58 <_close_r+0x20>)
    2b3c:	2300      	movs	r3, #0
    2b3e:	1c05      	adds	r5, r0, #0
    2b40:	1c08      	adds	r0, r1, #0
    2b42:	6023      	str	r3, [r4, #0]
    2b44:	f7fe fe38 	bl	17b8 <_close>
    2b48:	1c43      	adds	r3, r0, #1
    2b4a:	d103      	bne.n	2b54 <_close_r+0x1c>
    2b4c:	6823      	ldr	r3, [r4, #0]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d000      	beq.n	2b54 <_close_r+0x1c>
    2b52:	602b      	str	r3, [r5, #0]
    2b54:	bd38      	pop	{r3, r4, r5, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	20000178 	.word	0x20000178

00002b5c <_fstat_r>:
    2b5c:	b538      	push	{r3, r4, r5, lr}
    2b5e:	4c07      	ldr	r4, [pc, #28]	; (2b7c <_fstat_r+0x20>)
    2b60:	2300      	movs	r3, #0
    2b62:	1c05      	adds	r5, r0, #0
    2b64:	1c08      	adds	r0, r1, #0
    2b66:	1c11      	adds	r1, r2, #0
    2b68:	6023      	str	r3, [r4, #0]
    2b6a:	f7fe fe29 	bl	17c0 <_fstat>
    2b6e:	1c43      	adds	r3, r0, #1
    2b70:	d103      	bne.n	2b7a <_fstat_r+0x1e>
    2b72:	6823      	ldr	r3, [r4, #0]
    2b74:	2b00      	cmp	r3, #0
    2b76:	d000      	beq.n	2b7a <_fstat_r+0x1e>
    2b78:	602b      	str	r3, [r5, #0]
    2b7a:	bd38      	pop	{r3, r4, r5, pc}
    2b7c:	20000178 	.word	0x20000178

00002b80 <_isatty_r>:
    2b80:	b538      	push	{r3, r4, r5, lr}
    2b82:	4c07      	ldr	r4, [pc, #28]	; (2ba0 <_isatty_r+0x20>)
    2b84:	2300      	movs	r3, #0
    2b86:	1c05      	adds	r5, r0, #0
    2b88:	1c08      	adds	r0, r1, #0
    2b8a:	6023      	str	r3, [r4, #0]
    2b8c:	f7fe fe1e 	bl	17cc <_isatty>
    2b90:	1c43      	adds	r3, r0, #1
    2b92:	d103      	bne.n	2b9c <_isatty_r+0x1c>
    2b94:	6823      	ldr	r3, [r4, #0]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d000      	beq.n	2b9c <_isatty_r+0x1c>
    2b9a:	602b      	str	r3, [r5, #0]
    2b9c:	bd38      	pop	{r3, r4, r5, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	20000178 	.word	0x20000178

00002ba4 <_lseek_r>:
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	4c08      	ldr	r4, [pc, #32]	; (2bc8 <_lseek_r+0x24>)
    2ba8:	1c05      	adds	r5, r0, #0
    2baa:	2000      	movs	r0, #0
    2bac:	6020      	str	r0, [r4, #0]
    2bae:	1c08      	adds	r0, r1, #0
    2bb0:	1c11      	adds	r1, r2, #0
    2bb2:	1c1a      	adds	r2, r3, #0
    2bb4:	f7fe fe0c 	bl	17d0 <_lseek>
    2bb8:	1c43      	adds	r3, r0, #1
    2bba:	d103      	bne.n	2bc4 <_lseek_r+0x20>
    2bbc:	6823      	ldr	r3, [r4, #0]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d000      	beq.n	2bc4 <_lseek_r+0x20>
    2bc2:	602b      	str	r3, [r5, #0]
    2bc4:	bd38      	pop	{r3, r4, r5, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	20000178 	.word	0x20000178

00002bcc <_read_r>:
    2bcc:	b538      	push	{r3, r4, r5, lr}
    2bce:	4c08      	ldr	r4, [pc, #32]	; (2bf0 <_read_r+0x24>)
    2bd0:	1c05      	adds	r5, r0, #0
    2bd2:	2000      	movs	r0, #0
    2bd4:	6020      	str	r0, [r4, #0]
    2bd6:	1c08      	adds	r0, r1, #0
    2bd8:	1c11      	adds	r1, r2, #0
    2bda:	1c1a      	adds	r2, r3, #0
    2bdc:	f7fe fd8e 	bl	16fc <_read>
    2be0:	1c43      	adds	r3, r0, #1
    2be2:	d103      	bne.n	2bec <_read_r+0x20>
    2be4:	6823      	ldr	r3, [r4, #0]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d000      	beq.n	2bec <_read_r+0x20>
    2bea:	602b      	str	r3, [r5, #0]
    2bec:	bd38      	pop	{r3, r4, r5, pc}
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	20000178 	.word	0x20000178
    2bf4:	42000800 	.word	0x42000800
    2bf8:	42000c00 	.word	0x42000c00
    2bfc:	42001000 	.word	0x42001000
    2c00:	42001400 	.word	0x42001400
    2c04:	42001800 	.word	0x42001800
    2c08:	42001c00 	.word	0x42001c00
    2c0c:	0c0b0a09 	.word	0x0c0b0a09
    2c10:	00000e0d 	.word	0x00000e0d
    2c14:	000010ac 	.word	0x000010ac
    2c18:	00001108 	.word	0x00001108
    2c1c:	00001108 	.word	0x00001108
    2c20:	000010a6 	.word	0x000010a6
    2c24:	000010a6 	.word	0x000010a6
    2c28:	000010c2 	.word	0x000010c2
    2c2c:	000010b2 	.word	0x000010b2
    2c30:	000010c8 	.word	0x000010c8
    2c34:	000010f6 	.word	0x000010f6
    2c38:	00001190 	.word	0x00001190
    2c3c:	000011f0 	.word	0x000011f0
    2c40:	000011f0 	.word	0x000011f0
    2c44:	00001170 	.word	0x00001170
    2c48:	00001182 	.word	0x00001182
    2c4c:	0000119e 	.word	0x0000119e
    2c50:	00001174 	.word	0x00001174
    2c54:	000011ac 	.word	0x000011ac
    2c58:	000011e0 	.word	0x000011e0
    2c5c:	64616552 	.word	0x64616552
    2c60:	0000203a 	.word	0x0000203a
    2c64:	6e6e7552 	.word	0x6e6e7552
    2c68:	2e676e69 	.word	0x2e676e69
    2c6c:	0d0a2e2e 	.word	0x0d0a2e2e
    2c70:	00000000 	.word	0x00000000
    2c74:	74697257 	.word	0x74697257
    2c78:	20676e69 	.word	0x20676e69
    2c7c:	2e415243 	.word	0x2e415243
    2c80:	000d2e2e 	.word	0x000d2e2e
    2c84:	20415243 	.word	0x20415243
    2c88:	74697277 	.word	0x74697277
    2c8c:	74732065 	.word	0x74732065
    2c90:	73757461 	.word	0x73757461
    2c94:	6425203a 	.word	0x6425203a
    2c98:	00000d0d 	.word	0x00000d0d
    2c9c:	74697257 	.word	0x74697257
    2ca0:	20676e69 	.word	0x20676e69
    2ca4:	2e425243 	.word	0x2e425243
    2ca8:	000d2e2e 	.word	0x000d2e2e
    2cac:	20425243 	.word	0x20425243
    2cb0:	74697277 	.word	0x74697277
    2cb4:	74732065 	.word	0x74732065
    2cb8:	73757461 	.word	0x73757461
    2cbc:	6425203a 	.word	0x6425203a
    2cc0:	00000d0d 	.word	0x00000d0d
    2cc4:	74697257 	.word	0x74697257
    2cc8:	20676e69 	.word	0x20676e69
    2ccc:	7361656d 	.word	0x7361656d
    2cd0:	20657275 	.word	0x20657275
    2cd4:	65646f6d 	.word	0x65646f6d
    2cd8:	0d2e2e2e 	.word	0x0d2e2e2e
    2cdc:	00000000 	.word	0x00000000
    2ce0:	7361654d 	.word	0x7361654d
    2ce4:	20657275 	.word	0x20657275
    2ce8:	65646f6d 	.word	0x65646f6d
    2cec:	69727720 	.word	0x69727720
    2cf0:	73206574 	.word	0x73206574
    2cf4:	75746174 	.word	0x75746174
    2cf8:	25203a73 	.word	0x25203a73
    2cfc:	000d0d64 	.word	0x000d0d64
    2d00:	64616552 	.word	0x64616552
    2d04:	2e676e69 	.word	0x2e676e69
    2d08:	000d2e2e 	.word	0x000d2e2e
    2d0c:	64616572 	.word	0x64616572
    2d10:	61747320 	.word	0x61747320
    2d14:	3a737574 	.word	0x3a737574
    2d18:	0a642520 	.word	0x0a642520
    2d1c:	0000000d 	.word	0x0000000d
    2d20:	61746144 	.word	0x61746144
    2d24:	6425203a 	.word	0x6425203a
    2d28:	20642520 	.word	0x20642520
    2d2c:	25206425 	.word	0x25206425
    2d30:	64252064 	.word	0x64252064
    2d34:	0d642520 	.word	0x0d642520
    2d38:	0000000a 	.word	0x0000000a
    2d3c:	00000043 	.word	0x00000043

00002d40 <_global_impure_ptr>:
    2d40:	20000010 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    2d50:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2d60:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2d70:	64636261 00006665                       abcdef..

00002d78 <__sf_fake_stdin>:
	...

00002d98 <__sf_fake_stdout>:
	...

00002db8 <__sf_fake_stderr>:
	...

00002dd8 <_init>:
    2dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dde:	bc08      	pop	{r3}
    2de0:	469e      	mov	lr, r3
    2de2:	4770      	bx	lr

00002de4 <__init_array_start>:
    2de4:	000000d9 	.word	0x000000d9

00002de8 <_fini>:
    2de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dee:	bc08      	pop	{r3}
    2df0:	469e      	mov	lr, r3
    2df2:	4770      	bx	lr

00002df4 <__fini_array_start>:
    2df4:	000000b1 	.word	0x000000b1
