
CubesatFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065b0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000065b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003cd0  20000070  00006620  00010070  2**2
                  ALLOC
  3 .stack        00002000  20003d40  0000a2f0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021915  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003036  00000000  00000000  00031a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000038f2  00000000  00000000  00034a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ad8  00000000  00000000  00038330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000948  00000000  00000000  00038e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007803  00000000  00000000  00039750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e7fd  00000000  00000000  00040f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c987  00000000  00000000  0004f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ad8  00000000  00000000  000dc0d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
	MLX90614_read(&temp_buf, TA_ADDR);
	printf("%02x, %02x\r\n", temp_buf[0], temp_buf[1]);
	return calcTemperature((temp_buf[1] << 8) | temp_buf[0]);
}

float calcTemperature(int16_t rawTemp) {
       0:	20005d40 	.word	0x20005d40
       4:	00004895 	.word	0x00004895
       8:	00004919 	.word	0x00004919
	float t = rawTemp;
       c:	00004919 	.word	0x00004919
	...
	printf("%f\r\n", t);
      2c:	00001c51 	.word	0x00001c51
	...
	return (t * 0.02 - 273.15) * 9.0 / 5.0 + 32;
      38:	00001d45 	.word	0x00001d45
      3c:	00001d89 	.word	0x00001d89
      40:	00004919 	.word	0x00004919
      44:	00004919 	.word	0x00004919
      48:	00004919 	.word	0x00004919
      4c:	00004919 	.word	0x00004919
      50:	00004919 	.word	0x00004919
      54:	00004919 	.word	0x00004919
      58:	00004919 	.word	0x00004919
      5c:	00004919 	.word	0x00004919
      60:	00004919 	.word	0x00004919
      64:	00000f41 	.word	0x00000f41
      68:	00000f55 	.word	0x00000f55
      6c:	00000f69 	.word	0x00000f69
      70:	00000f7d 	.word	0x00000f7d
      74:	00000f91 	.word	0x00000f91
      78:	00000fa5 	.word	0x00000fa5
      7c:	00004919 	.word	0x00004919
      80:	00004919 	.word	0x00004919
      84:	00004919 	.word	0x00004919
      88:	00004919 	.word	0x00004919
      8c:	00004919 	.word	0x00004919
      90:	00004919 	.word	0x00004919
      94:	00004919 	.word	0x00004919
      98:	00004919 	.word	0x00004919
      9c:	00004919 	.word	0x00004919
      a0:	00004919 	.word	0x00004919
      a4:	00004919 	.word	0x00004919
      a8:	00004919 	.word	0x00004919
}
      ac:	00004919 	.word	0x00004919

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000070 	.word	0x20000070
      d0:	00000000 	.word	0x00000000
      d4:	000065b0 	.word	0x000065b0

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	000065b0 	.word	0x000065b0
     104:	20000074 	.word	0x20000074
     108:	000065b0 	.word	0x000065b0
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <cpu_irq_enter_critical+0x44>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d112      	bne.n	144 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11e:	f3ef 8310 	mrs	r3, PRIMASK
     122:	607b      	str	r3, [r7, #4]
  return(result);
     124:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     126:	2b00      	cmp	r3, #0
     128:	d109      	bne.n	13e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     12a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     12c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <cpu_irq_enter_critical+0x48>)
     132:	2200      	movs	r2, #0
     134:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <cpu_irq_enter_critical+0x4c>)
     138:	2201      	movs	r2, #1
     13a:	701a      	strb	r2, [r3, #0]
     13c:	e002      	b.n	144 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     13e:	4b07      	ldr	r3, [pc, #28]	; (15c <cpu_irq_enter_critical+0x4c>)
     140:	2200      	movs	r2, #0
     142:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <cpu_irq_enter_critical+0x44>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1c5a      	adds	r2, r3, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x44>)
     14c:	601a      	str	r2, [r3, #0]
}
     14e:	46bd      	mov	sp, r7
     150:	b002      	add	sp, #8
     152:	bd80      	pop	{r7, pc}
     154:	2000008c 	.word	0x2000008c
     158:	20000000 	.word	0x20000000
     15c:	20000090 	.word	0x20000090

00000160 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <cpu_irq_leave_critical+0x30>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	1e5a      	subs	r2, r3, #1
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <cpu_irq_leave_critical+0x30>)
     16c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <cpu_irq_leave_critical+0x30>)
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d10a      	bne.n	18c <cpu_irq_leave_critical+0x2c>
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <cpu_irq_leave_critical+0x34>)
     178:	781b      	ldrb	r3, [r3, #0]
     17a:	b2db      	uxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	d005      	beq.n	18c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     180:	4b05      	ldr	r3, [pc, #20]	; (198 <cpu_irq_leave_critical+0x38>)
     182:	2201      	movs	r2, #1
     184:	701a      	strb	r2, [r3, #0]
     186:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     18a:	b662      	cpsie	i
	}
}
     18c:	46bd      	mov	sp, r7
     18e:	bd80      	pop	{r7, pc}
     190:	2000008c 	.word	0x2000008c
     194:	20000090 	.word	0x20000090
     198:	20000000 	.word	0x20000000

0000019c <system_gclk_chan_get_config_defaults>:
					((sclsm_flag) && (tmp_data_length == 1))) {
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
				packet->data[counter++] = i2c_module->DATA.reg;
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	2200      	movs	r2, #0
     1a8:	701a      	strb	r2, [r3, #0]
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_apb_clock_set_mask>:
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	1c02      	adds	r2, r0, #0
     1b8:	6039      	str	r1, [r7, #0]
     1ba:	1dfb      	adds	r3, r7, #7
     1bc:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	2b01      	cmp	r3, #1
     1c4:	d00a      	beq.n	1dc <system_apb_clock_set_mask+0x2c>
     1c6:	2b02      	cmp	r3, #2
     1c8:	d00f      	beq.n	1ea <system_apb_clock_set_mask+0x3a>
     1ca:	2b00      	cmp	r3, #0
     1cc:	d114      	bne.n	1f8 <system_apb_clock_set_mask+0x48>
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <system_apb_clock_set_mask+0x58>)
     1d0:	4a0d      	ldr	r2, [pc, #52]	; (208 <system_apb_clock_set_mask+0x58>)
     1d2:	6991      	ldr	r1, [r2, #24]
     1d4:	683a      	ldr	r2, [r7, #0]
     1d6:	430a      	orrs	r2, r1
				break;
     1d8:	619a      	str	r2, [r3, #24]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     1da:	e00f      	b.n	1fc <system_apb_clock_set_mask+0x4c>
     1dc:	4b0a      	ldr	r3, [pc, #40]	; (208 <system_apb_clock_set_mask+0x58>)
     1de:	4a0a      	ldr	r2, [pc, #40]	; (208 <system_apb_clock_set_mask+0x58>)
     1e0:	69d1      	ldr	r1, [r2, #28]
     1e2:	683a      	ldr	r2, [r7, #0]
     1e4:	430a      	orrs	r2, r1
     1e6:	61da      	str	r2, [r3, #28]
     1e8:	e008      	b.n	1fc <system_apb_clock_set_mask+0x4c>
     1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <system_apb_clock_set_mask+0x58>)
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     1ec:	4a06      	ldr	r2, [pc, #24]	; (208 <system_apb_clock_set_mask+0x58>)
     1ee:	6a11      	ldr	r1, [r2, #32]
     1f0:	683a      	ldr	r2, [r7, #0]
     1f2:	430a      	orrs	r2, r1
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     1f4:	621a      	str	r2, [r3, #32]
     1f6:	e001      	b.n	1fc <system_apb_clock_set_mask+0x4c>
     1f8:	2317      	movs	r3, #23
     1fa:	e000      	b.n	1fe <system_apb_clock_set_mask+0x4e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     1fc:	2300      	movs	r3, #0
     1fe:	1c18      	adds	r0, r3, #0
     200:	46bd      	mov	sp, r7
     202:	b002      	add	sp, #8
     204:	bd80      	pop	{r7, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	40000400 	.word	0x40000400

0000020c <system_pinmux_get_config_defaults>:
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     20c:	b580      	push	{r7, lr}
     20e:	b082      	sub	sp, #8
     210:	af00      	add	r7, sp, #0
		packet->data[counter] = i2c_module->DATA.reg;
     212:	6078      	str	r0, [r7, #4]
     214:	687b      	ldr	r3, [r7, #4]
     216:	2280      	movs	r2, #128	; 0x80
     218:	701a      	strb	r2, [r3, #0]
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	2200      	movs	r2, #0
     21e:	705a      	strb	r2, [r3, #1]
     220:	687b      	ldr	r3, [r7, #4]
     222:	2201      	movs	r2, #1
     224:	709a      	strb	r2, [r3, #2]
     226:	687b      	ldr	r3, [r7, #4]
	}

	return tmp_status;
     228:	2200      	movs	r2, #0
     22a:	70da      	strb	r2, [r3, #3]
     22c:	46bd      	mov	sp, r7
}
     22e:	b002      	add	sp, #8
     230:	bd80      	pop	{r7, pc}
     232:	46c0      	nop			; (mov r8, r8)

00000234 <system_is_debugger_present>:
     234:	b580      	push	{r7, lr}
     236:	af00      	add	r7, sp, #0
     238:	4b05      	ldr	r3, [pc, #20]	; (250 <system_is_debugger_present+0x1c>)
     23a:	789b      	ldrb	r3, [r3, #2]
     23c:	b2db      	uxtb	r3, r3
     23e:	1c1a      	adds	r2, r3, #0
     240:	2302      	movs	r3, #2
     242:	4013      	ands	r3, r2
     244:	1e5a      	subs	r2, r3, #1
     246:	4193      	sbcs	r3, r2
     248:	b2db      	uxtb	r3, r3
     24a:	1c18      	adds	r0, r3, #0
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
}
     24c:	46bd      	mov	sp, r7
     24e:	bd80      	pop	{r7, pc}
     250:	41002000 	.word	0x41002000

00000254 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     254:	b580      	push	{r7, lr}
     256:	b084      	sub	sp, #16
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	681b      	ldr	r3, [r3, #0]
     260:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     262:	68fb      	ldr	r3, [r7, #12]
     264:	69db      	ldr	r3, [r3, #28]
     266:	2207      	movs	r2, #7
     268:	4013      	ands	r3, r2
     26a:	1e5a      	subs	r2, r3, #1
     26c:	4193      	sbcs	r3, r2
     26e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     270:	1c18      	adds	r0, r3, #0
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}

00000278 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     278:	b580      	push	{r7, lr}
     27a:	b082      	sub	sp, #8
     27c:	af00      	add	r7, sp, #0
     27e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     280:	46c0      	nop			; (mov r8, r8)
     282:	687b      	ldr	r3, [r7, #4]
     284:	1c18      	adds	r0, r3, #0
     286:	4b03      	ldr	r3, [pc, #12]	; (294 <_i2c_master_wait_for_sync+0x1c>)
     288:	4798      	blx	r3
     28a:	1e03      	subs	r3, r0, #0
     28c:	d1f9      	bne.n	282 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     28e:	46bd      	mov	sp, r7
     290:	b002      	add	sp, #8
     292:	bd80      	pop	{r7, pc}
     294:	00000255 	.word	0x00000255

00000298 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     298:	b590      	push	{r4, r7, lr}
     29a:	b08d      	sub	sp, #52	; 0x34
     29c:	af00      	add	r7, sp, #0
     29e:	6078      	str	r0, [r7, #4]
     2a0:	6039      	str	r1, [r7, #0]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     2a2:	2327      	movs	r3, #39	; 0x27
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	2200      	movs	r2, #0
     2a8:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	61bb      	str	r3, [r7, #24]
	Sercom *const sercom_hw = module->hw;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	617b      	str	r3, [r7, #20]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2b6:	2313      	movs	r3, #19
     2b8:	18fc      	adds	r4, r7, r3
     2ba:	697b      	ldr	r3, [r7, #20]
     2bc:	1c18      	adds	r0, r3, #0
     2be:	4b85      	ldr	r3, [pc, #532]	; (4d4 <_i2c_master_set_config+0x23c>)
     2c0:	4798      	blx	r3
     2c2:	1c03      	adds	r3, r0, #0
     2c4:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     2c6:	2308      	movs	r3, #8
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	1c18      	adds	r0, r3, #0
     2cc:	4b82      	ldr	r3, [pc, #520]	; (4d8 <_i2c_master_set_config+0x240>)
     2ce:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     2d0:	683b      	ldr	r3, [r7, #0]
     2d2:	69db      	ldr	r3, [r3, #28]
     2d4:	623b      	str	r3, [r7, #32]
	uint32_t pad1 = config->pinmux_pad1;
     2d6:	683b      	ldr	r3, [r7, #0]
     2d8:	6a1b      	ldr	r3, [r3, #32]
     2da:	61fb      	str	r3, [r7, #28]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     2dc:	6a3b      	ldr	r3, [r7, #32]
     2de:	2b00      	cmp	r3, #0
     2e0:	d106      	bne.n	2f0 <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     2e2:	697b      	ldr	r3, [r7, #20]
     2e4:	1c18      	adds	r0, r3, #0
     2e6:	2100      	movs	r1, #0
     2e8:	4b7c      	ldr	r3, [pc, #496]	; (4dc <_i2c_master_set_config+0x244>)
     2ea:	4798      	blx	r3
     2ec:	1c03      	adds	r3, r0, #0
     2ee:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     2f0:	6a3b      	ldr	r3, [r7, #32]
     2f2:	b2da      	uxtb	r2, r3
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2fa:	2308      	movs	r3, #8
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	2202      	movs	r2, #2
     300:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     302:	6a3b      	ldr	r3, [r7, #32]
     304:	0c1b      	lsrs	r3, r3, #16
     306:	b2da      	uxtb	r2, r3
     308:	2308      	movs	r3, #8
     30a:	18fb      	adds	r3, r7, r3
     30c:	1c10      	adds	r0, r2, #0
     30e:	1c19      	adds	r1, r3, #0
     310:	4b73      	ldr	r3, [pc, #460]	; (4e0 <_i2c_master_set_config+0x248>)
     312:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     314:	69fb      	ldr	r3, [r7, #28]
     316:	2b00      	cmp	r3, #0
     318:	d106      	bne.n	328 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     31a:	697b      	ldr	r3, [r7, #20]
     31c:	1c18      	adds	r0, r3, #0
     31e:	2101      	movs	r1, #1
     320:	4b6e      	ldr	r3, [pc, #440]	; (4dc <_i2c_master_set_config+0x244>)
     322:	4798      	blx	r3
     324:	1c03      	adds	r3, r0, #0
     326:	61fb      	str	r3, [r7, #28]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     328:	69fb      	ldr	r3, [r7, #28]
     32a:	b2da      	uxtb	r2, r3
     32c:	2308      	movs	r3, #8
     32e:	18fb      	adds	r3, r7, r3
     330:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     332:	2308      	movs	r3, #8
     334:	18fb      	adds	r3, r7, r3
     336:	2202      	movs	r2, #2
     338:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     33a:	69fb      	ldr	r3, [r7, #28]
     33c:	0c1b      	lsrs	r3, r3, #16
     33e:	b2da      	uxtb	r2, r3
     340:	2308      	movs	r3, #8
     342:	18fb      	adds	r3, r7, r3
     344:	1c10      	adds	r0, r2, #0
     346:	1c19      	adds	r1, r3, #0
     348:	4b65      	ldr	r3, [pc, #404]	; (4e0 <_i2c_master_set_config+0x248>)
     34a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     34c:	683b      	ldr	r3, [r7, #0]
     34e:	8a9a      	ldrh	r2, [r3, #20]
     350:	687b      	ldr	r3, [r7, #4]
     352:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     354:	683b      	ldr	r3, [r7, #0]
     356:	8ada      	ldrh	r2, [r3, #22]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     35c:	683b      	ldr	r3, [r7, #0]
     35e:	7e1b      	ldrb	r3, [r3, #24]
     360:	2b00      	cmp	r3, #0
     362:	d103      	bne.n	36c <_i2c_master_set_config+0xd4>
     364:	4b5f      	ldr	r3, [pc, #380]	; (4e4 <_i2c_master_set_config+0x24c>)
     366:	4798      	blx	r3
     368:	1e03      	subs	r3, r0, #0
     36a:	d002      	beq.n	372 <_i2c_master_set_config+0xda>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     36c:	2380      	movs	r3, #128	; 0x80
     36e:	62fb      	str	r3, [r7, #44]	; 0x2c
     370:	e001      	b.n	376 <_i2c_master_set_config+0xde>
	} else {
		tmp_ctrla = 0;
     372:	2300      	movs	r3, #0
     374:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     376:	683b      	ldr	r3, [r7, #0]
     378:	691b      	ldr	r3, [r3, #16]
     37a:	2b00      	cmp	r3, #0
     37c:	d004      	beq.n	388 <_i2c_master_set_config+0xf0>
		tmp_ctrla |= config->start_hold_time;
     37e:	683b      	ldr	r3, [r7, #0]
     380:	691b      	ldr	r3, [r3, #16]
     382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     384:	4313      	orrs	r3, r2
     386:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     388:	683b      	ldr	r3, [r7, #0]
     38a:	689b      	ldr	r3, [r3, #8]
     38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     38e:	4313      	orrs	r3, r2
     390:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     392:	683b      	ldr	r3, [r7, #0]
     394:	2224      	movs	r2, #36	; 0x24
     396:	5c9b      	ldrb	r3, [r3, r2]
     398:	2b00      	cmp	r3, #0
     39a:	d004      	beq.n	3a6 <_i2c_master_set_config+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	05d2      	lsls	r2, r2, #23
     3a2:	4313      	orrs	r3, r2
     3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     3a6:	683b      	ldr	r3, [r7, #0]
     3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3aa:	2b00      	cmp	r3, #0
     3ac:	d004      	beq.n	3b8 <_i2c_master_set_config+0x120>
		tmp_ctrla |= config->inactive_timeout;
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     3b4:	4313      	orrs	r3, r2
     3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     3b8:	683b      	ldr	r3, [r7, #0]
     3ba:	222c      	movs	r2, #44	; 0x2c
     3bc:	5c9b      	ldrb	r3, [r3, r2]
     3be:	2b00      	cmp	r3, #0
     3c0:	d004      	beq.n	3cc <_i2c_master_set_config+0x134>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3c4:	2280      	movs	r2, #128	; 0x80
     3c6:	0512      	lsls	r2, r2, #20
     3c8:	4313      	orrs	r3, r2
     3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     3cc:	683b      	ldr	r3, [r7, #0]
     3ce:	222d      	movs	r2, #45	; 0x2d
     3d0:	5c9b      	ldrb	r3, [r3, r2]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d004      	beq.n	3e0 <_i2c_master_set_config+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	0412      	lsls	r2, r2, #16
     3dc:	4313      	orrs	r3, r2
     3de:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     3e0:	683b      	ldr	r3, [r7, #0]
     3e2:	222e      	movs	r2, #46	; 0x2e
     3e4:	5c9b      	ldrb	r3, [r3, r2]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d004      	beq.n	3f4 <_i2c_master_set_config+0x15c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	03d2      	lsls	r2, r2, #15
     3f0:	4313      	orrs	r3, r2
     3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     3f4:	69bb      	ldr	r3, [r7, #24]
     3f6:	681a      	ldr	r2, [r3, #0]
     3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3fa:	431a      	orrs	r2, r3
     3fc:	69bb      	ldr	r3, [r7, #24]
     3fe:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     400:	69bb      	ldr	r3, [r7, #24]
     402:	2280      	movs	r2, #128	; 0x80
     404:	0052      	lsls	r2, r2, #1
     406:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     408:	2313      	movs	r3, #19
     40a:	18fb      	adds	r3, r7, r3
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	3314      	adds	r3, #20
     410:	b2db      	uxtb	r3, r3
     412:	1c18      	adds	r0, r3, #0
     414:	4b34      	ldr	r3, [pc, #208]	; (4e8 <_i2c_master_set_config+0x250>)
     416:	4798      	blx	r3
     418:	1c01      	adds	r1, r0, #0
     41a:	683b      	ldr	r3, [r7, #0]
     41c:	681b      	ldr	r3, [r3, #0]
     41e:	22fa      	movs	r2, #250	; 0xfa
     420:	00d2      	lsls	r2, r2, #3
     422:	4353      	muls	r3, r2
     424:	18cb      	adds	r3, r1, r3
     426:	1e59      	subs	r1, r3, #1
     428:	683b      	ldr	r3, [r7, #0]
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	22fa      	movs	r2, #250	; 0xfa
     42e:	00d2      	lsls	r2, r2, #3
     430:	435a      	muls	r2, r3
     432:	4b2e      	ldr	r3, [pc, #184]	; (4ec <_i2c_master_set_config+0x254>)
     434:	1c08      	adds	r0, r1, #0
     436:	1c11      	adds	r1, r2, #0
     438:	4798      	blx	r3
     43a:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     43c:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     43e:	60fb      	str	r3, [r7, #12]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     440:	68fb      	ldr	r3, [r7, #12]
     442:	2bff      	cmp	r3, #255	; 0xff
     444:	dc02      	bgt.n	44c <_i2c_master_set_config+0x1b4>
     446:	68fb      	ldr	r3, [r7, #12]
     448:	2b00      	cmp	r3, #0
     44a:	da04      	bge.n	456 <_i2c_master_set_config+0x1be>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     44c:	2327      	movs	r3, #39	; 0x27
     44e:	18fb      	adds	r3, r7, r3
     450:	2240      	movs	r2, #64	; 0x40
     452:	701a      	strb	r2, [r3, #0]
     454:	e025      	b.n	4a2 <_i2c_master_set_config+0x20a>
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     456:	2313      	movs	r3, #19
     458:	18fb      	adds	r3, r7, r3
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	3314      	adds	r3, #20
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
     462:	4b21      	ldr	r3, [pc, #132]	; (4e8 <_i2c_master_set_config+0x250>)
     464:	4798      	blx	r3
     466:	1c01      	adds	r1, r0, #0
     468:	683b      	ldr	r3, [r7, #0]
     46a:	685b      	ldr	r3, [r3, #4]
     46c:	22fa      	movs	r2, #250	; 0xfa
     46e:	00d2      	lsls	r2, r2, #3
     470:	4353      	muls	r3, r2
     472:	18cb      	adds	r3, r1, r3
     474:	1e59      	subs	r1, r3, #1
     476:	683b      	ldr	r3, [r7, #0]
     478:	685b      	ldr	r3, [r3, #4]
     47a:	22fa      	movs	r2, #250	; 0xfa
     47c:	00d2      	lsls	r2, r2, #3
     47e:	435a      	muls	r2, r3
     480:	4b1a      	ldr	r3, [pc, #104]	; (4ec <_i2c_master_set_config+0x254>)
     482:	1c08      	adds	r0, r1, #0
     484:	1c11      	adds	r1, r2, #0
     486:	4798      	blx	r3
     488:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     48a:	3b01      	subs	r3, #1
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     48c:	62bb      	str	r3, [r7, #40]	; 0x28
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     490:	2bff      	cmp	r3, #255	; 0xff
     492:	dc02      	bgt.n	49a <_i2c_master_set_config+0x202>
     494:	6abb      	ldr	r3, [r7, #40]	; 0x28
     496:	2b00      	cmp	r3, #0
     498:	da03      	bge.n	4a2 <_i2c_master_set_config+0x20a>
			/* Baud rate not supported. */
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     49a:	2327      	movs	r3, #39	; 0x27
     49c:	18fb      	adds	r3, r7, r3
     49e:	2240      	movs	r2, #64	; 0x40
     4a0:	701a      	strb	r2, [r3, #0]
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
     4a2:	2327      	movs	r3, #39	; 0x27
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	2b40      	cmp	r3, #64	; 0x40
     4aa:	d00b      	beq.n	4c4 <_i2c_master_set_config+0x22c>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4ac:	68fb      	ldr	r3, [r7, #12]
     4ae:	22ff      	movs	r2, #255	; 0xff
     4b0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4b4:	041b      	lsls	r3, r3, #16
     4b6:	1c19      	adds	r1, r3, #0
     4b8:	23ff      	movs	r3, #255	; 0xff
     4ba:	041b      	lsls	r3, r3, #16
     4bc:	400b      	ands	r3, r1
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4be:	431a      	orrs	r2, r3
     4c0:	69bb      	ldr	r3, [r7, #24]
     4c2:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
	}

	return tmp_status_code;
     4c4:	2327      	movs	r3, #39	; 0x27
     4c6:	18fb      	adds	r3, r7, r3
     4c8:	781b      	ldrb	r3, [r3, #0]
}
     4ca:	1c18      	adds	r0, r3, #0
     4cc:	46bd      	mov	sp, r7
     4ce:	b00d      	add	sp, #52	; 0x34
     4d0:	bd90      	pop	{r4, r7, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	00000e21 	.word	0x00000e21
     4d8:	0000020d 	.word	0x0000020d
     4dc:	00000c65 	.word	0x00000c65
     4e0:	00004815 	.word	0x00004815
     4e4:	00000235 	.word	0x00000235
     4e8:	0000464d 	.word	0x0000464d
     4ec:	0000515d 	.word	0x0000515d

000004f0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b08a      	sub	sp, #40	; 0x28
     4f4:	af00      	add	r7, sp, #0
     4f6:	60f8      	str	r0, [r7, #12]
     4f8:	60b9      	str	r1, [r7, #8]
     4fa:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     4fc:	68fb      	ldr	r3, [r7, #12]
     4fe:	68ba      	ldr	r2, [r7, #8]
     500:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     502:	68fb      	ldr	r3, [r7, #12]
     504:	681b      	ldr	r3, [r3, #0]
     506:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	1c18      	adds	r0, r3, #0
     50e:	4b25      	ldr	r3, [pc, #148]	; (5a4 <i2c_master_init+0xb4>)
     510:	4798      	blx	r3
     512:	1c03      	adds	r3, r0, #0
     514:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     516:	6a3b      	ldr	r3, [r7, #32]
     518:	3302      	adds	r3, #2
     51a:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     51c:	6a3b      	ldr	r3, [r7, #32]
     51e:	3314      	adds	r3, #20
     520:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     522:	69fb      	ldr	r3, [r7, #28]
     524:	2201      	movs	r2, #1
     526:	409a      	lsls	r2, r3
     528:	1c13      	adds	r3, r2, #0
     52a:	2002      	movs	r0, #2
     52c:	1c19      	adds	r1, r3, #0
     52e:	4b1e      	ldr	r3, [pc, #120]	; (5a8 <i2c_master_init+0xb8>)
     530:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     532:	2314      	movs	r3, #20
     534:	18fb      	adds	r3, r7, r3
     536:	1c18      	adds	r0, r3, #0
     538:	4b1c      	ldr	r3, [pc, #112]	; (5ac <i2c_master_init+0xbc>)
     53a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	7b1a      	ldrb	r2, [r3, #12]
     540:	2314      	movs	r3, #20
     542:	18fb      	adds	r3, r7, r3
     544:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     546:	69bb      	ldr	r3, [r7, #24]
     548:	b2da      	uxtb	r2, r3
     54a:	2314      	movs	r3, #20
     54c:	18fb      	adds	r3, r7, r3
     54e:	1c10      	adds	r0, r2, #0
     550:	1c19      	adds	r1, r3, #0
     552:	4b17      	ldr	r3, [pc, #92]	; (5b0 <i2c_master_init+0xc0>)
     554:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     556:	69bb      	ldr	r3, [r7, #24]
     558:	b2db      	uxtb	r3, r3
     55a:	1c18      	adds	r0, r3, #0
     55c:	4b15      	ldr	r3, [pc, #84]	; (5b4 <i2c_master_init+0xc4>)
     55e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     560:	687b      	ldr	r3, [r7, #4]
     562:	7b1b      	ldrb	r3, [r3, #12]
     564:	1c18      	adds	r0, r3, #0
     566:	2100      	movs	r1, #0
     568:	4b13      	ldr	r3, [pc, #76]	; (5b8 <i2c_master_init+0xc8>)
     56a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     56e:	681b      	ldr	r3, [r3, #0]
     570:	2202      	movs	r2, #2
     572:	4013      	ands	r3, r2
     574:	d001      	beq.n	57a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
     576:	231c      	movs	r3, #28
     578:	e010      	b.n	59c <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	2201      	movs	r2, #1
     580:	4013      	ands	r3, r2
     582:	d001      	beq.n	588 <i2c_master_init+0x98>
		return STATUS_BUSY;
     584:	2305      	movs	r3, #5
     586:	e009      	b.n	59c <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     58a:	2214      	movs	r2, #20
     58c:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     58e:	68fa      	ldr	r2, [r7, #12]
     590:	687b      	ldr	r3, [r7, #4]
     592:	1c10      	adds	r0, r2, #0
     594:	1c19      	adds	r1, r3, #0
     596:	4b09      	ldr	r3, [pc, #36]	; (5bc <i2c_master_init+0xcc>)
     598:	4798      	blx	r3
     59a:	1c03      	adds	r3, r0, #0
}
     59c:	1c18      	adds	r0, r3, #0
     59e:	46bd      	mov	sp, r7
     5a0:	b00a      	add	sp, #40	; 0x28
     5a2:	bd80      	pop	{r7, pc}
     5a4:	00000e21 	.word	0x00000e21
     5a8:	000001b1 	.word	0x000001b1
     5ac:	0000019d 	.word	0x0000019d
     5b0:	00004529 	.word	0x00004529
     5b4:	0000456d 	.word	0x0000456d
     5b8:	00000bd9 	.word	0x00000bd9
     5bc:	00000299 	.word	0x00000299

000005c0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b084      	sub	sp, #16
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5ce:	68fb      	ldr	r3, [r7, #12]
     5d0:	7e1b      	ldrb	r3, [r3, #24]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	1c1a      	adds	r2, r3, #0
     5d6:	2302      	movs	r3, #2
     5d8:	4013      	ands	r3, r2
     5da:	d00b      	beq.n	5f4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5dc:	68fb      	ldr	r3, [r7, #12]
     5de:	2202      	movs	r2, #2
     5e0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e2:	68fb      	ldr	r3, [r7, #12]
     5e4:	8b5b      	ldrh	r3, [r3, #26]
     5e6:	b29b      	uxth	r3, r3
     5e8:	1c1a      	adds	r2, r3, #0
     5ea:	2302      	movs	r3, #2
     5ec:	4013      	ands	r3, r2
     5ee:	d011      	beq.n	614 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5f0:	2341      	movs	r3, #65	; 0x41
     5f2:	e010      	b.n	616 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	8b5b      	ldrh	r3, [r3, #26]
     5f8:	b29b      	uxth	r3, r3
     5fa:	1c1a      	adds	r2, r3, #0
     5fc:	2304      	movs	r3, #4
     5fe:	4013      	ands	r3, r2
     600:	d008      	beq.n	614 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     602:	68fb      	ldr	r3, [r7, #12]
     604:	685b      	ldr	r3, [r3, #4]
     606:	22c0      	movs	r2, #192	; 0xc0
     608:	0292      	lsls	r2, r2, #10
     60a:	431a      	orrs	r2, r3
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     610:	2318      	movs	r3, #24
     612:	e000      	b.n	616 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     614:	2300      	movs	r3, #0
}
     616:	1c18      	adds	r0, r3, #0
     618:	46bd      	mov	sp, r7
     61a:	b004      	add	sp, #16
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)

00000620 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     62e:	230e      	movs	r3, #14
     630:	18fb      	adds	r3, r7, r3
     632:	2200      	movs	r2, #0
     634:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     636:	e00f      	b.n	658 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     638:	230e      	movs	r3, #14
     63a:	18fb      	adds	r3, r7, r3
     63c:	220e      	movs	r2, #14
     63e:	18ba      	adds	r2, r7, r2
     640:	8812      	ldrh	r2, [r2, #0]
     642:	3201      	adds	r2, #1
     644:	801a      	strh	r2, [r3, #0]
     646:	687b      	ldr	r3, [r7, #4]
     648:	891b      	ldrh	r3, [r3, #8]
     64a:	220e      	movs	r2, #14
     64c:	18ba      	adds	r2, r7, r2
     64e:	8812      	ldrh	r2, [r2, #0]
     650:	429a      	cmp	r2, r3
     652:	d301      	bcc.n	658 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     654:	2312      	movs	r3, #18
     656:	e00e      	b.n	676 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     658:	68bb      	ldr	r3, [r7, #8]
     65a:	7e1b      	ldrb	r3, [r3, #24]
     65c:	b2db      	uxtb	r3, r3
     65e:	1c1a      	adds	r2, r3, #0
     660:	2301      	movs	r3, #1
     662:	4013      	ands	r3, r2
     664:	d106      	bne.n	674 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     666:	68bb      	ldr	r3, [r7, #8]
     668:	7e1b      	ldrb	r3, [r3, #24]
     66a:	b2db      	uxtb	r3, r3
     66c:	1c1a      	adds	r2, r3, #0
     66e:	2302      	movs	r3, #2
     670:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     672:	d0e1      	beq.n	638 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     674:	2300      	movs	r3, #0
}
     676:	1c18      	adds	r0, r3, #0
     678:	46bd      	mov	sp, r7
     67a:	b004      	add	sp, #16
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     680:	b590      	push	{r4, r7, lr}
     682:	b085      	sub	sp, #20
     684:	af00      	add	r7, sp, #0
     686:	6078      	str	r0, [r7, #4]
     688:	1c0a      	adds	r2, r1, #0
     68a:	1cfb      	adds	r3, r7, #3
     68c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	687b      	ldr	r3, [r7, #4]
     690:	681b      	ldr	r3, [r3, #0]
     692:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	685b      	ldr	r3, [r3, #4]
     698:	2280      	movs	r2, #128	; 0x80
     69a:	02d2      	lsls	r2, r2, #11
     69c:	431a      	orrs	r2, r3
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6a2:	1cfb      	adds	r3, r7, #3
     6a4:	781a      	ldrb	r2, [r3, #0]
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6aa:	230b      	movs	r3, #11
     6ac:	18fc      	adds	r4, r7, r3
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	1c18      	adds	r0, r3, #0
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_i2c_master_send_hs_master_code+0x50>)
     6b4:	4798      	blx	r3
     6b6:	1c03      	adds	r3, r0, #0
     6b8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	2201      	movs	r2, #1
     6be:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     6c0:	230b      	movs	r3, #11
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	781b      	ldrb	r3, [r3, #0]
}
     6c6:	1c18      	adds	r0, r3, #0
     6c8:	46bd      	mov	sp, r7
     6ca:	b005      	add	sp, #20
     6cc:	bd90      	pop	{r4, r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00000621 	.word	0x00000621

000006d4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6d4:	b590      	push	{r4, r7, lr}
     6d6:	b087      	sub	sp, #28
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6e4:	2314      	movs	r3, #20
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	683a      	ldr	r2, [r7, #0]
     6ea:	8852      	ldrh	r2, [r2, #2]
     6ec:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	1c18      	adds	r0, r3, #0
     6f2:	4b51      	ldr	r3, [pc, #324]	; (838 <_i2c_master_write_packet+0x164>)
     6f4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6f6:	683b      	ldr	r3, [r7, #0]
     6f8:	7a5b      	ldrb	r3, [r3, #9]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d006      	beq.n	70c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6fe:	683b      	ldr	r3, [r7, #0]
     700:	7a9b      	ldrb	r3, [r3, #10]
     702:	687a      	ldr	r2, [r7, #4]
     704:	1c10      	adds	r0, r2, #0
     706:	1c19      	adds	r1, r3, #0
     708:	4b4c      	ldr	r3, [pc, #304]	; (83c <_i2c_master_write_packet+0x168>)
     70a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     70c:	68fb      	ldr	r3, [r7, #12]
     70e:	685b      	ldr	r3, [r3, #4]
     710:	4a4b      	ldr	r2, [pc, #300]	; (840 <_i2c_master_write_packet+0x16c>)
     712:	401a      	ands	r2, r3
     714:	68fb      	ldr	r3, [r7, #12]
     716:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     718:	683b      	ldr	r3, [r7, #0]
     71a:	7a1b      	ldrb	r3, [r3, #8]
     71c:	2b00      	cmp	r3, #0
     71e:	d00d      	beq.n	73c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     720:	683b      	ldr	r3, [r7, #0]
     722:	881b      	ldrh	r3, [r3, #0]
     724:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     726:	683b      	ldr	r3, [r7, #0]
     728:	7a5b      	ldrb	r3, [r3, #9]
     72a:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     72c:	4313      	orrs	r3, r2
     72e:	1c1a      	adds	r2, r3, #0
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     730:	2380      	movs	r3, #128	; 0x80
     732:	021b      	lsls	r3, r3, #8
     734:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     736:	68fb      	ldr	r3, [r7, #12]
     738:	625a      	str	r2, [r3, #36]	; 0x24
     73a:	e009      	b.n	750 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     73c:	683b      	ldr	r3, [r7, #0]
     73e:	881b      	ldrh	r3, [r3, #0]
     740:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     742:	683b      	ldr	r3, [r7, #0]
     744:	7a5b      	ldrb	r3, [r3, #9]
     746:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     748:	4313      	orrs	r3, r2
     74a:	1c1a      	adds	r2, r3, #0
     74c:	68fb      	ldr	r3, [r7, #12]
     74e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     750:	2317      	movs	r3, #23
     752:	18fc      	adds	r4, r7, r3
     754:	687b      	ldr	r3, [r7, #4]
     756:	1c18      	adds	r0, r3, #0
     758:	4b3a      	ldr	r3, [pc, #232]	; (844 <_i2c_master_write_packet+0x170>)
     75a:	4798      	blx	r3
     75c:	1c03      	adds	r3, r0, #0
     75e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     760:	2317      	movs	r3, #23
     762:	18fb      	adds	r3, r7, r3
     764:	781b      	ldrb	r3, [r3, #0]
     766:	2b00      	cmp	r3, #0
     768:	d107      	bne.n	77a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     76a:	2317      	movs	r3, #23
     76c:	18fc      	adds	r4, r7, r3
     76e:	687b      	ldr	r3, [r7, #4]
     770:	1c18      	adds	r0, r3, #0
     772:	4b35      	ldr	r3, [pc, #212]	; (848 <_i2c_master_write_packet+0x174>)
     774:	4798      	blx	r3
     776:	1c03      	adds	r3, r0, #0
     778:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     77a:	2317      	movs	r3, #23
     77c:	18fb      	adds	r3, r7, r3
     77e:	781b      	ldrb	r3, [r3, #0]
     780:	2b00      	cmp	r3, #0
     782:	d151      	bne.n	828 <_i2c_master_write_packet+0x154>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     784:	2312      	movs	r3, #18
     786:	18fb      	adds	r3, r7, r3
     788:	2200      	movs	r2, #0
     78a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     78c:	e034      	b.n	7f8 <_i2c_master_write_packet+0x124>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     78e:	68fb      	ldr	r3, [r7, #12]
     790:	8b5b      	ldrh	r3, [r3, #26]
     792:	b29b      	uxth	r3, r3
     794:	1c1a      	adds	r2, r3, #0
     796:	2320      	movs	r3, #32
     798:	4013      	ands	r3, r2
     79a:	d101      	bne.n	7a0 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     79c:	2341      	movs	r3, #65	; 0x41
     79e:	e046      	b.n	82e <_i2c_master_write_packet+0x15a>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	1c18      	adds	r0, r3, #0
     7a4:	4b24      	ldr	r3, [pc, #144]	; (838 <_i2c_master_write_packet+0x164>)
     7a6:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     7a8:	683b      	ldr	r3, [r7, #0]
     7aa:	685a      	ldr	r2, [r3, #4]
     7ac:	2312      	movs	r3, #18
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	881b      	ldrh	r3, [r3, #0]
     7b2:	2112      	movs	r1, #18
     7b4:	1879      	adds	r1, r7, r1
     7b6:	1c58      	adds	r0, r3, #1
     7b8:	8008      	strh	r0, [r1, #0]
     7ba:	18d3      	adds	r3, r2, r3
     7bc:	7819      	ldrb	r1, [r3, #0]
     7be:	68fb      	ldr	r3, [r7, #12]
     7c0:	2228      	movs	r2, #40	; 0x28
     7c2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     7c4:	2317      	movs	r3, #23
     7c6:	18fc      	adds	r4, r7, r3
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	1c18      	adds	r0, r3, #0
     7cc:	4b1d      	ldr	r3, [pc, #116]	; (844 <_i2c_master_write_packet+0x170>)
     7ce:	4798      	blx	r3
     7d0:	1c03      	adds	r3, r0, #0
     7d2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     7d4:	2317      	movs	r3, #23
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	2b00      	cmp	r3, #0
     7dc:	d000      	beq.n	7e0 <_i2c_master_write_packet+0x10c>
				break;
     7de:	e014      	b.n	80a <_i2c_master_write_packet+0x136>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7e0:	68fb      	ldr	r3, [r7, #12]
     7e2:	8b5b      	ldrh	r3, [r3, #26]
     7e4:	b29b      	uxth	r3, r3
     7e6:	1c1a      	adds	r2, r3, #0
     7e8:	2304      	movs	r3, #4
     7ea:	4013      	ands	r3, r2
     7ec:	d004      	beq.n	7f8 <_i2c_master_write_packet+0x124>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     7ee:	2317      	movs	r3, #23
     7f0:	18fb      	adds	r3, r7, r3
     7f2:	221e      	movs	r2, #30
     7f4:	701a      	strb	r2, [r3, #0]
				break;
     7f6:	e008      	b.n	80a <_i2c_master_write_packet+0x136>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     7f8:	2314      	movs	r3, #20
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	881b      	ldrh	r3, [r3, #0]
     7fe:	2214      	movs	r2, #20
     800:	18ba      	adds	r2, r7, r2
     802:	1e59      	subs	r1, r3, #1
     804:	8011      	strh	r1, [r2, #0]
     806:	2b00      	cmp	r3, #0
     808:	d1c1      	bne.n	78e <_i2c_master_write_packet+0xba>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     80a:	687b      	ldr	r3, [r7, #4]
     80c:	7a9b      	ldrb	r3, [r3, #10]
     80e:	2b00      	cmp	r3, #0
     810:	d00a      	beq.n	828 <_i2c_master_write_packet+0x154>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     812:	687b      	ldr	r3, [r7, #4]
     814:	1c18      	adds	r0, r3, #0
     816:	4b08      	ldr	r3, [pc, #32]	; (838 <_i2c_master_write_packet+0x164>)
     818:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	685b      	ldr	r3, [r3, #4]
     81e:	22c0      	movs	r2, #192	; 0xc0
     820:	0292      	lsls	r2, r2, #10
     822:	431a      	orrs	r2, r3
     824:	68fb      	ldr	r3, [r7, #12]
     826:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     828:	2317      	movs	r3, #23
     82a:	18fb      	adds	r3, r7, r3
     82c:	781b      	ldrb	r3, [r3, #0]
}
     82e:	1c18      	adds	r0, r3, #0
     830:	46bd      	mov	sp, r7
     832:	b007      	add	sp, #28
     834:	bd90      	pop	{r4, r7, pc}
     836:	46c0      	nop			; (mov r8, r8)
     838:	00000279 	.word	0x00000279
     83c:	00000681 	.word	0x00000681
     840:	fffbffff 	.word	0xfffbffff
     844:	00000621 	.word	0x00000621
     848:	000005c1 	.word	0x000005c1

0000084c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     84c:	b580      	push	{r7, lr}
     84e:	b082      	sub	sp, #8
     850:	af00      	add	r7, sp, #0
     852:	6078      	str	r0, [r7, #4]
     854:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     856:	687b      	ldr	r3, [r7, #4]
     858:	2201      	movs	r2, #1
     85a:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
     85c:	687a      	ldr	r2, [r7, #4]
     85e:	683b      	ldr	r3, [r7, #0]
     860:	1c10      	adds	r0, r2, #0
     862:	1c19      	adds	r1, r3, #0
     864:	4b03      	ldr	r3, [pc, #12]	; (874 <i2c_master_write_packet_wait+0x28>)
     866:	4798      	blx	r3
     868:	1c03      	adds	r3, r0, #0
}
     86a:	1c18      	adds	r0, r3, #0
     86c:	46bd      	mov	sp, r7
     86e:	b002      	add	sp, #8
     870:	bd80      	pop	{r7, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	000006d5 	.word	0x000006d5

00000878 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     880:	687b      	ldr	r3, [r7, #4]
     882:	2200      	movs	r2, #0
     884:	701a      	strb	r2, [r3, #0]
}
     886:	46bd      	mov	sp, r7
     888:	b002      	add	sp, #8
     88a:	bd80      	pop	{r7, pc}

0000088c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	b08d      	sub	sp, #52	; 0x34
     890:	af00      	add	r7, sp, #0
     892:	60b8      	str	r0, [r7, #8]
     894:	60f9      	str	r1, [r7, #12]
     896:	603a      	str	r2, [r7, #0]
     898:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     89a:	2300      	movs	r3, #0
     89c:	2400      	movs	r4, #0
     89e:	623b      	str	r3, [r7, #32]
     8a0:	627c      	str	r4, [r7, #36]	; 0x24
     8a2:	2300      	movs	r3, #0
     8a4:	2400      	movs	r4, #0
     8a6:	61bb      	str	r3, [r7, #24]
     8a8:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     8aa:	233f      	movs	r3, #63	; 0x3f
     8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
     8ae:	e053      	b.n	958 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8b2:	3b20      	subs	r3, #32
     8b4:	2b00      	cmp	r3, #0
     8b6:	db04      	blt.n	8c2 <long_division+0x36>
     8b8:	2201      	movs	r2, #1
     8ba:	409a      	lsls	r2, r3
     8bc:	1c13      	adds	r3, r2, #0
     8be:	617b      	str	r3, [r7, #20]
     8c0:	e00b      	b.n	8da <long_division+0x4e>
     8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8c4:	2220      	movs	r2, #32
     8c6:	1ad3      	subs	r3, r2, r3
     8c8:	2201      	movs	r2, #1
     8ca:	40da      	lsrs	r2, r3
     8cc:	1c13      	adds	r3, r2, #0
     8ce:	2100      	movs	r1, #0
     8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     8d2:	4091      	lsls	r1, r2
     8d4:	1c0a      	adds	r2, r1, #0
     8d6:	4313      	orrs	r3, r2
     8d8:	617b      	str	r3, [r7, #20]
     8da:	2201      	movs	r2, #1
     8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     8de:	409a      	lsls	r2, r3
     8e0:	1c13      	adds	r3, r2, #0
     8e2:	613b      	str	r3, [r7, #16]

		r = r << 1;
     8e4:	69bb      	ldr	r3, [r7, #24]
     8e6:	69fc      	ldr	r4, [r7, #28]
     8e8:	18db      	adds	r3, r3, r3
     8ea:	4164      	adcs	r4, r4
     8ec:	61bb      	str	r3, [r7, #24]
     8ee:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     8f0:	68bb      	ldr	r3, [r7, #8]
     8f2:	693a      	ldr	r2, [r7, #16]
     8f4:	401a      	ands	r2, r3
     8f6:	1c15      	adds	r5, r2, #0
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	697a      	ldr	r2, [r7, #20]
     8fc:	401a      	ands	r2, r3
     8fe:	1c16      	adds	r6, r2, #0
     900:	1c2b      	adds	r3, r5, #0
     902:	4333      	orrs	r3, r6
     904:	d007      	beq.n	916 <long_division+0x8a>
			r |= 0x01;
     906:	69bb      	ldr	r3, [r7, #24]
     908:	2201      	movs	r2, #1
     90a:	4313      	orrs	r3, r2
     90c:	61bb      	str	r3, [r7, #24]
     90e:	69fb      	ldr	r3, [r7, #28]
     910:	2200      	movs	r2, #0
     912:	4313      	orrs	r3, r2
     914:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     916:	687a      	ldr	r2, [r7, #4]
     918:	69fb      	ldr	r3, [r7, #28]
     91a:	429a      	cmp	r2, r3
     91c:	d819      	bhi.n	952 <long_division+0xc6>
     91e:	687a      	ldr	r2, [r7, #4]
     920:	69fb      	ldr	r3, [r7, #28]
     922:	429a      	cmp	r2, r3
     924:	d103      	bne.n	92e <long_division+0xa2>
     926:	683a      	ldr	r2, [r7, #0]
     928:	69bb      	ldr	r3, [r7, #24]
     92a:	429a      	cmp	r2, r3
     92c:	d811      	bhi.n	952 <long_division+0xc6>
			r = r - d;
     92e:	69b9      	ldr	r1, [r7, #24]
     930:	69fa      	ldr	r2, [r7, #28]
     932:	683b      	ldr	r3, [r7, #0]
     934:	687c      	ldr	r4, [r7, #4]
     936:	1ac9      	subs	r1, r1, r3
     938:	41a2      	sbcs	r2, r4
     93a:	1c0b      	adds	r3, r1, #0
     93c:	1c14      	adds	r4, r2, #0
     93e:	61bb      	str	r3, [r7, #24]
     940:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     942:	6a3a      	ldr	r2, [r7, #32]
     944:	693b      	ldr	r3, [r7, #16]
     946:	4313      	orrs	r3, r2
     948:	623b      	str	r3, [r7, #32]
     94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     94c:	697b      	ldr	r3, [r7, #20]
     94e:	4313      	orrs	r3, r2
     950:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     954:	3b01      	subs	r3, #1
     956:	62fb      	str	r3, [r7, #44]	; 0x2c
     958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     95a:	2b00      	cmp	r3, #0
     95c:	daa8      	bge.n	8b0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     95e:	6a3b      	ldr	r3, [r7, #32]
     960:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     962:	1c18      	adds	r0, r3, #0
     964:	1c21      	adds	r1, r4, #0
     966:	46bd      	mov	sp, r7
     968:	b00d      	add	sp, #52	; 0x34
     96a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000096c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     96c:	b580      	push	{r7, lr}
     96e:	b086      	sub	sp, #24
     970:	af00      	add	r7, sp, #0
     972:	60f8      	str	r0, [r7, #12]
     974:	60b9      	str	r1, [r7, #8]
     976:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     978:	2316      	movs	r3, #22
     97a:	18fb      	adds	r3, r7, r3
     97c:	2200      	movs	r2, #0
     97e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     980:	68bb      	ldr	r3, [r7, #8]
     982:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     984:	68bb      	ldr	r3, [r7, #8]
     986:	085a      	lsrs	r2, r3, #1
     988:	68fb      	ldr	r3, [r7, #12]
     98a:	429a      	cmp	r2, r3
     98c:	d201      	bcs.n	992 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     98e:	2340      	movs	r3, #64	; 0x40
     990:	e026      	b.n	9e0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     992:	68bb      	ldr	r3, [r7, #8]
     994:	085b      	lsrs	r3, r3, #1
     996:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     998:	e00a      	b.n	9b0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     99a:	693a      	ldr	r2, [r7, #16]
     99c:	68fb      	ldr	r3, [r7, #12]
     99e:	1ad3      	subs	r3, r2, r3
     9a0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     9a2:	2316      	movs	r3, #22
     9a4:	18fb      	adds	r3, r7, r3
     9a6:	881a      	ldrh	r2, [r3, #0]
     9a8:	2316      	movs	r3, #22
     9aa:	18fb      	adds	r3, r7, r3
     9ac:	3201      	adds	r2, #1
     9ae:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     9b0:	693a      	ldr	r2, [r7, #16]
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	429a      	cmp	r2, r3
     9b6:	d2f0      	bcs.n	99a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     9b8:	2316      	movs	r3, #22
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	2216      	movs	r2, #22
     9be:	18ba      	adds	r2, r7, r2
     9c0:	8812      	ldrh	r2, [r2, #0]
     9c2:	3a01      	subs	r2, #1
     9c4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     9c6:	2316      	movs	r3, #22
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	881b      	ldrh	r3, [r3, #0]
     9cc:	2bff      	cmp	r3, #255	; 0xff
     9ce:	d901      	bls.n	9d4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9d0:	2340      	movs	r3, #64	; 0x40
     9d2:	e005      	b.n	9e0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	2216      	movs	r2, #22
     9d8:	18ba      	adds	r2, r7, r2
     9da:	8812      	ldrh	r2, [r2, #0]
     9dc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     9de:	2300      	movs	r3, #0
	}
}
     9e0:	1c18      	adds	r0, r3, #0
     9e2:	46bd      	mov	sp, r7
     9e4:	b006      	add	sp, #24
     9e6:	bd80      	pop	{r7, pc}

000009e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	b09d      	sub	sp, #116	; 0x74
     9ec:	af00      	add	r7, sp, #0
     9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
     9f0:	63b9      	str	r1, [r7, #56]	; 0x38
     9f2:	637a      	str	r2, [r7, #52]	; 0x34
     9f4:	2233      	movs	r2, #51	; 0x33
     9f6:	18ba      	adds	r2, r7, r2
     9f8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	2400      	movs	r4, #0
     9fe:	65bb      	str	r3, [r7, #88]	; 0x58
     a00:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
     a02:	2300      	movs	r3, #0
     a04:	2400      	movs	r4, #0
     a06:	653b      	str	r3, [r7, #80]	; 0x50
     a08:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
     a0a:	2300      	movs	r3, #0
     a0c:	2400      	movs	r4, #0
     a0e:	66bb      	str	r3, [r7, #104]	; 0x68
     a10:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     a12:	2300      	movs	r3, #0
     a14:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a16:	2358      	movs	r3, #88	; 0x58
     a18:	2230      	movs	r2, #48	; 0x30
     a1a:	4694      	mov	ip, r2
     a1c:	44bc      	add	ip, r7
     a1e:	4463      	add	r3, ip
     a20:	781a      	ldrb	r2, [r3, #0]
     a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a24:	435a      	muls	r2, r3
     a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a28:	429a      	cmp	r2, r3
     a2a:	d901      	bls.n	a30 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a2c:	2340      	movs	r3, #64	; 0x40
     a2e:	e0c9      	b.n	bc4 <_sercom_get_async_baud_val+0x1dc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a30:	2333      	movs	r3, #51	; 0x33
     a32:	18fb      	adds	r3, r7, r3
     a34:	781b      	ldrb	r3, [r3, #0]
     a36:	2b00      	cmp	r3, #0
     a38:	d13f      	bne.n	aba <_sercom_get_async_baud_val+0xd2>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a3a:	2358      	movs	r3, #88	; 0x58
     a3c:	2230      	movs	r2, #48	; 0x30
     a3e:	4694      	mov	ip, r2
     a40:	44bc      	add	ip, r7
     a42:	4463      	add	r3, ip
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	b2db      	uxtb	r3, r3
     a48:	613b      	str	r3, [r7, #16]
     a4a:	2300      	movs	r3, #0
     a4c:	617b      	str	r3, [r7, #20]
     a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a50:	60bb      	str	r3, [r7, #8]
     a52:	2300      	movs	r3, #0
     a54:	60fb      	str	r3, [r7, #12]
     a56:	4c5d      	ldr	r4, [pc, #372]	; (bcc <_sercom_get_async_baud_val+0x1e4>)
     a58:	6938      	ldr	r0, [r7, #16]
     a5a:	6979      	ldr	r1, [r7, #20]
     a5c:	68ba      	ldr	r2, [r7, #8]
     a5e:	68fb      	ldr	r3, [r7, #12]
     a60:	47a0      	blx	r4
     a62:	1c03      	adds	r3, r0, #0
     a64:	1c0c      	adds	r4, r1, #0
     a66:	001b      	movs	r3, r3
     a68:	64fb      	str	r3, [r7, #76]	; 0x4c
     a6a:	2300      	movs	r3, #0
     a6c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
     a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a70:	603b      	str	r3, [r7, #0]
     a72:	2300      	movs	r3, #0
     a74:	607b      	str	r3, [r7, #4]
     a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     a78:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
     a7a:	1c18      	adds	r0, r3, #0
     a7c:	1c21      	adds	r1, r4, #0
     a7e:	683a      	ldr	r2, [r7, #0]
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	4c53      	ldr	r4, [pc, #332]	; (bd0 <_sercom_get_async_baud_val+0x1e8>)
     a84:	47a0      	blx	r4
     a86:	1c03      	adds	r3, r0, #0
     a88:	1c0c      	adds	r4, r1, #0
     a8a:	65bb      	str	r3, [r7, #88]	; 0x58
     a8c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a8e:	2100      	movs	r1, #0
     a90:	2201      	movs	r2, #1
     a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     a94:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     a96:	1ac9      	subs	r1, r1, r3
     a98:	41a2      	sbcs	r2, r4
     a9a:	1c0b      	adds	r3, r1, #0
     a9c:	1c14      	adds	r4, r2, #0
     a9e:	653b      	str	r3, [r7, #80]	; 0x50
     aa0:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
     aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     aa4:	0c1b      	lsrs	r3, r3, #16
     aa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     aa8:	0416      	lsls	r6, r2, #16
     aaa:	431e      	orrs	r6, r3
     aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     aae:	041d      	lsls	r5, r3, #16
     ab0:	0033      	movs	r3, r6
     ab2:	66bb      	str	r3, [r7, #104]	; 0x68
     ab4:	2300      	movs	r3, #0
     ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
     ab8:	e07e      	b.n	bb8 <_sercom_get_async_baud_val+0x1d0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     aba:	2333      	movs	r3, #51	; 0x33
     abc:	18fb      	adds	r3, r7, r3
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	2b01      	cmp	r3, #1
     ac2:	d000      	beq.n	ac6 <_sercom_get_async_baud_val+0xde>
     ac4:	e078      	b.n	bb8 <_sercom_get_async_baud_val+0x1d0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     ac6:	2337      	movs	r3, #55	; 0x37
     ac8:	2230      	movs	r2, #48	; 0x30
     aca:	4694      	mov	ip, r2
     acc:	44bc      	add	ip, r7
     ace:	4463      	add	r3, ip
     ad0:	2200      	movs	r2, #0
     ad2:	701a      	strb	r2, [r3, #0]
     ad4:	e051      	b.n	b7a <_sercom_get_async_baud_val+0x192>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ad8:	62bb      	str	r3, [r7, #40]	; 0x28
     ada:	2300      	movs	r3, #0
     adc:	62fb      	str	r3, [r7, #44]	; 0x2c
     ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     ae2:	1c03      	adds	r3, r0, #0
     ae4:	0f5b      	lsrs	r3, r3, #29
     ae6:	1c0a      	adds	r2, r1, #0
     ae8:	00d2      	lsls	r2, r2, #3
     aea:	4313      	orrs	r3, r2
     aec:	64fb      	str	r3, [r7, #76]	; 0x4c
     aee:	1c03      	adds	r3, r0, #0
     af0:	00db      	lsls	r3, r3, #3
     af2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
     af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     af6:	623b      	str	r3, [r7, #32]
     af8:	2300      	movs	r3, #0
     afa:	627b      	str	r3, [r7, #36]	; 0x24
     afc:	2358      	movs	r3, #88	; 0x58
     afe:	2230      	movs	r2, #48	; 0x30
     b00:	4694      	mov	ip, r2
     b02:	44bc      	add	ip, r7
     b04:	4463      	add	r3, ip
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	b2db      	uxtb	r3, r3
     b0a:	61bb      	str	r3, [r7, #24]
     b0c:	2300      	movs	r3, #0
     b0e:	61fb      	str	r3, [r7, #28]
     b10:	4c2e      	ldr	r4, [pc, #184]	; (bcc <_sercom_get_async_baud_val+0x1e4>)
     b12:	6a38      	ldr	r0, [r7, #32]
     b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
     b16:	69ba      	ldr	r2, [r7, #24]
     b18:	69fb      	ldr	r3, [r7, #28]
     b1a:	47a0      	blx	r4
     b1c:	1c03      	adds	r3, r0, #0
     b1e:	1c0c      	adds	r4, r1, #0
     b20:	643b      	str	r3, [r7, #64]	; 0x40
     b22:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
     b24:	6cb9      	ldr	r1, [r7, #72]	; 0x48
     b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     b2a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     b2c:	1c08      	adds	r0, r1, #0
     b2e:	1c11      	adds	r1, r2, #0
     b30:	1c1a      	adds	r2, r3, #0
     b32:	1c23      	adds	r3, r4, #0
     b34:	4c26      	ldr	r4, [pc, #152]	; (bd0 <_sercom_get_async_baud_val+0x1e8>)
     b36:	47a0      	blx	r4
     b38:	1c03      	adds	r3, r0, #0
     b3a:	1c0c      	adds	r4, r1, #0
     b3c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
     b3e:	2337      	movs	r3, #55	; 0x37
     b40:	2230      	movs	r2, #48	; 0x30
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     b4c:	1ad3      	subs	r3, r2, r3
     b4e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
     b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     b52:	08db      	lsrs	r3, r3, #3
     b54:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
     b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     b58:	4a1e      	ldr	r2, [pc, #120]	; (bd4 <_sercom_get_async_baud_val+0x1ec>)
     b5a:	4293      	cmp	r3, r2
     b5c:	d800      	bhi.n	b60 <_sercom_get_async_baud_val+0x178>
				break;
     b5e:	e014      	b.n	b8a <_sercom_get_async_baud_val+0x1a2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     b60:	2337      	movs	r3, #55	; 0x37
     b62:	2230      	movs	r2, #48	; 0x30
     b64:	4694      	mov	ip, r2
     b66:	44bc      	add	ip, r7
     b68:	4463      	add	r3, ip
     b6a:	781a      	ldrb	r2, [r3, #0]
     b6c:	2337      	movs	r3, #55	; 0x37
     b6e:	2130      	movs	r1, #48	; 0x30
     b70:	468c      	mov	ip, r1
     b72:	44bc      	add	ip, r7
     b74:	4463      	add	r3, ip
     b76:	3201      	adds	r2, #1
     b78:	701a      	strb	r2, [r3, #0]
     b7a:	2337      	movs	r3, #55	; 0x37
     b7c:	2230      	movs	r2, #48	; 0x30
     b7e:	4694      	mov	ip, r2
     b80:	44bc      	add	ip, r7
     b82:	4463      	add	r3, ip
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	2b07      	cmp	r3, #7
     b88:	d9a5      	bls.n	ad6 <_sercom_get_async_baud_val+0xee>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     b8a:	2337      	movs	r3, #55	; 0x37
     b8c:	2230      	movs	r2, #48	; 0x30
     b8e:	4694      	mov	ip, r2
     b90:	44bc      	add	ip, r7
     b92:	4463      	add	r3, ip
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	2b08      	cmp	r3, #8
     b98:	d101      	bne.n	b9e <_sercom_get_async_baud_val+0x1b6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b9a:	2340      	movs	r3, #64	; 0x40
     b9c:	e012      	b.n	bc4 <_sercom_get_async_baud_val+0x1dc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
     b9e:	2337      	movs	r3, #55	; 0x37
     ba0:	2230      	movs	r2, #48	; 0x30
     ba2:	4694      	mov	ip, r2
     ba4:	44bc      	add	ip, r7
     ba6:	4463      	add	r3, ip
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	035b      	lsls	r3, r3, #13
     bac:	1c1a      	adds	r2, r3, #0
     bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     bb0:	4313      	orrs	r3, r2
     bb2:	66bb      	str	r3, [r7, #104]	; 0x68
     bb4:	2300      	movs	r3, #0
     bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
     bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     bba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     bbc:	b29a      	uxth	r2, r3
     bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     bc2:	2300      	movs	r3, #0
}
     bc4:	1c18      	adds	r0, r3, #0
     bc6:	46bd      	mov	sp, r7
     bc8:	b01d      	add	sp, #116	; 0x74
     bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bcc:	00005281 	.word	0x00005281
     bd0:	0000088d 	.word	0x0000088d
     bd4:	00001fff 	.word	0x00001fff

00000bd8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bd8:	b580      	push	{r7, lr}
     bda:	b084      	sub	sp, #16
     bdc:	af00      	add	r7, sp, #0
     bde:	1c02      	adds	r2, r0, #0
     be0:	1dfb      	adds	r3, r7, #7
     be2:	701a      	strb	r2, [r3, #0]
     be4:	1dbb      	adds	r3, r7, #6
     be6:	1c0a      	adds	r2, r1, #0
     be8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     bea:	4b1a      	ldr	r3, [pc, #104]	; (c54 <sercom_set_gclk_generator+0x7c>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2201      	movs	r2, #1
     bf0:	4053      	eors	r3, r2
     bf2:	b2db      	uxtb	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	d103      	bne.n	c00 <sercom_set_gclk_generator+0x28>
     bf8:	1dbb      	adds	r3, r7, #6
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d01b      	beq.n	c38 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     c00:	230c      	movs	r3, #12
     c02:	18fb      	adds	r3, r7, r3
     c04:	1c18      	adds	r0, r3, #0
     c06:	4b14      	ldr	r3, [pc, #80]	; (c58 <sercom_set_gclk_generator+0x80>)
     c08:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     c0a:	230c      	movs	r3, #12
     c0c:	18fb      	adds	r3, r7, r3
     c0e:	1dfa      	adds	r2, r7, #7
     c10:	7812      	ldrb	r2, [r2, #0]
     c12:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c14:	230c      	movs	r3, #12
     c16:	18fb      	adds	r3, r7, r3
     c18:	2013      	movs	r0, #19
     c1a:	1c19      	adds	r1, r3, #0
     c1c:	4b0f      	ldr	r3, [pc, #60]	; (c5c <sercom_set_gclk_generator+0x84>)
     c1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c20:	2013      	movs	r0, #19
     c22:	4b0f      	ldr	r3, [pc, #60]	; (c60 <sercom_set_gclk_generator+0x88>)
     c24:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     c26:	4b0b      	ldr	r3, [pc, #44]	; (c54 <sercom_set_gclk_generator+0x7c>)
     c28:	1dfa      	adds	r2, r7, #7
     c2a:	7812      	ldrb	r2, [r2, #0]
     c2c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     c2e:	4b09      	ldr	r3, [pc, #36]	; (c54 <sercom_set_gclk_generator+0x7c>)
     c30:	2201      	movs	r2, #1
     c32:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c34:	2300      	movs	r3, #0
     c36:	e008      	b.n	c4a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     c38:	4b06      	ldr	r3, [pc, #24]	; (c54 <sercom_set_gclk_generator+0x7c>)
     c3a:	785b      	ldrb	r3, [r3, #1]
     c3c:	1dfa      	adds	r2, r7, #7
     c3e:	7812      	ldrb	r2, [r2, #0]
     c40:	429a      	cmp	r2, r3
     c42:	d101      	bne.n	c48 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     c44:	2300      	movs	r3, #0
     c46:	e000      	b.n	c4a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c48:	231d      	movs	r3, #29
}
     c4a:	1c18      	adds	r0, r3, #0
     c4c:	46bd      	mov	sp, r7
     c4e:	b004      	add	sp, #16
     c50:	bd80      	pop	{r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	20000094 	.word	0x20000094
     c58:	00000879 	.word	0x00000879
     c5c:	00004529 	.word	0x00004529
     c60:	0000456d 	.word	0x0000456d

00000c64 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     c64:	b580      	push	{r7, lr}
     c66:	b082      	sub	sp, #8
     c68:	af00      	add	r7, sp, #0
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	1c0a      	adds	r2, r1, #0
     c6e:	1cfb      	adds	r3, r7, #3
     c70:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	4a4d      	ldr	r2, [pc, #308]	; (dac <_sercom_get_default_pad+0x148>)
     c76:	4293      	cmp	r3, r2
     c78:	d03f      	beq.n	cfa <_sercom_get_default_pad+0x96>
     c7a:	4a4c      	ldr	r2, [pc, #304]	; (dac <_sercom_get_default_pad+0x148>)
     c7c:	4293      	cmp	r3, r2
     c7e:	d806      	bhi.n	c8e <_sercom_get_default_pad+0x2a>
     c80:	4a4b      	ldr	r2, [pc, #300]	; (db0 <_sercom_get_default_pad+0x14c>)
     c82:	4293      	cmp	r3, r2
     c84:	d00f      	beq.n	ca6 <_sercom_get_default_pad+0x42>
     c86:	4a4b      	ldr	r2, [pc, #300]	; (db4 <_sercom_get_default_pad+0x150>)
     c88:	4293      	cmp	r3, r2
     c8a:	d021      	beq.n	cd0 <_sercom_get_default_pad+0x6c>
     c8c:	e089      	b.n	da2 <_sercom_get_default_pad+0x13e>
     c8e:	4a4a      	ldr	r2, [pc, #296]	; (db8 <_sercom_get_default_pad+0x154>)
     c90:	4293      	cmp	r3, r2
     c92:	d100      	bne.n	c96 <_sercom_get_default_pad+0x32>
     c94:	e05b      	b.n	d4e <_sercom_get_default_pad+0xea>
     c96:	4a49      	ldr	r2, [pc, #292]	; (dbc <_sercom_get_default_pad+0x158>)
     c98:	4293      	cmp	r3, r2
     c9a:	d100      	bne.n	c9e <_sercom_get_default_pad+0x3a>
     c9c:	e06c      	b.n	d78 <_sercom_get_default_pad+0x114>
     c9e:	4a48      	ldr	r2, [pc, #288]	; (dc0 <_sercom_get_default_pad+0x15c>)
     ca0:	4293      	cmp	r3, r2
     ca2:	d03f      	beq.n	d24 <_sercom_get_default_pad+0xc0>
     ca4:	e07d      	b.n	da2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ca6:	1cfb      	adds	r3, r7, #3
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	2b01      	cmp	r3, #1
     cac:	d00a      	beq.n	cc4 <_sercom_get_default_pad+0x60>
     cae:	dc02      	bgt.n	cb6 <_sercom_get_default_pad+0x52>
     cb0:	2b00      	cmp	r3, #0
     cb2:	d005      	beq.n	cc0 <_sercom_get_default_pad+0x5c>
     cb4:	e075      	b.n	da2 <_sercom_get_default_pad+0x13e>
     cb6:	2b02      	cmp	r3, #2
     cb8:	d006      	beq.n	cc8 <_sercom_get_default_pad+0x64>
     cba:	2b03      	cmp	r3, #3
     cbc:	d006      	beq.n	ccc <_sercom_get_default_pad+0x68>
     cbe:	e070      	b.n	da2 <_sercom_get_default_pad+0x13e>
     cc0:	4b40      	ldr	r3, [pc, #256]	; (dc4 <_sercom_get_default_pad+0x160>)
     cc2:	e06f      	b.n	da4 <_sercom_get_default_pad+0x140>
     cc4:	4b40      	ldr	r3, [pc, #256]	; (dc8 <_sercom_get_default_pad+0x164>)
     cc6:	e06d      	b.n	da4 <_sercom_get_default_pad+0x140>
     cc8:	4b40      	ldr	r3, [pc, #256]	; (dcc <_sercom_get_default_pad+0x168>)
     cca:	e06b      	b.n	da4 <_sercom_get_default_pad+0x140>
     ccc:	4b40      	ldr	r3, [pc, #256]	; (dd0 <_sercom_get_default_pad+0x16c>)
     cce:	e069      	b.n	da4 <_sercom_get_default_pad+0x140>
     cd0:	1cfb      	adds	r3, r7, #3
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b01      	cmp	r3, #1
     cd6:	d00a      	beq.n	cee <_sercom_get_default_pad+0x8a>
     cd8:	dc02      	bgt.n	ce0 <_sercom_get_default_pad+0x7c>
     cda:	2b00      	cmp	r3, #0
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0x86>
     cde:	e060      	b.n	da2 <_sercom_get_default_pad+0x13e>
     ce0:	2b02      	cmp	r3, #2
     ce2:	d006      	beq.n	cf2 <_sercom_get_default_pad+0x8e>
     ce4:	2b03      	cmp	r3, #3
     ce6:	d006      	beq.n	cf6 <_sercom_get_default_pad+0x92>
     ce8:	e05b      	b.n	da2 <_sercom_get_default_pad+0x13e>
     cea:	2303      	movs	r3, #3
     cec:	e05a      	b.n	da4 <_sercom_get_default_pad+0x140>
     cee:	4b39      	ldr	r3, [pc, #228]	; (dd4 <_sercom_get_default_pad+0x170>)
     cf0:	e058      	b.n	da4 <_sercom_get_default_pad+0x140>
     cf2:	4b39      	ldr	r3, [pc, #228]	; (dd8 <_sercom_get_default_pad+0x174>)
     cf4:	e056      	b.n	da4 <_sercom_get_default_pad+0x140>
     cf6:	4b39      	ldr	r3, [pc, #228]	; (ddc <_sercom_get_default_pad+0x178>)
     cf8:	e054      	b.n	da4 <_sercom_get_default_pad+0x140>
     cfa:	1cfb      	adds	r3, r7, #3
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	2b01      	cmp	r3, #1
     d00:	d00a      	beq.n	d18 <_sercom_get_default_pad+0xb4>
     d02:	dc02      	bgt.n	d0a <_sercom_get_default_pad+0xa6>
     d04:	2b00      	cmp	r3, #0
     d06:	d005      	beq.n	d14 <_sercom_get_default_pad+0xb0>
     d08:	e04b      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d0a:	2b02      	cmp	r3, #2
     d0c:	d006      	beq.n	d1c <_sercom_get_default_pad+0xb8>
     d0e:	2b03      	cmp	r3, #3
     d10:	d006      	beq.n	d20 <_sercom_get_default_pad+0xbc>
     d12:	e046      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d14:	4b32      	ldr	r3, [pc, #200]	; (de0 <_sercom_get_default_pad+0x17c>)
     d16:	e045      	b.n	da4 <_sercom_get_default_pad+0x140>
     d18:	4b32      	ldr	r3, [pc, #200]	; (de4 <_sercom_get_default_pad+0x180>)
     d1a:	e043      	b.n	da4 <_sercom_get_default_pad+0x140>
     d1c:	4b32      	ldr	r3, [pc, #200]	; (de8 <_sercom_get_default_pad+0x184>)
     d1e:	e041      	b.n	da4 <_sercom_get_default_pad+0x140>
     d20:	4b32      	ldr	r3, [pc, #200]	; (dec <_sercom_get_default_pad+0x188>)
     d22:	e03f      	b.n	da4 <_sercom_get_default_pad+0x140>
     d24:	1cfb      	adds	r3, r7, #3
     d26:	781b      	ldrb	r3, [r3, #0]
     d28:	2b01      	cmp	r3, #1
     d2a:	d00a      	beq.n	d42 <_sercom_get_default_pad+0xde>
     d2c:	dc02      	bgt.n	d34 <_sercom_get_default_pad+0xd0>
     d2e:	2b00      	cmp	r3, #0
     d30:	d005      	beq.n	d3e <_sercom_get_default_pad+0xda>
     d32:	e036      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d34:	2b02      	cmp	r3, #2
     d36:	d006      	beq.n	d46 <_sercom_get_default_pad+0xe2>
     d38:	2b03      	cmp	r3, #3
     d3a:	d006      	beq.n	d4a <_sercom_get_default_pad+0xe6>
     d3c:	e031      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d3e:	4b2c      	ldr	r3, [pc, #176]	; (df0 <_sercom_get_default_pad+0x18c>)
     d40:	e030      	b.n	da4 <_sercom_get_default_pad+0x140>
     d42:	4b2c      	ldr	r3, [pc, #176]	; (df4 <_sercom_get_default_pad+0x190>)
     d44:	e02e      	b.n	da4 <_sercom_get_default_pad+0x140>
     d46:	4b2c      	ldr	r3, [pc, #176]	; (df8 <_sercom_get_default_pad+0x194>)
     d48:	e02c      	b.n	da4 <_sercom_get_default_pad+0x140>
     d4a:	4b2c      	ldr	r3, [pc, #176]	; (dfc <_sercom_get_default_pad+0x198>)
     d4c:	e02a      	b.n	da4 <_sercom_get_default_pad+0x140>
     d4e:	1cfb      	adds	r3, r7, #3
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	2b01      	cmp	r3, #1
     d54:	d00a      	beq.n	d6c <_sercom_get_default_pad+0x108>
     d56:	dc02      	bgt.n	d5e <_sercom_get_default_pad+0xfa>
     d58:	2b00      	cmp	r3, #0
     d5a:	d005      	beq.n	d68 <_sercom_get_default_pad+0x104>
     d5c:	e021      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d5e:	2b02      	cmp	r3, #2
     d60:	d006      	beq.n	d70 <_sercom_get_default_pad+0x10c>
     d62:	2b03      	cmp	r3, #3
     d64:	d006      	beq.n	d74 <_sercom_get_default_pad+0x110>
     d66:	e01c      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d68:	4b25      	ldr	r3, [pc, #148]	; (e00 <_sercom_get_default_pad+0x19c>)
     d6a:	e01b      	b.n	da4 <_sercom_get_default_pad+0x140>
     d6c:	4b25      	ldr	r3, [pc, #148]	; (e04 <_sercom_get_default_pad+0x1a0>)
     d6e:	e019      	b.n	da4 <_sercom_get_default_pad+0x140>
     d70:	4b25      	ldr	r3, [pc, #148]	; (e08 <_sercom_get_default_pad+0x1a4>)
     d72:	e017      	b.n	da4 <_sercom_get_default_pad+0x140>
     d74:	4b25      	ldr	r3, [pc, #148]	; (e0c <_sercom_get_default_pad+0x1a8>)
     d76:	e015      	b.n	da4 <_sercom_get_default_pad+0x140>
     d78:	1cfb      	adds	r3, r7, #3
     d7a:	781b      	ldrb	r3, [r3, #0]
     d7c:	2b01      	cmp	r3, #1
     d7e:	d00a      	beq.n	d96 <_sercom_get_default_pad+0x132>
     d80:	dc02      	bgt.n	d88 <_sercom_get_default_pad+0x124>
     d82:	2b00      	cmp	r3, #0
     d84:	d005      	beq.n	d92 <_sercom_get_default_pad+0x12e>
     d86:	e00c      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d88:	2b02      	cmp	r3, #2
     d8a:	d006      	beq.n	d9a <_sercom_get_default_pad+0x136>
     d8c:	2b03      	cmp	r3, #3
     d8e:	d006      	beq.n	d9e <_sercom_get_default_pad+0x13a>
     d90:	e007      	b.n	da2 <_sercom_get_default_pad+0x13e>
     d92:	4b1f      	ldr	r3, [pc, #124]	; (e10 <_sercom_get_default_pad+0x1ac>)
     d94:	e006      	b.n	da4 <_sercom_get_default_pad+0x140>
     d96:	4b1f      	ldr	r3, [pc, #124]	; (e14 <_sercom_get_default_pad+0x1b0>)
     d98:	e004      	b.n	da4 <_sercom_get_default_pad+0x140>
     d9a:	4b1f      	ldr	r3, [pc, #124]	; (e18 <_sercom_get_default_pad+0x1b4>)
     d9c:	e002      	b.n	da4 <_sercom_get_default_pad+0x140>
     d9e:	4b1f      	ldr	r3, [pc, #124]	; (e1c <_sercom_get_default_pad+0x1b8>)
     da0:	e000      	b.n	da4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     da2:	2300      	movs	r3, #0
}
     da4:	1c18      	adds	r0, r3, #0
     da6:	46bd      	mov	sp, r7
     da8:	b002      	add	sp, #8
     daa:	bd80      	pop	{r7, pc}
     dac:	42001000 	.word	0x42001000
     db0:	42000800 	.word	0x42000800
     db4:	42000c00 	.word	0x42000c00
     db8:	42001800 	.word	0x42001800
     dbc:	42001c00 	.word	0x42001c00
     dc0:	42001400 	.word	0x42001400
     dc4:	00040003 	.word	0x00040003
     dc8:	00050003 	.word	0x00050003
     dcc:	00060003 	.word	0x00060003
     dd0:	00070003 	.word	0x00070003
     dd4:	00010003 	.word	0x00010003
     dd8:	001e0003 	.word	0x001e0003
     ddc:	001f0003 	.word	0x001f0003
     de0:	00080003 	.word	0x00080003
     de4:	00090003 	.word	0x00090003
     de8:	000a0003 	.word	0x000a0003
     dec:	000b0003 	.word	0x000b0003
     df0:	00100003 	.word	0x00100003
     df4:	00110003 	.word	0x00110003
     df8:	00120003 	.word	0x00120003
     dfc:	00130003 	.word	0x00130003
     e00:	000c0003 	.word	0x000c0003
     e04:	000d0003 	.word	0x000d0003
     e08:	000e0003 	.word	0x000e0003
     e0c:	000f0003 	.word	0x000f0003
     e10:	00160003 	.word	0x00160003
     e14:	00170003 	.word	0x00170003
     e18:	00180003 	.word	0x00180003
     e1c:	00190003 	.word	0x00190003

00000e20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e20:	b590      	push	{r4, r7, lr}
     e22:	b08b      	sub	sp, #44	; 0x2c
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e28:	230c      	movs	r3, #12
     e2a:	18fb      	adds	r3, r7, r3
     e2c:	4a0e      	ldr	r2, [pc, #56]	; (e68 <_sercom_get_sercom_inst_index+0x48>)
     e2e:	ca13      	ldmia	r2!, {r0, r1, r4}
     e30:	c313      	stmia	r3!, {r0, r1, r4}
     e32:	ca13      	ldmia	r2!, {r0, r1, r4}
     e34:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e36:	2300      	movs	r3, #0
     e38:	627b      	str	r3, [r7, #36]	; 0x24
     e3a:	e00d      	b.n	e58 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	220c      	movs	r2, #12
     e40:	18ba      	adds	r2, r7, r2
     e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
     e44:	0089      	lsls	r1, r1, #2
     e46:	588a      	ldr	r2, [r1, r2]
     e48:	4293      	cmp	r3, r2
     e4a:	d102      	bne.n	e52 <_sercom_get_sercom_inst_index+0x32>
			return i;
     e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e4e:	b2db      	uxtb	r3, r3
     e50:	e006      	b.n	e60 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e54:	3301      	adds	r3, #1
     e56:	627b      	str	r3, [r7, #36]	; 0x24
     e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e5a:	2b05      	cmp	r3, #5
     e5c:	d9ee      	bls.n	e3c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     e5e:	2300      	movs	r3, #0
}
     e60:	1c18      	adds	r0, r3, #0
     e62:	46bd      	mov	sp, r7
     e64:	b00b      	add	sp, #44	; 0x2c
     e66:	bd90      	pop	{r4, r7, pc}
     e68:	00006350 	.word	0x00006350

00000e6c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     e6c:	b580      	push	{r7, lr}
     e6e:	b082      	sub	sp, #8
     e70:	af00      	add	r7, sp, #0
     e72:	1c02      	adds	r2, r0, #0
     e74:	1dfb      	adds	r3, r7, #7
     e76:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     e78:	46bd      	mov	sp, r7
     e7a:	b002      	add	sp, #8
     e7c:	bd80      	pop	{r7, pc}
     e7e:	46c0      	nop			; (mov r8, r8)

00000e80 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e80:	b580      	push	{r7, lr}
     e82:	b084      	sub	sp, #16
     e84:	af00      	add	r7, sp, #0
     e86:	1c02      	adds	r2, r0, #0
     e88:	6039      	str	r1, [r7, #0]
     e8a:	1dfb      	adds	r3, r7, #7
     e8c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     e8e:	4b13      	ldr	r3, [pc, #76]	; (edc <_sercom_set_handler+0x5c>)
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	2201      	movs	r2, #1
     e94:	4053      	eors	r3, r2
     e96:	b2db      	uxtb	r3, r3
     e98:	2b00      	cmp	r3, #0
     e9a:	d015      	beq.n	ec8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e9c:	2300      	movs	r3, #0
     e9e:	60fb      	str	r3, [r7, #12]
     ea0:	e00c      	b.n	ebc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ea2:	4b0f      	ldr	r3, [pc, #60]	; (ee0 <_sercom_set_handler+0x60>)
     ea4:	68fa      	ldr	r2, [r7, #12]
     ea6:	0092      	lsls	r2, r2, #2
     ea8:	490e      	ldr	r1, [pc, #56]	; (ee4 <_sercom_set_handler+0x64>)
     eaa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     eac:	4b0e      	ldr	r3, [pc, #56]	; (ee8 <_sercom_set_handler+0x68>)
     eae:	68fa      	ldr	r2, [r7, #12]
     eb0:	0092      	lsls	r2, r2, #2
     eb2:	2100      	movs	r1, #0
     eb4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb6:	68fb      	ldr	r3, [r7, #12]
     eb8:	3301      	adds	r3, #1
     eba:	60fb      	str	r3, [r7, #12]
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	2b05      	cmp	r3, #5
     ec0:	d9ef      	bls.n	ea2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     ec2:	4b06      	ldr	r3, [pc, #24]	; (edc <_sercom_set_handler+0x5c>)
     ec4:	2201      	movs	r2, #1
     ec6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     ec8:	1dfb      	adds	r3, r7, #7
     eca:	781a      	ldrb	r2, [r3, #0]
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <_sercom_set_handler+0x60>)
     ece:	0092      	lsls	r2, r2, #2
     ed0:	6839      	ldr	r1, [r7, #0]
     ed2:	50d1      	str	r1, [r2, r3]
}
     ed4:	46bd      	mov	sp, r7
     ed6:	b004      	add	sp, #16
     ed8:	bd80      	pop	{r7, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	20000096 	.word	0x20000096
     ee0:	20000098 	.word	0x20000098
     ee4:	00000e6d 	.word	0x00000e6d
     ee8:	20003d18 	.word	0x20003d18

00000eec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     eec:	b590      	push	{r4, r7, lr}
     eee:	b085      	sub	sp, #20
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ef4:	2308      	movs	r3, #8
     ef6:	18fa      	adds	r2, r7, r3
     ef8:	4b0e      	ldr	r3, [pc, #56]	; (f34 <_sercom_get_interrupt_vector+0x48>)
     efa:	1c11      	adds	r1, r2, #0
     efc:	1c1a      	adds	r2, r3, #0
     efe:	2306      	movs	r3, #6
     f00:	1c08      	adds	r0, r1, #0
     f02:	1c11      	adds	r1, r2, #0
     f04:	1c1a      	adds	r2, r3, #0
     f06:	4b0c      	ldr	r3, [pc, #48]	; (f38 <_sercom_get_interrupt_vector+0x4c>)
     f08:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f0a:	230f      	movs	r3, #15
     f0c:	18fc      	adds	r4, r7, r3
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	1c18      	adds	r0, r3, #0
     f12:	4b0a      	ldr	r3, [pc, #40]	; (f3c <_sercom_get_interrupt_vector+0x50>)
     f14:	4798      	blx	r3
     f16:	1c03      	adds	r3, r0, #0
     f18:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f1a:	230f      	movs	r3, #15
     f1c:	18fb      	adds	r3, r7, r3
     f1e:	781b      	ldrb	r3, [r3, #0]
     f20:	2208      	movs	r2, #8
     f22:	18ba      	adds	r2, r7, r2
     f24:	5cd3      	ldrb	r3, [r2, r3]
     f26:	b2db      	uxtb	r3, r3
     f28:	b25b      	sxtb	r3, r3
}
     f2a:	1c18      	adds	r0, r3, #0
     f2c:	46bd      	mov	sp, r7
     f2e:	b005      	add	sp, #20
     f30:	bd90      	pop	{r4, r7, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00006368 	.word	0x00006368
     f38:	00005321 	.word	0x00005321
     f3c:	00000e21 	.word	0x00000e21

00000f40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f40:	b580      	push	{r7, lr}
     f42:	af00      	add	r7, sp, #0
     f44:	4b02      	ldr	r3, [pc, #8]	; (f50 <SERCOM0_Handler+0x10>)
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	2000      	movs	r0, #0
     f4a:	4798      	blx	r3
     f4c:	46bd      	mov	sp, r7
     f4e:	bd80      	pop	{r7, pc}
     f50:	20000098 	.word	0x20000098

00000f54 <SERCOM1_Handler>:
     f54:	b580      	push	{r7, lr}
     f56:	af00      	add	r7, sp, #0
     f58:	4b02      	ldr	r3, [pc, #8]	; (f64 <SERCOM1_Handler+0x10>)
     f5a:	685b      	ldr	r3, [r3, #4]
     f5c:	2001      	movs	r0, #1
     f5e:	4798      	blx	r3
     f60:	46bd      	mov	sp, r7
     f62:	bd80      	pop	{r7, pc}
     f64:	20000098 	.word	0x20000098

00000f68 <SERCOM2_Handler>:
     f68:	b580      	push	{r7, lr}
     f6a:	af00      	add	r7, sp, #0
     f6c:	4b02      	ldr	r3, [pc, #8]	; (f78 <SERCOM2_Handler+0x10>)
     f6e:	689b      	ldr	r3, [r3, #8]
     f70:	2002      	movs	r0, #2
     f72:	4798      	blx	r3
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}
     f78:	20000098 	.word	0x20000098

00000f7c <SERCOM3_Handler>:
     f7c:	b580      	push	{r7, lr}
     f7e:	af00      	add	r7, sp, #0
     f80:	4b02      	ldr	r3, [pc, #8]	; (f8c <SERCOM3_Handler+0x10>)
     f82:	68db      	ldr	r3, [r3, #12]
     f84:	2003      	movs	r0, #3
     f86:	4798      	blx	r3
     f88:	46bd      	mov	sp, r7
     f8a:	bd80      	pop	{r7, pc}
     f8c:	20000098 	.word	0x20000098

00000f90 <SERCOM4_Handler>:
     f90:	b580      	push	{r7, lr}
     f92:	af00      	add	r7, sp, #0
     f94:	4b02      	ldr	r3, [pc, #8]	; (fa0 <SERCOM4_Handler+0x10>)
     f96:	691b      	ldr	r3, [r3, #16]
     f98:	2004      	movs	r0, #4
     f9a:	4798      	blx	r3
     f9c:	46bd      	mov	sp, r7
     f9e:	bd80      	pop	{r7, pc}
     fa0:	20000098 	.word	0x20000098

00000fa4 <SERCOM5_Handler>:
     fa4:	b580      	push	{r7, lr}
     fa6:	af00      	add	r7, sp, #0
     fa8:	4b02      	ldr	r3, [pc, #8]	; (fb4 <SERCOM5_Handler+0x10>)
     faa:	695b      	ldr	r3, [r3, #20]
     fac:	2005      	movs	r0, #5
     fae:	4798      	blx	r3
     fb0:	46bd      	mov	sp, r7
     fb2:	bd80      	pop	{r7, pc}
     fb4:	20000098 	.word	0x20000098

00000fb8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b082      	sub	sp, #8
     fbc:	af00      	add	r7, sp, #0
     fbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	2200      	movs	r2, #0
     fc4:	701a      	strb	r2, [r3, #0]
}
     fc6:	46bd      	mov	sp, r7
     fc8:	b002      	add	sp, #8
     fca:	bd80      	pop	{r7, pc}

00000fcc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b082      	sub	sp, #8
     fd0:	af00      	add	r7, sp, #0
     fd2:	1c02      	adds	r2, r0, #0
     fd4:	6039      	str	r1, [r7, #0]
     fd6:	1dfb      	adds	r3, r7, #7
     fd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     fda:	1dfb      	adds	r3, r7, #7
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2b01      	cmp	r3, #1
     fe0:	d00a      	beq.n	ff8 <system_apb_clock_set_mask+0x2c>
     fe2:	2b02      	cmp	r3, #2
     fe4:	d00f      	beq.n	1006 <system_apb_clock_set_mask+0x3a>
     fe6:	2b00      	cmp	r3, #0
     fe8:	d114      	bne.n	1014 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     fea:	4b0e      	ldr	r3, [pc, #56]	; (1024 <system_apb_clock_set_mask+0x58>)
     fec:	4a0d      	ldr	r2, [pc, #52]	; (1024 <system_apb_clock_set_mask+0x58>)
     fee:	6991      	ldr	r1, [r2, #24]
     ff0:	683a      	ldr	r2, [r7, #0]
     ff2:	430a      	orrs	r2, r1
     ff4:	619a      	str	r2, [r3, #24]
			break;
     ff6:	e00f      	b.n	1018 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ff8:	4b0a      	ldr	r3, [pc, #40]	; (1024 <system_apb_clock_set_mask+0x58>)
     ffa:	4a0a      	ldr	r2, [pc, #40]	; (1024 <system_apb_clock_set_mask+0x58>)
     ffc:	69d1      	ldr	r1, [r2, #28]
     ffe:	683a      	ldr	r2, [r7, #0]
    1000:	430a      	orrs	r2, r1
    1002:	61da      	str	r2, [r3, #28]
			break;
    1004:	e008      	b.n	1018 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1006:	4b07      	ldr	r3, [pc, #28]	; (1024 <system_apb_clock_set_mask+0x58>)
    1008:	4a06      	ldr	r2, [pc, #24]	; (1024 <system_apb_clock_set_mask+0x58>)
    100a:	6a11      	ldr	r1, [r2, #32]
    100c:	683a      	ldr	r2, [r7, #0]
    100e:	430a      	orrs	r2, r1
    1010:	621a      	str	r2, [r3, #32]
			break;
    1012:	e001      	b.n	1018 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1014:	2317      	movs	r3, #23
    1016:	e000      	b.n	101a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1018:	2300      	movs	r3, #0
}
    101a:	1c18      	adds	r0, r3, #0
    101c:	46bd      	mov	sp, r7
    101e:	b002      	add	sp, #8
    1020:	bd80      	pop	{r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	40000400 	.word	0x40000400

00001028 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1028:	b580      	push	{r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	2200      	movs	r2, #0
    103a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	2201      	movs	r2, #1
    1040:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	2200      	movs	r2, #0
    1046:	70da      	strb	r2, [r3, #3]
}
    1048:	46bd      	mov	sp, r7
    104a:	b002      	add	sp, #8
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)

00001050 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1050:	b580      	push	{r7, lr}
    1052:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <system_is_debugger_present+0x1c>)
    1056:	789b      	ldrb	r3, [r3, #2]
    1058:	b2db      	uxtb	r3, r3
    105a:	1c1a      	adds	r2, r3, #0
    105c:	2302      	movs	r3, #2
    105e:	4013      	ands	r3, r2
    1060:	1e5a      	subs	r2, r3, #1
    1062:	4193      	sbcs	r3, r2
    1064:	b2db      	uxtb	r3, r3
}
    1066:	1c18      	adds	r0, r3, #0
    1068:	46bd      	mov	sp, r7
    106a:	bd80      	pop	{r7, pc}
    106c:	41002000 	.word	0x41002000

00001070 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1070:	b580      	push	{r7, lr}
    1072:	b084      	sub	sp, #16
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1078:	687b      	ldr	r3, [r7, #4]
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	69db      	ldr	r3, [r3, #28]
    1082:	1e5a      	subs	r2, r3, #1
    1084:	4193      	sbcs	r3, r2
    1086:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1088:	1c18      	adds	r0, r3, #0
    108a:	46bd      	mov	sp, r7
    108c:	b004      	add	sp, #16
    108e:	bd80      	pop	{r7, pc}

00001090 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1090:	b580      	push	{r7, lr}
    1092:	b082      	sub	sp, #8
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1098:	46c0      	nop			; (mov r8, r8)
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	1c18      	adds	r0, r3, #0
    109e:	4b03      	ldr	r3, [pc, #12]	; (10ac <_usart_wait_for_sync+0x1c>)
    10a0:	4798      	blx	r3
    10a2:	1e03      	subs	r3, r0, #0
    10a4:	d1f9      	bne.n	109a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    10a6:	46bd      	mov	sp, r7
    10a8:	b002      	add	sp, #8
    10aa:	bd80      	pop	{r7, pc}
    10ac:	00001071 	.word	0x00001071

000010b0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    10b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b2:	b08d      	sub	sp, #52	; 0x34
    10b4:	af02      	add	r7, sp, #8
    10b6:	6078      	str	r0, [r7, #4]
    10b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	1c18      	adds	r0, r3, #0
    10c6:	4bae      	ldr	r3, [pc, #696]	; (1380 <_usart_set_config+0x2d0>)
    10c8:	4798      	blx	r3
    10ca:	1c03      	adds	r3, r0, #0
    10cc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10ce:	697b      	ldr	r3, [r7, #20]
    10d0:	3314      	adds	r3, #20
    10d2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    10d4:	2300      	movs	r3, #0
    10d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    10d8:	2300      	movs	r3, #0
    10da:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    10dc:	230e      	movs	r3, #14
    10de:	18fb      	adds	r3, r7, r3
    10e0:	2200      	movs	r2, #0
    10e2:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10e4:	231f      	movs	r3, #31
    10e6:	18fb      	adds	r3, r7, r3
    10e8:	2200      	movs	r2, #0
    10ea:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10ec:	231e      	movs	r3, #30
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	2210      	movs	r2, #16
    10f2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    10f4:	683b      	ldr	r3, [r7, #0]
    10f6:	8a1b      	ldrh	r3, [r3, #16]
    10f8:	2280      	movs	r2, #128	; 0x80
    10fa:	01d2      	lsls	r2, r2, #7
    10fc:	4293      	cmp	r3, r2
    10fe:	d01c      	beq.n	113a <_usart_set_config+0x8a>
    1100:	2280      	movs	r2, #128	; 0x80
    1102:	01d2      	lsls	r2, r2, #7
    1104:	4293      	cmp	r3, r2
    1106:	dc06      	bgt.n	1116 <_usart_set_config+0x66>
    1108:	2b00      	cmp	r3, #0
    110a:	d00d      	beq.n	1128 <_usart_set_config+0x78>
    110c:	2280      	movs	r2, #128	; 0x80
    110e:	0192      	lsls	r2, r2, #6
    1110:	4293      	cmp	r3, r2
    1112:	d024      	beq.n	115e <_usart_set_config+0xae>
    1114:	e035      	b.n	1182 <_usart_set_config+0xd2>
    1116:	22c0      	movs	r2, #192	; 0xc0
    1118:	01d2      	lsls	r2, r2, #7
    111a:	4293      	cmp	r3, r2
    111c:	d028      	beq.n	1170 <_usart_set_config+0xc0>
    111e:	2280      	movs	r2, #128	; 0x80
    1120:	0212      	lsls	r2, r2, #8
    1122:	4293      	cmp	r3, r2
    1124:	d012      	beq.n	114c <_usart_set_config+0x9c>
    1126:	e02c      	b.n	1182 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1128:	231f      	movs	r3, #31
    112a:	18fb      	adds	r3, r7, r3
    112c:	2200      	movs	r2, #0
    112e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1130:	231e      	movs	r3, #30
    1132:	18fb      	adds	r3, r7, r3
    1134:	2210      	movs	r2, #16
    1136:	701a      	strb	r2, [r3, #0]
			break;
    1138:	e023      	b.n	1182 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    113a:	231f      	movs	r3, #31
    113c:	18fb      	adds	r3, r7, r3
    113e:	2200      	movs	r2, #0
    1140:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1142:	231e      	movs	r3, #30
    1144:	18fb      	adds	r3, r7, r3
    1146:	2208      	movs	r2, #8
    1148:	701a      	strb	r2, [r3, #0]
			break;
    114a:	e01a      	b.n	1182 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    114c:	231f      	movs	r3, #31
    114e:	18fb      	adds	r3, r7, r3
    1150:	2200      	movs	r2, #0
    1152:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1154:	231e      	movs	r3, #30
    1156:	18fb      	adds	r3, r7, r3
    1158:	2203      	movs	r2, #3
    115a:	701a      	strb	r2, [r3, #0]
			break;
    115c:	e011      	b.n	1182 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    115e:	231f      	movs	r3, #31
    1160:	18fb      	adds	r3, r7, r3
    1162:	2201      	movs	r2, #1
    1164:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1166:	231e      	movs	r3, #30
    1168:	18fb      	adds	r3, r7, r3
    116a:	2210      	movs	r2, #16
    116c:	701a      	strb	r2, [r3, #0]
			break;
    116e:	e008      	b.n	1182 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1170:	231f      	movs	r3, #31
    1172:	18fb      	adds	r3, r7, r3
    1174:	2201      	movs	r2, #1
    1176:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1178:	231e      	movs	r3, #30
    117a:	18fb      	adds	r3, r7, r3
    117c:	2208      	movs	r2, #8
    117e:	701a      	strb	r2, [r3, #0]
			break;
    1180:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1182:	683b      	ldr	r3, [r7, #0]
    1184:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1186:	683b      	ldr	r3, [r7, #0]
    1188:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    118a:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    118c:	683b      	ldr	r3, [r7, #0]
    118e:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1190:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1192:	683a      	ldr	r2, [r7, #0]
    1194:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1196:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1198:	683a      	ldr	r2, [r7, #0]
    119a:	7e12      	ldrb	r2, [r2, #24]
    119c:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    119e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11a0:	683a      	ldr	r2, [r7, #0]
    11a2:	2126      	movs	r1, #38	; 0x26
    11a4:	5c52      	ldrb	r2, [r2, r1]
    11a6:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    11a8:	4313      	orrs	r3, r2
    11aa:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    11ac:	231d      	movs	r3, #29
    11ae:	18fb      	adds	r3, r7, r3
    11b0:	2200      	movs	r2, #0
    11b2:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    11b4:	683b      	ldr	r3, [r7, #0]
    11b6:	685b      	ldr	r3, [r3, #4]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d020      	beq.n	11fe <_usart_set_config+0x14e>
    11bc:	2280      	movs	r2, #128	; 0x80
    11be:	0552      	lsls	r2, r2, #21
    11c0:	4293      	cmp	r3, r2
    11c2:	d150      	bne.n	1266 <_usart_set_config+0x1b6>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    11c4:	683b      	ldr	r3, [r7, #0]
    11c6:	2227      	movs	r2, #39	; 0x27
    11c8:	5c9b      	ldrb	r3, [r3, r2]
    11ca:	2201      	movs	r2, #1
    11cc:	4053      	eors	r3, r2
    11ce:	b2db      	uxtb	r3, r3
    11d0:	2b00      	cmp	r3, #0
    11d2:	d013      	beq.n	11fc <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    11d4:	683b      	ldr	r3, [r7, #0]
    11d6:	6a1d      	ldr	r5, [r3, #32]
    11d8:	693b      	ldr	r3, [r7, #16]
    11da:	b2db      	uxtb	r3, r3
    11dc:	1c18      	adds	r0, r3, #0
    11de:	4b69      	ldr	r3, [pc, #420]	; (1384 <_usart_set_config+0x2d4>)
    11e0:	4798      	blx	r3
    11e2:	1c02      	adds	r2, r0, #0
    11e4:	231d      	movs	r3, #29
    11e6:	18fc      	adds	r4, r7, r3
    11e8:	230e      	movs	r3, #14
    11ea:	18fb      	adds	r3, r7, r3
    11ec:	1c28      	adds	r0, r5, #0
    11ee:	1c11      	adds	r1, r2, #0
    11f0:	1c1a      	adds	r2, r3, #0
    11f2:	4b65      	ldr	r3, [pc, #404]	; (1388 <_usart_set_config+0x2d8>)
    11f4:	4798      	blx	r3
    11f6:	1c03      	adds	r3, r0, #0
    11f8:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    11fa:	e034      	b.n	1266 <_usart_set_config+0x1b6>
    11fc:	e033      	b.n	1266 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    11fe:	683b      	ldr	r3, [r7, #0]
    1200:	2227      	movs	r2, #39	; 0x27
    1202:	5c9b      	ldrb	r3, [r3, r2]
    1204:	2b00      	cmp	r3, #0
    1206:	d014      	beq.n	1232 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1208:	683b      	ldr	r3, [r7, #0]
    120a:	6a18      	ldr	r0, [r3, #32]
    120c:	683b      	ldr	r3, [r7, #0]
    120e:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    1210:	231d      	movs	r3, #29
    1212:	18fc      	adds	r4, r7, r3
    1214:	230e      	movs	r3, #14
    1216:	18fa      	adds	r2, r7, r3
    1218:	231f      	movs	r3, #31
    121a:	18fb      	adds	r3, r7, r3
    121c:	781d      	ldrb	r5, [r3, #0]
    121e:	231e      	movs	r3, #30
    1220:	18fb      	adds	r3, r7, r3
    1222:	781b      	ldrb	r3, [r3, #0]
    1224:	9300      	str	r3, [sp, #0]
    1226:	1c2b      	adds	r3, r5, #0
    1228:	4d58      	ldr	r5, [pc, #352]	; (138c <_usart_set_config+0x2dc>)
    122a:	47a8      	blx	r5
    122c:	1c03      	adds	r3, r0, #0
    122e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1230:	e018      	b.n	1264 <_usart_set_config+0x1b4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1232:	683b      	ldr	r3, [r7, #0]
    1234:	6a1e      	ldr	r6, [r3, #32]
    1236:	693b      	ldr	r3, [r7, #16]
    1238:	b2db      	uxtb	r3, r3
    123a:	1c18      	adds	r0, r3, #0
    123c:	4b51      	ldr	r3, [pc, #324]	; (1384 <_usart_set_config+0x2d4>)
    123e:	4798      	blx	r3
    1240:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1242:	231d      	movs	r3, #29
    1244:	18fc      	adds	r4, r7, r3
    1246:	230e      	movs	r3, #14
    1248:	18fa      	adds	r2, r7, r3
    124a:	231f      	movs	r3, #31
    124c:	18fb      	adds	r3, r7, r3
    124e:	781d      	ldrb	r5, [r3, #0]
    1250:	231e      	movs	r3, #30
    1252:	18fb      	adds	r3, r7, r3
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	9300      	str	r3, [sp, #0]
    1258:	1c30      	adds	r0, r6, #0
    125a:	1c2b      	adds	r3, r5, #0
    125c:	4d4b      	ldr	r5, [pc, #300]	; (138c <_usart_set_config+0x2dc>)
    125e:	47a8      	blx	r5
    1260:	1c03      	adds	r3, r0, #0
    1262:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1264:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1266:	231d      	movs	r3, #29
    1268:	18fb      	adds	r3, r7, r3
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	2b00      	cmp	r3, #0
    126e:	d003      	beq.n	1278 <_usart_set_config+0x1c8>
		/* Abort */
		return status_code;
    1270:	231d      	movs	r3, #29
    1272:	18fb      	adds	r3, r7, r3
    1274:	781b      	ldrb	r3, [r3, #0]
    1276:	e07e      	b.n	1376 <_usart_set_config+0x2c6>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1278:	683b      	ldr	r3, [r7, #0]
    127a:	7e5b      	ldrb	r3, [r3, #25]
    127c:	2b00      	cmp	r3, #0
    127e:	d003      	beq.n	1288 <_usart_set_config+0x1d8>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1280:	683b      	ldr	r3, [r7, #0]
    1282:	7e9a      	ldrb	r2, [r3, #26]
    1284:	69bb      	ldr	r3, [r7, #24]
    1286:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1288:	687b      	ldr	r3, [r7, #4]
    128a:	1c18      	adds	r0, r3, #0
    128c:	4b40      	ldr	r3, [pc, #256]	; (1390 <_usart_set_config+0x2e0>)
    128e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1290:	230e      	movs	r3, #14
    1292:	18fb      	adds	r3, r7, r3
    1294:	881a      	ldrh	r2, [r3, #0]
    1296:	69bb      	ldr	r3, [r7, #24]
    1298:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	685b      	ldr	r3, [r3, #4]
    129e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    12a0:	4313      	orrs	r3, r2
    12a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    12a4:	683b      	ldr	r3, [r7, #0]
    12a6:	2227      	movs	r2, #39	; 0x27
    12a8:	5c9b      	ldrb	r3, [r3, r2]
    12aa:	2201      	movs	r2, #1
    12ac:	4053      	eors	r3, r2
    12ae:	b2db      	uxtb	r3, r3
    12b0:	2b00      	cmp	r3, #0
    12b2:	d003      	beq.n	12bc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    12b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12b6:	2204      	movs	r2, #4
    12b8:	4313      	orrs	r3, r2
    12ba:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    12bc:	683b      	ldr	r3, [r7, #0]
    12be:	7a9a      	ldrb	r2, [r3, #10]
    12c0:	683b      	ldr	r3, [r7, #0]
    12c2:	7adb      	ldrb	r3, [r3, #11]
    12c4:	4313      	orrs	r3, r2
    12c6:	b2db      	uxtb	r3, r3
    12c8:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    12ca:	683b      	ldr	r3, [r7, #0]
    12cc:	7e5b      	ldrb	r3, [r3, #25]
    12ce:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    12d0:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    12d2:	683a      	ldr	r2, [r7, #0]
    12d4:	7f12      	ldrb	r2, [r2, #28]
    12d6:	0252      	lsls	r2, r2, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    12d8:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    12da:	683a      	ldr	r2, [r7, #0]
    12dc:	7f52      	ldrb	r2, [r2, #29]
    12de:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    12e0:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    12e2:	683a      	ldr	r2, [r7, #0]
    12e4:	2124      	movs	r1, #36	; 0x24
    12e6:	5c52      	ldrb	r2, [r2, r1]
    12e8:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    12ea:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    12ec:	683a      	ldr	r2, [r7, #0]
    12ee:	2125      	movs	r1, #37	; 0x25
    12f0:	5c52      	ldrb	r2, [r2, r1]
    12f2:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    12f4:	4313      	orrs	r3, r2
    12f6:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    12f8:	683b      	ldr	r3, [r7, #0]
    12fa:	891b      	ldrh	r3, [r3, #8]
    12fc:	2bff      	cmp	r3, #255	; 0xff
    12fe:	d015      	beq.n	132c <_usart_set_config+0x27c>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1300:	683b      	ldr	r3, [r7, #0]
    1302:	7edb      	ldrb	r3, [r3, #27]
    1304:	2b00      	cmp	r3, #0
    1306:	d005      	beq.n	1314 <_usart_set_config+0x264>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    1308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    130a:	22a0      	movs	r2, #160	; 0xa0
    130c:	04d2      	lsls	r2, r2, #19
    130e:	4313      	orrs	r3, r2
    1310:	627b      	str	r3, [r7, #36]	; 0x24
    1312:	e004      	b.n	131e <_usart_set_config+0x26e>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	0452      	lsls	r2, r2, #17
    131a:	4313      	orrs	r3, r2
    131c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    131e:	683b      	ldr	r3, [r7, #0]
    1320:	891b      	ldrh	r3, [r3, #8]
    1322:	1c1a      	adds	r2, r3, #0
    1324:	6a3b      	ldr	r3, [r7, #32]
    1326:	4313      	orrs	r3, r2
    1328:	623b      	str	r3, [r7, #32]
    132a:	e008      	b.n	133e <_usart_set_config+0x28e>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    132c:	683b      	ldr	r3, [r7, #0]
    132e:	7edb      	ldrb	r3, [r3, #27]
    1330:	2b00      	cmp	r3, #0
    1332:	d004      	beq.n	133e <_usart_set_config+0x28e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1336:	2280      	movs	r2, #128	; 0x80
    1338:	04d2      	lsls	r2, r2, #19
    133a:	4313      	orrs	r3, r2
    133c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    133e:	683b      	ldr	r3, [r7, #0]
    1340:	222c      	movs	r2, #44	; 0x2c
    1342:	5c9b      	ldrb	r3, [r3, r2]
    1344:	2b00      	cmp	r3, #0
    1346:	d103      	bne.n	1350 <_usart_set_config+0x2a0>
    1348:	4b12      	ldr	r3, [pc, #72]	; (1394 <_usart_set_config+0x2e4>)
    134a:	4798      	blx	r3
    134c:	1e03      	subs	r3, r0, #0
    134e:	d003      	beq.n	1358 <_usart_set_config+0x2a8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	4313      	orrs	r3, r2
    1356:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	1c18      	adds	r0, r3, #0
    135c:	4b0c      	ldr	r3, [pc, #48]	; (1390 <_usart_set_config+0x2e0>)
    135e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1360:	69bb      	ldr	r3, [r7, #24]
    1362:	6a3a      	ldr	r2, [r7, #32]
    1364:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1366:	687b      	ldr	r3, [r7, #4]
    1368:	1c18      	adds	r0, r3, #0
    136a:	4b09      	ldr	r3, [pc, #36]	; (1390 <_usart_set_config+0x2e0>)
    136c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    136e:	69bb      	ldr	r3, [r7, #24]
    1370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1372:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1374:	2300      	movs	r3, #0
}
    1376:	1c18      	adds	r0, r3, #0
    1378:	46bd      	mov	sp, r7
    137a:	b00b      	add	sp, #44	; 0x2c
    137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00000e21 	.word	0x00000e21
    1384:	0000464d 	.word	0x0000464d
    1388:	0000096d 	.word	0x0000096d
    138c:	000009e9 	.word	0x000009e9
    1390:	00001091 	.word	0x00001091
    1394:	00001051 	.word	0x00001051

00001398 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1398:	b590      	push	{r4, r7, lr}
    139a:	b093      	sub	sp, #76	; 0x4c
    139c:	af00      	add	r7, sp, #0
    139e:	60f8      	str	r0, [r7, #12]
    13a0:	60b9      	str	r1, [r7, #8]
    13a2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    13a4:	233b      	movs	r3, #59	; 0x3b
    13a6:	18fb      	adds	r3, r7, r3
    13a8:	2200      	movs	r2, #0
    13aa:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    13ac:	68fb      	ldr	r3, [r7, #12]
    13ae:	68ba      	ldr	r2, [r7, #8]
    13b0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	1c18      	adds	r0, r3, #0
    13be:	4b85      	ldr	r3, [pc, #532]	; (15d4 <usart_init+0x23c>)
    13c0:	4798      	blx	r3
    13c2:	1c03      	adds	r3, r0, #0
    13c4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13c8:	3302      	adds	r3, #2
    13ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    13ce:	3314      	adds	r3, #20
    13d0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    13d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	2201      	movs	r2, #1
    13d8:	4013      	ands	r3, r2
    13da:	d001      	beq.n	13e0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    13dc:	2305      	movs	r3, #5
    13de:	e0f5      	b.n	15cc <usart_init+0x234>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    13e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13e2:	681b      	ldr	r3, [r3, #0]
    13e4:	2202      	movs	r2, #2
    13e6:	4013      	ands	r3, r2
    13e8:	d001      	beq.n	13ee <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    13ea:	231c      	movs	r3, #28
    13ec:	e0ee      	b.n	15cc <usart_init+0x234>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13f0:	2201      	movs	r2, #1
    13f2:	409a      	lsls	r2, r3
    13f4:	1c13      	adds	r3, r2, #0
    13f6:	2002      	movs	r0, #2
    13f8:	1c19      	adds	r1, r3, #0
    13fa:	4b77      	ldr	r3, [pc, #476]	; (15d8 <usart_init+0x240>)
    13fc:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    13fe:	2324      	movs	r3, #36	; 0x24
    1400:	18fb      	adds	r3, r7, r3
    1402:	1c18      	adds	r0, r3, #0
    1404:	4b75      	ldr	r3, [pc, #468]	; (15dc <usart_init+0x244>)
    1406:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	222d      	movs	r2, #45	; 0x2d
    140c:	5c9a      	ldrb	r2, [r3, r2]
    140e:	2324      	movs	r3, #36	; 0x24
    1410:	18fb      	adds	r3, r7, r3
    1412:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1414:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1416:	b2da      	uxtb	r2, r3
    1418:	2324      	movs	r3, #36	; 0x24
    141a:	18fb      	adds	r3, r7, r3
    141c:	1c10      	adds	r0, r2, #0
    141e:	1c19      	adds	r1, r3, #0
    1420:	4b6f      	ldr	r3, [pc, #444]	; (15e0 <usart_init+0x248>)
    1422:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1424:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1426:	b2db      	uxtb	r3, r3
    1428:	1c18      	adds	r0, r3, #0
    142a:	4b6e      	ldr	r3, [pc, #440]	; (15e4 <usart_init+0x24c>)
    142c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	222d      	movs	r2, #45	; 0x2d
    1432:	5c9b      	ldrb	r3, [r3, r2]
    1434:	1c18      	adds	r0, r3, #0
    1436:	2100      	movs	r1, #0
    1438:	4b6b      	ldr	r3, [pc, #428]	; (15e8 <usart_init+0x250>)
    143a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	7ada      	ldrb	r2, [r3, #11]
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	2224      	movs	r2, #36	; 0x24
    1448:	5c9a      	ldrb	r2, [r3, r2]
    144a:	68fb      	ldr	r3, [r7, #12]
    144c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	2225      	movs	r2, #37	; 0x25
    1452:	5c9a      	ldrb	r2, [r3, r2]
    1454:	68fb      	ldr	r3, [r7, #12]
    1456:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	7eda      	ldrb	r2, [r3, #27]
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	7f1a      	ldrb	r2, [r3, #28]
    1464:	68fb      	ldr	r3, [r7, #12]
    1466:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1468:	233b      	movs	r3, #59	; 0x3b
    146a:	18fc      	adds	r4, r7, r3
    146c:	68fa      	ldr	r2, [r7, #12]
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	1c10      	adds	r0, r2, #0
    1472:	1c19      	adds	r1, r3, #0
    1474:	4b5d      	ldr	r3, [pc, #372]	; (15ec <usart_init+0x254>)
    1476:	4798      	blx	r3
    1478:	1c03      	adds	r3, r0, #0
    147a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    147c:	233b      	movs	r3, #59	; 0x3b
    147e:	18fb      	adds	r3, r7, r3
    1480:	781b      	ldrb	r3, [r3, #0]
    1482:	2b00      	cmp	r3, #0
    1484:	d003      	beq.n	148e <usart_init+0xf6>
		return status_code;
    1486:	233b      	movs	r3, #59	; 0x3b
    1488:	18fb      	adds	r3, r7, r3
    148a:	781b      	ldrb	r3, [r3, #0]
    148c:	e09e      	b.n	15cc <usart_init+0x234>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    148e:	2320      	movs	r3, #32
    1490:	18fb      	adds	r3, r7, r3
    1492:	1c18      	adds	r0, r3, #0
    1494:	4b56      	ldr	r3, [pc, #344]	; (15f0 <usart_init+0x258>)
    1496:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1498:	2320      	movs	r3, #32
    149a:	18fb      	adds	r3, r7, r3
    149c:	2200      	movs	r2, #0
    149e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14a0:	2320      	movs	r3, #32
    14a2:	18fb      	adds	r3, r7, r3
    14a4:	2200      	movs	r2, #0
    14a6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    14a8:	687b      	ldr	r3, [r7, #4]
    14aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    14ac:	2310      	movs	r3, #16
    14ae:	18fb      	adds	r3, r7, r3
    14b0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    14b6:	2310      	movs	r3, #16
    14b8:	18fb      	adds	r3, r7, r3
    14ba:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    14c0:	2310      	movs	r3, #16
    14c2:	18fb      	adds	r3, r7, r3
    14c4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    14ca:	2310      	movs	r3, #16
    14cc:	18fb      	adds	r3, r7, r3
    14ce:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    14d0:	2347      	movs	r3, #71	; 0x47
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	2200      	movs	r2, #0
    14d6:	701a      	strb	r2, [r3, #0]
    14d8:	e02c      	b.n	1534 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14da:	2347      	movs	r3, #71	; 0x47
    14dc:	18fb      	adds	r3, r7, r3
    14de:	781a      	ldrb	r2, [r3, #0]
    14e0:	2310      	movs	r3, #16
    14e2:	18fb      	adds	r3, r7, r3
    14e4:	0092      	lsls	r2, r2, #2
    14e6:	58d3      	ldr	r3, [r2, r3]
    14e8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    14ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    14ec:	2b00      	cmp	r3, #0
    14ee:	d109      	bne.n	1504 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14f0:	68ba      	ldr	r2, [r7, #8]
    14f2:	2347      	movs	r3, #71	; 0x47
    14f4:	18fb      	adds	r3, r7, r3
    14f6:	781b      	ldrb	r3, [r3, #0]
    14f8:	1c10      	adds	r0, r2, #0
    14fa:	1c19      	adds	r1, r3, #0
    14fc:	4b3d      	ldr	r3, [pc, #244]	; (15f4 <usart_init+0x25c>)
    14fe:	4798      	blx	r3
    1500:	1c03      	adds	r3, r0, #0
    1502:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1506:	3301      	adds	r3, #1
    1508:	d00d      	beq.n	1526 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    150c:	b2da      	uxtb	r2, r3
    150e:	2320      	movs	r3, #32
    1510:	18fb      	adds	r3, r7, r3
    1512:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1516:	0c1b      	lsrs	r3, r3, #16
    1518:	b2da      	uxtb	r2, r3
    151a:	2320      	movs	r3, #32
    151c:	18fb      	adds	r3, r7, r3
    151e:	1c10      	adds	r0, r2, #0
    1520:	1c19      	adds	r1, r3, #0
    1522:	4b35      	ldr	r3, [pc, #212]	; (15f8 <usart_init+0x260>)
    1524:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1526:	2347      	movs	r3, #71	; 0x47
    1528:	18fb      	adds	r3, r7, r3
    152a:	781a      	ldrb	r2, [r3, #0]
    152c:	2347      	movs	r3, #71	; 0x47
    152e:	18fb      	adds	r3, r7, r3
    1530:	3201      	adds	r2, #1
    1532:	701a      	strb	r2, [r3, #0]
    1534:	2347      	movs	r3, #71	; 0x47
    1536:	18fb      	adds	r3, r7, r3
    1538:	781b      	ldrb	r3, [r3, #0]
    153a:	2b03      	cmp	r3, #3
    153c:	d9cd      	bls.n	14da <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    153e:	2300      	movs	r3, #0
    1540:	63fb      	str	r3, [r7, #60]	; 0x3c
    1542:	e009      	b.n	1558 <usart_init+0x1c0>
		module->callback[i]            = NULL;
    1544:	68fa      	ldr	r2, [r7, #12]
    1546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1548:	3302      	adds	r3, #2
    154a:	009b      	lsls	r3, r3, #2
    154c:	18d3      	adds	r3, r2, r3
    154e:	2200      	movs	r2, #0
    1550:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1554:	3301      	adds	r3, #1
    1556:	63fb      	str	r3, [r7, #60]	; 0x3c
    1558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    155a:	2b05      	cmp	r3, #5
    155c:	d9f2      	bls.n	1544 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	2200      	movs	r2, #0
    1562:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1564:	68fb      	ldr	r3, [r7, #12]
    1566:	2200      	movs	r2, #0
    1568:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    156a:	68fb      	ldr	r3, [r7, #12]
    156c:	2200      	movs	r2, #0
    156e:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	2200      	movs	r2, #0
    1574:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	2230      	movs	r2, #48	; 0x30
    157a:	2100      	movs	r1, #0
    157c:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    157e:	68fb      	ldr	r3, [r7, #12]
    1580:	2231      	movs	r2, #49	; 0x31
    1582:	2100      	movs	r1, #0
    1584:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1586:	68fb      	ldr	r3, [r7, #12]
    1588:	2232      	movs	r2, #50	; 0x32
    158a:	2100      	movs	r1, #0
    158c:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    158e:	68fb      	ldr	r3, [r7, #12]
    1590:	2233      	movs	r2, #51	; 0x33
    1592:	2100      	movs	r1, #0
    1594:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1596:	68fb      	ldr	r3, [r7, #12]
    1598:	681b      	ldr	r3, [r3, #0]
    159a:	2227      	movs	r2, #39	; 0x27
    159c:	18bc      	adds	r4, r7, r2
    159e:	1c18      	adds	r0, r3, #0
    15a0:	4b0c      	ldr	r3, [pc, #48]	; (15d4 <usart_init+0x23c>)
    15a2:	4798      	blx	r3
    15a4:	1c03      	adds	r3, r0, #0
    15a6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    15a8:	2327      	movs	r3, #39	; 0x27
    15aa:	18fb      	adds	r3, r7, r3
    15ac:	781a      	ldrb	r2, [r3, #0]
    15ae:	4b13      	ldr	r3, [pc, #76]	; (15fc <usart_init+0x264>)
    15b0:	1c10      	adds	r0, r2, #0
    15b2:	1c19      	adds	r1, r3, #0
    15b4:	4b12      	ldr	r3, [pc, #72]	; (1600 <usart_init+0x268>)
    15b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    15b8:	2327      	movs	r3, #39	; 0x27
    15ba:	18fb      	adds	r3, r7, r3
    15bc:	781a      	ldrb	r2, [r3, #0]
    15be:	4b11      	ldr	r3, [pc, #68]	; (1604 <usart_init+0x26c>)
    15c0:	0092      	lsls	r2, r2, #2
    15c2:	68f9      	ldr	r1, [r7, #12]
    15c4:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    15c6:	233b      	movs	r3, #59	; 0x3b
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	781b      	ldrb	r3, [r3, #0]
}
    15cc:	1c18      	adds	r0, r3, #0
    15ce:	46bd      	mov	sp, r7
    15d0:	b013      	add	sp, #76	; 0x4c
    15d2:	bd90      	pop	{r4, r7, pc}
    15d4:	00000e21 	.word	0x00000e21
    15d8:	00000fcd 	.word	0x00000fcd
    15dc:	00000fb9 	.word	0x00000fb9
    15e0:	00004529 	.word	0x00004529
    15e4:	0000456d 	.word	0x0000456d
    15e8:	00000bd9 	.word	0x00000bd9
    15ec:	000010b1 	.word	0x000010b1
    15f0:	00001029 	.word	0x00001029
    15f4:	00000c65 	.word	0x00000c65
    15f8:	00004815 	.word	0x00004815
    15fc:	000017ad 	.word	0x000017ad
    1600:	00000e81 	.word	0x00000e81
    1604:	20003d18 	.word	0x20003d18

00001608 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1608:	b580      	push	{r7, lr}
    160a:	b084      	sub	sp, #16
    160c:	af00      	add	r7, sp, #0
    160e:	6078      	str	r0, [r7, #4]
    1610:	1c0a      	adds	r2, r1, #0
    1612:	1cbb      	adds	r3, r7, #2
    1614:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1616:	687b      	ldr	r3, [r7, #4]
    1618:	681b      	ldr	r3, [r3, #0]
    161a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    161c:	687b      	ldr	r3, [r7, #4]
    161e:	79db      	ldrb	r3, [r3, #7]
    1620:	2201      	movs	r2, #1
    1622:	4053      	eors	r3, r2
    1624:	b2db      	uxtb	r3, r3
    1626:	2b00      	cmp	r3, #0
    1628:	d001      	beq.n	162e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    162a:	231c      	movs	r3, #28
    162c:	e017      	b.n	165e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    162e:	687b      	ldr	r3, [r7, #4]
    1630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1632:	b29b      	uxth	r3, r3
    1634:	2b00      	cmp	r3, #0
    1636:	d001      	beq.n	163c <usart_write_wait+0x34>
		return STATUS_BUSY;
    1638:	2305      	movs	r3, #5
    163a:	e010      	b.n	165e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    163c:	687b      	ldr	r3, [r7, #4]
    163e:	1c18      	adds	r0, r3, #0
    1640:	4b09      	ldr	r3, [pc, #36]	; (1668 <usart_write_wait+0x60>)
    1642:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1644:	68fb      	ldr	r3, [r7, #12]
    1646:	1cba      	adds	r2, r7, #2
    1648:	8812      	ldrh	r2, [r2, #0]
    164a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    164c:	46c0      	nop			; (mov r8, r8)
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	7e1b      	ldrb	r3, [r3, #24]
    1652:	b2db      	uxtb	r3, r3
    1654:	1c1a      	adds	r2, r3, #0
    1656:	2302      	movs	r3, #2
    1658:	4013      	ands	r3, r2
    165a:	d0f8      	beq.n	164e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    165c:	2300      	movs	r3, #0
}
    165e:	1c18      	adds	r0, r3, #0
    1660:	46bd      	mov	sp, r7
    1662:	b004      	add	sp, #16
    1664:	bd80      	pop	{r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	00001091 	.word	0x00001091

0000166c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    166c:	b580      	push	{r7, lr}
    166e:	b084      	sub	sp, #16
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1676:	687b      	ldr	r3, [r7, #4]
    1678:	681b      	ldr	r3, [r3, #0]
    167a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	799b      	ldrb	r3, [r3, #6]
    1680:	2201      	movs	r2, #1
    1682:	4053      	eors	r3, r2
    1684:	b2db      	uxtb	r3, r3
    1686:	2b00      	cmp	r3, #0
    1688:	d001      	beq.n	168e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    168a:	231c      	movs	r3, #28
    168c:	e068      	b.n	1760 <usart_read_wait+0xf4>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1692:	b29b      	uxth	r3, r3
    1694:	2b00      	cmp	r3, #0
    1696:	d001      	beq.n	169c <usart_read_wait+0x30>
		return STATUS_BUSY;
    1698:	2305      	movs	r3, #5
    169a:	e061      	b.n	1760 <usart_read_wait+0xf4>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    169c:	68fb      	ldr	r3, [r7, #12]
    169e:	7e1b      	ldrb	r3, [r3, #24]
    16a0:	b2db      	uxtb	r3, r3
    16a2:	1c1a      	adds	r2, r3, #0
    16a4:	2304      	movs	r3, #4
    16a6:	4013      	ands	r3, r2
    16a8:	d101      	bne.n	16ae <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    16aa:	2305      	movs	r3, #5
    16ac:	e058      	b.n	1760 <usart_read_wait+0xf4>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    16ae:	687b      	ldr	r3, [r7, #4]
    16b0:	1c18      	adds	r0, r3, #0
    16b2:	4b2d      	ldr	r3, [pc, #180]	; (1768 <usart_read_wait+0xfc>)
    16b4:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16b6:	68fb      	ldr	r3, [r7, #12]
    16b8:	8b5b      	ldrh	r3, [r3, #26]
    16ba:	b29b      	uxth	r3, r3
    16bc:	b2da      	uxtb	r2, r3
    16be:	230b      	movs	r3, #11
    16c0:	18fb      	adds	r3, r7, r3
    16c2:	213f      	movs	r1, #63	; 0x3f
    16c4:	400a      	ands	r2, r1
    16c6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    16c8:	230b      	movs	r3, #11
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d040      	beq.n	1754 <usart_read_wait+0xe8>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16d2:	230b      	movs	r3, #11
    16d4:	18fb      	adds	r3, r7, r3
    16d6:	781b      	ldrb	r3, [r3, #0]
    16d8:	2202      	movs	r2, #2
    16da:	4013      	ands	r3, r2
    16dc:	d004      	beq.n	16e8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16de:	68fb      	ldr	r3, [r7, #12]
    16e0:	2202      	movs	r2, #2
    16e2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    16e4:	231a      	movs	r3, #26
    16e6:	e03b      	b.n	1760 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16e8:	230b      	movs	r3, #11
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2204      	movs	r2, #4
    16f0:	4013      	ands	r3, r2
    16f2:	d004      	beq.n	16fe <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	2204      	movs	r2, #4
    16f8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    16fa:	231e      	movs	r3, #30
    16fc:	e030      	b.n	1760 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16fe:	230b      	movs	r3, #11
    1700:	18fb      	adds	r3, r7, r3
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	2201      	movs	r2, #1
    1706:	4013      	ands	r3, r2
    1708:	d004      	beq.n	1714 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    170a:	68fb      	ldr	r3, [r7, #12]
    170c:	2201      	movs	r2, #1
    170e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1710:	2313      	movs	r3, #19
    1712:	e025      	b.n	1760 <usart_read_wait+0xf4>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1714:	230b      	movs	r3, #11
    1716:	18fb      	adds	r3, r7, r3
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	2210      	movs	r2, #16
    171c:	4013      	ands	r3, r2
    171e:	d009      	beq.n	1734 <usart_read_wait+0xc8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1720:	68fb      	ldr	r3, [r7, #12]
    1722:	8b5b      	ldrh	r3, [r3, #26]
    1724:	b29b      	uxth	r3, r3
    1726:	2210      	movs	r2, #16
    1728:	4313      	orrs	r3, r2
    172a:	b29a      	uxth	r2, r3
    172c:	68fb      	ldr	r3, [r7, #12]
    172e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    1730:	2342      	movs	r3, #66	; 0x42
    1732:	e015      	b.n	1760 <usart_read_wait+0xf4>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1734:	230b      	movs	r3, #11
    1736:	18fb      	adds	r3, r7, r3
    1738:	781b      	ldrb	r3, [r3, #0]
    173a:	2220      	movs	r2, #32
    173c:	4013      	ands	r3, r2
    173e:	d009      	beq.n	1754 <usart_read_wait+0xe8>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	8b5b      	ldrh	r3, [r3, #26]
    1744:	b29b      	uxth	r3, r3
    1746:	2220      	movs	r2, #32
    1748:	4313      	orrs	r3, r2
    174a:	b29a      	uxth	r2, r3
    174c:	68fb      	ldr	r3, [r7, #12]
    174e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1750:	2341      	movs	r3, #65	; 0x41
    1752:	e005      	b.n	1760 <usart_read_wait+0xf4>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1754:	68fb      	ldr	r3, [r7, #12]
    1756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1758:	b29a      	uxth	r2, r3
    175a:	683b      	ldr	r3, [r7, #0]
    175c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    175e:	2300      	movs	r3, #0
}
    1760:	1c18      	adds	r0, r3, #0
    1762:	46bd      	mov	sp, r7
    1764:	b004      	add	sp, #16
    1766:	bd80      	pop	{r7, pc}
    1768:	00001091 	.word	0x00001091

0000176c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    176c:	b580      	push	{r7, lr}
    176e:	b084      	sub	sp, #16
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1774:	687b      	ldr	r3, [r7, #4]
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    177a:	68fb      	ldr	r3, [r7, #12]
    177c:	69db      	ldr	r3, [r3, #28]
    177e:	1e5a      	subs	r2, r3, #1
    1780:	4193      	sbcs	r3, r2
    1782:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1784:	1c18      	adds	r0, r3, #0
    1786:	46bd      	mov	sp, r7
    1788:	b004      	add	sp, #16
    178a:	bd80      	pop	{r7, pc}

0000178c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1794:	46c0      	nop			; (mov r8, r8)
    1796:	687b      	ldr	r3, [r7, #4]
    1798:	1c18      	adds	r0, r3, #0
    179a:	4b03      	ldr	r3, [pc, #12]	; (17a8 <_usart_wait_for_sync+0x1c>)
    179c:	4798      	blx	r3
    179e:	1e03      	subs	r3, r0, #0
    17a0:	d1f9      	bne.n	1796 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    17a2:	46bd      	mov	sp, r7
    17a4:	b002      	add	sp, #8
    17a6:	bd80      	pop	{r7, pc}
    17a8:	0000176d 	.word	0x0000176d

000017ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    17ac:	b580      	push	{r7, lr}
    17ae:	b088      	sub	sp, #32
    17b0:	af00      	add	r7, sp, #0
    17b2:	1c02      	adds	r2, r0, #0
    17b4:	1dfb      	adds	r3, r7, #7
    17b6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    17b8:	1dfb      	adds	r3, r7, #7
    17ba:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    17bc:	4bb0      	ldr	r3, [pc, #704]	; (1a80 <_usart_interrupt_handler+0x2d4>)
    17be:	0092      	lsls	r2, r2, #2
    17c0:	58d3      	ldr	r3, [r2, r3]
    17c2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    17c4:	69bb      	ldr	r3, [r7, #24]
    17c6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    17c8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    17ca:	69bb      	ldr	r3, [r7, #24]
    17cc:	1c18      	adds	r0, r3, #0
    17ce:	4bad      	ldr	r3, [pc, #692]	; (1a84 <_usart_interrupt_handler+0x2d8>)
    17d0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    17d2:	697b      	ldr	r3, [r7, #20]
    17d4:	7e1b      	ldrb	r3, [r3, #24]
    17d6:	b2da      	uxtb	r2, r3
    17d8:	2312      	movs	r3, #18
    17da:	18fb      	adds	r3, r7, r3
    17dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    17de:	697b      	ldr	r3, [r7, #20]
    17e0:	7d9b      	ldrb	r3, [r3, #22]
    17e2:	b2db      	uxtb	r3, r3
    17e4:	b29a      	uxth	r2, r3
    17e6:	2312      	movs	r3, #18
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	2112      	movs	r1, #18
    17ec:	1879      	adds	r1, r7, r1
    17ee:	8809      	ldrh	r1, [r1, #0]
    17f0:	400a      	ands	r2, r1
    17f2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    17f4:	69bb      	ldr	r3, [r7, #24]
    17f6:	2230      	movs	r2, #48	; 0x30
    17f8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    17fa:	69ba      	ldr	r2, [r7, #24]
    17fc:	2131      	movs	r1, #49	; 0x31
    17fe:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1800:	4013      	ands	r3, r2
    1802:	b2da      	uxtb	r2, r3
    1804:	2310      	movs	r3, #16
    1806:	18fb      	adds	r3, r7, r3
    1808:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    180a:	2312      	movs	r3, #18
    180c:	18fb      	adds	r3, r7, r3
    180e:	881b      	ldrh	r3, [r3, #0]
    1810:	2201      	movs	r2, #1
    1812:	4013      	ands	r3, r2
    1814:	d044      	beq.n	18a0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1816:	69bb      	ldr	r3, [r7, #24]
    1818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    181a:	b29b      	uxth	r3, r3
    181c:	2b00      	cmp	r3, #0
    181e:	d03c      	beq.n	189a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1820:	69bb      	ldr	r3, [r7, #24]
    1822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	b2da      	uxtb	r2, r3
    1828:	231c      	movs	r3, #28
    182a:	18fb      	adds	r3, r7, r3
    182c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    182e:	69bb      	ldr	r3, [r7, #24]
    1830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1832:	1c5a      	adds	r2, r3, #1
    1834:	69bb      	ldr	r3, [r7, #24]
    1836:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1838:	69bb      	ldr	r3, [r7, #24]
    183a:	795b      	ldrb	r3, [r3, #5]
    183c:	2b01      	cmp	r3, #1
    183e:	d112      	bne.n	1866 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1840:	69bb      	ldr	r3, [r7, #24]
    1842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1844:	781b      	ldrb	r3, [r3, #0]
    1846:	b2db      	uxtb	r3, r3
    1848:	021b      	lsls	r3, r3, #8
    184a:	b29a      	uxth	r2, r3
    184c:	231c      	movs	r3, #28
    184e:	18fb      	adds	r3, r7, r3
    1850:	881b      	ldrh	r3, [r3, #0]
    1852:	4313      	orrs	r3, r2
    1854:	b29a      	uxth	r2, r3
    1856:	231c      	movs	r3, #28
    1858:	18fb      	adds	r3, r7, r3
    185a:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    185c:	69bb      	ldr	r3, [r7, #24]
    185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1860:	1c5a      	adds	r2, r3, #1
    1862:	69bb      	ldr	r3, [r7, #24]
    1864:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1866:	231c      	movs	r3, #28
    1868:	18fb      	adds	r3, r7, r3
    186a:	881b      	ldrh	r3, [r3, #0]
    186c:	05db      	lsls	r3, r3, #23
    186e:	0ddb      	lsrs	r3, r3, #23
    1870:	b29a      	uxth	r2, r3
    1872:	697b      	ldr	r3, [r7, #20]
    1874:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1876:	69bb      	ldr	r3, [r7, #24]
    1878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    187a:	b29b      	uxth	r3, r3
    187c:	3b01      	subs	r3, #1
    187e:	b29b      	uxth	r3, r3
    1880:	69ba      	ldr	r2, [r7, #24]
    1882:	1c19      	adds	r1, r3, #0
    1884:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1886:	2b00      	cmp	r3, #0
    1888:	d106      	bne.n	1898 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    188a:	697b      	ldr	r3, [r7, #20]
    188c:	2201      	movs	r2, #1
    188e:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1890:	697b      	ldr	r3, [r7, #20]
    1892:	2202      	movs	r2, #2
    1894:	759a      	strb	r2, [r3, #22]
    1896:	e003      	b.n	18a0 <_usart_interrupt_handler+0xf4>
    1898:	e002      	b.n	18a0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    189a:	697b      	ldr	r3, [r7, #20]
    189c:	2201      	movs	r2, #1
    189e:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18a0:	2312      	movs	r3, #18
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	881b      	ldrh	r3, [r3, #0]
    18a6:	2202      	movs	r2, #2
    18a8:	4013      	ands	r3, r2
    18aa:	d011      	beq.n	18d0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18ac:	697b      	ldr	r3, [r7, #20]
    18ae:	2202      	movs	r2, #2
    18b0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    18b2:	69bb      	ldr	r3, [r7, #24]
    18b4:	2233      	movs	r2, #51	; 0x33
    18b6:	2100      	movs	r1, #0
    18b8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18ba:	2310      	movs	r3, #16
    18bc:	18fb      	adds	r3, r7, r3
    18be:	881b      	ldrh	r3, [r3, #0]
    18c0:	2201      	movs	r2, #1
    18c2:	4013      	ands	r3, r2
    18c4:	d004      	beq.n	18d0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    18c6:	69bb      	ldr	r3, [r7, #24]
    18c8:	68db      	ldr	r3, [r3, #12]
    18ca:	69ba      	ldr	r2, [r7, #24]
    18cc:	1c10      	adds	r0, r2, #0
    18ce:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    18d0:	2312      	movs	r3, #18
    18d2:	18fb      	adds	r3, r7, r3
    18d4:	881b      	ldrh	r3, [r3, #0]
    18d6:	2204      	movs	r2, #4
    18d8:	4013      	ands	r3, r2
    18da:	d100      	bne.n	18de <_usart_interrupt_handler+0x132>
    18dc:	e0d7      	b.n	1a8e <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    18de:	69bb      	ldr	r3, [r7, #24]
    18e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    18e2:	b29b      	uxth	r3, r3
    18e4:	2b00      	cmp	r3, #0
    18e6:	d100      	bne.n	18ea <_usart_interrupt_handler+0x13e>
    18e8:	e0ce      	b.n	1a88 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18ea:	697b      	ldr	r3, [r7, #20]
    18ec:	8b5b      	ldrh	r3, [r3, #26]
    18ee:	b29b      	uxth	r3, r3
    18f0:	b2da      	uxtb	r2, r3
    18f2:	231f      	movs	r3, #31
    18f4:	18fb      	adds	r3, r7, r3
    18f6:	213f      	movs	r1, #63	; 0x3f
    18f8:	400a      	ands	r2, r1
    18fa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    18fc:	231f      	movs	r3, #31
    18fe:	18fb      	adds	r3, r7, r3
    1900:	781b      	ldrb	r3, [r3, #0]
    1902:	2208      	movs	r2, #8
    1904:	4013      	ands	r3, r2
    1906:	d007      	beq.n	1918 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1908:	231f      	movs	r3, #31
    190a:	18fb      	adds	r3, r7, r3
    190c:	221f      	movs	r2, #31
    190e:	18ba      	adds	r2, r7, r2
    1910:	7812      	ldrb	r2, [r2, #0]
    1912:	2108      	movs	r1, #8
    1914:	438a      	bics	r2, r1
    1916:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1918:	231f      	movs	r3, #31
    191a:	18fb      	adds	r3, r7, r3
    191c:	781b      	ldrb	r3, [r3, #0]
    191e:	2b00      	cmp	r3, #0
    1920:	d100      	bne.n	1924 <_usart_interrupt_handler+0x178>
    1922:	e069      	b.n	19f8 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1924:	231f      	movs	r3, #31
    1926:	18fb      	adds	r3, r7, r3
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	2202      	movs	r2, #2
    192c:	4013      	ands	r3, r2
    192e:	d00c      	beq.n	194a <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1930:	69bb      	ldr	r3, [r7, #24]
    1932:	2232      	movs	r2, #50	; 0x32
    1934:	211a      	movs	r1, #26
    1936:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1938:	697b      	ldr	r3, [r7, #20]
    193a:	8b5b      	ldrh	r3, [r3, #26]
    193c:	b29b      	uxth	r3, r3
    193e:	2202      	movs	r2, #2
    1940:	4313      	orrs	r3, r2
    1942:	b29a      	uxth	r2, r3
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	835a      	strh	r2, [r3, #26]
    1948:	e04a      	b.n	19e0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    194a:	231f      	movs	r3, #31
    194c:	18fb      	adds	r3, r7, r3
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	2204      	movs	r2, #4
    1952:	4013      	ands	r3, r2
    1954:	d00c      	beq.n	1970 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1956:	69bb      	ldr	r3, [r7, #24]
    1958:	2232      	movs	r2, #50	; 0x32
    195a:	211e      	movs	r1, #30
    195c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    195e:	697b      	ldr	r3, [r7, #20]
    1960:	8b5b      	ldrh	r3, [r3, #26]
    1962:	b29b      	uxth	r3, r3
    1964:	2204      	movs	r2, #4
    1966:	4313      	orrs	r3, r2
    1968:	b29a      	uxth	r2, r3
    196a:	697b      	ldr	r3, [r7, #20]
    196c:	835a      	strh	r2, [r3, #26]
    196e:	e037      	b.n	19e0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1970:	231f      	movs	r3, #31
    1972:	18fb      	adds	r3, r7, r3
    1974:	781b      	ldrb	r3, [r3, #0]
    1976:	2201      	movs	r2, #1
    1978:	4013      	ands	r3, r2
    197a:	d00c      	beq.n	1996 <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    197c:	69bb      	ldr	r3, [r7, #24]
    197e:	2232      	movs	r2, #50	; 0x32
    1980:	2113      	movs	r1, #19
    1982:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1984:	697b      	ldr	r3, [r7, #20]
    1986:	8b5b      	ldrh	r3, [r3, #26]
    1988:	b29b      	uxth	r3, r3
    198a:	2201      	movs	r2, #1
    198c:	4313      	orrs	r3, r2
    198e:	b29a      	uxth	r2, r3
    1990:	697b      	ldr	r3, [r7, #20]
    1992:	835a      	strh	r2, [r3, #26]
    1994:	e024      	b.n	19e0 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1996:	231f      	movs	r3, #31
    1998:	18fb      	adds	r3, r7, r3
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	2210      	movs	r2, #16
    199e:	4013      	ands	r3, r2
    19a0:	d00c      	beq.n	19bc <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    19a2:	69bb      	ldr	r3, [r7, #24]
    19a4:	2232      	movs	r2, #50	; 0x32
    19a6:	2142      	movs	r1, #66	; 0x42
    19a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    19aa:	697b      	ldr	r3, [r7, #20]
    19ac:	8b5b      	ldrh	r3, [r3, #26]
    19ae:	b29b      	uxth	r3, r3
    19b0:	2210      	movs	r2, #16
    19b2:	4313      	orrs	r3, r2
    19b4:	b29a      	uxth	r2, r3
    19b6:	697b      	ldr	r3, [r7, #20]
    19b8:	835a      	strh	r2, [r3, #26]
    19ba:	e011      	b.n	19e0 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19bc:	231f      	movs	r3, #31
    19be:	18fb      	adds	r3, r7, r3
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	2220      	movs	r2, #32
    19c4:	4013      	ands	r3, r2
    19c6:	d00b      	beq.n	19e0 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19c8:	69bb      	ldr	r3, [r7, #24]
    19ca:	2232      	movs	r2, #50	; 0x32
    19cc:	2141      	movs	r1, #65	; 0x41
    19ce:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    19d0:	697b      	ldr	r3, [r7, #20]
    19d2:	8b5b      	ldrh	r3, [r3, #26]
    19d4:	b29b      	uxth	r3, r3
    19d6:	2220      	movs	r2, #32
    19d8:	4313      	orrs	r3, r2
    19da:	b29a      	uxth	r2, r3
    19dc:	697b      	ldr	r3, [r7, #20]
    19de:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    19e0:	2310      	movs	r3, #16
    19e2:	18fb      	adds	r3, r7, r3
    19e4:	881b      	ldrh	r3, [r3, #0]
    19e6:	2204      	movs	r2, #4
    19e8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    19ea:	d050      	beq.n	1a8e <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    19ec:	69bb      	ldr	r3, [r7, #24]
    19ee:	695b      	ldr	r3, [r3, #20]
    19f0:	69ba      	ldr	r2, [r7, #24]
    19f2:	1c10      	adds	r0, r2, #0
    19f4:	4798      	blx	r3
    19f6:	e04a      	b.n	1a8e <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19f8:	697b      	ldr	r3, [r7, #20]
    19fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    19fc:	b29a      	uxth	r2, r3
    19fe:	230e      	movs	r3, #14
    1a00:	18fb      	adds	r3, r7, r3
    1a02:	05d2      	lsls	r2, r2, #23
    1a04:	0dd2      	lsrs	r2, r2, #23
    1a06:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1a08:	69bb      	ldr	r3, [r7, #24]
    1a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a0c:	220e      	movs	r2, #14
    1a0e:	18ba      	adds	r2, r7, r2
    1a10:	8812      	ldrh	r2, [r2, #0]
    1a12:	b2d2      	uxtb	r2, r2
    1a14:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a16:	69bb      	ldr	r3, [r7, #24]
    1a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a1a:	1c5a      	adds	r2, r3, #1
    1a1c:	69bb      	ldr	r3, [r7, #24]
    1a1e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a20:	69bb      	ldr	r3, [r7, #24]
    1a22:	795b      	ldrb	r3, [r3, #5]
    1a24:	2b01      	cmp	r3, #1
    1a26:	d10d      	bne.n	1a44 <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a28:	69bb      	ldr	r3, [r7, #24]
    1a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a2c:	220e      	movs	r2, #14
    1a2e:	18ba      	adds	r2, r7, r2
    1a30:	8812      	ldrh	r2, [r2, #0]
    1a32:	0a12      	lsrs	r2, r2, #8
    1a34:	b292      	uxth	r2, r2
    1a36:	b2d2      	uxtb	r2, r2
    1a38:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1a3a:	69bb      	ldr	r3, [r7, #24]
    1a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a3e:	1c5a      	adds	r2, r3, #1
    1a40:	69bb      	ldr	r3, [r7, #24]
    1a42:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a44:	69bb      	ldr	r3, [r7, #24]
    1a46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1a48:	b29b      	uxth	r3, r3
    1a4a:	3b01      	subs	r3, #1
    1a4c:	b29b      	uxth	r3, r3
    1a4e:	69ba      	ldr	r2, [r7, #24]
    1a50:	1c19      	adds	r1, r3, #0
    1a52:	8591      	strh	r1, [r2, #44]	; 0x2c
    1a54:	2b00      	cmp	r3, #0
    1a56:	d112      	bne.n	1a7e <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a58:	697b      	ldr	r3, [r7, #20]
    1a5a:	2204      	movs	r2, #4
    1a5c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1a5e:	69bb      	ldr	r3, [r7, #24]
    1a60:	2232      	movs	r2, #50	; 0x32
    1a62:	2100      	movs	r1, #0
    1a64:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1a66:	2310      	movs	r3, #16
    1a68:	18fb      	adds	r3, r7, r3
    1a6a:	881b      	ldrh	r3, [r3, #0]
    1a6c:	2202      	movs	r2, #2
    1a6e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1a70:	d005      	beq.n	1a7e <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a72:	69bb      	ldr	r3, [r7, #24]
    1a74:	691b      	ldr	r3, [r3, #16]
    1a76:	69ba      	ldr	r2, [r7, #24]
    1a78:	1c10      	adds	r0, r2, #0
    1a7a:	4798      	blx	r3
    1a7c:	e007      	b.n	1a8e <_usart_interrupt_handler+0x2e2>
    1a7e:	e006      	b.n	1a8e <_usart_interrupt_handler+0x2e2>
    1a80:	20003d18 	.word	0x20003d18
    1a84:	0000178d 	.word	0x0000178d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a88:	697b      	ldr	r3, [r7, #20]
    1a8a:	2204      	movs	r2, #4
    1a8c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a8e:	2312      	movs	r3, #18
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	881b      	ldrh	r3, [r3, #0]
    1a94:	2210      	movs	r2, #16
    1a96:	4013      	ands	r3, r2
    1a98:	d010      	beq.n	1abc <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a9a:	697b      	ldr	r3, [r7, #20]
    1a9c:	2210      	movs	r2, #16
    1a9e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1aa0:	697b      	ldr	r3, [r7, #20]
    1aa2:	2210      	movs	r2, #16
    1aa4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1aa6:	2310      	movs	r3, #16
    1aa8:	18fb      	adds	r3, r7, r3
    1aaa:	881b      	ldrh	r3, [r3, #0]
    1aac:	2210      	movs	r2, #16
    1aae:	4013      	ands	r3, r2
    1ab0:	d004      	beq.n	1abc <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1ab2:	69bb      	ldr	r3, [r7, #24]
    1ab4:	69db      	ldr	r3, [r3, #28]
    1ab6:	69ba      	ldr	r2, [r7, #24]
    1ab8:	1c10      	adds	r0, r2, #0
    1aba:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1abc:	2312      	movs	r3, #18
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	881b      	ldrh	r3, [r3, #0]
    1ac2:	2220      	movs	r2, #32
    1ac4:	4013      	ands	r3, r2
    1ac6:	d010      	beq.n	1aea <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1ac8:	697b      	ldr	r3, [r7, #20]
    1aca:	2220      	movs	r2, #32
    1acc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1ace:	697b      	ldr	r3, [r7, #20]
    1ad0:	2220      	movs	r2, #32
    1ad2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ad4:	2310      	movs	r3, #16
    1ad6:	18fb      	adds	r3, r7, r3
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	2208      	movs	r2, #8
    1adc:	4013      	ands	r3, r2
    1ade:	d004      	beq.n	1aea <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ae0:	69bb      	ldr	r3, [r7, #24]
    1ae2:	699b      	ldr	r3, [r3, #24]
    1ae4:	69ba      	ldr	r2, [r7, #24]
    1ae6:	1c10      	adds	r0, r2, #0
    1ae8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1aea:	2312      	movs	r3, #18
    1aec:	18fb      	adds	r3, r7, r3
    1aee:	881b      	ldrh	r3, [r3, #0]
    1af0:	2208      	movs	r2, #8
    1af2:	4013      	ands	r3, r2
    1af4:	d010      	beq.n	1b18 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1af6:	697b      	ldr	r3, [r7, #20]
    1af8:	2208      	movs	r2, #8
    1afa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1afc:	697b      	ldr	r3, [r7, #20]
    1afe:	2208      	movs	r2, #8
    1b00:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1b02:	2310      	movs	r3, #16
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	881b      	ldrh	r3, [r3, #0]
    1b08:	2220      	movs	r2, #32
    1b0a:	4013      	ands	r3, r2
    1b0c:	d004      	beq.n	1b18 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1b0e:	69bb      	ldr	r3, [r7, #24]
    1b10:	6a1b      	ldr	r3, [r3, #32]
    1b12:	69ba      	ldr	r2, [r7, #24]
    1b14:	1c10      	adds	r0, r2, #0
    1b16:	4798      	blx	r3
		}
	}
#endif
}
    1b18:	46bd      	mov	sp, r7
    1b1a:	b008      	add	sp, #32
    1b1c:	bd80      	pop	{r7, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)

00001b20 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1b20:	b580      	push	{r7, lr}
    1b22:	b086      	sub	sp, #24
    1b24:	af00      	add	r7, sp, #0
    1b26:	60f8      	str	r0, [r7, #12]
    1b28:	60b9      	str	r1, [r7, #8]
    1b2a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1b2c:	2300      	movs	r3, #0
    1b2e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d002      	beq.n	1b3c <_read+0x1c>
		return -1;
    1b36:	2301      	movs	r3, #1
    1b38:	425b      	negs	r3, r3
    1b3a:	e015      	b.n	1b68 <_read+0x48>
	}

	for (; len > 0; --len) {
    1b3c:	e010      	b.n	1b60 <_read+0x40>
		ptr_get(stdio_base, ptr);
    1b3e:	4b0c      	ldr	r3, [pc, #48]	; (1b70 <_read+0x50>)
    1b40:	681a      	ldr	r2, [r3, #0]
    1b42:	4b0c      	ldr	r3, [pc, #48]	; (1b74 <_read+0x54>)
    1b44:	6819      	ldr	r1, [r3, #0]
    1b46:	68bb      	ldr	r3, [r7, #8]
    1b48:	1c08      	adds	r0, r1, #0
    1b4a:	1c19      	adds	r1, r3, #0
    1b4c:	4790      	blx	r2
		ptr++;
    1b4e:	68bb      	ldr	r3, [r7, #8]
    1b50:	3301      	adds	r3, #1
    1b52:	60bb      	str	r3, [r7, #8]
		nChars++;
    1b54:	697b      	ldr	r3, [r7, #20]
    1b56:	3301      	adds	r3, #1
    1b58:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1b5a:	687b      	ldr	r3, [r7, #4]
    1b5c:	3b01      	subs	r3, #1
    1b5e:	607b      	str	r3, [r7, #4]
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	2b00      	cmp	r3, #0
    1b64:	dceb      	bgt.n	1b3e <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1b66:	697b      	ldr	r3, [r7, #20]
}
    1b68:	1c18      	adds	r0, r3, #0
    1b6a:	46bd      	mov	sp, r7
    1b6c:	b006      	add	sp, #24
    1b6e:	bd80      	pop	{r7, pc}
    1b70:	20003d30 	.word	0x20003d30
    1b74:	20003d38 	.word	0x20003d38

00001b78 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1b78:	b580      	push	{r7, lr}
    1b7a:	b086      	sub	sp, #24
    1b7c:	af00      	add	r7, sp, #0
    1b7e:	60f8      	str	r0, [r7, #12]
    1b80:	60b9      	str	r1, [r7, #8]
    1b82:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1b84:	2300      	movs	r3, #0
    1b86:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1b88:	68fb      	ldr	r3, [r7, #12]
    1b8a:	2b01      	cmp	r3, #1
    1b8c:	d008      	beq.n	1ba0 <_write+0x28>
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	2b02      	cmp	r3, #2
    1b92:	d005      	beq.n	1ba0 <_write+0x28>
    1b94:	68fb      	ldr	r3, [r7, #12]
    1b96:	2b03      	cmp	r3, #3
    1b98:	d002      	beq.n	1ba0 <_write+0x28>
		return -1;
    1b9a:	2301      	movs	r3, #1
    1b9c:	425b      	negs	r3, r3
    1b9e:	e019      	b.n	1bd4 <_write+0x5c>
	}

	for (; len != 0; --len) {
    1ba0:	e014      	b.n	1bcc <_write+0x54>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1ba2:	4b0e      	ldr	r3, [pc, #56]	; (1bdc <_write+0x64>)
    1ba4:	681a      	ldr	r2, [r3, #0]
    1ba6:	4b0e      	ldr	r3, [pc, #56]	; (1be0 <_write+0x68>)
    1ba8:	6818      	ldr	r0, [r3, #0]
    1baa:	68bb      	ldr	r3, [r7, #8]
    1bac:	1c59      	adds	r1, r3, #1
    1bae:	60b9      	str	r1, [r7, #8]
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	1c19      	adds	r1, r3, #0
    1bb4:	4790      	blx	r2
    1bb6:	1e03      	subs	r3, r0, #0
    1bb8:	da02      	bge.n	1bc0 <_write+0x48>
			return -1;
    1bba:	2301      	movs	r3, #1
    1bbc:	425b      	negs	r3, r3
    1bbe:	e009      	b.n	1bd4 <_write+0x5c>
		}
		++nChars;
    1bc0:	697b      	ldr	r3, [r7, #20]
    1bc2:	3301      	adds	r3, #1
    1bc4:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1bc6:	687b      	ldr	r3, [r7, #4]
    1bc8:	3b01      	subs	r3, #1
    1bca:	607b      	str	r3, [r7, #4]
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d1e7      	bne.n	1ba2 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1bd2:	697b      	ldr	r3, [r7, #20]
}
    1bd4:	1c18      	adds	r0, r3, #0
    1bd6:	46bd      	mov	sp, r7
    1bd8:	b006      	add	sp, #24
    1bda:	bd80      	pop	{r7, pc}
    1bdc:	20003d34 	.word	0x20003d34
    1be0:	20003d38 	.word	0x20003d38

00001be4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b084      	sub	sp, #16
    1be8:	af00      	add	r7, sp, #0
    1bea:	60f8      	str	r0, [r7, #12]
    1bec:	60b9      	str	r1, [r7, #8]
    1bee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    1bf0:	68fb      	ldr	r3, [r7, #12]
    1bf2:	3b04      	subs	r3, #4
    1bf4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	2280      	movs	r2, #128	; 0x80
    1bfa:	0452      	lsls	r2, r2, #17
    1bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1bfe:	68fb      	ldr	r3, [r7, #12]
    1c00:	3b04      	subs	r3, #4
    1c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1c04:	68ba      	ldr	r2, [r7, #8]
    1c06:	68fb      	ldr	r3, [r7, #12]
    1c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1c0a:	68fb      	ldr	r3, [r7, #12]
    1c0c:	3b04      	subs	r3, #4
    1c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1c10:	4a08      	ldr	r2, [pc, #32]	; (1c34 <pxPortInitialiseStack+0x50>)
    1c12:	68fb      	ldr	r3, [r7, #12]
    1c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    1c16:	68fb      	ldr	r3, [r7, #12]
    1c18:	3b14      	subs	r3, #20
    1c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1c1c:	687a      	ldr	r2, [r7, #4]
    1c1e:	68fb      	ldr	r3, [r7, #12]
    1c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    1c22:	68fb      	ldr	r3, [r7, #12]
    1c24:	3b20      	subs	r3, #32
    1c26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    1c28:	68fb      	ldr	r3, [r7, #12]
}
    1c2a:	1c18      	adds	r0, r3, #0
    1c2c:	46bd      	mov	sp, r7
    1c2e:	b004      	add	sp, #16
    1c30:	bd80      	pop	{r7, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00001c39 	.word	0x00001c39

00001c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1c3c:	4b03      	ldr	r3, [pc, #12]	; (1c4c <prvTaskExitError+0x14>)
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	3301      	adds	r3, #1
    1c42:	d001      	beq.n	1c48 <prvTaskExitError+0x10>
    1c44:	b672      	cpsid	i
    1c46:	e7fe      	b.n	1c46 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    1c48:	b672      	cpsid	i
	for( ;; );
    1c4a:	e7fe      	b.n	1c4a <prvTaskExitError+0x12>
    1c4c:	20000004 	.word	0x20000004

00001c50 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1c50:	b580      	push	{r7, lr}
    1c52:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1c54:	46bd      	mov	sp, r7
    1c56:	bd80      	pop	{r7, pc}

00001c58 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1c58:	4a06      	ldr	r2, [pc, #24]	; (1c74 <pxCurrentTCBConst2>)
    1c5a:	6813      	ldr	r3, [r2, #0]
    1c5c:	6818      	ldr	r0, [r3, #0]
    1c5e:	3020      	adds	r0, #32
    1c60:	f380 8809 	msr	PSP, r0
    1c64:	2002      	movs	r0, #2
    1c66:	f380 8814 	msr	CONTROL, r0
    1c6a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1c6c:	46ae      	mov	lr, r5
    1c6e:	b662      	cpsie	i
    1c70:	bd00      	pop	{pc}
    1c72:	46c0      	nop			; (mov r8, r8)

00001c74 <pxCurrentTCBConst2>:
    1c74:	20003b50 	.word	0x20003b50

00001c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1c7c:	4b0d      	ldr	r3, [pc, #52]	; (1cb4 <xPortStartScheduler+0x3c>)
    1c7e:	4a0d      	ldr	r2, [pc, #52]	; (1cb4 <xPortStartScheduler+0x3c>)
    1c80:	6812      	ldr	r2, [r2, #0]
    1c82:	21ff      	movs	r1, #255	; 0xff
    1c84:	0409      	lsls	r1, r1, #16
    1c86:	430a      	orrs	r2, r1
    1c88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1c8a:	4b0a      	ldr	r3, [pc, #40]	; (1cb4 <xPortStartScheduler+0x3c>)
    1c8c:	4a09      	ldr	r2, [pc, #36]	; (1cb4 <xPortStartScheduler+0x3c>)
    1c8e:	6812      	ldr	r2, [r2, #0]
    1c90:	21ff      	movs	r1, #255	; 0xff
    1c92:	0609      	lsls	r1, r1, #24
    1c94:	430a      	orrs	r2, r1
    1c96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    1c98:	4b07      	ldr	r3, [pc, #28]	; (1cb8 <xPortStartScheduler+0x40>)
    1c9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1c9c:	4b07      	ldr	r3, [pc, #28]	; (1cbc <xPortStartScheduler+0x44>)
    1c9e:	2200      	movs	r2, #0
    1ca0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1ca2:	4b07      	ldr	r3, [pc, #28]	; (1cc0 <xPortStartScheduler+0x48>)
    1ca4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    1ca6:	4b07      	ldr	r3, [pc, #28]	; (1cc4 <xPortStartScheduler+0x4c>)
    1ca8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    1caa:	2300      	movs	r3, #0
}
    1cac:	1c18      	adds	r0, r3, #0
    1cae:	46bd      	mov	sp, r7
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	e000ed20 	.word	0xe000ed20
    1cb8:	00001dc5 	.word	0x00001dc5
    1cbc:	20000004 	.word	0x20000004
    1cc0:	00001c59 	.word	0x00001c59
    1cc4:	00001c39 	.word	0x00001c39

00001cc8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    1cc8:	b580      	push	{r7, lr}
    1cca:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1ccc:	4b04      	ldr	r3, [pc, #16]	; (1ce0 <vPortYield+0x18>)
    1cce:	2280      	movs	r2, #128	; 0x80
    1cd0:	0552      	lsls	r2, r2, #21
    1cd2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1cd4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1cd8:	f3bf 8f6f 	isb	sy
}
    1cdc:	46bd      	mov	sp, r7
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	e000ed04 	.word	0xe000ed04

00001ce4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    1ce8:	b672      	cpsid	i
    uxCriticalNesting++;
    1cea:	4b05      	ldr	r3, [pc, #20]	; (1d00 <vPortEnterCritical+0x1c>)
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	1c5a      	adds	r2, r3, #1
    1cf0:	4b03      	ldr	r3, [pc, #12]	; (1d00 <vPortEnterCritical+0x1c>)
    1cf2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    1cf4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1cf8:	f3bf 8f6f 	isb	sy
}
    1cfc:	46bd      	mov	sp, r7
    1cfe:	bd80      	pop	{r7, pc}
    1d00:	20000004 	.word	0x20000004

00001d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    1d08:	4b08      	ldr	r3, [pc, #32]	; (1d2c <vPortExitCritical+0x28>)
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	2b00      	cmp	r3, #0
    1d0e:	d101      	bne.n	1d14 <vPortExitCritical+0x10>
    1d10:	b672      	cpsid	i
    1d12:	e7fe      	b.n	1d12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <vPortExitCritical+0x28>)
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	1e5a      	subs	r2, r3, #1
    1d1a:	4b04      	ldr	r3, [pc, #16]	; (1d2c <vPortExitCritical+0x28>)
    1d1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    1d1e:	4b03      	ldr	r3, [pc, #12]	; (1d2c <vPortExitCritical+0x28>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	2b00      	cmp	r3, #0
    1d24:	d100      	bne.n	1d28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    1d26:	b662      	cpsie	i
    }
}
    1d28:	46bd      	mov	sp, r7
    1d2a:	bd80      	pop	{r7, pc}
    1d2c:	20000004 	.word	0x20000004

00001d30 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1d30:	f3ef 8010 	mrs	r0, PRIMASK
    1d34:	b672      	cpsid	i
    1d36:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    1d38:	2300      	movs	r3, #0
}
    1d3a:	1c18      	adds	r0, r3, #0

00001d3c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1d3c:	f380 8810 	msr	PRIMASK, r0
    1d40:	4770      	bx	lr
    1d42:	46c0      	nop			; (mov r8, r8)

00001d44 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1d44:	f3ef 8009 	mrs	r0, PSP
    1d48:	4b0e      	ldr	r3, [pc, #56]	; (1d84 <pxCurrentTCBConst>)
    1d4a:	681a      	ldr	r2, [r3, #0]
    1d4c:	3820      	subs	r0, #32
    1d4e:	6010      	str	r0, [r2, #0]
    1d50:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1d52:	4644      	mov	r4, r8
    1d54:	464d      	mov	r5, r9
    1d56:	4656      	mov	r6, sl
    1d58:	465f      	mov	r7, fp
    1d5a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1d5c:	b508      	push	{r3, lr}
    1d5e:	b672      	cpsid	i
    1d60:	f001 f8a6 	bl	2eb0 <vTaskSwitchContext>
    1d64:	b662      	cpsie	i
    1d66:	bc0c      	pop	{r2, r3}
    1d68:	6811      	ldr	r1, [r2, #0]
    1d6a:	6808      	ldr	r0, [r1, #0]
    1d6c:	3010      	adds	r0, #16
    1d6e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1d70:	46a0      	mov	r8, r4
    1d72:	46a9      	mov	r9, r5
    1d74:	46b2      	mov	sl, r6
    1d76:	46bb      	mov	fp, r7
    1d78:	f380 8809 	msr	PSP, r0
    1d7c:	3820      	subs	r0, #32
    1d7e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1d80:	4718      	bx	r3
    1d82:	46c0      	nop			; (mov r8, r8)

00001d84 <pxCurrentTCBConst>:
    1d84:	20003b50 	.word	0x20003b50

00001d88 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1d88:	b580      	push	{r7, lr}
    1d8a:	b082      	sub	sp, #8
    1d8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1d8e:	4b09      	ldr	r3, [pc, #36]	; (1db4 <SysTick_Handler+0x2c>)
    1d90:	4798      	blx	r3
    1d92:	1c03      	adds	r3, r0, #0
    1d94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1d96:	4b08      	ldr	r3, [pc, #32]	; (1db8 <SysTick_Handler+0x30>)
    1d98:	4798      	blx	r3
    1d9a:	1e03      	subs	r3, r0, #0
    1d9c:	d003      	beq.n	1da6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <SysTick_Handler+0x34>)
    1da0:	2280      	movs	r2, #128	; 0x80
    1da2:	0552      	lsls	r2, r2, #21
    1da4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	1c18      	adds	r0, r3, #0
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <SysTick_Handler+0x38>)
    1dac:	4798      	blx	r3
}
    1dae:	46bd      	mov	sp, r7
    1db0:	b002      	add	sp, #8
    1db2:	bd80      	pop	{r7, pc}
    1db4:	00001d31 	.word	0x00001d31
    1db8:	00002d39 	.word	0x00002d39
    1dbc:	e000ed04 	.word	0xe000ed04
    1dc0:	00001d3d 	.word	0x00001d3d

00001dc4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    1dc8:	4b05      	ldr	r3, [pc, #20]	; (1de0 <vPortSetupTimerInterrupt+0x1c>)
    1dca:	2200      	movs	r2, #0
    1dcc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1dce:	4b05      	ldr	r3, [pc, #20]	; (1de4 <vPortSetupTimerInterrupt+0x20>)
    1dd0:	4a05      	ldr	r2, [pc, #20]	; (1de8 <vPortSetupTimerInterrupt+0x24>)
    1dd2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1dd4:	4b05      	ldr	r3, [pc, #20]	; (1dec <vPortSetupTimerInterrupt+0x28>)
    1dd6:	2207      	movs	r2, #7
    1dd8:	601a      	str	r2, [r3, #0]
}
    1dda:	46bd      	mov	sp, r7
    1ddc:	bd80      	pop	{r7, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	e000e018 	.word	0xe000e018
    1de4:	e000e014 	.word	0xe000e014
    1de8:	00001f3f 	.word	0x00001f3f
    1dec:	e000e010 	.word	0xe000e010

00001df0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    1df8:	2300      	movs	r3, #0
    1dfa:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	2207      	movs	r2, #7
    1e00:	4013      	ands	r3, r2
    1e02:	d004      	beq.n	1e0e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1e04:	687b      	ldr	r3, [r7, #4]
    1e06:	2207      	movs	r2, #7
    1e08:	4393      	bics	r3, r2
    1e0a:	3308      	adds	r3, #8
    1e0c:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    1e0e:	4b17      	ldr	r3, [pc, #92]	; (1e6c <pvPortMalloc+0x7c>)
    1e10:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1e12:	4b17      	ldr	r3, [pc, #92]	; (1e70 <pvPortMalloc+0x80>)
    1e14:	681b      	ldr	r3, [r3, #0]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d105      	bne.n	1e26 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1e1a:	4b16      	ldr	r3, [pc, #88]	; (1e74 <pvPortMalloc+0x84>)
    1e1c:	2207      	movs	r2, #7
    1e1e:	4393      	bics	r3, r2
    1e20:	1c1a      	adds	r2, r3, #0
    1e22:	4b13      	ldr	r3, [pc, #76]	; (1e70 <pvPortMalloc+0x80>)
    1e24:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1e26:	4b14      	ldr	r3, [pc, #80]	; (1e78 <pvPortMalloc+0x88>)
    1e28:	681a      	ldr	r2, [r3, #0]
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	18d3      	adds	r3, r2, r3
    1e2e:	4a13      	ldr	r2, [pc, #76]	; (1e7c <pvPortMalloc+0x8c>)
    1e30:	4293      	cmp	r3, r2
    1e32:	d813      	bhi.n	1e5c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1e34:	4b10      	ldr	r3, [pc, #64]	; (1e78 <pvPortMalloc+0x88>)
    1e36:	681a      	ldr	r2, [r3, #0]
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	18d2      	adds	r2, r2, r3
    1e3c:	4b0e      	ldr	r3, [pc, #56]	; (1e78 <pvPortMalloc+0x88>)
    1e3e:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1e40:	429a      	cmp	r2, r3
    1e42:	d90b      	bls.n	1e5c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1e44:	4b0a      	ldr	r3, [pc, #40]	; (1e70 <pvPortMalloc+0x80>)
    1e46:	681a      	ldr	r2, [r3, #0]
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <pvPortMalloc+0x88>)
    1e4a:	681b      	ldr	r3, [r3, #0]
    1e4c:	18d3      	adds	r3, r2, r3
    1e4e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    1e50:	4b09      	ldr	r3, [pc, #36]	; (1e78 <pvPortMalloc+0x88>)
    1e52:	681a      	ldr	r2, [r3, #0]
    1e54:	687b      	ldr	r3, [r7, #4]
    1e56:	18d2      	adds	r2, r2, r3
    1e58:	4b07      	ldr	r3, [pc, #28]	; (1e78 <pvPortMalloc+0x88>)
    1e5a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <pvPortMalloc+0x90>)
    1e5e:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1e60:	68fb      	ldr	r3, [r7, #12]
}
    1e62:	1c18      	adds	r0, r3, #0
    1e64:	46bd      	mov	sp, r7
    1e66:	b004      	add	sp, #16
    1e68:	bd80      	pop	{r7, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00002bd5 	.word	0x00002bd5
    1e70:	20003b4c 	.word	0x20003b4c
    1e74:	200000b8 	.word	0x200000b8
    1e78:	20003b48 	.word	0x20003b48
    1e7c:	00003a8f 	.word	0x00003a8f
    1e80:	00002bed 	.word	0x00002bed

00001e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b082      	sub	sp, #8
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d001      	beq.n	1e96 <vPortFree+0x12>
    1e92:	b672      	cpsid	i
    1e94:	e7fe      	b.n	1e94 <vPortFree+0x10>
}
    1e96:	46bd      	mov	sp, r7
    1e98:	b002      	add	sp, #8
    1e9a:	bd80      	pop	{r7, pc}

00001e9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b082      	sub	sp, #8
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	3308      	adds	r3, #8
    1ea8:	1c1a      	adds	r2, r3, #0
    1eaa:	687b      	ldr	r3, [r7, #4]
    1eac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	2201      	movs	r2, #1
    1eb2:	4252      	negs	r2, r2
    1eb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	3308      	adds	r3, #8
    1eba:	1c1a      	adds	r2, r3, #0
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ec0:	687b      	ldr	r3, [r7, #4]
    1ec2:	3308      	adds	r3, #8
    1ec4:	1c1a      	adds	r2, r3, #0
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	2200      	movs	r2, #0
    1ece:	601a      	str	r2, [r3, #0]
}
    1ed0:	46bd      	mov	sp, r7
    1ed2:	b002      	add	sp, #8
    1ed4:	bd80      	pop	{r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)

00001ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b082      	sub	sp, #8
    1edc:	af00      	add	r7, sp, #0
    1ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ee0:	687b      	ldr	r3, [r7, #4]
    1ee2:	2200      	movs	r2, #0
    1ee4:	611a      	str	r2, [r3, #16]
}
    1ee6:	46bd      	mov	sp, r7
    1ee8:	b002      	add	sp, #8
    1eea:	bd80      	pop	{r7, pc}

00001eec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1eec:	b580      	push	{r7, lr}
    1eee:	b084      	sub	sp, #16
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	6078      	str	r0, [r7, #4]
    1ef4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	685b      	ldr	r3, [r3, #4]
    1efa:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1efc:	683b      	ldr	r3, [r7, #0]
    1efe:	68fa      	ldr	r2, [r7, #12]
    1f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1f02:	68fb      	ldr	r3, [r7, #12]
    1f04:	689a      	ldr	r2, [r3, #8]
    1f06:	683b      	ldr	r3, [r7, #0]
    1f08:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	689b      	ldr	r3, [r3, #8]
    1f0e:	683a      	ldr	r2, [r7, #0]
    1f10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	683a      	ldr	r2, [r7, #0]
    1f16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f18:	683b      	ldr	r3, [r7, #0]
    1f1a:	687a      	ldr	r2, [r7, #4]
    1f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	681b      	ldr	r3, [r3, #0]
    1f22:	1c5a      	adds	r2, r3, #1
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	601a      	str	r2, [r3, #0]
}
    1f28:	46bd      	mov	sp, r7
    1f2a:	b004      	add	sp, #16
    1f2c:	bd80      	pop	{r7, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)

00001f30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b084      	sub	sp, #16
    1f34:	af00      	add	r7, sp, #0
    1f36:	6078      	str	r0, [r7, #4]
    1f38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1f3a:	683b      	ldr	r3, [r7, #0]
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	3301      	adds	r3, #1
    1f44:	d103      	bne.n	1f4e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	691b      	ldr	r3, [r3, #16]
    1f4a:	60fb      	str	r3, [r7, #12]
    1f4c:	e00c      	b.n	1f68 <vListInsert+0x38>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	3308      	adds	r3, #8
    1f52:	60fb      	str	r3, [r7, #12]
    1f54:	e002      	b.n	1f5c <vListInsert+0x2c>
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	685b      	ldr	r3, [r3, #4]
    1f5a:	60fb      	str	r3, [r7, #12]
    1f5c:	68fb      	ldr	r3, [r7, #12]
    1f5e:	685b      	ldr	r3, [r3, #4]
    1f60:	681a      	ldr	r2, [r3, #0]
    1f62:	68bb      	ldr	r3, [r7, #8]
    1f64:	429a      	cmp	r2, r3
    1f66:	d9f6      	bls.n	1f56 <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1f68:	68fb      	ldr	r3, [r7, #12]
    1f6a:	685a      	ldr	r2, [r3, #4]
    1f6c:	683b      	ldr	r3, [r7, #0]
    1f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1f70:	683b      	ldr	r3, [r7, #0]
    1f72:	685b      	ldr	r3, [r3, #4]
    1f74:	683a      	ldr	r2, [r7, #0]
    1f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1f78:	683b      	ldr	r3, [r7, #0]
    1f7a:	68fa      	ldr	r2, [r7, #12]
    1f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    1f7e:	68fb      	ldr	r3, [r7, #12]
    1f80:	683a      	ldr	r2, [r7, #0]
    1f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f84:	683b      	ldr	r3, [r7, #0]
    1f86:	687a      	ldr	r2, [r7, #4]
    1f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	1c5a      	adds	r2, r3, #1
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	601a      	str	r2, [r3, #0]
}
    1f94:	46bd      	mov	sp, r7
    1f96:	b004      	add	sp, #16
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)

00001f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1f9c:	b580      	push	{r7, lr}
    1f9e:	b084      	sub	sp, #16
    1fa0:	af00      	add	r7, sp, #0
    1fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	691b      	ldr	r3, [r3, #16]
    1fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1faa:	687b      	ldr	r3, [r7, #4]
    1fac:	685b      	ldr	r3, [r3, #4]
    1fae:	687a      	ldr	r2, [r7, #4]
    1fb0:	6892      	ldr	r2, [r2, #8]
    1fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	689b      	ldr	r3, [r3, #8]
    1fb8:	687a      	ldr	r2, [r7, #4]
    1fba:	6852      	ldr	r2, [r2, #4]
    1fbc:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1fbe:	68fb      	ldr	r3, [r7, #12]
    1fc0:	685a      	ldr	r2, [r3, #4]
    1fc2:	687b      	ldr	r3, [r7, #4]
    1fc4:	429a      	cmp	r2, r3
    1fc6:	d103      	bne.n	1fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	689a      	ldr	r2, [r3, #8]
    1fcc:	68fb      	ldr	r3, [r7, #12]
    1fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1fd0:	687b      	ldr	r3, [r7, #4]
    1fd2:	2200      	movs	r2, #0
    1fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    1fd6:	68fb      	ldr	r3, [r7, #12]
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	1e5a      	subs	r2, r3, #1
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	681b      	ldr	r3, [r3, #0]
}
    1fe4:	1c18      	adds	r0, r3, #0
    1fe6:	46bd      	mov	sp, r7
    1fe8:	b004      	add	sp, #16
    1fea:	bd80      	pop	{r7, pc}

00001fec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
    1ff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    1ffa:	68fb      	ldr	r3, [r7, #12]
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d101      	bne.n	2004 <STACK_SIZE+0x4>
    2000:	b672      	cpsid	i
    2002:	e7fe      	b.n	2002 <STACK_SIZE+0x2>

	taskENTER_CRITICAL();
    2004:	4b24      	ldr	r3, [pc, #144]	; (2098 <STACK_SIZE+0x98>)
    2006:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	681a      	ldr	r2, [r3, #0]
    200c:	68fb      	ldr	r3, [r7, #12]
    200e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2010:	68fb      	ldr	r3, [r7, #12]
    2012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2014:	434b      	muls	r3, r1
    2016:	18d2      	adds	r2, r2, r3
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	2200      	movs	r2, #0
    2020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2022:	68fb      	ldr	r3, [r7, #12]
    2024:	681a      	ldr	r2, [r3, #0]
    2026:	68fb      	ldr	r3, [r7, #12]
    2028:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	681a      	ldr	r2, [r3, #0]
    202e:	68fb      	ldr	r3, [r7, #12]
    2030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2032:	1e59      	subs	r1, r3, #1
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2038:	434b      	muls	r3, r1
    203a:	18d2      	adds	r2, r2, r3
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	2201      	movs	r2, #1
    2044:	4252      	negs	r2, r2
    2046:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2048:	68fb      	ldr	r3, [r7, #12]
    204a:	2201      	movs	r2, #1
    204c:	4252      	negs	r2, r2
    204e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    2050:	683b      	ldr	r3, [r7, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d10e      	bne.n	2074 <STACK_SIZE+0x74>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	691b      	ldr	r3, [r3, #16]
    205a:	2b00      	cmp	r3, #0
    205c:	d014      	beq.n	2088 <STACK_SIZE+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    205e:	68fb      	ldr	r3, [r7, #12]
    2060:	3310      	adds	r3, #16
    2062:	1c18      	adds	r0, r3, #0
    2064:	4b0d      	ldr	r3, [pc, #52]	; (209c <STACK_SIZE+0x9c>)
    2066:	4798      	blx	r3
    2068:	1e03      	subs	r3, r0, #0
    206a:	2b01      	cmp	r3, #1
    206c:	d10c      	bne.n	2088 <STACK_SIZE+0x88>
				{
					queueYIELD_IF_USING_PREEMPTION();
    206e:	4b0c      	ldr	r3, [pc, #48]	; (20a0 <STACK_SIZE+0xa0>)
    2070:	4798      	blx	r3
    2072:	e009      	b.n	2088 <STACK_SIZE+0x88>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2074:	68fb      	ldr	r3, [r7, #12]
    2076:	3310      	adds	r3, #16
    2078:	1c18      	adds	r0, r3, #0
    207a:	4b0a      	ldr	r3, [pc, #40]	; (20a4 <STACK_SIZE+0xa4>)
    207c:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    207e:	68fb      	ldr	r3, [r7, #12]
    2080:	3324      	adds	r3, #36	; 0x24
    2082:	1c18      	adds	r0, r3, #0
    2084:	4b07      	ldr	r3, [pc, #28]	; (20a4 <STACK_SIZE+0xa4>)
    2086:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <STACK_SIZE+0xa8>)
    208a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    208c:	2301      	movs	r3, #1
}
    208e:	1c18      	adds	r0, r3, #0
    2090:	46bd      	mov	sp, r7
    2092:	b004      	add	sp, #16
    2094:	bd80      	pop	{r7, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	00001ce5 	.word	0x00001ce5
    209c:	00003029 	.word	0x00003029
    20a0:	00001cc9 	.word	0x00001cc9
    20a4:	00001e9d 	.word	0x00001e9d
    20a8:	00001d05 	.word	0x00001d05

000020ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b088      	sub	sp, #32
    20b0:	af00      	add	r7, sp, #0
    20b2:	60f8      	str	r0, [r7, #12]
    20b4:	60b9      	str	r1, [r7, #8]
    20b6:	1dfb      	adds	r3, r7, #7
    20b8:	701a      	strb	r2, [r3, #0]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    20ba:	2300      	movs	r3, #0
    20bc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    20be:	68fb      	ldr	r3, [r7, #12]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d02c      	beq.n	211e <xQueueGenericCreate+0x72>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    20c4:	2050      	movs	r0, #80	; 0x50
    20c6:	4b1b      	ldr	r3, [pc, #108]	; (2134 <xQueueGenericCreate+0x88>)
    20c8:	4798      	blx	r3
    20ca:	1c03      	adds	r3, r0, #0
    20cc:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
    20ce:	69bb      	ldr	r3, [r7, #24]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d024      	beq.n	211e <xQueueGenericCreate+0x72>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68ba      	ldr	r2, [r7, #8]
    20d8:	4353      	muls	r3, r2
    20da:	3301      	adds	r3, #1
    20dc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    20de:	697b      	ldr	r3, [r7, #20]
    20e0:	1c18      	adds	r0, r3, #0
    20e2:	4b14      	ldr	r3, [pc, #80]	; (2134 <xQueueGenericCreate+0x88>)
    20e4:	4798      	blx	r3
    20e6:	1c02      	adds	r2, r0, #0
    20e8:	69bb      	ldr	r3, [r7, #24]
    20ea:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    20ec:	69bb      	ldr	r3, [r7, #24]
    20ee:	681b      	ldr	r3, [r3, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d010      	beq.n	2116 <xQueueGenericCreate+0x6a>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    20f4:	69bb      	ldr	r3, [r7, #24]
    20f6:	68fa      	ldr	r2, [r7, #12]
    20f8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    20fa:	69bb      	ldr	r3, [r7, #24]
    20fc:	68ba      	ldr	r2, [r7, #8]
    20fe:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2100:	69bb      	ldr	r3, [r7, #24]
    2102:	1c18      	adds	r0, r3, #0
    2104:	2101      	movs	r1, #1
    2106:	4b0c      	ldr	r3, [pc, #48]	; (2138 <xQueueGenericCreate+0x8c>)
    2108:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    210a:	69bb      	ldr	r3, [r7, #24]
    210c:	2200      	movs	r2, #0
    210e:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2110:	69bb      	ldr	r3, [r7, #24]
    2112:	61fb      	str	r3, [r7, #28]
    2114:	e003      	b.n	211e <xQueueGenericCreate+0x72>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2116:	69bb      	ldr	r3, [r7, #24]
    2118:	1c18      	adds	r0, r3, #0
    211a:	4b08      	ldr	r3, [pc, #32]	; (213c <xQueueGenericCreate+0x90>)
    211c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    211e:	69fb      	ldr	r3, [r7, #28]
    2120:	2b00      	cmp	r3, #0
    2122:	d101      	bne.n	2128 <xQueueGenericCreate+0x7c>
    2124:	b672      	cpsid	i
    2126:	e7fe      	b.n	2126 <xQueueGenericCreate+0x7a>

	return xReturn;
    2128:	69fb      	ldr	r3, [r7, #28]
}
    212a:	1c18      	adds	r0, r3, #0
    212c:	46bd      	mov	sp, r7
    212e:	b008      	add	sp, #32
    2130:	bd80      	pop	{r7, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00001df1 	.word	0x00001df1
    2138:	00001fed 	.word	0x00001fed
    213c:	00001e85 	.word	0x00001e85

00002140 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2140:	b580      	push	{r7, lr}
    2142:	b088      	sub	sp, #32
    2144:	af00      	add	r7, sp, #0
    2146:	60f8      	str	r0, [r7, #12]
    2148:	60b9      	str	r1, [r7, #8]
    214a:	607a      	str	r2, [r7, #4]
    214c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    214e:	2300      	movs	r3, #0
    2150:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    2156:	69bb      	ldr	r3, [r7, #24]
    2158:	2b00      	cmp	r3, #0
    215a:	d101      	bne.n	2160 <xQueueGenericSend+0x20>
    215c:	b672      	cpsid	i
    215e:	e7fe      	b.n	215e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2160:	68bb      	ldr	r3, [r7, #8]
    2162:	2b00      	cmp	r3, #0
    2164:	d103      	bne.n	216e <xQueueGenericSend+0x2e>
    2166:	69bb      	ldr	r3, [r7, #24]
    2168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    216a:	2b00      	cmp	r3, #0
    216c:	d101      	bne.n	2172 <xQueueGenericSend+0x32>
    216e:	2301      	movs	r3, #1
    2170:	e000      	b.n	2174 <xQueueGenericSend+0x34>
    2172:	2300      	movs	r3, #0
    2174:	2b00      	cmp	r3, #0
    2176:	d101      	bne.n	217c <xQueueGenericSend+0x3c>
    2178:	b672      	cpsid	i
    217a:	e7fe      	b.n	217a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    217c:	683b      	ldr	r3, [r7, #0]
    217e:	2b02      	cmp	r3, #2
    2180:	d103      	bne.n	218a <xQueueGenericSend+0x4a>
    2182:	69bb      	ldr	r3, [r7, #24]
    2184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2186:	2b01      	cmp	r3, #1
    2188:	d101      	bne.n	218e <xQueueGenericSend+0x4e>
    218a:	2301      	movs	r3, #1
    218c:	e000      	b.n	2190 <xQueueGenericSend+0x50>
    218e:	2300      	movs	r3, #0
    2190:	2b00      	cmp	r3, #0
    2192:	d101      	bne.n	2198 <xQueueGenericSend+0x58>
    2194:	b672      	cpsid	i
    2196:	e7fe      	b.n	2196 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2198:	4b4f      	ldr	r3, [pc, #316]	; (22d8 <xQueueGenericSend+0x198>)
    219a:	4798      	blx	r3
    219c:	1e03      	subs	r3, r0, #0
    219e:	d102      	bne.n	21a6 <xQueueGenericSend+0x66>
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	2b00      	cmp	r3, #0
    21a4:	d101      	bne.n	21aa <xQueueGenericSend+0x6a>
    21a6:	2301      	movs	r3, #1
    21a8:	e000      	b.n	21ac <xQueueGenericSend+0x6c>
    21aa:	2300      	movs	r3, #0
    21ac:	2b00      	cmp	r3, #0
    21ae:	d101      	bne.n	21b4 <xQueueGenericSend+0x74>
    21b0:	b672      	cpsid	i
    21b2:	e7fe      	b.n	21b2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    21b4:	4b49      	ldr	r3, [pc, #292]	; (22dc <xQueueGenericSend+0x19c>)
    21b6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    21b8:	69bb      	ldr	r3, [r7, #24]
    21ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    21bc:	69bb      	ldr	r3, [r7, #24]
    21be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    21c0:	429a      	cmp	r2, r3
    21c2:	d302      	bcc.n	21ca <xQueueGenericSend+0x8a>
    21c4:	683b      	ldr	r3, [r7, #0]
    21c6:	2b02      	cmp	r3, #2
    21c8:	d129      	bne.n	221e <xQueueGenericSend+0xde>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    21ca:	69b9      	ldr	r1, [r7, #24]
    21cc:	68ba      	ldr	r2, [r7, #8]
    21ce:	683b      	ldr	r3, [r7, #0]
    21d0:	1c08      	adds	r0, r1, #0
    21d2:	1c11      	adds	r1, r2, #0
    21d4:	1c1a      	adds	r2, r3, #0
    21d6:	4b42      	ldr	r3, [pc, #264]	; (22e0 <xQueueGenericSend+0x1a0>)
    21d8:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    21da:	69bb      	ldr	r3, [r7, #24]
    21dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    21de:	2b00      	cmp	r3, #0
    21e0:	d00b      	beq.n	21fa <xQueueGenericSend+0xba>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    21e2:	69ba      	ldr	r2, [r7, #24]
    21e4:	683b      	ldr	r3, [r7, #0]
    21e6:	1c10      	adds	r0, r2, #0
    21e8:	1c19      	adds	r1, r3, #0
    21ea:	4b3e      	ldr	r3, [pc, #248]	; (22e4 <xQueueGenericSend+0x1a4>)
    21ec:	4798      	blx	r3
    21ee:	1e03      	subs	r3, r0, #0
    21f0:	2b01      	cmp	r3, #1
    21f2:	d110      	bne.n	2216 <xQueueGenericSend+0xd6>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    21f4:	4b3c      	ldr	r3, [pc, #240]	; (22e8 <xQueueGenericSend+0x1a8>)
    21f6:	4798      	blx	r3
    21f8:	e00d      	b.n	2216 <xQueueGenericSend+0xd6>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21fa:	69bb      	ldr	r3, [r7, #24]
    21fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    21fe:	2b00      	cmp	r3, #0
    2200:	d009      	beq.n	2216 <xQueueGenericSend+0xd6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2202:	69bb      	ldr	r3, [r7, #24]
    2204:	3324      	adds	r3, #36	; 0x24
    2206:	1c18      	adds	r0, r3, #0
    2208:	4b38      	ldr	r3, [pc, #224]	; (22ec <xQueueGenericSend+0x1ac>)
    220a:	4798      	blx	r3
    220c:	1e03      	subs	r3, r0, #0
    220e:	2b01      	cmp	r3, #1
    2210:	d101      	bne.n	2216 <xQueueGenericSend+0xd6>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    2212:	4b35      	ldr	r3, [pc, #212]	; (22e8 <xQueueGenericSend+0x1a8>)
    2214:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2216:	4b36      	ldr	r3, [pc, #216]	; (22f0 <xQueueGenericSend+0x1b0>)
    2218:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    221a:	2301      	movs	r3, #1
    221c:	e058      	b.n	22d0 <xQueueGenericSend+0x190>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	2b00      	cmp	r3, #0
    2222:	d103      	bne.n	222c <xQueueGenericSend+0xec>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2224:	4b32      	ldr	r3, [pc, #200]	; (22f0 <xQueueGenericSend+0x1b0>)
    2226:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2228:	2300      	movs	r3, #0
    222a:	e051      	b.n	22d0 <xQueueGenericSend+0x190>
				}
				else if( xEntryTimeSet == pdFALSE )
    222c:	69fb      	ldr	r3, [r7, #28]
    222e:	2b00      	cmp	r3, #0
    2230:	d106      	bne.n	2240 <xQueueGenericSend+0x100>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2232:	2310      	movs	r3, #16
    2234:	18fb      	adds	r3, r7, r3
    2236:	1c18      	adds	r0, r3, #0
    2238:	4b2e      	ldr	r3, [pc, #184]	; (22f4 <xQueueGenericSend+0x1b4>)
    223a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    223c:	2301      	movs	r3, #1
    223e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2240:	4b2b      	ldr	r3, [pc, #172]	; (22f0 <xQueueGenericSend+0x1b0>)
    2242:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2244:	4b2c      	ldr	r3, [pc, #176]	; (22f8 <xQueueGenericSend+0x1b8>)
    2246:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2248:	4b24      	ldr	r3, [pc, #144]	; (22dc <xQueueGenericSend+0x19c>)
    224a:	4798      	blx	r3
    224c:	69bb      	ldr	r3, [r7, #24]
    224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2250:	3301      	adds	r3, #1
    2252:	d102      	bne.n	225a <xQueueGenericSend+0x11a>
    2254:	69bb      	ldr	r3, [r7, #24]
    2256:	2200      	movs	r2, #0
    2258:	645a      	str	r2, [r3, #68]	; 0x44
    225a:	69bb      	ldr	r3, [r7, #24]
    225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    225e:	3301      	adds	r3, #1
    2260:	d102      	bne.n	2268 <xQueueGenericSend+0x128>
    2262:	69bb      	ldr	r3, [r7, #24]
    2264:	2200      	movs	r2, #0
    2266:	649a      	str	r2, [r3, #72]	; 0x48
    2268:	4b21      	ldr	r3, [pc, #132]	; (22f0 <xQueueGenericSend+0x1b0>)
    226a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    226c:	2310      	movs	r3, #16
    226e:	18fa      	adds	r2, r7, r3
    2270:	1d3b      	adds	r3, r7, #4
    2272:	1c10      	adds	r0, r2, #0
    2274:	1c19      	adds	r1, r3, #0
    2276:	4b21      	ldr	r3, [pc, #132]	; (22fc <xQueueGenericSend+0x1bc>)
    2278:	4798      	blx	r3
    227a:	1e03      	subs	r3, r0, #0
    227c:	d11f      	bne.n	22be <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    227e:	69bb      	ldr	r3, [r7, #24]
    2280:	1c18      	adds	r0, r3, #0
    2282:	4b1f      	ldr	r3, [pc, #124]	; (2300 <xQueueGenericSend+0x1c0>)
    2284:	4798      	blx	r3
    2286:	1e03      	subs	r3, r0, #0
    2288:	d012      	beq.n	22b0 <xQueueGenericSend+0x170>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    228a:	69bb      	ldr	r3, [r7, #24]
    228c:	3310      	adds	r3, #16
    228e:	1c1a      	adds	r2, r3, #0
    2290:	687b      	ldr	r3, [r7, #4]
    2292:	1c10      	adds	r0, r2, #0
    2294:	1c19      	adds	r1, r3, #0
    2296:	4b1b      	ldr	r3, [pc, #108]	; (2304 <xQueueGenericSend+0x1c4>)
    2298:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    229a:	69bb      	ldr	r3, [r7, #24]
    229c:	1c18      	adds	r0, r3, #0
    229e:	4b1a      	ldr	r3, [pc, #104]	; (2308 <xQueueGenericSend+0x1c8>)
    22a0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    22a2:	4b1a      	ldr	r3, [pc, #104]	; (230c <xQueueGenericSend+0x1cc>)
    22a4:	4798      	blx	r3
    22a6:	1e03      	subs	r3, r0, #0
    22a8:	d111      	bne.n	22ce <xQueueGenericSend+0x18e>
				{
					portYIELD_WITHIN_API();
    22aa:	4b0f      	ldr	r3, [pc, #60]	; (22e8 <xQueueGenericSend+0x1a8>)
    22ac:	4798      	blx	r3
    22ae:	e00e      	b.n	22ce <xQueueGenericSend+0x18e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    22b0:	69bb      	ldr	r3, [r7, #24]
    22b2:	1c18      	adds	r0, r3, #0
    22b4:	4b14      	ldr	r3, [pc, #80]	; (2308 <xQueueGenericSend+0x1c8>)
    22b6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    22b8:	4b14      	ldr	r3, [pc, #80]	; (230c <xQueueGenericSend+0x1cc>)
    22ba:	4798      	blx	r3
    22bc:	e77a      	b.n	21b4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    22be:	69bb      	ldr	r3, [r7, #24]
    22c0:	1c18      	adds	r0, r3, #0
    22c2:	4b11      	ldr	r3, [pc, #68]	; (2308 <xQueueGenericSend+0x1c8>)
    22c4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    22c6:	4b11      	ldr	r3, [pc, #68]	; (230c <xQueueGenericSend+0x1cc>)
    22c8:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    22ca:	2300      	movs	r3, #0
    22cc:	e000      	b.n	22d0 <xQueueGenericSend+0x190>
		}
	}
    22ce:	e771      	b.n	21b4 <xQueueGenericSend+0x74>
}
    22d0:	1c18      	adds	r0, r3, #0
    22d2:	46bd      	mov	sp, r7
    22d4:	b008      	add	sp, #32
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00003501 	.word	0x00003501
    22dc:	00001ce5 	.word	0x00001ce5
    22e0:	0000260d 	.word	0x0000260d
    22e4:	000028d5 	.word	0x000028d5
    22e8:	00001cc9 	.word	0x00001cc9
    22ec:	00003029 	.word	0x00003029
    22f0:	00001d05 	.word	0x00001d05
    22f4:	000030e9 	.word	0x000030e9
    22f8:	00002bd5 	.word	0x00002bd5
    22fc:	00003119 	.word	0x00003119
    2300:	00002835 	.word	0x00002835
    2304:	00002f51 	.word	0x00002f51
    2308:	0000273d 	.word	0x0000273d
    230c:	00002bed 	.word	0x00002bed

00002310 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2310:	b580      	push	{r7, lr}
    2312:	b088      	sub	sp, #32
    2314:	af00      	add	r7, sp, #0
    2316:	60f8      	str	r0, [r7, #12]
    2318:	60b9      	str	r1, [r7, #8]
    231a:	607a      	str	r2, [r7, #4]
    231c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    231e:	68fb      	ldr	r3, [r7, #12]
    2320:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    2322:	69bb      	ldr	r3, [r7, #24]
    2324:	2b00      	cmp	r3, #0
    2326:	d101      	bne.n	232c <xQueueGenericSendFromISR+0x1c>
    2328:	b672      	cpsid	i
    232a:	e7fe      	b.n	232a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    232c:	68bb      	ldr	r3, [r7, #8]
    232e:	2b00      	cmp	r3, #0
    2330:	d103      	bne.n	233a <xQueueGenericSendFromISR+0x2a>
    2332:	69bb      	ldr	r3, [r7, #24]
    2334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2336:	2b00      	cmp	r3, #0
    2338:	d101      	bne.n	233e <xQueueGenericSendFromISR+0x2e>
    233a:	2301      	movs	r3, #1
    233c:	e000      	b.n	2340 <xQueueGenericSendFromISR+0x30>
    233e:	2300      	movs	r3, #0
    2340:	2b00      	cmp	r3, #0
    2342:	d101      	bne.n	2348 <xQueueGenericSendFromISR+0x38>
    2344:	b672      	cpsid	i
    2346:	e7fe      	b.n	2346 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2348:	683b      	ldr	r3, [r7, #0]
    234a:	2b02      	cmp	r3, #2
    234c:	d103      	bne.n	2356 <xQueueGenericSendFromISR+0x46>
    234e:	69bb      	ldr	r3, [r7, #24]
    2350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2352:	2b01      	cmp	r3, #1
    2354:	d101      	bne.n	235a <xQueueGenericSendFromISR+0x4a>
    2356:	2301      	movs	r3, #1
    2358:	e000      	b.n	235c <xQueueGenericSendFromISR+0x4c>
    235a:	2300      	movs	r3, #0
    235c:	2b00      	cmp	r3, #0
    235e:	d101      	bne.n	2364 <xQueueGenericSendFromISR+0x54>
    2360:	b672      	cpsid	i
    2362:	e7fe      	b.n	2362 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2364:	4b28      	ldr	r3, [pc, #160]	; (2408 <xQueueGenericSendFromISR+0xf8>)
    2366:	4798      	blx	r3
    2368:	1c03      	adds	r3, r0, #0
    236a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    236c:	69bb      	ldr	r3, [r7, #24]
    236e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2370:	69bb      	ldr	r3, [r7, #24]
    2372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2374:	429a      	cmp	r2, r3
    2376:	d302      	bcc.n	237e <xQueueGenericSendFromISR+0x6e>
    2378:	683b      	ldr	r3, [r7, #0]
    237a:	2b02      	cmp	r3, #2
    237c:	d139      	bne.n	23f2 <xQueueGenericSendFromISR+0xe2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    237e:	69b9      	ldr	r1, [r7, #24]
    2380:	68ba      	ldr	r2, [r7, #8]
    2382:	683b      	ldr	r3, [r7, #0]
    2384:	1c08      	adds	r0, r1, #0
    2386:	1c11      	adds	r1, r2, #0
    2388:	1c1a      	adds	r2, r3, #0
    238a:	4b20      	ldr	r3, [pc, #128]	; (240c <xQueueGenericSendFromISR+0xfc>)
    238c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    238e:	69bb      	ldr	r3, [r7, #24]
    2390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2392:	3301      	adds	r3, #1
    2394:	d125      	bne.n	23e2 <xQueueGenericSendFromISR+0xd2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2396:	69bb      	ldr	r3, [r7, #24]
    2398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    239a:	2b00      	cmp	r3, #0
    239c:	d00f      	beq.n	23be <xQueueGenericSendFromISR+0xae>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    239e:	69ba      	ldr	r2, [r7, #24]
    23a0:	683b      	ldr	r3, [r7, #0]
    23a2:	1c10      	adds	r0, r2, #0
    23a4:	1c19      	adds	r1, r3, #0
    23a6:	4b1a      	ldr	r3, [pc, #104]	; (2410 <xQueueGenericSendFromISR+0x100>)
    23a8:	4798      	blx	r3
    23aa:	1e03      	subs	r3, r0, #0
    23ac:	2b01      	cmp	r3, #1
    23ae:	d11d      	bne.n	23ec <xQueueGenericSendFromISR+0xdc>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    23b0:	687b      	ldr	r3, [r7, #4]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d01a      	beq.n	23ec <xQueueGenericSendFromISR+0xdc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    23b6:	687b      	ldr	r3, [r7, #4]
    23b8:	2201      	movs	r2, #1
    23ba:	601a      	str	r2, [r3, #0]
    23bc:	e016      	b.n	23ec <xQueueGenericSendFromISR+0xdc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23be:	69bb      	ldr	r3, [r7, #24]
    23c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    23c2:	2b00      	cmp	r3, #0
    23c4:	d012      	beq.n	23ec <xQueueGenericSendFromISR+0xdc>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23c6:	69bb      	ldr	r3, [r7, #24]
    23c8:	3324      	adds	r3, #36	; 0x24
    23ca:	1c18      	adds	r0, r3, #0
    23cc:	4b11      	ldr	r3, [pc, #68]	; (2414 <xQueueGenericSendFromISR+0x104>)
    23ce:	4798      	blx	r3
    23d0:	1e03      	subs	r3, r0, #0
    23d2:	d00b      	beq.n	23ec <xQueueGenericSendFromISR+0xdc>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d008      	beq.n	23ec <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	2201      	movs	r2, #1
    23de:	601a      	str	r2, [r3, #0]
    23e0:	e004      	b.n	23ec <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    23e2:	69bb      	ldr	r3, [r7, #24]
    23e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    23e6:	1c5a      	adds	r2, r3, #1
    23e8:	69bb      	ldr	r3, [r7, #24]
    23ea:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    23ec:	2301      	movs	r3, #1
    23ee:	61fb      	str	r3, [r7, #28]
    23f0:	e001      	b.n	23f6 <xQueueGenericSendFromISR+0xe6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    23f2:	2300      	movs	r3, #0
    23f4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    23f6:	697b      	ldr	r3, [r7, #20]
    23f8:	1c18      	adds	r0, r3, #0
    23fa:	4b07      	ldr	r3, [pc, #28]	; (2418 <xQueueGenericSendFromISR+0x108>)
    23fc:	4798      	blx	r3

	return xReturn;
    23fe:	69fb      	ldr	r3, [r7, #28]
}
    2400:	1c18      	adds	r0, r3, #0
    2402:	46bd      	mov	sp, r7
    2404:	b008      	add	sp, #32
    2406:	bd80      	pop	{r7, pc}
    2408:	00001d31 	.word	0x00001d31
    240c:	0000260d 	.word	0x0000260d
    2410:	000028d5 	.word	0x000028d5
    2414:	00003029 	.word	0x00003029
    2418:	00001d3d 	.word	0x00001d3d

0000241c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    241c:	b580      	push	{r7, lr}
    241e:	b08a      	sub	sp, #40	; 0x28
    2420:	af00      	add	r7, sp, #0
    2422:	60f8      	str	r0, [r7, #12]
    2424:	60b9      	str	r1, [r7, #8]
    2426:	607a      	str	r2, [r7, #4]
    2428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    242a:	2300      	movs	r3, #0
    242c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    242e:	68fb      	ldr	r3, [r7, #12]
    2430:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    2432:	6a3b      	ldr	r3, [r7, #32]
    2434:	2b00      	cmp	r3, #0
    2436:	d101      	bne.n	243c <xQueueGenericReceive+0x20>
    2438:	b672      	cpsid	i
    243a:	e7fe      	b.n	243a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    243c:	68bb      	ldr	r3, [r7, #8]
    243e:	2b00      	cmp	r3, #0
    2440:	d103      	bne.n	244a <xQueueGenericReceive+0x2e>
    2442:	6a3b      	ldr	r3, [r7, #32]
    2444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2446:	2b00      	cmp	r3, #0
    2448:	d101      	bne.n	244e <xQueueGenericReceive+0x32>
    244a:	2301      	movs	r3, #1
    244c:	e000      	b.n	2450 <xQueueGenericReceive+0x34>
    244e:	2300      	movs	r3, #0
    2450:	2b00      	cmp	r3, #0
    2452:	d101      	bne.n	2458 <xQueueGenericReceive+0x3c>
    2454:	b672      	cpsid	i
    2456:	e7fe      	b.n	2456 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2458:	4b5d      	ldr	r3, [pc, #372]	; (25d0 <xQueueGenericReceive+0x1b4>)
    245a:	4798      	blx	r3
    245c:	1e03      	subs	r3, r0, #0
    245e:	d102      	bne.n	2466 <xQueueGenericReceive+0x4a>
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	2b00      	cmp	r3, #0
    2464:	d101      	bne.n	246a <xQueueGenericReceive+0x4e>
    2466:	2301      	movs	r3, #1
    2468:	e000      	b.n	246c <xQueueGenericReceive+0x50>
    246a:	2300      	movs	r3, #0
    246c:	2b00      	cmp	r3, #0
    246e:	d101      	bne.n	2474 <xQueueGenericReceive+0x58>
    2470:	b672      	cpsid	i
    2472:	e7fe      	b.n	2472 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2474:	4b57      	ldr	r3, [pc, #348]	; (25d4 <xQueueGenericReceive+0x1b8>)
    2476:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2478:	6a3b      	ldr	r3, [r7, #32]
    247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    247c:	2b00      	cmp	r3, #0
    247e:	d03c      	beq.n	24fa <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2480:	6a3b      	ldr	r3, [r7, #32]
    2482:	68db      	ldr	r3, [r3, #12]
    2484:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2486:	6a3a      	ldr	r2, [r7, #32]
    2488:	68bb      	ldr	r3, [r7, #8]
    248a:	1c10      	adds	r0, r2, #0
    248c:	1c19      	adds	r1, r3, #0
    248e:	4b52      	ldr	r3, [pc, #328]	; (25d8 <xQueueGenericReceive+0x1bc>)
    2490:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2492:	683b      	ldr	r3, [r7, #0]
    2494:	2b00      	cmp	r3, #0
    2496:	d11c      	bne.n	24d2 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2498:	6a3b      	ldr	r3, [r7, #32]
    249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    249c:	1e5a      	subs	r2, r3, #1
    249e:	6a3b      	ldr	r3, [r7, #32]
    24a0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    24a2:	6a3b      	ldr	r3, [r7, #32]
    24a4:	681b      	ldr	r3, [r3, #0]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d104      	bne.n	24b4 <xQueueGenericReceive+0x98>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    24aa:	4b4c      	ldr	r3, [pc, #304]	; (25dc <xQueueGenericReceive+0x1c0>)
    24ac:	4798      	blx	r3
    24ae:	1c02      	adds	r2, r0, #0
    24b0:	6a3b      	ldr	r3, [r7, #32]
    24b2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    24b4:	6a3b      	ldr	r3, [r7, #32]
    24b6:	691b      	ldr	r3, [r3, #16]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d01a      	beq.n	24f2 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    24bc:	6a3b      	ldr	r3, [r7, #32]
    24be:	3310      	adds	r3, #16
    24c0:	1c18      	adds	r0, r3, #0
    24c2:	4b47      	ldr	r3, [pc, #284]	; (25e0 <xQueueGenericReceive+0x1c4>)
    24c4:	4798      	blx	r3
    24c6:	1e03      	subs	r3, r0, #0
    24c8:	2b01      	cmp	r3, #1
    24ca:	d112      	bne.n	24f2 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    24cc:	4b45      	ldr	r3, [pc, #276]	; (25e4 <xQueueGenericReceive+0x1c8>)
    24ce:	4798      	blx	r3
    24d0:	e00f      	b.n	24f2 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    24d2:	6a3b      	ldr	r3, [r7, #32]
    24d4:	69fa      	ldr	r2, [r7, #28]
    24d6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    24d8:	6a3b      	ldr	r3, [r7, #32]
    24da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    24dc:	2b00      	cmp	r3, #0
    24de:	d008      	beq.n	24f2 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    24e0:	6a3b      	ldr	r3, [r7, #32]
    24e2:	3324      	adds	r3, #36	; 0x24
    24e4:	1c18      	adds	r0, r3, #0
    24e6:	4b3e      	ldr	r3, [pc, #248]	; (25e0 <xQueueGenericReceive+0x1c4>)
    24e8:	4798      	blx	r3
    24ea:	1e03      	subs	r3, r0, #0
    24ec:	d001      	beq.n	24f2 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    24ee:	4b3d      	ldr	r3, [pc, #244]	; (25e4 <xQueueGenericReceive+0x1c8>)
    24f0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    24f2:	4b3d      	ldr	r3, [pc, #244]	; (25e8 <xQueueGenericReceive+0x1cc>)
    24f4:	4798      	blx	r3
				return pdPASS;
    24f6:	2301      	movs	r3, #1
    24f8:	e065      	b.n	25c6 <xQueueGenericReceive+0x1aa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    24fa:	687b      	ldr	r3, [r7, #4]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d103      	bne.n	2508 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2500:	4b39      	ldr	r3, [pc, #228]	; (25e8 <xQueueGenericReceive+0x1cc>)
    2502:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2504:	2300      	movs	r3, #0
    2506:	e05e      	b.n	25c6 <xQueueGenericReceive+0x1aa>
				}
				else if( xEntryTimeSet == pdFALSE )
    2508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    250a:	2b00      	cmp	r3, #0
    250c:	d106      	bne.n	251c <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    250e:	2314      	movs	r3, #20
    2510:	18fb      	adds	r3, r7, r3
    2512:	1c18      	adds	r0, r3, #0
    2514:	4b35      	ldr	r3, [pc, #212]	; (25ec <xQueueGenericReceive+0x1d0>)
    2516:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2518:	2301      	movs	r3, #1
    251a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    251c:	4b32      	ldr	r3, [pc, #200]	; (25e8 <xQueueGenericReceive+0x1cc>)
    251e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2520:	4b33      	ldr	r3, [pc, #204]	; (25f0 <xQueueGenericReceive+0x1d4>)
    2522:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2524:	4b2b      	ldr	r3, [pc, #172]	; (25d4 <xQueueGenericReceive+0x1b8>)
    2526:	4798      	blx	r3
    2528:	6a3b      	ldr	r3, [r7, #32]
    252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    252c:	3301      	adds	r3, #1
    252e:	d102      	bne.n	2536 <xQueueGenericReceive+0x11a>
    2530:	6a3b      	ldr	r3, [r7, #32]
    2532:	2200      	movs	r2, #0
    2534:	645a      	str	r2, [r3, #68]	; 0x44
    2536:	6a3b      	ldr	r3, [r7, #32]
    2538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    253a:	3301      	adds	r3, #1
    253c:	d102      	bne.n	2544 <xQueueGenericReceive+0x128>
    253e:	6a3b      	ldr	r3, [r7, #32]
    2540:	2200      	movs	r2, #0
    2542:	649a      	str	r2, [r3, #72]	; 0x48
    2544:	4b28      	ldr	r3, [pc, #160]	; (25e8 <xQueueGenericReceive+0x1cc>)
    2546:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2548:	2314      	movs	r3, #20
    254a:	18fa      	adds	r2, r7, r3
    254c:	1d3b      	adds	r3, r7, #4
    254e:	1c10      	adds	r0, r2, #0
    2550:	1c19      	adds	r1, r3, #0
    2552:	4b28      	ldr	r3, [pc, #160]	; (25f4 <xQueueGenericReceive+0x1d8>)
    2554:	4798      	blx	r3
    2556:	1e03      	subs	r3, r0, #0
    2558:	d12c      	bne.n	25b4 <xQueueGenericReceive+0x198>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    255a:	6a3b      	ldr	r3, [r7, #32]
    255c:	1c18      	adds	r0, r3, #0
    255e:	4b26      	ldr	r3, [pc, #152]	; (25f8 <xQueueGenericReceive+0x1dc>)
    2560:	4798      	blx	r3
    2562:	1e03      	subs	r3, r0, #0
    2564:	d01f      	beq.n	25a6 <xQueueGenericReceive+0x18a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2566:	6a3b      	ldr	r3, [r7, #32]
    2568:	681b      	ldr	r3, [r3, #0]
    256a:	2b00      	cmp	r3, #0
    256c:	d108      	bne.n	2580 <xQueueGenericReceive+0x164>
					{
						taskENTER_CRITICAL();
    256e:	4b19      	ldr	r3, [pc, #100]	; (25d4 <xQueueGenericReceive+0x1b8>)
    2570:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2572:	6a3b      	ldr	r3, [r7, #32]
    2574:	685b      	ldr	r3, [r3, #4]
    2576:	1c18      	adds	r0, r3, #0
    2578:	4b20      	ldr	r3, [pc, #128]	; (25fc <xQueueGenericReceive+0x1e0>)
    257a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    257c:	4b1a      	ldr	r3, [pc, #104]	; (25e8 <xQueueGenericReceive+0x1cc>)
    257e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2580:	6a3b      	ldr	r3, [r7, #32]
    2582:	3324      	adds	r3, #36	; 0x24
    2584:	1c1a      	adds	r2, r3, #0
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	1c10      	adds	r0, r2, #0
    258a:	1c19      	adds	r1, r3, #0
    258c:	4b1c      	ldr	r3, [pc, #112]	; (2600 <xQueueGenericReceive+0x1e4>)
    258e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2590:	6a3b      	ldr	r3, [r7, #32]
    2592:	1c18      	adds	r0, r3, #0
    2594:	4b1b      	ldr	r3, [pc, #108]	; (2604 <xQueueGenericReceive+0x1e8>)
    2596:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2598:	4b1b      	ldr	r3, [pc, #108]	; (2608 <xQueueGenericReceive+0x1ec>)
    259a:	4798      	blx	r3
    259c:	1e03      	subs	r3, r0, #0
    259e:	d111      	bne.n	25c4 <xQueueGenericReceive+0x1a8>
				{
					portYIELD_WITHIN_API();
    25a0:	4b10      	ldr	r3, [pc, #64]	; (25e4 <xQueueGenericReceive+0x1c8>)
    25a2:	4798      	blx	r3
    25a4:	e00e      	b.n	25c4 <xQueueGenericReceive+0x1a8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    25a6:	6a3b      	ldr	r3, [r7, #32]
    25a8:	1c18      	adds	r0, r3, #0
    25aa:	4b16      	ldr	r3, [pc, #88]	; (2604 <xQueueGenericReceive+0x1e8>)
    25ac:	4798      	blx	r3
				( void ) xTaskResumeAll();
    25ae:	4b16      	ldr	r3, [pc, #88]	; (2608 <xQueueGenericReceive+0x1ec>)
    25b0:	4798      	blx	r3
    25b2:	e75f      	b.n	2474 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    25b4:	6a3b      	ldr	r3, [r7, #32]
    25b6:	1c18      	adds	r0, r3, #0
    25b8:	4b12      	ldr	r3, [pc, #72]	; (2604 <xQueueGenericReceive+0x1e8>)
    25ba:	4798      	blx	r3
			( void ) xTaskResumeAll();
    25bc:	4b12      	ldr	r3, [pc, #72]	; (2608 <xQueueGenericReceive+0x1ec>)
    25be:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    25c0:	2300      	movs	r3, #0
    25c2:	e000      	b.n	25c6 <xQueueGenericReceive+0x1aa>
		}
	}
    25c4:	e756      	b.n	2474 <xQueueGenericReceive+0x58>
}
    25c6:	1c18      	adds	r0, r3, #0
    25c8:	46bd      	mov	sp, r7
    25ca:	b00a      	add	sp, #40	; 0x28
    25cc:	bd80      	pop	{r7, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	00003501 	.word	0x00003501
    25d4:	00001ce5 	.word	0x00001ce5
    25d8:	000026e9 	.word	0x000026e9
    25dc:	000034e5 	.word	0x000034e5
    25e0:	00003029 	.word	0x00003029
    25e4:	00001cc9 	.word	0x00001cc9
    25e8:	00001d05 	.word	0x00001d05
    25ec:	000030e9 	.word	0x000030e9
    25f0:	00002bd5 	.word	0x00002bd5
    25f4:	00003119 	.word	0x00003119
    25f8:	00002801 	.word	0x00002801
    25fc:	00003539 	.word	0x00003539
    2600:	00002f51 	.word	0x00002f51
    2604:	0000273d 	.word	0x0000273d
    2608:	00002bed 	.word	0x00002bed

0000260c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    260c:	b580      	push	{r7, lr}
    260e:	b084      	sub	sp, #16
    2610:	af00      	add	r7, sp, #0
    2612:	60f8      	str	r0, [r7, #12]
    2614:	60b9      	str	r1, [r7, #8]
    2616:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2618:	68fb      	ldr	r3, [r7, #12]
    261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    261c:	2b00      	cmp	r3, #0
    261e:	d10c      	bne.n	263a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2620:	68fb      	ldr	r3, [r7, #12]
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	2b00      	cmp	r3, #0
    2626:	d153      	bne.n	26d0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2628:	68fb      	ldr	r3, [r7, #12]
    262a:	685b      	ldr	r3, [r3, #4]
    262c:	1c18      	adds	r0, r3, #0
    262e:	4b2c      	ldr	r3, [pc, #176]	; (26e0 <prvCopyDataToQueue+0xd4>)
    2630:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2632:	68fb      	ldr	r3, [r7, #12]
    2634:	2200      	movs	r2, #0
    2636:	605a      	str	r2, [r3, #4]
    2638:	e04a      	b.n	26d0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	2b00      	cmp	r3, #0
    263e:	d11b      	bne.n	2678 <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2640:	68fb      	ldr	r3, [r7, #12]
    2642:	6899      	ldr	r1, [r3, #8]
    2644:	68fb      	ldr	r3, [r7, #12]
    2646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2648:	68ba      	ldr	r2, [r7, #8]
    264a:	1c08      	adds	r0, r1, #0
    264c:	1c11      	adds	r1, r2, #0
    264e:	1c1a      	adds	r2, r3, #0
    2650:	4b24      	ldr	r3, [pc, #144]	; (26e4 <prvCopyDataToQueue+0xd8>)
    2652:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2654:	68fb      	ldr	r3, [r7, #12]
    2656:	689a      	ldr	r2, [r3, #8]
    2658:	68fb      	ldr	r3, [r7, #12]
    265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    265c:	18d2      	adds	r2, r2, r3
    265e:	68fb      	ldr	r3, [r7, #12]
    2660:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2662:	68fb      	ldr	r3, [r7, #12]
    2664:	689a      	ldr	r2, [r3, #8]
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	429a      	cmp	r2, r3
    266c:	d330      	bcc.n	26d0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    266e:	68fb      	ldr	r3, [r7, #12]
    2670:	681a      	ldr	r2, [r3, #0]
    2672:	68fb      	ldr	r3, [r7, #12]
    2674:	609a      	str	r2, [r3, #8]
    2676:	e02b      	b.n	26d0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2678:	68fb      	ldr	r3, [r7, #12]
    267a:	68d9      	ldr	r1, [r3, #12]
    267c:	68fb      	ldr	r3, [r7, #12]
    267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2680:	68ba      	ldr	r2, [r7, #8]
    2682:	1c08      	adds	r0, r1, #0
    2684:	1c11      	adds	r1, r2, #0
    2686:	1c1a      	adds	r2, r3, #0
    2688:	4b16      	ldr	r3, [pc, #88]	; (26e4 <prvCopyDataToQueue+0xd8>)
    268a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	68da      	ldr	r2, [r3, #12]
    2690:	68fb      	ldr	r3, [r7, #12]
    2692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2694:	425b      	negs	r3, r3
    2696:	18d2      	adds	r2, r2, r3
    2698:	68fb      	ldr	r3, [r7, #12]
    269a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    269c:	68fb      	ldr	r3, [r7, #12]
    269e:	68da      	ldr	r2, [r3, #12]
    26a0:	68fb      	ldr	r3, [r7, #12]
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	429a      	cmp	r2, r3
    26a6:	d207      	bcs.n	26b8 <prvCopyDataToQueue+0xac>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    26a8:	68fb      	ldr	r3, [r7, #12]
    26aa:	685a      	ldr	r2, [r3, #4]
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    26b0:	425b      	negs	r3, r3
    26b2:	18d2      	adds	r2, r2, r3
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	2b02      	cmp	r3, #2
    26bc:	d108      	bne.n	26d0 <prvCopyDataToQueue+0xc4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    26be:	68fb      	ldr	r3, [r7, #12]
    26c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26c2:	2b00      	cmp	r3, #0
    26c4:	d004      	beq.n	26d0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26ca:	1e5a      	subs	r2, r3, #1
    26cc:	68fb      	ldr	r3, [r7, #12]
    26ce:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    26d4:	1c5a      	adds	r2, r3, #1
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	639a      	str	r2, [r3, #56]	; 0x38
}
    26da:	46bd      	mov	sp, r7
    26dc:	b004      	add	sp, #16
    26de:	bd80      	pop	{r7, pc}
    26e0:	000035fd 	.word	0x000035fd
    26e4:	00005321 	.word	0x00005321

000026e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b082      	sub	sp, #8
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	681b      	ldr	r3, [r3, #0]
    26f6:	2b00      	cmp	r3, #0
    26f8:	d01a      	beq.n	2730 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	68da      	ldr	r2, [r3, #12]
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2702:	18d2      	adds	r2, r2, r3
    2704:	687b      	ldr	r3, [r7, #4]
    2706:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	68da      	ldr	r2, [r3, #12]
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	685b      	ldr	r3, [r3, #4]
    2710:	429a      	cmp	r2, r3
    2712:	d303      	bcc.n	271c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2714:	687b      	ldr	r3, [r7, #4]
    2716:	681a      	ldr	r2, [r3, #0]
    2718:	687b      	ldr	r3, [r7, #4]
    271a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	68da      	ldr	r2, [r3, #12]
    2720:	687b      	ldr	r3, [r7, #4]
    2722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2724:	6839      	ldr	r1, [r7, #0]
    2726:	1c08      	adds	r0, r1, #0
    2728:	1c11      	adds	r1, r2, #0
    272a:	1c1a      	adds	r2, r3, #0
    272c:	4b02      	ldr	r3, [pc, #8]	; (2738 <prvCopyDataFromQueue+0x50>)
    272e:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2730:	46bd      	mov	sp, r7
    2732:	b002      	add	sp, #8
    2734:	bd80      	pop	{r7, pc}
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	00005321 	.word	0x00005321

0000273c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    273c:	b580      	push	{r7, lr}
    273e:	b082      	sub	sp, #8
    2740:	af00      	add	r7, sp, #0
    2742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2744:	4b29      	ldr	r3, [pc, #164]	; (27ec <prvUnlockQueue+0xb0>)
    2746:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2748:	e022      	b.n	2790 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    274e:	2b00      	cmp	r3, #0
    2750:	d00a      	beq.n	2768 <prvUnlockQueue+0x2c>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	1c18      	adds	r0, r3, #0
    2756:	2100      	movs	r1, #0
    2758:	4b25      	ldr	r3, [pc, #148]	; (27f0 <prvUnlockQueue+0xb4>)
    275a:	4798      	blx	r3
    275c:	1e03      	subs	r3, r0, #0
    275e:	2b01      	cmp	r3, #1
    2760:	d111      	bne.n	2786 <prvUnlockQueue+0x4a>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    2762:	4b24      	ldr	r3, [pc, #144]	; (27f4 <prvUnlockQueue+0xb8>)
    2764:	4798      	blx	r3
    2766:	e00e      	b.n	2786 <prvUnlockQueue+0x4a>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    276c:	2b00      	cmp	r3, #0
    276e:	d009      	beq.n	2784 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	3324      	adds	r3, #36	; 0x24
    2774:	1c18      	adds	r0, r3, #0
    2776:	4b20      	ldr	r3, [pc, #128]	; (27f8 <prvUnlockQueue+0xbc>)
    2778:	4798      	blx	r3
    277a:	1e03      	subs	r3, r0, #0
    277c:	d003      	beq.n	2786 <prvUnlockQueue+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    277e:	4b1d      	ldr	r3, [pc, #116]	; (27f4 <prvUnlockQueue+0xb8>)
    2780:	4798      	blx	r3
    2782:	e000      	b.n	2786 <prvUnlockQueue+0x4a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    2784:	e008      	b.n	2798 <prvUnlockQueue+0x5c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    278a:	1e5a      	subs	r2, r3, #1
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2794:	2b00      	cmp	r3, #0
    2796:	dcd8      	bgt.n	274a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	2201      	movs	r2, #1
    279c:	4252      	negs	r2, r2
    279e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    27a0:	4b16      	ldr	r3, [pc, #88]	; (27fc <prvUnlockQueue+0xc0>)
    27a2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    27a4:	4b11      	ldr	r3, [pc, #68]	; (27ec <prvUnlockQueue+0xb0>)
    27a6:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    27a8:	e013      	b.n	27d2 <prvUnlockQueue+0x96>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	691b      	ldr	r3, [r3, #16]
    27ae:	2b00      	cmp	r3, #0
    27b0:	d00e      	beq.n	27d0 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	3310      	adds	r3, #16
    27b6:	1c18      	adds	r0, r3, #0
    27b8:	4b0f      	ldr	r3, [pc, #60]	; (27f8 <prvUnlockQueue+0xbc>)
    27ba:	4798      	blx	r3
    27bc:	1e03      	subs	r3, r0, #0
    27be:	d001      	beq.n	27c4 <prvUnlockQueue+0x88>
				{
					vTaskMissedYield();
    27c0:	4b0c      	ldr	r3, [pc, #48]	; (27f4 <prvUnlockQueue+0xb8>)
    27c2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27c8:	1e5a      	subs	r2, r3, #1
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	645a      	str	r2, [r3, #68]	; 0x44
    27ce:	e000      	b.n	27d2 <prvUnlockQueue+0x96>
			}
			else
			{
				break;
    27d0:	e003      	b.n	27da <prvUnlockQueue+0x9e>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    27d6:	2b00      	cmp	r3, #0
    27d8:	dce7      	bgt.n	27aa <prvUnlockQueue+0x6e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	2201      	movs	r2, #1
    27de:	4252      	negs	r2, r2
    27e0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    27e2:	4b06      	ldr	r3, [pc, #24]	; (27fc <prvUnlockQueue+0xc0>)
    27e4:	4798      	blx	r3
}
    27e6:	46bd      	mov	sp, r7
    27e8:	b002      	add	sp, #8
    27ea:	bd80      	pop	{r7, pc}
    27ec:	00001ce5 	.word	0x00001ce5
    27f0:	000028d5 	.word	0x000028d5
    27f4:	000031c1 	.word	0x000031c1
    27f8:	00003029 	.word	0x00003029
    27fc:	00001d05 	.word	0x00001d05

00002800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2800:	b580      	push	{r7, lr}
    2802:	b084      	sub	sp, #16
    2804:	af00      	add	r7, sp, #0
    2806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2808:	4b08      	ldr	r3, [pc, #32]	; (282c <prvIsQueueEmpty+0x2c>)
    280a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2810:	2b00      	cmp	r3, #0
    2812:	d102      	bne.n	281a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    2814:	2301      	movs	r3, #1
    2816:	60fb      	str	r3, [r7, #12]
    2818:	e001      	b.n	281e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    281a:	2300      	movs	r3, #0
    281c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    281e:	4b04      	ldr	r3, [pc, #16]	; (2830 <prvIsQueueEmpty+0x30>)
    2820:	4798      	blx	r3

	return xReturn;
    2822:	68fb      	ldr	r3, [r7, #12]
}
    2824:	1c18      	adds	r0, r3, #0
    2826:	46bd      	mov	sp, r7
    2828:	b004      	add	sp, #16
    282a:	bd80      	pop	{r7, pc}
    282c:	00001ce5 	.word	0x00001ce5
    2830:	00001d05 	.word	0x00001d05

00002834 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2834:	b580      	push	{r7, lr}
    2836:	b084      	sub	sp, #16
    2838:	af00      	add	r7, sp, #0
    283a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    283c:	4b09      	ldr	r3, [pc, #36]	; (2864 <prvIsQueueFull+0x30>)
    283e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2848:	429a      	cmp	r2, r3
    284a:	d102      	bne.n	2852 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    284c:	2301      	movs	r3, #1
    284e:	60fb      	str	r3, [r7, #12]
    2850:	e001      	b.n	2856 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    2852:	2300      	movs	r3, #0
    2854:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2856:	4b04      	ldr	r3, [pc, #16]	; (2868 <prvIsQueueFull+0x34>)
    2858:	4798      	blx	r3

	return xReturn;
    285a:	68fb      	ldr	r3, [r7, #12]
}
    285c:	1c18      	adds	r0, r3, #0
    285e:	46bd      	mov	sp, r7
    2860:	b004      	add	sp, #16
    2862:	bd80      	pop	{r7, pc}
    2864:	00001ce5 	.word	0x00001ce5
    2868:	00001d05 	.word	0x00001d05

0000286c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    286c:	b580      	push	{r7, lr}
    286e:	b084      	sub	sp, #16
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
    2874:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    287a:	4b12      	ldr	r3, [pc, #72]	; (28c4 <vQueueWaitForMessageRestricted+0x58>)
    287c:	4798      	blx	r3
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2882:	3301      	adds	r3, #1
    2884:	d102      	bne.n	288c <vQueueWaitForMessageRestricted+0x20>
    2886:	68fb      	ldr	r3, [r7, #12]
    2888:	2200      	movs	r2, #0
    288a:	645a      	str	r2, [r3, #68]	; 0x44
    288c:	68fb      	ldr	r3, [r7, #12]
    288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2890:	3301      	adds	r3, #1
    2892:	d102      	bne.n	289a <vQueueWaitForMessageRestricted+0x2e>
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	2200      	movs	r2, #0
    2898:	649a      	str	r2, [r3, #72]	; 0x48
    289a:	4b0b      	ldr	r3, [pc, #44]	; (28c8 <vQueueWaitForMessageRestricted+0x5c>)
    289c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    289e:	68fb      	ldr	r3, [r7, #12]
    28a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    28a2:	2b00      	cmp	r3, #0
    28a4:	d107      	bne.n	28b6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    28a6:	68fb      	ldr	r3, [r7, #12]
    28a8:	3324      	adds	r3, #36	; 0x24
    28aa:	1c1a      	adds	r2, r3, #0
    28ac:	683b      	ldr	r3, [r7, #0]
    28ae:	1c10      	adds	r0, r2, #0
    28b0:	1c19      	adds	r1, r3, #0
    28b2:	4b06      	ldr	r3, [pc, #24]	; (28cc <vQueueWaitForMessageRestricted+0x60>)
    28b4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    28b6:	68fb      	ldr	r3, [r7, #12]
    28b8:	1c18      	adds	r0, r3, #0
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <vQueueWaitForMessageRestricted+0x64>)
    28bc:	4798      	blx	r3
	}
    28be:	46bd      	mov	sp, r7
    28c0:	b004      	add	sp, #16
    28c2:	bd80      	pop	{r7, pc}
    28c4:	00001ce5 	.word	0x00001ce5
    28c8:	00001d05 	.word	0x00001d05
    28cc:	00002fcd 	.word	0x00002fcd
    28d0:	0000273d 	.word	0x0000273d

000028d4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    28d4:	b580      	push	{r7, lr}
    28d6:	b084      	sub	sp, #16
    28d8:	af00      	add	r7, sp, #0
    28da:	6078      	str	r0, [r7, #4]
    28dc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    28e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    28e4:	2300      	movs	r3, #0
    28e6:	60fb      	str	r3, [r7, #12]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    28e8:	68bb      	ldr	r3, [r7, #8]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d101      	bne.n	28f2 <prvNotifyQueueSetContainer+0x1e>
    28ee:	b672      	cpsid	i
    28f0:	e7fe      	b.n	28f0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    28f2:	68bb      	ldr	r3, [r7, #8]
    28f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    28fa:	429a      	cmp	r2, r3
    28fc:	d301      	bcc.n	2902 <prvNotifyQueueSetContainer+0x2e>
    28fe:	b672      	cpsid	i
    2900:	e7fe      	b.n	2900 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2906:	68bb      	ldr	r3, [r7, #8]
    2908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    290a:	429a      	cmp	r2, r3
    290c:	d214      	bcs.n	2938 <prvNotifyQueueSetContainer+0x64>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    290e:	68b9      	ldr	r1, [r7, #8]
    2910:	1d3a      	adds	r2, r7, #4
    2912:	683b      	ldr	r3, [r7, #0]
    2914:	1c08      	adds	r0, r1, #0
    2916:	1c11      	adds	r1, r2, #0
    2918:	1c1a      	adds	r2, r3, #0
    291a:	4b0a      	ldr	r3, [pc, #40]	; (2944 <prvNotifyQueueSetContainer+0x70>)
    291c:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    291e:	68bb      	ldr	r3, [r7, #8]
    2920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2922:	2b00      	cmp	r3, #0
    2924:	d008      	beq.n	2938 <prvNotifyQueueSetContainer+0x64>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2926:	68bb      	ldr	r3, [r7, #8]
    2928:	3324      	adds	r3, #36	; 0x24
    292a:	1c18      	adds	r0, r3, #0
    292c:	4b06      	ldr	r3, [pc, #24]	; (2948 <prvNotifyQueueSetContainer+0x74>)
    292e:	4798      	blx	r3
    2930:	1e03      	subs	r3, r0, #0
    2932:	d001      	beq.n	2938 <prvNotifyQueueSetContainer+0x64>
				{
					/* The task waiting has a higher priority */
					xReturn = pdTRUE;
    2934:	2301      	movs	r3, #1
    2936:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2938:	68fb      	ldr	r3, [r7, #12]
	}
    293a:	1c18      	adds	r0, r3, #0
    293c:	46bd      	mov	sp, r7
    293e:	b004      	add	sp, #16
    2940:	bd80      	pop	{r7, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	0000260d 	.word	0x0000260d
    2948:	00003029 	.word	0x00003029

0000294c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    294c:	b590      	push	{r4, r7, lr}
    294e:	b08b      	sub	sp, #44	; 0x2c
    2950:	af02      	add	r7, sp, #8
    2952:	60f8      	str	r0, [r7, #12]
    2954:	60b9      	str	r1, [r7, #8]
    2956:	603b      	str	r3, [r7, #0]
    2958:	1dbb      	adds	r3, r7, #6
    295a:	801a      	strh	r2, [r3, #0]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    295c:	68fb      	ldr	r3, [r7, #12]
    295e:	2b00      	cmp	r3, #0
    2960:	d101      	bne.n	2966 <xTaskGenericCreate+0x1a>
    2962:	b672      	cpsid	i
    2964:	e7fe      	b.n	2964 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    2966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2968:	2b04      	cmp	r3, #4
    296a:	d901      	bls.n	2970 <xTaskGenericCreate+0x24>
    296c:	b672      	cpsid	i
    296e:	e7fe      	b.n	296e <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2970:	1dbb      	adds	r3, r7, #6
    2972:	881a      	ldrh	r2, [r3, #0]
    2974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2976:	1c10      	adds	r0, r2, #0
    2978:	1c19      	adds	r1, r3, #0
    297a:	4b49      	ldr	r3, [pc, #292]	; (2aa0 <xTaskGenericCreate+0x154>)
    297c:	4798      	blx	r3
    297e:	1c03      	adds	r3, r0, #0
    2980:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
    2982:	69bb      	ldr	r3, [r7, #24]
    2984:	2b00      	cmp	r3, #0
    2986:	d100      	bne.n	298a <xTaskGenericCreate+0x3e>
    2988:	e072      	b.n	2a70 <xTaskGenericCreate+0x124>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    298a:	69bb      	ldr	r3, [r7, #24]
    298c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    298e:	1dbb      	adds	r3, r7, #6
    2990:	881b      	ldrh	r3, [r3, #0]
    2992:	4944      	ldr	r1, [pc, #272]	; (2aa4 <xTaskGenericCreate+0x158>)
    2994:	468c      	mov	ip, r1
    2996:	4463      	add	r3, ip
    2998:	009b      	lsls	r3, r3, #2
    299a:	18d3      	adds	r3, r2, r3
    299c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    299e:	697b      	ldr	r3, [r7, #20]
    29a0:	2207      	movs	r2, #7
    29a2:	4393      	bics	r3, r2
    29a4:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    29a6:	697b      	ldr	r3, [r7, #20]
    29a8:	2207      	movs	r2, #7
    29aa:	4013      	ands	r3, r2
    29ac:	d001      	beq.n	29b2 <xTaskGenericCreate+0x66>
    29ae:	b672      	cpsid	i
    29b0:	e7fe      	b.n	29b0 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    29b2:	69b8      	ldr	r0, [r7, #24]
    29b4:	68b9      	ldr	r1, [r7, #8]
    29b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    29b8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    29ba:	1dbb      	adds	r3, r7, #6
    29bc:	881b      	ldrh	r3, [r3, #0]
    29be:	9300      	str	r3, [sp, #0]
    29c0:	1c23      	adds	r3, r4, #0
    29c2:	4c39      	ldr	r4, [pc, #228]	; (2aa8 <xTaskGenericCreate+0x15c>)
    29c4:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    29c6:	6979      	ldr	r1, [r7, #20]
    29c8:	68fa      	ldr	r2, [r7, #12]
    29ca:	683b      	ldr	r3, [r7, #0]
    29cc:	1c08      	adds	r0, r1, #0
    29ce:	1c11      	adds	r1, r2, #0
    29d0:	1c1a      	adds	r2, r3, #0
    29d2:	4b36      	ldr	r3, [pc, #216]	; (2aac <xTaskGenericCreate+0x160>)
    29d4:	4798      	blx	r3
    29d6:	1c02      	adds	r2, r0, #0
    29d8:	69bb      	ldr	r3, [r7, #24]
    29da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    29dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    29de:	2b00      	cmp	r3, #0
    29e0:	d002      	beq.n	29e8 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    29e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    29e4:	69ba      	ldr	r2, [r7, #24]
    29e6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    29e8:	4b31      	ldr	r3, [pc, #196]	; (2ab0 <xTaskGenericCreate+0x164>)
    29ea:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    29ec:	4b31      	ldr	r3, [pc, #196]	; (2ab4 <xTaskGenericCreate+0x168>)
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	1c5a      	adds	r2, r3, #1
    29f2:	4b30      	ldr	r3, [pc, #192]	; (2ab4 <xTaskGenericCreate+0x168>)
    29f4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    29f6:	4b30      	ldr	r3, [pc, #192]	; (2ab8 <xTaskGenericCreate+0x16c>)
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d109      	bne.n	2a12 <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    29fe:	4b2e      	ldr	r3, [pc, #184]	; (2ab8 <xTaskGenericCreate+0x16c>)
    2a00:	69ba      	ldr	r2, [r7, #24]
    2a02:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2a04:	4b2b      	ldr	r3, [pc, #172]	; (2ab4 <xTaskGenericCreate+0x168>)
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	2b01      	cmp	r3, #1
    2a0a:	d10f      	bne.n	2a2c <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2a0c:	4b2b      	ldr	r3, [pc, #172]	; (2abc <xTaskGenericCreate+0x170>)
    2a0e:	4798      	blx	r3
    2a10:	e00c      	b.n	2a2c <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2a12:	4b2b      	ldr	r3, [pc, #172]	; (2ac0 <xTaskGenericCreate+0x174>)
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d108      	bne.n	2a2c <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2a1a:	4b27      	ldr	r3, [pc, #156]	; (2ab8 <xTaskGenericCreate+0x16c>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a22:	429a      	cmp	r2, r3
    2a24:	d802      	bhi.n	2a2c <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    2a26:	4b24      	ldr	r3, [pc, #144]	; (2ab8 <xTaskGenericCreate+0x16c>)
    2a28:	69ba      	ldr	r2, [r7, #24]
    2a2a:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2a2c:	4b25      	ldr	r3, [pc, #148]	; (2ac4 <xTaskGenericCreate+0x178>)
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	1c5a      	adds	r2, r3, #1
    2a32:	4b24      	ldr	r3, [pc, #144]	; (2ac4 <xTaskGenericCreate+0x178>)
    2a34:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2a36:	69bb      	ldr	r3, [r7, #24]
    2a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a3a:	4b23      	ldr	r3, [pc, #140]	; (2ac8 <xTaskGenericCreate+0x17c>)
    2a3c:	681b      	ldr	r3, [r3, #0]
    2a3e:	429a      	cmp	r2, r3
    2a40:	d903      	bls.n	2a4a <xTaskGenericCreate+0xfe>
    2a42:	69bb      	ldr	r3, [r7, #24]
    2a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a46:	4b20      	ldr	r3, [pc, #128]	; (2ac8 <xTaskGenericCreate+0x17c>)
    2a48:	601a      	str	r2, [r3, #0]
    2a4a:	69bb      	ldr	r3, [r7, #24]
    2a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a4e:	1c13      	adds	r3, r2, #0
    2a50:	009b      	lsls	r3, r3, #2
    2a52:	189b      	adds	r3, r3, r2
    2a54:	009b      	lsls	r3, r3, #2
    2a56:	4a1d      	ldr	r2, [pc, #116]	; (2acc <xTaskGenericCreate+0x180>)
    2a58:	189a      	adds	r2, r3, r2
    2a5a:	69bb      	ldr	r3, [r7, #24]
    2a5c:	3304      	adds	r3, #4
    2a5e:	1c10      	adds	r0, r2, #0
    2a60:	1c19      	adds	r1, r3, #0
    2a62:	4b1b      	ldr	r3, [pc, #108]	; (2ad0 <xTaskGenericCreate+0x184>)
    2a64:	4798      	blx	r3

			xReturn = pdPASS;
    2a66:	2301      	movs	r3, #1
    2a68:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2a6a:	4b1a      	ldr	r3, [pc, #104]	; (2ad4 <xTaskGenericCreate+0x188>)
    2a6c:	4798      	blx	r3
    2a6e:	e002      	b.n	2a76 <xTaskGenericCreate+0x12a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2a70:	2301      	movs	r3, #1
    2a72:	425b      	negs	r3, r3
    2a74:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2a76:	69fb      	ldr	r3, [r7, #28]
    2a78:	2b01      	cmp	r3, #1
    2a7a:	d10b      	bne.n	2a94 <xTaskGenericCreate+0x148>
	{
		if( xSchedulerRunning != pdFALSE )
    2a7c:	4b10      	ldr	r3, [pc, #64]	; (2ac0 <xTaskGenericCreate+0x174>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d007      	beq.n	2a94 <xTaskGenericCreate+0x148>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2a84:	4b0c      	ldr	r3, [pc, #48]	; (2ab8 <xTaskGenericCreate+0x16c>)
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a8c:	429a      	cmp	r2, r3
    2a8e:	d201      	bcs.n	2a94 <xTaskGenericCreate+0x148>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2a90:	4b11      	ldr	r3, [pc, #68]	; (2ad8 <xTaskGenericCreate+0x18c>)
    2a92:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2a94:	69fb      	ldr	r3, [r7, #28]
}
    2a96:	1c18      	adds	r0, r3, #0
    2a98:	46bd      	mov	sp, r7
    2a9a:	b009      	add	sp, #36	; 0x24
    2a9c:	bd90      	pop	{r4, r7, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	0000341d 	.word	0x0000341d
    2aa4:	3fffffff 	.word	0x3fffffff
    2aa8:	000031fd 	.word	0x000031fd
    2aac:	00001be5 	.word	0x00001be5
    2ab0:	00001ce5 	.word	0x00001ce5
    2ab4:	20003c28 	.word	0x20003c28
    2ab8:	20003b50 	.word	0x20003b50
    2abc:	00003295 	.word	0x00003295
    2ac0:	20003c34 	.word	0x20003c34
    2ac4:	20003c44 	.word	0x20003c44
    2ac8:	20003c30 	.word	0x20003c30
    2acc:	20003b54 	.word	0x20003b54
    2ad0:	00001eed 	.word	0x00001eed
    2ad4:	00001d05 	.word	0x00001d05
    2ad8:	00001cc9 	.word	0x00001cc9

00002adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2adc:	b580      	push	{r7, lr}
    2ade:	b084      	sub	sp, #16
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2ae4:	2300      	movs	r3, #0
    2ae6:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d01a      	beq.n	2b24 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    2aee:	4b11      	ldr	r3, [pc, #68]	; (2b34 <vTaskDelay+0x58>)
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d001      	beq.n	2afa <vTaskDelay+0x1e>
    2af6:	b672      	cpsid	i
    2af8:	e7fe      	b.n	2af8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    2afa:	4b0f      	ldr	r3, [pc, #60]	; (2b38 <vTaskDelay+0x5c>)
    2afc:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2afe:	4b0f      	ldr	r3, [pc, #60]	; (2b3c <vTaskDelay+0x60>)
    2b00:	681a      	ldr	r2, [r3, #0]
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	18d3      	adds	r3, r2, r3
    2b06:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2b08:	4b0d      	ldr	r3, [pc, #52]	; (2b40 <vTaskDelay+0x64>)
    2b0a:	681b      	ldr	r3, [r3, #0]
    2b0c:	3304      	adds	r3, #4
    2b0e:	1c18      	adds	r0, r3, #0
    2b10:	4b0c      	ldr	r3, [pc, #48]	; (2b44 <vTaskDelay+0x68>)
    2b12:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2b14:	68bb      	ldr	r3, [r7, #8]
    2b16:	1c18      	adds	r0, r3, #0
    2b18:	4b0b      	ldr	r3, [pc, #44]	; (2b48 <vTaskDelay+0x6c>)
    2b1a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <vTaskDelay+0x70>)
    2b1e:	4798      	blx	r3
    2b20:	1c03      	adds	r3, r0, #0
    2b22:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2b24:	68fb      	ldr	r3, [r7, #12]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d101      	bne.n	2b2e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2b2a:	4b09      	ldr	r3, [pc, #36]	; (2b50 <vTaskDelay+0x74>)
    2b2c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2b2e:	46bd      	mov	sp, r7
    2b30:	b004      	add	sp, #16
    2b32:	bd80      	pop	{r7, pc}
    2b34:	20003c48 	.word	0x20003c48
    2b38:	00002bd5 	.word	0x00002bd5
    2b3c:	20003c2c 	.word	0x20003c2c
    2b40:	20003b50 	.word	0x20003b50
    2b44:	00001f9d 	.word	0x00001f9d
    2b48:	000033ad 	.word	0x000033ad
    2b4c:	00002bed 	.word	0x00002bed
    2b50:	00001cc9 	.word	0x00001cc9

00002b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2b54:	b590      	push	{r4, r7, lr}
    2b56:	b087      	sub	sp, #28
    2b58:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2b5a:	4917      	ldr	r1, [pc, #92]	; (2bb8 <vTaskStartScheduler+0x64>)
    2b5c:	4a17      	ldr	r2, [pc, #92]	; (2bbc <vTaskStartScheduler+0x68>)
    2b5e:	2300      	movs	r3, #0
    2b60:	9300      	str	r3, [sp, #0]
    2b62:	2300      	movs	r3, #0
    2b64:	9301      	str	r3, [sp, #4]
    2b66:	2300      	movs	r3, #0
    2b68:	9302      	str	r3, [sp, #8]
    2b6a:	2300      	movs	r3, #0
    2b6c:	9303      	str	r3, [sp, #12]
    2b6e:	1c08      	adds	r0, r1, #0
    2b70:	1c11      	adds	r1, r2, #0
    2b72:	2264      	movs	r2, #100	; 0x64
    2b74:	2300      	movs	r3, #0
    2b76:	4c12      	ldr	r4, [pc, #72]	; (2bc0 <vTaskStartScheduler+0x6c>)
    2b78:	47a0      	blx	r4
    2b7a:	1c03      	adds	r3, r0, #0
    2b7c:	607b      	str	r3, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	2b01      	cmp	r3, #1
    2b82:	d103      	bne.n	2b8c <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2b84:	4b0f      	ldr	r3, [pc, #60]	; (2bc4 <vTaskStartScheduler+0x70>)
    2b86:	4798      	blx	r3
    2b88:	1c03      	adds	r3, r0, #0
    2b8a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	2b01      	cmp	r3, #1
    2b90:	d109      	bne.n	2ba6 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2b92:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2b94:	4b0c      	ldr	r3, [pc, #48]	; (2bc8 <vTaskStartScheduler+0x74>)
    2b96:	2201      	movs	r2, #1
    2b98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2b9a:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <vTaskStartScheduler+0x78>)
    2b9c:	2200      	movs	r2, #0
    2b9e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2ba0:	4b0b      	ldr	r3, [pc, #44]	; (2bd0 <vTaskStartScheduler+0x7c>)
    2ba2:	4798      	blx	r3
    2ba4:	e004      	b.n	2bb0 <vTaskStartScheduler+0x5c>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d101      	bne.n	2bb0 <vTaskStartScheduler+0x5c>
    2bac:	b672      	cpsid	i
    2bae:	e7fe      	b.n	2bae <vTaskStartScheduler+0x5a>
	}
}
    2bb0:	46bd      	mov	sp, r7
    2bb2:	b003      	add	sp, #12
    2bb4:	bd90      	pop	{r4, r7, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	000031d5 	.word	0x000031d5
    2bbc:	00006370 	.word	0x00006370
    2bc0:	0000294d 	.word	0x0000294d
    2bc4:	00003689 	.word	0x00003689
    2bc8:	20003c34 	.word	0x20003c34
    2bcc:	20003c2c 	.word	0x20003c2c
    2bd0:	00001c79 	.word	0x00001c79

00002bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2bd4:	b580      	push	{r7, lr}
    2bd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2bd8:	4b03      	ldr	r3, [pc, #12]	; (2be8 <vTaskSuspendAll+0x14>)
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	1c5a      	adds	r2, r3, #1
    2bde:	4b02      	ldr	r3, [pc, #8]	; (2be8 <vTaskSuspendAll+0x14>)
    2be0:	601a      	str	r2, [r3, #0]
}
    2be2:	46bd      	mov	sp, r7
    2be4:	bd80      	pop	{r7, pc}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	20003c48 	.word	0x20003c48

00002bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2bec:	b580      	push	{r7, lr}
    2bee:	b082      	sub	sp, #8
    2bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2bf2:	2300      	movs	r3, #0
    2bf4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2bf6:	4b37      	ldr	r3, [pc, #220]	; (2cd4 <xTaskResumeAll+0xe8>)
    2bf8:	681b      	ldr	r3, [r3, #0]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d101      	bne.n	2c02 <xTaskResumeAll+0x16>
    2bfe:	b672      	cpsid	i
    2c00:	e7fe      	b.n	2c00 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2c02:	4b35      	ldr	r3, [pc, #212]	; (2cd8 <xTaskResumeAll+0xec>)
    2c04:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2c06:	4b33      	ldr	r3, [pc, #204]	; (2cd4 <xTaskResumeAll+0xe8>)
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	1e5a      	subs	r2, r3, #1
    2c0c:	4b31      	ldr	r3, [pc, #196]	; (2cd4 <xTaskResumeAll+0xe8>)
    2c0e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2c10:	4b30      	ldr	r3, [pc, #192]	; (2cd4 <xTaskResumeAll+0xe8>)
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d155      	bne.n	2cc4 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2c18:	4b30      	ldr	r3, [pc, #192]	; (2cdc <xTaskResumeAll+0xf0>)
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d051      	beq.n	2cc4 <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2c20:	e02f      	b.n	2c82 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2c22:	4b2f      	ldr	r3, [pc, #188]	; (2ce0 <xTaskResumeAll+0xf4>)
    2c24:	68db      	ldr	r3, [r3, #12]
    2c26:	68db      	ldr	r3, [r3, #12]
    2c28:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	3318      	adds	r3, #24
    2c2e:	1c18      	adds	r0, r3, #0
    2c30:	4b2c      	ldr	r3, [pc, #176]	; (2ce4 <xTaskResumeAll+0xf8>)
    2c32:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2c34:	683b      	ldr	r3, [r7, #0]
    2c36:	3304      	adds	r3, #4
    2c38:	1c18      	adds	r0, r3, #0
    2c3a:	4b2a      	ldr	r3, [pc, #168]	; (2ce4 <xTaskResumeAll+0xf8>)
    2c3c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2c3e:	683b      	ldr	r3, [r7, #0]
    2c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c42:	4b29      	ldr	r3, [pc, #164]	; (2ce8 <xTaskResumeAll+0xfc>)
    2c44:	681b      	ldr	r3, [r3, #0]
    2c46:	429a      	cmp	r2, r3
    2c48:	d903      	bls.n	2c52 <xTaskResumeAll+0x66>
    2c4a:	683b      	ldr	r3, [r7, #0]
    2c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c4e:	4b26      	ldr	r3, [pc, #152]	; (2ce8 <xTaskResumeAll+0xfc>)
    2c50:	601a      	str	r2, [r3, #0]
    2c52:	683b      	ldr	r3, [r7, #0]
    2c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c56:	1c13      	adds	r3, r2, #0
    2c58:	009b      	lsls	r3, r3, #2
    2c5a:	189b      	adds	r3, r3, r2
    2c5c:	009b      	lsls	r3, r3, #2
    2c5e:	4a23      	ldr	r2, [pc, #140]	; (2cec <xTaskResumeAll+0x100>)
    2c60:	189a      	adds	r2, r3, r2
    2c62:	683b      	ldr	r3, [r7, #0]
    2c64:	3304      	adds	r3, #4
    2c66:	1c10      	adds	r0, r2, #0
    2c68:	1c19      	adds	r1, r3, #0
    2c6a:	4b21      	ldr	r3, [pc, #132]	; (2cf0 <xTaskResumeAll+0x104>)
    2c6c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2c6e:	683b      	ldr	r3, [r7, #0]
    2c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c72:	4b20      	ldr	r3, [pc, #128]	; (2cf4 <xTaskResumeAll+0x108>)
    2c74:	681b      	ldr	r3, [r3, #0]
    2c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c78:	429a      	cmp	r2, r3
    2c7a:	d302      	bcc.n	2c82 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
    2c7c:	4b1e      	ldr	r3, [pc, #120]	; (2cf8 <xTaskResumeAll+0x10c>)
    2c7e:	2201      	movs	r2, #1
    2c80:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2c82:	4b17      	ldr	r3, [pc, #92]	; (2ce0 <xTaskResumeAll+0xf4>)
    2c84:	681b      	ldr	r3, [r3, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d1cb      	bne.n	2c22 <xTaskResumeAll+0x36>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2c8a:	4b1c      	ldr	r3, [pc, #112]	; (2cfc <xTaskResumeAll+0x110>)
    2c8c:	681b      	ldr	r3, [r3, #0]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d010      	beq.n	2cb4 <xTaskResumeAll+0xc8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2c92:	e00b      	b.n	2cac <xTaskResumeAll+0xc0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    2c94:	4b1a      	ldr	r3, [pc, #104]	; (2d00 <xTaskResumeAll+0x114>)
    2c96:	4798      	blx	r3
    2c98:	1e03      	subs	r3, r0, #0
    2c9a:	d002      	beq.n	2ca2 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
    2c9c:	4b16      	ldr	r3, [pc, #88]	; (2cf8 <xTaskResumeAll+0x10c>)
    2c9e:	2201      	movs	r2, #1
    2ca0:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    2ca2:	4b16      	ldr	r3, [pc, #88]	; (2cfc <xTaskResumeAll+0x110>)
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	1e5a      	subs	r2, r3, #1
    2ca8:	4b14      	ldr	r3, [pc, #80]	; (2cfc <xTaskResumeAll+0x110>)
    2caa:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2cac:	4b13      	ldr	r3, [pc, #76]	; (2cfc <xTaskResumeAll+0x110>)
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d1ef      	bne.n	2c94 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2cb4:	4b10      	ldr	r3, [pc, #64]	; (2cf8 <xTaskResumeAll+0x10c>)
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	2b01      	cmp	r3, #1
    2cba:	d103      	bne.n	2cc4 <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    2cbc:	2301      	movs	r3, #1
    2cbe:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    2cc0:	4b10      	ldr	r3, [pc, #64]	; (2d04 <xTaskResumeAll+0x118>)
    2cc2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2cc4:	4b10      	ldr	r3, [pc, #64]	; (2d08 <xTaskResumeAll+0x11c>)
    2cc6:	4798      	blx	r3

	return xAlreadyYielded;
    2cc8:	687b      	ldr	r3, [r7, #4]
}
    2cca:	1c18      	adds	r0, r3, #0
    2ccc:	46bd      	mov	sp, r7
    2cce:	b002      	add	sp, #8
    2cd0:	bd80      	pop	{r7, pc}
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	20003c48 	.word	0x20003c48
    2cd8:	00001ce5 	.word	0x00001ce5
    2cdc:	20003c28 	.word	0x20003c28
    2ce0:	20003be8 	.word	0x20003be8
    2ce4:	00001f9d 	.word	0x00001f9d
    2ce8:	20003c30 	.word	0x20003c30
    2cec:	20003b54 	.word	0x20003b54
    2cf0:	00001eed 	.word	0x00001eed
    2cf4:	20003b50 	.word	0x20003b50
    2cf8:	20003c3c 	.word	0x20003c3c
    2cfc:	20003c38 	.word	0x20003c38
    2d00:	00002d39 	.word	0x00002d39
    2d04:	00001cc9 	.word	0x00001cc9
    2d08:	00001d05 	.word	0x00001d05

00002d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    2d0c:	b580      	push	{r7, lr}
    2d0e:	b082      	sub	sp, #8
    2d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2d12:	4b06      	ldr	r3, [pc, #24]	; (2d2c <xTaskGetTickCount+0x20>)
    2d14:	4798      	blx	r3
	{
		xTicks = xTickCount;
    2d16:	4b06      	ldr	r3, [pc, #24]	; (2d30 <xTaskGetTickCount+0x24>)
    2d18:	681b      	ldr	r3, [r3, #0]
    2d1a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    2d1c:	4b05      	ldr	r3, [pc, #20]	; (2d34 <xTaskGetTickCount+0x28>)
    2d1e:	4798      	blx	r3

	return xTicks;
    2d20:	687b      	ldr	r3, [r7, #4]
}
    2d22:	1c18      	adds	r0, r3, #0
    2d24:	46bd      	mov	sp, r7
    2d26:	b002      	add	sp, #8
    2d28:	bd80      	pop	{r7, pc}
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	00001ce5 	.word	0x00001ce5
    2d30:	20003c2c 	.word	0x20003c2c
    2d34:	00001d05 	.word	0x00001d05

00002d38 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b086      	sub	sp, #24
    2d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2d3e:	2300      	movs	r3, #0
    2d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2d42:	4b4d      	ldr	r3, [pc, #308]	; (2e78 <xTaskIncrementTick+0x140>)
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d000      	beq.n	2d4c <xTaskIncrementTick+0x14>
    2d4a:	e084      	b.n	2e56 <xTaskIncrementTick+0x11e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    2d4c:	4b4b      	ldr	r3, [pc, #300]	; (2e7c <xTaskIncrementTick+0x144>)
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	1c5a      	adds	r2, r3, #1
    2d52:	4b4a      	ldr	r3, [pc, #296]	; (2e7c <xTaskIncrementTick+0x144>)
    2d54:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2d56:	4b49      	ldr	r3, [pc, #292]	; (2e7c <xTaskIncrementTick+0x144>)
    2d58:	681b      	ldr	r3, [r3, #0]
    2d5a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
    2d5c:	693b      	ldr	r3, [r7, #16]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d117      	bne.n	2d92 <xTaskIncrementTick+0x5a>
			{
				taskSWITCH_DELAYED_LISTS();
    2d62:	4b47      	ldr	r3, [pc, #284]	; (2e80 <xTaskIncrementTick+0x148>)
    2d64:	681b      	ldr	r3, [r3, #0]
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	2b00      	cmp	r3, #0
    2d6a:	d001      	beq.n	2d70 <xTaskIncrementTick+0x38>
    2d6c:	b672      	cpsid	i
    2d6e:	e7fe      	b.n	2d6e <xTaskIncrementTick+0x36>
    2d70:	4b43      	ldr	r3, [pc, #268]	; (2e80 <xTaskIncrementTick+0x148>)
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	60fb      	str	r3, [r7, #12]
    2d76:	4b43      	ldr	r3, [pc, #268]	; (2e84 <xTaskIncrementTick+0x14c>)
    2d78:	681a      	ldr	r2, [r3, #0]
    2d7a:	4b41      	ldr	r3, [pc, #260]	; (2e80 <xTaskIncrementTick+0x148>)
    2d7c:	601a      	str	r2, [r3, #0]
    2d7e:	4b41      	ldr	r3, [pc, #260]	; (2e84 <xTaskIncrementTick+0x14c>)
    2d80:	68fa      	ldr	r2, [r7, #12]
    2d82:	601a      	str	r2, [r3, #0]
    2d84:	4b40      	ldr	r3, [pc, #256]	; (2e88 <xTaskIncrementTick+0x150>)
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	1c5a      	adds	r2, r3, #1
    2d8a:	4b3f      	ldr	r3, [pc, #252]	; (2e88 <xTaskIncrementTick+0x150>)
    2d8c:	601a      	str	r2, [r3, #0]
    2d8e:	4b3f      	ldr	r3, [pc, #252]	; (2e8c <xTaskIncrementTick+0x154>)
    2d90:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2d92:	4b3f      	ldr	r3, [pc, #252]	; (2e90 <xTaskIncrementTick+0x158>)
    2d94:	681b      	ldr	r3, [r3, #0]
    2d96:	693a      	ldr	r2, [r7, #16]
    2d98:	429a      	cmp	r2, r3
    2d9a:	d34e      	bcc.n	2e3a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2d9c:	4b38      	ldr	r3, [pc, #224]	; (2e80 <xTaskIncrementTick+0x148>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d101      	bne.n	2daa <xTaskIncrementTick+0x72>
    2da6:	2301      	movs	r3, #1
    2da8:	e000      	b.n	2dac <xTaskIncrementTick+0x74>
    2daa:	2300      	movs	r3, #0
    2dac:	2b00      	cmp	r3, #0
    2dae:	d004      	beq.n	2dba <xTaskIncrementTick+0x82>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    2db0:	4b37      	ldr	r3, [pc, #220]	; (2e90 <xTaskIncrementTick+0x158>)
    2db2:	2201      	movs	r2, #1
    2db4:	4252      	negs	r2, r2
    2db6:	601a      	str	r2, [r3, #0]
						break;
    2db8:	e03f      	b.n	2e3a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2dba:	4b31      	ldr	r3, [pc, #196]	; (2e80 <xTaskIncrementTick+0x148>)
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	68db      	ldr	r3, [r3, #12]
    2dc0:	68db      	ldr	r3, [r3, #12]
    2dc2:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2dc4:	68bb      	ldr	r3, [r7, #8]
    2dc6:	685b      	ldr	r3, [r3, #4]
    2dc8:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    2dca:	693a      	ldr	r2, [r7, #16]
    2dcc:	687b      	ldr	r3, [r7, #4]
    2dce:	429a      	cmp	r2, r3
    2dd0:	d203      	bcs.n	2dda <xTaskIncrementTick+0xa2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2dd2:	4b2f      	ldr	r3, [pc, #188]	; (2e90 <xTaskIncrementTick+0x158>)
    2dd4:	687a      	ldr	r2, [r7, #4]
    2dd6:	601a      	str	r2, [r3, #0]
							break;
    2dd8:	e02f      	b.n	2e3a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2dda:	68bb      	ldr	r3, [r7, #8]
    2ddc:	3304      	adds	r3, #4
    2dde:	1c18      	adds	r0, r3, #0
    2de0:	4b2c      	ldr	r3, [pc, #176]	; (2e94 <xTaskIncrementTick+0x15c>)
    2de2:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2de4:	68bb      	ldr	r3, [r7, #8]
    2de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2de8:	2b00      	cmp	r3, #0
    2dea:	d004      	beq.n	2df6 <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2dec:	68bb      	ldr	r3, [r7, #8]
    2dee:	3318      	adds	r3, #24
    2df0:	1c18      	adds	r0, r3, #0
    2df2:	4b28      	ldr	r3, [pc, #160]	; (2e94 <xTaskIncrementTick+0x15c>)
    2df4:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2df6:	68bb      	ldr	r3, [r7, #8]
    2df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2dfa:	4b27      	ldr	r3, [pc, #156]	; (2e98 <xTaskIncrementTick+0x160>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	429a      	cmp	r2, r3
    2e00:	d903      	bls.n	2e0a <xTaskIncrementTick+0xd2>
    2e02:	68bb      	ldr	r3, [r7, #8]
    2e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e06:	4b24      	ldr	r3, [pc, #144]	; (2e98 <xTaskIncrementTick+0x160>)
    2e08:	601a      	str	r2, [r3, #0]
    2e0a:	68bb      	ldr	r3, [r7, #8]
    2e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e0e:	1c13      	adds	r3, r2, #0
    2e10:	009b      	lsls	r3, r3, #2
    2e12:	189b      	adds	r3, r3, r2
    2e14:	009b      	lsls	r3, r3, #2
    2e16:	4a21      	ldr	r2, [pc, #132]	; (2e9c <xTaskIncrementTick+0x164>)
    2e18:	189a      	adds	r2, r3, r2
    2e1a:	68bb      	ldr	r3, [r7, #8]
    2e1c:	3304      	adds	r3, #4
    2e1e:	1c10      	adds	r0, r2, #0
    2e20:	1c19      	adds	r1, r3, #0
    2e22:	4b1f      	ldr	r3, [pc, #124]	; (2ea0 <xTaskIncrementTick+0x168>)
    2e24:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2e26:	68bb      	ldr	r3, [r7, #8]
    2e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e2a:	4b1e      	ldr	r3, [pc, #120]	; (2ea4 <xTaskIncrementTick+0x16c>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e30:	429a      	cmp	r2, r3
    2e32:	d301      	bcc.n	2e38 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
    2e34:	2301      	movs	r3, #1
    2e36:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    2e38:	e7b0      	b.n	2d9c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2e3a:	4b1a      	ldr	r3, [pc, #104]	; (2ea4 <xTaskIncrementTick+0x16c>)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e40:	4916      	ldr	r1, [pc, #88]	; (2e9c <xTaskIncrementTick+0x164>)
    2e42:	1c13      	adds	r3, r2, #0
    2e44:	009b      	lsls	r3, r3, #2
    2e46:	189b      	adds	r3, r3, r2
    2e48:	009b      	lsls	r3, r3, #2
    2e4a:	585b      	ldr	r3, [r3, r1]
    2e4c:	2b01      	cmp	r3, #1
    2e4e:	d907      	bls.n	2e60 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
    2e50:	2301      	movs	r3, #1
    2e52:	617b      	str	r3, [r7, #20]
    2e54:	e004      	b.n	2e60 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2e56:	4b14      	ldr	r3, [pc, #80]	; (2ea8 <xTaskIncrementTick+0x170>)
    2e58:	681b      	ldr	r3, [r3, #0]
    2e5a:	1c5a      	adds	r2, r3, #1
    2e5c:	4b12      	ldr	r3, [pc, #72]	; (2ea8 <xTaskIncrementTick+0x170>)
    2e5e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    2e60:	4b12      	ldr	r3, [pc, #72]	; (2eac <xTaskIncrementTick+0x174>)
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d001      	beq.n	2e6c <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
    2e68:	2301      	movs	r3, #1
    2e6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    2e6c:	697b      	ldr	r3, [r7, #20]
}
    2e6e:	1c18      	adds	r0, r3, #0
    2e70:	46bd      	mov	sp, r7
    2e72:	b006      	add	sp, #24
    2e74:	bd80      	pop	{r7, pc}
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	20003c48 	.word	0x20003c48
    2e7c:	20003c2c 	.word	0x20003c2c
    2e80:	20003be0 	.word	0x20003be0
    2e84:	20003be4 	.word	0x20003be4
    2e88:	20003c40 	.word	0x20003c40
    2e8c:	000034a1 	.word	0x000034a1
    2e90:	20000008 	.word	0x20000008
    2e94:	00001f9d 	.word	0x00001f9d
    2e98:	20003c30 	.word	0x20003c30
    2e9c:	20003b54 	.word	0x20003b54
    2ea0:	00001eed 	.word	0x00001eed
    2ea4:	20003b50 	.word	0x20003b50
    2ea8:	20003c38 	.word	0x20003c38
    2eac:	20003c3c 	.word	0x20003c3c

00002eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2eb6:	4b21      	ldr	r3, [pc, #132]	; (2f3c <vTaskSwitchContext+0x8c>)
    2eb8:	681b      	ldr	r3, [r3, #0]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d003      	beq.n	2ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2ebe:	4b20      	ldr	r3, [pc, #128]	; (2f40 <vTaskSwitchContext+0x90>)
    2ec0:	2201      	movs	r2, #1
    2ec2:	601a      	str	r2, [r3, #0]
    2ec4:	e036      	b.n	2f34 <vTaskSwitchContext+0x84>
	}
	else
	{
		xYieldPending = pdFALSE;
    2ec6:	4b1e      	ldr	r3, [pc, #120]	; (2f40 <vTaskSwitchContext+0x90>)
    2ec8:	2200      	movs	r2, #0
    2eca:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2ecc:	e00a      	b.n	2ee4 <vTaskSwitchContext+0x34>
    2ece:	4b1d      	ldr	r3, [pc, #116]	; (2f44 <vTaskSwitchContext+0x94>)
    2ed0:	681b      	ldr	r3, [r3, #0]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d101      	bne.n	2eda <vTaskSwitchContext+0x2a>
    2ed6:	b672      	cpsid	i
    2ed8:	e7fe      	b.n	2ed8 <vTaskSwitchContext+0x28>
    2eda:	4b1a      	ldr	r3, [pc, #104]	; (2f44 <vTaskSwitchContext+0x94>)
    2edc:	681b      	ldr	r3, [r3, #0]
    2ede:	1e5a      	subs	r2, r3, #1
    2ee0:	4b18      	ldr	r3, [pc, #96]	; (2f44 <vTaskSwitchContext+0x94>)
    2ee2:	601a      	str	r2, [r3, #0]
    2ee4:	4b17      	ldr	r3, [pc, #92]	; (2f44 <vTaskSwitchContext+0x94>)
    2ee6:	681a      	ldr	r2, [r3, #0]
    2ee8:	4917      	ldr	r1, [pc, #92]	; (2f48 <vTaskSwitchContext+0x98>)
    2eea:	1c13      	adds	r3, r2, #0
    2eec:	009b      	lsls	r3, r3, #2
    2eee:	189b      	adds	r3, r3, r2
    2ef0:	009b      	lsls	r3, r3, #2
    2ef2:	585b      	ldr	r3, [r3, r1]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d0ea      	beq.n	2ece <vTaskSwitchContext+0x1e>
    2ef8:	4b12      	ldr	r3, [pc, #72]	; (2f44 <vTaskSwitchContext+0x94>)
    2efa:	681a      	ldr	r2, [r3, #0]
    2efc:	1c13      	adds	r3, r2, #0
    2efe:	009b      	lsls	r3, r3, #2
    2f00:	189b      	adds	r3, r3, r2
    2f02:	009b      	lsls	r3, r3, #2
    2f04:	4a10      	ldr	r2, [pc, #64]	; (2f48 <vTaskSwitchContext+0x98>)
    2f06:	189b      	adds	r3, r3, r2
    2f08:	607b      	str	r3, [r7, #4]
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	685b      	ldr	r3, [r3, #4]
    2f0e:	685a      	ldr	r2, [r3, #4]
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	605a      	str	r2, [r3, #4]
    2f14:	687b      	ldr	r3, [r7, #4]
    2f16:	685a      	ldr	r2, [r3, #4]
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	3308      	adds	r3, #8
    2f1c:	429a      	cmp	r2, r3
    2f1e:	d104      	bne.n	2f2a <vTaskSwitchContext+0x7a>
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	685b      	ldr	r3, [r3, #4]
    2f24:	685a      	ldr	r2, [r3, #4]
    2f26:	687b      	ldr	r3, [r7, #4]
    2f28:	605a      	str	r2, [r3, #4]
    2f2a:	687b      	ldr	r3, [r7, #4]
    2f2c:	685b      	ldr	r3, [r3, #4]
    2f2e:	68da      	ldr	r2, [r3, #12]
    2f30:	4b06      	ldr	r3, [pc, #24]	; (2f4c <vTaskSwitchContext+0x9c>)
    2f32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2f34:	46bd      	mov	sp, r7
    2f36:	b002      	add	sp, #8
    2f38:	bd80      	pop	{r7, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	20003c48 	.word	0x20003c48
    2f40:	20003c3c 	.word	0x20003c3c
    2f44:	20003c30 	.word	0x20003c30
    2f48:	20003b54 	.word	0x20003b54
    2f4c:	20003b50 	.word	0x20003b50

00002f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b084      	sub	sp, #16
    2f54:	af00      	add	r7, sp, #0
    2f56:	6078      	str	r0, [r7, #4]
    2f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    2f5a:	687b      	ldr	r3, [r7, #4]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d101      	bne.n	2f64 <vTaskPlaceOnEventList+0x14>
    2f60:	b672      	cpsid	i
    2f62:	e7fe      	b.n	2f62 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2f64:	4b12      	ldr	r3, [pc, #72]	; (2fb0 <vTaskPlaceOnEventList+0x60>)
    2f66:	681b      	ldr	r3, [r3, #0]
    2f68:	3318      	adds	r3, #24
    2f6a:	687a      	ldr	r2, [r7, #4]
    2f6c:	1c10      	adds	r0, r2, #0
    2f6e:	1c19      	adds	r1, r3, #0
    2f70:	4b10      	ldr	r3, [pc, #64]	; (2fb4 <vTaskPlaceOnEventList+0x64>)
    2f72:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2f74:	4b0e      	ldr	r3, [pc, #56]	; (2fb0 <vTaskPlaceOnEventList+0x60>)
    2f76:	681b      	ldr	r3, [r3, #0]
    2f78:	3304      	adds	r3, #4
    2f7a:	1c18      	adds	r0, r3, #0
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <vTaskPlaceOnEventList+0x68>)
    2f7e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    2f80:	683b      	ldr	r3, [r7, #0]
    2f82:	3301      	adds	r3, #1
    2f84:	d108      	bne.n	2f98 <vTaskPlaceOnEventList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2f86:	4b0a      	ldr	r3, [pc, #40]	; (2fb0 <vTaskPlaceOnEventList+0x60>)
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	3304      	adds	r3, #4
    2f8c:	4a0b      	ldr	r2, [pc, #44]	; (2fbc <vTaskPlaceOnEventList+0x6c>)
    2f8e:	1c10      	adds	r0, r2, #0
    2f90:	1c19      	adds	r1, r3, #0
    2f92:	4b0b      	ldr	r3, [pc, #44]	; (2fc0 <vTaskPlaceOnEventList+0x70>)
    2f94:	4798      	blx	r3
    2f96:	e008      	b.n	2faa <vTaskPlaceOnEventList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    2f98:	4b0a      	ldr	r3, [pc, #40]	; (2fc4 <vTaskPlaceOnEventList+0x74>)
    2f9a:	681a      	ldr	r2, [r3, #0]
    2f9c:	683b      	ldr	r3, [r7, #0]
    2f9e:	18d3      	adds	r3, r2, r3
    2fa0:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2fa2:	68fb      	ldr	r3, [r7, #12]
    2fa4:	1c18      	adds	r0, r3, #0
    2fa6:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <vTaskPlaceOnEventList+0x78>)
    2fa8:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2faa:	46bd      	mov	sp, r7
    2fac:	b004      	add	sp, #16
    2fae:	bd80      	pop	{r7, pc}
    2fb0:	20003b50 	.word	0x20003b50
    2fb4:	00001f31 	.word	0x00001f31
    2fb8:	00001f9d 	.word	0x00001f9d
    2fbc:	20003c14 	.word	0x20003c14
    2fc0:	00001eed 	.word	0x00001eed
    2fc4:	20003c2c 	.word	0x20003c2c
    2fc8:	000033ad 	.word	0x000033ad

00002fcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b084      	sub	sp, #16
    2fd0:	af00      	add	r7, sp, #0
    2fd2:	6078      	str	r0, [r7, #4]
    2fd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d101      	bne.n	2fe0 <vTaskPlaceOnEventListRestricted+0x14>
    2fdc:	b672      	cpsid	i
    2fde:	e7fe      	b.n	2fde <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2fe0:	4b0c      	ldr	r3, [pc, #48]	; (3014 <vTaskPlaceOnEventListRestricted+0x48>)
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	3318      	adds	r3, #24
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	1c10      	adds	r0, r2, #0
    2fea:	1c19      	adds	r1, r3, #0
    2fec:	4b0a      	ldr	r3, [pc, #40]	; (3018 <vTaskPlaceOnEventListRestricted+0x4c>)
    2fee:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ff0:	4b08      	ldr	r3, [pc, #32]	; (3014 <vTaskPlaceOnEventListRestricted+0x48>)
    2ff2:	681b      	ldr	r3, [r3, #0]
    2ff4:	3304      	adds	r3, #4
    2ff6:	1c18      	adds	r0, r3, #0
    2ff8:	4b08      	ldr	r3, [pc, #32]	; (301c <vTaskPlaceOnEventListRestricted+0x50>)
    2ffa:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    2ffc:	4b08      	ldr	r3, [pc, #32]	; (3020 <vTaskPlaceOnEventListRestricted+0x54>)
    2ffe:	681a      	ldr	r2, [r3, #0]
    3000:	683b      	ldr	r3, [r7, #0]
    3002:	18d3      	adds	r3, r2, r3
    3004:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    3006:	68fb      	ldr	r3, [r7, #12]
    3008:	1c18      	adds	r0, r3, #0
    300a:	4b06      	ldr	r3, [pc, #24]	; (3024 <vTaskPlaceOnEventListRestricted+0x58>)
    300c:	4798      	blx	r3
	}
    300e:	46bd      	mov	sp, r7
    3010:	b004      	add	sp, #16
    3012:	bd80      	pop	{r7, pc}
    3014:	20003b50 	.word	0x20003b50
    3018:	00001eed 	.word	0x00001eed
    301c:	00001f9d 	.word	0x00001f9d
    3020:	20003c2c 	.word	0x20003c2c
    3024:	000033ad 	.word	0x000033ad

00003028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3028:	b580      	push	{r7, lr}
    302a:	b084      	sub	sp, #16
    302c:	af00      	add	r7, sp, #0
    302e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	68db      	ldr	r3, [r3, #12]
    3034:	68db      	ldr	r3, [r3, #12]
    3036:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    3038:	68bb      	ldr	r3, [r7, #8]
    303a:	2b00      	cmp	r3, #0
    303c:	d101      	bne.n	3042 <xTaskRemoveFromEventList+0x1a>
    303e:	b672      	cpsid	i
    3040:	e7fe      	b.n	3040 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3042:	68bb      	ldr	r3, [r7, #8]
    3044:	3318      	adds	r3, #24
    3046:	1c18      	adds	r0, r3, #0
    3048:	4b1f      	ldr	r3, [pc, #124]	; (30c8 <xTaskRemoveFromEventList+0xa0>)
    304a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    304c:	4b1f      	ldr	r3, [pc, #124]	; (30cc <xTaskRemoveFromEventList+0xa4>)
    304e:	681b      	ldr	r3, [r3, #0]
    3050:	2b00      	cmp	r3, #0
    3052:	d11d      	bne.n	3090 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	3304      	adds	r3, #4
    3058:	1c18      	adds	r0, r3, #0
    305a:	4b1b      	ldr	r3, [pc, #108]	; (30c8 <xTaskRemoveFromEventList+0xa0>)
    305c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    305e:	68bb      	ldr	r3, [r7, #8]
    3060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3062:	4b1b      	ldr	r3, [pc, #108]	; (30d0 <xTaskRemoveFromEventList+0xa8>)
    3064:	681b      	ldr	r3, [r3, #0]
    3066:	429a      	cmp	r2, r3
    3068:	d903      	bls.n	3072 <xTaskRemoveFromEventList+0x4a>
    306a:	68bb      	ldr	r3, [r7, #8]
    306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    306e:	4b18      	ldr	r3, [pc, #96]	; (30d0 <xTaskRemoveFromEventList+0xa8>)
    3070:	601a      	str	r2, [r3, #0]
    3072:	68bb      	ldr	r3, [r7, #8]
    3074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3076:	1c13      	adds	r3, r2, #0
    3078:	009b      	lsls	r3, r3, #2
    307a:	189b      	adds	r3, r3, r2
    307c:	009b      	lsls	r3, r3, #2
    307e:	4a15      	ldr	r2, [pc, #84]	; (30d4 <xTaskRemoveFromEventList+0xac>)
    3080:	189a      	adds	r2, r3, r2
    3082:	68bb      	ldr	r3, [r7, #8]
    3084:	3304      	adds	r3, #4
    3086:	1c10      	adds	r0, r2, #0
    3088:	1c19      	adds	r1, r3, #0
    308a:	4b13      	ldr	r3, [pc, #76]	; (30d8 <xTaskRemoveFromEventList+0xb0>)
    308c:	4798      	blx	r3
    308e:	e006      	b.n	309e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3090:	68bb      	ldr	r3, [r7, #8]
    3092:	3318      	adds	r3, #24
    3094:	4a11      	ldr	r2, [pc, #68]	; (30dc <xTaskRemoveFromEventList+0xb4>)
    3096:	1c10      	adds	r0, r2, #0
    3098:	1c19      	adds	r1, r3, #0
    309a:	4b0f      	ldr	r3, [pc, #60]	; (30d8 <xTaskRemoveFromEventList+0xb0>)
    309c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    309e:	68bb      	ldr	r3, [r7, #8]
    30a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30a2:	4b0f      	ldr	r3, [pc, #60]	; (30e0 <xTaskRemoveFromEventList+0xb8>)
    30a4:	681b      	ldr	r3, [r3, #0]
    30a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30a8:	429a      	cmp	r2, r3
    30aa:	d905      	bls.n	30b8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    30ac:	2301      	movs	r3, #1
    30ae:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    30b0:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <xTaskRemoveFromEventList+0xbc>)
    30b2:	2201      	movs	r2, #1
    30b4:	601a      	str	r2, [r3, #0]
    30b6:	e001      	b.n	30bc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    30b8:	2300      	movs	r3, #0
    30ba:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    30bc:	68fb      	ldr	r3, [r7, #12]
}
    30be:	1c18      	adds	r0, r3, #0
    30c0:	46bd      	mov	sp, r7
    30c2:	b004      	add	sp, #16
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	00001f9d 	.word	0x00001f9d
    30cc:	20003c48 	.word	0x20003c48
    30d0:	20003c30 	.word	0x20003c30
    30d4:	20003b54 	.word	0x20003b54
    30d8:	00001eed 	.word	0x00001eed
    30dc:	20003be8 	.word	0x20003be8
    30e0:	20003b50 	.word	0x20003b50
    30e4:	20003c3c 	.word	0x20003c3c

000030e8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    30e8:	b580      	push	{r7, lr}
    30ea:	b082      	sub	sp, #8
    30ec:	af00      	add	r7, sp, #0
    30ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	2b00      	cmp	r3, #0
    30f4:	d101      	bne.n	30fa <vTaskSetTimeOutState+0x12>
    30f6:	b672      	cpsid	i
    30f8:	e7fe      	b.n	30f8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    30fa:	4b05      	ldr	r3, [pc, #20]	; (3110 <vTaskSetTimeOutState+0x28>)
    30fc:	681a      	ldr	r2, [r3, #0]
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3102:	4b04      	ldr	r3, [pc, #16]	; (3114 <vTaskSetTimeOutState+0x2c>)
    3104:	681a      	ldr	r2, [r3, #0]
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	605a      	str	r2, [r3, #4]
}
    310a:	46bd      	mov	sp, r7
    310c:	b002      	add	sp, #8
    310e:	bd80      	pop	{r7, pc}
    3110:	20003c40 	.word	0x20003c40
    3114:	20003c2c 	.word	0x20003c2c

00003118 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3118:	b580      	push	{r7, lr}
    311a:	b084      	sub	sp, #16
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    3122:	687b      	ldr	r3, [r7, #4]
    3124:	2b00      	cmp	r3, #0
    3126:	d101      	bne.n	312c <xTaskCheckForTimeOut+0x14>
    3128:	b672      	cpsid	i
    312a:	e7fe      	b.n	312a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    312c:	683b      	ldr	r3, [r7, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d101      	bne.n	3136 <xTaskCheckForTimeOut+0x1e>
    3132:	b672      	cpsid	i
    3134:	e7fe      	b.n	3134 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    3136:	4b1d      	ldr	r3, [pc, #116]	; (31ac <xTaskCheckForTimeOut+0x94>)
    3138:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    313a:	4b1d      	ldr	r3, [pc, #116]	; (31b0 <xTaskCheckForTimeOut+0x98>)
    313c:	681b      	ldr	r3, [r3, #0]
    313e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3140:	683b      	ldr	r3, [r7, #0]
    3142:	681b      	ldr	r3, [r3, #0]
    3144:	3301      	adds	r3, #1
    3146:	d102      	bne.n	314e <xTaskCheckForTimeOut+0x36>
			{
				xReturn = pdFALSE;
    3148:	2300      	movs	r3, #0
    314a:	60fb      	str	r3, [r7, #12]
    314c:	e027      	b.n	319e <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    314e:	687b      	ldr	r3, [r7, #4]
    3150:	681a      	ldr	r2, [r3, #0]
    3152:	4b18      	ldr	r3, [pc, #96]	; (31b4 <xTaskCheckForTimeOut+0x9c>)
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	429a      	cmp	r2, r3
    3158:	d007      	beq.n	316a <xTaskCheckForTimeOut+0x52>
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	685a      	ldr	r2, [r3, #4]
    315e:	68bb      	ldr	r3, [r7, #8]
    3160:	429a      	cmp	r2, r3
    3162:	d802      	bhi.n	316a <xTaskCheckForTimeOut+0x52>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3164:	2301      	movs	r3, #1
    3166:	60fb      	str	r3, [r7, #12]
    3168:	e019      	b.n	319e <xTaskCheckForTimeOut+0x86>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    316a:	687b      	ldr	r3, [r7, #4]
    316c:	685b      	ldr	r3, [r3, #4]
    316e:	68ba      	ldr	r2, [r7, #8]
    3170:	1ad2      	subs	r2, r2, r3
    3172:	683b      	ldr	r3, [r7, #0]
    3174:	681b      	ldr	r3, [r3, #0]
    3176:	429a      	cmp	r2, r3
    3178:	d20f      	bcs.n	319a <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    317a:	683b      	ldr	r3, [r7, #0]
    317c:	681a      	ldr	r2, [r3, #0]
    317e:	687b      	ldr	r3, [r7, #4]
    3180:	6859      	ldr	r1, [r3, #4]
    3182:	68bb      	ldr	r3, [r7, #8]
    3184:	1acb      	subs	r3, r1, r3
    3186:	18d2      	adds	r2, r2, r3
    3188:	683b      	ldr	r3, [r7, #0]
    318a:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	1c18      	adds	r0, r3, #0
    3190:	4b09      	ldr	r3, [pc, #36]	; (31b8 <xTaskCheckForTimeOut+0xa0>)
    3192:	4798      	blx	r3
			xReturn = pdFALSE;
    3194:	2300      	movs	r3, #0
    3196:	60fb      	str	r3, [r7, #12]
    3198:	e001      	b.n	319e <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    319a:	2301      	movs	r3, #1
    319c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    319e:	4b07      	ldr	r3, [pc, #28]	; (31bc <xTaskCheckForTimeOut+0xa4>)
    31a0:	4798      	blx	r3

	return xReturn;
    31a2:	68fb      	ldr	r3, [r7, #12]
}
    31a4:	1c18      	adds	r0, r3, #0
    31a6:	46bd      	mov	sp, r7
    31a8:	b004      	add	sp, #16
    31aa:	bd80      	pop	{r7, pc}
    31ac:	00001ce5 	.word	0x00001ce5
    31b0:	20003c2c 	.word	0x20003c2c
    31b4:	20003c40 	.word	0x20003c40
    31b8:	000030e9 	.word	0x000030e9
    31bc:	00001d05 	.word	0x00001d05

000031c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    31c0:	b580      	push	{r7, lr}
    31c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    31c4:	4b02      	ldr	r3, [pc, #8]	; (31d0 <vTaskMissedYield+0x10>)
    31c6:	2201      	movs	r2, #1
    31c8:	601a      	str	r2, [r3, #0]
}
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	20003c3c 	.word	0x20003c3c

000031d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    31d4:	b580      	push	{r7, lr}
    31d6:	b082      	sub	sp, #8
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    31dc:	4b04      	ldr	r3, [pc, #16]	; (31f0 <prvIdleTask+0x1c>)
    31de:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <prvIdleTask+0x20>)
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	2b01      	cmp	r3, #1
    31e6:	d901      	bls.n	31ec <prvIdleTask+0x18>
			{
				taskYIELD();
    31e8:	4b03      	ldr	r3, [pc, #12]	; (31f8 <prvIdleTask+0x24>)
    31ea:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    31ec:	e7f6      	b.n	31dc <prvIdleTask+0x8>
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00003321 	.word	0x00003321
    31f4:	20003b54 	.word	0x20003b54
    31f8:	00001cc9 	.word	0x00001cc9

000031fc <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b086      	sub	sp, #24
    3200:	af00      	add	r7, sp, #0
    3202:	60f8      	str	r0, [r7, #12]
    3204:	60b9      	str	r1, [r7, #8]
    3206:	607a      	str	r2, [r7, #4]
    3208:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    320a:	2300      	movs	r3, #0
    320c:	617b      	str	r3, [r7, #20]
    320e:	e014      	b.n	323a <prvInitialiseTCBVariables+0x3e>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3210:	68ba      	ldr	r2, [r7, #8]
    3212:	697b      	ldr	r3, [r7, #20]
    3214:	18d3      	adds	r3, r2, r3
    3216:	7818      	ldrb	r0, [r3, #0]
    3218:	68fa      	ldr	r2, [r7, #12]
    321a:	2130      	movs	r1, #48	; 0x30
    321c:	697b      	ldr	r3, [r7, #20]
    321e:	18d3      	adds	r3, r2, r3
    3220:	185b      	adds	r3, r3, r1
    3222:	1c02      	adds	r2, r0, #0
    3224:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3226:	68ba      	ldr	r2, [r7, #8]
    3228:	697b      	ldr	r3, [r7, #20]
    322a:	18d3      	adds	r3, r2, r3
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	2b00      	cmp	r3, #0
    3230:	d100      	bne.n	3234 <prvInitialiseTCBVariables+0x38>
		{
			break;
    3232:	e005      	b.n	3240 <prvInitialiseTCBVariables+0x44>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3234:	697b      	ldr	r3, [r7, #20]
    3236:	3301      	adds	r3, #1
    3238:	617b      	str	r3, [r7, #20]
    323a:	697b      	ldr	r3, [r7, #20]
    323c:	2b07      	cmp	r3, #7
    323e:	d9e7      	bls.n	3210 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3240:	68fb      	ldr	r3, [r7, #12]
    3242:	223b      	movs	r2, #59	; 0x3b
    3244:	2100      	movs	r1, #0
    3246:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	2b04      	cmp	r3, #4
    324c:	d901      	bls.n	3252 <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    324e:	2304      	movs	r3, #4
    3250:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3252:	68fb      	ldr	r3, [r7, #12]
    3254:	687a      	ldr	r2, [r7, #4]
    3256:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3258:	68fb      	ldr	r3, [r7, #12]
    325a:	687a      	ldr	r2, [r7, #4]
    325c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    325e:	68fb      	ldr	r3, [r7, #12]
    3260:	3304      	adds	r3, #4
    3262:	1c18      	adds	r0, r3, #0
    3264:	4b0a      	ldr	r3, [pc, #40]	; (3290 <prvInitialiseTCBVariables+0x94>)
    3266:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3268:	68fb      	ldr	r3, [r7, #12]
    326a:	3318      	adds	r3, #24
    326c:	1c18      	adds	r0, r3, #0
    326e:	4b08      	ldr	r3, [pc, #32]	; (3290 <prvInitialiseTCBVariables+0x94>)
    3270:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3272:	68fb      	ldr	r3, [r7, #12]
    3274:	68fa      	ldr	r2, [r7, #12]
    3276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	2205      	movs	r2, #5
    327c:	1ad2      	subs	r2, r2, r3
    327e:	68fb      	ldr	r3, [r7, #12]
    3280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3282:	68fb      	ldr	r3, [r7, #12]
    3284:	68fa      	ldr	r2, [r7, #12]
    3286:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3288:	46bd      	mov	sp, r7
    328a:	b006      	add	sp, #24
    328c:	bd80      	pop	{r7, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00001ed9 	.word	0x00001ed9

00003294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    329a:	2300      	movs	r3, #0
    329c:	607b      	str	r3, [r7, #4]
    329e:	e00c      	b.n	32ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    32a0:	687a      	ldr	r2, [r7, #4]
    32a2:	1c13      	adds	r3, r2, #0
    32a4:	009b      	lsls	r3, r3, #2
    32a6:	189b      	adds	r3, r3, r2
    32a8:	009b      	lsls	r3, r3, #2
    32aa:	4a14      	ldr	r2, [pc, #80]	; (32fc <prvInitialiseTaskLists+0x68>)
    32ac:	189b      	adds	r3, r3, r2
    32ae:	1c18      	adds	r0, r3, #0
    32b0:	4b13      	ldr	r3, [pc, #76]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32b2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    32b4:	687b      	ldr	r3, [r7, #4]
    32b6:	3301      	adds	r3, #1
    32b8:	607b      	str	r3, [r7, #4]
    32ba:	687b      	ldr	r3, [r7, #4]
    32bc:	2b04      	cmp	r3, #4
    32be:	d9ef      	bls.n	32a0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    32c0:	4b10      	ldr	r3, [pc, #64]	; (3304 <prvInitialiseTaskLists+0x70>)
    32c2:	1c18      	adds	r0, r3, #0
    32c4:	4b0e      	ldr	r3, [pc, #56]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32c6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    32c8:	4b0f      	ldr	r3, [pc, #60]	; (3308 <prvInitialiseTaskLists+0x74>)
    32ca:	1c18      	adds	r0, r3, #0
    32cc:	4b0c      	ldr	r3, [pc, #48]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32ce:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    32d0:	4b0e      	ldr	r3, [pc, #56]	; (330c <prvInitialiseTaskLists+0x78>)
    32d2:	1c18      	adds	r0, r3, #0
    32d4:	4b0a      	ldr	r3, [pc, #40]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32d6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    32d8:	4b0d      	ldr	r3, [pc, #52]	; (3310 <prvInitialiseTaskLists+0x7c>)
    32da:	1c18      	adds	r0, r3, #0
    32dc:	4b08      	ldr	r3, [pc, #32]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32de:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    32e0:	4b0c      	ldr	r3, [pc, #48]	; (3314 <prvInitialiseTaskLists+0x80>)
    32e2:	1c18      	adds	r0, r3, #0
    32e4:	4b06      	ldr	r3, [pc, #24]	; (3300 <prvInitialiseTaskLists+0x6c>)
    32e6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    32e8:	4b0b      	ldr	r3, [pc, #44]	; (3318 <prvInitialiseTaskLists+0x84>)
    32ea:	4a06      	ldr	r2, [pc, #24]	; (3304 <prvInitialiseTaskLists+0x70>)
    32ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    32ee:	4b0b      	ldr	r3, [pc, #44]	; (331c <prvInitialiseTaskLists+0x88>)
    32f0:	4a05      	ldr	r2, [pc, #20]	; (3308 <prvInitialiseTaskLists+0x74>)
    32f2:	601a      	str	r2, [r3, #0]
}
    32f4:	46bd      	mov	sp, r7
    32f6:	b002      	add	sp, #8
    32f8:	bd80      	pop	{r7, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	20003b54 	.word	0x20003b54
    3300:	00001e9d 	.word	0x00001e9d
    3304:	20003bb8 	.word	0x20003bb8
    3308:	20003bcc 	.word	0x20003bcc
    330c:	20003be8 	.word	0x20003be8
    3310:	20003bfc 	.word	0x20003bfc
    3314:	20003c14 	.word	0x20003c14
    3318:	20003be0 	.word	0x20003be0
    331c:	20003be4 	.word	0x20003be4

00003320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3320:	b580      	push	{r7, lr}
    3322:	b082      	sub	sp, #8
    3324:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3326:	e027      	b.n	3378 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    3328:	4b17      	ldr	r3, [pc, #92]	; (3388 <prvCheckTasksWaitingTermination+0x68>)
    332a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    332c:	4b17      	ldr	r3, [pc, #92]	; (338c <prvCheckTasksWaitingTermination+0x6c>)
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	425a      	negs	r2, r3
    3332:	4153      	adcs	r3, r2
    3334:	b2db      	uxtb	r3, r3
    3336:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    3338:	4b15      	ldr	r3, [pc, #84]	; (3390 <prvCheckTasksWaitingTermination+0x70>)
    333a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	d11a      	bne.n	3378 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3342:	4b14      	ldr	r3, [pc, #80]	; (3394 <prvCheckTasksWaitingTermination+0x74>)
    3344:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3346:	4b11      	ldr	r3, [pc, #68]	; (338c <prvCheckTasksWaitingTermination+0x6c>)
    3348:	68db      	ldr	r3, [r3, #12]
    334a:	68db      	ldr	r3, [r3, #12]
    334c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    334e:	683b      	ldr	r3, [r7, #0]
    3350:	3304      	adds	r3, #4
    3352:	1c18      	adds	r0, r3, #0
    3354:	4b10      	ldr	r3, [pc, #64]	; (3398 <prvCheckTasksWaitingTermination+0x78>)
    3356:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    3358:	4b10      	ldr	r3, [pc, #64]	; (339c <prvCheckTasksWaitingTermination+0x7c>)
    335a:	681b      	ldr	r3, [r3, #0]
    335c:	1e5a      	subs	r2, r3, #1
    335e:	4b0f      	ldr	r3, [pc, #60]	; (339c <prvCheckTasksWaitingTermination+0x7c>)
    3360:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    3362:	4b0f      	ldr	r3, [pc, #60]	; (33a0 <prvCheckTasksWaitingTermination+0x80>)
    3364:	681b      	ldr	r3, [r3, #0]
    3366:	1e5a      	subs	r2, r3, #1
    3368:	4b0d      	ldr	r3, [pc, #52]	; (33a0 <prvCheckTasksWaitingTermination+0x80>)
    336a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    336c:	4b0d      	ldr	r3, [pc, #52]	; (33a4 <prvCheckTasksWaitingTermination+0x84>)
    336e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    3370:	683b      	ldr	r3, [r7, #0]
    3372:	1c18      	adds	r0, r3, #0
    3374:	4b0c      	ldr	r3, [pc, #48]	; (33a8 <prvCheckTasksWaitingTermination+0x88>)
    3376:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3378:	4b09      	ldr	r3, [pc, #36]	; (33a0 <prvCheckTasksWaitingTermination+0x80>)
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	2b00      	cmp	r3, #0
    337e:	d1d3      	bne.n	3328 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3380:	46bd      	mov	sp, r7
    3382:	b002      	add	sp, #8
    3384:	bd80      	pop	{r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	00002bd5 	.word	0x00002bd5
    338c:	20003bfc 	.word	0x20003bfc
    3390:	00002bed 	.word	0x00002bed
    3394:	00001ce5 	.word	0x00001ce5
    3398:	00001f9d 	.word	0x00001f9d
    339c:	20003c28 	.word	0x20003c28
    33a0:	20003c10 	.word	0x20003c10
    33a4:	00001d05 	.word	0x00001d05
    33a8:	0000347d 	.word	0x0000347d

000033ac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    33ac:	b580      	push	{r7, lr}
    33ae:	b082      	sub	sp, #8
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    33b4:	4b13      	ldr	r3, [pc, #76]	; (3404 <prvAddCurrentTaskToDelayedList+0x58>)
    33b6:	681b      	ldr	r3, [r3, #0]
    33b8:	687a      	ldr	r2, [r7, #4]
    33ba:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    33bc:	4b12      	ldr	r3, [pc, #72]	; (3408 <prvAddCurrentTaskToDelayedList+0x5c>)
    33be:	681b      	ldr	r3, [r3, #0]
    33c0:	687a      	ldr	r2, [r7, #4]
    33c2:	429a      	cmp	r2, r3
    33c4:	d209      	bcs.n	33da <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    33c6:	4b11      	ldr	r3, [pc, #68]	; (340c <prvAddCurrentTaskToDelayedList+0x60>)
    33c8:	681a      	ldr	r2, [r3, #0]
    33ca:	4b0e      	ldr	r3, [pc, #56]	; (3404 <prvAddCurrentTaskToDelayedList+0x58>)
    33cc:	681b      	ldr	r3, [r3, #0]
    33ce:	3304      	adds	r3, #4
    33d0:	1c10      	adds	r0, r2, #0
    33d2:	1c19      	adds	r1, r3, #0
    33d4:	4b0e      	ldr	r3, [pc, #56]	; (3410 <prvAddCurrentTaskToDelayedList+0x64>)
    33d6:	4798      	blx	r3
    33d8:	e010      	b.n	33fc <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    33da:	4b0e      	ldr	r3, [pc, #56]	; (3414 <prvAddCurrentTaskToDelayedList+0x68>)
    33dc:	681a      	ldr	r2, [r3, #0]
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <prvAddCurrentTaskToDelayedList+0x58>)
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	3304      	adds	r3, #4
    33e4:	1c10      	adds	r0, r2, #0
    33e6:	1c19      	adds	r1, r3, #0
    33e8:	4b09      	ldr	r3, [pc, #36]	; (3410 <prvAddCurrentTaskToDelayedList+0x64>)
    33ea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    33ec:	4b0a      	ldr	r3, [pc, #40]	; (3418 <prvAddCurrentTaskToDelayedList+0x6c>)
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	687a      	ldr	r2, [r7, #4]
    33f2:	429a      	cmp	r2, r3
    33f4:	d202      	bcs.n	33fc <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
    33f6:	4b08      	ldr	r3, [pc, #32]	; (3418 <prvAddCurrentTaskToDelayedList+0x6c>)
    33f8:	687a      	ldr	r2, [r7, #4]
    33fa:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    33fc:	46bd      	mov	sp, r7
    33fe:	b002      	add	sp, #8
    3400:	bd80      	pop	{r7, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	20003b50 	.word	0x20003b50
    3408:	20003c2c 	.word	0x20003c2c
    340c:	20003be4 	.word	0x20003be4
    3410:	00001f31 	.word	0x00001f31
    3414:	20003be0 	.word	0x20003be0
    3418:	20000008 	.word	0x20000008

0000341c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    341c:	b580      	push	{r7, lr}
    341e:	b084      	sub	sp, #16
    3420:	af00      	add	r7, sp, #0
    3422:	1c02      	adds	r2, r0, #0
    3424:	6039      	str	r1, [r7, #0]
    3426:	1dbb      	adds	r3, r7, #6
    3428:	801a      	strh	r2, [r3, #0]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    342a:	2040      	movs	r0, #64	; 0x40
    342c:	4b11      	ldr	r3, [pc, #68]	; (3474 <prvAllocateTCBAndStack+0x58>)
    342e:	4798      	blx	r3
    3430:	1c03      	adds	r3, r0, #0
    3432:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    3434:	68fb      	ldr	r3, [r7, #12]
    3436:	2b00      	cmp	r3, #0
    3438:	d017      	beq.n	346a <prvAllocateTCBAndStack+0x4e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    343a:	683b      	ldr	r3, [r7, #0]
    343c:	2b00      	cmp	r3, #0
    343e:	d107      	bne.n	3450 <prvAllocateTCBAndStack+0x34>
    3440:	1dbb      	adds	r3, r7, #6
    3442:	881b      	ldrh	r3, [r3, #0]
    3444:	009b      	lsls	r3, r3, #2
    3446:	1c18      	adds	r0, r3, #0
    3448:	4b0a      	ldr	r3, [pc, #40]	; (3474 <prvAllocateTCBAndStack+0x58>)
    344a:	4798      	blx	r3
    344c:	1c02      	adds	r2, r0, #0
    344e:	e000      	b.n	3452 <prvAllocateTCBAndStack+0x36>
    3450:	683a      	ldr	r2, [r7, #0]
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    345a:	2b00      	cmp	r3, #0
    345c:	d105      	bne.n	346a <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	1c18      	adds	r0, r3, #0
    3462:	4b05      	ldr	r3, [pc, #20]	; (3478 <prvAllocateTCBAndStack+0x5c>)
    3464:	4798      	blx	r3
			pxNewTCB = NULL;
    3466:	2300      	movs	r3, #0
    3468:	60fb      	str	r3, [r7, #12]
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
    346a:	68fb      	ldr	r3, [r7, #12]
}
    346c:	1c18      	adds	r0, r3, #0
    346e:	46bd      	mov	sp, r7
    3470:	b004      	add	sp, #16
    3472:	bd80      	pop	{r7, pc}
    3474:	00001df1 	.word	0x00001df1
    3478:	00001e85 	.word	0x00001e85

0000347c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    347c:	b580      	push	{r7, lr}
    347e:	b082      	sub	sp, #8
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3488:	1c18      	adds	r0, r3, #0
    348a:	4b04      	ldr	r3, [pc, #16]	; (349c <prvDeleteTCB+0x20>)
    348c:	4798      	blx	r3
		vPortFree( pxTCB );
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	1c18      	adds	r0, r3, #0
    3492:	4b02      	ldr	r3, [pc, #8]	; (349c <prvDeleteTCB+0x20>)
    3494:	4798      	blx	r3
	}
    3496:	46bd      	mov	sp, r7
    3498:	b002      	add	sp, #8
    349a:	bd80      	pop	{r7, pc}
    349c:	00001e85 	.word	0x00001e85

000034a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    34a6:	4b0d      	ldr	r3, [pc, #52]	; (34dc <prvResetNextTaskUnblockTime+0x3c>)
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d101      	bne.n	34b4 <prvResetNextTaskUnblockTime+0x14>
    34b0:	2301      	movs	r3, #1
    34b2:	e000      	b.n	34b6 <prvResetNextTaskUnblockTime+0x16>
    34b4:	2300      	movs	r3, #0
    34b6:	2b00      	cmp	r3, #0
    34b8:	d004      	beq.n	34c4 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    34ba:	4b09      	ldr	r3, [pc, #36]	; (34e0 <prvResetNextTaskUnblockTime+0x40>)
    34bc:	2201      	movs	r2, #1
    34be:	4252      	negs	r2, r2
    34c0:	601a      	str	r2, [r3, #0]
    34c2:	e008      	b.n	34d6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    34c4:	4b05      	ldr	r3, [pc, #20]	; (34dc <prvResetNextTaskUnblockTime+0x3c>)
    34c6:	681b      	ldr	r3, [r3, #0]
    34c8:	68db      	ldr	r3, [r3, #12]
    34ca:	68db      	ldr	r3, [r3, #12]
    34cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	685a      	ldr	r2, [r3, #4]
    34d2:	4b03      	ldr	r3, [pc, #12]	; (34e0 <prvResetNextTaskUnblockTime+0x40>)
    34d4:	601a      	str	r2, [r3, #0]
	}
}
    34d6:	46bd      	mov	sp, r7
    34d8:	b002      	add	sp, #8
    34da:	bd80      	pop	{r7, pc}
    34dc:	20003be0 	.word	0x20003be0
    34e0:	20000008 	.word	0x20000008

000034e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    34e4:	b580      	push	{r7, lr}
    34e6:	b082      	sub	sp, #8
    34e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    34ea:	4b04      	ldr	r3, [pc, #16]	; (34fc <xTaskGetCurrentTaskHandle+0x18>)
    34ec:	681b      	ldr	r3, [r3, #0]
    34ee:	607b      	str	r3, [r7, #4]

		return xReturn;
    34f0:	687b      	ldr	r3, [r7, #4]
	}
    34f2:	1c18      	adds	r0, r3, #0
    34f4:	46bd      	mov	sp, r7
    34f6:	b002      	add	sp, #8
    34f8:	bd80      	pop	{r7, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	20003b50 	.word	0x20003b50

00003500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3506:	4b0a      	ldr	r3, [pc, #40]	; (3530 <xTaskGetSchedulerState+0x30>)
    3508:	681b      	ldr	r3, [r3, #0]
    350a:	2b00      	cmp	r3, #0
    350c:	d102      	bne.n	3514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    350e:	2301      	movs	r3, #1
    3510:	607b      	str	r3, [r7, #4]
    3512:	e008      	b.n	3526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3514:	4b07      	ldr	r3, [pc, #28]	; (3534 <xTaskGetSchedulerState+0x34>)
    3516:	681b      	ldr	r3, [r3, #0]
    3518:	2b00      	cmp	r3, #0
    351a:	d102      	bne.n	3522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    351c:	2302      	movs	r3, #2
    351e:	607b      	str	r3, [r7, #4]
    3520:	e001      	b.n	3526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3522:	2300      	movs	r3, #0
    3524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    3526:	687b      	ldr	r3, [r7, #4]
	}
    3528:	1c18      	adds	r0, r3, #0
    352a:	46bd      	mov	sp, r7
    352c:	b002      	add	sp, #8
    352e:	bd80      	pop	{r7, pc}
    3530:	20003c34 	.word	0x20003c34
    3534:	20003c48 	.word	0x20003c48

00003538 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3538:	b580      	push	{r7, lr}
    353a:	b084      	sub	sp, #16
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	2b00      	cmp	r3, #0
    3548:	d04a      	beq.n	35e0 <vTaskPriorityInherit+0xa8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    354a:	68fb      	ldr	r3, [r7, #12]
    354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    354e:	4b26      	ldr	r3, [pc, #152]	; (35e8 <vTaskPriorityInherit+0xb0>)
    3550:	681b      	ldr	r3, [r3, #0]
    3552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3554:	429a      	cmp	r2, r3
    3556:	d243      	bcs.n	35e0 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3558:	68fb      	ldr	r3, [r7, #12]
    355a:	699b      	ldr	r3, [r3, #24]
    355c:	2b00      	cmp	r3, #0
    355e:	db06      	blt.n	356e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3560:	4b21      	ldr	r3, [pc, #132]	; (35e8 <vTaskPriorityInherit+0xb0>)
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3566:	2205      	movs	r2, #5
    3568:	1ad2      	subs	r2, r2, r3
    356a:	68fb      	ldr	r3, [r7, #12]
    356c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    356e:	68fb      	ldr	r3, [r7, #12]
    3570:	6959      	ldr	r1, [r3, #20]
    3572:	68fb      	ldr	r3, [r7, #12]
    3574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3576:	1c13      	adds	r3, r2, #0
    3578:	009b      	lsls	r3, r3, #2
    357a:	189b      	adds	r3, r3, r2
    357c:	009b      	lsls	r3, r3, #2
    357e:	4a1b      	ldr	r2, [pc, #108]	; (35ec <vTaskPriorityInherit+0xb4>)
    3580:	189b      	adds	r3, r3, r2
    3582:	4299      	cmp	r1, r3
    3584:	d101      	bne.n	358a <vTaskPriorityInherit+0x52>
    3586:	2301      	movs	r3, #1
    3588:	e000      	b.n	358c <vTaskPriorityInherit+0x54>
    358a:	2300      	movs	r3, #0
    358c:	2b00      	cmp	r3, #0
    358e:	d022      	beq.n	35d6 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3590:	68fb      	ldr	r3, [r7, #12]
    3592:	3304      	adds	r3, #4
    3594:	1c18      	adds	r0, r3, #0
    3596:	4b16      	ldr	r3, [pc, #88]	; (35f0 <vTaskPriorityInherit+0xb8>)
    3598:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    359a:	4b13      	ldr	r3, [pc, #76]	; (35e8 <vTaskPriorityInherit+0xb0>)
    359c:	681b      	ldr	r3, [r3, #0]
    359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35a0:	68fb      	ldr	r3, [r7, #12]
    35a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    35a4:	68fb      	ldr	r3, [r7, #12]
    35a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35a8:	4b12      	ldr	r3, [pc, #72]	; (35f4 <vTaskPriorityInherit+0xbc>)
    35aa:	681b      	ldr	r3, [r3, #0]
    35ac:	429a      	cmp	r2, r3
    35ae:	d903      	bls.n	35b8 <vTaskPriorityInherit+0x80>
    35b0:	68fb      	ldr	r3, [r7, #12]
    35b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35b4:	4b0f      	ldr	r3, [pc, #60]	; (35f4 <vTaskPriorityInherit+0xbc>)
    35b6:	601a      	str	r2, [r3, #0]
    35b8:	68fb      	ldr	r3, [r7, #12]
    35ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35bc:	1c13      	adds	r3, r2, #0
    35be:	009b      	lsls	r3, r3, #2
    35c0:	189b      	adds	r3, r3, r2
    35c2:	009b      	lsls	r3, r3, #2
    35c4:	4a09      	ldr	r2, [pc, #36]	; (35ec <vTaskPriorityInherit+0xb4>)
    35c6:	189a      	adds	r2, r3, r2
    35c8:	68fb      	ldr	r3, [r7, #12]
    35ca:	3304      	adds	r3, #4
    35cc:	1c10      	adds	r0, r2, #0
    35ce:	1c19      	adds	r1, r3, #0
    35d0:	4b09      	ldr	r3, [pc, #36]	; (35f8 <vTaskPriorityInherit+0xc0>)
    35d2:	4798      	blx	r3
    35d4:	e004      	b.n	35e0 <vTaskPriorityInherit+0xa8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    35d6:	4b04      	ldr	r3, [pc, #16]	; (35e8 <vTaskPriorityInherit+0xb0>)
    35d8:	681b      	ldr	r3, [r3, #0]
    35da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    35dc:	68fb      	ldr	r3, [r7, #12]
    35de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    35e0:	46bd      	mov	sp, r7
    35e2:	b004      	add	sp, #16
    35e4:	bd80      	pop	{r7, pc}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	20003b50 	.word	0x20003b50
    35ec:	20003b54 	.word	0x20003b54
    35f0:	00001f9d 	.word	0x00001f9d
    35f4:	20003c30 	.word	0x20003c30
    35f8:	00001eed 	.word	0x00001eed

000035fc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    35fc:	b580      	push	{r7, lr}
    35fe:	b084      	sub	sp, #16
    3600:	af00      	add	r7, sp, #0
    3602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	2b00      	cmp	r3, #0
    360c:	d030      	beq.n	3670 <vTaskPriorityDisinherit+0x74>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    360e:	68fb      	ldr	r3, [r7, #12]
    3610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3616:	429a      	cmp	r2, r3
    3618:	d02a      	beq.n	3670 <vTaskPriorityDisinherit+0x74>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	3304      	adds	r3, #4
    361e:	1c18      	adds	r0, r3, #0
    3620:	4b15      	ldr	r3, [pc, #84]	; (3678 <vTaskPriorityDisinherit+0x7c>)
    3622:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3628:	68fb      	ldr	r3, [r7, #12]
    362a:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    362c:	68fb      	ldr	r3, [r7, #12]
    362e:	699b      	ldr	r3, [r3, #24]
    3630:	2b00      	cmp	r3, #0
    3632:	db05      	blt.n	3640 <vTaskPriorityDisinherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3634:	68fb      	ldr	r3, [r7, #12]
    3636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3638:	2205      	movs	r2, #5
    363a:	1ad2      	subs	r2, r2, r3
    363c:	68fb      	ldr	r3, [r7, #12]
    363e:	619a      	str	r2, [r3, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    3640:	68fb      	ldr	r3, [r7, #12]
    3642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3644:	4b0d      	ldr	r3, [pc, #52]	; (367c <vTaskPriorityDisinherit+0x80>)
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	429a      	cmp	r2, r3
    364a:	d903      	bls.n	3654 <vTaskPriorityDisinherit+0x58>
    364c:	68fb      	ldr	r3, [r7, #12]
    364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3650:	4b0a      	ldr	r3, [pc, #40]	; (367c <vTaskPriorityDisinherit+0x80>)
    3652:	601a      	str	r2, [r3, #0]
    3654:	68fb      	ldr	r3, [r7, #12]
    3656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3658:	1c13      	adds	r3, r2, #0
    365a:	009b      	lsls	r3, r3, #2
    365c:	189b      	adds	r3, r3, r2
    365e:	009b      	lsls	r3, r3, #2
    3660:	4a07      	ldr	r2, [pc, #28]	; (3680 <vTaskPriorityDisinherit+0x84>)
    3662:	189a      	adds	r2, r3, r2
    3664:	68fb      	ldr	r3, [r7, #12]
    3666:	3304      	adds	r3, #4
    3668:	1c10      	adds	r0, r2, #0
    366a:	1c19      	adds	r1, r3, #0
    366c:	4b05      	ldr	r3, [pc, #20]	; (3684 <vTaskPriorityDisinherit+0x88>)
    366e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3670:	46bd      	mov	sp, r7
    3672:	b004      	add	sp, #16
    3674:	bd80      	pop	{r7, pc}
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	00001f9d 	.word	0x00001f9d
    367c:	20003c30 	.word	0x20003c30
    3680:	20003b54 	.word	0x20003b54
    3684:	00001eed 	.word	0x00001eed

00003688 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    3688:	b590      	push	{r4, r7, lr}
    368a:	b087      	sub	sp, #28
    368c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    368e:	2300      	movs	r3, #0
    3690:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    3692:	4b11      	ldr	r3, [pc, #68]	; (36d8 <xTimerCreateTimerTask+0x50>)
    3694:	4798      	blx	r3

	if( xTimerQueue != NULL )
    3696:	4b11      	ldr	r3, [pc, #68]	; (36dc <xTimerCreateTimerTask+0x54>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	2b00      	cmp	r3, #0
    369c:	d011      	beq.n	36c2 <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    369e:	4910      	ldr	r1, [pc, #64]	; (36e0 <xTimerCreateTimerTask+0x58>)
    36a0:	4a10      	ldr	r2, [pc, #64]	; (36e4 <xTimerCreateTimerTask+0x5c>)
    36a2:	2302      	movs	r3, #2
    36a4:	9300      	str	r3, [sp, #0]
    36a6:	2300      	movs	r3, #0
    36a8:	9301      	str	r3, [sp, #4]
    36aa:	2300      	movs	r3, #0
    36ac:	9302      	str	r3, [sp, #8]
    36ae:	2300      	movs	r3, #0
    36b0:	9303      	str	r3, [sp, #12]
    36b2:	1c08      	adds	r0, r1, #0
    36b4:	1c11      	adds	r1, r2, #0
    36b6:	2250      	movs	r2, #80	; 0x50
    36b8:	2300      	movs	r3, #0
    36ba:	4c0b      	ldr	r4, [pc, #44]	; (36e8 <xTimerCreateTimerTask+0x60>)
    36bc:	47a0      	blx	r4
    36be:	1c03      	adds	r3, r0, #0
    36c0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d101      	bne.n	36cc <xTimerCreateTimerTask+0x44>
    36c8:	b672      	cpsid	i
    36ca:	e7fe      	b.n	36ca <xTimerCreateTimerTask+0x42>
	return xReturn;
    36cc:	687b      	ldr	r3, [r7, #4]
}
    36ce:	1c18      	adds	r0, r3, #0
    36d0:	46bd      	mov	sp, r7
    36d2:	b003      	add	sp, #12
    36d4:	bd90      	pop	{r4, r7, pc}
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	00003bc5 	.word	0x00003bc5
    36dc:	20003c7c 	.word	0x20003c7c
    36e0:	00003819 	.word	0x00003819
    36e4:	00006378 	.word	0x00006378
    36e8:	0000294d 	.word	0x0000294d

000036ec <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    36ec:	b590      	push	{r4, r7, lr}
    36ee:	b089      	sub	sp, #36	; 0x24
    36f0:	af00      	add	r7, sp, #0
    36f2:	60f8      	str	r0, [r7, #12]
    36f4:	60b9      	str	r1, [r7, #8]
    36f6:	607a      	str	r2, [r7, #4]
    36f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    36fa:	2300      	movs	r3, #0
    36fc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    36fe:	4b22      	ldr	r3, [pc, #136]	; (3788 <xTimerGenericCommand+0x9c>)
    3700:	681b      	ldr	r3, [r3, #0]
    3702:	2b00      	cmp	r3, #0
    3704:	d03b      	beq.n	377e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    3706:	2310      	movs	r3, #16
    3708:	18fb      	adds	r3, r7, r3
    370a:	68ba      	ldr	r2, [r7, #8]
    370c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    370e:	2310      	movs	r3, #16
    3710:	18fb      	adds	r3, r7, r3
    3712:	687a      	ldr	r2, [r7, #4]
    3714:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3716:	2310      	movs	r3, #16
    3718:	18fb      	adds	r3, r7, r3
    371a:	68fa      	ldr	r2, [r7, #12]
    371c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    371e:	68bb      	ldr	r3, [r7, #8]
    3720:	2b05      	cmp	r3, #5
    3722:	dc1f      	bgt.n	3764 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3724:	4b19      	ldr	r3, [pc, #100]	; (378c <xTimerGenericCommand+0xa0>)
    3726:	4798      	blx	r3
    3728:	1e03      	subs	r3, r0, #0
    372a:	2b02      	cmp	r3, #2
    372c:	d10d      	bne.n	374a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    372e:	4b16      	ldr	r3, [pc, #88]	; (3788 <xTimerGenericCommand+0x9c>)
    3730:	6819      	ldr	r1, [r3, #0]
    3732:	2310      	movs	r3, #16
    3734:	18fa      	adds	r2, r7, r3
    3736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3738:	1c08      	adds	r0, r1, #0
    373a:	1c11      	adds	r1, r2, #0
    373c:	1c1a      	adds	r2, r3, #0
    373e:	2300      	movs	r3, #0
    3740:	4c13      	ldr	r4, [pc, #76]	; (3790 <xTimerGenericCommand+0xa4>)
    3742:	47a0      	blx	r4
    3744:	1c03      	adds	r3, r0, #0
    3746:	61fb      	str	r3, [r7, #28]
    3748:	e019      	b.n	377e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    374a:	4b0f      	ldr	r3, [pc, #60]	; (3788 <xTimerGenericCommand+0x9c>)
    374c:	681a      	ldr	r2, [r3, #0]
    374e:	2310      	movs	r3, #16
    3750:	18fb      	adds	r3, r7, r3
    3752:	1c10      	adds	r0, r2, #0
    3754:	1c19      	adds	r1, r3, #0
    3756:	2200      	movs	r2, #0
    3758:	2300      	movs	r3, #0
    375a:	4c0d      	ldr	r4, [pc, #52]	; (3790 <xTimerGenericCommand+0xa4>)
    375c:	47a0      	blx	r4
    375e:	1c03      	adds	r3, r0, #0
    3760:	61fb      	str	r3, [r7, #28]
    3762:	e00c      	b.n	377e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3764:	4b08      	ldr	r3, [pc, #32]	; (3788 <xTimerGenericCommand+0x9c>)
    3766:	6819      	ldr	r1, [r3, #0]
    3768:	2310      	movs	r3, #16
    376a:	18fa      	adds	r2, r7, r3
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	1c08      	adds	r0, r1, #0
    3770:	1c11      	adds	r1, r2, #0
    3772:	1c1a      	adds	r2, r3, #0
    3774:	2300      	movs	r3, #0
    3776:	4c07      	ldr	r4, [pc, #28]	; (3794 <xTimerGenericCommand+0xa8>)
    3778:	47a0      	blx	r4
    377a:	1c03      	adds	r3, r0, #0
    377c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    377e:	69fb      	ldr	r3, [r7, #28]
}
    3780:	1c18      	adds	r0, r3, #0
    3782:	46bd      	mov	sp, r7
    3784:	b009      	add	sp, #36	; 0x24
    3786:	bd90      	pop	{r4, r7, pc}
    3788:	20003c7c 	.word	0x20003c7c
    378c:	00003501 	.word	0x00003501
    3790:	00002141 	.word	0x00002141
    3794:	00002311 	.word	0x00002311

00003798 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3798:	b590      	push	{r4, r7, lr}
    379a:	b087      	sub	sp, #28
    379c:	af02      	add	r7, sp, #8
    379e:	6078      	str	r0, [r7, #4]
    37a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    37a2:	4b19      	ldr	r3, [pc, #100]	; (3808 <prvProcessExpiredTimer+0x70>)
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	68db      	ldr	r3, [r3, #12]
    37a8:	68db      	ldr	r3, [r3, #12]
    37aa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	3304      	adds	r3, #4
    37b0:	1c18      	adds	r0, r3, #0
    37b2:	4b16      	ldr	r3, [pc, #88]	; (380c <prvProcessExpiredTimer+0x74>)
    37b4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    37b6:	68fb      	ldr	r3, [r7, #12]
    37b8:	69db      	ldr	r3, [r3, #28]
    37ba:	2b01      	cmp	r3, #1
    37bc:	d11b      	bne.n	37f6 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    37be:	68fb      	ldr	r3, [r7, #12]
    37c0:	699a      	ldr	r2, [r3, #24]
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	18d1      	adds	r1, r2, r3
    37c6:	68f8      	ldr	r0, [r7, #12]
    37c8:	683a      	ldr	r2, [r7, #0]
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	4c10      	ldr	r4, [pc, #64]	; (3810 <prvProcessExpiredTimer+0x78>)
    37ce:	47a0      	blx	r4
    37d0:	1e03      	subs	r3, r0, #0
    37d2:	2b01      	cmp	r3, #1
    37d4:	d10f      	bne.n	37f6 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    37d6:	68f9      	ldr	r1, [r7, #12]
    37d8:	687a      	ldr	r2, [r7, #4]
    37da:	2300      	movs	r3, #0
    37dc:	9300      	str	r3, [sp, #0]
    37de:	1c08      	adds	r0, r1, #0
    37e0:	2100      	movs	r1, #0
    37e2:	2300      	movs	r3, #0
    37e4:	4c0b      	ldr	r4, [pc, #44]	; (3814 <prvProcessExpiredTimer+0x7c>)
    37e6:	47a0      	blx	r4
    37e8:	1c03      	adds	r3, r0, #0
    37ea:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    37ec:	68bb      	ldr	r3, [r7, #8]
    37ee:	2b00      	cmp	r3, #0
    37f0:	d101      	bne.n	37f6 <prvProcessExpiredTimer+0x5e>
    37f2:	b672      	cpsid	i
    37f4:	e7fe      	b.n	37f4 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    37f6:	68fb      	ldr	r3, [r7, #12]
    37f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    37fa:	68fa      	ldr	r2, [r7, #12]
    37fc:	1c10      	adds	r0, r2, #0
    37fe:	4798      	blx	r3
}
    3800:	46bd      	mov	sp, r7
    3802:	b005      	add	sp, #20
    3804:	bd90      	pop	{r4, r7, pc}
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	20003c74 	.word	0x20003c74
    380c:	00001f9d 	.word	0x00001f9d
    3810:	0000395d 	.word	0x0000395d
    3814:	000036ed 	.word	0x000036ed

00003818 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3818:	b580      	push	{r7, lr}
    381a:	b084      	sub	sp, #16
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    3820:	2308      	movs	r3, #8
    3822:	18fb      	adds	r3, r7, r3
    3824:	1c18      	adds	r0, r3, #0
    3826:	4b06      	ldr	r3, [pc, #24]	; (3840 <prvTimerTask+0x28>)
    3828:	4798      	blx	r3
    382a:	1c03      	adds	r3, r0, #0
    382c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    382e:	68bb      	ldr	r3, [r7, #8]
    3830:	68fa      	ldr	r2, [r7, #12]
    3832:	1c10      	adds	r0, r2, #0
    3834:	1c19      	adds	r1, r3, #0
    3836:	4b03      	ldr	r3, [pc, #12]	; (3844 <prvTimerTask+0x2c>)
    3838:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    383a:	4b03      	ldr	r3, [pc, #12]	; (3848 <prvTimerTask+0x30>)
    383c:	4798      	blx	r3
	}
    383e:	e7ef      	b.n	3820 <prvTimerTask+0x8>
    3840:	000038d5 	.word	0x000038d5
    3844:	0000384d 	.word	0x0000384d
    3848:	000039e5 	.word	0x000039e5

0000384c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    384c:	b580      	push	{r7, lr}
    384e:	b084      	sub	sp, #16
    3850:	af00      	add	r7, sp, #0
    3852:	6078      	str	r0, [r7, #4]
    3854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3856:	4b18      	ldr	r3, [pc, #96]	; (38b8 <prvProcessTimerOrBlockTask+0x6c>)
    3858:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    385a:	2308      	movs	r3, #8
    385c:	18fb      	adds	r3, r7, r3
    385e:	1c18      	adds	r0, r3, #0
    3860:	4b16      	ldr	r3, [pc, #88]	; (38bc <prvProcessTimerOrBlockTask+0x70>)
    3862:	4798      	blx	r3
    3864:	1c03      	adds	r3, r0, #0
    3866:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    3868:	68bb      	ldr	r3, [r7, #8]
    386a:	2b00      	cmp	r3, #0
    386c:	d11f      	bne.n	38ae <prvProcessTimerOrBlockTask+0x62>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    386e:	683b      	ldr	r3, [r7, #0]
    3870:	2b00      	cmp	r3, #0
    3872:	d10c      	bne.n	388e <prvProcessTimerOrBlockTask+0x42>
    3874:	687a      	ldr	r2, [r7, #4]
    3876:	68fb      	ldr	r3, [r7, #12]
    3878:	429a      	cmp	r2, r3
    387a:	d808      	bhi.n	388e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    387c:	4b10      	ldr	r3, [pc, #64]	; (38c0 <prvProcessTimerOrBlockTask+0x74>)
    387e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3880:	687a      	ldr	r2, [r7, #4]
    3882:	68fb      	ldr	r3, [r7, #12]
    3884:	1c10      	adds	r0, r2, #0
    3886:	1c19      	adds	r1, r3, #0
    3888:	4b0e      	ldr	r3, [pc, #56]	; (38c4 <prvProcessTimerOrBlockTask+0x78>)
    388a:	4798      	blx	r3
    388c:	e011      	b.n	38b2 <prvProcessTimerOrBlockTask+0x66>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    388e:	4b0e      	ldr	r3, [pc, #56]	; (38c8 <prvProcessTimerOrBlockTask+0x7c>)
    3890:	6819      	ldr	r1, [r3, #0]
    3892:	687a      	ldr	r2, [r7, #4]
    3894:	68fb      	ldr	r3, [r7, #12]
    3896:	1ad3      	subs	r3, r2, r3
    3898:	1c08      	adds	r0, r1, #0
    389a:	1c19      	adds	r1, r3, #0
    389c:	4b0b      	ldr	r3, [pc, #44]	; (38cc <prvProcessTimerOrBlockTask+0x80>)
    389e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    38a0:	4b07      	ldr	r3, [pc, #28]	; (38c0 <prvProcessTimerOrBlockTask+0x74>)
    38a2:	4798      	blx	r3
    38a4:	1e03      	subs	r3, r0, #0
    38a6:	d104      	bne.n	38b2 <prvProcessTimerOrBlockTask+0x66>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    38a8:	4b09      	ldr	r3, [pc, #36]	; (38d0 <prvProcessTimerOrBlockTask+0x84>)
    38aa:	4798      	blx	r3
    38ac:	e001      	b.n	38b2 <prvProcessTimerOrBlockTask+0x66>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    38ae:	4b04      	ldr	r3, [pc, #16]	; (38c0 <prvProcessTimerOrBlockTask+0x74>)
    38b0:	4798      	blx	r3
		}
	}
}
    38b2:	46bd      	mov	sp, r7
    38b4:	b004      	add	sp, #16
    38b6:	bd80      	pop	{r7, pc}
    38b8:	00002bd5 	.word	0x00002bd5
    38bc:	00003915 	.word	0x00003915
    38c0:	00002bed 	.word	0x00002bed
    38c4:	00003799 	.word	0x00003799
    38c8:	20003c7c 	.word	0x20003c7c
    38cc:	0000286d 	.word	0x0000286d
    38d0:	00001cc9 	.word	0x00001cc9

000038d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    38d4:	b580      	push	{r7, lr}
    38d6:	b084      	sub	sp, #16
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    38dc:	4b0c      	ldr	r3, [pc, #48]	; (3910 <prvGetNextExpireTime+0x3c>)
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	425a      	negs	r2, r3
    38e4:	4153      	adcs	r3, r2
    38e6:	b2db      	uxtb	r3, r3
    38e8:	1c1a      	adds	r2, r3, #0
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	2b00      	cmp	r3, #0
    38f4:	d105      	bne.n	3902 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    38f6:	4b06      	ldr	r3, [pc, #24]	; (3910 <prvGetNextExpireTime+0x3c>)
    38f8:	681b      	ldr	r3, [r3, #0]
    38fa:	68db      	ldr	r3, [r3, #12]
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	60fb      	str	r3, [r7, #12]
    3900:	e001      	b.n	3906 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3902:	2300      	movs	r3, #0
    3904:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    3906:	68fb      	ldr	r3, [r7, #12]
}
    3908:	1c18      	adds	r0, r3, #0
    390a:	46bd      	mov	sp, r7
    390c:	b004      	add	sp, #16
    390e:	bd80      	pop	{r7, pc}
    3910:	20003c74 	.word	0x20003c74

00003914 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3914:	b580      	push	{r7, lr}
    3916:	b084      	sub	sp, #16
    3918:	af00      	add	r7, sp, #0
    391a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    391c:	4b0c      	ldr	r3, [pc, #48]	; (3950 <prvSampleTimeNow+0x3c>)
    391e:	4798      	blx	r3
    3920:	1c03      	adds	r3, r0, #0
    3922:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <prvSampleTimeNow+0x40>)
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	68fa      	ldr	r2, [r7, #12]
    392a:	429a      	cmp	r2, r3
    392c:	d205      	bcs.n	393a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    392e:	4b0a      	ldr	r3, [pc, #40]	; (3958 <prvSampleTimeNow+0x44>)
    3930:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	2201      	movs	r2, #1
    3936:	601a      	str	r2, [r3, #0]
    3938:	e002      	b.n	3940 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	2200      	movs	r2, #0
    393e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    3940:	4b04      	ldr	r3, [pc, #16]	; (3954 <prvSampleTimeNow+0x40>)
    3942:	68fa      	ldr	r2, [r7, #12]
    3944:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    3946:	68fb      	ldr	r3, [r7, #12]
}
    3948:	1c18      	adds	r0, r3, #0
    394a:	46bd      	mov	sp, r7
    394c:	b004      	add	sp, #16
    394e:	bd80      	pop	{r7, pc}
    3950:	00002d0d 	.word	0x00002d0d
    3954:	20003c80 	.word	0x20003c80
    3958:	00003b05 	.word	0x00003b05

0000395c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    395c:	b580      	push	{r7, lr}
    395e:	b086      	sub	sp, #24
    3960:	af00      	add	r7, sp, #0
    3962:	60f8      	str	r0, [r7, #12]
    3964:	60b9      	str	r1, [r7, #8]
    3966:	607a      	str	r2, [r7, #4]
    3968:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    396a:	2300      	movs	r3, #0
    396c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	68ba      	ldr	r2, [r7, #8]
    3972:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	68fa      	ldr	r2, [r7, #12]
    3978:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    397a:	68ba      	ldr	r2, [r7, #8]
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	429a      	cmp	r2, r3
    3980:	d812      	bhi.n	39a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    3982:	687a      	ldr	r2, [r7, #4]
    3984:	683b      	ldr	r3, [r7, #0]
    3986:	1ad2      	subs	r2, r2, r3
    3988:	68fb      	ldr	r3, [r7, #12]
    398a:	699b      	ldr	r3, [r3, #24]
    398c:	429a      	cmp	r2, r3
    398e:	d302      	bcc.n	3996 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3990:	2301      	movs	r3, #1
    3992:	617b      	str	r3, [r7, #20]
    3994:	e01b      	b.n	39ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    3996:	4b10      	ldr	r3, [pc, #64]	; (39d8 <prvInsertTimerInActiveList+0x7c>)
    3998:	681a      	ldr	r2, [r3, #0]
    399a:	68fb      	ldr	r3, [r7, #12]
    399c:	3304      	adds	r3, #4
    399e:	1c10      	adds	r0, r2, #0
    39a0:	1c19      	adds	r1, r3, #0
    39a2:	4b0e      	ldr	r3, [pc, #56]	; (39dc <prvInsertTimerInActiveList+0x80>)
    39a4:	4798      	blx	r3
    39a6:	e012      	b.n	39ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    39a8:	687a      	ldr	r2, [r7, #4]
    39aa:	683b      	ldr	r3, [r7, #0]
    39ac:	429a      	cmp	r2, r3
    39ae:	d206      	bcs.n	39be <prvInsertTimerInActiveList+0x62>
    39b0:	68ba      	ldr	r2, [r7, #8]
    39b2:	683b      	ldr	r3, [r7, #0]
    39b4:	429a      	cmp	r2, r3
    39b6:	d302      	bcc.n	39be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    39b8:	2301      	movs	r3, #1
    39ba:	617b      	str	r3, [r7, #20]
    39bc:	e007      	b.n	39ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    39be:	4b08      	ldr	r3, [pc, #32]	; (39e0 <prvInsertTimerInActiveList+0x84>)
    39c0:	681a      	ldr	r2, [r3, #0]
    39c2:	68fb      	ldr	r3, [r7, #12]
    39c4:	3304      	adds	r3, #4
    39c6:	1c10      	adds	r0, r2, #0
    39c8:	1c19      	adds	r1, r3, #0
    39ca:	4b04      	ldr	r3, [pc, #16]	; (39dc <prvInsertTimerInActiveList+0x80>)
    39cc:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    39ce:	697b      	ldr	r3, [r7, #20]
}
    39d0:	1c18      	adds	r0, r3, #0
    39d2:	46bd      	mov	sp, r7
    39d4:	b006      	add	sp, #24
    39d6:	bd80      	pop	{r7, pc}
    39d8:	20003c78 	.word	0x20003c78
    39dc:	00001f31 	.word	0x00001f31
    39e0:	20003c74 	.word	0x20003c74

000039e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    39e4:	b590      	push	{r4, r7, lr}
    39e6:	b08b      	sub	sp, #44	; 0x2c
    39e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    39ea:	e06b      	b.n	3ac4 <prvProcessReceivedCommands+0xe0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    39ec:	2308      	movs	r3, #8
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	681b      	ldr	r3, [r3, #0]
    39f2:	2b00      	cmp	r3, #0
    39f4:	db66      	blt.n	3ac4 <prvProcessReceivedCommands+0xe0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    39f6:	2308      	movs	r3, #8
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	689b      	ldr	r3, [r3, #8]
    39fc:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    39fe:	69fb      	ldr	r3, [r7, #28]
    3a00:	695b      	ldr	r3, [r3, #20]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d004      	beq.n	3a10 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a06:	69fb      	ldr	r3, [r7, #28]
    3a08:	3304      	adds	r3, #4
    3a0a:	1c18      	adds	r0, r3, #0
    3a0c:	4b35      	ldr	r3, [pc, #212]	; (3ae4 <prvProcessReceivedCommands+0x100>)
    3a0e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3a10:	1d3b      	adds	r3, r7, #4
    3a12:	1c18      	adds	r0, r3, #0
    3a14:	4b34      	ldr	r3, [pc, #208]	; (3ae8 <prvProcessReceivedCommands+0x104>)
    3a16:	4798      	blx	r3
    3a18:	1c03      	adds	r3, r0, #0
    3a1a:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    3a1c:	2308      	movs	r3, #8
    3a1e:	18fb      	adds	r3, r7, r3
    3a20:	681b      	ldr	r3, [r3, #0]
    3a22:	2b09      	cmp	r3, #9
    3a24:	d84d      	bhi.n	3ac2 <prvProcessReceivedCommands+0xde>
    3a26:	009a      	lsls	r2, r3, #2
    3a28:	4b30      	ldr	r3, [pc, #192]	; (3aec <prvProcessReceivedCommands+0x108>)
    3a2a:	18d3      	adds	r3, r2, r3
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    3a30:	2308      	movs	r3, #8
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	685a      	ldr	r2, [r3, #4]
    3a36:	69fb      	ldr	r3, [r7, #28]
    3a38:	699b      	ldr	r3, [r3, #24]
    3a3a:	18d1      	adds	r1, r2, r3
    3a3c:	2308      	movs	r3, #8
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	685b      	ldr	r3, [r3, #4]
    3a42:	69f8      	ldr	r0, [r7, #28]
    3a44:	69ba      	ldr	r2, [r7, #24]
    3a46:	4c2a      	ldr	r4, [pc, #168]	; (3af0 <prvProcessReceivedCommands+0x10c>)
    3a48:	47a0      	blx	r4
    3a4a:	1e03      	subs	r3, r0, #0
    3a4c:	2b01      	cmp	r3, #1
    3a4e:	d11d      	bne.n	3a8c <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a50:	69fb      	ldr	r3, [r7, #28]
    3a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3a54:	69fa      	ldr	r2, [r7, #28]
    3a56:	1c10      	adds	r0, r2, #0
    3a58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3a5a:	69fb      	ldr	r3, [r7, #28]
    3a5c:	69db      	ldr	r3, [r3, #28]
    3a5e:	2b01      	cmp	r3, #1
    3a60:	d114      	bne.n	3a8c <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3a62:	2308      	movs	r3, #8
    3a64:	18fb      	adds	r3, r7, r3
    3a66:	685a      	ldr	r2, [r3, #4]
    3a68:	69fb      	ldr	r3, [r7, #28]
    3a6a:	699b      	ldr	r3, [r3, #24]
    3a6c:	18d2      	adds	r2, r2, r3
    3a6e:	69f9      	ldr	r1, [r7, #28]
    3a70:	2300      	movs	r3, #0
    3a72:	9300      	str	r3, [sp, #0]
    3a74:	1c08      	adds	r0, r1, #0
    3a76:	2100      	movs	r1, #0
    3a78:	2300      	movs	r3, #0
    3a7a:	4c1e      	ldr	r4, [pc, #120]	; (3af4 <prvProcessReceivedCommands+0x110>)
    3a7c:	47a0      	blx	r4
    3a7e:	1c03      	adds	r3, r0, #0
    3a80:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    3a82:	697b      	ldr	r3, [r7, #20]
    3a84:	2b00      	cmp	r3, #0
    3a86:	d101      	bne.n	3a8c <prvProcessReceivedCommands+0xa8>
    3a88:	b672      	cpsid	i
    3a8a:	e7fe      	b.n	3a8a <prvProcessReceivedCommands+0xa6>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    3a8c:	e01a      	b.n	3ac4 <prvProcessReceivedCommands+0xe0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3a8e:	2308      	movs	r3, #8
    3a90:	18fb      	adds	r3, r7, r3
    3a92:	685a      	ldr	r2, [r3, #4]
    3a94:	69fb      	ldr	r3, [r7, #28]
    3a96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3a98:	69fb      	ldr	r3, [r7, #28]
    3a9a:	699b      	ldr	r3, [r3, #24]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	d101      	bne.n	3aa4 <prvProcessReceivedCommands+0xc0>
    3aa0:	b672      	cpsid	i
    3aa2:	e7fe      	b.n	3aa2 <prvProcessReceivedCommands+0xbe>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3aa4:	69fb      	ldr	r3, [r7, #28]
    3aa6:	699a      	ldr	r2, [r3, #24]
    3aa8:	69bb      	ldr	r3, [r7, #24]
    3aaa:	18d1      	adds	r1, r2, r3
    3aac:	69f8      	ldr	r0, [r7, #28]
    3aae:	69ba      	ldr	r2, [r7, #24]
    3ab0:	69bb      	ldr	r3, [r7, #24]
    3ab2:	4c0f      	ldr	r4, [pc, #60]	; (3af0 <prvProcessReceivedCommands+0x10c>)
    3ab4:	47a0      	blx	r4
					break;
    3ab6:	e005      	b.n	3ac4 <prvProcessReceivedCommands+0xe0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    3ab8:	69fb      	ldr	r3, [r7, #28]
    3aba:	1c18      	adds	r0, r3, #0
    3abc:	4b0e      	ldr	r3, [pc, #56]	; (3af8 <prvProcessReceivedCommands+0x114>)
    3abe:	4798      	blx	r3
					break;
    3ac0:	e000      	b.n	3ac4 <prvProcessReceivedCommands+0xe0>

				default	:
					/* Don't expect to get here. */
					break;
    3ac2:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ac4:	4b0d      	ldr	r3, [pc, #52]	; (3afc <prvProcessReceivedCommands+0x118>)
    3ac6:	681a      	ldr	r2, [r3, #0]
    3ac8:	2308      	movs	r3, #8
    3aca:	18fb      	adds	r3, r7, r3
    3acc:	1c10      	adds	r0, r2, #0
    3ace:	1c19      	adds	r1, r3, #0
    3ad0:	2200      	movs	r2, #0
    3ad2:	2300      	movs	r3, #0
    3ad4:	4c0a      	ldr	r4, [pc, #40]	; (3b00 <prvProcessReceivedCommands+0x11c>)
    3ad6:	47a0      	blx	r4
    3ad8:	1e03      	subs	r3, r0, #0
    3ada:	d187      	bne.n	39ec <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    3adc:	46bd      	mov	sp, r7
    3ade:	b009      	add	sp, #36	; 0x24
    3ae0:	bd90      	pop	{r4, r7, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	00001f9d 	.word	0x00001f9d
    3ae8:	00003915 	.word	0x00003915
    3aec:	00006380 	.word	0x00006380
    3af0:	0000395d 	.word	0x0000395d
    3af4:	000036ed 	.word	0x000036ed
    3af8:	00001e85 	.word	0x00001e85
    3afc:	20003c7c 	.word	0x20003c7c
    3b00:	0000241d 	.word	0x0000241d

00003b04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    3b04:	b590      	push	{r4, r7, lr}
    3b06:	b089      	sub	sp, #36	; 0x24
    3b08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3b0a:	e03f      	b.n	3b8c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b0c:	4b28      	ldr	r3, [pc, #160]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	68db      	ldr	r3, [r3, #12]
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b16:	4b26      	ldr	r3, [pc, #152]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	68db      	ldr	r3, [r3, #12]
    3b1c:	68db      	ldr	r3, [r3, #12]
    3b1e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b20:	693b      	ldr	r3, [r7, #16]
    3b22:	3304      	adds	r3, #4
    3b24:	1c18      	adds	r0, r3, #0
    3b26:	4b23      	ldr	r3, [pc, #140]	; (3bb4 <prvSwitchTimerLists+0xb0>)
    3b28:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b2a:	693b      	ldr	r3, [r7, #16]
    3b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b2e:	693a      	ldr	r2, [r7, #16]
    3b30:	1c10      	adds	r0, r2, #0
    3b32:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3b34:	693b      	ldr	r3, [r7, #16]
    3b36:	69db      	ldr	r3, [r3, #28]
    3b38:	2b01      	cmp	r3, #1
    3b3a:	d127      	bne.n	3b8c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3b3c:	693b      	ldr	r3, [r7, #16]
    3b3e:	699a      	ldr	r2, [r3, #24]
    3b40:	697b      	ldr	r3, [r7, #20]
    3b42:	18d3      	adds	r3, r2, r3
    3b44:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    3b46:	68fa      	ldr	r2, [r7, #12]
    3b48:	697b      	ldr	r3, [r7, #20]
    3b4a:	429a      	cmp	r2, r3
    3b4c:	d90e      	bls.n	3b6c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3b4e:	693b      	ldr	r3, [r7, #16]
    3b50:	68fa      	ldr	r2, [r7, #12]
    3b52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3b54:	693b      	ldr	r3, [r7, #16]
    3b56:	693a      	ldr	r2, [r7, #16]
    3b58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3b5a:	4b15      	ldr	r3, [pc, #84]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3b5c:	681a      	ldr	r2, [r3, #0]
    3b5e:	693b      	ldr	r3, [r7, #16]
    3b60:	3304      	adds	r3, #4
    3b62:	1c10      	adds	r0, r2, #0
    3b64:	1c19      	adds	r1, r3, #0
    3b66:	4b14      	ldr	r3, [pc, #80]	; (3bb8 <prvSwitchTimerLists+0xb4>)
    3b68:	4798      	blx	r3
    3b6a:	e00f      	b.n	3b8c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3b6c:	6939      	ldr	r1, [r7, #16]
    3b6e:	697a      	ldr	r2, [r7, #20]
    3b70:	2300      	movs	r3, #0
    3b72:	9300      	str	r3, [sp, #0]
    3b74:	1c08      	adds	r0, r1, #0
    3b76:	2100      	movs	r1, #0
    3b78:	2300      	movs	r3, #0
    3b7a:	4c10      	ldr	r4, [pc, #64]	; (3bbc <prvSwitchTimerLists+0xb8>)
    3b7c:	47a0      	blx	r4
    3b7e:	1c03      	adds	r3, r0, #0
    3b80:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    3b82:	68bb      	ldr	r3, [r7, #8]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d101      	bne.n	3b8c <prvSwitchTimerLists+0x88>
    3b88:	b672      	cpsid	i
    3b8a:	e7fe      	b.n	3b8a <prvSwitchTimerLists+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3b8c:	4b08      	ldr	r3, [pc, #32]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3b8e:	681b      	ldr	r3, [r3, #0]
    3b90:	681b      	ldr	r3, [r3, #0]
    3b92:	2b00      	cmp	r3, #0
    3b94:	d1ba      	bne.n	3b0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    3b96:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    3b9c:	4b08      	ldr	r3, [pc, #32]	; (3bc0 <prvSwitchTimerLists+0xbc>)
    3b9e:	681a      	ldr	r2, [r3, #0]
    3ba0:	4b03      	ldr	r3, [pc, #12]	; (3bb0 <prvSwitchTimerLists+0xac>)
    3ba2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    3ba4:	4b06      	ldr	r3, [pc, #24]	; (3bc0 <prvSwitchTimerLists+0xbc>)
    3ba6:	687a      	ldr	r2, [r7, #4]
    3ba8:	601a      	str	r2, [r3, #0]
}
    3baa:	46bd      	mov	sp, r7
    3bac:	b007      	add	sp, #28
    3bae:	bd90      	pop	{r4, r7, pc}
    3bb0:	20003c74 	.word	0x20003c74
    3bb4:	00001f9d 	.word	0x00001f9d
    3bb8:	00001f31 	.word	0x00001f31
    3bbc:	000036ed 	.word	0x000036ed
    3bc0:	20003c78 	.word	0x20003c78

00003bc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3bc8:	4b12      	ldr	r3, [pc, #72]	; (3c14 <prvCheckForValidListAndQueue+0x50>)
    3bca:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3bcc:	4b12      	ldr	r3, [pc, #72]	; (3c18 <prvCheckForValidListAndQueue+0x54>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d11b      	bne.n	3c0c <prvCheckForValidListAndQueue+0x48>
		{
			vListInitialise( &xActiveTimerList1 );
    3bd4:	4b11      	ldr	r3, [pc, #68]	; (3c1c <prvCheckForValidListAndQueue+0x58>)
    3bd6:	1c18      	adds	r0, r3, #0
    3bd8:	4b11      	ldr	r3, [pc, #68]	; (3c20 <prvCheckForValidListAndQueue+0x5c>)
    3bda:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    3bdc:	4b11      	ldr	r3, [pc, #68]	; (3c24 <prvCheckForValidListAndQueue+0x60>)
    3bde:	1c18      	adds	r0, r3, #0
    3be0:	4b0f      	ldr	r3, [pc, #60]	; (3c20 <prvCheckForValidListAndQueue+0x5c>)
    3be2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    3be4:	4b10      	ldr	r3, [pc, #64]	; (3c28 <prvCheckForValidListAndQueue+0x64>)
    3be6:	4a0d      	ldr	r2, [pc, #52]	; (3c1c <prvCheckForValidListAndQueue+0x58>)
    3be8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3bea:	4b10      	ldr	r3, [pc, #64]	; (3c2c <prvCheckForValidListAndQueue+0x68>)
    3bec:	4a0d      	ldr	r2, [pc, #52]	; (3c24 <prvCheckForValidListAndQueue+0x60>)
    3bee:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3bf0:	2002      	movs	r0, #2
    3bf2:	210c      	movs	r1, #12
    3bf4:	2200      	movs	r2, #0
    3bf6:	4b0e      	ldr	r3, [pc, #56]	; (3c30 <prvCheckForValidListAndQueue+0x6c>)
    3bf8:	4798      	blx	r3
    3bfa:	1c02      	adds	r2, r0, #0
    3bfc:	4b06      	ldr	r3, [pc, #24]	; (3c18 <prvCheckForValidListAndQueue+0x54>)
    3bfe:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
    3c00:	4b05      	ldr	r3, [pc, #20]	; (3c18 <prvCheckForValidListAndQueue+0x54>)
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	2b00      	cmp	r3, #0
    3c06:	d101      	bne.n	3c0c <prvCheckForValidListAndQueue+0x48>
    3c08:	b672      	cpsid	i
    3c0a:	e7fe      	b.n	3c0a <prvCheckForValidListAndQueue+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3c0c:	4b09      	ldr	r3, [pc, #36]	; (3c34 <prvCheckForValidListAndQueue+0x70>)
    3c0e:	4798      	blx	r3
}
    3c10:	46bd      	mov	sp, r7
    3c12:	bd80      	pop	{r7, pc}
    3c14:	00001ce5 	.word	0x00001ce5
    3c18:	20003c7c 	.word	0x20003c7c
    3c1c:	20003c4c 	.word	0x20003c4c
    3c20:	00001e9d 	.word	0x00001e9d
    3c24:	20003c60 	.word	0x20003c60
    3c28:	20003c74 	.word	0x20003c74
    3c2c:	20003c78 	.word	0x20003c78
    3c30:	000020ad 	.word	0x000020ad
    3c34:	00001d05 	.word	0x00001d05

00003c38 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	1c02      	adds	r2, r0, #0
    3c40:	1dfb      	adds	r3, r7, #7
    3c42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c44:	230f      	movs	r3, #15
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	1dfa      	adds	r2, r7, #7
    3c4a:	7812      	ldrb	r2, [r2, #0]
    3c4c:	09d2      	lsrs	r2, r2, #7
    3c4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c50:	230e      	movs	r3, #14
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	1dfa      	adds	r2, r7, #7
    3c56:	7812      	ldrb	r2, [r2, #0]
    3c58:	0952      	lsrs	r2, r2, #5
    3c5a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c5c:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c5e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3c60:	230f      	movs	r3, #15
    3c62:	18fb      	adds	r3, r7, r3
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	2b00      	cmp	r3, #0
    3c68:	d10f      	bne.n	3c8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c6a:	230f      	movs	r3, #15
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	009b      	lsls	r3, r3, #2
    3c72:	2210      	movs	r2, #16
    3c74:	4694      	mov	ip, r2
    3c76:	44bc      	add	ip, r7
    3c78:	4463      	add	r3, ip
    3c7a:	3b08      	subs	r3, #8
    3c7c:	681a      	ldr	r2, [r3, #0]
    3c7e:	230e      	movs	r3, #14
    3c80:	18fb      	adds	r3, r7, r3
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	01db      	lsls	r3, r3, #7
    3c86:	18d3      	adds	r3, r2, r3
    3c88:	e000      	b.n	3c8c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3c8a:	2300      	movs	r3, #0
	}
}
    3c8c:	1c18      	adds	r0, r3, #0
    3c8e:	46bd      	mov	sp, r7
    3c90:	b004      	add	sp, #16
    3c92:	bd80      	pop	{r7, pc}
    3c94:	41004400 	.word	0x41004400

00003c98 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	b082      	sub	sp, #8
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	1c02      	adds	r2, r0, #0
    3ca0:	1dfb      	adds	r3, r7, #7
    3ca2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ca4:	1dfb      	adds	r3, r7, #7
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	1c18      	adds	r0, r3, #0
    3caa:	4b03      	ldr	r3, [pc, #12]	; (3cb8 <port_get_group_from_gpio_pin+0x20>)
    3cac:	4798      	blx	r3
    3cae:	1c03      	adds	r3, r0, #0
}
    3cb0:	1c18      	adds	r0, r3, #0
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b002      	add	sp, #8
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	00003c39 	.word	0x00003c39

00003cbc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	2200      	movs	r2, #0
    3cc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	2201      	movs	r2, #1
    3cce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	2200      	movs	r2, #0
    3cd4:	709a      	strb	r2, [r3, #2]
}
    3cd6:	46bd      	mov	sp, r7
    3cd8:	b002      	add	sp, #8
    3cda:	bd80      	pop	{r7, pc}

00003cdc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b084      	sub	sp, #16
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	1c02      	adds	r2, r0, #0
    3ce4:	1dfb      	adds	r3, r7, #7
    3ce6:	701a      	strb	r2, [r3, #0]
    3ce8:	1dbb      	adds	r3, r7, #6
    3cea:	1c0a      	adds	r2, r1, #0
    3cec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3cee:	1dfb      	adds	r3, r7, #7
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	1c18      	adds	r0, r3, #0
    3cf4:	4b0c      	ldr	r3, [pc, #48]	; (3d28 <port_pin_set_output_level+0x4c>)
    3cf6:	4798      	blx	r3
    3cf8:	1c03      	adds	r3, r0, #0
    3cfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cfc:	1dfb      	adds	r3, r7, #7
    3cfe:	781b      	ldrb	r3, [r3, #0]
    3d00:	221f      	movs	r2, #31
    3d02:	4013      	ands	r3, r2
    3d04:	2201      	movs	r2, #1
    3d06:	409a      	lsls	r2, r3
    3d08:	1c13      	adds	r3, r2, #0
    3d0a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3d0c:	1dbb      	adds	r3, r7, #6
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d003      	beq.n	3d1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3d14:	68fb      	ldr	r3, [r7, #12]
    3d16:	68ba      	ldr	r2, [r7, #8]
    3d18:	619a      	str	r2, [r3, #24]
    3d1a:	e002      	b.n	3d22 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d1c:	68fb      	ldr	r3, [r7, #12]
    3d1e:	68ba      	ldr	r2, [r7, #8]
    3d20:	615a      	str	r2, [r3, #20]
	}
}
    3d22:	46bd      	mov	sp, r7
    3d24:	b004      	add	sp, #16
    3d26:	bd80      	pop	{r7, pc}
    3d28:	00003c99 	.word	0x00003c99

00003d2c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b082      	sub	sp, #8
    3d30:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3d32:	1d3b      	adds	r3, r7, #4
    3d34:	1c18      	adds	r0, r3, #0
    3d36:	4b0e      	ldr	r3, [pc, #56]	; (3d70 <system_board_init+0x44>)
    3d38:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3d3a:	1d3b      	adds	r3, r7, #4
    3d3c:	2201      	movs	r2, #1
    3d3e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3d40:	1d3b      	adds	r3, r7, #4
    3d42:	203e      	movs	r0, #62	; 0x3e
    3d44:	1c19      	adds	r1, r3, #0
    3d46:	4b0b      	ldr	r3, [pc, #44]	; (3d74 <system_board_init+0x48>)
    3d48:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3d4a:	203e      	movs	r0, #62	; 0x3e
    3d4c:	2101      	movs	r1, #1
    3d4e:	4b0a      	ldr	r3, [pc, #40]	; (3d78 <system_board_init+0x4c>)
    3d50:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3d52:	1d3b      	adds	r3, r7, #4
    3d54:	2200      	movs	r2, #0
    3d56:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3d58:	1d3b      	adds	r3, r7, #4
    3d5a:	2201      	movs	r2, #1
    3d5c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3d5e:	1d3b      	adds	r3, r7, #4
    3d60:	200f      	movs	r0, #15
    3d62:	1c19      	adds	r1, r3, #0
    3d64:	4b03      	ldr	r3, [pc, #12]	; (3d74 <system_board_init+0x48>)
    3d66:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3d68:	46bd      	mov	sp, r7
    3d6a:	b002      	add	sp, #8
    3d6c:	bd80      	pop	{r7, pc}
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	00003cbd 	.word	0x00003cbd
    3d74:	00003da5 	.word	0x00003da5
    3d78:	00003cdd 	.word	0x00003cdd

00003d7c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b082      	sub	sp, #8
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3d84:	687b      	ldr	r3, [r7, #4]
    3d86:	2280      	movs	r2, #128	; 0x80
    3d88:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3d8a:	687b      	ldr	r3, [r7, #4]
    3d8c:	2200      	movs	r2, #0
    3d8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	2201      	movs	r2, #1
    3d94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	2200      	movs	r2, #0
    3d9a:	70da      	strb	r2, [r3, #3]
}
    3d9c:	46bd      	mov	sp, r7
    3d9e:	b002      	add	sp, #8
    3da0:	bd80      	pop	{r7, pc}
    3da2:	46c0      	nop			; (mov r8, r8)

00003da4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3da4:	b580      	push	{r7, lr}
    3da6:	b084      	sub	sp, #16
    3da8:	af00      	add	r7, sp, #0
    3daa:	1c02      	adds	r2, r0, #0
    3dac:	6039      	str	r1, [r7, #0]
    3dae:	1dfb      	adds	r3, r7, #7
    3db0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3db2:	230c      	movs	r3, #12
    3db4:	18fb      	adds	r3, r7, r3
    3db6:	1c18      	adds	r0, r3, #0
    3db8:	4b0f      	ldr	r3, [pc, #60]	; (3df8 <port_pin_set_config+0x54>)
    3dba:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3dbc:	230c      	movs	r3, #12
    3dbe:	18fb      	adds	r3, r7, r3
    3dc0:	2280      	movs	r2, #128	; 0x80
    3dc2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3dc4:	683b      	ldr	r3, [r7, #0]
    3dc6:	781a      	ldrb	r2, [r3, #0]
    3dc8:	230c      	movs	r3, #12
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3dce:	683b      	ldr	r3, [r7, #0]
    3dd0:	785a      	ldrb	r2, [r3, #1]
    3dd2:	230c      	movs	r3, #12
    3dd4:	18fb      	adds	r3, r7, r3
    3dd6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3dd8:	683b      	ldr	r3, [r7, #0]
    3dda:	789a      	ldrb	r2, [r3, #2]
    3ddc:	230c      	movs	r3, #12
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3de2:	1dfb      	adds	r3, r7, #7
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	230c      	movs	r3, #12
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	1c10      	adds	r0, r2, #0
    3dec:	1c19      	adds	r1, r3, #0
    3dee:	4b03      	ldr	r3, [pc, #12]	; (3dfc <port_pin_set_config+0x58>)
    3df0:	4798      	blx	r3
}
    3df2:	46bd      	mov	sp, r7
    3df4:	b004      	add	sp, #16
    3df6:	bd80      	pop	{r7, pc}
    3df8:	00003d7d 	.word	0x00003d7d
    3dfc:	00004815 	.word	0x00004815

00003e00 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b082      	sub	sp, #8
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	2201      	movs	r2, #1
    3e0c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	2200      	movs	r2, #0
    3e12:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	2206      	movs	r2, #6
    3e18:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    3e1a:	687b      	ldr	r3, [r7, #4]
    3e1c:	2200      	movs	r2, #0
    3e1e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	2200      	movs	r2, #0
    3e24:	725a      	strb	r2, [r3, #9]
}
    3e26:	46bd      	mov	sp, r7
    3e28:	b002      	add	sp, #8
    3e2a:	bd80      	pop	{r7, pc}

00003e2c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b082      	sub	sp, #8
    3e30:	af00      	add	r7, sp, #0
    3e32:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	2203      	movs	r2, #3
    3e38:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	2200      	movs	r2, #0
    3e3e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	2201      	movs	r2, #1
    3e44:	709a      	strb	r2, [r3, #2]
}
    3e46:	46bd      	mov	sp, r7
    3e48:	b002      	add	sp, #8
    3e4a:	bd80      	pop	{r7, pc}

00003e4c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
    3e52:	1c02      	adds	r2, r0, #0
    3e54:	1dfb      	adds	r3, r7, #7
    3e56:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    3e58:	4a03      	ldr	r2, [pc, #12]	; (3e68 <system_cpu_clock_set_divider+0x1c>)
    3e5a:	1dfb      	adds	r3, r7, #7
    3e5c:	781b      	ldrb	r3, [r3, #0]
    3e5e:	7213      	strb	r3, [r2, #8]
}
    3e60:	46bd      	mov	sp, r7
    3e62:	b002      	add	sp, #8
    3e64:	bd80      	pop	{r7, pc}
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	40000400 	.word	0x40000400

00003e6c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    3e6c:	b580      	push	{r7, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	af00      	add	r7, sp, #0
    3e72:	1c02      	adds	r2, r0, #0
    3e74:	1dfb      	adds	r3, r7, #7
    3e76:	701a      	strb	r2, [r3, #0]
    3e78:	1dbb      	adds	r3, r7, #6
    3e7a:	1c0a      	adds	r2, r1, #0
    3e7c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3e7e:	1dfb      	adds	r3, r7, #7
    3e80:	781b      	ldrb	r3, [r3, #0]
    3e82:	2b01      	cmp	r3, #1
    3e84:	d008      	beq.n	3e98 <system_apb_clock_set_divider+0x2c>
    3e86:	2b02      	cmp	r3, #2
    3e88:	d00b      	beq.n	3ea2 <system_apb_clock_set_divider+0x36>
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d10e      	bne.n	3eac <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    3e8e:	4a0b      	ldr	r2, [pc, #44]	; (3ebc <system_apb_clock_set_divider+0x50>)
    3e90:	1dbb      	adds	r3, r7, #6
    3e92:	781b      	ldrb	r3, [r3, #0]
    3e94:	7253      	strb	r3, [r2, #9]
			break;
    3e96:	e00b      	b.n	3eb0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3e98:	4a08      	ldr	r2, [pc, #32]	; (3ebc <system_apb_clock_set_divider+0x50>)
    3e9a:	1dbb      	adds	r3, r7, #6
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	7293      	strb	r3, [r2, #10]
			break;
    3ea0:	e006      	b.n	3eb0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    3ea2:	4a06      	ldr	r2, [pc, #24]	; (3ebc <system_apb_clock_set_divider+0x50>)
    3ea4:	1dbb      	adds	r3, r7, #6
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	72d3      	strb	r3, [r2, #11]
			break;
    3eaa:	e001      	b.n	3eb0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3eac:	2317      	movs	r3, #23
    3eae:	e000      	b.n	3eb2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    3eb0:	2300      	movs	r3, #0
}
    3eb2:	1c18      	adds	r0, r3, #0
    3eb4:	46bd      	mov	sp, r7
    3eb6:	b002      	add	sp, #8
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	40000400 	.word	0x40000400

00003ec0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	b082      	sub	sp, #8
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	1c02      	adds	r2, r0, #0
    3ec8:	1dfb      	adds	r3, r7, #7
    3eca:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3ecc:	4b08      	ldr	r3, [pc, #32]	; (3ef0 <system_flash_set_waitstates+0x30>)
    3ece:	1dfa      	adds	r2, r7, #7
    3ed0:	7812      	ldrb	r2, [r2, #0]
    3ed2:	210f      	movs	r1, #15
    3ed4:	400a      	ands	r2, r1
    3ed6:	b2d2      	uxtb	r2, r2
    3ed8:	210f      	movs	r1, #15
    3eda:	400a      	ands	r2, r1
    3edc:	0052      	lsls	r2, r2, #1
    3ede:	6859      	ldr	r1, [r3, #4]
    3ee0:	201e      	movs	r0, #30
    3ee2:	4381      	bics	r1, r0
    3ee4:	430a      	orrs	r2, r1
    3ee6:	605a      	str	r2, [r3, #4]
}
    3ee8:	46bd      	mov	sp, r7
    3eea:	b002      	add	sp, #8
    3eec:	bd80      	pop	{r7, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	41004000 	.word	0x41004000

00003ef4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3ef4:	b580      	push	{r7, lr}
    3ef6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3ef8:	46c0      	nop			; (mov r8, r8)
    3efa:	4b03      	ldr	r3, [pc, #12]	; (3f08 <_system_dfll_wait_for_sync+0x14>)
    3efc:	68db      	ldr	r3, [r3, #12]
    3efe:	2210      	movs	r2, #16
    3f00:	4013      	ands	r3, r2
    3f02:	d0fa      	beq.n	3efa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3f04:	46bd      	mov	sp, r7
    3f06:	bd80      	pop	{r7, pc}
    3f08:	40000800 	.word	0x40000800

00003f0c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3f0c:	b580      	push	{r7, lr}
    3f0e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    3f10:	4a0c      	ldr	r2, [pc, #48]	; (3f44 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3f12:	4b0d      	ldr	r3, [pc, #52]	; (3f48 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3f14:	681b      	ldr	r3, [r3, #0]
    3f16:	b29b      	uxth	r3, r3
    3f18:	2180      	movs	r1, #128	; 0x80
    3f1a:	438b      	bics	r3, r1
    3f1c:	b29b      	uxth	r3, r3
    3f1e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3f20:	4b0a      	ldr	r3, [pc, #40]	; (3f4c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3f22:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3f24:	4a07      	ldr	r2, [pc, #28]	; (3f44 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3f26:	4b08      	ldr	r3, [pc, #32]	; (3f48 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3f28:	689b      	ldr	r3, [r3, #8]
    3f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3f2c:	4a05      	ldr	r2, [pc, #20]	; (3f44 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3f2e:	4b06      	ldr	r3, [pc, #24]	; (3f48 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3f30:	685b      	ldr	r3, [r3, #4]
    3f32:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3f34:	4a03      	ldr	r2, [pc, #12]	; (3f44 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3f36:	4b04      	ldr	r3, [pc, #16]	; (3f48 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	b29b      	uxth	r3, r3
    3f3c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3f3e:	46bd      	mov	sp, r7
    3f40:	bd80      	pop	{r7, pc}
    3f42:	46c0      	nop			; (mov r8, r8)
    3f44:	40000800 	.word	0x40000800
    3f48:	20003c84 	.word	0x20003c84
    3f4c:	00003ef5 	.word	0x00003ef5

00003f50 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3f50:	b580      	push	{r7, lr}
    3f52:	b082      	sub	sp, #8
    3f54:	af00      	add	r7, sp, #0
    3f56:	1c02      	adds	r2, r0, #0
    3f58:	1dfb      	adds	r3, r7, #7
    3f5a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3f5c:	1dfb      	adds	r3, r7, #7
    3f5e:	781b      	ldrb	r3, [r3, #0]
    3f60:	2b08      	cmp	r3, #8
    3f62:	d842      	bhi.n	3fea <system_clock_source_get_hz+0x9a>
    3f64:	009a      	lsls	r2, r3, #2
    3f66:	4b23      	ldr	r3, [pc, #140]	; (3ff4 <system_clock_source_get_hz+0xa4>)
    3f68:	18d3      	adds	r3, r2, r3
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3f6e:	4b22      	ldr	r3, [pc, #136]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3f70:	691b      	ldr	r3, [r3, #16]
    3f72:	e03b      	b.n	3fec <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3f74:	4b21      	ldr	r3, [pc, #132]	; (3ffc <system_clock_source_get_hz+0xac>)
    3f76:	6a1b      	ldr	r3, [r3, #32]
    3f78:	0a1b      	lsrs	r3, r3, #8
    3f7a:	1c1a      	adds	r2, r3, #0
    3f7c:	2303      	movs	r3, #3
    3f7e:	4013      	ands	r3, r2
    3f80:	b2db      	uxtb	r3, r3
    3f82:	1c1a      	adds	r2, r3, #0
    3f84:	4b1e      	ldr	r3, [pc, #120]	; (4000 <system_clock_source_get_hz+0xb0>)
    3f86:	40d3      	lsrs	r3, r2
    3f88:	e030      	b.n	3fec <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3f8a:	2380      	movs	r3, #128	; 0x80
    3f8c:	021b      	lsls	r3, r3, #8
    3f8e:	e02d      	b.n	3fec <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3f90:	2380      	movs	r3, #128	; 0x80
    3f92:	021b      	lsls	r3, r3, #8
    3f94:	e02a      	b.n	3fec <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3f96:	4b18      	ldr	r3, [pc, #96]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3f98:	695b      	ldr	r3, [r3, #20]
    3f9a:	e027      	b.n	3fec <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3f9c:	4b16      	ldr	r3, [pc, #88]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	2202      	movs	r2, #2
    3fa2:	4013      	ands	r3, r2
    3fa4:	d101      	bne.n	3faa <system_clock_source_get_hz+0x5a>
			return 0;
    3fa6:	2300      	movs	r3, #0
    3fa8:	e020      	b.n	3fec <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3faa:	4b16      	ldr	r3, [pc, #88]	; (4004 <system_clock_source_get_hz+0xb4>)
    3fac:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3fae:	4b12      	ldr	r3, [pc, #72]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3fb0:	681b      	ldr	r3, [r3, #0]
    3fb2:	2204      	movs	r2, #4
    3fb4:	4013      	ands	r3, r2
    3fb6:	d009      	beq.n	3fcc <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3fb8:	2000      	movs	r0, #0
    3fba:	4b13      	ldr	r3, [pc, #76]	; (4008 <system_clock_source_get_hz+0xb8>)
    3fbc:	4798      	blx	r3
    3fbe:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    3fc0:	4b0d      	ldr	r3, [pc, #52]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3fc2:	689b      	ldr	r3, [r3, #8]
    3fc4:	041b      	lsls	r3, r3, #16
    3fc6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3fc8:	4353      	muls	r3, r2
    3fca:	e00f      	b.n	3fec <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3fcc:	4b0f      	ldr	r3, [pc, #60]	; (400c <system_clock_source_get_hz+0xbc>)
    3fce:	e00d      	b.n	3fec <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3fd0:	4a0a      	ldr	r2, [pc, #40]	; (3ffc <system_clock_source_get_hz+0xac>)
    3fd2:	2350      	movs	r3, #80	; 0x50
    3fd4:	5cd3      	ldrb	r3, [r2, r3]
    3fd6:	b2db      	uxtb	r3, r3
    3fd8:	1c1a      	adds	r2, r3, #0
    3fda:	2304      	movs	r3, #4
    3fdc:	4013      	ands	r3, r2
    3fde:	d101      	bne.n	3fe4 <system_clock_source_get_hz+0x94>
			return 0;
    3fe0:	2300      	movs	r3, #0
    3fe2:	e003      	b.n	3fec <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    3fe4:	4b04      	ldr	r3, [pc, #16]	; (3ff8 <system_clock_source_get_hz+0xa8>)
    3fe6:	68db      	ldr	r3, [r3, #12]
    3fe8:	e000      	b.n	3fec <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    3fea:	2300      	movs	r3, #0
	}
}
    3fec:	1c18      	adds	r0, r3, #0
    3fee:	46bd      	mov	sp, r7
    3ff0:	b002      	add	sp, #8
    3ff2:	bd80      	pop	{r7, pc}
    3ff4:	000063a8 	.word	0x000063a8
    3ff8:	20003c84 	.word	0x20003c84
    3ffc:	40000800 	.word	0x40000800
    4000:	007a1200 	.word	0x007a1200
    4004:	00003ef5 	.word	0x00003ef5
    4008:	0000464d 	.word	0x0000464d
    400c:	02dc6c00 	.word	0x02dc6c00

00004010 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4018:	4b1a      	ldr	r3, [pc, #104]	; (4084 <system_clock_source_osc8m_set_config+0x74>)
    401a:	6a1b      	ldr	r3, [r3, #32]
    401c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    401e:	687b      	ldr	r3, [r7, #4]
    4020:	781b      	ldrb	r3, [r3, #0]
    4022:	1c1a      	adds	r2, r3, #0
    4024:	2303      	movs	r3, #3
    4026:	4013      	ands	r3, r2
    4028:	b2da      	uxtb	r2, r3
    402a:	230d      	movs	r3, #13
    402c:	18fb      	adds	r3, r7, r3
    402e:	2103      	movs	r1, #3
    4030:	400a      	ands	r2, r1
    4032:	1c10      	adds	r0, r2, #0
    4034:	781a      	ldrb	r2, [r3, #0]
    4036:	2103      	movs	r1, #3
    4038:	438a      	bics	r2, r1
    403a:	1c11      	adds	r1, r2, #0
    403c:	1c02      	adds	r2, r0, #0
    403e:	430a      	orrs	r2, r1
    4040:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4042:	687b      	ldr	r3, [r7, #4]
    4044:	789a      	ldrb	r2, [r3, #2]
    4046:	230c      	movs	r3, #12
    4048:	18fb      	adds	r3, r7, r3
    404a:	01d0      	lsls	r0, r2, #7
    404c:	781a      	ldrb	r2, [r3, #0]
    404e:	217f      	movs	r1, #127	; 0x7f
    4050:	400a      	ands	r2, r1
    4052:	1c11      	adds	r1, r2, #0
    4054:	1c02      	adds	r2, r0, #0
    4056:	430a      	orrs	r2, r1
    4058:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    405a:	687b      	ldr	r3, [r7, #4]
    405c:	785a      	ldrb	r2, [r3, #1]
    405e:	230c      	movs	r3, #12
    4060:	18fb      	adds	r3, r7, r3
    4062:	2101      	movs	r1, #1
    4064:	400a      	ands	r2, r1
    4066:	0190      	lsls	r0, r2, #6
    4068:	781a      	ldrb	r2, [r3, #0]
    406a:	2140      	movs	r1, #64	; 0x40
    406c:	438a      	bics	r2, r1
    406e:	1c11      	adds	r1, r2, #0
    4070:	1c02      	adds	r2, r0, #0
    4072:	430a      	orrs	r2, r1
    4074:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4076:	4b03      	ldr	r3, [pc, #12]	; (4084 <system_clock_source_osc8m_set_config+0x74>)
    4078:	68fa      	ldr	r2, [r7, #12]
    407a:	621a      	str	r2, [r3, #32]
}
    407c:	46bd      	mov	sp, r7
    407e:	b004      	add	sp, #16
    4080:	bd80      	pop	{r7, pc}
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	40000800 	.word	0x40000800

00004088 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4088:	b580      	push	{r7, lr}
    408a:	b082      	sub	sp, #8
    408c:	af00      	add	r7, sp, #0
    408e:	1c02      	adds	r2, r0, #0
    4090:	1dfb      	adds	r3, r7, #7
    4092:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4094:	1dfb      	adds	r3, r7, #7
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	2b08      	cmp	r3, #8
    409a:	d83b      	bhi.n	4114 <system_clock_source_enable+0x8c>
    409c:	009a      	lsls	r2, r3, #2
    409e:	4b21      	ldr	r3, [pc, #132]	; (4124 <system_clock_source_enable+0x9c>)
    40a0:	18d3      	adds	r3, r2, r3
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    40a6:	4b20      	ldr	r3, [pc, #128]	; (4128 <system_clock_source_enable+0xa0>)
    40a8:	4a1f      	ldr	r2, [pc, #124]	; (4128 <system_clock_source_enable+0xa0>)
    40aa:	6a12      	ldr	r2, [r2, #32]
    40ac:	2102      	movs	r1, #2
    40ae:	430a      	orrs	r2, r1
    40b0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    40b2:	2300      	movs	r3, #0
    40b4:	e031      	b.n	411a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    40b6:	4b1c      	ldr	r3, [pc, #112]	; (4128 <system_clock_source_enable+0xa0>)
    40b8:	4a1b      	ldr	r2, [pc, #108]	; (4128 <system_clock_source_enable+0xa0>)
    40ba:	6992      	ldr	r2, [r2, #24]
    40bc:	2102      	movs	r1, #2
    40be:	430a      	orrs	r2, r1
    40c0:	619a      	str	r2, [r3, #24]
		break;
    40c2:	e029      	b.n	4118 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    40c4:	4a18      	ldr	r2, [pc, #96]	; (4128 <system_clock_source_enable+0xa0>)
    40c6:	4b18      	ldr	r3, [pc, #96]	; (4128 <system_clock_source_enable+0xa0>)
    40c8:	8a1b      	ldrh	r3, [r3, #16]
    40ca:	b29b      	uxth	r3, r3
    40cc:	2102      	movs	r1, #2
    40ce:	430b      	orrs	r3, r1
    40d0:	b29b      	uxth	r3, r3
    40d2:	8213      	strh	r3, [r2, #16]
		break;
    40d4:	e020      	b.n	4118 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    40d6:	4a14      	ldr	r2, [pc, #80]	; (4128 <system_clock_source_enable+0xa0>)
    40d8:	4b13      	ldr	r3, [pc, #76]	; (4128 <system_clock_source_enable+0xa0>)
    40da:	8a9b      	ldrh	r3, [r3, #20]
    40dc:	b29b      	uxth	r3, r3
    40de:	2102      	movs	r1, #2
    40e0:	430b      	orrs	r3, r1
    40e2:	b29b      	uxth	r3, r3
    40e4:	8293      	strh	r3, [r2, #20]
		break;
    40e6:	e017      	b.n	4118 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    40e8:	4b10      	ldr	r3, [pc, #64]	; (412c <system_clock_source_enable+0xa4>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	2202      	movs	r2, #2
    40ee:	431a      	orrs	r2, r3
    40f0:	4b0e      	ldr	r3, [pc, #56]	; (412c <system_clock_source_enable+0xa4>)
    40f2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    40f4:	4b0e      	ldr	r3, [pc, #56]	; (4130 <system_clock_source_enable+0xa8>)
    40f6:	4798      	blx	r3
		break;
    40f8:	e00e      	b.n	4118 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    40fa:	4a0b      	ldr	r2, [pc, #44]	; (4128 <system_clock_source_enable+0xa0>)
    40fc:	490a      	ldr	r1, [pc, #40]	; (4128 <system_clock_source_enable+0xa0>)
    40fe:	2344      	movs	r3, #68	; 0x44
    4100:	5ccb      	ldrb	r3, [r1, r3]
    4102:	b2db      	uxtb	r3, r3
    4104:	2102      	movs	r1, #2
    4106:	430b      	orrs	r3, r1
    4108:	b2d9      	uxtb	r1, r3
    410a:	2344      	movs	r3, #68	; 0x44
    410c:	54d1      	strb	r1, [r2, r3]
		break;
    410e:	e003      	b.n	4118 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4110:	2300      	movs	r3, #0
    4112:	e002      	b.n	411a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4114:	2317      	movs	r3, #23
    4116:	e000      	b.n	411a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4118:	2300      	movs	r3, #0
}
    411a:	1c18      	adds	r0, r3, #0
    411c:	46bd      	mov	sp, r7
    411e:	b002      	add	sp, #8
    4120:	bd80      	pop	{r7, pc}
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	000063cc 	.word	0x000063cc
    4128:	40000800 	.word	0x40000800
    412c:	20003c84 	.word	0x20003c84
    4130:	00003f0d 	.word	0x00003f0d

00004134 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    4134:	b580      	push	{r7, lr}
    4136:	b09c      	sub	sp, #112	; 0x70
    4138:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    413a:	4b24      	ldr	r3, [pc, #144]	; (41cc <system_clock_init+0x98>)
    413c:	22c2      	movs	r2, #194	; 0xc2
    413e:	00d2      	lsls	r2, r2, #3
    4140:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4142:	2000      	movs	r0, #0
    4144:	4b22      	ldr	r3, [pc, #136]	; (41d0 <system_clock_init+0x9c>)
    4146:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4148:	236c      	movs	r3, #108	; 0x6c
    414a:	18fb      	adds	r3, r7, r3
    414c:	1c18      	adds	r0, r3, #0
    414e:	4b21      	ldr	r3, [pc, #132]	; (41d4 <system_clock_init+0xa0>)
    4150:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4152:	236c      	movs	r3, #108	; 0x6c
    4154:	18fb      	adds	r3, r7, r3
    4156:	2200      	movs	r2, #0
    4158:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    415a:	236c      	movs	r3, #108	; 0x6c
    415c:	18fb      	adds	r3, r7, r3
    415e:	2201      	movs	r2, #1
    4160:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4162:	236c      	movs	r3, #108	; 0x6c
    4164:	18fb      	adds	r3, r7, r3
    4166:	2200      	movs	r2, #0
    4168:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    416a:	236c      	movs	r3, #108	; 0x6c
    416c:	18fb      	adds	r3, r7, r3
    416e:	1c18      	adds	r0, r3, #0
    4170:	4b19      	ldr	r3, [pc, #100]	; (41d8 <system_clock_init+0xa4>)
    4172:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4174:	2006      	movs	r0, #6
    4176:	4b19      	ldr	r3, [pc, #100]	; (41dc <system_clock_init+0xa8>)
    4178:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    417a:	4b19      	ldr	r3, [pc, #100]	; (41e0 <system_clock_init+0xac>)
    417c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    417e:	2000      	movs	r0, #0
    4180:	4b18      	ldr	r3, [pc, #96]	; (41e4 <system_clock_init+0xb0>)
    4182:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4184:	2000      	movs	r0, #0
    4186:	2100      	movs	r1, #0
    4188:	4b17      	ldr	r3, [pc, #92]	; (41e8 <system_clock_init+0xb4>)
    418a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    418c:	2001      	movs	r0, #1
    418e:	2100      	movs	r1, #0
    4190:	4b15      	ldr	r3, [pc, #84]	; (41e8 <system_clock_init+0xb4>)
    4192:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4194:	1c3b      	adds	r3, r7, #0
    4196:	1c18      	adds	r0, r3, #0
    4198:	4b14      	ldr	r3, [pc, #80]	; (41ec <system_clock_init+0xb8>)
    419a:	4798      	blx	r3
    419c:	1c3b      	adds	r3, r7, #0
    419e:	2206      	movs	r2, #6
    41a0:	701a      	strb	r2, [r3, #0]
    41a2:	1c3b      	adds	r3, r7, #0
    41a4:	2201      	movs	r2, #1
    41a6:	605a      	str	r2, [r3, #4]
    41a8:	1c3b      	adds	r3, r7, #0
    41aa:	2200      	movs	r2, #0
    41ac:	721a      	strb	r2, [r3, #8]
    41ae:	1c3b      	adds	r3, r7, #0
    41b0:	2200      	movs	r2, #0
    41b2:	725a      	strb	r2, [r3, #9]
    41b4:	1c3b      	adds	r3, r7, #0
    41b6:	2000      	movs	r0, #0
    41b8:	1c19      	adds	r1, r3, #0
    41ba:	4b0d      	ldr	r3, [pc, #52]	; (41f0 <system_clock_init+0xbc>)
    41bc:	4798      	blx	r3
    41be:	2000      	movs	r0, #0
    41c0:	4b0c      	ldr	r3, [pc, #48]	; (41f4 <system_clock_init+0xc0>)
    41c2:	4798      	blx	r3
#endif
}
    41c4:	46bd      	mov	sp, r7
    41c6:	b01c      	add	sp, #112	; 0x70
    41c8:	bd80      	pop	{r7, pc}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	40000800 	.word	0x40000800
    41d0:	00003ec1 	.word	0x00003ec1
    41d4:	00003e2d 	.word	0x00003e2d
    41d8:	00004011 	.word	0x00004011
    41dc:	00004089 	.word	0x00004089
    41e0:	00004299 	.word	0x00004299
    41e4:	00003e4d 	.word	0x00003e4d
    41e8:	00003e6d 	.word	0x00003e6d
    41ec:	00003e01 	.word	0x00003e01
    41f0:	000042c9 	.word	0x000042c9
    41f4:	000043e9 	.word	0x000043e9

000041f8 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    41f8:	b580      	push	{r7, lr}
    41fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    41fc:	4b06      	ldr	r3, [pc, #24]	; (4218 <system_gclk_is_syncing+0x20>)
    41fe:	785b      	ldrb	r3, [r3, #1]
    4200:	b2db      	uxtb	r3, r3
    4202:	b2db      	uxtb	r3, r3
    4204:	b25b      	sxtb	r3, r3
    4206:	2b00      	cmp	r3, #0
    4208:	da01      	bge.n	420e <system_gclk_is_syncing+0x16>
		return true;
    420a:	2301      	movs	r3, #1
    420c:	e000      	b.n	4210 <system_gclk_is_syncing+0x18>
	}

	return false;
    420e:	2300      	movs	r3, #0
}
    4210:	1c18      	adds	r0, r3, #0
    4212:	46bd      	mov	sp, r7
    4214:	bd80      	pop	{r7, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	40000c00 	.word	0x40000c00

0000421c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    421c:	b580      	push	{r7, lr}
    421e:	b082      	sub	sp, #8
    4220:	af00      	add	r7, sp, #0
    4222:	1c02      	adds	r2, r0, #0
    4224:	6039      	str	r1, [r7, #0]
    4226:	1dfb      	adds	r3, r7, #7
    4228:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    422a:	1dfb      	adds	r3, r7, #7
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	2b01      	cmp	r3, #1
    4230:	d00a      	beq.n	4248 <system_apb_clock_set_mask+0x2c>
    4232:	2b02      	cmp	r3, #2
    4234:	d00f      	beq.n	4256 <system_apb_clock_set_mask+0x3a>
    4236:	2b00      	cmp	r3, #0
    4238:	d114      	bne.n	4264 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    423a:	4b0e      	ldr	r3, [pc, #56]	; (4274 <system_apb_clock_set_mask+0x58>)
    423c:	4a0d      	ldr	r2, [pc, #52]	; (4274 <system_apb_clock_set_mask+0x58>)
    423e:	6991      	ldr	r1, [r2, #24]
    4240:	683a      	ldr	r2, [r7, #0]
    4242:	430a      	orrs	r2, r1
    4244:	619a      	str	r2, [r3, #24]
			break;
    4246:	e00f      	b.n	4268 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4248:	4b0a      	ldr	r3, [pc, #40]	; (4274 <system_apb_clock_set_mask+0x58>)
    424a:	4a0a      	ldr	r2, [pc, #40]	; (4274 <system_apb_clock_set_mask+0x58>)
    424c:	69d1      	ldr	r1, [r2, #28]
    424e:	683a      	ldr	r2, [r7, #0]
    4250:	430a      	orrs	r2, r1
    4252:	61da      	str	r2, [r3, #28]
			break;
    4254:	e008      	b.n	4268 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4256:	4b07      	ldr	r3, [pc, #28]	; (4274 <system_apb_clock_set_mask+0x58>)
    4258:	4a06      	ldr	r2, [pc, #24]	; (4274 <system_apb_clock_set_mask+0x58>)
    425a:	6a11      	ldr	r1, [r2, #32]
    425c:	683a      	ldr	r2, [r7, #0]
    425e:	430a      	orrs	r2, r1
    4260:	621a      	str	r2, [r3, #32]
			break;
    4262:	e001      	b.n	4268 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4264:	2317      	movs	r3, #23
    4266:	e000      	b.n	426a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4268:	2300      	movs	r3, #0
}
    426a:	1c18      	adds	r0, r3, #0
    426c:	46bd      	mov	sp, r7
    426e:	b002      	add	sp, #8
    4270:	bd80      	pop	{r7, pc}
    4272:	46c0      	nop			; (mov r8, r8)
    4274:	40000400 	.word	0x40000400

00004278 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4278:	b580      	push	{r7, lr}
    427a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    427c:	4b01      	ldr	r3, [pc, #4]	; (4284 <system_interrupt_enter_critical_section+0xc>)
    427e:	4798      	blx	r3
}
    4280:	46bd      	mov	sp, r7
    4282:	bd80      	pop	{r7, pc}
    4284:	00000111 	.word	0x00000111

00004288 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4288:	b580      	push	{r7, lr}
    428a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    428c:	4b01      	ldr	r3, [pc, #4]	; (4294 <system_interrupt_leave_critical_section+0xc>)
    428e:	4798      	blx	r3
}
    4290:	46bd      	mov	sp, r7
    4292:	bd80      	pop	{r7, pc}
    4294:	00000161 	.word	0x00000161

00004298 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4298:	b580      	push	{r7, lr}
    429a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    429c:	2000      	movs	r0, #0
    429e:	2108      	movs	r1, #8
    42a0:	4b07      	ldr	r3, [pc, #28]	; (42c0 <system_gclk_init+0x28>)
    42a2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    42a4:	4b07      	ldr	r3, [pc, #28]	; (42c4 <system_gclk_init+0x2c>)
    42a6:	2201      	movs	r2, #1
    42a8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    42aa:	46c0      	nop			; (mov r8, r8)
    42ac:	4b05      	ldr	r3, [pc, #20]	; (42c4 <system_gclk_init+0x2c>)
    42ae:	781b      	ldrb	r3, [r3, #0]
    42b0:	b2db      	uxtb	r3, r3
    42b2:	1c1a      	adds	r2, r3, #0
    42b4:	2301      	movs	r3, #1
    42b6:	4013      	ands	r3, r2
    42b8:	d1f8      	bne.n	42ac <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    42ba:	46bd      	mov	sp, r7
    42bc:	bd80      	pop	{r7, pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	0000421d 	.word	0x0000421d
    42c4:	40000c00 	.word	0x40000c00

000042c8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    42c8:	b580      	push	{r7, lr}
    42ca:	b086      	sub	sp, #24
    42cc:	af00      	add	r7, sp, #0
    42ce:	1c02      	adds	r2, r0, #0
    42d0:	6039      	str	r1, [r7, #0]
    42d2:	1dfb      	adds	r3, r7, #7
    42d4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    42d6:	1dfb      	adds	r3, r7, #7
    42d8:	781b      	ldrb	r3, [r3, #0]
    42da:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    42dc:	1dfb      	adds	r3, r7, #7
    42de:	781b      	ldrb	r3, [r3, #0]
    42e0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    42e2:	683b      	ldr	r3, [r7, #0]
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	021b      	lsls	r3, r3, #8
    42e8:	1c1a      	adds	r2, r3, #0
    42ea:	697b      	ldr	r3, [r7, #20]
    42ec:	4313      	orrs	r3, r2
    42ee:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    42f0:	683b      	ldr	r3, [r7, #0]
    42f2:	785b      	ldrb	r3, [r3, #1]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d004      	beq.n	4302 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    42f8:	697b      	ldr	r3, [r7, #20]
    42fa:	2280      	movs	r2, #128	; 0x80
    42fc:	02d2      	lsls	r2, r2, #11
    42fe:	4313      	orrs	r3, r2
    4300:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4302:	683b      	ldr	r3, [r7, #0]
    4304:	7a5b      	ldrb	r3, [r3, #9]
    4306:	2b00      	cmp	r3, #0
    4308:	d004      	beq.n	4314 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    430a:	697b      	ldr	r3, [r7, #20]
    430c:	2280      	movs	r2, #128	; 0x80
    430e:	0312      	lsls	r2, r2, #12
    4310:	4313      	orrs	r3, r2
    4312:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4314:	683b      	ldr	r3, [r7, #0]
    4316:	685b      	ldr	r3, [r3, #4]
    4318:	2b01      	cmp	r3, #1
    431a:	d92c      	bls.n	4376 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    431c:	683b      	ldr	r3, [r7, #0]
    431e:	685a      	ldr	r2, [r3, #4]
    4320:	683b      	ldr	r3, [r7, #0]
    4322:	685b      	ldr	r3, [r3, #4]
    4324:	3b01      	subs	r3, #1
    4326:	4013      	ands	r3, r2
    4328:	d11a      	bne.n	4360 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    432a:	2300      	movs	r3, #0
    432c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    432e:	2302      	movs	r3, #2
    4330:	60bb      	str	r3, [r7, #8]
    4332:	e005      	b.n	4340 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4334:	68fb      	ldr	r3, [r7, #12]
    4336:	3301      	adds	r3, #1
    4338:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    433a:	68bb      	ldr	r3, [r7, #8]
    433c:	005b      	lsls	r3, r3, #1
    433e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4340:	683b      	ldr	r3, [r7, #0]
    4342:	685a      	ldr	r2, [r3, #4]
    4344:	68bb      	ldr	r3, [r7, #8]
    4346:	429a      	cmp	r2, r3
    4348:	d8f4      	bhi.n	4334 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    434a:	68fb      	ldr	r3, [r7, #12]
    434c:	021b      	lsls	r3, r3, #8
    434e:	693a      	ldr	r2, [r7, #16]
    4350:	4313      	orrs	r3, r2
    4352:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4354:	697b      	ldr	r3, [r7, #20]
    4356:	2280      	movs	r2, #128	; 0x80
    4358:	0352      	lsls	r2, r2, #13
    435a:	4313      	orrs	r3, r2
    435c:	617b      	str	r3, [r7, #20]
    435e:	e00a      	b.n	4376 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4360:	683b      	ldr	r3, [r7, #0]
    4362:	685b      	ldr	r3, [r3, #4]
    4364:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4366:	693a      	ldr	r2, [r7, #16]
    4368:	4313      	orrs	r3, r2
    436a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    436c:	697b      	ldr	r3, [r7, #20]
    436e:	2280      	movs	r2, #128	; 0x80
    4370:	0292      	lsls	r2, r2, #10
    4372:	4313      	orrs	r3, r2
    4374:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4376:	683b      	ldr	r3, [r7, #0]
    4378:	7a1b      	ldrb	r3, [r3, #8]
    437a:	2b00      	cmp	r3, #0
    437c:	d004      	beq.n	4388 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    437e:	697b      	ldr	r3, [r7, #20]
    4380:	2280      	movs	r2, #128	; 0x80
    4382:	0392      	lsls	r2, r2, #14
    4384:	4313      	orrs	r3, r2
    4386:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4388:	46c0      	nop			; (mov r8, r8)
    438a:	4b12      	ldr	r3, [pc, #72]	; (43d4 <system_gclk_gen_set_config+0x10c>)
    438c:	4798      	blx	r3
    438e:	1e03      	subs	r3, r0, #0
    4390:	d1fb      	bne.n	438a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4392:	4b11      	ldr	r3, [pc, #68]	; (43d8 <system_gclk_gen_set_config+0x110>)
    4394:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4396:	4a11      	ldr	r2, [pc, #68]	; (43dc <system_gclk_gen_set_config+0x114>)
    4398:	1dfb      	adds	r3, r7, #7
    439a:	781b      	ldrb	r3, [r3, #0]
    439c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	4b0c      	ldr	r3, [pc, #48]	; (43d4 <system_gclk_gen_set_config+0x10c>)
    43a2:	4798      	blx	r3
    43a4:	1e03      	subs	r3, r0, #0
    43a6:	d1fb      	bne.n	43a0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    43a8:	4b0d      	ldr	r3, [pc, #52]	; (43e0 <system_gclk_gen_set_config+0x118>)
    43aa:	693a      	ldr	r2, [r7, #16]
    43ac:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	4b08      	ldr	r3, [pc, #32]	; (43d4 <system_gclk_gen_set_config+0x10c>)
    43b2:	4798      	blx	r3
    43b4:	1e03      	subs	r3, r0, #0
    43b6:	d1fb      	bne.n	43b0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    43b8:	4b09      	ldr	r3, [pc, #36]	; (43e0 <system_gclk_gen_set_config+0x118>)
    43ba:	4a09      	ldr	r2, [pc, #36]	; (43e0 <system_gclk_gen_set_config+0x118>)
    43bc:	6851      	ldr	r1, [r2, #4]
    43be:	2280      	movs	r2, #128	; 0x80
    43c0:	0252      	lsls	r2, r2, #9
    43c2:	4011      	ands	r1, r2
    43c4:	697a      	ldr	r2, [r7, #20]
    43c6:	430a      	orrs	r2, r1
    43c8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    43ca:	4b06      	ldr	r3, [pc, #24]	; (43e4 <system_gclk_gen_set_config+0x11c>)
    43cc:	4798      	blx	r3
}
    43ce:	46bd      	mov	sp, r7
    43d0:	b006      	add	sp, #24
    43d2:	bd80      	pop	{r7, pc}
    43d4:	000041f9 	.word	0x000041f9
    43d8:	00004279 	.word	0x00004279
    43dc:	40000c08 	.word	0x40000c08
    43e0:	40000c00 	.word	0x40000c00
    43e4:	00004289 	.word	0x00004289

000043e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    43e8:	b580      	push	{r7, lr}
    43ea:	b082      	sub	sp, #8
    43ec:	af00      	add	r7, sp, #0
    43ee:	1c02      	adds	r2, r0, #0
    43f0:	1dfb      	adds	r3, r7, #7
    43f2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    43f4:	46c0      	nop			; (mov r8, r8)
    43f6:	4b0d      	ldr	r3, [pc, #52]	; (442c <system_gclk_gen_enable+0x44>)
    43f8:	4798      	blx	r3
    43fa:	1e03      	subs	r3, r0, #0
    43fc:	d1fb      	bne.n	43f6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    43fe:	4b0c      	ldr	r3, [pc, #48]	; (4430 <system_gclk_gen_enable+0x48>)
    4400:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4402:	4a0c      	ldr	r2, [pc, #48]	; (4434 <system_gclk_gen_enable+0x4c>)
    4404:	1dfb      	adds	r3, r7, #7
    4406:	781b      	ldrb	r3, [r3, #0]
    4408:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	4b07      	ldr	r3, [pc, #28]	; (442c <system_gclk_gen_enable+0x44>)
    440e:	4798      	blx	r3
    4410:	1e03      	subs	r3, r0, #0
    4412:	d1fb      	bne.n	440c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4414:	4b08      	ldr	r3, [pc, #32]	; (4438 <system_gclk_gen_enable+0x50>)
    4416:	4a08      	ldr	r2, [pc, #32]	; (4438 <system_gclk_gen_enable+0x50>)
    4418:	6852      	ldr	r2, [r2, #4]
    441a:	2180      	movs	r1, #128	; 0x80
    441c:	0249      	lsls	r1, r1, #9
    441e:	430a      	orrs	r2, r1
    4420:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4422:	4b06      	ldr	r3, [pc, #24]	; (443c <system_gclk_gen_enable+0x54>)
    4424:	4798      	blx	r3
}
    4426:	46bd      	mov	sp, r7
    4428:	b002      	add	sp, #8
    442a:	bd80      	pop	{r7, pc}
    442c:	000041f9 	.word	0x000041f9
    4430:	00004279 	.word	0x00004279
    4434:	40000c04 	.word	0x40000c04
    4438:	40000c00 	.word	0x40000c00
    443c:	00004289 	.word	0x00004289

00004440 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4440:	b580      	push	{r7, lr}
    4442:	b086      	sub	sp, #24
    4444:	af00      	add	r7, sp, #0
    4446:	1c02      	adds	r2, r0, #0
    4448:	1dfb      	adds	r3, r7, #7
    444a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    444c:	46c0      	nop			; (mov r8, r8)
    444e:	4b2e      	ldr	r3, [pc, #184]	; (4508 <system_gclk_gen_get_hz+0xc8>)
    4450:	4798      	blx	r3
    4452:	1e03      	subs	r3, r0, #0
    4454:	d1fb      	bne.n	444e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4456:	4b2d      	ldr	r3, [pc, #180]	; (450c <system_gclk_gen_get_hz+0xcc>)
    4458:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    445a:	4a2d      	ldr	r2, [pc, #180]	; (4510 <system_gclk_gen_get_hz+0xd0>)
    445c:	1dfb      	adds	r3, r7, #7
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	4b28      	ldr	r3, [pc, #160]	; (4508 <system_gclk_gen_get_hz+0xc8>)
    4466:	4798      	blx	r3
    4468:	1e03      	subs	r3, r0, #0
    446a:	d1fb      	bne.n	4464 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    446c:	4b29      	ldr	r3, [pc, #164]	; (4514 <system_gclk_gen_get_hz+0xd4>)
    446e:	685b      	ldr	r3, [r3, #4]
    4470:	0a1b      	lsrs	r3, r3, #8
    4472:	1c1a      	adds	r2, r3, #0
    4474:	231f      	movs	r3, #31
    4476:	4013      	ands	r3, r2
    4478:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    447a:	1c18      	adds	r0, r3, #0
    447c:	4b26      	ldr	r3, [pc, #152]	; (4518 <system_gclk_gen_get_hz+0xd8>)
    447e:	4798      	blx	r3
    4480:	1c03      	adds	r3, r0, #0
    4482:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4484:	4a22      	ldr	r2, [pc, #136]	; (4510 <system_gclk_gen_get_hz+0xd0>)
    4486:	1dfb      	adds	r3, r7, #7
    4488:	781b      	ldrb	r3, [r3, #0]
    448a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    448c:	4b21      	ldr	r3, [pc, #132]	; (4514 <system_gclk_gen_get_hz+0xd4>)
    448e:	685b      	ldr	r3, [r3, #4]
    4490:	0d1b      	lsrs	r3, r3, #20
    4492:	1c1a      	adds	r2, r3, #0
    4494:	2301      	movs	r3, #1
    4496:	4013      	ands	r3, r2
    4498:	b2da      	uxtb	r2, r3
    449a:	2313      	movs	r3, #19
    449c:	18fb      	adds	r3, r7, r3
    449e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    44a0:	4a1e      	ldr	r2, [pc, #120]	; (451c <system_gclk_gen_get_hz+0xdc>)
    44a2:	1dfb      	adds	r3, r7, #7
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    44a8:	46c0      	nop			; (mov r8, r8)
    44aa:	4b17      	ldr	r3, [pc, #92]	; (4508 <system_gclk_gen_get_hz+0xc8>)
    44ac:	4798      	blx	r3
    44ae:	1e03      	subs	r3, r0, #0
    44b0:	d1fb      	bne.n	44aa <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    44b2:	4b18      	ldr	r3, [pc, #96]	; (4514 <system_gclk_gen_get_hz+0xd4>)
    44b4:	689b      	ldr	r3, [r3, #8]
    44b6:	0a1b      	lsrs	r3, r3, #8
    44b8:	1c1a      	adds	r2, r3, #0
    44ba:	2300      	movs	r3, #0
    44bc:	439a      	bics	r2, r3
    44be:	1c13      	adds	r3, r2, #0
    44c0:	b29b      	uxth	r3, r3
    44c2:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    44c4:	4b16      	ldr	r3, [pc, #88]	; (4520 <system_gclk_gen_get_hz+0xe0>)
    44c6:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    44c8:	2313      	movs	r3, #19
    44ca:	18fb      	adds	r3, r7, r3
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	2b00      	cmp	r3, #0
    44d0:	d109      	bne.n	44e6 <system_gclk_gen_get_hz+0xa6>
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	2b01      	cmp	r3, #1
    44d6:	d906      	bls.n	44e6 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    44d8:	4b12      	ldr	r3, [pc, #72]	; (4524 <system_gclk_gen_get_hz+0xe4>)
    44da:	6978      	ldr	r0, [r7, #20]
    44dc:	68f9      	ldr	r1, [r7, #12]
    44de:	4798      	blx	r3
    44e0:	1c03      	adds	r3, r0, #0
    44e2:	617b      	str	r3, [r7, #20]
    44e4:	e00a      	b.n	44fc <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    44e6:	2313      	movs	r3, #19
    44e8:	18fb      	adds	r3, r7, r3
    44ea:	781b      	ldrb	r3, [r3, #0]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d005      	beq.n	44fc <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	3301      	adds	r3, #1
    44f4:	1c1a      	adds	r2, r3, #0
    44f6:	697b      	ldr	r3, [r7, #20]
    44f8:	40d3      	lsrs	r3, r2
    44fa:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    44fc:	697b      	ldr	r3, [r7, #20]
}
    44fe:	1c18      	adds	r0, r3, #0
    4500:	46bd      	mov	sp, r7
    4502:	b006      	add	sp, #24
    4504:	bd80      	pop	{r7, pc}
    4506:	46c0      	nop			; (mov r8, r8)
    4508:	000041f9 	.word	0x000041f9
    450c:	00004279 	.word	0x00004279
    4510:	40000c04 	.word	0x40000c04
    4514:	40000c00 	.word	0x40000c00
    4518:	00003f51 	.word	0x00003f51
    451c:	40000c08 	.word	0x40000c08
    4520:	00004289 	.word	0x00004289
    4524:	0000515d 	.word	0x0000515d

00004528 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4528:	b580      	push	{r7, lr}
    452a:	b084      	sub	sp, #16
    452c:	af00      	add	r7, sp, #0
    452e:	1c02      	adds	r2, r0, #0
    4530:	6039      	str	r1, [r7, #0]
    4532:	1dfb      	adds	r3, r7, #7
    4534:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4536:	1dfb      	adds	r3, r7, #7
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    453c:	683b      	ldr	r3, [r7, #0]
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	021b      	lsls	r3, r3, #8
    4542:	1c1a      	adds	r2, r3, #0
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	4313      	orrs	r3, r2
    4548:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    454a:	1dfb      	adds	r3, r7, #7
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	1c18      	adds	r0, r3, #0
    4550:	4b04      	ldr	r3, [pc, #16]	; (4564 <system_gclk_chan_set_config+0x3c>)
    4552:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4554:	4b04      	ldr	r3, [pc, #16]	; (4568 <system_gclk_chan_set_config+0x40>)
    4556:	68fa      	ldr	r2, [r7, #12]
    4558:	b292      	uxth	r2, r2
    455a:	805a      	strh	r2, [r3, #2]
}
    455c:	46bd      	mov	sp, r7
    455e:	b004      	add	sp, #16
    4560:	bd80      	pop	{r7, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	000045b1 	.word	0x000045b1
    4568:	40000c00 	.word	0x40000c00

0000456c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    456c:	b580      	push	{r7, lr}
    456e:	b082      	sub	sp, #8
    4570:	af00      	add	r7, sp, #0
    4572:	1c02      	adds	r2, r0, #0
    4574:	1dfb      	adds	r3, r7, #7
    4576:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4578:	4b09      	ldr	r3, [pc, #36]	; (45a0 <system_gclk_chan_enable+0x34>)
    457a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    457c:	4a09      	ldr	r2, [pc, #36]	; (45a4 <system_gclk_chan_enable+0x38>)
    457e:	1dfb      	adds	r3, r7, #7
    4580:	781b      	ldrb	r3, [r3, #0]
    4582:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4584:	4908      	ldr	r1, [pc, #32]	; (45a8 <system_gclk_chan_enable+0x3c>)
    4586:	4b08      	ldr	r3, [pc, #32]	; (45a8 <system_gclk_chan_enable+0x3c>)
    4588:	885b      	ldrh	r3, [r3, #2]
    458a:	b29b      	uxth	r3, r3
    458c:	2280      	movs	r2, #128	; 0x80
    458e:	01d2      	lsls	r2, r2, #7
    4590:	4313      	orrs	r3, r2
    4592:	b29b      	uxth	r3, r3
    4594:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4596:	4b05      	ldr	r3, [pc, #20]	; (45ac <system_gclk_chan_enable+0x40>)
    4598:	4798      	blx	r3
}
    459a:	46bd      	mov	sp, r7
    459c:	b002      	add	sp, #8
    459e:	bd80      	pop	{r7, pc}
    45a0:	00004279 	.word	0x00004279
    45a4:	40000c02 	.word	0x40000c02
    45a8:	40000c00 	.word	0x40000c00
    45ac:	00004289 	.word	0x00004289

000045b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b084      	sub	sp, #16
    45b4:	af00      	add	r7, sp, #0
    45b6:	1c02      	adds	r2, r0, #0
    45b8:	1dfb      	adds	r3, r7, #7
    45ba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    45bc:	4b1d      	ldr	r3, [pc, #116]	; (4634 <system_gclk_chan_disable+0x84>)
    45be:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    45c0:	4a1d      	ldr	r2, [pc, #116]	; (4638 <system_gclk_chan_disable+0x88>)
    45c2:	1dfb      	adds	r3, r7, #7
    45c4:	781b      	ldrb	r3, [r3, #0]
    45c6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    45c8:	4b1c      	ldr	r3, [pc, #112]	; (463c <system_gclk_chan_disable+0x8c>)
    45ca:	885b      	ldrh	r3, [r3, #2]
    45cc:	b29b      	uxth	r3, r3
    45ce:	0a1b      	lsrs	r3, r3, #8
    45d0:	1c1a      	adds	r2, r3, #0
    45d2:	230f      	movs	r3, #15
    45d4:	4013      	ands	r3, r2
    45d6:	b2db      	uxtb	r3, r3
    45d8:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    45da:	4b18      	ldr	r3, [pc, #96]	; (463c <system_gclk_chan_disable+0x8c>)
    45dc:	885a      	ldrh	r2, [r3, #2]
    45de:	4918      	ldr	r1, [pc, #96]	; (4640 <system_gclk_chan_disable+0x90>)
    45e0:	400a      	ands	r2, r1
    45e2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    45e4:	4a15      	ldr	r2, [pc, #84]	; (463c <system_gclk_chan_disable+0x8c>)
    45e6:	4b15      	ldr	r3, [pc, #84]	; (463c <system_gclk_chan_disable+0x8c>)
    45e8:	885b      	ldrh	r3, [r3, #2]
    45ea:	b29b      	uxth	r3, r3
    45ec:	4915      	ldr	r1, [pc, #84]	; (4644 <system_gclk_chan_disable+0x94>)
    45ee:	400b      	ands	r3, r1
    45f0:	b29b      	uxth	r3, r3
    45f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    45f4:	46c0      	nop			; (mov r8, r8)
    45f6:	4b11      	ldr	r3, [pc, #68]	; (463c <system_gclk_chan_disable+0x8c>)
    45f8:	885b      	ldrh	r3, [r3, #2]
    45fa:	b29b      	uxth	r3, r3
    45fc:	1c1a      	adds	r2, r3, #0
    45fe:	2380      	movs	r3, #128	; 0x80
    4600:	01db      	lsls	r3, r3, #7
    4602:	4013      	ands	r3, r2
    4604:	d1f7      	bne.n	45f6 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4606:	4b0d      	ldr	r3, [pc, #52]	; (463c <system_gclk_chan_disable+0x8c>)
    4608:	68fa      	ldr	r2, [r7, #12]
    460a:	b2d2      	uxtb	r2, r2
    460c:	1c11      	adds	r1, r2, #0
    460e:	220f      	movs	r2, #15
    4610:	400a      	ands	r2, r1
    4612:	b2d2      	uxtb	r2, r2
    4614:	1c11      	adds	r1, r2, #0
    4616:	220f      	movs	r2, #15
    4618:	400a      	ands	r2, r1
    461a:	0210      	lsls	r0, r2, #8
    461c:	885a      	ldrh	r2, [r3, #2]
    461e:	4908      	ldr	r1, [pc, #32]	; (4640 <system_gclk_chan_disable+0x90>)
    4620:	400a      	ands	r2, r1
    4622:	1c11      	adds	r1, r2, #0
    4624:	1c02      	adds	r2, r0, #0
    4626:	430a      	orrs	r2, r1
    4628:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    462a:	4b07      	ldr	r3, [pc, #28]	; (4648 <system_gclk_chan_disable+0x98>)
    462c:	4798      	blx	r3
}
    462e:	46bd      	mov	sp, r7
    4630:	b004      	add	sp, #16
    4632:	bd80      	pop	{r7, pc}
    4634:	00004279 	.word	0x00004279
    4638:	40000c02 	.word	0x40000c02
    463c:	40000c00 	.word	0x40000c00
    4640:	fffff0ff 	.word	0xfffff0ff
    4644:	ffffbfff 	.word	0xffffbfff
    4648:	00004289 	.word	0x00004289

0000464c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    464c:	b580      	push	{r7, lr}
    464e:	b084      	sub	sp, #16
    4650:	af00      	add	r7, sp, #0
    4652:	1c02      	adds	r2, r0, #0
    4654:	1dfb      	adds	r3, r7, #7
    4656:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4658:	4b0e      	ldr	r3, [pc, #56]	; (4694 <system_gclk_chan_get_hz+0x48>)
    465a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    465c:	4a0e      	ldr	r2, [pc, #56]	; (4698 <system_gclk_chan_get_hz+0x4c>)
    465e:	1dfb      	adds	r3, r7, #7
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4664:	4b0d      	ldr	r3, [pc, #52]	; (469c <system_gclk_chan_get_hz+0x50>)
    4666:	885b      	ldrh	r3, [r3, #2]
    4668:	b29b      	uxth	r3, r3
    466a:	0a1b      	lsrs	r3, r3, #8
    466c:	1c1a      	adds	r2, r3, #0
    466e:	230f      	movs	r3, #15
    4670:	4013      	ands	r3, r2
    4672:	b2da      	uxtb	r2, r3
    4674:	230f      	movs	r3, #15
    4676:	18fb      	adds	r3, r7, r3
    4678:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    467a:	4b09      	ldr	r3, [pc, #36]	; (46a0 <system_gclk_chan_get_hz+0x54>)
    467c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    467e:	230f      	movs	r3, #15
    4680:	18fb      	adds	r3, r7, r3
    4682:	781b      	ldrb	r3, [r3, #0]
    4684:	1c18      	adds	r0, r3, #0
    4686:	4b07      	ldr	r3, [pc, #28]	; (46a4 <system_gclk_chan_get_hz+0x58>)
    4688:	4798      	blx	r3
    468a:	1c03      	adds	r3, r0, #0
}
    468c:	1c18      	adds	r0, r3, #0
    468e:	46bd      	mov	sp, r7
    4690:	b004      	add	sp, #16
    4692:	bd80      	pop	{r7, pc}
    4694:	00004279 	.word	0x00004279
    4698:	40000c02 	.word	0x40000c02
    469c:	40000c00 	.word	0x40000c00
    46a0:	00004289 	.word	0x00004289
    46a4:	00004441 	.word	0x00004441

000046a8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	b084      	sub	sp, #16
    46ac:	af00      	add	r7, sp, #0
    46ae:	1c02      	adds	r2, r0, #0
    46b0:	1dfb      	adds	r3, r7, #7
    46b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    46b4:	230f      	movs	r3, #15
    46b6:	18fb      	adds	r3, r7, r3
    46b8:	1dfa      	adds	r2, r7, #7
    46ba:	7812      	ldrb	r2, [r2, #0]
    46bc:	09d2      	lsrs	r2, r2, #7
    46be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    46c0:	230e      	movs	r3, #14
    46c2:	18fb      	adds	r3, r7, r3
    46c4:	1dfa      	adds	r2, r7, #7
    46c6:	7812      	ldrb	r2, [r2, #0]
    46c8:	0952      	lsrs	r2, r2, #5
    46ca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    46cc:	4b0d      	ldr	r3, [pc, #52]	; (4704 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    46ce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    46d0:	230f      	movs	r3, #15
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	2b00      	cmp	r3, #0
    46d8:	d10f      	bne.n	46fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    46da:	230f      	movs	r3, #15
    46dc:	18fb      	adds	r3, r7, r3
    46de:	781b      	ldrb	r3, [r3, #0]
    46e0:	009b      	lsls	r3, r3, #2
    46e2:	2210      	movs	r2, #16
    46e4:	4694      	mov	ip, r2
    46e6:	44bc      	add	ip, r7
    46e8:	4463      	add	r3, ip
    46ea:	3b08      	subs	r3, #8
    46ec:	681a      	ldr	r2, [r3, #0]
    46ee:	230e      	movs	r3, #14
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	781b      	ldrb	r3, [r3, #0]
    46f4:	01db      	lsls	r3, r3, #7
    46f6:	18d3      	adds	r3, r2, r3
    46f8:	e000      	b.n	46fc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    46fa:	2300      	movs	r3, #0
	}
}
    46fc:	1c18      	adds	r0, r3, #0
    46fe:	46bd      	mov	sp, r7
    4700:	b004      	add	sp, #16
    4702:	bd80      	pop	{r7, pc}
    4704:	41004400 	.word	0x41004400

00004708 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4708:	b580      	push	{r7, lr}
    470a:	b088      	sub	sp, #32
    470c:	af00      	add	r7, sp, #0
    470e:	60f8      	str	r0, [r7, #12]
    4710:	60b9      	str	r1, [r7, #8]
    4712:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4714:	2300      	movs	r3, #0
    4716:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	78db      	ldrb	r3, [r3, #3]
    471c:	2201      	movs	r2, #1
    471e:	4053      	eors	r3, r2
    4720:	b2db      	uxtb	r3, r3
    4722:	2b00      	cmp	r3, #0
    4724:	d035      	beq.n	4792 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4726:	687b      	ldr	r3, [r7, #4]
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	2b80      	cmp	r3, #128	; 0x80
    472c:	d00b      	beq.n	4746 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	2280      	movs	r2, #128	; 0x80
    4732:	0252      	lsls	r2, r2, #9
    4734:	4313      	orrs	r3, r2
    4736:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	781b      	ldrb	r3, [r3, #0]
    473c:	061b      	lsls	r3, r3, #24
    473e:	1c1a      	adds	r2, r3, #0
    4740:	69fb      	ldr	r3, [r7, #28]
    4742:	4313      	orrs	r3, r2
    4744:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4746:	687b      	ldr	r3, [r7, #4]
    4748:	785b      	ldrb	r3, [r3, #1]
    474a:	2b00      	cmp	r3, #0
    474c:	d003      	beq.n	4756 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4752:	2b02      	cmp	r3, #2
    4754:	d110      	bne.n	4778 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4756:	69fb      	ldr	r3, [r7, #28]
    4758:	2280      	movs	r2, #128	; 0x80
    475a:	0292      	lsls	r2, r2, #10
    475c:	4313      	orrs	r3, r2
    475e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	789b      	ldrb	r3, [r3, #2]
    4764:	2b00      	cmp	r3, #0
    4766:	d004      	beq.n	4772 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4768:	69fb      	ldr	r3, [r7, #28]
    476a:	2280      	movs	r2, #128	; 0x80
    476c:	02d2      	lsls	r2, r2, #11
    476e:	4313      	orrs	r3, r2
    4770:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	68ba      	ldr	r2, [r7, #8]
    4776:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	785b      	ldrb	r3, [r3, #1]
    477c:	2b01      	cmp	r3, #1
    477e:	d003      	beq.n	4788 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4780:	687b      	ldr	r3, [r7, #4]
    4782:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4784:	2b02      	cmp	r3, #2
    4786:	d107      	bne.n	4798 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4788:	69fb      	ldr	r3, [r7, #28]
    478a:	4a21      	ldr	r2, [pc, #132]	; (4810 <_system_pinmux_config+0x108>)
    478c:	4013      	ands	r3, r2
    478e:	61fb      	str	r3, [r7, #28]
    4790:	e002      	b.n	4798 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4792:	68fb      	ldr	r3, [r7, #12]
    4794:	68ba      	ldr	r2, [r7, #8]
    4796:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4798:	68bb      	ldr	r3, [r7, #8]
    479a:	041b      	lsls	r3, r3, #16
    479c:	0c1b      	lsrs	r3, r3, #16
    479e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    47a0:	68bb      	ldr	r3, [r7, #8]
    47a2:	0c1b      	lsrs	r3, r3, #16
    47a4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    47a6:	69ba      	ldr	r2, [r7, #24]
    47a8:	69fb      	ldr	r3, [r7, #28]
    47aa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    47ac:	22a0      	movs	r2, #160	; 0xa0
    47ae:	05d2      	lsls	r2, r2, #23
    47b0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    47b6:	697a      	ldr	r2, [r7, #20]
    47b8:	69fb      	ldr	r3, [r7, #28]
    47ba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    47bc:	22d0      	movs	r2, #208	; 0xd0
    47be:	0612      	lsls	r2, r2, #24
    47c0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    47c6:	687b      	ldr	r3, [r7, #4]
    47c8:	78db      	ldrb	r3, [r3, #3]
    47ca:	2201      	movs	r2, #1
    47cc:	4053      	eors	r3, r2
    47ce:	b2db      	uxtb	r3, r3
    47d0:	2b00      	cmp	r3, #0
    47d2:	d01a      	beq.n	480a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    47d4:	69fa      	ldr	r2, [r7, #28]
    47d6:	2380      	movs	r3, #128	; 0x80
    47d8:	02db      	lsls	r3, r3, #11
    47da:	4013      	ands	r3, r2
    47dc:	d00a      	beq.n	47f4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    47de:	687b      	ldr	r3, [r7, #4]
    47e0:	789b      	ldrb	r3, [r3, #2]
    47e2:	2b01      	cmp	r3, #1
    47e4:	d103      	bne.n	47ee <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    47e6:	68fb      	ldr	r3, [r7, #12]
    47e8:	68ba      	ldr	r2, [r7, #8]
    47ea:	619a      	str	r2, [r3, #24]
    47ec:	e002      	b.n	47f4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    47ee:	68fb      	ldr	r3, [r7, #12]
    47f0:	68ba      	ldr	r2, [r7, #8]
    47f2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	785b      	ldrb	r3, [r3, #1]
    47f8:	2b01      	cmp	r3, #1
    47fa:	d003      	beq.n	4804 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4800:	2b02      	cmp	r3, #2
    4802:	d102      	bne.n	480a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4804:	68fb      	ldr	r3, [r7, #12]
    4806:	68ba      	ldr	r2, [r7, #8]
    4808:	609a      	str	r2, [r3, #8]
		}
	}
}
    480a:	46bd      	mov	sp, r7
    480c:	b008      	add	sp, #32
    480e:	bd80      	pop	{r7, pc}
    4810:	fffbffff 	.word	0xfffbffff

00004814 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4814:	b580      	push	{r7, lr}
    4816:	b084      	sub	sp, #16
    4818:	af00      	add	r7, sp, #0
    481a:	1c02      	adds	r2, r0, #0
    481c:	6039      	str	r1, [r7, #0]
    481e:	1dfb      	adds	r3, r7, #7
    4820:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4822:	1dfb      	adds	r3, r7, #7
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	1c18      	adds	r0, r3, #0
    4828:	4b0b      	ldr	r3, [pc, #44]	; (4858 <system_pinmux_pin_set_config+0x44>)
    482a:	4798      	blx	r3
    482c:	1c03      	adds	r3, r0, #0
    482e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4830:	1dfb      	adds	r3, r7, #7
    4832:	781b      	ldrb	r3, [r3, #0]
    4834:	221f      	movs	r2, #31
    4836:	4013      	ands	r3, r2
    4838:	2201      	movs	r2, #1
    483a:	409a      	lsls	r2, r3
    483c:	1c13      	adds	r3, r2, #0
    483e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4840:	68f9      	ldr	r1, [r7, #12]
    4842:	68ba      	ldr	r2, [r7, #8]
    4844:	683b      	ldr	r3, [r7, #0]
    4846:	1c08      	adds	r0, r1, #0
    4848:	1c11      	adds	r1, r2, #0
    484a:	1c1a      	adds	r2, r3, #0
    484c:	4b03      	ldr	r3, [pc, #12]	; (485c <system_pinmux_pin_set_config+0x48>)
    484e:	4798      	blx	r3
}
    4850:	46bd      	mov	sp, r7
    4852:	b004      	add	sp, #16
    4854:	bd80      	pop	{r7, pc}
    4856:	46c0      	nop			; (mov r8, r8)
    4858:	000046a9 	.word	0x000046a9
    485c:	00004709 	.word	0x00004709

00004860 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4860:	b580      	push	{r7, lr}
    4862:	af00      	add	r7, sp, #0
	return;
    4864:	46c0      	nop			; (mov r8, r8)
}
    4866:	46bd      	mov	sp, r7
    4868:	bd80      	pop	{r7, pc}
    486a:	46c0      	nop			; (mov r8, r8)

0000486c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    486c:	b580      	push	{r7, lr}
    486e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4870:	4b04      	ldr	r3, [pc, #16]	; (4884 <system_init+0x18>)
    4872:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4874:	4b04      	ldr	r3, [pc, #16]	; (4888 <system_init+0x1c>)
    4876:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4878:	4b04      	ldr	r3, [pc, #16]	; (488c <system_init+0x20>)
    487a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    487c:	4b04      	ldr	r3, [pc, #16]	; (4890 <system_init+0x24>)
    487e:	4798      	blx	r3
}
    4880:	46bd      	mov	sp, r7
    4882:	bd80      	pop	{r7, pc}
    4884:	00004135 	.word	0x00004135
    4888:	00003d2d 	.word	0x00003d2d
    488c:	00004861 	.word	0x00004861
    4890:	00004861 	.word	0x00004861

00004894 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4894:	b580      	push	{r7, lr}
    4896:	b082      	sub	sp, #8
    4898:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    489a:	4b16      	ldr	r3, [pc, #88]	; (48f4 <Reset_Handler+0x60>)
    489c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    489e:	4b16      	ldr	r3, [pc, #88]	; (48f8 <Reset_Handler+0x64>)
    48a0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    48a2:	687a      	ldr	r2, [r7, #4]
    48a4:	683b      	ldr	r3, [r7, #0]
    48a6:	429a      	cmp	r2, r3
    48a8:	d00c      	beq.n	48c4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    48aa:	e007      	b.n	48bc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    48ac:	683b      	ldr	r3, [r7, #0]
    48ae:	1d1a      	adds	r2, r3, #4
    48b0:	603a      	str	r2, [r7, #0]
    48b2:	687a      	ldr	r2, [r7, #4]
    48b4:	1d11      	adds	r1, r2, #4
    48b6:	6079      	str	r1, [r7, #4]
    48b8:	6812      	ldr	r2, [r2, #0]
    48ba:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    48bc:	683a      	ldr	r2, [r7, #0]
    48be:	4b0f      	ldr	r3, [pc, #60]	; (48fc <Reset_Handler+0x68>)
    48c0:	429a      	cmp	r2, r3
    48c2:	d3f3      	bcc.n	48ac <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    48c4:	4b0e      	ldr	r3, [pc, #56]	; (4900 <Reset_Handler+0x6c>)
    48c6:	603b      	str	r3, [r7, #0]
    48c8:	e004      	b.n	48d4 <Reset_Handler+0x40>
                *pDest++ = 0;
    48ca:	683b      	ldr	r3, [r7, #0]
    48cc:	1d1a      	adds	r2, r3, #4
    48ce:	603a      	str	r2, [r7, #0]
    48d0:	2200      	movs	r2, #0
    48d2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    48d4:	683a      	ldr	r2, [r7, #0]
    48d6:	4b0b      	ldr	r3, [pc, #44]	; (4904 <Reset_Handler+0x70>)
    48d8:	429a      	cmp	r2, r3
    48da:	d3f6      	bcc.n	48ca <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    48dc:	4b0a      	ldr	r3, [pc, #40]	; (4908 <Reset_Handler+0x74>)
    48de:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    48e0:	4b0a      	ldr	r3, [pc, #40]	; (490c <Reset_Handler+0x78>)
    48e2:	687a      	ldr	r2, [r7, #4]
    48e4:	217f      	movs	r1, #127	; 0x7f
    48e6:	438a      	bics	r2, r1
    48e8:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    48ea:	4b09      	ldr	r3, [pc, #36]	; (4910 <Reset_Handler+0x7c>)
    48ec:	4798      	blx	r3

        /* Branch to main function */
        main();
    48ee:	4b09      	ldr	r3, [pc, #36]	; (4914 <Reset_Handler+0x80>)
    48f0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    48f2:	e7fe      	b.n	48f2 <Reset_Handler+0x5e>
    48f4:	000065b0 	.word	0x000065b0
    48f8:	20000000 	.word	0x20000000
    48fc:	20000070 	.word	0x20000070
    4900:	20000070 	.word	0x20000070
    4904:	20003d40 	.word	0x20003d40
    4908:	00000000 	.word	0x00000000
    490c:	e000ed00 	.word	0xe000ed00
    4910:	000052d5 	.word	0x000052d5
    4914:	00005025 	.word	0x00005025

00004918 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4918:	b580      	push	{r7, lr}
    491a:	af00      	add	r7, sp, #0
        while (1) {
        }
    491c:	e7fe      	b.n	491c <Dummy_Handler+0x4>
    491e:	46c0      	nop			; (mov r8, r8)

00004920 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4920:	b580      	push	{r7, lr}
    4922:	b084      	sub	sp, #16
    4924:	af00      	add	r7, sp, #0
    4926:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4928:	4b0a      	ldr	r3, [pc, #40]	; (4954 <_sbrk+0x34>)
    492a:	681b      	ldr	r3, [r3, #0]
    492c:	2b00      	cmp	r3, #0
    492e:	d102      	bne.n	4936 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4930:	4b08      	ldr	r3, [pc, #32]	; (4954 <_sbrk+0x34>)
    4932:	4a09      	ldr	r2, [pc, #36]	; (4958 <_sbrk+0x38>)
    4934:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4936:	4b07      	ldr	r3, [pc, #28]	; (4954 <_sbrk+0x34>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    493c:	4b05      	ldr	r3, [pc, #20]	; (4954 <_sbrk+0x34>)
    493e:	681a      	ldr	r2, [r3, #0]
    4940:	687b      	ldr	r3, [r7, #4]
    4942:	18d2      	adds	r2, r2, r3
    4944:	4b03      	ldr	r3, [pc, #12]	; (4954 <_sbrk+0x34>)
    4946:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4948:	68fb      	ldr	r3, [r7, #12]
}
    494a:	1c18      	adds	r0, r3, #0
    494c:	46bd      	mov	sp, r7
    494e:	b004      	add	sp, #16
    4950:	bd80      	pop	{r7, pc}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	20003c9c 	.word	0x20003c9c
    4958:	20005d40 	.word	0x20005d40

0000495c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    495c:	b580      	push	{r7, lr}
    495e:	b082      	sub	sp, #8
    4960:	af00      	add	r7, sp, #0
    4962:	6078      	str	r0, [r7, #4]
	return -1;
    4964:	2301      	movs	r3, #1
    4966:	425b      	negs	r3, r3
}
    4968:	1c18      	adds	r0, r3, #0
    496a:	46bd      	mov	sp, r7
    496c:	b002      	add	sp, #8
    496e:	bd80      	pop	{r7, pc}

00004970 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    497a:	683b      	ldr	r3, [r7, #0]
    497c:	2280      	movs	r2, #128	; 0x80
    497e:	0192      	lsls	r2, r2, #6
    4980:	605a      	str	r2, [r3, #4]

	return 0;
    4982:	2300      	movs	r3, #0
}
    4984:	1c18      	adds	r0, r3, #0
    4986:	46bd      	mov	sp, r7
    4988:	b002      	add	sp, #8
    498a:	bd80      	pop	{r7, pc}

0000498c <_isatty>:

extern int _isatty(int file)
{
    498c:	b580      	push	{r7, lr}
    498e:	b082      	sub	sp, #8
    4990:	af00      	add	r7, sp, #0
    4992:	6078      	str	r0, [r7, #4]
	return 1;
    4994:	2301      	movs	r3, #1
}
    4996:	1c18      	adds	r0, r3, #0
    4998:	46bd      	mov	sp, r7
    499a:	b002      	add	sp, #8
    499c:	bd80      	pop	{r7, pc}
    499e:	46c0      	nop			; (mov r8, r8)

000049a0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b084      	sub	sp, #16
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	60b9      	str	r1, [r7, #8]
    49aa:	607a      	str	r2, [r7, #4]
	return 0;
    49ac:	2300      	movs	r3, #0
}
    49ae:	1c18      	adds	r0, r3, #0
    49b0:	46bd      	mov	sp, r7
    49b2:	b004      	add	sp, #16
    49b4:	bd80      	pop	{r7, pc}
    49b6:	46c0      	nop			; (mov r8, r8)

000049b8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	b084      	sub	sp, #16
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    49c0:	687b      	ldr	r3, [r7, #4]
    49c2:	681b      	ldr	r3, [r3, #0]
    49c4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    49c6:	68fb      	ldr	r3, [r7, #12]
    49c8:	69db      	ldr	r3, [r3, #28]
    49ca:	2207      	movs	r2, #7
    49cc:	4013      	ands	r3, r2
    49ce:	1e5a      	subs	r2, r3, #1
    49d0:	4193      	sbcs	r3, r2
    49d2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    49d4:	1c18      	adds	r0, r3, #0
    49d6:	46bd      	mov	sp, r7
    49d8:	b004      	add	sp, #16
    49da:	bd80      	pop	{r7, pc}

000049dc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    49dc:	b580      	push	{r7, lr}
    49de:	b082      	sub	sp, #8
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	1c18      	adds	r0, r3, #0
    49ea:	4b03      	ldr	r3, [pc, #12]	; (49f8 <_i2c_master_wait_for_sync+0x1c>)
    49ec:	4798      	blx	r3
    49ee:	1e03      	subs	r3, r0, #0
    49f0:	d1f9      	bne.n	49e6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    49f2:	46bd      	mov	sp, r7
    49f4:	b002      	add	sp, #8
    49f6:	bd80      	pop	{r7, pc}
    49f8:	000049b9 	.word	0x000049b9

000049fc <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b082      	sub	sp, #8
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    4a04:	687b      	ldr	r3, [r7, #4]
    4a06:	2264      	movs	r2, #100	; 0x64
    4a08:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    4a0a:	687b      	ldr	r3, [r7, #4]
    4a0c:	4a19      	ldr	r2, [pc, #100]	; (4a74 <i2c_master_get_config_defaults+0x78>)
    4a0e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	2200      	movs	r2, #0
    4a14:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	2200      	movs	r2, #0
    4a1a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	2200      	movs	r2, #0
    4a20:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    4a22:	687b      	ldr	r3, [r7, #4]
    4a24:	2280      	movs	r2, #128	; 0x80
    4a26:	0392      	lsls	r2, r2, #14
    4a28:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	2201      	movs	r2, #1
    4a2e:	4252      	negs	r2, r2
    4a30:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    4a32:	687b      	ldr	r3, [r7, #4]
    4a34:	2201      	movs	r2, #1
    4a36:	4252      	negs	r2, r2
    4a38:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	2200      	movs	r2, #0
    4a3e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	2200      	movs	r2, #0
    4a44:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	2224      	movs	r2, #36	; 0x24
    4a4a:	2100      	movs	r1, #0
    4a4c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	2200      	movs	r2, #0
    4a52:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    4a54:	687b      	ldr	r3, [r7, #4]
    4a56:	222c      	movs	r2, #44	; 0x2c
    4a58:	2100      	movs	r1, #0
    4a5a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	222d      	movs	r2, #45	; 0x2d
    4a60:	2100      	movs	r1, #0
    4a62:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    4a64:	687b      	ldr	r3, [r7, #4]
    4a66:	222e      	movs	r2, #46	; 0x2e
    4a68:	2100      	movs	r1, #0
    4a6a:	5499      	strb	r1, [r3, r2]
#endif
}
    4a6c:	46bd      	mov	sp, r7
    4a6e:	b002      	add	sp, #8
    4a70:	bd80      	pop	{r7, pc}
    4a72:	46c0      	nop			; (mov r8, r8)
    4a74:	00000d48 	.word	0x00000d48

00004a78 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    4a78:	b580      	push	{r7, lr}
    4a7a:	b084      	sub	sp, #16
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    4a86:	2300      	movs	r3, #0
    4a88:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	1c18      	adds	r0, r3, #0
    4a8e:	4b10      	ldr	r3, [pc, #64]	; (4ad0 <i2c_master_enable+0x58>)
    4a90:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    4a92:	68bb      	ldr	r3, [r7, #8]
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	2202      	movs	r2, #2
    4a98:	431a      	orrs	r2, r3
    4a9a:	68bb      	ldr	r3, [r7, #8]
    4a9c:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4a9e:	e00c      	b.n	4aba <i2c_master_enable+0x42>
		timeout_counter++;
    4aa0:	68fb      	ldr	r3, [r7, #12]
    4aa2:	3301      	adds	r3, #1
    4aa4:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	88db      	ldrh	r3, [r3, #6]
    4aaa:	1e1a      	subs	r2, r3, #0
    4aac:	68fb      	ldr	r3, [r7, #12]
    4aae:	429a      	cmp	r2, r3
    4ab0:	d803      	bhi.n	4aba <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    4ab2:	68bb      	ldr	r3, [r7, #8]
    4ab4:	2210      	movs	r2, #16
    4ab6:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    4ab8:	e006      	b.n	4ac8 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    4aba:	68bb      	ldr	r3, [r7, #8]
    4abc:	8b5b      	ldrh	r3, [r3, #26]
    4abe:	b29b      	uxth	r3, r3
    4ac0:	1c1a      	adds	r2, r3, #0
    4ac2:	2310      	movs	r3, #16
    4ac4:	4013      	ands	r3, r2
    4ac6:	d0eb      	beq.n	4aa0 <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    4ac8:	46bd      	mov	sp, r7
    4aca:	b004      	add	sp, #16
    4acc:	bd80      	pop	{r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	000049dd 	.word	0x000049dd

00004ad4 <configure_i2c_master>:

/*
	Configures I2C connection with standard settings
*/
void configure_i2c_master(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	//! [init_conf]
	i2c_master_get_config_defaults(&config_i2c_master);
    4ada:	4b18      	ldr	r3, [pc, #96]	; (4b3c <configure_i2c_master+0x68>)
    4adc:	1c18      	adds	r0, r3, #0
    4ade:	4b18      	ldr	r3, [pc, #96]	; (4b40 <configure_i2c_master+0x6c>)
    4ae0:	4798      	blx	r3
	//! [init_conf]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 65535;
    4ae2:	4b16      	ldr	r3, [pc, #88]	; (4b3c <configure_i2c_master+0x68>)
    4ae4:	2201      	movs	r2, #1
    4ae6:	4252      	negs	r2, r2
    4ae8:	82da      	strh	r2, [r3, #22]
	//! [conf_change]

	/* Initialize and enable device with config. */
	//! [init_module]
	int init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    4aea:	4a16      	ldr	r2, [pc, #88]	; (4b44 <configure_i2c_master+0x70>)
    4aec:	4916      	ldr	r1, [pc, #88]	; (4b48 <configure_i2c_master+0x74>)
    4aee:	4b13      	ldr	r3, [pc, #76]	; (4b3c <configure_i2c_master+0x68>)
    4af0:	1c10      	adds	r0, r2, #0
    4af2:	1c1a      	adds	r2, r3, #0
    4af4:	4b15      	ldr	r3, [pc, #84]	; (4b4c <configure_i2c_master+0x78>)
    4af6:	4798      	blx	r3
    4af8:	1c03      	adds	r3, r0, #0
    4afa:	607b      	str	r3, [r7, #4]
	printf("I2C master init status: %d\r\n", init_status);
    4afc:	4a14      	ldr	r2, [pc, #80]	; (4b50 <configure_i2c_master+0x7c>)
    4afe:	687b      	ldr	r3, [r7, #4]
    4b00:	1c10      	adds	r0, r2, #0
    4b02:	1c19      	adds	r1, r3, #0
    4b04:	4b13      	ldr	r3, [pc, #76]	; (4b54 <configure_i2c_master+0x80>)
    4b06:	4798      	blx	r3
	while(init_status != STATUS_OK) {
    4b08:	e00e      	b.n	4b28 <configure_i2c_master+0x54>
		init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    4b0a:	4a0e      	ldr	r2, [pc, #56]	; (4b44 <configure_i2c_master+0x70>)
    4b0c:	490e      	ldr	r1, [pc, #56]	; (4b48 <configure_i2c_master+0x74>)
    4b0e:	4b0b      	ldr	r3, [pc, #44]	; (4b3c <configure_i2c_master+0x68>)
    4b10:	1c10      	adds	r0, r2, #0
    4b12:	1c1a      	adds	r2, r3, #0
    4b14:	4b0d      	ldr	r3, [pc, #52]	; (4b4c <configure_i2c_master+0x78>)
    4b16:	4798      	blx	r3
    4b18:	1c03      	adds	r3, r0, #0
    4b1a:	607b      	str	r3, [r7, #4]
		printf("I2C master init error status: %d\r\n", init_status);
    4b1c:	4a0e      	ldr	r2, [pc, #56]	; (4b58 <configure_i2c_master+0x84>)
    4b1e:	687b      	ldr	r3, [r7, #4]
    4b20:	1c10      	adds	r0, r2, #0
    4b22:	1c19      	adds	r1, r3, #0
    4b24:	4b0b      	ldr	r3, [pc, #44]	; (4b54 <configure_i2c_master+0x80>)
    4b26:	4798      	blx	r3

	/* Initialize and enable device with config. */
	//! [init_module]
	int init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
	printf("I2C master init status: %d\r\n", init_status);
	while(init_status != STATUS_OK) {
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	d1ed      	bne.n	4b0a <configure_i2c_master+0x36>
		printf("I2C master init error status: %d\r\n", init_status);
	}
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
    4b2e:	4b05      	ldr	r3, [pc, #20]	; (4b44 <configure_i2c_master+0x70>)
    4b30:	1c18      	adds	r0, r3, #0
    4b32:	4b0a      	ldr	r3, [pc, #40]	; (4b5c <configure_i2c_master+0x88>)
    4b34:	4798      	blx	r3
	//! [enable_module]
}
    4b36:	46bd      	mov	sp, r7
    4b38:	b002      	add	sp, #8
    4b3a:	bd80      	pop	{r7, pc}
    4b3c:	20003ce8 	.word	0x20003ce8
    4b40:	000049fd 	.word	0x000049fd
    4b44:	20003cdc 	.word	0x20003cdc
    4b48:	42001000 	.word	0x42001000
    4b4c:	000004f1 	.word	0x000004f1
    4b50:	000063f0 	.word	0x000063f0
    4b54:	00005345 	.word	0x00005345
    4b58:	00006410 	.word	0x00006410
    4b5c:	00004a79 	.word	0x00004a79

00004b60 <i2c_writer_helper>:
	detailed in the packet
*/
void i2c_writer_helper(struct i2c_master_packet* packet_address,
                       enum status_code (*i2c_write)(struct i2c_master_module *const module,
                                                     struct i2c_master_packet *const packet))
{
    4b60:	b580      	push	{r7, lr}
    4b62:	b084      	sub	sp, #16
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
    4b68:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0;
    4b6a:	230e      	movs	r3, #14
    4b6c:	18fb      	adds	r3, r7, r3
    4b6e:	2200      	movs	r2, #0
    4b70:	801a      	strh	r2, [r3, #0]
	while (true) {
		int x = i2c_write(&i2c_master_instance, packet_address);
    4b72:	491b      	ldr	r1, [pc, #108]	; (4be0 <i2c_writer_helper+0x80>)
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	683b      	ldr	r3, [r7, #0]
    4b78:	1c08      	adds	r0, r1, #0
    4b7a:	1c11      	adds	r1, r2, #0
    4b7c:	4798      	blx	r3
    4b7e:	1c03      	adds	r3, r0, #0
    4b80:	60bb      	str	r3, [r7, #8]
		if (x == STATUS_OK){
    4b82:	68bb      	ldr	r3, [r7, #8]
    4b84:	2b00      	cmp	r3, #0
    4b86:	d100      	bne.n	4b8a <i2c_writer_helper+0x2a>
			break;
    4b88:	e027      	b.n	4bda <i2c_writer_helper+0x7a>
		}
		if(timeout%100 == 0) {
    4b8a:	230e      	movs	r3, #14
    4b8c:	18fb      	adds	r3, r7, r3
    4b8e:	881a      	ldrh	r2, [r3, #0]
    4b90:	4b14      	ldr	r3, [pc, #80]	; (4be4 <i2c_writer_helper+0x84>)
    4b92:	1c10      	adds	r0, r2, #0
    4b94:	2164      	movs	r1, #100	; 0x64
    4b96:	4798      	blx	r3
    4b98:	1c0b      	adds	r3, r1, #0
    4b9a:	b29b      	uxth	r3, r3
    4b9c:	2b00      	cmp	r3, #0
    4b9e:	d105      	bne.n	4bac <i2c_writer_helper+0x4c>
			printf("i2c_master_write_packet_wait status: %d\r\n",x);
    4ba0:	4a11      	ldr	r2, [pc, #68]	; (4be8 <i2c_writer_helper+0x88>)
    4ba2:	68bb      	ldr	r3, [r7, #8]
    4ba4:	1c10      	adds	r0, r2, #0
    4ba6:	1c19      	adds	r1, r3, #0
    4ba8:	4b10      	ldr	r3, [pc, #64]	; (4bec <i2c_writer_helper+0x8c>)
    4baa:	4798      	blx	r3
		}
		// Increment timeout counter and check if timed out.
		if (timeout++ == TIMEOUT) {
    4bac:	230e      	movs	r3, #14
    4bae:	18fb      	adds	r3, r7, r3
    4bb0:	881b      	ldrh	r3, [r3, #0]
    4bb2:	220e      	movs	r2, #14
    4bb4:	18ba      	adds	r2, r7, r2
    4bb6:	1c59      	adds	r1, r3, #1
    4bb8:	8011      	strh	r1, [r2, #0]
    4bba:	22fa      	movs	r2, #250	; 0xfa
    4bbc:	0092      	lsls	r2, r2, #2
    4bbe:	4293      	cmp	r3, r2
    4bc0:	d104      	bne.n	4bcc <i2c_writer_helper+0x6c>
			printf("I2C write timed out.\r\n");
    4bc2:	4b0b      	ldr	r3, [pc, #44]	; (4bf0 <i2c_writer_helper+0x90>)
    4bc4:	1c18      	adds	r0, r3, #0
    4bc6:	4b0b      	ldr	r3, [pc, #44]	; (4bf4 <i2c_writer_helper+0x94>)
    4bc8:	4798      	blx	r3
			break;
    4bca:	e006      	b.n	4bda <i2c_writer_helper+0x7a>
		}
		printf("i2c_master_write_packet_wait status: %d\r\n",x);
    4bcc:	4a06      	ldr	r2, [pc, #24]	; (4be8 <i2c_writer_helper+0x88>)
    4bce:	68bb      	ldr	r3, [r7, #8]
    4bd0:	1c10      	adds	r0, r2, #0
    4bd2:	1c19      	adds	r1, r3, #0
    4bd4:	4b05      	ldr	r3, [pc, #20]	; (4bec <i2c_writer_helper+0x8c>)
    4bd6:	4798      	blx	r3
	}
    4bd8:	e7cb      	b.n	4b72 <i2c_writer_helper+0x12>
}
    4bda:	46bd      	mov	sp, r7
    4bdc:	b004      	add	sp, #16
    4bde:	bd80      	pop	{r7, pc}
    4be0:	20003cdc 	.word	0x20003cdc
    4be4:	00005269 	.word	0x00005269
    4be8:	00006434 	.word	0x00006434
    4bec:	00005345 	.word	0x00005345
    4bf0:	00006460 	.word	0x00006460
    4bf4:	0000543d 	.word	0x0000543d

00004bf8 <i2c_write_command>:

/*
	Given a pointer to a packet, perform a write over I2C following the information
	detailed in the packet
*/
void i2c_write_command(struct i2c_master_packet* packet_address){
    4bf8:	b580      	push	{r7, lr}
    4bfa:	b082      	sub	sp, #8
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	6078      	str	r0, [r7, #4]
  i2c_writer_helper(packet_address, i2c_master_write_packet_wait);
    4c00:	687a      	ldr	r2, [r7, #4]
    4c02:	4b04      	ldr	r3, [pc, #16]	; (4c14 <i2c_write_command+0x1c>)
    4c04:	1c10      	adds	r0, r2, #0
    4c06:	1c19      	adds	r1, r3, #0
    4c08:	4b03      	ldr	r3, [pc, #12]	; (4c18 <i2c_write_command+0x20>)
    4c0a:	4798      	blx	r3
}
    4c0c:	46bd      	mov	sp, r7
    4c0e:	b002      	add	sp, #8
    4c10:	bd80      	pop	{r7, pc}
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	0000084d 	.word	0x0000084d
    4c18:	00004b61 	.word	0x00004b61

00004c1c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b084      	sub	sp, #16
    4c20:	af00      	add	r7, sp, #0
    4c22:	1c02      	adds	r2, r0, #0
    4c24:	1dfb      	adds	r3, r7, #7
    4c26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4c28:	230f      	movs	r3, #15
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	1dfa      	adds	r2, r7, #7
    4c2e:	7812      	ldrb	r2, [r2, #0]
    4c30:	09d2      	lsrs	r2, r2, #7
    4c32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4c34:	230e      	movs	r3, #14
    4c36:	18fb      	adds	r3, r7, r3
    4c38:	1dfa      	adds	r2, r7, #7
    4c3a:	7812      	ldrb	r2, [r2, #0]
    4c3c:	0952      	lsrs	r2, r2, #5
    4c3e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4c40:	4b0d      	ldr	r3, [pc, #52]	; (4c78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4c42:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4c44:	230f      	movs	r3, #15
    4c46:	18fb      	adds	r3, r7, r3
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d10f      	bne.n	4c6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4c4e:	230f      	movs	r3, #15
    4c50:	18fb      	adds	r3, r7, r3
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	009b      	lsls	r3, r3, #2
    4c56:	2210      	movs	r2, #16
    4c58:	4694      	mov	ip, r2
    4c5a:	44bc      	add	ip, r7
    4c5c:	4463      	add	r3, ip
    4c5e:	3b08      	subs	r3, #8
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	230e      	movs	r3, #14
    4c64:	18fb      	adds	r3, r7, r3
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	01db      	lsls	r3, r3, #7
    4c6a:	18d3      	adds	r3, r2, r3
    4c6c:	e000      	b.n	4c70 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4c6e:	2300      	movs	r3, #0
	}
}
    4c70:	1c18      	adds	r0, r3, #0
    4c72:	46bd      	mov	sp, r7
    4c74:	b004      	add	sp, #16
    4c76:	bd80      	pop	{r7, pc}
    4c78:	41004400 	.word	0x41004400

00004c7c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b082      	sub	sp, #8
    4c80:	af00      	add	r7, sp, #0
    4c82:	1c02      	adds	r2, r0, #0
    4c84:	1dfb      	adds	r3, r7, #7
    4c86:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4c88:	1dfb      	adds	r3, r7, #7
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	1c18      	adds	r0, r3, #0
    4c8e:	4b03      	ldr	r3, [pc, #12]	; (4c9c <port_get_group_from_gpio_pin+0x20>)
    4c90:	4798      	blx	r3
    4c92:	1c03      	adds	r3, r0, #0
}
    4c94:	1c18      	adds	r0, r3, #0
    4c96:	46bd      	mov	sp, r7
    4c98:	b002      	add	sp, #8
    4c9a:	bd80      	pop	{r7, pc}
    4c9c:	00004c1d 	.word	0x00004c1d

00004ca0 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	1c02      	adds	r2, r0, #0
    4ca8:	1dfb      	adds	r3, r7, #7
    4caa:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	781b      	ldrb	r3, [r3, #0]
    4cb0:	1c18      	adds	r0, r3, #0
    4cb2:	4b09      	ldr	r3, [pc, #36]	; (4cd8 <port_pin_toggle_output_level+0x38>)
    4cb4:	4798      	blx	r3
    4cb6:	1c03      	adds	r3, r0, #0
    4cb8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4cba:	1dfb      	adds	r3, r7, #7
    4cbc:	781b      	ldrb	r3, [r3, #0]
    4cbe:	221f      	movs	r2, #31
    4cc0:	4013      	ands	r3, r2
    4cc2:	2201      	movs	r2, #1
    4cc4:	409a      	lsls	r2, r3
    4cc6:	1c13      	adds	r3, r2, #0
    4cc8:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	68ba      	ldr	r2, [r7, #8]
    4cce:	61da      	str	r2, [r3, #28]
}
    4cd0:	46bd      	mov	sp, r7
    4cd2:	b004      	add	sp, #16
    4cd4:	bd80      	pop	{r7, pc}
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	00004c7d 	.word	0x00004c7d

00004cdc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4cdc:	b580      	push	{r7, lr}
    4cde:	b082      	sub	sp, #8
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	1c02      	adds	r2, r0, #0
    4ce4:	1dfb      	adds	r3, r7, #7
    4ce6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4ce8:	4b06      	ldr	r3, [pc, #24]	; (4d04 <system_interrupt_enable+0x28>)
    4cea:	1dfa      	adds	r2, r7, #7
    4cec:	7812      	ldrb	r2, [r2, #0]
    4cee:	1c11      	adds	r1, r2, #0
    4cf0:	221f      	movs	r2, #31
    4cf2:	400a      	ands	r2, r1
    4cf4:	2101      	movs	r1, #1
    4cf6:	4091      	lsls	r1, r2
    4cf8:	1c0a      	adds	r2, r1, #0
    4cfa:	601a      	str	r2, [r3, #0]
}
    4cfc:	46bd      	mov	sp, r7
    4cfe:	b002      	add	sp, #8
    4d00:	bd80      	pop	{r7, pc}
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	e000e100 	.word	0xe000e100

00004d08 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4d08:	b580      	push	{r7, lr}
    4d0a:	b084      	sub	sp, #16
    4d0c:	af00      	add	r7, sp, #0
    4d0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4d10:	687b      	ldr	r3, [r7, #4]
    4d12:	681b      	ldr	r3, [r3, #0]
    4d14:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	69db      	ldr	r3, [r3, #28]
    4d1a:	1e5a      	subs	r2, r3, #1
    4d1c:	4193      	sbcs	r3, r2
    4d1e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4d20:	1c18      	adds	r0, r3, #0
    4d22:	46bd      	mov	sp, r7
    4d24:	b004      	add	sp, #16
    4d26:	bd80      	pop	{r7, pc}

00004d28 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b082      	sub	sp, #8
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4d30:	46c0      	nop			; (mov r8, r8)
    4d32:	687b      	ldr	r3, [r7, #4]
    4d34:	1c18      	adds	r0, r3, #0
    4d36:	4b03      	ldr	r3, [pc, #12]	; (4d44 <_usart_wait_for_sync+0x1c>)
    4d38:	4798      	blx	r3
    4d3a:	1e03      	subs	r3, r0, #0
    4d3c:	d1f9      	bne.n	4d32 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4d3e:	46bd      	mov	sp, r7
    4d40:	b002      	add	sp, #8
    4d42:	bd80      	pop	{r7, pc}
    4d44:	00004d09 	.word	0x00004d09

00004d48 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4d48:	b580      	push	{r7, lr}
    4d4a:	b082      	sub	sp, #8
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	2280      	movs	r2, #128	; 0x80
    4d54:	05d2      	lsls	r2, r2, #23
    4d56:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4d58:	687b      	ldr	r3, [r7, #4]
    4d5a:	2200      	movs	r2, #0
    4d5c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	22ff      	movs	r2, #255	; 0xff
    4d62:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	2200      	movs	r2, #0
    4d68:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	2200      	movs	r2, #0
    4d6e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4d70:	687b      	ldr	r3, [r7, #4]
    4d72:	2296      	movs	r2, #150	; 0x96
    4d74:	0192      	lsls	r2, r2, #6
    4d76:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4d78:	687b      	ldr	r3, [r7, #4]
    4d7a:	2224      	movs	r2, #36	; 0x24
    4d7c:	2101      	movs	r1, #1
    4d7e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	2225      	movs	r2, #37	; 0x25
    4d84:	2101      	movs	r1, #1
    4d86:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	2226      	movs	r2, #38	; 0x26
    4d8c:	2100      	movs	r1, #0
    4d8e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	2227      	movs	r2, #39	; 0x27
    4d94:	2100      	movs	r1, #0
    4d96:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	2200      	movs	r2, #0
    4d9c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	2288      	movs	r2, #136	; 0x88
    4da2:	0352      	lsls	r2, r2, #13
    4da4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	222c      	movs	r2, #44	; 0x2c
    4daa:	2100      	movs	r1, #0
    4dac:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	222d      	movs	r2, #45	; 0x2d
    4db2:	2100      	movs	r1, #0
    4db4:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4db6:	687b      	ldr	r3, [r7, #4]
    4db8:	2200      	movs	r2, #0
    4dba:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4dbc:	687b      	ldr	r3, [r7, #4]
    4dbe:	2200      	movs	r2, #0
    4dc0:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	2200      	movs	r2, #0
    4dc6:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	2200      	movs	r2, #0
    4dcc:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	2200      	movs	r2, #0
    4dd2:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	2200      	movs	r2, #0
    4dd8:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	2200      	movs	r2, #0
    4dde:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	2200      	movs	r2, #0
    4de4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	2200      	movs	r2, #0
    4dea:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	2200      	movs	r2, #0
    4df0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	2213      	movs	r2, #19
    4df6:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	2200      	movs	r2, #0
    4dfc:	775a      	strb	r2, [r3, #29]
#endif
}
    4dfe:	46bd      	mov	sp, r7
    4e00:	b002      	add	sp, #8
    4e02:	bd80      	pop	{r7, pc}

00004e04 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b084      	sub	sp, #16
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	681b      	ldr	r3, [r3, #0]
    4e10:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	681b      	ldr	r3, [r3, #0]
    4e16:	1c18      	adds	r0, r3, #0
    4e18:	4b09      	ldr	r3, [pc, #36]	; (4e40 <usart_enable+0x3c>)
    4e1a:	4798      	blx	r3
    4e1c:	1c03      	adds	r3, r0, #0
    4e1e:	1c18      	adds	r0, r3, #0
    4e20:	4b08      	ldr	r3, [pc, #32]	; (4e44 <usart_enable+0x40>)
    4e22:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	1c18      	adds	r0, r3, #0
    4e28:	4b07      	ldr	r3, [pc, #28]	; (4e48 <usart_enable+0x44>)
    4e2a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4e2c:	68fb      	ldr	r3, [r7, #12]
    4e2e:	681b      	ldr	r3, [r3, #0]
    4e30:	2202      	movs	r2, #2
    4e32:	431a      	orrs	r2, r3
    4e34:	68fb      	ldr	r3, [r7, #12]
    4e36:	601a      	str	r2, [r3, #0]
}
    4e38:	46bd      	mov	sp, r7
    4e3a:	b004      	add	sp, #16
    4e3c:	bd80      	pop	{r7, pc}
    4e3e:	46c0      	nop			; (mov r8, r8)
    4e40:	00000eed 	.word	0x00000eed
    4e44:	00004cdd 	.word	0x00004cdd
    4e48:	00004d29 	.word	0x00004d29

00004e4c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4e4c:	b580      	push	{r7, lr}
    4e4e:	b084      	sub	sp, #16
    4e50:	af00      	add	r7, sp, #0
    4e52:	60f8      	str	r0, [r7, #12]
    4e54:	60b9      	str	r1, [r7, #8]
    4e56:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4e58:	68f9      	ldr	r1, [r7, #12]
    4e5a:	68ba      	ldr	r2, [r7, #8]
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	1c08      	adds	r0, r1, #0
    4e60:	1c11      	adds	r1, r2, #0
    4e62:	1c1a      	adds	r2, r3, #0
    4e64:	4b05      	ldr	r3, [pc, #20]	; (4e7c <usart_serial_init+0x30>)
    4e66:	4798      	blx	r3
    4e68:	1e03      	subs	r3, r0, #0
    4e6a:	d101      	bne.n	4e70 <usart_serial_init+0x24>
		return true;
    4e6c:	2301      	movs	r3, #1
    4e6e:	e000      	b.n	4e72 <usart_serial_init+0x26>
	}
	else {
		return false;
    4e70:	2300      	movs	r3, #0
	}
}
    4e72:	1c18      	adds	r0, r3, #0
    4e74:	46bd      	mov	sp, r7
    4e76:	b004      	add	sp, #16
    4e78:	bd80      	pop	{r7, pc}
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	00001399 	.word	0x00001399

00004e80 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4e80:	b580      	push	{r7, lr}
    4e82:	b082      	sub	sp, #8
    4e84:	af00      	add	r7, sp, #0
    4e86:	6078      	str	r0, [r7, #4]
    4e88:	1c0a      	adds	r2, r1, #0
    4e8a:	1cfb      	adds	r3, r7, #3
    4e8c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	1cfb      	adds	r3, r7, #3
    4e92:	781b      	ldrb	r3, [r3, #0]
    4e94:	b29b      	uxth	r3, r3
    4e96:	687a      	ldr	r2, [r7, #4]
    4e98:	1c10      	adds	r0, r2, #0
    4e9a:	1c19      	adds	r1, r3, #0
    4e9c:	4b04      	ldr	r3, [pc, #16]	; (4eb0 <usart_serial_putchar+0x30>)
    4e9e:	4798      	blx	r3
    4ea0:	1e03      	subs	r3, r0, #0
    4ea2:	d1f5      	bne.n	4e90 <usart_serial_putchar+0x10>

	return STATUS_OK;
    4ea4:	2300      	movs	r3, #0
}
    4ea6:	1c18      	adds	r0, r3, #0
    4ea8:	46bd      	mov	sp, r7
    4eaa:	b002      	add	sp, #8
    4eac:	bd80      	pop	{r7, pc}
    4eae:	46c0      	nop			; (mov r8, r8)
    4eb0:	00001609 	.word	0x00001609

00004eb4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b084      	sub	sp, #16
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
    4ebc:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    4ebe:	230e      	movs	r3, #14
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	2200      	movs	r2, #0
    4ec4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	687a      	ldr	r2, [r7, #4]
    4eca:	230e      	movs	r3, #14
    4ecc:	18fb      	adds	r3, r7, r3
    4ece:	1c10      	adds	r0, r2, #0
    4ed0:	1c19      	adds	r1, r3, #0
    4ed2:	4b06      	ldr	r3, [pc, #24]	; (4eec <usart_serial_getchar+0x38>)
    4ed4:	4798      	blx	r3
    4ed6:	1e03      	subs	r3, r0, #0
    4ed8:	d1f6      	bne.n	4ec8 <usart_serial_getchar+0x14>

	*c = temp;
    4eda:	230e      	movs	r3, #14
    4edc:	18fb      	adds	r3, r7, r3
    4ede:	881b      	ldrh	r3, [r3, #0]
    4ee0:	b2da      	uxtb	r2, r3
    4ee2:	683b      	ldr	r3, [r7, #0]
    4ee4:	701a      	strb	r2, [r3, #0]
}
    4ee6:	46bd      	mov	sp, r7
    4ee8:	b004      	add	sp, #16
    4eea:	bd80      	pop	{r7, pc}
    4eec:	0000166d 	.word	0x0000166d

00004ef0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	b084      	sub	sp, #16
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	60f8      	str	r0, [r7, #12]
    4ef8:	60b9      	str	r1, [r7, #8]
    4efa:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    4efc:	4b10      	ldr	r3, [pc, #64]	; (4f40 <stdio_serial_init+0x50>)
    4efe:	68fa      	ldr	r2, [r7, #12]
    4f00:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4f02:	4b10      	ldr	r3, [pc, #64]	; (4f44 <stdio_serial_init+0x54>)
    4f04:	4a10      	ldr	r2, [pc, #64]	; (4f48 <stdio_serial_init+0x58>)
    4f06:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4f08:	4b10      	ldr	r3, [pc, #64]	; (4f4c <stdio_serial_init+0x5c>)
    4f0a:	4a11      	ldr	r2, [pc, #68]	; (4f50 <stdio_serial_init+0x60>)
    4f0c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    4f0e:	68f9      	ldr	r1, [r7, #12]
    4f10:	68ba      	ldr	r2, [r7, #8]
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	1c08      	adds	r0, r1, #0
    4f16:	1c11      	adds	r1, r2, #0
    4f18:	1c1a      	adds	r2, r3, #0
    4f1a:	4b0e      	ldr	r3, [pc, #56]	; (4f54 <stdio_serial_init+0x64>)
    4f1c:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4f1e:	4b0e      	ldr	r3, [pc, #56]	; (4f58 <stdio_serial_init+0x68>)
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	689b      	ldr	r3, [r3, #8]
    4f24:	1c18      	adds	r0, r3, #0
    4f26:	2100      	movs	r1, #0
    4f28:	4b0c      	ldr	r3, [pc, #48]	; (4f5c <stdio_serial_init+0x6c>)
    4f2a:	4798      	blx	r3
	setbuf(stdin, NULL);
    4f2c:	4b0a      	ldr	r3, [pc, #40]	; (4f58 <stdio_serial_init+0x68>)
    4f2e:	681b      	ldr	r3, [r3, #0]
    4f30:	685b      	ldr	r3, [r3, #4]
    4f32:	1c18      	adds	r0, r3, #0
    4f34:	2100      	movs	r1, #0
    4f36:	4b09      	ldr	r3, [pc, #36]	; (4f5c <stdio_serial_init+0x6c>)
    4f38:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    4f3a:	46bd      	mov	sp, r7
    4f3c:	b004      	add	sp, #16
    4f3e:	bd80      	pop	{r7, pc}
    4f40:	20003d38 	.word	0x20003d38
    4f44:	20003d34 	.word	0x20003d34
    4f48:	00004e81 	.word	0x00004e81
    4f4c:	20003d30 	.word	0x20003d30
    4f50:	00004eb5 	.word	0x00004eb5
    4f54:	00004e4d 	.word	0x00004e4d
    4f58:	2000006c 	.word	0x2000006c
    4f5c:	00005451 	.word	0x00005451

00004f60 <configure_console>:

#include "main.h"

//extern void xPortSysTickHandler(void);

static void configure_console(void) {
    4f60:	b580      	push	{r7, lr}
    4f62:	b090      	sub	sp, #64	; 0x40
    4f64:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4f66:	1c3b      	adds	r3, r7, #0
    4f68:	1c18      	adds	r0, r3, #0
    4f6a:	4b13      	ldr	r3, [pc, #76]	; (4fb8 <configure_console+0x58>)
    4f6c:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    4f6e:	1c3b      	adds	r3, r7, #0
    4f70:	2280      	movs	r2, #128	; 0x80
    4f72:	0352      	lsls	r2, r2, #13
    4f74:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    4f76:	1c3b      	adds	r3, r7, #0
    4f78:	4a10      	ldr	r2, [pc, #64]	; (4fbc <configure_console+0x5c>)
    4f7a:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    4f7c:	1c3b      	adds	r3, r7, #0
    4f7e:	4a10      	ldr	r2, [pc, #64]	; (4fc0 <configure_console+0x60>)
    4f80:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    4f82:	1c3b      	adds	r3, r7, #0
    4f84:	2201      	movs	r2, #1
    4f86:	4252      	negs	r2, r2
    4f88:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    4f8a:	1c3b      	adds	r3, r7, #0
    4f8c:	2201      	movs	r2, #1
    4f8e:	4252      	negs	r2, r2
    4f90:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    4f92:	1c3b      	adds	r3, r7, #0
    4f94:	2296      	movs	r2, #150	; 0x96
    4f96:	0212      	lsls	r2, r2, #8
    4f98:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE,
    4f9a:	4a0a      	ldr	r2, [pc, #40]	; (4fc4 <configure_console+0x64>)
    4f9c:	490a      	ldr	r1, [pc, #40]	; (4fc8 <configure_console+0x68>)
    4f9e:	1c3b      	adds	r3, r7, #0
    4fa0:	1c10      	adds	r0, r2, #0
    4fa2:	1c1a      	adds	r2, r3, #0
    4fa4:	4b09      	ldr	r3, [pc, #36]	; (4fcc <configure_console+0x6c>)
    4fa6:	4798      	blx	r3
	&usart_conf);
	usart_enable(&cdc_uart_module);
    4fa8:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <configure_console+0x64>)
    4faa:	1c18      	adds	r0, r3, #0
    4fac:	4b08      	ldr	r3, [pc, #32]	; (4fd0 <configure_console+0x70>)
    4fae:	4798      	blx	r3
}
    4fb0:	46bd      	mov	sp, r7
    4fb2:	b010      	add	sp, #64	; 0x40
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	46c0      	nop			; (mov r8, r8)
    4fb8:	00004d49 	.word	0x00004d49
    4fbc:	00160002 	.word	0x00160002
    4fc0:	00170002 	.word	0x00170002
    4fc4:	20003ca0 	.word	0x20003ca0
    4fc8:	42001400 	.word	0x42001400
    4fcc:	00004ef1 	.word	0x00004ef1
    4fd0:	00004e05 	.word	0x00004e05

00004fd4 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
    4fd4:	b580      	push	{r7, lr}
    4fd6:	b082      	sub	sp, #8
    4fd8:	af00      	add	r7, sp, #0
    4fda:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

    configure_console();
    4fdc:	4b03      	ldr	r3, [pc, #12]	; (4fec <task_monitor+0x18>)
    4fde:	4798      	blx	r3
	for (;;) {
		//printf("hi");
		vTaskDelay(1000);
    4fe0:	23fa      	movs	r3, #250	; 0xfa
    4fe2:	009b      	lsls	r3, r3, #2
    4fe4:	1c18      	adds	r0, r3, #0
    4fe6:	4b02      	ldr	r3, [pc, #8]	; (4ff0 <task_monitor+0x1c>)
    4fe8:	4798      	blx	r3
	}
    4fea:	e7f9      	b.n	4fe0 <task_monitor+0xc>
    4fec:	00004f61 	.word	0x00004f61
    4ff0:	00002add 	.word	0x00002add

00004ff4 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
    4ff4:	b580      	push	{r7, lr}
    4ff6:	b082      	sub	sp, #8
    4ff8:	af00      	add	r7, sp, #0
    4ffa:	6078      	str	r0, [r7, #4]
	for (;;) {
		//printf("blinking\n");
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
    4ffc:	203e      	movs	r0, #62	; 0x3e
    4ffe:	4b04      	ldr	r3, [pc, #16]	; (5010 <task_led+0x1c>)
    5000:	4798      	blx	r3
	#endif
		vTaskDelay(1000);
    5002:	23fa      	movs	r3, #250	; 0xfa
    5004:	009b      	lsls	r3, r3, #2
    5006:	1c18      	adds	r0, r3, #0
    5008:	4b02      	ldr	r3, [pc, #8]	; (5014 <task_led+0x20>)
    500a:	4798      	blx	r3
	}
    500c:	e7f6      	b.n	4ffc <task_led+0x8>
    500e:	46c0      	nop			; (mov r8, r8)
    5010:	00004ca1 	.word	0x00004ca1
    5014:	00002add 	.word	0x00002add

00005018 <task_adc_read>:
}

static void task_adc_read(void *pvParameters) {
    5018:	b580      	push	{r7, lr}
    501a:	b082      	sub	sp, #8
    501c:	af00      	add	r7, sp, #0
    501e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	for (;;) {
		
	}
    5020:	e7fe      	b.n	5020 <task_adc_read+0x8>
    5022:	46c0      	nop			; (mov r8, r8)

00005024 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    5024:	b590      	push	{r4, r7, lr}
    5026:	b089      	sub	sp, #36	; 0x24
    5028:	af04      	add	r7, sp, #16
	/* Initilize the SAM system */
	system_init();
    502a:	4b37      	ldr	r3, [pc, #220]	; (5108 <main+0xe4>)
    502c:	4798      	blx	r3

	/* Initialize the console uart */
	configure_console();
    502e:	4b37      	ldr	r3, [pc, #220]	; (510c <main+0xe8>)
    5030:	4798      	blx	r3
	
	/* Output demo infomation. */
	printf("-- Freertos Example --\n\r");
    5032:	4b37      	ldr	r3, [pc, #220]	; (5110 <main+0xec>)
    5034:	1c18      	adds	r0, r3, #0
    5036:	4b37      	ldr	r3, [pc, #220]	; (5114 <main+0xf0>)
    5038:	4798      	blx	r3
	printf("-- %s\n\r", BOARD_NAME);
    503a:	4a37      	ldr	r2, [pc, #220]	; (5118 <main+0xf4>)
    503c:	4b37      	ldr	r3, [pc, #220]	; (511c <main+0xf8>)
    503e:	1c10      	adds	r0, r2, #0
    5040:	1c19      	adds	r1, r3, #0
    5042:	4b34      	ldr	r3, [pc, #208]	; (5114 <main+0xf0>)
    5044:	4798      	blx	r3
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    5046:	4936      	ldr	r1, [pc, #216]	; (5120 <main+0xfc>)
    5048:	4a36      	ldr	r2, [pc, #216]	; (5124 <main+0x100>)
    504a:	4b37      	ldr	r3, [pc, #220]	; (5128 <main+0x104>)
    504c:	1c08      	adds	r0, r1, #0
    504e:	1c11      	adds	r1, r2, #0
    5050:	1c1a      	adds	r2, r3, #0
    5052:	4b30      	ldr	r3, [pc, #192]	; (5114 <main+0xf0>)
    5054:	4798      	blx	r3
	
	configure_i2c_master();
    5056:	4b35      	ldr	r3, [pc, #212]	; (512c <main+0x108>)
    5058:	4798      	blx	r3
	printf("AVG: %d\n\r", cum/i);*/
    //printf("Temperature in F: %f\r\n", MLX90614_read_temperature());
	
	
	// motor controller test that says bad address
	uint8_t write_buffer[3] = {
    505a:	230c      	movs	r3, #12
    505c:	18fa      	adds	r2, r7, r3
    505e:	4b34      	ldr	r3, [pc, #208]	; (5130 <main+0x10c>)
    5060:	1c11      	adds	r1, r2, #0
    5062:	1c1a      	adds	r2, r3, #0
    5064:	2303      	movs	r3, #3
    5066:	1c08      	adds	r0, r1, #0
    5068:	1c11      	adds	r1, r2, #0
    506a:	1c1a      	adds	r2, r3, #0
    506c:	4b31      	ldr	r3, [pc, #196]	; (5134 <main+0x110>)
    506e:	4798      	blx	r3
		0xaa, 0x0a, 0x00
	};
	
	struct i2c_master_packet write_packet = {
    5070:	1c3b      	adds	r3, r7, #0
    5072:	220f      	movs	r2, #15
    5074:	801a      	strh	r2, [r3, #0]
    5076:	1c3b      	adds	r3, r7, #0
    5078:	2203      	movs	r2, #3
    507a:	805a      	strh	r2, [r3, #2]
    507c:	1c3b      	adds	r3, r7, #0
    507e:	220c      	movs	r2, #12
    5080:	18ba      	adds	r2, r7, r2
    5082:	605a      	str	r2, [r3, #4]
    5084:	1c3b      	adds	r3, r7, #0
    5086:	2200      	movs	r2, #0
    5088:	721a      	strb	r2, [r3, #8]
    508a:	1c3b      	adds	r3, r7, #0
    508c:	2200      	movs	r2, #0
    508e:	725a      	strb	r2, [r3, #9]
    5090:	1c3b      	adds	r3, r7, #0
    5092:	2200      	movs	r2, #0
    5094:	729a      	strb	r2, [r3, #10]
		.data        = write_buffer,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	i2c_write_command(&write_packet);
    5096:	1c3b      	adds	r3, r7, #0
    5098:	1c18      	adds	r0, r3, #0
    509a:	4b27      	ldr	r3, [pc, #156]	; (5138 <main+0x114>)
    509c:	4798      	blx	r3
	
	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
    509e:	4827      	ldr	r0, [pc, #156]	; (513c <main+0x118>)
    50a0:	4927      	ldr	r1, [pc, #156]	; (5140 <main+0x11c>)
    50a2:	2380      	movs	r3, #128	; 0x80
    50a4:	009a      	lsls	r2, r3, #2
    50a6:	2300      	movs	r3, #0
    50a8:	9300      	str	r3, [sp, #0]
    50aa:	2300      	movs	r3, #0
    50ac:	9301      	str	r3, [sp, #4]
    50ae:	2300      	movs	r3, #0
    50b0:	9302      	str	r3, [sp, #8]
    50b2:	2300      	movs	r3, #0
    50b4:	9303      	str	r3, [sp, #12]
    50b6:	2300      	movs	r3, #0
    50b8:	4c22      	ldr	r4, [pc, #136]	; (5144 <main+0x120>)
    50ba:	47a0      	blx	r4
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Monitor task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
    50bc:	4822      	ldr	r0, [pc, #136]	; (5148 <main+0x124>)
    50be:	4923      	ldr	r1, [pc, #140]	; (514c <main+0x128>)
    50c0:	2380      	movs	r3, #128	; 0x80
    50c2:	005a      	lsls	r2, r3, #1
    50c4:	2300      	movs	r3, #0
    50c6:	9300      	str	r3, [sp, #0]
    50c8:	2300      	movs	r3, #0
    50ca:	9301      	str	r3, [sp, #4]
    50cc:	2300      	movs	r3, #0
    50ce:	9302      	str	r3, [sp, #8]
    50d0:	2300      	movs	r3, #0
    50d2:	9303      	str	r3, [sp, #12]
    50d4:	2300      	movs	r3, #0
    50d6:	4c1b      	ldr	r4, [pc, #108]	; (5144 <main+0x120>)
    50d8:	47a0      	blx	r4
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}
	
	/* Create task to make led blink */
	if (xTaskCreate(task_adc_read, "ADC", TASK_ADC_STACK_SIZE, NULL,
    50da:	481d      	ldr	r0, [pc, #116]	; (5150 <main+0x12c>)
    50dc:	491d      	ldr	r1, [pc, #116]	; (5154 <main+0x130>)
    50de:	2380      	movs	r3, #128	; 0x80
    50e0:	00da      	lsls	r2, r3, #3
    50e2:	2300      	movs	r3, #0
    50e4:	9300      	str	r3, [sp, #0]
    50e6:	2300      	movs	r3, #0
    50e8:	9301      	str	r3, [sp, #4]
    50ea:	2300      	movs	r3, #0
    50ec:	9302      	str	r3, [sp, #8]
    50ee:	2300      	movs	r3, #0
    50f0:	9303      	str	r3, [sp, #12]
    50f2:	2300      	movs	r3, #0
    50f4:	4c13      	ldr	r4, [pc, #76]	; (5144 <main+0x120>)
    50f6:	47a0      	blx	r4
	TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
    50f8:	4b17      	ldr	r3, [pc, #92]	; (5158 <main+0x134>)
    50fa:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
    50fc:	2300      	movs	r3, #0
}
    50fe:	1c18      	adds	r0, r3, #0
    5100:	46bd      	mov	sp, r7
    5102:	b005      	add	sp, #20
    5104:	bd90      	pop	{r4, r7, pc}
    5106:	46c0      	nop			; (mov r8, r8)
    5108:	0000486d 	.word	0x0000486d
    510c:	00004f61 	.word	0x00004f61
    5110:	00006478 	.word	0x00006478
    5114:	00005345 	.word	0x00005345
    5118:	00006494 	.word	0x00006494
    511c:	0000649c 	.word	0x0000649c
    5120:	000064b0 	.word	0x000064b0
    5124:	000064c8 	.word	0x000064c8
    5128:	000064d4 	.word	0x000064d4
    512c:	00004ad5 	.word	0x00004ad5
    5130:	000064f0 	.word	0x000064f0
    5134:	00005321 	.word	0x00005321
    5138:	00004bf9 	.word	0x00004bf9
    513c:	00004fd5 	.word	0x00004fd5
    5140:	000064e0 	.word	0x000064e0
    5144:	0000294d 	.word	0x0000294d
    5148:	00004ff5 	.word	0x00004ff5
    514c:	000064e8 	.word	0x000064e8
    5150:	00005019 	.word	0x00005019
    5154:	000064ec 	.word	0x000064ec
    5158:	00002b55 	.word	0x00002b55

0000515c <__aeabi_uidiv>:
    515c:	2200      	movs	r2, #0
    515e:	0843      	lsrs	r3, r0, #1
    5160:	428b      	cmp	r3, r1
    5162:	d374      	bcc.n	524e <__aeabi_uidiv+0xf2>
    5164:	0903      	lsrs	r3, r0, #4
    5166:	428b      	cmp	r3, r1
    5168:	d35f      	bcc.n	522a <__aeabi_uidiv+0xce>
    516a:	0a03      	lsrs	r3, r0, #8
    516c:	428b      	cmp	r3, r1
    516e:	d344      	bcc.n	51fa <__aeabi_uidiv+0x9e>
    5170:	0b03      	lsrs	r3, r0, #12
    5172:	428b      	cmp	r3, r1
    5174:	d328      	bcc.n	51c8 <__aeabi_uidiv+0x6c>
    5176:	0c03      	lsrs	r3, r0, #16
    5178:	428b      	cmp	r3, r1
    517a:	d30d      	bcc.n	5198 <__aeabi_uidiv+0x3c>
    517c:	22ff      	movs	r2, #255	; 0xff
    517e:	0209      	lsls	r1, r1, #8
    5180:	ba12      	rev	r2, r2
    5182:	0c03      	lsrs	r3, r0, #16
    5184:	428b      	cmp	r3, r1
    5186:	d302      	bcc.n	518e <__aeabi_uidiv+0x32>
    5188:	1212      	asrs	r2, r2, #8
    518a:	0209      	lsls	r1, r1, #8
    518c:	d065      	beq.n	525a <__aeabi_uidiv+0xfe>
    518e:	0b03      	lsrs	r3, r0, #12
    5190:	428b      	cmp	r3, r1
    5192:	d319      	bcc.n	51c8 <__aeabi_uidiv+0x6c>
    5194:	e000      	b.n	5198 <__aeabi_uidiv+0x3c>
    5196:	0a09      	lsrs	r1, r1, #8
    5198:	0bc3      	lsrs	r3, r0, #15
    519a:	428b      	cmp	r3, r1
    519c:	d301      	bcc.n	51a2 <__aeabi_uidiv+0x46>
    519e:	03cb      	lsls	r3, r1, #15
    51a0:	1ac0      	subs	r0, r0, r3
    51a2:	4152      	adcs	r2, r2
    51a4:	0b83      	lsrs	r3, r0, #14
    51a6:	428b      	cmp	r3, r1
    51a8:	d301      	bcc.n	51ae <__aeabi_uidiv+0x52>
    51aa:	038b      	lsls	r3, r1, #14
    51ac:	1ac0      	subs	r0, r0, r3
    51ae:	4152      	adcs	r2, r2
    51b0:	0b43      	lsrs	r3, r0, #13
    51b2:	428b      	cmp	r3, r1
    51b4:	d301      	bcc.n	51ba <__aeabi_uidiv+0x5e>
    51b6:	034b      	lsls	r3, r1, #13
    51b8:	1ac0      	subs	r0, r0, r3
    51ba:	4152      	adcs	r2, r2
    51bc:	0b03      	lsrs	r3, r0, #12
    51be:	428b      	cmp	r3, r1
    51c0:	d301      	bcc.n	51c6 <__aeabi_uidiv+0x6a>
    51c2:	030b      	lsls	r3, r1, #12
    51c4:	1ac0      	subs	r0, r0, r3
    51c6:	4152      	adcs	r2, r2
    51c8:	0ac3      	lsrs	r3, r0, #11
    51ca:	428b      	cmp	r3, r1
    51cc:	d301      	bcc.n	51d2 <__aeabi_uidiv+0x76>
    51ce:	02cb      	lsls	r3, r1, #11
    51d0:	1ac0      	subs	r0, r0, r3
    51d2:	4152      	adcs	r2, r2
    51d4:	0a83      	lsrs	r3, r0, #10
    51d6:	428b      	cmp	r3, r1
    51d8:	d301      	bcc.n	51de <__aeabi_uidiv+0x82>
    51da:	028b      	lsls	r3, r1, #10
    51dc:	1ac0      	subs	r0, r0, r3
    51de:	4152      	adcs	r2, r2
    51e0:	0a43      	lsrs	r3, r0, #9
    51e2:	428b      	cmp	r3, r1
    51e4:	d301      	bcc.n	51ea <__aeabi_uidiv+0x8e>
    51e6:	024b      	lsls	r3, r1, #9
    51e8:	1ac0      	subs	r0, r0, r3
    51ea:	4152      	adcs	r2, r2
    51ec:	0a03      	lsrs	r3, r0, #8
    51ee:	428b      	cmp	r3, r1
    51f0:	d301      	bcc.n	51f6 <__aeabi_uidiv+0x9a>
    51f2:	020b      	lsls	r3, r1, #8
    51f4:	1ac0      	subs	r0, r0, r3
    51f6:	4152      	adcs	r2, r2
    51f8:	d2cd      	bcs.n	5196 <__aeabi_uidiv+0x3a>
    51fa:	09c3      	lsrs	r3, r0, #7
    51fc:	428b      	cmp	r3, r1
    51fe:	d301      	bcc.n	5204 <__aeabi_uidiv+0xa8>
    5200:	01cb      	lsls	r3, r1, #7
    5202:	1ac0      	subs	r0, r0, r3
    5204:	4152      	adcs	r2, r2
    5206:	0983      	lsrs	r3, r0, #6
    5208:	428b      	cmp	r3, r1
    520a:	d301      	bcc.n	5210 <__aeabi_uidiv+0xb4>
    520c:	018b      	lsls	r3, r1, #6
    520e:	1ac0      	subs	r0, r0, r3
    5210:	4152      	adcs	r2, r2
    5212:	0943      	lsrs	r3, r0, #5
    5214:	428b      	cmp	r3, r1
    5216:	d301      	bcc.n	521c <__aeabi_uidiv+0xc0>
    5218:	014b      	lsls	r3, r1, #5
    521a:	1ac0      	subs	r0, r0, r3
    521c:	4152      	adcs	r2, r2
    521e:	0903      	lsrs	r3, r0, #4
    5220:	428b      	cmp	r3, r1
    5222:	d301      	bcc.n	5228 <__aeabi_uidiv+0xcc>
    5224:	010b      	lsls	r3, r1, #4
    5226:	1ac0      	subs	r0, r0, r3
    5228:	4152      	adcs	r2, r2
    522a:	08c3      	lsrs	r3, r0, #3
    522c:	428b      	cmp	r3, r1
    522e:	d301      	bcc.n	5234 <__aeabi_uidiv+0xd8>
    5230:	00cb      	lsls	r3, r1, #3
    5232:	1ac0      	subs	r0, r0, r3
    5234:	4152      	adcs	r2, r2
    5236:	0883      	lsrs	r3, r0, #2
    5238:	428b      	cmp	r3, r1
    523a:	d301      	bcc.n	5240 <__aeabi_uidiv+0xe4>
    523c:	008b      	lsls	r3, r1, #2
    523e:	1ac0      	subs	r0, r0, r3
    5240:	4152      	adcs	r2, r2
    5242:	0843      	lsrs	r3, r0, #1
    5244:	428b      	cmp	r3, r1
    5246:	d301      	bcc.n	524c <__aeabi_uidiv+0xf0>
    5248:	004b      	lsls	r3, r1, #1
    524a:	1ac0      	subs	r0, r0, r3
    524c:	4152      	adcs	r2, r2
    524e:	1a41      	subs	r1, r0, r1
    5250:	d200      	bcs.n	5254 <__aeabi_uidiv+0xf8>
    5252:	4601      	mov	r1, r0
    5254:	4152      	adcs	r2, r2
    5256:	4610      	mov	r0, r2
    5258:	4770      	bx	lr
    525a:	e7ff      	b.n	525c <__aeabi_uidiv+0x100>
    525c:	b501      	push	{r0, lr}
    525e:	2000      	movs	r0, #0
    5260:	f000 f80c 	bl	527c <__aeabi_idiv0>
    5264:	bd02      	pop	{r1, pc}
    5266:	46c0      	nop			; (mov r8, r8)

00005268 <__aeabi_uidivmod>:
    5268:	2900      	cmp	r1, #0
    526a:	d0f7      	beq.n	525c <__aeabi_uidiv+0x100>
    526c:	b503      	push	{r0, r1, lr}
    526e:	f7ff ff75 	bl	515c <__aeabi_uidiv>
    5272:	bc0e      	pop	{r1, r2, r3}
    5274:	4342      	muls	r2, r0
    5276:	1a89      	subs	r1, r1, r2
    5278:	4718      	bx	r3
    527a:	46c0      	nop			; (mov r8, r8)

0000527c <__aeabi_idiv0>:
    527c:	4770      	bx	lr
    527e:	46c0      	nop			; (mov r8, r8)

00005280 <__aeabi_lmul>:
    5280:	b5f0      	push	{r4, r5, r6, r7, lr}
    5282:	464f      	mov	r7, r9
    5284:	4646      	mov	r6, r8
    5286:	0405      	lsls	r5, r0, #16
    5288:	0c2d      	lsrs	r5, r5, #16
    528a:	1c2c      	adds	r4, r5, #0
    528c:	b4c0      	push	{r6, r7}
    528e:	0417      	lsls	r7, r2, #16
    5290:	0c16      	lsrs	r6, r2, #16
    5292:	0c3f      	lsrs	r7, r7, #16
    5294:	4699      	mov	r9, r3
    5296:	0c03      	lsrs	r3, r0, #16
    5298:	437c      	muls	r4, r7
    529a:	4375      	muls	r5, r6
    529c:	435f      	muls	r7, r3
    529e:	4373      	muls	r3, r6
    52a0:	197d      	adds	r5, r7, r5
    52a2:	0c26      	lsrs	r6, r4, #16
    52a4:	19ad      	adds	r5, r5, r6
    52a6:	469c      	mov	ip, r3
    52a8:	42af      	cmp	r7, r5
    52aa:	d903      	bls.n	52b4 <__aeabi_lmul+0x34>
    52ac:	2380      	movs	r3, #128	; 0x80
    52ae:	025b      	lsls	r3, r3, #9
    52b0:	4698      	mov	r8, r3
    52b2:	44c4      	add	ip, r8
    52b4:	464b      	mov	r3, r9
    52b6:	4351      	muls	r1, r2
    52b8:	4343      	muls	r3, r0
    52ba:	0424      	lsls	r4, r4, #16
    52bc:	0c2e      	lsrs	r6, r5, #16
    52be:	0c24      	lsrs	r4, r4, #16
    52c0:	042d      	lsls	r5, r5, #16
    52c2:	4466      	add	r6, ip
    52c4:	192c      	adds	r4, r5, r4
    52c6:	1859      	adds	r1, r3, r1
    52c8:	1989      	adds	r1, r1, r6
    52ca:	1c20      	adds	r0, r4, #0
    52cc:	bc0c      	pop	{r2, r3}
    52ce:	4690      	mov	r8, r2
    52d0:	4699      	mov	r9, r3
    52d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000052d4 <__libc_init_array>:
    52d4:	4b0e      	ldr	r3, [pc, #56]	; (5310 <__libc_init_array+0x3c>)
    52d6:	b570      	push	{r4, r5, r6, lr}
    52d8:	2500      	movs	r5, #0
    52da:	1c1e      	adds	r6, r3, #0
    52dc:	4c0d      	ldr	r4, [pc, #52]	; (5314 <__libc_init_array+0x40>)
    52de:	1ae4      	subs	r4, r4, r3
    52e0:	10a4      	asrs	r4, r4, #2
    52e2:	42a5      	cmp	r5, r4
    52e4:	d004      	beq.n	52f0 <__libc_init_array+0x1c>
    52e6:	00ab      	lsls	r3, r5, #2
    52e8:	58f3      	ldr	r3, [r6, r3]
    52ea:	4798      	blx	r3
    52ec:	3501      	adds	r5, #1
    52ee:	e7f8      	b.n	52e2 <__libc_init_array+0xe>
    52f0:	f001 f94e 	bl	6590 <_init>
    52f4:	4b08      	ldr	r3, [pc, #32]	; (5318 <__libc_init_array+0x44>)
    52f6:	2500      	movs	r5, #0
    52f8:	1c1e      	adds	r6, r3, #0
    52fa:	4c08      	ldr	r4, [pc, #32]	; (531c <__libc_init_array+0x48>)
    52fc:	1ae4      	subs	r4, r4, r3
    52fe:	10a4      	asrs	r4, r4, #2
    5300:	42a5      	cmp	r5, r4
    5302:	d004      	beq.n	530e <__libc_init_array+0x3a>
    5304:	00ab      	lsls	r3, r5, #2
    5306:	58f3      	ldr	r3, [r6, r3]
    5308:	4798      	blx	r3
    530a:	3501      	adds	r5, #1
    530c:	e7f8      	b.n	5300 <__libc_init_array+0x2c>
    530e:	bd70      	pop	{r4, r5, r6, pc}
    5310:	0000659c 	.word	0x0000659c
    5314:	0000659c 	.word	0x0000659c
    5318:	0000659c 	.word	0x0000659c
    531c:	000065a0 	.word	0x000065a0

00005320 <memcpy>:
    5320:	2300      	movs	r3, #0
    5322:	b510      	push	{r4, lr}
    5324:	4293      	cmp	r3, r2
    5326:	d003      	beq.n	5330 <memcpy+0x10>
    5328:	5ccc      	ldrb	r4, [r1, r3]
    532a:	54c4      	strb	r4, [r0, r3]
    532c:	3301      	adds	r3, #1
    532e:	e7f9      	b.n	5324 <memcpy+0x4>
    5330:	bd10      	pop	{r4, pc}

00005332 <memset>:
    5332:	1c03      	adds	r3, r0, #0
    5334:	1882      	adds	r2, r0, r2
    5336:	4293      	cmp	r3, r2
    5338:	d002      	beq.n	5340 <memset+0xe>
    533a:	7019      	strb	r1, [r3, #0]
    533c:	3301      	adds	r3, #1
    533e:	e7fa      	b.n	5336 <memset+0x4>
    5340:	4770      	bx	lr
	...

00005344 <iprintf>:
    5344:	b40f      	push	{r0, r1, r2, r3}
    5346:	4b0b      	ldr	r3, [pc, #44]	; (5374 <iprintf+0x30>)
    5348:	b513      	push	{r0, r1, r4, lr}
    534a:	681c      	ldr	r4, [r3, #0]
    534c:	2c00      	cmp	r4, #0
    534e:	d005      	beq.n	535c <iprintf+0x18>
    5350:	69a3      	ldr	r3, [r4, #24]
    5352:	2b00      	cmp	r3, #0
    5354:	d102      	bne.n	535c <iprintf+0x18>
    5356:	1c20      	adds	r0, r4, #0
    5358:	f000 face 	bl	58f8 <__sinit>
    535c:	ab05      	add	r3, sp, #20
    535e:	1c20      	adds	r0, r4, #0
    5360:	68a1      	ldr	r1, [r4, #8]
    5362:	9a04      	ldr	r2, [sp, #16]
    5364:	9301      	str	r3, [sp, #4]
    5366:	f000 fc81 	bl	5c6c <_vfiprintf_r>
    536a:	bc16      	pop	{r1, r2, r4}
    536c:	bc08      	pop	{r3}
    536e:	b004      	add	sp, #16
    5370:	4718      	bx	r3
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	2000006c 	.word	0x2000006c

00005378 <_puts_r>:
    5378:	b570      	push	{r4, r5, r6, lr}
    537a:	1c05      	adds	r5, r0, #0
    537c:	1c0e      	adds	r6, r1, #0
    537e:	2800      	cmp	r0, #0
    5380:	d004      	beq.n	538c <_puts_r+0x14>
    5382:	6983      	ldr	r3, [r0, #24]
    5384:	2b00      	cmp	r3, #0
    5386:	d101      	bne.n	538c <_puts_r+0x14>
    5388:	f000 fab6 	bl	58f8 <__sinit>
    538c:	68ac      	ldr	r4, [r5, #8]
    538e:	89a3      	ldrh	r3, [r4, #12]
    5390:	071b      	lsls	r3, r3, #28
    5392:	d502      	bpl.n	539a <_puts_r+0x22>
    5394:	6923      	ldr	r3, [r4, #16]
    5396:	2b00      	cmp	r3, #0
    5398:	d119      	bne.n	53ce <_puts_r+0x56>
    539a:	1c28      	adds	r0, r5, #0
    539c:	1c21      	adds	r1, r4, #0
    539e:	f000 f93f 	bl	5620 <__swsetup_r>
    53a2:	2800      	cmp	r0, #0
    53a4:	d013      	beq.n	53ce <_puts_r+0x56>
    53a6:	2001      	movs	r0, #1
    53a8:	4240      	negs	r0, r0
    53aa:	e045      	b.n	5438 <_puts_r+0xc0>
    53ac:	7831      	ldrb	r1, [r6, #0]
    53ae:	2b00      	cmp	r3, #0
    53b0:	da1b      	bge.n	53ea <_puts_r+0x72>
    53b2:	69a2      	ldr	r2, [r4, #24]
    53b4:	4293      	cmp	r3, r2
    53b6:	da11      	bge.n	53dc <_puts_r+0x64>
    53b8:	1c22      	adds	r2, r4, #0
    53ba:	1c28      	adds	r0, r5, #0
    53bc:	f000 f8d8 	bl	5570 <__swbuf_r>
    53c0:	3001      	adds	r0, #1
    53c2:	4242      	negs	r2, r0
    53c4:	4142      	adcs	r2, r0
    53c6:	b2d0      	uxtb	r0, r2
    53c8:	2800      	cmp	r0, #0
    53ca:	d1ec      	bne.n	53a6 <_puts_r+0x2e>
    53cc:	3601      	adds	r6, #1
    53ce:	68a3      	ldr	r3, [r4, #8]
    53d0:	7832      	ldrb	r2, [r6, #0]
    53d2:	3b01      	subs	r3, #1
    53d4:	60a3      	str	r3, [r4, #8]
    53d6:	2a00      	cmp	r2, #0
    53d8:	d1e8      	bne.n	53ac <_puts_r+0x34>
    53da:	e00c      	b.n	53f6 <_puts_r+0x7e>
    53dc:	6823      	ldr	r3, [r4, #0]
    53de:	7019      	strb	r1, [r3, #0]
    53e0:	6823      	ldr	r3, [r4, #0]
    53e2:	7819      	ldrb	r1, [r3, #0]
    53e4:	290a      	cmp	r1, #10
    53e6:	d103      	bne.n	53f0 <_puts_r+0x78>
    53e8:	e7e6      	b.n	53b8 <_puts_r+0x40>
    53ea:	6823      	ldr	r3, [r4, #0]
    53ec:	7019      	strb	r1, [r3, #0]
    53ee:	6823      	ldr	r3, [r4, #0]
    53f0:	3301      	adds	r3, #1
    53f2:	6023      	str	r3, [r4, #0]
    53f4:	e7ea      	b.n	53cc <_puts_r+0x54>
    53f6:	2b00      	cmp	r3, #0
    53f8:	da17      	bge.n	542a <_puts_r+0xb2>
    53fa:	69a2      	ldr	r2, [r4, #24]
    53fc:	4293      	cmp	r3, r2
    53fe:	db08      	blt.n	5412 <_puts_r+0x9a>
    5400:	230a      	movs	r3, #10
    5402:	6822      	ldr	r2, [r4, #0]
    5404:	7013      	strb	r3, [r2, #0]
    5406:	6823      	ldr	r3, [r4, #0]
    5408:	7819      	ldrb	r1, [r3, #0]
    540a:	290a      	cmp	r1, #10
    540c:	d111      	bne.n	5432 <_puts_r+0xba>
    540e:	1c28      	adds	r0, r5, #0
    5410:	e001      	b.n	5416 <_puts_r+0x9e>
    5412:	1c28      	adds	r0, r5, #0
    5414:	210a      	movs	r1, #10
    5416:	1c22      	adds	r2, r4, #0
    5418:	f000 f8aa 	bl	5570 <__swbuf_r>
    541c:	3001      	adds	r0, #1
    541e:	4242      	negs	r2, r0
    5420:	4142      	adcs	r2, r0
    5422:	b2d0      	uxtb	r0, r2
    5424:	2800      	cmp	r0, #0
    5426:	d006      	beq.n	5436 <_puts_r+0xbe>
    5428:	e7bd      	b.n	53a6 <_puts_r+0x2e>
    542a:	230a      	movs	r3, #10
    542c:	6822      	ldr	r2, [r4, #0]
    542e:	7013      	strb	r3, [r2, #0]
    5430:	6823      	ldr	r3, [r4, #0]
    5432:	3301      	adds	r3, #1
    5434:	6023      	str	r3, [r4, #0]
    5436:	200a      	movs	r0, #10
    5438:	bd70      	pop	{r4, r5, r6, pc}
	...

0000543c <puts>:
    543c:	b508      	push	{r3, lr}
    543e:	4b03      	ldr	r3, [pc, #12]	; (544c <puts+0x10>)
    5440:	1c01      	adds	r1, r0, #0
    5442:	6818      	ldr	r0, [r3, #0]
    5444:	f7ff ff98 	bl	5378 <_puts_r>
    5448:	bd08      	pop	{r3, pc}
    544a:	46c0      	nop			; (mov r8, r8)
    544c:	2000006c 	.word	0x2000006c

00005450 <setbuf>:
    5450:	b508      	push	{r3, lr}
    5452:	424a      	negs	r2, r1
    5454:	414a      	adcs	r2, r1
    5456:	2380      	movs	r3, #128	; 0x80
    5458:	0052      	lsls	r2, r2, #1
    545a:	00db      	lsls	r3, r3, #3
    545c:	f000 f802 	bl	5464 <setvbuf>
    5460:	bd08      	pop	{r3, pc}
	...

00005464 <setvbuf>:
    5464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5466:	1c1e      	adds	r6, r3, #0
    5468:	4b3c      	ldr	r3, [pc, #240]	; (555c <setvbuf+0xf8>)
    546a:	1c04      	adds	r4, r0, #0
    546c:	681d      	ldr	r5, [r3, #0]
    546e:	1c0f      	adds	r7, r1, #0
    5470:	9201      	str	r2, [sp, #4]
    5472:	2d00      	cmp	r5, #0
    5474:	d005      	beq.n	5482 <setvbuf+0x1e>
    5476:	69ab      	ldr	r3, [r5, #24]
    5478:	2b00      	cmp	r3, #0
    547a:	d102      	bne.n	5482 <setvbuf+0x1e>
    547c:	1c28      	adds	r0, r5, #0
    547e:	f000 fa3b 	bl	58f8 <__sinit>
    5482:	4b37      	ldr	r3, [pc, #220]	; (5560 <setvbuf+0xfc>)
    5484:	429c      	cmp	r4, r3
    5486:	d101      	bne.n	548c <setvbuf+0x28>
    5488:	686c      	ldr	r4, [r5, #4]
    548a:	e008      	b.n	549e <setvbuf+0x3a>
    548c:	4b35      	ldr	r3, [pc, #212]	; (5564 <setvbuf+0x100>)
    548e:	429c      	cmp	r4, r3
    5490:	d101      	bne.n	5496 <setvbuf+0x32>
    5492:	68ac      	ldr	r4, [r5, #8]
    5494:	e003      	b.n	549e <setvbuf+0x3a>
    5496:	4b34      	ldr	r3, [pc, #208]	; (5568 <setvbuf+0x104>)
    5498:	429c      	cmp	r4, r3
    549a:	d100      	bne.n	549e <setvbuf+0x3a>
    549c:	68ec      	ldr	r4, [r5, #12]
    549e:	9b01      	ldr	r3, [sp, #4]
    54a0:	2b02      	cmp	r3, #2
    54a2:	d858      	bhi.n	5556 <setvbuf+0xf2>
    54a4:	2e00      	cmp	r6, #0
    54a6:	db56      	blt.n	5556 <setvbuf+0xf2>
    54a8:	1c28      	adds	r0, r5, #0
    54aa:	1c21      	adds	r1, r4, #0
    54ac:	f000 f9b6 	bl	581c <_fflush_r>
    54b0:	2300      	movs	r3, #0
    54b2:	6063      	str	r3, [r4, #4]
    54b4:	61a3      	str	r3, [r4, #24]
    54b6:	89a3      	ldrh	r3, [r4, #12]
    54b8:	061b      	lsls	r3, r3, #24
    54ba:	d503      	bpl.n	54c4 <setvbuf+0x60>
    54bc:	1c28      	adds	r0, r5, #0
    54be:	6921      	ldr	r1, [r4, #16]
    54c0:	f000 fb0e 	bl	5ae0 <_free_r>
    54c4:	2283      	movs	r2, #131	; 0x83
    54c6:	89a3      	ldrh	r3, [r4, #12]
    54c8:	4393      	bics	r3, r2
    54ca:	81a3      	strh	r3, [r4, #12]
    54cc:	9b01      	ldr	r3, [sp, #4]
    54ce:	2b02      	cmp	r3, #2
    54d0:	d013      	beq.n	54fa <setvbuf+0x96>
    54d2:	2f00      	cmp	r7, #0
    54d4:	d125      	bne.n	5522 <setvbuf+0xbe>
    54d6:	2e00      	cmp	r6, #0
    54d8:	d101      	bne.n	54de <setvbuf+0x7a>
    54da:	2680      	movs	r6, #128	; 0x80
    54dc:	00f6      	lsls	r6, r6, #3
    54de:	1c30      	adds	r0, r6, #0
    54e0:	f000 faf4 	bl	5acc <malloc>
    54e4:	1e07      	subs	r7, r0, #0
    54e6:	d118      	bne.n	551a <setvbuf+0xb6>
    54e8:	2080      	movs	r0, #128	; 0x80
    54ea:	00c0      	lsls	r0, r0, #3
    54ec:	f000 faee 	bl	5acc <malloc>
    54f0:	1e07      	subs	r7, r0, #0
    54f2:	d110      	bne.n	5516 <setvbuf+0xb2>
    54f4:	2001      	movs	r0, #1
    54f6:	4240      	negs	r0, r0
    54f8:	e000      	b.n	54fc <setvbuf+0x98>
    54fa:	2000      	movs	r0, #0
    54fc:	2202      	movs	r2, #2
    54fe:	89a3      	ldrh	r3, [r4, #12]
    5500:	4313      	orrs	r3, r2
    5502:	81a3      	strh	r3, [r4, #12]
    5504:	2300      	movs	r3, #0
    5506:	60a3      	str	r3, [r4, #8]
    5508:	1c23      	adds	r3, r4, #0
    550a:	3347      	adds	r3, #71	; 0x47
    550c:	6023      	str	r3, [r4, #0]
    550e:	6123      	str	r3, [r4, #16]
    5510:	2301      	movs	r3, #1
    5512:	6163      	str	r3, [r4, #20]
    5514:	e021      	b.n	555a <setvbuf+0xf6>
    5516:	2680      	movs	r6, #128	; 0x80
    5518:	00f6      	lsls	r6, r6, #3
    551a:	2280      	movs	r2, #128	; 0x80
    551c:	89a3      	ldrh	r3, [r4, #12]
    551e:	4313      	orrs	r3, r2
    5520:	81a3      	strh	r3, [r4, #12]
    5522:	9b01      	ldr	r3, [sp, #4]
    5524:	2b01      	cmp	r3, #1
    5526:	d105      	bne.n	5534 <setvbuf+0xd0>
    5528:	89a3      	ldrh	r3, [r4, #12]
    552a:	9a01      	ldr	r2, [sp, #4]
    552c:	431a      	orrs	r2, r3
    552e:	4273      	negs	r3, r6
    5530:	81a2      	strh	r2, [r4, #12]
    5532:	61a3      	str	r3, [r4, #24]
    5534:	4b0d      	ldr	r3, [pc, #52]	; (556c <setvbuf+0x108>)
    5536:	2000      	movs	r0, #0
    5538:	62ab      	str	r3, [r5, #40]	; 0x28
    553a:	89a2      	ldrh	r2, [r4, #12]
    553c:	6027      	str	r7, [r4, #0]
    553e:	6127      	str	r7, [r4, #16]
    5540:	6166      	str	r6, [r4, #20]
    5542:	0713      	lsls	r3, r2, #28
    5544:	d509      	bpl.n	555a <setvbuf+0xf6>
    5546:	2303      	movs	r3, #3
    5548:	401a      	ands	r2, r3
    554a:	4253      	negs	r3, r2
    554c:	4153      	adcs	r3, r2
    554e:	425b      	negs	r3, r3
    5550:	401e      	ands	r6, r3
    5552:	60a6      	str	r6, [r4, #8]
    5554:	e001      	b.n	555a <setvbuf+0xf6>
    5556:	2001      	movs	r0, #1
    5558:	4240      	negs	r0, r0
    555a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    555c:	2000006c 	.word	0x2000006c
    5560:	000064fc 	.word	0x000064fc
    5564:	0000651c 	.word	0x0000651c
    5568:	0000653c 	.word	0x0000653c
    556c:	00005875 	.word	0x00005875

00005570 <__swbuf_r>:
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	1c05      	adds	r5, r0, #0
    5574:	1c0e      	adds	r6, r1, #0
    5576:	1c14      	adds	r4, r2, #0
    5578:	2800      	cmp	r0, #0
    557a:	d004      	beq.n	5586 <__swbuf_r+0x16>
    557c:	6983      	ldr	r3, [r0, #24]
    557e:	2b00      	cmp	r3, #0
    5580:	d101      	bne.n	5586 <__swbuf_r+0x16>
    5582:	f000 f9b9 	bl	58f8 <__sinit>
    5586:	4b23      	ldr	r3, [pc, #140]	; (5614 <__swbuf_r+0xa4>)
    5588:	429c      	cmp	r4, r3
    558a:	d101      	bne.n	5590 <__swbuf_r+0x20>
    558c:	686c      	ldr	r4, [r5, #4]
    558e:	e008      	b.n	55a2 <__swbuf_r+0x32>
    5590:	4b21      	ldr	r3, [pc, #132]	; (5618 <__swbuf_r+0xa8>)
    5592:	429c      	cmp	r4, r3
    5594:	d101      	bne.n	559a <__swbuf_r+0x2a>
    5596:	68ac      	ldr	r4, [r5, #8]
    5598:	e003      	b.n	55a2 <__swbuf_r+0x32>
    559a:	4b20      	ldr	r3, [pc, #128]	; (561c <__swbuf_r+0xac>)
    559c:	429c      	cmp	r4, r3
    559e:	d100      	bne.n	55a2 <__swbuf_r+0x32>
    55a0:	68ec      	ldr	r4, [r5, #12]
    55a2:	69a3      	ldr	r3, [r4, #24]
    55a4:	60a3      	str	r3, [r4, #8]
    55a6:	89a3      	ldrh	r3, [r4, #12]
    55a8:	071b      	lsls	r3, r3, #28
    55aa:	d50a      	bpl.n	55c2 <__swbuf_r+0x52>
    55ac:	6923      	ldr	r3, [r4, #16]
    55ae:	2b00      	cmp	r3, #0
    55b0:	d007      	beq.n	55c2 <__swbuf_r+0x52>
    55b2:	6823      	ldr	r3, [r4, #0]
    55b4:	6922      	ldr	r2, [r4, #16]
    55b6:	b2f6      	uxtb	r6, r6
    55b8:	1a98      	subs	r0, r3, r2
    55ba:	6963      	ldr	r3, [r4, #20]
    55bc:	4298      	cmp	r0, r3
    55be:	db0f      	blt.n	55e0 <__swbuf_r+0x70>
    55c0:	e008      	b.n	55d4 <__swbuf_r+0x64>
    55c2:	1c28      	adds	r0, r5, #0
    55c4:	1c21      	adds	r1, r4, #0
    55c6:	f000 f82b 	bl	5620 <__swsetup_r>
    55ca:	2800      	cmp	r0, #0
    55cc:	d0f1      	beq.n	55b2 <__swbuf_r+0x42>
    55ce:	2001      	movs	r0, #1
    55d0:	4240      	negs	r0, r0
    55d2:	e01d      	b.n	5610 <__swbuf_r+0xa0>
    55d4:	1c28      	adds	r0, r5, #0
    55d6:	1c21      	adds	r1, r4, #0
    55d8:	f000 f920 	bl	581c <_fflush_r>
    55dc:	2800      	cmp	r0, #0
    55de:	d1f6      	bne.n	55ce <__swbuf_r+0x5e>
    55e0:	68a3      	ldr	r3, [r4, #8]
    55e2:	3001      	adds	r0, #1
    55e4:	3b01      	subs	r3, #1
    55e6:	60a3      	str	r3, [r4, #8]
    55e8:	6823      	ldr	r3, [r4, #0]
    55ea:	1c5a      	adds	r2, r3, #1
    55ec:	6022      	str	r2, [r4, #0]
    55ee:	701e      	strb	r6, [r3, #0]
    55f0:	6963      	ldr	r3, [r4, #20]
    55f2:	4298      	cmp	r0, r3
    55f4:	d005      	beq.n	5602 <__swbuf_r+0x92>
    55f6:	89a3      	ldrh	r3, [r4, #12]
    55f8:	1c30      	adds	r0, r6, #0
    55fa:	07db      	lsls	r3, r3, #31
    55fc:	d508      	bpl.n	5610 <__swbuf_r+0xa0>
    55fe:	2e0a      	cmp	r6, #10
    5600:	d106      	bne.n	5610 <__swbuf_r+0xa0>
    5602:	1c28      	adds	r0, r5, #0
    5604:	1c21      	adds	r1, r4, #0
    5606:	f000 f909 	bl	581c <_fflush_r>
    560a:	2800      	cmp	r0, #0
    560c:	d1df      	bne.n	55ce <__swbuf_r+0x5e>
    560e:	1c30      	adds	r0, r6, #0
    5610:	bd70      	pop	{r4, r5, r6, pc}
    5612:	46c0      	nop			; (mov r8, r8)
    5614:	000064fc 	.word	0x000064fc
    5618:	0000651c 	.word	0x0000651c
    561c:	0000653c 	.word	0x0000653c

00005620 <__swsetup_r>:
    5620:	4b35      	ldr	r3, [pc, #212]	; (56f8 <__swsetup_r+0xd8>)
    5622:	b570      	push	{r4, r5, r6, lr}
    5624:	681d      	ldr	r5, [r3, #0]
    5626:	1c06      	adds	r6, r0, #0
    5628:	1c0c      	adds	r4, r1, #0
    562a:	2d00      	cmp	r5, #0
    562c:	d005      	beq.n	563a <__swsetup_r+0x1a>
    562e:	69ab      	ldr	r3, [r5, #24]
    5630:	2b00      	cmp	r3, #0
    5632:	d102      	bne.n	563a <__swsetup_r+0x1a>
    5634:	1c28      	adds	r0, r5, #0
    5636:	f000 f95f 	bl	58f8 <__sinit>
    563a:	4b30      	ldr	r3, [pc, #192]	; (56fc <__swsetup_r+0xdc>)
    563c:	429c      	cmp	r4, r3
    563e:	d101      	bne.n	5644 <__swsetup_r+0x24>
    5640:	686c      	ldr	r4, [r5, #4]
    5642:	e008      	b.n	5656 <__swsetup_r+0x36>
    5644:	4b2e      	ldr	r3, [pc, #184]	; (5700 <__swsetup_r+0xe0>)
    5646:	429c      	cmp	r4, r3
    5648:	d101      	bne.n	564e <__swsetup_r+0x2e>
    564a:	68ac      	ldr	r4, [r5, #8]
    564c:	e003      	b.n	5656 <__swsetup_r+0x36>
    564e:	4b2d      	ldr	r3, [pc, #180]	; (5704 <__swsetup_r+0xe4>)
    5650:	429c      	cmp	r4, r3
    5652:	d100      	bne.n	5656 <__swsetup_r+0x36>
    5654:	68ec      	ldr	r4, [r5, #12]
    5656:	89a3      	ldrh	r3, [r4, #12]
    5658:	b29a      	uxth	r2, r3
    565a:	0711      	lsls	r1, r2, #28
    565c:	d423      	bmi.n	56a6 <__swsetup_r+0x86>
    565e:	06d1      	lsls	r1, r2, #27
    5660:	d407      	bmi.n	5672 <__swsetup_r+0x52>
    5662:	2209      	movs	r2, #9
    5664:	2001      	movs	r0, #1
    5666:	6032      	str	r2, [r6, #0]
    5668:	3237      	adds	r2, #55	; 0x37
    566a:	4313      	orrs	r3, r2
    566c:	81a3      	strh	r3, [r4, #12]
    566e:	4240      	negs	r0, r0
    5670:	e040      	b.n	56f4 <__swsetup_r+0xd4>
    5672:	0753      	lsls	r3, r2, #29
    5674:	d513      	bpl.n	569e <__swsetup_r+0x7e>
    5676:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5678:	2900      	cmp	r1, #0
    567a:	d008      	beq.n	568e <__swsetup_r+0x6e>
    567c:	1c23      	adds	r3, r4, #0
    567e:	3344      	adds	r3, #68	; 0x44
    5680:	4299      	cmp	r1, r3
    5682:	d002      	beq.n	568a <__swsetup_r+0x6a>
    5684:	1c30      	adds	r0, r6, #0
    5686:	f000 fa2b 	bl	5ae0 <_free_r>
    568a:	2300      	movs	r3, #0
    568c:	6363      	str	r3, [r4, #52]	; 0x34
    568e:	2224      	movs	r2, #36	; 0x24
    5690:	89a3      	ldrh	r3, [r4, #12]
    5692:	4393      	bics	r3, r2
    5694:	81a3      	strh	r3, [r4, #12]
    5696:	2300      	movs	r3, #0
    5698:	6063      	str	r3, [r4, #4]
    569a:	6923      	ldr	r3, [r4, #16]
    569c:	6023      	str	r3, [r4, #0]
    569e:	2208      	movs	r2, #8
    56a0:	89a3      	ldrh	r3, [r4, #12]
    56a2:	4313      	orrs	r3, r2
    56a4:	81a3      	strh	r3, [r4, #12]
    56a6:	6923      	ldr	r3, [r4, #16]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d10b      	bne.n	56c4 <__swsetup_r+0xa4>
    56ac:	23a0      	movs	r3, #160	; 0xa0
    56ae:	89a2      	ldrh	r2, [r4, #12]
    56b0:	009b      	lsls	r3, r3, #2
    56b2:	4013      	ands	r3, r2
    56b4:	2280      	movs	r2, #128	; 0x80
    56b6:	0092      	lsls	r2, r2, #2
    56b8:	4293      	cmp	r3, r2
    56ba:	d003      	beq.n	56c4 <__swsetup_r+0xa4>
    56bc:	1c30      	adds	r0, r6, #0
    56be:	1c21      	adds	r1, r4, #0
    56c0:	f000 f9ac 	bl	5a1c <__smakebuf_r>
    56c4:	2301      	movs	r3, #1
    56c6:	89a2      	ldrh	r2, [r4, #12]
    56c8:	4013      	ands	r3, r2
    56ca:	d005      	beq.n	56d8 <__swsetup_r+0xb8>
    56cc:	2300      	movs	r3, #0
    56ce:	60a3      	str	r3, [r4, #8]
    56d0:	6963      	ldr	r3, [r4, #20]
    56d2:	425b      	negs	r3, r3
    56d4:	61a3      	str	r3, [r4, #24]
    56d6:	e003      	b.n	56e0 <__swsetup_r+0xc0>
    56d8:	0791      	lsls	r1, r2, #30
    56da:	d400      	bmi.n	56de <__swsetup_r+0xbe>
    56dc:	6963      	ldr	r3, [r4, #20]
    56de:	60a3      	str	r3, [r4, #8]
    56e0:	2000      	movs	r0, #0
    56e2:	6923      	ldr	r3, [r4, #16]
    56e4:	4283      	cmp	r3, r0
    56e6:	d105      	bne.n	56f4 <__swsetup_r+0xd4>
    56e8:	0613      	lsls	r3, r2, #24
    56ea:	d503      	bpl.n	56f4 <__swsetup_r+0xd4>
    56ec:	2340      	movs	r3, #64	; 0x40
    56ee:	431a      	orrs	r2, r3
    56f0:	81a2      	strh	r2, [r4, #12]
    56f2:	3801      	subs	r0, #1
    56f4:	bd70      	pop	{r4, r5, r6, pc}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	2000006c 	.word	0x2000006c
    56fc:	000064fc 	.word	0x000064fc
    5700:	0000651c 	.word	0x0000651c
    5704:	0000653c 	.word	0x0000653c

00005708 <__sflush_r>:
    5708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    570a:	898a      	ldrh	r2, [r1, #12]
    570c:	1c05      	adds	r5, r0, #0
    570e:	1c0c      	adds	r4, r1, #0
    5710:	0713      	lsls	r3, r2, #28
    5712:	d45e      	bmi.n	57d2 <__sflush_r+0xca>
    5714:	684b      	ldr	r3, [r1, #4]
    5716:	2b00      	cmp	r3, #0
    5718:	dc02      	bgt.n	5720 <__sflush_r+0x18>
    571a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    571c:	2b00      	cmp	r3, #0
    571e:	dd1a      	ble.n	5756 <__sflush_r+0x4e>
    5720:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5722:	2f00      	cmp	r7, #0
    5724:	d017      	beq.n	5756 <__sflush_r+0x4e>
    5726:	2300      	movs	r3, #0
    5728:	682e      	ldr	r6, [r5, #0]
    572a:	602b      	str	r3, [r5, #0]
    572c:	2380      	movs	r3, #128	; 0x80
    572e:	015b      	lsls	r3, r3, #5
    5730:	401a      	ands	r2, r3
    5732:	d001      	beq.n	5738 <__sflush_r+0x30>
    5734:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5736:	e015      	b.n	5764 <__sflush_r+0x5c>
    5738:	1c28      	adds	r0, r5, #0
    573a:	6a21      	ldr	r1, [r4, #32]
    573c:	2301      	movs	r3, #1
    573e:	47b8      	blx	r7
    5740:	1c02      	adds	r2, r0, #0
    5742:	1c43      	adds	r3, r0, #1
    5744:	d10e      	bne.n	5764 <__sflush_r+0x5c>
    5746:	682b      	ldr	r3, [r5, #0]
    5748:	2b00      	cmp	r3, #0
    574a:	d00b      	beq.n	5764 <__sflush_r+0x5c>
    574c:	2b1d      	cmp	r3, #29
    574e:	d001      	beq.n	5754 <__sflush_r+0x4c>
    5750:	2b16      	cmp	r3, #22
    5752:	d102      	bne.n	575a <__sflush_r+0x52>
    5754:	602e      	str	r6, [r5, #0]
    5756:	2000      	movs	r0, #0
    5758:	e05e      	b.n	5818 <__sflush_r+0x110>
    575a:	2140      	movs	r1, #64	; 0x40
    575c:	89a3      	ldrh	r3, [r4, #12]
    575e:	430b      	orrs	r3, r1
    5760:	81a3      	strh	r3, [r4, #12]
    5762:	e059      	b.n	5818 <__sflush_r+0x110>
    5764:	89a3      	ldrh	r3, [r4, #12]
    5766:	075b      	lsls	r3, r3, #29
    5768:	d506      	bpl.n	5778 <__sflush_r+0x70>
    576a:	6863      	ldr	r3, [r4, #4]
    576c:	1ad2      	subs	r2, r2, r3
    576e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5770:	2b00      	cmp	r3, #0
    5772:	d001      	beq.n	5778 <__sflush_r+0x70>
    5774:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5776:	1ad2      	subs	r2, r2, r3
    5778:	2300      	movs	r3, #0
    577a:	1c28      	adds	r0, r5, #0
    577c:	6a21      	ldr	r1, [r4, #32]
    577e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5780:	47b8      	blx	r7
    5782:	89a3      	ldrh	r3, [r4, #12]
    5784:	1c42      	adds	r2, r0, #1
    5786:	d106      	bne.n	5796 <__sflush_r+0x8e>
    5788:	682a      	ldr	r2, [r5, #0]
    578a:	2a00      	cmp	r2, #0
    578c:	d003      	beq.n	5796 <__sflush_r+0x8e>
    578e:	2a1d      	cmp	r2, #29
    5790:	d001      	beq.n	5796 <__sflush_r+0x8e>
    5792:	2a16      	cmp	r2, #22
    5794:	d119      	bne.n	57ca <__sflush_r+0xc2>
    5796:	2200      	movs	r2, #0
    5798:	6062      	str	r2, [r4, #4]
    579a:	6922      	ldr	r2, [r4, #16]
    579c:	6022      	str	r2, [r4, #0]
    579e:	04db      	lsls	r3, r3, #19
    57a0:	d505      	bpl.n	57ae <__sflush_r+0xa6>
    57a2:	1c43      	adds	r3, r0, #1
    57a4:	d102      	bne.n	57ac <__sflush_r+0xa4>
    57a6:	682b      	ldr	r3, [r5, #0]
    57a8:	2b00      	cmp	r3, #0
    57aa:	d100      	bne.n	57ae <__sflush_r+0xa6>
    57ac:	6560      	str	r0, [r4, #84]	; 0x54
    57ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    57b0:	602e      	str	r6, [r5, #0]
    57b2:	2900      	cmp	r1, #0
    57b4:	d0cf      	beq.n	5756 <__sflush_r+0x4e>
    57b6:	1c23      	adds	r3, r4, #0
    57b8:	3344      	adds	r3, #68	; 0x44
    57ba:	4299      	cmp	r1, r3
    57bc:	d002      	beq.n	57c4 <__sflush_r+0xbc>
    57be:	1c28      	adds	r0, r5, #0
    57c0:	f000 f98e 	bl	5ae0 <_free_r>
    57c4:	2000      	movs	r0, #0
    57c6:	6360      	str	r0, [r4, #52]	; 0x34
    57c8:	e026      	b.n	5818 <__sflush_r+0x110>
    57ca:	2240      	movs	r2, #64	; 0x40
    57cc:	4313      	orrs	r3, r2
    57ce:	81a3      	strh	r3, [r4, #12]
    57d0:	e022      	b.n	5818 <__sflush_r+0x110>
    57d2:	690f      	ldr	r7, [r1, #16]
    57d4:	2f00      	cmp	r7, #0
    57d6:	d0be      	beq.n	5756 <__sflush_r+0x4e>
    57d8:	680b      	ldr	r3, [r1, #0]
    57da:	600f      	str	r7, [r1, #0]
    57dc:	1bdb      	subs	r3, r3, r7
    57de:	9301      	str	r3, [sp, #4]
    57e0:	2300      	movs	r3, #0
    57e2:	0792      	lsls	r2, r2, #30
    57e4:	d100      	bne.n	57e8 <__sflush_r+0xe0>
    57e6:	694b      	ldr	r3, [r1, #20]
    57e8:	60a3      	str	r3, [r4, #8]
    57ea:	9b01      	ldr	r3, [sp, #4]
    57ec:	2b00      	cmp	r3, #0
    57ee:	ddb2      	ble.n	5756 <__sflush_r+0x4e>
    57f0:	1c28      	adds	r0, r5, #0
    57f2:	6a21      	ldr	r1, [r4, #32]
    57f4:	1c3a      	adds	r2, r7, #0
    57f6:	9b01      	ldr	r3, [sp, #4]
    57f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    57fa:	47b0      	blx	r6
    57fc:	2800      	cmp	r0, #0
    57fe:	dc06      	bgt.n	580e <__sflush_r+0x106>
    5800:	2240      	movs	r2, #64	; 0x40
    5802:	2001      	movs	r0, #1
    5804:	89a3      	ldrh	r3, [r4, #12]
    5806:	4240      	negs	r0, r0
    5808:	4313      	orrs	r3, r2
    580a:	81a3      	strh	r3, [r4, #12]
    580c:	e004      	b.n	5818 <__sflush_r+0x110>
    580e:	9b01      	ldr	r3, [sp, #4]
    5810:	183f      	adds	r7, r7, r0
    5812:	1a1b      	subs	r3, r3, r0
    5814:	9301      	str	r3, [sp, #4]
    5816:	e7e8      	b.n	57ea <__sflush_r+0xe2>
    5818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000581c <_fflush_r>:
    581c:	b538      	push	{r3, r4, r5, lr}
    581e:	690b      	ldr	r3, [r1, #16]
    5820:	1c05      	adds	r5, r0, #0
    5822:	1c0c      	adds	r4, r1, #0
    5824:	2b00      	cmp	r3, #0
    5826:	d101      	bne.n	582c <_fflush_r+0x10>
    5828:	2000      	movs	r0, #0
    582a:	e01c      	b.n	5866 <_fflush_r+0x4a>
    582c:	2800      	cmp	r0, #0
    582e:	d004      	beq.n	583a <_fflush_r+0x1e>
    5830:	6983      	ldr	r3, [r0, #24]
    5832:	2b00      	cmp	r3, #0
    5834:	d101      	bne.n	583a <_fflush_r+0x1e>
    5836:	f000 f85f 	bl	58f8 <__sinit>
    583a:	4b0b      	ldr	r3, [pc, #44]	; (5868 <_fflush_r+0x4c>)
    583c:	429c      	cmp	r4, r3
    583e:	d101      	bne.n	5844 <_fflush_r+0x28>
    5840:	686c      	ldr	r4, [r5, #4]
    5842:	e008      	b.n	5856 <_fflush_r+0x3a>
    5844:	4b09      	ldr	r3, [pc, #36]	; (586c <_fflush_r+0x50>)
    5846:	429c      	cmp	r4, r3
    5848:	d101      	bne.n	584e <_fflush_r+0x32>
    584a:	68ac      	ldr	r4, [r5, #8]
    584c:	e003      	b.n	5856 <_fflush_r+0x3a>
    584e:	4b08      	ldr	r3, [pc, #32]	; (5870 <_fflush_r+0x54>)
    5850:	429c      	cmp	r4, r3
    5852:	d100      	bne.n	5856 <_fflush_r+0x3a>
    5854:	68ec      	ldr	r4, [r5, #12]
    5856:	220c      	movs	r2, #12
    5858:	5ea3      	ldrsh	r3, [r4, r2]
    585a:	2b00      	cmp	r3, #0
    585c:	d0e4      	beq.n	5828 <_fflush_r+0xc>
    585e:	1c28      	adds	r0, r5, #0
    5860:	1c21      	adds	r1, r4, #0
    5862:	f7ff ff51 	bl	5708 <__sflush_r>
    5866:	bd38      	pop	{r3, r4, r5, pc}
    5868:	000064fc 	.word	0x000064fc
    586c:	0000651c 	.word	0x0000651c
    5870:	0000653c 	.word	0x0000653c

00005874 <_cleanup_r>:
    5874:	b508      	push	{r3, lr}
    5876:	4902      	ldr	r1, [pc, #8]	; (5880 <_cleanup_r+0xc>)
    5878:	f000 f8ae 	bl	59d8 <_fwalk_reent>
    587c:	bd08      	pop	{r3, pc}
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	0000581d 	.word	0x0000581d

00005884 <std.isra.0>:
    5884:	2300      	movs	r3, #0
    5886:	b510      	push	{r4, lr}
    5888:	1c04      	adds	r4, r0, #0
    588a:	6003      	str	r3, [r0, #0]
    588c:	6043      	str	r3, [r0, #4]
    588e:	6083      	str	r3, [r0, #8]
    5890:	8181      	strh	r1, [r0, #12]
    5892:	6643      	str	r3, [r0, #100]	; 0x64
    5894:	81c2      	strh	r2, [r0, #14]
    5896:	6103      	str	r3, [r0, #16]
    5898:	6143      	str	r3, [r0, #20]
    589a:	6183      	str	r3, [r0, #24]
    589c:	1c19      	adds	r1, r3, #0
    589e:	2208      	movs	r2, #8
    58a0:	305c      	adds	r0, #92	; 0x5c
    58a2:	f7ff fd46 	bl	5332 <memset>
    58a6:	4b05      	ldr	r3, [pc, #20]	; (58bc <std.isra.0+0x38>)
    58a8:	6224      	str	r4, [r4, #32]
    58aa:	6263      	str	r3, [r4, #36]	; 0x24
    58ac:	4b04      	ldr	r3, [pc, #16]	; (58c0 <std.isra.0+0x3c>)
    58ae:	62a3      	str	r3, [r4, #40]	; 0x28
    58b0:	4b04      	ldr	r3, [pc, #16]	; (58c4 <std.isra.0+0x40>)
    58b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    58b4:	4b04      	ldr	r3, [pc, #16]	; (58c8 <std.isra.0+0x44>)
    58b6:	6323      	str	r3, [r4, #48]	; 0x30
    58b8:	bd10      	pop	{r4, pc}
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	000061bd 	.word	0x000061bd
    58c0:	000061e5 	.word	0x000061e5
    58c4:	0000621d 	.word	0x0000621d
    58c8:	00006249 	.word	0x00006249

000058cc <__sfmoreglue>:
    58cc:	b570      	push	{r4, r5, r6, lr}
    58ce:	2568      	movs	r5, #104	; 0x68
    58d0:	1e4b      	subs	r3, r1, #1
    58d2:	435d      	muls	r5, r3
    58d4:	1c0e      	adds	r6, r1, #0
    58d6:	1c29      	adds	r1, r5, #0
    58d8:	3174      	adds	r1, #116	; 0x74
    58da:	f000 f947 	bl	5b6c <_malloc_r>
    58de:	1e04      	subs	r4, r0, #0
    58e0:	d008      	beq.n	58f4 <__sfmoreglue+0x28>
    58e2:	2100      	movs	r1, #0
    58e4:	1c2a      	adds	r2, r5, #0
    58e6:	6001      	str	r1, [r0, #0]
    58e8:	6046      	str	r6, [r0, #4]
    58ea:	300c      	adds	r0, #12
    58ec:	60a0      	str	r0, [r4, #8]
    58ee:	3268      	adds	r2, #104	; 0x68
    58f0:	f7ff fd1f 	bl	5332 <memset>
    58f4:	1c20      	adds	r0, r4, #0
    58f6:	bd70      	pop	{r4, r5, r6, pc}

000058f8 <__sinit>:
    58f8:	6983      	ldr	r3, [r0, #24]
    58fa:	b513      	push	{r0, r1, r4, lr}
    58fc:	2b00      	cmp	r3, #0
    58fe:	d128      	bne.n	5952 <__sinit+0x5a>
    5900:	6483      	str	r3, [r0, #72]	; 0x48
    5902:	64c3      	str	r3, [r0, #76]	; 0x4c
    5904:	6503      	str	r3, [r0, #80]	; 0x50
    5906:	4b13      	ldr	r3, [pc, #76]	; (5954 <__sinit+0x5c>)
    5908:	4a13      	ldr	r2, [pc, #76]	; (5958 <__sinit+0x60>)
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	6282      	str	r2, [r0, #40]	; 0x28
    590e:	9301      	str	r3, [sp, #4]
    5910:	4298      	cmp	r0, r3
    5912:	d101      	bne.n	5918 <__sinit+0x20>
    5914:	2301      	movs	r3, #1
    5916:	6183      	str	r3, [r0, #24]
    5918:	1c04      	adds	r4, r0, #0
    591a:	f000 f81f 	bl	595c <__sfp>
    591e:	6060      	str	r0, [r4, #4]
    5920:	1c20      	adds	r0, r4, #0
    5922:	f000 f81b 	bl	595c <__sfp>
    5926:	60a0      	str	r0, [r4, #8]
    5928:	1c20      	adds	r0, r4, #0
    592a:	f000 f817 	bl	595c <__sfp>
    592e:	2104      	movs	r1, #4
    5930:	60e0      	str	r0, [r4, #12]
    5932:	2200      	movs	r2, #0
    5934:	6860      	ldr	r0, [r4, #4]
    5936:	f7ff ffa5 	bl	5884 <std.isra.0>
    593a:	68a0      	ldr	r0, [r4, #8]
    593c:	2109      	movs	r1, #9
    593e:	2201      	movs	r2, #1
    5940:	f7ff ffa0 	bl	5884 <std.isra.0>
    5944:	68e0      	ldr	r0, [r4, #12]
    5946:	2112      	movs	r1, #18
    5948:	2202      	movs	r2, #2
    594a:	f7ff ff9b 	bl	5884 <std.isra.0>
    594e:	2301      	movs	r3, #1
    5950:	61a3      	str	r3, [r4, #24]
    5952:	bd13      	pop	{r0, r1, r4, pc}
    5954:	000064f8 	.word	0x000064f8
    5958:	00005875 	.word	0x00005875

0000595c <__sfp>:
    595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    595e:	4b1d      	ldr	r3, [pc, #116]	; (59d4 <__sfp+0x78>)
    5960:	1c06      	adds	r6, r0, #0
    5962:	681d      	ldr	r5, [r3, #0]
    5964:	69ab      	ldr	r3, [r5, #24]
    5966:	2b00      	cmp	r3, #0
    5968:	d102      	bne.n	5970 <__sfp+0x14>
    596a:	1c28      	adds	r0, r5, #0
    596c:	f7ff ffc4 	bl	58f8 <__sinit>
    5970:	3548      	adds	r5, #72	; 0x48
    5972:	68ac      	ldr	r4, [r5, #8]
    5974:	686b      	ldr	r3, [r5, #4]
    5976:	3b01      	subs	r3, #1
    5978:	d405      	bmi.n	5986 <__sfp+0x2a>
    597a:	220c      	movs	r2, #12
    597c:	5ea7      	ldrsh	r7, [r4, r2]
    597e:	2f00      	cmp	r7, #0
    5980:	d010      	beq.n	59a4 <__sfp+0x48>
    5982:	3468      	adds	r4, #104	; 0x68
    5984:	e7f7      	b.n	5976 <__sfp+0x1a>
    5986:	682b      	ldr	r3, [r5, #0]
    5988:	2b00      	cmp	r3, #0
    598a:	d106      	bne.n	599a <__sfp+0x3e>
    598c:	1c30      	adds	r0, r6, #0
    598e:	2104      	movs	r1, #4
    5990:	f7ff ff9c 	bl	58cc <__sfmoreglue>
    5994:	6028      	str	r0, [r5, #0]
    5996:	2800      	cmp	r0, #0
    5998:	d001      	beq.n	599e <__sfp+0x42>
    599a:	682d      	ldr	r5, [r5, #0]
    599c:	e7e9      	b.n	5972 <__sfp+0x16>
    599e:	230c      	movs	r3, #12
    59a0:	6033      	str	r3, [r6, #0]
    59a2:	e016      	b.n	59d2 <__sfp+0x76>
    59a4:	2301      	movs	r3, #1
    59a6:	1c20      	adds	r0, r4, #0
    59a8:	425b      	negs	r3, r3
    59aa:	81e3      	strh	r3, [r4, #14]
    59ac:	3302      	adds	r3, #2
    59ae:	81a3      	strh	r3, [r4, #12]
    59b0:	6667      	str	r7, [r4, #100]	; 0x64
    59b2:	6027      	str	r7, [r4, #0]
    59b4:	60a7      	str	r7, [r4, #8]
    59b6:	6067      	str	r7, [r4, #4]
    59b8:	6127      	str	r7, [r4, #16]
    59ba:	6167      	str	r7, [r4, #20]
    59bc:	61a7      	str	r7, [r4, #24]
    59be:	305c      	adds	r0, #92	; 0x5c
    59c0:	1c39      	adds	r1, r7, #0
    59c2:	2208      	movs	r2, #8
    59c4:	f7ff fcb5 	bl	5332 <memset>
    59c8:	1c20      	adds	r0, r4, #0
    59ca:	6367      	str	r7, [r4, #52]	; 0x34
    59cc:	63a7      	str	r7, [r4, #56]	; 0x38
    59ce:	64a7      	str	r7, [r4, #72]	; 0x48
    59d0:	64e7      	str	r7, [r4, #76]	; 0x4c
    59d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59d4:	000064f8 	.word	0x000064f8

000059d8 <_fwalk_reent>:
    59d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59da:	1c04      	adds	r4, r0, #0
    59dc:	1c07      	adds	r7, r0, #0
    59de:	2600      	movs	r6, #0
    59e0:	9101      	str	r1, [sp, #4]
    59e2:	3448      	adds	r4, #72	; 0x48
    59e4:	2c00      	cmp	r4, #0
    59e6:	d016      	beq.n	5a16 <_fwalk_reent+0x3e>
    59e8:	6863      	ldr	r3, [r4, #4]
    59ea:	68a5      	ldr	r5, [r4, #8]
    59ec:	9300      	str	r3, [sp, #0]
    59ee:	9b00      	ldr	r3, [sp, #0]
    59f0:	3b01      	subs	r3, #1
    59f2:	9300      	str	r3, [sp, #0]
    59f4:	d40d      	bmi.n	5a12 <_fwalk_reent+0x3a>
    59f6:	89ab      	ldrh	r3, [r5, #12]
    59f8:	2b01      	cmp	r3, #1
    59fa:	d908      	bls.n	5a0e <_fwalk_reent+0x36>
    59fc:	220e      	movs	r2, #14
    59fe:	5eab      	ldrsh	r3, [r5, r2]
    5a00:	3301      	adds	r3, #1
    5a02:	d004      	beq.n	5a0e <_fwalk_reent+0x36>
    5a04:	1c38      	adds	r0, r7, #0
    5a06:	1c29      	adds	r1, r5, #0
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	4798      	blx	r3
    5a0c:	4306      	orrs	r6, r0
    5a0e:	3568      	adds	r5, #104	; 0x68
    5a10:	e7ed      	b.n	59ee <_fwalk_reent+0x16>
    5a12:	6824      	ldr	r4, [r4, #0]
    5a14:	e7e6      	b.n	59e4 <_fwalk_reent+0xc>
    5a16:	1c30      	adds	r0, r6, #0
    5a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005a1c <__smakebuf_r>:
    5a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a1e:	898b      	ldrh	r3, [r1, #12]
    5a20:	b091      	sub	sp, #68	; 0x44
    5a22:	079b      	lsls	r3, r3, #30
    5a24:	d506      	bpl.n	5a34 <__smakebuf_r+0x18>
    5a26:	1c0b      	adds	r3, r1, #0
    5a28:	3347      	adds	r3, #71	; 0x47
    5a2a:	600b      	str	r3, [r1, #0]
    5a2c:	610b      	str	r3, [r1, #16]
    5a2e:	2301      	movs	r3, #1
    5a30:	614b      	str	r3, [r1, #20]
    5a32:	e045      	b.n	5ac0 <__smakebuf_r+0xa4>
    5a34:	1c0c      	adds	r4, r1, #0
    5a36:	230e      	movs	r3, #14
    5a38:	5ec9      	ldrsh	r1, [r1, r3]
    5a3a:	1c06      	adds	r6, r0, #0
    5a3c:	2900      	cmp	r1, #0
    5a3e:	da04      	bge.n	5a4a <__smakebuf_r+0x2e>
    5a40:	2380      	movs	r3, #128	; 0x80
    5a42:	89a5      	ldrh	r5, [r4, #12]
    5a44:	401d      	ands	r5, r3
    5a46:	d110      	bne.n	5a6a <__smakebuf_r+0x4e>
    5a48:	e00c      	b.n	5a64 <__smakebuf_r+0x48>
    5a4a:	aa01      	add	r2, sp, #4
    5a4c:	f000 fc28 	bl	62a0 <_fstat_r>
    5a50:	2800      	cmp	r0, #0
    5a52:	dbf5      	blt.n	5a40 <__smakebuf_r+0x24>
    5a54:	23f0      	movs	r3, #240	; 0xf0
    5a56:	9d02      	ldr	r5, [sp, #8]
    5a58:	021b      	lsls	r3, r3, #8
    5a5a:	401d      	ands	r5, r3
    5a5c:	4b19      	ldr	r3, [pc, #100]	; (5ac4 <__smakebuf_r+0xa8>)
    5a5e:	18ed      	adds	r5, r5, r3
    5a60:	426b      	negs	r3, r5
    5a62:	415d      	adcs	r5, r3
    5a64:	2780      	movs	r7, #128	; 0x80
    5a66:	00ff      	lsls	r7, r7, #3
    5a68:	e001      	b.n	5a6e <__smakebuf_r+0x52>
    5a6a:	2500      	movs	r5, #0
    5a6c:	2740      	movs	r7, #64	; 0x40
    5a6e:	1c30      	adds	r0, r6, #0
    5a70:	1c39      	adds	r1, r7, #0
    5a72:	f000 f87b 	bl	5b6c <_malloc_r>
    5a76:	2800      	cmp	r0, #0
    5a78:	d10c      	bne.n	5a94 <__smakebuf_r+0x78>
    5a7a:	89a3      	ldrh	r3, [r4, #12]
    5a7c:	059a      	lsls	r2, r3, #22
    5a7e:	d41f      	bmi.n	5ac0 <__smakebuf_r+0xa4>
    5a80:	2202      	movs	r2, #2
    5a82:	4313      	orrs	r3, r2
    5a84:	81a3      	strh	r3, [r4, #12]
    5a86:	1c23      	adds	r3, r4, #0
    5a88:	3347      	adds	r3, #71	; 0x47
    5a8a:	6023      	str	r3, [r4, #0]
    5a8c:	6123      	str	r3, [r4, #16]
    5a8e:	2301      	movs	r3, #1
    5a90:	6163      	str	r3, [r4, #20]
    5a92:	e015      	b.n	5ac0 <__smakebuf_r+0xa4>
    5a94:	2280      	movs	r2, #128	; 0x80
    5a96:	4b0c      	ldr	r3, [pc, #48]	; (5ac8 <__smakebuf_r+0xac>)
    5a98:	62b3      	str	r3, [r6, #40]	; 0x28
    5a9a:	89a3      	ldrh	r3, [r4, #12]
    5a9c:	6020      	str	r0, [r4, #0]
    5a9e:	4313      	orrs	r3, r2
    5aa0:	81a3      	strh	r3, [r4, #12]
    5aa2:	6120      	str	r0, [r4, #16]
    5aa4:	6167      	str	r7, [r4, #20]
    5aa6:	2d00      	cmp	r5, #0
    5aa8:	d00a      	beq.n	5ac0 <__smakebuf_r+0xa4>
    5aaa:	230e      	movs	r3, #14
    5aac:	5ee1      	ldrsh	r1, [r4, r3]
    5aae:	1c30      	adds	r0, r6, #0
    5ab0:	f000 fc08 	bl	62c4 <_isatty_r>
    5ab4:	2800      	cmp	r0, #0
    5ab6:	d003      	beq.n	5ac0 <__smakebuf_r+0xa4>
    5ab8:	2201      	movs	r2, #1
    5aba:	89a3      	ldrh	r3, [r4, #12]
    5abc:	4313      	orrs	r3, r2
    5abe:	81a3      	strh	r3, [r4, #12]
    5ac0:	b011      	add	sp, #68	; 0x44
    5ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ac4:	ffffe000 	.word	0xffffe000
    5ac8:	00005875 	.word	0x00005875

00005acc <malloc>:
    5acc:	b508      	push	{r3, lr}
    5ace:	4b03      	ldr	r3, [pc, #12]	; (5adc <malloc+0x10>)
    5ad0:	1c01      	adds	r1, r0, #0
    5ad2:	6818      	ldr	r0, [r3, #0]
    5ad4:	f000 f84a 	bl	5b6c <_malloc_r>
    5ad8:	bd08      	pop	{r3, pc}
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	2000006c 	.word	0x2000006c

00005ae0 <_free_r>:
    5ae0:	b530      	push	{r4, r5, lr}
    5ae2:	2900      	cmp	r1, #0
    5ae4:	d03e      	beq.n	5b64 <_free_r+0x84>
    5ae6:	3904      	subs	r1, #4
    5ae8:	680b      	ldr	r3, [r1, #0]
    5aea:	2b00      	cmp	r3, #0
    5aec:	da00      	bge.n	5af0 <_free_r+0x10>
    5aee:	18c9      	adds	r1, r1, r3
    5af0:	4a1d      	ldr	r2, [pc, #116]	; (5b68 <_free_r+0x88>)
    5af2:	6813      	ldr	r3, [r2, #0]
    5af4:	1c14      	adds	r4, r2, #0
    5af6:	2b00      	cmp	r3, #0
    5af8:	d102      	bne.n	5b00 <_free_r+0x20>
    5afa:	604b      	str	r3, [r1, #4]
    5afc:	6011      	str	r1, [r2, #0]
    5afe:	e031      	b.n	5b64 <_free_r+0x84>
    5b00:	4299      	cmp	r1, r3
    5b02:	d20d      	bcs.n	5b20 <_free_r+0x40>
    5b04:	6808      	ldr	r0, [r1, #0]
    5b06:	180a      	adds	r2, r1, r0
    5b08:	429a      	cmp	r2, r3
    5b0a:	d103      	bne.n	5b14 <_free_r+0x34>
    5b0c:	6813      	ldr	r3, [r2, #0]
    5b0e:	18c3      	adds	r3, r0, r3
    5b10:	600b      	str	r3, [r1, #0]
    5b12:	6853      	ldr	r3, [r2, #4]
    5b14:	604b      	str	r3, [r1, #4]
    5b16:	6021      	str	r1, [r4, #0]
    5b18:	e024      	b.n	5b64 <_free_r+0x84>
    5b1a:	428a      	cmp	r2, r1
    5b1c:	d803      	bhi.n	5b26 <_free_r+0x46>
    5b1e:	1c13      	adds	r3, r2, #0
    5b20:	685a      	ldr	r2, [r3, #4]
    5b22:	2a00      	cmp	r2, #0
    5b24:	d1f9      	bne.n	5b1a <_free_r+0x3a>
    5b26:	681d      	ldr	r5, [r3, #0]
    5b28:	195c      	adds	r4, r3, r5
    5b2a:	428c      	cmp	r4, r1
    5b2c:	d10b      	bne.n	5b46 <_free_r+0x66>
    5b2e:	6809      	ldr	r1, [r1, #0]
    5b30:	1869      	adds	r1, r5, r1
    5b32:	1858      	adds	r0, r3, r1
    5b34:	6019      	str	r1, [r3, #0]
    5b36:	4290      	cmp	r0, r2
    5b38:	d114      	bne.n	5b64 <_free_r+0x84>
    5b3a:	6810      	ldr	r0, [r2, #0]
    5b3c:	6852      	ldr	r2, [r2, #4]
    5b3e:	1809      	adds	r1, r1, r0
    5b40:	6019      	str	r1, [r3, #0]
    5b42:	605a      	str	r2, [r3, #4]
    5b44:	e00e      	b.n	5b64 <_free_r+0x84>
    5b46:	428c      	cmp	r4, r1
    5b48:	d902      	bls.n	5b50 <_free_r+0x70>
    5b4a:	230c      	movs	r3, #12
    5b4c:	6003      	str	r3, [r0, #0]
    5b4e:	e009      	b.n	5b64 <_free_r+0x84>
    5b50:	6808      	ldr	r0, [r1, #0]
    5b52:	180c      	adds	r4, r1, r0
    5b54:	4294      	cmp	r4, r2
    5b56:	d103      	bne.n	5b60 <_free_r+0x80>
    5b58:	6814      	ldr	r4, [r2, #0]
    5b5a:	6852      	ldr	r2, [r2, #4]
    5b5c:	1900      	adds	r0, r0, r4
    5b5e:	6008      	str	r0, [r1, #0]
    5b60:	604a      	str	r2, [r1, #4]
    5b62:	6059      	str	r1, [r3, #4]
    5b64:	bd30      	pop	{r4, r5, pc}
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	20003cd8 	.word	0x20003cd8

00005b6c <_malloc_r>:
    5b6c:	2303      	movs	r3, #3
    5b6e:	b570      	push	{r4, r5, r6, lr}
    5b70:	1ccc      	adds	r4, r1, #3
    5b72:	439c      	bics	r4, r3
    5b74:	3408      	adds	r4, #8
    5b76:	1c05      	adds	r5, r0, #0
    5b78:	2c0c      	cmp	r4, #12
    5b7a:	d201      	bcs.n	5b80 <_malloc_r+0x14>
    5b7c:	240c      	movs	r4, #12
    5b7e:	e005      	b.n	5b8c <_malloc_r+0x20>
    5b80:	2c00      	cmp	r4, #0
    5b82:	da03      	bge.n	5b8c <_malloc_r+0x20>
    5b84:	230c      	movs	r3, #12
    5b86:	2000      	movs	r0, #0
    5b88:	602b      	str	r3, [r5, #0]
    5b8a:	e042      	b.n	5c12 <_malloc_r+0xa6>
    5b8c:	428c      	cmp	r4, r1
    5b8e:	d3f9      	bcc.n	5b84 <_malloc_r+0x18>
    5b90:	4a20      	ldr	r2, [pc, #128]	; (5c14 <_malloc_r+0xa8>)
    5b92:	6813      	ldr	r3, [r2, #0]
    5b94:	1c10      	adds	r0, r2, #0
    5b96:	1c19      	adds	r1, r3, #0
    5b98:	2900      	cmp	r1, #0
    5b9a:	d013      	beq.n	5bc4 <_malloc_r+0x58>
    5b9c:	680a      	ldr	r2, [r1, #0]
    5b9e:	1b12      	subs	r2, r2, r4
    5ba0:	d40d      	bmi.n	5bbe <_malloc_r+0x52>
    5ba2:	2a0b      	cmp	r2, #11
    5ba4:	d902      	bls.n	5bac <_malloc_r+0x40>
    5ba6:	600a      	str	r2, [r1, #0]
    5ba8:	188b      	adds	r3, r1, r2
    5baa:	e01f      	b.n	5bec <_malloc_r+0x80>
    5bac:	428b      	cmp	r3, r1
    5bae:	d102      	bne.n	5bb6 <_malloc_r+0x4a>
    5bb0:	685a      	ldr	r2, [r3, #4]
    5bb2:	6002      	str	r2, [r0, #0]
    5bb4:	e01b      	b.n	5bee <_malloc_r+0x82>
    5bb6:	684a      	ldr	r2, [r1, #4]
    5bb8:	605a      	str	r2, [r3, #4]
    5bba:	1c0b      	adds	r3, r1, #0
    5bbc:	e017      	b.n	5bee <_malloc_r+0x82>
    5bbe:	1c0b      	adds	r3, r1, #0
    5bc0:	6849      	ldr	r1, [r1, #4]
    5bc2:	e7e9      	b.n	5b98 <_malloc_r+0x2c>
    5bc4:	4e14      	ldr	r6, [pc, #80]	; (5c18 <_malloc_r+0xac>)
    5bc6:	6833      	ldr	r3, [r6, #0]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d103      	bne.n	5bd4 <_malloc_r+0x68>
    5bcc:	1c28      	adds	r0, r5, #0
    5bce:	f000 fae3 	bl	6198 <_sbrk_r>
    5bd2:	6030      	str	r0, [r6, #0]
    5bd4:	1c28      	adds	r0, r5, #0
    5bd6:	1c21      	adds	r1, r4, #0
    5bd8:	f000 fade 	bl	6198 <_sbrk_r>
    5bdc:	1c03      	adds	r3, r0, #0
    5bde:	1c42      	adds	r2, r0, #1
    5be0:	d0d0      	beq.n	5b84 <_malloc_r+0x18>
    5be2:	2203      	movs	r2, #3
    5be4:	1cc6      	adds	r6, r0, #3
    5be6:	4396      	bics	r6, r2
    5be8:	4286      	cmp	r6, r0
    5bea:	d10a      	bne.n	5c02 <_malloc_r+0x96>
    5bec:	601c      	str	r4, [r3, #0]
    5bee:	1c18      	adds	r0, r3, #0
    5bf0:	2107      	movs	r1, #7
    5bf2:	300b      	adds	r0, #11
    5bf4:	1d1a      	adds	r2, r3, #4
    5bf6:	4388      	bics	r0, r1
    5bf8:	1a82      	subs	r2, r0, r2
    5bfa:	d00a      	beq.n	5c12 <_malloc_r+0xa6>
    5bfc:	4251      	negs	r1, r2
    5bfe:	5099      	str	r1, [r3, r2]
    5c00:	e007      	b.n	5c12 <_malloc_r+0xa6>
    5c02:	1a31      	subs	r1, r6, r0
    5c04:	1c28      	adds	r0, r5, #0
    5c06:	f000 fac7 	bl	6198 <_sbrk_r>
    5c0a:	1c43      	adds	r3, r0, #1
    5c0c:	d0ba      	beq.n	5b84 <_malloc_r+0x18>
    5c0e:	1c33      	adds	r3, r6, #0
    5c10:	e7ec      	b.n	5bec <_malloc_r+0x80>
    5c12:	bd70      	pop	{r4, r5, r6, pc}
    5c14:	20003cd8 	.word	0x20003cd8
    5c18:	20003cd4 	.word	0x20003cd4

00005c1c <__sfputc_r>:
    5c1c:	6893      	ldr	r3, [r2, #8]
    5c1e:	b510      	push	{r4, lr}
    5c20:	3b01      	subs	r3, #1
    5c22:	6093      	str	r3, [r2, #8]
    5c24:	2b00      	cmp	r3, #0
    5c26:	da05      	bge.n	5c34 <__sfputc_r+0x18>
    5c28:	6994      	ldr	r4, [r2, #24]
    5c2a:	42a3      	cmp	r3, r4
    5c2c:	db08      	blt.n	5c40 <__sfputc_r+0x24>
    5c2e:	b2cb      	uxtb	r3, r1
    5c30:	2b0a      	cmp	r3, #10
    5c32:	d005      	beq.n	5c40 <__sfputc_r+0x24>
    5c34:	6813      	ldr	r3, [r2, #0]
    5c36:	1c58      	adds	r0, r3, #1
    5c38:	6010      	str	r0, [r2, #0]
    5c3a:	7019      	strb	r1, [r3, #0]
    5c3c:	b2c8      	uxtb	r0, r1
    5c3e:	e001      	b.n	5c44 <__sfputc_r+0x28>
    5c40:	f7ff fc96 	bl	5570 <__swbuf_r>
    5c44:	bd10      	pop	{r4, pc}

00005c46 <__sfputs_r>:
    5c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c48:	1c06      	adds	r6, r0, #0
    5c4a:	1c0f      	adds	r7, r1, #0
    5c4c:	1c14      	adds	r4, r2, #0
    5c4e:	18d5      	adds	r5, r2, r3
    5c50:	42ac      	cmp	r4, r5
    5c52:	d008      	beq.n	5c66 <__sfputs_r+0x20>
    5c54:	7821      	ldrb	r1, [r4, #0]
    5c56:	1c30      	adds	r0, r6, #0
    5c58:	1c3a      	adds	r2, r7, #0
    5c5a:	f7ff ffdf 	bl	5c1c <__sfputc_r>
    5c5e:	3401      	adds	r4, #1
    5c60:	1c43      	adds	r3, r0, #1
    5c62:	d1f5      	bne.n	5c50 <__sfputs_r+0xa>
    5c64:	e000      	b.n	5c68 <__sfputs_r+0x22>
    5c66:	2000      	movs	r0, #0
    5c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005c6c <_vfiprintf_r>:
    5c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c6e:	b09f      	sub	sp, #124	; 0x7c
    5c70:	1c06      	adds	r6, r0, #0
    5c72:	1c0f      	adds	r7, r1, #0
    5c74:	9202      	str	r2, [sp, #8]
    5c76:	9305      	str	r3, [sp, #20]
    5c78:	2800      	cmp	r0, #0
    5c7a:	d004      	beq.n	5c86 <_vfiprintf_r+0x1a>
    5c7c:	6983      	ldr	r3, [r0, #24]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d101      	bne.n	5c86 <_vfiprintf_r+0x1a>
    5c82:	f7ff fe39 	bl	58f8 <__sinit>
    5c86:	4b79      	ldr	r3, [pc, #484]	; (5e6c <_vfiprintf_r+0x200>)
    5c88:	429f      	cmp	r7, r3
    5c8a:	d101      	bne.n	5c90 <_vfiprintf_r+0x24>
    5c8c:	6877      	ldr	r7, [r6, #4]
    5c8e:	e008      	b.n	5ca2 <_vfiprintf_r+0x36>
    5c90:	4b77      	ldr	r3, [pc, #476]	; (5e70 <_vfiprintf_r+0x204>)
    5c92:	429f      	cmp	r7, r3
    5c94:	d101      	bne.n	5c9a <_vfiprintf_r+0x2e>
    5c96:	68b7      	ldr	r7, [r6, #8]
    5c98:	e003      	b.n	5ca2 <_vfiprintf_r+0x36>
    5c9a:	4b76      	ldr	r3, [pc, #472]	; (5e74 <_vfiprintf_r+0x208>)
    5c9c:	429f      	cmp	r7, r3
    5c9e:	d100      	bne.n	5ca2 <_vfiprintf_r+0x36>
    5ca0:	68f7      	ldr	r7, [r6, #12]
    5ca2:	89bb      	ldrh	r3, [r7, #12]
    5ca4:	071b      	lsls	r3, r3, #28
    5ca6:	d50a      	bpl.n	5cbe <_vfiprintf_r+0x52>
    5ca8:	693b      	ldr	r3, [r7, #16]
    5caa:	2b00      	cmp	r3, #0
    5cac:	d007      	beq.n	5cbe <_vfiprintf_r+0x52>
    5cae:	2300      	movs	r3, #0
    5cb0:	ad06      	add	r5, sp, #24
    5cb2:	616b      	str	r3, [r5, #20]
    5cb4:	3320      	adds	r3, #32
    5cb6:	766b      	strb	r3, [r5, #25]
    5cb8:	3310      	adds	r3, #16
    5cba:	76ab      	strb	r3, [r5, #26]
    5cbc:	e03d      	b.n	5d3a <_vfiprintf_r+0xce>
    5cbe:	1c30      	adds	r0, r6, #0
    5cc0:	1c39      	adds	r1, r7, #0
    5cc2:	f7ff fcad 	bl	5620 <__swsetup_r>
    5cc6:	2800      	cmp	r0, #0
    5cc8:	d0f1      	beq.n	5cae <_vfiprintf_r+0x42>
    5cca:	2001      	movs	r0, #1
    5ccc:	4240      	negs	r0, r0
    5cce:	e0ca      	b.n	5e66 <_vfiprintf_r+0x1fa>
    5cd0:	9a05      	ldr	r2, [sp, #20]
    5cd2:	1d11      	adds	r1, r2, #4
    5cd4:	6812      	ldr	r2, [r2, #0]
    5cd6:	9105      	str	r1, [sp, #20]
    5cd8:	2a00      	cmp	r2, #0
    5cda:	db7e      	blt.n	5dda <_vfiprintf_r+0x16e>
    5cdc:	9209      	str	r2, [sp, #36]	; 0x24
    5cde:	3401      	adds	r4, #1
    5ce0:	7823      	ldrb	r3, [r4, #0]
    5ce2:	2b2e      	cmp	r3, #46	; 0x2e
    5ce4:	d100      	bne.n	5ce8 <_vfiprintf_r+0x7c>
    5ce6:	e089      	b.n	5dfc <_vfiprintf_r+0x190>
    5ce8:	7821      	ldrb	r1, [r4, #0]
    5cea:	4863      	ldr	r0, [pc, #396]	; (5e78 <_vfiprintf_r+0x20c>)
    5cec:	2203      	movs	r2, #3
    5cee:	f000 fb0f 	bl	6310 <memchr>
    5cf2:	2800      	cmp	r0, #0
    5cf4:	d008      	beq.n	5d08 <_vfiprintf_r+0x9c>
    5cf6:	4b60      	ldr	r3, [pc, #384]	; (5e78 <_vfiprintf_r+0x20c>)
    5cf8:	3401      	adds	r4, #1
    5cfa:	1ac0      	subs	r0, r0, r3
    5cfc:	2340      	movs	r3, #64	; 0x40
    5cfe:	4083      	lsls	r3, r0
    5d00:	1c18      	adds	r0, r3, #0
    5d02:	682b      	ldr	r3, [r5, #0]
    5d04:	4318      	orrs	r0, r3
    5d06:	6028      	str	r0, [r5, #0]
    5d08:	7821      	ldrb	r1, [r4, #0]
    5d0a:	1c63      	adds	r3, r4, #1
    5d0c:	485b      	ldr	r0, [pc, #364]	; (5e7c <_vfiprintf_r+0x210>)
    5d0e:	2206      	movs	r2, #6
    5d10:	9302      	str	r3, [sp, #8]
    5d12:	7629      	strb	r1, [r5, #24]
    5d14:	f000 fafc 	bl	6310 <memchr>
    5d18:	2800      	cmp	r0, #0
    5d1a:	d100      	bne.n	5d1e <_vfiprintf_r+0xb2>
    5d1c:	e091      	b.n	5e42 <_vfiprintf_r+0x1d6>
    5d1e:	4b58      	ldr	r3, [pc, #352]	; (5e80 <_vfiprintf_r+0x214>)
    5d20:	2b00      	cmp	r3, #0
    5d22:	d000      	beq.n	5d26 <_vfiprintf_r+0xba>
    5d24:	e084      	b.n	5e30 <_vfiprintf_r+0x1c4>
    5d26:	2207      	movs	r2, #7
    5d28:	9b05      	ldr	r3, [sp, #20]
    5d2a:	3307      	adds	r3, #7
    5d2c:	4393      	bics	r3, r2
    5d2e:	3308      	adds	r3, #8
    5d30:	9305      	str	r3, [sp, #20]
    5d32:	696b      	ldr	r3, [r5, #20]
    5d34:	9a03      	ldr	r2, [sp, #12]
    5d36:	189b      	adds	r3, r3, r2
    5d38:	616b      	str	r3, [r5, #20]
    5d3a:	9c02      	ldr	r4, [sp, #8]
    5d3c:	7823      	ldrb	r3, [r4, #0]
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d104      	bne.n	5d4c <_vfiprintf_r+0xe0>
    5d42:	9b02      	ldr	r3, [sp, #8]
    5d44:	1ae3      	subs	r3, r4, r3
    5d46:	9304      	str	r3, [sp, #16]
    5d48:	d011      	beq.n	5d6e <_vfiprintf_r+0x102>
    5d4a:	e003      	b.n	5d54 <_vfiprintf_r+0xe8>
    5d4c:	2b25      	cmp	r3, #37	; 0x25
    5d4e:	d0f8      	beq.n	5d42 <_vfiprintf_r+0xd6>
    5d50:	3401      	adds	r4, #1
    5d52:	e7f3      	b.n	5d3c <_vfiprintf_r+0xd0>
    5d54:	9b04      	ldr	r3, [sp, #16]
    5d56:	1c30      	adds	r0, r6, #0
    5d58:	1c39      	adds	r1, r7, #0
    5d5a:	9a02      	ldr	r2, [sp, #8]
    5d5c:	f7ff ff73 	bl	5c46 <__sfputs_r>
    5d60:	1c43      	adds	r3, r0, #1
    5d62:	d07b      	beq.n	5e5c <_vfiprintf_r+0x1f0>
    5d64:	696a      	ldr	r2, [r5, #20]
    5d66:	9b04      	ldr	r3, [sp, #16]
    5d68:	4694      	mov	ip, r2
    5d6a:	4463      	add	r3, ip
    5d6c:	616b      	str	r3, [r5, #20]
    5d6e:	7823      	ldrb	r3, [r4, #0]
    5d70:	2b00      	cmp	r3, #0
    5d72:	d073      	beq.n	5e5c <_vfiprintf_r+0x1f0>
    5d74:	2201      	movs	r2, #1
    5d76:	2300      	movs	r3, #0
    5d78:	4252      	negs	r2, r2
    5d7a:	606a      	str	r2, [r5, #4]
    5d7c:	a902      	add	r1, sp, #8
    5d7e:	3254      	adds	r2, #84	; 0x54
    5d80:	1852      	adds	r2, r2, r1
    5d82:	3401      	adds	r4, #1
    5d84:	602b      	str	r3, [r5, #0]
    5d86:	60eb      	str	r3, [r5, #12]
    5d88:	60ab      	str	r3, [r5, #8]
    5d8a:	7013      	strb	r3, [r2, #0]
    5d8c:	65ab      	str	r3, [r5, #88]	; 0x58
    5d8e:	7821      	ldrb	r1, [r4, #0]
    5d90:	483c      	ldr	r0, [pc, #240]	; (5e84 <_vfiprintf_r+0x218>)
    5d92:	2205      	movs	r2, #5
    5d94:	f000 fabc 	bl	6310 <memchr>
    5d98:	2800      	cmp	r0, #0
    5d9a:	d009      	beq.n	5db0 <_vfiprintf_r+0x144>
    5d9c:	4b39      	ldr	r3, [pc, #228]	; (5e84 <_vfiprintf_r+0x218>)
    5d9e:	3401      	adds	r4, #1
    5da0:	1ac0      	subs	r0, r0, r3
    5da2:	2301      	movs	r3, #1
    5da4:	4083      	lsls	r3, r0
    5da6:	1c18      	adds	r0, r3, #0
    5da8:	682b      	ldr	r3, [r5, #0]
    5daa:	4318      	orrs	r0, r3
    5dac:	6028      	str	r0, [r5, #0]
    5dae:	e7ee      	b.n	5d8e <_vfiprintf_r+0x122>
    5db0:	682b      	ldr	r3, [r5, #0]
    5db2:	06da      	lsls	r2, r3, #27
    5db4:	d504      	bpl.n	5dc0 <_vfiprintf_r+0x154>
    5db6:	2253      	movs	r2, #83	; 0x53
    5db8:	2120      	movs	r1, #32
    5dba:	a802      	add	r0, sp, #8
    5dbc:	1812      	adds	r2, r2, r0
    5dbe:	7011      	strb	r1, [r2, #0]
    5dc0:	071a      	lsls	r2, r3, #28
    5dc2:	d504      	bpl.n	5dce <_vfiprintf_r+0x162>
    5dc4:	2253      	movs	r2, #83	; 0x53
    5dc6:	212b      	movs	r1, #43	; 0x2b
    5dc8:	a802      	add	r0, sp, #8
    5dca:	1812      	adds	r2, r2, r0
    5dcc:	7011      	strb	r1, [r2, #0]
    5dce:	7822      	ldrb	r2, [r4, #0]
    5dd0:	2a2a      	cmp	r2, #42	; 0x2a
    5dd2:	d100      	bne.n	5dd6 <_vfiprintf_r+0x16a>
    5dd4:	e77c      	b.n	5cd0 <_vfiprintf_r+0x64>
    5dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dd8:	e005      	b.n	5de6 <_vfiprintf_r+0x17a>
    5dda:	4252      	negs	r2, r2
    5ddc:	60ea      	str	r2, [r5, #12]
    5dde:	2202      	movs	r2, #2
    5de0:	4313      	orrs	r3, r2
    5de2:	602b      	str	r3, [r5, #0]
    5de4:	e77b      	b.n	5cde <_vfiprintf_r+0x72>
    5de6:	7822      	ldrb	r2, [r4, #0]
    5de8:	3a30      	subs	r2, #48	; 0x30
    5dea:	2a09      	cmp	r2, #9
    5dec:	d804      	bhi.n	5df8 <_vfiprintf_r+0x18c>
    5dee:	210a      	movs	r1, #10
    5df0:	434b      	muls	r3, r1
    5df2:	3401      	adds	r4, #1
    5df4:	189b      	adds	r3, r3, r2
    5df6:	e7f6      	b.n	5de6 <_vfiprintf_r+0x17a>
    5df8:	9309      	str	r3, [sp, #36]	; 0x24
    5dfa:	e771      	b.n	5ce0 <_vfiprintf_r+0x74>
    5dfc:	7863      	ldrb	r3, [r4, #1]
    5dfe:	2b2a      	cmp	r3, #42	; 0x2a
    5e00:	d109      	bne.n	5e16 <_vfiprintf_r+0x1aa>
    5e02:	9b05      	ldr	r3, [sp, #20]
    5e04:	3402      	adds	r4, #2
    5e06:	1d1a      	adds	r2, r3, #4
    5e08:	681b      	ldr	r3, [r3, #0]
    5e0a:	9205      	str	r2, [sp, #20]
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	da0d      	bge.n	5e2c <_vfiprintf_r+0x1c0>
    5e10:	2301      	movs	r3, #1
    5e12:	425b      	negs	r3, r3
    5e14:	e00a      	b.n	5e2c <_vfiprintf_r+0x1c0>
    5e16:	2300      	movs	r3, #0
    5e18:	3401      	adds	r4, #1
    5e1a:	7822      	ldrb	r2, [r4, #0]
    5e1c:	3a30      	subs	r2, #48	; 0x30
    5e1e:	2a09      	cmp	r2, #9
    5e20:	d804      	bhi.n	5e2c <_vfiprintf_r+0x1c0>
    5e22:	210a      	movs	r1, #10
    5e24:	434b      	muls	r3, r1
    5e26:	3401      	adds	r4, #1
    5e28:	189b      	adds	r3, r3, r2
    5e2a:	e7f6      	b.n	5e1a <_vfiprintf_r+0x1ae>
    5e2c:	9307      	str	r3, [sp, #28]
    5e2e:	e75b      	b.n	5ce8 <_vfiprintf_r+0x7c>
    5e30:	ab05      	add	r3, sp, #20
    5e32:	9300      	str	r3, [sp, #0]
    5e34:	1c30      	adds	r0, r6, #0
    5e36:	1c29      	adds	r1, r5, #0
    5e38:	1c3a      	adds	r2, r7, #0
    5e3a:	4b13      	ldr	r3, [pc, #76]	; (5e88 <_vfiprintf_r+0x21c>)
    5e3c:	e000      	b.n	5e40 <_vfiprintf_r+0x1d4>
    5e3e:	bf00      	nop
    5e40:	e007      	b.n	5e52 <_vfiprintf_r+0x1e6>
    5e42:	ab05      	add	r3, sp, #20
    5e44:	9300      	str	r3, [sp, #0]
    5e46:	1c30      	adds	r0, r6, #0
    5e48:	1c29      	adds	r1, r5, #0
    5e4a:	1c3a      	adds	r2, r7, #0
    5e4c:	4b0e      	ldr	r3, [pc, #56]	; (5e88 <_vfiprintf_r+0x21c>)
    5e4e:	f000 f88b 	bl	5f68 <_printf_i>
    5e52:	9003      	str	r0, [sp, #12]
    5e54:	9b03      	ldr	r3, [sp, #12]
    5e56:	3301      	adds	r3, #1
    5e58:	d000      	beq.n	5e5c <_vfiprintf_r+0x1f0>
    5e5a:	e76a      	b.n	5d32 <_vfiprintf_r+0xc6>
    5e5c:	89bb      	ldrh	r3, [r7, #12]
    5e5e:	065b      	lsls	r3, r3, #25
    5e60:	d500      	bpl.n	5e64 <_vfiprintf_r+0x1f8>
    5e62:	e732      	b.n	5cca <_vfiprintf_r+0x5e>
    5e64:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5e66:	b01f      	add	sp, #124	; 0x7c
    5e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	000064fc 	.word	0x000064fc
    5e70:	0000651c 	.word	0x0000651c
    5e74:	0000653c 	.word	0x0000653c
    5e78:	00006562 	.word	0x00006562
    5e7c:	00006566 	.word	0x00006566
    5e80:	00000000 	.word	0x00000000
    5e84:	0000655c 	.word	0x0000655c
    5e88:	00005c47 	.word	0x00005c47

00005e8c <_printf_common>:
    5e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e8e:	1c17      	adds	r7, r2, #0
    5e90:	9301      	str	r3, [sp, #4]
    5e92:	690a      	ldr	r2, [r1, #16]
    5e94:	688b      	ldr	r3, [r1, #8]
    5e96:	9000      	str	r0, [sp, #0]
    5e98:	1c0c      	adds	r4, r1, #0
    5e9a:	4293      	cmp	r3, r2
    5e9c:	da00      	bge.n	5ea0 <_printf_common+0x14>
    5e9e:	1c13      	adds	r3, r2, #0
    5ea0:	1c22      	adds	r2, r4, #0
    5ea2:	603b      	str	r3, [r7, #0]
    5ea4:	3243      	adds	r2, #67	; 0x43
    5ea6:	7812      	ldrb	r2, [r2, #0]
    5ea8:	2a00      	cmp	r2, #0
    5eaa:	d001      	beq.n	5eb0 <_printf_common+0x24>
    5eac:	3301      	adds	r3, #1
    5eae:	603b      	str	r3, [r7, #0]
    5eb0:	6823      	ldr	r3, [r4, #0]
    5eb2:	069b      	lsls	r3, r3, #26
    5eb4:	d502      	bpl.n	5ebc <_printf_common+0x30>
    5eb6:	683b      	ldr	r3, [r7, #0]
    5eb8:	3302      	adds	r3, #2
    5eba:	603b      	str	r3, [r7, #0]
    5ebc:	2506      	movs	r5, #6
    5ebe:	6823      	ldr	r3, [r4, #0]
    5ec0:	401d      	ands	r5, r3
    5ec2:	d01e      	beq.n	5f02 <_printf_common+0x76>
    5ec4:	1c23      	adds	r3, r4, #0
    5ec6:	3343      	adds	r3, #67	; 0x43
    5ec8:	781b      	ldrb	r3, [r3, #0]
    5eca:	1e5a      	subs	r2, r3, #1
    5ecc:	4193      	sbcs	r3, r2
    5ece:	6822      	ldr	r2, [r4, #0]
    5ed0:	0692      	lsls	r2, r2, #26
    5ed2:	d51c      	bpl.n	5f0e <_printf_common+0x82>
    5ed4:	2030      	movs	r0, #48	; 0x30
    5ed6:	18e1      	adds	r1, r4, r3
    5ed8:	3140      	adds	r1, #64	; 0x40
    5eda:	70c8      	strb	r0, [r1, #3]
    5edc:	1c21      	adds	r1, r4, #0
    5ede:	1c5a      	adds	r2, r3, #1
    5ee0:	3145      	adds	r1, #69	; 0x45
    5ee2:	7809      	ldrb	r1, [r1, #0]
    5ee4:	18a2      	adds	r2, r4, r2
    5ee6:	3240      	adds	r2, #64	; 0x40
    5ee8:	3302      	adds	r3, #2
    5eea:	70d1      	strb	r1, [r2, #3]
    5eec:	e00f      	b.n	5f0e <_printf_common+0x82>
    5eee:	1c22      	adds	r2, r4, #0
    5ef0:	2301      	movs	r3, #1
    5ef2:	9800      	ldr	r0, [sp, #0]
    5ef4:	9901      	ldr	r1, [sp, #4]
    5ef6:	3219      	adds	r2, #25
    5ef8:	9e08      	ldr	r6, [sp, #32]
    5efa:	47b0      	blx	r6
    5efc:	1c43      	adds	r3, r0, #1
    5efe:	d00e      	beq.n	5f1e <_printf_common+0x92>
    5f00:	3501      	adds	r5, #1
    5f02:	68e3      	ldr	r3, [r4, #12]
    5f04:	683a      	ldr	r2, [r7, #0]
    5f06:	1a9b      	subs	r3, r3, r2
    5f08:	429d      	cmp	r5, r3
    5f0a:	dbf0      	blt.n	5eee <_printf_common+0x62>
    5f0c:	e7da      	b.n	5ec4 <_printf_common+0x38>
    5f0e:	1c22      	adds	r2, r4, #0
    5f10:	9800      	ldr	r0, [sp, #0]
    5f12:	9901      	ldr	r1, [sp, #4]
    5f14:	3243      	adds	r2, #67	; 0x43
    5f16:	9d08      	ldr	r5, [sp, #32]
    5f18:	47a8      	blx	r5
    5f1a:	1c43      	adds	r3, r0, #1
    5f1c:	d102      	bne.n	5f24 <_printf_common+0x98>
    5f1e:	2001      	movs	r0, #1
    5f20:	4240      	negs	r0, r0
    5f22:	e020      	b.n	5f66 <_printf_common+0xda>
    5f24:	2306      	movs	r3, #6
    5f26:	6820      	ldr	r0, [r4, #0]
    5f28:	68e1      	ldr	r1, [r4, #12]
    5f2a:	683a      	ldr	r2, [r7, #0]
    5f2c:	4003      	ands	r3, r0
    5f2e:	2500      	movs	r5, #0
    5f30:	2b04      	cmp	r3, #4
    5f32:	d103      	bne.n	5f3c <_printf_common+0xb0>
    5f34:	1a8d      	subs	r5, r1, r2
    5f36:	43eb      	mvns	r3, r5
    5f38:	17db      	asrs	r3, r3, #31
    5f3a:	401d      	ands	r5, r3
    5f3c:	68a3      	ldr	r3, [r4, #8]
    5f3e:	6922      	ldr	r2, [r4, #16]
    5f40:	4293      	cmp	r3, r2
    5f42:	dd01      	ble.n	5f48 <_printf_common+0xbc>
    5f44:	1a9b      	subs	r3, r3, r2
    5f46:	18ed      	adds	r5, r5, r3
    5f48:	2700      	movs	r7, #0
    5f4a:	42af      	cmp	r7, r5
    5f4c:	da0a      	bge.n	5f64 <_printf_common+0xd8>
    5f4e:	1c22      	adds	r2, r4, #0
    5f50:	2301      	movs	r3, #1
    5f52:	9800      	ldr	r0, [sp, #0]
    5f54:	9901      	ldr	r1, [sp, #4]
    5f56:	321a      	adds	r2, #26
    5f58:	9e08      	ldr	r6, [sp, #32]
    5f5a:	47b0      	blx	r6
    5f5c:	1c43      	adds	r3, r0, #1
    5f5e:	d0de      	beq.n	5f1e <_printf_common+0x92>
    5f60:	3701      	adds	r7, #1
    5f62:	e7f2      	b.n	5f4a <_printf_common+0xbe>
    5f64:	2000      	movs	r0, #0
    5f66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005f68 <_printf_i>:
    5f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f6a:	b08b      	sub	sp, #44	; 0x2c
    5f6c:	9206      	str	r2, [sp, #24]
    5f6e:	1c0a      	adds	r2, r1, #0
    5f70:	3243      	adds	r2, #67	; 0x43
    5f72:	9307      	str	r3, [sp, #28]
    5f74:	9005      	str	r0, [sp, #20]
    5f76:	9204      	str	r2, [sp, #16]
    5f78:	7e0a      	ldrb	r2, [r1, #24]
    5f7a:	1c0c      	adds	r4, r1, #0
    5f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5f7e:	2a6e      	cmp	r2, #110	; 0x6e
    5f80:	d100      	bne.n	5f84 <_printf_i+0x1c>
    5f82:	e0a8      	b.n	60d6 <_printf_i+0x16e>
    5f84:	d811      	bhi.n	5faa <_printf_i+0x42>
    5f86:	2a63      	cmp	r2, #99	; 0x63
    5f88:	d022      	beq.n	5fd0 <_printf_i+0x68>
    5f8a:	d809      	bhi.n	5fa0 <_printf_i+0x38>
    5f8c:	2a00      	cmp	r2, #0
    5f8e:	d100      	bne.n	5f92 <_printf_i+0x2a>
    5f90:	e0b2      	b.n	60f8 <_printf_i+0x190>
    5f92:	2a58      	cmp	r2, #88	; 0x58
    5f94:	d000      	beq.n	5f98 <_printf_i+0x30>
    5f96:	e0c2      	b.n	611e <_printf_i+0x1b6>
    5f98:	3145      	adds	r1, #69	; 0x45
    5f9a:	700a      	strb	r2, [r1, #0]
    5f9c:	4a7c      	ldr	r2, [pc, #496]	; (6190 <_printf_i+0x228>)
    5f9e:	e04f      	b.n	6040 <_printf_i+0xd8>
    5fa0:	2a64      	cmp	r2, #100	; 0x64
    5fa2:	d01d      	beq.n	5fe0 <_printf_i+0x78>
    5fa4:	2a69      	cmp	r2, #105	; 0x69
    5fa6:	d01b      	beq.n	5fe0 <_printf_i+0x78>
    5fa8:	e0b9      	b.n	611e <_printf_i+0x1b6>
    5faa:	2a73      	cmp	r2, #115	; 0x73
    5fac:	d100      	bne.n	5fb0 <_printf_i+0x48>
    5fae:	e0a7      	b.n	6100 <_printf_i+0x198>
    5fb0:	d809      	bhi.n	5fc6 <_printf_i+0x5e>
    5fb2:	2a6f      	cmp	r2, #111	; 0x6f
    5fb4:	d029      	beq.n	600a <_printf_i+0xa2>
    5fb6:	2a70      	cmp	r2, #112	; 0x70
    5fb8:	d000      	beq.n	5fbc <_printf_i+0x54>
    5fba:	e0b0      	b.n	611e <_printf_i+0x1b6>
    5fbc:	2220      	movs	r2, #32
    5fbe:	6809      	ldr	r1, [r1, #0]
    5fc0:	430a      	orrs	r2, r1
    5fc2:	6022      	str	r2, [r4, #0]
    5fc4:	e037      	b.n	6036 <_printf_i+0xce>
    5fc6:	2a75      	cmp	r2, #117	; 0x75
    5fc8:	d01f      	beq.n	600a <_printf_i+0xa2>
    5fca:	2a78      	cmp	r2, #120	; 0x78
    5fcc:	d033      	beq.n	6036 <_printf_i+0xce>
    5fce:	e0a6      	b.n	611e <_printf_i+0x1b6>
    5fd0:	1c0e      	adds	r6, r1, #0
    5fd2:	681a      	ldr	r2, [r3, #0]
    5fd4:	3642      	adds	r6, #66	; 0x42
    5fd6:	1d11      	adds	r1, r2, #4
    5fd8:	6019      	str	r1, [r3, #0]
    5fda:	6813      	ldr	r3, [r2, #0]
    5fdc:	7033      	strb	r3, [r6, #0]
    5fde:	e0a1      	b.n	6124 <_printf_i+0x1bc>
    5fe0:	6821      	ldr	r1, [r4, #0]
    5fe2:	681a      	ldr	r2, [r3, #0]
    5fe4:	0608      	lsls	r0, r1, #24
    5fe6:	d406      	bmi.n	5ff6 <_printf_i+0x8e>
    5fe8:	0649      	lsls	r1, r1, #25
    5fea:	d504      	bpl.n	5ff6 <_printf_i+0x8e>
    5fec:	1d11      	adds	r1, r2, #4
    5fee:	6019      	str	r1, [r3, #0]
    5ff0:	2300      	movs	r3, #0
    5ff2:	5ed5      	ldrsh	r5, [r2, r3]
    5ff4:	e002      	b.n	5ffc <_printf_i+0x94>
    5ff6:	1d11      	adds	r1, r2, #4
    5ff8:	6019      	str	r1, [r3, #0]
    5ffa:	6815      	ldr	r5, [r2, #0]
    5ffc:	2d00      	cmp	r5, #0
    5ffe:	da3b      	bge.n	6078 <_printf_i+0x110>
    6000:	232d      	movs	r3, #45	; 0x2d
    6002:	9a04      	ldr	r2, [sp, #16]
    6004:	426d      	negs	r5, r5
    6006:	7013      	strb	r3, [r2, #0]
    6008:	e036      	b.n	6078 <_printf_i+0x110>
    600a:	6821      	ldr	r1, [r4, #0]
    600c:	681a      	ldr	r2, [r3, #0]
    600e:	0608      	lsls	r0, r1, #24
    6010:	d406      	bmi.n	6020 <_printf_i+0xb8>
    6012:	0649      	lsls	r1, r1, #25
    6014:	d504      	bpl.n	6020 <_printf_i+0xb8>
    6016:	6815      	ldr	r5, [r2, #0]
    6018:	1d11      	adds	r1, r2, #4
    601a:	6019      	str	r1, [r3, #0]
    601c:	b2ad      	uxth	r5, r5
    601e:	e002      	b.n	6026 <_printf_i+0xbe>
    6020:	1d11      	adds	r1, r2, #4
    6022:	6019      	str	r1, [r3, #0]
    6024:	6815      	ldr	r5, [r2, #0]
    6026:	4b5a      	ldr	r3, [pc, #360]	; (6190 <_printf_i+0x228>)
    6028:	7e22      	ldrb	r2, [r4, #24]
    602a:	9303      	str	r3, [sp, #12]
    602c:	270a      	movs	r7, #10
    602e:	2a6f      	cmp	r2, #111	; 0x6f
    6030:	d11d      	bne.n	606e <_printf_i+0x106>
    6032:	2708      	movs	r7, #8
    6034:	e01b      	b.n	606e <_printf_i+0x106>
    6036:	1c22      	adds	r2, r4, #0
    6038:	2178      	movs	r1, #120	; 0x78
    603a:	3245      	adds	r2, #69	; 0x45
    603c:	7011      	strb	r1, [r2, #0]
    603e:	4a55      	ldr	r2, [pc, #340]	; (6194 <_printf_i+0x22c>)
    6040:	6819      	ldr	r1, [r3, #0]
    6042:	9203      	str	r2, [sp, #12]
    6044:	1d08      	adds	r0, r1, #4
    6046:	6822      	ldr	r2, [r4, #0]
    6048:	6018      	str	r0, [r3, #0]
    604a:	680d      	ldr	r5, [r1, #0]
    604c:	0610      	lsls	r0, r2, #24
    604e:	d402      	bmi.n	6056 <_printf_i+0xee>
    6050:	0650      	lsls	r0, r2, #25
    6052:	d500      	bpl.n	6056 <_printf_i+0xee>
    6054:	b2ad      	uxth	r5, r5
    6056:	07d3      	lsls	r3, r2, #31
    6058:	d502      	bpl.n	6060 <_printf_i+0xf8>
    605a:	2320      	movs	r3, #32
    605c:	431a      	orrs	r2, r3
    605e:	6022      	str	r2, [r4, #0]
    6060:	2710      	movs	r7, #16
    6062:	2d00      	cmp	r5, #0
    6064:	d103      	bne.n	606e <_printf_i+0x106>
    6066:	2320      	movs	r3, #32
    6068:	6822      	ldr	r2, [r4, #0]
    606a:	439a      	bics	r2, r3
    606c:	6022      	str	r2, [r4, #0]
    606e:	1c23      	adds	r3, r4, #0
    6070:	2200      	movs	r2, #0
    6072:	3343      	adds	r3, #67	; 0x43
    6074:	701a      	strb	r2, [r3, #0]
    6076:	e002      	b.n	607e <_printf_i+0x116>
    6078:	270a      	movs	r7, #10
    607a:	4b45      	ldr	r3, [pc, #276]	; (6190 <_printf_i+0x228>)
    607c:	9303      	str	r3, [sp, #12]
    607e:	6863      	ldr	r3, [r4, #4]
    6080:	60a3      	str	r3, [r4, #8]
    6082:	2b00      	cmp	r3, #0
    6084:	db03      	blt.n	608e <_printf_i+0x126>
    6086:	2204      	movs	r2, #4
    6088:	6821      	ldr	r1, [r4, #0]
    608a:	4391      	bics	r1, r2
    608c:	6021      	str	r1, [r4, #0]
    608e:	2d00      	cmp	r5, #0
    6090:	d102      	bne.n	6098 <_printf_i+0x130>
    6092:	9e04      	ldr	r6, [sp, #16]
    6094:	2b00      	cmp	r3, #0
    6096:	d00e      	beq.n	60b6 <_printf_i+0x14e>
    6098:	9e04      	ldr	r6, [sp, #16]
    609a:	1c28      	adds	r0, r5, #0
    609c:	1c39      	adds	r1, r7, #0
    609e:	f7ff f8e3 	bl	5268 <__aeabi_uidivmod>
    60a2:	9b03      	ldr	r3, [sp, #12]
    60a4:	3e01      	subs	r6, #1
    60a6:	5c5b      	ldrb	r3, [r3, r1]
    60a8:	1c28      	adds	r0, r5, #0
    60aa:	7033      	strb	r3, [r6, #0]
    60ac:	1c39      	adds	r1, r7, #0
    60ae:	f7ff f855 	bl	515c <__aeabi_uidiv>
    60b2:	1e05      	subs	r5, r0, #0
    60b4:	d1f1      	bne.n	609a <_printf_i+0x132>
    60b6:	2f08      	cmp	r7, #8
    60b8:	d109      	bne.n	60ce <_printf_i+0x166>
    60ba:	6823      	ldr	r3, [r4, #0]
    60bc:	07db      	lsls	r3, r3, #31
    60be:	d506      	bpl.n	60ce <_printf_i+0x166>
    60c0:	6863      	ldr	r3, [r4, #4]
    60c2:	6922      	ldr	r2, [r4, #16]
    60c4:	4293      	cmp	r3, r2
    60c6:	dc02      	bgt.n	60ce <_printf_i+0x166>
    60c8:	2330      	movs	r3, #48	; 0x30
    60ca:	3e01      	subs	r6, #1
    60cc:	7033      	strb	r3, [r6, #0]
    60ce:	9b04      	ldr	r3, [sp, #16]
    60d0:	1b9b      	subs	r3, r3, r6
    60d2:	6123      	str	r3, [r4, #16]
    60d4:	e02b      	b.n	612e <_printf_i+0x1c6>
    60d6:	6809      	ldr	r1, [r1, #0]
    60d8:	681a      	ldr	r2, [r3, #0]
    60da:	0608      	lsls	r0, r1, #24
    60dc:	d407      	bmi.n	60ee <_printf_i+0x186>
    60de:	0649      	lsls	r1, r1, #25
    60e0:	d505      	bpl.n	60ee <_printf_i+0x186>
    60e2:	1d11      	adds	r1, r2, #4
    60e4:	6019      	str	r1, [r3, #0]
    60e6:	6813      	ldr	r3, [r2, #0]
    60e8:	8aa2      	ldrh	r2, [r4, #20]
    60ea:	801a      	strh	r2, [r3, #0]
    60ec:	e004      	b.n	60f8 <_printf_i+0x190>
    60ee:	1d11      	adds	r1, r2, #4
    60f0:	6019      	str	r1, [r3, #0]
    60f2:	6813      	ldr	r3, [r2, #0]
    60f4:	6962      	ldr	r2, [r4, #20]
    60f6:	601a      	str	r2, [r3, #0]
    60f8:	2300      	movs	r3, #0
    60fa:	9e04      	ldr	r6, [sp, #16]
    60fc:	6123      	str	r3, [r4, #16]
    60fe:	e016      	b.n	612e <_printf_i+0x1c6>
    6100:	681a      	ldr	r2, [r3, #0]
    6102:	1d11      	adds	r1, r2, #4
    6104:	6019      	str	r1, [r3, #0]
    6106:	6816      	ldr	r6, [r2, #0]
    6108:	2100      	movs	r1, #0
    610a:	1c30      	adds	r0, r6, #0
    610c:	6862      	ldr	r2, [r4, #4]
    610e:	f000 f8ff 	bl	6310 <memchr>
    6112:	2800      	cmp	r0, #0
    6114:	d001      	beq.n	611a <_printf_i+0x1b2>
    6116:	1b80      	subs	r0, r0, r6
    6118:	6060      	str	r0, [r4, #4]
    611a:	6863      	ldr	r3, [r4, #4]
    611c:	e003      	b.n	6126 <_printf_i+0x1be>
    611e:	1c26      	adds	r6, r4, #0
    6120:	3642      	adds	r6, #66	; 0x42
    6122:	7032      	strb	r2, [r6, #0]
    6124:	2301      	movs	r3, #1
    6126:	6123      	str	r3, [r4, #16]
    6128:	2300      	movs	r3, #0
    612a:	9a04      	ldr	r2, [sp, #16]
    612c:	7013      	strb	r3, [r2, #0]
    612e:	9b07      	ldr	r3, [sp, #28]
    6130:	9805      	ldr	r0, [sp, #20]
    6132:	9300      	str	r3, [sp, #0]
    6134:	1c21      	adds	r1, r4, #0
    6136:	9b06      	ldr	r3, [sp, #24]
    6138:	aa09      	add	r2, sp, #36	; 0x24
    613a:	f7ff fea7 	bl	5e8c <_printf_common>
    613e:	1c43      	adds	r3, r0, #1
    6140:	d102      	bne.n	6148 <_printf_i+0x1e0>
    6142:	2001      	movs	r0, #1
    6144:	4240      	negs	r0, r0
    6146:	e021      	b.n	618c <_printf_i+0x224>
    6148:	6923      	ldr	r3, [r4, #16]
    614a:	9805      	ldr	r0, [sp, #20]
    614c:	9906      	ldr	r1, [sp, #24]
    614e:	1c32      	adds	r2, r6, #0
    6150:	9d07      	ldr	r5, [sp, #28]
    6152:	47a8      	blx	r5
    6154:	1c43      	adds	r3, r0, #1
    6156:	d0f4      	beq.n	6142 <_printf_i+0x1da>
    6158:	6823      	ldr	r3, [r4, #0]
    615a:	079b      	lsls	r3, r3, #30
    615c:	d405      	bmi.n	616a <_printf_i+0x202>
    615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6160:	68e0      	ldr	r0, [r4, #12]
    6162:	4298      	cmp	r0, r3
    6164:	da12      	bge.n	618c <_printf_i+0x224>
    6166:	1c18      	adds	r0, r3, #0
    6168:	e010      	b.n	618c <_printf_i+0x224>
    616a:	2500      	movs	r5, #0
    616c:	68e3      	ldr	r3, [r4, #12]
    616e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6170:	1a9b      	subs	r3, r3, r2
    6172:	429d      	cmp	r5, r3
    6174:	daf3      	bge.n	615e <_printf_i+0x1f6>
    6176:	1c22      	adds	r2, r4, #0
    6178:	2301      	movs	r3, #1
    617a:	9805      	ldr	r0, [sp, #20]
    617c:	9906      	ldr	r1, [sp, #24]
    617e:	3219      	adds	r2, #25
    6180:	9e07      	ldr	r6, [sp, #28]
    6182:	47b0      	blx	r6
    6184:	1c43      	adds	r3, r0, #1
    6186:	d0dc      	beq.n	6142 <_printf_i+0x1da>
    6188:	3501      	adds	r5, #1
    618a:	e7ef      	b.n	616c <_printf_i+0x204>
    618c:	b00b      	add	sp, #44	; 0x2c
    618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6190:	0000656d 	.word	0x0000656d
    6194:	0000657e 	.word	0x0000657e

00006198 <_sbrk_r>:
    6198:	b538      	push	{r3, r4, r5, lr}
    619a:	2300      	movs	r3, #0
    619c:	4c06      	ldr	r4, [pc, #24]	; (61b8 <_sbrk_r+0x20>)
    619e:	1c05      	adds	r5, r0, #0
    61a0:	1c08      	adds	r0, r1, #0
    61a2:	6023      	str	r3, [r4, #0]
    61a4:	f7fe fbbc 	bl	4920 <_sbrk>
    61a8:	1c43      	adds	r3, r0, #1
    61aa:	d103      	bne.n	61b4 <_sbrk_r+0x1c>
    61ac:	6823      	ldr	r3, [r4, #0]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d000      	beq.n	61b4 <_sbrk_r+0x1c>
    61b2:	602b      	str	r3, [r5, #0]
    61b4:	bd38      	pop	{r3, r4, r5, pc}
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	20003d3c 	.word	0x20003d3c

000061bc <__sread>:
    61bc:	b538      	push	{r3, r4, r5, lr}
    61be:	1c0c      	adds	r4, r1, #0
    61c0:	250e      	movs	r5, #14
    61c2:	5f49      	ldrsh	r1, [r1, r5]
    61c4:	f000 f8b0 	bl	6328 <_read_r>
    61c8:	2800      	cmp	r0, #0
    61ca:	db03      	blt.n	61d4 <__sread+0x18>
    61cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    61ce:	181b      	adds	r3, r3, r0
    61d0:	6563      	str	r3, [r4, #84]	; 0x54
    61d2:	e003      	b.n	61dc <__sread+0x20>
    61d4:	89a2      	ldrh	r2, [r4, #12]
    61d6:	4b02      	ldr	r3, [pc, #8]	; (61e0 <__sread+0x24>)
    61d8:	4013      	ands	r3, r2
    61da:	81a3      	strh	r3, [r4, #12]
    61dc:	bd38      	pop	{r3, r4, r5, pc}
    61de:	46c0      	nop			; (mov r8, r8)
    61e0:	ffffefff 	.word	0xffffefff

000061e4 <__swrite>:
    61e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61e6:	1c1e      	adds	r6, r3, #0
    61e8:	898b      	ldrh	r3, [r1, #12]
    61ea:	1c05      	adds	r5, r0, #0
    61ec:	1c0c      	adds	r4, r1, #0
    61ee:	1c17      	adds	r7, r2, #0
    61f0:	05db      	lsls	r3, r3, #23
    61f2:	d505      	bpl.n	6200 <__swrite+0x1c>
    61f4:	230e      	movs	r3, #14
    61f6:	5ec9      	ldrsh	r1, [r1, r3]
    61f8:	2200      	movs	r2, #0
    61fa:	2302      	movs	r3, #2
    61fc:	f000 f874 	bl	62e8 <_lseek_r>
    6200:	89a2      	ldrh	r2, [r4, #12]
    6202:	4b05      	ldr	r3, [pc, #20]	; (6218 <__swrite+0x34>)
    6204:	1c28      	adds	r0, r5, #0
    6206:	4013      	ands	r3, r2
    6208:	81a3      	strh	r3, [r4, #12]
    620a:	1c3a      	adds	r2, r7, #0
    620c:	230e      	movs	r3, #14
    620e:	5ee1      	ldrsh	r1, [r4, r3]
    6210:	1c33      	adds	r3, r6, #0
    6212:	f000 f81f 	bl	6254 <_write_r>
    6216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6218:	ffffefff 	.word	0xffffefff

0000621c <__sseek>:
    621c:	b538      	push	{r3, r4, r5, lr}
    621e:	1c0c      	adds	r4, r1, #0
    6220:	250e      	movs	r5, #14
    6222:	5f49      	ldrsh	r1, [r1, r5]
    6224:	f000 f860 	bl	62e8 <_lseek_r>
    6228:	89a3      	ldrh	r3, [r4, #12]
    622a:	1c42      	adds	r2, r0, #1
    622c:	d103      	bne.n	6236 <__sseek+0x1a>
    622e:	4a05      	ldr	r2, [pc, #20]	; (6244 <__sseek+0x28>)
    6230:	4013      	ands	r3, r2
    6232:	81a3      	strh	r3, [r4, #12]
    6234:	e004      	b.n	6240 <__sseek+0x24>
    6236:	2280      	movs	r2, #128	; 0x80
    6238:	0152      	lsls	r2, r2, #5
    623a:	4313      	orrs	r3, r2
    623c:	81a3      	strh	r3, [r4, #12]
    623e:	6560      	str	r0, [r4, #84]	; 0x54
    6240:	bd38      	pop	{r3, r4, r5, pc}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	ffffefff 	.word	0xffffefff

00006248 <__sclose>:
    6248:	b508      	push	{r3, lr}
    624a:	230e      	movs	r3, #14
    624c:	5ec9      	ldrsh	r1, [r1, r3]
    624e:	f000 f815 	bl	627c <_close_r>
    6252:	bd08      	pop	{r3, pc}

00006254 <_write_r>:
    6254:	b538      	push	{r3, r4, r5, lr}
    6256:	1c05      	adds	r5, r0, #0
    6258:	2000      	movs	r0, #0
    625a:	4c07      	ldr	r4, [pc, #28]	; (6278 <_write_r+0x24>)
    625c:	6020      	str	r0, [r4, #0]
    625e:	1c08      	adds	r0, r1, #0
    6260:	1c11      	adds	r1, r2, #0
    6262:	1c1a      	adds	r2, r3, #0
    6264:	f7fb fc88 	bl	1b78 <_write>
    6268:	1c43      	adds	r3, r0, #1
    626a:	d103      	bne.n	6274 <_write_r+0x20>
    626c:	6823      	ldr	r3, [r4, #0]
    626e:	2b00      	cmp	r3, #0
    6270:	d000      	beq.n	6274 <_write_r+0x20>
    6272:	602b      	str	r3, [r5, #0]
    6274:	bd38      	pop	{r3, r4, r5, pc}
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	20003d3c 	.word	0x20003d3c

0000627c <_close_r>:
    627c:	b538      	push	{r3, r4, r5, lr}
    627e:	2300      	movs	r3, #0
    6280:	4c06      	ldr	r4, [pc, #24]	; (629c <_close_r+0x20>)
    6282:	1c05      	adds	r5, r0, #0
    6284:	1c08      	adds	r0, r1, #0
    6286:	6023      	str	r3, [r4, #0]
    6288:	f7fe fb68 	bl	495c <_close>
    628c:	1c43      	adds	r3, r0, #1
    628e:	d103      	bne.n	6298 <_close_r+0x1c>
    6290:	6823      	ldr	r3, [r4, #0]
    6292:	2b00      	cmp	r3, #0
    6294:	d000      	beq.n	6298 <_close_r+0x1c>
    6296:	602b      	str	r3, [r5, #0]
    6298:	bd38      	pop	{r3, r4, r5, pc}
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	20003d3c 	.word	0x20003d3c

000062a0 <_fstat_r>:
    62a0:	b538      	push	{r3, r4, r5, lr}
    62a2:	2300      	movs	r3, #0
    62a4:	4c06      	ldr	r4, [pc, #24]	; (62c0 <_fstat_r+0x20>)
    62a6:	1c05      	adds	r5, r0, #0
    62a8:	1c08      	adds	r0, r1, #0
    62aa:	1c11      	adds	r1, r2, #0
    62ac:	6023      	str	r3, [r4, #0]
    62ae:	f7fe fb5f 	bl	4970 <_fstat>
    62b2:	1c43      	adds	r3, r0, #1
    62b4:	d103      	bne.n	62be <_fstat_r+0x1e>
    62b6:	6823      	ldr	r3, [r4, #0]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d000      	beq.n	62be <_fstat_r+0x1e>
    62bc:	602b      	str	r3, [r5, #0]
    62be:	bd38      	pop	{r3, r4, r5, pc}
    62c0:	20003d3c 	.word	0x20003d3c

000062c4 <_isatty_r>:
    62c4:	b538      	push	{r3, r4, r5, lr}
    62c6:	2300      	movs	r3, #0
    62c8:	4c06      	ldr	r4, [pc, #24]	; (62e4 <_isatty_r+0x20>)
    62ca:	1c05      	adds	r5, r0, #0
    62cc:	1c08      	adds	r0, r1, #0
    62ce:	6023      	str	r3, [r4, #0]
    62d0:	f7fe fb5c 	bl	498c <_isatty>
    62d4:	1c43      	adds	r3, r0, #1
    62d6:	d103      	bne.n	62e0 <_isatty_r+0x1c>
    62d8:	6823      	ldr	r3, [r4, #0]
    62da:	2b00      	cmp	r3, #0
    62dc:	d000      	beq.n	62e0 <_isatty_r+0x1c>
    62de:	602b      	str	r3, [r5, #0]
    62e0:	bd38      	pop	{r3, r4, r5, pc}
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	20003d3c 	.word	0x20003d3c

000062e8 <_lseek_r>:
    62e8:	b538      	push	{r3, r4, r5, lr}
    62ea:	1c05      	adds	r5, r0, #0
    62ec:	2000      	movs	r0, #0
    62ee:	4c07      	ldr	r4, [pc, #28]	; (630c <_lseek_r+0x24>)
    62f0:	6020      	str	r0, [r4, #0]
    62f2:	1c08      	adds	r0, r1, #0
    62f4:	1c11      	adds	r1, r2, #0
    62f6:	1c1a      	adds	r2, r3, #0
    62f8:	f7fe fb52 	bl	49a0 <_lseek>
    62fc:	1c43      	adds	r3, r0, #1
    62fe:	d103      	bne.n	6308 <_lseek_r+0x20>
    6300:	6823      	ldr	r3, [r4, #0]
    6302:	2b00      	cmp	r3, #0
    6304:	d000      	beq.n	6308 <_lseek_r+0x20>
    6306:	602b      	str	r3, [r5, #0]
    6308:	bd38      	pop	{r3, r4, r5, pc}
    630a:	46c0      	nop			; (mov r8, r8)
    630c:	20003d3c 	.word	0x20003d3c

00006310 <memchr>:
    6310:	b2c9      	uxtb	r1, r1
    6312:	1882      	adds	r2, r0, r2
    6314:	4290      	cmp	r0, r2
    6316:	d004      	beq.n	6322 <memchr+0x12>
    6318:	7803      	ldrb	r3, [r0, #0]
    631a:	428b      	cmp	r3, r1
    631c:	d002      	beq.n	6324 <memchr+0x14>
    631e:	3001      	adds	r0, #1
    6320:	e7f8      	b.n	6314 <memchr+0x4>
    6322:	2000      	movs	r0, #0
    6324:	4770      	bx	lr
	...

00006328 <_read_r>:
    6328:	b538      	push	{r3, r4, r5, lr}
    632a:	1c05      	adds	r5, r0, #0
    632c:	2000      	movs	r0, #0
    632e:	4c07      	ldr	r4, [pc, #28]	; (634c <_read_r+0x24>)
    6330:	6020      	str	r0, [r4, #0]
    6332:	1c08      	adds	r0, r1, #0
    6334:	1c11      	adds	r1, r2, #0
    6336:	1c1a      	adds	r2, r3, #0
    6338:	f7fb fbf2 	bl	1b20 <_read>
    633c:	1c43      	adds	r3, r0, #1
    633e:	d103      	bne.n	6348 <_read_r+0x20>
    6340:	6823      	ldr	r3, [r4, #0]
    6342:	2b00      	cmp	r3, #0
    6344:	d000      	beq.n	6348 <_read_r+0x20>
    6346:	602b      	str	r3, [r5, #0]
    6348:	bd38      	pop	{r3, r4, r5, pc}
    634a:	46c0      	nop			; (mov r8, r8)
    634c:	20003d3c 	.word	0x20003d3c
    6350:	42000800 	.word	0x42000800
    6354:	42000c00 	.word	0x42000c00
    6358:	42001000 	.word	0x42001000
    635c:	42001400 	.word	0x42001400
    6360:	42001800 	.word	0x42001800
    6364:	42001c00 	.word	0x42001c00
    6368:	0c0b0a09 	.word	0x0c0b0a09
    636c:	00000e0d 	.word	0x00000e0d
    6370:	454c4449 	.word	0x454c4449
    6374:	00000000 	.word	0x00000000
    6378:	20726d54 	.word	0x20726d54
    637c:	00637653 	.word	0x00637653
    6380:	00003a30 	.word	0x00003a30
    6384:	00003a30 	.word	0x00003a30
    6388:	00003a30 	.word	0x00003a30
    638c:	00003ac4 	.word	0x00003ac4
    6390:	00003a8e 	.word	0x00003a8e
    6394:	00003ab8 	.word	0x00003ab8
    6398:	00003a30 	.word	0x00003a30
    639c:	00003a30 	.word	0x00003a30
    63a0:	00003ac4 	.word	0x00003ac4
    63a4:	00003a8e 	.word	0x00003a8e
    63a8:	00003f6e 	.word	0x00003f6e
    63ac:	00003fea 	.word	0x00003fea
    63b0:	00003fea 	.word	0x00003fea
    63b4:	00003f90 	.word	0x00003f90
    63b8:	00003f8a 	.word	0x00003f8a
    63bc:	00003f96 	.word	0x00003f96
    63c0:	00003f74 	.word	0x00003f74
    63c4:	00003f9c 	.word	0x00003f9c
    63c8:	00003fd0 	.word	0x00003fd0
    63cc:	000040c4 	.word	0x000040c4
    63d0:	00004114 	.word	0x00004114
    63d4:	00004114 	.word	0x00004114
    63d8:	00004110 	.word	0x00004110
    63dc:	000040b6 	.word	0x000040b6
    63e0:	000040d6 	.word	0x000040d6
    63e4:	000040a6 	.word	0x000040a6
    63e8:	000040e8 	.word	0x000040e8
    63ec:	000040fa 	.word	0x000040fa
    63f0:	20433249 	.word	0x20433249
    63f4:	7473616d 	.word	0x7473616d
    63f8:	69207265 	.word	0x69207265
    63fc:	2074696e 	.word	0x2074696e
    6400:	74617473 	.word	0x74617473
    6404:	203a7375 	.word	0x203a7375
    6408:	0a0d6425 	.word	0x0a0d6425
    640c:	00000000 	.word	0x00000000
    6410:	20433249 	.word	0x20433249
    6414:	7473616d 	.word	0x7473616d
    6418:	69207265 	.word	0x69207265
    641c:	2074696e 	.word	0x2074696e
    6420:	6f727265 	.word	0x6f727265
    6424:	74732072 	.word	0x74732072
    6428:	73757461 	.word	0x73757461
    642c:	6425203a 	.word	0x6425203a
    6430:	00000a0d 	.word	0x00000a0d
    6434:	5f633269 	.word	0x5f633269
    6438:	7473616d 	.word	0x7473616d
    643c:	775f7265 	.word	0x775f7265
    6440:	65746972 	.word	0x65746972
    6444:	6361705f 	.word	0x6361705f
    6448:	5f74656b 	.word	0x5f74656b
    644c:	74696177 	.word	0x74696177
    6450:	61747320 	.word	0x61747320
    6454:	3a737574 	.word	0x3a737574
    6458:	0d642520 	.word	0x0d642520
    645c:	0000000a 	.word	0x0000000a
    6460:	20433249 	.word	0x20433249
    6464:	74697277 	.word	0x74697277
    6468:	69742065 	.word	0x69742065
    646c:	2064656d 	.word	0x2064656d
    6470:	2e74756f 	.word	0x2e74756f
    6474:	0000000d 	.word	0x0000000d
    6478:	46202d2d 	.word	0x46202d2d
    647c:	72656572 	.word	0x72656572
    6480:	20736f74 	.word	0x20736f74
    6484:	6d617845 	.word	0x6d617845
    6488:	20656c70 	.word	0x20656c70
    648c:	0d0a2d2d 	.word	0x0d0a2d2d
    6490:	00000000 	.word	0x00000000
    6494:	25202d2d 	.word	0x25202d2d
    6498:	000d0a73 	.word	0x000d0a73
    649c:	444d4153 	.word	0x444d4153
    64a0:	585f3132 	.word	0x585f3132
    64a4:	49414c50 	.word	0x49414c50
    64a8:	5f44454e 	.word	0x5f44454e
    64ac:	004f5250 	.word	0x004f5250
    64b0:	43202d2d 	.word	0x43202d2d
    64b4:	69706d6f 	.word	0x69706d6f
    64b8:	3a64656c 	.word	0x3a64656c
    64bc:	20732520 	.word	0x20732520
    64c0:	2d207325 	.word	0x2d207325
    64c4:	000d0a2d 	.word	0x000d0a2d
    64c8:	20766f4e 	.word	0x20766f4e
    64cc:	32203232 	.word	0x32203232
    64d0:	00353130 	.word	0x00353130
    64d4:	333a3431 	.word	0x333a3431
    64d8:	32343a35 	.word	0x32343a35
    64dc:	00000000 	.word	0x00000000
    64e0:	696e6f4d 	.word	0x696e6f4d
    64e4:	00726f74 	.word	0x00726f74
    64e8:	0064654c 	.word	0x0064654c
    64ec:	00434441 	.word	0x00434441
    64f0:	0aaa      	.short	0x0aaa
    64f2:	00          	.byte	0x00
    64f3:	43          	.byte	0x43
    64f4:	00000000 	.word	0x00000000

000064f8 <_global_impure_ptr>:
    64f8:	2000000c                                ... 

000064fc <__sf_fake_stdin>:
	...

0000651c <__sf_fake_stdout>:
	...

0000653c <__sf_fake_stderr>:
	...
    655c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    656c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    657c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    658c:	00006665                                ef..

00006590 <_init>:
    6590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6596:	bc08      	pop	{r3}
    6598:	469e      	mov	lr, r3
    659a:	4770      	bx	lr

0000659c <__init_array_start>:
    659c:	000000d9 	.word	0x000000d9

000065a0 <_fini>:
    65a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65a2:	46c0      	nop			; (mov r8, r8)
    65a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65a6:	bc08      	pop	{r3}
    65a8:	469e      	mov	lr, r3
    65aa:	4770      	bx	lr

000065ac <__fini_array_start>:
    65ac:	000000b1 	.word	0x000000b1
