
CubesatFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007514  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00007514  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c98  20000070  00007584  00010070  2**2
                  ALLOC
  3 .stack        00002000  20003d08  0000b21c  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f1b0  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cf7  00000000  00000000  0002f2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000365f  00000000  00000000  00031f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  000355f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e0  00000000  00000000  00036059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006ee5  00000000  00000000  00036939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dcd3  00000000  00000000  0003d81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d02b  00000000  00000000  0004b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000029fc  00000000  00000000  000d851c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005d08 	.word	0x20005d08
       4:	00004ca5 	.word	0x00004ca5
       8:	00004d29 	.word	0x00004d29
       c:	00004d29 	.word	0x00004d29
	...
      2c:	0000203d 	.word	0x0000203d
	...
      38:	00002131 	.word	0x00002131
      3c:	00002175 	.word	0x00002175
      40:	00004d29 	.word	0x00004d29
      44:	00004d29 	.word	0x00004d29
      48:	00004d29 	.word	0x00004d29
      4c:	00004d29 	.word	0x00004d29
      50:	00004d29 	.word	0x00004d29
      54:	00004d29 	.word	0x00004d29
      58:	00004d29 	.word	0x00004d29
      5c:	00004d29 	.word	0x00004d29
      60:	00004d29 	.word	0x00004d29
      64:	00001321 	.word	0x00001321
      68:	00001335 	.word	0x00001335
      6c:	00001349 	.word	0x00001349
      70:	0000135d 	.word	0x0000135d
      74:	00001371 	.word	0x00001371
      78:	00001385 	.word	0x00001385
      7c:	00004d29 	.word	0x00004d29
      80:	00004d29 	.word	0x00004d29
      84:	00004d29 	.word	0x00004d29
      88:	00004d29 	.word	0x00004d29
      8c:	00004d29 	.word	0x00004d29
      90:	00004d29 	.word	0x00004d29
      94:	00004d29 	.word	0x00004d29
      98:	00004d29 	.word	0x00004d29
      9c:	00004d29 	.word	0x00004d29
      a0:	00004d29 	.word	0x00004d29
      a4:	00004d29 	.word	0x00004d29
      a8:	00004d29 	.word	0x00004d29
      ac:	00004d29 	.word	0x00004d29

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000070 	.word	0x20000070
      d0:	00000000 	.word	0x00000000
      d4:	00007514 	.word	0x00007514

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00007514 	.word	0x00007514
     104:	20000074 	.word	0x20000074
     108:	00007514 	.word	0x00007514
     10c:	00000000 	.word	0x00000000

00000110 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
     116:	1c02      	adds	r2, r0, #0
     118:	1dfb      	adds	r3, r7, #7
     11a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     11c:	1dfb      	adds	r3, r7, #7
     11e:	781b      	ldrb	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d002      	beq.n	12a <system_voltage_reference_enable+0x1a>
     124:	2b01      	cmp	r3, #1
     126:	d007      	beq.n	138 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     128:	e00d      	b.n	146 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     12a:	4b08      	ldr	r3, [pc, #32]	; (14c <system_voltage_reference_enable+0x3c>)
     12c:	4a07      	ldr	r2, [pc, #28]	; (14c <system_voltage_reference_enable+0x3c>)
     12e:	6c12      	ldr	r2, [r2, #64]	; 0x40
     130:	2102      	movs	r1, #2
     132:	430a      	orrs	r2, r1
     134:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     136:	e006      	b.n	146 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <system_voltage_reference_enable+0x3c>)
     13a:	4a04      	ldr	r2, [pc, #16]	; (14c <system_voltage_reference_enable+0x3c>)
     13c:	6c12      	ldr	r2, [r2, #64]	; 0x40
     13e:	2104      	movs	r1, #4
     140:	430a      	orrs	r2, r1
     142:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     144:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     146:	46bd      	mov	sp, r7
     148:	b002      	add	sp, #8
     14a:	bd80      	pop	{r7, pc}
     14c:	40000800 	.word	0x40000800

00000150 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void adc_get_config_defaults(struct adc_config *const config)
{
     150:	b580      	push	{r7, lr}
     152:	b082      	sub	sp, #8
     154:	af00      	add	r7, sp, #0
     156:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     15e:	687b      	ldr	r3, [r7, #4]
     160:	2200      	movs	r2, #0
     162:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     164:	687b      	ldr	r3, [r7, #4]
     166:	2200      	movs	r2, #0
     168:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	2200      	movs	r2, #0
     16e:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     170:	687b      	ldr	r3, [r7, #4]
     172:	2200      	movs	r2, #0
     174:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     176:	687b      	ldr	r3, [r7, #4]
     178:	2200      	movs	r2, #0
     17a:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	2200      	movs	r2, #0
     180:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     182:	687b      	ldr	r3, [r7, #4]
     184:	2200      	movs	r2, #0
     186:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	2200      	movs	r2, #0
     18c:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     18e:	687b      	ldr	r3, [r7, #4]
     190:	22c0      	movs	r2, #192	; 0xc0
     192:	0152      	lsls	r2, r2, #5
     194:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2200      	movs	r2, #0
     1a0:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	2200      	movs	r2, #0
     1ac:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	2200      	movs	r2, #0
     1b2:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1b4:	687a      	ldr	r2, [r7, #4]
     1b6:	232a      	movs	r3, #42	; 0x2a
     1b8:	2100      	movs	r1, #0
     1ba:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2200      	movs	r2, #0
     1c0:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     1c8:	687a      	ldr	r2, [r7, #4]
     1ca:	2324      	movs	r3, #36	; 0x24
     1cc:	2100      	movs	r1, #0
     1ce:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1d0:	687b      	ldr	r3, [r7, #4]
     1d2:	2200      	movs	r2, #0
     1d4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	2200      	movs	r2, #0
     1da:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	2200      	movs	r2, #0
     1e0:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     1e2:	687a      	ldr	r2, [r7, #4]
     1e4:	232b      	movs	r3, #43	; 0x2b
     1e6:	2100      	movs	r1, #0
     1e8:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1ea:	687a      	ldr	r2, [r7, #4]
     1ec:	232c      	movs	r3, #44	; 0x2c
     1ee:	2100      	movs	r1, #0
     1f0:	54d1      	strb	r1, [r2, r3]
}
     1f2:	46bd      	mov	sp, r7
     1f4:	b002      	add	sp, #8
     1f6:	bd80      	pop	{r7, pc}

000001f8 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	b086      	sub	sp, #24
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     200:	687b      	ldr	r3, [r7, #4]
     202:	681b      	ldr	r3, [r3, #0]
     204:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
     206:	693b      	ldr	r3, [r7, #16]
     208:	7e1b      	ldrb	r3, [r3, #24]
     20a:	b2db      	uxtb	r3, r3
     20c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
     20e:	2300      	movs	r3, #0
     210:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
     212:	68fa      	ldr	r2, [r7, #12]
     214:	2301      	movs	r3, #1
     216:	4013      	ands	r3, r2
     218:	d003      	beq.n	222 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
     21a:	697b      	ldr	r3, [r7, #20]
     21c:	2201      	movs	r2, #1
     21e:	4313      	orrs	r3, r2
     220:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
     222:	68fa      	ldr	r2, [r7, #12]
     224:	2304      	movs	r3, #4
     226:	4013      	ands	r3, r2
     228:	d003      	beq.n	232 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
     22a:	697b      	ldr	r3, [r7, #20]
     22c:	2202      	movs	r2, #2
     22e:	4313      	orrs	r3, r2
     230:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     232:	68fa      	ldr	r2, [r7, #12]
     234:	2302      	movs	r3, #2
     236:	4013      	ands	r3, r2
     238:	d003      	beq.n	242 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
     23a:	697b      	ldr	r3, [r7, #20]
     23c:	2204      	movs	r2, #4
     23e:	4313      	orrs	r3, r2
     240:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
     242:	697b      	ldr	r3, [r7, #20]
}
     244:	1c18      	adds	r0, r3, #0
     246:	46bd      	mov	sp, r7
     248:	b006      	add	sp, #24
     24a:	bd80      	pop	{r7, pc}

0000024c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
     24c:	b580      	push	{r7, lr}
     24e:	b084      	sub	sp, #16
     250:	af00      	add	r7, sp, #0
     252:	6078      	str	r0, [r7, #4]
     254:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     256:	687b      	ldr	r3, [r7, #4]
     258:	681b      	ldr	r3, [r3, #0]
     25a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
     25c:	2300      	movs	r3, #0
     25e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
     260:	683a      	ldr	r2, [r7, #0]
     262:	2301      	movs	r3, #1
     264:	4013      	ands	r3, r2
     266:	d003      	beq.n	270 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	2201      	movs	r2, #1
     26c:	4313      	orrs	r3, r2
     26e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
     270:	683a      	ldr	r2, [r7, #0]
     272:	2302      	movs	r3, #2
     274:	4013      	ands	r3, r2
     276:	d003      	beq.n	280 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	2204      	movs	r2, #4
     27c:	4313      	orrs	r3, r2
     27e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
     280:	683a      	ldr	r2, [r7, #0]
     282:	2304      	movs	r3, #4
     284:	4013      	ands	r3, r2
     286:	d003      	beq.n	290 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
     288:	68fb      	ldr	r3, [r7, #12]
     28a:	2202      	movs	r2, #2
     28c:	4313      	orrs	r3, r2
     28e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
     290:	68fb      	ldr	r3, [r7, #12]
     292:	b2da      	uxtb	r2, r3
     294:	68bb      	ldr	r3, [r7, #8]
     296:	761a      	strb	r2, [r3, #24]
}
     298:	46bd      	mov	sp, r7
     29a:	b004      	add	sp, #16
     29c:	bd80      	pop	{r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)

000002a0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b084      	sub	sp, #16
     2a4:	af00      	add	r7, sp, #0
     2a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     2ae:	68fb      	ldr	r3, [r7, #12]
     2b0:	7e5b      	ldrb	r3, [r3, #25]
     2b2:	b2db      	uxtb	r3, r3
     2b4:	b2db      	uxtb	r3, r3
     2b6:	b25b      	sxtb	r3, r3
     2b8:	2b00      	cmp	r3, #0
     2ba:	da01      	bge.n	2c0 <adc_is_syncing+0x20>
		return true;
     2bc:	2301      	movs	r3, #1
     2be:	e000      	b.n	2c2 <adc_is_syncing+0x22>
	}

	return false;
     2c0:	2300      	movs	r3, #0
}
     2c2:	1c18      	adds	r0, r3, #0
     2c4:	46bd      	mov	sp, r7
     2c6:	b004      	add	sp, #16
     2c8:	bd80      	pop	{r7, pc}
     2ca:	46c0      	nop			; (mov r8, r8)

000002cc <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	1c18      	adds	r0, r3, #0
     2e0:	4b0c      	ldr	r3, [pc, #48]	; (314 <adc_enable+0x48>)
     2e2:	4798      	blx	r3
     2e4:	1c03      	adds	r3, r0, #0
     2e6:	2b00      	cmp	r3, #0
     2e8:	d1f8      	bne.n	2dc <adc_enable+0x10>
		/* Wait for synchronization */
	}

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ea:	687b      	ldr	r3, [r7, #4]
     2ec:	791b      	ldrb	r3, [r3, #4]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d102      	bne.n	2f8 <adc_enable+0x2c>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     2f2:	2001      	movs	r0, #1
     2f4:	4b08      	ldr	r3, [pc, #32]	; (318 <adc_enable+0x4c>)
     2f6:	4798      	blx	r3

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     2f8:	68fb      	ldr	r3, [r7, #12]
     2fa:	781b      	ldrb	r3, [r3, #0]
     2fc:	b2db      	uxtb	r3, r3
     2fe:	2202      	movs	r2, #2
     300:	4313      	orrs	r3, r2
     302:	b2da      	uxtb	r2, r3
     304:	68fb      	ldr	r3, [r7, #12]
     306:	701a      	strb	r2, [r3, #0]
	return STATUS_OK;
     308:	2300      	movs	r3, #0
}
     30a:	1c18      	adds	r0, r3, #0
     30c:	46bd      	mov	sp, r7
     30e:	b004      	add	sp, #16
     310:	bd80      	pop	{r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	000002a1 	.word	0x000002a1
     318:	00000111 	.word	0x00000111

0000031c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     31c:	b580      	push	{r7, lr}
     31e:	b084      	sub	sp, #16
     320:	af00      	add	r7, sp, #0
     322:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     324:	687b      	ldr	r3, [r7, #4]
     326:	681b      	ldr	r3, [r3, #0]
     328:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	1c18      	adds	r0, r3, #0
     330:	4b07      	ldr	r3, [pc, #28]	; (350 <adc_start_conversion+0x34>)
     332:	4798      	blx	r3
     334:	1c03      	adds	r3, r0, #0
     336:	2b00      	cmp	r3, #0
     338:	d1f8      	bne.n	32c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     33a:	68fb      	ldr	r3, [r7, #12]
     33c:	7b1b      	ldrb	r3, [r3, #12]
     33e:	b2db      	uxtb	r3, r3
     340:	2202      	movs	r2, #2
     342:	4313      	orrs	r3, r2
     344:	b2da      	uxtb	r2, r3
     346:	68fb      	ldr	r3, [r7, #12]
     348:	731a      	strb	r2, [r3, #12]
}
     34a:	46bd      	mov	sp, r7
     34c:	b004      	add	sp, #16
     34e:	bd80      	pop	{r7, pc}
     350:	000002a1 	.word	0x000002a1

00000354 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
     354:	b580      	push	{r7, lr}
     356:	b084      	sub	sp, #16
     358:	af00      	add	r7, sp, #0
     35a:	6078      	str	r0, [r7, #4]
     35c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     35e:	687b      	ldr	r3, [r7, #4]
     360:	1c18      	adds	r0, r3, #0
     362:	4b18      	ldr	r3, [pc, #96]	; (3c4 <adc_read+0x70>)
     364:	4798      	blx	r3
     366:	1c02      	adds	r2, r0, #0
     368:	2301      	movs	r3, #1
     36a:	4013      	ands	r3, r2
     36c:	d101      	bne.n	372 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
     36e:	2305      	movs	r3, #5
     370:	e024      	b.n	3bc <adc_read+0x68>
	}

	Adc *const adc_module = module_inst->hw;
     372:	687b      	ldr	r3, [r7, #4]
     374:	681b      	ldr	r3, [r3, #0]
     376:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     378:	46c0      	nop			; (mov r8, r8)
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	1c18      	adds	r0, r3, #0
     37e:	4b12      	ldr	r3, [pc, #72]	; (3c8 <adc_read+0x74>)
     380:	4798      	blx	r3
     382:	1c03      	adds	r3, r0, #0
     384:	2b00      	cmp	r3, #0
     386:	d1f8      	bne.n	37a <adc_read+0x26>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	8b5b      	ldrh	r3, [r3, #26]
     38c:	b29a      	uxth	r2, r3
     38e:	683b      	ldr	r3, [r7, #0]
     390:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
     392:	687b      	ldr	r3, [r7, #4]
     394:	1c18      	adds	r0, r3, #0
     396:	2101      	movs	r1, #1
     398:	4b0c      	ldr	r3, [pc, #48]	; (3cc <adc_read+0x78>)
     39a:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     39c:	687b      	ldr	r3, [r7, #4]
     39e:	1c18      	adds	r0, r3, #0
     3a0:	4b08      	ldr	r3, [pc, #32]	; (3c4 <adc_read+0x70>)
     3a2:	4798      	blx	r3
     3a4:	1c02      	adds	r2, r0, #0
     3a6:	2304      	movs	r3, #4
     3a8:	4013      	ands	r3, r2
     3aa:	d006      	beq.n	3ba <adc_read+0x66>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	1c18      	adds	r0, r3, #0
     3b0:	2104      	movs	r1, #4
     3b2:	4b06      	ldr	r3, [pc, #24]	; (3cc <adc_read+0x78>)
     3b4:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
     3b6:	231e      	movs	r3, #30
     3b8:	e000      	b.n	3bc <adc_read+0x68>
	}

	return STATUS_OK;
     3ba:	2300      	movs	r3, #0
}
     3bc:	1c18      	adds	r0, r3, #0
     3be:	46bd      	mov	sp, r7
     3c0:	b004      	add	sp, #16
     3c2:	bd80      	pop	{r7, pc}
     3c4:	000001f9 	.word	0x000001f9
     3c8:	000002a1 	.word	0x000002a1
     3cc:	0000024d 	.word	0x0000024d

000003d0 <configure_adc>:
 *  Author: Daniel
 */ 

#include "ADC_Commands.h"

void configure_adc(struct adc_module *adc_instance) {
     3d0:	b580      	push	{r7, lr}
     3d2:	b08e      	sub	sp, #56	; 0x38
     3d4:	af00      	add	r7, sp, #0
     3d6:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;
	// setup_config_defaults
	adc_get_config_defaults(&config_adc);
     3d8:	1c3b      	adds	r3, r7, #0
     3da:	3308      	adds	r3, #8
     3dc:	1c18      	adds	r0, r3, #0
     3de:	4b13      	ldr	r3, [pc, #76]	; (42c <configure_adc+0x5c>)
     3e0:	4798      	blx	r3

	config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
     3e2:	1c3b      	adds	r3, r7, #0
     3e4:	3308      	adds	r3, #8
     3e6:	22f0      	movs	r2, #240	; 0xf0
     3e8:	0512      	lsls	r2, r2, #20
     3ea:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
     3ec:	1c3b      	adds	r3, r7, #0
     3ee:	3308      	adds	r3, #8
     3f0:	2200      	movs	r2, #0
     3f2:	805a      	strh	r2, [r3, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
     3f4:	1c3b      	adds	r3, r7, #0
     3f6:	3308      	adds	r3, #8
     3f8:	2200      	movs	r2, #0
     3fa:	705a      	strb	r2, [r3, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8; //PB00
     3fc:	1c3b      	adds	r3, r7, #0
     3fe:	3308      	adds	r3, #8
     400:	2208      	movs	r2, #8
     402:	731a      	strb	r2, [r3, #12]
	config_adc.resolution = ADC_RESOLUTION_12BIT;
     404:	1c3b      	adds	r3, r7, #0
     406:	3308      	adds	r3, #8
     408:	2200      	movs	r2, #0
     40a:	711a      	strb	r2, [r3, #4]

	//setup_set_config
	adc_init(adc_instance, ADC, &config_adc);
     40c:	6879      	ldr	r1, [r7, #4]
     40e:	4a08      	ldr	r2, [pc, #32]	; (430 <configure_adc+0x60>)
     410:	1c3b      	adds	r3, r7, #0
     412:	3308      	adds	r3, #8
     414:	1c08      	adds	r0, r1, #0
     416:	1c11      	adds	r1, r2, #0
     418:	1c1a      	adds	r2, r3, #0
     41a:	4b06      	ldr	r3, [pc, #24]	; (434 <configure_adc+0x64>)
     41c:	4798      	blx	r3
	adc_enable(adc_instance);
     41e:	687b      	ldr	r3, [r7, #4]
     420:	1c18      	adds	r0, r3, #0
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <configure_adc+0x68>)
     424:	4798      	blx	r3
}
     426:	46bd      	mov	sp, r7
     428:	b00e      	add	sp, #56	; 0x38
     42a:	bd80      	pop	{r7, pc}
     42c:	00000151 	.word	0x00000151
     430:	42004000 	.word	0x42004000
     434:	00000c09 	.word	0x00000c09
     438:	000002cd 	.word	0x000002cd

0000043c <readVoltagemV>:

//reads the current voltage from the ADC connection
float readVoltagemV(struct adc_module adc_instance) {
     43c:	b580      	push	{r7, lr}
     43e:	b084      	sub	sp, #16
     440:	af00      	add	r7, sp, #0
     442:	1c3b      	adds	r3, r7, #0
     444:	6018      	str	r0, [r3, #0]
     446:	6059      	str	r1, [r3, #4]
	if (!&adc_instance || !adc_instance.hw) {
     448:	1c3b      	adds	r3, r7, #0
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d101      	bne.n	454 <readVoltagemV+0x18>
		//You must configure the adc_instance and set it as a global variable.
		return -1;
     450:	4b12      	ldr	r3, [pc, #72]	; (49c <readVoltagemV+0x60>)
     452:	e01e      	b.n	492 <readVoltagemV+0x56>
	}
	
	uint16_t result = 0;
     454:	1c3b      	adds	r3, r7, #0
     456:	330a      	adds	r3, #10
     458:	2200      	movs	r2, #0
     45a:	801a      	strh	r2, [r3, #0]
	int status;
	
	//start conversion
	adc_start_conversion(&adc_instance);
     45c:	1c3b      	adds	r3, r7, #0
     45e:	1c18      	adds	r0, r3, #0
     460:	4b0f      	ldr	r3, [pc, #60]	; (4a0 <readVoltagemV+0x64>)
     462:	4798      	blx	r3
	
	do {
		// Wait for conversion to be done and read out result
		status = adc_read(&adc_instance, &result);
     464:	1c3a      	adds	r2, r7, #0
     466:	1c3b      	adds	r3, r7, #0
     468:	330a      	adds	r3, #10
     46a:	1c10      	adds	r0, r2, #0
     46c:	1c19      	adds	r1, r3, #0
     46e:	4b0d      	ldr	r3, [pc, #52]	; (4a4 <readVoltagemV+0x68>)
     470:	4798      	blx	r3
     472:	1c03      	adds	r3, r0, #0
     474:	60fb      	str	r3, [r7, #12]
	} while (status == STATUS_BUSY);
     476:	68fb      	ldr	r3, [r7, #12]
     478:	2b05      	cmp	r3, #5
     47a:	d0f3      	beq.n	464 <readVoltagemV+0x28>
	//float resFloat = result;
	return resultToVoltage(result);
     47c:	1c3b      	adds	r3, r7, #0
     47e:	330a      	adds	r3, #10
     480:	881a      	ldrh	r2, [r3, #0]
     482:	4b09      	ldr	r3, [pc, #36]	; (4a8 <readVoltagemV+0x6c>)
     484:	1c10      	adds	r0, r2, #0
     486:	4798      	blx	r3
     488:	1c03      	adds	r3, r0, #0
     48a:	1c18      	adds	r0, r3, #0
     48c:	4b07      	ldr	r3, [pc, #28]	; (4ac <readVoltagemV+0x70>)
     48e:	4798      	blx	r3
     490:	1c03      	adds	r3, r0, #0
}
     492:	1c18      	adds	r0, r3, #0
     494:	46bd      	mov	sp, r7
     496:	b004      	add	sp, #16
     498:	bd80      	pop	{r7, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	bf800000 	.word	0xbf800000
     4a0:	0000031d 	.word	0x0000031d
     4a4:	00000355 	.word	0x00000355
     4a8:	00005455 	.word	0x00005455
     4ac:	000004b1 	.word	0x000004b1

000004b0 <resultToVoltage>:

float readVoltageV(struct adc_module adc_instance){
	return readVoltagemV(adc_instance)/1000;
} 

float resultToVoltage(float result) {
     4b0:	b5b0      	push	{r4, r5, r7, lr}
     4b2:	b082      	sub	sp, #8
     4b4:	af00      	add	r7, sp, #0
     4b6:	6078      	str	r0, [r7, #4]
	return 5.599744685 + 0.4909903275 * result;
     4b8:	4b13      	ldr	r3, [pc, #76]	; (508 <resultToVoltage+0x58>)
     4ba:	6878      	ldr	r0, [r7, #4]
     4bc:	4798      	blx	r3
     4be:	1c03      	adds	r3, r0, #0
     4c0:	1c0c      	adds	r4, r1, #0
     4c2:	4d12      	ldr	r5, [pc, #72]	; (50c <resultToVoltage+0x5c>)
     4c4:	1c18      	adds	r0, r3, #0
     4c6:	1c21      	adds	r1, r4, #0
     4c8:	4b0c      	ldr	r3, [pc, #48]	; (4fc <resultToVoltage+0x4c>)
     4ca:	4a0b      	ldr	r2, [pc, #44]	; (4f8 <resultToVoltage+0x48>)
     4cc:	47a8      	blx	r5
     4ce:	1c03      	adds	r3, r0, #0
     4d0:	1c0c      	adds	r4, r1, #0
     4d2:	4d0f      	ldr	r5, [pc, #60]	; (510 <resultToVoltage+0x60>)
     4d4:	1c18      	adds	r0, r3, #0
     4d6:	1c21      	adds	r1, r4, #0
     4d8:	4a09      	ldr	r2, [pc, #36]	; (500 <resultToVoltage+0x50>)
     4da:	4b0a      	ldr	r3, [pc, #40]	; (504 <resultToVoltage+0x54>)
     4dc:	47a8      	blx	r5
     4de:	1c03      	adds	r3, r0, #0
     4e0:	1c0c      	adds	r4, r1, #0
     4e2:	4a0c      	ldr	r2, [pc, #48]	; (514 <resultToVoltage+0x64>)
     4e4:	1c18      	adds	r0, r3, #0
     4e6:	1c21      	adds	r1, r4, #0
     4e8:	4790      	blx	r2
     4ea:	1c03      	adds	r3, r0, #0
}
     4ec:	1c18      	adds	r0, r3, #0
     4ee:	46bd      	mov	sp, r7
     4f0:	b002      	add	sp, #8
     4f2:	bdb0      	pop	{r4, r5, r7, pc}
     4f4:	46c0      	nop			; (mov r8, r8)
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	b1d0f2f7 	.word	0xb1d0f2f7
     4fc:	3fdf6c62 	.word	0x3fdf6c62
     500:	7880196b 	.word	0x7880196b
     504:	40166623 	.word	0x40166623
     508:	00006059 	.word	0x00006059
     50c:	00005b39 	.word	0x00005b39
     510:	000054f5 	.word	0x000054f5
     514:	000060fd 	.word	0x000060fd

00000518 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     51e:	4b0f      	ldr	r3, [pc, #60]	; (55c <cpu_irq_enter_critical+0x44>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	2b00      	cmp	r3, #0
     524:	d112      	bne.n	54c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     526:	f3ef 8310 	mrs	r3, PRIMASK
     52a:	607b      	str	r3, [r7, #4]
  return(result);
     52c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     52e:	2b00      	cmp	r3, #0
     530:	d109      	bne.n	546 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     532:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     534:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <cpu_irq_enter_critical+0x48>)
     53a:	2200      	movs	r2, #0
     53c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <cpu_irq_enter_critical+0x4c>)
     540:	2201      	movs	r2, #1
     542:	701a      	strb	r2, [r3, #0]
     544:	e002      	b.n	54c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     546:	4b07      	ldr	r3, [pc, #28]	; (564 <cpu_irq_enter_critical+0x4c>)
     548:	2200      	movs	r2, #0
     54a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     54c:	4b03      	ldr	r3, [pc, #12]	; (55c <cpu_irq_enter_critical+0x44>)
     54e:	681b      	ldr	r3, [r3, #0]
     550:	1c5a      	adds	r2, r3, #1
     552:	4b02      	ldr	r3, [pc, #8]	; (55c <cpu_irq_enter_critical+0x44>)
     554:	601a      	str	r2, [r3, #0]
}
     556:	46bd      	mov	sp, r7
     558:	b002      	add	sp, #8
     55a:	bd80      	pop	{r7, pc}
     55c:	2000008c 	.word	0x2000008c
     560:	20000000 	.word	0x20000000
     564:	20000090 	.word	0x20000090

00000568 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     568:	b580      	push	{r7, lr}
     56a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     56c:	4b0a      	ldr	r3, [pc, #40]	; (598 <cpu_irq_leave_critical+0x30>)
     56e:	681b      	ldr	r3, [r3, #0]
     570:	1e5a      	subs	r2, r3, #1
     572:	4b09      	ldr	r3, [pc, #36]	; (598 <cpu_irq_leave_critical+0x30>)
     574:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     576:	4b08      	ldr	r3, [pc, #32]	; (598 <cpu_irq_leave_critical+0x30>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	2b00      	cmp	r3, #0
     57c:	d10a      	bne.n	594 <cpu_irq_leave_critical+0x2c>
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <cpu_irq_leave_critical+0x34>)
     580:	781b      	ldrb	r3, [r3, #0]
     582:	b2db      	uxtb	r3, r3
     584:	2b00      	cmp	r3, #0
     586:	d005      	beq.n	594 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <cpu_irq_leave_critical+0x38>)
     58a:	2201      	movs	r2, #1
     58c:	701a      	strb	r2, [r3, #0]
     58e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     592:	b662      	cpsie	i
	}
}
     594:	46bd      	mov	sp, r7
     596:	bd80      	pop	{r7, pc}
     598:	2000008c 	.word	0x2000008c
     59c:	20000090 	.word	0x20000090
     5a0:	20000000 	.word	0x20000000

000005a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b082      	sub	sp, #8
     5a8:	af00      	add	r7, sp, #0
     5aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	2200      	movs	r2, #0
     5b0:	701a      	strb	r2, [r3, #0]
}
     5b2:	46bd      	mov	sp, r7
     5b4:	b002      	add	sp, #8
     5b6:	bd80      	pop	{r7, pc}

000005b8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	1c02      	adds	r2, r0, #0
     5c0:	6039      	str	r1, [r7, #0]
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5c6:	1dfb      	adds	r3, r7, #7
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b01      	cmp	r3, #1
     5cc:	d00a      	beq.n	5e4 <system_apb_clock_set_mask+0x2c>
     5ce:	2b02      	cmp	r3, #2
     5d0:	d00f      	beq.n	5f2 <system_apb_clock_set_mask+0x3a>
     5d2:	2b00      	cmp	r3, #0
     5d4:	d114      	bne.n	600 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5d6:	4b0e      	ldr	r3, [pc, #56]	; (610 <system_apb_clock_set_mask+0x58>)
     5d8:	4a0d      	ldr	r2, [pc, #52]	; (610 <system_apb_clock_set_mask+0x58>)
     5da:	6991      	ldr	r1, [r2, #24]
     5dc:	683a      	ldr	r2, [r7, #0]
     5de:	430a      	orrs	r2, r1
     5e0:	619a      	str	r2, [r3, #24]
			break;
     5e2:	e00f      	b.n	604 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     5e4:	4b0a      	ldr	r3, [pc, #40]	; (610 <system_apb_clock_set_mask+0x58>)
     5e6:	4a0a      	ldr	r2, [pc, #40]	; (610 <system_apb_clock_set_mask+0x58>)
     5e8:	69d1      	ldr	r1, [r2, #28]
     5ea:	683a      	ldr	r2, [r7, #0]
     5ec:	430a      	orrs	r2, r1
     5ee:	61da      	str	r2, [r3, #28]
			break;
     5f0:	e008      	b.n	604 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5f2:	4b07      	ldr	r3, [pc, #28]	; (610 <system_apb_clock_set_mask+0x58>)
     5f4:	4a06      	ldr	r2, [pc, #24]	; (610 <system_apb_clock_set_mask+0x58>)
     5f6:	6a11      	ldr	r1, [r2, #32]
     5f8:	683a      	ldr	r2, [r7, #0]
     5fa:	430a      	orrs	r2, r1
     5fc:	621a      	str	r2, [r3, #32]
			break;
     5fe:	e001      	b.n	604 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
     602:	e000      	b.n	606 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     604:	2300      	movs	r3, #0
}
     606:	1c18      	adds	r0, r3, #0
     608:	46bd      	mov	sp, r7
     60a:	b002      	add	sp, #8
     60c:	bd80      	pop	{r7, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	40000400 	.word	0x40000400

00000614 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     614:	b580      	push	{r7, lr}
     616:	b082      	sub	sp, #8
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	2280      	movs	r2, #128	; 0x80
     620:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     622:	687b      	ldr	r3, [r7, #4]
     624:	2200      	movs	r2, #0
     626:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	2201      	movs	r2, #1
     62c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	2200      	movs	r2, #0
     632:	70da      	strb	r2, [r3, #3]
}
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)

0000063c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     63c:	b580      	push	{r7, lr}
     63e:	b084      	sub	sp, #16
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     644:	687b      	ldr	r3, [r7, #4]
     646:	681b      	ldr	r3, [r3, #0]
     648:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     64a:	68fb      	ldr	r3, [r7, #12]
     64c:	7e5b      	ldrb	r3, [r3, #25]
     64e:	b2db      	uxtb	r3, r3
     650:	b2db      	uxtb	r3, r3
     652:	b25b      	sxtb	r3, r3
     654:	2b00      	cmp	r3, #0
     656:	da01      	bge.n	65c <adc_is_syncing+0x20>
		return true;
     658:	2301      	movs	r3, #1
     65a:	e000      	b.n	65e <adc_is_syncing+0x22>
	}

	return false;
     65c:	2300      	movs	r3, #0
}
     65e:	1c18      	adds	r0, r3, #0
     660:	46bd      	mov	sp, r7
     662:	b004      	add	sp, #16
     664:	bd80      	pop	{r7, pc}
     666:	46c0      	nop			; (mov r8, r8)

00000668 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     668:	b580      	push	{r7, lr}
     66a:	b098      	sub	sp, #96	; 0x60
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     670:	1c3a      	adds	r2, r7, #0
     672:	320c      	adds	r2, #12
     674:	4b15      	ldr	r3, [pc, #84]	; (6cc <_adc_configure_ain_pin+0x64>)
     676:	1c11      	adds	r1, r2, #0
     678:	1c1a      	adds	r2, r3, #0
     67a:	2350      	movs	r3, #80	; 0x50
     67c:	1c08      	adds	r0, r1, #0
     67e:	1c11      	adds	r1, r2, #0
     680:	1c1a      	adds	r2, r3, #0
     682:	4b13      	ldr	r3, [pc, #76]	; (6d0 <_adc_configure_ain_pin+0x68>)
     684:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     686:	4b13      	ldr	r3, [pc, #76]	; (6d4 <_adc_configure_ain_pin+0x6c>)
     688:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2b13      	cmp	r3, #19
     68e:	d81a      	bhi.n	6c6 <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     690:	1c3b      	adds	r3, r7, #0
     692:	330c      	adds	r3, #12
     694:	687a      	ldr	r2, [r7, #4]
     696:	0092      	lsls	r2, r2, #2
     698:	58d3      	ldr	r3, [r2, r3]
     69a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     69c:	1c3b      	adds	r3, r7, #0
     69e:	3308      	adds	r3, #8
     6a0:	1c18      	adds	r0, r3, #0
     6a2:	4b0d      	ldr	r3, [pc, #52]	; (6d8 <_adc_configure_ain_pin+0x70>)
     6a4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6a6:	1c3b      	adds	r3, r7, #0
     6a8:	3308      	adds	r3, #8
     6aa:	2200      	movs	r2, #0
     6ac:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     6ae:	1c3b      	adds	r3, r7, #0
     6b0:	3308      	adds	r3, #8
     6b2:	2201      	movs	r2, #1
     6b4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     6b8:	b2da      	uxtb	r2, r3
     6ba:	1c3b      	adds	r3, r7, #0
     6bc:	3308      	adds	r3, #8
     6be:	1c10      	adds	r0, r2, #0
     6c0:	1c19      	adds	r1, r3, #0
     6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <_adc_configure_ain_pin+0x74>)
     6c4:	4798      	blx	r3
	}
}
     6c6:	46bd      	mov	sp, r7
     6c8:	b018      	add	sp, #96	; 0x60
     6ca:	bd80      	pop	{r7, pc}
     6cc:	000071c4 	.word	0x000071c4
     6d0:	0000629d 	.word	0x0000629d
     6d4:	0000ffff 	.word	0x0000ffff
     6d8:	00000615 	.word	0x00000615
     6dc:	00004c25 	.word	0x00004c25

000006e0 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     6e0:	b5b0      	push	{r4, r5, r7, lr}
     6e2:	b088      	sub	sp, #32
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     6ea:	1c3b      	adds	r3, r7, #0
     6ec:	331f      	adds	r3, #31
     6ee:	2200      	movs	r2, #0
     6f0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     6f2:	2310      	movs	r3, #16
     6f4:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6f6:	1c3b      	adds	r3, r7, #0
     6f8:	3317      	adds	r3, #23
     6fa:	2200      	movs	r2, #0
     6fc:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	681b      	ldr	r3, [r3, #0]
     702:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     704:	1c3b      	adds	r3, r7, #0
     706:	330c      	adds	r3, #12
     708:	1c18      	adds	r0, r3, #0
     70a:	4bc1      	ldr	r3, [pc, #772]	; (a10 <_adc_set_config+0x330>)
     70c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     70e:	683b      	ldr	r3, [r7, #0]
     710:	781a      	ldrb	r2, [r3, #0]
     712:	1c3b      	adds	r3, r7, #0
     714:	330c      	adds	r3, #12
     716:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     718:	1c3b      	adds	r3, r7, #0
     71a:	330c      	adds	r3, #12
     71c:	201e      	movs	r0, #30
     71e:	1c19      	adds	r1, r3, #0
     720:	4bbc      	ldr	r3, [pc, #752]	; (a14 <_adc_set_config+0x334>)
     722:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     724:	201e      	movs	r0, #30
     726:	4bbc      	ldr	r3, [pc, #752]	; (a18 <_adc_set_config+0x338>)
     728:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     72a:	683a      	ldr	r2, [r7, #0]
     72c:	232c      	movs	r3, #44	; 0x2c
     72e:	5cd3      	ldrb	r3, [r2, r3]
     730:	2b00      	cmp	r3, #0
     732:	d040      	beq.n	7b6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     734:	1c3b      	adds	r3, r7, #0
     736:	3316      	adds	r3, #22
     738:	6839      	ldr	r1, [r7, #0]
     73a:	222b      	movs	r2, #43	; 0x2b
     73c:	5c8a      	ldrb	r2, [r1, r2]
     73e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     740:	683b      	ldr	r3, [r7, #0]
     742:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     744:	1c3b      	adds	r3, r7, #0
     746:	3315      	adds	r3, #21
     748:	1c3a      	adds	r2, r7, #0
     74a:	3216      	adds	r2, #22
     74c:	7812      	ldrb	r2, [r2, #0]
     74e:	188a      	adds	r2, r1, r2
     750:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     752:	683a      	ldr	r2, [r7, #0]
     754:	232c      	movs	r3, #44	; 0x2c
     756:	5cd1      	ldrb	r1, [r2, r3]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     758:	1c3b      	adds	r3, r7, #0
     75a:	330f      	adds	r3, #15
     75c:	1c3a      	adds	r2, r7, #0
     75e:	3215      	adds	r2, #21
     760:	7812      	ldrb	r2, [r2, #0]
     762:	188a      	adds	r2, r1, r2
     764:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     766:	e018      	b.n	79a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     768:	1c3b      	adds	r3, r7, #0
     76a:	3316      	adds	r3, #22
     76c:	781a      	ldrb	r2, [r3, #0]
     76e:	230f      	movs	r3, #15
     770:	401a      	ands	r2, r3
     772:	683b      	ldr	r3, [r7, #0]
     774:	7b1b      	ldrb	r3, [r3, #12]
     776:	18d3      	adds	r3, r2, r3
     778:	1c18      	adds	r0, r3, #0
     77a:	4ba8      	ldr	r3, [pc, #672]	; (a1c <_adc_set_config+0x33c>)
     77c:	4798      	blx	r3
			start_pin++;
     77e:	1c3b      	adds	r3, r7, #0
     780:	3315      	adds	r3, #21
     782:	781a      	ldrb	r2, [r3, #0]
     784:	1c3b      	adds	r3, r7, #0
     786:	3315      	adds	r3, #21
     788:	3201      	adds	r2, #1
     78a:	701a      	strb	r2, [r3, #0]
			offset++;
     78c:	1c3b      	adds	r3, r7, #0
     78e:	3316      	adds	r3, #22
     790:	781a      	ldrb	r2, [r3, #0]
     792:	1c3b      	adds	r3, r7, #0
     794:	3316      	adds	r3, #22
     796:	3201      	adds	r2, #1
     798:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     79a:	1c3a      	adds	r2, r7, #0
     79c:	3215      	adds	r2, #21
     79e:	1c3b      	adds	r3, r7, #0
     7a0:	330f      	adds	r3, #15
     7a2:	7812      	ldrb	r2, [r2, #0]
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	429a      	cmp	r2, r3
     7a8:	d3de      	bcc.n	768 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	89db      	ldrh	r3, [r3, #14]
     7ae:	1c18      	adds	r0, r3, #0
     7b0:	4b9a      	ldr	r3, [pc, #616]	; (a1c <_adc_set_config+0x33c>)
     7b2:	4798      	blx	r3
     7b4:	e009      	b.n	7ca <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	7b1b      	ldrb	r3, [r3, #12]
     7ba:	1c18      	adds	r0, r3, #0
     7bc:	4b97      	ldr	r3, [pc, #604]	; (a1c <_adc_set_config+0x33c>)
     7be:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     7c0:	683b      	ldr	r3, [r7, #0]
     7c2:	89db      	ldrh	r3, [r3, #14]
     7c4:	1c18      	adds	r0, r3, #0
     7c6:	4b95      	ldr	r3, [pc, #596]	; (a1c <_adc_set_config+0x33c>)
     7c8:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	7d5b      	ldrb	r3, [r3, #21]
     7ce:	009b      	lsls	r3, r3, #2
     7d0:	b2da      	uxtb	r2, r3
     7d2:	693b      	ldr	r3, [r7, #16]
     7d4:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     7d6:	683b      	ldr	r3, [r7, #0]
     7d8:	7d9b      	ldrb	r3, [r3, #22]
     7da:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     7dc:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     7e2:	b2db      	uxtb	r3, r3
     7e4:	4313      	orrs	r3, r2
     7e6:	b2db      	uxtb	r3, r3
     7e8:	b2da      	uxtb	r2, r3
     7ea:	693b      	ldr	r3, [r7, #16]
     7ec:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	791b      	ldrb	r3, [r3, #4]
     7f2:	2b34      	cmp	r3, #52	; 0x34
     7f4:	d846      	bhi.n	884 <_adc_set_config+0x1a4>
     7f6:	009a      	lsls	r2, r3, #2
     7f8:	4b89      	ldr	r3, [pc, #548]	; (a20 <_adc_set_config+0x340>)
     7fa:	18d3      	adds	r3, r2, r3
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     800:	1c3b      	adds	r3, r7, #0
     802:	331f      	adds	r3, #31
     804:	683a      	ldr	r2, [r7, #0]
     806:	7c52      	ldrb	r2, [r2, #17]
     808:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     80a:	1c3b      	adds	r3, r7, #0
     80c:	3317      	adds	r3, #23
     80e:	683a      	ldr	r2, [r7, #0]
     810:	7c12      	ldrb	r2, [r2, #16]
     812:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     814:	2310      	movs	r3, #16
     816:	61bb      	str	r3, [r7, #24]
		break;
     818:	e036      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     81a:	1c3b      	adds	r3, r7, #0
     81c:	331f      	adds	r3, #31
     81e:	2201      	movs	r2, #1
     820:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     822:	1c3b      	adds	r3, r7, #0
     824:	3317      	adds	r3, #23
     826:	2202      	movs	r2, #2
     828:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     82a:	2310      	movs	r3, #16
     82c:	61bb      	str	r3, [r7, #24]
		break;
     82e:	e02b      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     830:	1c3b      	adds	r3, r7, #0
     832:	331f      	adds	r3, #31
     834:	2202      	movs	r2, #2
     836:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     838:	1c3b      	adds	r3, r7, #0
     83a:	3317      	adds	r3, #23
     83c:	2204      	movs	r2, #4
     83e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     840:	2310      	movs	r3, #16
     842:	61bb      	str	r3, [r7, #24]
		break;
     844:	e020      	b.n	888 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     846:	1c3b      	adds	r3, r7, #0
     848:	331f      	adds	r3, #31
     84a:	2201      	movs	r2, #1
     84c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     84e:	1c3b      	adds	r3, r7, #0
     850:	3317      	adds	r3, #23
     852:	2206      	movs	r2, #6
     854:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     856:	2310      	movs	r3, #16
     858:	61bb      	str	r3, [r7, #24]
		break;
     85a:	e015      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     85c:	1c3b      	adds	r3, r7, #0
     85e:	331f      	adds	r3, #31
     860:	2200      	movs	r2, #0
     862:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     864:	1c3b      	adds	r3, r7, #0
     866:	3317      	adds	r3, #23
     868:	2208      	movs	r2, #8
     86a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     86c:	2310      	movs	r3, #16
     86e:	61bb      	str	r3, [r7, #24]
		break;
     870:	e00a      	b.n	888 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     872:	2330      	movs	r3, #48	; 0x30
     874:	61bb      	str	r3, [r7, #24]
		break;
     876:	e007      	b.n	888 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     878:	2320      	movs	r3, #32
     87a:	61bb      	str	r3, [r7, #24]
		break;
     87c:	e004      	b.n	888 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     87e:	2300      	movs	r3, #0
     880:	61bb      	str	r3, [r7, #24]
		break;
     882:	e001      	b.n	888 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     884:	2317      	movs	r3, #23
     886:	e1a9      	b.n	bdc <_adc_set_config+0x4fc>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     888:	1c3b      	adds	r3, r7, #0
     88a:	331f      	adds	r3, #31
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	011b      	lsls	r3, r3, #4
     890:	b2da      	uxtb	r2, r3
     892:	2370      	movs	r3, #112	; 0x70
     894:	4013      	ands	r3, r2
     896:	b2da      	uxtb	r2, r3
     898:	1c3b      	adds	r3, r7, #0
     89a:	3317      	adds	r3, #23
     89c:	781b      	ldrb	r3, [r3, #0]
     89e:	4313      	orrs	r3, r2
     8a0:	b2da      	uxtb	r2, r3
     8a2:	693b      	ldr	r3, [r7, #16]
     8a4:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	7ddb      	ldrb	r3, [r3, #23]
     8aa:	2b3f      	cmp	r3, #63	; 0x3f
     8ac:	d901      	bls.n	8b2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     8ae:	2317      	movs	r3, #23
     8b0:	e194      	b.n	bdc <_adc_set_config+0x4fc>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     8b6:	693b      	ldr	r3, [r7, #16]
     8b8:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	1c18      	adds	r0, r3, #0
     8c0:	4b58      	ldr	r3, [pc, #352]	; (a24 <_adc_set_config+0x344>)
     8c2:	4798      	blx	r3
     8c4:	1c03      	adds	r3, r0, #0
     8c6:	2b00      	cmp	r3, #0
     8c8:	d1f8      	bne.n	8bc <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8ce:	69bb      	ldr	r3, [r7, #24]
     8d0:	b29b      	uxth	r3, r3
     8d2:	4313      	orrs	r3, r2
     8d4:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     8d6:	6839      	ldr	r1, [r7, #0]
     8d8:	2324      	movs	r3, #36	; 0x24
     8da:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8dc:	00db      	lsls	r3, r3, #3
     8de:	b29b      	uxth	r3, r3
     8e0:	4313      	orrs	r3, r2
     8e2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8e8:	009b      	lsls	r3, r3, #2
     8ea:	b29b      	uxth	r3, r3
     8ec:	4313      	orrs	r3, r2
     8ee:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8f0:	683b      	ldr	r3, [r7, #0]
     8f2:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8f4:	18db      	adds	r3, r3, r3
     8f6:	b29b      	uxth	r3, r3
     8f8:	4313      	orrs	r3, r2
     8fa:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     8fc:	683b      	ldr	r3, [r7, #0]
     8fe:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     900:	4313      	orrs	r3, r2
     902:	b29a      	uxth	r2, r3
     904:	693b      	ldr	r3, [r7, #16]
     906:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     908:	683b      	ldr	r3, [r7, #0]
     90a:	7e1b      	ldrb	r3, [r3, #24]
     90c:	2b00      	cmp	r3, #0
     90e:	d100      	bne.n	912 <_adc_set_config+0x232>
     910:	e0bf      	b.n	a92 <_adc_set_config+0x3b2>
		switch (resolution) {
     912:	69bb      	ldr	r3, [r7, #24]
     914:	2b10      	cmp	r3, #16
     916:	d100      	bne.n	91a <_adc_set_config+0x23a>
     918:	e094      	b.n	a44 <_adc_set_config+0x364>
     91a:	d802      	bhi.n	922 <_adc_set_config+0x242>
     91c:	2b00      	cmp	r3, #0
     91e:	d04f      	beq.n	9c0 <_adc_set_config+0x2e0>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     920:	e0b7      	b.n	a92 <_adc_set_config+0x3b2>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
     922:	2b20      	cmp	r3, #32
     924:	d025      	beq.n	972 <_adc_set_config+0x292>
     926:	2b30      	cmp	r3, #48	; 0x30
     928:	d000      	beq.n	92c <_adc_set_config+0x24c>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     92a:	e0b2      	b.n	a92 <_adc_set_config+0x3b2>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     92c:	683b      	ldr	r3, [r7, #0]
     92e:	7cdb      	ldrb	r3, [r3, #19]
     930:	2b00      	cmp	r3, #0
     932:	d013      	beq.n	95c <_adc_set_config+0x27c>
					(config->window.window_lower_value > 127 ||
     934:	683b      	ldr	r3, [r7, #0]
     936:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     938:	2b7f      	cmp	r3, #127	; 0x7f
     93a:	dc0d      	bgt.n	958 <_adc_set_config+0x278>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     93c:	683b      	ldr	r3, [r7, #0]
     93e:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     940:	1c1a      	adds	r2, r3, #0
     942:	3280      	adds	r2, #128	; 0x80
     944:	db08      	blt.n	958 <_adc_set_config+0x278>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     946:	683b      	ldr	r3, [r7, #0]
     948:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     94a:	2b7f      	cmp	r3, #127	; 0x7f
     94c:	dc04      	bgt.n	958 <_adc_set_config+0x278>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     94e:	683b      	ldr	r3, [r7, #0]
     950:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     952:	1c1a      	adds	r2, r3, #0
     954:	3280      	adds	r2, #128	; 0x80
     956:	da01      	bge.n	95c <_adc_set_config+0x27c>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     958:	2317      	movs	r3, #23
     95a:	e13f      	b.n	bdc <_adc_set_config+0x4fc>
			} else if (config->window.window_lower_value > 255 ||
     95c:	683b      	ldr	r3, [r7, #0]
     95e:	69db      	ldr	r3, [r3, #28]
     960:	2bff      	cmp	r3, #255	; 0xff
     962:	dc03      	bgt.n	96c <_adc_set_config+0x28c>
					config->window.window_upper_value > 255){
     964:	683b      	ldr	r3, [r7, #0]
     966:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     968:	2bff      	cmp	r3, #255	; 0xff
     96a:	dd01      	ble.n	970 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     96c:	2317      	movs	r3, #23
     96e:	e135      	b.n	bdc <_adc_set_config+0x4fc>
			}
			break;
     970:	e08f      	b.n	a92 <_adc_set_config+0x3b2>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     972:	683b      	ldr	r3, [r7, #0]
     974:	7cdb      	ldrb	r3, [r3, #19]
     976:	2b00      	cmp	r3, #0
     978:	d015      	beq.n	9a6 <_adc_set_config+0x2c6>
					(config->window.window_lower_value > 511 ||
     97a:	683b      	ldr	r3, [r7, #0]
     97c:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     97e:	4b2a      	ldr	r3, [pc, #168]	; (a28 <_adc_set_config+0x348>)
     980:	429a      	cmp	r2, r3
     982:	dc0e      	bgt.n	9a2 <_adc_set_config+0x2c2>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     984:	683b      	ldr	r3, [r7, #0]
     986:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     988:	4b28      	ldr	r3, [pc, #160]	; (a2c <_adc_set_config+0x34c>)
     98a:	429a      	cmp	r2, r3
     98c:	db09      	blt.n	9a2 <_adc_set_config+0x2c2>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     98e:	683b      	ldr	r3, [r7, #0]
     990:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     992:	4b25      	ldr	r3, [pc, #148]	; (a28 <_adc_set_config+0x348>)
     994:	429a      	cmp	r2, r3
     996:	dc04      	bgt.n	9a2 <_adc_set_config+0x2c2>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
     998:	683b      	ldr	r3, [r7, #0]
     99a:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     99c:	4b24      	ldr	r3, [pc, #144]	; (a30 <_adc_set_config+0x350>)
     99e:	429a      	cmp	r2, r3
     9a0:	db01      	blt.n	9a6 <_adc_set_config+0x2c6>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9a2:	2317      	movs	r3, #23
     9a4:	e11a      	b.n	bdc <_adc_set_config+0x4fc>
			} else if (config->window.window_lower_value > 1023 ||
     9a6:	683b      	ldr	r3, [r7, #0]
     9a8:	69da      	ldr	r2, [r3, #28]
     9aa:	4b22      	ldr	r3, [pc, #136]	; (a34 <_adc_set_config+0x354>)
     9ac:	429a      	cmp	r2, r3
     9ae:	dc04      	bgt.n	9ba <_adc_set_config+0x2da>
					config->window.window_upper_value > 1023){
     9b0:	683b      	ldr	r3, [r7, #0]
     9b2:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     9b4:	4b1f      	ldr	r3, [pc, #124]	; (a34 <_adc_set_config+0x354>)
     9b6:	429a      	cmp	r2, r3
     9b8:	dd01      	ble.n	9be <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9ba:	2317      	movs	r3, #23
     9bc:	e10e      	b.n	bdc <_adc_set_config+0x4fc>
			}
			break;
     9be:	e068      	b.n	a92 <_adc_set_config+0x3b2>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9c0:	683b      	ldr	r3, [r7, #0]
     9c2:	7cdb      	ldrb	r3, [r3, #19]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d015      	beq.n	9f4 <_adc_set_config+0x314>
					(config->window.window_lower_value > 2047 ||
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9cc:	4b1a      	ldr	r3, [pc, #104]	; (a38 <_adc_set_config+0x358>)
     9ce:	429a      	cmp	r2, r3
     9d0:	dc0e      	bgt.n	9f0 <_adc_set_config+0x310>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     9d6:	4b19      	ldr	r3, [pc, #100]	; (a3c <_adc_set_config+0x35c>)
     9d8:	429a      	cmp	r2, r3
     9da:	db09      	blt.n	9f0 <_adc_set_config+0x310>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     9e0:	4b15      	ldr	r3, [pc, #84]	; (a38 <_adc_set_config+0x358>)
     9e2:	429a      	cmp	r2, r3
     9e4:	dc04      	bgt.n	9f0 <_adc_set_config+0x310>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     9e6:	683b      	ldr	r3, [r7, #0]
     9e8:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     9ea:	4b14      	ldr	r3, [pc, #80]	; (a3c <_adc_set_config+0x35c>)
     9ec:	429a      	cmp	r2, r3
     9ee:	da01      	bge.n	9f4 <_adc_set_config+0x314>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9f0:	2317      	movs	r3, #23
     9f2:	e0f3      	b.n	bdc <_adc_set_config+0x4fc>
			} else if (config->window.window_lower_value > 4095 ||
     9f4:	683b      	ldr	r3, [r7, #0]
     9f6:	69da      	ldr	r2, [r3, #28]
     9f8:	4b11      	ldr	r3, [pc, #68]	; (a40 <_adc_set_config+0x360>)
     9fa:	429a      	cmp	r2, r3
     9fc:	dc04      	bgt.n	a08 <_adc_set_config+0x328>
					config->window.window_upper_value > 4095){
     9fe:	683b      	ldr	r3, [r7, #0]
     a00:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     a02:	4b0f      	ldr	r3, [pc, #60]	; (a40 <_adc_set_config+0x360>)
     a04:	429a      	cmp	r2, r3
     a06:	dd01      	ble.n	a0c <_adc_set_config+0x32c>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a08:	2317      	movs	r3, #23
     a0a:	e0e7      	b.n	bdc <_adc_set_config+0x4fc>
			}
			break;
     a0c:	e041      	b.n	a92 <_adc_set_config+0x3b2>
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	000005a5 	.word	0x000005a5
     a14:	00004941 	.word	0x00004941
     a18:	00004981 	.word	0x00004981
     a1c:	00000669 	.word	0x00000669
     a20:	00007214 	.word	0x00007214
     a24:	0000063d 	.word	0x0000063d
     a28:	000001ff 	.word	0x000001ff
     a2c:	fffffe00 	.word	0xfffffe00
     a30:	fffffe01 	.word	0xfffffe01
     a34:	000003ff 	.word	0x000003ff
     a38:	000007ff 	.word	0x000007ff
     a3c:	fffff800 	.word	0xfffff800
     a40:	00000fff 	.word	0x00000fff
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a44:	683b      	ldr	r3, [r7, #0]
     a46:	7cdb      	ldrb	r3, [r3, #19]
     a48:	2b00      	cmp	r3, #0
     a4a:	d015      	beq.n	a78 <_adc_set_config+0x398>
					(config->window.window_lower_value > 32767 ||
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a50:	4b64      	ldr	r3, [pc, #400]	; (be4 <_adc_set_config+0x504>)
     a52:	429a      	cmp	r2, r3
     a54:	dc0e      	bgt.n	a74 <_adc_set_config+0x394>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     a56:	683b      	ldr	r3, [r7, #0]
     a58:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     a5a:	4b63      	ldr	r3, [pc, #396]	; (be8 <_adc_set_config+0x508>)
     a5c:	429a      	cmp	r2, r3
     a5e:	db09      	blt.n	a74 <_adc_set_config+0x394>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     a60:	683b      	ldr	r3, [r7, #0]
     a62:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     a64:	4b5f      	ldr	r3, [pc, #380]	; (be4 <_adc_set_config+0x504>)
     a66:	429a      	cmp	r2, r3
     a68:	dc04      	bgt.n	a74 <_adc_set_config+0x394>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     a6a:	683b      	ldr	r3, [r7, #0]
     a6c:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     a6e:	4b5e      	ldr	r3, [pc, #376]	; (be8 <_adc_set_config+0x508>)
     a70:	429a      	cmp	r2, r3
     a72:	da01      	bge.n	a78 <_adc_set_config+0x398>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a74:	2317      	movs	r3, #23
     a76:	e0b1      	b.n	bdc <_adc_set_config+0x4fc>
			} else if (config->window.window_lower_value > 65535 ||
     a78:	683b      	ldr	r3, [r7, #0]
     a7a:	69da      	ldr	r2, [r3, #28]
     a7c:	4b5b      	ldr	r3, [pc, #364]	; (bec <_adc_set_config+0x50c>)
     a7e:	429a      	cmp	r2, r3
     a80:	dc04      	bgt.n	a8c <_adc_set_config+0x3ac>
					config->window.window_upper_value > 65535){
     a82:	683b      	ldr	r3, [r7, #0]
     a84:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     a86:	4b59      	ldr	r3, [pc, #356]	; (bec <_adc_set_config+0x50c>)
     a88:	429a      	cmp	r2, r3
     a8a:	dd01      	ble.n	a90 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a8c:	2317      	movs	r3, #23
     a8e:	e0a5      	b.n	bdc <_adc_set_config+0x4fc>
			}
			break;
     a90:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	1c18      	adds	r0, r3, #0
     a98:	4b55      	ldr	r3, [pc, #340]	; (bf0 <_adc_set_config+0x510>)
     a9a:	4798      	blx	r3
     a9c:	1c03      	adds	r3, r0, #0
     a9e:	2b00      	cmp	r3, #0
     aa0:	d1f8      	bne.n	a94 <_adc_set_config+0x3b4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     aa2:	683b      	ldr	r3, [r7, #0]
     aa4:	7e1a      	ldrb	r2, [r3, #24]
     aa6:	693b      	ldr	r3, [r7, #16]
     aa8:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	687b      	ldr	r3, [r7, #4]
     aae:	1c18      	adds	r0, r3, #0
     ab0:	4b4f      	ldr	r3, [pc, #316]	; (bf0 <_adc_set_config+0x510>)
     ab2:	4798      	blx	r3
     ab4:	1c03      	adds	r3, r0, #0
     ab6:	2b00      	cmp	r3, #0
     ab8:	d1f8      	bne.n	aac <_adc_set_config+0x3cc>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     aba:	683b      	ldr	r3, [r7, #0]
     abc:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     abe:	b29a      	uxth	r2, r3
     ac0:	693b      	ldr	r3, [r7, #16]
     ac2:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     ac4:	46c0      	nop			; (mov r8, r8)
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	1c18      	adds	r0, r3, #0
     aca:	4b49      	ldr	r3, [pc, #292]	; (bf0 <_adc_set_config+0x510>)
     acc:	4798      	blx	r3
     ace:	1c03      	adds	r3, r0, #0
     ad0:	2b00      	cmp	r3, #0
     ad2:	d1f8      	bne.n	ac6 <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ad4:	683b      	ldr	r3, [r7, #0]
     ad6:	6a1b      	ldr	r3, [r3, #32]
     ad8:	b29a      	uxth	r2, r3
     ada:	693b      	ldr	r3, [r7, #16]
     adc:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ade:	1c3b      	adds	r3, r7, #0
     ae0:	3314      	adds	r3, #20
     ae2:	6839      	ldr	r1, [r7, #0]
     ae4:	222c      	movs	r2, #44	; 0x2c
     ae6:	5c8a      	ldrb	r2, [r1, r2]
     ae8:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     aea:	1c3b      	adds	r3, r7, #0
     aec:	3314      	adds	r3, #20
     aee:	781b      	ldrb	r3, [r3, #0]
     af0:	2b00      	cmp	r3, #0
     af2:	d006      	beq.n	b02 <_adc_set_config+0x422>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     af4:	1c3b      	adds	r3, r7, #0
     af6:	3314      	adds	r3, #20
     af8:	781a      	ldrb	r2, [r3, #0]
     afa:	1c3b      	adds	r3, r7, #0
     afc:	3314      	adds	r3, #20
     afe:	3a01      	subs	r2, #1
     b00:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     b02:	1c3b      	adds	r3, r7, #0
     b04:	3314      	adds	r3, #20
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	2b0f      	cmp	r3, #15
     b0a:	d804      	bhi.n	b16 <_adc_set_config+0x436>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     b0c:	683a      	ldr	r2, [r7, #0]
     b0e:	232b      	movs	r3, #43	; 0x2b
     b10:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     b12:	2b0f      	cmp	r3, #15
     b14:	d901      	bls.n	b1a <_adc_set_config+0x43a>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     b16:	2317      	movs	r3, #23
     b18:	e060      	b.n	bdc <_adc_set_config+0x4fc>
	}

	while (adc_is_syncing(module_inst)) {
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	687b      	ldr	r3, [r7, #4]
     b1e:	1c18      	adds	r0, r3, #0
     b20:	4b33      	ldr	r3, [pc, #204]	; (bf0 <_adc_set_config+0x510>)
     b22:	4798      	blx	r3
     b24:	1c03      	adds	r3, r0, #0
     b26:	2b00      	cmp	r3, #0
     b28:	d1f8      	bne.n	b1c <_adc_set_config+0x43c>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     b2a:	683b      	ldr	r3, [r7, #0]
     b2c:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     b2e:	6839      	ldr	r1, [r7, #0]
     b30:	232b      	movs	r3, #43	; 0x2b
     b32:	5ccb      	ldrb	r3, [r1, r3]
     b34:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     b36:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b38:	1c3b      	adds	r3, r7, #0
     b3a:	3314      	adds	r3, #20
     b3c:	781b      	ldrb	r3, [r3, #0]
     b3e:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     b40:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     b42:	683b      	ldr	r3, [r7, #0]
     b44:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b46:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
     b48:	683b      	ldr	r3, [r7, #0]
     b4a:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     b4c:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     b4e:	693b      	ldr	r3, [r7, #16]
     b50:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     b52:	683a      	ldr	r2, [r7, #0]
     b54:	232a      	movs	r3, #42	; 0x2a
     b56:	5cd2      	ldrb	r2, [r2, r3]
     b58:	693b      	ldr	r3, [r7, #16]
     b5a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     b5c:	693b      	ldr	r3, [r7, #16]
     b5e:	220f      	movs	r2, #15
     b60:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     b62:	683a      	ldr	r2, [r7, #0]
     b64:	2324      	movs	r3, #36	; 0x24
     b66:	5cd3      	ldrb	r3, [r2, r3]
     b68:	2b00      	cmp	r3, #0
     b6a:	d01d      	beq.n	ba8 <_adc_set_config+0x4c8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b6c:	683b      	ldr	r3, [r7, #0]
     b6e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     b70:	4b20      	ldr	r3, [pc, #128]	; (bf4 <_adc_set_config+0x514>)
     b72:	429a      	cmp	r2, r3
     b74:	d901      	bls.n	b7a <_adc_set_config+0x49a>
			return STATUS_ERR_INVALID_ARG;
     b76:	2317      	movs	r3, #23
     b78:	e030      	b.n	bdc <_adc_set_config+0x4fc>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     b7a:	683b      	ldr	r3, [r7, #0]
     b7c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     b7e:	693b      	ldr	r3, [r7, #16]
     b80:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b82:	683b      	ldr	r3, [r7, #0]
     b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b86:	b21a      	sxth	r2, r3
     b88:	4b1b      	ldr	r3, [pc, #108]	; (bf8 <_adc_set_config+0x518>)
     b8a:	429a      	cmp	r2, r3
     b8c:	dc05      	bgt.n	b9a <_adc_set_config+0x4ba>
				config->correction.offset_correction < -2048) {
     b8e:	683b      	ldr	r3, [r7, #0]
     b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b92:	b21a      	sxth	r2, r3
     b94:	4b19      	ldr	r3, [pc, #100]	; (bfc <_adc_set_config+0x51c>)
     b96:	429a      	cmp	r2, r3
     b98:	da01      	bge.n	b9e <_adc_set_config+0x4be>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     b9a:	2317      	movs	r3, #23
     b9c:	e01e      	b.n	bdc <_adc_set_config+0x4fc>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     b9e:	683b      	ldr	r3, [r7, #0]
     ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     ba2:	b29a      	uxth	r2, r3
     ba4:	693b      	ldr	r3, [r7, #16]
     ba6:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     ba8:	4b15      	ldr	r3, [pc, #84]	; (c00 <_adc_set_config+0x520>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     bae:	b29b      	uxth	r3, r3
     bb0:	021b      	lsls	r3, r3, #8
     bb2:	b29a      	uxth	r2, r3
     bb4:	23e0      	movs	r3, #224	; 0xe0
     bb6:	00db      	lsls	r3, r3, #3
     bb8:	4013      	ands	r3, r2
     bba:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     bbc:	4b11      	ldr	r3, [pc, #68]	; (c04 <_adc_set_config+0x524>)
     bbe:	681a      	ldr	r2, [r3, #0]
     bc0:	685b      	ldr	r3, [r3, #4]
     bc2:	0158      	lsls	r0, r3, #5
     bc4:	0ed4      	lsrs	r4, r2, #27
     bc6:	4304      	orrs	r4, r0
     bc8:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     bca:	b2a2      	uxth	r2, r4
     bcc:	23ff      	movs	r3, #255	; 0xff
     bce:	4013      	ands	r3, r2
     bd0:	b29b      	uxth	r3, r3
     bd2:	430b      	orrs	r3, r1
     bd4:	b29a      	uxth	r2, r3
     bd6:	693b      	ldr	r3, [r7, #16]
     bd8:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     bda:	2300      	movs	r3, #0
}
     bdc:	1c18      	adds	r0, r3, #0
     bde:	46bd      	mov	sp, r7
     be0:	b008      	add	sp, #32
     be2:	bdb0      	pop	{r4, r5, r7, pc}
     be4:	00007fff 	.word	0x00007fff
     be8:	ffff8000 	.word	0xffff8000
     bec:	0000ffff 	.word	0x0000ffff
     bf0:	0000063d 	.word	0x0000063d
     bf4:	00000fff 	.word	0x00000fff
     bf8:	000007ff 	.word	0x000007ff
     bfc:	fffff800 	.word	0xfffff800
     c00:	00806024 	.word	0x00806024
     c04:	00806020 	.word	0x00806020

00000c08 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c08:	b580      	push	{r7, lr}
     c0a:	b084      	sub	sp, #16
     c0c:	af00      	add	r7, sp, #0
     c0e:	60f8      	str	r0, [r7, #12]
     c10:	60b9      	str	r1, [r7, #8]
     c12:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	68ba      	ldr	r2, [r7, #8]
     c18:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     c1a:	2380      	movs	r3, #128	; 0x80
     c1c:	025b      	lsls	r3, r3, #9
     c1e:	2002      	movs	r0, #2
     c20:	1c19      	adds	r1, r3, #0
     c22:	4b11      	ldr	r3, [pc, #68]	; (c68 <adc_init+0x60>)
     c24:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c26:	68bb      	ldr	r3, [r7, #8]
     c28:	781b      	ldrb	r3, [r3, #0]
     c2a:	b2db      	uxtb	r3, r3
     c2c:	1c1a      	adds	r2, r3, #0
     c2e:	2301      	movs	r3, #1
     c30:	4013      	ands	r3, r2
     c32:	d001      	beq.n	c38 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c34:	2305      	movs	r3, #5
     c36:	e013      	b.n	c60 <adc_init+0x58>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c38:	68bb      	ldr	r3, [r7, #8]
     c3a:	781b      	ldrb	r3, [r3, #0]
     c3c:	b2db      	uxtb	r3, r3
     c3e:	1c1a      	adds	r2, r3, #0
     c40:	2302      	movs	r3, #2
     c42:	4013      	ands	r3, r2
     c44:	d001      	beq.n	c4a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     c46:	231c      	movs	r3, #28
     c48:	e00a      	b.n	c60 <adc_init+0x58>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     c4a:	687b      	ldr	r3, [r7, #4]
     c4c:	785a      	ldrb	r2, [r3, #1]
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	711a      	strb	r2, [r3, #4]
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     c52:	68fa      	ldr	r2, [r7, #12]
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	1c10      	adds	r0, r2, #0
     c58:	1c19      	adds	r1, r3, #0
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <adc_init+0x64>)
     c5c:	4798      	blx	r3
     c5e:	1c03      	adds	r3, r0, #0
}
     c60:	1c18      	adds	r0, r3, #0
     c62:	46bd      	mov	sp, r7
     c64:	b004      	add	sp, #16
     c66:	bd80      	pop	{r7, pc}
     c68:	000005b9 	.word	0x000005b9
     c6c:	000006e1 	.word	0x000006e1

00000c70 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     c70:	b580      	push	{r7, lr}
     c72:	b082      	sub	sp, #8
     c74:	af00      	add	r7, sp, #0
     c76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	2200      	movs	r2, #0
     c7c:	701a      	strb	r2, [r3, #0]
}
     c7e:	46bd      	mov	sp, r7
     c80:	b002      	add	sp, #8
     c82:	bd80      	pop	{r7, pc}

00000c84 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     c84:	b5b0      	push	{r4, r5, r7, lr}
     c86:	b08e      	sub	sp, #56	; 0x38
     c88:	af00      	add	r7, sp, #0
     c8a:	6138      	str	r0, [r7, #16]
     c8c:	6179      	str	r1, [r7, #20]
     c8e:	60ba      	str	r2, [r7, #8]
     c90:	60fb      	str	r3, [r7, #12]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c92:	2200      	movs	r2, #0
     c94:	2300      	movs	r3, #0
     c96:	62ba      	str	r2, [r7, #40]	; 0x28
     c98:	62fb      	str	r3, [r7, #44]	; 0x2c
     c9a:	2200      	movs	r2, #0
     c9c:	2300      	movs	r3, #0
     c9e:	623a      	str	r2, [r7, #32]
     ca0:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
     ca2:	233f      	movs	r3, #63	; 0x3f
     ca4:	637b      	str	r3, [r7, #52]	; 0x34
     ca6:	e05b      	b.n	d60 <long_division+0xdc>
		bit_shift = (uint64_t)1 << i;
     ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     caa:	3b20      	subs	r3, #32
     cac:	2b00      	cmp	r3, #0
     cae:	db05      	blt.n	cbc <long_division+0x38>
     cb0:	2201      	movs	r2, #1
     cb2:	1c10      	adds	r0, r2, #0
     cb4:	4098      	lsls	r0, r3
     cb6:	1c03      	adds	r3, r0, #0
     cb8:	61fb      	str	r3, [r7, #28]
     cba:	e00d      	b.n	cd8 <long_division+0x54>
     cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cbe:	2220      	movs	r2, #32
     cc0:	1ad3      	subs	r3, r2, r3
     cc2:	2201      	movs	r2, #1
     cc4:	1c11      	adds	r1, r2, #0
     cc6:	40d9      	lsrs	r1, r3
     cc8:	1c0b      	adds	r3, r1, #0
     cca:	2100      	movs	r1, #0
     ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     cce:	1c08      	adds	r0, r1, #0
     cd0:	4090      	lsls	r0, r2
     cd2:	1c02      	adds	r2, r0, #0
     cd4:	4313      	orrs	r3, r2
     cd6:	61fb      	str	r3, [r7, #28]
     cd8:	2201      	movs	r2, #1
     cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cdc:	1c11      	adds	r1, r2, #0
     cde:	4099      	lsls	r1, r3
     ce0:	1c0b      	adds	r3, r1, #0
     ce2:	61bb      	str	r3, [r7, #24]

		r = r << 1;
     ce4:	6a3a      	ldr	r2, [r7, #32]
     ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ce8:	1892      	adds	r2, r2, r2
     cea:	415b      	adcs	r3, r3
     cec:	623a      	str	r2, [r7, #32]
     cee:	627b      	str	r3, [r7, #36]	; 0x24

		if (n & bit_shift) {
     cf0:	693b      	ldr	r3, [r7, #16]
     cf2:	69ba      	ldr	r2, [r7, #24]
     cf4:	1c14      	adds	r4, r2, #0
     cf6:	401c      	ands	r4, r3
     cf8:	697b      	ldr	r3, [r7, #20]
     cfa:	69fa      	ldr	r2, [r7, #28]
     cfc:	1c15      	adds	r5, r2, #0
     cfe:	401d      	ands	r5, r3
     d00:	1c23      	adds	r3, r4, #0
     d02:	432b      	orrs	r3, r5
     d04:	d007      	beq.n	d16 <long_division+0x92>
			r |= 0x01;
     d06:	6a3b      	ldr	r3, [r7, #32]
     d08:	2201      	movs	r2, #1
     d0a:	4313      	orrs	r3, r2
     d0c:	623b      	str	r3, [r7, #32]
     d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d10:	2200      	movs	r2, #0
     d12:	4313      	orrs	r3, r2
     d14:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (r >= d) {
     d16:	68fa      	ldr	r2, [r7, #12]
     d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d1a:	429a      	cmp	r2, r3
     d1c:	d81d      	bhi.n	d5a <long_division+0xd6>
     d1e:	68fa      	ldr	r2, [r7, #12]
     d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d22:	429a      	cmp	r2, r3
     d24:	d103      	bne.n	d2e <long_division+0xaa>
     d26:	68ba      	ldr	r2, [r7, #8]
     d28:	6a3b      	ldr	r3, [r7, #32]
     d2a:	429a      	cmp	r2, r3
     d2c:	d815      	bhi.n	d5a <long_division+0xd6>
			r = r - d;
     d2e:	6a3a      	ldr	r2, [r7, #32]
     d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d32:	603a      	str	r2, [r7, #0]
     d34:	607b      	str	r3, [r7, #4]
     d36:	68ba      	ldr	r2, [r7, #8]
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	6838      	ldr	r0, [r7, #0]
     d3c:	6879      	ldr	r1, [r7, #4]
     d3e:	1a80      	subs	r0, r0, r2
     d40:	4199      	sbcs	r1, r3
     d42:	1c02      	adds	r2, r0, #0
     d44:	1c0b      	adds	r3, r1, #0
     d46:	623a      	str	r2, [r7, #32]
     d48:	627b      	str	r3, [r7, #36]	; 0x24
			q |= bit_shift;
     d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     d4c:	69bb      	ldr	r3, [r7, #24]
     d4e:	4313      	orrs	r3, r2
     d50:	62bb      	str	r3, [r7, #40]	; 0x28
     d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     d54:	69fb      	ldr	r3, [r7, #28]
     d56:	4313      	orrs	r3, r2
     d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d5c:	3b01      	subs	r3, #1
     d5e:	637b      	str	r3, [r7, #52]	; 0x34
     d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d62:	2b00      	cmp	r3, #0
     d64:	daa0      	bge.n	ca8 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d68:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
     d6a:	1c18      	adds	r0, r3, #0
     d6c:	1c21      	adds	r1, r4, #0
     d6e:	46bd      	mov	sp, r7
     d70:	b00e      	add	sp, #56	; 0x38
     d72:	bdb0      	pop	{r4, r5, r7, pc}

00000d74 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d74:	b580      	push	{r7, lr}
     d76:	b086      	sub	sp, #24
     d78:	af00      	add	r7, sp, #0
     d7a:	60f8      	str	r0, [r7, #12]
     d7c:	60b9      	str	r1, [r7, #8]
     d7e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     d80:	1c3b      	adds	r3, r7, #0
     d82:	3316      	adds	r3, #22
     d84:	2200      	movs	r2, #0
     d86:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     d88:	68bb      	ldr	r3, [r7, #8]
     d8a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     d8c:	68bb      	ldr	r3, [r7, #8]
     d8e:	085a      	lsrs	r2, r3, #1
     d90:	68fb      	ldr	r3, [r7, #12]
     d92:	429a      	cmp	r2, r3
     d94:	d201      	bcs.n	d9a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d96:	2340      	movs	r3, #64	; 0x40
     d98:	e026      	b.n	de8 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     d9a:	68bb      	ldr	r3, [r7, #8]
     d9c:	085b      	lsrs	r3, r3, #1
     d9e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     da0:	e00a      	b.n	db8 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     da2:	693a      	ldr	r2, [r7, #16]
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	1ad3      	subs	r3, r2, r3
     da8:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     daa:	1c3b      	adds	r3, r7, #0
     dac:	3316      	adds	r3, #22
     dae:	881a      	ldrh	r2, [r3, #0]
     db0:	1c3b      	adds	r3, r7, #0
     db2:	3316      	adds	r3, #22
     db4:	3201      	adds	r2, #1
     db6:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     db8:	693a      	ldr	r2, [r7, #16]
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	429a      	cmp	r2, r3
     dbe:	d2f0      	bcs.n	da2 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     dc0:	1c3b      	adds	r3, r7, #0
     dc2:	3316      	adds	r3, #22
     dc4:	1c3a      	adds	r2, r7, #0
     dc6:	3216      	adds	r2, #22
     dc8:	8812      	ldrh	r2, [r2, #0]
     dca:	3a01      	subs	r2, #1
     dcc:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     dce:	1c3b      	adds	r3, r7, #0
     dd0:	3316      	adds	r3, #22
     dd2:	881b      	ldrh	r3, [r3, #0]
     dd4:	2bff      	cmp	r3, #255	; 0xff
     dd6:	d901      	bls.n	ddc <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dd8:	2340      	movs	r3, #64	; 0x40
     dda:	e005      	b.n	de8 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	1c3a      	adds	r2, r7, #0
     de0:	3216      	adds	r2, #22
     de2:	8812      	ldrh	r2, [r2, #0]
     de4:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     de6:	2300      	movs	r3, #0
	}
}
     de8:	1c18      	adds	r0, r3, #0
     dea:	46bd      	mov	sp, r7
     dec:	b006      	add	sp, #24
     dee:	bd80      	pop	{r7, pc}

00000df0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     df0:	b5f0      	push	{r4, r5, r6, r7, lr}
     df2:	b09d      	sub	sp, #116	; 0x74
     df4:	af00      	add	r7, sp, #0
     df6:	63f8      	str	r0, [r7, #60]	; 0x3c
     df8:	63b9      	str	r1, [r7, #56]	; 0x38
     dfa:	637a      	str	r2, [r7, #52]	; 0x34
     dfc:	1c3a      	adds	r2, r7, #0
     dfe:	3233      	adds	r2, #51	; 0x33
     e00:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     e02:	2300      	movs	r3, #0
     e04:	2400      	movs	r4, #0
     e06:	65bb      	str	r3, [r7, #88]	; 0x58
     e08:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
     e0a:	2300      	movs	r3, #0
     e0c:	2400      	movs	r4, #0
     e0e:	653b      	str	r3, [r7, #80]	; 0x50
     e10:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
     e12:	2300      	movs	r3, #0
     e14:	2400      	movs	r4, #0
     e16:	66bb      	str	r3, [r7, #104]	; 0x68
     e18:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     e1a:	2300      	movs	r3, #0
     e1c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e1e:	1c3b      	adds	r3, r7, #0
     e20:	3388      	adds	r3, #136	; 0x88
     e22:	781a      	ldrb	r2, [r3, #0]
     e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e26:	435a      	muls	r2, r3
     e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e2a:	429a      	cmp	r2, r3
     e2c:	d901      	bls.n	e32 <_sercom_get_async_baud_val+0x42>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e2e:	2340      	movs	r3, #64	; 0x40
     e30:	e0af      	b.n	f92 <_sercom_get_async_baud_val+0x1a2>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     e32:	1c3b      	adds	r3, r7, #0
     e34:	3333      	adds	r3, #51	; 0x33
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d143      	bne.n	ec4 <_sercom_get_async_baud_val+0xd4>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     e3c:	1c3b      	adds	r3, r7, #0
     e3e:	3388      	adds	r3, #136	; 0x88
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	b2db      	uxtb	r3, r3
     e44:	62bb      	str	r3, [r7, #40]	; 0x28
     e46:	2300      	movs	r3, #0
     e48:	62fb      	str	r3, [r7, #44]	; 0x2c
     e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e4c:	623b      	str	r3, [r7, #32]
     e4e:	2300      	movs	r3, #0
     e50:	627b      	str	r3, [r7, #36]	; 0x24
     e52:	4c55      	ldr	r4, [pc, #340]	; (fa8 <_sercom_get_async_baud_val+0x1b8>)
     e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     e58:	6a3a      	ldr	r2, [r7, #32]
     e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e5c:	47a0      	blx	r4
     e5e:	1c03      	adds	r3, r0, #0
     e60:	1c0c      	adds	r4, r1, #0
     e62:	001b      	movs	r3, r3
     e64:	64fb      	str	r3, [r7, #76]	; 0x4c
     e66:	2300      	movs	r3, #0
     e68:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
     e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e6c:	61bb      	str	r3, [r7, #24]
     e6e:	2300      	movs	r3, #0
     e70:	61fb      	str	r3, [r7, #28]
     e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e74:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
     e76:	1c18      	adds	r0, r3, #0
     e78:	1c21      	adds	r1, r4, #0
     e7a:	69ba      	ldr	r2, [r7, #24]
     e7c:	69fb      	ldr	r3, [r7, #28]
     e7e:	4c4b      	ldr	r4, [pc, #300]	; (fac <_sercom_get_async_baud_val+0x1bc>)
     e80:	47a0      	blx	r4
     e82:	1c03      	adds	r3, r0, #0
     e84:	1c0c      	adds	r4, r1, #0
     e86:	65bb      	str	r3, [r7, #88]	; 0x58
     e88:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
     e8a:	4a46      	ldr	r2, [pc, #280]	; (fa4 <_sercom_get_async_baud_val+0x1b4>)
     e8c:	4944      	ldr	r1, [pc, #272]	; (fa0 <_sercom_get_async_baud_val+0x1b0>)
     e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     e90:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     e92:	1c0d      	adds	r5, r1, #0
     e94:	1c16      	adds	r6, r2, #0
     e96:	1aed      	subs	r5, r5, r3
     e98:	41a6      	sbcs	r6, r4
     e9a:	1c2b      	adds	r3, r5, #0
     e9c:	1c34      	adds	r4, r6, #0
     e9e:	653b      	str	r3, [r7, #80]	; 0x50
     ea0:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
     ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     ea4:	0c1b      	lsrs	r3, r3, #16
     ea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     ea8:	0412      	lsls	r2, r2, #16
     eaa:	617a      	str	r2, [r7, #20]
     eac:	697e      	ldr	r6, [r7, #20]
     eae:	431e      	orrs	r6, r3
     eb0:	617e      	str	r6, [r7, #20]
     eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     eb4:	041b      	lsls	r3, r3, #16
     eb6:	613b      	str	r3, [r7, #16]
     eb8:	697a      	ldr	r2, [r7, #20]
     eba:	0013      	movs	r3, r2
     ebc:	66bb      	str	r3, [r7, #104]	; 0x68
     ebe:	2300      	movs	r3, #0
     ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
     ec2:	e060      	b.n	f86 <_sercom_get_async_baud_val+0x196>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ec4:	1c3b      	adds	r3, r7, #0
     ec6:	3333      	adds	r3, #51	; 0x33
     ec8:	781b      	ldrb	r3, [r3, #0]
     eca:	2b01      	cmp	r3, #1
     ecc:	d15b      	bne.n	f86 <_sercom_get_async_baud_val+0x196>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     ece:	1c3b      	adds	r3, r7, #0
     ed0:	3367      	adds	r3, #103	; 0x67
     ed2:	2200      	movs	r2, #0
     ed4:	701a      	strb	r2, [r3, #0]
     ed6:	e040      	b.n	f5a <_sercom_get_async_baud_val+0x16a>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     eda:	1c1d      	adds	r5, r3, #0
     edc:	2300      	movs	r3, #0
     ede:	1c1e      	adds	r6, r3, #0
     ee0:	0f6b      	lsrs	r3, r5, #29
     ee2:	00f2      	lsls	r2, r6, #3
     ee4:	4313      	orrs	r3, r2
     ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
     ee8:	00eb      	lsls	r3, r5, #3
     eea:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
     eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     eee:	60bb      	str	r3, [r7, #8]
     ef0:	2300      	movs	r3, #0
     ef2:	60fb      	str	r3, [r7, #12]
     ef4:	1c3b      	adds	r3, r7, #0
     ef6:	3388      	adds	r3, #136	; 0x88
     ef8:	781b      	ldrb	r3, [r3, #0]
     efa:	b2db      	uxtb	r3, r3
     efc:	603b      	str	r3, [r7, #0]
     efe:	2300      	movs	r3, #0
     f00:	607b      	str	r3, [r7, #4]
     f02:	4c29      	ldr	r4, [pc, #164]	; (fa8 <_sercom_get_async_baud_val+0x1b8>)
     f04:	68b8      	ldr	r0, [r7, #8]
     f06:	68f9      	ldr	r1, [r7, #12]
     f08:	683a      	ldr	r2, [r7, #0]
     f0a:	687b      	ldr	r3, [r7, #4]
     f0c:	47a0      	blx	r4
     f0e:	1c03      	adds	r3, r0, #0
     f10:	1c0c      	adds	r4, r1, #0
     f12:	643b      	str	r3, [r7, #64]	; 0x40
     f14:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
     f16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
     f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f1c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     f1e:	1c08      	adds	r0, r1, #0
     f20:	1c11      	adds	r1, r2, #0
     f22:	1c1a      	adds	r2, r3, #0
     f24:	1c23      	adds	r3, r4, #0
     f26:	4c21      	ldr	r4, [pc, #132]	; (fac <_sercom_get_async_baud_val+0x1bc>)
     f28:	47a0      	blx	r4
     f2a:	1c03      	adds	r3, r0, #0
     f2c:	1c0c      	adds	r4, r1, #0
     f2e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
     f30:	1c3b      	adds	r3, r7, #0
     f32:	3367      	adds	r3, #103	; 0x67
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     f38:	1ad3      	subs	r3, r2, r3
     f3a:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
     f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     f3e:	08db      	lsrs	r3, r3, #3
     f40:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
     f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     f44:	4b1a      	ldr	r3, [pc, #104]	; (fb0 <_sercom_get_async_baud_val+0x1c0>)
     f46:	429a      	cmp	r2, r3
     f48:	d800      	bhi.n	f4c <_sercom_get_async_baud_val+0x15c>
				break;
     f4a:	e00b      	b.n	f64 <_sercom_get_async_baud_val+0x174>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     f4c:	1c3b      	adds	r3, r7, #0
     f4e:	3367      	adds	r3, #103	; 0x67
     f50:	781a      	ldrb	r2, [r3, #0]
     f52:	1c3b      	adds	r3, r7, #0
     f54:	3367      	adds	r3, #103	; 0x67
     f56:	3201      	adds	r2, #1
     f58:	701a      	strb	r2, [r3, #0]
     f5a:	1c3b      	adds	r3, r7, #0
     f5c:	3367      	adds	r3, #103	; 0x67
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	2b07      	cmp	r3, #7
     f62:	d9b9      	bls.n	ed8 <_sercom_get_async_baud_val+0xe8>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     f64:	1c3b      	adds	r3, r7, #0
     f66:	3367      	adds	r3, #103	; 0x67
     f68:	781b      	ldrb	r3, [r3, #0]
     f6a:	2b08      	cmp	r3, #8
     f6c:	d101      	bne.n	f72 <_sercom_get_async_baud_val+0x182>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f6e:	2340      	movs	r3, #64	; 0x40
     f70:	e00f      	b.n	f92 <_sercom_get_async_baud_val+0x1a2>
		}
		baud_calculated = baud_int | (baud_fp << 13);
     f72:	1c3b      	adds	r3, r7, #0
     f74:	3367      	adds	r3, #103	; 0x67
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	035b      	lsls	r3, r3, #13
     f7a:	1c1a      	adds	r2, r3, #0
     f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     f7e:	4313      	orrs	r3, r2
     f80:	66bb      	str	r3, [r7, #104]	; 0x68
     f82:	2300      	movs	r3, #0
     f84:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
     f86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     f88:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     f8a:	b29a      	uxth	r2, r3
     f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f8e:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     f90:	2300      	movs	r3, #0
}
     f92:	1c18      	adds	r0, r3, #0
     f94:	46bd      	mov	sp, r7
     f96:	b01d      	add	sp, #116	; 0x74
     f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	46c0      	nop			; (mov r8, r8)
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	00000000 	.word	0x00000000
     fa4:	00000001 	.word	0x00000001
     fa8:	000053d1 	.word	0x000053d1
     fac:	00000c85 	.word	0x00000c85
     fb0:	00001fff 	.word	0x00001fff
     fb4:	46c0      	nop			; (mov r8, r8)
     fb6:	46c0      	nop			; (mov r8, r8)

00000fb8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fb8:	b580      	push	{r7, lr}
     fba:	b084      	sub	sp, #16
     fbc:	af00      	add	r7, sp, #0
     fbe:	1c0a      	adds	r2, r1, #0
     fc0:	1dfb      	adds	r3, r7, #7
     fc2:	1c01      	adds	r1, r0, #0
     fc4:	7019      	strb	r1, [r3, #0]
     fc6:	1dbb      	adds	r3, r7, #6
     fc8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     fca:	4b1a      	ldr	r3, [pc, #104]	; (1034 <sercom_set_gclk_generator+0x7c>)
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	2201      	movs	r2, #1
     fd0:	4053      	eors	r3, r2
     fd2:	b2db      	uxtb	r3, r3
     fd4:	2b00      	cmp	r3, #0
     fd6:	d103      	bne.n	fe0 <sercom_set_gclk_generator+0x28>
     fd8:	1dbb      	adds	r3, r7, #6
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	2b00      	cmp	r3, #0
     fde:	d01b      	beq.n	1018 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     fe0:	1c3b      	adds	r3, r7, #0
     fe2:	330c      	adds	r3, #12
     fe4:	1c18      	adds	r0, r3, #0
     fe6:	4b14      	ldr	r3, [pc, #80]	; (1038 <sercom_set_gclk_generator+0x80>)
     fe8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     fea:	1c3b      	adds	r3, r7, #0
     fec:	330c      	adds	r3, #12
     fee:	1dfa      	adds	r2, r7, #7
     ff0:	7812      	ldrb	r2, [r2, #0]
     ff2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     ff4:	1c3b      	adds	r3, r7, #0
     ff6:	330c      	adds	r3, #12
     ff8:	2013      	movs	r0, #19
     ffa:	1c19      	adds	r1, r3, #0
     ffc:	4b0f      	ldr	r3, [pc, #60]	; (103c <sercom_set_gclk_generator+0x84>)
     ffe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1000:	2013      	movs	r0, #19
    1002:	4b0f      	ldr	r3, [pc, #60]	; (1040 <sercom_set_gclk_generator+0x88>)
    1004:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    1006:	4b0b      	ldr	r3, [pc, #44]	; (1034 <sercom_set_gclk_generator+0x7c>)
    1008:	1dfa      	adds	r2, r7, #7
    100a:	7812      	ldrb	r2, [r2, #0]
    100c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    100e:	4b09      	ldr	r3, [pc, #36]	; (1034 <sercom_set_gclk_generator+0x7c>)
    1010:	2201      	movs	r2, #1
    1012:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1014:	2300      	movs	r3, #0
    1016:	e008      	b.n	102a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <sercom_set_gclk_generator+0x7c>)
    101a:	785b      	ldrb	r3, [r3, #1]
    101c:	1dfa      	adds	r2, r7, #7
    101e:	7812      	ldrb	r2, [r2, #0]
    1020:	429a      	cmp	r2, r3
    1022:	d101      	bne.n	1028 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    1024:	2300      	movs	r3, #0
    1026:	e000      	b.n	102a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1028:	231d      	movs	r3, #29
}
    102a:	1c18      	adds	r0, r3, #0
    102c:	46bd      	mov	sp, r7
    102e:	b004      	add	sp, #16
    1030:	bd80      	pop	{r7, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20000094 	.word	0x20000094
    1038:	00000c71 	.word	0x00000c71
    103c:	00004941 	.word	0x00004941
    1040:	00004981 	.word	0x00004981

00001044 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1044:	b580      	push	{r7, lr}
    1046:	b082      	sub	sp, #8
    1048:	af00      	add	r7, sp, #0
    104a:	6078      	str	r0, [r7, #4]
    104c:	1c0a      	adds	r2, r1, #0
    104e:	1cfb      	adds	r3, r7, #3
    1050:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	4a4d      	ldr	r2, [pc, #308]	; (118c <_sercom_get_default_pad+0x148>)
    1056:	4293      	cmp	r3, r2
    1058:	d03f      	beq.n	10da <_sercom_get_default_pad+0x96>
    105a:	4a4c      	ldr	r2, [pc, #304]	; (118c <_sercom_get_default_pad+0x148>)
    105c:	4293      	cmp	r3, r2
    105e:	d806      	bhi.n	106e <_sercom_get_default_pad+0x2a>
    1060:	4a4b      	ldr	r2, [pc, #300]	; (1190 <_sercom_get_default_pad+0x14c>)
    1062:	4293      	cmp	r3, r2
    1064:	d00f      	beq.n	1086 <_sercom_get_default_pad+0x42>
    1066:	4a4b      	ldr	r2, [pc, #300]	; (1194 <_sercom_get_default_pad+0x150>)
    1068:	4293      	cmp	r3, r2
    106a:	d021      	beq.n	10b0 <_sercom_get_default_pad+0x6c>
    106c:	e089      	b.n	1182 <_sercom_get_default_pad+0x13e>
    106e:	4a4a      	ldr	r2, [pc, #296]	; (1198 <_sercom_get_default_pad+0x154>)
    1070:	4293      	cmp	r3, r2
    1072:	d100      	bne.n	1076 <_sercom_get_default_pad+0x32>
    1074:	e05b      	b.n	112e <_sercom_get_default_pad+0xea>
    1076:	4a49      	ldr	r2, [pc, #292]	; (119c <_sercom_get_default_pad+0x158>)
    1078:	4293      	cmp	r3, r2
    107a:	d100      	bne.n	107e <_sercom_get_default_pad+0x3a>
    107c:	e06c      	b.n	1158 <_sercom_get_default_pad+0x114>
    107e:	4a48      	ldr	r2, [pc, #288]	; (11a0 <_sercom_get_default_pad+0x15c>)
    1080:	4293      	cmp	r3, r2
    1082:	d03f      	beq.n	1104 <_sercom_get_default_pad+0xc0>
    1084:	e07d      	b.n	1182 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1086:	1cfb      	adds	r3, r7, #3
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	2b01      	cmp	r3, #1
    108c:	d00a      	beq.n	10a4 <_sercom_get_default_pad+0x60>
    108e:	dc02      	bgt.n	1096 <_sercom_get_default_pad+0x52>
    1090:	2b00      	cmp	r3, #0
    1092:	d005      	beq.n	10a0 <_sercom_get_default_pad+0x5c>
    1094:	e075      	b.n	1182 <_sercom_get_default_pad+0x13e>
    1096:	2b02      	cmp	r3, #2
    1098:	d006      	beq.n	10a8 <_sercom_get_default_pad+0x64>
    109a:	2b03      	cmp	r3, #3
    109c:	d006      	beq.n	10ac <_sercom_get_default_pad+0x68>
    109e:	e070      	b.n	1182 <_sercom_get_default_pad+0x13e>
    10a0:	4b40      	ldr	r3, [pc, #256]	; (11a4 <_sercom_get_default_pad+0x160>)
    10a2:	e06f      	b.n	1184 <_sercom_get_default_pad+0x140>
    10a4:	4b40      	ldr	r3, [pc, #256]	; (11a8 <_sercom_get_default_pad+0x164>)
    10a6:	e06d      	b.n	1184 <_sercom_get_default_pad+0x140>
    10a8:	4b40      	ldr	r3, [pc, #256]	; (11ac <_sercom_get_default_pad+0x168>)
    10aa:	e06b      	b.n	1184 <_sercom_get_default_pad+0x140>
    10ac:	4b40      	ldr	r3, [pc, #256]	; (11b0 <_sercom_get_default_pad+0x16c>)
    10ae:	e069      	b.n	1184 <_sercom_get_default_pad+0x140>
    10b0:	1cfb      	adds	r3, r7, #3
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d00a      	beq.n	10ce <_sercom_get_default_pad+0x8a>
    10b8:	dc02      	bgt.n	10c0 <_sercom_get_default_pad+0x7c>
    10ba:	2b00      	cmp	r3, #0
    10bc:	d005      	beq.n	10ca <_sercom_get_default_pad+0x86>
    10be:	e060      	b.n	1182 <_sercom_get_default_pad+0x13e>
    10c0:	2b02      	cmp	r3, #2
    10c2:	d006      	beq.n	10d2 <_sercom_get_default_pad+0x8e>
    10c4:	2b03      	cmp	r3, #3
    10c6:	d006      	beq.n	10d6 <_sercom_get_default_pad+0x92>
    10c8:	e05b      	b.n	1182 <_sercom_get_default_pad+0x13e>
    10ca:	2303      	movs	r3, #3
    10cc:	e05a      	b.n	1184 <_sercom_get_default_pad+0x140>
    10ce:	4b39      	ldr	r3, [pc, #228]	; (11b4 <_sercom_get_default_pad+0x170>)
    10d0:	e058      	b.n	1184 <_sercom_get_default_pad+0x140>
    10d2:	4b39      	ldr	r3, [pc, #228]	; (11b8 <_sercom_get_default_pad+0x174>)
    10d4:	e056      	b.n	1184 <_sercom_get_default_pad+0x140>
    10d6:	4b39      	ldr	r3, [pc, #228]	; (11bc <_sercom_get_default_pad+0x178>)
    10d8:	e054      	b.n	1184 <_sercom_get_default_pad+0x140>
    10da:	1cfb      	adds	r3, r7, #3
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2b01      	cmp	r3, #1
    10e0:	d00a      	beq.n	10f8 <_sercom_get_default_pad+0xb4>
    10e2:	dc02      	bgt.n	10ea <_sercom_get_default_pad+0xa6>
    10e4:	2b00      	cmp	r3, #0
    10e6:	d005      	beq.n	10f4 <_sercom_get_default_pad+0xb0>
    10e8:	e04b      	b.n	1182 <_sercom_get_default_pad+0x13e>
    10ea:	2b02      	cmp	r3, #2
    10ec:	d006      	beq.n	10fc <_sercom_get_default_pad+0xb8>
    10ee:	2b03      	cmp	r3, #3
    10f0:	d006      	beq.n	1100 <_sercom_get_default_pad+0xbc>
    10f2:	e046      	b.n	1182 <_sercom_get_default_pad+0x13e>
    10f4:	4b32      	ldr	r3, [pc, #200]	; (11c0 <_sercom_get_default_pad+0x17c>)
    10f6:	e045      	b.n	1184 <_sercom_get_default_pad+0x140>
    10f8:	4b32      	ldr	r3, [pc, #200]	; (11c4 <_sercom_get_default_pad+0x180>)
    10fa:	e043      	b.n	1184 <_sercom_get_default_pad+0x140>
    10fc:	4b32      	ldr	r3, [pc, #200]	; (11c8 <_sercom_get_default_pad+0x184>)
    10fe:	e041      	b.n	1184 <_sercom_get_default_pad+0x140>
    1100:	4b32      	ldr	r3, [pc, #200]	; (11cc <_sercom_get_default_pad+0x188>)
    1102:	e03f      	b.n	1184 <_sercom_get_default_pad+0x140>
    1104:	1cfb      	adds	r3, r7, #3
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	2b01      	cmp	r3, #1
    110a:	d00a      	beq.n	1122 <_sercom_get_default_pad+0xde>
    110c:	dc02      	bgt.n	1114 <_sercom_get_default_pad+0xd0>
    110e:	2b00      	cmp	r3, #0
    1110:	d005      	beq.n	111e <_sercom_get_default_pad+0xda>
    1112:	e036      	b.n	1182 <_sercom_get_default_pad+0x13e>
    1114:	2b02      	cmp	r3, #2
    1116:	d006      	beq.n	1126 <_sercom_get_default_pad+0xe2>
    1118:	2b03      	cmp	r3, #3
    111a:	d006      	beq.n	112a <_sercom_get_default_pad+0xe6>
    111c:	e031      	b.n	1182 <_sercom_get_default_pad+0x13e>
    111e:	4b2c      	ldr	r3, [pc, #176]	; (11d0 <_sercom_get_default_pad+0x18c>)
    1120:	e030      	b.n	1184 <_sercom_get_default_pad+0x140>
    1122:	4b2c      	ldr	r3, [pc, #176]	; (11d4 <_sercom_get_default_pad+0x190>)
    1124:	e02e      	b.n	1184 <_sercom_get_default_pad+0x140>
    1126:	4b2c      	ldr	r3, [pc, #176]	; (11d8 <_sercom_get_default_pad+0x194>)
    1128:	e02c      	b.n	1184 <_sercom_get_default_pad+0x140>
    112a:	4b2c      	ldr	r3, [pc, #176]	; (11dc <_sercom_get_default_pad+0x198>)
    112c:	e02a      	b.n	1184 <_sercom_get_default_pad+0x140>
    112e:	1cfb      	adds	r3, r7, #3
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b01      	cmp	r3, #1
    1134:	d00a      	beq.n	114c <_sercom_get_default_pad+0x108>
    1136:	dc02      	bgt.n	113e <_sercom_get_default_pad+0xfa>
    1138:	2b00      	cmp	r3, #0
    113a:	d005      	beq.n	1148 <_sercom_get_default_pad+0x104>
    113c:	e021      	b.n	1182 <_sercom_get_default_pad+0x13e>
    113e:	2b02      	cmp	r3, #2
    1140:	d006      	beq.n	1150 <_sercom_get_default_pad+0x10c>
    1142:	2b03      	cmp	r3, #3
    1144:	d006      	beq.n	1154 <_sercom_get_default_pad+0x110>
    1146:	e01c      	b.n	1182 <_sercom_get_default_pad+0x13e>
    1148:	4b25      	ldr	r3, [pc, #148]	; (11e0 <_sercom_get_default_pad+0x19c>)
    114a:	e01b      	b.n	1184 <_sercom_get_default_pad+0x140>
    114c:	4b25      	ldr	r3, [pc, #148]	; (11e4 <_sercom_get_default_pad+0x1a0>)
    114e:	e019      	b.n	1184 <_sercom_get_default_pad+0x140>
    1150:	4b25      	ldr	r3, [pc, #148]	; (11e8 <_sercom_get_default_pad+0x1a4>)
    1152:	e017      	b.n	1184 <_sercom_get_default_pad+0x140>
    1154:	4b25      	ldr	r3, [pc, #148]	; (11ec <_sercom_get_default_pad+0x1a8>)
    1156:	e015      	b.n	1184 <_sercom_get_default_pad+0x140>
    1158:	1cfb      	adds	r3, r7, #3
    115a:	781b      	ldrb	r3, [r3, #0]
    115c:	2b01      	cmp	r3, #1
    115e:	d00a      	beq.n	1176 <_sercom_get_default_pad+0x132>
    1160:	dc02      	bgt.n	1168 <_sercom_get_default_pad+0x124>
    1162:	2b00      	cmp	r3, #0
    1164:	d005      	beq.n	1172 <_sercom_get_default_pad+0x12e>
    1166:	e00c      	b.n	1182 <_sercom_get_default_pad+0x13e>
    1168:	2b02      	cmp	r3, #2
    116a:	d006      	beq.n	117a <_sercom_get_default_pad+0x136>
    116c:	2b03      	cmp	r3, #3
    116e:	d006      	beq.n	117e <_sercom_get_default_pad+0x13a>
    1170:	e007      	b.n	1182 <_sercom_get_default_pad+0x13e>
    1172:	4b1f      	ldr	r3, [pc, #124]	; (11f0 <_sercom_get_default_pad+0x1ac>)
    1174:	e006      	b.n	1184 <_sercom_get_default_pad+0x140>
    1176:	4b1f      	ldr	r3, [pc, #124]	; (11f4 <_sercom_get_default_pad+0x1b0>)
    1178:	e004      	b.n	1184 <_sercom_get_default_pad+0x140>
    117a:	4b1f      	ldr	r3, [pc, #124]	; (11f8 <_sercom_get_default_pad+0x1b4>)
    117c:	e002      	b.n	1184 <_sercom_get_default_pad+0x140>
    117e:	4b1f      	ldr	r3, [pc, #124]	; (11fc <_sercom_get_default_pad+0x1b8>)
    1180:	e000      	b.n	1184 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1182:	2300      	movs	r3, #0
}
    1184:	1c18      	adds	r0, r3, #0
    1186:	46bd      	mov	sp, r7
    1188:	b002      	add	sp, #8
    118a:	bd80      	pop	{r7, pc}
    118c:	42001000 	.word	0x42001000
    1190:	42000800 	.word	0x42000800
    1194:	42000c00 	.word	0x42000c00
    1198:	42001800 	.word	0x42001800
    119c:	42001c00 	.word	0x42001c00
    11a0:	42001400 	.word	0x42001400
    11a4:	00040003 	.word	0x00040003
    11a8:	00050003 	.word	0x00050003
    11ac:	00060003 	.word	0x00060003
    11b0:	00070003 	.word	0x00070003
    11b4:	00010003 	.word	0x00010003
    11b8:	001e0003 	.word	0x001e0003
    11bc:	001f0003 	.word	0x001f0003
    11c0:	00080003 	.word	0x00080003
    11c4:	00090003 	.word	0x00090003
    11c8:	000a0003 	.word	0x000a0003
    11cc:	000b0003 	.word	0x000b0003
    11d0:	00100003 	.word	0x00100003
    11d4:	00110003 	.word	0x00110003
    11d8:	00120003 	.word	0x00120003
    11dc:	00130003 	.word	0x00130003
    11e0:	000c0003 	.word	0x000c0003
    11e4:	000d0003 	.word	0x000d0003
    11e8:	000e0003 	.word	0x000e0003
    11ec:	000f0003 	.word	0x000f0003
    11f0:	00160003 	.word	0x00160003
    11f4:	00170003 	.word	0x00170003
    11f8:	00180003 	.word	0x00180003
    11fc:	00190003 	.word	0x00190003

00001200 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1200:	b590      	push	{r4, r7, lr}
    1202:	b08b      	sub	sp, #44	; 0x2c
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1208:	1c3b      	adds	r3, r7, #0
    120a:	330c      	adds	r3, #12
    120c:	4a0e      	ldr	r2, [pc, #56]	; (1248 <_sercom_get_sercom_inst_index+0x48>)
    120e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1210:	c313      	stmia	r3!, {r0, r1, r4}
    1212:	ca13      	ldmia	r2!, {r0, r1, r4}
    1214:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1216:	2300      	movs	r3, #0
    1218:	627b      	str	r3, [r7, #36]	; 0x24
    121a:	e00d      	b.n	1238 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    121c:	687a      	ldr	r2, [r7, #4]
    121e:	1c3b      	adds	r3, r7, #0
    1220:	330c      	adds	r3, #12
    1222:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1224:	0089      	lsls	r1, r1, #2
    1226:	58cb      	ldr	r3, [r1, r3]
    1228:	429a      	cmp	r2, r3
    122a:	d102      	bne.n	1232 <_sercom_get_sercom_inst_index+0x32>
			return i;
    122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    122e:	b2db      	uxtb	r3, r3
    1230:	e006      	b.n	1240 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1234:	3301      	adds	r3, #1
    1236:	627b      	str	r3, [r7, #36]	; 0x24
    1238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    123a:	2b05      	cmp	r3, #5
    123c:	d9ee      	bls.n	121c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    123e:	2300      	movs	r3, #0
}
    1240:	1c18      	adds	r0, r3, #0
    1242:	46bd      	mov	sp, r7
    1244:	b00b      	add	sp, #44	; 0x2c
    1246:	bd90      	pop	{r4, r7, pc}
    1248:	000072e8 	.word	0x000072e8

0000124c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    124c:	b580      	push	{r7, lr}
    124e:	b082      	sub	sp, #8
    1250:	af00      	add	r7, sp, #0
    1252:	1c02      	adds	r2, r0, #0
    1254:	1dfb      	adds	r3, r7, #7
    1256:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1258:	46bd      	mov	sp, r7
    125a:	b002      	add	sp, #8
    125c:	bd80      	pop	{r7, pc}
    125e:	46c0      	nop			; (mov r8, r8)

00001260 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1260:	b580      	push	{r7, lr}
    1262:	b084      	sub	sp, #16
    1264:	af00      	add	r7, sp, #0
    1266:	1c02      	adds	r2, r0, #0
    1268:	6039      	str	r1, [r7, #0]
    126a:	1dfb      	adds	r3, r7, #7
    126c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    126e:	4b13      	ldr	r3, [pc, #76]	; (12bc <_sercom_set_handler+0x5c>)
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	2201      	movs	r2, #1
    1274:	4053      	eors	r3, r2
    1276:	b2db      	uxtb	r3, r3
    1278:	2b00      	cmp	r3, #0
    127a:	d015      	beq.n	12a8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    127c:	2300      	movs	r3, #0
    127e:	60fb      	str	r3, [r7, #12]
    1280:	e00c      	b.n	129c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <_sercom_set_handler+0x60>)
    1284:	68fa      	ldr	r2, [r7, #12]
    1286:	0092      	lsls	r2, r2, #2
    1288:	490e      	ldr	r1, [pc, #56]	; (12c4 <_sercom_set_handler+0x64>)
    128a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    128c:	4b0e      	ldr	r3, [pc, #56]	; (12c8 <_sercom_set_handler+0x68>)
    128e:	68fa      	ldr	r2, [r7, #12]
    1290:	0092      	lsls	r2, r2, #2
    1292:	2100      	movs	r1, #0
    1294:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1296:	68fb      	ldr	r3, [r7, #12]
    1298:	3301      	adds	r3, #1
    129a:	60fb      	str	r3, [r7, #12]
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	2b05      	cmp	r3, #5
    12a0:	d9ef      	bls.n	1282 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    12a2:	4b06      	ldr	r3, [pc, #24]	; (12bc <_sercom_set_handler+0x5c>)
    12a4:	2201      	movs	r2, #1
    12a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    12a8:	1dfb      	adds	r3, r7, #7
    12aa:	781a      	ldrb	r2, [r3, #0]
    12ac:	4b04      	ldr	r3, [pc, #16]	; (12c0 <_sercom_set_handler+0x60>)
    12ae:	0092      	lsls	r2, r2, #2
    12b0:	6839      	ldr	r1, [r7, #0]
    12b2:	50d1      	str	r1, [r2, r3]
}
    12b4:	46bd      	mov	sp, r7
    12b6:	b004      	add	sp, #16
    12b8:	bd80      	pop	{r7, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	20000098 	.word	0x20000098
    12c0:	2000009c 	.word	0x2000009c
    12c4:	0000124d 	.word	0x0000124d
    12c8:	20003ce0 	.word	0x20003ce0

000012cc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    12cc:	b590      	push	{r4, r7, lr}
    12ce:	b085      	sub	sp, #20
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12d4:	1c3a      	adds	r2, r7, #0
    12d6:	3208      	adds	r2, #8
    12d8:	4b0e      	ldr	r3, [pc, #56]	; (1314 <_sercom_get_interrupt_vector+0x48>)
    12da:	1c11      	adds	r1, r2, #0
    12dc:	1c1a      	adds	r2, r3, #0
    12de:	2306      	movs	r3, #6
    12e0:	1c08      	adds	r0, r1, #0
    12e2:	1c11      	adds	r1, r2, #0
    12e4:	1c1a      	adds	r2, r3, #0
    12e6:	4b0c      	ldr	r3, [pc, #48]	; (1318 <_sercom_get_interrupt_vector+0x4c>)
    12e8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12ea:	1c3c      	adds	r4, r7, #0
    12ec:	340f      	adds	r4, #15
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	1c18      	adds	r0, r3, #0
    12f2:	4b0a      	ldr	r3, [pc, #40]	; (131c <_sercom_get_interrupt_vector+0x50>)
    12f4:	4798      	blx	r3
    12f6:	1c03      	adds	r3, r0, #0
    12f8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    12fa:	1c3b      	adds	r3, r7, #0
    12fc:	330f      	adds	r3, #15
    12fe:	781b      	ldrb	r3, [r3, #0]
    1300:	1c3a      	adds	r2, r7, #0
    1302:	3208      	adds	r2, #8
    1304:	5cd3      	ldrb	r3, [r2, r3]
    1306:	b2db      	uxtb	r3, r3
    1308:	b25b      	sxtb	r3, r3
}
    130a:	1c18      	adds	r0, r3, #0
    130c:	46bd      	mov	sp, r7
    130e:	b005      	add	sp, #20
    1310:	bd90      	pop	{r4, r7, pc}
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	00007300 	.word	0x00007300
    1318:	0000629d 	.word	0x0000629d
    131c:	00001201 	.word	0x00001201

00001320 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1320:	b580      	push	{r7, lr}
    1322:	af00      	add	r7, sp, #0
    1324:	4b02      	ldr	r3, [pc, #8]	; (1330 <SERCOM0_Handler+0x10>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	2000      	movs	r0, #0
    132a:	4798      	blx	r3
    132c:	46bd      	mov	sp, r7
    132e:	bd80      	pop	{r7, pc}
    1330:	2000009c 	.word	0x2000009c

00001334 <SERCOM1_Handler>:
    1334:	b580      	push	{r7, lr}
    1336:	af00      	add	r7, sp, #0
    1338:	4b02      	ldr	r3, [pc, #8]	; (1344 <SERCOM1_Handler+0x10>)
    133a:	685b      	ldr	r3, [r3, #4]
    133c:	2001      	movs	r0, #1
    133e:	4798      	blx	r3
    1340:	46bd      	mov	sp, r7
    1342:	bd80      	pop	{r7, pc}
    1344:	2000009c 	.word	0x2000009c

00001348 <SERCOM2_Handler>:
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
    134c:	4b02      	ldr	r3, [pc, #8]	; (1358 <SERCOM2_Handler+0x10>)
    134e:	689b      	ldr	r3, [r3, #8]
    1350:	2002      	movs	r0, #2
    1352:	4798      	blx	r3
    1354:	46bd      	mov	sp, r7
    1356:	bd80      	pop	{r7, pc}
    1358:	2000009c 	.word	0x2000009c

0000135c <SERCOM3_Handler>:
    135c:	b580      	push	{r7, lr}
    135e:	af00      	add	r7, sp, #0
    1360:	4b02      	ldr	r3, [pc, #8]	; (136c <SERCOM3_Handler+0x10>)
    1362:	68db      	ldr	r3, [r3, #12]
    1364:	2003      	movs	r0, #3
    1366:	4798      	blx	r3
    1368:	46bd      	mov	sp, r7
    136a:	bd80      	pop	{r7, pc}
    136c:	2000009c 	.word	0x2000009c

00001370 <SERCOM4_Handler>:
    1370:	b580      	push	{r7, lr}
    1372:	af00      	add	r7, sp, #0
    1374:	4b02      	ldr	r3, [pc, #8]	; (1380 <SERCOM4_Handler+0x10>)
    1376:	691b      	ldr	r3, [r3, #16]
    1378:	2004      	movs	r0, #4
    137a:	4798      	blx	r3
    137c:	46bd      	mov	sp, r7
    137e:	bd80      	pop	{r7, pc}
    1380:	2000009c 	.word	0x2000009c

00001384 <SERCOM5_Handler>:
    1384:	b580      	push	{r7, lr}
    1386:	af00      	add	r7, sp, #0
    1388:	4b02      	ldr	r3, [pc, #8]	; (1394 <SERCOM5_Handler+0x10>)
    138a:	695b      	ldr	r3, [r3, #20]
    138c:	2005      	movs	r0, #5
    138e:	4798      	blx	r3
    1390:	46bd      	mov	sp, r7
    1392:	bd80      	pop	{r7, pc}
    1394:	2000009c 	.word	0x2000009c

00001398 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1398:	b580      	push	{r7, lr}
    139a:	b082      	sub	sp, #8
    139c:	af00      	add	r7, sp, #0
    139e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	2200      	movs	r2, #0
    13a4:	701a      	strb	r2, [r3, #0]
}
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}

000013ac <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b082      	sub	sp, #8
    13b0:	af00      	add	r7, sp, #0
    13b2:	1c02      	adds	r2, r0, #0
    13b4:	6039      	str	r1, [r7, #0]
    13b6:	1dfb      	adds	r3, r7, #7
    13b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    13ba:	1dfb      	adds	r3, r7, #7
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	2b01      	cmp	r3, #1
    13c0:	d00a      	beq.n	13d8 <system_apb_clock_set_mask+0x2c>
    13c2:	2b02      	cmp	r3, #2
    13c4:	d00f      	beq.n	13e6 <system_apb_clock_set_mask+0x3a>
    13c6:	2b00      	cmp	r3, #0
    13c8:	d114      	bne.n	13f4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    13ca:	4b0e      	ldr	r3, [pc, #56]	; (1404 <system_apb_clock_set_mask+0x58>)
    13cc:	4a0d      	ldr	r2, [pc, #52]	; (1404 <system_apb_clock_set_mask+0x58>)
    13ce:	6991      	ldr	r1, [r2, #24]
    13d0:	683a      	ldr	r2, [r7, #0]
    13d2:	430a      	orrs	r2, r1
    13d4:	619a      	str	r2, [r3, #24]
			break;
    13d6:	e00f      	b.n	13f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    13d8:	4b0a      	ldr	r3, [pc, #40]	; (1404 <system_apb_clock_set_mask+0x58>)
    13da:	4a0a      	ldr	r2, [pc, #40]	; (1404 <system_apb_clock_set_mask+0x58>)
    13dc:	69d1      	ldr	r1, [r2, #28]
    13de:	683a      	ldr	r2, [r7, #0]
    13e0:	430a      	orrs	r2, r1
    13e2:	61da      	str	r2, [r3, #28]
			break;
    13e4:	e008      	b.n	13f8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    13e6:	4b07      	ldr	r3, [pc, #28]	; (1404 <system_apb_clock_set_mask+0x58>)
    13e8:	4a06      	ldr	r2, [pc, #24]	; (1404 <system_apb_clock_set_mask+0x58>)
    13ea:	6a11      	ldr	r1, [r2, #32]
    13ec:	683a      	ldr	r2, [r7, #0]
    13ee:	430a      	orrs	r2, r1
    13f0:	621a      	str	r2, [r3, #32]
			break;
    13f2:	e001      	b.n	13f8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    13f4:	2317      	movs	r3, #23
    13f6:	e000      	b.n	13fa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    13f8:	2300      	movs	r3, #0
}
    13fa:	1c18      	adds	r0, r3, #0
    13fc:	46bd      	mov	sp, r7
    13fe:	b002      	add	sp, #8
    1400:	bd80      	pop	{r7, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	40000400 	.word	0x40000400

00001408 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1408:	b580      	push	{r7, lr}
    140a:	b082      	sub	sp, #8
    140c:	af00      	add	r7, sp, #0
    140e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1410:	687b      	ldr	r3, [r7, #4]
    1412:	2280      	movs	r2, #128	; 0x80
    1414:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	2200      	movs	r2, #0
    141a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	2201      	movs	r2, #1
    1420:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	2200      	movs	r2, #0
    1426:	70da      	strb	r2, [r3, #3]
}
    1428:	46bd      	mov	sp, r7
    142a:	b002      	add	sp, #8
    142c:	bd80      	pop	{r7, pc}
    142e:	46c0      	nop			; (mov r8, r8)

00001430 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1430:	b580      	push	{r7, lr}
    1432:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1434:	4b05      	ldr	r3, [pc, #20]	; (144c <system_is_debugger_present+0x1c>)
    1436:	789b      	ldrb	r3, [r3, #2]
    1438:	b2db      	uxtb	r3, r3
    143a:	1c1a      	adds	r2, r3, #0
    143c:	2302      	movs	r3, #2
    143e:	4013      	ands	r3, r2
    1440:	1e5a      	subs	r2, r3, #1
    1442:	4193      	sbcs	r3, r2
    1444:	b2db      	uxtb	r3, r3
}
    1446:	1c18      	adds	r0, r3, #0
    1448:	46bd      	mov	sp, r7
    144a:	bd80      	pop	{r7, pc}
    144c:	41002000 	.word	0x41002000

00001450 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1450:	b580      	push	{r7, lr}
    1452:	b084      	sub	sp, #16
    1454:	af00      	add	r7, sp, #0
    1456:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    145e:	68fb      	ldr	r3, [r7, #12]
    1460:	69db      	ldr	r3, [r3, #28]
    1462:	1e5a      	subs	r2, r3, #1
    1464:	4193      	sbcs	r3, r2
    1466:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1468:	1c18      	adds	r0, r3, #0
    146a:	46bd      	mov	sp, r7
    146c:	b004      	add	sp, #16
    146e:	bd80      	pop	{r7, pc}

00001470 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1470:	b580      	push	{r7, lr}
    1472:	b082      	sub	sp, #8
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1478:	46c0      	nop			; (mov r8, r8)
    147a:	687b      	ldr	r3, [r7, #4]
    147c:	1c18      	adds	r0, r3, #0
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <_usart_wait_for_sync+0x20>)
    1480:	4798      	blx	r3
    1482:	1c03      	adds	r3, r0, #0
    1484:	2b00      	cmp	r3, #0
    1486:	d1f8      	bne.n	147a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1488:	46bd      	mov	sp, r7
    148a:	b002      	add	sp, #8
    148c:	bd80      	pop	{r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	00001451 	.word	0x00001451

00001494 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1494:	b5b0      	push	{r4, r5, r7, lr}
    1496:	b08c      	sub	sp, #48	; 0x30
    1498:	af02      	add	r7, sp, #8
    149a:	6078      	str	r0, [r7, #4]
    149c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	1c18      	adds	r0, r3, #0
    14aa:	4bad      	ldr	r3, [pc, #692]	; (1760 <_usart_set_config+0x2cc>)
    14ac:	4798      	blx	r3
    14ae:	1c03      	adds	r3, r0, #0
    14b0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14b2:	697b      	ldr	r3, [r7, #20]
    14b4:	3314      	adds	r3, #20
    14b6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    14b8:	2300      	movs	r3, #0
    14ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    14bc:	2300      	movs	r3, #0
    14be:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    14c0:	1c3b      	adds	r3, r7, #0
    14c2:	330e      	adds	r3, #14
    14c4:	2200      	movs	r2, #0
    14c6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14c8:	1c3b      	adds	r3, r7, #0
    14ca:	331f      	adds	r3, #31
    14cc:	2200      	movs	r2, #0
    14ce:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14d0:	1c3b      	adds	r3, r7, #0
    14d2:	331e      	adds	r3, #30
    14d4:	2210      	movs	r2, #16
    14d6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    14d8:	683b      	ldr	r3, [r7, #0]
    14da:	8a1b      	ldrh	r3, [r3, #16]
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	01d2      	lsls	r2, r2, #7
    14e0:	4293      	cmp	r3, r2
    14e2:	d01c      	beq.n	151e <_usart_set_config+0x8a>
    14e4:	2280      	movs	r2, #128	; 0x80
    14e6:	01d2      	lsls	r2, r2, #7
    14e8:	4293      	cmp	r3, r2
    14ea:	dc06      	bgt.n	14fa <_usart_set_config+0x66>
    14ec:	2b00      	cmp	r3, #0
    14ee:	d00d      	beq.n	150c <_usart_set_config+0x78>
    14f0:	2280      	movs	r2, #128	; 0x80
    14f2:	0192      	lsls	r2, r2, #6
    14f4:	4293      	cmp	r3, r2
    14f6:	d024      	beq.n	1542 <_usart_set_config+0xae>
    14f8:	e035      	b.n	1566 <_usart_set_config+0xd2>
    14fa:	22c0      	movs	r2, #192	; 0xc0
    14fc:	01d2      	lsls	r2, r2, #7
    14fe:	4293      	cmp	r3, r2
    1500:	d028      	beq.n	1554 <_usart_set_config+0xc0>
    1502:	2280      	movs	r2, #128	; 0x80
    1504:	0212      	lsls	r2, r2, #8
    1506:	4293      	cmp	r3, r2
    1508:	d012      	beq.n	1530 <_usart_set_config+0x9c>
    150a:	e02c      	b.n	1566 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    150c:	1c3b      	adds	r3, r7, #0
    150e:	331f      	adds	r3, #31
    1510:	2200      	movs	r2, #0
    1512:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1514:	1c3b      	adds	r3, r7, #0
    1516:	331e      	adds	r3, #30
    1518:	2210      	movs	r2, #16
    151a:	701a      	strb	r2, [r3, #0]
			break;
    151c:	e023      	b.n	1566 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    151e:	1c3b      	adds	r3, r7, #0
    1520:	331f      	adds	r3, #31
    1522:	2200      	movs	r2, #0
    1524:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1526:	1c3b      	adds	r3, r7, #0
    1528:	331e      	adds	r3, #30
    152a:	2208      	movs	r2, #8
    152c:	701a      	strb	r2, [r3, #0]
			break;
    152e:	e01a      	b.n	1566 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1530:	1c3b      	adds	r3, r7, #0
    1532:	331f      	adds	r3, #31
    1534:	2200      	movs	r2, #0
    1536:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1538:	1c3b      	adds	r3, r7, #0
    153a:	331e      	adds	r3, #30
    153c:	2203      	movs	r2, #3
    153e:	701a      	strb	r2, [r3, #0]
			break;
    1540:	e011      	b.n	1566 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1542:	1c3b      	adds	r3, r7, #0
    1544:	331f      	adds	r3, #31
    1546:	2201      	movs	r2, #1
    1548:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    154a:	1c3b      	adds	r3, r7, #0
    154c:	331e      	adds	r3, #30
    154e:	2210      	movs	r2, #16
    1550:	701a      	strb	r2, [r3, #0]
			break;
    1552:	e008      	b.n	1566 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1554:	1c3b      	adds	r3, r7, #0
    1556:	331f      	adds	r3, #31
    1558:	2201      	movs	r2, #1
    155a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    155c:	1c3b      	adds	r3, r7, #0
    155e:	331e      	adds	r3, #30
    1560:	2208      	movs	r2, #8
    1562:	701a      	strb	r2, [r3, #0]
			break;
    1564:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1566:	683b      	ldr	r3, [r7, #0]
    1568:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    156a:	683b      	ldr	r3, [r7, #0]
    156c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    156e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1570:	683b      	ldr	r3, [r7, #0]
    1572:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1574:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1576:	683b      	ldr	r3, [r7, #0]
    1578:	8a1b      	ldrh	r3, [r3, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    157a:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	7e1b      	ldrb	r3, [r3, #24]
    1580:	021b      	lsls	r3, r3, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1582:	431a      	orrs	r2, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1584:	6839      	ldr	r1, [r7, #0]
    1586:	2326      	movs	r3, #38	; 0x26
    1588:	5ccb      	ldrb	r3, [r1, r3]
    158a:	075b      	lsls	r3, r3, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    158c:	4313      	orrs	r3, r2
    158e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1590:	1c3b      	adds	r3, r7, #0
    1592:	331d      	adds	r3, #29
    1594:	2200      	movs	r2, #0
    1596:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    1598:	683b      	ldr	r3, [r7, #0]
    159a:	685b      	ldr	r3, [r3, #4]
    159c:	2b00      	cmp	r3, #0
    159e:	d020      	beq.n	15e2 <_usart_set_config+0x14e>
    15a0:	2280      	movs	r2, #128	; 0x80
    15a2:	0552      	lsls	r2, r2, #21
    15a4:	4293      	cmp	r3, r2
    15a6:	d14e      	bne.n	1646 <_usart_set_config+0x1b2>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    15a8:	683a      	ldr	r2, [r7, #0]
    15aa:	2327      	movs	r3, #39	; 0x27
    15ac:	5cd3      	ldrb	r3, [r2, r3]
    15ae:	2201      	movs	r2, #1
    15b0:	4053      	eors	r3, r2
    15b2:	b2db      	uxtb	r3, r3
    15b4:	2b00      	cmp	r3, #0
    15b6:	d013      	beq.n	15e0 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15b8:	683b      	ldr	r3, [r7, #0]
    15ba:	6a1d      	ldr	r5, [r3, #32]
    15bc:	693b      	ldr	r3, [r7, #16]
    15be:	b2db      	uxtb	r3, r3
    15c0:	1c18      	adds	r0, r3, #0
    15c2:	4b68      	ldr	r3, [pc, #416]	; (1764 <_usart_set_config+0x2d0>)
    15c4:	4798      	blx	r3
    15c6:	1c02      	adds	r2, r0, #0
    15c8:	1c3c      	adds	r4, r7, #0
    15ca:	341d      	adds	r4, #29
    15cc:	1c3b      	adds	r3, r7, #0
    15ce:	330e      	adds	r3, #14
    15d0:	1c28      	adds	r0, r5, #0
    15d2:	1c11      	adds	r1, r2, #0
    15d4:	1c1a      	adds	r2, r3, #0
    15d6:	4b64      	ldr	r3, [pc, #400]	; (1768 <_usart_set_config+0x2d4>)
    15d8:	4798      	blx	r3
    15da:	1c03      	adds	r3, r0, #0
    15dc:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    15de:	e032      	b.n	1646 <_usart_set_config+0x1b2>
    15e0:	e031      	b.n	1646 <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15e2:	683a      	ldr	r2, [r7, #0]
    15e4:	2327      	movs	r3, #39	; 0x27
    15e6:	5cd3      	ldrb	r3, [r2, r3]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d013      	beq.n	1614 <_usart_set_config+0x180>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    15ec:	683b      	ldr	r3, [r7, #0]
    15ee:	6a18      	ldr	r0, [r3, #32]
    15f0:	683b      	ldr	r3, [r7, #0]
    15f2:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    15f4:	1c3c      	adds	r4, r7, #0
    15f6:	341d      	adds	r4, #29
    15f8:	1c3a      	adds	r2, r7, #0
    15fa:	320e      	adds	r2, #14
    15fc:	1c3b      	adds	r3, r7, #0
    15fe:	331f      	adds	r3, #31
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	1c3d      	adds	r5, r7, #0
    1604:	351e      	adds	r5, #30
    1606:	782d      	ldrb	r5, [r5, #0]
    1608:	9500      	str	r5, [sp, #0]
    160a:	4d58      	ldr	r5, [pc, #352]	; (176c <_usart_set_config+0x2d8>)
    160c:	47a8      	blx	r5
    160e:	1c03      	adds	r3, r0, #0
    1610:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1612:	e017      	b.n	1644 <_usart_set_config+0x1b0>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1614:	683b      	ldr	r3, [r7, #0]
    1616:	6a1d      	ldr	r5, [r3, #32]
    1618:	693b      	ldr	r3, [r7, #16]
    161a:	b2db      	uxtb	r3, r3
    161c:	1c18      	adds	r0, r3, #0
    161e:	4b51      	ldr	r3, [pc, #324]	; (1764 <_usart_set_config+0x2d0>)
    1620:	4798      	blx	r3
    1622:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1624:	1c3c      	adds	r4, r7, #0
    1626:	341d      	adds	r4, #29
    1628:	1c3a      	adds	r2, r7, #0
    162a:	320e      	adds	r2, #14
    162c:	1c3b      	adds	r3, r7, #0
    162e:	331f      	adds	r3, #31
    1630:	781b      	ldrb	r3, [r3, #0]
    1632:	1c38      	adds	r0, r7, #0
    1634:	301e      	adds	r0, #30
    1636:	7800      	ldrb	r0, [r0, #0]
    1638:	9000      	str	r0, [sp, #0]
    163a:	1c28      	adds	r0, r5, #0
    163c:	4d4b      	ldr	r5, [pc, #300]	; (176c <_usart_set_config+0x2d8>)
    163e:	47a8      	blx	r5
    1640:	1c03      	adds	r3, r0, #0
    1642:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1644:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1646:	1c3b      	adds	r3, r7, #0
    1648:	331d      	adds	r3, #29
    164a:	781b      	ldrb	r3, [r3, #0]
    164c:	2b00      	cmp	r3, #0
    164e:	d003      	beq.n	1658 <_usart_set_config+0x1c4>
		/* Abort */
		return status_code;
    1650:	1c3b      	adds	r3, r7, #0
    1652:	331d      	adds	r3, #29
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	e07e      	b.n	1756 <_usart_set_config+0x2c2>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1658:	683b      	ldr	r3, [r7, #0]
    165a:	7e5b      	ldrb	r3, [r3, #25]
    165c:	2b00      	cmp	r3, #0
    165e:	d003      	beq.n	1668 <_usart_set_config+0x1d4>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1660:	683b      	ldr	r3, [r7, #0]
    1662:	7e9a      	ldrb	r2, [r3, #26]
    1664:	69bb      	ldr	r3, [r7, #24]
    1666:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	1c18      	adds	r0, r3, #0
    166c:	4b40      	ldr	r3, [pc, #256]	; (1770 <_usart_set_config+0x2dc>)
    166e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1670:	1c3b      	adds	r3, r7, #0
    1672:	330e      	adds	r3, #14
    1674:	881a      	ldrh	r2, [r3, #0]
    1676:	69bb      	ldr	r3, [r7, #24]
    1678:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    167a:	683b      	ldr	r3, [r7, #0]
    167c:	685b      	ldr	r3, [r3, #4]
    167e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1680:	4313      	orrs	r3, r2
    1682:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1684:	683a      	ldr	r2, [r7, #0]
    1686:	2327      	movs	r3, #39	; 0x27
    1688:	5cd3      	ldrb	r3, [r2, r3]
    168a:	2201      	movs	r2, #1
    168c:	4053      	eors	r3, r2
    168e:	b2db      	uxtb	r3, r3
    1690:	2b00      	cmp	r3, #0
    1692:	d003      	beq.n	169c <_usart_set_config+0x208>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1696:	2204      	movs	r2, #4
    1698:	4313      	orrs	r3, r2
    169a:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    169c:	683b      	ldr	r3, [r7, #0]
    169e:	7a9a      	ldrb	r2, [r3, #10]
    16a0:	683b      	ldr	r3, [r7, #0]
    16a2:	7adb      	ldrb	r3, [r3, #11]
    16a4:	4313      	orrs	r3, r2
    16a6:	b2db      	uxtb	r3, r3
    16a8:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    16aa:	683b      	ldr	r3, [r7, #0]
    16ac:	7e5b      	ldrb	r3, [r3, #25]
    16ae:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16b0:	431a      	orrs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    16b2:	683b      	ldr	r3, [r7, #0]
    16b4:	7f1b      	ldrb	r3, [r3, #28]
    16b6:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    16b8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    16ba:	683b      	ldr	r3, [r7, #0]
    16bc:	7f5b      	ldrb	r3, [r3, #29]
    16be:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    16c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    16c2:	6839      	ldr	r1, [r7, #0]
    16c4:	2324      	movs	r3, #36	; 0x24
    16c6:	5ccb      	ldrb	r3, [r1, r3]
    16c8:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    16ca:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    16cc:	6839      	ldr	r1, [r7, #0]
    16ce:	2325      	movs	r3, #37	; 0x25
    16d0:	5ccb      	ldrb	r3, [r1, r3]
    16d2:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16d4:	4313      	orrs	r3, r2
    16d6:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    16d8:	683b      	ldr	r3, [r7, #0]
    16da:	891b      	ldrh	r3, [r3, #8]
    16dc:	2bff      	cmp	r3, #255	; 0xff
    16de:	d014      	beq.n	170a <_usart_set_config+0x276>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16e0:	683b      	ldr	r3, [r7, #0]
    16e2:	7edb      	ldrb	r3, [r3, #27]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d005      	beq.n	16f4 <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    16e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16ea:	22a0      	movs	r2, #160	; 0xa0
    16ec:	04d2      	lsls	r2, r2, #19
    16ee:	4313      	orrs	r3, r2
    16f0:	627b      	str	r3, [r7, #36]	; 0x24
    16f2:	e004      	b.n	16fe <_usart_set_config+0x26a>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    16f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16f6:	2280      	movs	r2, #128	; 0x80
    16f8:	0452      	lsls	r2, r2, #17
    16fa:	4313      	orrs	r3, r2
    16fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    16fe:	683b      	ldr	r3, [r7, #0]
    1700:	891b      	ldrh	r3, [r3, #8]
    1702:	6a3a      	ldr	r2, [r7, #32]
    1704:	4313      	orrs	r3, r2
    1706:	623b      	str	r3, [r7, #32]
    1708:	e008      	b.n	171c <_usart_set_config+0x288>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    170a:	683b      	ldr	r3, [r7, #0]
    170c:	7edb      	ldrb	r3, [r3, #27]
    170e:	2b00      	cmp	r3, #0
    1710:	d004      	beq.n	171c <_usart_set_config+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1714:	2280      	movs	r2, #128	; 0x80
    1716:	04d2      	lsls	r2, r2, #19
    1718:	4313      	orrs	r3, r2
    171a:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    171c:	683a      	ldr	r2, [r7, #0]
    171e:	232c      	movs	r3, #44	; 0x2c
    1720:	5cd3      	ldrb	r3, [r2, r3]
    1722:	2b00      	cmp	r3, #0
    1724:	d104      	bne.n	1730 <_usart_set_config+0x29c>
    1726:	4b13      	ldr	r3, [pc, #76]	; (1774 <_usart_set_config+0x2e0>)
    1728:	4798      	blx	r3
    172a:	1c03      	adds	r3, r0, #0
    172c:	2b00      	cmp	r3, #0
    172e:	d003      	beq.n	1738 <_usart_set_config+0x2a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	4313      	orrs	r3, r2
    1736:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1738:	687b      	ldr	r3, [r7, #4]
    173a:	1c18      	adds	r0, r3, #0
    173c:	4b0c      	ldr	r3, [pc, #48]	; (1770 <_usart_set_config+0x2dc>)
    173e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1740:	69bb      	ldr	r3, [r7, #24]
    1742:	6a3a      	ldr	r2, [r7, #32]
    1744:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1746:	687b      	ldr	r3, [r7, #4]
    1748:	1c18      	adds	r0, r3, #0
    174a:	4b09      	ldr	r3, [pc, #36]	; (1770 <_usart_set_config+0x2dc>)
    174c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    174e:	69bb      	ldr	r3, [r7, #24]
    1750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1752:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1754:	2300      	movs	r3, #0
}
    1756:	1c18      	adds	r0, r3, #0
    1758:	46bd      	mov	sp, r7
    175a:	b00a      	add	sp, #40	; 0x28
    175c:	bdb0      	pop	{r4, r5, r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001201 	.word	0x00001201
    1764:	00004a5d 	.word	0x00004a5d
    1768:	00000d75 	.word	0x00000d75
    176c:	00000df1 	.word	0x00000df1
    1770:	00001471 	.word	0x00001471
    1774:	00001431 	.word	0x00001431

00001778 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1778:	b590      	push	{r4, r7, lr}
    177a:	b093      	sub	sp, #76	; 0x4c
    177c:	af00      	add	r7, sp, #0
    177e:	60f8      	str	r0, [r7, #12]
    1780:	60b9      	str	r1, [r7, #8]
    1782:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1784:	1c3b      	adds	r3, r7, #0
    1786:	333b      	adds	r3, #59	; 0x3b
    1788:	2200      	movs	r2, #0
    178a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	68ba      	ldr	r2, [r7, #8]
    1790:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	681b      	ldr	r3, [r3, #0]
    1796:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	681b      	ldr	r3, [r3, #0]
    179c:	1c18      	adds	r0, r3, #0
    179e:	4b86      	ldr	r3, [pc, #536]	; (19b8 <usart_init+0x240>)
    17a0:	4798      	blx	r3
    17a2:	1c03      	adds	r3, r0, #0
    17a4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    17a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17a8:	3302      	adds	r3, #2
    17aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17ae:	3314      	adds	r3, #20
    17b0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    17b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17b4:	681a      	ldr	r2, [r3, #0]
    17b6:	2301      	movs	r3, #1
    17b8:	4013      	ands	r3, r2
    17ba:	d001      	beq.n	17c0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    17bc:	2305      	movs	r3, #5
    17be:	e0f6      	b.n	19ae <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17c2:	681a      	ldr	r2, [r3, #0]
    17c4:	2302      	movs	r3, #2
    17c6:	4013      	ands	r3, r2
    17c8:	d001      	beq.n	17ce <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    17ca:	231c      	movs	r3, #28
    17cc:	e0ef      	b.n	19ae <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	2201      	movs	r2, #1
    17d2:	1c11      	adds	r1, r2, #0
    17d4:	4099      	lsls	r1, r3
    17d6:	1c0b      	adds	r3, r1, #0
    17d8:	2002      	movs	r0, #2
    17da:	1c19      	adds	r1, r3, #0
    17dc:	4b77      	ldr	r3, [pc, #476]	; (19bc <usart_init+0x244>)
    17de:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    17e0:	1c3b      	adds	r3, r7, #0
    17e2:	3324      	adds	r3, #36	; 0x24
    17e4:	1c18      	adds	r0, r3, #0
    17e6:	4b76      	ldr	r3, [pc, #472]	; (19c0 <usart_init+0x248>)
    17e8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    17ea:	687a      	ldr	r2, [r7, #4]
    17ec:	232d      	movs	r3, #45	; 0x2d
    17ee:	5cd2      	ldrb	r2, [r2, r3]
    17f0:	1c3b      	adds	r3, r7, #0
    17f2:	3324      	adds	r3, #36	; 0x24
    17f4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    17f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    17f8:	b2da      	uxtb	r2, r3
    17fa:	1c3b      	adds	r3, r7, #0
    17fc:	3324      	adds	r3, #36	; 0x24
    17fe:	1c10      	adds	r0, r2, #0
    1800:	1c19      	adds	r1, r3, #0
    1802:	4b70      	ldr	r3, [pc, #448]	; (19c4 <usart_init+0x24c>)
    1804:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1806:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1808:	b2db      	uxtb	r3, r3
    180a:	1c18      	adds	r0, r3, #0
    180c:	4b6e      	ldr	r3, [pc, #440]	; (19c8 <usart_init+0x250>)
    180e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1810:	687a      	ldr	r2, [r7, #4]
    1812:	232d      	movs	r3, #45	; 0x2d
    1814:	5cd3      	ldrb	r3, [r2, r3]
    1816:	1c18      	adds	r0, r3, #0
    1818:	2100      	movs	r1, #0
    181a:	4b6c      	ldr	r3, [pc, #432]	; (19cc <usart_init+0x254>)
    181c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	7ada      	ldrb	r2, [r3, #11]
    1822:	68fb      	ldr	r3, [r7, #12]
    1824:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1826:	687a      	ldr	r2, [r7, #4]
    1828:	2324      	movs	r3, #36	; 0x24
    182a:	5cd2      	ldrb	r2, [r2, r3]
    182c:	68fb      	ldr	r3, [r7, #12]
    182e:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1830:	687a      	ldr	r2, [r7, #4]
    1832:	2325      	movs	r3, #37	; 0x25
    1834:	5cd2      	ldrb	r2, [r2, r3]
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	7eda      	ldrb	r2, [r3, #27]
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	7f1a      	ldrb	r2, [r3, #28]
    1846:	68fb      	ldr	r3, [r7, #12]
    1848:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    184a:	1c3c      	adds	r4, r7, #0
    184c:	343b      	adds	r4, #59	; 0x3b
    184e:	68fa      	ldr	r2, [r7, #12]
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	1c10      	adds	r0, r2, #0
    1854:	1c19      	adds	r1, r3, #0
    1856:	4b5e      	ldr	r3, [pc, #376]	; (19d0 <usart_init+0x258>)
    1858:	4798      	blx	r3
    185a:	1c03      	adds	r3, r0, #0
    185c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    185e:	1c3b      	adds	r3, r7, #0
    1860:	333b      	adds	r3, #59	; 0x3b
    1862:	781b      	ldrb	r3, [r3, #0]
    1864:	2b00      	cmp	r3, #0
    1866:	d003      	beq.n	1870 <usart_init+0xf8>
		return status_code;
    1868:	1c3b      	adds	r3, r7, #0
    186a:	333b      	adds	r3, #59	; 0x3b
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	e09e      	b.n	19ae <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1870:	1c3b      	adds	r3, r7, #0
    1872:	3320      	adds	r3, #32
    1874:	1c18      	adds	r0, r3, #0
    1876:	4b57      	ldr	r3, [pc, #348]	; (19d4 <usart_init+0x25c>)
    1878:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    187a:	1c3b      	adds	r3, r7, #0
    187c:	3320      	adds	r3, #32
    187e:	2200      	movs	r2, #0
    1880:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1882:	1c3b      	adds	r3, r7, #0
    1884:	3320      	adds	r3, #32
    1886:	2200      	movs	r2, #0
    1888:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    188e:	1c3b      	adds	r3, r7, #0
    1890:	3310      	adds	r3, #16
    1892:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1898:	1c3b      	adds	r3, r7, #0
    189a:	3310      	adds	r3, #16
    189c:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    18a2:	1c3b      	adds	r3, r7, #0
    18a4:	3310      	adds	r3, #16
    18a6:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    18ac:	1c3b      	adds	r3, r7, #0
    18ae:	3310      	adds	r3, #16
    18b0:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    18b2:	1c3b      	adds	r3, r7, #0
    18b4:	3347      	adds	r3, #71	; 0x47
    18b6:	2200      	movs	r2, #0
    18b8:	701a      	strb	r2, [r3, #0]
    18ba:	e02c      	b.n	1916 <usart_init+0x19e>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    18bc:	1c3b      	adds	r3, r7, #0
    18be:	3347      	adds	r3, #71	; 0x47
    18c0:	781a      	ldrb	r2, [r3, #0]
    18c2:	1c3b      	adds	r3, r7, #0
    18c4:	3310      	adds	r3, #16
    18c6:	0092      	lsls	r2, r2, #2
    18c8:	58d3      	ldr	r3, [r2, r3]
    18ca:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    18cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18ce:	2b00      	cmp	r3, #0
    18d0:	d109      	bne.n	18e6 <usart_init+0x16e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    18d2:	68ba      	ldr	r2, [r7, #8]
    18d4:	1c3b      	adds	r3, r7, #0
    18d6:	3347      	adds	r3, #71	; 0x47
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	1c10      	adds	r0, r2, #0
    18dc:	1c19      	adds	r1, r3, #0
    18de:	4b3e      	ldr	r3, [pc, #248]	; (19d8 <usart_init+0x260>)
    18e0:	4798      	blx	r3
    18e2:	1c03      	adds	r3, r0, #0
    18e4:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    18e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18e8:	3301      	adds	r3, #1
    18ea:	d00d      	beq.n	1908 <usart_init+0x190>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    18ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18ee:	b2da      	uxtb	r2, r3
    18f0:	1c3b      	adds	r3, r7, #0
    18f2:	3320      	adds	r3, #32
    18f4:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    18f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18f8:	0c1b      	lsrs	r3, r3, #16
    18fa:	b2da      	uxtb	r2, r3
    18fc:	1c3b      	adds	r3, r7, #0
    18fe:	3320      	adds	r3, #32
    1900:	1c10      	adds	r0, r2, #0
    1902:	1c19      	adds	r1, r3, #0
    1904:	4b35      	ldr	r3, [pc, #212]	; (19dc <usart_init+0x264>)
    1906:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1908:	1c3b      	adds	r3, r7, #0
    190a:	3347      	adds	r3, #71	; 0x47
    190c:	781a      	ldrb	r2, [r3, #0]
    190e:	1c3b      	adds	r3, r7, #0
    1910:	3347      	adds	r3, #71	; 0x47
    1912:	3201      	adds	r2, #1
    1914:	701a      	strb	r2, [r3, #0]
    1916:	1c3b      	adds	r3, r7, #0
    1918:	3347      	adds	r3, #71	; 0x47
    191a:	781b      	ldrb	r3, [r3, #0]
    191c:	2b03      	cmp	r3, #3
    191e:	d9cd      	bls.n	18bc <usart_init+0x144>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1920:	2300      	movs	r3, #0
    1922:	63fb      	str	r3, [r7, #60]	; 0x3c
    1924:	e009      	b.n	193a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    1926:	68fa      	ldr	r2, [r7, #12]
    1928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    192a:	3302      	adds	r3, #2
    192c:	009b      	lsls	r3, r3, #2
    192e:	18d3      	adds	r3, r2, r3
    1930:	2200      	movs	r2, #0
    1932:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1936:	3301      	adds	r3, #1
    1938:	63fb      	str	r3, [r7, #60]	; 0x3c
    193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    193c:	2b05      	cmp	r3, #5
    193e:	d9f2      	bls.n	1926 <usart_init+0x1ae>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	2200      	movs	r2, #0
    1944:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	2200      	movs	r2, #0
    194a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	2200      	movs	r2, #0
    1950:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	2200      	movs	r2, #0
    1956:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1958:	68fa      	ldr	r2, [r7, #12]
    195a:	2330      	movs	r3, #48	; 0x30
    195c:	2100      	movs	r1, #0
    195e:	54d1      	strb	r1, [r2, r3]
	module->callback_enable_mask       = 0x00;
    1960:	68fa      	ldr	r2, [r7, #12]
    1962:	2331      	movs	r3, #49	; 0x31
    1964:	2100      	movs	r1, #0
    1966:	54d1      	strb	r1, [r2, r3]
	module->rx_status                  = STATUS_OK;
    1968:	68fa      	ldr	r2, [r7, #12]
    196a:	2332      	movs	r3, #50	; 0x32
    196c:	2100      	movs	r1, #0
    196e:	54d1      	strb	r1, [r2, r3]
	module->tx_status                  = STATUS_OK;
    1970:	68fa      	ldr	r2, [r7, #12]
    1972:	2333      	movs	r3, #51	; 0x33
    1974:	2100      	movs	r1, #0
    1976:	54d1      	strb	r1, [r2, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	681b      	ldr	r3, [r3, #0]
    197c:	1c3c      	adds	r4, r7, #0
    197e:	3427      	adds	r4, #39	; 0x27
    1980:	1c18      	adds	r0, r3, #0
    1982:	4b0d      	ldr	r3, [pc, #52]	; (19b8 <usart_init+0x240>)
    1984:	4798      	blx	r3
    1986:	1c03      	adds	r3, r0, #0
    1988:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    198a:	1c3b      	adds	r3, r7, #0
    198c:	3327      	adds	r3, #39	; 0x27
    198e:	781a      	ldrb	r2, [r3, #0]
    1990:	4b13      	ldr	r3, [pc, #76]	; (19e0 <usart_init+0x268>)
    1992:	1c10      	adds	r0, r2, #0
    1994:	1c19      	adds	r1, r3, #0
    1996:	4b13      	ldr	r3, [pc, #76]	; (19e4 <usart_init+0x26c>)
    1998:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    199a:	1c3b      	adds	r3, r7, #0
    199c:	3327      	adds	r3, #39	; 0x27
    199e:	781a      	ldrb	r2, [r3, #0]
    19a0:	4b11      	ldr	r3, [pc, #68]	; (19e8 <usart_init+0x270>)
    19a2:	0092      	lsls	r2, r2, #2
    19a4:	68f9      	ldr	r1, [r7, #12]
    19a6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    19a8:	1c3b      	adds	r3, r7, #0
    19aa:	333b      	adds	r3, #59	; 0x3b
    19ac:	781b      	ldrb	r3, [r3, #0]
}
    19ae:	1c18      	adds	r0, r3, #0
    19b0:	46bd      	mov	sp, r7
    19b2:	b013      	add	sp, #76	; 0x4c
    19b4:	bd90      	pop	{r4, r7, pc}
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	00001201 	.word	0x00001201
    19bc:	000013ad 	.word	0x000013ad
    19c0:	00001399 	.word	0x00001399
    19c4:	00004941 	.word	0x00004941
    19c8:	00004981 	.word	0x00004981
    19cc:	00000fb9 	.word	0x00000fb9
    19d0:	00001495 	.word	0x00001495
    19d4:	00001409 	.word	0x00001409
    19d8:	00001045 	.word	0x00001045
    19dc:	00004c25 	.word	0x00004c25
    19e0:	00001b95 	.word	0x00001b95
    19e4:	00001261 	.word	0x00001261
    19e8:	20003ce0 	.word	0x20003ce0

000019ec <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b084      	sub	sp, #16
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
    19f4:	1c0a      	adds	r2, r1, #0
    19f6:	1cbb      	adds	r3, r7, #2
    19f8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	681b      	ldr	r3, [r3, #0]
    19fe:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	79db      	ldrb	r3, [r3, #7]
    1a04:	2201      	movs	r2, #1
    1a06:	4053      	eors	r3, r2
    1a08:	b2db      	uxtb	r3, r3
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d001      	beq.n	1a12 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    1a0e:	231c      	movs	r3, #28
    1a10:	e017      	b.n	1a42 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1a12:	687b      	ldr	r3, [r7, #4]
    1a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1a16:	b29b      	uxth	r3, r3
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d001      	beq.n	1a20 <usart_write_wait+0x34>
		return STATUS_BUSY;
    1a1c:	2305      	movs	r3, #5
    1a1e:	e010      	b.n	1a42 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a20:	687b      	ldr	r3, [r7, #4]
    1a22:	1c18      	adds	r0, r3, #0
    1a24:	4b09      	ldr	r3, [pc, #36]	; (1a4c <usart_write_wait+0x60>)
    1a26:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1a28:	68fb      	ldr	r3, [r7, #12]
    1a2a:	1cba      	adds	r2, r7, #2
    1a2c:	8812      	ldrh	r2, [r2, #0]
    1a2e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1a30:	46c0      	nop			; (mov r8, r8)
    1a32:	68fb      	ldr	r3, [r7, #12]
    1a34:	7e1b      	ldrb	r3, [r3, #24]
    1a36:	b2db      	uxtb	r3, r3
    1a38:	1c1a      	adds	r2, r3, #0
    1a3a:	2302      	movs	r3, #2
    1a3c:	4013      	ands	r3, r2
    1a3e:	d0f8      	beq.n	1a32 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1a40:	2300      	movs	r3, #0
}
    1a42:	1c18      	adds	r0, r3, #0
    1a44:	46bd      	mov	sp, r7
    1a46:	b004      	add	sp, #16
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	00001471 	.word	0x00001471

00001a50 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1a50:	b580      	push	{r7, lr}
    1a52:	b084      	sub	sp, #16
    1a54:	af00      	add	r7, sp, #0
    1a56:	6078      	str	r0, [r7, #4]
    1a58:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	799b      	ldrb	r3, [r3, #6]
    1a64:	2201      	movs	r2, #1
    1a66:	4053      	eors	r3, r2
    1a68:	b2db      	uxtb	r3, r3
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d001      	beq.n	1a72 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1a6e:	231c      	movs	r3, #28
    1a70:	e068      	b.n	1b44 <usart_read_wait+0xf4>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1a76:	b29b      	uxth	r3, r3
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d001      	beq.n	1a80 <usart_read_wait+0x30>
		return STATUS_BUSY;
    1a7c:	2305      	movs	r3, #5
    1a7e:	e061      	b.n	1b44 <usart_read_wait+0xf4>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1a80:	68fb      	ldr	r3, [r7, #12]
    1a82:	7e1b      	ldrb	r3, [r3, #24]
    1a84:	b2db      	uxtb	r3, r3
    1a86:	1c1a      	adds	r2, r3, #0
    1a88:	2304      	movs	r3, #4
    1a8a:	4013      	ands	r3, r2
    1a8c:	d101      	bne.n	1a92 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1a8e:	2305      	movs	r3, #5
    1a90:	e058      	b.n	1b44 <usart_read_wait+0xf4>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	1c18      	adds	r0, r3, #0
    1a96:	4b2d      	ldr	r3, [pc, #180]	; (1b4c <usart_read_wait+0xfc>)
    1a98:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1a9a:	68fb      	ldr	r3, [r7, #12]
    1a9c:	8b5b      	ldrh	r3, [r3, #26]
    1a9e:	b29b      	uxth	r3, r3
    1aa0:	b2d9      	uxtb	r1, r3
    1aa2:	1c3b      	adds	r3, r7, #0
    1aa4:	330b      	adds	r3, #11
    1aa6:	223f      	movs	r2, #63	; 0x3f
    1aa8:	400a      	ands	r2, r1
    1aaa:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1aac:	1c3b      	adds	r3, r7, #0
    1aae:	330b      	adds	r3, #11
    1ab0:	781b      	ldrb	r3, [r3, #0]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d040      	beq.n	1b38 <usart_read_wait+0xe8>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ab6:	1c3b      	adds	r3, r7, #0
    1ab8:	330b      	adds	r3, #11
    1aba:	781a      	ldrb	r2, [r3, #0]
    1abc:	2302      	movs	r3, #2
    1abe:	4013      	ands	r3, r2
    1ac0:	d004      	beq.n	1acc <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ac2:	68fb      	ldr	r3, [r7, #12]
    1ac4:	2202      	movs	r2, #2
    1ac6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    1ac8:	231a      	movs	r3, #26
    1aca:	e03b      	b.n	1b44 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1acc:	1c3b      	adds	r3, r7, #0
    1ace:	330b      	adds	r3, #11
    1ad0:	781a      	ldrb	r2, [r3, #0]
    1ad2:	2304      	movs	r3, #4
    1ad4:	4013      	ands	r3, r2
    1ad6:	d004      	beq.n	1ae2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ad8:	68fb      	ldr	r3, [r7, #12]
    1ada:	2204      	movs	r2, #4
    1adc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    1ade:	231e      	movs	r3, #30
    1ae0:	e030      	b.n	1b44 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ae2:	1c3b      	adds	r3, r7, #0
    1ae4:	330b      	adds	r3, #11
    1ae6:	781a      	ldrb	r2, [r3, #0]
    1ae8:	2301      	movs	r3, #1
    1aea:	4013      	ands	r3, r2
    1aec:	d004      	beq.n	1af8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1aee:	68fb      	ldr	r3, [r7, #12]
    1af0:	2201      	movs	r2, #1
    1af2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1af4:	2313      	movs	r3, #19
    1af6:	e025      	b.n	1b44 <usart_read_wait+0xf4>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1af8:	1c3b      	adds	r3, r7, #0
    1afa:	330b      	adds	r3, #11
    1afc:	781a      	ldrb	r2, [r3, #0]
    1afe:	2310      	movs	r3, #16
    1b00:	4013      	ands	r3, r2
    1b02:	d009      	beq.n	1b18 <usart_read_wait+0xc8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1b04:	68fb      	ldr	r3, [r7, #12]
    1b06:	8b5b      	ldrh	r3, [r3, #26]
    1b08:	b29b      	uxth	r3, r3
    1b0a:	2210      	movs	r2, #16
    1b0c:	4313      	orrs	r3, r2
    1b0e:	b29a      	uxth	r2, r3
    1b10:	68fb      	ldr	r3, [r7, #12]
    1b12:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    1b14:	2342      	movs	r3, #66	; 0x42
    1b16:	e015      	b.n	1b44 <usart_read_wait+0xf4>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b18:	1c3b      	adds	r3, r7, #0
    1b1a:	330b      	adds	r3, #11
    1b1c:	781a      	ldrb	r2, [r3, #0]
    1b1e:	2320      	movs	r3, #32
    1b20:	4013      	ands	r3, r2
    1b22:	d009      	beq.n	1b38 <usart_read_wait+0xe8>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1b24:	68fb      	ldr	r3, [r7, #12]
    1b26:	8b5b      	ldrh	r3, [r3, #26]
    1b28:	b29b      	uxth	r3, r3
    1b2a:	2220      	movs	r2, #32
    1b2c:	4313      	orrs	r3, r2
    1b2e:	b29a      	uxth	r2, r3
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1b34:	2341      	movs	r3, #65	; 0x41
    1b36:	e005      	b.n	1b44 <usart_read_wait+0xf4>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    1b42:	2300      	movs	r3, #0
}
    1b44:	1c18      	adds	r0, r3, #0
    1b46:	46bd      	mov	sp, r7
    1b48:	b004      	add	sp, #16
    1b4a:	bd80      	pop	{r7, pc}
    1b4c:	00001471 	.word	0x00001471

00001b50 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	b084      	sub	sp, #16
    1b54:	af00      	add	r7, sp, #0
    1b56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b5e:	68fb      	ldr	r3, [r7, #12]
    1b60:	69db      	ldr	r3, [r3, #28]
    1b62:	1e5a      	subs	r2, r3, #1
    1b64:	4193      	sbcs	r3, r2
    1b66:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1b68:	1c18      	adds	r0, r3, #0
    1b6a:	46bd      	mov	sp, r7
    1b6c:	b004      	add	sp, #16
    1b6e:	bd80      	pop	{r7, pc}

00001b70 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1b70:	b580      	push	{r7, lr}
    1b72:	b082      	sub	sp, #8
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b78:	46c0      	nop			; (mov r8, r8)
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	1c18      	adds	r0, r3, #0
    1b7e:	4b04      	ldr	r3, [pc, #16]	; (1b90 <_usart_wait_for_sync+0x20>)
    1b80:	4798      	blx	r3
    1b82:	1c03      	adds	r3, r0, #0
    1b84:	2b00      	cmp	r3, #0
    1b86:	d1f8      	bne.n	1b7a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1b88:	46bd      	mov	sp, r7
    1b8a:	b002      	add	sp, #8
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00001b51 	.word	0x00001b51

00001b94 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b088      	sub	sp, #32
    1b98:	af00      	add	r7, sp, #0
    1b9a:	1c02      	adds	r2, r0, #0
    1b9c:	1dfb      	adds	r3, r7, #7
    1b9e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1ba0:	1dfb      	adds	r3, r7, #7
    1ba2:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1ba4:	4bb0      	ldr	r3, [pc, #704]	; (1e68 <_usart_interrupt_handler+0x2d4>)
    1ba6:	0092      	lsls	r2, r2, #2
    1ba8:	58d3      	ldr	r3, [r2, r3]
    1baa:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1bac:	69bb      	ldr	r3, [r7, #24]
    1bae:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    1bb0:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1bb2:	69bb      	ldr	r3, [r7, #24]
    1bb4:	1c18      	adds	r0, r3, #0
    1bb6:	4bad      	ldr	r3, [pc, #692]	; (1e6c <_usart_interrupt_handler+0x2d8>)
    1bb8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1bba:	697b      	ldr	r3, [r7, #20]
    1bbc:	7e1b      	ldrb	r3, [r3, #24]
    1bbe:	b2da      	uxtb	r2, r3
    1bc0:	1c3b      	adds	r3, r7, #0
    1bc2:	3312      	adds	r3, #18
    1bc4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1bc6:	697b      	ldr	r3, [r7, #20]
    1bc8:	7d9b      	ldrb	r3, [r3, #22]
    1bca:	b2db      	uxtb	r3, r3
    1bcc:	1c1a      	adds	r2, r3, #0
    1bce:	1c3b      	adds	r3, r7, #0
    1bd0:	3312      	adds	r3, #18
    1bd2:	1c39      	adds	r1, r7, #0
    1bd4:	3112      	adds	r1, #18
    1bd6:	8809      	ldrh	r1, [r1, #0]
    1bd8:	400a      	ands	r2, r1
    1bda:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1bdc:	69ba      	ldr	r2, [r7, #24]
    1bde:	2330      	movs	r3, #48	; 0x30
    1be0:	5cd3      	ldrb	r3, [r2, r3]
			module->callback_enable_mask;
    1be2:	69b9      	ldr	r1, [r7, #24]
    1be4:	2231      	movs	r2, #49	; 0x31
    1be6:	5c8a      	ldrb	r2, [r1, r2]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1be8:	4013      	ands	r3, r2
    1bea:	b2da      	uxtb	r2, r3
    1bec:	1c3b      	adds	r3, r7, #0
    1bee:	3310      	adds	r3, #16
    1bf0:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1bf2:	1c3b      	adds	r3, r7, #0
    1bf4:	3312      	adds	r3, #18
    1bf6:	881a      	ldrh	r2, [r3, #0]
    1bf8:	2301      	movs	r3, #1
    1bfa:	4013      	ands	r3, r2
    1bfc:	d044      	beq.n	1c88 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1bfe:	69bb      	ldr	r3, [r7, #24]
    1c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c02:	b29b      	uxth	r3, r3
    1c04:	2b00      	cmp	r3, #0
    1c06:	d03c      	beq.n	1c82 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c08:	69bb      	ldr	r3, [r7, #24]
    1c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c0c:	781b      	ldrb	r3, [r3, #0]
    1c0e:	b2da      	uxtb	r2, r3
    1c10:	1c3b      	adds	r3, r7, #0
    1c12:	331c      	adds	r3, #28
    1c14:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1c16:	69bb      	ldr	r3, [r7, #24]
    1c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c1a:	1c5a      	adds	r2, r3, #1
    1c1c:	69bb      	ldr	r3, [r7, #24]
    1c1e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c20:	69bb      	ldr	r3, [r7, #24]
    1c22:	795b      	ldrb	r3, [r3, #5]
    1c24:	2b01      	cmp	r3, #1
    1c26:	d112      	bne.n	1c4e <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1c28:	69bb      	ldr	r3, [r7, #24]
    1c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	021b      	lsls	r3, r3, #8
    1c32:	b29a      	uxth	r2, r3
    1c34:	1c3b      	adds	r3, r7, #0
    1c36:	331c      	adds	r3, #28
    1c38:	881b      	ldrh	r3, [r3, #0]
    1c3a:	4313      	orrs	r3, r2
    1c3c:	b29a      	uxth	r2, r3
    1c3e:	1c3b      	adds	r3, r7, #0
    1c40:	331c      	adds	r3, #28
    1c42:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1c44:	69bb      	ldr	r3, [r7, #24]
    1c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c48:	1c5a      	adds	r2, r3, #1
    1c4a:	69bb      	ldr	r3, [r7, #24]
    1c4c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1c4e:	1c3b      	adds	r3, r7, #0
    1c50:	331c      	adds	r3, #28
    1c52:	881b      	ldrh	r3, [r3, #0]
    1c54:	05db      	lsls	r3, r3, #23
    1c56:	0ddb      	lsrs	r3, r3, #23
    1c58:	b29a      	uxth	r2, r3
    1c5a:	697b      	ldr	r3, [r7, #20]
    1c5c:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1c5e:	69bb      	ldr	r3, [r7, #24]
    1c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c62:	b29b      	uxth	r3, r3
    1c64:	3b01      	subs	r3, #1
    1c66:	b29b      	uxth	r3, r3
    1c68:	69ba      	ldr	r2, [r7, #24]
    1c6a:	1c19      	adds	r1, r3, #0
    1c6c:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1c6e:	2b00      	cmp	r3, #0
    1c70:	d106      	bne.n	1c80 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c72:	697b      	ldr	r3, [r7, #20]
    1c74:	2201      	movs	r2, #1
    1c76:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1c78:	697b      	ldr	r3, [r7, #20]
    1c7a:	2202      	movs	r2, #2
    1c7c:	759a      	strb	r2, [r3, #22]
    1c7e:	e003      	b.n	1c88 <_usart_interrupt_handler+0xf4>
    1c80:	e002      	b.n	1c88 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c82:	697b      	ldr	r3, [r7, #20]
    1c84:	2201      	movs	r2, #1
    1c86:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1c88:	1c3b      	adds	r3, r7, #0
    1c8a:	3312      	adds	r3, #18
    1c8c:	881a      	ldrh	r2, [r3, #0]
    1c8e:	2302      	movs	r3, #2
    1c90:	4013      	ands	r3, r2
    1c92:	d011      	beq.n	1cb8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1c94:	697b      	ldr	r3, [r7, #20]
    1c96:	2202      	movs	r2, #2
    1c98:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1c9a:	69ba      	ldr	r2, [r7, #24]
    1c9c:	2333      	movs	r3, #51	; 0x33
    1c9e:	2100      	movs	r1, #0
    1ca0:	54d1      	strb	r1, [r2, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1ca2:	1c3b      	adds	r3, r7, #0
    1ca4:	3310      	adds	r3, #16
    1ca6:	881a      	ldrh	r2, [r3, #0]
    1ca8:	2301      	movs	r3, #1
    1caa:	4013      	ands	r3, r2
    1cac:	d004      	beq.n	1cb8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1cae:	69bb      	ldr	r3, [r7, #24]
    1cb0:	68db      	ldr	r3, [r3, #12]
    1cb2:	69ba      	ldr	r2, [r7, #24]
    1cb4:	1c10      	adds	r0, r2, #0
    1cb6:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1cb8:	1c3b      	adds	r3, r7, #0
    1cba:	3312      	adds	r3, #18
    1cbc:	881a      	ldrh	r2, [r3, #0]
    1cbe:	2304      	movs	r3, #4
    1cc0:	4013      	ands	r3, r2
    1cc2:	d100      	bne.n	1cc6 <_usart_interrupt_handler+0x132>
    1cc4:	e0d7      	b.n	1e76 <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    1cc6:	69bb      	ldr	r3, [r7, #24]
    1cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1cca:	b29b      	uxth	r3, r3
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d100      	bne.n	1cd2 <_usart_interrupt_handler+0x13e>
    1cd0:	e0ce      	b.n	1e70 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1cd2:	697b      	ldr	r3, [r7, #20]
    1cd4:	8b5b      	ldrh	r3, [r3, #26]
    1cd6:	b29b      	uxth	r3, r3
    1cd8:	b2d9      	uxtb	r1, r3
    1cda:	1c3b      	adds	r3, r7, #0
    1cdc:	331f      	adds	r3, #31
    1cde:	223f      	movs	r2, #63	; 0x3f
    1ce0:	400a      	ands	r2, r1
    1ce2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1ce4:	1c3b      	adds	r3, r7, #0
    1ce6:	331f      	adds	r3, #31
    1ce8:	781a      	ldrb	r2, [r3, #0]
    1cea:	2308      	movs	r3, #8
    1cec:	4013      	ands	r3, r2
    1cee:	d007      	beq.n	1d00 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1cf0:	1c3b      	adds	r3, r7, #0
    1cf2:	331f      	adds	r3, #31
    1cf4:	1c3a      	adds	r2, r7, #0
    1cf6:	321f      	adds	r2, #31
    1cf8:	7812      	ldrb	r2, [r2, #0]
    1cfa:	2108      	movs	r1, #8
    1cfc:	438a      	bics	r2, r1
    1cfe:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1d00:	1c3b      	adds	r3, r7, #0
    1d02:	331f      	adds	r3, #31
    1d04:	781b      	ldrb	r3, [r3, #0]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d100      	bne.n	1d0c <_usart_interrupt_handler+0x178>
    1d0a:	e069      	b.n	1de0 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1d0c:	1c3b      	adds	r3, r7, #0
    1d0e:	331f      	adds	r3, #31
    1d10:	781a      	ldrb	r2, [r3, #0]
    1d12:	2302      	movs	r3, #2
    1d14:	4013      	ands	r3, r2
    1d16:	d00c      	beq.n	1d32 <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1d18:	69ba      	ldr	r2, [r7, #24]
    1d1a:	2332      	movs	r3, #50	; 0x32
    1d1c:	211a      	movs	r1, #26
    1d1e:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1d20:	697b      	ldr	r3, [r7, #20]
    1d22:	8b5b      	ldrh	r3, [r3, #26]
    1d24:	b29b      	uxth	r3, r3
    1d26:	2202      	movs	r2, #2
    1d28:	4313      	orrs	r3, r2
    1d2a:	b29a      	uxth	r2, r3
    1d2c:	697b      	ldr	r3, [r7, #20]
    1d2e:	835a      	strh	r2, [r3, #26]
    1d30:	e04a      	b.n	1dc8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d32:	1c3b      	adds	r3, r7, #0
    1d34:	331f      	adds	r3, #31
    1d36:	781a      	ldrb	r2, [r3, #0]
    1d38:	2304      	movs	r3, #4
    1d3a:	4013      	ands	r3, r2
    1d3c:	d00c      	beq.n	1d58 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1d3e:	69ba      	ldr	r2, [r7, #24]
    1d40:	2332      	movs	r3, #50	; 0x32
    1d42:	211e      	movs	r1, #30
    1d44:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	8b5b      	ldrh	r3, [r3, #26]
    1d4a:	b29b      	uxth	r3, r3
    1d4c:	2204      	movs	r2, #4
    1d4e:	4313      	orrs	r3, r2
    1d50:	b29a      	uxth	r2, r3
    1d52:	697b      	ldr	r3, [r7, #20]
    1d54:	835a      	strh	r2, [r3, #26]
    1d56:	e037      	b.n	1dc8 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d58:	1c3b      	adds	r3, r7, #0
    1d5a:	331f      	adds	r3, #31
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	2301      	movs	r3, #1
    1d60:	4013      	ands	r3, r2
    1d62:	d00c      	beq.n	1d7e <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1d64:	69ba      	ldr	r2, [r7, #24]
    1d66:	2332      	movs	r3, #50	; 0x32
    1d68:	2113      	movs	r1, #19
    1d6a:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1d6c:	697b      	ldr	r3, [r7, #20]
    1d6e:	8b5b      	ldrh	r3, [r3, #26]
    1d70:	b29b      	uxth	r3, r3
    1d72:	2201      	movs	r2, #1
    1d74:	4313      	orrs	r3, r2
    1d76:	b29a      	uxth	r2, r3
    1d78:	697b      	ldr	r3, [r7, #20]
    1d7a:	835a      	strh	r2, [r3, #26]
    1d7c:	e024      	b.n	1dc8 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d7e:	1c3b      	adds	r3, r7, #0
    1d80:	331f      	adds	r3, #31
    1d82:	781a      	ldrb	r2, [r3, #0]
    1d84:	2310      	movs	r3, #16
    1d86:	4013      	ands	r3, r2
    1d88:	d00c      	beq.n	1da4 <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1d8a:	69ba      	ldr	r2, [r7, #24]
    1d8c:	2332      	movs	r3, #50	; 0x32
    1d8e:	2142      	movs	r1, #66	; 0x42
    1d90:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1d92:	697b      	ldr	r3, [r7, #20]
    1d94:	8b5b      	ldrh	r3, [r3, #26]
    1d96:	b29b      	uxth	r3, r3
    1d98:	2210      	movs	r2, #16
    1d9a:	4313      	orrs	r3, r2
    1d9c:	b29a      	uxth	r2, r3
    1d9e:	697b      	ldr	r3, [r7, #20]
    1da0:	835a      	strh	r2, [r3, #26]
    1da2:	e011      	b.n	1dc8 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1da4:	1c3b      	adds	r3, r7, #0
    1da6:	331f      	adds	r3, #31
    1da8:	781a      	ldrb	r2, [r3, #0]
    1daa:	2320      	movs	r3, #32
    1dac:	4013      	ands	r3, r2
    1dae:	d00b      	beq.n	1dc8 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1db0:	69ba      	ldr	r2, [r7, #24]
    1db2:	2332      	movs	r3, #50	; 0x32
    1db4:	2141      	movs	r1, #65	; 0x41
    1db6:	54d1      	strb	r1, [r2, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1db8:	697b      	ldr	r3, [r7, #20]
    1dba:	8b5b      	ldrh	r3, [r3, #26]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	2220      	movs	r2, #32
    1dc0:	4313      	orrs	r3, r2
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	697b      	ldr	r3, [r7, #20]
    1dc6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1dc8:	1c3b      	adds	r3, r7, #0
    1dca:	3310      	adds	r3, #16
    1dcc:	881a      	ldrh	r2, [r3, #0]
    1dce:	2304      	movs	r3, #4
    1dd0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1dd2:	d050      	beq.n	1e76 <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1dd4:	69bb      	ldr	r3, [r7, #24]
    1dd6:	695b      	ldr	r3, [r3, #20]
    1dd8:	69ba      	ldr	r2, [r7, #24]
    1dda:	1c10      	adds	r0, r2, #0
    1ddc:	4798      	blx	r3
    1dde:	e04a      	b.n	1e76 <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1de0:	697b      	ldr	r3, [r7, #20]
    1de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1de4:	b29a      	uxth	r2, r3
    1de6:	1c3b      	adds	r3, r7, #0
    1de8:	330e      	adds	r3, #14
    1dea:	05d2      	lsls	r2, r2, #23
    1dec:	0dd2      	lsrs	r2, r2, #23
    1dee:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1df0:	69bb      	ldr	r3, [r7, #24]
    1df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1df4:	1c3a      	adds	r2, r7, #0
    1df6:	320e      	adds	r2, #14
    1df8:	8812      	ldrh	r2, [r2, #0]
    1dfa:	b2d2      	uxtb	r2, r2
    1dfc:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1dfe:	69bb      	ldr	r3, [r7, #24]
    1e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e02:	1c5a      	adds	r2, r3, #1
    1e04:	69bb      	ldr	r3, [r7, #24]
    1e06:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e08:	69bb      	ldr	r3, [r7, #24]
    1e0a:	795b      	ldrb	r3, [r3, #5]
    1e0c:	2b01      	cmp	r3, #1
    1e0e:	d10d      	bne.n	1e2c <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1e10:	69bb      	ldr	r3, [r7, #24]
    1e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e14:	1c3a      	adds	r2, r7, #0
    1e16:	320e      	adds	r2, #14
    1e18:	8812      	ldrh	r2, [r2, #0]
    1e1a:	0a12      	lsrs	r2, r2, #8
    1e1c:	b292      	uxth	r2, r2
    1e1e:	b2d2      	uxtb	r2, r2
    1e20:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1e22:	69bb      	ldr	r3, [r7, #24]
    1e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e26:	1c5a      	adds	r2, r3, #1
    1e28:	69bb      	ldr	r3, [r7, #24]
    1e2a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1e2c:	69bb      	ldr	r3, [r7, #24]
    1e2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1e30:	b29b      	uxth	r3, r3
    1e32:	3b01      	subs	r3, #1
    1e34:	b29b      	uxth	r3, r3
    1e36:	69ba      	ldr	r2, [r7, #24]
    1e38:	1c19      	adds	r1, r3, #0
    1e3a:	8591      	strh	r1, [r2, #44]	; 0x2c
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d112      	bne.n	1e66 <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e40:	697b      	ldr	r3, [r7, #20]
    1e42:	2204      	movs	r2, #4
    1e44:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1e46:	69ba      	ldr	r2, [r7, #24]
    1e48:	2332      	movs	r3, #50	; 0x32
    1e4a:	2100      	movs	r1, #0
    1e4c:	54d1      	strb	r1, [r2, r3]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1e4e:	1c3b      	adds	r3, r7, #0
    1e50:	3310      	adds	r3, #16
    1e52:	881a      	ldrh	r2, [r3, #0]
    1e54:	2302      	movs	r3, #2
    1e56:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1e58:	d005      	beq.n	1e66 <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1e5a:	69bb      	ldr	r3, [r7, #24]
    1e5c:	691b      	ldr	r3, [r3, #16]
    1e5e:	69ba      	ldr	r2, [r7, #24]
    1e60:	1c10      	adds	r0, r2, #0
    1e62:	4798      	blx	r3
    1e64:	e007      	b.n	1e76 <_usart_interrupt_handler+0x2e2>
    1e66:	e006      	b.n	1e76 <_usart_interrupt_handler+0x2e2>
    1e68:	20003ce0 	.word	0x20003ce0
    1e6c:	00001b71 	.word	0x00001b71
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e70:	697b      	ldr	r3, [r7, #20]
    1e72:	2204      	movs	r2, #4
    1e74:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1e76:	1c3b      	adds	r3, r7, #0
    1e78:	3312      	adds	r3, #18
    1e7a:	881a      	ldrh	r2, [r3, #0]
    1e7c:	2310      	movs	r3, #16
    1e7e:	4013      	ands	r3, r2
    1e80:	d010      	beq.n	1ea4 <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1e82:	697b      	ldr	r3, [r7, #20]
    1e84:	2210      	movs	r2, #16
    1e86:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1e88:	697b      	ldr	r3, [r7, #20]
    1e8a:	2210      	movs	r2, #16
    1e8c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1e8e:	1c3b      	adds	r3, r7, #0
    1e90:	3310      	adds	r3, #16
    1e92:	881a      	ldrh	r2, [r3, #0]
    1e94:	2310      	movs	r3, #16
    1e96:	4013      	ands	r3, r2
    1e98:	d004      	beq.n	1ea4 <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1e9a:	69bb      	ldr	r3, [r7, #24]
    1e9c:	69db      	ldr	r3, [r3, #28]
    1e9e:	69ba      	ldr	r2, [r7, #24]
    1ea0:	1c10      	adds	r0, r2, #0
    1ea2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1ea4:	1c3b      	adds	r3, r7, #0
    1ea6:	3312      	adds	r3, #18
    1ea8:	881a      	ldrh	r2, [r3, #0]
    1eaa:	2320      	movs	r3, #32
    1eac:	4013      	ands	r3, r2
    1eae:	d010      	beq.n	1ed2 <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1eb0:	697b      	ldr	r3, [r7, #20]
    1eb2:	2220      	movs	r2, #32
    1eb4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1eb6:	697b      	ldr	r3, [r7, #20]
    1eb8:	2220      	movs	r2, #32
    1eba:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ebc:	1c3b      	adds	r3, r7, #0
    1ebe:	3310      	adds	r3, #16
    1ec0:	881a      	ldrh	r2, [r3, #0]
    1ec2:	2308      	movs	r3, #8
    1ec4:	4013      	ands	r3, r2
    1ec6:	d004      	beq.n	1ed2 <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ec8:	69bb      	ldr	r3, [r7, #24]
    1eca:	699b      	ldr	r3, [r3, #24]
    1ecc:	69ba      	ldr	r2, [r7, #24]
    1ece:	1c10      	adds	r0, r2, #0
    1ed0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1ed2:	1c3b      	adds	r3, r7, #0
    1ed4:	3312      	adds	r3, #18
    1ed6:	881a      	ldrh	r2, [r3, #0]
    1ed8:	2308      	movs	r3, #8
    1eda:	4013      	ands	r3, r2
    1edc:	d010      	beq.n	1f00 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ede:	697b      	ldr	r3, [r7, #20]
    1ee0:	2208      	movs	r2, #8
    1ee2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1ee4:	697b      	ldr	r3, [r7, #20]
    1ee6:	2208      	movs	r2, #8
    1ee8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1eea:	1c3b      	adds	r3, r7, #0
    1eec:	3310      	adds	r3, #16
    1eee:	881a      	ldrh	r2, [r3, #0]
    1ef0:	2320      	movs	r3, #32
    1ef2:	4013      	ands	r3, r2
    1ef4:	d004      	beq.n	1f00 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ef6:	69bb      	ldr	r3, [r7, #24]
    1ef8:	6a1b      	ldr	r3, [r3, #32]
    1efa:	69ba      	ldr	r2, [r7, #24]
    1efc:	1c10      	adds	r0, r2, #0
    1efe:	4798      	blx	r3
		}
	}
#endif
}
    1f00:	46bd      	mov	sp, r7
    1f02:	b008      	add	sp, #32
    1f04:	bd80      	pop	{r7, pc}
    1f06:	46c0      	nop			; (mov r8, r8)

00001f08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	b086      	sub	sp, #24
    1f0c:	af00      	add	r7, sp, #0
    1f0e:	60f8      	str	r0, [r7, #12]
    1f10:	60b9      	str	r1, [r7, #8]
    1f12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1f14:	2300      	movs	r3, #0
    1f16:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d002      	beq.n	1f24 <_read+0x1c>
		return -1;
    1f1e:	2301      	movs	r3, #1
    1f20:	425b      	negs	r3, r3
    1f22:	e015      	b.n	1f50 <_read+0x48>
	}

	for (; len > 0; --len) {
    1f24:	e010      	b.n	1f48 <_read+0x40>
		ptr_get(stdio_base, ptr);
    1f26:	4b0c      	ldr	r3, [pc, #48]	; (1f58 <_read+0x50>)
    1f28:	681a      	ldr	r2, [r3, #0]
    1f2a:	4b0c      	ldr	r3, [pc, #48]	; (1f5c <_read+0x54>)
    1f2c:	6819      	ldr	r1, [r3, #0]
    1f2e:	68bb      	ldr	r3, [r7, #8]
    1f30:	1c08      	adds	r0, r1, #0
    1f32:	1c19      	adds	r1, r3, #0
    1f34:	4790      	blx	r2
		ptr++;
    1f36:	68bb      	ldr	r3, [r7, #8]
    1f38:	3301      	adds	r3, #1
    1f3a:	60bb      	str	r3, [r7, #8]
		nChars++;
    1f3c:	697b      	ldr	r3, [r7, #20]
    1f3e:	3301      	adds	r3, #1
    1f40:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1f42:	687b      	ldr	r3, [r7, #4]
    1f44:	3b01      	subs	r3, #1
    1f46:	607b      	str	r3, [r7, #4]
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	dceb      	bgt.n	1f26 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1f4e:	697b      	ldr	r3, [r7, #20]
}
    1f50:	1c18      	adds	r0, r3, #0
    1f52:	46bd      	mov	sp, r7
    1f54:	b006      	add	sp, #24
    1f56:	bd80      	pop	{r7, pc}
    1f58:	20003cf8 	.word	0x20003cf8
    1f5c:	20003d00 	.word	0x20003d00

00001f60 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b086      	sub	sp, #24
    1f64:	af00      	add	r7, sp, #0
    1f66:	60f8      	str	r0, [r7, #12]
    1f68:	60b9      	str	r1, [r7, #8]
    1f6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1f6c:	2300      	movs	r3, #0
    1f6e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1f70:	68fb      	ldr	r3, [r7, #12]
    1f72:	2b01      	cmp	r3, #1
    1f74:	d008      	beq.n	1f88 <_write+0x28>
    1f76:	68fb      	ldr	r3, [r7, #12]
    1f78:	2b02      	cmp	r3, #2
    1f7a:	d005      	beq.n	1f88 <_write+0x28>
    1f7c:	68fb      	ldr	r3, [r7, #12]
    1f7e:	2b03      	cmp	r3, #3
    1f80:	d002      	beq.n	1f88 <_write+0x28>
		return -1;
    1f82:	2301      	movs	r3, #1
    1f84:	425b      	negs	r3, r3
    1f86:	e01b      	b.n	1fc0 <_write+0x60>
	}

	for (; len != 0; --len) {
    1f88:	e016      	b.n	1fb8 <_write+0x58>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1f8a:	4b0f      	ldr	r3, [pc, #60]	; (1fc8 <_write+0x68>)
    1f8c:	681a      	ldr	r2, [r3, #0]
    1f8e:	4b0f      	ldr	r3, [pc, #60]	; (1fcc <_write+0x6c>)
    1f90:	6819      	ldr	r1, [r3, #0]
    1f92:	68bb      	ldr	r3, [r7, #8]
    1f94:	1c58      	adds	r0, r3, #1
    1f96:	60b8      	str	r0, [r7, #8]
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	1c08      	adds	r0, r1, #0
    1f9c:	1c19      	adds	r1, r3, #0
    1f9e:	4790      	blx	r2
    1fa0:	1c03      	adds	r3, r0, #0
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	da02      	bge.n	1fac <_write+0x4c>
			return -1;
    1fa6:	2301      	movs	r3, #1
    1fa8:	425b      	negs	r3, r3
    1faa:	e009      	b.n	1fc0 <_write+0x60>
		}
		++nChars;
    1fac:	697b      	ldr	r3, [r7, #20]
    1fae:	3301      	adds	r3, #1
    1fb0:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	3b01      	subs	r3, #1
    1fb6:	607b      	str	r3, [r7, #4]
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	d1e5      	bne.n	1f8a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1fbe:	697b      	ldr	r3, [r7, #20]
}
    1fc0:	1c18      	adds	r0, r3, #0
    1fc2:	46bd      	mov	sp, r7
    1fc4:	b006      	add	sp, #24
    1fc6:	bd80      	pop	{r7, pc}
    1fc8:	20003cfc 	.word	0x20003cfc
    1fcc:	20003d00 	.word	0x20003d00

00001fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b084      	sub	sp, #16
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	60f8      	str	r0, [r7, #12]
    1fd8:	60b9      	str	r1, [r7, #8]
    1fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	3b04      	subs	r3, #4
    1fe0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	2280      	movs	r2, #128	; 0x80
    1fe6:	0452      	lsls	r2, r2, #17
    1fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1fea:	68fb      	ldr	r3, [r7, #12]
    1fec:	3b04      	subs	r3, #4
    1fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1ff0:	68ba      	ldr	r2, [r7, #8]
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	3b04      	subs	r3, #4
    1ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1ffc:	4a08      	ldr	r2, [pc, #32]	; (2020 <STACK_SIZE+0x20>)
    1ffe:	68fb      	ldr	r3, [r7, #12]
    2000:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	3b14      	subs	r3, #20
    2006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2008:	687a      	ldr	r2, [r7, #4]
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    200e:	68fb      	ldr	r3, [r7, #12]
    2010:	3b20      	subs	r3, #32
    2012:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    2014:	68fb      	ldr	r3, [r7, #12]
}
    2016:	1c18      	adds	r0, r3, #0
    2018:	46bd      	mov	sp, r7
    201a:	b004      	add	sp, #16
    201c:	bd80      	pop	{r7, pc}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	00002025 	.word	0x00002025

00002024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    2024:	b580      	push	{r7, lr}
    2026:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2028:	4b03      	ldr	r3, [pc, #12]	; (2038 <prvTaskExitError+0x14>)
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	3301      	adds	r3, #1
    202e:	d001      	beq.n	2034 <prvTaskExitError+0x10>
    2030:	b672      	cpsid	i
    2032:	e7fe      	b.n	2032 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    2034:	b672      	cpsid	i
	for( ;; );
    2036:	e7fe      	b.n	2036 <prvTaskExitError+0x12>
    2038:	20000004 	.word	0x20000004

0000203c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    203c:	b580      	push	{r7, lr}
    203e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    2040:	46bd      	mov	sp, r7
    2042:	bd80      	pop	{r7, pc}

00002044 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2044:	4a06      	ldr	r2, [pc, #24]	; (2060 <pxCurrentTCBConst2>)
    2046:	6813      	ldr	r3, [r2, #0]
    2048:	6818      	ldr	r0, [r3, #0]
    204a:	3020      	adds	r0, #32
    204c:	f380 8809 	msr	PSP, r0
    2050:	2002      	movs	r0, #2
    2052:	f380 8814 	msr	CONTROL, r0
    2056:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2058:	46ae      	mov	lr, r5
    205a:	b662      	cpsie	i
    205c:	bd00      	pop	{pc}
    205e:	46c0      	nop			; (mov r8, r8)

00002060 <pxCurrentTCBConst2>:
    2060:	20003b54 	.word	0x20003b54

00002064 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2064:	b580      	push	{r7, lr}
    2066:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2068:	4b0d      	ldr	r3, [pc, #52]	; (20a0 <xPortStartScheduler+0x3c>)
    206a:	4a0d      	ldr	r2, [pc, #52]	; (20a0 <xPortStartScheduler+0x3c>)
    206c:	6812      	ldr	r2, [r2, #0]
    206e:	21ff      	movs	r1, #255	; 0xff
    2070:	0409      	lsls	r1, r1, #16
    2072:	430a      	orrs	r2, r1
    2074:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2076:	4b0a      	ldr	r3, [pc, #40]	; (20a0 <xPortStartScheduler+0x3c>)
    2078:	4a09      	ldr	r2, [pc, #36]	; (20a0 <xPortStartScheduler+0x3c>)
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	21ff      	movs	r1, #255	; 0xff
    207e:	0609      	lsls	r1, r1, #24
    2080:	430a      	orrs	r2, r1
    2082:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    2084:	4b07      	ldr	r3, [pc, #28]	; (20a4 <xPortStartScheduler+0x40>)
    2086:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <xPortStartScheduler+0x44>)
    208a:	2200      	movs	r2, #0
    208c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    208e:	4b07      	ldr	r3, [pc, #28]	; (20ac <xPortStartScheduler+0x48>)
    2090:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    2092:	4b07      	ldr	r3, [pc, #28]	; (20b0 <xPortStartScheduler+0x4c>)
    2094:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    2096:	2300      	movs	r3, #0
}
    2098:	1c18      	adds	r0, r3, #0
    209a:	46bd      	mov	sp, r7
    209c:	bd80      	pop	{r7, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	e000ed20 	.word	0xe000ed20
    20a4:	000021b5 	.word	0x000021b5
    20a8:	20000004 	.word	0x20000004
    20ac:	00002045 	.word	0x00002045
    20b0:	00002025 	.word	0x00002025

000020b4 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    20b4:	b580      	push	{r7, lr}
    20b6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <vPortYield+0x18>)
    20ba:	2280      	movs	r2, #128	; 0x80
    20bc:	0552      	lsls	r2, r2, #21
    20be:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    20c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    20c4:	f3bf 8f6f 	isb	sy
}
    20c8:	46bd      	mov	sp, r7
    20ca:	bd80      	pop	{r7, pc}
    20cc:	e000ed04 	.word	0xe000ed04

000020d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    20d0:	b580      	push	{r7, lr}
    20d2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    20d4:	b672      	cpsid	i
    uxCriticalNesting++;
    20d6:	4b05      	ldr	r3, [pc, #20]	; (20ec <vPortEnterCritical+0x1c>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	1c5a      	adds	r2, r3, #1
    20dc:	4b03      	ldr	r3, [pc, #12]	; (20ec <vPortEnterCritical+0x1c>)
    20de:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    20e0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    20e4:	f3bf 8f6f 	isb	sy
}
    20e8:	46bd      	mov	sp, r7
    20ea:	bd80      	pop	{r7, pc}
    20ec:	20000004 	.word	0x20000004

000020f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    20f0:	b580      	push	{r7, lr}
    20f2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    20f4:	4b08      	ldr	r3, [pc, #32]	; (2118 <vPortExitCritical+0x28>)
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d101      	bne.n	2100 <vPortExitCritical+0x10>
    20fc:	b672      	cpsid	i
    20fe:	e7fe      	b.n	20fe <vPortExitCritical+0xe>
    uxCriticalNesting--;
    2100:	4b05      	ldr	r3, [pc, #20]	; (2118 <vPortExitCritical+0x28>)
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	1e5a      	subs	r2, r3, #1
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <vPortExitCritical+0x28>)
    2108:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    210a:	4b03      	ldr	r3, [pc, #12]	; (2118 <vPortExitCritical+0x28>)
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	2b00      	cmp	r3, #0
    2110:	d100      	bne.n	2114 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    2112:	b662      	cpsie	i
    }
}
    2114:	46bd      	mov	sp, r7
    2116:	bd80      	pop	{r7, pc}
    2118:	20000004 	.word	0x20000004

0000211c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    211c:	f3ef 8010 	mrs	r0, PRIMASK
    2120:	b672      	cpsid	i
    2122:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    2124:	2300      	movs	r3, #0
}
    2126:	1c18      	adds	r0, r3, #0

00002128 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    2128:	f380 8810 	msr	PRIMASK, r0
    212c:	4770      	bx	lr
    212e:	46c0      	nop			; (mov r8, r8)

00002130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2130:	f3ef 8009 	mrs	r0, PSP
    2134:	4b0e      	ldr	r3, [pc, #56]	; (2170 <pxCurrentTCBConst>)
    2136:	681a      	ldr	r2, [r3, #0]
    2138:	3820      	subs	r0, #32
    213a:	6010      	str	r0, [r2, #0]
    213c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    213e:	4644      	mov	r4, r8
    2140:	464d      	mov	r5, r9
    2142:	4656      	mov	r6, sl
    2144:	465f      	mov	r7, fp
    2146:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2148:	b508      	push	{r3, lr}
    214a:	b672      	cpsid	i
    214c:	f001 f8b2 	bl	32b4 <vTaskSwitchContext>
    2150:	b662      	cpsie	i
    2152:	bc0c      	pop	{r2, r3}
    2154:	6811      	ldr	r1, [r2, #0]
    2156:	6808      	ldr	r0, [r1, #0]
    2158:	3010      	adds	r0, #16
    215a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    215c:	46a0      	mov	r8, r4
    215e:	46a9      	mov	r9, r5
    2160:	46b2      	mov	sl, r6
    2162:	46bb      	mov	fp, r7
    2164:	f380 8809 	msr	PSP, r0
    2168:	3820      	subs	r0, #32
    216a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    216c:	4718      	bx	r3
    216e:	46c0      	nop			; (mov r8, r8)

00002170 <pxCurrentTCBConst>:
    2170:	20003b54 	.word	0x20003b54

00002174 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2174:	b580      	push	{r7, lr}
    2176:	b082      	sub	sp, #8
    2178:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    217a:	4b0a      	ldr	r3, [pc, #40]	; (21a4 <SysTick_Handler+0x30>)
    217c:	4798      	blx	r3
    217e:	1c03      	adds	r3, r0, #0
    2180:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2182:	4b09      	ldr	r3, [pc, #36]	; (21a8 <SysTick_Handler+0x34>)
    2184:	4798      	blx	r3
    2186:	1c03      	adds	r3, r0, #0
    2188:	2b00      	cmp	r3, #0
    218a:	d003      	beq.n	2194 <SysTick_Handler+0x20>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    218c:	4b07      	ldr	r3, [pc, #28]	; (21ac <SysTick_Handler+0x38>)
    218e:	2280      	movs	r2, #128	; 0x80
    2190:	0552      	lsls	r2, r2, #21
    2192:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	1c18      	adds	r0, r3, #0
    2198:	4b05      	ldr	r3, [pc, #20]	; (21b0 <SysTick_Handler+0x3c>)
    219a:	4798      	blx	r3
}
    219c:	46bd      	mov	sp, r7
    219e:	b002      	add	sp, #8
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	0000211d 	.word	0x0000211d
    21a8:	0000313d 	.word	0x0000313d
    21ac:	e000ed04 	.word	0xe000ed04
    21b0:	00002129 	.word	0x00002129

000021b4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    21b4:	b580      	push	{r7, lr}
    21b6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <vPortSetupTimerInterrupt+0x1c>)
    21ba:	2200      	movs	r2, #0
    21bc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <vPortSetupTimerInterrupt+0x20>)
    21c0:	4a05      	ldr	r2, [pc, #20]	; (21d8 <vPortSetupTimerInterrupt+0x24>)
    21c2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    21c4:	4b05      	ldr	r3, [pc, #20]	; (21dc <vPortSetupTimerInterrupt+0x28>)
    21c6:	2207      	movs	r2, #7
    21c8:	601a      	str	r2, [r3, #0]
}
    21ca:	46bd      	mov	sp, r7
    21cc:	bd80      	pop	{r7, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	e000e018 	.word	0xe000e018
    21d4:	e000e014 	.word	0xe000e014
    21d8:	00001f3f 	.word	0x00001f3f
    21dc:	e000e010 	.word	0xe000e010

000021e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    21e8:	2300      	movs	r3, #0
    21ea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    21ec:	687a      	ldr	r2, [r7, #4]
    21ee:	2307      	movs	r3, #7
    21f0:	4013      	ands	r3, r2
    21f2:	d004      	beq.n	21fe <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	2207      	movs	r2, #7
    21f8:	4393      	bics	r3, r2
    21fa:	3308      	adds	r3, #8
    21fc:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    21fe:	4b17      	ldr	r3, [pc, #92]	; (225c <pvPortMalloc+0x7c>)
    2200:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2202:	4b17      	ldr	r3, [pc, #92]	; (2260 <pvPortMalloc+0x80>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	2b00      	cmp	r3, #0
    2208:	d105      	bne.n	2216 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    220a:	4b16      	ldr	r3, [pc, #88]	; (2264 <pvPortMalloc+0x84>)
    220c:	2207      	movs	r2, #7
    220e:	4393      	bics	r3, r2
    2210:	1c1a      	adds	r2, r3, #0
    2212:	4b13      	ldr	r3, [pc, #76]	; (2260 <pvPortMalloc+0x80>)
    2214:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2216:	4b14      	ldr	r3, [pc, #80]	; (2268 <pvPortMalloc+0x88>)
    2218:	681a      	ldr	r2, [r3, #0]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	18d2      	adds	r2, r2, r3
    221e:	4b13      	ldr	r3, [pc, #76]	; (226c <pvPortMalloc+0x8c>)
    2220:	429a      	cmp	r2, r3
    2222:	d813      	bhi.n	224c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2224:	4b10      	ldr	r3, [pc, #64]	; (2268 <pvPortMalloc+0x88>)
    2226:	681a      	ldr	r2, [r3, #0]
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	18d2      	adds	r2, r2, r3
    222c:	4b0e      	ldr	r3, [pc, #56]	; (2268 <pvPortMalloc+0x88>)
    222e:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2230:	429a      	cmp	r2, r3
    2232:	d90b      	bls.n	224c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <pvPortMalloc+0x80>)
    2236:	681a      	ldr	r2, [r3, #0]
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <pvPortMalloc+0x88>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	18d3      	adds	r3, r2, r3
    223e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    2240:	4b09      	ldr	r3, [pc, #36]	; (2268 <pvPortMalloc+0x88>)
    2242:	681a      	ldr	r2, [r3, #0]
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	18d2      	adds	r2, r2, r3
    2248:	4b07      	ldr	r3, [pc, #28]	; (2268 <pvPortMalloc+0x88>)
    224a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    224c:	4b08      	ldr	r3, [pc, #32]	; (2270 <pvPortMalloc+0x90>)
    224e:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    2250:	68fb      	ldr	r3, [r7, #12]
}
    2252:	1c18      	adds	r0, r3, #0
    2254:	46bd      	mov	sp, r7
    2256:	b004      	add	sp, #16
    2258:	bd80      	pop	{r7, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	00002fd9 	.word	0x00002fd9
    2260:	20003b50 	.word	0x20003b50
    2264:	200000bc 	.word	0x200000bc
    2268:	20003b4c 	.word	0x20003b4c
    226c:	00003a8f 	.word	0x00003a8f
    2270:	00002ff1 	.word	0x00002ff1

00002274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2274:	b580      	push	{r7, lr}
    2276:	b082      	sub	sp, #8
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	2b00      	cmp	r3, #0
    2280:	d001      	beq.n	2286 <vPortFree+0x12>
    2282:	b672      	cpsid	i
    2284:	e7fe      	b.n	2284 <vPortFree+0x10>
}
    2286:	46bd      	mov	sp, r7
    2288:	b002      	add	sp, #8
    228a:	bd80      	pop	{r7, pc}

0000228c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    228c:	b580      	push	{r7, lr}
    228e:	b082      	sub	sp, #8
    2290:	af00      	add	r7, sp, #0
    2292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	1c1a      	adds	r2, r3, #0
    2298:	3208      	adds	r2, #8
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2201      	movs	r2, #1
    22a2:	4252      	negs	r2, r2
    22a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	1c1a      	adds	r2, r3, #0
    22aa:	3208      	adds	r2, #8
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	1c1a      	adds	r2, r3, #0
    22b4:	3208      	adds	r2, #8
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	2200      	movs	r2, #0
    22be:	601a      	str	r2, [r3, #0]
}
    22c0:	46bd      	mov	sp, r7
    22c2:	b002      	add	sp, #8
    22c4:	bd80      	pop	{r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)

000022c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b082      	sub	sp, #8
    22cc:	af00      	add	r7, sp, #0
    22ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	2200      	movs	r2, #0
    22d4:	611a      	str	r2, [r3, #16]
}
    22d6:	46bd      	mov	sp, r7
    22d8:	b002      	add	sp, #8
    22da:	bd80      	pop	{r7, pc}

000022dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22dc:	b580      	push	{r7, lr}
    22de:	b084      	sub	sp, #16
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
    22e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	685b      	ldr	r3, [r3, #4]
    22ea:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    22ec:	683b      	ldr	r3, [r7, #0]
    22ee:	68fa      	ldr	r2, [r7, #12]
    22f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    22f2:	68fb      	ldr	r3, [r7, #12]
    22f4:	689a      	ldr	r2, [r3, #8]
    22f6:	683b      	ldr	r3, [r7, #0]
    22f8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	689b      	ldr	r3, [r3, #8]
    22fe:	683a      	ldr	r2, [r7, #0]
    2300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2302:	68fb      	ldr	r3, [r7, #12]
    2304:	683a      	ldr	r2, [r7, #0]
    2306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2308:	683b      	ldr	r3, [r7, #0]
    230a:	687a      	ldr	r2, [r7, #4]
    230c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	1c5a      	adds	r2, r3, #1
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	601a      	str	r2, [r3, #0]
}
    2318:	46bd      	mov	sp, r7
    231a:	b004      	add	sp, #16
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)

00002320 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2320:	b580      	push	{r7, lr}
    2322:	b084      	sub	sp, #16
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    232a:	683b      	ldr	r3, [r7, #0]
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2330:	68bb      	ldr	r3, [r7, #8]
    2332:	3301      	adds	r3, #1
    2334:	d103      	bne.n	233e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	691b      	ldr	r3, [r3, #16]
    233a:	60fb      	str	r3, [r7, #12]
    233c:	e00c      	b.n	2358 <vListInsert+0x38>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	3308      	adds	r3, #8
    2342:	60fb      	str	r3, [r7, #12]
    2344:	e002      	b.n	234c <vListInsert+0x2c>
    2346:	68fb      	ldr	r3, [r7, #12]
    2348:	685b      	ldr	r3, [r3, #4]
    234a:	60fb      	str	r3, [r7, #12]
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	681a      	ldr	r2, [r3, #0]
    2352:	68bb      	ldr	r3, [r7, #8]
    2354:	429a      	cmp	r2, r3
    2356:	d9f6      	bls.n	2346 <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2358:	68fb      	ldr	r3, [r7, #12]
    235a:	685a      	ldr	r2, [r3, #4]
    235c:	683b      	ldr	r3, [r7, #0]
    235e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2360:	683b      	ldr	r3, [r7, #0]
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	683a      	ldr	r2, [r7, #0]
    2366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2368:	683b      	ldr	r3, [r7, #0]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    236e:	68fb      	ldr	r3, [r7, #12]
    2370:	683a      	ldr	r2, [r7, #0]
    2372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2374:	683b      	ldr	r3, [r7, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	1c5a      	adds	r2, r3, #1
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	601a      	str	r2, [r3, #0]
}
    2384:	46bd      	mov	sp, r7
    2386:	b004      	add	sp, #16
    2388:	bd80      	pop	{r7, pc}
    238a:	46c0      	nop			; (mov r8, r8)

0000238c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    238c:	b580      	push	{r7, lr}
    238e:	b084      	sub	sp, #16
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	691b      	ldr	r3, [r3, #16]
    2398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	685b      	ldr	r3, [r3, #4]
    239e:	687a      	ldr	r2, [r7, #4]
    23a0:	6892      	ldr	r2, [r2, #8]
    23a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	687a      	ldr	r2, [r7, #4]
    23aa:	6852      	ldr	r2, [r2, #4]
    23ac:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    23ae:	68fb      	ldr	r3, [r7, #12]
    23b0:	685a      	ldr	r2, [r3, #4]
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	429a      	cmp	r2, r3
    23b6:	d103      	bne.n	23c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	689a      	ldr	r2, [r3, #8]
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	2200      	movs	r2, #0
    23c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	681b      	ldr	r3, [r3, #0]
    23ca:	1e5a      	subs	r2, r3, #1
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    23d0:	68fb      	ldr	r3, [r7, #12]
    23d2:	681b      	ldr	r3, [r3, #0]
}
    23d4:	1c18      	adds	r0, r3, #0
    23d6:	46bd      	mov	sp, r7
    23d8:	b004      	add	sp, #16
    23da:	bd80      	pop	{r7, pc}

000023dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    23dc:	b580      	push	{r7, lr}
    23de:	b084      	sub	sp, #16
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d101      	bne.n	23f4 <xQueueGenericReset+0x18>
    23f0:	b672      	cpsid	i
    23f2:	e7fe      	b.n	23f2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    23f4:	4b24      	ldr	r3, [pc, #144]	; (2488 <xQueueGenericReset+0xac>)
    23f6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	68fb      	ldr	r3, [r7, #12]
    23fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2404:	434b      	muls	r3, r1
    2406:	18d2      	adds	r2, r2, r3
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	2200      	movs	r2, #0
    2410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	681a      	ldr	r2, [r3, #0]
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    241a:	68fb      	ldr	r3, [r7, #12]
    241c:	681a      	ldr	r2, [r3, #0]
    241e:	68fb      	ldr	r3, [r7, #12]
    2420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2422:	1e59      	subs	r1, r3, #1
    2424:	68fb      	ldr	r3, [r7, #12]
    2426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2428:	434b      	muls	r3, r1
    242a:	18d2      	adds	r2, r2, r3
    242c:	68fb      	ldr	r3, [r7, #12]
    242e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2430:	68fb      	ldr	r3, [r7, #12]
    2432:	2201      	movs	r2, #1
    2434:	4252      	negs	r2, r2
    2436:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	2201      	movs	r2, #1
    243c:	4252      	negs	r2, r2
    243e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    2440:	683b      	ldr	r3, [r7, #0]
    2442:	2b00      	cmp	r3, #0
    2444:	d10e      	bne.n	2464 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	691b      	ldr	r3, [r3, #16]
    244a:	2b00      	cmp	r3, #0
    244c:	d014      	beq.n	2478 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    244e:	68fb      	ldr	r3, [r7, #12]
    2450:	3310      	adds	r3, #16
    2452:	1c18      	adds	r0, r3, #0
    2454:	4b0d      	ldr	r3, [pc, #52]	; (248c <xQueueGenericReset+0xb0>)
    2456:	4798      	blx	r3
    2458:	1c03      	adds	r3, r0, #0
    245a:	2b01      	cmp	r3, #1
    245c:	d10c      	bne.n	2478 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    245e:	4b0c      	ldr	r3, [pc, #48]	; (2490 <xQueueGenericReset+0xb4>)
    2460:	4798      	blx	r3
    2462:	e009      	b.n	2478 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2464:	68fb      	ldr	r3, [r7, #12]
    2466:	3310      	adds	r3, #16
    2468:	1c18      	adds	r0, r3, #0
    246a:	4b0a      	ldr	r3, [pc, #40]	; (2494 <xQueueGenericReset+0xb8>)
    246c:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    246e:	68fb      	ldr	r3, [r7, #12]
    2470:	3324      	adds	r3, #36	; 0x24
    2472:	1c18      	adds	r0, r3, #0
    2474:	4b07      	ldr	r3, [pc, #28]	; (2494 <xQueueGenericReset+0xb8>)
    2476:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    2478:	4b07      	ldr	r3, [pc, #28]	; (2498 <xQueueGenericReset+0xbc>)
    247a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    247c:	2301      	movs	r3, #1
}
    247e:	1c18      	adds	r0, r3, #0
    2480:	46bd      	mov	sp, r7
    2482:	b004      	add	sp, #16
    2484:	bd80      	pop	{r7, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	000020d1 	.word	0x000020d1
    248c:	0000342d 	.word	0x0000342d
    2490:	000020b5 	.word	0x000020b5
    2494:	0000228d 	.word	0x0000228d
    2498:	000020f1 	.word	0x000020f1

0000249c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    249c:	b580      	push	{r7, lr}
    249e:	b088      	sub	sp, #32
    24a0:	af00      	add	r7, sp, #0
    24a2:	60f8      	str	r0, [r7, #12]
    24a4:	60b9      	str	r1, [r7, #8]
    24a6:	1dfb      	adds	r3, r7, #7
    24a8:	701a      	strb	r2, [r3, #0]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    24aa:	2300      	movs	r3, #0
    24ac:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    24ae:	68fb      	ldr	r3, [r7, #12]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d02c      	beq.n	250e <xQueueGenericCreate+0x72>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    24b4:	2050      	movs	r0, #80	; 0x50
    24b6:	4b1b      	ldr	r3, [pc, #108]	; (2524 <xQueueGenericCreate+0x88>)
    24b8:	4798      	blx	r3
    24ba:	1c03      	adds	r3, r0, #0
    24bc:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
    24be:	69bb      	ldr	r3, [r7, #24]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d024      	beq.n	250e <xQueueGenericCreate+0x72>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24c4:	68fb      	ldr	r3, [r7, #12]
    24c6:	68ba      	ldr	r2, [r7, #8]
    24c8:	4353      	muls	r3, r2
    24ca:	3301      	adds	r3, #1
    24cc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    24ce:	697b      	ldr	r3, [r7, #20]
    24d0:	1c18      	adds	r0, r3, #0
    24d2:	4b14      	ldr	r3, [pc, #80]	; (2524 <xQueueGenericCreate+0x88>)
    24d4:	4798      	blx	r3
    24d6:	1c02      	adds	r2, r0, #0
    24d8:	69bb      	ldr	r3, [r7, #24]
    24da:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    24dc:	69bb      	ldr	r3, [r7, #24]
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d010      	beq.n	2506 <xQueueGenericCreate+0x6a>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    24e4:	69bb      	ldr	r3, [r7, #24]
    24e6:	68fa      	ldr	r2, [r7, #12]
    24e8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    24ea:	69bb      	ldr	r3, [r7, #24]
    24ec:	68ba      	ldr	r2, [r7, #8]
    24ee:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    24f0:	69bb      	ldr	r3, [r7, #24]
    24f2:	1c18      	adds	r0, r3, #0
    24f4:	2101      	movs	r1, #1
    24f6:	4b0c      	ldr	r3, [pc, #48]	; (2528 <xQueueGenericCreate+0x8c>)
    24f8:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    24fa:	69bb      	ldr	r3, [r7, #24]
    24fc:	2200      	movs	r2, #0
    24fe:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2500:	69bb      	ldr	r3, [r7, #24]
    2502:	61fb      	str	r3, [r7, #28]
    2504:	e003      	b.n	250e <xQueueGenericCreate+0x72>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2506:	69bb      	ldr	r3, [r7, #24]
    2508:	1c18      	adds	r0, r3, #0
    250a:	4b08      	ldr	r3, [pc, #32]	; (252c <xQueueGenericCreate+0x90>)
    250c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    250e:	69fb      	ldr	r3, [r7, #28]
    2510:	2b00      	cmp	r3, #0
    2512:	d101      	bne.n	2518 <xQueueGenericCreate+0x7c>
    2514:	b672      	cpsid	i
    2516:	e7fe      	b.n	2516 <xQueueGenericCreate+0x7a>

	return xReturn;
    2518:	69fb      	ldr	r3, [r7, #28]
}
    251a:	1c18      	adds	r0, r3, #0
    251c:	46bd      	mov	sp, r7
    251e:	b008      	add	sp, #32
    2520:	bd80      	pop	{r7, pc}
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	000021e1 	.word	0x000021e1
    2528:	000023dd 	.word	0x000023dd
    252c:	00002275 	.word	0x00002275

00002530 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2530:	b580      	push	{r7, lr}
    2532:	b088      	sub	sp, #32
    2534:	af00      	add	r7, sp, #0
    2536:	60f8      	str	r0, [r7, #12]
    2538:	60b9      	str	r1, [r7, #8]
    253a:	607a      	str	r2, [r7, #4]
    253c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    253e:	2300      	movs	r3, #0
    2540:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2542:	68fb      	ldr	r3, [r7, #12]
    2544:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    2546:	69bb      	ldr	r3, [r7, #24]
    2548:	2b00      	cmp	r3, #0
    254a:	d101      	bne.n	2550 <xQueueGenericSend+0x20>
    254c:	b672      	cpsid	i
    254e:	e7fe      	b.n	254e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2550:	68bb      	ldr	r3, [r7, #8]
    2552:	2b00      	cmp	r3, #0
    2554:	d103      	bne.n	255e <xQueueGenericSend+0x2e>
    2556:	69bb      	ldr	r3, [r7, #24]
    2558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    255a:	2b00      	cmp	r3, #0
    255c:	d101      	bne.n	2562 <xQueueGenericSend+0x32>
    255e:	2301      	movs	r3, #1
    2560:	e000      	b.n	2564 <xQueueGenericSend+0x34>
    2562:	2300      	movs	r3, #0
    2564:	2b00      	cmp	r3, #0
    2566:	d101      	bne.n	256c <xQueueGenericSend+0x3c>
    2568:	b672      	cpsid	i
    256a:	e7fe      	b.n	256a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    256c:	683b      	ldr	r3, [r7, #0]
    256e:	2b02      	cmp	r3, #2
    2570:	d103      	bne.n	257a <xQueueGenericSend+0x4a>
    2572:	69bb      	ldr	r3, [r7, #24]
    2574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2576:	2b01      	cmp	r3, #1
    2578:	d101      	bne.n	257e <xQueueGenericSend+0x4e>
    257a:	2301      	movs	r3, #1
    257c:	e000      	b.n	2580 <xQueueGenericSend+0x50>
    257e:	2300      	movs	r3, #0
    2580:	2b00      	cmp	r3, #0
    2582:	d101      	bne.n	2588 <xQueueGenericSend+0x58>
    2584:	b672      	cpsid	i
    2586:	e7fe      	b.n	2586 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2588:	4b51      	ldr	r3, [pc, #324]	; (26d0 <xQueueGenericSend+0x1a0>)
    258a:	4798      	blx	r3
    258c:	1c03      	adds	r3, r0, #0
    258e:	2b00      	cmp	r3, #0
    2590:	d102      	bne.n	2598 <xQueueGenericSend+0x68>
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	2b00      	cmp	r3, #0
    2596:	d101      	bne.n	259c <xQueueGenericSend+0x6c>
    2598:	2301      	movs	r3, #1
    259a:	e000      	b.n	259e <xQueueGenericSend+0x6e>
    259c:	2300      	movs	r3, #0
    259e:	2b00      	cmp	r3, #0
    25a0:	d101      	bne.n	25a6 <xQueueGenericSend+0x76>
    25a2:	b672      	cpsid	i
    25a4:	e7fe      	b.n	25a4 <xQueueGenericSend+0x74>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    25a6:	4b4b      	ldr	r3, [pc, #300]	; (26d4 <xQueueGenericSend+0x1a4>)
    25a8:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    25aa:	69bb      	ldr	r3, [r7, #24]
    25ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    25ae:	69bb      	ldr	r3, [r7, #24]
    25b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    25b2:	429a      	cmp	r2, r3
    25b4:	d302      	bcc.n	25bc <xQueueGenericSend+0x8c>
    25b6:	683b      	ldr	r3, [r7, #0]
    25b8:	2b02      	cmp	r3, #2
    25ba:	d129      	bne.n	2610 <xQueueGenericSend+0xe0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    25bc:	69b9      	ldr	r1, [r7, #24]
    25be:	68ba      	ldr	r2, [r7, #8]
    25c0:	683b      	ldr	r3, [r7, #0]
    25c2:	1c08      	adds	r0, r1, #0
    25c4:	1c11      	adds	r1, r2, #0
    25c6:	1c1a      	adds	r2, r3, #0
    25c8:	4b43      	ldr	r3, [pc, #268]	; (26d8 <xQueueGenericSend+0x1a8>)
    25ca:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    25cc:	69bb      	ldr	r3, [r7, #24]
    25ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    25d0:	2b00      	cmp	r3, #0
    25d2:	d00b      	beq.n	25ec <xQueueGenericSend+0xbc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    25d4:	69ba      	ldr	r2, [r7, #24]
    25d6:	683b      	ldr	r3, [r7, #0]
    25d8:	1c10      	adds	r0, r2, #0
    25da:	1c19      	adds	r1, r3, #0
    25dc:	4b3f      	ldr	r3, [pc, #252]	; (26dc <xQueueGenericSend+0x1ac>)
    25de:	4798      	blx	r3
    25e0:	1c03      	adds	r3, r0, #0
    25e2:	2b01      	cmp	r3, #1
    25e4:	d110      	bne.n	2608 <xQueueGenericSend+0xd8>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    25e6:	4b3e      	ldr	r3, [pc, #248]	; (26e0 <xQueueGenericSend+0x1b0>)
    25e8:	4798      	blx	r3
    25ea:	e00d      	b.n	2608 <xQueueGenericSend+0xd8>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25ec:	69bb      	ldr	r3, [r7, #24]
    25ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    25f0:	2b00      	cmp	r3, #0
    25f2:	d009      	beq.n	2608 <xQueueGenericSend+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    25f4:	69bb      	ldr	r3, [r7, #24]
    25f6:	3324      	adds	r3, #36	; 0x24
    25f8:	1c18      	adds	r0, r3, #0
    25fa:	4b3a      	ldr	r3, [pc, #232]	; (26e4 <xQueueGenericSend+0x1b4>)
    25fc:	4798      	blx	r3
    25fe:	1c03      	adds	r3, r0, #0
    2600:	2b01      	cmp	r3, #1
    2602:	d101      	bne.n	2608 <xQueueGenericSend+0xd8>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    2604:	4b36      	ldr	r3, [pc, #216]	; (26e0 <xQueueGenericSend+0x1b0>)
    2606:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2608:	4b37      	ldr	r3, [pc, #220]	; (26e8 <xQueueGenericSend+0x1b8>)
    260a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    260c:	2301      	movs	r3, #1
    260e:	e05b      	b.n	26c8 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	2b00      	cmp	r3, #0
    2614:	d103      	bne.n	261e <xQueueGenericSend+0xee>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2616:	4b34      	ldr	r3, [pc, #208]	; (26e8 <xQueueGenericSend+0x1b8>)
    2618:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    261a:	2300      	movs	r3, #0
    261c:	e054      	b.n	26c8 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
    261e:	69fb      	ldr	r3, [r7, #28]
    2620:	2b00      	cmp	r3, #0
    2622:	d106      	bne.n	2632 <xQueueGenericSend+0x102>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2624:	1c3b      	adds	r3, r7, #0
    2626:	3310      	adds	r3, #16
    2628:	1c18      	adds	r0, r3, #0
    262a:	4b30      	ldr	r3, [pc, #192]	; (26ec <xQueueGenericSend+0x1bc>)
    262c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    262e:	2301      	movs	r3, #1
    2630:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2632:	4b2d      	ldr	r3, [pc, #180]	; (26e8 <xQueueGenericSend+0x1b8>)
    2634:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2636:	4b2e      	ldr	r3, [pc, #184]	; (26f0 <xQueueGenericSend+0x1c0>)
    2638:	4798      	blx	r3
		prvLockQueue( pxQueue );
    263a:	4b26      	ldr	r3, [pc, #152]	; (26d4 <xQueueGenericSend+0x1a4>)
    263c:	4798      	blx	r3
    263e:	69bb      	ldr	r3, [r7, #24]
    2640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2642:	3301      	adds	r3, #1
    2644:	d102      	bne.n	264c <xQueueGenericSend+0x11c>
    2646:	69bb      	ldr	r3, [r7, #24]
    2648:	2200      	movs	r2, #0
    264a:	645a      	str	r2, [r3, #68]	; 0x44
    264c:	69bb      	ldr	r3, [r7, #24]
    264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2650:	3301      	adds	r3, #1
    2652:	d102      	bne.n	265a <xQueueGenericSend+0x12a>
    2654:	69bb      	ldr	r3, [r7, #24]
    2656:	2200      	movs	r2, #0
    2658:	649a      	str	r2, [r3, #72]	; 0x48
    265a:	4b23      	ldr	r3, [pc, #140]	; (26e8 <xQueueGenericSend+0x1b8>)
    265c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    265e:	1c3a      	adds	r2, r7, #0
    2660:	3210      	adds	r2, #16
    2662:	1d3b      	adds	r3, r7, #4
    2664:	1c10      	adds	r0, r2, #0
    2666:	1c19      	adds	r1, r3, #0
    2668:	4b22      	ldr	r3, [pc, #136]	; (26f4 <xQueueGenericSend+0x1c4>)
    266a:	4798      	blx	r3
    266c:	1c03      	adds	r3, r0, #0
    266e:	2b00      	cmp	r3, #0
    2670:	d121      	bne.n	26b6 <xQueueGenericSend+0x186>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2672:	69bb      	ldr	r3, [r7, #24]
    2674:	1c18      	adds	r0, r3, #0
    2676:	4b20      	ldr	r3, [pc, #128]	; (26f8 <xQueueGenericSend+0x1c8>)
    2678:	4798      	blx	r3
    267a:	1c03      	adds	r3, r0, #0
    267c:	2b00      	cmp	r3, #0
    267e:	d013      	beq.n	26a8 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2680:	69bb      	ldr	r3, [r7, #24]
    2682:	1c1a      	adds	r2, r3, #0
    2684:	3210      	adds	r2, #16
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	1c10      	adds	r0, r2, #0
    268a:	1c19      	adds	r1, r3, #0
    268c:	4b1b      	ldr	r3, [pc, #108]	; (26fc <xQueueGenericSend+0x1cc>)
    268e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2690:	69bb      	ldr	r3, [r7, #24]
    2692:	1c18      	adds	r0, r3, #0
    2694:	4b1a      	ldr	r3, [pc, #104]	; (2700 <xQueueGenericSend+0x1d0>)
    2696:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2698:	4b1a      	ldr	r3, [pc, #104]	; (2704 <xQueueGenericSend+0x1d4>)
    269a:	4798      	blx	r3
    269c:	1c03      	adds	r3, r0, #0
    269e:	2b00      	cmp	r3, #0
    26a0:	d111      	bne.n	26c6 <xQueueGenericSend+0x196>
				{
					portYIELD_WITHIN_API();
    26a2:	4b0f      	ldr	r3, [pc, #60]	; (26e0 <xQueueGenericSend+0x1b0>)
    26a4:	4798      	blx	r3
    26a6:	e00e      	b.n	26c6 <xQueueGenericSend+0x196>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    26a8:	69bb      	ldr	r3, [r7, #24]
    26aa:	1c18      	adds	r0, r3, #0
    26ac:	4b14      	ldr	r3, [pc, #80]	; (2700 <xQueueGenericSend+0x1d0>)
    26ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
    26b0:	4b14      	ldr	r3, [pc, #80]	; (2704 <xQueueGenericSend+0x1d4>)
    26b2:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    26b4:	e777      	b.n	25a6 <xQueueGenericSend+0x76>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    26b6:	69bb      	ldr	r3, [r7, #24]
    26b8:	1c18      	adds	r0, r3, #0
    26ba:	4b11      	ldr	r3, [pc, #68]	; (2700 <xQueueGenericSend+0x1d0>)
    26bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    26be:	4b11      	ldr	r3, [pc, #68]	; (2704 <xQueueGenericSend+0x1d4>)
    26c0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    26c2:	2300      	movs	r3, #0
    26c4:	e000      	b.n	26c8 <xQueueGenericSend+0x198>
		}
	}
    26c6:	e76e      	b.n	25a6 <xQueueGenericSend+0x76>
}
    26c8:	1c18      	adds	r0, r3, #0
    26ca:	46bd      	mov	sp, r7
    26cc:	b008      	add	sp, #32
    26ce:	bd80      	pop	{r7, pc}
    26d0:	00003901 	.word	0x00003901
    26d4:	000020d1 	.word	0x000020d1
    26d8:	00002a11 	.word	0x00002a11
    26dc:	00002cdd 	.word	0x00002cdd
    26e0:	000020b5 	.word	0x000020b5
    26e4:	0000342d 	.word	0x0000342d
    26e8:	000020f1 	.word	0x000020f1
    26ec:	000034ed 	.word	0x000034ed
    26f0:	00002fd9 	.word	0x00002fd9
    26f4:	0000351d 	.word	0x0000351d
    26f8:	00002c3d 	.word	0x00002c3d
    26fc:	00003355 	.word	0x00003355
    2700:	00002b41 	.word	0x00002b41
    2704:	00002ff1 	.word	0x00002ff1

00002708 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2708:	b580      	push	{r7, lr}
    270a:	b088      	sub	sp, #32
    270c:	af00      	add	r7, sp, #0
    270e:	60f8      	str	r0, [r7, #12]
    2710:	60b9      	str	r1, [r7, #8]
    2712:	607a      	str	r2, [r7, #4]
    2714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2716:	68fb      	ldr	r3, [r7, #12]
    2718:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    271a:	69bb      	ldr	r3, [r7, #24]
    271c:	2b00      	cmp	r3, #0
    271e:	d101      	bne.n	2724 <xQueueGenericSendFromISR+0x1c>
    2720:	b672      	cpsid	i
    2722:	e7fe      	b.n	2722 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2724:	68bb      	ldr	r3, [r7, #8]
    2726:	2b00      	cmp	r3, #0
    2728:	d103      	bne.n	2732 <xQueueGenericSendFromISR+0x2a>
    272a:	69bb      	ldr	r3, [r7, #24]
    272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    272e:	2b00      	cmp	r3, #0
    2730:	d101      	bne.n	2736 <xQueueGenericSendFromISR+0x2e>
    2732:	2301      	movs	r3, #1
    2734:	e000      	b.n	2738 <xQueueGenericSendFromISR+0x30>
    2736:	2300      	movs	r3, #0
    2738:	2b00      	cmp	r3, #0
    273a:	d101      	bne.n	2740 <xQueueGenericSendFromISR+0x38>
    273c:	b672      	cpsid	i
    273e:	e7fe      	b.n	273e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2740:	683b      	ldr	r3, [r7, #0]
    2742:	2b02      	cmp	r3, #2
    2744:	d103      	bne.n	274e <xQueueGenericSendFromISR+0x46>
    2746:	69bb      	ldr	r3, [r7, #24]
    2748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    274a:	2b01      	cmp	r3, #1
    274c:	d101      	bne.n	2752 <xQueueGenericSendFromISR+0x4a>
    274e:	2301      	movs	r3, #1
    2750:	e000      	b.n	2754 <xQueueGenericSendFromISR+0x4c>
    2752:	2300      	movs	r3, #0
    2754:	2b00      	cmp	r3, #0
    2756:	d101      	bne.n	275c <xQueueGenericSendFromISR+0x54>
    2758:	b672      	cpsid	i
    275a:	e7fe      	b.n	275a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    275c:	4b29      	ldr	r3, [pc, #164]	; (2804 <xQueueGenericSendFromISR+0xfc>)
    275e:	4798      	blx	r3
    2760:	1c03      	adds	r3, r0, #0
    2762:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2764:	69bb      	ldr	r3, [r7, #24]
    2766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2768:	69bb      	ldr	r3, [r7, #24]
    276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    276c:	429a      	cmp	r2, r3
    276e:	d302      	bcc.n	2776 <xQueueGenericSendFromISR+0x6e>
    2770:	683b      	ldr	r3, [r7, #0]
    2772:	2b02      	cmp	r3, #2
    2774:	d13a      	bne.n	27ec <xQueueGenericSendFromISR+0xe4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2776:	69b9      	ldr	r1, [r7, #24]
    2778:	68ba      	ldr	r2, [r7, #8]
    277a:	683b      	ldr	r3, [r7, #0]
    277c:	1c08      	adds	r0, r1, #0
    277e:	1c11      	adds	r1, r2, #0
    2780:	1c1a      	adds	r2, r3, #0
    2782:	4b21      	ldr	r3, [pc, #132]	; (2808 <xQueueGenericSendFromISR+0x100>)
    2784:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2786:	69bb      	ldr	r3, [r7, #24]
    2788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    278a:	3301      	adds	r3, #1
    278c:	d126      	bne.n	27dc <xQueueGenericSendFromISR+0xd4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    278e:	69bb      	ldr	r3, [r7, #24]
    2790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2792:	2b00      	cmp	r3, #0
    2794:	d00f      	beq.n	27b6 <xQueueGenericSendFromISR+0xae>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2796:	69ba      	ldr	r2, [r7, #24]
    2798:	683b      	ldr	r3, [r7, #0]
    279a:	1c10      	adds	r0, r2, #0
    279c:	1c19      	adds	r1, r3, #0
    279e:	4b1b      	ldr	r3, [pc, #108]	; (280c <xQueueGenericSendFromISR+0x104>)
    27a0:	4798      	blx	r3
    27a2:	1c03      	adds	r3, r0, #0
    27a4:	2b01      	cmp	r3, #1
    27a6:	d11e      	bne.n	27e6 <xQueueGenericSendFromISR+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	2b00      	cmp	r3, #0
    27ac:	d01b      	beq.n	27e6 <xQueueGenericSendFromISR+0xde>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	2201      	movs	r2, #1
    27b2:	601a      	str	r2, [r3, #0]
    27b4:	e017      	b.n	27e6 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27b6:	69bb      	ldr	r3, [r7, #24]
    27b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27ba:	2b00      	cmp	r3, #0
    27bc:	d013      	beq.n	27e6 <xQueueGenericSendFromISR+0xde>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27be:	69bb      	ldr	r3, [r7, #24]
    27c0:	3324      	adds	r3, #36	; 0x24
    27c2:	1c18      	adds	r0, r3, #0
    27c4:	4b12      	ldr	r3, [pc, #72]	; (2810 <xQueueGenericSendFromISR+0x108>)
    27c6:	4798      	blx	r3
    27c8:	1c03      	adds	r3, r0, #0
    27ca:	2b00      	cmp	r3, #0
    27cc:	d00b      	beq.n	27e6 <xQueueGenericSendFromISR+0xde>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d008      	beq.n	27e6 <xQueueGenericSendFromISR+0xde>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	2201      	movs	r2, #1
    27d8:	601a      	str	r2, [r3, #0]
    27da:	e004      	b.n	27e6 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    27dc:	69bb      	ldr	r3, [r7, #24]
    27de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    27e0:	1c5a      	adds	r2, r3, #1
    27e2:	69bb      	ldr	r3, [r7, #24]
    27e4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    27e6:	2301      	movs	r3, #1
    27e8:	61fb      	str	r3, [r7, #28]
    27ea:	e001      	b.n	27f0 <xQueueGenericSendFromISR+0xe8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    27ec:	2300      	movs	r3, #0
    27ee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    27f0:	697b      	ldr	r3, [r7, #20]
    27f2:	1c18      	adds	r0, r3, #0
    27f4:	4b07      	ldr	r3, [pc, #28]	; (2814 <xQueueGenericSendFromISR+0x10c>)
    27f6:	4798      	blx	r3

	return xReturn;
    27f8:	69fb      	ldr	r3, [r7, #28]
}
    27fa:	1c18      	adds	r0, r3, #0
    27fc:	46bd      	mov	sp, r7
    27fe:	b008      	add	sp, #32
    2800:	bd80      	pop	{r7, pc}
    2802:	46c0      	nop			; (mov r8, r8)
    2804:	0000211d 	.word	0x0000211d
    2808:	00002a11 	.word	0x00002a11
    280c:	00002cdd 	.word	0x00002cdd
    2810:	0000342d 	.word	0x0000342d
    2814:	00002129 	.word	0x00002129

00002818 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2818:	b580      	push	{r7, lr}
    281a:	b08a      	sub	sp, #40	; 0x28
    281c:	af00      	add	r7, sp, #0
    281e:	60f8      	str	r0, [r7, #12]
    2820:	60b9      	str	r1, [r7, #8]
    2822:	607a      	str	r2, [r7, #4]
    2824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    2826:	2300      	movs	r3, #0
    2828:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    282a:	68fb      	ldr	r3, [r7, #12]
    282c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    282e:	6a3b      	ldr	r3, [r7, #32]
    2830:	2b00      	cmp	r3, #0
    2832:	d101      	bne.n	2838 <xQueueGenericReceive+0x20>
    2834:	b672      	cpsid	i
    2836:	e7fe      	b.n	2836 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2838:	68bb      	ldr	r3, [r7, #8]
    283a:	2b00      	cmp	r3, #0
    283c:	d103      	bne.n	2846 <xQueueGenericReceive+0x2e>
    283e:	6a3b      	ldr	r3, [r7, #32]
    2840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2842:	2b00      	cmp	r3, #0
    2844:	d101      	bne.n	284a <xQueueGenericReceive+0x32>
    2846:	2301      	movs	r3, #1
    2848:	e000      	b.n	284c <xQueueGenericReceive+0x34>
    284a:	2300      	movs	r3, #0
    284c:	2b00      	cmp	r3, #0
    284e:	d101      	bne.n	2854 <xQueueGenericReceive+0x3c>
    2850:	b672      	cpsid	i
    2852:	e7fe      	b.n	2852 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2854:	4b5f      	ldr	r3, [pc, #380]	; (29d4 <xQueueGenericReceive+0x1bc>)
    2856:	4798      	blx	r3
    2858:	1c03      	adds	r3, r0, #0
    285a:	2b00      	cmp	r3, #0
    285c:	d102      	bne.n	2864 <xQueueGenericReceive+0x4c>
    285e:	687b      	ldr	r3, [r7, #4]
    2860:	2b00      	cmp	r3, #0
    2862:	d101      	bne.n	2868 <xQueueGenericReceive+0x50>
    2864:	2301      	movs	r3, #1
    2866:	e000      	b.n	286a <xQueueGenericReceive+0x52>
    2868:	2300      	movs	r3, #0
    286a:	2b00      	cmp	r3, #0
    286c:	d101      	bne.n	2872 <xQueueGenericReceive+0x5a>
    286e:	b672      	cpsid	i
    2870:	e7fe      	b.n	2870 <xQueueGenericReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2872:	4b59      	ldr	r3, [pc, #356]	; (29d8 <xQueueGenericReceive+0x1c0>)
    2874:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2876:	6a3b      	ldr	r3, [r7, #32]
    2878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    287a:	2b00      	cmp	r3, #0
    287c:	d03d      	beq.n	28fa <xQueueGenericReceive+0xe2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    287e:	6a3b      	ldr	r3, [r7, #32]
    2880:	68db      	ldr	r3, [r3, #12]
    2882:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2884:	6a3a      	ldr	r2, [r7, #32]
    2886:	68bb      	ldr	r3, [r7, #8]
    2888:	1c10      	adds	r0, r2, #0
    288a:	1c19      	adds	r1, r3, #0
    288c:	4b53      	ldr	r3, [pc, #332]	; (29dc <xQueueGenericReceive+0x1c4>)
    288e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	2b00      	cmp	r3, #0
    2894:	d11c      	bne.n	28d0 <xQueueGenericReceive+0xb8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2896:	6a3b      	ldr	r3, [r7, #32]
    2898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    289a:	1e5a      	subs	r2, r3, #1
    289c:	6a3b      	ldr	r3, [r7, #32]
    289e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    28a0:	6a3b      	ldr	r3, [r7, #32]
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d104      	bne.n	28b2 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    28a8:	4b4d      	ldr	r3, [pc, #308]	; (29e0 <xQueueGenericReceive+0x1c8>)
    28aa:	4798      	blx	r3
    28ac:	1c02      	adds	r2, r0, #0
    28ae:	6a3b      	ldr	r3, [r7, #32]
    28b0:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    28b2:	6a3b      	ldr	r3, [r7, #32]
    28b4:	691b      	ldr	r3, [r3, #16]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d01b      	beq.n	28f2 <xQueueGenericReceive+0xda>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    28ba:	6a3b      	ldr	r3, [r7, #32]
    28bc:	3310      	adds	r3, #16
    28be:	1c18      	adds	r0, r3, #0
    28c0:	4b48      	ldr	r3, [pc, #288]	; (29e4 <xQueueGenericReceive+0x1cc>)
    28c2:	4798      	blx	r3
    28c4:	1c03      	adds	r3, r0, #0
    28c6:	2b01      	cmp	r3, #1
    28c8:	d113      	bne.n	28f2 <xQueueGenericReceive+0xda>
						{
							queueYIELD_IF_USING_PREEMPTION();
    28ca:	4b47      	ldr	r3, [pc, #284]	; (29e8 <xQueueGenericReceive+0x1d0>)
    28cc:	4798      	blx	r3
    28ce:	e010      	b.n	28f2 <xQueueGenericReceive+0xda>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    28d0:	6a3b      	ldr	r3, [r7, #32]
    28d2:	69fa      	ldr	r2, [r7, #28]
    28d4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28d6:	6a3b      	ldr	r3, [r7, #32]
    28d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28da:	2b00      	cmp	r3, #0
    28dc:	d009      	beq.n	28f2 <xQueueGenericReceive+0xda>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    28de:	6a3b      	ldr	r3, [r7, #32]
    28e0:	3324      	adds	r3, #36	; 0x24
    28e2:	1c18      	adds	r0, r3, #0
    28e4:	4b3f      	ldr	r3, [pc, #252]	; (29e4 <xQueueGenericReceive+0x1cc>)
    28e6:	4798      	blx	r3
    28e8:	1c03      	adds	r3, r0, #0
    28ea:	2b00      	cmp	r3, #0
    28ec:	d001      	beq.n	28f2 <xQueueGenericReceive+0xda>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    28ee:	4b3e      	ldr	r3, [pc, #248]	; (29e8 <xQueueGenericReceive+0x1d0>)
    28f0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    28f2:	4b3e      	ldr	r3, [pc, #248]	; (29ec <xQueueGenericReceive+0x1d4>)
    28f4:	4798      	blx	r3
				return pdPASS;
    28f6:	2301      	movs	r3, #1
    28f8:	e068      	b.n	29cc <xQueueGenericReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    28fa:	687b      	ldr	r3, [r7, #4]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d103      	bne.n	2908 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2900:	4b3a      	ldr	r3, [pc, #232]	; (29ec <xQueueGenericReceive+0x1d4>)
    2902:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2904:	2300      	movs	r3, #0
    2906:	e061      	b.n	29cc <xQueueGenericReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
    2908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    290a:	2b00      	cmp	r3, #0
    290c:	d106      	bne.n	291c <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    290e:	1c3b      	adds	r3, r7, #0
    2910:	3314      	adds	r3, #20
    2912:	1c18      	adds	r0, r3, #0
    2914:	4b36      	ldr	r3, [pc, #216]	; (29f0 <xQueueGenericReceive+0x1d8>)
    2916:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2918:	2301      	movs	r3, #1
    291a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    291c:	4b33      	ldr	r3, [pc, #204]	; (29ec <xQueueGenericReceive+0x1d4>)
    291e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2920:	4b34      	ldr	r3, [pc, #208]	; (29f4 <xQueueGenericReceive+0x1dc>)
    2922:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2924:	4b2c      	ldr	r3, [pc, #176]	; (29d8 <xQueueGenericReceive+0x1c0>)
    2926:	4798      	blx	r3
    2928:	6a3b      	ldr	r3, [r7, #32]
    292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    292c:	3301      	adds	r3, #1
    292e:	d102      	bne.n	2936 <xQueueGenericReceive+0x11e>
    2930:	6a3b      	ldr	r3, [r7, #32]
    2932:	2200      	movs	r2, #0
    2934:	645a      	str	r2, [r3, #68]	; 0x44
    2936:	6a3b      	ldr	r3, [r7, #32]
    2938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    293a:	3301      	adds	r3, #1
    293c:	d102      	bne.n	2944 <xQueueGenericReceive+0x12c>
    293e:	6a3b      	ldr	r3, [r7, #32]
    2940:	2200      	movs	r2, #0
    2942:	649a      	str	r2, [r3, #72]	; 0x48
    2944:	4b29      	ldr	r3, [pc, #164]	; (29ec <xQueueGenericReceive+0x1d4>)
    2946:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2948:	1c3a      	adds	r2, r7, #0
    294a:	3214      	adds	r2, #20
    294c:	1d3b      	adds	r3, r7, #4
    294e:	1c10      	adds	r0, r2, #0
    2950:	1c19      	adds	r1, r3, #0
    2952:	4b29      	ldr	r3, [pc, #164]	; (29f8 <xQueueGenericReceive+0x1e0>)
    2954:	4798      	blx	r3
    2956:	1c03      	adds	r3, r0, #0
    2958:	2b00      	cmp	r3, #0
    295a:	d12e      	bne.n	29ba <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    295c:	6a3b      	ldr	r3, [r7, #32]
    295e:	1c18      	adds	r0, r3, #0
    2960:	4b26      	ldr	r3, [pc, #152]	; (29fc <xQueueGenericReceive+0x1e4>)
    2962:	4798      	blx	r3
    2964:	1c03      	adds	r3, r0, #0
    2966:	2b00      	cmp	r3, #0
    2968:	d020      	beq.n	29ac <xQueueGenericReceive+0x194>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    296a:	6a3b      	ldr	r3, [r7, #32]
    296c:	681b      	ldr	r3, [r3, #0]
    296e:	2b00      	cmp	r3, #0
    2970:	d108      	bne.n	2984 <xQueueGenericReceive+0x16c>
					{
						taskENTER_CRITICAL();
    2972:	4b19      	ldr	r3, [pc, #100]	; (29d8 <xQueueGenericReceive+0x1c0>)
    2974:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2976:	6a3b      	ldr	r3, [r7, #32]
    2978:	685b      	ldr	r3, [r3, #4]
    297a:	1c18      	adds	r0, r3, #0
    297c:	4b20      	ldr	r3, [pc, #128]	; (2a00 <xQueueGenericReceive+0x1e8>)
    297e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    2980:	4b1a      	ldr	r3, [pc, #104]	; (29ec <xQueueGenericReceive+0x1d4>)
    2982:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2984:	6a3b      	ldr	r3, [r7, #32]
    2986:	1c1a      	adds	r2, r3, #0
    2988:	3224      	adds	r2, #36	; 0x24
    298a:	687b      	ldr	r3, [r7, #4]
    298c:	1c10      	adds	r0, r2, #0
    298e:	1c19      	adds	r1, r3, #0
    2990:	4b1c      	ldr	r3, [pc, #112]	; (2a04 <xQueueGenericReceive+0x1ec>)
    2992:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2994:	6a3b      	ldr	r3, [r7, #32]
    2996:	1c18      	adds	r0, r3, #0
    2998:	4b1b      	ldr	r3, [pc, #108]	; (2a08 <xQueueGenericReceive+0x1f0>)
    299a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    299c:	4b1b      	ldr	r3, [pc, #108]	; (2a0c <xQueueGenericReceive+0x1f4>)
    299e:	4798      	blx	r3
    29a0:	1c03      	adds	r3, r0, #0
    29a2:	2b00      	cmp	r3, #0
    29a4:	d111      	bne.n	29ca <xQueueGenericReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
    29a6:	4b10      	ldr	r3, [pc, #64]	; (29e8 <xQueueGenericReceive+0x1d0>)
    29a8:	4798      	blx	r3
    29aa:	e00e      	b.n	29ca <xQueueGenericReceive+0x1b2>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    29ac:	6a3b      	ldr	r3, [r7, #32]
    29ae:	1c18      	adds	r0, r3, #0
    29b0:	4b15      	ldr	r3, [pc, #84]	; (2a08 <xQueueGenericReceive+0x1f0>)
    29b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
    29b4:	4b15      	ldr	r3, [pc, #84]	; (2a0c <xQueueGenericReceive+0x1f4>)
    29b6:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    29b8:	e75b      	b.n	2872 <xQueueGenericReceive+0x5a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    29ba:	6a3b      	ldr	r3, [r7, #32]
    29bc:	1c18      	adds	r0, r3, #0
    29be:	4b12      	ldr	r3, [pc, #72]	; (2a08 <xQueueGenericReceive+0x1f0>)
    29c0:	4798      	blx	r3
			( void ) xTaskResumeAll();
    29c2:	4b12      	ldr	r3, [pc, #72]	; (2a0c <xQueueGenericReceive+0x1f4>)
    29c4:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    29c6:	2300      	movs	r3, #0
    29c8:	e000      	b.n	29cc <xQueueGenericReceive+0x1b4>
		}
	}
    29ca:	e752      	b.n	2872 <xQueueGenericReceive+0x5a>
}
    29cc:	1c18      	adds	r0, r3, #0
    29ce:	46bd      	mov	sp, r7
    29d0:	b00a      	add	sp, #40	; 0x28
    29d2:	bd80      	pop	{r7, pc}
    29d4:	00003901 	.word	0x00003901
    29d8:	000020d1 	.word	0x000020d1
    29dc:	00002aed 	.word	0x00002aed
    29e0:	000038e5 	.word	0x000038e5
    29e4:	0000342d 	.word	0x0000342d
    29e8:	000020b5 	.word	0x000020b5
    29ec:	000020f1 	.word	0x000020f1
    29f0:	000034ed 	.word	0x000034ed
    29f4:	00002fd9 	.word	0x00002fd9
    29f8:	0000351d 	.word	0x0000351d
    29fc:	00002c09 	.word	0x00002c09
    2a00:	00003939 	.word	0x00003939
    2a04:	00003355 	.word	0x00003355
    2a08:	00002b41 	.word	0x00002b41
    2a0c:	00002ff1 	.word	0x00002ff1

00002a10 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b084      	sub	sp, #16
    2a14:	af00      	add	r7, sp, #0
    2a16:	60f8      	str	r0, [r7, #12]
    2a18:	60b9      	str	r1, [r7, #8]
    2a1a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2a1c:	68fb      	ldr	r3, [r7, #12]
    2a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a20:	2b00      	cmp	r3, #0
    2a22:	d10c      	bne.n	2a3e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2a24:	68fb      	ldr	r3, [r7, #12]
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d153      	bne.n	2ad4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2a2c:	68fb      	ldr	r3, [r7, #12]
    2a2e:	685b      	ldr	r3, [r3, #4]
    2a30:	1c18      	adds	r0, r3, #0
    2a32:	4b2c      	ldr	r3, [pc, #176]	; (2ae4 <prvCopyDataToQueue+0xd4>)
    2a34:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2a36:	68fb      	ldr	r3, [r7, #12]
    2a38:	2200      	movs	r2, #0
    2a3a:	605a      	str	r2, [r3, #4]
    2a3c:	e04a      	b.n	2ad4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d11b      	bne.n	2a7c <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2a44:	68fb      	ldr	r3, [r7, #12]
    2a46:	6899      	ldr	r1, [r3, #8]
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a4c:	68ba      	ldr	r2, [r7, #8]
    2a4e:	1c08      	adds	r0, r1, #0
    2a50:	1c11      	adds	r1, r2, #0
    2a52:	1c1a      	adds	r2, r3, #0
    2a54:	4b24      	ldr	r3, [pc, #144]	; (2ae8 <prvCopyDataToQueue+0xd8>)
    2a56:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2a58:	68fb      	ldr	r3, [r7, #12]
    2a5a:	689a      	ldr	r2, [r3, #8]
    2a5c:	68fb      	ldr	r3, [r7, #12]
    2a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a60:	18d2      	adds	r2, r2, r3
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2a66:	68fb      	ldr	r3, [r7, #12]
    2a68:	689a      	ldr	r2, [r3, #8]
    2a6a:	68fb      	ldr	r3, [r7, #12]
    2a6c:	685b      	ldr	r3, [r3, #4]
    2a6e:	429a      	cmp	r2, r3
    2a70:	d330      	bcc.n	2ad4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2a72:	68fb      	ldr	r3, [r7, #12]
    2a74:	681a      	ldr	r2, [r3, #0]
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	609a      	str	r2, [r3, #8]
    2a7a:	e02b      	b.n	2ad4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2a7c:	68fb      	ldr	r3, [r7, #12]
    2a7e:	68d9      	ldr	r1, [r3, #12]
    2a80:	68fb      	ldr	r3, [r7, #12]
    2a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a84:	68ba      	ldr	r2, [r7, #8]
    2a86:	1c08      	adds	r0, r1, #0
    2a88:	1c11      	adds	r1, r2, #0
    2a8a:	1c1a      	adds	r2, r3, #0
    2a8c:	4b16      	ldr	r3, [pc, #88]	; (2ae8 <prvCopyDataToQueue+0xd8>)
    2a8e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	68da      	ldr	r2, [r3, #12]
    2a94:	68fb      	ldr	r3, [r7, #12]
    2a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a98:	425b      	negs	r3, r3
    2a9a:	18d2      	adds	r2, r2, r3
    2a9c:	68fb      	ldr	r3, [r7, #12]
    2a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	68da      	ldr	r2, [r3, #12]
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	429a      	cmp	r2, r3
    2aaa:	d207      	bcs.n	2abc <prvCopyDataToQueue+0xac>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2aac:	68fb      	ldr	r3, [r7, #12]
    2aae:	685a      	ldr	r2, [r3, #4]
    2ab0:	68fb      	ldr	r3, [r7, #12]
    2ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2ab4:	425b      	negs	r3, r3
    2ab6:	18d2      	adds	r2, r2, r3
    2ab8:	68fb      	ldr	r3, [r7, #12]
    2aba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	2b02      	cmp	r3, #2
    2ac0:	d108      	bne.n	2ad4 <prvCopyDataToQueue+0xc4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2ac2:	68fb      	ldr	r3, [r7, #12]
    2ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d004      	beq.n	2ad4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2aca:	68fb      	ldr	r3, [r7, #12]
    2acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ace:	1e5a      	subs	r2, r3, #1
    2ad0:	68fb      	ldr	r3, [r7, #12]
    2ad2:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ad8:	1c5a      	adds	r2, r3, #1
    2ada:	68fb      	ldr	r3, [r7, #12]
    2adc:	639a      	str	r2, [r3, #56]	; 0x38
}
    2ade:	46bd      	mov	sp, r7
    2ae0:	b004      	add	sp, #16
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	000039fd 	.word	0x000039fd
    2ae8:	0000629d 	.word	0x0000629d

00002aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2aec:	b580      	push	{r7, lr}
    2aee:	b082      	sub	sp, #8
    2af0:	af00      	add	r7, sp, #0
    2af2:	6078      	str	r0, [r7, #4]
    2af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d01a      	beq.n	2b34 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2afe:	687b      	ldr	r3, [r7, #4]
    2b00:	68da      	ldr	r2, [r3, #12]
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b06:	18d2      	adds	r2, r2, r3
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	68da      	ldr	r2, [r3, #12]
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	685b      	ldr	r3, [r3, #4]
    2b14:	429a      	cmp	r2, r3
    2b16:	d303      	bcc.n	2b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	681a      	ldr	r2, [r3, #0]
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	68da      	ldr	r2, [r3, #12]
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b28:	6839      	ldr	r1, [r7, #0]
    2b2a:	1c08      	adds	r0, r1, #0
    2b2c:	1c11      	adds	r1, r2, #0
    2b2e:	1c1a      	adds	r2, r3, #0
    2b30:	4b02      	ldr	r3, [pc, #8]	; (2b3c <prvCopyDataFromQueue+0x50>)
    2b32:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2b34:	46bd      	mov	sp, r7
    2b36:	b002      	add	sp, #8
    2b38:	bd80      	pop	{r7, pc}
    2b3a:	46c0      	nop			; (mov r8, r8)
    2b3c:	0000629d 	.word	0x0000629d

00002b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
    2b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2b48:	4b2a      	ldr	r3, [pc, #168]	; (2bf4 <prvUnlockQueue+0xb4>)
    2b4a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2b4c:	e023      	b.n	2b96 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b52:	2b00      	cmp	r3, #0
    2b54:	d00a      	beq.n	2b6c <prvUnlockQueue+0x2c>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2b56:	687b      	ldr	r3, [r7, #4]
    2b58:	1c18      	adds	r0, r3, #0
    2b5a:	2100      	movs	r1, #0
    2b5c:	4b26      	ldr	r3, [pc, #152]	; (2bf8 <prvUnlockQueue+0xb8>)
    2b5e:	4798      	blx	r3
    2b60:	1c03      	adds	r3, r0, #0
    2b62:	2b01      	cmp	r3, #1
    2b64:	d112      	bne.n	2b8c <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    2b66:	4b25      	ldr	r3, [pc, #148]	; (2bfc <prvUnlockQueue+0xbc>)
    2b68:	4798      	blx	r3
    2b6a:	e00f      	b.n	2b8c <prvUnlockQueue+0x4c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b70:	2b00      	cmp	r3, #0
    2b72:	d00a      	beq.n	2b8a <prvUnlockQueue+0x4a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	3324      	adds	r3, #36	; 0x24
    2b78:	1c18      	adds	r0, r3, #0
    2b7a:	4b21      	ldr	r3, [pc, #132]	; (2c00 <prvUnlockQueue+0xc0>)
    2b7c:	4798      	blx	r3
    2b7e:	1c03      	adds	r3, r0, #0
    2b80:	2b00      	cmp	r3, #0
    2b82:	d003      	beq.n	2b8c <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    2b84:	4b1d      	ldr	r3, [pc, #116]	; (2bfc <prvUnlockQueue+0xbc>)
    2b86:	4798      	blx	r3
    2b88:	e000      	b.n	2b8c <prvUnlockQueue+0x4c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    2b8a:	e008      	b.n	2b9e <prvUnlockQueue+0x5e>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b90:	1e5a      	subs	r2, r3, #1
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2b96:	687b      	ldr	r3, [r7, #4]
    2b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	dcd7      	bgt.n	2b4e <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	2201      	movs	r2, #1
    2ba2:	4252      	negs	r2, r2
    2ba4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2ba6:	4b17      	ldr	r3, [pc, #92]	; (2c04 <prvUnlockQueue+0xc4>)
    2ba8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2baa:	4b12      	ldr	r3, [pc, #72]	; (2bf4 <prvUnlockQueue+0xb4>)
    2bac:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2bae:	e014      	b.n	2bda <prvUnlockQueue+0x9a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	691b      	ldr	r3, [r3, #16]
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	d00f      	beq.n	2bd8 <prvUnlockQueue+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	3310      	adds	r3, #16
    2bbc:	1c18      	adds	r0, r3, #0
    2bbe:	4b10      	ldr	r3, [pc, #64]	; (2c00 <prvUnlockQueue+0xc0>)
    2bc0:	4798      	blx	r3
    2bc2:	1c03      	adds	r3, r0, #0
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d001      	beq.n	2bcc <prvUnlockQueue+0x8c>
				{
					vTaskMissedYield();
    2bc8:	4b0c      	ldr	r3, [pc, #48]	; (2bfc <prvUnlockQueue+0xbc>)
    2bca:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2bd0:	1e5a      	subs	r2, r3, #1
    2bd2:	687b      	ldr	r3, [r7, #4]
    2bd4:	645a      	str	r2, [r3, #68]	; 0x44
    2bd6:	e000      	b.n	2bda <prvUnlockQueue+0x9a>
			}
			else
			{
				break;
    2bd8:	e003      	b.n	2be2 <prvUnlockQueue+0xa2>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2bde:	2b00      	cmp	r3, #0
    2be0:	dce6      	bgt.n	2bb0 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	2201      	movs	r2, #1
    2be6:	4252      	negs	r2, r2
    2be8:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2bea:	4b06      	ldr	r3, [pc, #24]	; (2c04 <prvUnlockQueue+0xc4>)
    2bec:	4798      	blx	r3
}
    2bee:	46bd      	mov	sp, r7
    2bf0:	b002      	add	sp, #8
    2bf2:	bd80      	pop	{r7, pc}
    2bf4:	000020d1 	.word	0x000020d1
    2bf8:	00002cdd 	.word	0x00002cdd
    2bfc:	000035c5 	.word	0x000035c5
    2c00:	0000342d 	.word	0x0000342d
    2c04:	000020f1 	.word	0x000020f1

00002c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b084      	sub	sp, #16
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2c10:	4b08      	ldr	r3, [pc, #32]	; (2c34 <prvIsQueueEmpty+0x2c>)
    2c12:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d102      	bne.n	2c22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    2c1c:	2301      	movs	r3, #1
    2c1e:	60fb      	str	r3, [r7, #12]
    2c20:	e001      	b.n	2c26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    2c22:	2300      	movs	r3, #0
    2c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2c26:	4b04      	ldr	r3, [pc, #16]	; (2c38 <prvIsQueueEmpty+0x30>)
    2c28:	4798      	blx	r3

	return xReturn;
    2c2a:	68fb      	ldr	r3, [r7, #12]
}
    2c2c:	1c18      	adds	r0, r3, #0
    2c2e:	46bd      	mov	sp, r7
    2c30:	b004      	add	sp, #16
    2c32:	bd80      	pop	{r7, pc}
    2c34:	000020d1 	.word	0x000020d1
    2c38:	000020f1 	.word	0x000020f1

00002c3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2c3c:	b580      	push	{r7, lr}
    2c3e:	b084      	sub	sp, #16
    2c40:	af00      	add	r7, sp, #0
    2c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2c44:	4b09      	ldr	r3, [pc, #36]	; (2c6c <prvIsQueueFull+0x30>)
    2c46:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2c50:	429a      	cmp	r2, r3
    2c52:	d102      	bne.n	2c5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    2c54:	2301      	movs	r3, #1
    2c56:	60fb      	str	r3, [r7, #12]
    2c58:	e001      	b.n	2c5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    2c5a:	2300      	movs	r3, #0
    2c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <prvIsQueueFull+0x34>)
    2c60:	4798      	blx	r3

	return xReturn;
    2c62:	68fb      	ldr	r3, [r7, #12]
}
    2c64:	1c18      	adds	r0, r3, #0
    2c66:	46bd      	mov	sp, r7
    2c68:	b004      	add	sp, #16
    2c6a:	bd80      	pop	{r7, pc}
    2c6c:	000020d1 	.word	0x000020d1
    2c70:	000020f1 	.word	0x000020f1

00002c74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2c74:	b580      	push	{r7, lr}
    2c76:	b084      	sub	sp, #16
    2c78:	af00      	add	r7, sp, #0
    2c7a:	6078      	str	r0, [r7, #4]
    2c7c:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2c82:	4b12      	ldr	r3, [pc, #72]	; (2ccc <vQueueWaitForMessageRestricted+0x58>)
    2c84:	4798      	blx	r3
    2c86:	68fb      	ldr	r3, [r7, #12]
    2c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c8a:	3301      	adds	r3, #1
    2c8c:	d102      	bne.n	2c94 <vQueueWaitForMessageRestricted+0x20>
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	2200      	movs	r2, #0
    2c92:	645a      	str	r2, [r3, #68]	; 0x44
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2c98:	3301      	adds	r3, #1
    2c9a:	d102      	bne.n	2ca2 <vQueueWaitForMessageRestricted+0x2e>
    2c9c:	68fb      	ldr	r3, [r7, #12]
    2c9e:	2200      	movs	r2, #0
    2ca0:	649a      	str	r2, [r3, #72]	; 0x48
    2ca2:	4b0b      	ldr	r3, [pc, #44]	; (2cd0 <vQueueWaitForMessageRestricted+0x5c>)
    2ca4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2caa:	2b00      	cmp	r3, #0
    2cac:	d107      	bne.n	2cbe <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2cae:	68fb      	ldr	r3, [r7, #12]
    2cb0:	1c1a      	adds	r2, r3, #0
    2cb2:	3224      	adds	r2, #36	; 0x24
    2cb4:	683b      	ldr	r3, [r7, #0]
    2cb6:	1c10      	adds	r0, r2, #0
    2cb8:	1c19      	adds	r1, r3, #0
    2cba:	4b06      	ldr	r3, [pc, #24]	; (2cd4 <vQueueWaitForMessageRestricted+0x60>)
    2cbc:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	1c18      	adds	r0, r3, #0
    2cc2:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <vQueueWaitForMessageRestricted+0x64>)
    2cc4:	4798      	blx	r3
	}
    2cc6:	46bd      	mov	sp, r7
    2cc8:	b004      	add	sp, #16
    2cca:	bd80      	pop	{r7, pc}
    2ccc:	000020d1 	.word	0x000020d1
    2cd0:	000020f1 	.word	0x000020f1
    2cd4:	000033d1 	.word	0x000033d1
    2cd8:	00002b41 	.word	0x00002b41

00002cdc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b084      	sub	sp, #16
    2ce0:	af00      	add	r7, sp, #0
    2ce2:	6078      	str	r0, [r7, #4]
    2ce4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2cea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2cec:	2300      	movs	r3, #0
    2cee:	60fb      	str	r3, [r7, #12]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    2cf0:	68bb      	ldr	r3, [r7, #8]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d101      	bne.n	2cfa <prvNotifyQueueSetContainer+0x1e>
    2cf6:	b672      	cpsid	i
    2cf8:	e7fe      	b.n	2cf8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2cfa:	68bb      	ldr	r3, [r7, #8]
    2cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2cfe:	68bb      	ldr	r3, [r7, #8]
    2d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d02:	429a      	cmp	r2, r3
    2d04:	d301      	bcc.n	2d0a <prvNotifyQueueSetContainer+0x2e>
    2d06:	b672      	cpsid	i
    2d08:	e7fe      	b.n	2d08 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2d0a:	68bb      	ldr	r3, [r7, #8]
    2d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2d12:	429a      	cmp	r2, r3
    2d14:	d215      	bcs.n	2d42 <prvNotifyQueueSetContainer+0x66>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2d16:	68b9      	ldr	r1, [r7, #8]
    2d18:	1d3a      	adds	r2, r7, #4
    2d1a:	683b      	ldr	r3, [r7, #0]
    2d1c:	1c08      	adds	r0, r1, #0
    2d1e:	1c11      	adds	r1, r2, #0
    2d20:	1c1a      	adds	r2, r3, #0
    2d22:	4b0a      	ldr	r3, [pc, #40]	; (2d4c <prvNotifyQueueSetContainer+0x70>)
    2d24:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2d26:	68bb      	ldr	r3, [r7, #8]
    2d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d009      	beq.n	2d42 <prvNotifyQueueSetContainer+0x66>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2d2e:	68bb      	ldr	r3, [r7, #8]
    2d30:	3324      	adds	r3, #36	; 0x24
    2d32:	1c18      	adds	r0, r3, #0
    2d34:	4b06      	ldr	r3, [pc, #24]	; (2d50 <prvNotifyQueueSetContainer+0x74>)
    2d36:	4798      	blx	r3
    2d38:	1c03      	adds	r3, r0, #0
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d001      	beq.n	2d42 <prvNotifyQueueSetContainer+0x66>
				{
					/* The task waiting has a higher priority */
					xReturn = pdTRUE;
    2d3e:	2301      	movs	r3, #1
    2d40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2d42:	68fb      	ldr	r3, [r7, #12]
	}
    2d44:	1c18      	adds	r0, r3, #0
    2d46:	46bd      	mov	sp, r7
    2d48:	b004      	add	sp, #16
    2d4a:	bd80      	pop	{r7, pc}
    2d4c:	00002a11 	.word	0x00002a11
    2d50:	0000342d 	.word	0x0000342d

00002d54 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2d54:	b590      	push	{r4, r7, lr}
    2d56:	b08b      	sub	sp, #44	; 0x2c
    2d58:	af02      	add	r7, sp, #8
    2d5a:	60f8      	str	r0, [r7, #12]
    2d5c:	60b9      	str	r1, [r7, #8]
    2d5e:	603b      	str	r3, [r7, #0]
    2d60:	1dbb      	adds	r3, r7, #6
    2d62:	801a      	strh	r2, [r3, #0]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    2d64:	68fb      	ldr	r3, [r7, #12]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d101      	bne.n	2d6e <xTaskGenericCreate+0x1a>
    2d6a:	b672      	cpsid	i
    2d6c:	e7fe      	b.n	2d6c <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    2d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d70:	2b04      	cmp	r3, #4
    2d72:	d901      	bls.n	2d78 <xTaskGenericCreate+0x24>
    2d74:	b672      	cpsid	i
    2d76:	e7fe      	b.n	2d76 <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2d78:	1dbb      	adds	r3, r7, #6
    2d7a:	881a      	ldrh	r2, [r3, #0]
    2d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d7e:	1c10      	adds	r0, r2, #0
    2d80:	1c19      	adds	r1, r3, #0
    2d82:	4b48      	ldr	r3, [pc, #288]	; (2ea4 <xTaskGenericCreate+0x150>)
    2d84:	4798      	blx	r3
    2d86:	1c03      	adds	r3, r0, #0
    2d88:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
    2d8a:	69bb      	ldr	r3, [r7, #24]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d100      	bne.n	2d92 <xTaskGenericCreate+0x3e>
    2d90:	e070      	b.n	2e74 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2d92:	69bb      	ldr	r3, [r7, #24]
    2d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2d96:	1dbb      	adds	r3, r7, #6
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	4943      	ldr	r1, [pc, #268]	; (2ea8 <xTaskGenericCreate+0x154>)
    2d9c:	185b      	adds	r3, r3, r1
    2d9e:	009b      	lsls	r3, r3, #2
    2da0:	18d3      	adds	r3, r2, r3
    2da2:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2da4:	697b      	ldr	r3, [r7, #20]
    2da6:	2207      	movs	r2, #7
    2da8:	4393      	bics	r3, r2
    2daa:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    2dac:	697a      	ldr	r2, [r7, #20]
    2dae:	2307      	movs	r3, #7
    2db0:	4013      	ands	r3, r2
    2db2:	d001      	beq.n	2db8 <xTaskGenericCreate+0x64>
    2db4:	b672      	cpsid	i
    2db6:	e7fe      	b.n	2db6 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2db8:	69b8      	ldr	r0, [r7, #24]
    2dba:	68b9      	ldr	r1, [r7, #8]
    2dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dc0:	1dbc      	adds	r4, r7, #6
    2dc2:	8824      	ldrh	r4, [r4, #0]
    2dc4:	9400      	str	r4, [sp, #0]
    2dc6:	4c39      	ldr	r4, [pc, #228]	; (2eac <xTaskGenericCreate+0x158>)
    2dc8:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2dca:	6979      	ldr	r1, [r7, #20]
    2dcc:	68fa      	ldr	r2, [r7, #12]
    2dce:	683b      	ldr	r3, [r7, #0]
    2dd0:	1c08      	adds	r0, r1, #0
    2dd2:	1c11      	adds	r1, r2, #0
    2dd4:	1c1a      	adds	r2, r3, #0
    2dd6:	4b36      	ldr	r3, [pc, #216]	; (2eb0 <xTaskGenericCreate+0x15c>)
    2dd8:	4798      	blx	r3
    2dda:	1c02      	adds	r2, r0, #0
    2ddc:	69bb      	ldr	r3, [r7, #24]
    2dde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de2:	2b00      	cmp	r3, #0
    2de4:	d002      	beq.n	2dec <xTaskGenericCreate+0x98>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2de8:	69ba      	ldr	r2, [r7, #24]
    2dea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2dec:	4b31      	ldr	r3, [pc, #196]	; (2eb4 <xTaskGenericCreate+0x160>)
    2dee:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    2df0:	4b31      	ldr	r3, [pc, #196]	; (2eb8 <xTaskGenericCreate+0x164>)
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	1c5a      	adds	r2, r3, #1
    2df6:	4b30      	ldr	r3, [pc, #192]	; (2eb8 <xTaskGenericCreate+0x164>)
    2df8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    2dfa:	4b30      	ldr	r3, [pc, #192]	; (2ebc <xTaskGenericCreate+0x168>)
    2dfc:	681b      	ldr	r3, [r3, #0]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d109      	bne.n	2e16 <xTaskGenericCreate+0xc2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2e02:	4b2e      	ldr	r3, [pc, #184]	; (2ebc <xTaskGenericCreate+0x168>)
    2e04:	69ba      	ldr	r2, [r7, #24]
    2e06:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2e08:	4b2b      	ldr	r3, [pc, #172]	; (2eb8 <xTaskGenericCreate+0x164>)
    2e0a:	681b      	ldr	r3, [r3, #0]
    2e0c:	2b01      	cmp	r3, #1
    2e0e:	d10f      	bne.n	2e30 <xTaskGenericCreate+0xdc>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2e10:	4b2b      	ldr	r3, [pc, #172]	; (2ec0 <xTaskGenericCreate+0x16c>)
    2e12:	4798      	blx	r3
    2e14:	e00c      	b.n	2e30 <xTaskGenericCreate+0xdc>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2e16:	4b2b      	ldr	r3, [pc, #172]	; (2ec4 <xTaskGenericCreate+0x170>)
    2e18:	681b      	ldr	r3, [r3, #0]
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d108      	bne.n	2e30 <xTaskGenericCreate+0xdc>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2e1e:	4b27      	ldr	r3, [pc, #156]	; (2ebc <xTaskGenericCreate+0x168>)
    2e20:	681b      	ldr	r3, [r3, #0]
    2e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e26:	429a      	cmp	r2, r3
    2e28:	d802      	bhi.n	2e30 <xTaskGenericCreate+0xdc>
					{
						pxCurrentTCB = pxNewTCB;
    2e2a:	4b24      	ldr	r3, [pc, #144]	; (2ebc <xTaskGenericCreate+0x168>)
    2e2c:	69ba      	ldr	r2, [r7, #24]
    2e2e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2e30:	4b25      	ldr	r3, [pc, #148]	; (2ec8 <xTaskGenericCreate+0x174>)
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	1c5a      	adds	r2, r3, #1
    2e36:	4b24      	ldr	r3, [pc, #144]	; (2ec8 <xTaskGenericCreate+0x174>)
    2e38:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2e3a:	69bb      	ldr	r3, [r7, #24]
    2e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e3e:	4b23      	ldr	r3, [pc, #140]	; (2ecc <xTaskGenericCreate+0x178>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	429a      	cmp	r2, r3
    2e44:	d903      	bls.n	2e4e <xTaskGenericCreate+0xfa>
    2e46:	69bb      	ldr	r3, [r7, #24]
    2e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e4a:	4b20      	ldr	r3, [pc, #128]	; (2ecc <xTaskGenericCreate+0x178>)
    2e4c:	601a      	str	r2, [r3, #0]
    2e4e:	69bb      	ldr	r3, [r7, #24]
    2e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e52:	1c13      	adds	r3, r2, #0
    2e54:	009b      	lsls	r3, r3, #2
    2e56:	189b      	adds	r3, r3, r2
    2e58:	009b      	lsls	r3, r3, #2
    2e5a:	4a1d      	ldr	r2, [pc, #116]	; (2ed0 <xTaskGenericCreate+0x17c>)
    2e5c:	189a      	adds	r2, r3, r2
    2e5e:	69bb      	ldr	r3, [r7, #24]
    2e60:	3304      	adds	r3, #4
    2e62:	1c10      	adds	r0, r2, #0
    2e64:	1c19      	adds	r1, r3, #0
    2e66:	4b1b      	ldr	r3, [pc, #108]	; (2ed4 <xTaskGenericCreate+0x180>)
    2e68:	4798      	blx	r3

			xReturn = pdPASS;
    2e6a:	2301      	movs	r3, #1
    2e6c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2e6e:	4b1a      	ldr	r3, [pc, #104]	; (2ed8 <xTaskGenericCreate+0x184>)
    2e70:	4798      	blx	r3
    2e72:	e002      	b.n	2e7a <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2e74:	2301      	movs	r3, #1
    2e76:	425b      	negs	r3, r3
    2e78:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2e7a:	69fb      	ldr	r3, [r7, #28]
    2e7c:	2b01      	cmp	r3, #1
    2e7e:	d10b      	bne.n	2e98 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
    2e80:	4b10      	ldr	r3, [pc, #64]	; (2ec4 <xTaskGenericCreate+0x170>)
    2e82:	681b      	ldr	r3, [r3, #0]
    2e84:	2b00      	cmp	r3, #0
    2e86:	d007      	beq.n	2e98 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2e88:	4b0c      	ldr	r3, [pc, #48]	; (2ebc <xTaskGenericCreate+0x168>)
    2e8a:	681b      	ldr	r3, [r3, #0]
    2e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e90:	429a      	cmp	r2, r3
    2e92:	d201      	bcs.n	2e98 <xTaskGenericCreate+0x144>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2e94:	4b11      	ldr	r3, [pc, #68]	; (2edc <xTaskGenericCreate+0x188>)
    2e96:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2e98:	69fb      	ldr	r3, [r7, #28]
}
    2e9a:	1c18      	adds	r0, r3, #0
    2e9c:	46bd      	mov	sp, r7
    2e9e:	b009      	add	sp, #36	; 0x24
    2ea0:	bd90      	pop	{r4, r7, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	0000381d 	.word	0x0000381d
    2ea8:	3fffffff 	.word	0x3fffffff
    2eac:	00003601 	.word	0x00003601
    2eb0:	00001fd1 	.word	0x00001fd1
    2eb4:	000020d1 	.word	0x000020d1
    2eb8:	20003c2c 	.word	0x20003c2c
    2ebc:	20003b54 	.word	0x20003b54
    2ec0:	00003695 	.word	0x00003695
    2ec4:	20003c38 	.word	0x20003c38
    2ec8:	20003c48 	.word	0x20003c48
    2ecc:	20003c34 	.word	0x20003c34
    2ed0:	20003b58 	.word	0x20003b58
    2ed4:	000022dd 	.word	0x000022dd
    2ed8:	000020f1 	.word	0x000020f1
    2edc:	000020b5 	.word	0x000020b5

00002ee0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2ee0:	b580      	push	{r7, lr}
    2ee2:	b084      	sub	sp, #16
    2ee4:	af00      	add	r7, sp, #0
    2ee6:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2ee8:	2300      	movs	r3, #0
    2eea:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d01a      	beq.n	2f28 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    2ef2:	4b11      	ldr	r3, [pc, #68]	; (2f38 <vTaskDelay+0x58>)
    2ef4:	681b      	ldr	r3, [r3, #0]
    2ef6:	2b00      	cmp	r3, #0
    2ef8:	d001      	beq.n	2efe <vTaskDelay+0x1e>
    2efa:	b672      	cpsid	i
    2efc:	e7fe      	b.n	2efc <vTaskDelay+0x1c>
			vTaskSuspendAll();
    2efe:	4b0f      	ldr	r3, [pc, #60]	; (2f3c <vTaskDelay+0x5c>)
    2f00:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2f02:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <vTaskDelay+0x60>)
    2f04:	681a      	ldr	r2, [r3, #0]
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	18d3      	adds	r3, r2, r3
    2f0a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2f0c:	4b0d      	ldr	r3, [pc, #52]	; (2f44 <vTaskDelay+0x64>)
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	3304      	adds	r3, #4
    2f12:	1c18      	adds	r0, r3, #0
    2f14:	4b0c      	ldr	r3, [pc, #48]	; (2f48 <vTaskDelay+0x68>)
    2f16:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f18:	68bb      	ldr	r3, [r7, #8]
    2f1a:	1c18      	adds	r0, r3, #0
    2f1c:	4b0b      	ldr	r3, [pc, #44]	; (2f4c <vTaskDelay+0x6c>)
    2f1e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2f20:	4b0b      	ldr	r3, [pc, #44]	; (2f50 <vTaskDelay+0x70>)
    2f22:	4798      	blx	r3
    2f24:	1c03      	adds	r3, r0, #0
    2f26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f28:	68fb      	ldr	r3, [r7, #12]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d101      	bne.n	2f32 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2f2e:	4b09      	ldr	r3, [pc, #36]	; (2f54 <vTaskDelay+0x74>)
    2f30:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f32:	46bd      	mov	sp, r7
    2f34:	b004      	add	sp, #16
    2f36:	bd80      	pop	{r7, pc}
    2f38:	20003c4c 	.word	0x20003c4c
    2f3c:	00002fd9 	.word	0x00002fd9
    2f40:	20003c30 	.word	0x20003c30
    2f44:	20003b54 	.word	0x20003b54
    2f48:	0000238d 	.word	0x0000238d
    2f4c:	000037ad 	.word	0x000037ad
    2f50:	00002ff1 	.word	0x00002ff1
    2f54:	000020b5 	.word	0x000020b5

00002f58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f58:	b590      	push	{r4, r7, lr}
    2f5a:	b087      	sub	sp, #28
    2f5c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f5e:	4a17      	ldr	r2, [pc, #92]	; (2fbc <vTaskStartScheduler+0x64>)
    2f60:	4b17      	ldr	r3, [pc, #92]	; (2fc0 <vTaskStartScheduler+0x68>)
    2f62:	2100      	movs	r1, #0
    2f64:	9100      	str	r1, [sp, #0]
    2f66:	2100      	movs	r1, #0
    2f68:	9101      	str	r1, [sp, #4]
    2f6a:	2100      	movs	r1, #0
    2f6c:	9102      	str	r1, [sp, #8]
    2f6e:	2100      	movs	r1, #0
    2f70:	9103      	str	r1, [sp, #12]
    2f72:	1c10      	adds	r0, r2, #0
    2f74:	1c19      	adds	r1, r3, #0
    2f76:	2264      	movs	r2, #100	; 0x64
    2f78:	2300      	movs	r3, #0
    2f7a:	4c12      	ldr	r4, [pc, #72]	; (2fc4 <vTaskStartScheduler+0x6c>)
    2f7c:	47a0      	blx	r4
    2f7e:	1c03      	adds	r3, r0, #0
    2f80:	607b      	str	r3, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	2b01      	cmp	r3, #1
    2f86:	d103      	bne.n	2f90 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2f88:	4b0f      	ldr	r3, [pc, #60]	; (2fc8 <vTaskStartScheduler+0x70>)
    2f8a:	4798      	blx	r3
    2f8c:	1c03      	adds	r3, r0, #0
    2f8e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	2b01      	cmp	r3, #1
    2f94:	d109      	bne.n	2faa <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2f96:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f98:	4b0c      	ldr	r3, [pc, #48]	; (2fcc <vTaskStartScheduler+0x74>)
    2f9a:	2201      	movs	r2, #1
    2f9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2f9e:	4b0c      	ldr	r3, [pc, #48]	; (2fd0 <vTaskStartScheduler+0x78>)
    2fa0:	2200      	movs	r2, #0
    2fa2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2fa4:	4b0b      	ldr	r3, [pc, #44]	; (2fd4 <vTaskStartScheduler+0x7c>)
    2fa6:	4798      	blx	r3
    2fa8:	e004      	b.n	2fb4 <vTaskStartScheduler+0x5c>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2faa:	687b      	ldr	r3, [r7, #4]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d101      	bne.n	2fb4 <vTaskStartScheduler+0x5c>
    2fb0:	b672      	cpsid	i
    2fb2:	e7fe      	b.n	2fb2 <vTaskStartScheduler+0x5a>
	}
}
    2fb4:	46bd      	mov	sp, r7
    2fb6:	b003      	add	sp, #12
    2fb8:	bd90      	pop	{r4, r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	000035d9 	.word	0x000035d9
    2fc0:	00007308 	.word	0x00007308
    2fc4:	00002d55 	.word	0x00002d55
    2fc8:	00003a89 	.word	0x00003a89
    2fcc:	20003c38 	.word	0x20003c38
    2fd0:	20003c30 	.word	0x20003c30
    2fd4:	00002065 	.word	0x00002065

00002fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2fdc:	4b03      	ldr	r3, [pc, #12]	; (2fec <vTaskSuspendAll+0x14>)
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	1c5a      	adds	r2, r3, #1
    2fe2:	4b02      	ldr	r3, [pc, #8]	; (2fec <vTaskSuspendAll+0x14>)
    2fe4:	601a      	str	r2, [r3, #0]
}
    2fe6:	46bd      	mov	sp, r7
    2fe8:	bd80      	pop	{r7, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	20003c4c 	.word	0x20003c4c

00002ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2ff6:	2300      	movs	r3, #0
    2ff8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2ffa:	4b37      	ldr	r3, [pc, #220]	; (30d8 <xTaskResumeAll+0xe8>)
    2ffc:	681b      	ldr	r3, [r3, #0]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d101      	bne.n	3006 <xTaskResumeAll+0x16>
    3002:	b672      	cpsid	i
    3004:	e7fe      	b.n	3004 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3006:	4b35      	ldr	r3, [pc, #212]	; (30dc <xTaskResumeAll+0xec>)
    3008:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    300a:	4b33      	ldr	r3, [pc, #204]	; (30d8 <xTaskResumeAll+0xe8>)
    300c:	681b      	ldr	r3, [r3, #0]
    300e:	1e5a      	subs	r2, r3, #1
    3010:	4b31      	ldr	r3, [pc, #196]	; (30d8 <xTaskResumeAll+0xe8>)
    3012:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3014:	4b30      	ldr	r3, [pc, #192]	; (30d8 <xTaskResumeAll+0xe8>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	2b00      	cmp	r3, #0
    301a:	d156      	bne.n	30ca <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    301c:	4b30      	ldr	r3, [pc, #192]	; (30e0 <xTaskResumeAll+0xf0>)
    301e:	681b      	ldr	r3, [r3, #0]
    3020:	2b00      	cmp	r3, #0
    3022:	d052      	beq.n	30ca <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3024:	e02f      	b.n	3086 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3026:	4b2f      	ldr	r3, [pc, #188]	; (30e4 <xTaskResumeAll+0xf4>)
    3028:	68db      	ldr	r3, [r3, #12]
    302a:	68db      	ldr	r3, [r3, #12]
    302c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    302e:	683b      	ldr	r3, [r7, #0]
    3030:	3318      	adds	r3, #24
    3032:	1c18      	adds	r0, r3, #0
    3034:	4b2c      	ldr	r3, [pc, #176]	; (30e8 <xTaskResumeAll+0xf8>)
    3036:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	3304      	adds	r3, #4
    303c:	1c18      	adds	r0, r3, #0
    303e:	4b2a      	ldr	r3, [pc, #168]	; (30e8 <xTaskResumeAll+0xf8>)
    3040:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3046:	4b29      	ldr	r3, [pc, #164]	; (30ec <xTaskResumeAll+0xfc>)
    3048:	681b      	ldr	r3, [r3, #0]
    304a:	429a      	cmp	r2, r3
    304c:	d903      	bls.n	3056 <xTaskResumeAll+0x66>
    304e:	683b      	ldr	r3, [r7, #0]
    3050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3052:	4b26      	ldr	r3, [pc, #152]	; (30ec <xTaskResumeAll+0xfc>)
    3054:	601a      	str	r2, [r3, #0]
    3056:	683b      	ldr	r3, [r7, #0]
    3058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    305a:	1c13      	adds	r3, r2, #0
    305c:	009b      	lsls	r3, r3, #2
    305e:	189b      	adds	r3, r3, r2
    3060:	009b      	lsls	r3, r3, #2
    3062:	4a23      	ldr	r2, [pc, #140]	; (30f0 <xTaskResumeAll+0x100>)
    3064:	189a      	adds	r2, r3, r2
    3066:	683b      	ldr	r3, [r7, #0]
    3068:	3304      	adds	r3, #4
    306a:	1c10      	adds	r0, r2, #0
    306c:	1c19      	adds	r1, r3, #0
    306e:	4b21      	ldr	r3, [pc, #132]	; (30f4 <xTaskResumeAll+0x104>)
    3070:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3072:	683b      	ldr	r3, [r7, #0]
    3074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3076:	4b20      	ldr	r3, [pc, #128]	; (30f8 <xTaskResumeAll+0x108>)
    3078:	681b      	ldr	r3, [r3, #0]
    307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    307c:	429a      	cmp	r2, r3
    307e:	d302      	bcc.n	3086 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
    3080:	4b1e      	ldr	r3, [pc, #120]	; (30fc <xTaskResumeAll+0x10c>)
    3082:	2201      	movs	r2, #1
    3084:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3086:	4b17      	ldr	r3, [pc, #92]	; (30e4 <xTaskResumeAll+0xf4>)
    3088:	681b      	ldr	r3, [r3, #0]
    308a:	2b00      	cmp	r3, #0
    308c:	d1cb      	bne.n	3026 <xTaskResumeAll+0x36>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    308e:	4b1c      	ldr	r3, [pc, #112]	; (3100 <xTaskResumeAll+0x110>)
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d011      	beq.n	30ba <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3096:	e00c      	b.n	30b2 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3098:	4b1a      	ldr	r3, [pc, #104]	; (3104 <xTaskResumeAll+0x114>)
    309a:	4798      	blx	r3
    309c:	1c03      	adds	r3, r0, #0
    309e:	2b00      	cmp	r3, #0
    30a0:	d002      	beq.n	30a8 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
    30a2:	4b16      	ldr	r3, [pc, #88]	; (30fc <xTaskResumeAll+0x10c>)
    30a4:	2201      	movs	r2, #1
    30a6:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    30a8:	4b15      	ldr	r3, [pc, #84]	; (3100 <xTaskResumeAll+0x110>)
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	1e5a      	subs	r2, r3, #1
    30ae:	4b14      	ldr	r3, [pc, #80]	; (3100 <xTaskResumeAll+0x110>)
    30b0:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    30b2:	4b13      	ldr	r3, [pc, #76]	; (3100 <xTaskResumeAll+0x110>)
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d1ee      	bne.n	3098 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    30ba:	4b10      	ldr	r3, [pc, #64]	; (30fc <xTaskResumeAll+0x10c>)
    30bc:	681b      	ldr	r3, [r3, #0]
    30be:	2b01      	cmp	r3, #1
    30c0:	d103      	bne.n	30ca <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    30c2:	2301      	movs	r3, #1
    30c4:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    30c6:	4b10      	ldr	r3, [pc, #64]	; (3108 <xTaskResumeAll+0x118>)
    30c8:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    30ca:	4b10      	ldr	r3, [pc, #64]	; (310c <xTaskResumeAll+0x11c>)
    30cc:	4798      	blx	r3

	return xAlreadyYielded;
    30ce:	687b      	ldr	r3, [r7, #4]
}
    30d0:	1c18      	adds	r0, r3, #0
    30d2:	46bd      	mov	sp, r7
    30d4:	b002      	add	sp, #8
    30d6:	bd80      	pop	{r7, pc}
    30d8:	20003c4c 	.word	0x20003c4c
    30dc:	000020d1 	.word	0x000020d1
    30e0:	20003c2c 	.word	0x20003c2c
    30e4:	20003bec 	.word	0x20003bec
    30e8:	0000238d 	.word	0x0000238d
    30ec:	20003c34 	.word	0x20003c34
    30f0:	20003b58 	.word	0x20003b58
    30f4:	000022dd 	.word	0x000022dd
    30f8:	20003b54 	.word	0x20003b54
    30fc:	20003c40 	.word	0x20003c40
    3100:	20003c3c 	.word	0x20003c3c
    3104:	0000313d 	.word	0x0000313d
    3108:	000020b5 	.word	0x000020b5
    310c:	000020f1 	.word	0x000020f1

00003110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    3110:	b580      	push	{r7, lr}
    3112:	b082      	sub	sp, #8
    3114:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3116:	4b06      	ldr	r3, [pc, #24]	; (3130 <xTaskGetTickCount+0x20>)
    3118:	4798      	blx	r3
	{
		xTicks = xTickCount;
    311a:	4b06      	ldr	r3, [pc, #24]	; (3134 <xTaskGetTickCount+0x24>)
    311c:	681b      	ldr	r3, [r3, #0]
    311e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    3120:	4b05      	ldr	r3, [pc, #20]	; (3138 <xTaskGetTickCount+0x28>)
    3122:	4798      	blx	r3

	return xTicks;
    3124:	687b      	ldr	r3, [r7, #4]
}
    3126:	1c18      	adds	r0, r3, #0
    3128:	46bd      	mov	sp, r7
    312a:	b002      	add	sp, #8
    312c:	bd80      	pop	{r7, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	000020d1 	.word	0x000020d1
    3134:	20003c30 	.word	0x20003c30
    3138:	000020f1 	.word	0x000020f1

0000313c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    313c:	b580      	push	{r7, lr}
    313e:	b086      	sub	sp, #24
    3140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3142:	2300      	movs	r3, #0
    3144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3146:	4b4d      	ldr	r3, [pc, #308]	; (327c <xTaskIncrementTick+0x140>)
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d000      	beq.n	3150 <xTaskIncrementTick+0x14>
    314e:	e084      	b.n	325a <xTaskIncrementTick+0x11e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    3150:	4b4b      	ldr	r3, [pc, #300]	; (3280 <xTaskIncrementTick+0x144>)
    3152:	681b      	ldr	r3, [r3, #0]
    3154:	1c5a      	adds	r2, r3, #1
    3156:	4b4a      	ldr	r3, [pc, #296]	; (3280 <xTaskIncrementTick+0x144>)
    3158:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    315a:	4b49      	ldr	r3, [pc, #292]	; (3280 <xTaskIncrementTick+0x144>)
    315c:	681b      	ldr	r3, [r3, #0]
    315e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
    3160:	693b      	ldr	r3, [r7, #16]
    3162:	2b00      	cmp	r3, #0
    3164:	d117      	bne.n	3196 <xTaskIncrementTick+0x5a>
			{
				taskSWITCH_DELAYED_LISTS();
    3166:	4b47      	ldr	r3, [pc, #284]	; (3284 <xTaskIncrementTick+0x148>)
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	2b00      	cmp	r3, #0
    316e:	d001      	beq.n	3174 <xTaskIncrementTick+0x38>
    3170:	b672      	cpsid	i
    3172:	e7fe      	b.n	3172 <xTaskIncrementTick+0x36>
    3174:	4b43      	ldr	r3, [pc, #268]	; (3284 <xTaskIncrementTick+0x148>)
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	60fb      	str	r3, [r7, #12]
    317a:	4b43      	ldr	r3, [pc, #268]	; (3288 <xTaskIncrementTick+0x14c>)
    317c:	681a      	ldr	r2, [r3, #0]
    317e:	4b41      	ldr	r3, [pc, #260]	; (3284 <xTaskIncrementTick+0x148>)
    3180:	601a      	str	r2, [r3, #0]
    3182:	4b41      	ldr	r3, [pc, #260]	; (3288 <xTaskIncrementTick+0x14c>)
    3184:	68fa      	ldr	r2, [r7, #12]
    3186:	601a      	str	r2, [r3, #0]
    3188:	4b40      	ldr	r3, [pc, #256]	; (328c <xTaskIncrementTick+0x150>)
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	1c5a      	adds	r2, r3, #1
    318e:	4b3f      	ldr	r3, [pc, #252]	; (328c <xTaskIncrementTick+0x150>)
    3190:	601a      	str	r2, [r3, #0]
    3192:	4b3f      	ldr	r3, [pc, #252]	; (3290 <xTaskIncrementTick+0x154>)
    3194:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3196:	4b3f      	ldr	r3, [pc, #252]	; (3294 <xTaskIncrementTick+0x158>)
    3198:	681b      	ldr	r3, [r3, #0]
    319a:	693a      	ldr	r2, [r7, #16]
    319c:	429a      	cmp	r2, r3
    319e:	d34e      	bcc.n	323e <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    31a0:	4b38      	ldr	r3, [pc, #224]	; (3284 <xTaskIncrementTick+0x148>)
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	681b      	ldr	r3, [r3, #0]
    31a6:	2b00      	cmp	r3, #0
    31a8:	d101      	bne.n	31ae <xTaskIncrementTick+0x72>
    31aa:	2301      	movs	r3, #1
    31ac:	e000      	b.n	31b0 <xTaskIncrementTick+0x74>
    31ae:	2300      	movs	r3, #0
    31b0:	2b00      	cmp	r3, #0
    31b2:	d004      	beq.n	31be <xTaskIncrementTick+0x82>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    31b4:	4b37      	ldr	r3, [pc, #220]	; (3294 <xTaskIncrementTick+0x158>)
    31b6:	2201      	movs	r2, #1
    31b8:	4252      	negs	r2, r2
    31ba:	601a      	str	r2, [r3, #0]
						break;
    31bc:	e03f      	b.n	323e <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    31be:	4b31      	ldr	r3, [pc, #196]	; (3284 <xTaskIncrementTick+0x148>)
    31c0:	681b      	ldr	r3, [r3, #0]
    31c2:	68db      	ldr	r3, [r3, #12]
    31c4:	68db      	ldr	r3, [r3, #12]
    31c6:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    31c8:	68bb      	ldr	r3, [r7, #8]
    31ca:	685b      	ldr	r3, [r3, #4]
    31cc:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    31ce:	693a      	ldr	r2, [r7, #16]
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	429a      	cmp	r2, r3
    31d4:	d203      	bcs.n	31de <xTaskIncrementTick+0xa2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    31d6:	4b2f      	ldr	r3, [pc, #188]	; (3294 <xTaskIncrementTick+0x158>)
    31d8:	687a      	ldr	r2, [r7, #4]
    31da:	601a      	str	r2, [r3, #0]
							break;
    31dc:	e02f      	b.n	323e <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    31de:	68bb      	ldr	r3, [r7, #8]
    31e0:	3304      	adds	r3, #4
    31e2:	1c18      	adds	r0, r3, #0
    31e4:	4b2c      	ldr	r3, [pc, #176]	; (3298 <xTaskIncrementTick+0x15c>)
    31e6:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    31e8:	68bb      	ldr	r3, [r7, #8]
    31ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31ec:	2b00      	cmp	r3, #0
    31ee:	d004      	beq.n	31fa <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    31f0:	68bb      	ldr	r3, [r7, #8]
    31f2:	3318      	adds	r3, #24
    31f4:	1c18      	adds	r0, r3, #0
    31f6:	4b28      	ldr	r3, [pc, #160]	; (3298 <xTaskIncrementTick+0x15c>)
    31f8:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    31fa:	68bb      	ldr	r3, [r7, #8]
    31fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    31fe:	4b27      	ldr	r3, [pc, #156]	; (329c <xTaskIncrementTick+0x160>)
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	429a      	cmp	r2, r3
    3204:	d903      	bls.n	320e <xTaskIncrementTick+0xd2>
    3206:	68bb      	ldr	r3, [r7, #8]
    3208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    320a:	4b24      	ldr	r3, [pc, #144]	; (329c <xTaskIncrementTick+0x160>)
    320c:	601a      	str	r2, [r3, #0]
    320e:	68bb      	ldr	r3, [r7, #8]
    3210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3212:	1c13      	adds	r3, r2, #0
    3214:	009b      	lsls	r3, r3, #2
    3216:	189b      	adds	r3, r3, r2
    3218:	009b      	lsls	r3, r3, #2
    321a:	4a21      	ldr	r2, [pc, #132]	; (32a0 <xTaskIncrementTick+0x164>)
    321c:	189a      	adds	r2, r3, r2
    321e:	68bb      	ldr	r3, [r7, #8]
    3220:	3304      	adds	r3, #4
    3222:	1c10      	adds	r0, r2, #0
    3224:	1c19      	adds	r1, r3, #0
    3226:	4b1f      	ldr	r3, [pc, #124]	; (32a4 <xTaskIncrementTick+0x168>)
    3228:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    322a:	68bb      	ldr	r3, [r7, #8]
    322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    322e:	4b1e      	ldr	r3, [pc, #120]	; (32a8 <xTaskIncrementTick+0x16c>)
    3230:	681b      	ldr	r3, [r3, #0]
    3232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3234:	429a      	cmp	r2, r3
    3236:	d301      	bcc.n	323c <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
    3238:	2301      	movs	r3, #1
    323a:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    323c:	e7b0      	b.n	31a0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    323e:	4b1a      	ldr	r3, [pc, #104]	; (32a8 <xTaskIncrementTick+0x16c>)
    3240:	681b      	ldr	r3, [r3, #0]
    3242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3244:	4916      	ldr	r1, [pc, #88]	; (32a0 <xTaskIncrementTick+0x164>)
    3246:	1c13      	adds	r3, r2, #0
    3248:	009b      	lsls	r3, r3, #2
    324a:	189b      	adds	r3, r3, r2
    324c:	009b      	lsls	r3, r3, #2
    324e:	585b      	ldr	r3, [r3, r1]
    3250:	2b01      	cmp	r3, #1
    3252:	d907      	bls.n	3264 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
    3254:	2301      	movs	r3, #1
    3256:	617b      	str	r3, [r7, #20]
    3258:	e004      	b.n	3264 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    325a:	4b14      	ldr	r3, [pc, #80]	; (32ac <xTaskIncrementTick+0x170>)
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	1c5a      	adds	r2, r3, #1
    3260:	4b12      	ldr	r3, [pc, #72]	; (32ac <xTaskIncrementTick+0x170>)
    3262:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3264:	4b12      	ldr	r3, [pc, #72]	; (32b0 <xTaskIncrementTick+0x174>)
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	2b00      	cmp	r3, #0
    326a:	d001      	beq.n	3270 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
    326c:	2301      	movs	r3, #1
    326e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3270:	697b      	ldr	r3, [r7, #20]
}
    3272:	1c18      	adds	r0, r3, #0
    3274:	46bd      	mov	sp, r7
    3276:	b006      	add	sp, #24
    3278:	bd80      	pop	{r7, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	20003c4c 	.word	0x20003c4c
    3280:	20003c30 	.word	0x20003c30
    3284:	20003be4 	.word	0x20003be4
    3288:	20003be8 	.word	0x20003be8
    328c:	20003c44 	.word	0x20003c44
    3290:	000038a1 	.word	0x000038a1
    3294:	20000008 	.word	0x20000008
    3298:	0000238d 	.word	0x0000238d
    329c:	20003c34 	.word	0x20003c34
    32a0:	20003b58 	.word	0x20003b58
    32a4:	000022dd 	.word	0x000022dd
    32a8:	20003b54 	.word	0x20003b54
    32ac:	20003c3c 	.word	0x20003c3c
    32b0:	20003c40 	.word	0x20003c40

000032b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b082      	sub	sp, #8
    32b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    32ba:	4b21      	ldr	r3, [pc, #132]	; (3340 <vTaskSwitchContext+0x8c>)
    32bc:	681b      	ldr	r3, [r3, #0]
    32be:	2b00      	cmp	r3, #0
    32c0:	d003      	beq.n	32ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    32c2:	4b20      	ldr	r3, [pc, #128]	; (3344 <vTaskSwitchContext+0x90>)
    32c4:	2201      	movs	r2, #1
    32c6:	601a      	str	r2, [r3, #0]
    32c8:	e036      	b.n	3338 <vTaskSwitchContext+0x84>
	}
	else
	{
		xYieldPending = pdFALSE;
    32ca:	4b1e      	ldr	r3, [pc, #120]	; (3344 <vTaskSwitchContext+0x90>)
    32cc:	2200      	movs	r2, #0
    32ce:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    32d0:	e00a      	b.n	32e8 <vTaskSwitchContext+0x34>
    32d2:	4b1d      	ldr	r3, [pc, #116]	; (3348 <vTaskSwitchContext+0x94>)
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d101      	bne.n	32de <vTaskSwitchContext+0x2a>
    32da:	b672      	cpsid	i
    32dc:	e7fe      	b.n	32dc <vTaskSwitchContext+0x28>
    32de:	4b1a      	ldr	r3, [pc, #104]	; (3348 <vTaskSwitchContext+0x94>)
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	1e5a      	subs	r2, r3, #1
    32e4:	4b18      	ldr	r3, [pc, #96]	; (3348 <vTaskSwitchContext+0x94>)
    32e6:	601a      	str	r2, [r3, #0]
    32e8:	4b17      	ldr	r3, [pc, #92]	; (3348 <vTaskSwitchContext+0x94>)
    32ea:	681a      	ldr	r2, [r3, #0]
    32ec:	4917      	ldr	r1, [pc, #92]	; (334c <vTaskSwitchContext+0x98>)
    32ee:	1c13      	adds	r3, r2, #0
    32f0:	009b      	lsls	r3, r3, #2
    32f2:	189b      	adds	r3, r3, r2
    32f4:	009b      	lsls	r3, r3, #2
    32f6:	585b      	ldr	r3, [r3, r1]
    32f8:	2b00      	cmp	r3, #0
    32fa:	d0ea      	beq.n	32d2 <vTaskSwitchContext+0x1e>
    32fc:	4b12      	ldr	r3, [pc, #72]	; (3348 <vTaskSwitchContext+0x94>)
    32fe:	681a      	ldr	r2, [r3, #0]
    3300:	1c13      	adds	r3, r2, #0
    3302:	009b      	lsls	r3, r3, #2
    3304:	189b      	adds	r3, r3, r2
    3306:	009b      	lsls	r3, r3, #2
    3308:	4a10      	ldr	r2, [pc, #64]	; (334c <vTaskSwitchContext+0x98>)
    330a:	189b      	adds	r3, r3, r2
    330c:	607b      	str	r3, [r7, #4]
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	685b      	ldr	r3, [r3, #4]
    3312:	685a      	ldr	r2, [r3, #4]
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	605a      	str	r2, [r3, #4]
    3318:	687b      	ldr	r3, [r7, #4]
    331a:	685a      	ldr	r2, [r3, #4]
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	3308      	adds	r3, #8
    3320:	429a      	cmp	r2, r3
    3322:	d104      	bne.n	332e <vTaskSwitchContext+0x7a>
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	685b      	ldr	r3, [r3, #4]
    3328:	685a      	ldr	r2, [r3, #4]
    332a:	687b      	ldr	r3, [r7, #4]
    332c:	605a      	str	r2, [r3, #4]
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	685b      	ldr	r3, [r3, #4]
    3332:	68da      	ldr	r2, [r3, #12]
    3334:	4b06      	ldr	r3, [pc, #24]	; (3350 <vTaskSwitchContext+0x9c>)
    3336:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3338:	46bd      	mov	sp, r7
    333a:	b002      	add	sp, #8
    333c:	bd80      	pop	{r7, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	20003c4c 	.word	0x20003c4c
    3344:	20003c40 	.word	0x20003c40
    3348:	20003c34 	.word	0x20003c34
    334c:	20003b58 	.word	0x20003b58
    3350:	20003b54 	.word	0x20003b54

00003354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
    335c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	2b00      	cmp	r3, #0
    3362:	d101      	bne.n	3368 <vTaskPlaceOnEventList+0x14>
    3364:	b672      	cpsid	i
    3366:	e7fe      	b.n	3366 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3368:	4b12      	ldr	r3, [pc, #72]	; (33b4 <vTaskPlaceOnEventList+0x60>)
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	3318      	adds	r3, #24
    336e:	687a      	ldr	r2, [r7, #4]
    3370:	1c10      	adds	r0, r2, #0
    3372:	1c19      	adds	r1, r3, #0
    3374:	4b10      	ldr	r3, [pc, #64]	; (33b8 <vTaskPlaceOnEventList+0x64>)
    3376:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3378:	4b0e      	ldr	r3, [pc, #56]	; (33b4 <vTaskPlaceOnEventList+0x60>)
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	3304      	adds	r3, #4
    337e:	1c18      	adds	r0, r3, #0
    3380:	4b0e      	ldr	r3, [pc, #56]	; (33bc <vTaskPlaceOnEventList+0x68>)
    3382:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3384:	683b      	ldr	r3, [r7, #0]
    3386:	3301      	adds	r3, #1
    3388:	d108      	bne.n	339c <vTaskPlaceOnEventList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    338a:	4b0a      	ldr	r3, [pc, #40]	; (33b4 <vTaskPlaceOnEventList+0x60>)
    338c:	681b      	ldr	r3, [r3, #0]
    338e:	3304      	adds	r3, #4
    3390:	4a0b      	ldr	r2, [pc, #44]	; (33c0 <vTaskPlaceOnEventList+0x6c>)
    3392:	1c10      	adds	r0, r2, #0
    3394:	1c19      	adds	r1, r3, #0
    3396:	4b0b      	ldr	r3, [pc, #44]	; (33c4 <vTaskPlaceOnEventList+0x70>)
    3398:	4798      	blx	r3
    339a:	e008      	b.n	33ae <vTaskPlaceOnEventList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    339c:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <vTaskPlaceOnEventList+0x74>)
    339e:	681a      	ldr	r2, [r3, #0]
    33a0:	683b      	ldr	r3, [r7, #0]
    33a2:	18d3      	adds	r3, r2, r3
    33a4:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    33a6:	68fb      	ldr	r3, [r7, #12]
    33a8:	1c18      	adds	r0, r3, #0
    33aa:	4b08      	ldr	r3, [pc, #32]	; (33cc <vTaskPlaceOnEventList+0x78>)
    33ac:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    33ae:	46bd      	mov	sp, r7
    33b0:	b004      	add	sp, #16
    33b2:	bd80      	pop	{r7, pc}
    33b4:	20003b54 	.word	0x20003b54
    33b8:	00002321 	.word	0x00002321
    33bc:	0000238d 	.word	0x0000238d
    33c0:	20003c18 	.word	0x20003c18
    33c4:	000022dd 	.word	0x000022dd
    33c8:	20003c30 	.word	0x20003c30
    33cc:	000037ad 	.word	0x000037ad

000033d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    33d0:	b580      	push	{r7, lr}
    33d2:	b084      	sub	sp, #16
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
    33d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    33da:	687b      	ldr	r3, [r7, #4]
    33dc:	2b00      	cmp	r3, #0
    33de:	d101      	bne.n	33e4 <vTaskPlaceOnEventListRestricted+0x14>
    33e0:	b672      	cpsid	i
    33e2:	e7fe      	b.n	33e2 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    33e4:	4b0c      	ldr	r3, [pc, #48]	; (3418 <vTaskPlaceOnEventListRestricted+0x48>)
    33e6:	681b      	ldr	r3, [r3, #0]
    33e8:	3318      	adds	r3, #24
    33ea:	687a      	ldr	r2, [r7, #4]
    33ec:	1c10      	adds	r0, r2, #0
    33ee:	1c19      	adds	r1, r3, #0
    33f0:	4b0a      	ldr	r3, [pc, #40]	; (341c <vTaskPlaceOnEventListRestricted+0x4c>)
    33f2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    33f4:	4b08      	ldr	r3, [pc, #32]	; (3418 <vTaskPlaceOnEventListRestricted+0x48>)
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	3304      	adds	r3, #4
    33fa:	1c18      	adds	r0, r3, #0
    33fc:	4b08      	ldr	r3, [pc, #32]	; (3420 <vTaskPlaceOnEventListRestricted+0x50>)
    33fe:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    3400:	4b08      	ldr	r3, [pc, #32]	; (3424 <vTaskPlaceOnEventListRestricted+0x54>)
    3402:	681a      	ldr	r2, [r3, #0]
    3404:	683b      	ldr	r3, [r7, #0]
    3406:	18d3      	adds	r3, r2, r3
    3408:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    340a:	68fb      	ldr	r3, [r7, #12]
    340c:	1c18      	adds	r0, r3, #0
    340e:	4b06      	ldr	r3, [pc, #24]	; (3428 <vTaskPlaceOnEventListRestricted+0x58>)
    3410:	4798      	blx	r3
	}
    3412:	46bd      	mov	sp, r7
    3414:	b004      	add	sp, #16
    3416:	bd80      	pop	{r7, pc}
    3418:	20003b54 	.word	0x20003b54
    341c:	000022dd 	.word	0x000022dd
    3420:	0000238d 	.word	0x0000238d
    3424:	20003c30 	.word	0x20003c30
    3428:	000037ad 	.word	0x000037ad

0000342c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    342c:	b580      	push	{r7, lr}
    342e:	b084      	sub	sp, #16
    3430:	af00      	add	r7, sp, #0
    3432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3434:	687b      	ldr	r3, [r7, #4]
    3436:	68db      	ldr	r3, [r3, #12]
    3438:	68db      	ldr	r3, [r3, #12]
    343a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	2b00      	cmp	r3, #0
    3440:	d101      	bne.n	3446 <xTaskRemoveFromEventList+0x1a>
    3442:	b672      	cpsid	i
    3444:	e7fe      	b.n	3444 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3446:	68bb      	ldr	r3, [r7, #8]
    3448:	3318      	adds	r3, #24
    344a:	1c18      	adds	r0, r3, #0
    344c:	4b1f      	ldr	r3, [pc, #124]	; (34cc <xTaskRemoveFromEventList+0xa0>)
    344e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3450:	4b1f      	ldr	r3, [pc, #124]	; (34d0 <xTaskRemoveFromEventList+0xa4>)
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	2b00      	cmp	r3, #0
    3456:	d11d      	bne.n	3494 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3458:	68bb      	ldr	r3, [r7, #8]
    345a:	3304      	adds	r3, #4
    345c:	1c18      	adds	r0, r3, #0
    345e:	4b1b      	ldr	r3, [pc, #108]	; (34cc <xTaskRemoveFromEventList+0xa0>)
    3460:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3466:	4b1b      	ldr	r3, [pc, #108]	; (34d4 <xTaskRemoveFromEventList+0xa8>)
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	429a      	cmp	r2, r3
    346c:	d903      	bls.n	3476 <xTaskRemoveFromEventList+0x4a>
    346e:	68bb      	ldr	r3, [r7, #8]
    3470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3472:	4b18      	ldr	r3, [pc, #96]	; (34d4 <xTaskRemoveFromEventList+0xa8>)
    3474:	601a      	str	r2, [r3, #0]
    3476:	68bb      	ldr	r3, [r7, #8]
    3478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    347a:	1c13      	adds	r3, r2, #0
    347c:	009b      	lsls	r3, r3, #2
    347e:	189b      	adds	r3, r3, r2
    3480:	009b      	lsls	r3, r3, #2
    3482:	4a15      	ldr	r2, [pc, #84]	; (34d8 <xTaskRemoveFromEventList+0xac>)
    3484:	189a      	adds	r2, r3, r2
    3486:	68bb      	ldr	r3, [r7, #8]
    3488:	3304      	adds	r3, #4
    348a:	1c10      	adds	r0, r2, #0
    348c:	1c19      	adds	r1, r3, #0
    348e:	4b13      	ldr	r3, [pc, #76]	; (34dc <xTaskRemoveFromEventList+0xb0>)
    3490:	4798      	blx	r3
    3492:	e006      	b.n	34a2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3494:	68bb      	ldr	r3, [r7, #8]
    3496:	3318      	adds	r3, #24
    3498:	4a11      	ldr	r2, [pc, #68]	; (34e0 <xTaskRemoveFromEventList+0xb4>)
    349a:	1c10      	adds	r0, r2, #0
    349c:	1c19      	adds	r1, r3, #0
    349e:	4b0f      	ldr	r3, [pc, #60]	; (34dc <xTaskRemoveFromEventList+0xb0>)
    34a0:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    34a2:	68bb      	ldr	r3, [r7, #8]
    34a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    34a6:	4b0f      	ldr	r3, [pc, #60]	; (34e4 <xTaskRemoveFromEventList+0xb8>)
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34ac:	429a      	cmp	r2, r3
    34ae:	d905      	bls.n	34bc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    34b0:	2301      	movs	r3, #1
    34b2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    34b4:	4b0c      	ldr	r3, [pc, #48]	; (34e8 <xTaskRemoveFromEventList+0xbc>)
    34b6:	2201      	movs	r2, #1
    34b8:	601a      	str	r2, [r3, #0]
    34ba:	e001      	b.n	34c0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    34bc:	2300      	movs	r3, #0
    34be:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    34c0:	68fb      	ldr	r3, [r7, #12]
}
    34c2:	1c18      	adds	r0, r3, #0
    34c4:	46bd      	mov	sp, r7
    34c6:	b004      	add	sp, #16
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	0000238d 	.word	0x0000238d
    34d0:	20003c4c 	.word	0x20003c4c
    34d4:	20003c34 	.word	0x20003c34
    34d8:	20003b58 	.word	0x20003b58
    34dc:	000022dd 	.word	0x000022dd
    34e0:	20003bec 	.word	0x20003bec
    34e4:	20003b54 	.word	0x20003b54
    34e8:	20003c40 	.word	0x20003c40

000034ec <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b082      	sub	sp, #8
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    34f4:	687b      	ldr	r3, [r7, #4]
    34f6:	2b00      	cmp	r3, #0
    34f8:	d101      	bne.n	34fe <vTaskSetTimeOutState+0x12>
    34fa:	b672      	cpsid	i
    34fc:	e7fe      	b.n	34fc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    34fe:	4b05      	ldr	r3, [pc, #20]	; (3514 <vTaskSetTimeOutState+0x28>)
    3500:	681a      	ldr	r2, [r3, #0]
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3506:	4b04      	ldr	r3, [pc, #16]	; (3518 <vTaskSetTimeOutState+0x2c>)
    3508:	681a      	ldr	r2, [r3, #0]
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	605a      	str	r2, [r3, #4]
}
    350e:	46bd      	mov	sp, r7
    3510:	b002      	add	sp, #8
    3512:	bd80      	pop	{r7, pc}
    3514:	20003c44 	.word	0x20003c44
    3518:	20003c30 	.word	0x20003c30

0000351c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    351c:	b580      	push	{r7, lr}
    351e:	b084      	sub	sp, #16
    3520:	af00      	add	r7, sp, #0
    3522:	6078      	str	r0, [r7, #4]
    3524:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    3526:	687b      	ldr	r3, [r7, #4]
    3528:	2b00      	cmp	r3, #0
    352a:	d101      	bne.n	3530 <xTaskCheckForTimeOut+0x14>
    352c:	b672      	cpsid	i
    352e:	e7fe      	b.n	352e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    3530:	683b      	ldr	r3, [r7, #0]
    3532:	2b00      	cmp	r3, #0
    3534:	d101      	bne.n	353a <xTaskCheckForTimeOut+0x1e>
    3536:	b672      	cpsid	i
    3538:	e7fe      	b.n	3538 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    353a:	4b1d      	ldr	r3, [pc, #116]	; (35b0 <xTaskCheckForTimeOut+0x94>)
    353c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    353e:	4b1d      	ldr	r3, [pc, #116]	; (35b4 <xTaskCheckForTimeOut+0x98>)
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3544:	683b      	ldr	r3, [r7, #0]
    3546:	681b      	ldr	r3, [r3, #0]
    3548:	3301      	adds	r3, #1
    354a:	d102      	bne.n	3552 <xTaskCheckForTimeOut+0x36>
			{
				xReturn = pdFALSE;
    354c:	2300      	movs	r3, #0
    354e:	60fb      	str	r3, [r7, #12]
    3550:	e027      	b.n	35a2 <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	681a      	ldr	r2, [r3, #0]
    3556:	4b18      	ldr	r3, [pc, #96]	; (35b8 <xTaskCheckForTimeOut+0x9c>)
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	429a      	cmp	r2, r3
    355c:	d007      	beq.n	356e <xTaskCheckForTimeOut+0x52>
    355e:	687b      	ldr	r3, [r7, #4]
    3560:	685a      	ldr	r2, [r3, #4]
    3562:	68bb      	ldr	r3, [r7, #8]
    3564:	429a      	cmp	r2, r3
    3566:	d802      	bhi.n	356e <xTaskCheckForTimeOut+0x52>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3568:	2301      	movs	r3, #1
    356a:	60fb      	str	r3, [r7, #12]
    356c:	e019      	b.n	35a2 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	685b      	ldr	r3, [r3, #4]
    3572:	68ba      	ldr	r2, [r7, #8]
    3574:	1ad2      	subs	r2, r2, r3
    3576:	683b      	ldr	r3, [r7, #0]
    3578:	681b      	ldr	r3, [r3, #0]
    357a:	429a      	cmp	r2, r3
    357c:	d20f      	bcs.n	359e <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    357e:	683b      	ldr	r3, [r7, #0]
    3580:	681a      	ldr	r2, [r3, #0]
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	6859      	ldr	r1, [r3, #4]
    3586:	68bb      	ldr	r3, [r7, #8]
    3588:	1acb      	subs	r3, r1, r3
    358a:	18d2      	adds	r2, r2, r3
    358c:	683b      	ldr	r3, [r7, #0]
    358e:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    3590:	687b      	ldr	r3, [r7, #4]
    3592:	1c18      	adds	r0, r3, #0
    3594:	4b09      	ldr	r3, [pc, #36]	; (35bc <xTaskCheckForTimeOut+0xa0>)
    3596:	4798      	blx	r3
			xReturn = pdFALSE;
    3598:	2300      	movs	r3, #0
    359a:	60fb      	str	r3, [r7, #12]
    359c:	e001      	b.n	35a2 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    359e:	2301      	movs	r3, #1
    35a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    35a2:	4b07      	ldr	r3, [pc, #28]	; (35c0 <xTaskCheckForTimeOut+0xa4>)
    35a4:	4798      	blx	r3

	return xReturn;
    35a6:	68fb      	ldr	r3, [r7, #12]
}
    35a8:	1c18      	adds	r0, r3, #0
    35aa:	46bd      	mov	sp, r7
    35ac:	b004      	add	sp, #16
    35ae:	bd80      	pop	{r7, pc}
    35b0:	000020d1 	.word	0x000020d1
    35b4:	20003c30 	.word	0x20003c30
    35b8:	20003c44 	.word	0x20003c44
    35bc:	000034ed 	.word	0x000034ed
    35c0:	000020f1 	.word	0x000020f1

000035c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    35c4:	b580      	push	{r7, lr}
    35c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    35c8:	4b02      	ldr	r3, [pc, #8]	; (35d4 <vTaskMissedYield+0x10>)
    35ca:	2201      	movs	r2, #1
    35cc:	601a      	str	r2, [r3, #0]
}
    35ce:	46bd      	mov	sp, r7
    35d0:	bd80      	pop	{r7, pc}
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	20003c40 	.word	0x20003c40

000035d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    35d8:	b580      	push	{r7, lr}
    35da:	b082      	sub	sp, #8
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    35e0:	4b04      	ldr	r3, [pc, #16]	; (35f4 <prvIdleTask+0x1c>)
    35e2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    35e4:	4b04      	ldr	r3, [pc, #16]	; (35f8 <prvIdleTask+0x20>)
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	2b01      	cmp	r3, #1
    35ea:	d901      	bls.n	35f0 <prvIdleTask+0x18>
			{
				taskYIELD();
    35ec:	4b03      	ldr	r3, [pc, #12]	; (35fc <prvIdleTask+0x24>)
    35ee:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    35f0:	e7f6      	b.n	35e0 <prvIdleTask+0x8>
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	00003721 	.word	0x00003721
    35f8:	20003b58 	.word	0x20003b58
    35fc:	000020b5 	.word	0x000020b5

00003600 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    3600:	b580      	push	{r7, lr}
    3602:	b086      	sub	sp, #24
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	60b9      	str	r1, [r7, #8]
    360a:	607a      	str	r2, [r7, #4]
    360c:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    360e:	2300      	movs	r3, #0
    3610:	617b      	str	r3, [r7, #20]
    3612:	e013      	b.n	363c <prvInitialiseTCBVariables+0x3c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3614:	68ba      	ldr	r2, [r7, #8]
    3616:	697b      	ldr	r3, [r7, #20]
    3618:	18d3      	adds	r3, r2, r3
    361a:	781a      	ldrb	r2, [r3, #0]
    361c:	68f8      	ldr	r0, [r7, #12]
    361e:	2330      	movs	r3, #48	; 0x30
    3620:	6979      	ldr	r1, [r7, #20]
    3622:	1841      	adds	r1, r0, r1
    3624:	18cb      	adds	r3, r1, r3
    3626:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3628:	68ba      	ldr	r2, [r7, #8]
    362a:	697b      	ldr	r3, [r7, #20]
    362c:	18d3      	adds	r3, r2, r3
    362e:	781b      	ldrb	r3, [r3, #0]
    3630:	2b00      	cmp	r3, #0
    3632:	d100      	bne.n	3636 <prvInitialiseTCBVariables+0x36>
		{
			break;
    3634:	e005      	b.n	3642 <prvInitialiseTCBVariables+0x42>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3636:	697b      	ldr	r3, [r7, #20]
    3638:	3301      	adds	r3, #1
    363a:	617b      	str	r3, [r7, #20]
    363c:	697b      	ldr	r3, [r7, #20]
    363e:	2b07      	cmp	r3, #7
    3640:	d9e8      	bls.n	3614 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3642:	68fa      	ldr	r2, [r7, #12]
    3644:	233b      	movs	r3, #59	; 0x3b
    3646:	2100      	movs	r1, #0
    3648:	54d1      	strb	r1, [r2, r3]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	2b04      	cmp	r3, #4
    364e:	d901      	bls.n	3654 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3650:	2304      	movs	r3, #4
    3652:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3654:	68fb      	ldr	r3, [r7, #12]
    3656:	687a      	ldr	r2, [r7, #4]
    3658:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    365a:	68fb      	ldr	r3, [r7, #12]
    365c:	687a      	ldr	r2, [r7, #4]
    365e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3660:	68fb      	ldr	r3, [r7, #12]
    3662:	3304      	adds	r3, #4
    3664:	1c18      	adds	r0, r3, #0
    3666:	4b0a      	ldr	r3, [pc, #40]	; (3690 <prvInitialiseTCBVariables+0x90>)
    3668:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    366a:	68fb      	ldr	r3, [r7, #12]
    366c:	3318      	adds	r3, #24
    366e:	1c18      	adds	r0, r3, #0
    3670:	4b07      	ldr	r3, [pc, #28]	; (3690 <prvInitialiseTCBVariables+0x90>)
    3672:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3674:	68fb      	ldr	r3, [r7, #12]
    3676:	68fa      	ldr	r2, [r7, #12]
    3678:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    367a:	687b      	ldr	r3, [r7, #4]
    367c:	2205      	movs	r2, #5
    367e:	1ad2      	subs	r2, r2, r3
    3680:	68fb      	ldr	r3, [r7, #12]
    3682:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3684:	68fb      	ldr	r3, [r7, #12]
    3686:	68fa      	ldr	r2, [r7, #12]
    3688:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    368a:	46bd      	mov	sp, r7
    368c:	b006      	add	sp, #24
    368e:	bd80      	pop	{r7, pc}
    3690:	000022c9 	.word	0x000022c9

00003694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3694:	b580      	push	{r7, lr}
    3696:	b082      	sub	sp, #8
    3698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    369a:	2300      	movs	r3, #0
    369c:	607b      	str	r3, [r7, #4]
    369e:	e00c      	b.n	36ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    36a0:	687a      	ldr	r2, [r7, #4]
    36a2:	1c13      	adds	r3, r2, #0
    36a4:	009b      	lsls	r3, r3, #2
    36a6:	189b      	adds	r3, r3, r2
    36a8:	009b      	lsls	r3, r3, #2
    36aa:	4a14      	ldr	r2, [pc, #80]	; (36fc <prvInitialiseTaskLists+0x68>)
    36ac:	189b      	adds	r3, r3, r2
    36ae:	1c18      	adds	r0, r3, #0
    36b0:	4b13      	ldr	r3, [pc, #76]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36b2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	3301      	adds	r3, #1
    36b8:	607b      	str	r3, [r7, #4]
    36ba:	687b      	ldr	r3, [r7, #4]
    36bc:	2b04      	cmp	r3, #4
    36be:	d9ef      	bls.n	36a0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    36c0:	4b10      	ldr	r3, [pc, #64]	; (3704 <prvInitialiseTaskLists+0x70>)
    36c2:	1c18      	adds	r0, r3, #0
    36c4:	4b0e      	ldr	r3, [pc, #56]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36c6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    36c8:	4b0f      	ldr	r3, [pc, #60]	; (3708 <prvInitialiseTaskLists+0x74>)
    36ca:	1c18      	adds	r0, r3, #0
    36cc:	4b0c      	ldr	r3, [pc, #48]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36ce:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    36d0:	4b0e      	ldr	r3, [pc, #56]	; (370c <prvInitialiseTaskLists+0x78>)
    36d2:	1c18      	adds	r0, r3, #0
    36d4:	4b0a      	ldr	r3, [pc, #40]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36d6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    36d8:	4b0d      	ldr	r3, [pc, #52]	; (3710 <prvInitialiseTaskLists+0x7c>)
    36da:	1c18      	adds	r0, r3, #0
    36dc:	4b08      	ldr	r3, [pc, #32]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36de:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    36e0:	4b0c      	ldr	r3, [pc, #48]	; (3714 <prvInitialiseTaskLists+0x80>)
    36e2:	1c18      	adds	r0, r3, #0
    36e4:	4b06      	ldr	r3, [pc, #24]	; (3700 <prvInitialiseTaskLists+0x6c>)
    36e6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    36e8:	4b0b      	ldr	r3, [pc, #44]	; (3718 <prvInitialiseTaskLists+0x84>)
    36ea:	4a06      	ldr	r2, [pc, #24]	; (3704 <prvInitialiseTaskLists+0x70>)
    36ec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    36ee:	4b0b      	ldr	r3, [pc, #44]	; (371c <prvInitialiseTaskLists+0x88>)
    36f0:	4a05      	ldr	r2, [pc, #20]	; (3708 <prvInitialiseTaskLists+0x74>)
    36f2:	601a      	str	r2, [r3, #0]
}
    36f4:	46bd      	mov	sp, r7
    36f6:	b002      	add	sp, #8
    36f8:	bd80      	pop	{r7, pc}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	20003b58 	.word	0x20003b58
    3700:	0000228d 	.word	0x0000228d
    3704:	20003bbc 	.word	0x20003bbc
    3708:	20003bd0 	.word	0x20003bd0
    370c:	20003bec 	.word	0x20003bec
    3710:	20003c00 	.word	0x20003c00
    3714:	20003c18 	.word	0x20003c18
    3718:	20003be4 	.word	0x20003be4
    371c:	20003be8 	.word	0x20003be8

00003720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3720:	b580      	push	{r7, lr}
    3722:	b082      	sub	sp, #8
    3724:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3726:	e027      	b.n	3778 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    3728:	4b17      	ldr	r3, [pc, #92]	; (3788 <prvCheckTasksWaitingTermination+0x68>)
    372a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    372c:	4b17      	ldr	r3, [pc, #92]	; (378c <prvCheckTasksWaitingTermination+0x6c>)
    372e:	681b      	ldr	r3, [r3, #0]
    3730:	425a      	negs	r2, r3
    3732:	4153      	adcs	r3, r2
    3734:	b2db      	uxtb	r3, r3
    3736:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    3738:	4b15      	ldr	r3, [pc, #84]	; (3790 <prvCheckTasksWaitingTermination+0x70>)
    373a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    373c:	687b      	ldr	r3, [r7, #4]
    373e:	2b00      	cmp	r3, #0
    3740:	d11a      	bne.n	3778 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3742:	4b14      	ldr	r3, [pc, #80]	; (3794 <prvCheckTasksWaitingTermination+0x74>)
    3744:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3746:	4b11      	ldr	r3, [pc, #68]	; (378c <prvCheckTasksWaitingTermination+0x6c>)
    3748:	68db      	ldr	r3, [r3, #12]
    374a:	68db      	ldr	r3, [r3, #12]
    374c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    374e:	683b      	ldr	r3, [r7, #0]
    3750:	3304      	adds	r3, #4
    3752:	1c18      	adds	r0, r3, #0
    3754:	4b10      	ldr	r3, [pc, #64]	; (3798 <prvCheckTasksWaitingTermination+0x78>)
    3756:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    3758:	4b10      	ldr	r3, [pc, #64]	; (379c <prvCheckTasksWaitingTermination+0x7c>)
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	1e5a      	subs	r2, r3, #1
    375e:	4b0f      	ldr	r3, [pc, #60]	; (379c <prvCheckTasksWaitingTermination+0x7c>)
    3760:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    3762:	4b0f      	ldr	r3, [pc, #60]	; (37a0 <prvCheckTasksWaitingTermination+0x80>)
    3764:	681b      	ldr	r3, [r3, #0]
    3766:	1e5a      	subs	r2, r3, #1
    3768:	4b0d      	ldr	r3, [pc, #52]	; (37a0 <prvCheckTasksWaitingTermination+0x80>)
    376a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    376c:	4b0d      	ldr	r3, [pc, #52]	; (37a4 <prvCheckTasksWaitingTermination+0x84>)
    376e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    3770:	683b      	ldr	r3, [r7, #0]
    3772:	1c18      	adds	r0, r3, #0
    3774:	4b0c      	ldr	r3, [pc, #48]	; (37a8 <prvCheckTasksWaitingTermination+0x88>)
    3776:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3778:	4b09      	ldr	r3, [pc, #36]	; (37a0 <prvCheckTasksWaitingTermination+0x80>)
    377a:	681b      	ldr	r3, [r3, #0]
    377c:	2b00      	cmp	r3, #0
    377e:	d1d3      	bne.n	3728 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3780:	46bd      	mov	sp, r7
    3782:	b002      	add	sp, #8
    3784:	bd80      	pop	{r7, pc}
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	00002fd9 	.word	0x00002fd9
    378c:	20003c00 	.word	0x20003c00
    3790:	00002ff1 	.word	0x00002ff1
    3794:	000020d1 	.word	0x000020d1
    3798:	0000238d 	.word	0x0000238d
    379c:	20003c2c 	.word	0x20003c2c
    37a0:	20003c14 	.word	0x20003c14
    37a4:	000020f1 	.word	0x000020f1
    37a8:	0000387d 	.word	0x0000387d

000037ac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    37ac:	b580      	push	{r7, lr}
    37ae:	b082      	sub	sp, #8
    37b0:	af00      	add	r7, sp, #0
    37b2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    37b4:	4b13      	ldr	r3, [pc, #76]	; (3804 <prvAddCurrentTaskToDelayedList+0x58>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	687a      	ldr	r2, [r7, #4]
    37ba:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    37bc:	4b12      	ldr	r3, [pc, #72]	; (3808 <prvAddCurrentTaskToDelayedList+0x5c>)
    37be:	681b      	ldr	r3, [r3, #0]
    37c0:	687a      	ldr	r2, [r7, #4]
    37c2:	429a      	cmp	r2, r3
    37c4:	d209      	bcs.n	37da <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37c6:	4b11      	ldr	r3, [pc, #68]	; (380c <prvAddCurrentTaskToDelayedList+0x60>)
    37c8:	681a      	ldr	r2, [r3, #0]
    37ca:	4b0e      	ldr	r3, [pc, #56]	; (3804 <prvAddCurrentTaskToDelayedList+0x58>)
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	3304      	adds	r3, #4
    37d0:	1c10      	adds	r0, r2, #0
    37d2:	1c19      	adds	r1, r3, #0
    37d4:	4b0e      	ldr	r3, [pc, #56]	; (3810 <prvAddCurrentTaskToDelayedList+0x64>)
    37d6:	4798      	blx	r3
    37d8:	e010      	b.n	37fc <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37da:	4b0e      	ldr	r3, [pc, #56]	; (3814 <prvAddCurrentTaskToDelayedList+0x68>)
    37dc:	681a      	ldr	r2, [r3, #0]
    37de:	4b09      	ldr	r3, [pc, #36]	; (3804 <prvAddCurrentTaskToDelayedList+0x58>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	3304      	adds	r3, #4
    37e4:	1c10      	adds	r0, r2, #0
    37e6:	1c19      	adds	r1, r3, #0
    37e8:	4b09      	ldr	r3, [pc, #36]	; (3810 <prvAddCurrentTaskToDelayedList+0x64>)
    37ea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    37ec:	4b0a      	ldr	r3, [pc, #40]	; (3818 <prvAddCurrentTaskToDelayedList+0x6c>)
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	687a      	ldr	r2, [r7, #4]
    37f2:	429a      	cmp	r2, r3
    37f4:	d202      	bcs.n	37fc <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
    37f6:	4b08      	ldr	r3, [pc, #32]	; (3818 <prvAddCurrentTaskToDelayedList+0x6c>)
    37f8:	687a      	ldr	r2, [r7, #4]
    37fa:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    37fc:	46bd      	mov	sp, r7
    37fe:	b002      	add	sp, #8
    3800:	bd80      	pop	{r7, pc}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	20003b54 	.word	0x20003b54
    3808:	20003c30 	.word	0x20003c30
    380c:	20003be8 	.word	0x20003be8
    3810:	00002321 	.word	0x00002321
    3814:	20003be4 	.word	0x20003be4
    3818:	20000008 	.word	0x20000008

0000381c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    381c:	b580      	push	{r7, lr}
    381e:	b084      	sub	sp, #16
    3820:	af00      	add	r7, sp, #0
    3822:	1c02      	adds	r2, r0, #0
    3824:	6039      	str	r1, [r7, #0]
    3826:	1dbb      	adds	r3, r7, #6
    3828:	801a      	strh	r2, [r3, #0]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    382a:	2040      	movs	r0, #64	; 0x40
    382c:	4b11      	ldr	r3, [pc, #68]	; (3874 <prvAllocateTCBAndStack+0x58>)
    382e:	4798      	blx	r3
    3830:	1c03      	adds	r3, r0, #0
    3832:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    3834:	68fb      	ldr	r3, [r7, #12]
    3836:	2b00      	cmp	r3, #0
    3838:	d017      	beq.n	386a <prvAllocateTCBAndStack+0x4e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    383a:	683b      	ldr	r3, [r7, #0]
    383c:	2b00      	cmp	r3, #0
    383e:	d107      	bne.n	3850 <prvAllocateTCBAndStack+0x34>
    3840:	1dbb      	adds	r3, r7, #6
    3842:	881b      	ldrh	r3, [r3, #0]
    3844:	009b      	lsls	r3, r3, #2
    3846:	1c18      	adds	r0, r3, #0
    3848:	4b0a      	ldr	r3, [pc, #40]	; (3874 <prvAllocateTCBAndStack+0x58>)
    384a:	4798      	blx	r3
    384c:	1c02      	adds	r2, r0, #0
    384e:	e000      	b.n	3852 <prvAllocateTCBAndStack+0x36>
    3850:	683a      	ldr	r2, [r7, #0]
    3852:	68fb      	ldr	r3, [r7, #12]
    3854:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3856:	68fb      	ldr	r3, [r7, #12]
    3858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    385a:	2b00      	cmp	r3, #0
    385c:	d105      	bne.n	386a <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	1c18      	adds	r0, r3, #0
    3862:	4b05      	ldr	r3, [pc, #20]	; (3878 <prvAllocateTCBAndStack+0x5c>)
    3864:	4798      	blx	r3
			pxNewTCB = NULL;
    3866:	2300      	movs	r3, #0
    3868:	60fb      	str	r3, [r7, #12]
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
    386a:	68fb      	ldr	r3, [r7, #12]
}
    386c:	1c18      	adds	r0, r3, #0
    386e:	46bd      	mov	sp, r7
    3870:	b004      	add	sp, #16
    3872:	bd80      	pop	{r7, pc}
    3874:	000021e1 	.word	0x000021e1
    3878:	00002275 	.word	0x00002275

0000387c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    387c:	b580      	push	{r7, lr}
    387e:	b082      	sub	sp, #8
    3880:	af00      	add	r7, sp, #0
    3882:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3888:	1c18      	adds	r0, r3, #0
    388a:	4b04      	ldr	r3, [pc, #16]	; (389c <prvDeleteTCB+0x20>)
    388c:	4798      	blx	r3
		vPortFree( pxTCB );
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	1c18      	adds	r0, r3, #0
    3892:	4b02      	ldr	r3, [pc, #8]	; (389c <prvDeleteTCB+0x20>)
    3894:	4798      	blx	r3
	}
    3896:	46bd      	mov	sp, r7
    3898:	b002      	add	sp, #8
    389a:	bd80      	pop	{r7, pc}
    389c:	00002275 	.word	0x00002275

000038a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    38a0:	b580      	push	{r7, lr}
    38a2:	b082      	sub	sp, #8
    38a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    38a6:	4b0d      	ldr	r3, [pc, #52]	; (38dc <prvResetNextTaskUnblockTime+0x3c>)
    38a8:	681b      	ldr	r3, [r3, #0]
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	2b00      	cmp	r3, #0
    38ae:	d101      	bne.n	38b4 <prvResetNextTaskUnblockTime+0x14>
    38b0:	2301      	movs	r3, #1
    38b2:	e000      	b.n	38b6 <prvResetNextTaskUnblockTime+0x16>
    38b4:	2300      	movs	r3, #0
    38b6:	2b00      	cmp	r3, #0
    38b8:	d004      	beq.n	38c4 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    38ba:	4b09      	ldr	r3, [pc, #36]	; (38e0 <prvResetNextTaskUnblockTime+0x40>)
    38bc:	2201      	movs	r2, #1
    38be:	4252      	negs	r2, r2
    38c0:	601a      	str	r2, [r3, #0]
    38c2:	e008      	b.n	38d6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    38c4:	4b05      	ldr	r3, [pc, #20]	; (38dc <prvResetNextTaskUnblockTime+0x3c>)
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	68db      	ldr	r3, [r3, #12]
    38ca:	68db      	ldr	r3, [r3, #12]
    38cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    38ce:	687b      	ldr	r3, [r7, #4]
    38d0:	685a      	ldr	r2, [r3, #4]
    38d2:	4b03      	ldr	r3, [pc, #12]	; (38e0 <prvResetNextTaskUnblockTime+0x40>)
    38d4:	601a      	str	r2, [r3, #0]
	}
}
    38d6:	46bd      	mov	sp, r7
    38d8:	b002      	add	sp, #8
    38da:	bd80      	pop	{r7, pc}
    38dc:	20003be4 	.word	0x20003be4
    38e0:	20000008 	.word	0x20000008

000038e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    38e4:	b580      	push	{r7, lr}
    38e6:	b082      	sub	sp, #8
    38e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    38ea:	4b04      	ldr	r3, [pc, #16]	; (38fc <xTaskGetCurrentTaskHandle+0x18>)
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	607b      	str	r3, [r7, #4]

		return xReturn;
    38f0:	687b      	ldr	r3, [r7, #4]
	}
    38f2:	1c18      	adds	r0, r3, #0
    38f4:	46bd      	mov	sp, r7
    38f6:	b002      	add	sp, #8
    38f8:	bd80      	pop	{r7, pc}
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	20003b54 	.word	0x20003b54

00003900 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    3900:	b580      	push	{r7, lr}
    3902:	b082      	sub	sp, #8
    3904:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3906:	4b0a      	ldr	r3, [pc, #40]	; (3930 <xTaskGetSchedulerState+0x30>)
    3908:	681b      	ldr	r3, [r3, #0]
    390a:	2b00      	cmp	r3, #0
    390c:	d102      	bne.n	3914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    390e:	2301      	movs	r3, #1
    3910:	607b      	str	r3, [r7, #4]
    3912:	e008      	b.n	3926 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3914:	4b07      	ldr	r3, [pc, #28]	; (3934 <xTaskGetSchedulerState+0x34>)
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	2b00      	cmp	r3, #0
    391a:	d102      	bne.n	3922 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    391c:	2302      	movs	r3, #2
    391e:	607b      	str	r3, [r7, #4]
    3920:	e001      	b.n	3926 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3922:	2300      	movs	r3, #0
    3924:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    3926:	687b      	ldr	r3, [r7, #4]
	}
    3928:	1c18      	adds	r0, r3, #0
    392a:	46bd      	mov	sp, r7
    392c:	b002      	add	sp, #8
    392e:	bd80      	pop	{r7, pc}
    3930:	20003c38 	.word	0x20003c38
    3934:	20003c4c 	.word	0x20003c4c

00003938 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3938:	b580      	push	{r7, lr}
    393a:	b084      	sub	sp, #16
    393c:	af00      	add	r7, sp, #0
    393e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3940:	687b      	ldr	r3, [r7, #4]
    3942:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3944:	687b      	ldr	r3, [r7, #4]
    3946:	2b00      	cmp	r3, #0
    3948:	d04a      	beq.n	39e0 <vTaskPriorityInherit+0xa8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    394a:	68fb      	ldr	r3, [r7, #12]
    394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    394e:	4b26      	ldr	r3, [pc, #152]	; (39e8 <vTaskPriorityInherit+0xb0>)
    3950:	681b      	ldr	r3, [r3, #0]
    3952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3954:	429a      	cmp	r2, r3
    3956:	d243      	bcs.n	39e0 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3958:	68fb      	ldr	r3, [r7, #12]
    395a:	699b      	ldr	r3, [r3, #24]
    395c:	2b00      	cmp	r3, #0
    395e:	db06      	blt.n	396e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3960:	4b21      	ldr	r3, [pc, #132]	; (39e8 <vTaskPriorityInherit+0xb0>)
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3966:	2205      	movs	r2, #5
    3968:	1ad2      	subs	r2, r2, r3
    396a:	68fb      	ldr	r3, [r7, #12]
    396c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	6959      	ldr	r1, [r3, #20]
    3972:	68fb      	ldr	r3, [r7, #12]
    3974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3976:	1c13      	adds	r3, r2, #0
    3978:	009b      	lsls	r3, r3, #2
    397a:	189b      	adds	r3, r3, r2
    397c:	009b      	lsls	r3, r3, #2
    397e:	4a1b      	ldr	r2, [pc, #108]	; (39ec <vTaskPriorityInherit+0xb4>)
    3980:	189b      	adds	r3, r3, r2
    3982:	4299      	cmp	r1, r3
    3984:	d101      	bne.n	398a <vTaskPriorityInherit+0x52>
    3986:	2301      	movs	r3, #1
    3988:	e000      	b.n	398c <vTaskPriorityInherit+0x54>
    398a:	2300      	movs	r3, #0
    398c:	2b00      	cmp	r3, #0
    398e:	d022      	beq.n	39d6 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3990:	68fb      	ldr	r3, [r7, #12]
    3992:	3304      	adds	r3, #4
    3994:	1c18      	adds	r0, r3, #0
    3996:	4b16      	ldr	r3, [pc, #88]	; (39f0 <vTaskPriorityInherit+0xb8>)
    3998:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    399a:	4b13      	ldr	r3, [pc, #76]	; (39e8 <vTaskPriorityInherit+0xb0>)
    399c:	681b      	ldr	r3, [r3, #0]
    399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    39a4:	68fb      	ldr	r3, [r7, #12]
    39a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a8:	4b12      	ldr	r3, [pc, #72]	; (39f4 <vTaskPriorityInherit+0xbc>)
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	429a      	cmp	r2, r3
    39ae:	d903      	bls.n	39b8 <vTaskPriorityInherit+0x80>
    39b0:	68fb      	ldr	r3, [r7, #12]
    39b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39b4:	4b0f      	ldr	r3, [pc, #60]	; (39f4 <vTaskPriorityInherit+0xbc>)
    39b6:	601a      	str	r2, [r3, #0]
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39bc:	1c13      	adds	r3, r2, #0
    39be:	009b      	lsls	r3, r3, #2
    39c0:	189b      	adds	r3, r3, r2
    39c2:	009b      	lsls	r3, r3, #2
    39c4:	4a09      	ldr	r2, [pc, #36]	; (39ec <vTaskPriorityInherit+0xb4>)
    39c6:	189a      	adds	r2, r3, r2
    39c8:	68fb      	ldr	r3, [r7, #12]
    39ca:	3304      	adds	r3, #4
    39cc:	1c10      	adds	r0, r2, #0
    39ce:	1c19      	adds	r1, r3, #0
    39d0:	4b09      	ldr	r3, [pc, #36]	; (39f8 <vTaskPriorityInherit+0xc0>)
    39d2:	4798      	blx	r3
    39d4:	e004      	b.n	39e0 <vTaskPriorityInherit+0xa8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    39d6:	4b04      	ldr	r3, [pc, #16]	; (39e8 <vTaskPriorityInherit+0xb0>)
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    39e0:	46bd      	mov	sp, r7
    39e2:	b004      	add	sp, #16
    39e4:	bd80      	pop	{r7, pc}
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	20003b54 	.word	0x20003b54
    39ec:	20003b58 	.word	0x20003b58
    39f0:	0000238d 	.word	0x0000238d
    39f4:	20003c34 	.word	0x20003c34
    39f8:	000022dd 	.word	0x000022dd

000039fc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    39fc:	b580      	push	{r7, lr}
    39fe:	b084      	sub	sp, #16
    3a00:	af00      	add	r7, sp, #0
    3a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    3a08:	687b      	ldr	r3, [r7, #4]
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d030      	beq.n	3a70 <vTaskPriorityDisinherit+0x74>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a12:	68fb      	ldr	r3, [r7, #12]
    3a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3a16:	429a      	cmp	r2, r3
    3a18:	d02a      	beq.n	3a70 <vTaskPriorityDisinherit+0x74>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3a1a:	68fb      	ldr	r3, [r7, #12]
    3a1c:	3304      	adds	r3, #4
    3a1e:	1c18      	adds	r0, r3, #0
    3a20:	4b15      	ldr	r3, [pc, #84]	; (3a78 <vTaskPriorityDisinherit+0x7c>)
    3a22:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3a24:	68fb      	ldr	r3, [r7, #12]
    3a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3a28:	68fb      	ldr	r3, [r7, #12]
    3a2a:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3a2c:	68fb      	ldr	r3, [r7, #12]
    3a2e:	699b      	ldr	r3, [r3, #24]
    3a30:	2b00      	cmp	r3, #0
    3a32:	db05      	blt.n	3a40 <vTaskPriorityDisinherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a34:	68fb      	ldr	r3, [r7, #12]
    3a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a38:	2205      	movs	r2, #5
    3a3a:	1ad2      	subs	r2, r2, r3
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	619a      	str	r2, [r3, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a44:	4b0d      	ldr	r3, [pc, #52]	; (3a7c <vTaskPriorityDisinherit+0x80>)
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	429a      	cmp	r2, r3
    3a4a:	d903      	bls.n	3a54 <vTaskPriorityDisinherit+0x58>
    3a4c:	68fb      	ldr	r3, [r7, #12]
    3a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a50:	4b0a      	ldr	r3, [pc, #40]	; (3a7c <vTaskPriorityDisinherit+0x80>)
    3a52:	601a      	str	r2, [r3, #0]
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a58:	1c13      	adds	r3, r2, #0
    3a5a:	009b      	lsls	r3, r3, #2
    3a5c:	189b      	adds	r3, r3, r2
    3a5e:	009b      	lsls	r3, r3, #2
    3a60:	4a07      	ldr	r2, [pc, #28]	; (3a80 <vTaskPriorityDisinherit+0x84>)
    3a62:	189a      	adds	r2, r3, r2
    3a64:	68fb      	ldr	r3, [r7, #12]
    3a66:	3304      	adds	r3, #4
    3a68:	1c10      	adds	r0, r2, #0
    3a6a:	1c19      	adds	r1, r3, #0
    3a6c:	4b05      	ldr	r3, [pc, #20]	; (3a84 <vTaskPriorityDisinherit+0x88>)
    3a6e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3a70:	46bd      	mov	sp, r7
    3a72:	b004      	add	sp, #16
    3a74:	bd80      	pop	{r7, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	0000238d 	.word	0x0000238d
    3a7c:	20003c34 	.word	0x20003c34
    3a80:	20003b58 	.word	0x20003b58
    3a84:	000022dd 	.word	0x000022dd

00003a88 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    3a88:	b590      	push	{r4, r7, lr}
    3a8a:	b087      	sub	sp, #28
    3a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    3a8e:	2300      	movs	r3, #0
    3a90:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    3a92:	4b11      	ldr	r3, [pc, #68]	; (3ad8 <xTimerCreateTimerTask+0x50>)
    3a94:	4798      	blx	r3

	if( xTimerQueue != NULL )
    3a96:	4b11      	ldr	r3, [pc, #68]	; (3adc <xTimerCreateTimerTask+0x54>)
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d011      	beq.n	3ac2 <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    3a9e:	4a10      	ldr	r2, [pc, #64]	; (3ae0 <xTimerCreateTimerTask+0x58>)
    3aa0:	4b10      	ldr	r3, [pc, #64]	; (3ae4 <xTimerCreateTimerTask+0x5c>)
    3aa2:	2102      	movs	r1, #2
    3aa4:	9100      	str	r1, [sp, #0]
    3aa6:	2100      	movs	r1, #0
    3aa8:	9101      	str	r1, [sp, #4]
    3aaa:	2100      	movs	r1, #0
    3aac:	9102      	str	r1, [sp, #8]
    3aae:	2100      	movs	r1, #0
    3ab0:	9103      	str	r1, [sp, #12]
    3ab2:	1c10      	adds	r0, r2, #0
    3ab4:	1c19      	adds	r1, r3, #0
    3ab6:	2250      	movs	r2, #80	; 0x50
    3ab8:	2300      	movs	r3, #0
    3aba:	4c0b      	ldr	r4, [pc, #44]	; (3ae8 <xTimerCreateTimerTask+0x60>)
    3abc:	47a0      	blx	r4
    3abe:	1c03      	adds	r3, r0, #0
    3ac0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d101      	bne.n	3acc <xTimerCreateTimerTask+0x44>
    3ac8:	b672      	cpsid	i
    3aca:	e7fe      	b.n	3aca <xTimerCreateTimerTask+0x42>
	return xReturn;
    3acc:	687b      	ldr	r3, [r7, #4]
}
    3ace:	1c18      	adds	r0, r3, #0
    3ad0:	46bd      	mov	sp, r7
    3ad2:	b003      	add	sp, #12
    3ad4:	bd90      	pop	{r4, r7, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	00003fd5 	.word	0x00003fd5
    3adc:	20003c80 	.word	0x20003c80
    3ae0:	00003c19 	.word	0x00003c19
    3ae4:	00007310 	.word	0x00007310
    3ae8:	00002d55 	.word	0x00002d55

00003aec <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3aec:	b590      	push	{r4, r7, lr}
    3aee:	b089      	sub	sp, #36	; 0x24
    3af0:	af00      	add	r7, sp, #0
    3af2:	60f8      	str	r0, [r7, #12]
    3af4:	60b9      	str	r1, [r7, #8]
    3af6:	607a      	str	r2, [r7, #4]
    3af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    3afa:	2300      	movs	r3, #0
    3afc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    3afe:	4b22      	ldr	r3, [pc, #136]	; (3b88 <xTimerGenericCommand+0x9c>)
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	2b00      	cmp	r3, #0
    3b04:	d03b      	beq.n	3b7e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    3b06:	1c3b      	adds	r3, r7, #0
    3b08:	3310      	adds	r3, #16
    3b0a:	68ba      	ldr	r2, [r7, #8]
    3b0c:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3b0e:	1c3b      	adds	r3, r7, #0
    3b10:	3310      	adds	r3, #16
    3b12:	687a      	ldr	r2, [r7, #4]
    3b14:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3b16:	1c3b      	adds	r3, r7, #0
    3b18:	3310      	adds	r3, #16
    3b1a:	68fa      	ldr	r2, [r7, #12]
    3b1c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b1e:	68bb      	ldr	r3, [r7, #8]
    3b20:	2b05      	cmp	r3, #5
    3b22:	dc1f      	bgt.n	3b64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b24:	4b19      	ldr	r3, [pc, #100]	; (3b8c <xTimerGenericCommand+0xa0>)
    3b26:	4798      	blx	r3
    3b28:	1c03      	adds	r3, r0, #0
    3b2a:	2b02      	cmp	r3, #2
    3b2c:	d10d      	bne.n	3b4a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b2e:	4b16      	ldr	r3, [pc, #88]	; (3b88 <xTimerGenericCommand+0x9c>)
    3b30:	6819      	ldr	r1, [r3, #0]
    3b32:	1c3a      	adds	r2, r7, #0
    3b34:	3210      	adds	r2, #16
    3b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b38:	1c08      	adds	r0, r1, #0
    3b3a:	1c11      	adds	r1, r2, #0
    3b3c:	1c1a      	adds	r2, r3, #0
    3b3e:	2300      	movs	r3, #0
    3b40:	4c13      	ldr	r4, [pc, #76]	; (3b90 <xTimerGenericCommand+0xa4>)
    3b42:	47a0      	blx	r4
    3b44:	1c03      	adds	r3, r0, #0
    3b46:	61fb      	str	r3, [r7, #28]
    3b48:	e019      	b.n	3b7e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b4a:	4b0f      	ldr	r3, [pc, #60]	; (3b88 <xTimerGenericCommand+0x9c>)
    3b4c:	681a      	ldr	r2, [r3, #0]
    3b4e:	1c3b      	adds	r3, r7, #0
    3b50:	3310      	adds	r3, #16
    3b52:	1c10      	adds	r0, r2, #0
    3b54:	1c19      	adds	r1, r3, #0
    3b56:	2200      	movs	r2, #0
    3b58:	2300      	movs	r3, #0
    3b5a:	4c0d      	ldr	r4, [pc, #52]	; (3b90 <xTimerGenericCommand+0xa4>)
    3b5c:	47a0      	blx	r4
    3b5e:	1c03      	adds	r3, r0, #0
    3b60:	61fb      	str	r3, [r7, #28]
    3b62:	e00c      	b.n	3b7e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b64:	4b08      	ldr	r3, [pc, #32]	; (3b88 <xTimerGenericCommand+0x9c>)
    3b66:	6819      	ldr	r1, [r3, #0]
    3b68:	1c3a      	adds	r2, r7, #0
    3b6a:	3210      	adds	r2, #16
    3b6c:	683b      	ldr	r3, [r7, #0]
    3b6e:	1c08      	adds	r0, r1, #0
    3b70:	1c11      	adds	r1, r2, #0
    3b72:	1c1a      	adds	r2, r3, #0
    3b74:	2300      	movs	r3, #0
    3b76:	4c07      	ldr	r4, [pc, #28]	; (3b94 <xTimerGenericCommand+0xa8>)
    3b78:	47a0      	blx	r4
    3b7a:	1c03      	adds	r3, r0, #0
    3b7c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    3b7e:	69fb      	ldr	r3, [r7, #28]
}
    3b80:	1c18      	adds	r0, r3, #0
    3b82:	46bd      	mov	sp, r7
    3b84:	b009      	add	sp, #36	; 0x24
    3b86:	bd90      	pop	{r4, r7, pc}
    3b88:	20003c80 	.word	0x20003c80
    3b8c:	00003901 	.word	0x00003901
    3b90:	00002531 	.word	0x00002531
    3b94:	00002709 	.word	0x00002709

00003b98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3b98:	b590      	push	{r4, r7, lr}
    3b9a:	b087      	sub	sp, #28
    3b9c:	af02      	add	r7, sp, #8
    3b9e:	6078      	str	r0, [r7, #4]
    3ba0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3ba2:	4b19      	ldr	r3, [pc, #100]	; (3c08 <prvProcessExpiredTimer+0x70>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	68db      	ldr	r3, [r3, #12]
    3ba8:	68db      	ldr	r3, [r3, #12]
    3baa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bac:	68fb      	ldr	r3, [r7, #12]
    3bae:	3304      	adds	r3, #4
    3bb0:	1c18      	adds	r0, r3, #0
    3bb2:	4b16      	ldr	r3, [pc, #88]	; (3c0c <prvProcessExpiredTimer+0x74>)
    3bb4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3bb6:	68fb      	ldr	r3, [r7, #12]
    3bb8:	69db      	ldr	r3, [r3, #28]
    3bba:	2b01      	cmp	r3, #1
    3bbc:	d11c      	bne.n	3bf8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    3bbe:	68fb      	ldr	r3, [r7, #12]
    3bc0:	699a      	ldr	r2, [r3, #24]
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	18d1      	adds	r1, r2, r3
    3bc6:	68f8      	ldr	r0, [r7, #12]
    3bc8:	683a      	ldr	r2, [r7, #0]
    3bca:	687b      	ldr	r3, [r7, #4]
    3bcc:	4c10      	ldr	r4, [pc, #64]	; (3c10 <prvProcessExpiredTimer+0x78>)
    3bce:	47a0      	blx	r4
    3bd0:	1c03      	adds	r3, r0, #0
    3bd2:	2b01      	cmp	r3, #1
    3bd4:	d110      	bne.n	3bf8 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bd6:	68fa      	ldr	r2, [r7, #12]
    3bd8:	687b      	ldr	r3, [r7, #4]
    3bda:	2100      	movs	r1, #0
    3bdc:	9100      	str	r1, [sp, #0]
    3bde:	1c10      	adds	r0, r2, #0
    3be0:	2100      	movs	r1, #0
    3be2:	1c1a      	adds	r2, r3, #0
    3be4:	2300      	movs	r3, #0
    3be6:	4c0b      	ldr	r4, [pc, #44]	; (3c14 <prvProcessExpiredTimer+0x7c>)
    3be8:	47a0      	blx	r4
    3bea:	1c03      	adds	r3, r0, #0
    3bec:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    3bee:	68bb      	ldr	r3, [r7, #8]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d101      	bne.n	3bf8 <prvProcessExpiredTimer+0x60>
    3bf4:	b672      	cpsid	i
    3bf6:	e7fe      	b.n	3bf6 <prvProcessExpiredTimer+0x5e>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bf8:	68fb      	ldr	r3, [r7, #12]
    3bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3bfc:	68fa      	ldr	r2, [r7, #12]
    3bfe:	1c10      	adds	r0, r2, #0
    3c00:	4798      	blx	r3
}
    3c02:	46bd      	mov	sp, r7
    3c04:	b005      	add	sp, #20
    3c06:	bd90      	pop	{r4, r7, pc}
    3c08:	20003c78 	.word	0x20003c78
    3c0c:	0000238d 	.word	0x0000238d
    3c10:	00003d61 	.word	0x00003d61
    3c14:	00003aed 	.word	0x00003aed

00003c18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	b084      	sub	sp, #16
    3c1c:	af00      	add	r7, sp, #0
    3c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    3c20:	1c3b      	adds	r3, r7, #0
    3c22:	3308      	adds	r3, #8
    3c24:	1c18      	adds	r0, r3, #0
    3c26:	4b06      	ldr	r3, [pc, #24]	; (3c40 <prvTimerTask+0x28>)
    3c28:	4798      	blx	r3
    3c2a:	1c03      	adds	r3, r0, #0
    3c2c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    3c2e:	68bb      	ldr	r3, [r7, #8]
    3c30:	68fa      	ldr	r2, [r7, #12]
    3c32:	1c10      	adds	r0, r2, #0
    3c34:	1c19      	adds	r1, r3, #0
    3c36:	4b03      	ldr	r3, [pc, #12]	; (3c44 <prvTimerTask+0x2c>)
    3c38:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    3c3a:	4b03      	ldr	r3, [pc, #12]	; (3c48 <prvTimerTask+0x30>)
    3c3c:	4798      	blx	r3
	}
    3c3e:	e7ef      	b.n	3c20 <prvTimerTask+0x8>
    3c40:	00003cd9 	.word	0x00003cd9
    3c44:	00003c4d 	.word	0x00003c4d
    3c48:	00003de9 	.word	0x00003de9

00003c4c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b084      	sub	sp, #16
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3c56:	4b19      	ldr	r3, [pc, #100]	; (3cbc <prvProcessTimerOrBlockTask+0x70>)
    3c58:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c5a:	1c3b      	adds	r3, r7, #0
    3c5c:	3308      	adds	r3, #8
    3c5e:	1c18      	adds	r0, r3, #0
    3c60:	4b17      	ldr	r3, [pc, #92]	; (3cc0 <prvProcessTimerOrBlockTask+0x74>)
    3c62:	4798      	blx	r3
    3c64:	1c03      	adds	r3, r0, #0
    3c66:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    3c68:	68bb      	ldr	r3, [r7, #8]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d120      	bne.n	3cb0 <prvProcessTimerOrBlockTask+0x64>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c6e:	683b      	ldr	r3, [r7, #0]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d10c      	bne.n	3c8e <prvProcessTimerOrBlockTask+0x42>
    3c74:	687a      	ldr	r2, [r7, #4]
    3c76:	68fb      	ldr	r3, [r7, #12]
    3c78:	429a      	cmp	r2, r3
    3c7a:	d808      	bhi.n	3c8e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    3c7c:	4b11      	ldr	r3, [pc, #68]	; (3cc4 <prvProcessTimerOrBlockTask+0x78>)
    3c7e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c80:	687a      	ldr	r2, [r7, #4]
    3c82:	68fb      	ldr	r3, [r7, #12]
    3c84:	1c10      	adds	r0, r2, #0
    3c86:	1c19      	adds	r1, r3, #0
    3c88:	4b0f      	ldr	r3, [pc, #60]	; (3cc8 <prvProcessTimerOrBlockTask+0x7c>)
    3c8a:	4798      	blx	r3
    3c8c:	e012      	b.n	3cb4 <prvProcessTimerOrBlockTask+0x68>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    3c8e:	4b0f      	ldr	r3, [pc, #60]	; (3ccc <prvProcessTimerOrBlockTask+0x80>)
    3c90:	681a      	ldr	r2, [r3, #0]
    3c92:	6879      	ldr	r1, [r7, #4]
    3c94:	68fb      	ldr	r3, [r7, #12]
    3c96:	1acb      	subs	r3, r1, r3
    3c98:	1c10      	adds	r0, r2, #0
    3c9a:	1c19      	adds	r1, r3, #0
    3c9c:	4b0c      	ldr	r3, [pc, #48]	; (3cd0 <prvProcessTimerOrBlockTask+0x84>)
    3c9e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    3ca0:	4b08      	ldr	r3, [pc, #32]	; (3cc4 <prvProcessTimerOrBlockTask+0x78>)
    3ca2:	4798      	blx	r3
    3ca4:	1c03      	adds	r3, r0, #0
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d104      	bne.n	3cb4 <prvProcessTimerOrBlockTask+0x68>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    3caa:	4b0a      	ldr	r3, [pc, #40]	; (3cd4 <prvProcessTimerOrBlockTask+0x88>)
    3cac:	4798      	blx	r3
    3cae:	e001      	b.n	3cb4 <prvProcessTimerOrBlockTask+0x68>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    3cb0:	4b04      	ldr	r3, [pc, #16]	; (3cc4 <prvProcessTimerOrBlockTask+0x78>)
    3cb2:	4798      	blx	r3
		}
	}
}
    3cb4:	46bd      	mov	sp, r7
    3cb6:	b004      	add	sp, #16
    3cb8:	bd80      	pop	{r7, pc}
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	00002fd9 	.word	0x00002fd9
    3cc0:	00003d19 	.word	0x00003d19
    3cc4:	00002ff1 	.word	0x00002ff1
    3cc8:	00003b99 	.word	0x00003b99
    3ccc:	20003c80 	.word	0x20003c80
    3cd0:	00002c75 	.word	0x00002c75
    3cd4:	000020b5 	.word	0x000020b5

00003cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b084      	sub	sp, #16
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3ce0:	4b0c      	ldr	r3, [pc, #48]	; (3d14 <prvGetNextExpireTime+0x3c>)
    3ce2:	681b      	ldr	r3, [r3, #0]
    3ce4:	681b      	ldr	r3, [r3, #0]
    3ce6:	425a      	negs	r2, r3
    3ce8:	4153      	adcs	r3, r2
    3cea:	b2db      	uxtb	r3, r3
    3cec:	1c1a      	adds	r2, r3, #0
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    3cf2:	687b      	ldr	r3, [r7, #4]
    3cf4:	681b      	ldr	r3, [r3, #0]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d105      	bne.n	3d06 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3cfa:	4b06      	ldr	r3, [pc, #24]	; (3d14 <prvGetNextExpireTime+0x3c>)
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	68db      	ldr	r3, [r3, #12]
    3d00:	681b      	ldr	r3, [r3, #0]
    3d02:	60fb      	str	r3, [r7, #12]
    3d04:	e001      	b.n	3d0a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3d06:	2300      	movs	r3, #0
    3d08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    3d0a:	68fb      	ldr	r3, [r7, #12]
}
    3d0c:	1c18      	adds	r0, r3, #0
    3d0e:	46bd      	mov	sp, r7
    3d10:	b004      	add	sp, #16
    3d12:	bd80      	pop	{r7, pc}
    3d14:	20003c78 	.word	0x20003c78

00003d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3d18:	b580      	push	{r7, lr}
    3d1a:	b084      	sub	sp, #16
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3d20:	4b0c      	ldr	r3, [pc, #48]	; (3d54 <prvSampleTimeNow+0x3c>)
    3d22:	4798      	blx	r3
    3d24:	1c03      	adds	r3, r0, #0
    3d26:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    3d28:	4b0b      	ldr	r3, [pc, #44]	; (3d58 <prvSampleTimeNow+0x40>)
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	68fa      	ldr	r2, [r7, #12]
    3d2e:	429a      	cmp	r2, r3
    3d30:	d205      	bcs.n	3d3e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    3d32:	4b0a      	ldr	r3, [pc, #40]	; (3d5c <prvSampleTimeNow+0x44>)
    3d34:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3d36:	687b      	ldr	r3, [r7, #4]
    3d38:	2201      	movs	r2, #1
    3d3a:	601a      	str	r2, [r3, #0]
    3d3c:	e002      	b.n	3d44 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    3d3e:	687b      	ldr	r3, [r7, #4]
    3d40:	2200      	movs	r2, #0
    3d42:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    3d44:	4b04      	ldr	r3, [pc, #16]	; (3d58 <prvSampleTimeNow+0x40>)
    3d46:	68fa      	ldr	r2, [r7, #12]
    3d48:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    3d4a:	68fb      	ldr	r3, [r7, #12]
}
    3d4c:	1c18      	adds	r0, r3, #0
    3d4e:	46bd      	mov	sp, r7
    3d50:	b004      	add	sp, #16
    3d52:	bd80      	pop	{r7, pc}
    3d54:	00003111 	.word	0x00003111
    3d58:	20003c84 	.word	0x20003c84
    3d5c:	00003f11 	.word	0x00003f11

00003d60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b086      	sub	sp, #24
    3d64:	af00      	add	r7, sp, #0
    3d66:	60f8      	str	r0, [r7, #12]
    3d68:	60b9      	str	r1, [r7, #8]
    3d6a:	607a      	str	r2, [r7, #4]
    3d6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    3d6e:	2300      	movs	r3, #0
    3d70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    3d72:	68fb      	ldr	r3, [r7, #12]
    3d74:	68ba      	ldr	r2, [r7, #8]
    3d76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	68fa      	ldr	r2, [r7, #12]
    3d7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    3d7e:	68ba      	ldr	r2, [r7, #8]
    3d80:	687b      	ldr	r3, [r7, #4]
    3d82:	429a      	cmp	r2, r3
    3d84:	d812      	bhi.n	3dac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    3d86:	687a      	ldr	r2, [r7, #4]
    3d88:	683b      	ldr	r3, [r7, #0]
    3d8a:	1ad2      	subs	r2, r2, r3
    3d8c:	68fb      	ldr	r3, [r7, #12]
    3d8e:	699b      	ldr	r3, [r3, #24]
    3d90:	429a      	cmp	r2, r3
    3d92:	d302      	bcc.n	3d9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3d94:	2301      	movs	r3, #1
    3d96:	617b      	str	r3, [r7, #20]
    3d98:	e01b      	b.n	3dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    3d9a:	4b10      	ldr	r3, [pc, #64]	; (3ddc <prvInsertTimerInActiveList+0x7c>)
    3d9c:	681a      	ldr	r2, [r3, #0]
    3d9e:	68fb      	ldr	r3, [r7, #12]
    3da0:	3304      	adds	r3, #4
    3da2:	1c10      	adds	r0, r2, #0
    3da4:	1c19      	adds	r1, r3, #0
    3da6:	4b0e      	ldr	r3, [pc, #56]	; (3de0 <prvInsertTimerInActiveList+0x80>)
    3da8:	4798      	blx	r3
    3daa:	e012      	b.n	3dd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3dac:	687a      	ldr	r2, [r7, #4]
    3dae:	683b      	ldr	r3, [r7, #0]
    3db0:	429a      	cmp	r2, r3
    3db2:	d206      	bcs.n	3dc2 <prvInsertTimerInActiveList+0x62>
    3db4:	68ba      	ldr	r2, [r7, #8]
    3db6:	683b      	ldr	r3, [r7, #0]
    3db8:	429a      	cmp	r2, r3
    3dba:	d302      	bcc.n	3dc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    3dbc:	2301      	movs	r3, #1
    3dbe:	617b      	str	r3, [r7, #20]
    3dc0:	e007      	b.n	3dd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3dc2:	4b08      	ldr	r3, [pc, #32]	; (3de4 <prvInsertTimerInActiveList+0x84>)
    3dc4:	681a      	ldr	r2, [r3, #0]
    3dc6:	68fb      	ldr	r3, [r7, #12]
    3dc8:	3304      	adds	r3, #4
    3dca:	1c10      	adds	r0, r2, #0
    3dcc:	1c19      	adds	r1, r3, #0
    3dce:	4b04      	ldr	r3, [pc, #16]	; (3de0 <prvInsertTimerInActiveList+0x80>)
    3dd0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    3dd2:	697b      	ldr	r3, [r7, #20]
}
    3dd4:	1c18      	adds	r0, r3, #0
    3dd6:	46bd      	mov	sp, r7
    3dd8:	b006      	add	sp, #24
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	20003c7c 	.word	0x20003c7c
    3de0:	00002321 	.word	0x00002321
    3de4:	20003c78 	.word	0x20003c78

00003de8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    3de8:	b590      	push	{r4, r7, lr}
    3dea:	b08b      	sub	sp, #44	; 0x2c
    3dec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3dee:	e06e      	b.n	3ece <prvProcessReceivedCommands+0xe6>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3df0:	1c3b      	adds	r3, r7, #0
    3df2:	3308      	adds	r3, #8
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	db69      	blt.n	3ece <prvProcessReceivedCommands+0xe6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3dfa:	1c3b      	adds	r3, r7, #0
    3dfc:	3308      	adds	r3, #8
    3dfe:	689b      	ldr	r3, [r3, #8]
    3e00:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    3e02:	69fb      	ldr	r3, [r7, #28]
    3e04:	695b      	ldr	r3, [r3, #20]
    3e06:	2b00      	cmp	r3, #0
    3e08:	d004      	beq.n	3e14 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3e0a:	69fb      	ldr	r3, [r7, #28]
    3e0c:	3304      	adds	r3, #4
    3e0e:	1c18      	adds	r0, r3, #0
    3e10:	4b37      	ldr	r3, [pc, #220]	; (3ef0 <prvProcessReceivedCommands+0x108>)
    3e12:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3e14:	1d3b      	adds	r3, r7, #4
    3e16:	1c18      	adds	r0, r3, #0
    3e18:	4b36      	ldr	r3, [pc, #216]	; (3ef4 <prvProcessReceivedCommands+0x10c>)
    3e1a:	4798      	blx	r3
    3e1c:	1c03      	adds	r3, r0, #0
    3e1e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    3e20:	1c3b      	adds	r3, r7, #0
    3e22:	3308      	adds	r3, #8
    3e24:	681b      	ldr	r3, [r3, #0]
    3e26:	2b09      	cmp	r3, #9
    3e28:	d84e      	bhi.n	3ec8 <prvProcessReceivedCommands+0xe0>
    3e2a:	009a      	lsls	r2, r3, #2
    3e2c:	4b32      	ldr	r3, [pc, #200]	; (3ef8 <prvProcessReceivedCommands+0x110>)
    3e2e:	18d3      	adds	r3, r2, r3
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    3e34:	1c3b      	adds	r3, r7, #0
    3e36:	3308      	adds	r3, #8
    3e38:	685a      	ldr	r2, [r3, #4]
    3e3a:	69fb      	ldr	r3, [r7, #28]
    3e3c:	699b      	ldr	r3, [r3, #24]
    3e3e:	18d1      	adds	r1, r2, r3
    3e40:	1c3b      	adds	r3, r7, #0
    3e42:	3308      	adds	r3, #8
    3e44:	685b      	ldr	r3, [r3, #4]
    3e46:	69f8      	ldr	r0, [r7, #28]
    3e48:	69ba      	ldr	r2, [r7, #24]
    3e4a:	4c2c      	ldr	r4, [pc, #176]	; (3efc <prvProcessReceivedCommands+0x114>)
    3e4c:	47a0      	blx	r4
    3e4e:	1c03      	adds	r3, r0, #0
    3e50:	2b01      	cmp	r3, #1
    3e52:	d11e      	bne.n	3e92 <prvProcessReceivedCommands+0xaa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e54:	69fb      	ldr	r3, [r7, #28]
    3e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e58:	69fa      	ldr	r2, [r7, #28]
    3e5a:	1c10      	adds	r0, r2, #0
    3e5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3e5e:	69fb      	ldr	r3, [r7, #28]
    3e60:	69db      	ldr	r3, [r3, #28]
    3e62:	2b01      	cmp	r3, #1
    3e64:	d115      	bne.n	3e92 <prvProcessReceivedCommands+0xaa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3e66:	1c3b      	adds	r3, r7, #0
    3e68:	3308      	adds	r3, #8
    3e6a:	685a      	ldr	r2, [r3, #4]
    3e6c:	69fb      	ldr	r3, [r7, #28]
    3e6e:	699b      	ldr	r3, [r3, #24]
    3e70:	18d3      	adds	r3, r2, r3
    3e72:	69fa      	ldr	r2, [r7, #28]
    3e74:	2100      	movs	r1, #0
    3e76:	9100      	str	r1, [sp, #0]
    3e78:	1c10      	adds	r0, r2, #0
    3e7a:	2100      	movs	r1, #0
    3e7c:	1c1a      	adds	r2, r3, #0
    3e7e:	2300      	movs	r3, #0
    3e80:	4c1f      	ldr	r4, [pc, #124]	; (3f00 <prvProcessReceivedCommands+0x118>)
    3e82:	47a0      	blx	r4
    3e84:	1c03      	adds	r3, r0, #0
    3e86:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    3e88:	697b      	ldr	r3, [r7, #20]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d101      	bne.n	3e92 <prvProcessReceivedCommands+0xaa>
    3e8e:	b672      	cpsid	i
    3e90:	e7fe      	b.n	3e90 <prvProcessReceivedCommands+0xa8>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    3e92:	e01c      	b.n	3ece <prvProcessReceivedCommands+0xe6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3e94:	1c3b      	adds	r3, r7, #0
    3e96:	3308      	adds	r3, #8
    3e98:	685a      	ldr	r2, [r3, #4]
    3e9a:	69fb      	ldr	r3, [r7, #28]
    3e9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3e9e:	69fb      	ldr	r3, [r7, #28]
    3ea0:	699b      	ldr	r3, [r3, #24]
    3ea2:	2b00      	cmp	r3, #0
    3ea4:	d101      	bne.n	3eaa <prvProcessReceivedCommands+0xc2>
    3ea6:	b672      	cpsid	i
    3ea8:	e7fe      	b.n	3ea8 <prvProcessReceivedCommands+0xc0>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3eaa:	69fb      	ldr	r3, [r7, #28]
    3eac:	699a      	ldr	r2, [r3, #24]
    3eae:	69bb      	ldr	r3, [r7, #24]
    3eb0:	18d1      	adds	r1, r2, r3
    3eb2:	69f8      	ldr	r0, [r7, #28]
    3eb4:	69ba      	ldr	r2, [r7, #24]
    3eb6:	69bb      	ldr	r3, [r7, #24]
    3eb8:	4c10      	ldr	r4, [pc, #64]	; (3efc <prvProcessReceivedCommands+0x114>)
    3eba:	47a0      	blx	r4
					break;
    3ebc:	e007      	b.n	3ece <prvProcessReceivedCommands+0xe6>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    3ebe:	69fb      	ldr	r3, [r7, #28]
    3ec0:	1c18      	adds	r0, r3, #0
    3ec2:	4b10      	ldr	r3, [pc, #64]	; (3f04 <prvProcessReceivedCommands+0x11c>)
    3ec4:	4798      	blx	r3
					break;
    3ec6:	e002      	b.n	3ece <prvProcessReceivedCommands+0xe6>

				default	:
					/* Don't expect to get here. */
					break;
    3ec8:	46c0      	nop			; (mov r8, r8)
    3eca:	e000      	b.n	3ece <prvProcessReceivedCommands+0xe6>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list.
					There is nothing to do here. */
					break;
    3ecc:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3ece:	4b0e      	ldr	r3, [pc, #56]	; (3f08 <prvProcessReceivedCommands+0x120>)
    3ed0:	681a      	ldr	r2, [r3, #0]
    3ed2:	1c3b      	adds	r3, r7, #0
    3ed4:	3308      	adds	r3, #8
    3ed6:	1c10      	adds	r0, r2, #0
    3ed8:	1c19      	adds	r1, r3, #0
    3eda:	2200      	movs	r2, #0
    3edc:	2300      	movs	r3, #0
    3ede:	4c0b      	ldr	r4, [pc, #44]	; (3f0c <prvProcessReceivedCommands+0x124>)
    3ee0:	47a0      	blx	r4
    3ee2:	1c03      	adds	r3, r0, #0
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d183      	bne.n	3df0 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    3ee8:	46bd      	mov	sp, r7
    3eea:	b009      	add	sp, #36	; 0x24
    3eec:	bd90      	pop	{r4, r7, pc}
    3eee:	46c0      	nop			; (mov r8, r8)
    3ef0:	0000238d 	.word	0x0000238d
    3ef4:	00003d19 	.word	0x00003d19
    3ef8:	00007318 	.word	0x00007318
    3efc:	00003d61 	.word	0x00003d61
    3f00:	00003aed 	.word	0x00003aed
    3f04:	00002275 	.word	0x00002275
    3f08:	20003c80 	.word	0x20003c80
    3f0c:	00002819 	.word	0x00002819

00003f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    3f10:	b590      	push	{r4, r7, lr}
    3f12:	b089      	sub	sp, #36	; 0x24
    3f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3f16:	e040      	b.n	3f9a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3f18:	4b29      	ldr	r3, [pc, #164]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3f1a:	681b      	ldr	r3, [r3, #0]
    3f1c:	68db      	ldr	r3, [r3, #12]
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3f22:	4b27      	ldr	r3, [pc, #156]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3f24:	681b      	ldr	r3, [r3, #0]
    3f26:	68db      	ldr	r3, [r3, #12]
    3f28:	68db      	ldr	r3, [r3, #12]
    3f2a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3f2c:	693b      	ldr	r3, [r7, #16]
    3f2e:	3304      	adds	r3, #4
    3f30:	1c18      	adds	r0, r3, #0
    3f32:	4b24      	ldr	r3, [pc, #144]	; (3fc4 <prvSwitchTimerLists+0xb4>)
    3f34:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f36:	693b      	ldr	r3, [r7, #16]
    3f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f3a:	693a      	ldr	r2, [r7, #16]
    3f3c:	1c10      	adds	r0, r2, #0
    3f3e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3f40:	693b      	ldr	r3, [r7, #16]
    3f42:	69db      	ldr	r3, [r3, #28]
    3f44:	2b01      	cmp	r3, #1
    3f46:	d128      	bne.n	3f9a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3f48:	693b      	ldr	r3, [r7, #16]
    3f4a:	699a      	ldr	r2, [r3, #24]
    3f4c:	697b      	ldr	r3, [r7, #20]
    3f4e:	18d3      	adds	r3, r2, r3
    3f50:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    3f52:	68fa      	ldr	r2, [r7, #12]
    3f54:	697b      	ldr	r3, [r7, #20]
    3f56:	429a      	cmp	r2, r3
    3f58:	d90e      	bls.n	3f78 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3f5a:	693b      	ldr	r3, [r7, #16]
    3f5c:	68fa      	ldr	r2, [r7, #12]
    3f5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3f60:	693b      	ldr	r3, [r7, #16]
    3f62:	693a      	ldr	r2, [r7, #16]
    3f64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3f66:	4b16      	ldr	r3, [pc, #88]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3f68:	681a      	ldr	r2, [r3, #0]
    3f6a:	693b      	ldr	r3, [r7, #16]
    3f6c:	3304      	adds	r3, #4
    3f6e:	1c10      	adds	r0, r2, #0
    3f70:	1c19      	adds	r1, r3, #0
    3f72:	4b15      	ldr	r3, [pc, #84]	; (3fc8 <prvSwitchTimerLists+0xb8>)
    3f74:	4798      	blx	r3
    3f76:	e010      	b.n	3f9a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3f78:	693a      	ldr	r2, [r7, #16]
    3f7a:	697b      	ldr	r3, [r7, #20]
    3f7c:	2100      	movs	r1, #0
    3f7e:	9100      	str	r1, [sp, #0]
    3f80:	1c10      	adds	r0, r2, #0
    3f82:	2100      	movs	r1, #0
    3f84:	1c1a      	adds	r2, r3, #0
    3f86:	2300      	movs	r3, #0
    3f88:	4c10      	ldr	r4, [pc, #64]	; (3fcc <prvSwitchTimerLists+0xbc>)
    3f8a:	47a0      	blx	r4
    3f8c:	1c03      	adds	r3, r0, #0
    3f8e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    3f90:	68bb      	ldr	r3, [r7, #8]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d101      	bne.n	3f9a <prvSwitchTimerLists+0x8a>
    3f96:	b672      	cpsid	i
    3f98:	e7fe      	b.n	3f98 <prvSwitchTimerLists+0x88>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3f9a:	4b09      	ldr	r3, [pc, #36]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3f9c:	681b      	ldr	r3, [r3, #0]
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d1b9      	bne.n	3f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    3fa4:	4b06      	ldr	r3, [pc, #24]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    3faa:	4b09      	ldr	r3, [pc, #36]	; (3fd0 <prvSwitchTimerLists+0xc0>)
    3fac:	681a      	ldr	r2, [r3, #0]
    3fae:	4b04      	ldr	r3, [pc, #16]	; (3fc0 <prvSwitchTimerLists+0xb0>)
    3fb0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    3fb2:	4b07      	ldr	r3, [pc, #28]	; (3fd0 <prvSwitchTimerLists+0xc0>)
    3fb4:	687a      	ldr	r2, [r7, #4]
    3fb6:	601a      	str	r2, [r3, #0]
}
    3fb8:	46bd      	mov	sp, r7
    3fba:	b007      	add	sp, #28
    3fbc:	bd90      	pop	{r4, r7, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	20003c78 	.word	0x20003c78
    3fc4:	0000238d 	.word	0x0000238d
    3fc8:	00002321 	.word	0x00002321
    3fcc:	00003aed 	.word	0x00003aed
    3fd0:	20003c7c 	.word	0x20003c7c

00003fd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3fd4:	b580      	push	{r7, lr}
    3fd6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3fd8:	4b12      	ldr	r3, [pc, #72]	; (4024 <prvCheckForValidListAndQueue+0x50>)
    3fda:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3fdc:	4b12      	ldr	r3, [pc, #72]	; (4028 <prvCheckForValidListAndQueue+0x54>)
    3fde:	681b      	ldr	r3, [r3, #0]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d11b      	bne.n	401c <prvCheckForValidListAndQueue+0x48>
		{
			vListInitialise( &xActiveTimerList1 );
    3fe4:	4b11      	ldr	r3, [pc, #68]	; (402c <prvCheckForValidListAndQueue+0x58>)
    3fe6:	1c18      	adds	r0, r3, #0
    3fe8:	4b11      	ldr	r3, [pc, #68]	; (4030 <prvCheckForValidListAndQueue+0x5c>)
    3fea:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    3fec:	4b11      	ldr	r3, [pc, #68]	; (4034 <prvCheckForValidListAndQueue+0x60>)
    3fee:	1c18      	adds	r0, r3, #0
    3ff0:	4b0f      	ldr	r3, [pc, #60]	; (4030 <prvCheckForValidListAndQueue+0x5c>)
    3ff2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    3ff4:	4b10      	ldr	r3, [pc, #64]	; (4038 <prvCheckForValidListAndQueue+0x64>)
    3ff6:	4a0d      	ldr	r2, [pc, #52]	; (402c <prvCheckForValidListAndQueue+0x58>)
    3ff8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3ffa:	4b10      	ldr	r3, [pc, #64]	; (403c <prvCheckForValidListAndQueue+0x68>)
    3ffc:	4a0d      	ldr	r2, [pc, #52]	; (4034 <prvCheckForValidListAndQueue+0x60>)
    3ffe:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4000:	2002      	movs	r0, #2
    4002:	210c      	movs	r1, #12
    4004:	2200      	movs	r2, #0
    4006:	4b0e      	ldr	r3, [pc, #56]	; (4040 <prvCheckForValidListAndQueue+0x6c>)
    4008:	4798      	blx	r3
    400a:	1c02      	adds	r2, r0, #0
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <prvCheckForValidListAndQueue+0x54>)
    400e:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
    4010:	4b05      	ldr	r3, [pc, #20]	; (4028 <prvCheckForValidListAndQueue+0x54>)
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	2b00      	cmp	r3, #0
    4016:	d101      	bne.n	401c <prvCheckForValidListAndQueue+0x48>
    4018:	b672      	cpsid	i
    401a:	e7fe      	b.n	401a <prvCheckForValidListAndQueue+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    401c:	4b09      	ldr	r3, [pc, #36]	; (4044 <prvCheckForValidListAndQueue+0x70>)
    401e:	4798      	blx	r3
}
    4020:	46bd      	mov	sp, r7
    4022:	bd80      	pop	{r7, pc}
    4024:	000020d1 	.word	0x000020d1
    4028:	20003c80 	.word	0x20003c80
    402c:	20003c50 	.word	0x20003c50
    4030:	0000228d 	.word	0x0000228d
    4034:	20003c64 	.word	0x20003c64
    4038:	20003c78 	.word	0x20003c78
    403c:	20003c7c 	.word	0x20003c7c
    4040:	0000249d 	.word	0x0000249d
    4044:	000020f1 	.word	0x000020f1

00004048 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4048:	b580      	push	{r7, lr}
    404a:	b084      	sub	sp, #16
    404c:	af00      	add	r7, sp, #0
    404e:	1c02      	adds	r2, r0, #0
    4050:	1dfb      	adds	r3, r7, #7
    4052:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4054:	1c3b      	adds	r3, r7, #0
    4056:	330f      	adds	r3, #15
    4058:	1dfa      	adds	r2, r7, #7
    405a:	7812      	ldrb	r2, [r2, #0]
    405c:	09d2      	lsrs	r2, r2, #7
    405e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4060:	1c3b      	adds	r3, r7, #0
    4062:	330e      	adds	r3, #14
    4064:	1dfa      	adds	r2, r7, #7
    4066:	7812      	ldrb	r2, [r2, #0]
    4068:	0952      	lsrs	r2, r2, #5
    406a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    406c:	4b0d      	ldr	r3, [pc, #52]	; (40a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    406e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4070:	1c3b      	adds	r3, r7, #0
    4072:	330f      	adds	r3, #15
    4074:	781b      	ldrb	r3, [r3, #0]
    4076:	2b00      	cmp	r3, #0
    4078:	d10e      	bne.n	4098 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    407a:	1c3b      	adds	r3, r7, #0
    407c:	330f      	adds	r3, #15
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	009b      	lsls	r3, r3, #2
    4082:	2210      	movs	r2, #16
    4084:	19d2      	adds	r2, r2, r7
    4086:	18d3      	adds	r3, r2, r3
    4088:	3b08      	subs	r3, #8
    408a:	681a      	ldr	r2, [r3, #0]
    408c:	1c3b      	adds	r3, r7, #0
    408e:	330e      	adds	r3, #14
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	01db      	lsls	r3, r3, #7
    4094:	18d3      	adds	r3, r2, r3
    4096:	e000      	b.n	409a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4098:	2300      	movs	r3, #0
	}
}
    409a:	1c18      	adds	r0, r3, #0
    409c:	46bd      	mov	sp, r7
    409e:	b004      	add	sp, #16
    40a0:	bd80      	pop	{r7, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	41004400 	.word	0x41004400

000040a8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
    40ae:	1c02      	adds	r2, r0, #0
    40b0:	1dfb      	adds	r3, r7, #7
    40b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    40b4:	1dfb      	adds	r3, r7, #7
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	1c18      	adds	r0, r3, #0
    40ba:	4b03      	ldr	r3, [pc, #12]	; (40c8 <port_get_group_from_gpio_pin+0x20>)
    40bc:	4798      	blx	r3
    40be:	1c03      	adds	r3, r0, #0
}
    40c0:	1c18      	adds	r0, r3, #0
    40c2:	46bd      	mov	sp, r7
    40c4:	b002      	add	sp, #8
    40c6:	bd80      	pop	{r7, pc}
    40c8:	00004049 	.word	0x00004049

000040cc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b082      	sub	sp, #8
    40d0:	af00      	add	r7, sp, #0
    40d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	2200      	movs	r2, #0
    40d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	2201      	movs	r2, #1
    40de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    40e0:	687b      	ldr	r3, [r7, #4]
    40e2:	2200      	movs	r2, #0
    40e4:	709a      	strb	r2, [r3, #2]
}
    40e6:	46bd      	mov	sp, r7
    40e8:	b002      	add	sp, #8
    40ea:	bd80      	pop	{r7, pc}

000040ec <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    40ec:	b580      	push	{r7, lr}
    40ee:	b084      	sub	sp, #16
    40f0:	af00      	add	r7, sp, #0
    40f2:	1c0a      	adds	r2, r1, #0
    40f4:	1dfb      	adds	r3, r7, #7
    40f6:	1c01      	adds	r1, r0, #0
    40f8:	7019      	strb	r1, [r3, #0]
    40fa:	1dbb      	adds	r3, r7, #6
    40fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    40fe:	1dfb      	adds	r3, r7, #7
    4100:	781b      	ldrb	r3, [r3, #0]
    4102:	1c18      	adds	r0, r3, #0
    4104:	4b0d      	ldr	r3, [pc, #52]	; (413c <port_pin_set_output_level+0x50>)
    4106:	4798      	blx	r3
    4108:	1c03      	adds	r3, r0, #0
    410a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    410c:	1dfb      	adds	r3, r7, #7
    410e:	781a      	ldrb	r2, [r3, #0]
    4110:	231f      	movs	r3, #31
    4112:	4013      	ands	r3, r2
    4114:	2201      	movs	r2, #1
    4116:	1c11      	adds	r1, r2, #0
    4118:	4099      	lsls	r1, r3
    411a:	1c0b      	adds	r3, r1, #0
    411c:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    411e:	1dbb      	adds	r3, r7, #6
    4120:	781b      	ldrb	r3, [r3, #0]
    4122:	2b00      	cmp	r3, #0
    4124:	d003      	beq.n	412e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    4126:	68fb      	ldr	r3, [r7, #12]
    4128:	68ba      	ldr	r2, [r7, #8]
    412a:	619a      	str	r2, [r3, #24]
    412c:	e002      	b.n	4134 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	68ba      	ldr	r2, [r7, #8]
    4132:	615a      	str	r2, [r3, #20]
	}
}
    4134:	46bd      	mov	sp, r7
    4136:	b004      	add	sp, #16
    4138:	bd80      	pop	{r7, pc}
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	000040a9 	.word	0x000040a9

00004140 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4140:	b580      	push	{r7, lr}
    4142:	b082      	sub	sp, #8
    4144:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4146:	1d3b      	adds	r3, r7, #4
    4148:	1c18      	adds	r0, r3, #0
    414a:	4b0e      	ldr	r3, [pc, #56]	; (4184 <system_board_init+0x44>)
    414c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    414e:	1d3b      	adds	r3, r7, #4
    4150:	2201      	movs	r2, #1
    4152:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4154:	1d3b      	adds	r3, r7, #4
    4156:	203e      	movs	r0, #62	; 0x3e
    4158:	1c19      	adds	r1, r3, #0
    415a:	4b0b      	ldr	r3, [pc, #44]	; (4188 <system_board_init+0x48>)
    415c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    415e:	203e      	movs	r0, #62	; 0x3e
    4160:	2101      	movs	r1, #1
    4162:	4b0a      	ldr	r3, [pc, #40]	; (418c <system_board_init+0x4c>)
    4164:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4166:	1d3b      	adds	r3, r7, #4
    4168:	2200      	movs	r2, #0
    416a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    416c:	1d3b      	adds	r3, r7, #4
    416e:	2201      	movs	r2, #1
    4170:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4172:	1d3b      	adds	r3, r7, #4
    4174:	200f      	movs	r0, #15
    4176:	1c19      	adds	r1, r3, #0
    4178:	4b03      	ldr	r3, [pc, #12]	; (4188 <system_board_init+0x48>)
    417a:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    417c:	46bd      	mov	sp, r7
    417e:	b002      	add	sp, #8
    4180:	bd80      	pop	{r7, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	000040cd 	.word	0x000040cd
    4188:	000041b9 	.word	0x000041b9
    418c:	000040ed 	.word	0x000040ed

00004190 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4190:	b580      	push	{r7, lr}
    4192:	b082      	sub	sp, #8
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	2280      	movs	r2, #128	; 0x80
    419c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    419e:	687b      	ldr	r3, [r7, #4]
    41a0:	2200      	movs	r2, #0
    41a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	2201      	movs	r2, #1
    41a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	2200      	movs	r2, #0
    41ae:	70da      	strb	r2, [r3, #3]
}
    41b0:	46bd      	mov	sp, r7
    41b2:	b002      	add	sp, #8
    41b4:	bd80      	pop	{r7, pc}
    41b6:	46c0      	nop			; (mov r8, r8)

000041b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    41b8:	b580      	push	{r7, lr}
    41ba:	b084      	sub	sp, #16
    41bc:	af00      	add	r7, sp, #0
    41be:	1c02      	adds	r2, r0, #0
    41c0:	6039      	str	r1, [r7, #0]
    41c2:	1dfb      	adds	r3, r7, #7
    41c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    41c6:	1c3b      	adds	r3, r7, #0
    41c8:	330c      	adds	r3, #12
    41ca:	1c18      	adds	r0, r3, #0
    41cc:	4b0f      	ldr	r3, [pc, #60]	; (420c <port_pin_set_config+0x54>)
    41ce:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    41d0:	1c3b      	adds	r3, r7, #0
    41d2:	330c      	adds	r3, #12
    41d4:	2280      	movs	r2, #128	; 0x80
    41d6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41d8:	683b      	ldr	r3, [r7, #0]
    41da:	781a      	ldrb	r2, [r3, #0]
    41dc:	1c3b      	adds	r3, r7, #0
    41de:	330c      	adds	r3, #12
    41e0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	785a      	ldrb	r2, [r3, #1]
    41e6:	1c3b      	adds	r3, r7, #0
    41e8:	330c      	adds	r3, #12
    41ea:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41ec:	683b      	ldr	r3, [r7, #0]
    41ee:	789a      	ldrb	r2, [r3, #2]
    41f0:	1c3b      	adds	r3, r7, #0
    41f2:	330c      	adds	r3, #12
    41f4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41f6:	1dfb      	adds	r3, r7, #7
    41f8:	781a      	ldrb	r2, [r3, #0]
    41fa:	1c3b      	adds	r3, r7, #0
    41fc:	330c      	adds	r3, #12
    41fe:	1c10      	adds	r0, r2, #0
    4200:	1c19      	adds	r1, r3, #0
    4202:	4b03      	ldr	r3, [pc, #12]	; (4210 <port_pin_set_config+0x58>)
    4204:	4798      	blx	r3
}
    4206:	46bd      	mov	sp, r7
    4208:	b004      	add	sp, #16
    420a:	bd80      	pop	{r7, pc}
    420c:	00004191 	.word	0x00004191
    4210:	00004c25 	.word	0x00004c25

00004214 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    4214:	b580      	push	{r7, lr}
    4216:	b082      	sub	sp, #8
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	2201      	movs	r2, #1
    4220:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	2200      	movs	r2, #0
    4226:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4228:	687b      	ldr	r3, [r7, #4]
    422a:	2206      	movs	r2, #6
    422c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    422e:	687b      	ldr	r3, [r7, #4]
    4230:	2200      	movs	r2, #0
    4232:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4234:	687b      	ldr	r3, [r7, #4]
    4236:	2200      	movs	r2, #0
    4238:	725a      	strb	r2, [r3, #9]
}
    423a:	46bd      	mov	sp, r7
    423c:	b002      	add	sp, #8
    423e:	bd80      	pop	{r7, pc}

00004240 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    4240:	b580      	push	{r7, lr}
    4242:	b082      	sub	sp, #8
    4244:	af00      	add	r7, sp, #0
    4246:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	2203      	movs	r2, #3
    424c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	2200      	movs	r2, #0
    4252:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4254:	687b      	ldr	r3, [r7, #4]
    4256:	2201      	movs	r2, #1
    4258:	709a      	strb	r2, [r3, #2]
}
    425a:	46bd      	mov	sp, r7
    425c:	b002      	add	sp, #8
    425e:	bd80      	pop	{r7, pc}

00004260 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4260:	b580      	push	{r7, lr}
    4262:	b082      	sub	sp, #8
    4264:	af00      	add	r7, sp, #0
    4266:	1c02      	adds	r2, r0, #0
    4268:	1dfb      	adds	r3, r7, #7
    426a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <system_cpu_clock_set_divider+0x1c>)
    426e:	1dfa      	adds	r2, r7, #7
    4270:	7812      	ldrb	r2, [r2, #0]
    4272:	721a      	strb	r2, [r3, #8]
}
    4274:	46bd      	mov	sp, r7
    4276:	b002      	add	sp, #8
    4278:	bd80      	pop	{r7, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	40000400 	.word	0x40000400

00004280 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4280:	b580      	push	{r7, lr}
    4282:	b082      	sub	sp, #8
    4284:	af00      	add	r7, sp, #0
    4286:	1c0a      	adds	r2, r1, #0
    4288:	1dfb      	adds	r3, r7, #7
    428a:	1c01      	adds	r1, r0, #0
    428c:	7019      	strb	r1, [r3, #0]
    428e:	1dbb      	adds	r3, r7, #6
    4290:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4292:	1dfb      	adds	r3, r7, #7
    4294:	781b      	ldrb	r3, [r3, #0]
    4296:	2b01      	cmp	r3, #1
    4298:	d008      	beq.n	42ac <system_apb_clock_set_divider+0x2c>
    429a:	2b02      	cmp	r3, #2
    429c:	d00b      	beq.n	42b6 <system_apb_clock_set_divider+0x36>
    429e:	2b00      	cmp	r3, #0
    42a0:	d10e      	bne.n	42c0 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    42a2:	4b0b      	ldr	r3, [pc, #44]	; (42d0 <system_apb_clock_set_divider+0x50>)
    42a4:	1dba      	adds	r2, r7, #6
    42a6:	7812      	ldrb	r2, [r2, #0]
    42a8:	725a      	strb	r2, [r3, #9]
			break;
    42aa:	e00b      	b.n	42c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    42ac:	4b08      	ldr	r3, [pc, #32]	; (42d0 <system_apb_clock_set_divider+0x50>)
    42ae:	1dba      	adds	r2, r7, #6
    42b0:	7812      	ldrb	r2, [r2, #0]
    42b2:	729a      	strb	r2, [r3, #10]
			break;
    42b4:	e006      	b.n	42c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    42b6:	4b06      	ldr	r3, [pc, #24]	; (42d0 <system_apb_clock_set_divider+0x50>)
    42b8:	1dba      	adds	r2, r7, #6
    42ba:	7812      	ldrb	r2, [r2, #0]
    42bc:	72da      	strb	r2, [r3, #11]
			break;
    42be:	e001      	b.n	42c4 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    42c0:	2317      	movs	r3, #23
    42c2:	e000      	b.n	42c6 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    42c4:	2300      	movs	r3, #0
}
    42c6:	1c18      	adds	r0, r3, #0
    42c8:	46bd      	mov	sp, r7
    42ca:	b002      	add	sp, #8
    42cc:	bd80      	pop	{r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	40000400 	.word	0x40000400

000042d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b082      	sub	sp, #8
    42d8:	af00      	add	r7, sp, #0
    42da:	1c02      	adds	r2, r0, #0
    42dc:	1dfb      	adds	r3, r7, #7
    42de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    42e0:	4b08      	ldr	r3, [pc, #32]	; (4304 <system_flash_set_waitstates+0x30>)
    42e2:	1dfa      	adds	r2, r7, #7
    42e4:	7811      	ldrb	r1, [r2, #0]
    42e6:	220f      	movs	r2, #15
    42e8:	400a      	ands	r2, r1
    42ea:	b2d1      	uxtb	r1, r2
    42ec:	220f      	movs	r2, #15
    42ee:	400a      	ands	r2, r1
    42f0:	0052      	lsls	r2, r2, #1
    42f2:	6859      	ldr	r1, [r3, #4]
    42f4:	201e      	movs	r0, #30
    42f6:	4381      	bics	r1, r0
    42f8:	430a      	orrs	r2, r1
    42fa:	605a      	str	r2, [r3, #4]
}
    42fc:	46bd      	mov	sp, r7
    42fe:	b002      	add	sp, #8
    4300:	bd80      	pop	{r7, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	41004000 	.word	0x41004000

00004308 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4308:	b580      	push	{r7, lr}
    430a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    430c:	46c0      	nop			; (mov r8, r8)
    430e:	4b03      	ldr	r3, [pc, #12]	; (431c <_system_dfll_wait_for_sync+0x14>)
    4310:	68da      	ldr	r2, [r3, #12]
    4312:	2310      	movs	r3, #16
    4314:	4013      	ands	r3, r2
    4316:	d0fa      	beq.n	430e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4318:	46bd      	mov	sp, r7
    431a:	bd80      	pop	{r7, pc}
    431c:	40000800 	.word	0x40000800

00004320 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4320:	b580      	push	{r7, lr}
    4322:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4324:	4a0c      	ldr	r2, [pc, #48]	; (4358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4326:	4b0d      	ldr	r3, [pc, #52]	; (435c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	b29b      	uxth	r3, r3
    432c:	2180      	movs	r1, #128	; 0x80
    432e:	438b      	bics	r3, r1
    4330:	b29b      	uxth	r3, r3
    4332:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4334:	4b0a      	ldr	r3, [pc, #40]	; (4360 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4336:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4338:	4b07      	ldr	r3, [pc, #28]	; (4358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    433a:	4a08      	ldr	r2, [pc, #32]	; (435c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    433c:	6892      	ldr	r2, [r2, #8]
    433e:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4340:	4b05      	ldr	r3, [pc, #20]	; (4358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4342:	4a06      	ldr	r2, [pc, #24]	; (435c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4344:	6852      	ldr	r2, [r2, #4]
    4346:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4348:	4a03      	ldr	r2, [pc, #12]	; (4358 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    434a:	4b04      	ldr	r3, [pc, #16]	; (435c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	b29b      	uxth	r3, r3
    4350:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4352:	46bd      	mov	sp, r7
    4354:	bd80      	pop	{r7, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	40000800 	.word	0x40000800
    435c:	20003c88 	.word	0x20003c88
    4360:	00004309 	.word	0x00004309

00004364 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4364:	b580      	push	{r7, lr}
    4366:	b082      	sub	sp, #8
    4368:	af00      	add	r7, sp, #0
    436a:	1c02      	adds	r2, r0, #0
    436c:	1dfb      	adds	r3, r7, #7
    436e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4370:	1dfb      	adds	r3, r7, #7
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	2b08      	cmp	r3, #8
    4376:	d843      	bhi.n	4400 <system_clock_source_get_hz+0x9c>
    4378:	009a      	lsls	r2, r3, #2
    437a:	4b24      	ldr	r3, [pc, #144]	; (440c <system_clock_source_get_hz+0xa8>)
    437c:	18d3      	adds	r3, r2, r3
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4382:	4b23      	ldr	r3, [pc, #140]	; (4410 <system_clock_source_get_hz+0xac>)
    4384:	691b      	ldr	r3, [r3, #16]
    4386:	e03c      	b.n	4402 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4388:	4b22      	ldr	r3, [pc, #136]	; (4414 <system_clock_source_get_hz+0xb0>)
    438a:	6a1b      	ldr	r3, [r3, #32]
    438c:	0a1b      	lsrs	r3, r3, #8
    438e:	1c1a      	adds	r2, r3, #0
    4390:	2303      	movs	r3, #3
    4392:	4013      	ands	r3, r2
    4394:	b2db      	uxtb	r3, r3
    4396:	4a20      	ldr	r2, [pc, #128]	; (4418 <system_clock_source_get_hz+0xb4>)
    4398:	1c11      	adds	r1, r2, #0
    439a:	40d9      	lsrs	r1, r3
    439c:	1c0b      	adds	r3, r1, #0
    439e:	e030      	b.n	4402 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    43a0:	2380      	movs	r3, #128	; 0x80
    43a2:	021b      	lsls	r3, r3, #8
    43a4:	e02d      	b.n	4402 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    43a6:	2380      	movs	r3, #128	; 0x80
    43a8:	021b      	lsls	r3, r3, #8
    43aa:	e02a      	b.n	4402 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    43ac:	4b18      	ldr	r3, [pc, #96]	; (4410 <system_clock_source_get_hz+0xac>)
    43ae:	695b      	ldr	r3, [r3, #20]
    43b0:	e027      	b.n	4402 <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    43b2:	4b17      	ldr	r3, [pc, #92]	; (4410 <system_clock_source_get_hz+0xac>)
    43b4:	681a      	ldr	r2, [r3, #0]
    43b6:	2302      	movs	r3, #2
    43b8:	4013      	ands	r3, r2
    43ba:	d101      	bne.n	43c0 <system_clock_source_get_hz+0x5c>
			return 0;
    43bc:	2300      	movs	r3, #0
    43be:	e020      	b.n	4402 <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    43c0:	4b16      	ldr	r3, [pc, #88]	; (441c <system_clock_source_get_hz+0xb8>)
    43c2:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    43c4:	4b12      	ldr	r3, [pc, #72]	; (4410 <system_clock_source_get_hz+0xac>)
    43c6:	681a      	ldr	r2, [r3, #0]
    43c8:	2304      	movs	r3, #4
    43ca:	4013      	ands	r3, r2
    43cc:	d009      	beq.n	43e2 <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    43ce:	2000      	movs	r0, #0
    43d0:	4b13      	ldr	r3, [pc, #76]	; (4420 <system_clock_source_get_hz+0xbc>)
    43d2:	4798      	blx	r3
    43d4:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    43d6:	4b0e      	ldr	r3, [pc, #56]	; (4410 <system_clock_source_get_hz+0xac>)
    43d8:	689b      	ldr	r3, [r3, #8]
    43da:	041b      	lsls	r3, r3, #16
    43dc:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    43de:	4353      	muls	r3, r2
    43e0:	e00f      	b.n	4402 <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    43e2:	4b10      	ldr	r3, [pc, #64]	; (4424 <system_clock_source_get_hz+0xc0>)
    43e4:	e00d      	b.n	4402 <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    43e6:	4a0b      	ldr	r2, [pc, #44]	; (4414 <system_clock_source_get_hz+0xb0>)
    43e8:	2350      	movs	r3, #80	; 0x50
    43ea:	5cd3      	ldrb	r3, [r2, r3]
    43ec:	b2db      	uxtb	r3, r3
    43ee:	1c1a      	adds	r2, r3, #0
    43f0:	2304      	movs	r3, #4
    43f2:	4013      	ands	r3, r2
    43f4:	d101      	bne.n	43fa <system_clock_source_get_hz+0x96>
			return 0;
    43f6:	2300      	movs	r3, #0
    43f8:	e003      	b.n	4402 <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    43fa:	4b05      	ldr	r3, [pc, #20]	; (4410 <system_clock_source_get_hz+0xac>)
    43fc:	68db      	ldr	r3, [r3, #12]
    43fe:	e000      	b.n	4402 <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    4400:	2300      	movs	r3, #0
	}
}
    4402:	1c18      	adds	r0, r3, #0
    4404:	46bd      	mov	sp, r7
    4406:	b002      	add	sp, #8
    4408:	bd80      	pop	{r7, pc}
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	00007340 	.word	0x00007340
    4410:	20003c88 	.word	0x20003c88
    4414:	40000800 	.word	0x40000800
    4418:	007a1200 	.word	0x007a1200
    441c:	00004309 	.word	0x00004309
    4420:	00004a5d 	.word	0x00004a5d
    4424:	02dc6c00 	.word	0x02dc6c00

00004428 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4428:	b580      	push	{r7, lr}
    442a:	b084      	sub	sp, #16
    442c:	af00      	add	r7, sp, #0
    442e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4430:	4b16      	ldr	r3, [pc, #88]	; (448c <system_clock_source_osc8m_set_config+0x64>)
    4432:	6a1b      	ldr	r3, [r3, #32]
    4434:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4436:	687b      	ldr	r3, [r7, #4]
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	1c1a      	adds	r2, r3, #0
    443c:	2303      	movs	r3, #3
    443e:	4013      	ands	r3, r2
    4440:	b2d9      	uxtb	r1, r3
    4442:	1c3b      	adds	r3, r7, #0
    4444:	330d      	adds	r3, #13
    4446:	2203      	movs	r2, #3
    4448:	400a      	ands	r2, r1
    444a:	7819      	ldrb	r1, [r3, #0]
    444c:	2003      	movs	r0, #3
    444e:	4381      	bics	r1, r0
    4450:	430a      	orrs	r2, r1
    4452:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	789a      	ldrb	r2, [r3, #2]
    4458:	1c3b      	adds	r3, r7, #0
    445a:	330c      	adds	r3, #12
    445c:	01d2      	lsls	r2, r2, #7
    445e:	7818      	ldrb	r0, [r3, #0]
    4460:	217f      	movs	r1, #127	; 0x7f
    4462:	4001      	ands	r1, r0
    4464:	430a      	orrs	r2, r1
    4466:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	7859      	ldrb	r1, [r3, #1]
    446c:	1c3b      	adds	r3, r7, #0
    446e:	330c      	adds	r3, #12
    4470:	2201      	movs	r2, #1
    4472:	400a      	ands	r2, r1
    4474:	0192      	lsls	r2, r2, #6
    4476:	7819      	ldrb	r1, [r3, #0]
    4478:	2040      	movs	r0, #64	; 0x40
    447a:	4381      	bics	r1, r0
    447c:	430a      	orrs	r2, r1
    447e:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <system_clock_source_osc8m_set_config+0x64>)
    4482:	68fa      	ldr	r2, [r7, #12]
    4484:	621a      	str	r2, [r3, #32]
}
    4486:	46bd      	mov	sp, r7
    4488:	b004      	add	sp, #16
    448a:	bd80      	pop	{r7, pc}
    448c:	40000800 	.word	0x40000800

00004490 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4490:	b580      	push	{r7, lr}
    4492:	b082      	sub	sp, #8
    4494:	af00      	add	r7, sp, #0
    4496:	1c02      	adds	r2, r0, #0
    4498:	1dfb      	adds	r3, r7, #7
    449a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    449c:	1dfb      	adds	r3, r7, #7
    449e:	781b      	ldrb	r3, [r3, #0]
    44a0:	2b08      	cmp	r3, #8
    44a2:	d83b      	bhi.n	451c <system_clock_source_enable+0x8c>
    44a4:	009a      	lsls	r2, r3, #2
    44a6:	4b21      	ldr	r3, [pc, #132]	; (452c <system_clock_source_enable+0x9c>)
    44a8:	18d3      	adds	r3, r2, r3
    44aa:	681b      	ldr	r3, [r3, #0]
    44ac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    44ae:	4b20      	ldr	r3, [pc, #128]	; (4530 <system_clock_source_enable+0xa0>)
    44b0:	4a1f      	ldr	r2, [pc, #124]	; (4530 <system_clock_source_enable+0xa0>)
    44b2:	6a12      	ldr	r2, [r2, #32]
    44b4:	2102      	movs	r1, #2
    44b6:	430a      	orrs	r2, r1
    44b8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    44ba:	2300      	movs	r3, #0
    44bc:	e031      	b.n	4522 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    44be:	4b1c      	ldr	r3, [pc, #112]	; (4530 <system_clock_source_enable+0xa0>)
    44c0:	4a1b      	ldr	r2, [pc, #108]	; (4530 <system_clock_source_enable+0xa0>)
    44c2:	6992      	ldr	r2, [r2, #24]
    44c4:	2102      	movs	r1, #2
    44c6:	430a      	orrs	r2, r1
    44c8:	619a      	str	r2, [r3, #24]
		break;
    44ca:	e029      	b.n	4520 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    44cc:	4b18      	ldr	r3, [pc, #96]	; (4530 <system_clock_source_enable+0xa0>)
    44ce:	4a18      	ldr	r2, [pc, #96]	; (4530 <system_clock_source_enable+0xa0>)
    44d0:	8a12      	ldrh	r2, [r2, #16]
    44d2:	b292      	uxth	r2, r2
    44d4:	2102      	movs	r1, #2
    44d6:	430a      	orrs	r2, r1
    44d8:	b292      	uxth	r2, r2
    44da:	821a      	strh	r2, [r3, #16]
		break;
    44dc:	e020      	b.n	4520 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    44de:	4b14      	ldr	r3, [pc, #80]	; (4530 <system_clock_source_enable+0xa0>)
    44e0:	4a13      	ldr	r2, [pc, #76]	; (4530 <system_clock_source_enable+0xa0>)
    44e2:	8a92      	ldrh	r2, [r2, #20]
    44e4:	b292      	uxth	r2, r2
    44e6:	2102      	movs	r1, #2
    44e8:	430a      	orrs	r2, r1
    44ea:	b292      	uxth	r2, r2
    44ec:	829a      	strh	r2, [r3, #20]
		break;
    44ee:	e017      	b.n	4520 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    44f0:	4b10      	ldr	r3, [pc, #64]	; (4534 <system_clock_source_enable+0xa4>)
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	2202      	movs	r2, #2
    44f6:	431a      	orrs	r2, r3
    44f8:	4b0e      	ldr	r3, [pc, #56]	; (4534 <system_clock_source_enable+0xa4>)
    44fa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    44fc:	4b0e      	ldr	r3, [pc, #56]	; (4538 <system_clock_source_enable+0xa8>)
    44fe:	4798      	blx	r3
		break;
    4500:	e00e      	b.n	4520 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4502:	4a0b      	ldr	r2, [pc, #44]	; (4530 <system_clock_source_enable+0xa0>)
    4504:	490a      	ldr	r1, [pc, #40]	; (4530 <system_clock_source_enable+0xa0>)
    4506:	2344      	movs	r3, #68	; 0x44
    4508:	5ccb      	ldrb	r3, [r1, r3]
    450a:	b2db      	uxtb	r3, r3
    450c:	2102      	movs	r1, #2
    450e:	430b      	orrs	r3, r1
    4510:	b2d9      	uxtb	r1, r3
    4512:	2344      	movs	r3, #68	; 0x44
    4514:	54d1      	strb	r1, [r2, r3]
		break;
    4516:	e003      	b.n	4520 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4518:	2300      	movs	r3, #0
    451a:	e002      	b.n	4522 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    451c:	2317      	movs	r3, #23
    451e:	e000      	b.n	4522 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4520:	2300      	movs	r3, #0
}
    4522:	1c18      	adds	r0, r3, #0
    4524:	46bd      	mov	sp, r7
    4526:	b002      	add	sp, #8
    4528:	bd80      	pop	{r7, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	00007364 	.word	0x00007364
    4530:	40000800 	.word	0x40000800
    4534:	20003c88 	.word	0x20003c88
    4538:	00004321 	.word	0x00004321

0000453c <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    453c:	b580      	push	{r7, lr}
    453e:	b09c      	sub	sp, #112	; 0x70
    4540:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4542:	4b24      	ldr	r3, [pc, #144]	; (45d4 <system_clock_init+0x98>)
    4544:	22c2      	movs	r2, #194	; 0xc2
    4546:	00d2      	lsls	r2, r2, #3
    4548:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    454a:	2000      	movs	r0, #0
    454c:	4b22      	ldr	r3, [pc, #136]	; (45d8 <system_clock_init+0x9c>)
    454e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4550:	1c3b      	adds	r3, r7, #0
    4552:	336c      	adds	r3, #108	; 0x6c
    4554:	1c18      	adds	r0, r3, #0
    4556:	4b21      	ldr	r3, [pc, #132]	; (45dc <system_clock_init+0xa0>)
    4558:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    455a:	1c3b      	adds	r3, r7, #0
    455c:	336c      	adds	r3, #108	; 0x6c
    455e:	2200      	movs	r2, #0
    4560:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4562:	1c3b      	adds	r3, r7, #0
    4564:	336c      	adds	r3, #108	; 0x6c
    4566:	2201      	movs	r2, #1
    4568:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    456a:	1c3b      	adds	r3, r7, #0
    456c:	336c      	adds	r3, #108	; 0x6c
    456e:	2200      	movs	r2, #0
    4570:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4572:	1c3b      	adds	r3, r7, #0
    4574:	336c      	adds	r3, #108	; 0x6c
    4576:	1c18      	adds	r0, r3, #0
    4578:	4b19      	ldr	r3, [pc, #100]	; (45e0 <system_clock_init+0xa4>)
    457a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    457c:	2006      	movs	r0, #6
    457e:	4b19      	ldr	r3, [pc, #100]	; (45e4 <system_clock_init+0xa8>)
    4580:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4582:	4b19      	ldr	r3, [pc, #100]	; (45e8 <system_clock_init+0xac>)
    4584:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4586:	2000      	movs	r0, #0
    4588:	4b18      	ldr	r3, [pc, #96]	; (45ec <system_clock_init+0xb0>)
    458a:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    458c:	2000      	movs	r0, #0
    458e:	2100      	movs	r1, #0
    4590:	4b17      	ldr	r3, [pc, #92]	; (45f0 <system_clock_init+0xb4>)
    4592:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4594:	2001      	movs	r0, #1
    4596:	2100      	movs	r1, #0
    4598:	4b15      	ldr	r3, [pc, #84]	; (45f0 <system_clock_init+0xb4>)
    459a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    459c:	1c3b      	adds	r3, r7, #0
    459e:	1c18      	adds	r0, r3, #0
    45a0:	4b14      	ldr	r3, [pc, #80]	; (45f4 <system_clock_init+0xb8>)
    45a2:	4798      	blx	r3
    45a4:	1c3b      	adds	r3, r7, #0
    45a6:	2206      	movs	r2, #6
    45a8:	701a      	strb	r2, [r3, #0]
    45aa:	1c3b      	adds	r3, r7, #0
    45ac:	2201      	movs	r2, #1
    45ae:	605a      	str	r2, [r3, #4]
    45b0:	1c3b      	adds	r3, r7, #0
    45b2:	2200      	movs	r2, #0
    45b4:	721a      	strb	r2, [r3, #8]
    45b6:	1c3b      	adds	r3, r7, #0
    45b8:	2200      	movs	r2, #0
    45ba:	725a      	strb	r2, [r3, #9]
    45bc:	1c3b      	adds	r3, r7, #0
    45be:	2000      	movs	r0, #0
    45c0:	1c19      	adds	r1, r3, #0
    45c2:	4b0d      	ldr	r3, [pc, #52]	; (45f8 <system_clock_init+0xbc>)
    45c4:	4798      	blx	r3
    45c6:	2000      	movs	r0, #0
    45c8:	4b0c      	ldr	r3, [pc, #48]	; (45fc <system_clock_init+0xc0>)
    45ca:	4798      	blx	r3
#endif
}
    45cc:	46bd      	mov	sp, r7
    45ce:	b01c      	add	sp, #112	; 0x70
    45d0:	bd80      	pop	{r7, pc}
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	40000800 	.word	0x40000800
    45d8:	000042d5 	.word	0x000042d5
    45dc:	00004241 	.word	0x00004241
    45e0:	00004429 	.word	0x00004429
    45e4:	00004491 	.word	0x00004491
    45e8:	000046a1 	.word	0x000046a1
    45ec:	00004261 	.word	0x00004261
    45f0:	00004281 	.word	0x00004281
    45f4:	00004215 	.word	0x00004215
    45f8:	000046d1 	.word	0x000046d1
    45fc:	000047f9 	.word	0x000047f9

00004600 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    4600:	b580      	push	{r7, lr}
    4602:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    4604:	4b06      	ldr	r3, [pc, #24]	; (4620 <system_gclk_is_syncing+0x20>)
    4606:	785b      	ldrb	r3, [r3, #1]
    4608:	b2db      	uxtb	r3, r3
    460a:	b2db      	uxtb	r3, r3
    460c:	b25b      	sxtb	r3, r3
    460e:	2b00      	cmp	r3, #0
    4610:	da01      	bge.n	4616 <system_gclk_is_syncing+0x16>
		return true;
    4612:	2301      	movs	r3, #1
    4614:	e000      	b.n	4618 <system_gclk_is_syncing+0x18>
	}

	return false;
    4616:	2300      	movs	r3, #0
}
    4618:	1c18      	adds	r0, r3, #0
    461a:	46bd      	mov	sp, r7
    461c:	bd80      	pop	{r7, pc}
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	40000c00 	.word	0x40000c00

00004624 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	1c02      	adds	r2, r0, #0
    462c:	6039      	str	r1, [r7, #0]
    462e:	1dfb      	adds	r3, r7, #7
    4630:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4632:	1dfb      	adds	r3, r7, #7
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	2b01      	cmp	r3, #1
    4638:	d00a      	beq.n	4650 <system_apb_clock_set_mask+0x2c>
    463a:	2b02      	cmp	r3, #2
    463c:	d00f      	beq.n	465e <system_apb_clock_set_mask+0x3a>
    463e:	2b00      	cmp	r3, #0
    4640:	d114      	bne.n	466c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4642:	4b0e      	ldr	r3, [pc, #56]	; (467c <system_apb_clock_set_mask+0x58>)
    4644:	4a0d      	ldr	r2, [pc, #52]	; (467c <system_apb_clock_set_mask+0x58>)
    4646:	6991      	ldr	r1, [r2, #24]
    4648:	683a      	ldr	r2, [r7, #0]
    464a:	430a      	orrs	r2, r1
    464c:	619a      	str	r2, [r3, #24]
			break;
    464e:	e00f      	b.n	4670 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4650:	4b0a      	ldr	r3, [pc, #40]	; (467c <system_apb_clock_set_mask+0x58>)
    4652:	4a0a      	ldr	r2, [pc, #40]	; (467c <system_apb_clock_set_mask+0x58>)
    4654:	69d1      	ldr	r1, [r2, #28]
    4656:	683a      	ldr	r2, [r7, #0]
    4658:	430a      	orrs	r2, r1
    465a:	61da      	str	r2, [r3, #28]
			break;
    465c:	e008      	b.n	4670 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    465e:	4b07      	ldr	r3, [pc, #28]	; (467c <system_apb_clock_set_mask+0x58>)
    4660:	4a06      	ldr	r2, [pc, #24]	; (467c <system_apb_clock_set_mask+0x58>)
    4662:	6a11      	ldr	r1, [r2, #32]
    4664:	683a      	ldr	r2, [r7, #0]
    4666:	430a      	orrs	r2, r1
    4668:	621a      	str	r2, [r3, #32]
			break;
    466a:	e001      	b.n	4670 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    466c:	2317      	movs	r3, #23
    466e:	e000      	b.n	4672 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4670:	2300      	movs	r3, #0
}
    4672:	1c18      	adds	r0, r3, #0
    4674:	46bd      	mov	sp, r7
    4676:	b002      	add	sp, #8
    4678:	bd80      	pop	{r7, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	40000400 	.word	0x40000400

00004680 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4680:	b580      	push	{r7, lr}
    4682:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    4684:	4b01      	ldr	r3, [pc, #4]	; (468c <system_interrupt_enter_critical_section+0xc>)
    4686:	4798      	blx	r3
}
    4688:	46bd      	mov	sp, r7
    468a:	bd80      	pop	{r7, pc}
    468c:	00000519 	.word	0x00000519

00004690 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4690:	b580      	push	{r7, lr}
    4692:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    4694:	4b01      	ldr	r3, [pc, #4]	; (469c <system_interrupt_leave_critical_section+0xc>)
    4696:	4798      	blx	r3
}
    4698:	46bd      	mov	sp, r7
    469a:	bd80      	pop	{r7, pc}
    469c:	00000569 	.word	0x00000569

000046a0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    46a0:	b580      	push	{r7, lr}
    46a2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    46a4:	2000      	movs	r0, #0
    46a6:	2108      	movs	r1, #8
    46a8:	4b07      	ldr	r3, [pc, #28]	; (46c8 <system_gclk_init+0x28>)
    46aa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    46ac:	4b07      	ldr	r3, [pc, #28]	; (46cc <system_gclk_init+0x2c>)
    46ae:	2201      	movs	r2, #1
    46b0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	4b05      	ldr	r3, [pc, #20]	; (46cc <system_gclk_init+0x2c>)
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	b2db      	uxtb	r3, r3
    46ba:	1c1a      	adds	r2, r3, #0
    46bc:	2301      	movs	r3, #1
    46be:	4013      	ands	r3, r2
    46c0:	d1f8      	bne.n	46b4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    46c2:	46bd      	mov	sp, r7
    46c4:	bd80      	pop	{r7, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00004625 	.word	0x00004625
    46cc:	40000c00 	.word	0x40000c00

000046d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    46d0:	b580      	push	{r7, lr}
    46d2:	b086      	sub	sp, #24
    46d4:	af00      	add	r7, sp, #0
    46d6:	1c02      	adds	r2, r0, #0
    46d8:	6039      	str	r1, [r7, #0]
    46da:	1dfb      	adds	r3, r7, #7
    46dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    46de:	1dfb      	adds	r3, r7, #7
    46e0:	781b      	ldrb	r3, [r3, #0]
    46e2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    46e4:	1dfb      	adds	r3, r7, #7
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    46ea:	683b      	ldr	r3, [r7, #0]
    46ec:	781b      	ldrb	r3, [r3, #0]
    46ee:	021b      	lsls	r3, r3, #8
    46f0:	697a      	ldr	r2, [r7, #20]
    46f2:	4313      	orrs	r3, r2
    46f4:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    46f6:	683b      	ldr	r3, [r7, #0]
    46f8:	785b      	ldrb	r3, [r3, #1]
    46fa:	2b00      	cmp	r3, #0
    46fc:	d004      	beq.n	4708 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    46fe:	697b      	ldr	r3, [r7, #20]
    4700:	2280      	movs	r2, #128	; 0x80
    4702:	02d2      	lsls	r2, r2, #11
    4704:	4313      	orrs	r3, r2
    4706:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4708:	683b      	ldr	r3, [r7, #0]
    470a:	7a5b      	ldrb	r3, [r3, #9]
    470c:	2b00      	cmp	r3, #0
    470e:	d004      	beq.n	471a <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4710:	697b      	ldr	r3, [r7, #20]
    4712:	2280      	movs	r2, #128	; 0x80
    4714:	0312      	lsls	r2, r2, #12
    4716:	4313      	orrs	r3, r2
    4718:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    471a:	683b      	ldr	r3, [r7, #0]
    471c:	685b      	ldr	r3, [r3, #4]
    471e:	2b01      	cmp	r3, #1
    4720:	d92c      	bls.n	477c <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4722:	683b      	ldr	r3, [r7, #0]
    4724:	685a      	ldr	r2, [r3, #4]
    4726:	683b      	ldr	r3, [r7, #0]
    4728:	685b      	ldr	r3, [r3, #4]
    472a:	3b01      	subs	r3, #1
    472c:	4013      	ands	r3, r2
    472e:	d11a      	bne.n	4766 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    4730:	2300      	movs	r3, #0
    4732:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4734:	2302      	movs	r3, #2
    4736:	60bb      	str	r3, [r7, #8]
    4738:	e005      	b.n	4746 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	3301      	adds	r3, #1
    473e:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4740:	68bb      	ldr	r3, [r7, #8]
    4742:	005b      	lsls	r3, r3, #1
    4744:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4746:	683b      	ldr	r3, [r7, #0]
    4748:	685a      	ldr	r2, [r3, #4]
    474a:	68bb      	ldr	r3, [r7, #8]
    474c:	429a      	cmp	r2, r3
    474e:	d8f4      	bhi.n	473a <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4750:	68fb      	ldr	r3, [r7, #12]
    4752:	021b      	lsls	r3, r3, #8
    4754:	693a      	ldr	r2, [r7, #16]
    4756:	4313      	orrs	r3, r2
    4758:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    475a:	697b      	ldr	r3, [r7, #20]
    475c:	2280      	movs	r2, #128	; 0x80
    475e:	0352      	lsls	r2, r2, #13
    4760:	4313      	orrs	r3, r2
    4762:	617b      	str	r3, [r7, #20]
    4764:	e00a      	b.n	477c <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4766:	683b      	ldr	r3, [r7, #0]
    4768:	685b      	ldr	r3, [r3, #4]
    476a:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    476c:	693a      	ldr	r2, [r7, #16]
    476e:	4313      	orrs	r3, r2
    4770:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4772:	697b      	ldr	r3, [r7, #20]
    4774:	2280      	movs	r2, #128	; 0x80
    4776:	0292      	lsls	r2, r2, #10
    4778:	4313      	orrs	r3, r2
    477a:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    477c:	683b      	ldr	r3, [r7, #0]
    477e:	7a1b      	ldrb	r3, [r3, #8]
    4780:	2b00      	cmp	r3, #0
    4782:	d005      	beq.n	4790 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4784:	697b      	ldr	r3, [r7, #20]
    4786:	2280      	movs	r2, #128	; 0x80
    4788:	0392      	lsls	r2, r2, #14
    478a:	4313      	orrs	r3, r2
    478c:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    478e:	e7ff      	b.n	4790 <system_gclk_gen_set_config+0xc0>
    4790:	46c0      	nop			; (mov r8, r8)
    4792:	4b14      	ldr	r3, [pc, #80]	; (47e4 <system_gclk_gen_set_config+0x114>)
    4794:	4798      	blx	r3
    4796:	1c03      	adds	r3, r0, #0
    4798:	2b00      	cmp	r3, #0
    479a:	d1fa      	bne.n	4792 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    479c:	4b12      	ldr	r3, [pc, #72]	; (47e8 <system_gclk_gen_set_config+0x118>)
    479e:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    47a0:	4b12      	ldr	r3, [pc, #72]	; (47ec <system_gclk_gen_set_config+0x11c>)
    47a2:	1dfa      	adds	r2, r7, #7
    47a4:	7812      	ldrb	r2, [r2, #0]
    47a6:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    47a8:	46c0      	nop			; (mov r8, r8)
    47aa:	4b0e      	ldr	r3, [pc, #56]	; (47e4 <system_gclk_gen_set_config+0x114>)
    47ac:	4798      	blx	r3
    47ae:	1c03      	adds	r3, r0, #0
    47b0:	2b00      	cmp	r3, #0
    47b2:	d1fa      	bne.n	47aa <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    47b4:	4b0e      	ldr	r3, [pc, #56]	; (47f0 <system_gclk_gen_set_config+0x120>)
    47b6:	693a      	ldr	r2, [r7, #16]
    47b8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	4b09      	ldr	r3, [pc, #36]	; (47e4 <system_gclk_gen_set_config+0x114>)
    47be:	4798      	blx	r3
    47c0:	1c03      	adds	r3, r0, #0
    47c2:	2b00      	cmp	r3, #0
    47c4:	d1fa      	bne.n	47bc <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    47c6:	4b0a      	ldr	r3, [pc, #40]	; (47f0 <system_gclk_gen_set_config+0x120>)
    47c8:	4a09      	ldr	r2, [pc, #36]	; (47f0 <system_gclk_gen_set_config+0x120>)
    47ca:	6851      	ldr	r1, [r2, #4]
    47cc:	2280      	movs	r2, #128	; 0x80
    47ce:	0252      	lsls	r2, r2, #9
    47d0:	4011      	ands	r1, r2
    47d2:	697a      	ldr	r2, [r7, #20]
    47d4:	430a      	orrs	r2, r1
    47d6:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    47d8:	4b06      	ldr	r3, [pc, #24]	; (47f4 <system_gclk_gen_set_config+0x124>)
    47da:	4798      	blx	r3
}
    47dc:	46bd      	mov	sp, r7
    47de:	b006      	add	sp, #24
    47e0:	bd80      	pop	{r7, pc}
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	00004601 	.word	0x00004601
    47e8:	00004681 	.word	0x00004681
    47ec:	40000c08 	.word	0x40000c08
    47f0:	40000c00 	.word	0x40000c00
    47f4:	00004691 	.word	0x00004691

000047f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    47f8:	b580      	push	{r7, lr}
    47fa:	b082      	sub	sp, #8
    47fc:	af00      	add	r7, sp, #0
    47fe:	1c02      	adds	r2, r0, #0
    4800:	1dfb      	adds	r3, r7, #7
    4802:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4804:	46c0      	nop			; (mov r8, r8)
    4806:	4b0e      	ldr	r3, [pc, #56]	; (4840 <system_gclk_gen_enable+0x48>)
    4808:	4798      	blx	r3
    480a:	1c03      	adds	r3, r0, #0
    480c:	2b00      	cmp	r3, #0
    480e:	d1fa      	bne.n	4806 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4810:	4b0c      	ldr	r3, [pc, #48]	; (4844 <system_gclk_gen_enable+0x4c>)
    4812:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4814:	4b0c      	ldr	r3, [pc, #48]	; (4848 <system_gclk_gen_enable+0x50>)
    4816:	1dfa      	adds	r2, r7, #7
    4818:	7812      	ldrb	r2, [r2, #0]
    481a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    481c:	46c0      	nop			; (mov r8, r8)
    481e:	4b08      	ldr	r3, [pc, #32]	; (4840 <system_gclk_gen_enable+0x48>)
    4820:	4798      	blx	r3
    4822:	1c03      	adds	r3, r0, #0
    4824:	2b00      	cmp	r3, #0
    4826:	d1fa      	bne.n	481e <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4828:	4b08      	ldr	r3, [pc, #32]	; (484c <system_gclk_gen_enable+0x54>)
    482a:	4a08      	ldr	r2, [pc, #32]	; (484c <system_gclk_gen_enable+0x54>)
    482c:	6852      	ldr	r2, [r2, #4]
    482e:	2180      	movs	r1, #128	; 0x80
    4830:	0249      	lsls	r1, r1, #9
    4832:	430a      	orrs	r2, r1
    4834:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4836:	4b06      	ldr	r3, [pc, #24]	; (4850 <system_gclk_gen_enable+0x58>)
    4838:	4798      	blx	r3
}
    483a:	46bd      	mov	sp, r7
    483c:	b002      	add	sp, #8
    483e:	bd80      	pop	{r7, pc}
    4840:	00004601 	.word	0x00004601
    4844:	00004681 	.word	0x00004681
    4848:	40000c04 	.word	0x40000c04
    484c:	40000c00 	.word	0x40000c00
    4850:	00004691 	.word	0x00004691

00004854 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4854:	b580      	push	{r7, lr}
    4856:	b086      	sub	sp, #24
    4858:	af00      	add	r7, sp, #0
    485a:	1c02      	adds	r2, r0, #0
    485c:	1dfb      	adds	r3, r7, #7
    485e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4860:	46c0      	nop			; (mov r8, r8)
    4862:	4b2f      	ldr	r3, [pc, #188]	; (4920 <system_gclk_gen_get_hz+0xcc>)
    4864:	4798      	blx	r3
    4866:	1c03      	adds	r3, r0, #0
    4868:	2b00      	cmp	r3, #0
    486a:	d1fa      	bne.n	4862 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    486c:	4b2d      	ldr	r3, [pc, #180]	; (4924 <system_gclk_gen_get_hz+0xd0>)
    486e:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4870:	4b2d      	ldr	r3, [pc, #180]	; (4928 <system_gclk_gen_get_hz+0xd4>)
    4872:	1dfa      	adds	r2, r7, #7
    4874:	7812      	ldrb	r2, [r2, #0]
    4876:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    4878:	46c0      	nop			; (mov r8, r8)
    487a:	4b29      	ldr	r3, [pc, #164]	; (4920 <system_gclk_gen_get_hz+0xcc>)
    487c:	4798      	blx	r3
    487e:	1c03      	adds	r3, r0, #0
    4880:	2b00      	cmp	r3, #0
    4882:	d1fa      	bne.n	487a <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4884:	4b29      	ldr	r3, [pc, #164]	; (492c <system_gclk_gen_get_hz+0xd8>)
    4886:	685b      	ldr	r3, [r3, #4]
    4888:	0a1b      	lsrs	r3, r3, #8
    488a:	1c1a      	adds	r2, r3, #0
    488c:	231f      	movs	r3, #31
    488e:	4013      	ands	r3, r2
    4890:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4892:	1c18      	adds	r0, r3, #0
    4894:	4b26      	ldr	r3, [pc, #152]	; (4930 <system_gclk_gen_get_hz+0xdc>)
    4896:	4798      	blx	r3
    4898:	1c03      	adds	r3, r0, #0
    489a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    489c:	4b22      	ldr	r3, [pc, #136]	; (4928 <system_gclk_gen_get_hz+0xd4>)
    489e:	1dfa      	adds	r2, r7, #7
    48a0:	7812      	ldrb	r2, [r2, #0]
    48a2:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    48a4:	4b21      	ldr	r3, [pc, #132]	; (492c <system_gclk_gen_get_hz+0xd8>)
    48a6:	685b      	ldr	r3, [r3, #4]
    48a8:	0d1b      	lsrs	r3, r3, #20
    48aa:	1c1a      	adds	r2, r3, #0
    48ac:	2301      	movs	r3, #1
    48ae:	4013      	ands	r3, r2
    48b0:	b2da      	uxtb	r2, r3
    48b2:	1c3b      	adds	r3, r7, #0
    48b4:	3313      	adds	r3, #19
    48b6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    48b8:	4b1e      	ldr	r3, [pc, #120]	; (4934 <system_gclk_gen_get_hz+0xe0>)
    48ba:	1dfa      	adds	r2, r7, #7
    48bc:	7812      	ldrb	r2, [r2, #0]
    48be:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    48c0:	46c0      	nop			; (mov r8, r8)
    48c2:	4b17      	ldr	r3, [pc, #92]	; (4920 <system_gclk_gen_get_hz+0xcc>)
    48c4:	4798      	blx	r3
    48c6:	1c03      	adds	r3, r0, #0
    48c8:	2b00      	cmp	r3, #0
    48ca:	d1fa      	bne.n	48c2 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    48cc:	4b17      	ldr	r3, [pc, #92]	; (492c <system_gclk_gen_get_hz+0xd8>)
    48ce:	689b      	ldr	r3, [r3, #8]
    48d0:	0a1b      	lsrs	r3, r3, #8
    48d2:	2200      	movs	r2, #0
    48d4:	4393      	bics	r3, r2
    48d6:	b29b      	uxth	r3, r3
    48d8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    48da:	4b17      	ldr	r3, [pc, #92]	; (4938 <system_gclk_gen_get_hz+0xe4>)
    48dc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    48de:	1c3b      	adds	r3, r7, #0
    48e0:	3313      	adds	r3, #19
    48e2:	781b      	ldrb	r3, [r3, #0]
    48e4:	2b00      	cmp	r3, #0
    48e6:	d109      	bne.n	48fc <system_gclk_gen_get_hz+0xa8>
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	2b01      	cmp	r3, #1
    48ec:	d906      	bls.n	48fc <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    48ee:	4b13      	ldr	r3, [pc, #76]	; (493c <system_gclk_gen_get_hz+0xe8>)
    48f0:	6978      	ldr	r0, [r7, #20]
    48f2:	68f9      	ldr	r1, [r7, #12]
    48f4:	4798      	blx	r3
    48f6:	1c03      	adds	r3, r0, #0
    48f8:	617b      	str	r3, [r7, #20]
    48fa:	e00b      	b.n	4914 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    48fc:	1c3b      	adds	r3, r7, #0
    48fe:	3313      	adds	r3, #19
    4900:	781b      	ldrb	r3, [r3, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	d006      	beq.n	4914 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	3301      	adds	r3, #1
    490a:	697a      	ldr	r2, [r7, #20]
    490c:	1c11      	adds	r1, r2, #0
    490e:	40d9      	lsrs	r1, r3
    4910:	1c0b      	adds	r3, r1, #0
    4912:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    4914:	697b      	ldr	r3, [r7, #20]
}
    4916:	1c18      	adds	r0, r3, #0
    4918:	46bd      	mov	sp, r7
    491a:	b006      	add	sp, #24
    491c:	bd80      	pop	{r7, pc}
    491e:	46c0      	nop			; (mov r8, r8)
    4920:	00004601 	.word	0x00004601
    4924:	00004681 	.word	0x00004681
    4928:	40000c04 	.word	0x40000c04
    492c:	40000c00 	.word	0x40000c00
    4930:	00004365 	.word	0x00004365
    4934:	40000c08 	.word	0x40000c08
    4938:	00004691 	.word	0x00004691
    493c:	00005331 	.word	0x00005331

00004940 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4940:	b580      	push	{r7, lr}
    4942:	b084      	sub	sp, #16
    4944:	af00      	add	r7, sp, #0
    4946:	1c02      	adds	r2, r0, #0
    4948:	6039      	str	r1, [r7, #0]
    494a:	1dfb      	adds	r3, r7, #7
    494c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    494e:	1dfb      	adds	r3, r7, #7
    4950:	781b      	ldrb	r3, [r3, #0]
    4952:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4954:	683b      	ldr	r3, [r7, #0]
    4956:	781b      	ldrb	r3, [r3, #0]
    4958:	021b      	lsls	r3, r3, #8
    495a:	68fa      	ldr	r2, [r7, #12]
    495c:	4313      	orrs	r3, r2
    495e:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4960:	1dfb      	adds	r3, r7, #7
    4962:	781b      	ldrb	r3, [r3, #0]
    4964:	1c18      	adds	r0, r3, #0
    4966:	4b04      	ldr	r3, [pc, #16]	; (4978 <system_gclk_chan_set_config+0x38>)
    4968:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    496a:	4b04      	ldr	r3, [pc, #16]	; (497c <system_gclk_chan_set_config+0x3c>)
    496c:	68fa      	ldr	r2, [r7, #12]
    496e:	b292      	uxth	r2, r2
    4970:	805a      	strh	r2, [r3, #2]
}
    4972:	46bd      	mov	sp, r7
    4974:	b004      	add	sp, #16
    4976:	bd80      	pop	{r7, pc}
    4978:	000049c5 	.word	0x000049c5
    497c:	40000c00 	.word	0x40000c00

00004980 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4980:	b580      	push	{r7, lr}
    4982:	b082      	sub	sp, #8
    4984:	af00      	add	r7, sp, #0
    4986:	1c02      	adds	r2, r0, #0
    4988:	1dfb      	adds	r3, r7, #7
    498a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    498c:	4b09      	ldr	r3, [pc, #36]	; (49b4 <system_gclk_chan_enable+0x34>)
    498e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4990:	4b09      	ldr	r3, [pc, #36]	; (49b8 <system_gclk_chan_enable+0x38>)
    4992:	1dfa      	adds	r2, r7, #7
    4994:	7812      	ldrb	r2, [r2, #0]
    4996:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4998:	4b08      	ldr	r3, [pc, #32]	; (49bc <system_gclk_chan_enable+0x3c>)
    499a:	4a08      	ldr	r2, [pc, #32]	; (49bc <system_gclk_chan_enable+0x3c>)
    499c:	8852      	ldrh	r2, [r2, #2]
    499e:	b292      	uxth	r2, r2
    49a0:	2180      	movs	r1, #128	; 0x80
    49a2:	01c9      	lsls	r1, r1, #7
    49a4:	430a      	orrs	r2, r1
    49a6:	b292      	uxth	r2, r2
    49a8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    49aa:	4b05      	ldr	r3, [pc, #20]	; (49c0 <system_gclk_chan_enable+0x40>)
    49ac:	4798      	blx	r3
}
    49ae:	46bd      	mov	sp, r7
    49b0:	b002      	add	sp, #8
    49b2:	bd80      	pop	{r7, pc}
    49b4:	00004681 	.word	0x00004681
    49b8:	40000c02 	.word	0x40000c02
    49bc:	40000c00 	.word	0x40000c00
    49c0:	00004691 	.word	0x00004691

000049c4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    49c4:	b580      	push	{r7, lr}
    49c6:	b084      	sub	sp, #16
    49c8:	af00      	add	r7, sp, #0
    49ca:	1c02      	adds	r2, r0, #0
    49cc:	1dfb      	adds	r3, r7, #7
    49ce:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    49d0:	4b1c      	ldr	r3, [pc, #112]	; (4a44 <system_gclk_chan_disable+0x80>)
    49d2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    49d4:	4b1c      	ldr	r3, [pc, #112]	; (4a48 <system_gclk_chan_disable+0x84>)
    49d6:	1dfa      	adds	r2, r7, #7
    49d8:	7812      	ldrb	r2, [r2, #0]
    49da:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    49dc:	4b1b      	ldr	r3, [pc, #108]	; (4a4c <system_gclk_chan_disable+0x88>)
    49de:	885b      	ldrh	r3, [r3, #2]
    49e0:	b29b      	uxth	r3, r3
    49e2:	0a1b      	lsrs	r3, r3, #8
    49e4:	1c1a      	adds	r2, r3, #0
    49e6:	230f      	movs	r3, #15
    49e8:	4013      	ands	r3, r2
    49ea:	b2db      	uxtb	r3, r3
    49ec:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    49ee:	4b17      	ldr	r3, [pc, #92]	; (4a4c <system_gclk_chan_disable+0x88>)
    49f0:	8859      	ldrh	r1, [r3, #2]
    49f2:	4a17      	ldr	r2, [pc, #92]	; (4a50 <system_gclk_chan_disable+0x8c>)
    49f4:	400a      	ands	r2, r1
    49f6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    49f8:	4b14      	ldr	r3, [pc, #80]	; (4a4c <system_gclk_chan_disable+0x88>)
    49fa:	4a14      	ldr	r2, [pc, #80]	; (4a4c <system_gclk_chan_disable+0x88>)
    49fc:	8852      	ldrh	r2, [r2, #2]
    49fe:	b291      	uxth	r1, r2
    4a00:	4a14      	ldr	r2, [pc, #80]	; (4a54 <system_gclk_chan_disable+0x90>)
    4a02:	400a      	ands	r2, r1
    4a04:	b292      	uxth	r2, r2
    4a06:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4a08:	46c0      	nop			; (mov r8, r8)
    4a0a:	4b10      	ldr	r3, [pc, #64]	; (4a4c <system_gclk_chan_disable+0x88>)
    4a0c:	885b      	ldrh	r3, [r3, #2]
    4a0e:	b29b      	uxth	r3, r3
    4a10:	1c1a      	adds	r2, r3, #0
    4a12:	2380      	movs	r3, #128	; 0x80
    4a14:	01db      	lsls	r3, r3, #7
    4a16:	4013      	ands	r3, r2
    4a18:	d1f7      	bne.n	4a0a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4a1a:	4b0c      	ldr	r3, [pc, #48]	; (4a4c <system_gclk_chan_disable+0x88>)
    4a1c:	68fa      	ldr	r2, [r7, #12]
    4a1e:	b2d2      	uxtb	r2, r2
    4a20:	1c11      	adds	r1, r2, #0
    4a22:	220f      	movs	r2, #15
    4a24:	400a      	ands	r2, r1
    4a26:	b2d1      	uxtb	r1, r2
    4a28:	220f      	movs	r2, #15
    4a2a:	400a      	ands	r2, r1
    4a2c:	0212      	lsls	r2, r2, #8
    4a2e:	8858      	ldrh	r0, [r3, #2]
    4a30:	4907      	ldr	r1, [pc, #28]	; (4a50 <system_gclk_chan_disable+0x8c>)
    4a32:	4001      	ands	r1, r0
    4a34:	430a      	orrs	r2, r1
    4a36:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    4a38:	4b07      	ldr	r3, [pc, #28]	; (4a58 <system_gclk_chan_disable+0x94>)
    4a3a:	4798      	blx	r3
}
    4a3c:	46bd      	mov	sp, r7
    4a3e:	b004      	add	sp, #16
    4a40:	bd80      	pop	{r7, pc}
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	00004681 	.word	0x00004681
    4a48:	40000c02 	.word	0x40000c02
    4a4c:	40000c00 	.word	0x40000c00
    4a50:	fffff0ff 	.word	0xfffff0ff
    4a54:	ffffbfff 	.word	0xffffbfff
    4a58:	00004691 	.word	0x00004691

00004a5c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4a5c:	b580      	push	{r7, lr}
    4a5e:	b084      	sub	sp, #16
    4a60:	af00      	add	r7, sp, #0
    4a62:	1c02      	adds	r2, r0, #0
    4a64:	1dfb      	adds	r3, r7, #7
    4a66:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4a68:	4b0e      	ldr	r3, [pc, #56]	; (4aa4 <system_gclk_chan_get_hz+0x48>)
    4a6a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a6c:	4b0e      	ldr	r3, [pc, #56]	; (4aa8 <system_gclk_chan_get_hz+0x4c>)
    4a6e:	1dfa      	adds	r2, r7, #7
    4a70:	7812      	ldrb	r2, [r2, #0]
    4a72:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4a74:	4b0d      	ldr	r3, [pc, #52]	; (4aac <system_gclk_chan_get_hz+0x50>)
    4a76:	885b      	ldrh	r3, [r3, #2]
    4a78:	b29b      	uxth	r3, r3
    4a7a:	0a1b      	lsrs	r3, r3, #8
    4a7c:	1c1a      	adds	r2, r3, #0
    4a7e:	230f      	movs	r3, #15
    4a80:	4013      	ands	r3, r2
    4a82:	b2da      	uxtb	r2, r3
    4a84:	1c3b      	adds	r3, r7, #0
    4a86:	330f      	adds	r3, #15
    4a88:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <system_gclk_chan_get_hz+0x54>)
    4a8c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4a8e:	1c3b      	adds	r3, r7, #0
    4a90:	330f      	adds	r3, #15
    4a92:	781b      	ldrb	r3, [r3, #0]
    4a94:	1c18      	adds	r0, r3, #0
    4a96:	4b07      	ldr	r3, [pc, #28]	; (4ab4 <system_gclk_chan_get_hz+0x58>)
    4a98:	4798      	blx	r3
    4a9a:	1c03      	adds	r3, r0, #0
}
    4a9c:	1c18      	adds	r0, r3, #0
    4a9e:	46bd      	mov	sp, r7
    4aa0:	b004      	add	sp, #16
    4aa2:	bd80      	pop	{r7, pc}
    4aa4:	00004681 	.word	0x00004681
    4aa8:	40000c02 	.word	0x40000c02
    4aac:	40000c00 	.word	0x40000c00
    4ab0:	00004691 	.word	0x00004691
    4ab4:	00004855 	.word	0x00004855

00004ab8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ab8:	b580      	push	{r7, lr}
    4aba:	b084      	sub	sp, #16
    4abc:	af00      	add	r7, sp, #0
    4abe:	1c02      	adds	r2, r0, #0
    4ac0:	1dfb      	adds	r3, r7, #7
    4ac2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ac4:	1c3b      	adds	r3, r7, #0
    4ac6:	330f      	adds	r3, #15
    4ac8:	1dfa      	adds	r2, r7, #7
    4aca:	7812      	ldrb	r2, [r2, #0]
    4acc:	09d2      	lsrs	r2, r2, #7
    4ace:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ad0:	1c3b      	adds	r3, r7, #0
    4ad2:	330e      	adds	r3, #14
    4ad4:	1dfa      	adds	r2, r7, #7
    4ad6:	7812      	ldrb	r2, [r2, #0]
    4ad8:	0952      	lsrs	r2, r2, #5
    4ada:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4adc:	4b0d      	ldr	r3, [pc, #52]	; (4b14 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4ade:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4ae0:	1c3b      	adds	r3, r7, #0
    4ae2:	330f      	adds	r3, #15
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d10e      	bne.n	4b08 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    4aea:	1c3b      	adds	r3, r7, #0
    4aec:	330f      	adds	r3, #15
    4aee:	781b      	ldrb	r3, [r3, #0]
    4af0:	009b      	lsls	r3, r3, #2
    4af2:	2210      	movs	r2, #16
    4af4:	19d2      	adds	r2, r2, r7
    4af6:	18d3      	adds	r3, r2, r3
    4af8:	3b08      	subs	r3, #8
    4afa:	681a      	ldr	r2, [r3, #0]
    4afc:	1c3b      	adds	r3, r7, #0
    4afe:	330e      	adds	r3, #14
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	01db      	lsls	r3, r3, #7
    4b04:	18d3      	adds	r3, r2, r3
    4b06:	e000      	b.n	4b0a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4b08:	2300      	movs	r3, #0
	}
}
    4b0a:	1c18      	adds	r0, r3, #0
    4b0c:	46bd      	mov	sp, r7
    4b0e:	b004      	add	sp, #16
    4b10:	bd80      	pop	{r7, pc}
    4b12:	46c0      	nop			; (mov r8, r8)
    4b14:	41004400 	.word	0x41004400

00004b18 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	b088      	sub	sp, #32
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	60f8      	str	r0, [r7, #12]
    4b20:	60b9      	str	r1, [r7, #8]
    4b22:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b24:	2300      	movs	r3, #0
    4b26:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	78db      	ldrb	r3, [r3, #3]
    4b2c:	2201      	movs	r2, #1
    4b2e:	4053      	eors	r3, r2
    4b30:	b2db      	uxtb	r3, r3
    4b32:	2b00      	cmp	r3, #0
    4b34:	d034      	beq.n	4ba0 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	781b      	ldrb	r3, [r3, #0]
    4b3a:	2b80      	cmp	r3, #128	; 0x80
    4b3c:	d00a      	beq.n	4b54 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4b3e:	69fb      	ldr	r3, [r7, #28]
    4b40:	2280      	movs	r2, #128	; 0x80
    4b42:	0252      	lsls	r2, r2, #9
    4b44:	4313      	orrs	r3, r2
    4b46:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4b48:	687b      	ldr	r3, [r7, #4]
    4b4a:	781b      	ldrb	r3, [r3, #0]
    4b4c:	061b      	lsls	r3, r3, #24
    4b4e:	69fa      	ldr	r2, [r7, #28]
    4b50:	4313      	orrs	r3, r2
    4b52:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	785b      	ldrb	r3, [r3, #1]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d003      	beq.n	4b64 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b60:	2b02      	cmp	r3, #2
    4b62:	d110      	bne.n	4b86 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b64:	69fb      	ldr	r3, [r7, #28]
    4b66:	2280      	movs	r2, #128	; 0x80
    4b68:	0292      	lsls	r2, r2, #10
    4b6a:	4313      	orrs	r3, r2
    4b6c:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b6e:	687b      	ldr	r3, [r7, #4]
    4b70:	789b      	ldrb	r3, [r3, #2]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d004      	beq.n	4b80 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b76:	69fb      	ldr	r3, [r7, #28]
    4b78:	2280      	movs	r2, #128	; 0x80
    4b7a:	02d2      	lsls	r2, r2, #11
    4b7c:	4313      	orrs	r3, r2
    4b7e:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	68ba      	ldr	r2, [r7, #8]
    4b84:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	785b      	ldrb	r3, [r3, #1]
    4b8a:	2b01      	cmp	r3, #1
    4b8c:	d003      	beq.n	4b96 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4b8e:	687b      	ldr	r3, [r7, #4]
    4b90:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b92:	2b02      	cmp	r3, #2
    4b94:	d107      	bne.n	4ba6 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b96:	69fa      	ldr	r2, [r7, #28]
    4b98:	4b21      	ldr	r3, [pc, #132]	; (4c20 <_system_pinmux_config+0x108>)
    4b9a:	4013      	ands	r3, r2
    4b9c:	61fb      	str	r3, [r7, #28]
    4b9e:	e002      	b.n	4ba6 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4ba0:	68fb      	ldr	r3, [r7, #12]
    4ba2:	68ba      	ldr	r2, [r7, #8]
    4ba4:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4ba6:	68bb      	ldr	r3, [r7, #8]
    4ba8:	041b      	lsls	r3, r3, #16
    4baa:	0c1b      	lsrs	r3, r3, #16
    4bac:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4bae:	68bb      	ldr	r3, [r7, #8]
    4bb0:	0c1b      	lsrs	r3, r3, #16
    4bb2:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4bb4:	69ba      	ldr	r2, [r7, #24]
    4bb6:	69fb      	ldr	r3, [r7, #28]
    4bb8:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4bba:	22a0      	movs	r2, #160	; 0xa0
    4bbc:	05d2      	lsls	r2, r2, #23
    4bbe:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4bc0:	68fb      	ldr	r3, [r7, #12]
    4bc2:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4bc4:	697a      	ldr	r2, [r7, #20]
    4bc6:	69fb      	ldr	r3, [r7, #28]
    4bc8:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4bca:	22d0      	movs	r2, #208	; 0xd0
    4bcc:	0612      	lsls	r2, r2, #24
    4bce:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4bd0:	68fb      	ldr	r3, [r7, #12]
    4bd2:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	78db      	ldrb	r3, [r3, #3]
    4bd8:	2201      	movs	r2, #1
    4bda:	4053      	eors	r3, r2
    4bdc:	b2db      	uxtb	r3, r3
    4bde:	2b00      	cmp	r3, #0
    4be0:	d01a      	beq.n	4c18 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4be2:	69fa      	ldr	r2, [r7, #28]
    4be4:	2380      	movs	r3, #128	; 0x80
    4be6:	02db      	lsls	r3, r3, #11
    4be8:	4013      	ands	r3, r2
    4bea:	d00a      	beq.n	4c02 <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	789b      	ldrb	r3, [r3, #2]
    4bf0:	2b01      	cmp	r3, #1
    4bf2:	d103      	bne.n	4bfc <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    4bf4:	68fb      	ldr	r3, [r7, #12]
    4bf6:	68ba      	ldr	r2, [r7, #8]
    4bf8:	619a      	str	r2, [r3, #24]
    4bfa:	e002      	b.n	4c02 <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    4bfc:	68fb      	ldr	r3, [r7, #12]
    4bfe:	68ba      	ldr	r2, [r7, #8]
    4c00:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	785b      	ldrb	r3, [r3, #1]
    4c06:	2b01      	cmp	r3, #1
    4c08:	d003      	beq.n	4c12 <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c0e:	2b02      	cmp	r3, #2
    4c10:	d102      	bne.n	4c18 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4c12:	68fb      	ldr	r3, [r7, #12]
    4c14:	68ba      	ldr	r2, [r7, #8]
    4c16:	609a      	str	r2, [r3, #8]
		}
	}
}
    4c18:	46bd      	mov	sp, r7
    4c1a:	b008      	add	sp, #32
    4c1c:	bd80      	pop	{r7, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	fffbffff 	.word	0xfffbffff

00004c24 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4c24:	b580      	push	{r7, lr}
    4c26:	b084      	sub	sp, #16
    4c28:	af00      	add	r7, sp, #0
    4c2a:	1c02      	adds	r2, r0, #0
    4c2c:	6039      	str	r1, [r7, #0]
    4c2e:	1dfb      	adds	r3, r7, #7
    4c30:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4c32:	1dfb      	adds	r3, r7, #7
    4c34:	781b      	ldrb	r3, [r3, #0]
    4c36:	1c18      	adds	r0, r3, #0
    4c38:	4b0b      	ldr	r3, [pc, #44]	; (4c68 <system_pinmux_pin_set_config+0x44>)
    4c3a:	4798      	blx	r3
    4c3c:	1c03      	adds	r3, r0, #0
    4c3e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4c40:	1dfb      	adds	r3, r7, #7
    4c42:	781a      	ldrb	r2, [r3, #0]
    4c44:	231f      	movs	r3, #31
    4c46:	4013      	ands	r3, r2
    4c48:	2201      	movs	r2, #1
    4c4a:	1c11      	adds	r1, r2, #0
    4c4c:	4099      	lsls	r1, r3
    4c4e:	1c0b      	adds	r3, r1, #0
    4c50:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4c52:	68f9      	ldr	r1, [r7, #12]
    4c54:	68ba      	ldr	r2, [r7, #8]
    4c56:	683b      	ldr	r3, [r7, #0]
    4c58:	1c08      	adds	r0, r1, #0
    4c5a:	1c11      	adds	r1, r2, #0
    4c5c:	1c1a      	adds	r2, r3, #0
    4c5e:	4b03      	ldr	r3, [pc, #12]	; (4c6c <system_pinmux_pin_set_config+0x48>)
    4c60:	4798      	blx	r3
}
    4c62:	46bd      	mov	sp, r7
    4c64:	b004      	add	sp, #16
    4c66:	bd80      	pop	{r7, pc}
    4c68:	00004ab9 	.word	0x00004ab9
    4c6c:	00004b19 	.word	0x00004b19

00004c70 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	af00      	add	r7, sp, #0
	return;
    4c74:	46c0      	nop			; (mov r8, r8)
}
    4c76:	46bd      	mov	sp, r7
    4c78:	bd80      	pop	{r7, pc}
    4c7a:	46c0      	nop			; (mov r8, r8)

00004c7c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4c80:	4b04      	ldr	r3, [pc, #16]	; (4c94 <system_init+0x18>)
    4c82:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4c84:	4b04      	ldr	r3, [pc, #16]	; (4c98 <system_init+0x1c>)
    4c86:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4c88:	4b04      	ldr	r3, [pc, #16]	; (4c9c <system_init+0x20>)
    4c8a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4c8c:	4b04      	ldr	r3, [pc, #16]	; (4ca0 <system_init+0x24>)
    4c8e:	4798      	blx	r3
}
    4c90:	46bd      	mov	sp, r7
    4c92:	bd80      	pop	{r7, pc}
    4c94:	0000453d 	.word	0x0000453d
    4c98:	00004141 	.word	0x00004141
    4c9c:	00004c71 	.word	0x00004c71
    4ca0:	00004c71 	.word	0x00004c71

00004ca4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b082      	sub	sp, #8
    4ca8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4caa:	4b16      	ldr	r3, [pc, #88]	; (4d04 <Reset_Handler+0x60>)
    4cac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4cae:	4b16      	ldr	r3, [pc, #88]	; (4d08 <Reset_Handler+0x64>)
    4cb0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4cb2:	687a      	ldr	r2, [r7, #4]
    4cb4:	683b      	ldr	r3, [r7, #0]
    4cb6:	429a      	cmp	r2, r3
    4cb8:	d00c      	beq.n	4cd4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4cba:	e007      	b.n	4ccc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4cbc:	683b      	ldr	r3, [r7, #0]
    4cbe:	1d1a      	adds	r2, r3, #4
    4cc0:	603a      	str	r2, [r7, #0]
    4cc2:	687a      	ldr	r2, [r7, #4]
    4cc4:	1d11      	adds	r1, r2, #4
    4cc6:	6079      	str	r1, [r7, #4]
    4cc8:	6812      	ldr	r2, [r2, #0]
    4cca:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4ccc:	683a      	ldr	r2, [r7, #0]
    4cce:	4b0f      	ldr	r3, [pc, #60]	; (4d0c <Reset_Handler+0x68>)
    4cd0:	429a      	cmp	r2, r3
    4cd2:	d3f3      	bcc.n	4cbc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4cd4:	4b0e      	ldr	r3, [pc, #56]	; (4d10 <Reset_Handler+0x6c>)
    4cd6:	603b      	str	r3, [r7, #0]
    4cd8:	e004      	b.n	4ce4 <Reset_Handler+0x40>
                *pDest++ = 0;
    4cda:	683b      	ldr	r3, [r7, #0]
    4cdc:	1d1a      	adds	r2, r3, #4
    4cde:	603a      	str	r2, [r7, #0]
    4ce0:	2200      	movs	r2, #0
    4ce2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4ce4:	683a      	ldr	r2, [r7, #0]
    4ce6:	4b0b      	ldr	r3, [pc, #44]	; (4d14 <Reset_Handler+0x70>)
    4ce8:	429a      	cmp	r2, r3
    4cea:	d3f6      	bcc.n	4cda <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4cec:	4b0a      	ldr	r3, [pc, #40]	; (4d18 <Reset_Handler+0x74>)
    4cee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4cf0:	4b0a      	ldr	r3, [pc, #40]	; (4d1c <Reset_Handler+0x78>)
    4cf2:	687a      	ldr	r2, [r7, #4]
    4cf4:	217f      	movs	r1, #127	; 0x7f
    4cf6:	438a      	bics	r2, r1
    4cf8:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    4cfa:	4b09      	ldr	r3, [pc, #36]	; (4d20 <Reset_Handler+0x7c>)
    4cfc:	4798      	blx	r3

        /* Branch to main function */
        main();
    4cfe:	4b09      	ldr	r3, [pc, #36]	; (4d24 <Reset_Handler+0x80>)
    4d00:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4d02:	e7fe      	b.n	4d02 <Reset_Handler+0x5e>
    4d04:	00007514 	.word	0x00007514
    4d08:	20000000 	.word	0x20000000
    4d0c:	20000070 	.word	0x20000070
    4d10:	20000070 	.word	0x20000070
    4d14:	20003d08 	.word	0x20003d08
    4d18:	00000000 	.word	0x00000000
    4d1c:	e000ed00 	.word	0xe000ed00
    4d20:	00006251 	.word	0x00006251
    4d24:	000051e9 	.word	0x000051e9

00004d28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	af00      	add	r7, sp, #0
        while (1) {
        }
    4d2c:	e7fe      	b.n	4d2c <Dummy_Handler+0x4>
    4d2e:	46c0      	nop			; (mov r8, r8)

00004d30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4d30:	b580      	push	{r7, lr}
    4d32:	b084      	sub	sp, #16
    4d34:	af00      	add	r7, sp, #0
    4d36:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4d38:	4b0a      	ldr	r3, [pc, #40]	; (4d64 <_sbrk+0x34>)
    4d3a:	681b      	ldr	r3, [r3, #0]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d102      	bne.n	4d46 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4d40:	4b08      	ldr	r3, [pc, #32]	; (4d64 <_sbrk+0x34>)
    4d42:	4a09      	ldr	r2, [pc, #36]	; (4d68 <_sbrk+0x38>)
    4d44:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4d46:	4b07      	ldr	r3, [pc, #28]	; (4d64 <_sbrk+0x34>)
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4d4c:	4b05      	ldr	r3, [pc, #20]	; (4d64 <_sbrk+0x34>)
    4d4e:	681a      	ldr	r2, [r3, #0]
    4d50:	687b      	ldr	r3, [r7, #4]
    4d52:	18d2      	adds	r2, r2, r3
    4d54:	4b03      	ldr	r3, [pc, #12]	; (4d64 <_sbrk+0x34>)
    4d56:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4d58:	68fb      	ldr	r3, [r7, #12]
}
    4d5a:	1c18      	adds	r0, r3, #0
    4d5c:	46bd      	mov	sp, r7
    4d5e:	b004      	add	sp, #16
    4d60:	bd80      	pop	{r7, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	20003ca0 	.word	0x20003ca0
    4d68:	20005d08 	.word	0x20005d08

00004d6c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4d6c:	b580      	push	{r7, lr}
    4d6e:	b082      	sub	sp, #8
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
	return -1;
    4d74:	2301      	movs	r3, #1
    4d76:	425b      	negs	r3, r3
}
    4d78:	1c18      	adds	r0, r3, #0
    4d7a:	46bd      	mov	sp, r7
    4d7c:	b002      	add	sp, #8
    4d7e:	bd80      	pop	{r7, pc}

00004d80 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    4d80:	b580      	push	{r7, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	af00      	add	r7, sp, #0
    4d86:	6078      	str	r0, [r7, #4]
    4d88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    4d8a:	683b      	ldr	r3, [r7, #0]
    4d8c:	2280      	movs	r2, #128	; 0x80
    4d8e:	0192      	lsls	r2, r2, #6
    4d90:	605a      	str	r2, [r3, #4]

	return 0;
    4d92:	2300      	movs	r3, #0
}
    4d94:	1c18      	adds	r0, r3, #0
    4d96:	46bd      	mov	sp, r7
    4d98:	b002      	add	sp, #8
    4d9a:	bd80      	pop	{r7, pc}

00004d9c <_isatty>:

extern int _isatty(int file)
{
    4d9c:	b580      	push	{r7, lr}
    4d9e:	b082      	sub	sp, #8
    4da0:	af00      	add	r7, sp, #0
    4da2:	6078      	str	r0, [r7, #4]
	return 1;
    4da4:	2301      	movs	r3, #1
}
    4da6:	1c18      	adds	r0, r3, #0
    4da8:	46bd      	mov	sp, r7
    4daa:	b002      	add	sp, #8
    4dac:	bd80      	pop	{r7, pc}
    4dae:	46c0      	nop			; (mov r8, r8)

00004db0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    4db0:	b580      	push	{r7, lr}
    4db2:	b084      	sub	sp, #16
    4db4:	af00      	add	r7, sp, #0
    4db6:	60f8      	str	r0, [r7, #12]
    4db8:	60b9      	str	r1, [r7, #8]
    4dba:	607a      	str	r2, [r7, #4]
	return 0;
    4dbc:	2300      	movs	r3, #0
}
    4dbe:	1c18      	adds	r0, r3, #0
    4dc0:	46bd      	mov	sp, r7
    4dc2:	b004      	add	sp, #16
    4dc4:	bd80      	pop	{r7, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)

00004dc8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	b084      	sub	sp, #16
    4dcc:	af00      	add	r7, sp, #0
    4dce:	1c02      	adds	r2, r0, #0
    4dd0:	1dfb      	adds	r3, r7, #7
    4dd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4dd4:	1c3b      	adds	r3, r7, #0
    4dd6:	330f      	adds	r3, #15
    4dd8:	1dfa      	adds	r2, r7, #7
    4dda:	7812      	ldrb	r2, [r2, #0]
    4ddc:	09d2      	lsrs	r2, r2, #7
    4dde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4de0:	1c3b      	adds	r3, r7, #0
    4de2:	330e      	adds	r3, #14
    4de4:	1dfa      	adds	r2, r7, #7
    4de6:	7812      	ldrb	r2, [r2, #0]
    4de8:	0952      	lsrs	r2, r2, #5
    4dea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4dec:	4b0d      	ldr	r3, [pc, #52]	; (4e24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4dee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4df0:	1c3b      	adds	r3, r7, #0
    4df2:	330f      	adds	r3, #15
    4df4:	781b      	ldrb	r3, [r3, #0]
    4df6:	2b00      	cmp	r3, #0
    4df8:	d10e      	bne.n	4e18 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    4dfa:	1c3b      	adds	r3, r7, #0
    4dfc:	330f      	adds	r3, #15
    4dfe:	781b      	ldrb	r3, [r3, #0]
    4e00:	009b      	lsls	r3, r3, #2
    4e02:	2210      	movs	r2, #16
    4e04:	19d2      	adds	r2, r2, r7
    4e06:	18d3      	adds	r3, r2, r3
    4e08:	3b08      	subs	r3, #8
    4e0a:	681a      	ldr	r2, [r3, #0]
    4e0c:	1c3b      	adds	r3, r7, #0
    4e0e:	330e      	adds	r3, #14
    4e10:	781b      	ldrb	r3, [r3, #0]
    4e12:	01db      	lsls	r3, r3, #7
    4e14:	18d3      	adds	r3, r2, r3
    4e16:	e000      	b.n	4e1a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    4e18:	2300      	movs	r3, #0
	}
}
    4e1a:	1c18      	adds	r0, r3, #0
    4e1c:	46bd      	mov	sp, r7
    4e1e:	b004      	add	sp, #16
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	41004400 	.word	0x41004400

00004e28 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b082      	sub	sp, #8
    4e2c:	af00      	add	r7, sp, #0
    4e2e:	1c02      	adds	r2, r0, #0
    4e30:	1dfb      	adds	r3, r7, #7
    4e32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	1c18      	adds	r0, r3, #0
    4e3a:	4b03      	ldr	r3, [pc, #12]	; (4e48 <port_get_group_from_gpio_pin+0x20>)
    4e3c:	4798      	blx	r3
    4e3e:	1c03      	adds	r3, r0, #0
}
    4e40:	1c18      	adds	r0, r3, #0
    4e42:	46bd      	mov	sp, r7
    4e44:	b002      	add	sp, #8
    4e46:	bd80      	pop	{r7, pc}
    4e48:	00004dc9 	.word	0x00004dc9

00004e4c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    4e4c:	b580      	push	{r7, lr}
    4e4e:	b084      	sub	sp, #16
    4e50:	af00      	add	r7, sp, #0
    4e52:	1c02      	adds	r2, r0, #0
    4e54:	1dfb      	adds	r3, r7, #7
    4e56:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4e58:	1dfb      	adds	r3, r7, #7
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	1c18      	adds	r0, r3, #0
    4e5e:	4b09      	ldr	r3, [pc, #36]	; (4e84 <port_pin_toggle_output_level+0x38>)
    4e60:	4798      	blx	r3
    4e62:	1c03      	adds	r3, r0, #0
    4e64:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4e66:	1dfb      	adds	r3, r7, #7
    4e68:	781a      	ldrb	r2, [r3, #0]
    4e6a:	231f      	movs	r3, #31
    4e6c:	4013      	ands	r3, r2
    4e6e:	2201      	movs	r2, #1
    4e70:	1c11      	adds	r1, r2, #0
    4e72:	4099      	lsls	r1, r3
    4e74:	1c0b      	adds	r3, r1, #0
    4e76:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4e78:	68fb      	ldr	r3, [r7, #12]
    4e7a:	68ba      	ldr	r2, [r7, #8]
    4e7c:	61da      	str	r2, [r3, #28]
}
    4e7e:	46bd      	mov	sp, r7
    4e80:	b004      	add	sp, #16
    4e82:	bd80      	pop	{r7, pc}
    4e84:	00004e29 	.word	0x00004e29

00004e88 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b082      	sub	sp, #8
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	1c02      	adds	r2, r0, #0
    4e90:	1dfb      	adds	r3, r7, #7
    4e92:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e94:	4b06      	ldr	r3, [pc, #24]	; (4eb0 <system_interrupt_enable+0x28>)
    4e96:	1dfa      	adds	r2, r7, #7
    4e98:	7812      	ldrb	r2, [r2, #0]
    4e9a:	1c11      	adds	r1, r2, #0
    4e9c:	221f      	movs	r2, #31
    4e9e:	400a      	ands	r2, r1
    4ea0:	2101      	movs	r1, #1
    4ea2:	1c08      	adds	r0, r1, #0
    4ea4:	4090      	lsls	r0, r2
    4ea6:	1c02      	adds	r2, r0, #0
    4ea8:	601a      	str	r2, [r3, #0]
}
    4eaa:	46bd      	mov	sp, r7
    4eac:	b002      	add	sp, #8
    4eae:	bd80      	pop	{r7, pc}
    4eb0:	e000e100 	.word	0xe000e100

00004eb4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b084      	sub	sp, #16
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4ec2:	68fb      	ldr	r3, [r7, #12]
    4ec4:	69db      	ldr	r3, [r3, #28]
    4ec6:	1e5a      	subs	r2, r3, #1
    4ec8:	4193      	sbcs	r3, r2
    4eca:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4ecc:	1c18      	adds	r0, r3, #0
    4ece:	46bd      	mov	sp, r7
    4ed0:	b004      	add	sp, #16
    4ed2:	bd80      	pop	{r7, pc}

00004ed4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b082      	sub	sp, #8
    4ed8:	af00      	add	r7, sp, #0
    4eda:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4edc:	46c0      	nop			; (mov r8, r8)
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	1c18      	adds	r0, r3, #0
    4ee2:	4b04      	ldr	r3, [pc, #16]	; (4ef4 <_usart_wait_for_sync+0x20>)
    4ee4:	4798      	blx	r3
    4ee6:	1c03      	adds	r3, r0, #0
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d1f8      	bne.n	4ede <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4eec:	46bd      	mov	sp, r7
    4eee:	b002      	add	sp, #8
    4ef0:	bd80      	pop	{r7, pc}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	00004eb5 	.word	0x00004eb5

00004ef8 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4ef8:	b580      	push	{r7, lr}
    4efa:	b082      	sub	sp, #8
    4efc:	af00      	add	r7, sp, #0
    4efe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	2280      	movs	r2, #128	; 0x80
    4f04:	05d2      	lsls	r2, r2, #23
    4f06:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	2200      	movs	r2, #0
    4f0c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4f0e:	687b      	ldr	r3, [r7, #4]
    4f10:	22ff      	movs	r2, #255	; 0xff
    4f12:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	2200      	movs	r2, #0
    4f18:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4f1a:	687b      	ldr	r3, [r7, #4]
    4f1c:	2200      	movs	r2, #0
    4f1e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	2296      	movs	r2, #150	; 0x96
    4f24:	0192      	lsls	r2, r2, #6
    4f26:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4f28:	687a      	ldr	r2, [r7, #4]
    4f2a:	2324      	movs	r3, #36	; 0x24
    4f2c:	2101      	movs	r1, #1
    4f2e:	54d1      	strb	r1, [r2, r3]
	config->transmitter_enable = true;
    4f30:	687a      	ldr	r2, [r7, #4]
    4f32:	2325      	movs	r3, #37	; 0x25
    4f34:	2101      	movs	r1, #1
    4f36:	54d1      	strb	r1, [r2, r3]
	config->clock_polarity_inverted = false;
    4f38:	687a      	ldr	r2, [r7, #4]
    4f3a:	2326      	movs	r3, #38	; 0x26
    4f3c:	2100      	movs	r1, #0
    4f3e:	54d1      	strb	r1, [r2, r3]
	config->use_external_clock = false;
    4f40:	687a      	ldr	r2, [r7, #4]
    4f42:	2327      	movs	r3, #39	; 0x27
    4f44:	2100      	movs	r1, #0
    4f46:	54d1      	strb	r1, [r2, r3]
	config->ext_clock_freq   = 0;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2200      	movs	r2, #0
    4f4c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4f4e:	687b      	ldr	r3, [r7, #4]
    4f50:	2288      	movs	r2, #136	; 0x88
    4f52:	0352      	lsls	r2, r2, #13
    4f54:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4f56:	687a      	ldr	r2, [r7, #4]
    4f58:	232c      	movs	r3, #44	; 0x2c
    4f5a:	2100      	movs	r1, #0
    4f5c:	54d1      	strb	r1, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    4f5e:	687a      	ldr	r2, [r7, #4]
    4f60:	232d      	movs	r3, #45	; 0x2d
    4f62:	2100      	movs	r1, #0
    4f64:	54d1      	strb	r1, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4f66:	687b      	ldr	r3, [r7, #4]
    4f68:	2200      	movs	r2, #0
    4f6a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	2200      	movs	r2, #0
    4f70:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	2200      	movs	r2, #0
    4f76:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	2200      	movs	r2, #0
    4f7c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4f7e:	687b      	ldr	r3, [r7, #4]
    4f80:	2200      	movs	r2, #0
    4f82:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	2200      	movs	r2, #0
    4f88:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	2200      	movs	r2, #0
    4f8e:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	2200      	movs	r2, #0
    4f94:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	2200      	movs	r2, #0
    4f9a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	2200      	movs	r2, #0
    4fa0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    4fa2:	687b      	ldr	r3, [r7, #4]
    4fa4:	2213      	movs	r2, #19
    4fa6:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	2200      	movs	r2, #0
    4fac:	775a      	strb	r2, [r3, #29]
#endif
}
    4fae:	46bd      	mov	sp, r7
    4fb0:	b002      	add	sp, #8
    4fb2:	bd80      	pop	{r7, pc}

00004fb4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4fb4:	b580      	push	{r7, lr}
    4fb6:	b084      	sub	sp, #16
    4fb8:	af00      	add	r7, sp, #0
    4fba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	681b      	ldr	r3, [r3, #0]
    4fc0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4fc2:	687b      	ldr	r3, [r7, #4]
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	1c18      	adds	r0, r3, #0
    4fc8:	4b09      	ldr	r3, [pc, #36]	; (4ff0 <usart_enable+0x3c>)
    4fca:	4798      	blx	r3
    4fcc:	1c03      	adds	r3, r0, #0
    4fce:	1c18      	adds	r0, r3, #0
    4fd0:	4b08      	ldr	r3, [pc, #32]	; (4ff4 <usart_enable+0x40>)
    4fd2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	1c18      	adds	r0, r3, #0
    4fd8:	4b07      	ldr	r3, [pc, #28]	; (4ff8 <usart_enable+0x44>)
    4fda:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4fdc:	68fb      	ldr	r3, [r7, #12]
    4fde:	681b      	ldr	r3, [r3, #0]
    4fe0:	2202      	movs	r2, #2
    4fe2:	431a      	orrs	r2, r3
    4fe4:	68fb      	ldr	r3, [r7, #12]
    4fe6:	601a      	str	r2, [r3, #0]
}
    4fe8:	46bd      	mov	sp, r7
    4fea:	b004      	add	sp, #16
    4fec:	bd80      	pop	{r7, pc}
    4fee:	46c0      	nop			; (mov r8, r8)
    4ff0:	000012cd 	.word	0x000012cd
    4ff4:	00004e89 	.word	0x00004e89
    4ff8:	00004ed5 	.word	0x00004ed5

00004ffc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b084      	sub	sp, #16
    5000:	af00      	add	r7, sp, #0
    5002:	60f8      	str	r0, [r7, #12]
    5004:	60b9      	str	r1, [r7, #8]
    5006:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5008:	68f9      	ldr	r1, [r7, #12]
    500a:	68ba      	ldr	r2, [r7, #8]
    500c:	687b      	ldr	r3, [r7, #4]
    500e:	1c08      	adds	r0, r1, #0
    5010:	1c11      	adds	r1, r2, #0
    5012:	1c1a      	adds	r2, r3, #0
    5014:	4b05      	ldr	r3, [pc, #20]	; (502c <usart_serial_init+0x30>)
    5016:	4798      	blx	r3
    5018:	1c03      	adds	r3, r0, #0
    501a:	2b00      	cmp	r3, #0
    501c:	d101      	bne.n	5022 <usart_serial_init+0x26>
		return true;
    501e:	2301      	movs	r3, #1
    5020:	e000      	b.n	5024 <usart_serial_init+0x28>
	}
	else {
		return false;
    5022:	2300      	movs	r3, #0
	}
}
    5024:	1c18      	adds	r0, r3, #0
    5026:	46bd      	mov	sp, r7
    5028:	b004      	add	sp, #16
    502a:	bd80      	pop	{r7, pc}
    502c:	00001779 	.word	0x00001779

00005030 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    5030:	b580      	push	{r7, lr}
    5032:	b082      	sub	sp, #8
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
    5038:	1c0a      	adds	r2, r1, #0
    503a:	1cfb      	adds	r3, r7, #3
    503c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    503e:	46c0      	nop			; (mov r8, r8)
    5040:	1cfb      	adds	r3, r7, #3
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	b29b      	uxth	r3, r3
    5046:	687a      	ldr	r2, [r7, #4]
    5048:	1c10      	adds	r0, r2, #0
    504a:	1c19      	adds	r1, r3, #0
    504c:	4b04      	ldr	r3, [pc, #16]	; (5060 <usart_serial_putchar+0x30>)
    504e:	4798      	blx	r3
    5050:	1c03      	adds	r3, r0, #0
    5052:	2b00      	cmp	r3, #0
    5054:	d1f4      	bne.n	5040 <usart_serial_putchar+0x10>

	return STATUS_OK;
    5056:	2300      	movs	r3, #0
}
    5058:	1c18      	adds	r0, r3, #0
    505a:	46bd      	mov	sp, r7
    505c:	b002      	add	sp, #8
    505e:	bd80      	pop	{r7, pc}
    5060:	000019ed 	.word	0x000019ed

00005064 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5064:	b580      	push	{r7, lr}
    5066:	b084      	sub	sp, #16
    5068:	af00      	add	r7, sp, #0
    506a:	6078      	str	r0, [r7, #4]
    506c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    506e:	1c3b      	adds	r3, r7, #0
    5070:	330e      	adds	r3, #14
    5072:	2200      	movs	r2, #0
    5074:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	687a      	ldr	r2, [r7, #4]
    507a:	1c3b      	adds	r3, r7, #0
    507c:	330e      	adds	r3, #14
    507e:	1c10      	adds	r0, r2, #0
    5080:	1c19      	adds	r1, r3, #0
    5082:	4b07      	ldr	r3, [pc, #28]	; (50a0 <usart_serial_getchar+0x3c>)
    5084:	4798      	blx	r3
    5086:	1c03      	adds	r3, r0, #0
    5088:	2b00      	cmp	r3, #0
    508a:	d1f5      	bne.n	5078 <usart_serial_getchar+0x14>

	*c = temp;
    508c:	1c3b      	adds	r3, r7, #0
    508e:	330e      	adds	r3, #14
    5090:	881b      	ldrh	r3, [r3, #0]
    5092:	b2da      	uxtb	r2, r3
    5094:	683b      	ldr	r3, [r7, #0]
    5096:	701a      	strb	r2, [r3, #0]
}
    5098:	46bd      	mov	sp, r7
    509a:	b004      	add	sp, #16
    509c:	bd80      	pop	{r7, pc}
    509e:	46c0      	nop			; (mov r8, r8)
    50a0:	00001a51 	.word	0x00001a51

000050a4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b084      	sub	sp, #16
    50a8:	af00      	add	r7, sp, #0
    50aa:	60f8      	str	r0, [r7, #12]
    50ac:	60b9      	str	r1, [r7, #8]
    50ae:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    50b0:	4b10      	ldr	r3, [pc, #64]	; (50f4 <stdio_serial_init+0x50>)
    50b2:	68fa      	ldr	r2, [r7, #12]
    50b4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    50b6:	4b10      	ldr	r3, [pc, #64]	; (50f8 <stdio_serial_init+0x54>)
    50b8:	4a10      	ldr	r2, [pc, #64]	; (50fc <stdio_serial_init+0x58>)
    50ba:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    50bc:	4b10      	ldr	r3, [pc, #64]	; (5100 <stdio_serial_init+0x5c>)
    50be:	4a11      	ldr	r2, [pc, #68]	; (5104 <stdio_serial_init+0x60>)
    50c0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    50c2:	68f9      	ldr	r1, [r7, #12]
    50c4:	68ba      	ldr	r2, [r7, #8]
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	1c08      	adds	r0, r1, #0
    50ca:	1c11      	adds	r1, r2, #0
    50cc:	1c1a      	adds	r2, r3, #0
    50ce:	4b0e      	ldr	r3, [pc, #56]	; (5108 <stdio_serial_init+0x64>)
    50d0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    50d2:	4b0e      	ldr	r3, [pc, #56]	; (510c <stdio_serial_init+0x68>)
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	689b      	ldr	r3, [r3, #8]
    50d8:	1c18      	adds	r0, r3, #0
    50da:	2100      	movs	r1, #0
    50dc:	4b0c      	ldr	r3, [pc, #48]	; (5110 <stdio_serial_init+0x6c>)
    50de:	4798      	blx	r3
	setbuf(stdin, NULL);
    50e0:	4b0a      	ldr	r3, [pc, #40]	; (510c <stdio_serial_init+0x68>)
    50e2:	681b      	ldr	r3, [r3, #0]
    50e4:	685b      	ldr	r3, [r3, #4]
    50e6:	1c18      	adds	r0, r3, #0
    50e8:	2100      	movs	r1, #0
    50ea:	4b09      	ldr	r3, [pc, #36]	; (5110 <stdio_serial_init+0x6c>)
    50ec:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    50ee:	46bd      	mov	sp, r7
    50f0:	b004      	add	sp, #16
    50f2:	bd80      	pop	{r7, pc}
    50f4:	20003d00 	.word	0x20003d00
    50f8:	20003cfc 	.word	0x20003cfc
    50fc:	00005031 	.word	0x00005031
    5100:	20003cf8 	.word	0x20003cf8
    5104:	00005065 	.word	0x00005065
    5108:	00004ffd 	.word	0x00004ffd
    510c:	2000006c 	.word	0x2000006c
    5110:	000062f5 	.word	0x000062f5

00005114 <configure_console>:

#include "main.h"

//extern void xPortSysTickHandler(void);

static void configure_console(void) {
    5114:	b580      	push	{r7, lr}
    5116:	b090      	sub	sp, #64	; 0x40
    5118:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    511a:	1c3b      	adds	r3, r7, #0
    511c:	1c18      	adds	r0, r3, #0
    511e:	4b13      	ldr	r3, [pc, #76]	; (516c <configure_console+0x58>)
    5120:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    5122:	1c3b      	adds	r3, r7, #0
    5124:	2280      	movs	r2, #128	; 0x80
    5126:	0352      	lsls	r2, r2, #13
    5128:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    512a:	1c3b      	adds	r3, r7, #0
    512c:	4a10      	ldr	r2, [pc, #64]	; (5170 <configure_console+0x5c>)
    512e:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    5130:	1c3b      	adds	r3, r7, #0
    5132:	4a10      	ldr	r2, [pc, #64]	; (5174 <configure_console+0x60>)
    5134:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    5136:	1c3b      	adds	r3, r7, #0
    5138:	2201      	movs	r2, #1
    513a:	4252      	negs	r2, r2
    513c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    513e:	1c3b      	adds	r3, r7, #0
    5140:	2201      	movs	r2, #1
    5142:	4252      	negs	r2, r2
    5144:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    5146:	1c3b      	adds	r3, r7, #0
    5148:	2296      	movs	r2, #150	; 0x96
    514a:	0212      	lsls	r2, r2, #8
    514c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE,
    514e:	490a      	ldr	r1, [pc, #40]	; (5178 <configure_console+0x64>)
    5150:	4a0a      	ldr	r2, [pc, #40]	; (517c <configure_console+0x68>)
    5152:	1c3b      	adds	r3, r7, #0
    5154:	1c08      	adds	r0, r1, #0
    5156:	1c11      	adds	r1, r2, #0
    5158:	1c1a      	adds	r2, r3, #0
    515a:	4b09      	ldr	r3, [pc, #36]	; (5180 <configure_console+0x6c>)
    515c:	4798      	blx	r3
	&usart_conf);
	usart_enable(&cdc_uart_module);
    515e:	4b06      	ldr	r3, [pc, #24]	; (5178 <configure_console+0x64>)
    5160:	1c18      	adds	r0, r3, #0
    5162:	4b08      	ldr	r3, [pc, #32]	; (5184 <configure_console+0x70>)
    5164:	4798      	blx	r3
}
    5166:	46bd      	mov	sp, r7
    5168:	b010      	add	sp, #64	; 0x40
    516a:	bd80      	pop	{r7, pc}
    516c:	00004ef9 	.word	0x00004ef9
    5170:	00160002 	.word	0x00160002
    5174:	00170002 	.word	0x00170002
    5178:	20003ca4 	.word	0x20003ca4
    517c:	42001400 	.word	0x42001400
    5180:	000050a5 	.word	0x000050a5
    5184:	00004fb5 	.word	0x00004fb5

00005188 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
    5188:	b580      	push	{r7, lr}
    518a:	b082      	sub	sp, #8
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

    configure_console();
    5190:	4b05      	ldr	r3, [pc, #20]	; (51a8 <task_monitor+0x20>)
    5192:	4798      	blx	r3
	for (;;) {
		printf("hi");
    5194:	4b05      	ldr	r3, [pc, #20]	; (51ac <task_monitor+0x24>)
    5196:	1c18      	adds	r0, r3, #0
    5198:	4b05      	ldr	r3, [pc, #20]	; (51b0 <task_monitor+0x28>)
    519a:	4798      	blx	r3
		vTaskDelay(1000);
    519c:	23fa      	movs	r3, #250	; 0xfa
    519e:	009b      	lsls	r3, r3, #2
    51a0:	1c18      	adds	r0, r3, #0
    51a2:	4b04      	ldr	r3, [pc, #16]	; (51b4 <task_monitor+0x2c>)
    51a4:	4798      	blx	r3
	}
    51a6:	e7f5      	b.n	5194 <task_monitor+0xc>
    51a8:	00005115 	.word	0x00005115
    51ac:	00007388 	.word	0x00007388
    51b0:	000062c1 	.word	0x000062c1
    51b4:	00002ee1 	.word	0x00002ee1

000051b8 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
    51b8:	b580      	push	{r7, lr}
    51ba:	b082      	sub	sp, #8
    51bc:	af00      	add	r7, sp, #0
    51be:	6078      	str	r0, [r7, #4]
	for (;;) {
		//printf("blinking\n");
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
    51c0:	203e      	movs	r0, #62	; 0x3e
    51c2:	4b04      	ldr	r3, [pc, #16]	; (51d4 <task_led+0x1c>)
    51c4:	4798      	blx	r3
	#endif
		vTaskDelay(1000);
    51c6:	23fa      	movs	r3, #250	; 0xfa
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	1c18      	adds	r0, r3, #0
    51cc:	4b02      	ldr	r3, [pc, #8]	; (51d8 <task_led+0x20>)
    51ce:	4798      	blx	r3
	}
    51d0:	e7f6      	b.n	51c0 <task_led+0x8>
    51d2:	46c0      	nop			; (mov r8, r8)
    51d4:	00004e4d 	.word	0x00004e4d
    51d8:	00002ee1 	.word	0x00002ee1

000051dc <task_adc_read>:
}

static void task_adc_read(void *pvParameters) {
    51dc:	b580      	push	{r7, lr}
    51de:	b082      	sub	sp, #8
    51e0:	af00      	add	r7, sp, #0
    51e2:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	for (;;) {
		
	}
    51e4:	e7fe      	b.n	51e4 <task_adc_read+0x8>
    51e6:	46c0      	nop			; (mov r8, r8)

000051e8 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{	
    51e8:	b590      	push	{r4, r7, lr}
    51ea:	b089      	sub	sp, #36	; 0x24
    51ec:	af04      	add	r7, sp, #16
	
	
	
	/* Initilize the SAM system */
	system_init();
    51ee:	4b3a      	ldr	r3, [pc, #232]	; (52d8 <main+0xf0>)
    51f0:	4798      	blx	r3

	/* Initialize the console uart */
	configure_console();
    51f2:	4b3a      	ldr	r3, [pc, #232]	; (52dc <main+0xf4>)
    51f4:	4798      	blx	r3

	/* Output demo infomation. */
	printf("-- Freertos Example --\n\r");
    51f6:	4b3a      	ldr	r3, [pc, #232]	; (52e0 <main+0xf8>)
    51f8:	1c18      	adds	r0, r3, #0
    51fa:	4b3a      	ldr	r3, [pc, #232]	; (52e4 <main+0xfc>)
    51fc:	4798      	blx	r3
	printf("-- %s\n\r", BOARD_NAME);
    51fe:	4a3a      	ldr	r2, [pc, #232]	; (52e8 <main+0x100>)
    5200:	4b3a      	ldr	r3, [pc, #232]	; (52ec <main+0x104>)
    5202:	1c10      	adds	r0, r2, #0
    5204:	1c19      	adds	r1, r3, #0
    5206:	4b37      	ldr	r3, [pc, #220]	; (52e4 <main+0xfc>)
    5208:	4798      	blx	r3
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    520a:	4939      	ldr	r1, [pc, #228]	; (52f0 <main+0x108>)
    520c:	4a39      	ldr	r2, [pc, #228]	; (52f4 <main+0x10c>)
    520e:	4b3a      	ldr	r3, [pc, #232]	; (52f8 <main+0x110>)
    5210:	1c08      	adds	r0, r1, #0
    5212:	1c11      	adds	r1, r2, #0
    5214:	1c1a      	adds	r2, r3, #0
    5216:	4b33      	ldr	r3, [pc, #204]	; (52e4 <main+0xfc>)
    5218:	4798      	blx	r3
	
	struct adc_module temp_instance;
	configure_adc(&temp_instance);
    521a:	1c3b      	adds	r3, r7, #0
    521c:	1c18      	adds	r0, r3, #0
    521e:	4b37      	ldr	r3, [pc, #220]	; (52fc <main+0x114>)
    5220:	4798      	blx	r3
	int i = 0;
    5222:	2300      	movs	r3, #0
    5224:	60fb      	str	r3, [r7, #12]
	while(i<10){
    5226:	e013      	b.n	5250 <main+0x68>
		int x = readVoltagemV(temp_instance);
    5228:	1c3b      	adds	r3, r7, #0
    522a:	6818      	ldr	r0, [r3, #0]
    522c:	6859      	ldr	r1, [r3, #4]
    522e:	4b34      	ldr	r3, [pc, #208]	; (5300 <main+0x118>)
    5230:	4798      	blx	r3
    5232:	1c02      	adds	r2, r0, #0
    5234:	4b33      	ldr	r3, [pc, #204]	; (5304 <main+0x11c>)
    5236:	1c10      	adds	r0, r2, #0
    5238:	4798      	blx	r3
    523a:	1c03      	adds	r3, r0, #0
    523c:	60bb      	str	r3, [r7, #8]
		printf("%d\n\r",x);
    523e:	4a32      	ldr	r2, [pc, #200]	; (5308 <main+0x120>)
    5240:	68bb      	ldr	r3, [r7, #8]
    5242:	1c10      	adds	r0, r2, #0
    5244:	1c19      	adds	r1, r3, #0
    5246:	4b27      	ldr	r3, [pc, #156]	; (52e4 <main+0xfc>)
    5248:	4798      	blx	r3
		i++;
    524a:	68fb      	ldr	r3, [r7, #12]
    524c:	3301      	adds	r3, #1
    524e:	60fb      	str	r3, [r7, #12]
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
	
	struct adc_module temp_instance;
	configure_adc(&temp_instance);
	int i = 0;
	while(i<10){
    5250:	68fb      	ldr	r3, [r7, #12]
    5252:	2b09      	cmp	r3, #9
    5254:	dde8      	ble.n	5228 <main+0x40>
		int x = readVoltagemV(temp_instance);
		printf("%d\n\r",x);
		i++;
	}
	
	printf("pause point");
    5256:	4b2d      	ldr	r3, [pc, #180]	; (530c <main+0x124>)
    5258:	1c18      	adds	r0, r3, #0
    525a:	4b22      	ldr	r3, [pc, #136]	; (52e4 <main+0xfc>)
    525c:	4798      	blx	r3
	
	

	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
    525e:	492c      	ldr	r1, [pc, #176]	; (5310 <main+0x128>)
    5260:	4a2c      	ldr	r2, [pc, #176]	; (5314 <main+0x12c>)
    5262:	2380      	movs	r3, #128	; 0x80
    5264:	009b      	lsls	r3, r3, #2
    5266:	2000      	movs	r0, #0
    5268:	9000      	str	r0, [sp, #0]
    526a:	2000      	movs	r0, #0
    526c:	9001      	str	r0, [sp, #4]
    526e:	2000      	movs	r0, #0
    5270:	9002      	str	r0, [sp, #8]
    5272:	2000      	movs	r0, #0
    5274:	9003      	str	r0, [sp, #12]
    5276:	1c08      	adds	r0, r1, #0
    5278:	1c11      	adds	r1, r2, #0
    527a:	1c1a      	adds	r2, r3, #0
    527c:	2300      	movs	r3, #0
    527e:	4c26      	ldr	r4, [pc, #152]	; (5318 <main+0x130>)
    5280:	47a0      	blx	r4
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Monitor task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
    5282:	4926      	ldr	r1, [pc, #152]	; (531c <main+0x134>)
    5284:	4a26      	ldr	r2, [pc, #152]	; (5320 <main+0x138>)
    5286:	2380      	movs	r3, #128	; 0x80
    5288:	005b      	lsls	r3, r3, #1
    528a:	2000      	movs	r0, #0
    528c:	9000      	str	r0, [sp, #0]
    528e:	2000      	movs	r0, #0
    5290:	9001      	str	r0, [sp, #4]
    5292:	2000      	movs	r0, #0
    5294:	9002      	str	r0, [sp, #8]
    5296:	2000      	movs	r0, #0
    5298:	9003      	str	r0, [sp, #12]
    529a:	1c08      	adds	r0, r1, #0
    529c:	1c11      	adds	r1, r2, #0
    529e:	1c1a      	adds	r2, r3, #0
    52a0:	2300      	movs	r3, #0
    52a2:	4c1d      	ldr	r4, [pc, #116]	; (5318 <main+0x130>)
    52a4:	47a0      	blx	r4
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}
	
	/* Create task to make led blink */
	if (xTaskCreate(task_adc_read, "ADC", TASK_ADC_STACK_SIZE, NULL,
    52a6:	491f      	ldr	r1, [pc, #124]	; (5324 <main+0x13c>)
    52a8:	4a1f      	ldr	r2, [pc, #124]	; (5328 <main+0x140>)
    52aa:	2380      	movs	r3, #128	; 0x80
    52ac:	00db      	lsls	r3, r3, #3
    52ae:	2000      	movs	r0, #0
    52b0:	9000      	str	r0, [sp, #0]
    52b2:	2000      	movs	r0, #0
    52b4:	9001      	str	r0, [sp, #4]
    52b6:	2000      	movs	r0, #0
    52b8:	9002      	str	r0, [sp, #8]
    52ba:	2000      	movs	r0, #0
    52bc:	9003      	str	r0, [sp, #12]
    52be:	1c08      	adds	r0, r1, #0
    52c0:	1c11      	adds	r1, r2, #0
    52c2:	1c1a      	adds	r2, r3, #0
    52c4:	2300      	movs	r3, #0
    52c6:	4c14      	ldr	r4, [pc, #80]	; (5318 <main+0x130>)
    52c8:	47a0      	blx	r4
	TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
    52ca:	4b18      	ldr	r3, [pc, #96]	; (532c <main+0x144>)
    52cc:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
    52ce:	2300      	movs	r3, #0
    52d0:	1c18      	adds	r0, r3, #0
    52d2:	46bd      	mov	sp, r7
    52d4:	b005      	add	sp, #20
    52d6:	bd90      	pop	{r4, r7, pc}
    52d8:	00004c7d 	.word	0x00004c7d
    52dc:	00005115 	.word	0x00005115
    52e0:	0000738c 	.word	0x0000738c
    52e4:	000062c1 	.word	0x000062c1
    52e8:	000073a8 	.word	0x000073a8
    52ec:	000073b0 	.word	0x000073b0
    52f0:	000073c4 	.word	0x000073c4
    52f4:	000073dc 	.word	0x000073dc
    52f8:	000073e8 	.word	0x000073e8
    52fc:	000003d1 	.word	0x000003d1
    5300:	0000043d 	.word	0x0000043d
    5304:	00005415 	.word	0x00005415
    5308:	000073f4 	.word	0x000073f4
    530c:	000073fc 	.word	0x000073fc
    5310:	00005189 	.word	0x00005189
    5314:	00007408 	.word	0x00007408
    5318:	00002d55 	.word	0x00002d55
    531c:	000051b9 	.word	0x000051b9
    5320:	00007410 	.word	0x00007410
    5324:	000051dd 	.word	0x000051dd
    5328:	00007414 	.word	0x00007414
    532c:	00002f59 	.word	0x00002f59

00005330 <__aeabi_uidiv>:
    5330:	2900      	cmp	r1, #0
    5332:	d034      	beq.n	539e <.udivsi3_skip_div0_test+0x6a>

00005334 <.udivsi3_skip_div0_test>:
    5334:	2301      	movs	r3, #1
    5336:	2200      	movs	r2, #0
    5338:	b410      	push	{r4}
    533a:	4288      	cmp	r0, r1
    533c:	d32c      	bcc.n	5398 <.udivsi3_skip_div0_test+0x64>
    533e:	2401      	movs	r4, #1
    5340:	0724      	lsls	r4, r4, #28
    5342:	42a1      	cmp	r1, r4
    5344:	d204      	bcs.n	5350 <.udivsi3_skip_div0_test+0x1c>
    5346:	4281      	cmp	r1, r0
    5348:	d202      	bcs.n	5350 <.udivsi3_skip_div0_test+0x1c>
    534a:	0109      	lsls	r1, r1, #4
    534c:	011b      	lsls	r3, r3, #4
    534e:	e7f8      	b.n	5342 <.udivsi3_skip_div0_test+0xe>
    5350:	00e4      	lsls	r4, r4, #3
    5352:	42a1      	cmp	r1, r4
    5354:	d204      	bcs.n	5360 <.udivsi3_skip_div0_test+0x2c>
    5356:	4281      	cmp	r1, r0
    5358:	d202      	bcs.n	5360 <.udivsi3_skip_div0_test+0x2c>
    535a:	0049      	lsls	r1, r1, #1
    535c:	005b      	lsls	r3, r3, #1
    535e:	e7f8      	b.n	5352 <.udivsi3_skip_div0_test+0x1e>
    5360:	4288      	cmp	r0, r1
    5362:	d301      	bcc.n	5368 <.udivsi3_skip_div0_test+0x34>
    5364:	1a40      	subs	r0, r0, r1
    5366:	431a      	orrs	r2, r3
    5368:	084c      	lsrs	r4, r1, #1
    536a:	42a0      	cmp	r0, r4
    536c:	d302      	bcc.n	5374 <.udivsi3_skip_div0_test+0x40>
    536e:	1b00      	subs	r0, r0, r4
    5370:	085c      	lsrs	r4, r3, #1
    5372:	4322      	orrs	r2, r4
    5374:	088c      	lsrs	r4, r1, #2
    5376:	42a0      	cmp	r0, r4
    5378:	d302      	bcc.n	5380 <.udivsi3_skip_div0_test+0x4c>
    537a:	1b00      	subs	r0, r0, r4
    537c:	089c      	lsrs	r4, r3, #2
    537e:	4322      	orrs	r2, r4
    5380:	08cc      	lsrs	r4, r1, #3
    5382:	42a0      	cmp	r0, r4
    5384:	d302      	bcc.n	538c <.udivsi3_skip_div0_test+0x58>
    5386:	1b00      	subs	r0, r0, r4
    5388:	08dc      	lsrs	r4, r3, #3
    538a:	4322      	orrs	r2, r4
    538c:	2800      	cmp	r0, #0
    538e:	d003      	beq.n	5398 <.udivsi3_skip_div0_test+0x64>
    5390:	091b      	lsrs	r3, r3, #4
    5392:	d001      	beq.n	5398 <.udivsi3_skip_div0_test+0x64>
    5394:	0909      	lsrs	r1, r1, #4
    5396:	e7e3      	b.n	5360 <.udivsi3_skip_div0_test+0x2c>
    5398:	1c10      	adds	r0, r2, #0
    539a:	bc10      	pop	{r4}
    539c:	4770      	bx	lr
    539e:	2800      	cmp	r0, #0
    53a0:	d001      	beq.n	53a6 <.udivsi3_skip_div0_test+0x72>
    53a2:	2000      	movs	r0, #0
    53a4:	43c0      	mvns	r0, r0
    53a6:	b407      	push	{r0, r1, r2}
    53a8:	4802      	ldr	r0, [pc, #8]	; (53b4 <.udivsi3_skip_div0_test+0x80>)
    53aa:	a102      	add	r1, pc, #8	; (adr r1, 53b4 <.udivsi3_skip_div0_test+0x80>)
    53ac:	1840      	adds	r0, r0, r1
    53ae:	9002      	str	r0, [sp, #8]
    53b0:	bd03      	pop	{r0, r1, pc}
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	00000019 	.word	0x00000019

000053b8 <__aeabi_uidivmod>:
    53b8:	2900      	cmp	r1, #0
    53ba:	d0f0      	beq.n	539e <.udivsi3_skip_div0_test+0x6a>
    53bc:	b503      	push	{r0, r1, lr}
    53be:	f7ff ffb9 	bl	5334 <.udivsi3_skip_div0_test>
    53c2:	bc0e      	pop	{r1, r2, r3}
    53c4:	4342      	muls	r2, r0
    53c6:	1a89      	subs	r1, r1, r2
    53c8:	4718      	bx	r3
    53ca:	46c0      	nop			; (mov r8, r8)

000053cc <__aeabi_idiv0>:
    53cc:	4770      	bx	lr
    53ce:	46c0      	nop			; (mov r8, r8)

000053d0 <__aeabi_lmul>:
    53d0:	469c      	mov	ip, r3
    53d2:	0403      	lsls	r3, r0, #16
    53d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53d6:	0c1b      	lsrs	r3, r3, #16
    53d8:	0417      	lsls	r7, r2, #16
    53da:	0c3f      	lsrs	r7, r7, #16
    53dc:	0c15      	lsrs	r5, r2, #16
    53de:	1c1e      	adds	r6, r3, #0
    53e0:	1c04      	adds	r4, r0, #0
    53e2:	0c00      	lsrs	r0, r0, #16
    53e4:	437e      	muls	r6, r7
    53e6:	436b      	muls	r3, r5
    53e8:	4347      	muls	r7, r0
    53ea:	4345      	muls	r5, r0
    53ec:	18fb      	adds	r3, r7, r3
    53ee:	0c30      	lsrs	r0, r6, #16
    53f0:	1818      	adds	r0, r3, r0
    53f2:	4287      	cmp	r7, r0
    53f4:	d902      	bls.n	53fc <__aeabi_lmul+0x2c>
    53f6:	2380      	movs	r3, #128	; 0x80
    53f8:	025b      	lsls	r3, r3, #9
    53fa:	18ed      	adds	r5, r5, r3
    53fc:	0c03      	lsrs	r3, r0, #16
    53fe:	18ed      	adds	r5, r5, r3
    5400:	4663      	mov	r3, ip
    5402:	435c      	muls	r4, r3
    5404:	434a      	muls	r2, r1
    5406:	0436      	lsls	r6, r6, #16
    5408:	0c36      	lsrs	r6, r6, #16
    540a:	18a1      	adds	r1, r4, r2
    540c:	0400      	lsls	r0, r0, #16
    540e:	1980      	adds	r0, r0, r6
    5410:	1949      	adds	r1, r1, r5
    5412:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005414 <__aeabi_f2iz>:
    5414:	0243      	lsls	r3, r0, #9
    5416:	0a59      	lsrs	r1, r3, #9
    5418:	0043      	lsls	r3, r0, #1
    541a:	0fc2      	lsrs	r2, r0, #31
    541c:	0e1b      	lsrs	r3, r3, #24
    541e:	2000      	movs	r0, #0
    5420:	2b7e      	cmp	r3, #126	; 0x7e
    5422:	dd0d      	ble.n	5440 <__aeabi_f2iz+0x2c>
    5424:	2b9d      	cmp	r3, #157	; 0x9d
    5426:	dc0c      	bgt.n	5442 <__aeabi_f2iz+0x2e>
    5428:	2080      	movs	r0, #128	; 0x80
    542a:	0400      	lsls	r0, r0, #16
    542c:	4301      	orrs	r1, r0
    542e:	2b95      	cmp	r3, #149	; 0x95
    5430:	dc0a      	bgt.n	5448 <__aeabi_f2iz+0x34>
    5432:	2096      	movs	r0, #150	; 0x96
    5434:	1ac3      	subs	r3, r0, r3
    5436:	40d9      	lsrs	r1, r3
    5438:	4248      	negs	r0, r1
    543a:	2a00      	cmp	r2, #0
    543c:	d100      	bne.n	5440 <__aeabi_f2iz+0x2c>
    543e:	1c08      	adds	r0, r1, #0
    5440:	4770      	bx	lr
    5442:	4b03      	ldr	r3, [pc, #12]	; (5450 <__aeabi_f2iz+0x3c>)
    5444:	18d0      	adds	r0, r2, r3
    5446:	e7fb      	b.n	5440 <__aeabi_f2iz+0x2c>
    5448:	3b96      	subs	r3, #150	; 0x96
    544a:	4099      	lsls	r1, r3
    544c:	e7f4      	b.n	5438 <__aeabi_f2iz+0x24>
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	7fffffff 	.word	0x7fffffff

00005454 <__aeabi_ui2f>:
    5454:	b510      	push	{r4, lr}
    5456:	1e04      	subs	r4, r0, #0
    5458:	d033      	beq.n	54c2 <__aeabi_ui2f+0x6e>
    545a:	f000 fedb 	bl	6214 <__clzsi2>
    545e:	239e      	movs	r3, #158	; 0x9e
    5460:	1a1b      	subs	r3, r3, r0
    5462:	2b96      	cmp	r3, #150	; 0x96
    5464:	dc09      	bgt.n	547a <__aeabi_ui2f+0x26>
    5466:	3808      	subs	r0, #8
    5468:	4084      	lsls	r4, r0
    546a:	0264      	lsls	r4, r4, #9
    546c:	0a64      	lsrs	r4, r4, #9
    546e:	b2db      	uxtb	r3, r3
    5470:	0264      	lsls	r4, r4, #9
    5472:	05db      	lsls	r3, r3, #23
    5474:	0a60      	lsrs	r0, r4, #9
    5476:	4318      	orrs	r0, r3
    5478:	bd10      	pop	{r4, pc}
    547a:	2b99      	cmp	r3, #153	; 0x99
    547c:	dd0a      	ble.n	5494 <__aeabi_ui2f+0x40>
    547e:	2205      	movs	r2, #5
    5480:	1a12      	subs	r2, r2, r0
    5482:	1c21      	adds	r1, r4, #0
    5484:	40d1      	lsrs	r1, r2
    5486:	1c0a      	adds	r2, r1, #0
    5488:	1c01      	adds	r1, r0, #0
    548a:	311b      	adds	r1, #27
    548c:	408c      	lsls	r4, r1
    548e:	1e61      	subs	r1, r4, #1
    5490:	418c      	sbcs	r4, r1
    5492:	4314      	orrs	r4, r2
    5494:	2805      	cmp	r0, #5
    5496:	dd01      	ble.n	549c <__aeabi_ui2f+0x48>
    5498:	1f42      	subs	r2, r0, #5
    549a:	4094      	lsls	r4, r2
    549c:	4a14      	ldr	r2, [pc, #80]	; (54f0 <__aeabi_ui2f+0x9c>)
    549e:	4022      	ands	r2, r4
    54a0:	0761      	lsls	r1, r4, #29
    54a2:	d004      	beq.n	54ae <__aeabi_ui2f+0x5a>
    54a4:	210f      	movs	r1, #15
    54a6:	400c      	ands	r4, r1
    54a8:	2c04      	cmp	r4, #4
    54aa:	d000      	beq.n	54ae <__aeabi_ui2f+0x5a>
    54ac:	3204      	adds	r2, #4
    54ae:	0151      	lsls	r1, r2, #5
    54b0:	d50a      	bpl.n	54c8 <__aeabi_ui2f+0x74>
    54b2:	239f      	movs	r3, #159	; 0x9f
    54b4:	1a18      	subs	r0, r3, r0
    54b6:	28ff      	cmp	r0, #255	; 0xff
    54b8:	d016      	beq.n	54e8 <__aeabi_ui2f+0x94>
    54ba:	0194      	lsls	r4, r2, #6
    54bc:	0a64      	lsrs	r4, r4, #9
    54be:	b2c3      	uxtb	r3, r0
    54c0:	e7d6      	b.n	5470 <__aeabi_ui2f+0x1c>
    54c2:	2300      	movs	r3, #0
    54c4:	2400      	movs	r4, #0
    54c6:	e7d3      	b.n	5470 <__aeabi_ui2f+0x1c>
    54c8:	08d2      	lsrs	r2, r2, #3
    54ca:	2bff      	cmp	r3, #255	; 0xff
    54cc:	d003      	beq.n	54d6 <__aeabi_ui2f+0x82>
    54ce:	0254      	lsls	r4, r2, #9
    54d0:	0a64      	lsrs	r4, r4, #9
    54d2:	b2db      	uxtb	r3, r3
    54d4:	e7cc      	b.n	5470 <__aeabi_ui2f+0x1c>
    54d6:	2a00      	cmp	r2, #0
    54d8:	d006      	beq.n	54e8 <__aeabi_ui2f+0x94>
    54da:	2480      	movs	r4, #128	; 0x80
    54dc:	03e4      	lsls	r4, r4, #15
    54de:	4314      	orrs	r4, r2
    54e0:	0264      	lsls	r4, r4, #9
    54e2:	0a64      	lsrs	r4, r4, #9
    54e4:	23ff      	movs	r3, #255	; 0xff
    54e6:	e7c3      	b.n	5470 <__aeabi_ui2f+0x1c>
    54e8:	23ff      	movs	r3, #255	; 0xff
    54ea:	2400      	movs	r4, #0
    54ec:	e7c0      	b.n	5470 <__aeabi_ui2f+0x1c>
    54ee:	46c0      	nop			; (mov r8, r8)
    54f0:	fbffffff 	.word	0xfbffffff

000054f4 <__aeabi_dadd>:
    54f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54f6:	465f      	mov	r7, fp
    54f8:	4656      	mov	r6, sl
    54fa:	4644      	mov	r4, r8
    54fc:	464d      	mov	r5, r9
    54fe:	b4f0      	push	{r4, r5, r6, r7}
    5500:	030c      	lsls	r4, r1, #12
    5502:	004d      	lsls	r5, r1, #1
    5504:	0fce      	lsrs	r6, r1, #31
    5506:	0a61      	lsrs	r1, r4, #9
    5508:	0f44      	lsrs	r4, r0, #29
    550a:	4321      	orrs	r1, r4
    550c:	00c4      	lsls	r4, r0, #3
    550e:	0318      	lsls	r0, r3, #12
    5510:	4680      	mov	r8, r0
    5512:	0058      	lsls	r0, r3, #1
    5514:	0d40      	lsrs	r0, r0, #21
    5516:	4682      	mov	sl, r0
    5518:	0fd8      	lsrs	r0, r3, #31
    551a:	4684      	mov	ip, r0
    551c:	4640      	mov	r0, r8
    551e:	0a40      	lsrs	r0, r0, #9
    5520:	0f53      	lsrs	r3, r2, #29
    5522:	4303      	orrs	r3, r0
    5524:	00d0      	lsls	r0, r2, #3
    5526:	0d6d      	lsrs	r5, r5, #21
    5528:	1c37      	adds	r7, r6, #0
    552a:	4683      	mov	fp, r0
    552c:	4652      	mov	r2, sl
    552e:	4566      	cmp	r6, ip
    5530:	d100      	bne.n	5534 <__aeabi_dadd+0x40>
    5532:	e0a4      	b.n	567e <__aeabi_dadd+0x18a>
    5534:	1aaf      	subs	r7, r5, r2
    5536:	2f00      	cmp	r7, #0
    5538:	dc00      	bgt.n	553c <__aeabi_dadd+0x48>
    553a:	e109      	b.n	5750 <__aeabi_dadd+0x25c>
    553c:	2a00      	cmp	r2, #0
    553e:	d13b      	bne.n	55b8 <__aeabi_dadd+0xc4>
    5540:	4318      	orrs	r0, r3
    5542:	d000      	beq.n	5546 <__aeabi_dadd+0x52>
    5544:	e0ea      	b.n	571c <__aeabi_dadd+0x228>
    5546:	0763      	lsls	r3, r4, #29
    5548:	d100      	bne.n	554c <__aeabi_dadd+0x58>
    554a:	e087      	b.n	565c <__aeabi_dadd+0x168>
    554c:	230f      	movs	r3, #15
    554e:	4023      	ands	r3, r4
    5550:	2b04      	cmp	r3, #4
    5552:	d100      	bne.n	5556 <__aeabi_dadd+0x62>
    5554:	e082      	b.n	565c <__aeabi_dadd+0x168>
    5556:	1d22      	adds	r2, r4, #4
    5558:	42a2      	cmp	r2, r4
    555a:	41a4      	sbcs	r4, r4
    555c:	4264      	negs	r4, r4
    555e:	2380      	movs	r3, #128	; 0x80
    5560:	1909      	adds	r1, r1, r4
    5562:	041b      	lsls	r3, r3, #16
    5564:	400b      	ands	r3, r1
    5566:	1c37      	adds	r7, r6, #0
    5568:	1c14      	adds	r4, r2, #0
    556a:	2b00      	cmp	r3, #0
    556c:	d100      	bne.n	5570 <__aeabi_dadd+0x7c>
    556e:	e07c      	b.n	566a <__aeabi_dadd+0x176>
    5570:	4bce      	ldr	r3, [pc, #824]	; (58ac <__aeabi_dadd+0x3b8>)
    5572:	3501      	adds	r5, #1
    5574:	429d      	cmp	r5, r3
    5576:	d100      	bne.n	557a <__aeabi_dadd+0x86>
    5578:	e105      	b.n	5786 <__aeabi_dadd+0x292>
    557a:	4bcd      	ldr	r3, [pc, #820]	; (58b0 <__aeabi_dadd+0x3bc>)
    557c:	08e4      	lsrs	r4, r4, #3
    557e:	4019      	ands	r1, r3
    5580:	0748      	lsls	r0, r1, #29
    5582:	0249      	lsls	r1, r1, #9
    5584:	4304      	orrs	r4, r0
    5586:	0b0b      	lsrs	r3, r1, #12
    5588:	2000      	movs	r0, #0
    558a:	2100      	movs	r1, #0
    558c:	031b      	lsls	r3, r3, #12
    558e:	0b1a      	lsrs	r2, r3, #12
    5590:	0d0b      	lsrs	r3, r1, #20
    5592:	056d      	lsls	r5, r5, #21
    5594:	051b      	lsls	r3, r3, #20
    5596:	4313      	orrs	r3, r2
    5598:	086a      	lsrs	r2, r5, #1
    559a:	4dc6      	ldr	r5, [pc, #792]	; (58b4 <__aeabi_dadd+0x3c0>)
    559c:	07ff      	lsls	r7, r7, #31
    559e:	401d      	ands	r5, r3
    55a0:	4315      	orrs	r5, r2
    55a2:	006d      	lsls	r5, r5, #1
    55a4:	086d      	lsrs	r5, r5, #1
    55a6:	1c29      	adds	r1, r5, #0
    55a8:	4339      	orrs	r1, r7
    55aa:	1c20      	adds	r0, r4, #0
    55ac:	bc3c      	pop	{r2, r3, r4, r5}
    55ae:	4690      	mov	r8, r2
    55b0:	4699      	mov	r9, r3
    55b2:	46a2      	mov	sl, r4
    55b4:	46ab      	mov	fp, r5
    55b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55b8:	48bc      	ldr	r0, [pc, #752]	; (58ac <__aeabi_dadd+0x3b8>)
    55ba:	4285      	cmp	r5, r0
    55bc:	d0c3      	beq.n	5546 <__aeabi_dadd+0x52>
    55be:	2080      	movs	r0, #128	; 0x80
    55c0:	0400      	lsls	r0, r0, #16
    55c2:	4303      	orrs	r3, r0
    55c4:	2f38      	cmp	r7, #56	; 0x38
    55c6:	dd00      	ble.n	55ca <__aeabi_dadd+0xd6>
    55c8:	e0f0      	b.n	57ac <__aeabi_dadd+0x2b8>
    55ca:	2f1f      	cmp	r7, #31
    55cc:	dd00      	ble.n	55d0 <__aeabi_dadd+0xdc>
    55ce:	e124      	b.n	581a <__aeabi_dadd+0x326>
    55d0:	2020      	movs	r0, #32
    55d2:	1bc0      	subs	r0, r0, r7
    55d4:	1c1a      	adds	r2, r3, #0
    55d6:	4681      	mov	r9, r0
    55d8:	4082      	lsls	r2, r0
    55da:	4658      	mov	r0, fp
    55dc:	40f8      	lsrs	r0, r7
    55de:	4302      	orrs	r2, r0
    55e0:	4694      	mov	ip, r2
    55e2:	4658      	mov	r0, fp
    55e4:	464a      	mov	r2, r9
    55e6:	4090      	lsls	r0, r2
    55e8:	1e42      	subs	r2, r0, #1
    55ea:	4190      	sbcs	r0, r2
    55ec:	40fb      	lsrs	r3, r7
    55ee:	4662      	mov	r2, ip
    55f0:	4302      	orrs	r2, r0
    55f2:	1c1f      	adds	r7, r3, #0
    55f4:	1aa2      	subs	r2, r4, r2
    55f6:	4294      	cmp	r4, r2
    55f8:	41a4      	sbcs	r4, r4
    55fa:	4264      	negs	r4, r4
    55fc:	1bc9      	subs	r1, r1, r7
    55fe:	1b09      	subs	r1, r1, r4
    5600:	1c14      	adds	r4, r2, #0
    5602:	020b      	lsls	r3, r1, #8
    5604:	d59f      	bpl.n	5546 <__aeabi_dadd+0x52>
    5606:	0249      	lsls	r1, r1, #9
    5608:	0a4f      	lsrs	r7, r1, #9
    560a:	2f00      	cmp	r7, #0
    560c:	d100      	bne.n	5610 <__aeabi_dadd+0x11c>
    560e:	e0c8      	b.n	57a2 <__aeabi_dadd+0x2ae>
    5610:	1c38      	adds	r0, r7, #0
    5612:	f000 fdff 	bl	6214 <__clzsi2>
    5616:	1c02      	adds	r2, r0, #0
    5618:	3a08      	subs	r2, #8
    561a:	2a1f      	cmp	r2, #31
    561c:	dd00      	ble.n	5620 <__aeabi_dadd+0x12c>
    561e:	e0b5      	b.n	578c <__aeabi_dadd+0x298>
    5620:	2128      	movs	r1, #40	; 0x28
    5622:	1a09      	subs	r1, r1, r0
    5624:	1c20      	adds	r0, r4, #0
    5626:	4097      	lsls	r7, r2
    5628:	40c8      	lsrs	r0, r1
    562a:	4307      	orrs	r7, r0
    562c:	4094      	lsls	r4, r2
    562e:	4295      	cmp	r5, r2
    5630:	dd00      	ble.n	5634 <__aeabi_dadd+0x140>
    5632:	e0b2      	b.n	579a <__aeabi_dadd+0x2a6>
    5634:	1b55      	subs	r5, r2, r5
    5636:	1c69      	adds	r1, r5, #1
    5638:	291f      	cmp	r1, #31
    563a:	dd00      	ble.n	563e <__aeabi_dadd+0x14a>
    563c:	e0dc      	b.n	57f8 <__aeabi_dadd+0x304>
    563e:	221f      	movs	r2, #31
    5640:	1b55      	subs	r5, r2, r5
    5642:	1c3b      	adds	r3, r7, #0
    5644:	1c22      	adds	r2, r4, #0
    5646:	40ab      	lsls	r3, r5
    5648:	40ca      	lsrs	r2, r1
    564a:	40ac      	lsls	r4, r5
    564c:	1e65      	subs	r5, r4, #1
    564e:	41ac      	sbcs	r4, r5
    5650:	4313      	orrs	r3, r2
    5652:	40cf      	lsrs	r7, r1
    5654:	431c      	orrs	r4, r3
    5656:	1c39      	adds	r1, r7, #0
    5658:	2500      	movs	r5, #0
    565a:	e774      	b.n	5546 <__aeabi_dadd+0x52>
    565c:	2380      	movs	r3, #128	; 0x80
    565e:	041b      	lsls	r3, r3, #16
    5660:	400b      	ands	r3, r1
    5662:	1c37      	adds	r7, r6, #0
    5664:	2b00      	cmp	r3, #0
    5666:	d000      	beq.n	566a <__aeabi_dadd+0x176>
    5668:	e782      	b.n	5570 <__aeabi_dadd+0x7c>
    566a:	4b90      	ldr	r3, [pc, #576]	; (58ac <__aeabi_dadd+0x3b8>)
    566c:	0748      	lsls	r0, r1, #29
    566e:	08e4      	lsrs	r4, r4, #3
    5670:	4304      	orrs	r4, r0
    5672:	08c9      	lsrs	r1, r1, #3
    5674:	429d      	cmp	r5, r3
    5676:	d048      	beq.n	570a <__aeabi_dadd+0x216>
    5678:	0309      	lsls	r1, r1, #12
    567a:	0b0b      	lsrs	r3, r1, #12
    567c:	e784      	b.n	5588 <__aeabi_dadd+0x94>
    567e:	1aaa      	subs	r2, r5, r2
    5680:	4694      	mov	ip, r2
    5682:	2a00      	cmp	r2, #0
    5684:	dc00      	bgt.n	5688 <__aeabi_dadd+0x194>
    5686:	e098      	b.n	57ba <__aeabi_dadd+0x2c6>
    5688:	4650      	mov	r0, sl
    568a:	2800      	cmp	r0, #0
    568c:	d052      	beq.n	5734 <__aeabi_dadd+0x240>
    568e:	4887      	ldr	r0, [pc, #540]	; (58ac <__aeabi_dadd+0x3b8>)
    5690:	4285      	cmp	r5, r0
    5692:	d100      	bne.n	5696 <__aeabi_dadd+0x1a2>
    5694:	e757      	b.n	5546 <__aeabi_dadd+0x52>
    5696:	2080      	movs	r0, #128	; 0x80
    5698:	0400      	lsls	r0, r0, #16
    569a:	4303      	orrs	r3, r0
    569c:	4662      	mov	r2, ip
    569e:	2a38      	cmp	r2, #56	; 0x38
    56a0:	dd00      	ble.n	56a4 <__aeabi_dadd+0x1b0>
    56a2:	e0fc      	b.n	589e <__aeabi_dadd+0x3aa>
    56a4:	2a1f      	cmp	r2, #31
    56a6:	dd00      	ble.n	56aa <__aeabi_dadd+0x1b6>
    56a8:	e14a      	b.n	5940 <__aeabi_dadd+0x44c>
    56aa:	2220      	movs	r2, #32
    56ac:	4660      	mov	r0, ip
    56ae:	1a10      	subs	r0, r2, r0
    56b0:	1c1a      	adds	r2, r3, #0
    56b2:	4082      	lsls	r2, r0
    56b4:	4682      	mov	sl, r0
    56b6:	4691      	mov	r9, r2
    56b8:	4658      	mov	r0, fp
    56ba:	4662      	mov	r2, ip
    56bc:	40d0      	lsrs	r0, r2
    56be:	464a      	mov	r2, r9
    56c0:	4302      	orrs	r2, r0
    56c2:	4690      	mov	r8, r2
    56c4:	4658      	mov	r0, fp
    56c6:	4652      	mov	r2, sl
    56c8:	4090      	lsls	r0, r2
    56ca:	1e42      	subs	r2, r0, #1
    56cc:	4190      	sbcs	r0, r2
    56ce:	4642      	mov	r2, r8
    56d0:	4302      	orrs	r2, r0
    56d2:	4660      	mov	r0, ip
    56d4:	40c3      	lsrs	r3, r0
    56d6:	1912      	adds	r2, r2, r4
    56d8:	42a2      	cmp	r2, r4
    56da:	41a4      	sbcs	r4, r4
    56dc:	4264      	negs	r4, r4
    56de:	1859      	adds	r1, r3, r1
    56e0:	1909      	adds	r1, r1, r4
    56e2:	1c14      	adds	r4, r2, #0
    56e4:	0208      	lsls	r0, r1, #8
    56e6:	d400      	bmi.n	56ea <__aeabi_dadd+0x1f6>
    56e8:	e72d      	b.n	5546 <__aeabi_dadd+0x52>
    56ea:	4b70      	ldr	r3, [pc, #448]	; (58ac <__aeabi_dadd+0x3b8>)
    56ec:	3501      	adds	r5, #1
    56ee:	429d      	cmp	r5, r3
    56f0:	d100      	bne.n	56f4 <__aeabi_dadd+0x200>
    56f2:	e122      	b.n	593a <__aeabi_dadd+0x446>
    56f4:	4b6e      	ldr	r3, [pc, #440]	; (58b0 <__aeabi_dadd+0x3bc>)
    56f6:	0860      	lsrs	r0, r4, #1
    56f8:	4019      	ands	r1, r3
    56fa:	2301      	movs	r3, #1
    56fc:	4023      	ands	r3, r4
    56fe:	1c1c      	adds	r4, r3, #0
    5700:	4304      	orrs	r4, r0
    5702:	07cb      	lsls	r3, r1, #31
    5704:	431c      	orrs	r4, r3
    5706:	0849      	lsrs	r1, r1, #1
    5708:	e71d      	b.n	5546 <__aeabi_dadd+0x52>
    570a:	1c23      	adds	r3, r4, #0
    570c:	430b      	orrs	r3, r1
    570e:	d03a      	beq.n	5786 <__aeabi_dadd+0x292>
    5710:	2380      	movs	r3, #128	; 0x80
    5712:	031b      	lsls	r3, r3, #12
    5714:	430b      	orrs	r3, r1
    5716:	031b      	lsls	r3, r3, #12
    5718:	0b1b      	lsrs	r3, r3, #12
    571a:	e735      	b.n	5588 <__aeabi_dadd+0x94>
    571c:	3f01      	subs	r7, #1
    571e:	2f00      	cmp	r7, #0
    5720:	d165      	bne.n	57ee <__aeabi_dadd+0x2fa>
    5722:	4658      	mov	r0, fp
    5724:	1a22      	subs	r2, r4, r0
    5726:	4294      	cmp	r4, r2
    5728:	41a4      	sbcs	r4, r4
    572a:	4264      	negs	r4, r4
    572c:	1ac9      	subs	r1, r1, r3
    572e:	1b09      	subs	r1, r1, r4
    5730:	1c14      	adds	r4, r2, #0
    5732:	e766      	b.n	5602 <__aeabi_dadd+0x10e>
    5734:	4658      	mov	r0, fp
    5736:	4318      	orrs	r0, r3
    5738:	d100      	bne.n	573c <__aeabi_dadd+0x248>
    573a:	e704      	b.n	5546 <__aeabi_dadd+0x52>
    573c:	2201      	movs	r2, #1
    573e:	4252      	negs	r2, r2
    5740:	4494      	add	ip, r2
    5742:	4660      	mov	r0, ip
    5744:	2800      	cmp	r0, #0
    5746:	d000      	beq.n	574a <__aeabi_dadd+0x256>
    5748:	e0c5      	b.n	58d6 <__aeabi_dadd+0x3e2>
    574a:	4658      	mov	r0, fp
    574c:	1902      	adds	r2, r0, r4
    574e:	e7c3      	b.n	56d8 <__aeabi_dadd+0x1e4>
    5750:	2f00      	cmp	r7, #0
    5752:	d173      	bne.n	583c <__aeabi_dadd+0x348>
    5754:	1c68      	adds	r0, r5, #1
    5756:	0540      	lsls	r0, r0, #21
    5758:	0d40      	lsrs	r0, r0, #21
    575a:	2801      	cmp	r0, #1
    575c:	dc00      	bgt.n	5760 <__aeabi_dadd+0x26c>
    575e:	e0de      	b.n	591e <__aeabi_dadd+0x42a>
    5760:	465a      	mov	r2, fp
    5762:	1aa2      	subs	r2, r4, r2
    5764:	4294      	cmp	r4, r2
    5766:	41bf      	sbcs	r7, r7
    5768:	1ac8      	subs	r0, r1, r3
    576a:	427f      	negs	r7, r7
    576c:	1bc7      	subs	r7, r0, r7
    576e:	0238      	lsls	r0, r7, #8
    5770:	d400      	bmi.n	5774 <__aeabi_dadd+0x280>
    5772:	e089      	b.n	5888 <__aeabi_dadd+0x394>
    5774:	465a      	mov	r2, fp
    5776:	1b14      	subs	r4, r2, r4
    5778:	45a3      	cmp	fp, r4
    577a:	4192      	sbcs	r2, r2
    577c:	1a59      	subs	r1, r3, r1
    577e:	4252      	negs	r2, r2
    5780:	1a8f      	subs	r7, r1, r2
    5782:	4666      	mov	r6, ip
    5784:	e741      	b.n	560a <__aeabi_dadd+0x116>
    5786:	2300      	movs	r3, #0
    5788:	2400      	movs	r4, #0
    578a:	e6fd      	b.n	5588 <__aeabi_dadd+0x94>
    578c:	1c27      	adds	r7, r4, #0
    578e:	3828      	subs	r0, #40	; 0x28
    5790:	4087      	lsls	r7, r0
    5792:	2400      	movs	r4, #0
    5794:	4295      	cmp	r5, r2
    5796:	dc00      	bgt.n	579a <__aeabi_dadd+0x2a6>
    5798:	e74c      	b.n	5634 <__aeabi_dadd+0x140>
    579a:	4945      	ldr	r1, [pc, #276]	; (58b0 <__aeabi_dadd+0x3bc>)
    579c:	1aad      	subs	r5, r5, r2
    579e:	4039      	ands	r1, r7
    57a0:	e6d1      	b.n	5546 <__aeabi_dadd+0x52>
    57a2:	1c20      	adds	r0, r4, #0
    57a4:	f000 fd36 	bl	6214 <__clzsi2>
    57a8:	3020      	adds	r0, #32
    57aa:	e734      	b.n	5616 <__aeabi_dadd+0x122>
    57ac:	465a      	mov	r2, fp
    57ae:	431a      	orrs	r2, r3
    57b0:	1e53      	subs	r3, r2, #1
    57b2:	419a      	sbcs	r2, r3
    57b4:	b2d2      	uxtb	r2, r2
    57b6:	2700      	movs	r7, #0
    57b8:	e71c      	b.n	55f4 <__aeabi_dadd+0x100>
    57ba:	2a00      	cmp	r2, #0
    57bc:	d000      	beq.n	57c0 <__aeabi_dadd+0x2cc>
    57be:	e0dc      	b.n	597a <__aeabi_dadd+0x486>
    57c0:	1c68      	adds	r0, r5, #1
    57c2:	0542      	lsls	r2, r0, #21
    57c4:	0d52      	lsrs	r2, r2, #21
    57c6:	2a01      	cmp	r2, #1
    57c8:	dc00      	bgt.n	57cc <__aeabi_dadd+0x2d8>
    57ca:	e08d      	b.n	58e8 <__aeabi_dadd+0x3f4>
    57cc:	4d37      	ldr	r5, [pc, #220]	; (58ac <__aeabi_dadd+0x3b8>)
    57ce:	42a8      	cmp	r0, r5
    57d0:	d100      	bne.n	57d4 <__aeabi_dadd+0x2e0>
    57d2:	e0f3      	b.n	59bc <__aeabi_dadd+0x4c8>
    57d4:	465d      	mov	r5, fp
    57d6:	192a      	adds	r2, r5, r4
    57d8:	42a2      	cmp	r2, r4
    57da:	41a4      	sbcs	r4, r4
    57dc:	4264      	negs	r4, r4
    57de:	1859      	adds	r1, r3, r1
    57e0:	1909      	adds	r1, r1, r4
    57e2:	07cc      	lsls	r4, r1, #31
    57e4:	0852      	lsrs	r2, r2, #1
    57e6:	4314      	orrs	r4, r2
    57e8:	0849      	lsrs	r1, r1, #1
    57ea:	1c05      	adds	r5, r0, #0
    57ec:	e6ab      	b.n	5546 <__aeabi_dadd+0x52>
    57ee:	482f      	ldr	r0, [pc, #188]	; (58ac <__aeabi_dadd+0x3b8>)
    57f0:	4285      	cmp	r5, r0
    57f2:	d000      	beq.n	57f6 <__aeabi_dadd+0x302>
    57f4:	e6e6      	b.n	55c4 <__aeabi_dadd+0xd0>
    57f6:	e6a6      	b.n	5546 <__aeabi_dadd+0x52>
    57f8:	1c2b      	adds	r3, r5, #0
    57fa:	3b1f      	subs	r3, #31
    57fc:	1c3a      	adds	r2, r7, #0
    57fe:	40da      	lsrs	r2, r3
    5800:	1c13      	adds	r3, r2, #0
    5802:	2920      	cmp	r1, #32
    5804:	d06c      	beq.n	58e0 <__aeabi_dadd+0x3ec>
    5806:	223f      	movs	r2, #63	; 0x3f
    5808:	1b55      	subs	r5, r2, r5
    580a:	40af      	lsls	r7, r5
    580c:	433c      	orrs	r4, r7
    580e:	1e60      	subs	r0, r4, #1
    5810:	4184      	sbcs	r4, r0
    5812:	431c      	orrs	r4, r3
    5814:	2100      	movs	r1, #0
    5816:	2500      	movs	r5, #0
    5818:	e695      	b.n	5546 <__aeabi_dadd+0x52>
    581a:	1c38      	adds	r0, r7, #0
    581c:	3820      	subs	r0, #32
    581e:	1c1a      	adds	r2, r3, #0
    5820:	40c2      	lsrs	r2, r0
    5822:	1c10      	adds	r0, r2, #0
    5824:	2f20      	cmp	r7, #32
    5826:	d05d      	beq.n	58e4 <__aeabi_dadd+0x3f0>
    5828:	2240      	movs	r2, #64	; 0x40
    582a:	1bd7      	subs	r7, r2, r7
    582c:	40bb      	lsls	r3, r7
    582e:	465a      	mov	r2, fp
    5830:	431a      	orrs	r2, r3
    5832:	1e53      	subs	r3, r2, #1
    5834:	419a      	sbcs	r2, r3
    5836:	4302      	orrs	r2, r0
    5838:	2700      	movs	r7, #0
    583a:	e6db      	b.n	55f4 <__aeabi_dadd+0x100>
    583c:	2d00      	cmp	r5, #0
    583e:	d03b      	beq.n	58b8 <__aeabi_dadd+0x3c4>
    5840:	4d1a      	ldr	r5, [pc, #104]	; (58ac <__aeabi_dadd+0x3b8>)
    5842:	45aa      	cmp	sl, r5
    5844:	d100      	bne.n	5848 <__aeabi_dadd+0x354>
    5846:	e093      	b.n	5970 <__aeabi_dadd+0x47c>
    5848:	2580      	movs	r5, #128	; 0x80
    584a:	042d      	lsls	r5, r5, #16
    584c:	427f      	negs	r7, r7
    584e:	4329      	orrs	r1, r5
    5850:	2f38      	cmp	r7, #56	; 0x38
    5852:	dd00      	ble.n	5856 <__aeabi_dadd+0x362>
    5854:	e0ac      	b.n	59b0 <__aeabi_dadd+0x4bc>
    5856:	2f1f      	cmp	r7, #31
    5858:	dd00      	ble.n	585c <__aeabi_dadd+0x368>
    585a:	e129      	b.n	5ab0 <__aeabi_dadd+0x5bc>
    585c:	2520      	movs	r5, #32
    585e:	1bed      	subs	r5, r5, r7
    5860:	1c08      	adds	r0, r1, #0
    5862:	1c26      	adds	r6, r4, #0
    5864:	40a8      	lsls	r0, r5
    5866:	40fe      	lsrs	r6, r7
    5868:	40ac      	lsls	r4, r5
    586a:	4306      	orrs	r6, r0
    586c:	1e65      	subs	r5, r4, #1
    586e:	41ac      	sbcs	r4, r5
    5870:	4334      	orrs	r4, r6
    5872:	40f9      	lsrs	r1, r7
    5874:	465d      	mov	r5, fp
    5876:	1b2c      	subs	r4, r5, r4
    5878:	45a3      	cmp	fp, r4
    587a:	4192      	sbcs	r2, r2
    587c:	1a5b      	subs	r3, r3, r1
    587e:	4252      	negs	r2, r2
    5880:	1a99      	subs	r1, r3, r2
    5882:	4655      	mov	r5, sl
    5884:	4666      	mov	r6, ip
    5886:	e6bc      	b.n	5602 <__aeabi_dadd+0x10e>
    5888:	1c13      	adds	r3, r2, #0
    588a:	433b      	orrs	r3, r7
    588c:	1c14      	adds	r4, r2, #0
    588e:	2b00      	cmp	r3, #0
    5890:	d000      	beq.n	5894 <__aeabi_dadd+0x3a0>
    5892:	e6ba      	b.n	560a <__aeabi_dadd+0x116>
    5894:	2700      	movs	r7, #0
    5896:	2100      	movs	r1, #0
    5898:	2500      	movs	r5, #0
    589a:	2400      	movs	r4, #0
    589c:	e6e5      	b.n	566a <__aeabi_dadd+0x176>
    589e:	465a      	mov	r2, fp
    58a0:	431a      	orrs	r2, r3
    58a2:	1e53      	subs	r3, r2, #1
    58a4:	419a      	sbcs	r2, r3
    58a6:	b2d2      	uxtb	r2, r2
    58a8:	2300      	movs	r3, #0
    58aa:	e714      	b.n	56d6 <__aeabi_dadd+0x1e2>
    58ac:	000007ff 	.word	0x000007ff
    58b0:	ff7fffff 	.word	0xff7fffff
    58b4:	800fffff 	.word	0x800fffff
    58b8:	1c0d      	adds	r5, r1, #0
    58ba:	4325      	orrs	r5, r4
    58bc:	d058      	beq.n	5970 <__aeabi_dadd+0x47c>
    58be:	43ff      	mvns	r7, r7
    58c0:	2f00      	cmp	r7, #0
    58c2:	d151      	bne.n	5968 <__aeabi_dadd+0x474>
    58c4:	1b04      	subs	r4, r0, r4
    58c6:	45a3      	cmp	fp, r4
    58c8:	4192      	sbcs	r2, r2
    58ca:	1a59      	subs	r1, r3, r1
    58cc:	4252      	negs	r2, r2
    58ce:	1a89      	subs	r1, r1, r2
    58d0:	4655      	mov	r5, sl
    58d2:	4666      	mov	r6, ip
    58d4:	e695      	b.n	5602 <__aeabi_dadd+0x10e>
    58d6:	4896      	ldr	r0, [pc, #600]	; (5b30 <__aeabi_dadd+0x63c>)
    58d8:	4285      	cmp	r5, r0
    58da:	d000      	beq.n	58de <__aeabi_dadd+0x3ea>
    58dc:	e6de      	b.n	569c <__aeabi_dadd+0x1a8>
    58de:	e632      	b.n	5546 <__aeabi_dadd+0x52>
    58e0:	2700      	movs	r7, #0
    58e2:	e793      	b.n	580c <__aeabi_dadd+0x318>
    58e4:	2300      	movs	r3, #0
    58e6:	e7a2      	b.n	582e <__aeabi_dadd+0x33a>
    58e8:	1c08      	adds	r0, r1, #0
    58ea:	4320      	orrs	r0, r4
    58ec:	2d00      	cmp	r5, #0
    58ee:	d000      	beq.n	58f2 <__aeabi_dadd+0x3fe>
    58f0:	e0c4      	b.n	5a7c <__aeabi_dadd+0x588>
    58f2:	2800      	cmp	r0, #0
    58f4:	d100      	bne.n	58f8 <__aeabi_dadd+0x404>
    58f6:	e0f7      	b.n	5ae8 <__aeabi_dadd+0x5f4>
    58f8:	4658      	mov	r0, fp
    58fa:	4318      	orrs	r0, r3
    58fc:	d100      	bne.n	5900 <__aeabi_dadd+0x40c>
    58fe:	e622      	b.n	5546 <__aeabi_dadd+0x52>
    5900:	4658      	mov	r0, fp
    5902:	1902      	adds	r2, r0, r4
    5904:	42a2      	cmp	r2, r4
    5906:	41a4      	sbcs	r4, r4
    5908:	4264      	negs	r4, r4
    590a:	1859      	adds	r1, r3, r1
    590c:	1909      	adds	r1, r1, r4
    590e:	1c14      	adds	r4, r2, #0
    5910:	020a      	lsls	r2, r1, #8
    5912:	d400      	bmi.n	5916 <__aeabi_dadd+0x422>
    5914:	e617      	b.n	5546 <__aeabi_dadd+0x52>
    5916:	4b87      	ldr	r3, [pc, #540]	; (5b34 <__aeabi_dadd+0x640>)
    5918:	2501      	movs	r5, #1
    591a:	4019      	ands	r1, r3
    591c:	e613      	b.n	5546 <__aeabi_dadd+0x52>
    591e:	1c08      	adds	r0, r1, #0
    5920:	4320      	orrs	r0, r4
    5922:	2d00      	cmp	r5, #0
    5924:	d139      	bne.n	599a <__aeabi_dadd+0x4a6>
    5926:	2800      	cmp	r0, #0
    5928:	d171      	bne.n	5a0e <__aeabi_dadd+0x51a>
    592a:	4659      	mov	r1, fp
    592c:	4319      	orrs	r1, r3
    592e:	d003      	beq.n	5938 <__aeabi_dadd+0x444>
    5930:	1c19      	adds	r1, r3, #0
    5932:	465c      	mov	r4, fp
    5934:	4666      	mov	r6, ip
    5936:	e606      	b.n	5546 <__aeabi_dadd+0x52>
    5938:	2700      	movs	r7, #0
    593a:	2100      	movs	r1, #0
    593c:	2400      	movs	r4, #0
    593e:	e694      	b.n	566a <__aeabi_dadd+0x176>
    5940:	4660      	mov	r0, ip
    5942:	3820      	subs	r0, #32
    5944:	1c1a      	adds	r2, r3, #0
    5946:	40c2      	lsrs	r2, r0
    5948:	4660      	mov	r0, ip
    594a:	4691      	mov	r9, r2
    594c:	2820      	cmp	r0, #32
    594e:	d100      	bne.n	5952 <__aeabi_dadd+0x45e>
    5950:	e0ac      	b.n	5aac <__aeabi_dadd+0x5b8>
    5952:	2240      	movs	r2, #64	; 0x40
    5954:	1a12      	subs	r2, r2, r0
    5956:	4093      	lsls	r3, r2
    5958:	465a      	mov	r2, fp
    595a:	431a      	orrs	r2, r3
    595c:	1e53      	subs	r3, r2, #1
    595e:	419a      	sbcs	r2, r3
    5960:	464b      	mov	r3, r9
    5962:	431a      	orrs	r2, r3
    5964:	2300      	movs	r3, #0
    5966:	e6b6      	b.n	56d6 <__aeabi_dadd+0x1e2>
    5968:	4d71      	ldr	r5, [pc, #452]	; (5b30 <__aeabi_dadd+0x63c>)
    596a:	45aa      	cmp	sl, r5
    596c:	d000      	beq.n	5970 <__aeabi_dadd+0x47c>
    596e:	e76f      	b.n	5850 <__aeabi_dadd+0x35c>
    5970:	1c19      	adds	r1, r3, #0
    5972:	465c      	mov	r4, fp
    5974:	4655      	mov	r5, sl
    5976:	4666      	mov	r6, ip
    5978:	e5e5      	b.n	5546 <__aeabi_dadd+0x52>
    597a:	2d00      	cmp	r5, #0
    597c:	d122      	bne.n	59c4 <__aeabi_dadd+0x4d0>
    597e:	1c0d      	adds	r5, r1, #0
    5980:	4325      	orrs	r5, r4
    5982:	d077      	beq.n	5a74 <__aeabi_dadd+0x580>
    5984:	43d5      	mvns	r5, r2
    5986:	2d00      	cmp	r5, #0
    5988:	d171      	bne.n	5a6e <__aeabi_dadd+0x57a>
    598a:	445c      	add	r4, fp
    598c:	455c      	cmp	r4, fp
    598e:	4192      	sbcs	r2, r2
    5990:	1859      	adds	r1, r3, r1
    5992:	4252      	negs	r2, r2
    5994:	1889      	adds	r1, r1, r2
    5996:	4655      	mov	r5, sl
    5998:	e6a4      	b.n	56e4 <__aeabi_dadd+0x1f0>
    599a:	2800      	cmp	r0, #0
    599c:	d14d      	bne.n	5a3a <__aeabi_dadd+0x546>
    599e:	4659      	mov	r1, fp
    59a0:	4319      	orrs	r1, r3
    59a2:	d100      	bne.n	59a6 <__aeabi_dadd+0x4b2>
    59a4:	e094      	b.n	5ad0 <__aeabi_dadd+0x5dc>
    59a6:	1c19      	adds	r1, r3, #0
    59a8:	465c      	mov	r4, fp
    59aa:	4666      	mov	r6, ip
    59ac:	4d60      	ldr	r5, [pc, #384]	; (5b30 <__aeabi_dadd+0x63c>)
    59ae:	e5ca      	b.n	5546 <__aeabi_dadd+0x52>
    59b0:	430c      	orrs	r4, r1
    59b2:	1e61      	subs	r1, r4, #1
    59b4:	418c      	sbcs	r4, r1
    59b6:	b2e4      	uxtb	r4, r4
    59b8:	2100      	movs	r1, #0
    59ba:	e75b      	b.n	5874 <__aeabi_dadd+0x380>
    59bc:	1c05      	adds	r5, r0, #0
    59be:	2100      	movs	r1, #0
    59c0:	2400      	movs	r4, #0
    59c2:	e652      	b.n	566a <__aeabi_dadd+0x176>
    59c4:	4d5a      	ldr	r5, [pc, #360]	; (5b30 <__aeabi_dadd+0x63c>)
    59c6:	45aa      	cmp	sl, r5
    59c8:	d054      	beq.n	5a74 <__aeabi_dadd+0x580>
    59ca:	4255      	negs	r5, r2
    59cc:	2280      	movs	r2, #128	; 0x80
    59ce:	0410      	lsls	r0, r2, #16
    59d0:	4301      	orrs	r1, r0
    59d2:	2d38      	cmp	r5, #56	; 0x38
    59d4:	dd00      	ble.n	59d8 <__aeabi_dadd+0x4e4>
    59d6:	e081      	b.n	5adc <__aeabi_dadd+0x5e8>
    59d8:	2d1f      	cmp	r5, #31
    59da:	dd00      	ble.n	59de <__aeabi_dadd+0x4ea>
    59dc:	e092      	b.n	5b04 <__aeabi_dadd+0x610>
    59de:	2220      	movs	r2, #32
    59e0:	1b50      	subs	r0, r2, r5
    59e2:	1c0a      	adds	r2, r1, #0
    59e4:	4684      	mov	ip, r0
    59e6:	4082      	lsls	r2, r0
    59e8:	1c20      	adds	r0, r4, #0
    59ea:	40e8      	lsrs	r0, r5
    59ec:	4302      	orrs	r2, r0
    59ee:	4690      	mov	r8, r2
    59f0:	4662      	mov	r2, ip
    59f2:	4094      	lsls	r4, r2
    59f4:	1e60      	subs	r0, r4, #1
    59f6:	4184      	sbcs	r4, r0
    59f8:	4642      	mov	r2, r8
    59fa:	4314      	orrs	r4, r2
    59fc:	40e9      	lsrs	r1, r5
    59fe:	445c      	add	r4, fp
    5a00:	455c      	cmp	r4, fp
    5a02:	4192      	sbcs	r2, r2
    5a04:	18cb      	adds	r3, r1, r3
    5a06:	4252      	negs	r2, r2
    5a08:	1899      	adds	r1, r3, r2
    5a0a:	4655      	mov	r5, sl
    5a0c:	e66a      	b.n	56e4 <__aeabi_dadd+0x1f0>
    5a0e:	4658      	mov	r0, fp
    5a10:	4318      	orrs	r0, r3
    5a12:	d100      	bne.n	5a16 <__aeabi_dadd+0x522>
    5a14:	e597      	b.n	5546 <__aeabi_dadd+0x52>
    5a16:	4658      	mov	r0, fp
    5a18:	1a27      	subs	r7, r4, r0
    5a1a:	42bc      	cmp	r4, r7
    5a1c:	4192      	sbcs	r2, r2
    5a1e:	1ac8      	subs	r0, r1, r3
    5a20:	4252      	negs	r2, r2
    5a22:	1a80      	subs	r0, r0, r2
    5a24:	0202      	lsls	r2, r0, #8
    5a26:	d566      	bpl.n	5af6 <__aeabi_dadd+0x602>
    5a28:	4658      	mov	r0, fp
    5a2a:	1b04      	subs	r4, r0, r4
    5a2c:	45a3      	cmp	fp, r4
    5a2e:	4192      	sbcs	r2, r2
    5a30:	1a59      	subs	r1, r3, r1
    5a32:	4252      	negs	r2, r2
    5a34:	1a89      	subs	r1, r1, r2
    5a36:	4666      	mov	r6, ip
    5a38:	e585      	b.n	5546 <__aeabi_dadd+0x52>
    5a3a:	4658      	mov	r0, fp
    5a3c:	4318      	orrs	r0, r3
    5a3e:	d033      	beq.n	5aa8 <__aeabi_dadd+0x5b4>
    5a40:	0748      	lsls	r0, r1, #29
    5a42:	08e4      	lsrs	r4, r4, #3
    5a44:	4304      	orrs	r4, r0
    5a46:	2080      	movs	r0, #128	; 0x80
    5a48:	08c9      	lsrs	r1, r1, #3
    5a4a:	0300      	lsls	r0, r0, #12
    5a4c:	4201      	tst	r1, r0
    5a4e:	d008      	beq.n	5a62 <__aeabi_dadd+0x56e>
    5a50:	08dd      	lsrs	r5, r3, #3
    5a52:	4205      	tst	r5, r0
    5a54:	d105      	bne.n	5a62 <__aeabi_dadd+0x56e>
    5a56:	4659      	mov	r1, fp
    5a58:	08ca      	lsrs	r2, r1, #3
    5a5a:	075c      	lsls	r4, r3, #29
    5a5c:	4314      	orrs	r4, r2
    5a5e:	1c29      	adds	r1, r5, #0
    5a60:	4666      	mov	r6, ip
    5a62:	0f63      	lsrs	r3, r4, #29
    5a64:	00c9      	lsls	r1, r1, #3
    5a66:	4319      	orrs	r1, r3
    5a68:	00e4      	lsls	r4, r4, #3
    5a6a:	4d31      	ldr	r5, [pc, #196]	; (5b30 <__aeabi_dadd+0x63c>)
    5a6c:	e56b      	b.n	5546 <__aeabi_dadd+0x52>
    5a6e:	4a30      	ldr	r2, [pc, #192]	; (5b30 <__aeabi_dadd+0x63c>)
    5a70:	4592      	cmp	sl, r2
    5a72:	d1ae      	bne.n	59d2 <__aeabi_dadd+0x4de>
    5a74:	1c19      	adds	r1, r3, #0
    5a76:	465c      	mov	r4, fp
    5a78:	4655      	mov	r5, sl
    5a7a:	e564      	b.n	5546 <__aeabi_dadd+0x52>
    5a7c:	2800      	cmp	r0, #0
    5a7e:	d036      	beq.n	5aee <__aeabi_dadd+0x5fa>
    5a80:	4658      	mov	r0, fp
    5a82:	4318      	orrs	r0, r3
    5a84:	d010      	beq.n	5aa8 <__aeabi_dadd+0x5b4>
    5a86:	2580      	movs	r5, #128	; 0x80
    5a88:	0748      	lsls	r0, r1, #29
    5a8a:	08e4      	lsrs	r4, r4, #3
    5a8c:	08c9      	lsrs	r1, r1, #3
    5a8e:	032d      	lsls	r5, r5, #12
    5a90:	4304      	orrs	r4, r0
    5a92:	4229      	tst	r1, r5
    5a94:	d0e5      	beq.n	5a62 <__aeabi_dadd+0x56e>
    5a96:	08d8      	lsrs	r0, r3, #3
    5a98:	4228      	tst	r0, r5
    5a9a:	d1e2      	bne.n	5a62 <__aeabi_dadd+0x56e>
    5a9c:	465d      	mov	r5, fp
    5a9e:	08ea      	lsrs	r2, r5, #3
    5aa0:	075c      	lsls	r4, r3, #29
    5aa2:	4314      	orrs	r4, r2
    5aa4:	1c01      	adds	r1, r0, #0
    5aa6:	e7dc      	b.n	5a62 <__aeabi_dadd+0x56e>
    5aa8:	4d21      	ldr	r5, [pc, #132]	; (5b30 <__aeabi_dadd+0x63c>)
    5aaa:	e54c      	b.n	5546 <__aeabi_dadd+0x52>
    5aac:	2300      	movs	r3, #0
    5aae:	e753      	b.n	5958 <__aeabi_dadd+0x464>
    5ab0:	1c3d      	adds	r5, r7, #0
    5ab2:	3d20      	subs	r5, #32
    5ab4:	1c0a      	adds	r2, r1, #0
    5ab6:	40ea      	lsrs	r2, r5
    5ab8:	1c15      	adds	r5, r2, #0
    5aba:	2f20      	cmp	r7, #32
    5abc:	d034      	beq.n	5b28 <__aeabi_dadd+0x634>
    5abe:	2640      	movs	r6, #64	; 0x40
    5ac0:	1bf7      	subs	r7, r6, r7
    5ac2:	40b9      	lsls	r1, r7
    5ac4:	430c      	orrs	r4, r1
    5ac6:	1e61      	subs	r1, r4, #1
    5ac8:	418c      	sbcs	r4, r1
    5aca:	432c      	orrs	r4, r5
    5acc:	2100      	movs	r1, #0
    5ace:	e6d1      	b.n	5874 <__aeabi_dadd+0x380>
    5ad0:	2180      	movs	r1, #128	; 0x80
    5ad2:	2700      	movs	r7, #0
    5ad4:	03c9      	lsls	r1, r1, #15
    5ad6:	4d16      	ldr	r5, [pc, #88]	; (5b30 <__aeabi_dadd+0x63c>)
    5ad8:	2400      	movs	r4, #0
    5ada:	e5c6      	b.n	566a <__aeabi_dadd+0x176>
    5adc:	430c      	orrs	r4, r1
    5ade:	1e61      	subs	r1, r4, #1
    5ae0:	418c      	sbcs	r4, r1
    5ae2:	b2e4      	uxtb	r4, r4
    5ae4:	2100      	movs	r1, #0
    5ae6:	e78a      	b.n	59fe <__aeabi_dadd+0x50a>
    5ae8:	1c19      	adds	r1, r3, #0
    5aea:	465c      	mov	r4, fp
    5aec:	e52b      	b.n	5546 <__aeabi_dadd+0x52>
    5aee:	1c19      	adds	r1, r3, #0
    5af0:	465c      	mov	r4, fp
    5af2:	4d0f      	ldr	r5, [pc, #60]	; (5b30 <__aeabi_dadd+0x63c>)
    5af4:	e527      	b.n	5546 <__aeabi_dadd+0x52>
    5af6:	1c03      	adds	r3, r0, #0
    5af8:	433b      	orrs	r3, r7
    5afa:	d100      	bne.n	5afe <__aeabi_dadd+0x60a>
    5afc:	e71c      	b.n	5938 <__aeabi_dadd+0x444>
    5afe:	1c01      	adds	r1, r0, #0
    5b00:	1c3c      	adds	r4, r7, #0
    5b02:	e520      	b.n	5546 <__aeabi_dadd+0x52>
    5b04:	2020      	movs	r0, #32
    5b06:	4240      	negs	r0, r0
    5b08:	1940      	adds	r0, r0, r5
    5b0a:	1c0a      	adds	r2, r1, #0
    5b0c:	40c2      	lsrs	r2, r0
    5b0e:	4690      	mov	r8, r2
    5b10:	2d20      	cmp	r5, #32
    5b12:	d00b      	beq.n	5b2c <__aeabi_dadd+0x638>
    5b14:	2040      	movs	r0, #64	; 0x40
    5b16:	1b45      	subs	r5, r0, r5
    5b18:	40a9      	lsls	r1, r5
    5b1a:	430c      	orrs	r4, r1
    5b1c:	1e61      	subs	r1, r4, #1
    5b1e:	418c      	sbcs	r4, r1
    5b20:	4645      	mov	r5, r8
    5b22:	432c      	orrs	r4, r5
    5b24:	2100      	movs	r1, #0
    5b26:	e76a      	b.n	59fe <__aeabi_dadd+0x50a>
    5b28:	2100      	movs	r1, #0
    5b2a:	e7cb      	b.n	5ac4 <__aeabi_dadd+0x5d0>
    5b2c:	2100      	movs	r1, #0
    5b2e:	e7f4      	b.n	5b1a <__aeabi_dadd+0x626>
    5b30:	000007ff 	.word	0x000007ff
    5b34:	ff7fffff 	.word	0xff7fffff

00005b38 <__aeabi_dmul>:
    5b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b3a:	4656      	mov	r6, sl
    5b3c:	4644      	mov	r4, r8
    5b3e:	465f      	mov	r7, fp
    5b40:	464d      	mov	r5, r9
    5b42:	b4f0      	push	{r4, r5, r6, r7}
    5b44:	1c1f      	adds	r7, r3, #0
    5b46:	030b      	lsls	r3, r1, #12
    5b48:	0b1b      	lsrs	r3, r3, #12
    5b4a:	469a      	mov	sl, r3
    5b4c:	004b      	lsls	r3, r1, #1
    5b4e:	b087      	sub	sp, #28
    5b50:	1c04      	adds	r4, r0, #0
    5b52:	4680      	mov	r8, r0
    5b54:	0d5b      	lsrs	r3, r3, #21
    5b56:	0fc8      	lsrs	r0, r1, #31
    5b58:	1c16      	adds	r6, r2, #0
    5b5a:	9302      	str	r3, [sp, #8]
    5b5c:	4681      	mov	r9, r0
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d068      	beq.n	5c34 <__aeabi_dmul+0xfc>
    5b62:	4b69      	ldr	r3, [pc, #420]	; (5d08 <__aeabi_dmul+0x1d0>)
    5b64:	9902      	ldr	r1, [sp, #8]
    5b66:	4299      	cmp	r1, r3
    5b68:	d032      	beq.n	5bd0 <__aeabi_dmul+0x98>
    5b6a:	2280      	movs	r2, #128	; 0x80
    5b6c:	4653      	mov	r3, sl
    5b6e:	0352      	lsls	r2, r2, #13
    5b70:	431a      	orrs	r2, r3
    5b72:	00d2      	lsls	r2, r2, #3
    5b74:	0f63      	lsrs	r3, r4, #29
    5b76:	431a      	orrs	r2, r3
    5b78:	4692      	mov	sl, r2
    5b7a:	4a64      	ldr	r2, [pc, #400]	; (5d0c <__aeabi_dmul+0x1d4>)
    5b7c:	00e0      	lsls	r0, r4, #3
    5b7e:	1889      	adds	r1, r1, r2
    5b80:	4680      	mov	r8, r0
    5b82:	9102      	str	r1, [sp, #8]
    5b84:	2400      	movs	r4, #0
    5b86:	2500      	movs	r5, #0
    5b88:	033b      	lsls	r3, r7, #12
    5b8a:	0b1b      	lsrs	r3, r3, #12
    5b8c:	469b      	mov	fp, r3
    5b8e:	0078      	lsls	r0, r7, #1
    5b90:	0ffb      	lsrs	r3, r7, #31
    5b92:	1c32      	adds	r2, r6, #0
    5b94:	0d40      	lsrs	r0, r0, #21
    5b96:	9303      	str	r3, [sp, #12]
    5b98:	d100      	bne.n	5b9c <__aeabi_dmul+0x64>
    5b9a:	e075      	b.n	5c88 <__aeabi_dmul+0x150>
    5b9c:	4b5a      	ldr	r3, [pc, #360]	; (5d08 <__aeabi_dmul+0x1d0>)
    5b9e:	4298      	cmp	r0, r3
    5ba0:	d069      	beq.n	5c76 <__aeabi_dmul+0x13e>
    5ba2:	2280      	movs	r2, #128	; 0x80
    5ba4:	4659      	mov	r1, fp
    5ba6:	0352      	lsls	r2, r2, #13
    5ba8:	430a      	orrs	r2, r1
    5baa:	0f73      	lsrs	r3, r6, #29
    5bac:	00d2      	lsls	r2, r2, #3
    5bae:	431a      	orrs	r2, r3
    5bb0:	4b56      	ldr	r3, [pc, #344]	; (5d0c <__aeabi_dmul+0x1d4>)
    5bb2:	4693      	mov	fp, r2
    5bb4:	18c0      	adds	r0, r0, r3
    5bb6:	00f2      	lsls	r2, r6, #3
    5bb8:	2300      	movs	r3, #0
    5bba:	9903      	ldr	r1, [sp, #12]
    5bbc:	464e      	mov	r6, r9
    5bbe:	4071      	eors	r1, r6
    5bc0:	431c      	orrs	r4, r3
    5bc2:	2c0f      	cmp	r4, #15
    5bc4:	d900      	bls.n	5bc8 <__aeabi_dmul+0x90>
    5bc6:	e0a9      	b.n	5d1c <__aeabi_dmul+0x1e4>
    5bc8:	4e51      	ldr	r6, [pc, #324]	; (5d10 <__aeabi_dmul+0x1d8>)
    5bca:	00a4      	lsls	r4, r4, #2
    5bcc:	5934      	ldr	r4, [r6, r4]
    5bce:	46a7      	mov	pc, r4
    5bd0:	4653      	mov	r3, sl
    5bd2:	431c      	orrs	r4, r3
    5bd4:	d000      	beq.n	5bd8 <__aeabi_dmul+0xa0>
    5bd6:	e087      	b.n	5ce8 <__aeabi_dmul+0x1b0>
    5bd8:	2500      	movs	r5, #0
    5bda:	46aa      	mov	sl, r5
    5bdc:	46a8      	mov	r8, r5
    5bde:	2408      	movs	r4, #8
    5be0:	2502      	movs	r5, #2
    5be2:	e7d1      	b.n	5b88 <__aeabi_dmul+0x50>
    5be4:	4649      	mov	r1, r9
    5be6:	2d02      	cmp	r5, #2
    5be8:	d06c      	beq.n	5cc4 <__aeabi_dmul+0x18c>
    5bea:	2d03      	cmp	r5, #3
    5bec:	d100      	bne.n	5bf0 <__aeabi_dmul+0xb8>
    5bee:	e217      	b.n	6020 <__aeabi_dmul+0x4e8>
    5bf0:	2d01      	cmp	r5, #1
    5bf2:	d000      	beq.n	5bf6 <__aeabi_dmul+0xbe>
    5bf4:	e158      	b.n	5ea8 <__aeabi_dmul+0x370>
    5bf6:	400d      	ands	r5, r1
    5bf8:	b2ed      	uxtb	r5, r5
    5bfa:	2400      	movs	r4, #0
    5bfc:	46a9      	mov	r9, r5
    5bfe:	2300      	movs	r3, #0
    5c00:	46a0      	mov	r8, r4
    5c02:	2000      	movs	r0, #0
    5c04:	2100      	movs	r1, #0
    5c06:	0325      	lsls	r5, r4, #12
    5c08:	0d0a      	lsrs	r2, r1, #20
    5c0a:	051c      	lsls	r4, r3, #20
    5c0c:	0b2d      	lsrs	r5, r5, #12
    5c0e:	0512      	lsls	r2, r2, #20
    5c10:	4b40      	ldr	r3, [pc, #256]	; (5d14 <__aeabi_dmul+0x1dc>)
    5c12:	432a      	orrs	r2, r5
    5c14:	4013      	ands	r3, r2
    5c16:	4323      	orrs	r3, r4
    5c18:	005b      	lsls	r3, r3, #1
    5c1a:	464c      	mov	r4, r9
    5c1c:	085b      	lsrs	r3, r3, #1
    5c1e:	07e2      	lsls	r2, r4, #31
    5c20:	1c19      	adds	r1, r3, #0
    5c22:	4640      	mov	r0, r8
    5c24:	4311      	orrs	r1, r2
    5c26:	b007      	add	sp, #28
    5c28:	bc3c      	pop	{r2, r3, r4, r5}
    5c2a:	4690      	mov	r8, r2
    5c2c:	4699      	mov	r9, r3
    5c2e:	46a2      	mov	sl, r4
    5c30:	46ab      	mov	fp, r5
    5c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c34:	4653      	mov	r3, sl
    5c36:	4323      	orrs	r3, r4
    5c38:	d050      	beq.n	5cdc <__aeabi_dmul+0x1a4>
    5c3a:	4653      	mov	r3, sl
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d100      	bne.n	5c42 <__aeabi_dmul+0x10a>
    5c40:	e184      	b.n	5f4c <__aeabi_dmul+0x414>
    5c42:	4650      	mov	r0, sl
    5c44:	f000 fae6 	bl	6214 <__clzsi2>
    5c48:	1e03      	subs	r3, r0, #0
    5c4a:	2b27      	cmp	r3, #39	; 0x27
    5c4c:	dd00      	ble.n	5c50 <__aeabi_dmul+0x118>
    5c4e:	e176      	b.n	5f3e <__aeabi_dmul+0x406>
    5c50:	2128      	movs	r1, #40	; 0x28
    5c52:	1a0d      	subs	r5, r1, r0
    5c54:	1c21      	adds	r1, r4, #0
    5c56:	3b08      	subs	r3, #8
    5c58:	4652      	mov	r2, sl
    5c5a:	40e9      	lsrs	r1, r5
    5c5c:	409a      	lsls	r2, r3
    5c5e:	1c0d      	adds	r5, r1, #0
    5c60:	4315      	orrs	r5, r2
    5c62:	1c22      	adds	r2, r4, #0
    5c64:	409a      	lsls	r2, r3
    5c66:	46aa      	mov	sl, r5
    5c68:	4690      	mov	r8, r2
    5c6a:	4b2b      	ldr	r3, [pc, #172]	; (5d18 <__aeabi_dmul+0x1e0>)
    5c6c:	2400      	movs	r4, #0
    5c6e:	1a1b      	subs	r3, r3, r0
    5c70:	9302      	str	r3, [sp, #8]
    5c72:	2500      	movs	r5, #0
    5c74:	e788      	b.n	5b88 <__aeabi_dmul+0x50>
    5c76:	465b      	mov	r3, fp
    5c78:	431e      	orrs	r6, r3
    5c7a:	2303      	movs	r3, #3
    5c7c:	2e00      	cmp	r6, #0
    5c7e:	d19c      	bne.n	5bba <__aeabi_dmul+0x82>
    5c80:	46b3      	mov	fp, r6
    5c82:	2200      	movs	r2, #0
    5c84:	2302      	movs	r3, #2
    5c86:	e798      	b.n	5bba <__aeabi_dmul+0x82>
    5c88:	465b      	mov	r3, fp
    5c8a:	4333      	orrs	r3, r6
    5c8c:	d021      	beq.n	5cd2 <__aeabi_dmul+0x19a>
    5c8e:	4658      	mov	r0, fp
    5c90:	2800      	cmp	r0, #0
    5c92:	d100      	bne.n	5c96 <__aeabi_dmul+0x15e>
    5c94:	e14e      	b.n	5f34 <__aeabi_dmul+0x3fc>
    5c96:	f000 fabd 	bl	6214 <__clzsi2>
    5c9a:	2827      	cmp	r0, #39	; 0x27
    5c9c:	dd00      	ble.n	5ca0 <__aeabi_dmul+0x168>
    5c9e:	e142      	b.n	5f26 <__aeabi_dmul+0x3ee>
    5ca0:	2128      	movs	r1, #40	; 0x28
    5ca2:	1a0f      	subs	r7, r1, r0
    5ca4:	1c02      	adds	r2, r0, #0
    5ca6:	1c31      	adds	r1, r6, #0
    5ca8:	3a08      	subs	r2, #8
    5caa:	465b      	mov	r3, fp
    5cac:	40f9      	lsrs	r1, r7
    5cae:	4093      	lsls	r3, r2
    5cb0:	1c0f      	adds	r7, r1, #0
    5cb2:	431f      	orrs	r7, r3
    5cb4:	1c33      	adds	r3, r6, #0
    5cb6:	4093      	lsls	r3, r2
    5cb8:	46bb      	mov	fp, r7
    5cba:	1c1a      	adds	r2, r3, #0
    5cbc:	4b16      	ldr	r3, [pc, #88]	; (5d18 <__aeabi_dmul+0x1e0>)
    5cbe:	1a18      	subs	r0, r3, r0
    5cc0:	2300      	movs	r3, #0
    5cc2:	e77a      	b.n	5bba <__aeabi_dmul+0x82>
    5cc4:	2301      	movs	r3, #1
    5cc6:	400b      	ands	r3, r1
    5cc8:	2400      	movs	r4, #0
    5cca:	4699      	mov	r9, r3
    5ccc:	46a0      	mov	r8, r4
    5cce:	4b0e      	ldr	r3, [pc, #56]	; (5d08 <__aeabi_dmul+0x1d0>)
    5cd0:	e797      	b.n	5c02 <__aeabi_dmul+0xca>
    5cd2:	2700      	movs	r7, #0
    5cd4:	46bb      	mov	fp, r7
    5cd6:	2200      	movs	r2, #0
    5cd8:	2301      	movs	r3, #1
    5cda:	e76e      	b.n	5bba <__aeabi_dmul+0x82>
    5cdc:	2100      	movs	r1, #0
    5cde:	2404      	movs	r4, #4
    5ce0:	468a      	mov	sl, r1
    5ce2:	4688      	mov	r8, r1
    5ce4:	2501      	movs	r5, #1
    5ce6:	e74f      	b.n	5b88 <__aeabi_dmul+0x50>
    5ce8:	240c      	movs	r4, #12
    5cea:	2503      	movs	r5, #3
    5cec:	e74c      	b.n	5b88 <__aeabi_dmul+0x50>
    5cee:	2500      	movs	r5, #0
    5cf0:	2480      	movs	r4, #128	; 0x80
    5cf2:	46a9      	mov	r9, r5
    5cf4:	0324      	lsls	r4, r4, #12
    5cf6:	46a8      	mov	r8, r5
    5cf8:	4b03      	ldr	r3, [pc, #12]	; (5d08 <__aeabi_dmul+0x1d0>)
    5cfa:	e782      	b.n	5c02 <__aeabi_dmul+0xca>
    5cfc:	46da      	mov	sl, fp
    5cfe:	4690      	mov	r8, r2
    5d00:	9903      	ldr	r1, [sp, #12]
    5d02:	1c1d      	adds	r5, r3, #0
    5d04:	e76f      	b.n	5be6 <__aeabi_dmul+0xae>
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	000007ff 	.word	0x000007ff
    5d0c:	fffffc01 	.word	0xfffffc01
    5d10:	00007418 	.word	0x00007418
    5d14:	800fffff 	.word	0x800fffff
    5d18:	fffffc0d 	.word	0xfffffc0d
    5d1c:	9f02      	ldr	r7, [sp, #8]
    5d1e:	0c16      	lsrs	r6, r2, #16
    5d20:	1838      	adds	r0, r7, r0
    5d22:	9004      	str	r0, [sp, #16]
    5d24:	4640      	mov	r0, r8
    5d26:	0c07      	lsrs	r7, r0, #16
    5d28:	0400      	lsls	r0, r0, #16
    5d2a:	0c00      	lsrs	r0, r0, #16
    5d2c:	0412      	lsls	r2, r2, #16
    5d2e:	0c12      	lsrs	r2, r2, #16
    5d30:	1c03      	adds	r3, r0, #0
    5d32:	4353      	muls	r3, r2
    5d34:	1c04      	adds	r4, r0, #0
    5d36:	1c3d      	adds	r5, r7, #0
    5d38:	4374      	muls	r4, r6
    5d3a:	4355      	muls	r5, r2
    5d3c:	4698      	mov	r8, r3
    5d3e:	1c3b      	adds	r3, r7, #0
    5d40:	4373      	muls	r3, r6
    5d42:	1964      	adds	r4, r4, r5
    5d44:	46a4      	mov	ip, r4
    5d46:	4644      	mov	r4, r8
    5d48:	9302      	str	r3, [sp, #8]
    5d4a:	0c23      	lsrs	r3, r4, #16
    5d4c:	4463      	add	r3, ip
    5d4e:	429d      	cmp	r5, r3
    5d50:	d904      	bls.n	5d5c <__aeabi_dmul+0x224>
    5d52:	9d02      	ldr	r5, [sp, #8]
    5d54:	2480      	movs	r4, #128	; 0x80
    5d56:	0264      	lsls	r4, r4, #9
    5d58:	192d      	adds	r5, r5, r4
    5d5a:	9502      	str	r5, [sp, #8]
    5d5c:	0c1d      	lsrs	r5, r3, #16
    5d5e:	9503      	str	r5, [sp, #12]
    5d60:	4645      	mov	r5, r8
    5d62:	042c      	lsls	r4, r5, #16
    5d64:	041b      	lsls	r3, r3, #16
    5d66:	0c24      	lsrs	r4, r4, #16
    5d68:	191c      	adds	r4, r3, r4
    5d6a:	9405      	str	r4, [sp, #20]
    5d6c:	465c      	mov	r4, fp
    5d6e:	0c23      	lsrs	r3, r4, #16
    5d70:	1c05      	adds	r5, r0, #0
    5d72:	4358      	muls	r0, r3
    5d74:	0424      	lsls	r4, r4, #16
    5d76:	0c24      	lsrs	r4, r4, #16
    5d78:	4684      	mov	ip, r0
    5d7a:	1c38      	adds	r0, r7, #0
    5d7c:	4360      	muls	r0, r4
    5d7e:	4365      	muls	r5, r4
    5d80:	435f      	muls	r7, r3
    5d82:	4681      	mov	r9, r0
    5d84:	44cc      	add	ip, r9
    5d86:	0c28      	lsrs	r0, r5, #16
    5d88:	4460      	add	r0, ip
    5d8a:	46bb      	mov	fp, r7
    5d8c:	4581      	cmp	r9, r0
    5d8e:	d902      	bls.n	5d96 <__aeabi_dmul+0x25e>
    5d90:	2780      	movs	r7, #128	; 0x80
    5d92:	027f      	lsls	r7, r7, #9
    5d94:	44bb      	add	fp, r7
    5d96:	042d      	lsls	r5, r5, #16
    5d98:	0c07      	lsrs	r7, r0, #16
    5d9a:	0c2d      	lsrs	r5, r5, #16
    5d9c:	0400      	lsls	r0, r0, #16
    5d9e:	1940      	adds	r0, r0, r5
    5da0:	4655      	mov	r5, sl
    5da2:	46bc      	mov	ip, r7
    5da4:	042f      	lsls	r7, r5, #16
    5da6:	44e3      	add	fp, ip
    5da8:	4684      	mov	ip, r0
    5daa:	0c28      	lsrs	r0, r5, #16
    5dac:	0c3d      	lsrs	r5, r7, #16
    5dae:	1c2f      	adds	r7, r5, #0
    5db0:	4357      	muls	r7, r2
    5db2:	46b8      	mov	r8, r7
    5db4:	1c2f      	adds	r7, r5, #0
    5db6:	4377      	muls	r7, r6
    5db8:	4342      	muls	r2, r0
    5dba:	46b9      	mov	r9, r7
    5dbc:	4647      	mov	r7, r8
    5dbe:	0c3f      	lsrs	r7, r7, #16
    5dc0:	4491      	add	r9, r2
    5dc2:	46ba      	mov	sl, r7
    5dc4:	44d1      	add	r9, sl
    5dc6:	4346      	muls	r6, r0
    5dc8:	454a      	cmp	r2, r9
    5dca:	d902      	bls.n	5dd2 <__aeabi_dmul+0x29a>
    5dcc:	2280      	movs	r2, #128	; 0x80
    5dce:	0252      	lsls	r2, r2, #9
    5dd0:	18b6      	adds	r6, r6, r2
    5dd2:	464f      	mov	r7, r9
    5dd4:	0c3a      	lsrs	r2, r7, #16
    5dd6:	18b6      	adds	r6, r6, r2
    5dd8:	043a      	lsls	r2, r7, #16
    5dda:	4647      	mov	r7, r8
    5ddc:	043f      	lsls	r7, r7, #16
    5dde:	0c3f      	lsrs	r7, r7, #16
    5de0:	46b8      	mov	r8, r7
    5de2:	1c2f      	adds	r7, r5, #0
    5de4:	4367      	muls	r7, r4
    5de6:	435d      	muls	r5, r3
    5de8:	4344      	muls	r4, r0
    5dea:	4358      	muls	r0, r3
    5dec:	1965      	adds	r5, r4, r5
    5dee:	9001      	str	r0, [sp, #4]
    5df0:	0c38      	lsrs	r0, r7, #16
    5df2:	182d      	adds	r5, r5, r0
    5df4:	4442      	add	r2, r8
    5df6:	46b8      	mov	r8, r7
    5df8:	42ac      	cmp	r4, r5
    5dfa:	d904      	bls.n	5e06 <__aeabi_dmul+0x2ce>
    5dfc:	9801      	ldr	r0, [sp, #4]
    5dfe:	2380      	movs	r3, #128	; 0x80
    5e00:	025b      	lsls	r3, r3, #9
    5e02:	18c0      	adds	r0, r0, r3
    5e04:	9001      	str	r0, [sp, #4]
    5e06:	9c03      	ldr	r4, [sp, #12]
    5e08:	9f02      	ldr	r7, [sp, #8]
    5e0a:	1c20      	adds	r0, r4, #0
    5e0c:	4460      	add	r0, ip
    5e0e:	19c0      	adds	r0, r0, r7
    5e10:	4560      	cmp	r0, ip
    5e12:	41a4      	sbcs	r4, r4
    5e14:	4647      	mov	r7, r8
    5e16:	4264      	negs	r4, r4
    5e18:	46a4      	mov	ip, r4
    5e1a:	042b      	lsls	r3, r5, #16
    5e1c:	043c      	lsls	r4, r7, #16
    5e1e:	4699      	mov	r9, r3
    5e20:	0c24      	lsrs	r4, r4, #16
    5e22:	444c      	add	r4, r9
    5e24:	46a0      	mov	r8, r4
    5e26:	44d8      	add	r8, fp
    5e28:	1880      	adds	r0, r0, r2
    5e2a:	46c2      	mov	sl, r8
    5e2c:	44e2      	add	sl, ip
    5e2e:	4290      	cmp	r0, r2
    5e30:	4192      	sbcs	r2, r2
    5e32:	4657      	mov	r7, sl
    5e34:	4252      	negs	r2, r2
    5e36:	4691      	mov	r9, r2
    5e38:	19f2      	adds	r2, r6, r7
    5e3a:	45e2      	cmp	sl, ip
    5e3c:	41bf      	sbcs	r7, r7
    5e3e:	427f      	negs	r7, r7
    5e40:	464b      	mov	r3, r9
    5e42:	46bc      	mov	ip, r7
    5e44:	45d8      	cmp	r8, fp
    5e46:	41bf      	sbcs	r7, r7
    5e48:	18d4      	adds	r4, r2, r3
    5e4a:	427f      	negs	r7, r7
    5e4c:	4663      	mov	r3, ip
    5e4e:	431f      	orrs	r7, r3
    5e50:	0c2d      	lsrs	r5, r5, #16
    5e52:	197f      	adds	r7, r7, r5
    5e54:	42b2      	cmp	r2, r6
    5e56:	4192      	sbcs	r2, r2
    5e58:	454c      	cmp	r4, r9
    5e5a:	41ad      	sbcs	r5, r5
    5e5c:	4252      	negs	r2, r2
    5e5e:	426d      	negs	r5, r5
    5e60:	4315      	orrs	r5, r2
    5e62:	9e01      	ldr	r6, [sp, #4]
    5e64:	197d      	adds	r5, r7, r5
    5e66:	19ab      	adds	r3, r5, r6
    5e68:	0de2      	lsrs	r2, r4, #23
    5e6a:	025b      	lsls	r3, r3, #9
    5e6c:	9f05      	ldr	r7, [sp, #20]
    5e6e:	4313      	orrs	r3, r2
    5e70:	0242      	lsls	r2, r0, #9
    5e72:	433a      	orrs	r2, r7
    5e74:	469a      	mov	sl, r3
    5e76:	1e53      	subs	r3, r2, #1
    5e78:	419a      	sbcs	r2, r3
    5e7a:	0dc3      	lsrs	r3, r0, #23
    5e7c:	1c10      	adds	r0, r2, #0
    5e7e:	4318      	orrs	r0, r3
    5e80:	0264      	lsls	r4, r4, #9
    5e82:	4320      	orrs	r0, r4
    5e84:	4680      	mov	r8, r0
    5e86:	4650      	mov	r0, sl
    5e88:	01c0      	lsls	r0, r0, #7
    5e8a:	d50d      	bpl.n	5ea8 <__aeabi_dmul+0x370>
    5e8c:	4645      	mov	r5, r8
    5e8e:	2201      	movs	r2, #1
    5e90:	4656      	mov	r6, sl
    5e92:	9c04      	ldr	r4, [sp, #16]
    5e94:	086b      	lsrs	r3, r5, #1
    5e96:	402a      	ands	r2, r5
    5e98:	431a      	orrs	r2, r3
    5e9a:	07f3      	lsls	r3, r6, #31
    5e9c:	3401      	adds	r4, #1
    5e9e:	431a      	orrs	r2, r3
    5ea0:	0876      	lsrs	r6, r6, #1
    5ea2:	9404      	str	r4, [sp, #16]
    5ea4:	4690      	mov	r8, r2
    5ea6:	46b2      	mov	sl, r6
    5ea8:	9e04      	ldr	r6, [sp, #16]
    5eaa:	4f63      	ldr	r7, [pc, #396]	; (6038 <__aeabi_dmul+0x500>)
    5eac:	19f3      	adds	r3, r6, r7
    5eae:	2b00      	cmp	r3, #0
    5eb0:	dd61      	ble.n	5f76 <__aeabi_dmul+0x43e>
    5eb2:	4640      	mov	r0, r8
    5eb4:	0740      	lsls	r0, r0, #29
    5eb6:	d00b      	beq.n	5ed0 <__aeabi_dmul+0x398>
    5eb8:	220f      	movs	r2, #15
    5eba:	4644      	mov	r4, r8
    5ebc:	4022      	ands	r2, r4
    5ebe:	2a04      	cmp	r2, #4
    5ec0:	d006      	beq.n	5ed0 <__aeabi_dmul+0x398>
    5ec2:	4642      	mov	r2, r8
    5ec4:	3204      	adds	r2, #4
    5ec6:	4542      	cmp	r2, r8
    5ec8:	4180      	sbcs	r0, r0
    5eca:	4240      	negs	r0, r0
    5ecc:	4482      	add	sl, r0
    5ece:	4690      	mov	r8, r2
    5ed0:	4655      	mov	r5, sl
    5ed2:	01ed      	lsls	r5, r5, #7
    5ed4:	d507      	bpl.n	5ee6 <__aeabi_dmul+0x3ae>
    5ed6:	4b59      	ldr	r3, [pc, #356]	; (603c <__aeabi_dmul+0x504>)
    5ed8:	4656      	mov	r6, sl
    5eda:	9f04      	ldr	r7, [sp, #16]
    5edc:	2080      	movs	r0, #128	; 0x80
    5ede:	401e      	ands	r6, r3
    5ee0:	00c0      	lsls	r0, r0, #3
    5ee2:	46b2      	mov	sl, r6
    5ee4:	183b      	adds	r3, r7, r0
    5ee6:	4a56      	ldr	r2, [pc, #344]	; (6040 <__aeabi_dmul+0x508>)
    5ee8:	4293      	cmp	r3, r2
    5eea:	dd00      	ble.n	5eee <__aeabi_dmul+0x3b6>
    5eec:	e6ea      	b.n	5cc4 <__aeabi_dmul+0x18c>
    5eee:	4644      	mov	r4, r8
    5ef0:	4655      	mov	r5, sl
    5ef2:	08e2      	lsrs	r2, r4, #3
    5ef4:	0768      	lsls	r0, r5, #29
    5ef6:	4310      	orrs	r0, r2
    5ef8:	2201      	movs	r2, #1
    5efa:	026c      	lsls	r4, r5, #9
    5efc:	055b      	lsls	r3, r3, #21
    5efe:	400a      	ands	r2, r1
    5f00:	4680      	mov	r8, r0
    5f02:	0b24      	lsrs	r4, r4, #12
    5f04:	0d5b      	lsrs	r3, r3, #21
    5f06:	4691      	mov	r9, r2
    5f08:	e67b      	b.n	5c02 <__aeabi_dmul+0xca>
    5f0a:	46da      	mov	sl, fp
    5f0c:	4690      	mov	r8, r2
    5f0e:	1c1d      	adds	r5, r3, #0
    5f10:	e669      	b.n	5be6 <__aeabi_dmul+0xae>
    5f12:	2480      	movs	r4, #128	; 0x80
    5f14:	0324      	lsls	r4, r4, #12
    5f16:	4657      	mov	r7, sl
    5f18:	4227      	tst	r7, r4
    5f1a:	d11c      	bne.n	5f56 <__aeabi_dmul+0x41e>
    5f1c:	433c      	orrs	r4, r7
    5f1e:	0324      	lsls	r4, r4, #12
    5f20:	0b24      	lsrs	r4, r4, #12
    5f22:	4b48      	ldr	r3, [pc, #288]	; (6044 <__aeabi_dmul+0x50c>)
    5f24:	e66d      	b.n	5c02 <__aeabi_dmul+0xca>
    5f26:	1c03      	adds	r3, r0, #0
    5f28:	3b28      	subs	r3, #40	; 0x28
    5f2a:	1c31      	adds	r1, r6, #0
    5f2c:	4099      	lsls	r1, r3
    5f2e:	468b      	mov	fp, r1
    5f30:	2200      	movs	r2, #0
    5f32:	e6c3      	b.n	5cbc <__aeabi_dmul+0x184>
    5f34:	1c30      	adds	r0, r6, #0
    5f36:	f000 f96d 	bl	6214 <__clzsi2>
    5f3a:	3020      	adds	r0, #32
    5f3c:	e6ad      	b.n	5c9a <__aeabi_dmul+0x162>
    5f3e:	3b28      	subs	r3, #40	; 0x28
    5f40:	1c21      	adds	r1, r4, #0
    5f42:	4099      	lsls	r1, r3
    5f44:	2200      	movs	r2, #0
    5f46:	468a      	mov	sl, r1
    5f48:	4690      	mov	r8, r2
    5f4a:	e68e      	b.n	5c6a <__aeabi_dmul+0x132>
    5f4c:	1c20      	adds	r0, r4, #0
    5f4e:	f000 f961 	bl	6214 <__clzsi2>
    5f52:	3020      	adds	r0, #32
    5f54:	e678      	b.n	5c48 <__aeabi_dmul+0x110>
    5f56:	4658      	mov	r0, fp
    5f58:	4220      	tst	r0, r4
    5f5a:	d107      	bne.n	5f6c <__aeabi_dmul+0x434>
    5f5c:	4304      	orrs	r4, r0
    5f5e:	9903      	ldr	r1, [sp, #12]
    5f60:	0324      	lsls	r4, r4, #12
    5f62:	0b24      	lsrs	r4, r4, #12
    5f64:	4689      	mov	r9, r1
    5f66:	4690      	mov	r8, r2
    5f68:	4b36      	ldr	r3, [pc, #216]	; (6044 <__aeabi_dmul+0x50c>)
    5f6a:	e64a      	b.n	5c02 <__aeabi_dmul+0xca>
    5f6c:	433c      	orrs	r4, r7
    5f6e:	0324      	lsls	r4, r4, #12
    5f70:	0b24      	lsrs	r4, r4, #12
    5f72:	4b34      	ldr	r3, [pc, #208]	; (6044 <__aeabi_dmul+0x50c>)
    5f74:	e645      	b.n	5c02 <__aeabi_dmul+0xca>
    5f76:	4b34      	ldr	r3, [pc, #208]	; (6048 <__aeabi_dmul+0x510>)
    5f78:	9e04      	ldr	r6, [sp, #16]
    5f7a:	1b9b      	subs	r3, r3, r6
    5f7c:	2b38      	cmp	r3, #56	; 0x38
    5f7e:	dd06      	ble.n	5f8e <__aeabi_dmul+0x456>
    5f80:	2301      	movs	r3, #1
    5f82:	400b      	ands	r3, r1
    5f84:	2400      	movs	r4, #0
    5f86:	4699      	mov	r9, r3
    5f88:	46a0      	mov	r8, r4
    5f8a:	2300      	movs	r3, #0
    5f8c:	e639      	b.n	5c02 <__aeabi_dmul+0xca>
    5f8e:	2b1f      	cmp	r3, #31
    5f90:	dc25      	bgt.n	5fde <__aeabi_dmul+0x4a6>
    5f92:	9c04      	ldr	r4, [sp, #16]
    5f94:	4d2d      	ldr	r5, [pc, #180]	; (604c <__aeabi_dmul+0x514>)
    5f96:	4646      	mov	r6, r8
    5f98:	1960      	adds	r0, r4, r5
    5f9a:	4652      	mov	r2, sl
    5f9c:	4644      	mov	r4, r8
    5f9e:	4086      	lsls	r6, r0
    5fa0:	40dc      	lsrs	r4, r3
    5fa2:	4082      	lsls	r2, r0
    5fa4:	4657      	mov	r7, sl
    5fa6:	1c30      	adds	r0, r6, #0
    5fa8:	4322      	orrs	r2, r4
    5faa:	40df      	lsrs	r7, r3
    5fac:	1e44      	subs	r4, r0, #1
    5fae:	41a0      	sbcs	r0, r4
    5fb0:	4302      	orrs	r2, r0
    5fb2:	1c3b      	adds	r3, r7, #0
    5fb4:	0754      	lsls	r4, r2, #29
    5fb6:	d009      	beq.n	5fcc <__aeabi_dmul+0x494>
    5fb8:	200f      	movs	r0, #15
    5fba:	4010      	ands	r0, r2
    5fbc:	2804      	cmp	r0, #4
    5fbe:	d005      	beq.n	5fcc <__aeabi_dmul+0x494>
    5fc0:	1d10      	adds	r0, r2, #4
    5fc2:	4290      	cmp	r0, r2
    5fc4:	4192      	sbcs	r2, r2
    5fc6:	4252      	negs	r2, r2
    5fc8:	189b      	adds	r3, r3, r2
    5fca:	1c02      	adds	r2, r0, #0
    5fcc:	021d      	lsls	r5, r3, #8
    5fce:	d51a      	bpl.n	6006 <__aeabi_dmul+0x4ce>
    5fd0:	2301      	movs	r3, #1
    5fd2:	400b      	ands	r3, r1
    5fd4:	2400      	movs	r4, #0
    5fd6:	4699      	mov	r9, r3
    5fd8:	46a0      	mov	r8, r4
    5fda:	2301      	movs	r3, #1
    5fdc:	e611      	b.n	5c02 <__aeabi_dmul+0xca>
    5fde:	481c      	ldr	r0, [pc, #112]	; (6050 <__aeabi_dmul+0x518>)
    5fe0:	9c04      	ldr	r4, [sp, #16]
    5fe2:	4655      	mov	r5, sl
    5fe4:	1b00      	subs	r0, r0, r4
    5fe6:	40c5      	lsrs	r5, r0
    5fe8:	1c28      	adds	r0, r5, #0
    5fea:	2b20      	cmp	r3, #32
    5fec:	d016      	beq.n	601c <__aeabi_dmul+0x4e4>
    5fee:	4e19      	ldr	r6, [pc, #100]	; (6054 <__aeabi_dmul+0x51c>)
    5ff0:	4657      	mov	r7, sl
    5ff2:	19a2      	adds	r2, r4, r6
    5ff4:	4097      	lsls	r7, r2
    5ff6:	1c3a      	adds	r2, r7, #0
    5ff8:	4643      	mov	r3, r8
    5ffa:	431a      	orrs	r2, r3
    5ffc:	1e53      	subs	r3, r2, #1
    5ffe:	419a      	sbcs	r2, r3
    6000:	4302      	orrs	r2, r0
    6002:	2300      	movs	r3, #0
    6004:	e7d6      	b.n	5fb4 <__aeabi_dmul+0x47c>
    6006:	0758      	lsls	r0, r3, #29
    6008:	025b      	lsls	r3, r3, #9
    600a:	08d2      	lsrs	r2, r2, #3
    600c:	0b1c      	lsrs	r4, r3, #12
    600e:	2301      	movs	r3, #1
    6010:	400b      	ands	r3, r1
    6012:	4310      	orrs	r0, r2
    6014:	4699      	mov	r9, r3
    6016:	4680      	mov	r8, r0
    6018:	2300      	movs	r3, #0
    601a:	e5f2      	b.n	5c02 <__aeabi_dmul+0xca>
    601c:	2200      	movs	r2, #0
    601e:	e7eb      	b.n	5ff8 <__aeabi_dmul+0x4c0>
    6020:	2480      	movs	r4, #128	; 0x80
    6022:	0324      	lsls	r4, r4, #12
    6024:	4650      	mov	r0, sl
    6026:	2301      	movs	r3, #1
    6028:	4304      	orrs	r4, r0
    602a:	4019      	ands	r1, r3
    602c:	0324      	lsls	r4, r4, #12
    602e:	0b24      	lsrs	r4, r4, #12
    6030:	4689      	mov	r9, r1
    6032:	4b04      	ldr	r3, [pc, #16]	; (6044 <__aeabi_dmul+0x50c>)
    6034:	e5e5      	b.n	5c02 <__aeabi_dmul+0xca>
    6036:	46c0      	nop			; (mov r8, r8)
    6038:	000003ff 	.word	0x000003ff
    603c:	feffffff 	.word	0xfeffffff
    6040:	000007fe 	.word	0x000007fe
    6044:	000007ff 	.word	0x000007ff
    6048:	fffffc02 	.word	0xfffffc02
    604c:	0000041e 	.word	0x0000041e
    6050:	fffffbe2 	.word	0xfffffbe2
    6054:	0000043e 	.word	0x0000043e

00006058 <__aeabi_f2d>:
    6058:	0043      	lsls	r3, r0, #1
    605a:	0e1b      	lsrs	r3, r3, #24
    605c:	1c5a      	adds	r2, r3, #1
    605e:	0241      	lsls	r1, r0, #9
    6060:	b2d2      	uxtb	r2, r2
    6062:	b570      	push	{r4, r5, r6, lr}
    6064:	0a4c      	lsrs	r4, r1, #9
    6066:	0fc5      	lsrs	r5, r0, #31
    6068:	2a01      	cmp	r2, #1
    606a:	dd17      	ble.n	609c <__aeabi_f2d+0x44>
    606c:	22e0      	movs	r2, #224	; 0xe0
    606e:	0092      	lsls	r2, r2, #2
    6070:	0764      	lsls	r4, r4, #29
    6072:	0b09      	lsrs	r1, r1, #12
    6074:	1898      	adds	r0, r3, r2
    6076:	2200      	movs	r2, #0
    6078:	2300      	movs	r3, #0
    607a:	0d1e      	lsrs	r6, r3, #20
    607c:	1c22      	adds	r2, r4, #0
    607e:	0534      	lsls	r4, r6, #20
    6080:	430c      	orrs	r4, r1
    6082:	491b      	ldr	r1, [pc, #108]	; (60f0 <__aeabi_f2d+0x98>)
    6084:	0540      	lsls	r0, r0, #21
    6086:	0840      	lsrs	r0, r0, #1
    6088:	4021      	ands	r1, r4
    608a:	4301      	orrs	r1, r0
    608c:	0049      	lsls	r1, r1, #1
    608e:	0849      	lsrs	r1, r1, #1
    6090:	07ed      	lsls	r5, r5, #31
    6092:	1c0b      	adds	r3, r1, #0
    6094:	432b      	orrs	r3, r5
    6096:	1c10      	adds	r0, r2, #0
    6098:	1c19      	adds	r1, r3, #0
    609a:	bd70      	pop	{r4, r5, r6, pc}
    609c:	2b00      	cmp	r3, #0
    609e:	d115      	bne.n	60cc <__aeabi_f2d+0x74>
    60a0:	2c00      	cmp	r4, #0
    60a2:	d01c      	beq.n	60de <__aeabi_f2d+0x86>
    60a4:	1c20      	adds	r0, r4, #0
    60a6:	f000 f8b5 	bl	6214 <__clzsi2>
    60aa:	280a      	cmp	r0, #10
    60ac:	dc1a      	bgt.n	60e4 <__aeabi_f2d+0x8c>
    60ae:	210b      	movs	r1, #11
    60b0:	1a09      	subs	r1, r1, r0
    60b2:	1c23      	adds	r3, r4, #0
    60b4:	40cb      	lsrs	r3, r1
    60b6:	1c19      	adds	r1, r3, #0
    60b8:	1c03      	adds	r3, r0, #0
    60ba:	3315      	adds	r3, #21
    60bc:	409c      	lsls	r4, r3
    60be:	4b0d      	ldr	r3, [pc, #52]	; (60f4 <__aeabi_f2d+0x9c>)
    60c0:	0309      	lsls	r1, r1, #12
    60c2:	1a18      	subs	r0, r3, r0
    60c4:	0540      	lsls	r0, r0, #21
    60c6:	0b09      	lsrs	r1, r1, #12
    60c8:	0d40      	lsrs	r0, r0, #21
    60ca:	e7d4      	b.n	6076 <__aeabi_f2d+0x1e>
    60cc:	2c00      	cmp	r4, #0
    60ce:	d003      	beq.n	60d8 <__aeabi_f2d+0x80>
    60d0:	0764      	lsls	r4, r4, #29
    60d2:	0b09      	lsrs	r1, r1, #12
    60d4:	4808      	ldr	r0, [pc, #32]	; (60f8 <__aeabi_f2d+0xa0>)
    60d6:	e7ce      	b.n	6076 <__aeabi_f2d+0x1e>
    60d8:	4807      	ldr	r0, [pc, #28]	; (60f8 <__aeabi_f2d+0xa0>)
    60da:	2100      	movs	r1, #0
    60dc:	e7cb      	b.n	6076 <__aeabi_f2d+0x1e>
    60de:	2000      	movs	r0, #0
    60e0:	2100      	movs	r1, #0
    60e2:	e7c8      	b.n	6076 <__aeabi_f2d+0x1e>
    60e4:	1c01      	adds	r1, r0, #0
    60e6:	390b      	subs	r1, #11
    60e8:	408c      	lsls	r4, r1
    60ea:	1c21      	adds	r1, r4, #0
    60ec:	2400      	movs	r4, #0
    60ee:	e7e6      	b.n	60be <__aeabi_f2d+0x66>
    60f0:	800fffff 	.word	0x800fffff
    60f4:	00000389 	.word	0x00000389
    60f8:	000007ff 	.word	0x000007ff

000060fc <__aeabi_d2f>:
    60fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60fe:	004b      	lsls	r3, r1, #1
    6100:	030d      	lsls	r5, r1, #12
    6102:	0f42      	lsrs	r2, r0, #29
    6104:	0d5b      	lsrs	r3, r3, #21
    6106:	0a6d      	lsrs	r5, r5, #9
    6108:	4315      	orrs	r5, r2
    610a:	1c5a      	adds	r2, r3, #1
    610c:	0552      	lsls	r2, r2, #21
    610e:	0fcc      	lsrs	r4, r1, #31
    6110:	00c6      	lsls	r6, r0, #3
    6112:	0d52      	lsrs	r2, r2, #21
    6114:	2a01      	cmp	r2, #1
    6116:	dd27      	ble.n	6168 <__aeabi_d2f+0x6c>
    6118:	4f39      	ldr	r7, [pc, #228]	; (6200 <__aeabi_d2f+0x104>)
    611a:	19da      	adds	r2, r3, r7
    611c:	2afe      	cmp	r2, #254	; 0xfe
    611e:	dc1a      	bgt.n	6156 <__aeabi_d2f+0x5a>
    6120:	2a00      	cmp	r2, #0
    6122:	dd35      	ble.n	6190 <__aeabi_d2f+0x94>
    6124:	0180      	lsls	r0, r0, #6
    6126:	00ed      	lsls	r5, r5, #3
    6128:	1e43      	subs	r3, r0, #1
    612a:	4198      	sbcs	r0, r3
    612c:	4328      	orrs	r0, r5
    612e:	0f76      	lsrs	r6, r6, #29
    6130:	4330      	orrs	r0, r6
    6132:	0743      	lsls	r3, r0, #29
    6134:	d004      	beq.n	6140 <__aeabi_d2f+0x44>
    6136:	230f      	movs	r3, #15
    6138:	4003      	ands	r3, r0
    613a:	2b04      	cmp	r3, #4
    613c:	d000      	beq.n	6140 <__aeabi_d2f+0x44>
    613e:	3004      	adds	r0, #4
    6140:	2180      	movs	r1, #128	; 0x80
    6142:	04c9      	lsls	r1, r1, #19
    6144:	4001      	ands	r1, r0
    6146:	d027      	beq.n	6198 <__aeabi_d2f+0x9c>
    6148:	3201      	adds	r2, #1
    614a:	2aff      	cmp	r2, #255	; 0xff
    614c:	d01d      	beq.n	618a <__aeabi_d2f+0x8e>
    614e:	0183      	lsls	r3, r0, #6
    6150:	0a5b      	lsrs	r3, r3, #9
    6152:	b2d1      	uxtb	r1, r2
    6154:	e001      	b.n	615a <__aeabi_d2f+0x5e>
    6156:	21ff      	movs	r1, #255	; 0xff
    6158:	2300      	movs	r3, #0
    615a:	0258      	lsls	r0, r3, #9
    615c:	05c9      	lsls	r1, r1, #23
    615e:	0a40      	lsrs	r0, r0, #9
    6160:	07e4      	lsls	r4, r4, #31
    6162:	4308      	orrs	r0, r1
    6164:	4320      	orrs	r0, r4
    6166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6168:	2b00      	cmp	r3, #0
    616a:	d106      	bne.n	617a <__aeabi_d2f+0x7e>
    616c:	4335      	orrs	r5, r6
    616e:	d111      	bne.n	6194 <__aeabi_d2f+0x98>
    6170:	2100      	movs	r1, #0
    6172:	2000      	movs	r0, #0
    6174:	0243      	lsls	r3, r0, #9
    6176:	0a5b      	lsrs	r3, r3, #9
    6178:	e7ef      	b.n	615a <__aeabi_d2f+0x5e>
    617a:	432e      	orrs	r6, r5
    617c:	d0eb      	beq.n	6156 <__aeabi_d2f+0x5a>
    617e:	2080      	movs	r0, #128	; 0x80
    6180:	00ed      	lsls	r5, r5, #3
    6182:	0480      	lsls	r0, r0, #18
    6184:	4328      	orrs	r0, r5
    6186:	22ff      	movs	r2, #255	; 0xff
    6188:	e7d3      	b.n	6132 <__aeabi_d2f+0x36>
    618a:	21ff      	movs	r1, #255	; 0xff
    618c:	2300      	movs	r3, #0
    618e:	e7e4      	b.n	615a <__aeabi_d2f+0x5e>
    6190:	3217      	adds	r2, #23
    6192:	da0d      	bge.n	61b0 <__aeabi_d2f+0xb4>
    6194:	2005      	movs	r0, #5
    6196:	2200      	movs	r2, #0
    6198:	08c0      	lsrs	r0, r0, #3
    619a:	b2d1      	uxtb	r1, r2
    619c:	2aff      	cmp	r2, #255	; 0xff
    619e:	d1e9      	bne.n	6174 <__aeabi_d2f+0x78>
    61a0:	2800      	cmp	r0, #0
    61a2:	d0d9      	beq.n	6158 <__aeabi_d2f+0x5c>
    61a4:	2380      	movs	r3, #128	; 0x80
    61a6:	03db      	lsls	r3, r3, #15
    61a8:	4303      	orrs	r3, r0
    61aa:	025b      	lsls	r3, r3, #9
    61ac:	0a5b      	lsrs	r3, r3, #9
    61ae:	e7d4      	b.n	615a <__aeabi_d2f+0x5e>
    61b0:	2280      	movs	r2, #128	; 0x80
    61b2:	4914      	ldr	r1, [pc, #80]	; (6204 <__aeabi_d2f+0x108>)
    61b4:	0412      	lsls	r2, r2, #16
    61b6:	4315      	orrs	r5, r2
    61b8:	1ac9      	subs	r1, r1, r3
    61ba:	291f      	cmp	r1, #31
    61bc:	dc0d      	bgt.n	61da <__aeabi_d2f+0xde>
    61be:	4a12      	ldr	r2, [pc, #72]	; (6208 <__aeabi_d2f+0x10c>)
    61c0:	1c37      	adds	r7, r6, #0
    61c2:	189b      	adds	r3, r3, r2
    61c4:	1c28      	adds	r0, r5, #0
    61c6:	409f      	lsls	r7, r3
    61c8:	4098      	lsls	r0, r3
    61ca:	1c3b      	adds	r3, r7, #0
    61cc:	1e5a      	subs	r2, r3, #1
    61ce:	4193      	sbcs	r3, r2
    61d0:	4318      	orrs	r0, r3
    61d2:	40ce      	lsrs	r6, r1
    61d4:	4330      	orrs	r0, r6
    61d6:	2200      	movs	r2, #0
    61d8:	e7ab      	b.n	6132 <__aeabi_d2f+0x36>
    61da:	4f0c      	ldr	r7, [pc, #48]	; (620c <__aeabi_d2f+0x110>)
    61dc:	1c2a      	adds	r2, r5, #0
    61de:	1aff      	subs	r7, r7, r3
    61e0:	40fa      	lsrs	r2, r7
    61e2:	1c17      	adds	r7, r2, #0
    61e4:	2920      	cmp	r1, #32
    61e6:	d009      	beq.n	61fc <__aeabi_d2f+0x100>
    61e8:	4a09      	ldr	r2, [pc, #36]	; (6210 <__aeabi_d2f+0x114>)
    61ea:	1898      	adds	r0, r3, r2
    61ec:	4085      	lsls	r5, r0
    61ee:	1c28      	adds	r0, r5, #0
    61f0:	4330      	orrs	r0, r6
    61f2:	1e46      	subs	r6, r0, #1
    61f4:	41b0      	sbcs	r0, r6
    61f6:	4338      	orrs	r0, r7
    61f8:	2200      	movs	r2, #0
    61fa:	e79a      	b.n	6132 <__aeabi_d2f+0x36>
    61fc:	2000      	movs	r0, #0
    61fe:	e7f7      	b.n	61f0 <__aeabi_d2f+0xf4>
    6200:	fffffc80 	.word	0xfffffc80
    6204:	0000039e 	.word	0x0000039e
    6208:	fffffc82 	.word	0xfffffc82
    620c:	0000037e 	.word	0x0000037e
    6210:	fffffca2 	.word	0xfffffca2

00006214 <__clzsi2>:
    6214:	211c      	movs	r1, #28
    6216:	2301      	movs	r3, #1
    6218:	041b      	lsls	r3, r3, #16
    621a:	4298      	cmp	r0, r3
    621c:	d301      	bcc.n	6222 <__clzsi2+0xe>
    621e:	0c00      	lsrs	r0, r0, #16
    6220:	3910      	subs	r1, #16
    6222:	0a1b      	lsrs	r3, r3, #8
    6224:	4298      	cmp	r0, r3
    6226:	d301      	bcc.n	622c <__clzsi2+0x18>
    6228:	0a00      	lsrs	r0, r0, #8
    622a:	3908      	subs	r1, #8
    622c:	091b      	lsrs	r3, r3, #4
    622e:	4298      	cmp	r0, r3
    6230:	d301      	bcc.n	6236 <__clzsi2+0x22>
    6232:	0900      	lsrs	r0, r0, #4
    6234:	3904      	subs	r1, #4
    6236:	a202      	add	r2, pc, #8	; (adr r2, 6240 <__clzsi2+0x2c>)
    6238:	5c10      	ldrb	r0, [r2, r0]
    623a:	1840      	adds	r0, r0, r1
    623c:	4770      	bx	lr
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	02020304 	.word	0x02020304
    6244:	01010101 	.word	0x01010101
	...

00006250 <__libc_init_array>:
    6250:	b570      	push	{r4, r5, r6, lr}
    6252:	4b0e      	ldr	r3, [pc, #56]	; (628c <__libc_init_array+0x3c>)
    6254:	4d0e      	ldr	r5, [pc, #56]	; (6290 <__libc_init_array+0x40>)
    6256:	2400      	movs	r4, #0
    6258:	1aed      	subs	r5, r5, r3
    625a:	10ad      	asrs	r5, r5, #2
    625c:	1c1e      	adds	r6, r3, #0
    625e:	42ac      	cmp	r4, r5
    6260:	d004      	beq.n	626c <__libc_init_array+0x1c>
    6262:	00a3      	lsls	r3, r4, #2
    6264:	58f3      	ldr	r3, [r6, r3]
    6266:	4798      	blx	r3
    6268:	3401      	adds	r4, #1
    626a:	e7f8      	b.n	625e <__libc_init_array+0xe>
    626c:	f001 f942 	bl	74f4 <_init>
    6270:	4b08      	ldr	r3, [pc, #32]	; (6294 <__libc_init_array+0x44>)
    6272:	4d09      	ldr	r5, [pc, #36]	; (6298 <__libc_init_array+0x48>)
    6274:	2400      	movs	r4, #0
    6276:	1aed      	subs	r5, r5, r3
    6278:	10ad      	asrs	r5, r5, #2
    627a:	1c1e      	adds	r6, r3, #0
    627c:	42ac      	cmp	r4, r5
    627e:	d004      	beq.n	628a <__libc_init_array+0x3a>
    6280:	00a3      	lsls	r3, r4, #2
    6282:	58f3      	ldr	r3, [r6, r3]
    6284:	4798      	blx	r3
    6286:	3401      	adds	r4, #1
    6288:	e7f8      	b.n	627c <__libc_init_array+0x2c>
    628a:	bd70      	pop	{r4, r5, r6, pc}
    628c:	00007500 	.word	0x00007500
    6290:	00007500 	.word	0x00007500
    6294:	00007500 	.word	0x00007500
    6298:	00007504 	.word	0x00007504

0000629c <memcpy>:
    629c:	b510      	push	{r4, lr}
    629e:	2300      	movs	r3, #0
    62a0:	4293      	cmp	r3, r2
    62a2:	d003      	beq.n	62ac <memcpy+0x10>
    62a4:	5ccc      	ldrb	r4, [r1, r3]
    62a6:	54c4      	strb	r4, [r0, r3]
    62a8:	3301      	adds	r3, #1
    62aa:	e7f9      	b.n	62a0 <memcpy+0x4>
    62ac:	bd10      	pop	{r4, pc}

000062ae <memset>:
    62ae:	1c03      	adds	r3, r0, #0
    62b0:	1882      	adds	r2, r0, r2
    62b2:	4293      	cmp	r3, r2
    62b4:	d002      	beq.n	62bc <memset+0xe>
    62b6:	7019      	strb	r1, [r3, #0]
    62b8:	3301      	adds	r3, #1
    62ba:	e7fa      	b.n	62b2 <memset+0x4>
    62bc:	4770      	bx	lr
	...

000062c0 <iprintf>:
    62c0:	b40f      	push	{r0, r1, r2, r3}
    62c2:	4b0b      	ldr	r3, [pc, #44]	; (62f0 <iprintf+0x30>)
    62c4:	b513      	push	{r0, r1, r4, lr}
    62c6:	681c      	ldr	r4, [r3, #0]
    62c8:	2c00      	cmp	r4, #0
    62ca:	d005      	beq.n	62d8 <iprintf+0x18>
    62cc:	69a3      	ldr	r3, [r4, #24]
    62ce:	2b00      	cmp	r3, #0
    62d0:	d102      	bne.n	62d8 <iprintf+0x18>
    62d2:	1c20      	adds	r0, r4, #0
    62d4:	f000 fd2c 	bl	6d30 <__sinit>
    62d8:	ab05      	add	r3, sp, #20
    62da:	68a1      	ldr	r1, [r4, #8]
    62dc:	1c20      	adds	r0, r4, #0
    62de:	9a04      	ldr	r2, [sp, #16]
    62e0:	9301      	str	r3, [sp, #4]
    62e2:	f000 f8bf 	bl	6464 <_vfiprintf_r>
    62e6:	bc16      	pop	{r1, r2, r4}
    62e8:	bc08      	pop	{r3}
    62ea:	b004      	add	sp, #16
    62ec:	4718      	bx	r3
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	2000006c 	.word	0x2000006c

000062f4 <setbuf>:
    62f4:	b508      	push	{r3, lr}
    62f6:	424a      	negs	r2, r1
    62f8:	414a      	adcs	r2, r1
    62fa:	2380      	movs	r3, #128	; 0x80
    62fc:	0052      	lsls	r2, r2, #1
    62fe:	00db      	lsls	r3, r3, #3
    6300:	f000 f802 	bl	6308 <setvbuf>
    6304:	bd08      	pop	{r3, pc}
	...

00006308 <setvbuf>:
    6308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    630a:	1c1e      	adds	r6, r3, #0
    630c:	4b3c      	ldr	r3, [pc, #240]	; (6400 <setvbuf+0xf8>)
    630e:	1c04      	adds	r4, r0, #0
    6310:	681d      	ldr	r5, [r3, #0]
    6312:	1c0f      	adds	r7, r1, #0
    6314:	9201      	str	r2, [sp, #4]
    6316:	2d00      	cmp	r5, #0
    6318:	d005      	beq.n	6326 <setvbuf+0x1e>
    631a:	69aa      	ldr	r2, [r5, #24]
    631c:	2a00      	cmp	r2, #0
    631e:	d102      	bne.n	6326 <setvbuf+0x1e>
    6320:	1c28      	adds	r0, r5, #0
    6322:	f000 fd05 	bl	6d30 <__sinit>
    6326:	4b37      	ldr	r3, [pc, #220]	; (6404 <setvbuf+0xfc>)
    6328:	429c      	cmp	r4, r3
    632a:	d101      	bne.n	6330 <setvbuf+0x28>
    632c:	686c      	ldr	r4, [r5, #4]
    632e:	e008      	b.n	6342 <setvbuf+0x3a>
    6330:	4b35      	ldr	r3, [pc, #212]	; (6408 <setvbuf+0x100>)
    6332:	429c      	cmp	r4, r3
    6334:	d101      	bne.n	633a <setvbuf+0x32>
    6336:	68ac      	ldr	r4, [r5, #8]
    6338:	e003      	b.n	6342 <setvbuf+0x3a>
    633a:	4b34      	ldr	r3, [pc, #208]	; (640c <setvbuf+0x104>)
    633c:	429c      	cmp	r4, r3
    633e:	d100      	bne.n	6342 <setvbuf+0x3a>
    6340:	68ec      	ldr	r4, [r5, #12]
    6342:	9b01      	ldr	r3, [sp, #4]
    6344:	2b02      	cmp	r3, #2
    6346:	d857      	bhi.n	63f8 <setvbuf+0xf0>
    6348:	2e00      	cmp	r6, #0
    634a:	db55      	blt.n	63f8 <setvbuf+0xf0>
    634c:	1c28      	adds	r0, r5, #0
    634e:	1c21      	adds	r1, r4, #0
    6350:	f000 fc6e 	bl	6c30 <_fflush_r>
    6354:	2300      	movs	r3, #0
    6356:	6063      	str	r3, [r4, #4]
    6358:	61a3      	str	r3, [r4, #24]
    635a:	89a3      	ldrh	r3, [r4, #12]
    635c:	061a      	lsls	r2, r3, #24
    635e:	d503      	bpl.n	6368 <setvbuf+0x60>
    6360:	1c28      	adds	r0, r5, #0
    6362:	6921      	ldr	r1, [r4, #16]
    6364:	f000 fdba 	bl	6edc <_free_r>
    6368:	89a3      	ldrh	r3, [r4, #12]
    636a:	2283      	movs	r2, #131	; 0x83
    636c:	4393      	bics	r3, r2
    636e:	81a3      	strh	r3, [r4, #12]
    6370:	9b01      	ldr	r3, [sp, #4]
    6372:	2b02      	cmp	r3, #2
    6374:	d013      	beq.n	639e <setvbuf+0x96>
    6376:	2f00      	cmp	r7, #0
    6378:	d125      	bne.n	63c6 <setvbuf+0xbe>
    637a:	2e00      	cmp	r6, #0
    637c:	d101      	bne.n	6382 <setvbuf+0x7a>
    637e:	2680      	movs	r6, #128	; 0x80
    6380:	00f6      	lsls	r6, r6, #3
    6382:	1c30      	adds	r0, r6, #0
    6384:	f000 fd94 	bl	6eb0 <malloc>
    6388:	1e07      	subs	r7, r0, #0
    638a:	d118      	bne.n	63be <setvbuf+0xb6>
    638c:	2080      	movs	r0, #128	; 0x80
    638e:	00c0      	lsls	r0, r0, #3
    6390:	f000 fd8e 	bl	6eb0 <malloc>
    6394:	1e07      	subs	r7, r0, #0
    6396:	d110      	bne.n	63ba <setvbuf+0xb2>
    6398:	2001      	movs	r0, #1
    639a:	4240      	negs	r0, r0
    639c:	e000      	b.n	63a0 <setvbuf+0x98>
    639e:	2000      	movs	r0, #0
    63a0:	89a3      	ldrh	r3, [r4, #12]
    63a2:	2202      	movs	r2, #2
    63a4:	4313      	orrs	r3, r2
    63a6:	81a3      	strh	r3, [r4, #12]
    63a8:	2300      	movs	r3, #0
    63aa:	60a3      	str	r3, [r4, #8]
    63ac:	1c23      	adds	r3, r4, #0
    63ae:	3347      	adds	r3, #71	; 0x47
    63b0:	6023      	str	r3, [r4, #0]
    63b2:	6123      	str	r3, [r4, #16]
    63b4:	2301      	movs	r3, #1
    63b6:	6163      	str	r3, [r4, #20]
    63b8:	e020      	b.n	63fc <setvbuf+0xf4>
    63ba:	2680      	movs	r6, #128	; 0x80
    63bc:	00f6      	lsls	r6, r6, #3
    63be:	89a3      	ldrh	r3, [r4, #12]
    63c0:	2280      	movs	r2, #128	; 0x80
    63c2:	4313      	orrs	r3, r2
    63c4:	81a3      	strh	r3, [r4, #12]
    63c6:	9a01      	ldr	r2, [sp, #4]
    63c8:	2a01      	cmp	r2, #1
    63ca:	d104      	bne.n	63d6 <setvbuf+0xce>
    63cc:	89a3      	ldrh	r3, [r4, #12]
    63ce:	4313      	orrs	r3, r2
    63d0:	81a3      	strh	r3, [r4, #12]
    63d2:	4273      	negs	r3, r6
    63d4:	61a3      	str	r3, [r4, #24]
    63d6:	4b0e      	ldr	r3, [pc, #56]	; (6410 <setvbuf+0x108>)
    63d8:	2000      	movs	r0, #0
    63da:	62ab      	str	r3, [r5, #40]	; 0x28
    63dc:	89a3      	ldrh	r3, [r4, #12]
    63de:	6027      	str	r7, [r4, #0]
    63e0:	6127      	str	r7, [r4, #16]
    63e2:	6166      	str	r6, [r4, #20]
    63e4:	071a      	lsls	r2, r3, #28
    63e6:	d509      	bpl.n	63fc <setvbuf+0xf4>
    63e8:	2203      	movs	r2, #3
    63ea:	4013      	ands	r3, r2
    63ec:	425a      	negs	r2, r3
    63ee:	4153      	adcs	r3, r2
    63f0:	425b      	negs	r3, r3
    63f2:	401e      	ands	r6, r3
    63f4:	60a6      	str	r6, [r4, #8]
    63f6:	e001      	b.n	63fc <setvbuf+0xf4>
    63f8:	2001      	movs	r0, #1
    63fa:	4240      	negs	r0, r0
    63fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	2000006c 	.word	0x2000006c
    6404:	00007494 	.word	0x00007494
    6408:	000074b4 	.word	0x000074b4
    640c:	000074d4 	.word	0x000074d4
    6410:	00006c89 	.word	0x00006c89

00006414 <__sfputc_r>:
    6414:	6893      	ldr	r3, [r2, #8]
    6416:	b510      	push	{r4, lr}
    6418:	3b01      	subs	r3, #1
    641a:	6093      	str	r3, [r2, #8]
    641c:	2b00      	cmp	r3, #0
    641e:	da05      	bge.n	642c <__sfputc_r+0x18>
    6420:	6994      	ldr	r4, [r2, #24]
    6422:	42a3      	cmp	r3, r4
    6424:	db08      	blt.n	6438 <__sfputc_r+0x24>
    6426:	b2cb      	uxtb	r3, r1
    6428:	2b0a      	cmp	r3, #10
    642a:	d005      	beq.n	6438 <__sfputc_r+0x24>
    642c:	6813      	ldr	r3, [r2, #0]
    642e:	1c58      	adds	r0, r3, #1
    6430:	6010      	str	r0, [r2, #0]
    6432:	7019      	strb	r1, [r3, #0]
    6434:	b2c8      	uxtb	r0, r1
    6436:	e001      	b.n	643c <__sfputc_r+0x28>
    6438:	f000 faa6 	bl	6988 <__swbuf_r>
    643c:	bd10      	pop	{r4, pc}

0000643e <__sfputs_r>:
    643e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6440:	1c06      	adds	r6, r0, #0
    6442:	1c0f      	adds	r7, r1, #0
    6444:	1c14      	adds	r4, r2, #0
    6446:	18d5      	adds	r5, r2, r3
    6448:	42ac      	cmp	r4, r5
    644a:	d008      	beq.n	645e <__sfputs_r+0x20>
    644c:	7821      	ldrb	r1, [r4, #0]
    644e:	1c30      	adds	r0, r6, #0
    6450:	1c3a      	adds	r2, r7, #0
    6452:	f7ff ffdf 	bl	6414 <__sfputc_r>
    6456:	3401      	adds	r4, #1
    6458:	1c43      	adds	r3, r0, #1
    645a:	d1f5      	bne.n	6448 <__sfputs_r+0xa>
    645c:	e000      	b.n	6460 <__sfputs_r+0x22>
    645e:	2000      	movs	r0, #0
    6460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006464 <_vfiprintf_r>:
    6464:	b5f0      	push	{r4, r5, r6, r7, lr}
    6466:	b09f      	sub	sp, #124	; 0x7c
    6468:	1c06      	adds	r6, r0, #0
    646a:	1c0f      	adds	r7, r1, #0
    646c:	9203      	str	r2, [sp, #12]
    646e:	9305      	str	r3, [sp, #20]
    6470:	2800      	cmp	r0, #0
    6472:	d004      	beq.n	647e <_vfiprintf_r+0x1a>
    6474:	6981      	ldr	r1, [r0, #24]
    6476:	2900      	cmp	r1, #0
    6478:	d101      	bne.n	647e <_vfiprintf_r+0x1a>
    647a:	f000 fc59 	bl	6d30 <__sinit>
    647e:	4b75      	ldr	r3, [pc, #468]	; (6654 <_vfiprintf_r+0x1f0>)
    6480:	429f      	cmp	r7, r3
    6482:	d101      	bne.n	6488 <_vfiprintf_r+0x24>
    6484:	6877      	ldr	r7, [r6, #4]
    6486:	e008      	b.n	649a <_vfiprintf_r+0x36>
    6488:	4b73      	ldr	r3, [pc, #460]	; (6658 <_vfiprintf_r+0x1f4>)
    648a:	429f      	cmp	r7, r3
    648c:	d101      	bne.n	6492 <_vfiprintf_r+0x2e>
    648e:	68b7      	ldr	r7, [r6, #8]
    6490:	e003      	b.n	649a <_vfiprintf_r+0x36>
    6492:	4b72      	ldr	r3, [pc, #456]	; (665c <_vfiprintf_r+0x1f8>)
    6494:	429f      	cmp	r7, r3
    6496:	d100      	bne.n	649a <_vfiprintf_r+0x36>
    6498:	68f7      	ldr	r7, [r6, #12]
    649a:	89bb      	ldrh	r3, [r7, #12]
    649c:	071a      	lsls	r2, r3, #28
    649e:	d50a      	bpl.n	64b6 <_vfiprintf_r+0x52>
    64a0:	693b      	ldr	r3, [r7, #16]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d007      	beq.n	64b6 <_vfiprintf_r+0x52>
    64a6:	ad06      	add	r5, sp, #24
    64a8:	2300      	movs	r3, #0
    64aa:	616b      	str	r3, [r5, #20]
    64ac:	2320      	movs	r3, #32
    64ae:	766b      	strb	r3, [r5, #25]
    64b0:	2330      	movs	r3, #48	; 0x30
    64b2:	76ab      	strb	r3, [r5, #26]
    64b4:	e03b      	b.n	652e <_vfiprintf_r+0xca>
    64b6:	1c30      	adds	r0, r6, #0
    64b8:	1c39      	adds	r1, r7, #0
    64ba:	f000 fabd 	bl	6a38 <__swsetup_r>
    64be:	2800      	cmp	r0, #0
    64c0:	d0f1      	beq.n	64a6 <_vfiprintf_r+0x42>
    64c2:	2001      	movs	r0, #1
    64c4:	4240      	negs	r0, r0
    64c6:	e0c2      	b.n	664e <_vfiprintf_r+0x1ea>
    64c8:	9a05      	ldr	r2, [sp, #20]
    64ca:	1d11      	adds	r1, r2, #4
    64cc:	6812      	ldr	r2, [r2, #0]
    64ce:	9105      	str	r1, [sp, #20]
    64d0:	2a00      	cmp	r2, #0
    64d2:	db76      	blt.n	65c2 <_vfiprintf_r+0x15e>
    64d4:	9209      	str	r2, [sp, #36]	; 0x24
    64d6:	3401      	adds	r4, #1
    64d8:	7823      	ldrb	r3, [r4, #0]
    64da:	2b2e      	cmp	r3, #46	; 0x2e
    64dc:	d100      	bne.n	64e0 <_vfiprintf_r+0x7c>
    64de:	e081      	b.n	65e4 <_vfiprintf_r+0x180>
    64e0:	7821      	ldrb	r1, [r4, #0]
    64e2:	485f      	ldr	r0, [pc, #380]	; (6660 <_vfiprintf_r+0x1fc>)
    64e4:	2203      	movs	r2, #3
    64e6:	f000 fced 	bl	6ec4 <memchr>
    64ea:	2800      	cmp	r0, #0
    64ec:	d007      	beq.n	64fe <_vfiprintf_r+0x9a>
    64ee:	495c      	ldr	r1, [pc, #368]	; (6660 <_vfiprintf_r+0x1fc>)
    64f0:	682a      	ldr	r2, [r5, #0]
    64f2:	1a43      	subs	r3, r0, r1
    64f4:	2040      	movs	r0, #64	; 0x40
    64f6:	4098      	lsls	r0, r3
    64f8:	4310      	orrs	r0, r2
    64fa:	6028      	str	r0, [r5, #0]
    64fc:	3401      	adds	r4, #1
    64fe:	7821      	ldrb	r1, [r4, #0]
    6500:	1c63      	adds	r3, r4, #1
    6502:	4858      	ldr	r0, [pc, #352]	; (6664 <_vfiprintf_r+0x200>)
    6504:	2206      	movs	r2, #6
    6506:	9303      	str	r3, [sp, #12]
    6508:	7629      	strb	r1, [r5, #24]
    650a:	f000 fcdb 	bl	6ec4 <memchr>
    650e:	2800      	cmp	r0, #0
    6510:	d100      	bne.n	6514 <_vfiprintf_r+0xb0>
    6512:	e08a      	b.n	662a <_vfiprintf_r+0x1c6>
    6514:	4b54      	ldr	r3, [pc, #336]	; (6668 <_vfiprintf_r+0x204>)
    6516:	2b00      	cmp	r3, #0
    6518:	d17e      	bne.n	6618 <_vfiprintf_r+0x1b4>
    651a:	9b05      	ldr	r3, [sp, #20]
    651c:	2207      	movs	r2, #7
    651e:	3307      	adds	r3, #7
    6520:	4393      	bics	r3, r2
    6522:	3308      	adds	r3, #8
    6524:	9305      	str	r3, [sp, #20]
    6526:	696a      	ldr	r2, [r5, #20]
    6528:	9904      	ldr	r1, [sp, #16]
    652a:	1853      	adds	r3, r2, r1
    652c:	616b      	str	r3, [r5, #20]
    652e:	9c03      	ldr	r4, [sp, #12]
    6530:	7823      	ldrb	r3, [r4, #0]
    6532:	2b00      	cmp	r3, #0
    6534:	d104      	bne.n	6540 <_vfiprintf_r+0xdc>
    6536:	9903      	ldr	r1, [sp, #12]
    6538:	1a61      	subs	r1, r4, r1
    653a:	9102      	str	r1, [sp, #8]
    653c:	d010      	beq.n	6560 <_vfiprintf_r+0xfc>
    653e:	e003      	b.n	6548 <_vfiprintf_r+0xe4>
    6540:	2b25      	cmp	r3, #37	; 0x25
    6542:	d0f8      	beq.n	6536 <_vfiprintf_r+0xd2>
    6544:	3401      	adds	r4, #1
    6546:	e7f3      	b.n	6530 <_vfiprintf_r+0xcc>
    6548:	1c30      	adds	r0, r6, #0
    654a:	1c39      	adds	r1, r7, #0
    654c:	9a03      	ldr	r2, [sp, #12]
    654e:	9b02      	ldr	r3, [sp, #8]
    6550:	f7ff ff75 	bl	643e <__sfputs_r>
    6554:	3001      	adds	r0, #1
    6556:	d075      	beq.n	6644 <_vfiprintf_r+0x1e0>
    6558:	696a      	ldr	r2, [r5, #20]
    655a:	9902      	ldr	r1, [sp, #8]
    655c:	1853      	adds	r3, r2, r1
    655e:	616b      	str	r3, [r5, #20]
    6560:	7823      	ldrb	r3, [r4, #0]
    6562:	2b00      	cmp	r3, #0
    6564:	d06e      	beq.n	6644 <_vfiprintf_r+0x1e0>
    6566:	2201      	movs	r2, #1
    6568:	4252      	negs	r2, r2
    656a:	606a      	str	r2, [r5, #4]
    656c:	466a      	mov	r2, sp
    656e:	2300      	movs	r3, #0
    6570:	325b      	adds	r2, #91	; 0x5b
    6572:	3401      	adds	r4, #1
    6574:	602b      	str	r3, [r5, #0]
    6576:	60eb      	str	r3, [r5, #12]
    6578:	60ab      	str	r3, [r5, #8]
    657a:	7013      	strb	r3, [r2, #0]
    657c:	65ab      	str	r3, [r5, #88]	; 0x58
    657e:	7821      	ldrb	r1, [r4, #0]
    6580:	483a      	ldr	r0, [pc, #232]	; (666c <_vfiprintf_r+0x208>)
    6582:	2205      	movs	r2, #5
    6584:	f000 fc9e 	bl	6ec4 <memchr>
    6588:	2800      	cmp	r0, #0
    658a:	d008      	beq.n	659e <_vfiprintf_r+0x13a>
    658c:	4a37      	ldr	r2, [pc, #220]	; (666c <_vfiprintf_r+0x208>)
    658e:	3401      	adds	r4, #1
    6590:	1a83      	subs	r3, r0, r2
    6592:	2001      	movs	r0, #1
    6594:	4098      	lsls	r0, r3
    6596:	682b      	ldr	r3, [r5, #0]
    6598:	4318      	orrs	r0, r3
    659a:	6028      	str	r0, [r5, #0]
    659c:	e7ef      	b.n	657e <_vfiprintf_r+0x11a>
    659e:	682b      	ldr	r3, [r5, #0]
    65a0:	06d9      	lsls	r1, r3, #27
    65a2:	d503      	bpl.n	65ac <_vfiprintf_r+0x148>
    65a4:	466a      	mov	r2, sp
    65a6:	2120      	movs	r1, #32
    65a8:	325b      	adds	r2, #91	; 0x5b
    65aa:	7011      	strb	r1, [r2, #0]
    65ac:	071a      	lsls	r2, r3, #28
    65ae:	d503      	bpl.n	65b8 <_vfiprintf_r+0x154>
    65b0:	466a      	mov	r2, sp
    65b2:	212b      	movs	r1, #43	; 0x2b
    65b4:	325b      	adds	r2, #91	; 0x5b
    65b6:	7011      	strb	r1, [r2, #0]
    65b8:	7822      	ldrb	r2, [r4, #0]
    65ba:	2a2a      	cmp	r2, #42	; 0x2a
    65bc:	d084      	beq.n	64c8 <_vfiprintf_r+0x64>
    65be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65c0:	e005      	b.n	65ce <_vfiprintf_r+0x16a>
    65c2:	4252      	negs	r2, r2
    65c4:	60ea      	str	r2, [r5, #12]
    65c6:	2202      	movs	r2, #2
    65c8:	4313      	orrs	r3, r2
    65ca:	602b      	str	r3, [r5, #0]
    65cc:	e783      	b.n	64d6 <_vfiprintf_r+0x72>
    65ce:	7822      	ldrb	r2, [r4, #0]
    65d0:	3a30      	subs	r2, #48	; 0x30
    65d2:	2a09      	cmp	r2, #9
    65d4:	d804      	bhi.n	65e0 <_vfiprintf_r+0x17c>
    65d6:	210a      	movs	r1, #10
    65d8:	434b      	muls	r3, r1
    65da:	3401      	adds	r4, #1
    65dc:	189b      	adds	r3, r3, r2
    65de:	e7f6      	b.n	65ce <_vfiprintf_r+0x16a>
    65e0:	9309      	str	r3, [sp, #36]	; 0x24
    65e2:	e779      	b.n	64d8 <_vfiprintf_r+0x74>
    65e4:	7863      	ldrb	r3, [r4, #1]
    65e6:	2b2a      	cmp	r3, #42	; 0x2a
    65e8:	d109      	bne.n	65fe <_vfiprintf_r+0x19a>
    65ea:	9b05      	ldr	r3, [sp, #20]
    65ec:	3402      	adds	r4, #2
    65ee:	1d1a      	adds	r2, r3, #4
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	9205      	str	r2, [sp, #20]
    65f4:	2b00      	cmp	r3, #0
    65f6:	da0d      	bge.n	6614 <_vfiprintf_r+0x1b0>
    65f8:	2301      	movs	r3, #1
    65fa:	425b      	negs	r3, r3
    65fc:	e00a      	b.n	6614 <_vfiprintf_r+0x1b0>
    65fe:	3401      	adds	r4, #1
    6600:	2300      	movs	r3, #0
    6602:	7822      	ldrb	r2, [r4, #0]
    6604:	3a30      	subs	r2, #48	; 0x30
    6606:	2a09      	cmp	r2, #9
    6608:	d804      	bhi.n	6614 <_vfiprintf_r+0x1b0>
    660a:	210a      	movs	r1, #10
    660c:	434b      	muls	r3, r1
    660e:	3401      	adds	r4, #1
    6610:	189b      	adds	r3, r3, r2
    6612:	e7f6      	b.n	6602 <_vfiprintf_r+0x19e>
    6614:	9307      	str	r3, [sp, #28]
    6616:	e763      	b.n	64e0 <_vfiprintf_r+0x7c>
    6618:	ab05      	add	r3, sp, #20
    661a:	9300      	str	r3, [sp, #0]
    661c:	1c30      	adds	r0, r6, #0
    661e:	1c29      	adds	r1, r5, #0
    6620:	1c3a      	adds	r2, r7, #0
    6622:	4b13      	ldr	r3, [pc, #76]	; (6670 <_vfiprintf_r+0x20c>)
    6624:	e000      	b.n	6628 <_vfiprintf_r+0x1c4>
    6626:	bf00      	nop
    6628:	e007      	b.n	663a <_vfiprintf_r+0x1d6>
    662a:	ab05      	add	r3, sp, #20
    662c:	9300      	str	r3, [sp, #0]
    662e:	1c30      	adds	r0, r6, #0
    6630:	1c29      	adds	r1, r5, #0
    6632:	1c3a      	adds	r2, r7, #0
    6634:	4b0e      	ldr	r3, [pc, #56]	; (6670 <_vfiprintf_r+0x20c>)
    6636:	f000 f891 	bl	675c <_printf_i>
    663a:	9004      	str	r0, [sp, #16]
    663c:	9904      	ldr	r1, [sp, #16]
    663e:	3101      	adds	r1, #1
    6640:	d000      	beq.n	6644 <_vfiprintf_r+0x1e0>
    6642:	e770      	b.n	6526 <_vfiprintf_r+0xc2>
    6644:	89bb      	ldrh	r3, [r7, #12]
    6646:	065a      	lsls	r2, r3, #25
    6648:	d500      	bpl.n	664c <_vfiprintf_r+0x1e8>
    664a:	e73a      	b.n	64c2 <_vfiprintf_r+0x5e>
    664c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    664e:	b01f      	add	sp, #124	; 0x7c
    6650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	00007494 	.word	0x00007494
    6658:	000074b4 	.word	0x000074b4
    665c:	000074d4 	.word	0x000074d4
    6660:	00007466 	.word	0x00007466
    6664:	0000746a 	.word	0x0000746a
    6668:	00000000 	.word	0x00000000
    666c:	00007460 	.word	0x00007460
    6670:	0000643f 	.word	0x0000643f

00006674 <_printf_common>:
    6674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6676:	1c15      	adds	r5, r2, #0
    6678:	9301      	str	r3, [sp, #4]
    667a:	690a      	ldr	r2, [r1, #16]
    667c:	688b      	ldr	r3, [r1, #8]
    667e:	1c06      	adds	r6, r0, #0
    6680:	1c0c      	adds	r4, r1, #0
    6682:	4293      	cmp	r3, r2
    6684:	da00      	bge.n	6688 <_printf_common+0x14>
    6686:	1c13      	adds	r3, r2, #0
    6688:	1c22      	adds	r2, r4, #0
    668a:	602b      	str	r3, [r5, #0]
    668c:	3243      	adds	r2, #67	; 0x43
    668e:	7812      	ldrb	r2, [r2, #0]
    6690:	2a00      	cmp	r2, #0
    6692:	d001      	beq.n	6698 <_printf_common+0x24>
    6694:	3301      	adds	r3, #1
    6696:	602b      	str	r3, [r5, #0]
    6698:	6820      	ldr	r0, [r4, #0]
    669a:	0680      	lsls	r0, r0, #26
    669c:	d502      	bpl.n	66a4 <_printf_common+0x30>
    669e:	682b      	ldr	r3, [r5, #0]
    66a0:	3302      	adds	r3, #2
    66a2:	602b      	str	r3, [r5, #0]
    66a4:	6821      	ldr	r1, [r4, #0]
    66a6:	2706      	movs	r7, #6
    66a8:	400f      	ands	r7, r1
    66aa:	d01f      	beq.n	66ec <_printf_common+0x78>
    66ac:	1c23      	adds	r3, r4, #0
    66ae:	3343      	adds	r3, #67	; 0x43
    66b0:	781b      	ldrb	r3, [r3, #0]
    66b2:	1e5a      	subs	r2, r3, #1
    66b4:	4193      	sbcs	r3, r2
    66b6:	6822      	ldr	r2, [r4, #0]
    66b8:	0692      	lsls	r2, r2, #26
    66ba:	d51f      	bpl.n	66fc <_printf_common+0x88>
    66bc:	18e1      	adds	r1, r4, r3
    66be:	3140      	adds	r1, #64	; 0x40
    66c0:	2030      	movs	r0, #48	; 0x30
    66c2:	70c8      	strb	r0, [r1, #3]
    66c4:	1c21      	adds	r1, r4, #0
    66c6:	1c5a      	adds	r2, r3, #1
    66c8:	3145      	adds	r1, #69	; 0x45
    66ca:	7809      	ldrb	r1, [r1, #0]
    66cc:	18a2      	adds	r2, r4, r2
    66ce:	3240      	adds	r2, #64	; 0x40
    66d0:	3302      	adds	r3, #2
    66d2:	70d1      	strb	r1, [r2, #3]
    66d4:	e012      	b.n	66fc <_printf_common+0x88>
    66d6:	1c22      	adds	r2, r4, #0
    66d8:	1c30      	adds	r0, r6, #0
    66da:	9901      	ldr	r1, [sp, #4]
    66dc:	3219      	adds	r2, #25
    66de:	2301      	movs	r3, #1
    66e0:	9f08      	ldr	r7, [sp, #32]
    66e2:	47b8      	blx	r7
    66e4:	3001      	adds	r0, #1
    66e6:	d011      	beq.n	670c <_printf_common+0x98>
    66e8:	9f00      	ldr	r7, [sp, #0]
    66ea:	3701      	adds	r7, #1
    66ec:	9700      	str	r7, [sp, #0]
    66ee:	68e0      	ldr	r0, [r4, #12]
    66f0:	6829      	ldr	r1, [r5, #0]
    66f2:	9f00      	ldr	r7, [sp, #0]
    66f4:	1a43      	subs	r3, r0, r1
    66f6:	429f      	cmp	r7, r3
    66f8:	dbed      	blt.n	66d6 <_printf_common+0x62>
    66fa:	e7d7      	b.n	66ac <_printf_common+0x38>
    66fc:	1c22      	adds	r2, r4, #0
    66fe:	1c30      	adds	r0, r6, #0
    6700:	9901      	ldr	r1, [sp, #4]
    6702:	3243      	adds	r2, #67	; 0x43
    6704:	9f08      	ldr	r7, [sp, #32]
    6706:	47b8      	blx	r7
    6708:	3001      	adds	r0, #1
    670a:	d102      	bne.n	6712 <_printf_common+0x9e>
    670c:	2001      	movs	r0, #1
    670e:	4240      	negs	r0, r0
    6710:	e023      	b.n	675a <_printf_common+0xe6>
    6712:	6820      	ldr	r0, [r4, #0]
    6714:	2106      	movs	r1, #6
    6716:	682b      	ldr	r3, [r5, #0]
    6718:	68e2      	ldr	r2, [r4, #12]
    671a:	4001      	ands	r1, r0
    671c:	2500      	movs	r5, #0
    671e:	2904      	cmp	r1, #4
    6720:	d103      	bne.n	672a <_printf_common+0xb6>
    6722:	1ad5      	subs	r5, r2, r3
    6724:	43eb      	mvns	r3, r5
    6726:	17db      	asrs	r3, r3, #31
    6728:	401d      	ands	r5, r3
    672a:	68a2      	ldr	r2, [r4, #8]
    672c:	6923      	ldr	r3, [r4, #16]
    672e:	429a      	cmp	r2, r3
    6730:	dd01      	ble.n	6736 <_printf_common+0xc2>
    6732:	1ad3      	subs	r3, r2, r3
    6734:	18ed      	adds	r5, r5, r3
    6736:	2700      	movs	r7, #0
    6738:	9700      	str	r7, [sp, #0]
    673a:	9f00      	ldr	r7, [sp, #0]
    673c:	42af      	cmp	r7, r5
    673e:	da0b      	bge.n	6758 <_printf_common+0xe4>
    6740:	1c22      	adds	r2, r4, #0
    6742:	1c30      	adds	r0, r6, #0
    6744:	9901      	ldr	r1, [sp, #4]
    6746:	321a      	adds	r2, #26
    6748:	2301      	movs	r3, #1
    674a:	9f08      	ldr	r7, [sp, #32]
    674c:	47b8      	blx	r7
    674e:	3001      	adds	r0, #1
    6750:	d0dc      	beq.n	670c <_printf_common+0x98>
    6752:	9f00      	ldr	r7, [sp, #0]
    6754:	3701      	adds	r7, #1
    6756:	e7ef      	b.n	6738 <_printf_common+0xc4>
    6758:	2000      	movs	r0, #0
    675a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000675c <_printf_i>:
    675c:	b5f0      	push	{r4, r5, r6, r7, lr}
    675e:	1c0d      	adds	r5, r1, #0
    6760:	b08b      	sub	sp, #44	; 0x2c
    6762:	3543      	adds	r5, #67	; 0x43
    6764:	9206      	str	r2, [sp, #24]
    6766:	9005      	str	r0, [sp, #20]
    6768:	9307      	str	r3, [sp, #28]
    676a:	9504      	str	r5, [sp, #16]
    676c:	7e0b      	ldrb	r3, [r1, #24]
    676e:	1c0c      	adds	r4, r1, #0
    6770:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6772:	2b6e      	cmp	r3, #110	; 0x6e
    6774:	d100      	bne.n	6778 <_printf_i+0x1c>
    6776:	e0a7      	b.n	68c8 <_printf_i+0x16c>
    6778:	d811      	bhi.n	679e <_printf_i+0x42>
    677a:	2b63      	cmp	r3, #99	; 0x63
    677c:	d022      	beq.n	67c4 <_printf_i+0x68>
    677e:	d809      	bhi.n	6794 <_printf_i+0x38>
    6780:	2b00      	cmp	r3, #0
    6782:	d100      	bne.n	6786 <_printf_i+0x2a>
    6784:	e0b0      	b.n	68e8 <_printf_i+0x18c>
    6786:	2b58      	cmp	r3, #88	; 0x58
    6788:	d000      	beq.n	678c <_printf_i+0x30>
    678a:	e0c0      	b.n	690e <_printf_i+0x1b2>
    678c:	3145      	adds	r1, #69	; 0x45
    678e:	700b      	strb	r3, [r1, #0]
    6790:	4d7b      	ldr	r5, [pc, #492]	; (6980 <_printf_i+0x224>)
    6792:	e04e      	b.n	6832 <_printf_i+0xd6>
    6794:	2b64      	cmp	r3, #100	; 0x64
    6796:	d01c      	beq.n	67d2 <_printf_i+0x76>
    6798:	2b69      	cmp	r3, #105	; 0x69
    679a:	d01a      	beq.n	67d2 <_printf_i+0x76>
    679c:	e0b7      	b.n	690e <_printf_i+0x1b2>
    679e:	2b73      	cmp	r3, #115	; 0x73
    67a0:	d100      	bne.n	67a4 <_printf_i+0x48>
    67a2:	e0a5      	b.n	68f0 <_printf_i+0x194>
    67a4:	d809      	bhi.n	67ba <_printf_i+0x5e>
    67a6:	2b6f      	cmp	r3, #111	; 0x6f
    67a8:	d029      	beq.n	67fe <_printf_i+0xa2>
    67aa:	2b70      	cmp	r3, #112	; 0x70
    67ac:	d000      	beq.n	67b0 <_printf_i+0x54>
    67ae:	e0ae      	b.n	690e <_printf_i+0x1b2>
    67b0:	680e      	ldr	r6, [r1, #0]
    67b2:	2320      	movs	r3, #32
    67b4:	4333      	orrs	r3, r6
    67b6:	600b      	str	r3, [r1, #0]
    67b8:	e036      	b.n	6828 <_printf_i+0xcc>
    67ba:	2b75      	cmp	r3, #117	; 0x75
    67bc:	d01f      	beq.n	67fe <_printf_i+0xa2>
    67be:	2b78      	cmp	r3, #120	; 0x78
    67c0:	d032      	beq.n	6828 <_printf_i+0xcc>
    67c2:	e0a4      	b.n	690e <_printf_i+0x1b2>
    67c4:	6813      	ldr	r3, [r2, #0]
    67c6:	1c0d      	adds	r5, r1, #0
    67c8:	1d19      	adds	r1, r3, #4
    67ca:	3542      	adds	r5, #66	; 0x42
    67cc:	6011      	str	r1, [r2, #0]
    67ce:	681b      	ldr	r3, [r3, #0]
    67d0:	e09f      	b.n	6912 <_printf_i+0x1b6>
    67d2:	6821      	ldr	r1, [r4, #0]
    67d4:	6813      	ldr	r3, [r2, #0]
    67d6:	060e      	lsls	r6, r1, #24
    67d8:	d503      	bpl.n	67e2 <_printf_i+0x86>
    67da:	1d19      	adds	r1, r3, #4
    67dc:	6011      	str	r1, [r2, #0]
    67de:	681e      	ldr	r6, [r3, #0]
    67e0:	e005      	b.n	67ee <_printf_i+0x92>
    67e2:	0648      	lsls	r0, r1, #25
    67e4:	d5f9      	bpl.n	67da <_printf_i+0x7e>
    67e6:	1d19      	adds	r1, r3, #4
    67e8:	6011      	str	r1, [r2, #0]
    67ea:	2100      	movs	r1, #0
    67ec:	5e5e      	ldrsh	r6, [r3, r1]
    67ee:	4b64      	ldr	r3, [pc, #400]	; (6980 <_printf_i+0x224>)
    67f0:	2e00      	cmp	r6, #0
    67f2:	da3b      	bge.n	686c <_printf_i+0x110>
    67f4:	9d04      	ldr	r5, [sp, #16]
    67f6:	222d      	movs	r2, #45	; 0x2d
    67f8:	4276      	negs	r6, r6
    67fa:	702a      	strb	r2, [r5, #0]
    67fc:	e036      	b.n	686c <_printf_i+0x110>
    67fe:	6821      	ldr	r1, [r4, #0]
    6800:	6813      	ldr	r3, [r2, #0]
    6802:	060e      	lsls	r6, r1, #24
    6804:	d503      	bpl.n	680e <_printf_i+0xb2>
    6806:	1d19      	adds	r1, r3, #4
    6808:	6011      	str	r1, [r2, #0]
    680a:	681e      	ldr	r6, [r3, #0]
    680c:	e004      	b.n	6818 <_printf_i+0xbc>
    680e:	0648      	lsls	r0, r1, #25
    6810:	d5f9      	bpl.n	6806 <_printf_i+0xaa>
    6812:	1d19      	adds	r1, r3, #4
    6814:	881e      	ldrh	r6, [r3, #0]
    6816:	6011      	str	r1, [r2, #0]
    6818:	4b59      	ldr	r3, [pc, #356]	; (6980 <_printf_i+0x224>)
    681a:	7e22      	ldrb	r2, [r4, #24]
    681c:	9303      	str	r3, [sp, #12]
    681e:	2708      	movs	r7, #8
    6820:	2a6f      	cmp	r2, #111	; 0x6f
    6822:	d01e      	beq.n	6862 <_printf_i+0x106>
    6824:	270a      	movs	r7, #10
    6826:	e01c      	b.n	6862 <_printf_i+0x106>
    6828:	1c23      	adds	r3, r4, #0
    682a:	2178      	movs	r1, #120	; 0x78
    682c:	3345      	adds	r3, #69	; 0x45
    682e:	4d55      	ldr	r5, [pc, #340]	; (6984 <_printf_i+0x228>)
    6830:	7019      	strb	r1, [r3, #0]
    6832:	6811      	ldr	r1, [r2, #0]
    6834:	6823      	ldr	r3, [r4, #0]
    6836:	1d08      	adds	r0, r1, #4
    6838:	9503      	str	r5, [sp, #12]
    683a:	6010      	str	r0, [r2, #0]
    683c:	061e      	lsls	r6, r3, #24
    683e:	d501      	bpl.n	6844 <_printf_i+0xe8>
    6840:	680e      	ldr	r6, [r1, #0]
    6842:	e002      	b.n	684a <_printf_i+0xee>
    6844:	0658      	lsls	r0, r3, #25
    6846:	d5fb      	bpl.n	6840 <_printf_i+0xe4>
    6848:	880e      	ldrh	r6, [r1, #0]
    684a:	07d9      	lsls	r1, r3, #31
    684c:	d502      	bpl.n	6854 <_printf_i+0xf8>
    684e:	2220      	movs	r2, #32
    6850:	4313      	orrs	r3, r2
    6852:	6023      	str	r3, [r4, #0]
    6854:	2710      	movs	r7, #16
    6856:	2e00      	cmp	r6, #0
    6858:	d103      	bne.n	6862 <_printf_i+0x106>
    685a:	6822      	ldr	r2, [r4, #0]
    685c:	2320      	movs	r3, #32
    685e:	439a      	bics	r2, r3
    6860:	6022      	str	r2, [r4, #0]
    6862:	1c23      	adds	r3, r4, #0
    6864:	2200      	movs	r2, #0
    6866:	3343      	adds	r3, #67	; 0x43
    6868:	701a      	strb	r2, [r3, #0]
    686a:	e001      	b.n	6870 <_printf_i+0x114>
    686c:	9303      	str	r3, [sp, #12]
    686e:	270a      	movs	r7, #10
    6870:	6863      	ldr	r3, [r4, #4]
    6872:	60a3      	str	r3, [r4, #8]
    6874:	2b00      	cmp	r3, #0
    6876:	db03      	blt.n	6880 <_printf_i+0x124>
    6878:	6825      	ldr	r5, [r4, #0]
    687a:	2204      	movs	r2, #4
    687c:	4395      	bics	r5, r2
    687e:	6025      	str	r5, [r4, #0]
    6880:	2e00      	cmp	r6, #0
    6882:	d102      	bne.n	688a <_printf_i+0x12e>
    6884:	9d04      	ldr	r5, [sp, #16]
    6886:	2b00      	cmp	r3, #0
    6888:	d00e      	beq.n	68a8 <_printf_i+0x14c>
    688a:	9d04      	ldr	r5, [sp, #16]
    688c:	1c30      	adds	r0, r6, #0
    688e:	1c39      	adds	r1, r7, #0
    6890:	f7fe fd92 	bl	53b8 <__aeabi_uidivmod>
    6894:	9803      	ldr	r0, [sp, #12]
    6896:	3d01      	subs	r5, #1
    6898:	5c43      	ldrb	r3, [r0, r1]
    689a:	1c30      	adds	r0, r6, #0
    689c:	702b      	strb	r3, [r5, #0]
    689e:	1c39      	adds	r1, r7, #0
    68a0:	f7fe fd46 	bl	5330 <__aeabi_uidiv>
    68a4:	1e06      	subs	r6, r0, #0
    68a6:	d1f1      	bne.n	688c <_printf_i+0x130>
    68a8:	2f08      	cmp	r7, #8
    68aa:	d109      	bne.n	68c0 <_printf_i+0x164>
    68ac:	6821      	ldr	r1, [r4, #0]
    68ae:	07c9      	lsls	r1, r1, #31
    68b0:	d506      	bpl.n	68c0 <_printf_i+0x164>
    68b2:	6862      	ldr	r2, [r4, #4]
    68b4:	6923      	ldr	r3, [r4, #16]
    68b6:	429a      	cmp	r2, r3
    68b8:	dc02      	bgt.n	68c0 <_printf_i+0x164>
    68ba:	3d01      	subs	r5, #1
    68bc:	2330      	movs	r3, #48	; 0x30
    68be:	702b      	strb	r3, [r5, #0]
    68c0:	9e04      	ldr	r6, [sp, #16]
    68c2:	1b73      	subs	r3, r6, r5
    68c4:	6123      	str	r3, [r4, #16]
    68c6:	e02a      	b.n	691e <_printf_i+0x1c2>
    68c8:	6808      	ldr	r0, [r1, #0]
    68ca:	6813      	ldr	r3, [r2, #0]
    68cc:	6949      	ldr	r1, [r1, #20]
    68ce:	0605      	lsls	r5, r0, #24
    68d0:	d504      	bpl.n	68dc <_printf_i+0x180>
    68d2:	1d18      	adds	r0, r3, #4
    68d4:	6010      	str	r0, [r2, #0]
    68d6:	681b      	ldr	r3, [r3, #0]
    68d8:	6019      	str	r1, [r3, #0]
    68da:	e005      	b.n	68e8 <_printf_i+0x18c>
    68dc:	0646      	lsls	r6, r0, #25
    68de:	d5f8      	bpl.n	68d2 <_printf_i+0x176>
    68e0:	1d18      	adds	r0, r3, #4
    68e2:	6010      	str	r0, [r2, #0]
    68e4:	681b      	ldr	r3, [r3, #0]
    68e6:	8019      	strh	r1, [r3, #0]
    68e8:	2300      	movs	r3, #0
    68ea:	6123      	str	r3, [r4, #16]
    68ec:	9d04      	ldr	r5, [sp, #16]
    68ee:	e016      	b.n	691e <_printf_i+0x1c2>
    68f0:	6813      	ldr	r3, [r2, #0]
    68f2:	1d19      	adds	r1, r3, #4
    68f4:	6011      	str	r1, [r2, #0]
    68f6:	681d      	ldr	r5, [r3, #0]
    68f8:	1c28      	adds	r0, r5, #0
    68fa:	f000 fbe9 	bl	70d0 <strlen>
    68fe:	6863      	ldr	r3, [r4, #4]
    6900:	6120      	str	r0, [r4, #16]
    6902:	4298      	cmp	r0, r3
    6904:	d900      	bls.n	6908 <_printf_i+0x1ac>
    6906:	6123      	str	r3, [r4, #16]
    6908:	6920      	ldr	r0, [r4, #16]
    690a:	6060      	str	r0, [r4, #4]
    690c:	e004      	b.n	6918 <_printf_i+0x1bc>
    690e:	1c25      	adds	r5, r4, #0
    6910:	3542      	adds	r5, #66	; 0x42
    6912:	702b      	strb	r3, [r5, #0]
    6914:	2301      	movs	r3, #1
    6916:	6123      	str	r3, [r4, #16]
    6918:	9e04      	ldr	r6, [sp, #16]
    691a:	2300      	movs	r3, #0
    691c:	7033      	strb	r3, [r6, #0]
    691e:	9e07      	ldr	r6, [sp, #28]
    6920:	9805      	ldr	r0, [sp, #20]
    6922:	9600      	str	r6, [sp, #0]
    6924:	1c21      	adds	r1, r4, #0
    6926:	aa09      	add	r2, sp, #36	; 0x24
    6928:	9b06      	ldr	r3, [sp, #24]
    692a:	f7ff fea3 	bl	6674 <_printf_common>
    692e:	3001      	adds	r0, #1
    6930:	d102      	bne.n	6938 <_printf_i+0x1dc>
    6932:	2001      	movs	r0, #1
    6934:	4240      	negs	r0, r0
    6936:	e021      	b.n	697c <_printf_i+0x220>
    6938:	1c2a      	adds	r2, r5, #0
    693a:	9805      	ldr	r0, [sp, #20]
    693c:	9906      	ldr	r1, [sp, #24]
    693e:	6923      	ldr	r3, [r4, #16]
    6940:	9d07      	ldr	r5, [sp, #28]
    6942:	47a8      	blx	r5
    6944:	3001      	adds	r0, #1
    6946:	d0f4      	beq.n	6932 <_printf_i+0x1d6>
    6948:	6826      	ldr	r6, [r4, #0]
    694a:	07b6      	lsls	r6, r6, #30
    694c:	d405      	bmi.n	695a <_printf_i+0x1fe>
    694e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6950:	68e0      	ldr	r0, [r4, #12]
    6952:	4298      	cmp	r0, r3
    6954:	da12      	bge.n	697c <_printf_i+0x220>
    6956:	1c18      	adds	r0, r3, #0
    6958:	e010      	b.n	697c <_printf_i+0x220>
    695a:	2500      	movs	r5, #0
    695c:	68e0      	ldr	r0, [r4, #12]
    695e:	9909      	ldr	r1, [sp, #36]	; 0x24
    6960:	1a43      	subs	r3, r0, r1
    6962:	429d      	cmp	r5, r3
    6964:	daf3      	bge.n	694e <_printf_i+0x1f2>
    6966:	1c22      	adds	r2, r4, #0
    6968:	9805      	ldr	r0, [sp, #20]
    696a:	9906      	ldr	r1, [sp, #24]
    696c:	3219      	adds	r2, #25
    696e:	2301      	movs	r3, #1
    6970:	9e07      	ldr	r6, [sp, #28]
    6972:	47b0      	blx	r6
    6974:	3001      	adds	r0, #1
    6976:	d0dc      	beq.n	6932 <_printf_i+0x1d6>
    6978:	3501      	adds	r5, #1
    697a:	e7ef      	b.n	695c <_printf_i+0x200>
    697c:	b00b      	add	sp, #44	; 0x2c
    697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6980:	00007471 	.word	0x00007471
    6984:	00007482 	.word	0x00007482

00006988 <__swbuf_r>:
    6988:	b570      	push	{r4, r5, r6, lr}
    698a:	1c05      	adds	r5, r0, #0
    698c:	1c0e      	adds	r6, r1, #0
    698e:	1c14      	adds	r4, r2, #0
    6990:	2800      	cmp	r0, #0
    6992:	d004      	beq.n	699e <__swbuf_r+0x16>
    6994:	6982      	ldr	r2, [r0, #24]
    6996:	2a00      	cmp	r2, #0
    6998:	d101      	bne.n	699e <__swbuf_r+0x16>
    699a:	f000 f9c9 	bl	6d30 <__sinit>
    699e:	4b23      	ldr	r3, [pc, #140]	; (6a2c <__swbuf_r+0xa4>)
    69a0:	429c      	cmp	r4, r3
    69a2:	d101      	bne.n	69a8 <__swbuf_r+0x20>
    69a4:	686c      	ldr	r4, [r5, #4]
    69a6:	e008      	b.n	69ba <__swbuf_r+0x32>
    69a8:	4b21      	ldr	r3, [pc, #132]	; (6a30 <__swbuf_r+0xa8>)
    69aa:	429c      	cmp	r4, r3
    69ac:	d101      	bne.n	69b2 <__swbuf_r+0x2a>
    69ae:	68ac      	ldr	r4, [r5, #8]
    69b0:	e003      	b.n	69ba <__swbuf_r+0x32>
    69b2:	4b20      	ldr	r3, [pc, #128]	; (6a34 <__swbuf_r+0xac>)
    69b4:	429c      	cmp	r4, r3
    69b6:	d100      	bne.n	69ba <__swbuf_r+0x32>
    69b8:	68ec      	ldr	r4, [r5, #12]
    69ba:	69a3      	ldr	r3, [r4, #24]
    69bc:	60a3      	str	r3, [r4, #8]
    69be:	89a3      	ldrh	r3, [r4, #12]
    69c0:	071a      	lsls	r2, r3, #28
    69c2:	d50a      	bpl.n	69da <__swbuf_r+0x52>
    69c4:	6923      	ldr	r3, [r4, #16]
    69c6:	2b00      	cmp	r3, #0
    69c8:	d007      	beq.n	69da <__swbuf_r+0x52>
    69ca:	6822      	ldr	r2, [r4, #0]
    69cc:	6923      	ldr	r3, [r4, #16]
    69ce:	b2f6      	uxtb	r6, r6
    69d0:	1ad0      	subs	r0, r2, r3
    69d2:	6962      	ldr	r2, [r4, #20]
    69d4:	4290      	cmp	r0, r2
    69d6:	db0f      	blt.n	69f8 <__swbuf_r+0x70>
    69d8:	e008      	b.n	69ec <__swbuf_r+0x64>
    69da:	1c28      	adds	r0, r5, #0
    69dc:	1c21      	adds	r1, r4, #0
    69de:	f000 f82b 	bl	6a38 <__swsetup_r>
    69e2:	2800      	cmp	r0, #0
    69e4:	d0f1      	beq.n	69ca <__swbuf_r+0x42>
    69e6:	2001      	movs	r0, #1
    69e8:	4240      	negs	r0, r0
    69ea:	e01d      	b.n	6a28 <__swbuf_r+0xa0>
    69ec:	1c28      	adds	r0, r5, #0
    69ee:	1c21      	adds	r1, r4, #0
    69f0:	f000 f91e 	bl	6c30 <_fflush_r>
    69f4:	2800      	cmp	r0, #0
    69f6:	d1f6      	bne.n	69e6 <__swbuf_r+0x5e>
    69f8:	68a3      	ldr	r3, [r4, #8]
    69fa:	3001      	adds	r0, #1
    69fc:	3b01      	subs	r3, #1
    69fe:	60a3      	str	r3, [r4, #8]
    6a00:	6823      	ldr	r3, [r4, #0]
    6a02:	1c5a      	adds	r2, r3, #1
    6a04:	6022      	str	r2, [r4, #0]
    6a06:	701e      	strb	r6, [r3, #0]
    6a08:	6963      	ldr	r3, [r4, #20]
    6a0a:	4298      	cmp	r0, r3
    6a0c:	d005      	beq.n	6a1a <__swbuf_r+0x92>
    6a0e:	89a3      	ldrh	r3, [r4, #12]
    6a10:	1c30      	adds	r0, r6, #0
    6a12:	07da      	lsls	r2, r3, #31
    6a14:	d508      	bpl.n	6a28 <__swbuf_r+0xa0>
    6a16:	2e0a      	cmp	r6, #10
    6a18:	d106      	bne.n	6a28 <__swbuf_r+0xa0>
    6a1a:	1c28      	adds	r0, r5, #0
    6a1c:	1c21      	adds	r1, r4, #0
    6a1e:	f000 f907 	bl	6c30 <_fflush_r>
    6a22:	2800      	cmp	r0, #0
    6a24:	d1df      	bne.n	69e6 <__swbuf_r+0x5e>
    6a26:	1c30      	adds	r0, r6, #0
    6a28:	bd70      	pop	{r4, r5, r6, pc}
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	00007494 	.word	0x00007494
    6a30:	000074b4 	.word	0x000074b4
    6a34:	000074d4 	.word	0x000074d4

00006a38 <__swsetup_r>:
    6a38:	4b34      	ldr	r3, [pc, #208]	; (6b0c <__swsetup_r+0xd4>)
    6a3a:	b570      	push	{r4, r5, r6, lr}
    6a3c:	681d      	ldr	r5, [r3, #0]
    6a3e:	1c06      	adds	r6, r0, #0
    6a40:	1c0c      	adds	r4, r1, #0
    6a42:	2d00      	cmp	r5, #0
    6a44:	d005      	beq.n	6a52 <__swsetup_r+0x1a>
    6a46:	69a9      	ldr	r1, [r5, #24]
    6a48:	2900      	cmp	r1, #0
    6a4a:	d102      	bne.n	6a52 <__swsetup_r+0x1a>
    6a4c:	1c28      	adds	r0, r5, #0
    6a4e:	f000 f96f 	bl	6d30 <__sinit>
    6a52:	4b2f      	ldr	r3, [pc, #188]	; (6b10 <__swsetup_r+0xd8>)
    6a54:	429c      	cmp	r4, r3
    6a56:	d101      	bne.n	6a5c <__swsetup_r+0x24>
    6a58:	686c      	ldr	r4, [r5, #4]
    6a5a:	e008      	b.n	6a6e <__swsetup_r+0x36>
    6a5c:	4b2d      	ldr	r3, [pc, #180]	; (6b14 <__swsetup_r+0xdc>)
    6a5e:	429c      	cmp	r4, r3
    6a60:	d101      	bne.n	6a66 <__swsetup_r+0x2e>
    6a62:	68ac      	ldr	r4, [r5, #8]
    6a64:	e003      	b.n	6a6e <__swsetup_r+0x36>
    6a66:	4b2c      	ldr	r3, [pc, #176]	; (6b18 <__swsetup_r+0xe0>)
    6a68:	429c      	cmp	r4, r3
    6a6a:	d100      	bne.n	6a6e <__swsetup_r+0x36>
    6a6c:	68ec      	ldr	r4, [r5, #12]
    6a6e:	89a2      	ldrh	r2, [r4, #12]
    6a70:	b293      	uxth	r3, r2
    6a72:	0719      	lsls	r1, r3, #28
    6a74:	d421      	bmi.n	6aba <__swsetup_r+0x82>
    6a76:	06d9      	lsls	r1, r3, #27
    6a78:	d405      	bmi.n	6a86 <__swsetup_r+0x4e>
    6a7a:	2309      	movs	r3, #9
    6a7c:	6033      	str	r3, [r6, #0]
    6a7e:	2340      	movs	r3, #64	; 0x40
    6a80:	431a      	orrs	r2, r3
    6a82:	81a2      	strh	r2, [r4, #12]
    6a84:	e03f      	b.n	6b06 <__swsetup_r+0xce>
    6a86:	075a      	lsls	r2, r3, #29
    6a88:	d513      	bpl.n	6ab2 <__swsetup_r+0x7a>
    6a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6a8c:	2900      	cmp	r1, #0
    6a8e:	d008      	beq.n	6aa2 <__swsetup_r+0x6a>
    6a90:	1c23      	adds	r3, r4, #0
    6a92:	3344      	adds	r3, #68	; 0x44
    6a94:	4299      	cmp	r1, r3
    6a96:	d002      	beq.n	6a9e <__swsetup_r+0x66>
    6a98:	1c30      	adds	r0, r6, #0
    6a9a:	f000 fa1f 	bl	6edc <_free_r>
    6a9e:	2300      	movs	r3, #0
    6aa0:	6363      	str	r3, [r4, #52]	; 0x34
    6aa2:	89a3      	ldrh	r3, [r4, #12]
    6aa4:	2224      	movs	r2, #36	; 0x24
    6aa6:	4393      	bics	r3, r2
    6aa8:	81a3      	strh	r3, [r4, #12]
    6aaa:	2300      	movs	r3, #0
    6aac:	6063      	str	r3, [r4, #4]
    6aae:	6923      	ldr	r3, [r4, #16]
    6ab0:	6023      	str	r3, [r4, #0]
    6ab2:	89a3      	ldrh	r3, [r4, #12]
    6ab4:	2208      	movs	r2, #8
    6ab6:	4313      	orrs	r3, r2
    6ab8:	81a3      	strh	r3, [r4, #12]
    6aba:	6921      	ldr	r1, [r4, #16]
    6abc:	2900      	cmp	r1, #0
    6abe:	d10b      	bne.n	6ad8 <__swsetup_r+0xa0>
    6ac0:	89a3      	ldrh	r3, [r4, #12]
    6ac2:	22a0      	movs	r2, #160	; 0xa0
    6ac4:	0092      	lsls	r2, r2, #2
    6ac6:	401a      	ands	r2, r3
    6ac8:	2380      	movs	r3, #128	; 0x80
    6aca:	009b      	lsls	r3, r3, #2
    6acc:	429a      	cmp	r2, r3
    6ace:	d003      	beq.n	6ad8 <__swsetup_r+0xa0>
    6ad0:	1c30      	adds	r0, r6, #0
    6ad2:	1c21      	adds	r1, r4, #0
    6ad4:	f000 f99c 	bl	6e10 <__smakebuf_r>
    6ad8:	89a3      	ldrh	r3, [r4, #12]
    6ada:	2201      	movs	r2, #1
    6adc:	401a      	ands	r2, r3
    6ade:	d005      	beq.n	6aec <__swsetup_r+0xb4>
    6ae0:	6961      	ldr	r1, [r4, #20]
    6ae2:	2200      	movs	r2, #0
    6ae4:	60a2      	str	r2, [r4, #8]
    6ae6:	424a      	negs	r2, r1
    6ae8:	61a2      	str	r2, [r4, #24]
    6aea:	e003      	b.n	6af4 <__swsetup_r+0xbc>
    6aec:	0799      	lsls	r1, r3, #30
    6aee:	d400      	bmi.n	6af2 <__swsetup_r+0xba>
    6af0:	6962      	ldr	r2, [r4, #20]
    6af2:	60a2      	str	r2, [r4, #8]
    6af4:	6922      	ldr	r2, [r4, #16]
    6af6:	2000      	movs	r0, #0
    6af8:	4282      	cmp	r2, r0
    6afa:	d106      	bne.n	6b0a <__swsetup_r+0xd2>
    6afc:	0619      	lsls	r1, r3, #24
    6afe:	d504      	bpl.n	6b0a <__swsetup_r+0xd2>
    6b00:	2240      	movs	r2, #64	; 0x40
    6b02:	4313      	orrs	r3, r2
    6b04:	81a3      	strh	r3, [r4, #12]
    6b06:	2001      	movs	r0, #1
    6b08:	4240      	negs	r0, r0
    6b0a:	bd70      	pop	{r4, r5, r6, pc}
    6b0c:	2000006c 	.word	0x2000006c
    6b10:	00007494 	.word	0x00007494
    6b14:	000074b4 	.word	0x000074b4
    6b18:	000074d4 	.word	0x000074d4

00006b1c <__sflush_r>:
    6b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b1e:	898b      	ldrh	r3, [r1, #12]
    6b20:	1c05      	adds	r5, r0, #0
    6b22:	1c0c      	adds	r4, r1, #0
    6b24:	0719      	lsls	r1, r3, #28
    6b26:	d45e      	bmi.n	6be6 <__sflush_r+0xca>
    6b28:	6862      	ldr	r2, [r4, #4]
    6b2a:	2a00      	cmp	r2, #0
    6b2c:	dc02      	bgt.n	6b34 <__sflush_r+0x18>
    6b2e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    6b30:	2f00      	cmp	r7, #0
    6b32:	dd1a      	ble.n	6b6a <__sflush_r+0x4e>
    6b34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6b36:	2f00      	cmp	r7, #0
    6b38:	d017      	beq.n	6b6a <__sflush_r+0x4e>
    6b3a:	2200      	movs	r2, #0
    6b3c:	682e      	ldr	r6, [r5, #0]
    6b3e:	602a      	str	r2, [r5, #0]
    6b40:	2280      	movs	r2, #128	; 0x80
    6b42:	0152      	lsls	r2, r2, #5
    6b44:	401a      	ands	r2, r3
    6b46:	d001      	beq.n	6b4c <__sflush_r+0x30>
    6b48:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6b4a:	e015      	b.n	6b78 <__sflush_r+0x5c>
    6b4c:	1c28      	adds	r0, r5, #0
    6b4e:	6a21      	ldr	r1, [r4, #32]
    6b50:	2301      	movs	r3, #1
    6b52:	47b8      	blx	r7
    6b54:	1c02      	adds	r2, r0, #0
    6b56:	1c41      	adds	r1, r0, #1
    6b58:	d10e      	bne.n	6b78 <__sflush_r+0x5c>
    6b5a:	682b      	ldr	r3, [r5, #0]
    6b5c:	2b00      	cmp	r3, #0
    6b5e:	d00b      	beq.n	6b78 <__sflush_r+0x5c>
    6b60:	2b1d      	cmp	r3, #29
    6b62:	d001      	beq.n	6b68 <__sflush_r+0x4c>
    6b64:	2b16      	cmp	r3, #22
    6b66:	d102      	bne.n	6b6e <__sflush_r+0x52>
    6b68:	602e      	str	r6, [r5, #0]
    6b6a:	2000      	movs	r0, #0
    6b6c:	e05e      	b.n	6c2c <__sflush_r+0x110>
    6b6e:	89a3      	ldrh	r3, [r4, #12]
    6b70:	2140      	movs	r1, #64	; 0x40
    6b72:	430b      	orrs	r3, r1
    6b74:	81a3      	strh	r3, [r4, #12]
    6b76:	e059      	b.n	6c2c <__sflush_r+0x110>
    6b78:	89a3      	ldrh	r3, [r4, #12]
    6b7a:	075f      	lsls	r7, r3, #29
    6b7c:	d506      	bpl.n	6b8c <__sflush_r+0x70>
    6b7e:	6861      	ldr	r1, [r4, #4]
    6b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6b82:	1a52      	subs	r2, r2, r1
    6b84:	2b00      	cmp	r3, #0
    6b86:	d001      	beq.n	6b8c <__sflush_r+0x70>
    6b88:	6c27      	ldr	r7, [r4, #64]	; 0x40
    6b8a:	1bd2      	subs	r2, r2, r7
    6b8c:	1c28      	adds	r0, r5, #0
    6b8e:	6a21      	ldr	r1, [r4, #32]
    6b90:	2300      	movs	r3, #0
    6b92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6b94:	47b8      	blx	r7
    6b96:	89a2      	ldrh	r2, [r4, #12]
    6b98:	1c41      	adds	r1, r0, #1
    6b9a:	d106      	bne.n	6baa <__sflush_r+0x8e>
    6b9c:	682b      	ldr	r3, [r5, #0]
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d003      	beq.n	6baa <__sflush_r+0x8e>
    6ba2:	2b1d      	cmp	r3, #29
    6ba4:	d001      	beq.n	6baa <__sflush_r+0x8e>
    6ba6:	2b16      	cmp	r3, #22
    6ba8:	d119      	bne.n	6bde <__sflush_r+0xc2>
    6baa:	2300      	movs	r3, #0
    6bac:	6063      	str	r3, [r4, #4]
    6bae:	6923      	ldr	r3, [r4, #16]
    6bb0:	6023      	str	r3, [r4, #0]
    6bb2:	04d7      	lsls	r7, r2, #19
    6bb4:	d505      	bpl.n	6bc2 <__sflush_r+0xa6>
    6bb6:	1c41      	adds	r1, r0, #1
    6bb8:	d102      	bne.n	6bc0 <__sflush_r+0xa4>
    6bba:	682a      	ldr	r2, [r5, #0]
    6bbc:	2a00      	cmp	r2, #0
    6bbe:	d100      	bne.n	6bc2 <__sflush_r+0xa6>
    6bc0:	6560      	str	r0, [r4, #84]	; 0x54
    6bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6bc4:	602e      	str	r6, [r5, #0]
    6bc6:	2900      	cmp	r1, #0
    6bc8:	d0cf      	beq.n	6b6a <__sflush_r+0x4e>
    6bca:	1c23      	adds	r3, r4, #0
    6bcc:	3344      	adds	r3, #68	; 0x44
    6bce:	4299      	cmp	r1, r3
    6bd0:	d002      	beq.n	6bd8 <__sflush_r+0xbc>
    6bd2:	1c28      	adds	r0, r5, #0
    6bd4:	f000 f982 	bl	6edc <_free_r>
    6bd8:	2000      	movs	r0, #0
    6bda:	6360      	str	r0, [r4, #52]	; 0x34
    6bdc:	e026      	b.n	6c2c <__sflush_r+0x110>
    6bde:	2340      	movs	r3, #64	; 0x40
    6be0:	431a      	orrs	r2, r3
    6be2:	81a2      	strh	r2, [r4, #12]
    6be4:	e022      	b.n	6c2c <__sflush_r+0x110>
    6be6:	6926      	ldr	r6, [r4, #16]
    6be8:	2e00      	cmp	r6, #0
    6bea:	d0be      	beq.n	6b6a <__sflush_r+0x4e>
    6bec:	6827      	ldr	r7, [r4, #0]
    6bee:	2200      	movs	r2, #0
    6bf0:	1bbf      	subs	r7, r7, r6
    6bf2:	9701      	str	r7, [sp, #4]
    6bf4:	6026      	str	r6, [r4, #0]
    6bf6:	0799      	lsls	r1, r3, #30
    6bf8:	d100      	bne.n	6bfc <__sflush_r+0xe0>
    6bfa:	6962      	ldr	r2, [r4, #20]
    6bfc:	60a2      	str	r2, [r4, #8]
    6bfe:	9f01      	ldr	r7, [sp, #4]
    6c00:	2f00      	cmp	r7, #0
    6c02:	ddb2      	ble.n	6b6a <__sflush_r+0x4e>
    6c04:	1c28      	adds	r0, r5, #0
    6c06:	6a21      	ldr	r1, [r4, #32]
    6c08:	1c32      	adds	r2, r6, #0
    6c0a:	9b01      	ldr	r3, [sp, #4]
    6c0c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    6c0e:	47b8      	blx	r7
    6c10:	2800      	cmp	r0, #0
    6c12:	dc06      	bgt.n	6c22 <__sflush_r+0x106>
    6c14:	89a3      	ldrh	r3, [r4, #12]
    6c16:	2240      	movs	r2, #64	; 0x40
    6c18:	4313      	orrs	r3, r2
    6c1a:	2001      	movs	r0, #1
    6c1c:	81a3      	strh	r3, [r4, #12]
    6c1e:	4240      	negs	r0, r0
    6c20:	e004      	b.n	6c2c <__sflush_r+0x110>
    6c22:	9f01      	ldr	r7, [sp, #4]
    6c24:	1836      	adds	r6, r6, r0
    6c26:	1a3f      	subs	r7, r7, r0
    6c28:	9701      	str	r7, [sp, #4]
    6c2a:	e7e8      	b.n	6bfe <__sflush_r+0xe2>
    6c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006c30 <_fflush_r>:
    6c30:	690a      	ldr	r2, [r1, #16]
    6c32:	b538      	push	{r3, r4, r5, lr}
    6c34:	1c05      	adds	r5, r0, #0
    6c36:	1c0c      	adds	r4, r1, #0
    6c38:	2a00      	cmp	r2, #0
    6c3a:	d101      	bne.n	6c40 <_fflush_r+0x10>
    6c3c:	2000      	movs	r0, #0
    6c3e:	e01c      	b.n	6c7a <_fflush_r+0x4a>
    6c40:	2800      	cmp	r0, #0
    6c42:	d004      	beq.n	6c4e <_fflush_r+0x1e>
    6c44:	6983      	ldr	r3, [r0, #24]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d101      	bne.n	6c4e <_fflush_r+0x1e>
    6c4a:	f000 f871 	bl	6d30 <__sinit>
    6c4e:	4b0b      	ldr	r3, [pc, #44]	; (6c7c <_fflush_r+0x4c>)
    6c50:	429c      	cmp	r4, r3
    6c52:	d101      	bne.n	6c58 <_fflush_r+0x28>
    6c54:	686c      	ldr	r4, [r5, #4]
    6c56:	e008      	b.n	6c6a <_fflush_r+0x3a>
    6c58:	4b09      	ldr	r3, [pc, #36]	; (6c80 <_fflush_r+0x50>)
    6c5a:	429c      	cmp	r4, r3
    6c5c:	d101      	bne.n	6c62 <_fflush_r+0x32>
    6c5e:	68ac      	ldr	r4, [r5, #8]
    6c60:	e003      	b.n	6c6a <_fflush_r+0x3a>
    6c62:	4b08      	ldr	r3, [pc, #32]	; (6c84 <_fflush_r+0x54>)
    6c64:	429c      	cmp	r4, r3
    6c66:	d100      	bne.n	6c6a <_fflush_r+0x3a>
    6c68:	68ec      	ldr	r4, [r5, #12]
    6c6a:	220c      	movs	r2, #12
    6c6c:	5ea3      	ldrsh	r3, [r4, r2]
    6c6e:	2b00      	cmp	r3, #0
    6c70:	d0e4      	beq.n	6c3c <_fflush_r+0xc>
    6c72:	1c28      	adds	r0, r5, #0
    6c74:	1c21      	adds	r1, r4, #0
    6c76:	f7ff ff51 	bl	6b1c <__sflush_r>
    6c7a:	bd38      	pop	{r3, r4, r5, pc}
    6c7c:	00007494 	.word	0x00007494
    6c80:	000074b4 	.word	0x000074b4
    6c84:	000074d4 	.word	0x000074d4

00006c88 <_cleanup_r>:
    6c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c8a:	1c04      	adds	r4, r0, #0
    6c8c:	1c07      	adds	r7, r0, #0
    6c8e:	3448      	adds	r4, #72	; 0x48
    6c90:	2c00      	cmp	r4, #0
    6c92:	d012      	beq.n	6cba <_cleanup_r+0x32>
    6c94:	68a5      	ldr	r5, [r4, #8]
    6c96:	6866      	ldr	r6, [r4, #4]
    6c98:	3e01      	subs	r6, #1
    6c9a:	d40c      	bmi.n	6cb6 <_cleanup_r+0x2e>
    6c9c:	89ab      	ldrh	r3, [r5, #12]
    6c9e:	2b01      	cmp	r3, #1
    6ca0:	d907      	bls.n	6cb2 <_cleanup_r+0x2a>
    6ca2:	220e      	movs	r2, #14
    6ca4:	5eab      	ldrsh	r3, [r5, r2]
    6ca6:	3301      	adds	r3, #1
    6ca8:	d003      	beq.n	6cb2 <_cleanup_r+0x2a>
    6caa:	1c38      	adds	r0, r7, #0
    6cac:	1c29      	adds	r1, r5, #0
    6cae:	f7ff ffbf 	bl	6c30 <_fflush_r>
    6cb2:	3568      	adds	r5, #104	; 0x68
    6cb4:	e7f0      	b.n	6c98 <_cleanup_r+0x10>
    6cb6:	6824      	ldr	r4, [r4, #0]
    6cb8:	e7ea      	b.n	6c90 <_cleanup_r+0x8>
    6cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006cbc <std.isra.0>:
    6cbc:	2300      	movs	r3, #0
    6cbe:	b510      	push	{r4, lr}
    6cc0:	1c04      	adds	r4, r0, #0
    6cc2:	6003      	str	r3, [r0, #0]
    6cc4:	6043      	str	r3, [r0, #4]
    6cc6:	6083      	str	r3, [r0, #8]
    6cc8:	8181      	strh	r1, [r0, #12]
    6cca:	6643      	str	r3, [r0, #100]	; 0x64
    6ccc:	81c2      	strh	r2, [r0, #14]
    6cce:	6103      	str	r3, [r0, #16]
    6cd0:	6143      	str	r3, [r0, #20]
    6cd2:	6183      	str	r3, [r0, #24]
    6cd4:	1c19      	adds	r1, r3, #0
    6cd6:	2208      	movs	r2, #8
    6cd8:	305c      	adds	r0, #92	; 0x5c
    6cda:	f7ff fae8 	bl	62ae <memset>
    6cde:	4b05      	ldr	r3, [pc, #20]	; (6cf4 <std.isra.0+0x38>)
    6ce0:	6224      	str	r4, [r4, #32]
    6ce2:	6263      	str	r3, [r4, #36]	; 0x24
    6ce4:	4b04      	ldr	r3, [pc, #16]	; (6cf8 <std.isra.0+0x3c>)
    6ce6:	62a3      	str	r3, [r4, #40]	; 0x28
    6ce8:	4b04      	ldr	r3, [pc, #16]	; (6cfc <std.isra.0+0x40>)
    6cea:	62e3      	str	r3, [r4, #44]	; 0x2c
    6cec:	4b04      	ldr	r3, [pc, #16]	; (6d00 <std.isra.0+0x44>)
    6cee:	6323      	str	r3, [r4, #48]	; 0x30
    6cf0:	bd10      	pop	{r4, pc}
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	00007039 	.word	0x00007039
    6cf8:	00007061 	.word	0x00007061
    6cfc:	00007099 	.word	0x00007099
    6d00:	000070c5 	.word	0x000070c5

00006d04 <__sfmoreglue>:
    6d04:	b570      	push	{r4, r5, r6, lr}
    6d06:	1e4b      	subs	r3, r1, #1
    6d08:	2568      	movs	r5, #104	; 0x68
    6d0a:	435d      	muls	r5, r3
    6d0c:	1c0e      	adds	r6, r1, #0
    6d0e:	1c29      	adds	r1, r5, #0
    6d10:	3174      	adds	r1, #116	; 0x74
    6d12:	f000 f92b 	bl	6f6c <_malloc_r>
    6d16:	1e04      	subs	r4, r0, #0
    6d18:	d008      	beq.n	6d2c <__sfmoreglue+0x28>
    6d1a:	2100      	movs	r1, #0
    6d1c:	6001      	str	r1, [r0, #0]
    6d1e:	6046      	str	r6, [r0, #4]
    6d20:	1c2a      	adds	r2, r5, #0
    6d22:	300c      	adds	r0, #12
    6d24:	60a0      	str	r0, [r4, #8]
    6d26:	3268      	adds	r2, #104	; 0x68
    6d28:	f7ff fac1 	bl	62ae <memset>
    6d2c:	1c20      	adds	r0, r4, #0
    6d2e:	bd70      	pop	{r4, r5, r6, pc}

00006d30 <__sinit>:
    6d30:	6983      	ldr	r3, [r0, #24]
    6d32:	b513      	push	{r0, r1, r4, lr}
    6d34:	1c04      	adds	r4, r0, #0
    6d36:	2b00      	cmp	r3, #0
    6d38:	d127      	bne.n	6d8a <__sinit+0x5a>
    6d3a:	6483      	str	r3, [r0, #72]	; 0x48
    6d3c:	64c3      	str	r3, [r0, #76]	; 0x4c
    6d3e:	6503      	str	r3, [r0, #80]	; 0x50
    6d40:	4b12      	ldr	r3, [pc, #72]	; (6d8c <__sinit+0x5c>)
    6d42:	4a13      	ldr	r2, [pc, #76]	; (6d90 <__sinit+0x60>)
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	6282      	str	r2, [r0, #40]	; 0x28
    6d48:	4298      	cmp	r0, r3
    6d4a:	d101      	bne.n	6d50 <__sinit+0x20>
    6d4c:	2301      	movs	r3, #1
    6d4e:	6183      	str	r3, [r0, #24]
    6d50:	1c20      	adds	r0, r4, #0
    6d52:	f000 f81f 	bl	6d94 <__sfp>
    6d56:	6060      	str	r0, [r4, #4]
    6d58:	1c20      	adds	r0, r4, #0
    6d5a:	f000 f81b 	bl	6d94 <__sfp>
    6d5e:	60a0      	str	r0, [r4, #8]
    6d60:	1c20      	adds	r0, r4, #0
    6d62:	f000 f817 	bl	6d94 <__sfp>
    6d66:	2104      	movs	r1, #4
    6d68:	60e0      	str	r0, [r4, #12]
    6d6a:	2200      	movs	r2, #0
    6d6c:	6860      	ldr	r0, [r4, #4]
    6d6e:	f7ff ffa5 	bl	6cbc <std.isra.0>
    6d72:	68a0      	ldr	r0, [r4, #8]
    6d74:	2109      	movs	r1, #9
    6d76:	2201      	movs	r2, #1
    6d78:	f7ff ffa0 	bl	6cbc <std.isra.0>
    6d7c:	68e0      	ldr	r0, [r4, #12]
    6d7e:	2112      	movs	r1, #18
    6d80:	2202      	movs	r2, #2
    6d82:	f7ff ff9b 	bl	6cbc <std.isra.0>
    6d86:	2301      	movs	r3, #1
    6d88:	61a3      	str	r3, [r4, #24]
    6d8a:	bd13      	pop	{r0, r1, r4, pc}
    6d8c:	0000745c 	.word	0x0000745c
    6d90:	00006c89 	.word	0x00006c89

00006d94 <__sfp>:
    6d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d96:	4b1d      	ldr	r3, [pc, #116]	; (6e0c <__sfp+0x78>)
    6d98:	1c07      	adds	r7, r0, #0
    6d9a:	681e      	ldr	r6, [r3, #0]
    6d9c:	69b2      	ldr	r2, [r6, #24]
    6d9e:	2a00      	cmp	r2, #0
    6da0:	d102      	bne.n	6da8 <__sfp+0x14>
    6da2:	1c30      	adds	r0, r6, #0
    6da4:	f7ff ffc4 	bl	6d30 <__sinit>
    6da8:	3648      	adds	r6, #72	; 0x48
    6daa:	68b4      	ldr	r4, [r6, #8]
    6dac:	6873      	ldr	r3, [r6, #4]
    6dae:	3b01      	subs	r3, #1
    6db0:	d405      	bmi.n	6dbe <__sfp+0x2a>
    6db2:	220c      	movs	r2, #12
    6db4:	5ea5      	ldrsh	r5, [r4, r2]
    6db6:	2d00      	cmp	r5, #0
    6db8:	d010      	beq.n	6ddc <__sfp+0x48>
    6dba:	3468      	adds	r4, #104	; 0x68
    6dbc:	e7f7      	b.n	6dae <__sfp+0x1a>
    6dbe:	6833      	ldr	r3, [r6, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d106      	bne.n	6dd2 <__sfp+0x3e>
    6dc4:	1c38      	adds	r0, r7, #0
    6dc6:	2104      	movs	r1, #4
    6dc8:	f7ff ff9c 	bl	6d04 <__sfmoreglue>
    6dcc:	6030      	str	r0, [r6, #0]
    6dce:	2800      	cmp	r0, #0
    6dd0:	d001      	beq.n	6dd6 <__sfp+0x42>
    6dd2:	6836      	ldr	r6, [r6, #0]
    6dd4:	e7e9      	b.n	6daa <__sfp+0x16>
    6dd6:	230c      	movs	r3, #12
    6dd8:	603b      	str	r3, [r7, #0]
    6dda:	e016      	b.n	6e0a <__sfp+0x76>
    6ddc:	2301      	movs	r3, #1
    6dde:	425b      	negs	r3, r3
    6de0:	81e3      	strh	r3, [r4, #14]
    6de2:	1c20      	adds	r0, r4, #0
    6de4:	2301      	movs	r3, #1
    6de6:	81a3      	strh	r3, [r4, #12]
    6de8:	6665      	str	r5, [r4, #100]	; 0x64
    6dea:	6025      	str	r5, [r4, #0]
    6dec:	60a5      	str	r5, [r4, #8]
    6dee:	6065      	str	r5, [r4, #4]
    6df0:	6125      	str	r5, [r4, #16]
    6df2:	6165      	str	r5, [r4, #20]
    6df4:	61a5      	str	r5, [r4, #24]
    6df6:	305c      	adds	r0, #92	; 0x5c
    6df8:	1c29      	adds	r1, r5, #0
    6dfa:	2208      	movs	r2, #8
    6dfc:	f7ff fa57 	bl	62ae <memset>
    6e00:	6365      	str	r5, [r4, #52]	; 0x34
    6e02:	63a5      	str	r5, [r4, #56]	; 0x38
    6e04:	64a5      	str	r5, [r4, #72]	; 0x48
    6e06:	64e5      	str	r5, [r4, #76]	; 0x4c
    6e08:	1c20      	adds	r0, r4, #0
    6e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e0c:	0000745c 	.word	0x0000745c

00006e10 <__smakebuf_r>:
    6e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e12:	898b      	ldrh	r3, [r1, #12]
    6e14:	b091      	sub	sp, #68	; 0x44
    6e16:	1c05      	adds	r5, r0, #0
    6e18:	1c0c      	adds	r4, r1, #0
    6e1a:	079a      	lsls	r2, r3, #30
    6e1c:	d425      	bmi.n	6e6a <__smakebuf_r+0x5a>
    6e1e:	230e      	movs	r3, #14
    6e20:	5ec9      	ldrsh	r1, [r1, r3]
    6e22:	2900      	cmp	r1, #0
    6e24:	da06      	bge.n	6e34 <__smakebuf_r+0x24>
    6e26:	89a7      	ldrh	r7, [r4, #12]
    6e28:	2380      	movs	r3, #128	; 0x80
    6e2a:	401f      	ands	r7, r3
    6e2c:	d00f      	beq.n	6e4e <__smakebuf_r+0x3e>
    6e2e:	2700      	movs	r7, #0
    6e30:	2640      	movs	r6, #64	; 0x40
    6e32:	e00e      	b.n	6e52 <__smakebuf_r+0x42>
    6e34:	aa01      	add	r2, sp, #4
    6e36:	f000 f979 	bl	712c <_fstat_r>
    6e3a:	2800      	cmp	r0, #0
    6e3c:	dbf3      	blt.n	6e26 <__smakebuf_r+0x16>
    6e3e:	9b02      	ldr	r3, [sp, #8]
    6e40:	27f0      	movs	r7, #240	; 0xf0
    6e42:	023f      	lsls	r7, r7, #8
    6e44:	4a18      	ldr	r2, [pc, #96]	; (6ea8 <__smakebuf_r+0x98>)
    6e46:	401f      	ands	r7, r3
    6e48:	18bf      	adds	r7, r7, r2
    6e4a:	427b      	negs	r3, r7
    6e4c:	415f      	adcs	r7, r3
    6e4e:	2680      	movs	r6, #128	; 0x80
    6e50:	00f6      	lsls	r6, r6, #3
    6e52:	1c28      	adds	r0, r5, #0
    6e54:	1c31      	adds	r1, r6, #0
    6e56:	f000 f889 	bl	6f6c <_malloc_r>
    6e5a:	2800      	cmp	r0, #0
    6e5c:	d10c      	bne.n	6e78 <__smakebuf_r+0x68>
    6e5e:	89a3      	ldrh	r3, [r4, #12]
    6e60:	059a      	lsls	r2, r3, #22
    6e62:	d41f      	bmi.n	6ea4 <__smakebuf_r+0x94>
    6e64:	2202      	movs	r2, #2
    6e66:	4313      	orrs	r3, r2
    6e68:	81a3      	strh	r3, [r4, #12]
    6e6a:	1c23      	adds	r3, r4, #0
    6e6c:	3347      	adds	r3, #71	; 0x47
    6e6e:	6023      	str	r3, [r4, #0]
    6e70:	6123      	str	r3, [r4, #16]
    6e72:	2301      	movs	r3, #1
    6e74:	6163      	str	r3, [r4, #20]
    6e76:	e015      	b.n	6ea4 <__smakebuf_r+0x94>
    6e78:	4b0c      	ldr	r3, [pc, #48]	; (6eac <__smakebuf_r+0x9c>)
    6e7a:	2280      	movs	r2, #128	; 0x80
    6e7c:	62ab      	str	r3, [r5, #40]	; 0x28
    6e7e:	89a3      	ldrh	r3, [r4, #12]
    6e80:	6020      	str	r0, [r4, #0]
    6e82:	4313      	orrs	r3, r2
    6e84:	81a3      	strh	r3, [r4, #12]
    6e86:	6120      	str	r0, [r4, #16]
    6e88:	6166      	str	r6, [r4, #20]
    6e8a:	2f00      	cmp	r7, #0
    6e8c:	d00a      	beq.n	6ea4 <__smakebuf_r+0x94>
    6e8e:	230e      	movs	r3, #14
    6e90:	5ee1      	ldrsh	r1, [r4, r3]
    6e92:	1c28      	adds	r0, r5, #0
    6e94:	f000 f95c 	bl	7150 <_isatty_r>
    6e98:	2800      	cmp	r0, #0
    6e9a:	d003      	beq.n	6ea4 <__smakebuf_r+0x94>
    6e9c:	89a3      	ldrh	r3, [r4, #12]
    6e9e:	2201      	movs	r2, #1
    6ea0:	4313      	orrs	r3, r2
    6ea2:	81a3      	strh	r3, [r4, #12]
    6ea4:	b011      	add	sp, #68	; 0x44
    6ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ea8:	ffffe000 	.word	0xffffe000
    6eac:	00006c89 	.word	0x00006c89

00006eb0 <malloc>:
    6eb0:	b508      	push	{r3, lr}
    6eb2:	4b03      	ldr	r3, [pc, #12]	; (6ec0 <malloc+0x10>)
    6eb4:	1c01      	adds	r1, r0, #0
    6eb6:	6818      	ldr	r0, [r3, #0]
    6eb8:	f000 f858 	bl	6f6c <_malloc_r>
    6ebc:	bd08      	pop	{r3, pc}
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	2000006c 	.word	0x2000006c

00006ec4 <memchr>:
    6ec4:	b2c9      	uxtb	r1, r1
    6ec6:	1882      	adds	r2, r0, r2
    6ec8:	4290      	cmp	r0, r2
    6eca:	d004      	beq.n	6ed6 <memchr+0x12>
    6ecc:	7803      	ldrb	r3, [r0, #0]
    6ece:	428b      	cmp	r3, r1
    6ed0:	d002      	beq.n	6ed8 <memchr+0x14>
    6ed2:	3001      	adds	r0, #1
    6ed4:	e7f8      	b.n	6ec8 <memchr+0x4>
    6ed6:	2000      	movs	r0, #0
    6ed8:	4770      	bx	lr
	...

00006edc <_free_r>:
    6edc:	b530      	push	{r4, r5, lr}
    6ede:	2900      	cmp	r1, #0
    6ee0:	d040      	beq.n	6f64 <_free_r+0x88>
    6ee2:	3904      	subs	r1, #4
    6ee4:	680b      	ldr	r3, [r1, #0]
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	da00      	bge.n	6eec <_free_r+0x10>
    6eea:	18c9      	adds	r1, r1, r3
    6eec:	4a1e      	ldr	r2, [pc, #120]	; (6f68 <_free_r+0x8c>)
    6eee:	6813      	ldr	r3, [r2, #0]
    6ef0:	1c14      	adds	r4, r2, #0
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d102      	bne.n	6efc <_free_r+0x20>
    6ef6:	604b      	str	r3, [r1, #4]
    6ef8:	6011      	str	r1, [r2, #0]
    6efa:	e033      	b.n	6f64 <_free_r+0x88>
    6efc:	4299      	cmp	r1, r3
    6efe:	d20f      	bcs.n	6f20 <_free_r+0x44>
    6f00:	6808      	ldr	r0, [r1, #0]
    6f02:	180a      	adds	r2, r1, r0
    6f04:	429a      	cmp	r2, r3
    6f06:	d105      	bne.n	6f14 <_free_r+0x38>
    6f08:	6813      	ldr	r3, [r2, #0]
    6f0a:	6852      	ldr	r2, [r2, #4]
    6f0c:	18c0      	adds	r0, r0, r3
    6f0e:	6008      	str	r0, [r1, #0]
    6f10:	604a      	str	r2, [r1, #4]
    6f12:	e000      	b.n	6f16 <_free_r+0x3a>
    6f14:	604b      	str	r3, [r1, #4]
    6f16:	6021      	str	r1, [r4, #0]
    6f18:	e024      	b.n	6f64 <_free_r+0x88>
    6f1a:	428a      	cmp	r2, r1
    6f1c:	d803      	bhi.n	6f26 <_free_r+0x4a>
    6f1e:	1c13      	adds	r3, r2, #0
    6f20:	685a      	ldr	r2, [r3, #4]
    6f22:	2a00      	cmp	r2, #0
    6f24:	d1f9      	bne.n	6f1a <_free_r+0x3e>
    6f26:	681d      	ldr	r5, [r3, #0]
    6f28:	195c      	adds	r4, r3, r5
    6f2a:	428c      	cmp	r4, r1
    6f2c:	d10b      	bne.n	6f46 <_free_r+0x6a>
    6f2e:	6809      	ldr	r1, [r1, #0]
    6f30:	1869      	adds	r1, r5, r1
    6f32:	1858      	adds	r0, r3, r1
    6f34:	6019      	str	r1, [r3, #0]
    6f36:	4290      	cmp	r0, r2
    6f38:	d114      	bne.n	6f64 <_free_r+0x88>
    6f3a:	6814      	ldr	r4, [r2, #0]
    6f3c:	6852      	ldr	r2, [r2, #4]
    6f3e:	1909      	adds	r1, r1, r4
    6f40:	6019      	str	r1, [r3, #0]
    6f42:	605a      	str	r2, [r3, #4]
    6f44:	e00e      	b.n	6f64 <_free_r+0x88>
    6f46:	428c      	cmp	r4, r1
    6f48:	d902      	bls.n	6f50 <_free_r+0x74>
    6f4a:	230c      	movs	r3, #12
    6f4c:	6003      	str	r3, [r0, #0]
    6f4e:	e009      	b.n	6f64 <_free_r+0x88>
    6f50:	6808      	ldr	r0, [r1, #0]
    6f52:	180c      	adds	r4, r1, r0
    6f54:	4294      	cmp	r4, r2
    6f56:	d103      	bne.n	6f60 <_free_r+0x84>
    6f58:	6814      	ldr	r4, [r2, #0]
    6f5a:	6852      	ldr	r2, [r2, #4]
    6f5c:	1900      	adds	r0, r0, r4
    6f5e:	6008      	str	r0, [r1, #0]
    6f60:	604a      	str	r2, [r1, #4]
    6f62:	6059      	str	r1, [r3, #4]
    6f64:	bd30      	pop	{r4, r5, pc}
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	20003cdc 	.word	0x20003cdc

00006f6c <_malloc_r>:
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	2303      	movs	r3, #3
    6f70:	1ccd      	adds	r5, r1, #3
    6f72:	439d      	bics	r5, r3
    6f74:	3508      	adds	r5, #8
    6f76:	1c06      	adds	r6, r0, #0
    6f78:	2d0c      	cmp	r5, #12
    6f7a:	d201      	bcs.n	6f80 <_malloc_r+0x14>
    6f7c:	250c      	movs	r5, #12
    6f7e:	e001      	b.n	6f84 <_malloc_r+0x18>
    6f80:	2d00      	cmp	r5, #0
    6f82:	db3f      	blt.n	7004 <_malloc_r+0x98>
    6f84:	428d      	cmp	r5, r1
    6f86:	d33d      	bcc.n	7004 <_malloc_r+0x98>
    6f88:	4b20      	ldr	r3, [pc, #128]	; (700c <_malloc_r+0xa0>)
    6f8a:	681c      	ldr	r4, [r3, #0]
    6f8c:	1c1a      	adds	r2, r3, #0
    6f8e:	1c21      	adds	r1, r4, #0
    6f90:	2900      	cmp	r1, #0
    6f92:	d013      	beq.n	6fbc <_malloc_r+0x50>
    6f94:	6808      	ldr	r0, [r1, #0]
    6f96:	1b43      	subs	r3, r0, r5
    6f98:	d40d      	bmi.n	6fb6 <_malloc_r+0x4a>
    6f9a:	2b0b      	cmp	r3, #11
    6f9c:	d902      	bls.n	6fa4 <_malloc_r+0x38>
    6f9e:	600b      	str	r3, [r1, #0]
    6fa0:	18cc      	adds	r4, r1, r3
    6fa2:	e01e      	b.n	6fe2 <_malloc_r+0x76>
    6fa4:	428c      	cmp	r4, r1
    6fa6:	d102      	bne.n	6fae <_malloc_r+0x42>
    6fa8:	6863      	ldr	r3, [r4, #4]
    6faa:	6013      	str	r3, [r2, #0]
    6fac:	e01a      	b.n	6fe4 <_malloc_r+0x78>
    6fae:	6848      	ldr	r0, [r1, #4]
    6fb0:	6060      	str	r0, [r4, #4]
    6fb2:	1c0c      	adds	r4, r1, #0
    6fb4:	e016      	b.n	6fe4 <_malloc_r+0x78>
    6fb6:	1c0c      	adds	r4, r1, #0
    6fb8:	6849      	ldr	r1, [r1, #4]
    6fba:	e7e9      	b.n	6f90 <_malloc_r+0x24>
    6fbc:	4c14      	ldr	r4, [pc, #80]	; (7010 <_malloc_r+0xa4>)
    6fbe:	6820      	ldr	r0, [r4, #0]
    6fc0:	2800      	cmp	r0, #0
    6fc2:	d103      	bne.n	6fcc <_malloc_r+0x60>
    6fc4:	1c30      	adds	r0, r6, #0
    6fc6:	f000 f825 	bl	7014 <_sbrk_r>
    6fca:	6020      	str	r0, [r4, #0]
    6fcc:	1c30      	adds	r0, r6, #0
    6fce:	1c29      	adds	r1, r5, #0
    6fd0:	f000 f820 	bl	7014 <_sbrk_r>
    6fd4:	1c43      	adds	r3, r0, #1
    6fd6:	d015      	beq.n	7004 <_malloc_r+0x98>
    6fd8:	1cc4      	adds	r4, r0, #3
    6fda:	2303      	movs	r3, #3
    6fdc:	439c      	bics	r4, r3
    6fde:	4284      	cmp	r4, r0
    6fe0:	d10a      	bne.n	6ff8 <_malloc_r+0x8c>
    6fe2:	6025      	str	r5, [r4, #0]
    6fe4:	1c20      	adds	r0, r4, #0
    6fe6:	300b      	adds	r0, #11
    6fe8:	2207      	movs	r2, #7
    6fea:	1d23      	adds	r3, r4, #4
    6fec:	4390      	bics	r0, r2
    6fee:	1ac3      	subs	r3, r0, r3
    6ff0:	d00b      	beq.n	700a <_malloc_r+0x9e>
    6ff2:	425a      	negs	r2, r3
    6ff4:	50e2      	str	r2, [r4, r3]
    6ff6:	e008      	b.n	700a <_malloc_r+0x9e>
    6ff8:	1a21      	subs	r1, r4, r0
    6ffa:	1c30      	adds	r0, r6, #0
    6ffc:	f000 f80a 	bl	7014 <_sbrk_r>
    7000:	3001      	adds	r0, #1
    7002:	d1ee      	bne.n	6fe2 <_malloc_r+0x76>
    7004:	230c      	movs	r3, #12
    7006:	6033      	str	r3, [r6, #0]
    7008:	2000      	movs	r0, #0
    700a:	bd70      	pop	{r4, r5, r6, pc}
    700c:	20003cdc 	.word	0x20003cdc
    7010:	20003cd8 	.word	0x20003cd8

00007014 <_sbrk_r>:
    7014:	b538      	push	{r3, r4, r5, lr}
    7016:	4c07      	ldr	r4, [pc, #28]	; (7034 <_sbrk_r+0x20>)
    7018:	2300      	movs	r3, #0
    701a:	1c05      	adds	r5, r0, #0
    701c:	1c08      	adds	r0, r1, #0
    701e:	6023      	str	r3, [r4, #0]
    7020:	f7fd fe86 	bl	4d30 <_sbrk>
    7024:	1c43      	adds	r3, r0, #1
    7026:	d103      	bne.n	7030 <_sbrk_r+0x1c>
    7028:	6823      	ldr	r3, [r4, #0]
    702a:	2b00      	cmp	r3, #0
    702c:	d000      	beq.n	7030 <_sbrk_r+0x1c>
    702e:	602b      	str	r3, [r5, #0]
    7030:	bd38      	pop	{r3, r4, r5, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	20003d04 	.word	0x20003d04

00007038 <__sread>:
    7038:	b538      	push	{r3, r4, r5, lr}
    703a:	1c0c      	adds	r4, r1, #0
    703c:	250e      	movs	r5, #14
    703e:	5f49      	ldrsh	r1, [r1, r5]
    7040:	f000 f8ac 	bl	719c <_read_r>
    7044:	2800      	cmp	r0, #0
    7046:	db03      	blt.n	7050 <__sread+0x18>
    7048:	6d62      	ldr	r2, [r4, #84]	; 0x54
    704a:	1813      	adds	r3, r2, r0
    704c:	6563      	str	r3, [r4, #84]	; 0x54
    704e:	e003      	b.n	7058 <__sread+0x20>
    7050:	89a2      	ldrh	r2, [r4, #12]
    7052:	4b02      	ldr	r3, [pc, #8]	; (705c <__sread+0x24>)
    7054:	4013      	ands	r3, r2
    7056:	81a3      	strh	r3, [r4, #12]
    7058:	bd38      	pop	{r3, r4, r5, pc}
    705a:	46c0      	nop			; (mov r8, r8)
    705c:	ffffefff 	.word	0xffffefff

00007060 <__swrite>:
    7060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7062:	1c1e      	adds	r6, r3, #0
    7064:	898b      	ldrh	r3, [r1, #12]
    7066:	1c05      	adds	r5, r0, #0
    7068:	1c0c      	adds	r4, r1, #0
    706a:	1c17      	adds	r7, r2, #0
    706c:	05da      	lsls	r2, r3, #23
    706e:	d505      	bpl.n	707c <__swrite+0x1c>
    7070:	230e      	movs	r3, #14
    7072:	5ec9      	ldrsh	r1, [r1, r3]
    7074:	2200      	movs	r2, #0
    7076:	2302      	movs	r3, #2
    7078:	f000 f87c 	bl	7174 <_lseek_r>
    707c:	89a2      	ldrh	r2, [r4, #12]
    707e:	4b05      	ldr	r3, [pc, #20]	; (7094 <__swrite+0x34>)
    7080:	1c28      	adds	r0, r5, #0
    7082:	4013      	ands	r3, r2
    7084:	81a3      	strh	r3, [r4, #12]
    7086:	220e      	movs	r2, #14
    7088:	5ea1      	ldrsh	r1, [r4, r2]
    708a:	1c33      	adds	r3, r6, #0
    708c:	1c3a      	adds	r2, r7, #0
    708e:	f000 f827 	bl	70e0 <_write_r>
    7092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7094:	ffffefff 	.word	0xffffefff

00007098 <__sseek>:
    7098:	b538      	push	{r3, r4, r5, lr}
    709a:	1c0c      	adds	r4, r1, #0
    709c:	250e      	movs	r5, #14
    709e:	5f49      	ldrsh	r1, [r1, r5]
    70a0:	f000 f868 	bl	7174 <_lseek_r>
    70a4:	89a3      	ldrh	r3, [r4, #12]
    70a6:	1c42      	adds	r2, r0, #1
    70a8:	d103      	bne.n	70b2 <__sseek+0x1a>
    70aa:	4a05      	ldr	r2, [pc, #20]	; (70c0 <__sseek+0x28>)
    70ac:	4013      	ands	r3, r2
    70ae:	81a3      	strh	r3, [r4, #12]
    70b0:	e004      	b.n	70bc <__sseek+0x24>
    70b2:	2280      	movs	r2, #128	; 0x80
    70b4:	0152      	lsls	r2, r2, #5
    70b6:	4313      	orrs	r3, r2
    70b8:	81a3      	strh	r3, [r4, #12]
    70ba:	6560      	str	r0, [r4, #84]	; 0x54
    70bc:	bd38      	pop	{r3, r4, r5, pc}
    70be:	46c0      	nop			; (mov r8, r8)
    70c0:	ffffefff 	.word	0xffffefff

000070c4 <__sclose>:
    70c4:	b508      	push	{r3, lr}
    70c6:	230e      	movs	r3, #14
    70c8:	5ec9      	ldrsh	r1, [r1, r3]
    70ca:	f000 f81d 	bl	7108 <_close_r>
    70ce:	bd08      	pop	{r3, pc}

000070d0 <strlen>:
    70d0:	2300      	movs	r3, #0
    70d2:	5cc2      	ldrb	r2, [r0, r3]
    70d4:	3301      	adds	r3, #1
    70d6:	2a00      	cmp	r2, #0
    70d8:	d1fb      	bne.n	70d2 <strlen+0x2>
    70da:	1e58      	subs	r0, r3, #1
    70dc:	4770      	bx	lr
	...

000070e0 <_write_r>:
    70e0:	b538      	push	{r3, r4, r5, lr}
    70e2:	4c08      	ldr	r4, [pc, #32]	; (7104 <_write_r+0x24>)
    70e4:	1c05      	adds	r5, r0, #0
    70e6:	2000      	movs	r0, #0
    70e8:	6020      	str	r0, [r4, #0]
    70ea:	1c08      	adds	r0, r1, #0
    70ec:	1c11      	adds	r1, r2, #0
    70ee:	1c1a      	adds	r2, r3, #0
    70f0:	f7fa ff36 	bl	1f60 <_write>
    70f4:	1c43      	adds	r3, r0, #1
    70f6:	d103      	bne.n	7100 <_write_r+0x20>
    70f8:	6823      	ldr	r3, [r4, #0]
    70fa:	2b00      	cmp	r3, #0
    70fc:	d000      	beq.n	7100 <_write_r+0x20>
    70fe:	602b      	str	r3, [r5, #0]
    7100:	bd38      	pop	{r3, r4, r5, pc}
    7102:	46c0      	nop			; (mov r8, r8)
    7104:	20003d04 	.word	0x20003d04

00007108 <_close_r>:
    7108:	b538      	push	{r3, r4, r5, lr}
    710a:	4c07      	ldr	r4, [pc, #28]	; (7128 <_close_r+0x20>)
    710c:	2300      	movs	r3, #0
    710e:	1c05      	adds	r5, r0, #0
    7110:	1c08      	adds	r0, r1, #0
    7112:	6023      	str	r3, [r4, #0]
    7114:	f7fd fe2a 	bl	4d6c <_close>
    7118:	1c43      	adds	r3, r0, #1
    711a:	d103      	bne.n	7124 <_close_r+0x1c>
    711c:	6823      	ldr	r3, [r4, #0]
    711e:	2b00      	cmp	r3, #0
    7120:	d000      	beq.n	7124 <_close_r+0x1c>
    7122:	602b      	str	r3, [r5, #0]
    7124:	bd38      	pop	{r3, r4, r5, pc}
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	20003d04 	.word	0x20003d04

0000712c <_fstat_r>:
    712c:	b538      	push	{r3, r4, r5, lr}
    712e:	4c07      	ldr	r4, [pc, #28]	; (714c <_fstat_r+0x20>)
    7130:	2300      	movs	r3, #0
    7132:	1c05      	adds	r5, r0, #0
    7134:	1c08      	adds	r0, r1, #0
    7136:	1c11      	adds	r1, r2, #0
    7138:	6023      	str	r3, [r4, #0]
    713a:	f7fd fe21 	bl	4d80 <_fstat>
    713e:	1c43      	adds	r3, r0, #1
    7140:	d103      	bne.n	714a <_fstat_r+0x1e>
    7142:	6823      	ldr	r3, [r4, #0]
    7144:	2b00      	cmp	r3, #0
    7146:	d000      	beq.n	714a <_fstat_r+0x1e>
    7148:	602b      	str	r3, [r5, #0]
    714a:	bd38      	pop	{r3, r4, r5, pc}
    714c:	20003d04 	.word	0x20003d04

00007150 <_isatty_r>:
    7150:	b538      	push	{r3, r4, r5, lr}
    7152:	4c07      	ldr	r4, [pc, #28]	; (7170 <_isatty_r+0x20>)
    7154:	2300      	movs	r3, #0
    7156:	1c05      	adds	r5, r0, #0
    7158:	1c08      	adds	r0, r1, #0
    715a:	6023      	str	r3, [r4, #0]
    715c:	f7fd fe1e 	bl	4d9c <_isatty>
    7160:	1c43      	adds	r3, r0, #1
    7162:	d103      	bne.n	716c <_isatty_r+0x1c>
    7164:	6823      	ldr	r3, [r4, #0]
    7166:	2b00      	cmp	r3, #0
    7168:	d000      	beq.n	716c <_isatty_r+0x1c>
    716a:	602b      	str	r3, [r5, #0]
    716c:	bd38      	pop	{r3, r4, r5, pc}
    716e:	46c0      	nop			; (mov r8, r8)
    7170:	20003d04 	.word	0x20003d04

00007174 <_lseek_r>:
    7174:	b538      	push	{r3, r4, r5, lr}
    7176:	4c08      	ldr	r4, [pc, #32]	; (7198 <_lseek_r+0x24>)
    7178:	1c05      	adds	r5, r0, #0
    717a:	2000      	movs	r0, #0
    717c:	6020      	str	r0, [r4, #0]
    717e:	1c08      	adds	r0, r1, #0
    7180:	1c11      	adds	r1, r2, #0
    7182:	1c1a      	adds	r2, r3, #0
    7184:	f7fd fe14 	bl	4db0 <_lseek>
    7188:	1c43      	adds	r3, r0, #1
    718a:	d103      	bne.n	7194 <_lseek_r+0x20>
    718c:	6823      	ldr	r3, [r4, #0]
    718e:	2b00      	cmp	r3, #0
    7190:	d000      	beq.n	7194 <_lseek_r+0x20>
    7192:	602b      	str	r3, [r5, #0]
    7194:	bd38      	pop	{r3, r4, r5, pc}
    7196:	46c0      	nop			; (mov r8, r8)
    7198:	20003d04 	.word	0x20003d04

0000719c <_read_r>:
    719c:	b538      	push	{r3, r4, r5, lr}
    719e:	4c08      	ldr	r4, [pc, #32]	; (71c0 <_read_r+0x24>)
    71a0:	1c05      	adds	r5, r0, #0
    71a2:	2000      	movs	r0, #0
    71a4:	6020      	str	r0, [r4, #0]
    71a6:	1c08      	adds	r0, r1, #0
    71a8:	1c11      	adds	r1, r2, #0
    71aa:	1c1a      	adds	r2, r3, #0
    71ac:	f7fa feac 	bl	1f08 <_read>
    71b0:	1c43      	adds	r3, r0, #1
    71b2:	d103      	bne.n	71bc <_read_r+0x20>
    71b4:	6823      	ldr	r3, [r4, #0]
    71b6:	2b00      	cmp	r3, #0
    71b8:	d000      	beq.n	71bc <_read_r+0x20>
    71ba:	602b      	str	r3, [r5, #0]
    71bc:	bd38      	pop	{r3, r4, r5, pc}
    71be:	46c0      	nop			; (mov r8, r8)
    71c0:	20003d04 	.word	0x20003d04
    71c4:	00000002 	.word	0x00000002
    71c8:	00000003 	.word	0x00000003
    71cc:	00000028 	.word	0x00000028
    71d0:	00000029 	.word	0x00000029
    71d4:	00000004 	.word	0x00000004
    71d8:	00000005 	.word	0x00000005
    71dc:	00000006 	.word	0x00000006
    71e0:	00000007 	.word	0x00000007
    71e4:	00000020 	.word	0x00000020
    71e8:	00000021 	.word	0x00000021
    71ec:	00000022 	.word	0x00000022
    71f0:	00000023 	.word	0x00000023
    71f4:	00000024 	.word	0x00000024
    71f8:	00000025 	.word	0x00000025
    71fc:	00000026 	.word	0x00000026
    7200:	00000027 	.word	0x00000027
    7204:	00000008 	.word	0x00000008
    7208:	00000009 	.word	0x00000009
    720c:	0000000a 	.word	0x0000000a
    7210:	0000000b 	.word	0x0000000b
    7214:	0000087e 	.word	0x0000087e
    7218:	00000884 	.word	0x00000884
    721c:	00000884 	.word	0x00000884
    7220:	00000884 	.word	0x00000884
    7224:	00000884 	.word	0x00000884
    7228:	00000884 	.word	0x00000884
    722c:	00000884 	.word	0x00000884
    7230:	00000884 	.word	0x00000884
    7234:	00000884 	.word	0x00000884
    7238:	00000884 	.word	0x00000884
    723c:	00000884 	.word	0x00000884
    7240:	00000884 	.word	0x00000884
    7244:	00000884 	.word	0x00000884
    7248:	00000884 	.word	0x00000884
    724c:	00000884 	.word	0x00000884
    7250:	00000884 	.word	0x00000884
    7254:	0000085c 	.word	0x0000085c
    7258:	00000884 	.word	0x00000884
    725c:	00000884 	.word	0x00000884
    7260:	00000884 	.word	0x00000884
    7264:	00000884 	.word	0x00000884
    7268:	00000884 	.word	0x00000884
    726c:	00000884 	.word	0x00000884
    7270:	00000884 	.word	0x00000884
    7274:	00000884 	.word	0x00000884
    7278:	00000884 	.word	0x00000884
    727c:	00000884 	.word	0x00000884
    7280:	00000884 	.word	0x00000884
    7284:	00000884 	.word	0x00000884
    7288:	00000884 	.word	0x00000884
    728c:	00000884 	.word	0x00000884
    7290:	00000884 	.word	0x00000884
    7294:	00000878 	.word	0x00000878
    7298:	00000884 	.word	0x00000884
    729c:	00000884 	.word	0x00000884
    72a0:	00000884 	.word	0x00000884
    72a4:	00000884 	.word	0x00000884
    72a8:	00000884 	.word	0x00000884
    72ac:	00000884 	.word	0x00000884
    72b0:	00000884 	.word	0x00000884
    72b4:	00000884 	.word	0x00000884
    72b8:	00000884 	.word	0x00000884
    72bc:	00000884 	.word	0x00000884
    72c0:	00000884 	.word	0x00000884
    72c4:	00000884 	.word	0x00000884
    72c8:	00000884 	.word	0x00000884
    72cc:	00000884 	.word	0x00000884
    72d0:	00000884 	.word	0x00000884
    72d4:	00000872 	.word	0x00000872
    72d8:	0000081a 	.word	0x0000081a
    72dc:	00000830 	.word	0x00000830
    72e0:	00000846 	.word	0x00000846
    72e4:	00000800 	.word	0x00000800
    72e8:	42000800 	.word	0x42000800
    72ec:	42000c00 	.word	0x42000c00
    72f0:	42001000 	.word	0x42001000
    72f4:	42001400 	.word	0x42001400
    72f8:	42001800 	.word	0x42001800
    72fc:	42001c00 	.word	0x42001c00
    7300:	0c0b0a09 	.word	0x0c0b0a09
    7304:	00000e0d 	.word	0x00000e0d
    7308:	454c4449 	.word	0x454c4449
    730c:	00000000 	.word	0x00000000
    7310:	20726d54 	.word	0x20726d54
    7314:	00637653 	.word	0x00637653
    7318:	00003e34 	.word	0x00003e34
    731c:	00003e34 	.word	0x00003e34
    7320:	00003e34 	.word	0x00003e34
    7324:	00003ecc 	.word	0x00003ecc
    7328:	00003e94 	.word	0x00003e94
    732c:	00003ebe 	.word	0x00003ebe
    7330:	00003e34 	.word	0x00003e34
    7334:	00003e34 	.word	0x00003e34
    7338:	00003ecc 	.word	0x00003ecc
    733c:	00003e94 	.word	0x00003e94
    7340:	00004382 	.word	0x00004382
    7344:	00004400 	.word	0x00004400
    7348:	00004400 	.word	0x00004400
    734c:	000043a6 	.word	0x000043a6
    7350:	000043a0 	.word	0x000043a0
    7354:	000043ac 	.word	0x000043ac
    7358:	00004388 	.word	0x00004388
    735c:	000043b2 	.word	0x000043b2
    7360:	000043e6 	.word	0x000043e6
    7364:	000044cc 	.word	0x000044cc
    7368:	0000451c 	.word	0x0000451c
    736c:	0000451c 	.word	0x0000451c
    7370:	00004518 	.word	0x00004518
    7374:	000044be 	.word	0x000044be
    7378:	000044de 	.word	0x000044de
    737c:	000044ae 	.word	0x000044ae
    7380:	000044f0 	.word	0x000044f0
    7384:	00004502 	.word	0x00004502
    7388:	00006968 	.word	0x00006968
    738c:	46202d2d 	.word	0x46202d2d
    7390:	72656572 	.word	0x72656572
    7394:	20736f74 	.word	0x20736f74
    7398:	6d617845 	.word	0x6d617845
    739c:	20656c70 	.word	0x20656c70
    73a0:	0d0a2d2d 	.word	0x0d0a2d2d
    73a4:	00000000 	.word	0x00000000
    73a8:	25202d2d 	.word	0x25202d2d
    73ac:	000d0a73 	.word	0x000d0a73
    73b0:	444d4153 	.word	0x444d4153
    73b4:	585f3132 	.word	0x585f3132
    73b8:	49414c50 	.word	0x49414c50
    73bc:	5f44454e 	.word	0x5f44454e
    73c0:	004f5250 	.word	0x004f5250
    73c4:	43202d2d 	.word	0x43202d2d
    73c8:	69706d6f 	.word	0x69706d6f
    73cc:	3a64656c 	.word	0x3a64656c
    73d0:	20732520 	.word	0x20732520
    73d4:	2d207325 	.word	0x2d207325
    73d8:	000d0a2d 	.word	0x000d0a2d
    73dc:	20706553 	.word	0x20706553
    73e0:	32203732 	.word	0x32203732
    73e4:	00353130 	.word	0x00353130
    73e8:	313a3531 	.word	0x313a3531
    73ec:	35353a31 	.word	0x35353a31
    73f0:	00000000 	.word	0x00000000
    73f4:	0d0a6425 	.word	0x0d0a6425
    73f8:	00000000 	.word	0x00000000
    73fc:	73756170 	.word	0x73756170
    7400:	6f702065 	.word	0x6f702065
    7404:	00746e69 	.word	0x00746e69
    7408:	696e6f4d 	.word	0x696e6f4d
    740c:	00726f74 	.word	0x00726f74
    7410:	0064654c 	.word	0x0064654c
    7414:	00434441 	.word	0x00434441
    7418:	00005d1c 	.word	0x00005d1c
    741c:	00005f0a 	.word	0x00005f0a
    7420:	00005f0a 	.word	0x00005f0a
    7424:	00005cfc 	.word	0x00005cfc
    7428:	00005be6 	.word	0x00005be6
    742c:	00005be6 	.word	0x00005be6
    7430:	00005cee 	.word	0x00005cee
    7434:	00005cfc 	.word	0x00005cfc
    7438:	00005be6 	.word	0x00005be6
    743c:	00005cee 	.word	0x00005cee
    7440:	00005be6 	.word	0x00005be6
    7444:	00005cfc 	.word	0x00005cfc
    7448:	00005be4 	.word	0x00005be4
    744c:	00005be4 	.word	0x00005be4
    7450:	00005be4 	.word	0x00005be4
    7454:	00005f12 	.word	0x00005f12
    7458:	00000043 	.word	0x00000043

0000745c <_global_impure_ptr>:
    745c:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    746c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    747c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    748c:	64636261 00006665                       abcdef..

00007494 <__sf_fake_stdin>:
	...

000074b4 <__sf_fake_stdout>:
	...

000074d4 <__sf_fake_stderr>:
	...

000074f4 <_init>:
    74f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74fa:	bc08      	pop	{r3}
    74fc:	469e      	mov	lr, r3
    74fe:	4770      	bx	lr

00007500 <__init_array_start>:
    7500:	000000d9 	.word	0x000000d9

00007504 <_fini>:
    7504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	bcf8      	pop	{r3, r4, r5, r6, r7}
    750a:	bc08      	pop	{r3}
    750c:	469e      	mov	lr, r3
    750e:	4770      	bx	lr

00007510 <__fini_array_start>:
    7510:	000000b1 	.word	0x000000b1
