
CubesatFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e68  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001e68  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c28  2000000c  00001e74  0001000c  2**2
                  ALLOC
  3 .stack        00002004  20003c34  00005a9c  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d73f  00000000  00000000  000100a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021a4  00000000  00000000  0001d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004c46  00000000  00000000  0001f988  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000620  00000000  00000000  000245ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000610  00000000  00000000  00024bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000174fb  00000000  00000000  000251fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000864d  00000000  00000000  0003c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008914b  00000000  00000000  00044d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f7c  00000000  00000000  000cde94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005c38 	.word	0x20005c38
       4:	00001bf5 	.word	0x00001bf5
       8:	00001bf1 	.word	0x00001bf1
       c:	00001bf1 	.word	0x00001bf1
	...
      2c:	00000291 	.word	0x00000291
	...
      38:	000002f9 	.word	0x000002f9
      3c:	0000033d 	.word	0x0000033d
      40:	00001bf1 	.word	0x00001bf1
      44:	00001bf1 	.word	0x00001bf1
      48:	00001bf1 	.word	0x00001bf1
      4c:	00001bf1 	.word	0x00001bf1
      50:	00001bf1 	.word	0x00001bf1
      54:	00001bf1 	.word	0x00001bf1
      58:	00001bf1 	.word	0x00001bf1
      5c:	00001bf1 	.word	0x00001bf1
      60:	00001bf1 	.word	0x00001bf1
      64:	000001dd 	.word	0x000001dd
      68:	000001ed 	.word	0x000001ed
      6c:	000001fd 	.word	0x000001fd
      70:	0000020d 	.word	0x0000020d
      74:	0000021d 	.word	0x0000021d
      78:	0000022d 	.word	0x0000022d
      7c:	00001bf1 	.word	0x00001bf1
      80:	00001bf1 	.word	0x00001bf1
      84:	00001bf1 	.word	0x00001bf1
      88:	00001bf1 	.word	0x00001bf1
      8c:	00001bf1 	.word	0x00001bf1
      90:	00001bf1 	.word	0x00001bf1
      94:	00001bf1 	.word	0x00001bf1
      98:	00001bf1 	.word	0x00001bf1
      9c:	00001bf1 	.word	0x00001bf1
      a0:	00001bf1 	.word	0x00001bf1
      a4:	00001bf1 	.word	0x00001bf1
      a8:	00001bf1 	.word	0x00001bf1
      ac:	00001bf1 	.word	0x00001bf1

000000b0 <deregister_tm_clones>:
      b0:	b508      	push	{r3, lr}
      b2:	4b06      	ldr	r3, [pc, #24]	; (cc <deregister_tm_clones+0x1c>)
      b4:	4806      	ldr	r0, [pc, #24]	; (d0 <deregister_tm_clones+0x20>)
      b6:	3303      	adds	r3, #3
      b8:	1a1b      	subs	r3, r3, r0
      ba:	2b06      	cmp	r3, #6
      bc:	d800      	bhi.n	c0 <deregister_tm_clones+0x10>
      be:	bd08      	pop	{r3, pc}
      c0:	4b04      	ldr	r3, [pc, #16]	; (d4 <deregister_tm_clones+0x24>)
      c2:	2b00      	cmp	r3, #0
      c4:	d0fb      	beq.n	be <deregister_tm_clones+0xe>
      c6:	4798      	blx	r3
      c8:	e7f9      	b.n	be <deregister_tm_clones+0xe>
      ca:	46c0      	nop			; (mov r8, r8)
      cc:	00001e68 	.word	0x00001e68
      d0:	00001e68 	.word	0x00001e68
      d4:	00000000 	.word	0x00000000

000000d8 <register_tm_clones>:
      d8:	b508      	push	{r3, lr}
      da:	4807      	ldr	r0, [pc, #28]	; (f8 <register_tm_clones+0x20>)
      dc:	4b07      	ldr	r3, [pc, #28]	; (fc <register_tm_clones+0x24>)
      de:	1a1b      	subs	r3, r3, r0
      e0:	109b      	asrs	r3, r3, #2
      e2:	0fda      	lsrs	r2, r3, #31
      e4:	18d3      	adds	r3, r2, r3
      e6:	1059      	asrs	r1, r3, #1
      e8:	d100      	bne.n	ec <register_tm_clones+0x14>
      ea:	bd08      	pop	{r3, pc}
      ec:	4a04      	ldr	r2, [pc, #16]	; (100 <register_tm_clones+0x28>)
      ee:	2a00      	cmp	r2, #0
      f0:	d0fb      	beq.n	ea <register_tm_clones+0x12>
      f2:	4790      	blx	r2
      f4:	e7f9      	b.n	ea <register_tm_clones+0x12>
      f6:	46c0      	nop			; (mov r8, r8)
      f8:	00001e68 	.word	0x00001e68
      fc:	00001e68 	.word	0x00001e68
     100:	00000000 	.word	0x00000000

00000104 <__do_global_dtors_aux>:
     104:	b510      	push	{r4, lr}
     106:	4c07      	ldr	r4, [pc, #28]	; (124 <__do_global_dtors_aux+0x20>)
     108:	7823      	ldrb	r3, [r4, #0]
     10a:	2b00      	cmp	r3, #0
     10c:	d109      	bne.n	122 <__do_global_dtors_aux+0x1e>
     10e:	f7ff ffcf 	bl	b0 <deregister_tm_clones>
     112:	4b05      	ldr	r3, [pc, #20]	; (128 <__do_global_dtors_aux+0x24>)
     114:	2b00      	cmp	r3, #0
     116:	d002      	beq.n	11e <__do_global_dtors_aux+0x1a>
     118:	4804      	ldr	r0, [pc, #16]	; (12c <__do_global_dtors_aux+0x28>)
     11a:	e000      	b.n	11e <__do_global_dtors_aux+0x1a>
     11c:	bf00      	nop
     11e:	2301      	movs	r3, #1
     120:	7023      	strb	r3, [r4, #0]
     122:	bd10      	pop	{r4, pc}
     124:	2000000c 	.word	0x2000000c
     128:	00000000 	.word	0x00000000
     12c:	00001e68 	.word	0x00001e68

00000130 <frame_dummy>:
     130:	b508      	push	{r3, lr}
     132:	4b09      	ldr	r3, [pc, #36]	; (158 <frame_dummy+0x28>)
     134:	2b00      	cmp	r3, #0
     136:	d003      	beq.n	140 <frame_dummy+0x10>
     138:	4808      	ldr	r0, [pc, #32]	; (15c <frame_dummy+0x2c>)
     13a:	4909      	ldr	r1, [pc, #36]	; (160 <frame_dummy+0x30>)
     13c:	e000      	b.n	140 <frame_dummy+0x10>
     13e:	bf00      	nop
     140:	4808      	ldr	r0, [pc, #32]	; (164 <frame_dummy+0x34>)
     142:	6803      	ldr	r3, [r0, #0]
     144:	2b00      	cmp	r3, #0
     146:	d003      	beq.n	150 <frame_dummy+0x20>
     148:	4b07      	ldr	r3, [pc, #28]	; (168 <frame_dummy+0x38>)
     14a:	2b00      	cmp	r3, #0
     14c:	d000      	beq.n	150 <frame_dummy+0x20>
     14e:	4798      	blx	r3
     150:	f7ff ffc2 	bl	d8 <register_tm_clones>
     154:	bd08      	pop	{r3, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000000 	.word	0x00000000
     15c:	00001e68 	.word	0x00001e68
     160:	20000010 	.word	0x20000010
     164:	00001e68 	.word	0x00001e68
     168:	00000000 	.word	0x00000000

0000016c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     16c:	4b0c      	ldr	r3, [pc, #48]	; (1a0 <cpu_irq_enter_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	2b00      	cmp	r3, #0
     172:	d110      	bne.n	196 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     174:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     178:	2b00      	cmp	r3, #0
     17a:	d109      	bne.n	190 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     17c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     17e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     182:	2200      	movs	r2, #0
     184:	4b07      	ldr	r3, [pc, #28]	; (1a4 <cpu_irq_enter_critical+0x38>)
     186:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     188:	2201      	movs	r2, #1
     18a:	4b07      	ldr	r3, [pc, #28]	; (1a8 <cpu_irq_enter_critical+0x3c>)
     18c:	701a      	strb	r2, [r3, #0]
     18e:	e002      	b.n	196 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b05      	ldr	r3, [pc, #20]	; (1a8 <cpu_irq_enter_critical+0x3c>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4b02      	ldr	r3, [pc, #8]	; (1a0 <cpu_irq_enter_critical+0x34>)
     198:	681a      	ldr	r2, [r3, #0]
     19a:	3201      	adds	r2, #1
     19c:	601a      	str	r2, [r3, #0]
}
     19e:	4770      	bx	lr
     1a0:	20000028 	.word	0x20000028
     1a4:	20000000 	.word	0x20000000
     1a8:	2000002c 	.word	0x2000002c

000001ac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ac:	4b08      	ldr	r3, [pc, #32]	; (1d0 <cpu_irq_leave_critical+0x24>)
     1ae:	681a      	ldr	r2, [r3, #0]
     1b0:	3a01      	subs	r2, #1
     1b2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d109      	bne.n	1ce <cpu_irq_leave_critical+0x22>
     1ba:	4b06      	ldr	r3, [pc, #24]	; (1d4 <cpu_irq_leave_critical+0x28>)
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	2b00      	cmp	r3, #0
     1c0:	d005      	beq.n	1ce <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1c2:	2201      	movs	r2, #1
     1c4:	4b04      	ldr	r3, [pc, #16]	; (1d8 <cpu_irq_leave_critical+0x2c>)
     1c6:	701a      	strb	r2, [r3, #0]
     1c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1cc:	b662      	cpsie	i
	}
}
     1ce:	4770      	bx	lr
     1d0:	20000028 	.word	0x20000028
     1d4:	2000002c 	.word	0x2000002c
     1d8:	20000000 	.word	0x20000000

000001dc <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     1dc:	b508      	push	{r3, lr}
     1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SERCOM0_Handler+0xc>)
     1e0:	681b      	ldr	r3, [r3, #0]
     1e2:	2000      	movs	r0, #0
     1e4:	4798      	blx	r3
     1e6:	bd08      	pop	{r3, pc}
     1e8:	20000030 	.word	0x20000030

000001ec <SERCOM1_Handler>:
     1ec:	b508      	push	{r3, lr}
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SERCOM1_Handler+0xc>)
     1f0:	685b      	ldr	r3, [r3, #4]
     1f2:	2001      	movs	r0, #1
     1f4:	4798      	blx	r3
     1f6:	bd08      	pop	{r3, pc}
     1f8:	20000030 	.word	0x20000030

000001fc <SERCOM2_Handler>:
     1fc:	b508      	push	{r3, lr}
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SERCOM2_Handler+0xc>)
     200:	689b      	ldr	r3, [r3, #8]
     202:	2002      	movs	r0, #2
     204:	4798      	blx	r3
     206:	bd08      	pop	{r3, pc}
     208:	20000030 	.word	0x20000030

0000020c <SERCOM3_Handler>:
     20c:	b508      	push	{r3, lr}
     20e:	4b02      	ldr	r3, [pc, #8]	; (218 <SERCOM3_Handler+0xc>)
     210:	68db      	ldr	r3, [r3, #12]
     212:	2003      	movs	r0, #3
     214:	4798      	blx	r3
     216:	bd08      	pop	{r3, pc}
     218:	20000030 	.word	0x20000030

0000021c <SERCOM4_Handler>:
     21c:	b508      	push	{r3, lr}
     21e:	4b02      	ldr	r3, [pc, #8]	; (228 <SERCOM4_Handler+0xc>)
     220:	691b      	ldr	r3, [r3, #16]
     222:	2004      	movs	r0, #4
     224:	4798      	blx	r3
     226:	bd08      	pop	{r3, pc}
     228:	20000030 	.word	0x20000030

0000022c <SERCOM5_Handler>:
     22c:	b508      	push	{r3, lr}
     22e:	4b02      	ldr	r3, [pc, #8]	; (238 <SERCOM5_Handler+0xc>)
     230:	695b      	ldr	r3, [r3, #20]
     232:	2005      	movs	r0, #5
     234:	4798      	blx	r3
     236:	bd08      	pop	{r3, pc}
     238:	20000030 	.word	0x20000030

0000023c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <prvTaskExitError+0x10>)
     23e:	681b      	ldr	r3, [r3, #0]
     240:	3301      	adds	r3, #1
     242:	d001      	beq.n	248 <prvTaskExitError+0xc>
     244:	b672      	cpsid	i
     246:	e7fe      	b.n	246 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     248:	b672      	cpsid	i
     24a:	e7fe      	b.n	24a <prvTaskExitError+0xe>
     24c:	20000004 	.word	0x20000004

00000250 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     250:	4a06      	ldr	r2, [pc, #24]	; (26c <pxCurrentTCBConst2>)
     252:	6813      	ldr	r3, [r2, #0]
     254:	6818      	ldr	r0, [r3, #0]
     256:	3020      	adds	r0, #32
     258:	f380 8809 	msr	PSP, r0
     25c:	2002      	movs	r0, #2
     25e:	f380 8814 	msr	CONTROL, r0
     262:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     264:	46ae      	mov	lr, r5
     266:	b662      	cpsie	i
     268:	bd00      	pop	{pc}
     26a:	46c0      	nop			; (mov r8, r8)

0000026c <pxCurrentTCBConst2>:
     26c:	20003b9c 	.word	0x20003b9c

00000270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     270:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     272:	1f03      	subs	r3, r0, #4
     274:	2480      	movs	r4, #128	; 0x80
     276:	0464      	lsls	r4, r4, #17
     278:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     27a:	3b04      	subs	r3, #4
     27c:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     27e:	3b04      	subs	r3, #4
     280:	4902      	ldr	r1, [pc, #8]	; (28c <pxPortInitialiseStack+0x1c>)
     282:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     284:	3b14      	subs	r3, #20
     286:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     288:	3840      	subs	r0, #64	; 0x40
}
     28a:	bd10      	pop	{r4, pc}
     28c:	0000023d 	.word	0x0000023d

00000290 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     290:	4770      	bx	lr
     292:	46c0      	nop			; (mov r8, r8)

00000294 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     294:	2280      	movs	r2, #128	; 0x80
     296:	0552      	lsls	r2, r2, #21
     298:	4b03      	ldr	r3, [pc, #12]	; (2a8 <vPortYield+0x14>)
     29a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     29c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     2a0:	f3bf 8f6f 	isb	sy
}
     2a4:	4770      	bx	lr
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	e000ed04 	.word	0xe000ed04

000002ac <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     2ac:	b672      	cpsid	i
    uxCriticalNesting++;
     2ae:	4b04      	ldr	r3, [pc, #16]	; (2c0 <vPortEnterCritical+0x14>)
     2b0:	681a      	ldr	r2, [r3, #0]
     2b2:	3201      	adds	r2, #1
     2b4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     2b6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     2ba:	f3bf 8f6f 	isb	sy
}
     2be:	4770      	bx	lr
     2c0:	20000004 	.word	0x20000004

000002c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     2c4:	4b06      	ldr	r3, [pc, #24]	; (2e0 <vPortExitCritical+0x1c>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	2b00      	cmp	r3, #0
     2ca:	d101      	bne.n	2d0 <vPortExitCritical+0xc>
     2cc:	b672      	cpsid	i
     2ce:	e7fe      	b.n	2ce <vPortExitCritical+0xa>
    uxCriticalNesting--;
     2d0:	3b01      	subs	r3, #1
     2d2:	4a03      	ldr	r2, [pc, #12]	; (2e0 <vPortExitCritical+0x1c>)
     2d4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     2d6:	2b00      	cmp	r3, #0
     2d8:	d100      	bne.n	2dc <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     2da:	b662      	cpsie	i
    }
}
     2dc:	4770      	bx	lr
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	20000004 	.word	0x20000004

000002e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     2e4:	f3ef 8010 	mrs	r0, PRIMASK
     2e8:	b672      	cpsid	i
     2ea:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     2ec:	2000      	movs	r0, #0
     2ee:	46c0      	nop			; (mov r8, r8)

000002f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     2f0:	f380 8810 	msr	PRIMASK, r0
     2f4:	4770      	bx	lr
     2f6:	46c0      	nop			; (mov r8, r8)

000002f8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     2f8:	f3ef 8009 	mrs	r0, PSP
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <pxCurrentTCBConst>)
     2fe:	681a      	ldr	r2, [r3, #0]
     300:	3820      	subs	r0, #32
     302:	6010      	str	r0, [r2, #0]
     304:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     306:	4644      	mov	r4, r8
     308:	464d      	mov	r5, r9
     30a:	4656      	mov	r6, sl
     30c:	465f      	mov	r7, fp
     30e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     310:	b508      	push	{r3, lr}
     312:	b672      	cpsid	i
     314:	f000 ff22 	bl	115c <vTaskSwitchContext>
     318:	b662      	cpsie	i
     31a:	bc0c      	pop	{r2, r3}
     31c:	6811      	ldr	r1, [r2, #0]
     31e:	6808      	ldr	r0, [r1, #0]
     320:	3010      	adds	r0, #16
     322:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     324:	46a0      	mov	r8, r4
     326:	46a9      	mov	r9, r5
     328:	46b2      	mov	sl, r6
     32a:	46bb      	mov	fp, r7
     32c:	f380 8809 	msr	PSP, r0
     330:	3820      	subs	r0, #32
     332:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     334:	4718      	bx	r3
     336:	46c0      	nop			; (mov r8, r8)

00000338 <pxCurrentTCBConst>:
     338:	20003b9c 	.word	0x20003b9c

0000033c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     33c:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     33e:	4b07      	ldr	r3, [pc, #28]	; (35c <SysTick_Handler+0x20>)
     340:	4798      	blx	r3
     342:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     344:	4b06      	ldr	r3, [pc, #24]	; (360 <SysTick_Handler+0x24>)
     346:	4798      	blx	r3
     348:	2800      	cmp	r0, #0
     34a:	d003      	beq.n	354 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     34c:	2280      	movs	r2, #128	; 0x80
     34e:	0552      	lsls	r2, r2, #21
     350:	4b04      	ldr	r3, [pc, #16]	; (364 <SysTick_Handler+0x28>)
     352:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     354:	1c20      	adds	r0, r4, #0
     356:	4b04      	ldr	r3, [pc, #16]	; (368 <SysTick_Handler+0x2c>)
     358:	4798      	blx	r3
}
     35a:	bd10      	pop	{r4, pc}
     35c:	000002e5 	.word	0x000002e5
     360:	00000e59 	.word	0x00000e59
     364:	e000ed04 	.word	0xe000ed04
     368:	000002f1 	.word	0x000002f1

0000036c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     36c:	2200      	movs	r2, #0
     36e:	4b04      	ldr	r3, [pc, #16]	; (380 <vPortSetupTimerInterrupt+0x14>)
     370:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     372:	4a04      	ldr	r2, [pc, #16]	; (384 <vPortSetupTimerInterrupt+0x18>)
     374:	4b04      	ldr	r3, [pc, #16]	; (388 <vPortSetupTimerInterrupt+0x1c>)
     376:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     378:	2207      	movs	r2, #7
     37a:	4b04      	ldr	r3, [pc, #16]	; (38c <vPortSetupTimerInterrupt+0x20>)
     37c:	601a      	str	r2, [r3, #0]
}
     37e:	4770      	bx	lr
     380:	e000e018 	.word	0xe000e018
     384:	00001f3f 	.word	0x00001f3f
     388:	e000e014 	.word	0xe000e014
     38c:	e000e010 	.word	0xe000e010

00000390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     390:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     392:	4b0a      	ldr	r3, [pc, #40]	; (3bc <xPortStartScheduler+0x2c>)
     394:	6819      	ldr	r1, [r3, #0]
     396:	22ff      	movs	r2, #255	; 0xff
     398:	0412      	lsls	r2, r2, #16
     39a:	430a      	orrs	r2, r1
     39c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     39e:	6819      	ldr	r1, [r3, #0]
     3a0:	22ff      	movs	r2, #255	; 0xff
     3a2:	0612      	lsls	r2, r2, #24
     3a4:	430a      	orrs	r2, r1
     3a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <xPortStartScheduler+0x30>)
     3aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     3ac:	2200      	movs	r2, #0
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <xPortStartScheduler+0x34>)
     3b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <xPortStartScheduler+0x38>)
     3b4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     3b6:	4b05      	ldr	r3, [pc, #20]	; (3cc <xPortStartScheduler+0x3c>)
     3b8:	4798      	blx	r3
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	e000ed20 	.word	0xe000ed20
     3c0:	0000036d 	.word	0x0000036d
     3c4:	20000004 	.word	0x20000004
     3c8:	00000251 	.word	0x00000251
     3cc:	0000023d 	.word	0x0000023d

000003d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3d0:	b538      	push	{r3, r4, r5, lr}
     3d2:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     3d4:	0743      	lsls	r3, r0, #29
     3d6:	d002      	beq.n	3de <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     3d8:	2307      	movs	r3, #7
     3da:	439c      	bics	r4, r3
     3dc:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     3de:	4b10      	ldr	r3, [pc, #64]	; (420 <pvPortMalloc+0x50>)
     3e0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     3e2:	4b10      	ldr	r3, [pc, #64]	; (424 <pvPortMalloc+0x54>)
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d105      	bne.n	3f6 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     3ea:	2307      	movs	r3, #7
     3ec:	4a0e      	ldr	r2, [pc, #56]	; (428 <pvPortMalloc+0x58>)
     3ee:	3208      	adds	r2, #8
     3f0:	439a      	bics	r2, r3
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <pvPortMalloc+0x54>)
     3f4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     3f6:	4b0d      	ldr	r3, [pc, #52]	; (42c <pvPortMalloc+0x5c>)
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	18e4      	adds	r4, r4, r3
     3fc:	4a0c      	ldr	r2, [pc, #48]	; (430 <pvPortMalloc+0x60>)
     3fe:	4294      	cmp	r4, r2
     400:	d807      	bhi.n	412 <pvPortMalloc+0x42>
     402:	42a3      	cmp	r3, r4
     404:	d207      	bcs.n	416 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     406:	4a07      	ldr	r2, [pc, #28]	; (424 <pvPortMalloc+0x54>)
     408:	6815      	ldr	r5, [r2, #0]
     40a:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     40c:	4b07      	ldr	r3, [pc, #28]	; (42c <pvPortMalloc+0x5c>)
     40e:	601c      	str	r4, [r3, #0]
     410:	e002      	b.n	418 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     412:	2500      	movs	r5, #0
     414:	e000      	b.n	418 <pvPortMalloc+0x48>
     416:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <pvPortMalloc+0x64>)
     41a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     41c:	1c28      	adds	r0, r5, #0
     41e:	bd38      	pop	{r3, r4, r5, pc}
     420:	00000e29 	.word	0x00000e29
     424:	20003ae4 	.word	0x20003ae4
     428:	2000004c 	.word	0x2000004c
     42c:	20000048 	.word	0x20000048
     430:	00003a8f 	.word	0x00003a8f
     434:	00000f85 	.word	0x00000f85

00000438 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     438:	2800      	cmp	r0, #0
     43a:	d001      	beq.n	440 <vPortFree+0x8>
     43c:	b672      	cpsid	i
     43e:	e7fe      	b.n	43e <vPortFree+0x6>
}
     440:	4770      	bx	lr
     442:	46c0      	nop			; (mov r8, r8)

00000444 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     444:	1c03      	adds	r3, r0, #0
     446:	3308      	adds	r3, #8
     448:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     44a:	2201      	movs	r2, #1
     44c:	4252      	negs	r2, r2
     44e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     450:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     452:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     454:	2300      	movs	r3, #0
     456:	6003      	str	r3, [r0, #0]
}
     458:	4770      	bx	lr
     45a:	46c0      	nop			; (mov r8, r8)

0000045c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     45c:	2300      	movs	r3, #0
     45e:	6103      	str	r3, [r0, #16]
}
     460:	4770      	bx	lr
     462:	46c0      	nop			; (mov r8, r8)

00000464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     464:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     466:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     468:	689a      	ldr	r2, [r3, #8]
     46a:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     46c:	689a      	ldr	r2, [r3, #8]
     46e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     470:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     472:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     474:	6803      	ldr	r3, [r0, #0]
     476:	3301      	adds	r3, #1
     478:	6003      	str	r3, [r0, #0]
}
     47a:	4770      	bx	lr

0000047c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     47c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     47e:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     480:	1c02      	adds	r2, r0, #0
     482:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     484:	1c63      	adds	r3, r4, #1
     486:	d101      	bne.n	48c <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     488:	6902      	ldr	r2, [r0, #16]
     48a:	e005      	b.n	498 <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     48c:	6853      	ldr	r3, [r2, #4]
     48e:	681d      	ldr	r5, [r3, #0]
     490:	42ac      	cmp	r4, r5
     492:	d301      	bcc.n	498 <vListInsert+0x1c>
     494:	1c1a      	adds	r2, r3, #0
     496:	e7f9      	b.n	48c <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     498:	6853      	ldr	r3, [r2, #4]
     49a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     49c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     49e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     4a0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     4a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     4a4:	6803      	ldr	r3, [r0, #0]
     4a6:	3301      	adds	r3, #1
     4a8:	6003      	str	r3, [r0, #0]
}
     4aa:	bd30      	pop	{r4, r5, pc}

000004ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     4ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ae:	6842      	ldr	r2, [r0, #4]
     4b0:	6881      	ldr	r1, [r0, #8]
     4b2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4b4:	6882      	ldr	r2, [r0, #8]
     4b6:	6841      	ldr	r1, [r0, #4]
     4b8:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     4ba:	685a      	ldr	r2, [r3, #4]
     4bc:	4282      	cmp	r2, r0
     4be:	d101      	bne.n	4c4 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     4c0:	6892      	ldr	r2, [r2, #8]
     4c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     4c4:	2200      	movs	r2, #0
     4c6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     4c8:	6818      	ldr	r0, [r3, #0]
     4ca:	3801      	subs	r0, #1
     4cc:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     4ce:	4770      	bx	lr

000004d0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     4d0:	b538      	push	{r3, r4, r5, lr}
     4d2:	1c04      	adds	r4, r0, #0
     4d4:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     4d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
     4d8:	2a00      	cmp	r2, #0
     4da:	d108      	bne.n	4ee <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     4dc:	6801      	ldr	r1, [r0, #0]
     4de:	2900      	cmp	r1, #0
     4e0:	d12a      	bne.n	538 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     4e2:	6840      	ldr	r0, [r0, #4]
     4e4:	4b16      	ldr	r3, [pc, #88]	; (540 <prvCopyDataToQueue+0x70>)
     4e6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     4e8:	2300      	movs	r3, #0
     4ea:	6063      	str	r3, [r4, #4]
     4ec:	e024      	b.n	538 <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     4ee:	2d00      	cmp	r5, #0
     4f0:	d10c      	bne.n	50c <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     4f2:	6880      	ldr	r0, [r0, #8]
     4f4:	4b13      	ldr	r3, [pc, #76]	; (544 <prvCopyDataToQueue+0x74>)
     4f6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     4f8:	68a2      	ldr	r2, [r4, #8]
     4fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
     4fc:	1853      	adds	r3, r2, r1
     4fe:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     500:	6862      	ldr	r2, [r4, #4]
     502:	4293      	cmp	r3, r2
     504:	d318      	bcc.n	538 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     506:	6823      	ldr	r3, [r4, #0]
     508:	60a3      	str	r3, [r4, #8]
     50a:	e015      	b.n	538 <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     50c:	68c0      	ldr	r0, [r0, #12]
     50e:	4b0d      	ldr	r3, [pc, #52]	; (544 <prvCopyDataToQueue+0x74>)
     510:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     512:	6c21      	ldr	r1, [r4, #64]	; 0x40
     514:	424a      	negs	r2, r1
     516:	68e1      	ldr	r1, [r4, #12]
     518:	188b      	adds	r3, r1, r2
     51a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     51c:	6821      	ldr	r1, [r4, #0]
     51e:	428b      	cmp	r3, r1
     520:	d202      	bcs.n	528 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     522:	6863      	ldr	r3, [r4, #4]
     524:	189a      	adds	r2, r3, r2
     526:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     528:	2d02      	cmp	r5, #2
     52a:	d105      	bne.n	538 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     52c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     52e:	2b00      	cmp	r3, #0
     530:	d002      	beq.n	538 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
     532:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     534:	3b01      	subs	r3, #1
     536:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     53a:	3301      	adds	r3, #1
     53c:	63a3      	str	r3, [r4, #56]	; 0x38
}
     53e:	bd38      	pop	{r3, r4, r5, pc}
     540:	0000145d 	.word	0x0000145d
     544:	00001d5d 	.word	0x00001d5d

00000548 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     548:	b510      	push	{r4, lr}
     54a:	b082      	sub	sp, #8
     54c:	9001      	str	r0, [sp, #4]
     54e:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     550:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     552:	2c00      	cmp	r4, #0
     554:	d101      	bne.n	55a <prvNotifyQueueSetContainer+0x12>
     556:	b672      	cpsid	i
     558:	e7fe      	b.n	558 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     55a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     55c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     55e:	4299      	cmp	r1, r3
     560:	d301      	bcc.n	566 <prvNotifyQueueSetContainer+0x1e>
     562:	b672      	cpsid	i
     564:	e7fe      	b.n	564 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     568:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     56a:	428b      	cmp	r3, r1
     56c:	d90d      	bls.n	58a <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     56e:	1c20      	adds	r0, r4, #0
     570:	a901      	add	r1, sp, #4
     572:	4b07      	ldr	r3, [pc, #28]	; (590 <prvNotifyQueueSetContainer+0x48>)
     574:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     576:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     578:	6a63      	ldr	r3, [r4, #36]	; 0x24
     57a:	2b00      	cmp	r3, #0
     57c:	d005      	beq.n	58a <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     57e:	1c20      	adds	r0, r4, #0
     580:	3024      	adds	r0, #36	; 0x24
     582:	4b04      	ldr	r3, [pc, #16]	; (594 <prvNotifyQueueSetContainer+0x4c>)
     584:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     586:	1e43      	subs	r3, r0, #1
     588:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     58a:	b002      	add	sp, #8
     58c:	bd10      	pop	{r4, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	000004d1 	.word	0x000004d1
     594:	0000128d 	.word	0x0000128d

00000598 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     598:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     59a:	6804      	ldr	r4, [r0, #0]
     59c:	2c00      	cmp	r4, #0
     59e:	d00c      	beq.n	5ba <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     5a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
     5a2:	68c5      	ldr	r5, [r0, #12]
     5a4:	18ab      	adds	r3, r5, r2
     5a6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     5a8:	6845      	ldr	r5, [r0, #4]
     5aa:	42ab      	cmp	r3, r5
     5ac:	d300      	bcc.n	5b0 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     5ae:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     5b0:	68c3      	ldr	r3, [r0, #12]
     5b2:	1c08      	adds	r0, r1, #0
     5b4:	1c19      	adds	r1, r3, #0
     5b6:	4b01      	ldr	r3, [pc, #4]	; (5bc <prvCopyDataFromQueue+0x24>)
     5b8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     5ba:	bd38      	pop	{r3, r4, r5, pc}
     5bc:	00001d5d 	.word	0x00001d5d

000005c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c2:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     5c4:	4b23      	ldr	r3, [pc, #140]	; (654 <prvUnlockQueue+0x94>)
     5c6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     5c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     5ca:	2b00      	cmp	r3, #0
     5cc:	dd1c      	ble.n	608 <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     5ce:	4e22      	ldr	r6, [pc, #136]	; (658 <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     5d0:	4d22      	ldr	r5, [pc, #136]	; (65c <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
     5d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     5d4:	2b00      	cmp	r3, #0
     5d6:	d007      	beq.n	5e8 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     5d8:	1c20      	adds	r0, r4, #0
     5da:	2100      	movs	r1, #0
     5dc:	47a8      	blx	r5
     5de:	2801      	cmp	r0, #1
     5e0:	d10c      	bne.n	5fc <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
     5e2:	4b1f      	ldr	r3, [pc, #124]	; (660 <prvUnlockQueue+0xa0>)
     5e4:	4798      	blx	r3
     5e6:	e009      	b.n	5fc <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5ea:	2b00      	cmp	r3, #0
     5ec:	d00c      	beq.n	608 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     5ee:	1c20      	adds	r0, r4, #0
     5f0:	3024      	adds	r0, #36	; 0x24
     5f2:	47b0      	blx	r6
     5f4:	2800      	cmp	r0, #0
     5f6:	d001      	beq.n	5fc <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
     5f8:	4b19      	ldr	r3, [pc, #100]	; (660 <prvUnlockQueue+0xa0>)
     5fa:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     5fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     5fe:	3b01      	subs	r3, #1
     600:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     602:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     604:	2b00      	cmp	r3, #0
     606:	dce4      	bgt.n	5d2 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     608:	2301      	movs	r3, #1
     60a:	425b      	negs	r3, r3
     60c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     60e:	4b15      	ldr	r3, [pc, #84]	; (664 <prvUnlockQueue+0xa4>)
     610:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     612:	4b10      	ldr	r3, [pc, #64]	; (654 <prvUnlockQueue+0x94>)
     614:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     616:	6c63      	ldr	r3, [r4, #68]	; 0x44
     618:	2b00      	cmp	r3, #0
     61a:	dd15      	ble.n	648 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     61c:	6923      	ldr	r3, [r4, #16]
     61e:	2b00      	cmp	r3, #0
     620:	d012      	beq.n	648 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     622:	1c27      	adds	r7, r4, #0
     624:	3710      	adds	r7, #16
     626:	4e0c      	ldr	r6, [pc, #48]	; (658 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
     628:	4d0d      	ldr	r5, [pc, #52]	; (660 <prvUnlockQueue+0xa0>)
     62a:	e002      	b.n	632 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     62c:	6923      	ldr	r3, [r4, #16]
     62e:	2b00      	cmp	r3, #0
     630:	d00a      	beq.n	648 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     632:	1c38      	adds	r0, r7, #0
     634:	47b0      	blx	r6
     636:	2800      	cmp	r0, #0
     638:	d000      	beq.n	63c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
     63a:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
     63c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     63e:	3b01      	subs	r3, #1
     640:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     642:	6c63      	ldr	r3, [r4, #68]	; 0x44
     644:	2b00      	cmp	r3, #0
     646:	dcf1      	bgt.n	62c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     648:	2301      	movs	r3, #1
     64a:	425b      	negs	r3, r3
     64c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     64e:	4b05      	ldr	r3, [pc, #20]	; (664 <prvUnlockQueue+0xa4>)
     650:	4798      	blx	r3
}
     652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     654:	000002ad 	.word	0x000002ad
     658:	0000128d 	.word	0x0000128d
     65c:	00000549 	.word	0x00000549
     660:	000013a5 	.word	0x000013a5
     664:	000002c5 	.word	0x000002c5

00000668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     668:	b538      	push	{r3, r4, r5, lr}
     66a:	1c04      	adds	r4, r0, #0
     66c:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     66e:	2800      	cmp	r0, #0
     670:	d101      	bne.n	676 <xQueueGenericReset+0xe>
     672:	b672      	cpsid	i
     674:	e7fe      	b.n	674 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
     676:	4b15      	ldr	r3, [pc, #84]	; (6cc <xQueueGenericReset+0x64>)
     678:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     67a:	6823      	ldr	r3, [r4, #0]
     67c:	6c22      	ldr	r2, [r4, #64]	; 0x40
     67e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     680:	4350      	muls	r0, r2
     682:	1819      	adds	r1, r3, r0
     684:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     686:	2100      	movs	r1, #0
     688:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     68a:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     68c:	1a82      	subs	r2, r0, r2
     68e:	189b      	adds	r3, r3, r2
     690:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     692:	2301      	movs	r3, #1
     694:	425b      	negs	r3, r3
     696:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     698:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     69a:	2d00      	cmp	r5, #0
     69c:	d10b      	bne.n	6b6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     69e:	6921      	ldr	r1, [r4, #16]
     6a0:	2900      	cmp	r1, #0
     6a2:	d00f      	beq.n	6c4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     6a4:	1c20      	adds	r0, r4, #0
     6a6:	3010      	adds	r0, #16
     6a8:	4b09      	ldr	r3, [pc, #36]	; (6d0 <xQueueGenericReset+0x68>)
     6aa:	4798      	blx	r3
     6ac:	2801      	cmp	r0, #1
     6ae:	d109      	bne.n	6c4 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
     6b0:	4b08      	ldr	r3, [pc, #32]	; (6d4 <xQueueGenericReset+0x6c>)
     6b2:	4798      	blx	r3
     6b4:	e006      	b.n	6c4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     6b6:	1c20      	adds	r0, r4, #0
     6b8:	3010      	adds	r0, #16
     6ba:	4d07      	ldr	r5, [pc, #28]	; (6d8 <xQueueGenericReset+0x70>)
     6bc:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     6be:	1c20      	adds	r0, r4, #0
     6c0:	3024      	adds	r0, #36	; 0x24
     6c2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <xQueueGenericReset+0x74>)
     6c6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     6c8:	2001      	movs	r0, #1
     6ca:	bd38      	pop	{r3, r4, r5, pc}
     6cc:	000002ad 	.word	0x000002ad
     6d0:	0000128d 	.word	0x0000128d
     6d4:	00000295 	.word	0x00000295
     6d8:	00000445 	.word	0x00000445
     6dc:	000002c5 	.word	0x000002c5

000006e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	1c05      	adds	r5, r0, #0
     6e4:	1c0e      	adds	r6, r1, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
     6e6:	2800      	cmp	r0, #0
     6e8:	d011      	beq.n	70e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     6ea:	2050      	movs	r0, #80	; 0x50
     6ec:	4b0e      	ldr	r3, [pc, #56]	; (728 <xQueueGenericCreate+0x48>)
     6ee:	4798      	blx	r3
     6f0:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     6f2:	d00c      	beq.n	70e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     6f4:	1c30      	adds	r0, r6, #0
     6f6:	4368      	muls	r0, r5
     6f8:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     6fa:	4b0b      	ldr	r3, [pc, #44]	; (728 <xQueueGenericCreate+0x48>)
     6fc:	4798      	blx	r3
     6fe:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     700:	2800      	cmp	r0, #0
     702:	d106      	bne.n	712 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     704:	1c20      	adds	r0, r4, #0
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <xQueueGenericCreate+0x4c>)
     708:	4798      	blx	r3
     70a:	e000      	b.n	70e <xQueueGenericCreate+0x2e>
     70c:	e7fe      	b.n	70c <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
     70e:	b672      	cpsid	i
     710:	e7fc      	b.n	70c <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     712:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     714:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     716:	1c20      	adds	r0, r4, #0
     718:	2101      	movs	r1, #1
     71a:	4b05      	ldr	r3, [pc, #20]	; (730 <xQueueGenericCreate+0x50>)
     71c:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
     71e:	2300      	movs	r3, #0
     720:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
     722:	1c20      	adds	r0, r4, #0
     724:	bd70      	pop	{r4, r5, r6, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	000003d1 	.word	0x000003d1
     72c:	00000439 	.word	0x00000439
     730:	00000669 	.word	0x00000669

00000734 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     734:	b5f0      	push	{r4, r5, r6, r7, lr}
     736:	4657      	mov	r7, sl
     738:	464e      	mov	r6, r9
     73a:	4645      	mov	r5, r8
     73c:	b4e0      	push	{r5, r6, r7}
     73e:	b084      	sub	sp, #16
     740:	1c04      	adds	r4, r0, #0
     742:	1c0e      	adds	r6, r1, #0
     744:	9201      	str	r2, [sp, #4]
     746:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     748:	2800      	cmp	r0, #0
     74a:	d101      	bne.n	750 <xQueueGenericSend+0x1c>
     74c:	b672      	cpsid	i
     74e:	e7fe      	b.n	74e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     750:	2900      	cmp	r1, #0
     752:	d104      	bne.n	75e <xQueueGenericSend+0x2a>
     754:	6c02      	ldr	r2, [r0, #64]	; 0x40
     756:	2a00      	cmp	r2, #0
     758:	d001      	beq.n	75e <xQueueGenericSend+0x2a>
     75a:	b672      	cpsid	i
     75c:	e7fe      	b.n	75c <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     75e:	2d02      	cmp	r5, #2
     760:	d104      	bne.n	76c <xQueueGenericSend+0x38>
     762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     764:	2b01      	cmp	r3, #1
     766:	d001      	beq.n	76c <xQueueGenericSend+0x38>
     768:	b672      	cpsid	i
     76a:	e7fe      	b.n	76a <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     76c:	4b41      	ldr	r3, [pc, #260]	; (874 <xQueueGenericSend+0x140>)
     76e:	4798      	blx	r3
     770:	2800      	cmp	r0, #0
     772:	d102      	bne.n	77a <xQueueGenericSend+0x46>
     774:	9a01      	ldr	r2, [sp, #4]
     776:	2a00      	cmp	r2, #0
     778:	d103      	bne.n	782 <xQueueGenericSend+0x4e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     77a:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     77c:	4b3e      	ldr	r3, [pc, #248]	; (878 <xQueueGenericSend+0x144>)
     77e:	4698      	mov	r8, r3
     780:	e001      	b.n	786 <xQueueGenericSend+0x52>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     782:	b672      	cpsid	i
     784:	e7fe      	b.n	784 <xQueueGenericSend+0x50>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     786:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     78a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     78c:	4293      	cmp	r3, r2
     78e:	d301      	bcc.n	794 <xQueueGenericSend+0x60>
     790:	2d02      	cmp	r5, #2
     792:	d11f      	bne.n	7d4 <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     794:	1c20      	adds	r0, r4, #0
     796:	1c31      	adds	r1, r6, #0
     798:	1c2a      	adds	r2, r5, #0
     79a:	4b38      	ldr	r3, [pc, #224]	; (87c <xQueueGenericSend+0x148>)
     79c:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     79e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     7a0:	2b00      	cmp	r3, #0
     7a2:	d008      	beq.n	7b6 <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     7a4:	1c20      	adds	r0, r4, #0
     7a6:	1c29      	adds	r1, r5, #0
     7a8:	4b35      	ldr	r3, [pc, #212]	; (880 <xQueueGenericSend+0x14c>)
     7aa:	4798      	blx	r3
     7ac:	2801      	cmp	r0, #1
     7ae:	d10d      	bne.n	7cc <xQueueGenericSend+0x98>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
     7b0:	4b34      	ldr	r3, [pc, #208]	; (884 <xQueueGenericSend+0x150>)
     7b2:	4798      	blx	r3
     7b4:	e00a      	b.n	7cc <xQueueGenericSend+0x98>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     7b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
     7b8:	2a00      	cmp	r2, #0
     7ba:	d007      	beq.n	7cc <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     7bc:	1c20      	adds	r0, r4, #0
     7be:	3024      	adds	r0, #36	; 0x24
     7c0:	4b31      	ldr	r3, [pc, #196]	; (888 <xQueueGenericSend+0x154>)
     7c2:	4798      	blx	r3
     7c4:	2801      	cmp	r0, #1
     7c6:	d101      	bne.n	7cc <xQueueGenericSend+0x98>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
     7c8:	4b2e      	ldr	r3, [pc, #184]	; (884 <xQueueGenericSend+0x150>)
     7ca:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     7cc:	4b2f      	ldr	r3, [pc, #188]	; (88c <xQueueGenericSend+0x158>)
     7ce:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     7d0:	2001      	movs	r0, #1
     7d2:	e049      	b.n	868 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     7d4:	9b01      	ldr	r3, [sp, #4]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d103      	bne.n	7e2 <xQueueGenericSend+0xae>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     7da:	4b2c      	ldr	r3, [pc, #176]	; (88c <xQueueGenericSend+0x158>)
     7dc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     7de:	2000      	movs	r0, #0
     7e0:	e042      	b.n	868 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
     7e2:	2f00      	cmp	r7, #0
     7e4:	d103      	bne.n	7ee <xQueueGenericSend+0xba>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     7e6:	a802      	add	r0, sp, #8
     7e8:	4a29      	ldr	r2, [pc, #164]	; (890 <xQueueGenericSend+0x15c>)
     7ea:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
     7ec:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     7ee:	4b27      	ldr	r3, [pc, #156]	; (88c <xQueueGenericSend+0x158>)
     7f0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     7f2:	4b28      	ldr	r3, [pc, #160]	; (894 <xQueueGenericSend+0x160>)
     7f4:	4798      	blx	r3
		prvLockQueue( pxQueue );
     7f6:	4b20      	ldr	r3, [pc, #128]	; (878 <xQueueGenericSend+0x144>)
     7f8:	4798      	blx	r3
     7fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
     7fc:	3301      	adds	r3, #1
     7fe:	d101      	bne.n	804 <xQueueGenericSend+0xd0>
     800:	2300      	movs	r3, #0
     802:	6463      	str	r3, [r4, #68]	; 0x44
     804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     806:	3301      	adds	r3, #1
     808:	d101      	bne.n	80e <xQueueGenericSend+0xda>
     80a:	2300      	movs	r3, #0
     80c:	64a3      	str	r3, [r4, #72]	; 0x48
     80e:	4b1f      	ldr	r3, [pc, #124]	; (88c <xQueueGenericSend+0x158>)
     810:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     812:	a802      	add	r0, sp, #8
     814:	a901      	add	r1, sp, #4
     816:	4b20      	ldr	r3, [pc, #128]	; (898 <xQueueGenericSend+0x164>)
     818:	4798      	blx	r3
     81a:	2800      	cmp	r0, #0
     81c:	d11e      	bne.n	85c <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     81e:	4b16      	ldr	r3, [pc, #88]	; (878 <xQueueGenericSend+0x144>)
     820:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     822:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     824:	4692      	mov	sl, r2
     826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     828:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     82a:	4b18      	ldr	r3, [pc, #96]	; (88c <xQueueGenericSend+0x158>)
     82c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     82e:	45ca      	cmp	sl, r9
     830:	d10e      	bne.n	850 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     832:	1c20      	adds	r0, r4, #0
     834:	3010      	adds	r0, #16
     836:	9901      	ldr	r1, [sp, #4]
     838:	4b18      	ldr	r3, [pc, #96]	; (89c <xQueueGenericSend+0x168>)
     83a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     83c:	1c20      	adds	r0, r4, #0
     83e:	4b18      	ldr	r3, [pc, #96]	; (8a0 <xQueueGenericSend+0x16c>)
     840:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     842:	4b18      	ldr	r3, [pc, #96]	; (8a4 <xQueueGenericSend+0x170>)
     844:	4798      	blx	r3
     846:	2800      	cmp	r0, #0
     848:	d19d      	bne.n	786 <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
     84a:	4b0e      	ldr	r3, [pc, #56]	; (884 <xQueueGenericSend+0x150>)
     84c:	4798      	blx	r3
     84e:	e79a      	b.n	786 <xQueueGenericSend+0x52>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     850:	1c20      	adds	r0, r4, #0
     852:	4b13      	ldr	r3, [pc, #76]	; (8a0 <xQueueGenericSend+0x16c>)
     854:	4798      	blx	r3
				( void ) xTaskResumeAll();
     856:	4b13      	ldr	r3, [pc, #76]	; (8a4 <xQueueGenericSend+0x170>)
     858:	4798      	blx	r3
     85a:	e794      	b.n	786 <xQueueGenericSend+0x52>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     85c:	1c20      	adds	r0, r4, #0
     85e:	4b10      	ldr	r3, [pc, #64]	; (8a0 <xQueueGenericSend+0x16c>)
     860:	4798      	blx	r3
			( void ) xTaskResumeAll();
     862:	4b10      	ldr	r3, [pc, #64]	; (8a4 <xQueueGenericSend+0x170>)
     864:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     866:	2000      	movs	r0, #0
		}
	}
}
     868:	b004      	add	sp, #16
     86a:	bc1c      	pop	{r2, r3, r4}
     86c:	4690      	mov	r8, r2
     86e:	4699      	mov	r9, r3
     870:	46a2      	mov	sl, r4
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
     874:	000013bd 	.word	0x000013bd
     878:	000002ad 	.word	0x000002ad
     87c:	000004d1 	.word	0x000004d1
     880:	00000549 	.word	0x00000549
     884:	00000295 	.word	0x00000295
     888:	0000128d 	.word	0x0000128d
     88c:	000002c5 	.word	0x000002c5
     890:	00001315 	.word	0x00001315
     894:	00000e29 	.word	0x00000e29
     898:	00001335 	.word	0x00001335
     89c:	000011f5 	.word	0x000011f5
     8a0:	000005c1 	.word	0x000005c1
     8a4:	00000f85 	.word	0x00000f85

000008a8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8aa:	4647      	mov	r7, r8
     8ac:	b480      	push	{r7}
     8ae:	1c04      	adds	r4, r0, #0
     8b0:	4688      	mov	r8, r1
     8b2:	1c16      	adds	r6, r2, #0
     8b4:	1c1d      	adds	r5, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     8b6:	2800      	cmp	r0, #0
     8b8:	d101      	bne.n	8be <xQueueGenericSendFromISR+0x16>
     8ba:	b672      	cpsid	i
     8bc:	e7fe      	b.n	8bc <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8be:	2900      	cmp	r1, #0
     8c0:	d104      	bne.n	8cc <xQueueGenericSendFromISR+0x24>
     8c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     8c4:	2b00      	cmp	r3, #0
     8c6:	d001      	beq.n	8cc <xQueueGenericSendFromISR+0x24>
     8c8:	b672      	cpsid	i
     8ca:	e7fe      	b.n	8ca <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     8cc:	2d02      	cmp	r5, #2
     8ce:	d133      	bne.n	938 <xQueueGenericSendFromISR+0x90>
     8d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     8d2:	2a01      	cmp	r2, #1
     8d4:	d039      	beq.n	94a <xQueueGenericSendFromISR+0xa2>
     8d6:	b672      	cpsid	i
     8d8:	e7fe      	b.n	8d8 <xQueueGenericSendFromISR+0x30>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     8da:	1c20      	adds	r0, r4, #0
     8dc:	4641      	mov	r1, r8
     8de:	1c2a      	adds	r2, r5, #0
     8e0:	4b20      	ldr	r3, [pc, #128]	; (964 <xQueueGenericSendFromISR+0xbc>)
     8e2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     8e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     8e6:	3301      	adds	r3, #1
     8e8:	d11d      	bne.n	926 <xQueueGenericSendFromISR+0x7e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     8ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     8ec:	2b00      	cmp	r3, #0
     8ee:	d00b      	beq.n	908 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     8f0:	1c20      	adds	r0, r4, #0
     8f2:	1c29      	adds	r1, r5, #0
     8f4:	4b1c      	ldr	r3, [pc, #112]	; (968 <xQueueGenericSendFromISR+0xc0>)
     8f6:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     8f8:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     8fa:	2801      	cmp	r0, #1
     8fc:	d12a      	bne.n	954 <xQueueGenericSendFromISR+0xac>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     8fe:	2e00      	cmp	r6, #0
     900:	d016      	beq.n	930 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     902:	2301      	movs	r3, #1
     904:	6033      	str	r3, [r6, #0]
     906:	e025      	b.n	954 <xQueueGenericSendFromISR+0xac>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     908:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     90a:	6a62      	ldr	r2, [r4, #36]	; 0x24
     90c:	2a00      	cmp	r2, #0
     90e:	d021      	beq.n	954 <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     910:	1c20      	adds	r0, r4, #0
     912:	3024      	adds	r0, #36	; 0x24
     914:	4b15      	ldr	r3, [pc, #84]	; (96c <xQueueGenericSendFromISR+0xc4>)
     916:	4798      	blx	r3
     918:	2800      	cmp	r0, #0
     91a:	d01b      	beq.n	954 <xQueueGenericSendFromISR+0xac>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
     91c:	2e00      	cmp	r6, #0
     91e:	d009      	beq.n	934 <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
     920:	2301      	movs	r3, #1
     922:	6033      	str	r3, [r6, #0]
     924:	e016      	b.n	954 <xQueueGenericSendFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     926:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     928:	3301      	adds	r3, #1
     92a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     92c:	2501      	movs	r5, #1
     92e:	e011      	b.n	954 <xQueueGenericSendFromISR+0xac>
     930:	2501      	movs	r5, #1
     932:	e00f      	b.n	954 <xQueueGenericSendFromISR+0xac>
     934:	2501      	movs	r5, #1
     936:	e00d      	b.n	954 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     938:	4b0d      	ldr	r3, [pc, #52]	; (970 <xQueueGenericSendFromISR+0xc8>)
     93a:	4798      	blx	r3
     93c:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     93e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     940:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     942:	4293      	cmp	r3, r2
     944:	d3c9      	bcc.n	8da <xQueueGenericSendFromISR+0x32>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     946:	2500      	movs	r5, #0
     948:	e004      	b.n	954 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     94a:	4b09      	ldr	r3, [pc, #36]	; (970 <xQueueGenericSendFromISR+0xc8>)
     94c:	4798      	blx	r3
     94e:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     952:	e7c2      	b.n	8da <xQueueGenericSendFromISR+0x32>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     954:	1c38      	adds	r0, r7, #0
     956:	4b07      	ldr	r3, [pc, #28]	; (974 <xQueueGenericSendFromISR+0xcc>)
     958:	4798      	blx	r3

	return xReturn;
}
     95a:	1c28      	adds	r0, r5, #0
     95c:	bc04      	pop	{r2}
     95e:	4690      	mov	r8, r2
     960:	bdf0      	pop	{r4, r5, r6, r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	000004d1 	.word	0x000004d1
     968:	00000549 	.word	0x00000549
     96c:	0000128d 	.word	0x0000128d
     970:	000002e5 	.word	0x000002e5
     974:	000002f1 	.word	0x000002f1

00000978 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     978:	b5f0      	push	{r4, r5, r6, r7, lr}
     97a:	464f      	mov	r7, r9
     97c:	4646      	mov	r6, r8
     97e:	b4c0      	push	{r6, r7}
     980:	b085      	sub	sp, #20
     982:	1c04      	adds	r4, r0, #0
     984:	1c0d      	adds	r5, r1, #0
     986:	9201      	str	r2, [sp, #4]
     988:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     98a:	2800      	cmp	r0, #0
     98c:	d101      	bne.n	992 <xQueueGenericReceive+0x1a>
     98e:	b672      	cpsid	i
     990:	e7fe      	b.n	990 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     992:	2900      	cmp	r1, #0
     994:	d104      	bne.n	9a0 <xQueueGenericReceive+0x28>
     996:	6c03      	ldr	r3, [r0, #64]	; 0x40
     998:	2b00      	cmp	r3, #0
     99a:	d001      	beq.n	9a0 <xQueueGenericReceive+0x28>
     99c:	b672      	cpsid	i
     99e:	e7fe      	b.n	99e <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     9a0:	4b4a      	ldr	r3, [pc, #296]	; (acc <xQueueGenericReceive+0x154>)
     9a2:	4798      	blx	r3
     9a4:	2800      	cmp	r0, #0
     9a6:	d102      	bne.n	9ae <xQueueGenericReceive+0x36>
     9a8:	9b01      	ldr	r3, [sp, #4]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d103      	bne.n	9b6 <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     9ae:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     9b0:	4b47      	ldr	r3, [pc, #284]	; (ad0 <xQueueGenericReceive+0x158>)
     9b2:	4698      	mov	r8, r3
     9b4:	e001      	b.n	9ba <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     9b6:	b672      	cpsid	i
     9b8:	e7fe      	b.n	9b8 <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     9ba:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     9bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     9be:	2b00      	cmp	r3, #0
     9c0:	d02b      	beq.n	a1a <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     9c2:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     9c4:	1c20      	adds	r0, r4, #0
     9c6:	1c29      	adds	r1, r5, #0
     9c8:	4b42      	ldr	r3, [pc, #264]	; (ad4 <xQueueGenericReceive+0x15c>)
     9ca:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
     9cc:	2f00      	cmp	r7, #0
     9ce:	d114      	bne.n	9fa <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
     9d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     9d2:	3b01      	subs	r3, #1
     9d4:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     9d6:	6823      	ldr	r3, [r4, #0]
     9d8:	2b00      	cmp	r3, #0
     9da:	d102      	bne.n	9e2 <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     9dc:	4b3e      	ldr	r3, [pc, #248]	; (ad8 <xQueueGenericReceive+0x160>)
     9de:	4798      	blx	r3
     9e0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     9e2:	6923      	ldr	r3, [r4, #16]
     9e4:	2b00      	cmp	r3, #0
     9e6:	d014      	beq.n	a12 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     9e8:	1c20      	adds	r0, r4, #0
     9ea:	3010      	adds	r0, #16
     9ec:	4b3b      	ldr	r3, [pc, #236]	; (adc <xQueueGenericReceive+0x164>)
     9ee:	4798      	blx	r3
     9f0:	2801      	cmp	r0, #1
     9f2:	d10e      	bne.n	a12 <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
     9f4:	4b3a      	ldr	r3, [pc, #232]	; (ae0 <xQueueGenericReceive+0x168>)
     9f6:	4798      	blx	r3
     9f8:	e00b      	b.n	a12 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     9fa:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     9fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
     9fe:	2b00      	cmp	r3, #0
     a00:	d007      	beq.n	a12 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a02:	1c20      	adds	r0, r4, #0
     a04:	3024      	adds	r0, #36	; 0x24
     a06:	4b35      	ldr	r3, [pc, #212]	; (adc <xQueueGenericReceive+0x164>)
     a08:	4798      	blx	r3
     a0a:	2800      	cmp	r0, #0
     a0c:	d001      	beq.n	a12 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
     a0e:	4b34      	ldr	r3, [pc, #208]	; (ae0 <xQueueGenericReceive+0x168>)
     a10:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
     a12:	4b34      	ldr	r3, [pc, #208]	; (ae4 <xQueueGenericReceive+0x16c>)
     a14:	4798      	blx	r3
				return pdPASS;
     a16:	2001      	movs	r0, #1
     a18:	e052      	b.n	ac0 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     a1a:	9b01      	ldr	r3, [sp, #4]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d103      	bne.n	a28 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     a20:	4b30      	ldr	r3, [pc, #192]	; (ae4 <xQueueGenericReceive+0x16c>)
     a22:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     a24:	2000      	movs	r0, #0
     a26:	e04b      	b.n	ac0 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
     a28:	2e00      	cmp	r6, #0
     a2a:	d103      	bne.n	a34 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     a2c:	a802      	add	r0, sp, #8
     a2e:	4b2e      	ldr	r3, [pc, #184]	; (ae8 <xQueueGenericReceive+0x170>)
     a30:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     a32:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     a34:	4b2b      	ldr	r3, [pc, #172]	; (ae4 <xQueueGenericReceive+0x16c>)
     a36:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     a38:	4b2c      	ldr	r3, [pc, #176]	; (aec <xQueueGenericReceive+0x174>)
     a3a:	4798      	blx	r3
		prvLockQueue( pxQueue );
     a3c:	4b24      	ldr	r3, [pc, #144]	; (ad0 <xQueueGenericReceive+0x158>)
     a3e:	4798      	blx	r3
     a40:	6c63      	ldr	r3, [r4, #68]	; 0x44
     a42:	3301      	adds	r3, #1
     a44:	d101      	bne.n	a4a <xQueueGenericReceive+0xd2>
     a46:	2300      	movs	r3, #0
     a48:	6463      	str	r3, [r4, #68]	; 0x44
     a4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     a4c:	3301      	adds	r3, #1
     a4e:	d101      	bne.n	a54 <xQueueGenericReceive+0xdc>
     a50:	2300      	movs	r3, #0
     a52:	64a3      	str	r3, [r4, #72]	; 0x48
     a54:	4b23      	ldr	r3, [pc, #140]	; (ae4 <xQueueGenericReceive+0x16c>)
     a56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     a58:	a802      	add	r0, sp, #8
     a5a:	a901      	add	r1, sp, #4
     a5c:	4b24      	ldr	r3, [pc, #144]	; (af0 <xQueueGenericReceive+0x178>)
     a5e:	4798      	blx	r3
     a60:	2800      	cmp	r0, #0
     a62:	d127      	bne.n	ab4 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     a64:	4b1a      	ldr	r3, [pc, #104]	; (ad0 <xQueueGenericReceive+0x158>)
     a66:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     a68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a6a:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     a6c:	4b1d      	ldr	r3, [pc, #116]	; (ae4 <xQueueGenericReceive+0x16c>)
     a6e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     a70:	464b      	mov	r3, r9
     a72:	2b00      	cmp	r3, #0
     a74:	d118      	bne.n	aa8 <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     a76:	6823      	ldr	r3, [r4, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d106      	bne.n	a8a <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
     a7c:	4b14      	ldr	r3, [pc, #80]	; (ad0 <xQueueGenericReceive+0x158>)
     a7e:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     a80:	6860      	ldr	r0, [r4, #4]
     a82:	4b1c      	ldr	r3, [pc, #112]	; (af4 <xQueueGenericReceive+0x17c>)
     a84:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
     a86:	4b17      	ldr	r3, [pc, #92]	; (ae4 <xQueueGenericReceive+0x16c>)
     a88:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     a8a:	1c20      	adds	r0, r4, #0
     a8c:	3024      	adds	r0, #36	; 0x24
     a8e:	9901      	ldr	r1, [sp, #4]
     a90:	4b19      	ldr	r3, [pc, #100]	; (af8 <xQueueGenericReceive+0x180>)
     a92:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     a94:	1c20      	adds	r0, r4, #0
     a96:	4b19      	ldr	r3, [pc, #100]	; (afc <xQueueGenericReceive+0x184>)
     a98:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     a9a:	4b19      	ldr	r3, [pc, #100]	; (b00 <xQueueGenericReceive+0x188>)
     a9c:	4798      	blx	r3
     a9e:	2800      	cmp	r0, #0
     aa0:	d18b      	bne.n	9ba <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
     aa2:	4b0f      	ldr	r3, [pc, #60]	; (ae0 <xQueueGenericReceive+0x168>)
     aa4:	4798      	blx	r3
     aa6:	e788      	b.n	9ba <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     aa8:	1c20      	adds	r0, r4, #0
     aaa:	4b14      	ldr	r3, [pc, #80]	; (afc <xQueueGenericReceive+0x184>)
     aac:	4798      	blx	r3
				( void ) xTaskResumeAll();
     aae:	4b14      	ldr	r3, [pc, #80]	; (b00 <xQueueGenericReceive+0x188>)
     ab0:	4798      	blx	r3
     ab2:	e782      	b.n	9ba <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     ab4:	1c20      	adds	r0, r4, #0
     ab6:	4b11      	ldr	r3, [pc, #68]	; (afc <xQueueGenericReceive+0x184>)
     ab8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     aba:	4b11      	ldr	r3, [pc, #68]	; (b00 <xQueueGenericReceive+0x188>)
     abc:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     abe:	2000      	movs	r0, #0
		}
	}
}
     ac0:	b005      	add	sp, #20
     ac2:	bc0c      	pop	{r2, r3}
     ac4:	4690      	mov	r8, r2
     ac6:	4699      	mov	r9, r3
     ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	000013bd 	.word	0x000013bd
     ad0:	000002ad 	.word	0x000002ad
     ad4:	00000599 	.word	0x00000599
     ad8:	000013b1 	.word	0x000013b1
     adc:	0000128d 	.word	0x0000128d
     ae0:	00000295 	.word	0x00000295
     ae4:	000002c5 	.word	0x000002c5
     ae8:	00001315 	.word	0x00001315
     aec:	00000e29 	.word	0x00000e29
     af0:	00001335 	.word	0x00001335
     af4:	000013dd 	.word	0x000013dd
     af8:	000011f5 	.word	0x000011f5
     afc:	000005c1 	.word	0x000005c1
     b00:	00000f85 	.word	0x00000f85

00000b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
     b04:	b538      	push	{r3, r4, r5, lr}
     b06:	1c04      	adds	r4, r0, #0
     b08:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
     b0a:	4b0d      	ldr	r3, [pc, #52]	; (b40 <vQueueWaitForMessageRestricted+0x3c>)
     b0c:	4798      	blx	r3
     b0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b10:	3301      	adds	r3, #1
     b12:	d101      	bne.n	b18 <vQueueWaitForMessageRestricted+0x14>
     b14:	2300      	movs	r3, #0
     b16:	6463      	str	r3, [r4, #68]	; 0x44
     b18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b1a:	3301      	adds	r3, #1
     b1c:	d101      	bne.n	b22 <vQueueWaitForMessageRestricted+0x1e>
     b1e:	2300      	movs	r3, #0
     b20:	64a3      	str	r3, [r4, #72]	; 0x48
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <vQueueWaitForMessageRestricted+0x40>)
     b24:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     b28:	2b00      	cmp	r3, #0
     b2a:	d104      	bne.n	b36 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     b2c:	1c20      	adds	r0, r4, #0
     b2e:	3024      	adds	r0, #36	; 0x24
     b30:	1c29      	adds	r1, r5, #0
     b32:	4b05      	ldr	r3, [pc, #20]	; (b48 <vQueueWaitForMessageRestricted+0x44>)
     b34:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
     b36:	1c20      	adds	r0, r4, #0
     b38:	4b04      	ldr	r3, [pc, #16]	; (b4c <vQueueWaitForMessageRestricted+0x48>)
     b3a:	4798      	blx	r3
	}
     b3c:	bd38      	pop	{r3, r4, r5, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	000002ad 	.word	0x000002ad
     b44:	000002c5 	.word	0x000002c5
     b48:	0000124d 	.word	0x0000124d
     b4c:	000005c1 	.word	0x000005c1

00000b50 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     b50:	4b08      	ldr	r3, [pc, #32]	; (b74 <prvResetNextTaskUnblockTime+0x24>)
     b52:	681b      	ldr	r3, [r3, #0]
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	2b00      	cmp	r3, #0
     b58:	d104      	bne.n	b64 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     b5a:	2201      	movs	r2, #1
     b5c:	4252      	negs	r2, r2
     b5e:	4b06      	ldr	r3, [pc, #24]	; (b78 <prvResetNextTaskUnblockTime+0x28>)
     b60:	601a      	str	r2, [r3, #0]
     b62:	e006      	b.n	b72 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     b64:	4b03      	ldr	r3, [pc, #12]	; (b74 <prvResetNextTaskUnblockTime+0x24>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
     b6a:	68db      	ldr	r3, [r3, #12]
     b6c:	685a      	ldr	r2, [r3, #4]
     b6e:	4b02      	ldr	r3, [pc, #8]	; (b78 <prvResetNextTaskUnblockTime+0x28>)
     b70:	601a      	str	r2, [r3, #0]
	}
}
     b72:	4770      	bx	lr
     b74:	20003aec 	.word	0x20003aec
     b78:	20000008 	.word	0x20000008

00000b7c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
     b7c:	b510      	push	{r4, lr}
     b7e:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     b80:	4b0e      	ldr	r3, [pc, #56]	; (bbc <prvAddCurrentTaskToDelayedList+0x40>)
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
     b86:	4b0e      	ldr	r3, [pc, #56]	; (bc0 <prvAddCurrentTaskToDelayedList+0x44>)
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	4298      	cmp	r0, r3
     b8c:	d207      	bcs.n	b9e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     b8e:	4b0d      	ldr	r3, [pc, #52]	; (bc4 <prvAddCurrentTaskToDelayedList+0x48>)
     b90:	6818      	ldr	r0, [r3, #0]
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <prvAddCurrentTaskToDelayedList+0x40>)
     b94:	6819      	ldr	r1, [r3, #0]
     b96:	3104      	adds	r1, #4
     b98:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <prvAddCurrentTaskToDelayedList+0x4c>)
     b9a:	4798      	blx	r3
     b9c:	e00c      	b.n	bb8 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     b9e:	4b0b      	ldr	r3, [pc, #44]	; (bcc <prvAddCurrentTaskToDelayedList+0x50>)
     ba0:	6818      	ldr	r0, [r3, #0]
     ba2:	4b06      	ldr	r3, [pc, #24]	; (bbc <prvAddCurrentTaskToDelayedList+0x40>)
     ba4:	6819      	ldr	r1, [r3, #0]
     ba6:	3104      	adds	r1, #4
     ba8:	4b07      	ldr	r3, [pc, #28]	; (bc8 <prvAddCurrentTaskToDelayedList+0x4c>)
     baa:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     bac:	4b08      	ldr	r3, [pc, #32]	; (bd0 <prvAddCurrentTaskToDelayedList+0x54>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	429c      	cmp	r4, r3
     bb2:	d201      	bcs.n	bb8 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
     bb4:	4b06      	ldr	r3, [pc, #24]	; (bd0 <prvAddCurrentTaskToDelayedList+0x54>)
     bb6:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     bb8:	bd10      	pop	{r4, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	20003b9c 	.word	0x20003b9c
     bc0:	20003bb8 	.word	0x20003bb8
     bc4:	20003bbc 	.word	0x20003bbc
     bc8:	0000047d 	.word	0x0000047d
     bcc:	20003aec 	.word	0x20003aec
     bd0:	20000008 	.word	0x20000008

00000bd4 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
     bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd6:	465f      	mov	r7, fp
     bd8:	4656      	mov	r6, sl
     bda:	464d      	mov	r5, r9
     bdc:	4644      	mov	r4, r8
     bde:	b4f0      	push	{r4, r5, r6, r7}
     be0:	1c07      	adds	r7, r0, #0
     be2:	1c0e      	adds	r6, r1, #0
     be4:	4691      	mov	r9, r2
     be6:	469a      	mov	sl, r3
     be8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
     bea:	2800      	cmp	r0, #0
     bec:	d101      	bne.n	bf2 <xTaskGenericCreate+0x1e>
     bee:	b672      	cpsid	i
     bf0:	e7fe      	b.n	bf0 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     bf2:	2d04      	cmp	r5, #4
     bf4:	d901      	bls.n	bfa <xTaskGenericCreate+0x26>
     bf6:	b672      	cpsid	i
     bf8:	e7fe      	b.n	bf8 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
     bfa:	2040      	movs	r0, #64	; 0x40
     bfc:	4b5b      	ldr	r3, [pc, #364]	; (d6c <xTaskGenericCreate+0x198>)
     bfe:	4798      	blx	r3
     c00:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
     c02:	d100      	bne.n	c06 <xTaskGenericCreate+0x32>
     c04:	e0aa      	b.n	d5c <xTaskGenericCreate+0x188>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     c08:	2a00      	cmp	r2, #0
     c0a:	d000      	beq.n	c0e <xTaskGenericCreate+0x3a>
     c0c:	e092      	b.n	d34 <xTaskGenericCreate+0x160>
     c0e:	464b      	mov	r3, r9
     c10:	0098      	lsls	r0, r3, #2
     c12:	4b56      	ldr	r3, [pc, #344]	; (d6c <xTaskGenericCreate+0x198>)
     c14:	4798      	blx	r3
     c16:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     c18:	2800      	cmp	r0, #0
     c1a:	d000      	beq.n	c1e <xTaskGenericCreate+0x4a>
     c1c:	e08c      	b.n	d38 <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     c1e:	1c20      	adds	r0, r4, #0
     c20:	4b53      	ldr	r3, [pc, #332]	; (d70 <xTaskGenericCreate+0x19c>)
     c22:	4798      	blx	r3
     c24:	e09a      	b.n	d5c <xTaskGenericCreate+0x188>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     c26:	5cf1      	ldrb	r1, [r6, r3]
     c28:	18e2      	adds	r2, r4, r3
     c2a:	3234      	adds	r2, #52	; 0x34
     c2c:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
     c2e:	5cf2      	ldrb	r2, [r6, r3]
     c30:	2a00      	cmp	r2, #0
     c32:	d002      	beq.n	c3a <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     c34:	3301      	adds	r3, #1
     c36:	2b08      	cmp	r3, #8
     c38:	d1f5      	bne.n	c26 <xTaskGenericCreate+0x52>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     c3a:	2200      	movs	r2, #0
     c3c:	233b      	movs	r3, #59	; 0x3b
     c3e:	54e2      	strb	r2, [r4, r3]
     c40:	1e2e      	subs	r6, r5, #0
     c42:	2e04      	cmp	r6, #4
     c44:	d900      	bls.n	c48 <xTaskGenericCreate+0x74>
     c46:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
     c48:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     c4a:	63e6      	str	r6, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     c4c:	1d22      	adds	r2, r4, #4
     c4e:	4690      	mov	r8, r2
     c50:	1c10      	adds	r0, r2, #0
     c52:	4b48      	ldr	r3, [pc, #288]	; (d74 <xTaskGenericCreate+0x1a0>)
     c54:	4699      	mov	r9, r3
     c56:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     c58:	1c20      	adds	r0, r4, #0
     c5a:	3018      	adds	r0, #24
     c5c:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     c5e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     c60:	2305      	movs	r3, #5
     c62:	1b9e      	subs	r6, r3, r6
     c64:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     c66:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     c68:	4658      	mov	r0, fp
     c6a:	1c39      	adds	r1, r7, #0
     c6c:	4652      	mov	r2, sl
     c6e:	4b42      	ldr	r3, [pc, #264]	; (d78 <xTaskGenericCreate+0x1a4>)
     c70:	4798      	blx	r3
     c72:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
     c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     c76:	2a00      	cmp	r2, #0
     c78:	d000      	beq.n	c7c <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     c7a:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
     c7c:	4b3f      	ldr	r3, [pc, #252]	; (d7c <xTaskGenericCreate+0x1a8>)
     c7e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
     c80:	4b3f      	ldr	r3, [pc, #252]	; (d80 <xTaskGenericCreate+0x1ac>)
     c82:	681a      	ldr	r2, [r3, #0]
     c84:	3201      	adds	r2, #1
     c86:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
     c88:	4b3e      	ldr	r3, [pc, #248]	; (d84 <xTaskGenericCreate+0x1b0>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d123      	bne.n	cd8 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     c90:	4b3c      	ldr	r3, [pc, #240]	; (d84 <xTaskGenericCreate+0x1b0>)
     c92:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     c94:	4b3a      	ldr	r3, [pc, #232]	; (d80 <xTaskGenericCreate+0x1ac>)
     c96:	681b      	ldr	r3, [r3, #0]
     c98:	2b01      	cmp	r3, #1
     c9a:	d128      	bne.n	cee <xTaskGenericCreate+0x11a>
     c9c:	4e3a      	ldr	r6, [pc, #232]	; (d88 <xTaskGenericCreate+0x1b4>)
     c9e:	2364      	movs	r3, #100	; 0x64
     ca0:	199b      	adds	r3, r3, r6
     ca2:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     ca4:	4f39      	ldr	r7, [pc, #228]	; (d8c <xTaskGenericCreate+0x1b8>)
     ca6:	1c30      	adds	r0, r6, #0
     ca8:	47b8      	blx	r7
     caa:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     cac:	454e      	cmp	r6, r9
     cae:	d1fa      	bne.n	ca6 <xTaskGenericCreate+0xd2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
     cb0:	4a37      	ldr	r2, [pc, #220]	; (d90 <xTaskGenericCreate+0x1bc>)
     cb2:	4691      	mov	r9, r2
     cb4:	1c10      	adds	r0, r2, #0
     cb6:	4e35      	ldr	r6, [pc, #212]	; (d8c <xTaskGenericCreate+0x1b8>)
     cb8:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
     cba:	4f36      	ldr	r7, [pc, #216]	; (d94 <xTaskGenericCreate+0x1c0>)
     cbc:	1c38      	adds	r0, r7, #0
     cbe:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
     cc0:	4835      	ldr	r0, [pc, #212]	; (d98 <xTaskGenericCreate+0x1c4>)
     cc2:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
     cc4:	4835      	ldr	r0, [pc, #212]	; (d9c <xTaskGenericCreate+0x1c8>)
     cc6:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
     cc8:	4835      	ldr	r0, [pc, #212]	; (da0 <xTaskGenericCreate+0x1cc>)
     cca:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     ccc:	4b35      	ldr	r3, [pc, #212]	; (da4 <xTaskGenericCreate+0x1d0>)
     cce:	464a      	mov	r2, r9
     cd0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     cd2:	4b35      	ldr	r3, [pc, #212]	; (da8 <xTaskGenericCreate+0x1d4>)
     cd4:	601f      	str	r7, [r3, #0]
     cd6:	e00a      	b.n	cee <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     cd8:	4b34      	ldr	r3, [pc, #208]	; (dac <xTaskGenericCreate+0x1d8>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	2b00      	cmp	r3, #0
     cde:	d106      	bne.n	cee <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     ce0:	4b28      	ldr	r3, [pc, #160]	; (d84 <xTaskGenericCreate+0x1b0>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ce6:	429d      	cmp	r5, r3
     ce8:	d301      	bcc.n	cee <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
     cea:	4b26      	ldr	r3, [pc, #152]	; (d84 <xTaskGenericCreate+0x1b0>)
     cec:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
     cee:	4b30      	ldr	r3, [pc, #192]	; (db0 <xTaskGenericCreate+0x1dc>)
     cf0:	681a      	ldr	r2, [r3, #0]
     cf2:	3201      	adds	r2, #1
     cf4:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
     cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cf8:	4a2e      	ldr	r2, [pc, #184]	; (db4 <xTaskGenericCreate+0x1e0>)
     cfa:	6812      	ldr	r2, [r2, #0]
     cfc:	4293      	cmp	r3, r2
     cfe:	d901      	bls.n	d04 <xTaskGenericCreate+0x130>
     d00:	4a2c      	ldr	r2, [pc, #176]	; (db4 <xTaskGenericCreate+0x1e0>)
     d02:	6013      	str	r3, [r2, #0]
     d04:	009a      	lsls	r2, r3, #2
     d06:	18d3      	adds	r3, r2, r3
     d08:	009b      	lsls	r3, r3, #2
     d0a:	481f      	ldr	r0, [pc, #124]	; (d88 <xTaskGenericCreate+0x1b4>)
     d0c:	18c0      	adds	r0, r0, r3
     d0e:	4641      	mov	r1, r8
     d10:	4b29      	ldr	r3, [pc, #164]	; (db8 <xTaskGenericCreate+0x1e4>)
     d12:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     d14:	4b29      	ldr	r3, [pc, #164]	; (dbc <xTaskGenericCreate+0x1e8>)
     d16:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     d18:	4b24      	ldr	r3, [pc, #144]	; (dac <xTaskGenericCreate+0x1d8>)
     d1a:	681b      	ldr	r3, [r3, #0]
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
     d1c:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     d1e:	2b00      	cmp	r3, #0
     d20:	d01e      	beq.n	d60 <xTaskGenericCreate+0x18c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     d22:	4b18      	ldr	r3, [pc, #96]	; (d84 <xTaskGenericCreate+0x1b0>)
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     d28:	429d      	cmp	r5, r3
     d2a:	d919      	bls.n	d60 <xTaskGenericCreate+0x18c>
			{
				taskYIELD_IF_USING_PREEMPTION();
     d2c:	4b24      	ldr	r3, [pc, #144]	; (dc0 <xTaskGenericCreate+0x1ec>)
     d2e:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
     d30:	2001      	movs	r0, #1
     d32:	e015      	b.n	d60 <xTaskGenericCreate+0x18c>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     d36:	6303      	str	r3, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
     d38:	4a22      	ldr	r2, [pc, #136]	; (dc4 <xTaskGenericCreate+0x1f0>)
     d3a:	1c13      	adds	r3, r2, #0
     d3c:	444b      	add	r3, r9
     d3e:	009b      	lsls	r3, r3, #2
     d40:	6b22      	ldr	r2, [r4, #48]	; 0x30
     d42:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     d44:	2207      	movs	r2, #7
     d46:	4393      	bics	r3, r2
     d48:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     d4a:	7832      	ldrb	r2, [r6, #0]
     d4c:	2334      	movs	r3, #52	; 0x34
     d4e:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
     d50:	7833      	ldrb	r3, [r6, #0]
     d52:	2b00      	cmp	r3, #0
     d54:	d100      	bne.n	d58 <xTaskGenericCreate+0x184>
     d56:	e770      	b.n	c3a <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     d58:	2301      	movs	r3, #1
     d5a:	e764      	b.n	c26 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     d5c:	2001      	movs	r0, #1
     d5e:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
     d60:	bc3c      	pop	{r2, r3, r4, r5}
     d62:	4690      	mov	r8, r2
     d64:	4699      	mov	r9, r3
     d66:	46a2      	mov	sl, r4
     d68:	46ab      	mov	fp, r5
     d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6c:	000003d1 	.word	0x000003d1
     d70:	00000439 	.word	0x00000439
     d74:	0000045d 	.word	0x0000045d
     d78:	00000271 	.word	0x00000271
     d7c:	000002ad 	.word	0x000002ad
     d80:	20003bc4 	.word	0x20003bc4
     d84:	20003b9c 	.word	0x20003b9c
     d88:	20003b24 	.word	0x20003b24
     d8c:	00000445 	.word	0x00000445
     d90:	20003af8 	.word	0x20003af8
     d94:	20003b0c 	.word	0x20003b0c
     d98:	20003ba0 	.word	0x20003ba0
     d9c:	20003b88 	.word	0x20003b88
     da0:	20003bc8 	.word	0x20003bc8
     da4:	20003aec 	.word	0x20003aec
     da8:	20003bbc 	.word	0x20003bbc
     dac:	20003af0 	.word	0x20003af0
     db0:	20003bc0 	.word	0x20003bc0
     db4:	20003bdc 	.word	0x20003bdc
     db8:	00000465 	.word	0x00000465
     dbc:	000002c5 	.word	0x000002c5
     dc0:	00000295 	.word	0x00000295
     dc4:	3fffffff 	.word	0x3fffffff

00000dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     dc8:	b510      	push	{r4, lr}
     dca:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
     dcc:	2300      	movs	r3, #0
     dce:	9300      	str	r3, [sp, #0]
     dd0:	9301      	str	r3, [sp, #4]
     dd2:	9302      	str	r3, [sp, #8]
     dd4:	9303      	str	r3, [sp, #12]
     dd6:	480d      	ldr	r0, [pc, #52]	; (e0c <vTaskStartScheduler+0x44>)
     dd8:	490d      	ldr	r1, [pc, #52]	; (e10 <vTaskStartScheduler+0x48>)
     dda:	2264      	movs	r2, #100	; 0x64
     ddc:	4c0d      	ldr	r4, [pc, #52]	; (e14 <vTaskStartScheduler+0x4c>)
     dde:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
     de0:	2801      	cmp	r0, #1
     de2:	d10d      	bne.n	e00 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <vTaskStartScheduler+0x50>)
     de6:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     de8:	2801      	cmp	r0, #1
     dea:	d109      	bne.n	e00 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
     dec:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
     dee:	2201      	movs	r2, #1
     df0:	4b0a      	ldr	r3, [pc, #40]	; (e1c <vTaskStartScheduler+0x54>)
     df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
     df4:	2200      	movs	r2, #0
     df6:	4b0a      	ldr	r3, [pc, #40]	; (e20 <vTaskStartScheduler+0x58>)
     df8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <vTaskStartScheduler+0x5c>)
     dfc:	4798      	blx	r3
     dfe:	e003      	b.n	e08 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     e00:	2800      	cmp	r0, #0
     e02:	d101      	bne.n	e08 <vTaskStartScheduler+0x40>
     e04:	b672      	cpsid	i
     e06:	e7fe      	b.n	e06 <vTaskStartScheduler+0x3e>
	}
}
     e08:	b004      	add	sp, #16
     e0a:	bd10      	pop	{r4, pc}
     e0c:	000010d9 	.word	0x000010d9
     e10:	00001de0 	.word	0x00001de0
     e14:	00000bd5 	.word	0x00000bd5
     e18:	00001561 	.word	0x00001561
     e1c:	20003af0 	.word	0x20003af0
     e20:	20003bb8 	.word	0x20003bb8
     e24:	00000391 	.word	0x00000391

00000e28 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     e28:	4b02      	ldr	r3, [pc, #8]	; (e34 <vTaskSuspendAll+0xc>)
     e2a:	681a      	ldr	r2, [r3, #0]
     e2c:	3201      	adds	r2, #1
     e2e:	601a      	str	r2, [r3, #0]
}
     e30:	4770      	bx	lr
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	20003bb4 	.word	0x20003bb4

00000e38 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
     e38:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     e3a:	4b04      	ldr	r3, [pc, #16]	; (e4c <xTaskGetTickCount+0x14>)
     e3c:	4798      	blx	r3
	{
		xTicks = xTickCount;
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <xTaskGetTickCount+0x18>)
     e40:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
     e42:	4b04      	ldr	r3, [pc, #16]	; (e54 <xTaskGetTickCount+0x1c>)
     e44:	4798      	blx	r3

	return xTicks;
}
     e46:	1c20      	adds	r0, r4, #0
     e48:	bd10      	pop	{r4, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	000002ad 	.word	0x000002ad
     e50:	20003bb8 	.word	0x20003bb8
     e54:	000002c5 	.word	0x000002c5

00000e58 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     e58:	b5f0      	push	{r4, r5, r6, r7, lr}
     e5a:	4647      	mov	r7, r8
     e5c:	b480      	push	{r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     e5e:	4b3b      	ldr	r3, [pc, #236]	; (f4c <xTaskIncrementTick+0xf4>)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	2b00      	cmp	r3, #0
     e64:	d161      	bne.n	f2a <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
     e66:	4b3a      	ldr	r3, [pc, #232]	; (f50 <xTaskIncrementTick+0xf8>)
     e68:	681a      	ldr	r2, [r3, #0]
     e6a:	3201      	adds	r2, #1
     e6c:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
     e6e:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
     e70:	2f00      	cmp	r7, #0
     e72:	d112      	bne.n	e9a <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
     e74:	4b37      	ldr	r3, [pc, #220]	; (f54 <xTaskIncrementTick+0xfc>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d001      	beq.n	e82 <xTaskIncrementTick+0x2a>
     e7e:	b672      	cpsid	i
     e80:	e7fe      	b.n	e80 <xTaskIncrementTick+0x28>
     e82:	4a34      	ldr	r2, [pc, #208]	; (f54 <xTaskIncrementTick+0xfc>)
     e84:	6811      	ldr	r1, [r2, #0]
     e86:	4b34      	ldr	r3, [pc, #208]	; (f58 <xTaskIncrementTick+0x100>)
     e88:	6818      	ldr	r0, [r3, #0]
     e8a:	6010      	str	r0, [r2, #0]
     e8c:	6019      	str	r1, [r3, #0]
     e8e:	4b33      	ldr	r3, [pc, #204]	; (f5c <xTaskIncrementTick+0x104>)
     e90:	681a      	ldr	r2, [r3, #0]
     e92:	3201      	adds	r2, #1
     e94:	601a      	str	r2, [r3, #0]
     e96:	4b32      	ldr	r3, [pc, #200]	; (f60 <xTaskIncrementTick+0x108>)
     e98:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     e9a:	4b32      	ldr	r3, [pc, #200]	; (f64 <xTaskIncrementTick+0x10c>)
     e9c:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     e9e:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     ea0:	429f      	cmp	r7, r3
     ea2:	d337      	bcc.n	f14 <xTaskIncrementTick+0xbc>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     ea4:	4e2b      	ldr	r6, [pc, #172]	; (f54 <xTaskIncrementTick+0xfc>)
     ea6:	e000      	b.n	eaa <xTaskIncrementTick+0x52>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
     ea8:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     eaa:	6833      	ldr	r3, [r6, #0]
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d104      	bne.n	ebc <xTaskIncrementTick+0x64>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
     eb2:	2201      	movs	r2, #1
     eb4:	4252      	negs	r2, r2
     eb6:	4b2b      	ldr	r3, [pc, #172]	; (f64 <xTaskIncrementTick+0x10c>)
     eb8:	601a      	str	r2, [r3, #0]
						break;
     eba:	e02b      	b.n	f14 <xTaskIncrementTick+0xbc>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     ebc:	4a25      	ldr	r2, [pc, #148]	; (f54 <xTaskIncrementTick+0xfc>)
     ebe:	6813      	ldr	r3, [r2, #0]
     ec0:	68db      	ldr	r3, [r3, #12]
     ec2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     ec4:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
     ec6:	429f      	cmp	r7, r3
     ec8:	d202      	bcs.n	ed0 <xTaskIncrementTick+0x78>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
     eca:	4a26      	ldr	r2, [pc, #152]	; (f64 <xTaskIncrementTick+0x10c>)
     ecc:	6013      	str	r3, [r2, #0]
							break;
     ece:	e021      	b.n	f14 <xTaskIncrementTick+0xbc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     ed0:	1d2b      	adds	r3, r5, #4
     ed2:	4698      	mov	r8, r3
     ed4:	1c18      	adds	r0, r3, #0
     ed6:	4a24      	ldr	r2, [pc, #144]	; (f68 <xTaskIncrementTick+0x110>)
     ed8:	4790      	blx	r2

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     eda:	6aab      	ldr	r3, [r5, #40]	; 0x28
     edc:	2b00      	cmp	r3, #0
     ede:	d003      	beq.n	ee8 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     ee0:	1c28      	adds	r0, r5, #0
     ee2:	3018      	adds	r0, #24
     ee4:	4b20      	ldr	r3, [pc, #128]	; (f68 <xTaskIncrementTick+0x110>)
     ee6:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
     ee8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     eea:	4a20      	ldr	r2, [pc, #128]	; (f6c <xTaskIncrementTick+0x114>)
     eec:	6812      	ldr	r2, [r2, #0]
     eee:	4293      	cmp	r3, r2
     ef0:	d901      	bls.n	ef6 <xTaskIncrementTick+0x9e>
     ef2:	4a1e      	ldr	r2, [pc, #120]	; (f6c <xTaskIncrementTick+0x114>)
     ef4:	6013      	str	r3, [r2, #0]
     ef6:	009a      	lsls	r2, r3, #2
     ef8:	18d3      	adds	r3, r2, r3
     efa:	009b      	lsls	r3, r3, #2
     efc:	481c      	ldr	r0, [pc, #112]	; (f70 <xTaskIncrementTick+0x118>)
     efe:	18c0      	adds	r0, r0, r3
     f00:	4641      	mov	r1, r8
     f02:	4b1c      	ldr	r3, [pc, #112]	; (f74 <xTaskIncrementTick+0x11c>)
     f04:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     f06:	4b1c      	ldr	r3, [pc, #112]	; (f78 <xTaskIncrementTick+0x120>)
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f0e:	429a      	cmp	r2, r3
     f10:	d2ca      	bcs.n	ea8 <xTaskIncrementTick+0x50>
     f12:	e7ca      	b.n	eaa <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     f14:	4b18      	ldr	r3, [pc, #96]	; (f78 <xTaskIncrementTick+0x120>)
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f1a:	009a      	lsls	r2, r3, #2
     f1c:	18d3      	adds	r3, r2, r3
     f1e:	009b      	lsls	r3, r3, #2
     f20:	4a13      	ldr	r2, [pc, #76]	; (f70 <xTaskIncrementTick+0x118>)
     f22:	589b      	ldr	r3, [r3, r2]
     f24:	2b01      	cmp	r3, #1
     f26:	d806      	bhi.n	f36 <xTaskIncrementTick+0xde>
     f28:	e006      	b.n	f38 <xTaskIncrementTick+0xe0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     f2a:	4b14      	ldr	r3, [pc, #80]	; (f7c <xTaskIncrementTick+0x124>)
     f2c:	681a      	ldr	r2, [r3, #0]
     f2e:	3201      	adds	r2, #1
     f30:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     f32:	2400      	movs	r4, #0
     f34:	e000      	b.n	f38 <xTaskIncrementTick+0xe0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
     f36:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     f38:	4b11      	ldr	r3, [pc, #68]	; (f80 <xTaskIncrementTick+0x128>)
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d000      	beq.n	f42 <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
     f40:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     f42:	1c20      	adds	r0, r4, #0
     f44:	bc04      	pop	{r2}
     f46:	4690      	mov	r8, r2
     f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	20003bb4 	.word	0x20003bb4
     f50:	20003bb8 	.word	0x20003bb8
     f54:	20003aec 	.word	0x20003aec
     f58:	20003bbc 	.word	0x20003bbc
     f5c:	20003ae8 	.word	0x20003ae8
     f60:	00000b51 	.word	0x00000b51
     f64:	20000008 	.word	0x20000008
     f68:	000004ad 	.word	0x000004ad
     f6c:	20003bdc 	.word	0x20003bdc
     f70:	20003b24 	.word	0x20003b24
     f74:	00000465 	.word	0x00000465
     f78:	20003b9c 	.word	0x20003b9c
     f7c:	20003b20 	.word	0x20003b20
     f80:	20003be0 	.word	0x20003be0

00000f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
     f86:	4b2f      	ldr	r3, [pc, #188]	; (1044 <xTaskResumeAll+0xc0>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d101      	bne.n	f92 <xTaskResumeAll+0xe>
     f8e:	b672      	cpsid	i
     f90:	e7fe      	b.n	f90 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     f92:	4b2d      	ldr	r3, [pc, #180]	; (1048 <xTaskResumeAll+0xc4>)
     f94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     f96:	4b2b      	ldr	r3, [pc, #172]	; (1044 <xTaskResumeAll+0xc0>)
     f98:	681a      	ldr	r2, [r3, #0]
     f9a:	3a01      	subs	r2, #1
     f9c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     f9e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
     fa0:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     fa2:	2b00      	cmp	r3, #0
     fa4:	d149      	bne.n	103a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     fa6:	4b29      	ldr	r3, [pc, #164]	; (104c <xTaskResumeAll+0xc8>)
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d045      	beq.n	103a <xTaskResumeAll+0xb6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     fae:	4d28      	ldr	r5, [pc, #160]	; (1050 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     fb0:	1c2f      	adds	r7, r5, #0
     fb2:	e021      	b.n	ff8 <xTaskResumeAll+0x74>
     fb4:	68fb      	ldr	r3, [r7, #12]
     fb6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     fb8:	1c20      	adds	r0, r4, #0
     fba:	3018      	adds	r0, #24
     fbc:	4b25      	ldr	r3, [pc, #148]	; (1054 <xTaskResumeAll+0xd0>)
     fbe:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     fc0:	1d26      	adds	r6, r4, #4
     fc2:	1c30      	adds	r0, r6, #0
     fc4:	4b23      	ldr	r3, [pc, #140]	; (1054 <xTaskResumeAll+0xd0>)
     fc6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
     fc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     fca:	4a23      	ldr	r2, [pc, #140]	; (1058 <xTaskResumeAll+0xd4>)
     fcc:	6812      	ldr	r2, [r2, #0]
     fce:	4293      	cmp	r3, r2
     fd0:	d901      	bls.n	fd6 <xTaskResumeAll+0x52>
     fd2:	4a21      	ldr	r2, [pc, #132]	; (1058 <xTaskResumeAll+0xd4>)
     fd4:	6013      	str	r3, [r2, #0]
     fd6:	009a      	lsls	r2, r3, #2
     fd8:	18d3      	adds	r3, r2, r3
     fda:	009b      	lsls	r3, r3, #2
     fdc:	481f      	ldr	r0, [pc, #124]	; (105c <xTaskResumeAll+0xd8>)
     fde:	18c0      	adds	r0, r0, r3
     fe0:	1c31      	adds	r1, r6, #0
     fe2:	4b1f      	ldr	r3, [pc, #124]	; (1060 <xTaskResumeAll+0xdc>)
     fe4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     fe6:	4b1f      	ldr	r3, [pc, #124]	; (1064 <xTaskResumeAll+0xe0>)
     fe8:	681b      	ldr	r3, [r3, #0]
     fea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fee:	429a      	cmp	r2, r3
     ff0:	d302      	bcc.n	ff8 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
     ff2:	2201      	movs	r2, #1
     ff4:	4b1c      	ldr	r3, [pc, #112]	; (1068 <xTaskResumeAll+0xe4>)
     ff6:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     ff8:	682b      	ldr	r3, [r5, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d1da      	bne.n	fb4 <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
     ffe:	4b1b      	ldr	r3, [pc, #108]	; (106c <xTaskResumeAll+0xe8>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d011      	beq.n	102a <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1006:	4b19      	ldr	r3, [pc, #100]	; (106c <xTaskResumeAll+0xe8>)
    1008:	681b      	ldr	r3, [r3, #0]
    100a:	2b00      	cmp	r3, #0
    100c:	d00d      	beq.n	102a <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    100e:	4e18      	ldr	r6, [pc, #96]	; (1070 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    1010:	4d15      	ldr	r5, [pc, #84]	; (1068 <xTaskResumeAll+0xe4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    1012:	4c16      	ldr	r4, [pc, #88]	; (106c <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    1014:	47b0      	blx	r6
    1016:	2800      	cmp	r0, #0
    1018:	d001      	beq.n	101e <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    101a:	2301      	movs	r3, #1
    101c:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    101e:	6823      	ldr	r3, [r4, #0]
    1020:	3b01      	subs	r3, #1
    1022:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1024:	6823      	ldr	r3, [r4, #0]
    1026:	2b00      	cmp	r3, #0
    1028:	d1f4      	bne.n	1014 <xTaskResumeAll+0x90>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    102a:	4b0f      	ldr	r3, [pc, #60]	; (1068 <xTaskResumeAll+0xe4>)
    102c:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    102e:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    1030:	2b01      	cmp	r3, #1
    1032:	d102      	bne.n	103a <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    1034:	4b0f      	ldr	r3, [pc, #60]	; (1074 <xTaskResumeAll+0xf0>)
    1036:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    1038:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    103a:	4b0f      	ldr	r3, [pc, #60]	; (1078 <xTaskResumeAll+0xf4>)
    103c:	4798      	blx	r3

	return xAlreadyYielded;
}
    103e:	1c20      	adds	r0, r4, #0
    1040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	20003bb4 	.word	0x20003bb4
    1048:	000002ad 	.word	0x000002ad
    104c:	20003bc4 	.word	0x20003bc4
    1050:	20003ba0 	.word	0x20003ba0
    1054:	000004ad 	.word	0x000004ad
    1058:	20003bdc 	.word	0x20003bdc
    105c:	20003b24 	.word	0x20003b24
    1060:	00000465 	.word	0x00000465
    1064:	20003b9c 	.word	0x20003b9c
    1068:	20003be0 	.word	0x20003be0
    106c:	20003b20 	.word	0x20003b20
    1070:	00000e59 	.word	0x00000e59
    1074:	00000295 	.word	0x00000295
    1078:	000002c5 	.word	0x000002c5

0000107c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    107c:	b510      	push	{r4, lr}
    107e:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1080:	d016      	beq.n	10b0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    1082:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <vTaskDelay+0x3c>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	2b00      	cmp	r3, #0
    1088:	d001      	beq.n	108e <vTaskDelay+0x12>
    108a:	b672      	cpsid	i
    108c:	e7fe      	b.n	108c <vTaskDelay+0x10>
			vTaskSuspendAll();
    108e:	4b0b      	ldr	r3, [pc, #44]	; (10bc <vTaskDelay+0x40>)
    1090:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1092:	4b0b      	ldr	r3, [pc, #44]	; (10c0 <vTaskDelay+0x44>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <vTaskDelay+0x48>)
    109a:	6818      	ldr	r0, [r3, #0]
    109c:	3004      	adds	r0, #4
    109e:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <vTaskDelay+0x4c>)
    10a0:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    10a2:	1c20      	adds	r0, r4, #0
    10a4:	4b09      	ldr	r3, [pc, #36]	; (10cc <vTaskDelay+0x50>)
    10a6:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    10a8:	4b09      	ldr	r3, [pc, #36]	; (10d0 <vTaskDelay+0x54>)
    10aa:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    10ac:	2800      	cmp	r0, #0
    10ae:	d101      	bne.n	10b4 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    10b0:	4b08      	ldr	r3, [pc, #32]	; (10d4 <vTaskDelay+0x58>)
    10b2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    10b4:	bd10      	pop	{r4, pc}
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	20003bb4 	.word	0x20003bb4
    10bc:	00000e29 	.word	0x00000e29
    10c0:	20003bb8 	.word	0x20003bb8
    10c4:	20003b9c 	.word	0x20003b9c
    10c8:	000004ad 	.word	0x000004ad
    10cc:	00000b7d 	.word	0x00000b7d
    10d0:	00000f85 	.word	0x00000f85
    10d4:	00000295 	.word	0x00000295

000010d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    10d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    10da:	4e15      	ldr	r6, [pc, #84]	; (1130 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    10dc:	4f15      	ldr	r7, [pc, #84]	; (1134 <prvIdleTask+0x5c>)
    10de:	e01e      	b.n	111e <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    10e0:	4b15      	ldr	r3, [pc, #84]	; (1138 <prvIdleTask+0x60>)
    10e2:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    10e4:	4b15      	ldr	r3, [pc, #84]	; (113c <prvIdleTask+0x64>)
    10e6:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    10e8:	4b15      	ldr	r3, [pc, #84]	; (1140 <prvIdleTask+0x68>)
    10ea:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    10ec:	2c00      	cmp	r4, #0
    10ee:	d016      	beq.n	111e <prvIdleTask+0x46>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    10f0:	4b14      	ldr	r3, [pc, #80]	; (1144 <prvIdleTask+0x6c>)
    10f2:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    10f4:	4b11      	ldr	r3, [pc, #68]	; (113c <prvIdleTask+0x64>)
    10f6:	68db      	ldr	r3, [r3, #12]
    10f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    10fa:	1d20      	adds	r0, r4, #4
    10fc:	4b12      	ldr	r3, [pc, #72]	; (1148 <prvIdleTask+0x70>)
    10fe:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1100:	4b12      	ldr	r3, [pc, #72]	; (114c <prvIdleTask+0x74>)
    1102:	681a      	ldr	r2, [r3, #0]
    1104:	3a01      	subs	r2, #1
    1106:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    1108:	4b09      	ldr	r3, [pc, #36]	; (1130 <prvIdleTask+0x58>)
    110a:	681a      	ldr	r2, [r3, #0]
    110c:	3a01      	subs	r2, #1
    110e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    1110:	4b0f      	ldr	r3, [pc, #60]	; (1150 <prvIdleTask+0x78>)
    1112:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    1114:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1116:	4d0f      	ldr	r5, [pc, #60]	; (1154 <prvIdleTask+0x7c>)
    1118:	47a8      	blx	r5
		vPortFree( pxTCB );
    111a:	1c20      	adds	r0, r4, #0
    111c:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    111e:	6833      	ldr	r3, [r6, #0]
    1120:	2b00      	cmp	r3, #0
    1122:	d1dd      	bne.n	10e0 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1124:	683b      	ldr	r3, [r7, #0]
    1126:	2b01      	cmp	r3, #1
    1128:	d9f9      	bls.n	111e <prvIdleTask+0x46>
			{
				taskYIELD();
    112a:	4b0b      	ldr	r3, [pc, #44]	; (1158 <prvIdleTask+0x80>)
    112c:	4798      	blx	r3
    112e:	e7f6      	b.n	111e <prvIdleTask+0x46>
    1130:	20003af4 	.word	0x20003af4
    1134:	20003b24 	.word	0x20003b24
    1138:	00000e29 	.word	0x00000e29
    113c:	20003b88 	.word	0x20003b88
    1140:	00000f85 	.word	0x00000f85
    1144:	000002ad 	.word	0x000002ad
    1148:	000004ad 	.word	0x000004ad
    114c:	20003bc4 	.word	0x20003bc4
    1150:	000002c5 	.word	0x000002c5
    1154:	00000439 	.word	0x00000439
    1158:	00000295 	.word	0x00000295

0000115c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    115c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    115e:	4b20      	ldr	r3, [pc, #128]	; (11e0 <vTaskSwitchContext+0x84>)
    1160:	681b      	ldr	r3, [r3, #0]
    1162:	2b00      	cmp	r3, #0
    1164:	d003      	beq.n	116e <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1166:	2201      	movs	r2, #1
    1168:	4b1e      	ldr	r3, [pc, #120]	; (11e4 <vTaskSwitchContext+0x88>)
    116a:	601a      	str	r2, [r3, #0]
    116c:	e036      	b.n	11dc <vTaskSwitchContext+0x80>
	}
	else
	{
		xYieldPending = pdFALSE;
    116e:	2200      	movs	r2, #0
    1170:	4b1c      	ldr	r3, [pc, #112]	; (11e4 <vTaskSwitchContext+0x88>)
    1172:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1174:	4b1c      	ldr	r3, [pc, #112]	; (11e8 <vTaskSwitchContext+0x8c>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	009a      	lsls	r2, r3, #2
    117a:	18d3      	adds	r3, r2, r3
    117c:	009b      	lsls	r3, r3, #2
    117e:	4a1b      	ldr	r2, [pc, #108]	; (11ec <vTaskSwitchContext+0x90>)
    1180:	589b      	ldr	r3, [r3, r2]
    1182:	2b00      	cmp	r3, #0
    1184:	d116      	bne.n	11b4 <vTaskSwitchContext+0x58>
    1186:	4b18      	ldr	r3, [pc, #96]	; (11e8 <vTaskSwitchContext+0x8c>)
    1188:	681b      	ldr	r3, [r3, #0]
    118a:	2b00      	cmp	r3, #0
    118c:	d105      	bne.n	119a <vTaskSwitchContext+0x3e>
    118e:	e002      	b.n	1196 <vTaskSwitchContext+0x3a>
    1190:	6802      	ldr	r2, [r0, #0]
    1192:	2a00      	cmp	r2, #0
    1194:	d104      	bne.n	11a0 <vTaskSwitchContext+0x44>
    1196:	b672      	cpsid	i
    1198:	e7fe      	b.n	1198 <vTaskSwitchContext+0x3c>
    119a:	4b13      	ldr	r3, [pc, #76]	; (11e8 <vTaskSwitchContext+0x8c>)
    119c:	4c13      	ldr	r4, [pc, #76]	; (11ec <vTaskSwitchContext+0x90>)
    119e:	1c18      	adds	r0, r3, #0
    11a0:	681a      	ldr	r2, [r3, #0]
    11a2:	3a01      	subs	r2, #1
    11a4:	601a      	str	r2, [r3, #0]
    11a6:	681a      	ldr	r2, [r3, #0]
    11a8:	0091      	lsls	r1, r2, #2
    11aa:	188a      	adds	r2, r1, r2
    11ac:	0092      	lsls	r2, r2, #2
    11ae:	5912      	ldr	r2, [r2, r4]
    11b0:	2a00      	cmp	r2, #0
    11b2:	d0ed      	beq.n	1190 <vTaskSwitchContext+0x34>
    11b4:	4b0c      	ldr	r3, [pc, #48]	; (11e8 <vTaskSwitchContext+0x8c>)
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	009a      	lsls	r2, r3, #2
    11ba:	18d3      	adds	r3, r2, r3
    11bc:	009b      	lsls	r3, r3, #2
    11be:	4a0b      	ldr	r2, [pc, #44]	; (11ec <vTaskSwitchContext+0x90>)
    11c0:	18d3      	adds	r3, r2, r3
    11c2:	685a      	ldr	r2, [r3, #4]
    11c4:	6852      	ldr	r2, [r2, #4]
    11c6:	605a      	str	r2, [r3, #4]
    11c8:	1c19      	adds	r1, r3, #0
    11ca:	3108      	adds	r1, #8
    11cc:	428a      	cmp	r2, r1
    11ce:	d101      	bne.n	11d4 <vTaskSwitchContext+0x78>
    11d0:	6852      	ldr	r2, [r2, #4]
    11d2:	605a      	str	r2, [r3, #4]
    11d4:	685b      	ldr	r3, [r3, #4]
    11d6:	68da      	ldr	r2, [r3, #12]
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <vTaskSwitchContext+0x94>)
    11da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	20003bb4 	.word	0x20003bb4
    11e4:	20003be0 	.word	0x20003be0
    11e8:	20003bdc 	.word	0x20003bdc
    11ec:	20003b24 	.word	0x20003b24
    11f0:	20003b9c 	.word	0x20003b9c

000011f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    11f4:	b538      	push	{r3, r4, r5, lr}
    11f6:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    11f8:	2800      	cmp	r0, #0
    11fa:	d101      	bne.n	1200 <vTaskPlaceOnEventList+0xc>
    11fc:	b672      	cpsid	i
    11fe:	e7fe      	b.n	11fe <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1200:	4d0b      	ldr	r5, [pc, #44]	; (1230 <vTaskPlaceOnEventList+0x3c>)
    1202:	6829      	ldr	r1, [r5, #0]
    1204:	3118      	adds	r1, #24
    1206:	4b0b      	ldr	r3, [pc, #44]	; (1234 <vTaskPlaceOnEventList+0x40>)
    1208:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    120a:	6828      	ldr	r0, [r5, #0]
    120c:	3004      	adds	r0, #4
    120e:	4b0a      	ldr	r3, [pc, #40]	; (1238 <vTaskPlaceOnEventList+0x44>)
    1210:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1212:	1c63      	adds	r3, r4, #1
    1214:	d106      	bne.n	1224 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1216:	4b06      	ldr	r3, [pc, #24]	; (1230 <vTaskPlaceOnEventList+0x3c>)
    1218:	6819      	ldr	r1, [r3, #0]
    121a:	3104      	adds	r1, #4
    121c:	4807      	ldr	r0, [pc, #28]	; (123c <vTaskPlaceOnEventList+0x48>)
    121e:	4b08      	ldr	r3, [pc, #32]	; (1240 <vTaskPlaceOnEventList+0x4c>)
    1220:	4798      	blx	r3
    1222:	e004      	b.n	122e <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    1224:	4b07      	ldr	r3, [pc, #28]	; (1244 <vTaskPlaceOnEventList+0x50>)
    1226:	6818      	ldr	r0, [r3, #0]
    1228:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    122a:	4b07      	ldr	r3, [pc, #28]	; (1248 <vTaskPlaceOnEventList+0x54>)
    122c:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    122e:	bd38      	pop	{r3, r4, r5, pc}
    1230:	20003b9c 	.word	0x20003b9c
    1234:	0000047d 	.word	0x0000047d
    1238:	000004ad 	.word	0x000004ad
    123c:	20003bc8 	.word	0x20003bc8
    1240:	00000465 	.word	0x00000465
    1244:	20003bb8 	.word	0x20003bb8
    1248:	00000b7d 	.word	0x00000b7d

0000124c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    124c:	b538      	push	{r3, r4, r5, lr}
    124e:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    1250:	2800      	cmp	r0, #0
    1252:	d101      	bne.n	1258 <vTaskPlaceOnEventListRestricted+0xc>
    1254:	b672      	cpsid	i
    1256:	e7fe      	b.n	1256 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1258:	4c07      	ldr	r4, [pc, #28]	; (1278 <vTaskPlaceOnEventListRestricted+0x2c>)
    125a:	6821      	ldr	r1, [r4, #0]
    125c:	3118      	adds	r1, #24
    125e:	4b07      	ldr	r3, [pc, #28]	; (127c <vTaskPlaceOnEventListRestricted+0x30>)
    1260:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1262:	6820      	ldr	r0, [r4, #0]
    1264:	3004      	adds	r0, #4
    1266:	4b06      	ldr	r3, [pc, #24]	; (1280 <vTaskPlaceOnEventListRestricted+0x34>)
    1268:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    126a:	4b06      	ldr	r3, [pc, #24]	; (1284 <vTaskPlaceOnEventListRestricted+0x38>)
    126c:	6818      	ldr	r0, [r3, #0]
    126e:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    1270:	4b05      	ldr	r3, [pc, #20]	; (1288 <vTaskPlaceOnEventListRestricted+0x3c>)
    1272:	4798      	blx	r3
	}
    1274:	bd38      	pop	{r3, r4, r5, pc}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	20003b9c 	.word	0x20003b9c
    127c:	00000465 	.word	0x00000465
    1280:	000004ad 	.word	0x000004ad
    1284:	20003bb8 	.word	0x20003bb8
    1288:	00000b7d 	.word	0x00000b7d

0000128c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    128c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    128e:	68c3      	ldr	r3, [r0, #12]
    1290:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1292:	2c00      	cmp	r4, #0
    1294:	d101      	bne.n	129a <xTaskRemoveFromEventList+0xe>
    1296:	b672      	cpsid	i
    1298:	e7fe      	b.n	1298 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    129a:	1c25      	adds	r5, r4, #0
    129c:	3518      	adds	r5, #24
    129e:	1c28      	adds	r0, r5, #0
    12a0:	4b14      	ldr	r3, [pc, #80]	; (12f4 <xTaskRemoveFromEventList+0x68>)
    12a2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    12a4:	4b14      	ldr	r3, [pc, #80]	; (12f8 <xTaskRemoveFromEventList+0x6c>)
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d113      	bne.n	12d4 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    12ac:	1d25      	adds	r5, r4, #4
    12ae:	1c28      	adds	r0, r5, #0
    12b0:	4b10      	ldr	r3, [pc, #64]	; (12f4 <xTaskRemoveFromEventList+0x68>)
    12b2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    12b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12b6:	4a11      	ldr	r2, [pc, #68]	; (12fc <xTaskRemoveFromEventList+0x70>)
    12b8:	6812      	ldr	r2, [r2, #0]
    12ba:	4293      	cmp	r3, r2
    12bc:	d901      	bls.n	12c2 <xTaskRemoveFromEventList+0x36>
    12be:	4a0f      	ldr	r2, [pc, #60]	; (12fc <xTaskRemoveFromEventList+0x70>)
    12c0:	6013      	str	r3, [r2, #0]
    12c2:	009a      	lsls	r2, r3, #2
    12c4:	18d3      	adds	r3, r2, r3
    12c6:	009b      	lsls	r3, r3, #2
    12c8:	480d      	ldr	r0, [pc, #52]	; (1300 <xTaskRemoveFromEventList+0x74>)
    12ca:	18c0      	adds	r0, r0, r3
    12cc:	1c29      	adds	r1, r5, #0
    12ce:	4b0d      	ldr	r3, [pc, #52]	; (1304 <xTaskRemoveFromEventList+0x78>)
    12d0:	4798      	blx	r3
    12d2:	e003      	b.n	12dc <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    12d4:	480c      	ldr	r0, [pc, #48]	; (1308 <xTaskRemoveFromEventList+0x7c>)
    12d6:	1c29      	adds	r1, r5, #0
    12d8:	4b0a      	ldr	r3, [pc, #40]	; (1304 <xTaskRemoveFromEventList+0x78>)
    12da:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    12dc:	4b0b      	ldr	r3, [pc, #44]	; (130c <xTaskRemoveFromEventList+0x80>)
    12de:	681b      	ldr	r3, [r3, #0]
    12e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    12e4:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    12e6:	429a      	cmp	r2, r3
    12e8:	d903      	bls.n	12f2 <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    12ea:	2201      	movs	r2, #1
    12ec:	4b08      	ldr	r3, [pc, #32]	; (1310 <xTaskRemoveFromEventList+0x84>)
    12ee:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    12f0:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    12f2:	bd38      	pop	{r3, r4, r5, pc}
    12f4:	000004ad 	.word	0x000004ad
    12f8:	20003bb4 	.word	0x20003bb4
    12fc:	20003bdc 	.word	0x20003bdc
    1300:	20003b24 	.word	0x20003b24
    1304:	00000465 	.word	0x00000465
    1308:	20003ba0 	.word	0x20003ba0
    130c:	20003b9c 	.word	0x20003b9c
    1310:	20003be0 	.word	0x20003be0

00001314 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    1314:	2800      	cmp	r0, #0
    1316:	d101      	bne.n	131c <vTaskSetTimeOutState+0x8>
    1318:	b672      	cpsid	i
    131a:	e7fe      	b.n	131a <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    131c:	4b03      	ldr	r3, [pc, #12]	; (132c <vTaskSetTimeOutState+0x18>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1322:	4b03      	ldr	r3, [pc, #12]	; (1330 <vTaskSetTimeOutState+0x1c>)
    1324:	681b      	ldr	r3, [r3, #0]
    1326:	6043      	str	r3, [r0, #4]
}
    1328:	4770      	bx	lr
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	20003ae8 	.word	0x20003ae8
    1330:	20003bb8 	.word	0x20003bb8

00001334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1334:	b570      	push	{r4, r5, r6, lr}
    1336:	1c04      	adds	r4, r0, #0
    1338:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    133a:	2800      	cmp	r0, #0
    133c:	d101      	bne.n	1342 <xTaskCheckForTimeOut+0xe>
    133e:	b672      	cpsid	i
    1340:	e7fe      	b.n	1340 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    1342:	2900      	cmp	r1, #0
    1344:	d101      	bne.n	134a <xTaskCheckForTimeOut+0x16>
    1346:	b672      	cpsid	i
    1348:	e7fe      	b.n	1348 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    134a:	4b11      	ldr	r3, [pc, #68]	; (1390 <xTaskCheckForTimeOut+0x5c>)
    134c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    134e:	4b11      	ldr	r3, [pc, #68]	; (1394 <xTaskCheckForTimeOut+0x60>)
    1350:	681a      	ldr	r2, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1352:	6833      	ldr	r3, [r6, #0]
    1354:	1c58      	adds	r0, r3, #1
    1356:	d015      	beq.n	1384 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1358:	490f      	ldr	r1, [pc, #60]	; (1398 <xTaskCheckForTimeOut+0x64>)
    135a:	6809      	ldr	r1, [r1, #0]
    135c:	6820      	ldr	r0, [r4, #0]
    135e:	4288      	cmp	r0, r1
    1360:	d003      	beq.n	136a <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1362:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1364:	6861      	ldr	r1, [r4, #4]
    1366:	428a      	cmp	r2, r1
    1368:	d20d      	bcs.n	1386 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    136a:	6861      	ldr	r1, [r4, #4]
    136c:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    136e:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1370:	4283      	cmp	r3, r0
    1372:	d908      	bls.n	1386 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1374:	1a8a      	subs	r2, r1, r2
    1376:	18d3      	adds	r3, r2, r3
    1378:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    137a:	1c20      	adds	r0, r4, #0
    137c:	4b07      	ldr	r3, [pc, #28]	; (139c <xTaskCheckForTimeOut+0x68>)
    137e:	4798      	blx	r3
			xReturn = pdFALSE;
    1380:	2500      	movs	r5, #0
    1382:	e000      	b.n	1386 <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    1384:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    1386:	4b06      	ldr	r3, [pc, #24]	; (13a0 <xTaskCheckForTimeOut+0x6c>)
    1388:	4798      	blx	r3

	return xReturn;
}
    138a:	1c28      	adds	r0, r5, #0
    138c:	bd70      	pop	{r4, r5, r6, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	000002ad 	.word	0x000002ad
    1394:	20003bb8 	.word	0x20003bb8
    1398:	20003ae8 	.word	0x20003ae8
    139c:	00001315 	.word	0x00001315
    13a0:	000002c5 	.word	0x000002c5

000013a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    13a4:	2201      	movs	r2, #1
    13a6:	4b01      	ldr	r3, [pc, #4]	; (13ac <vTaskMissedYield+0x8>)
    13a8:	601a      	str	r2, [r3, #0]
}
    13aa:	4770      	bx	lr
    13ac:	20003be0 	.word	0x20003be0

000013b0 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    13b0:	4b01      	ldr	r3, [pc, #4]	; (13b8 <xTaskGetCurrentTaskHandle+0x8>)
    13b2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    13b4:	4770      	bx	lr
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	20003b9c 	.word	0x20003b9c

000013bc <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    13bc:	4b05      	ldr	r3, [pc, #20]	; (13d4 <xTaskGetSchedulerState+0x18>)
    13be:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    13c0:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    13c2:	2b00      	cmp	r3, #0
    13c4:	d004      	beq.n	13d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    13c6:	4b04      	ldr	r3, [pc, #16]	; (13d8 <xTaskGetSchedulerState+0x1c>)
    13c8:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    13ca:	4243      	negs	r3, r0
    13cc:	4158      	adcs	r0, r3
    13ce:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    13d0:	4770      	bx	lr
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	20003af0 	.word	0x20003af0
    13d8:	20003bb4 	.word	0x20003bb4

000013dc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    13dc:	b538      	push	{r3, r4, r5, lr}
    13de:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    13e0:	d031      	beq.n	1446 <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    13e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    13e4:	4a18      	ldr	r2, [pc, #96]	; (1448 <vTaskPriorityInherit+0x6c>)
    13e6:	6812      	ldr	r2, [r2, #0]
    13e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    13ea:	4293      	cmp	r3, r2
    13ec:	d22b      	bcs.n	1446 <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    13ee:	6982      	ldr	r2, [r0, #24]
    13f0:	2a00      	cmp	r2, #0
    13f2:	db05      	blt.n	1400 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13f4:	4a14      	ldr	r2, [pc, #80]	; (1448 <vTaskPriorityInherit+0x6c>)
    13f6:	6812      	ldr	r2, [r2, #0]
    13f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    13fa:	2105      	movs	r1, #5
    13fc:	1a8a      	subs	r2, r1, r2
    13fe:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1400:	009a      	lsls	r2, r3, #2
    1402:	18d3      	adds	r3, r2, r3
    1404:	009b      	lsls	r3, r3, #2
    1406:	4a11      	ldr	r2, [pc, #68]	; (144c <vTaskPriorityInherit+0x70>)
    1408:	18d3      	adds	r3, r2, r3
    140a:	6962      	ldr	r2, [r4, #20]
    140c:	429a      	cmp	r2, r3
    140e:	d116      	bne.n	143e <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1410:	1d25      	adds	r5, r4, #4
    1412:	1c28      	adds	r0, r5, #0
    1414:	4b0e      	ldr	r3, [pc, #56]	; (1450 <vTaskPriorityInherit+0x74>)
    1416:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1418:	4b0b      	ldr	r3, [pc, #44]	; (1448 <vTaskPriorityInherit+0x6c>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    141e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1420:	4a0c      	ldr	r2, [pc, #48]	; (1454 <vTaskPriorityInherit+0x78>)
    1422:	6812      	ldr	r2, [r2, #0]
    1424:	4293      	cmp	r3, r2
    1426:	d901      	bls.n	142c <vTaskPriorityInherit+0x50>
    1428:	4a0a      	ldr	r2, [pc, #40]	; (1454 <vTaskPriorityInherit+0x78>)
    142a:	6013      	str	r3, [r2, #0]
    142c:	0098      	lsls	r0, r3, #2
    142e:	18c3      	adds	r3, r0, r3
    1430:	009b      	lsls	r3, r3, #2
    1432:	4806      	ldr	r0, [pc, #24]	; (144c <vTaskPriorityInherit+0x70>)
    1434:	18c0      	adds	r0, r0, r3
    1436:	1c29      	adds	r1, r5, #0
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <vTaskPriorityInherit+0x7c>)
    143a:	4798      	blx	r3
    143c:	e003      	b.n	1446 <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    143e:	4b02      	ldr	r3, [pc, #8]	; (1448 <vTaskPriorityInherit+0x6c>)
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1444:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1446:	bd38      	pop	{r3, r4, r5, pc}
    1448:	20003b9c 	.word	0x20003b9c
    144c:	20003b24 	.word	0x20003b24
    1450:	000004ad 	.word	0x000004ad
    1454:	20003bdc 	.word	0x20003bdc
    1458:	00000465 	.word	0x00000465

0000145c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    145c:	b538      	push	{r3, r4, r5, lr}
    145e:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1460:	d01d      	beq.n	149e <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1462:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1464:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1466:	429a      	cmp	r2, r3
    1468:	d019      	beq.n	149e <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    146a:	1d05      	adds	r5, r0, #4
    146c:	1c28      	adds	r0, r5, #0
    146e:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <vTaskPriorityDisinherit+0x44>)
    1470:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1474:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1476:	69a2      	ldr	r2, [r4, #24]
    1478:	2a00      	cmp	r2, #0
    147a:	db02      	blt.n	1482 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    147c:	2205      	movs	r2, #5
    147e:	1ad2      	subs	r2, r2, r3
    1480:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    1482:	4a08      	ldr	r2, [pc, #32]	; (14a4 <vTaskPriorityDisinherit+0x48>)
    1484:	6812      	ldr	r2, [r2, #0]
    1486:	4293      	cmp	r3, r2
    1488:	d901      	bls.n	148e <vTaskPriorityDisinherit+0x32>
    148a:	4a06      	ldr	r2, [pc, #24]	; (14a4 <vTaskPriorityDisinherit+0x48>)
    148c:	6013      	str	r3, [r2, #0]
    148e:	0098      	lsls	r0, r3, #2
    1490:	18c3      	adds	r3, r0, r3
    1492:	009b      	lsls	r3, r3, #2
    1494:	4804      	ldr	r0, [pc, #16]	; (14a8 <vTaskPriorityDisinherit+0x4c>)
    1496:	18c0      	adds	r0, r0, r3
    1498:	1c29      	adds	r1, r5, #0
    149a:	4b04      	ldr	r3, [pc, #16]	; (14ac <vTaskPriorityDisinherit+0x50>)
    149c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    149e:	bd38      	pop	{r3, r4, r5, pc}
    14a0:	000004ad 	.word	0x000004ad
    14a4:	20003bdc 	.word	0x20003bdc
    14a8:	20003b24 	.word	0x20003b24
    14ac:	00000465 	.word	0x00000465

000014b0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    14b0:	b510      	push	{r4, lr}
    14b2:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    14b4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    14b6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    14b8:	4291      	cmp	r1, r2
    14ba:	d80b      	bhi.n	14d4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    14bc:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    14be:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    14c0:	69a3      	ldr	r3, [r4, #24]
    14c2:	429a      	cmp	r2, r3
    14c4:	d211      	bcs.n	14ea <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <prvInsertTimerInActiveList+0x3c>)
    14c8:	6818      	ldr	r0, [r3, #0]
    14ca:	1d21      	adds	r1, r4, #4
    14cc:	4b08      	ldr	r3, [pc, #32]	; (14f0 <prvInsertTimerInActiveList+0x40>)
    14ce:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    14d0:	2000      	movs	r0, #0
    14d2:	e00a      	b.n	14ea <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    14d4:	429a      	cmp	r2, r3
    14d6:	d202      	bcs.n	14de <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    14d8:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    14da:	4299      	cmp	r1, r3
    14dc:	d205      	bcs.n	14ea <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    14de:	4b05      	ldr	r3, [pc, #20]	; (14f4 <prvInsertTimerInActiveList+0x44>)
    14e0:	6818      	ldr	r0, [r3, #0]
    14e2:	1d21      	adds	r1, r4, #4
    14e4:	4b02      	ldr	r3, [pc, #8]	; (14f0 <prvInsertTimerInActiveList+0x40>)
    14e6:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    14e8:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20003c18 	.word	0x20003c18
    14f0:	0000047d 	.word	0x0000047d
    14f4:	20003be4 	.word	0x20003be4

000014f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    14f8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    14fa:	4b10      	ldr	r3, [pc, #64]	; (153c <prvCheckForValidListAndQueue+0x44>)
    14fc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    14fe:	4b10      	ldr	r3, [pc, #64]	; (1540 <prvCheckForValidListAndQueue+0x48>)
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	2b00      	cmp	r3, #0
    1504:	d116      	bne.n	1534 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    1506:	4d0f      	ldr	r5, [pc, #60]	; (1544 <prvCheckForValidListAndQueue+0x4c>)
    1508:	1c28      	adds	r0, r5, #0
    150a:	4e0f      	ldr	r6, [pc, #60]	; (1548 <prvCheckForValidListAndQueue+0x50>)
    150c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    150e:	4c0f      	ldr	r4, [pc, #60]	; (154c <prvCheckForValidListAndQueue+0x54>)
    1510:	1c20      	adds	r0, r4, #0
    1512:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    1514:	4b0e      	ldr	r3, [pc, #56]	; (1550 <prvCheckForValidListAndQueue+0x58>)
    1516:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    1518:	4b0e      	ldr	r3, [pc, #56]	; (1554 <prvCheckForValidListAndQueue+0x5c>)
    151a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    151c:	2002      	movs	r0, #2
    151e:	210c      	movs	r1, #12
    1520:	2200      	movs	r2, #0
    1522:	4b0d      	ldr	r3, [pc, #52]	; (1558 <prvCheckForValidListAndQueue+0x60>)
    1524:	4798      	blx	r3
			configASSERT( xTimerQueue );
    1526:	2800      	cmp	r0, #0
    1528:	d002      	beq.n	1530 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    152a:	4b05      	ldr	r3, [pc, #20]	; (1540 <prvCheckForValidListAndQueue+0x48>)
    152c:	6018      	str	r0, [r3, #0]
    152e:	e001      	b.n	1534 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    1530:	b672      	cpsid	i
    1532:	e7fe      	b.n	1532 <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1534:	4b09      	ldr	r3, [pc, #36]	; (155c <prvCheckForValidListAndQueue+0x64>)
    1536:	4798      	blx	r3
}
    1538:	bd70      	pop	{r4, r5, r6, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	000002ad 	.word	0x000002ad
    1540:	20003c14 	.word	0x20003c14
    1544:	20003be8 	.word	0x20003be8
    1548:	00000445 	.word	0x00000445
    154c:	20003bfc 	.word	0x20003bfc
    1550:	20003be4 	.word	0x20003be4
    1554:	20003c18 	.word	0x20003c18
    1558:	000006e1 	.word	0x000006e1
    155c:	000002c5 	.word	0x000002c5

00001560 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    1560:	b510      	push	{r4, lr}
    1562:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    1564:	4b0b      	ldr	r3, [pc, #44]	; (1594 <xTimerCreateTimerTask+0x34>)
    1566:	4798      	blx	r3

	if( xTimerQueue != NULL )
    1568:	4b0b      	ldr	r3, [pc, #44]	; (1598 <xTimerCreateTimerTask+0x38>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	2b00      	cmp	r3, #0
    156e:	d00c      	beq.n	158a <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1570:	2302      	movs	r3, #2
    1572:	9300      	str	r3, [sp, #0]
    1574:	2300      	movs	r3, #0
    1576:	9301      	str	r3, [sp, #4]
    1578:	9302      	str	r3, [sp, #8]
    157a:	9303      	str	r3, [sp, #12]
    157c:	4807      	ldr	r0, [pc, #28]	; (159c <xTimerCreateTimerTask+0x3c>)
    157e:	4908      	ldr	r1, [pc, #32]	; (15a0 <xTimerCreateTimerTask+0x40>)
    1580:	2250      	movs	r2, #80	; 0x50
    1582:	4c08      	ldr	r4, [pc, #32]	; (15a4 <xTimerCreateTimerTask+0x44>)
    1584:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    1586:	2800      	cmp	r0, #0
    1588:	d101      	bne.n	158e <xTimerCreateTimerTask+0x2e>
    158a:	b672      	cpsid	i
    158c:	e7fe      	b.n	158c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    158e:	b004      	add	sp, #16
    1590:	bd10      	pop	{r4, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	000014f9 	.word	0x000014f9
    1598:	20003c14 	.word	0x20003c14
    159c:	000016c9 	.word	0x000016c9
    15a0:	00001e10 	.word	0x00001e10
    15a4:	00000bd5 	.word	0x00000bd5

000015a8 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    15a8:	b510      	push	{r4, lr}
    15aa:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    15ac:	4c13      	ldr	r4, [pc, #76]	; (15fc <xTimerGenericCommand+0x54>)
    15ae:	6824      	ldr	r4, [r4, #0]
    15b0:	2c00      	cmp	r4, #0
    15b2:	d01f      	beq.n	15f4 <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    15b4:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    15b6:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    15b8:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    15ba:	2905      	cmp	r1, #5
    15bc:	dc13      	bgt.n	15e6 <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    15be:	4b10      	ldr	r3, [pc, #64]	; (1600 <xTimerGenericCommand+0x58>)
    15c0:	4798      	blx	r3
    15c2:	2802      	cmp	r0, #2
    15c4:	d107      	bne.n	15d6 <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    15c6:	4b0d      	ldr	r3, [pc, #52]	; (15fc <xTimerGenericCommand+0x54>)
    15c8:	6818      	ldr	r0, [r3, #0]
    15ca:	a901      	add	r1, sp, #4
    15cc:	9a06      	ldr	r2, [sp, #24]
    15ce:	2300      	movs	r3, #0
    15d0:	4c0c      	ldr	r4, [pc, #48]	; (1604 <xTimerGenericCommand+0x5c>)
    15d2:	47a0      	blx	r4
    15d4:	e00f      	b.n	15f6 <xTimerGenericCommand+0x4e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    15d6:	4b09      	ldr	r3, [pc, #36]	; (15fc <xTimerGenericCommand+0x54>)
    15d8:	6818      	ldr	r0, [r3, #0]
    15da:	a901      	add	r1, sp, #4
    15dc:	2200      	movs	r2, #0
    15de:	2300      	movs	r3, #0
    15e0:	4c08      	ldr	r4, [pc, #32]	; (1604 <xTimerGenericCommand+0x5c>)
    15e2:	47a0      	blx	r4
    15e4:	e007      	b.n	15f6 <xTimerGenericCommand+0x4e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    15e6:	1c20      	adds	r0, r4, #0
    15e8:	a901      	add	r1, sp, #4
    15ea:	1c1a      	adds	r2, r3, #0
    15ec:	2300      	movs	r3, #0
    15ee:	4c06      	ldr	r4, [pc, #24]	; (1608 <xTimerGenericCommand+0x60>)
    15f0:	47a0      	blx	r4
    15f2:	e000      	b.n	15f6 <xTimerGenericCommand+0x4e>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    15f4:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    15f6:	b004      	add	sp, #16
    15f8:	bd10      	pop	{r4, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	20003c14 	.word	0x20003c14
    1600:	000013bd 	.word	0x000013bd
    1604:	00000735 	.word	0x00000735
    1608:	000008a9 	.word	0x000008a9

0000160c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	4657      	mov	r7, sl
    1610:	464e      	mov	r6, r9
    1612:	4645      	mov	r5, r8
    1614:	b4e0      	push	{r5, r6, r7}
    1616:	b082      	sub	sp, #8
    1618:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    161a:	4b24      	ldr	r3, [pc, #144]	; (16ac <prvSampleTimeNow+0xa0>)
    161c:	4798      	blx	r3
    161e:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    1620:	4b23      	ldr	r3, [pc, #140]	; (16b0 <prvSampleTimeNow+0xa4>)
    1622:	681b      	ldr	r3, [r3, #0]
    1624:	4298      	cmp	r0, r3
    1626:	d234      	bcs.n	1692 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1628:	4e22      	ldr	r6, [pc, #136]	; (16b4 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    162a:	4f23      	ldr	r7, [pc, #140]	; (16b8 <prvSampleTimeNow+0xac>)
    162c:	e024      	b.n	1678 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    162e:	68db      	ldr	r3, [r3, #12]
    1630:	6818      	ldr	r0, [r3, #0]
    1632:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1634:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1636:	1d25      	adds	r5, r4, #4
    1638:	1c28      	adds	r0, r5, #0
    163a:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    163c:	1c20      	adds	r0, r4, #0
    163e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1640:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1642:	69e2      	ldr	r2, [r4, #28]
    1644:	2a01      	cmp	r2, #1
    1646:	d117      	bne.n	1678 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1648:	69a0      	ldr	r0, [r4, #24]
    164a:	1c03      	adds	r3, r0, #0
    164c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    164e:	4553      	cmp	r3, sl
    1650:	d907      	bls.n	1662 <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1652:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1654:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1656:	4b17      	ldr	r3, [pc, #92]	; (16b4 <prvSampleTimeNow+0xa8>)
    1658:	6818      	ldr	r0, [r3, #0]
    165a:	1c29      	adds	r1, r5, #0
    165c:	4b17      	ldr	r3, [pc, #92]	; (16bc <prvSampleTimeNow+0xb0>)
    165e:	4798      	blx	r3
    1660:	e00a      	b.n	1678 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1662:	2300      	movs	r3, #0
    1664:	9300      	str	r3, [sp, #0]
    1666:	1c20      	adds	r0, r4, #0
    1668:	2100      	movs	r1, #0
    166a:	4652      	mov	r2, sl
    166c:	4c14      	ldr	r4, [pc, #80]	; (16c0 <prvSampleTimeNow+0xb4>)
    166e:	47a0      	blx	r4
				configASSERT( xResult );
    1670:	2800      	cmp	r0, #0
    1672:	d101      	bne.n	1678 <prvSampleTimeNow+0x6c>
    1674:	b672      	cpsid	i
    1676:	e7fe      	b.n	1676 <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1678:	6833      	ldr	r3, [r6, #0]
    167a:	6818      	ldr	r0, [r3, #0]
    167c:	2800      	cmp	r0, #0
    167e:	d1d6      	bne.n	162e <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    1680:	4a10      	ldr	r2, [pc, #64]	; (16c4 <prvSampleTimeNow+0xb8>)
    1682:	490c      	ldr	r1, [pc, #48]	; (16b4 <prvSampleTimeNow+0xa8>)
    1684:	6814      	ldr	r4, [r2, #0]
    1686:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1688:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    168a:	2301      	movs	r3, #1
    168c:	4648      	mov	r0, r9
    168e:	6003      	str	r3, [r0, #0]
    1690:	e002      	b.n	1698 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    1692:	2300      	movs	r3, #0
    1694:	4649      	mov	r1, r9
    1696:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    1698:	4b05      	ldr	r3, [pc, #20]	; (16b0 <prvSampleTimeNow+0xa4>)
    169a:	4642      	mov	r2, r8
    169c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    169e:	4640      	mov	r0, r8
    16a0:	b002      	add	sp, #8
    16a2:	bc1c      	pop	{r2, r3, r4}
    16a4:	4690      	mov	r8, r2
    16a6:	4699      	mov	r9, r3
    16a8:	46a2      	mov	sl, r4
    16aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16ac:	00000e39 	.word	0x00000e39
    16b0:	20003c10 	.word	0x20003c10
    16b4:	20003be4 	.word	0x20003be4
    16b8:	000004ad 	.word	0x000004ad
    16bc:	0000047d 	.word	0x0000047d
    16c0:	000015a9 	.word	0x000015a9
    16c4:	20003c18 	.word	0x20003c18

000016c8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    16c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ca:	4647      	mov	r7, r8
    16cc:	b480      	push	{r7}
    16ce:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    16d0:	484e      	ldr	r0, [pc, #312]	; (180c <prvTimerTask+0x144>)
    16d2:	4680      	mov	r8, r0
    16d4:	4641      	mov	r1, r8
    16d6:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    16d8:	681a      	ldr	r2, [r3, #0]
    16da:	2a00      	cmp	r2, #0
    16dc:	d100      	bne.n	16e0 <prvTimerTask+0x18>
    16de:	e08a      	b.n	17f6 <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    16e0:	68db      	ldr	r3, [r3, #12]
    16e2:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    16e4:	4b4a      	ldr	r3, [pc, #296]	; (1810 <prvTimerTask+0x148>)
    16e6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    16e8:	a803      	add	r0, sp, #12
    16ea:	4b4a      	ldr	r3, [pc, #296]	; (1814 <prvTimerTask+0x14c>)
    16ec:	4798      	blx	r3
    16ee:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    16f0:	9b03      	ldr	r3, [sp, #12]
    16f2:	2b00      	cmp	r3, #0
    16f4:	d131      	bne.n	175a <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    16f6:	4284      	cmp	r4, r0
    16f8:	d823      	bhi.n	1742 <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    16fa:	4b47      	ldr	r3, [pc, #284]	; (1818 <prvTimerTask+0x150>)
    16fc:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    16fe:	4b43      	ldr	r3, [pc, #268]	; (180c <prvTimerTask+0x144>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	68db      	ldr	r3, [r3, #12]
    1704:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1706:	1d30      	adds	r0, r6, #4
    1708:	4b44      	ldr	r3, [pc, #272]	; (181c <prvTimerTask+0x154>)
    170a:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    170c:	69f7      	ldr	r7, [r6, #28]
    170e:	2f01      	cmp	r7, #1
    1710:	d113      	bne.n	173a <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1712:	69b0      	ldr	r0, [r6, #24]
    1714:	1821      	adds	r1, r4, r0
    1716:	1c30      	adds	r0, r6, #0
    1718:	1c2a      	adds	r2, r5, #0
    171a:	1c23      	adds	r3, r4, #0
    171c:	4d40      	ldr	r5, [pc, #256]	; (1820 <prvTimerTask+0x158>)
    171e:	47a8      	blx	r5
    1720:	2801      	cmp	r0, #1
    1722:	d10a      	bne.n	173a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1724:	2300      	movs	r3, #0
    1726:	9300      	str	r3, [sp, #0]
    1728:	1c30      	adds	r0, r6, #0
    172a:	2100      	movs	r1, #0
    172c:	1c22      	adds	r2, r4, #0
    172e:	4c3d      	ldr	r4, [pc, #244]	; (1824 <prvTimerTask+0x15c>)
    1730:	47a0      	blx	r4
			configASSERT( xResult );
    1732:	2800      	cmp	r0, #0
    1734:	d101      	bne.n	173a <prvTimerTask+0x72>
    1736:	b672      	cpsid	i
    1738:	e7fe      	b.n	1738 <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    173a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    173c:	1c30      	adds	r0, r6, #0
    173e:	4798      	blx	r3
    1740:	e00d      	b.n	175e <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1742:	4b39      	ldr	r3, [pc, #228]	; (1828 <prvTimerTask+0x160>)
    1744:	6818      	ldr	r0, [r3, #0]
    1746:	1b61      	subs	r1, r4, r5
    1748:	4b38      	ldr	r3, [pc, #224]	; (182c <prvTimerTask+0x164>)
    174a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    174c:	4b32      	ldr	r3, [pc, #200]	; (1818 <prvTimerTask+0x150>)
    174e:	4798      	blx	r3
    1750:	2800      	cmp	r0, #0
    1752:	d104      	bne.n	175e <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    1754:	4b36      	ldr	r3, [pc, #216]	; (1830 <prvTimerTask+0x168>)
    1756:	4798      	blx	r3
    1758:	e001      	b.n	175e <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    175a:	4b2f      	ldr	r3, [pc, #188]	; (1818 <prvTimerTask+0x150>)
    175c:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    175e:	4d32      	ldr	r5, [pc, #200]	; (1828 <prvTimerTask+0x160>)
    1760:	4c34      	ldr	r4, [pc, #208]	; (1834 <prvTimerTask+0x16c>)
    1762:	e040      	b.n	17e6 <prvTimerTask+0x11e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1764:	9903      	ldr	r1, [sp, #12]
    1766:	2900      	cmp	r1, #0
    1768:	db3d      	blt.n	17e6 <prvTimerTask+0x11e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    176a:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    176c:	6972      	ldr	r2, [r6, #20]
    176e:	2a00      	cmp	r2, #0
    1770:	d002      	beq.n	1778 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1772:	1d30      	adds	r0, r6, #4
    1774:	4b29      	ldr	r3, [pc, #164]	; (181c <prvTimerTask+0x154>)
    1776:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1778:	a802      	add	r0, sp, #8
    177a:	4b26      	ldr	r3, [pc, #152]	; (1814 <prvTimerTask+0x14c>)
    177c:	4798      	blx	r3
    177e:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    1780:	9f03      	ldr	r7, [sp, #12]
    1782:	2f09      	cmp	r7, #9
    1784:	d82f      	bhi.n	17e6 <prvTimerTask+0x11e>
    1786:	00ba      	lsls	r2, r7, #2
    1788:	492b      	ldr	r1, [pc, #172]	; (1838 <prvTimerTask+0x170>)
    178a:	588a      	ldr	r2, [r1, r2]
    178c:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    178e:	9f04      	ldr	r7, [sp, #16]
    1790:	69b2      	ldr	r2, [r6, #24]
    1792:	18b9      	adds	r1, r7, r2
    1794:	1c30      	adds	r0, r6, #0
    1796:	1c1a      	adds	r2, r3, #0
    1798:	1c3b      	adds	r3, r7, #0
    179a:	4f21      	ldr	r7, [pc, #132]	; (1820 <prvTimerTask+0x158>)
    179c:	47b8      	blx	r7
    179e:	2801      	cmp	r0, #1
    17a0:	d121      	bne.n	17e6 <prvTimerTask+0x11e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    17a2:	1c30      	adds	r0, r6, #0
    17a4:	6a71      	ldr	r1, [r6, #36]	; 0x24
    17a6:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    17a8:	69f2      	ldr	r2, [r6, #28]
    17aa:	2a01      	cmp	r2, #1
    17ac:	d11b      	bne.n	17e6 <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    17ae:	69b3      	ldr	r3, [r6, #24]
    17b0:	9f04      	ldr	r7, [sp, #16]
    17b2:	19da      	adds	r2, r3, r7
    17b4:	2300      	movs	r3, #0
    17b6:	9300      	str	r3, [sp, #0]
    17b8:	1c30      	adds	r0, r6, #0
    17ba:	2100      	movs	r1, #0
    17bc:	4e19      	ldr	r6, [pc, #100]	; (1824 <prvTimerTask+0x15c>)
    17be:	47b0      	blx	r6
							configASSERT( xResult );
    17c0:	2800      	cmp	r0, #0
    17c2:	d110      	bne.n	17e6 <prvTimerTask+0x11e>
    17c4:	b672      	cpsid	i
    17c6:	e7fe      	b.n	17c6 <prvTimerTask+0xfe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    17c8:	9904      	ldr	r1, [sp, #16]
    17ca:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    17cc:	2900      	cmp	r1, #0
    17ce:	d101      	bne.n	17d4 <prvTimerTask+0x10c>
    17d0:	b672      	cpsid	i
    17d2:	e7fe      	b.n	17d2 <prvTimerTask+0x10a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    17d4:	1859      	adds	r1, r3, r1
    17d6:	1c30      	adds	r0, r6, #0
    17d8:	1c1a      	adds	r2, r3, #0
    17da:	4e11      	ldr	r6, [pc, #68]	; (1820 <prvTimerTask+0x158>)
    17dc:	47b0      	blx	r6
    17de:	e002      	b.n	17e6 <prvTimerTask+0x11e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    17e0:	1c30      	adds	r0, r6, #0
    17e2:	4b16      	ldr	r3, [pc, #88]	; (183c <prvTimerTask+0x174>)
    17e4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    17e6:	6828      	ldr	r0, [r5, #0]
    17e8:	a903      	add	r1, sp, #12
    17ea:	2200      	movs	r2, #0
    17ec:	2300      	movs	r3, #0
    17ee:	47a0      	blx	r4
    17f0:	2800      	cmp	r0, #0
    17f2:	d1b7      	bne.n	1764 <prvTimerTask+0x9c>
    17f4:	e76e      	b.n	16d4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    17f6:	4806      	ldr	r0, [pc, #24]	; (1810 <prvTimerTask+0x148>)
    17f8:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    17fa:	a803      	add	r0, sp, #12
    17fc:	4905      	ldr	r1, [pc, #20]	; (1814 <prvTimerTask+0x14c>)
    17fe:	4788      	blx	r1
    1800:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    1802:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    1804:	9a03      	ldr	r2, [sp, #12]
    1806:	42a2      	cmp	r2, r4
    1808:	d09b      	beq.n	1742 <prvTimerTask+0x7a>
    180a:	e7a6      	b.n	175a <prvTimerTask+0x92>
    180c:	20003be4 	.word	0x20003be4
    1810:	00000e29 	.word	0x00000e29
    1814:	0000160d 	.word	0x0000160d
    1818:	00000f85 	.word	0x00000f85
    181c:	000004ad 	.word	0x000004ad
    1820:	000014b1 	.word	0x000014b1
    1824:	000015a9 	.word	0x000015a9
    1828:	20003c14 	.word	0x20003c14
    182c:	00000b05 	.word	0x00000b05
    1830:	00000295 	.word	0x00000295
    1834:	00000979 	.word	0x00000979
    1838:	00001de8 	.word	0x00001de8
    183c:	00000439 	.word	0x00000439

00001840 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1840:	b5f0      	push	{r4, r5, r6, r7, lr}
    1842:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1844:	ac01      	add	r4, sp, #4
    1846:	2501      	movs	r5, #1
    1848:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    184a:	2700      	movs	r7, #0
    184c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    184e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1850:	203e      	movs	r0, #62	; 0x3e
    1852:	1c21      	adds	r1, r4, #0
    1854:	4e06      	ldr	r6, [pc, #24]	; (1870 <system_board_init+0x30>)
    1856:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1858:	2280      	movs	r2, #128	; 0x80
    185a:	05d2      	lsls	r2, r2, #23
    185c:	4b05      	ldr	r3, [pc, #20]	; (1874 <system_board_init+0x34>)
    185e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1860:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1862:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1864:	200f      	movs	r0, #15
    1866:	1c21      	adds	r1, r4, #0
    1868:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    186a:	b003      	add	sp, #12
    186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	00001879 	.word	0x00001879
    1874:	41004480 	.word	0x41004480

00001878 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1878:	b500      	push	{lr}
    187a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    187c:	ab01      	add	r3, sp, #4
    187e:	2280      	movs	r2, #128	; 0x80
    1880:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1882:	780a      	ldrb	r2, [r1, #0]
    1884:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1886:	784a      	ldrb	r2, [r1, #1]
    1888:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    188a:	788a      	ldrb	r2, [r1, #2]
    188c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    188e:	1c19      	adds	r1, r3, #0
    1890:	4b01      	ldr	r3, [pc, #4]	; (1898 <port_pin_set_config+0x20>)
    1892:	4798      	blx	r3
}
    1894:	b003      	add	sp, #12
    1896:	bd00      	pop	{pc}
    1898:	00001b9d 	.word	0x00001b9d

0000189c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    189c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    189e:	4b0c      	ldr	r3, [pc, #48]	; (18d0 <system_clock_source_osc8m_set_config+0x34>)
    18a0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18a2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18a4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18a6:	7840      	ldrb	r0, [r0, #1]
    18a8:	2201      	movs	r2, #1
    18aa:	4010      	ands	r0, r2
    18ac:	0180      	lsls	r0, r0, #6
    18ae:	2640      	movs	r6, #64	; 0x40
    18b0:	43b4      	bics	r4, r6
    18b2:	4304      	orrs	r4, r0
    18b4:	402a      	ands	r2, r5
    18b6:	01d0      	lsls	r0, r2, #7
    18b8:	2280      	movs	r2, #128	; 0x80
    18ba:	4394      	bics	r4, r2
    18bc:	1c22      	adds	r2, r4, #0
    18be:	4302      	orrs	r2, r0
    18c0:	2003      	movs	r0, #3
    18c2:	4001      	ands	r1, r0
    18c4:	0209      	lsls	r1, r1, #8
    18c6:	4803      	ldr	r0, [pc, #12]	; (18d4 <system_clock_source_osc8m_set_config+0x38>)
    18c8:	4002      	ands	r2, r0
    18ca:	430a      	orrs	r2, r1
    18cc:	621a      	str	r2, [r3, #32]
}
    18ce:	bd70      	pop	{r4, r5, r6, pc}
    18d0:	40000800 	.word	0x40000800
    18d4:	fffffcff 	.word	0xfffffcff

000018d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18d8:	2808      	cmp	r0, #8
    18da:	d846      	bhi.n	196a <system_clock_source_enable+0x92>
    18dc:	0080      	lsls	r0, r0, #2
    18de:	4b24      	ldr	r3, [pc, #144]	; (1970 <system_clock_source_enable+0x98>)
    18e0:	581b      	ldr	r3, [r3, r0]
    18e2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    18e4:	2000      	movs	r0, #0
    18e6:	e041      	b.n	196c <system_clock_source_enable+0x94>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18e8:	4b22      	ldr	r3, [pc, #136]	; (1974 <system_clock_source_enable+0x9c>)
    18ea:	6a19      	ldr	r1, [r3, #32]
    18ec:	2202      	movs	r2, #2
    18ee:	430a      	orrs	r2, r1
    18f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    18f2:	2000      	movs	r0, #0
    18f4:	e03a      	b.n	196c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18f6:	4b1f      	ldr	r3, [pc, #124]	; (1974 <system_clock_source_enable+0x9c>)
    18f8:	6999      	ldr	r1, [r3, #24]
    18fa:	2202      	movs	r2, #2
    18fc:	430a      	orrs	r2, r1
    18fe:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1900:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1902:	e033      	b.n	196c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1904:	4b1b      	ldr	r3, [pc, #108]	; (1974 <system_clock_source_enable+0x9c>)
    1906:	691a      	ldr	r2, [r3, #16]
    1908:	b292      	uxth	r2, r2
    190a:	2102      	movs	r1, #2
    190c:	430a      	orrs	r2, r1
    190e:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1910:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1912:	e02b      	b.n	196c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1914:	4b17      	ldr	r3, [pc, #92]	; (1974 <system_clock_source_enable+0x9c>)
    1916:	695a      	ldr	r2, [r3, #20]
    1918:	b292      	uxth	r2, r2
    191a:	2102      	movs	r1, #2
    191c:	430a      	orrs	r2, r1
    191e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1920:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1922:	e023      	b.n	196c <system_clock_source_enable+0x94>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1924:	4b14      	ldr	r3, [pc, #80]	; (1978 <system_clock_source_enable+0xa0>)
    1926:	6819      	ldr	r1, [r3, #0]
    1928:	2202      	movs	r2, #2
    192a:	430a      	orrs	r2, r1
    192c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    192e:	681a      	ldr	r2, [r3, #0]
    1930:	4b12      	ldr	r3, [pc, #72]	; (197c <system_clock_source_enable+0xa4>)
    1932:	401a      	ands	r2, r3
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <system_clock_source_enable+0x9c>)
    1936:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1938:	1c19      	adds	r1, r3, #0
    193a:	2210      	movs	r2, #16
    193c:	68cb      	ldr	r3, [r1, #12]
    193e:	421a      	tst	r2, r3
    1940:	d0fc      	beq.n	193c <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1942:	4a0d      	ldr	r2, [pc, #52]	; (1978 <system_clock_source_enable+0xa0>)
    1944:	6891      	ldr	r1, [r2, #8]
    1946:	4b0b      	ldr	r3, [pc, #44]	; (1974 <system_clock_source_enable+0x9c>)
    1948:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    194a:	6851      	ldr	r1, [r2, #4]
    194c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    194e:	6812      	ldr	r2, [r2, #0]
    1950:	b292      	uxth	r2, r2
    1952:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1954:	2000      	movs	r0, #0
    1956:	e009      	b.n	196c <system_clock_source_enable+0x94>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1958:	4b06      	ldr	r3, [pc, #24]	; (1974 <system_clock_source_enable+0x9c>)
    195a:	6c59      	ldr	r1, [r3, #68]	; 0x44
    195c:	b2c9      	uxtb	r1, r1
    195e:	2202      	movs	r2, #2
    1960:	4311      	orrs	r1, r2
    1962:	2244      	movs	r2, #68	; 0x44
    1964:	5499      	strb	r1, [r3, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1966:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1968:	e000      	b.n	196c <system_clock_source_enable+0x94>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    196a:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    196c:	4770      	bx	lr
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	00001e18 	.word	0x00001e18
    1974:	40000800 	.word	0x40000800
    1978:	20003c1c 	.word	0x20003c1c
    197c:	0000ff7f 	.word	0x0000ff7f

00001980 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1980:	b530      	push	{r4, r5, lr}
    1982:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1984:	22c2      	movs	r2, #194	; 0xc2
    1986:	00d2      	lsls	r2, r2, #3
    1988:	4b13      	ldr	r3, [pc, #76]	; (19d8 <system_clock_init+0x58>)
    198a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    198c:	4b13      	ldr	r3, [pc, #76]	; (19dc <system_clock_init+0x5c>)
    198e:	685a      	ldr	r2, [r3, #4]
    1990:	211e      	movs	r1, #30
    1992:	438a      	bics	r2, r1
    1994:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1996:	a803      	add	r0, sp, #12
    1998:	2400      	movs	r4, #0
    199a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    199c:	2501      	movs	r5, #1
    199e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    19a0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    19a2:	4b0f      	ldr	r3, [pc, #60]	; (19e0 <system_clock_init+0x60>)
    19a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19a6:	2006      	movs	r0, #6
    19a8:	4b0e      	ldr	r3, [pc, #56]	; (19e4 <system_clock_init+0x64>)
    19aa:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19ac:	4b0e      	ldr	r3, [pc, #56]	; (19e8 <system_clock_init+0x68>)
    19ae:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    19b0:	4b0e      	ldr	r3, [pc, #56]	; (19ec <system_clock_init+0x6c>)
    19b2:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    19b4:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    19b6:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    19b8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    19ba:	466a      	mov	r2, sp
    19bc:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    19be:	2306      	movs	r3, #6
    19c0:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    19c2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    19c4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19c6:	2000      	movs	r0, #0
    19c8:	4669      	mov	r1, sp
    19ca:	4b09      	ldr	r3, [pc, #36]	; (19f0 <system_clock_init+0x70>)
    19cc:	4798      	blx	r3
    19ce:	2000      	movs	r0, #0
    19d0:	4b08      	ldr	r3, [pc, #32]	; (19f4 <system_clock_init+0x74>)
    19d2:	4798      	blx	r3
#endif
}
    19d4:	b005      	add	sp, #20
    19d6:	bd30      	pop	{r4, r5, pc}
    19d8:	40000800 	.word	0x40000800
    19dc:	41004000 	.word	0x41004000
    19e0:	0000189d 	.word	0x0000189d
    19e4:	000018d9 	.word	0x000018d9
    19e8:	000019f9 	.word	0x000019f9
    19ec:	40000400 	.word	0x40000400
    19f0:	00001a1d 	.word	0x00001a1d
    19f4:	00001acd 	.word	0x00001acd

000019f8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    19f8:	4b06      	ldr	r3, [pc, #24]	; (1a14 <system_gclk_init+0x1c>)
    19fa:	6999      	ldr	r1, [r3, #24]
    19fc:	2208      	movs	r2, #8
    19fe:	430a      	orrs	r2, r1
    1a00:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a02:	2201      	movs	r2, #1
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <system_gclk_init+0x20>)
    1a06:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a08:	1c19      	adds	r1, r3, #0
    1a0a:	680b      	ldr	r3, [r1, #0]
    1a0c:	4213      	tst	r3, r2
    1a0e:	d1fc      	bne.n	1a0a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a10:	4770      	bx	lr
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	40000400 	.word	0x40000400
    1a18:	40000c00 	.word	0x40000c00

00001a1c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a1e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a20:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a22:	780d      	ldrb	r5, [r1, #0]
    1a24:	022d      	lsls	r5, r5, #8
    1a26:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a28:	784b      	ldrb	r3, [r1, #1]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d002      	beq.n	1a34 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a2e:	2380      	movs	r3, #128	; 0x80
    1a30:	02db      	lsls	r3, r3, #11
    1a32:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a34:	7a4b      	ldrb	r3, [r1, #9]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d002      	beq.n	1a40 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a3a:	2380      	movs	r3, #128	; 0x80
    1a3c:	031b      	lsls	r3, r3, #12
    1a3e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a40:	684c      	ldr	r4, [r1, #4]
    1a42:	2c01      	cmp	r4, #1
    1a44:	d917      	bls.n	1a76 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a46:	1e63      	subs	r3, r4, #1
    1a48:	421c      	tst	r4, r3
    1a4a:	d10f      	bne.n	1a6c <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a4c:	2c02      	cmp	r4, #2
    1a4e:	d906      	bls.n	1a5e <system_gclk_gen_set_config+0x42>
    1a50:	2302      	movs	r3, #2
    1a52:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a54:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a56:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a58:	429c      	cmp	r4, r3
    1a5a:	d8fb      	bhi.n	1a54 <system_gclk_gen_set_config+0x38>
    1a5c:	e000      	b.n	1a60 <system_gclk_gen_set_config+0x44>
    1a5e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a60:	0217      	lsls	r7, r2, #8
    1a62:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a64:	2380      	movs	r3, #128	; 0x80
    1a66:	035b      	lsls	r3, r3, #13
    1a68:	431d      	orrs	r5, r3
    1a6a:	e004      	b.n	1a76 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1a6c:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1a6e:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a70:	2380      	movs	r3, #128	; 0x80
    1a72:	029b      	lsls	r3, r3, #10
    1a74:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a76:	7a0b      	ldrb	r3, [r1, #8]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d002      	beq.n	1a82 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a7c:	2380      	movs	r3, #128	; 0x80
    1a7e:	039b      	lsls	r3, r3, #14
    1a80:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    1a82:	4a0e      	ldr	r2, [pc, #56]	; (1abc <system_gclk_gen_set_config+0xa0>)
    1a84:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
    1a86:	0419      	lsls	r1, r3, #16
    1a88:	d4fc      	bmi.n	1a84 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1a8a:	4b0d      	ldr	r3, [pc, #52]	; (1ac0 <system_gclk_gen_set_config+0xa4>)
    1a8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a8e:	4b0d      	ldr	r3, [pc, #52]	; (1ac4 <system_gclk_gen_set_config+0xa8>)
    1a90:	701e      	strb	r6, [r3, #0]
    1a92:	490a      	ldr	r1, [pc, #40]	; (1abc <system_gclk_gen_set_config+0xa0>)
    1a94:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a96:	041a      	lsls	r2, r3, #16
    1a98:	d4fc      	bmi.n	1a94 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a9a:	4b08      	ldr	r3, [pc, #32]	; (1abc <system_gclk_gen_set_config+0xa0>)
    1a9c:	609f      	str	r7, [r3, #8]
    1a9e:	1c1a      	adds	r2, r3, #0
    1aa0:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
    1aa2:	0419      	lsls	r1, r3, #16
    1aa4:	d4fc      	bmi.n	1aa0 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1aa6:	4b05      	ldr	r3, [pc, #20]	; (1abc <system_gclk_gen_set_config+0xa0>)
    1aa8:	6859      	ldr	r1, [r3, #4]
    1aaa:	2280      	movs	r2, #128	; 0x80
    1aac:	0252      	lsls	r2, r2, #9
    1aae:	400a      	ands	r2, r1
    1ab0:	4315      	orrs	r5, r2
    1ab2:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <system_gclk_gen_set_config+0xac>)
    1ab6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	40000c00 	.word	0x40000c00
    1ac0:	0000016d 	.word	0x0000016d
    1ac4:	40000c08 	.word	0x40000c08
    1ac8:	000001ad 	.word	0x000001ad

00001acc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1acc:	b510      	push	{r4, lr}
    1ace:	1c04      	adds	r4, r0, #0
    1ad0:	4a0a      	ldr	r2, [pc, #40]	; (1afc <system_gclk_gen_enable+0x30>)
    1ad2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1ad4:	0419      	lsls	r1, r3, #16
    1ad6:	d4fc      	bmi.n	1ad2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ad8:	4b09      	ldr	r3, [pc, #36]	; (1b00 <system_gclk_gen_enable+0x34>)
    1ada:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1adc:	4b09      	ldr	r3, [pc, #36]	; (1b04 <system_gclk_gen_enable+0x38>)
    1ade:	701c      	strb	r4, [r3, #0]
    1ae0:	4a06      	ldr	r2, [pc, #24]	; (1afc <system_gclk_gen_enable+0x30>)
    1ae2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1ae4:	0419      	lsls	r1, r3, #16
    1ae6:	d4fc      	bmi.n	1ae2 <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <system_gclk_gen_enable+0x30>)
    1aea:	6859      	ldr	r1, [r3, #4]
    1aec:	2280      	movs	r2, #128	; 0x80
    1aee:	0252      	lsls	r2, r2, #9
    1af0:	430a      	orrs	r2, r1
    1af2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1af4:	4b04      	ldr	r3, [pc, #16]	; (1b08 <system_gclk_gen_enable+0x3c>)
    1af6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1af8:	bd10      	pop	{r4, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	40000c00 	.word	0x40000c00
    1b00:	0000016d 	.word	0x0000016d
    1b04:	40000c04 	.word	0x40000c04
    1b08:	000001ad 	.word	0x000001ad

00001b0c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b0c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b0e:	78d3      	ldrb	r3, [r2, #3]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d11f      	bne.n	1b54 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b14:	7813      	ldrb	r3, [r2, #0]
    1b16:	2b80      	cmp	r3, #128	; 0x80
    1b18:	d004      	beq.n	1b24 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b1a:	061b      	lsls	r3, r3, #24
    1b1c:	2480      	movs	r4, #128	; 0x80
    1b1e:	0264      	lsls	r4, r4, #9
    1b20:	4323      	orrs	r3, r4
    1b22:	e000      	b.n	1b26 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1b24:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b26:	7854      	ldrb	r4, [r2, #1]
    1b28:	2502      	movs	r5, #2
    1b2a:	43ac      	bics	r4, r5
    1b2c:	d10a      	bne.n	1b44 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b2e:	7894      	ldrb	r4, [r2, #2]
    1b30:	2c00      	cmp	r4, #0
    1b32:	d103      	bne.n	1b3c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b34:	2480      	movs	r4, #128	; 0x80
    1b36:	02a4      	lsls	r4, r4, #10
    1b38:	4323      	orrs	r3, r4
    1b3a:	e002      	b.n	1b42 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b3c:	24c0      	movs	r4, #192	; 0xc0
    1b3e:	02e4      	lsls	r4, r4, #11
    1b40:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b42:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b44:	7854      	ldrb	r4, [r2, #1]
    1b46:	3c01      	subs	r4, #1
    1b48:	b2e4      	uxtb	r4, r4
    1b4a:	2c01      	cmp	r4, #1
    1b4c:	d804      	bhi.n	1b58 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b4e:	4c12      	ldr	r4, [pc, #72]	; (1b98 <_system_pinmux_config+0x8c>)
    1b50:	4023      	ands	r3, r4
    1b52:	e001      	b.n	1b58 <_system_pinmux_config+0x4c>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b54:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1b56:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b58:	040d      	lsls	r5, r1, #16
    1b5a:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b5c:	24a0      	movs	r4, #160	; 0xa0
    1b5e:	05e4      	lsls	r4, r4, #23
    1b60:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b62:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b64:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b66:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b68:	24d0      	movs	r4, #208	; 0xd0
    1b6a:	0624      	lsls	r4, r4, #24
    1b6c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b6e:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b70:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b72:	78d4      	ldrb	r4, [r2, #3]
    1b74:	2c00      	cmp	r4, #0
    1b76:	d10d      	bne.n	1b94 <_system_pinmux_config+0x88>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b78:	035c      	lsls	r4, r3, #13
    1b7a:	d505      	bpl.n	1b88 <_system_pinmux_config+0x7c>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b7c:	7893      	ldrb	r3, [r2, #2]
    1b7e:	2b01      	cmp	r3, #1
    1b80:	d101      	bne.n	1b86 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1b82:	6181      	str	r1, [r0, #24]
    1b84:	e000      	b.n	1b88 <_system_pinmux_config+0x7c>
			} else {
				port->OUTCLR.reg = pin_mask;
    1b86:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b88:	7853      	ldrb	r3, [r2, #1]
    1b8a:	3b01      	subs	r3, #1
    1b8c:	b2db      	uxtb	r3, r3
    1b8e:	2b01      	cmp	r3, #1
    1b90:	d800      	bhi.n	1b94 <_system_pinmux_config+0x88>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b92:	6081      	str	r1, [r0, #8]
		}
	}
}
    1b94:	bd30      	pop	{r4, r5, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	fffbffff 	.word	0xfffbffff

00001b9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b9c:	b508      	push	{r3, lr}
    1b9e:	1c03      	adds	r3, r0, #0
    1ba0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ba2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1ba4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ba6:	2900      	cmp	r1, #0
    1ba8:	d103      	bne.n	1bb2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1baa:	0958      	lsrs	r0, r3, #5
    1bac:	01c0      	lsls	r0, r0, #7
    1bae:	4904      	ldr	r1, [pc, #16]	; (1bc0 <system_pinmux_pin_set_config+0x24>)
    1bb0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bb2:	211f      	movs	r1, #31
    1bb4:	400b      	ands	r3, r1
    1bb6:	2101      	movs	r1, #1
    1bb8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <system_pinmux_pin_set_config+0x28>)
    1bbc:	4798      	blx	r3
}
    1bbe:	bd08      	pop	{r3, pc}
    1bc0:	41004400 	.word	0x41004400
    1bc4:	00001b0d 	.word	0x00001b0d

00001bc8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bc8:	4770      	bx	lr
    1bca:	46c0      	nop			; (mov r8, r8)

00001bcc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bcc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <system_init+0x14>)
    1bd0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bd2:	4b04      	ldr	r3, [pc, #16]	; (1be4 <system_init+0x18>)
    1bd4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1bd6:	4b04      	ldr	r3, [pc, #16]	; (1be8 <system_init+0x1c>)
    1bd8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1bda:	4b04      	ldr	r3, [pc, #16]	; (1bec <system_init+0x20>)
    1bdc:	4798      	blx	r3
}
    1bde:	bd08      	pop	{r3, pc}
    1be0:	00001981 	.word	0x00001981
    1be4:	00001841 	.word	0x00001841
    1be8:	00001bc9 	.word	0x00001bc9
    1bec:	00001bc9 	.word	0x00001bc9

00001bf0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1bf0:	e7fe      	b.n	1bf0 <Dummy_Handler>
    1bf2:	46c0      	nop			; (mov r8, r8)

00001bf4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1bf4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1bf6:	4b19      	ldr	r3, [pc, #100]	; (1c5c <Reset_Handler+0x68>)
    1bf8:	4a19      	ldr	r2, [pc, #100]	; (1c60 <Reset_Handler+0x6c>)
    1bfa:	429a      	cmp	r2, r3
    1bfc:	d003      	beq.n	1c06 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1bfe:	4b19      	ldr	r3, [pc, #100]	; (1c64 <Reset_Handler+0x70>)
    1c00:	4a16      	ldr	r2, [pc, #88]	; (1c5c <Reset_Handler+0x68>)
    1c02:	429a      	cmp	r2, r3
    1c04:	d304      	bcc.n	1c10 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1c06:	4b18      	ldr	r3, [pc, #96]	; (1c68 <Reset_Handler+0x74>)
    1c08:	4a18      	ldr	r2, [pc, #96]	; (1c6c <Reset_Handler+0x78>)
    1c0a:	429a      	cmp	r2, r3
    1c0c:	d310      	bcc.n	1c30 <Reset_Handler+0x3c>
    1c0e:	e01b      	b.n	1c48 <Reset_Handler+0x54>
    1c10:	4b17      	ldr	r3, [pc, #92]	; (1c70 <Reset_Handler+0x7c>)
    1c12:	4814      	ldr	r0, [pc, #80]	; (1c64 <Reset_Handler+0x70>)
    1c14:	3003      	adds	r0, #3
    1c16:	1ac0      	subs	r0, r0, r3
    1c18:	0880      	lsrs	r0, r0, #2
    1c1a:	3001      	adds	r0, #1
    1c1c:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1c1e:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1c20:	490e      	ldr	r1, [pc, #56]	; (1c5c <Reset_Handler+0x68>)
    1c22:	4a0f      	ldr	r2, [pc, #60]	; (1c60 <Reset_Handler+0x6c>)
    1c24:	58d4      	ldr	r4, [r2, r3]
    1c26:	50cc      	str	r4, [r1, r3]
    1c28:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1c2a:	4283      	cmp	r3, r0
    1c2c:	d1fa      	bne.n	1c24 <Reset_Handler+0x30>
    1c2e:	e7ea      	b.n	1c06 <Reset_Handler+0x12>
    1c30:	4b0e      	ldr	r3, [pc, #56]	; (1c6c <Reset_Handler+0x78>)
    1c32:	1d1a      	adds	r2, r3, #4
    1c34:	490c      	ldr	r1, [pc, #48]	; (1c68 <Reset_Handler+0x74>)
    1c36:	3103      	adds	r1, #3
    1c38:	1a89      	subs	r1, r1, r2
    1c3a:	0889      	lsrs	r1, r1, #2
    1c3c:	0089      	lsls	r1, r1, #2
    1c3e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1c40:	2100      	movs	r1, #0
    1c42:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1c44:	4293      	cmp	r3, r2
    1c46:	d1fc      	bne.n	1c42 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <Reset_Handler+0x80>)
    1c4a:	217f      	movs	r1, #127	; 0x7f
    1c4c:	4a0a      	ldr	r2, [pc, #40]	; (1c78 <Reset_Handler+0x84>)
    1c4e:	438a      	bics	r2, r1
    1c50:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1c52:	4b0a      	ldr	r3, [pc, #40]	; (1c7c <Reset_Handler+0x88>)
    1c54:	4798      	blx	r3

        /* Branch to main function */
        main();
    1c56:	4b0a      	ldr	r3, [pc, #40]	; (1c80 <Reset_Handler+0x8c>)
    1c58:	4798      	blx	r3
    1c5a:	e7fe      	b.n	1c5a <Reset_Handler+0x66>
    1c5c:	20000000 	.word	0x20000000
    1c60:	00001e68 	.word	0x00001e68
    1c64:	2000000c 	.word	0x2000000c
    1c68:	20003c34 	.word	0x20003c34
    1c6c:	2000000c 	.word	0x2000000c
    1c70:	20000004 	.word	0x20000004
    1c74:	e000ed00 	.word	0xe000ed00
    1c78:	00000000 	.word	0x00000000
    1c7c:	00001d15 	.word	0x00001d15
    1c80:	00001cb9 	.word	0x00001cb9

00001c84 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
    1c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1c86:	4f05      	ldr	r7, [pc, #20]	; (1c9c <task_led+0x18>)
    1c88:	2680      	movs	r6, #128	; 0x80
    1c8a:	05f6      	lsls	r6, r6, #23
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
	#endif
		vTaskDelay(1000);
    1c8c:	25fa      	movs	r5, #250	; 0xfa
    1c8e:	00ad      	lsls	r5, r5, #2
    1c90:	4c03      	ldr	r4, [pc, #12]	; (1ca0 <task_led+0x1c>)
    1c92:	61fe      	str	r6, [r7, #28]
    1c94:	1c28      	adds	r0, r5, #0
    1c96:	47a0      	blx	r4
    1c98:	e7fb      	b.n	1c92 <task_led+0xe>
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	41004480 	.word	0x41004480
    1ca0:	0000107d 	.word	0x0000107d

00001ca4 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
    1ca4:	b538      	push	{r3, r4, r5, lr}

	for (;;) {
		//printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());
		//vTaskList((signed portCHAR *)szList);
		//printf(szList);
		vTaskDelay(1000);
    1ca6:	25fa      	movs	r5, #250	; 0xfa
    1ca8:	00ad      	lsls	r5, r5, #2
    1caa:	4c02      	ldr	r4, [pc, #8]	; (1cb4 <task_monitor+0x10>)
    1cac:	1c28      	adds	r0, r5, #0
    1cae:	47a0      	blx	r4
    1cb0:	e7fc      	b.n	1cac <task_monitor+0x8>
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	0000107d 	.word	0x0000107d

00001cb8 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{	
    1cb8:	b530      	push	{r4, r5, lr}
    1cba:	b085      	sub	sp, #20
	
	
	
	/* Initilize the SAM system */
	system_init();
    1cbc:	4b0e      	ldr	r3, [pc, #56]	; (1cf8 <main+0x40>)
    1cbe:	4798      	blx	r3
	//printf("-- Freertos Example --\n\r");
	//printf("-- %s\n\r", BOARD_NAME);
	//printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);

	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
    1cc0:	2400      	movs	r4, #0
    1cc2:	9400      	str	r4, [sp, #0]
    1cc4:	9401      	str	r4, [sp, #4]
    1cc6:	9402      	str	r4, [sp, #8]
    1cc8:	9403      	str	r4, [sp, #12]
    1cca:	480c      	ldr	r0, [pc, #48]	; (1cfc <main+0x44>)
    1ccc:	490c      	ldr	r1, [pc, #48]	; (1d00 <main+0x48>)
    1cce:	2280      	movs	r2, #128	; 0x80
    1cd0:	0092      	lsls	r2, r2, #2
    1cd2:	2300      	movs	r3, #0
    1cd4:	4d0b      	ldr	r5, [pc, #44]	; (1d04 <main+0x4c>)
    1cd6:	47a8      	blx	r5
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Monitor task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
    1cd8:	9400      	str	r4, [sp, #0]
    1cda:	9401      	str	r4, [sp, #4]
    1cdc:	9402      	str	r4, [sp, #8]
    1cde:	9403      	str	r4, [sp, #12]
    1ce0:	4809      	ldr	r0, [pc, #36]	; (1d08 <main+0x50>)
    1ce2:	490a      	ldr	r1, [pc, #40]	; (1d0c <main+0x54>)
    1ce4:	2280      	movs	r2, #128	; 0x80
    1ce6:	0052      	lsls	r2, r2, #1
    1ce8:	2300      	movs	r3, #0
    1cea:	47a8      	blx	r5
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
    1cec:	4b08      	ldr	r3, [pc, #32]	; (1d10 <main+0x58>)
    1cee:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
    1cf0:	2000      	movs	r0, #0
    1cf2:	b005      	add	sp, #20
    1cf4:	bd30      	pop	{r4, r5, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00001bcd 	.word	0x00001bcd
    1cfc:	00001ca5 	.word	0x00001ca5
    1d00:	00001e3c 	.word	0x00001e3c
    1d04:	00000bd5 	.word	0x00000bd5
    1d08:	00001c85 	.word	0x00001c85
    1d0c:	00001e44 	.word	0x00001e44
    1d10:	00000dc9 	.word	0x00000dc9

00001d14 <__libc_init_array>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	4e0d      	ldr	r6, [pc, #52]	; (1d4c <__libc_init_array+0x38>)
    1d18:	4d0d      	ldr	r5, [pc, #52]	; (1d50 <__libc_init_array+0x3c>)
    1d1a:	2400      	movs	r4, #0
    1d1c:	1bad      	subs	r5, r5, r6
    1d1e:	10ad      	asrs	r5, r5, #2
    1d20:	d005      	beq.n	1d2e <__libc_init_array+0x1a>
    1d22:	00a3      	lsls	r3, r4, #2
    1d24:	58f3      	ldr	r3, [r6, r3]
    1d26:	3401      	adds	r4, #1
    1d28:	4798      	blx	r3
    1d2a:	42a5      	cmp	r5, r4
    1d2c:	d1f9      	bne.n	1d22 <__libc_init_array+0xe>
    1d2e:	f000 f88b 	bl	1e48 <_init>
    1d32:	4e08      	ldr	r6, [pc, #32]	; (1d54 <__libc_init_array+0x40>)
    1d34:	4d08      	ldr	r5, [pc, #32]	; (1d58 <__libc_init_array+0x44>)
    1d36:	2400      	movs	r4, #0
    1d38:	1bad      	subs	r5, r5, r6
    1d3a:	10ad      	asrs	r5, r5, #2
    1d3c:	d005      	beq.n	1d4a <__libc_init_array+0x36>
    1d3e:	00a3      	lsls	r3, r4, #2
    1d40:	58f3      	ldr	r3, [r6, r3]
    1d42:	3401      	adds	r4, #1
    1d44:	4798      	blx	r3
    1d46:	42a5      	cmp	r5, r4
    1d48:	d1f9      	bne.n	1d3e <__libc_init_array+0x2a>
    1d4a:	bd70      	pop	{r4, r5, r6, pc}
    1d4c:	00001e54 	.word	0x00001e54
    1d50:	00001e54 	.word	0x00001e54
    1d54:	00001e54 	.word	0x00001e54
    1d58:	00001e58 	.word	0x00001e58

00001d5c <memcpy>:
    1d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5e:	2a0f      	cmp	r2, #15
    1d60:	d935      	bls.n	1dce <memcpy+0x72>
    1d62:	1c03      	adds	r3, r0, #0
    1d64:	430b      	orrs	r3, r1
    1d66:	079c      	lsls	r4, r3, #30
    1d68:	d135      	bne.n	1dd6 <memcpy+0x7a>
    1d6a:	1c16      	adds	r6, r2, #0
    1d6c:	3e10      	subs	r6, #16
    1d6e:	0936      	lsrs	r6, r6, #4
    1d70:	0135      	lsls	r5, r6, #4
    1d72:	1945      	adds	r5, r0, r5
    1d74:	3510      	adds	r5, #16
    1d76:	1c0c      	adds	r4, r1, #0
    1d78:	1c03      	adds	r3, r0, #0
    1d7a:	6827      	ldr	r7, [r4, #0]
    1d7c:	601f      	str	r7, [r3, #0]
    1d7e:	6867      	ldr	r7, [r4, #4]
    1d80:	605f      	str	r7, [r3, #4]
    1d82:	68a7      	ldr	r7, [r4, #8]
    1d84:	609f      	str	r7, [r3, #8]
    1d86:	68e7      	ldr	r7, [r4, #12]
    1d88:	3410      	adds	r4, #16
    1d8a:	60df      	str	r7, [r3, #12]
    1d8c:	3310      	adds	r3, #16
    1d8e:	42ab      	cmp	r3, r5
    1d90:	d1f3      	bne.n	1d7a <memcpy+0x1e>
    1d92:	1c73      	adds	r3, r6, #1
    1d94:	011b      	lsls	r3, r3, #4
    1d96:	18c5      	adds	r5, r0, r3
    1d98:	18c9      	adds	r1, r1, r3
    1d9a:	230f      	movs	r3, #15
    1d9c:	4013      	ands	r3, r2
    1d9e:	2b03      	cmp	r3, #3
    1da0:	d91b      	bls.n	1dda <memcpy+0x7e>
    1da2:	1f1c      	subs	r4, r3, #4
    1da4:	08a4      	lsrs	r4, r4, #2
    1da6:	3401      	adds	r4, #1
    1da8:	00a4      	lsls	r4, r4, #2
    1daa:	2300      	movs	r3, #0
    1dac:	58ce      	ldr	r6, [r1, r3]
    1dae:	50ee      	str	r6, [r5, r3]
    1db0:	3304      	adds	r3, #4
    1db2:	42a3      	cmp	r3, r4
    1db4:	d1fa      	bne.n	1dac <memcpy+0x50>
    1db6:	18ed      	adds	r5, r5, r3
    1db8:	18c9      	adds	r1, r1, r3
    1dba:	2303      	movs	r3, #3
    1dbc:	401a      	ands	r2, r3
    1dbe:	d005      	beq.n	1dcc <memcpy+0x70>
    1dc0:	2300      	movs	r3, #0
    1dc2:	5ccc      	ldrb	r4, [r1, r3]
    1dc4:	54ec      	strb	r4, [r5, r3]
    1dc6:	3301      	adds	r3, #1
    1dc8:	4293      	cmp	r3, r2
    1dca:	d1fa      	bne.n	1dc2 <memcpy+0x66>
    1dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dce:	1c05      	adds	r5, r0, #0
    1dd0:	2a00      	cmp	r2, #0
    1dd2:	d1f5      	bne.n	1dc0 <memcpy+0x64>
    1dd4:	e7fa      	b.n	1dcc <memcpy+0x70>
    1dd6:	1c05      	adds	r5, r0, #0
    1dd8:	e7f2      	b.n	1dc0 <memcpy+0x64>
    1dda:	1c1a      	adds	r2, r3, #0
    1ddc:	e7f8      	b.n	1dd0 <memcpy+0x74>
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	454c4449 	.word	0x454c4449
    1de4:	00000000 	.word	0x00000000
    1de8:	0000178e 	.word	0x0000178e
    1dec:	0000178e 	.word	0x0000178e
    1df0:	0000178e 	.word	0x0000178e
    1df4:	000017e6 	.word	0x000017e6
    1df8:	000017c8 	.word	0x000017c8
    1dfc:	000017e0 	.word	0x000017e0
    1e00:	0000178e 	.word	0x0000178e
    1e04:	0000178e 	.word	0x0000178e
    1e08:	000017e6 	.word	0x000017e6
    1e0c:	000017c8 	.word	0x000017c8
    1e10:	20726d54 	.word	0x20726d54
    1e14:	00637653 	.word	0x00637653
    1e18:	00001904 	.word	0x00001904
    1e1c:	0000196a 	.word	0x0000196a
    1e20:	0000196a 	.word	0x0000196a
    1e24:	000018e4 	.word	0x000018e4
    1e28:	000018f6 	.word	0x000018f6
    1e2c:	00001914 	.word	0x00001914
    1e30:	000018e8 	.word	0x000018e8
    1e34:	00001924 	.word	0x00001924
    1e38:	00001958 	.word	0x00001958
    1e3c:	696e6f4d 	.word	0x696e6f4d
    1e40:	00726f74 	.word	0x00726f74
    1e44:	0064654c 	.word	0x0064654c

00001e48 <_init>:
    1e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e4e:	bc08      	pop	{r3}
    1e50:	469e      	mov	lr, r3
    1e52:	4770      	bx	lr

00001e54 <__init_array_start>:
    1e54:	00000131 	.word	0x00000131

00001e58 <_fini>:
    1e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e5e:	bc08      	pop	{r3}
    1e60:	469e      	mov	lr, r3
    1e62:	4770      	bx	lr

00001e64 <__fini_array_start>:
    1e64:	00000105 	.word	0x00000105
