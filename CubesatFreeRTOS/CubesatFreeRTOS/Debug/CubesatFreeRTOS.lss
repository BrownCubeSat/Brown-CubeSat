
CubesatFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000784c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  0000784c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000184  20000078  000078c4  00010078  2**2
                  ALLOC
  3 .stack        00002004  200001fc  00007a48  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000230c0  00000000  00000000  000100fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f45  00000000  00000000  000331bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002fe6  00000000  00000000  00036100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000958  00000000  00000000  000390e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e8  00000000  00000000  00039a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007be2  00000000  00000000  0003a226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e22f  00000000  00000000  00041e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c895  00000000  00000000  00050037  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002954  00000000  00000000  000dc8cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
	MLX90614_read(&temp_buf, TA_ADDR);
	printf("%02x, %02x\r\n", temp_buf[0], temp_buf[1]);
	return calcTemperature((temp_buf[1] << 8) | temp_buf[0]);
}

float calcTemperature(int16_t rawTemp) {
       0:	20002200 	.word	0x20002200
       4:	00002e45 	.word	0x00002e45
       8:	00002ec9 	.word	0x00002ec9
	float t = rawTemp;
       c:	00002ec9 	.word	0x00002ec9
	...
	printf("%f\r\n", t);
      2c:	00001e5d 	.word	0x00001e5d
	...
	return (t * 0.02 - 273.15) * 9.0 / 5.0 + 32;
      38:	00001e79 	.word	0x00001e79
      3c:	00001ebd 	.word	0x00001ebd
      40:	00002ec9 	.word	0x00002ec9
      44:	00002ec9 	.word	0x00002ec9
      48:	00002ec9 	.word	0x00002ec9
      4c:	00002ec9 	.word	0x00002ec9
      50:	00002ec9 	.word	0x00002ec9
      54:	00002ec9 	.word	0x00002ec9
      58:	00002ec9 	.word	0x00002ec9
      5c:	00002ec9 	.word	0x00002ec9
      60:	00002ec9 	.word	0x00002ec9
      64:	000011b9 	.word	0x000011b9
      68:	000011cd 	.word	0x000011cd
      6c:	000011e1 	.word	0x000011e1
      70:	000011f5 	.word	0x000011f5
      74:	00001209 	.word	0x00001209
      78:	0000121d 	.word	0x0000121d
      7c:	00002ec9 	.word	0x00002ec9
      80:	00002ec9 	.word	0x00002ec9
      84:	00002ec9 	.word	0x00002ec9
      88:	00002ec9 	.word	0x00002ec9
      8c:	00002ec9 	.word	0x00002ec9
      90:	00002ec9 	.word	0x00002ec9
      94:	00002ec9 	.word	0x00002ec9
      98:	00002ec9 	.word	0x00002ec9
      9c:	00002ec9 	.word	0x00002ec9
      a0:	00002ec9 	.word	0x00002ec9
      a4:	00002ec9 	.word	0x00002ec9
      a8:	00002ec9 	.word	0x00002ec9
}
      ac:	00002ec9 	.word	0x00002ec9

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000078 	.word	0x20000078
      d0:	00000000 	.word	0x00000000
      d4:	0000784c 	.word	0x0000784c

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	0000784c 	.word	0x0000784c
     104:	2000007c 	.word	0x2000007c
     108:	0000784c 	.word	0x0000784c
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <cpu_irq_enter_critical+0x44>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d112      	bne.n	144 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11e:	f3ef 8310 	mrs	r3, PRIMASK
     122:	607b      	str	r3, [r7, #4]
  return(result);
     124:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     126:	2b00      	cmp	r3, #0
     128:	d109      	bne.n	13e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     12a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     12c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <cpu_irq_enter_critical+0x48>)
     132:	2200      	movs	r2, #0
     134:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <cpu_irq_enter_critical+0x4c>)
     138:	2201      	movs	r2, #1
     13a:	701a      	strb	r2, [r3, #0]
     13c:	e002      	b.n	144 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     13e:	4b07      	ldr	r3, [pc, #28]	; (15c <cpu_irq_enter_critical+0x4c>)
     140:	2200      	movs	r2, #0
     142:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <cpu_irq_enter_critical+0x44>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1c5a      	adds	r2, r3, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x44>)
     14c:	601a      	str	r2, [r3, #0]
}
     14e:	46bd      	mov	sp, r7
     150:	b002      	add	sp, #8
     152:	bd80      	pop	{r7, pc}
     154:	20000094 	.word	0x20000094
     158:	20000000 	.word	0x20000000
     15c:	20000098 	.word	0x20000098

00000160 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <cpu_irq_leave_critical+0x30>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	1e5a      	subs	r2, r3, #1
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <cpu_irq_leave_critical+0x30>)
     16c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <cpu_irq_leave_critical+0x30>)
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d10a      	bne.n	18c <cpu_irq_leave_critical+0x2c>
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <cpu_irq_leave_critical+0x34>)
     178:	781b      	ldrb	r3, [r3, #0]
     17a:	b2db      	uxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	d005      	beq.n	18c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     180:	4b05      	ldr	r3, [pc, #20]	; (198 <cpu_irq_leave_critical+0x38>)
     182:	2201      	movs	r2, #1
     184:	701a      	strb	r2, [r3, #0]
     186:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     18a:	b662      	cpsie	i
	}
}
     18c:	46bd      	mov	sp, r7
     18e:	bd80      	pop	{r7, pc}
     190:	20000094 	.word	0x20000094
     194:	20000098 	.word	0x20000098
     198:	20000000 	.word	0x20000000

0000019c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	2200      	movs	r2, #0
     1a8:	701a      	strb	r2, [r3, #0]
}
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}

000001b0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     1b0:	b580      	push	{r7, lr}
     1b2:	b082      	sub	sp, #8
     1b4:	af00      	add	r7, sp, #0
     1b6:	1c02      	adds	r2, r0, #0
     1b8:	6039      	str	r1, [r7, #0]
     1ba:	1dfb      	adds	r3, r7, #7
     1bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	2b01      	cmp	r3, #1
     1c4:	d00a      	beq.n	1dc <system_apb_clock_set_mask+0x2c>
     1c6:	2b02      	cmp	r3, #2
     1c8:	d00f      	beq.n	1ea <system_apb_clock_set_mask+0x3a>
     1ca:	2b00      	cmp	r3, #0
     1cc:	d114      	bne.n	1f8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1ce:	4b0e      	ldr	r3, [pc, #56]	; (208 <system_apb_clock_set_mask+0x58>)
     1d0:	4a0d      	ldr	r2, [pc, #52]	; (208 <system_apb_clock_set_mask+0x58>)
     1d2:	6991      	ldr	r1, [r2, #24]
     1d4:	683a      	ldr	r2, [r7, #0]
     1d6:	430a      	orrs	r2, r1
     1d8:	619a      	str	r2, [r3, #24]
			break;
     1da:	e00f      	b.n	1fc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1dc:	4b0a      	ldr	r3, [pc, #40]	; (208 <system_apb_clock_set_mask+0x58>)
     1de:	4a0a      	ldr	r2, [pc, #40]	; (208 <system_apb_clock_set_mask+0x58>)
     1e0:	69d1      	ldr	r1, [r2, #28]
     1e2:	683a      	ldr	r2, [r7, #0]
     1e4:	430a      	orrs	r2, r1
     1e6:	61da      	str	r2, [r3, #28]
			break;
     1e8:	e008      	b.n	1fc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <system_apb_clock_set_mask+0x58>)
     1ec:	4a06      	ldr	r2, [pc, #24]	; (208 <system_apb_clock_set_mask+0x58>)
     1ee:	6a11      	ldr	r1, [r2, #32]
     1f0:	683a      	ldr	r2, [r7, #0]
     1f2:	430a      	orrs	r2, r1
     1f4:	621a      	str	r2, [r3, #32]
			break;
     1f6:	e001      	b.n	1fc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     1f8:	2317      	movs	r3, #23
     1fa:	e000      	b.n	1fe <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     1fc:	2300      	movs	r3, #0
}
     1fe:	1c18      	adds	r0, r3, #0
     200:	46bd      	mov	sp, r7
     202:	b002      	add	sp, #8
     204:	bd80      	pop	{r7, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	40000400 	.word	0x40000400

0000020c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     20c:	b580      	push	{r7, lr}
     20e:	b082      	sub	sp, #8
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     214:	687b      	ldr	r3, [r7, #4]
     216:	2280      	movs	r2, #128	; 0x80
     218:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	2200      	movs	r2, #0
     21e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     220:	687b      	ldr	r3, [r7, #4]
     222:	2201      	movs	r2, #1
     224:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	70da      	strb	r2, [r3, #3]
}
     22c:	46bd      	mov	sp, r7
     22e:	b002      	add	sp, #8
     230:	bd80      	pop	{r7, pc}
     232:	46c0      	nop			; (mov r8, r8)

00000234 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     234:	b580      	push	{r7, lr}
     236:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     238:	4b05      	ldr	r3, [pc, #20]	; (250 <system_is_debugger_present+0x1c>)
     23a:	789b      	ldrb	r3, [r3, #2]
     23c:	b2db      	uxtb	r3, r3
     23e:	1c1a      	adds	r2, r3, #0
     240:	2302      	movs	r3, #2
     242:	4013      	ands	r3, r2
     244:	1e5a      	subs	r2, r3, #1
     246:	4193      	sbcs	r3, r2
     248:	b2db      	uxtb	r3, r3
}
     24a:	1c18      	adds	r0, r3, #0
     24c:	46bd      	mov	sp, r7
     24e:	bd80      	pop	{r7, pc}
     250:	41002000 	.word	0x41002000

00000254 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     254:	b580      	push	{r7, lr}
     256:	b084      	sub	sp, #16
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	681b      	ldr	r3, [r3, #0]
     260:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     262:	68fb      	ldr	r3, [r7, #12]
     264:	69db      	ldr	r3, [r3, #28]
     266:	2207      	movs	r2, #7
     268:	4013      	ands	r3, r2
     26a:	1e5a      	subs	r2, r3, #1
     26c:	4193      	sbcs	r3, r2
     26e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     270:	1c18      	adds	r0, r3, #0
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}

00000278 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     278:	b580      	push	{r7, lr}
     27a:	b082      	sub	sp, #8
     27c:	af00      	add	r7, sp, #0
     27e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     280:	46c0      	nop			; (mov r8, r8)
     282:	687b      	ldr	r3, [r7, #4]
     284:	1c18      	adds	r0, r3, #0
     286:	4b03      	ldr	r3, [pc, #12]	; (294 <_i2c_master_wait_for_sync+0x1c>)
     288:	4798      	blx	r3
     28a:	1e03      	subs	r3, r0, #0
     28c:	d1f9      	bne.n	282 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     28e:	46bd      	mov	sp, r7
     290:	b002      	add	sp, #8
     292:	bd80      	pop	{r7, pc}
     294:	00000255 	.word	0x00000255

00000298 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
     298:	b590      	push	{r4, r7, lr}
     29a:	b08d      	sub	sp, #52	; 0x34
     29c:	af00      	add	r7, sp, #0
     29e:	6078      	str	r0, [r7, #4]
     2a0:	6039      	str	r1, [r7, #0]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     2a2:	2327      	movs	r3, #39	; 0x27
     2a4:	18fb      	adds	r3, r7, r3
     2a6:	2200      	movs	r2, #0
     2a8:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2aa:	687b      	ldr	r3, [r7, #4]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	61bb      	str	r3, [r7, #24]
	Sercom *const sercom_hw = module->hw;
     2b0:	687b      	ldr	r3, [r7, #4]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	617b      	str	r3, [r7, #20]

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2b6:	2313      	movs	r3, #19
     2b8:	18fc      	adds	r4, r7, r3
     2ba:	697b      	ldr	r3, [r7, #20]
     2bc:	1c18      	adds	r0, r3, #0
     2be:	4b85      	ldr	r3, [pc, #532]	; (4d4 <_i2c_master_set_config+0x23c>)
     2c0:	4798      	blx	r3
     2c2:	1c03      	adds	r3, r0, #0
     2c4:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     2c6:	2308      	movs	r3, #8
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	1c18      	adds	r0, r3, #0
     2cc:	4b82      	ldr	r3, [pc, #520]	; (4d8 <_i2c_master_set_config+0x240>)
     2ce:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
     2d0:	683b      	ldr	r3, [r7, #0]
     2d2:	69db      	ldr	r3, [r3, #28]
     2d4:	623b      	str	r3, [r7, #32]
	uint32_t pad1 = config->pinmux_pad1;
     2d6:	683b      	ldr	r3, [r7, #0]
     2d8:	6a1b      	ldr	r3, [r3, #32]
     2da:	61fb      	str	r3, [r7, #28]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     2dc:	6a3b      	ldr	r3, [r7, #32]
     2de:	2b00      	cmp	r3, #0
     2e0:	d106      	bne.n	2f0 <_i2c_master_set_config+0x58>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     2e2:	697b      	ldr	r3, [r7, #20]
     2e4:	1c18      	adds	r0, r3, #0
     2e6:	2100      	movs	r1, #0
     2e8:	4b7c      	ldr	r3, [pc, #496]	; (4dc <_i2c_master_set_config+0x244>)
     2ea:	4798      	blx	r3
     2ec:	1c03      	adds	r3, r0, #0
     2ee:	623b      	str	r3, [r7, #32]
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     2f0:	6a3b      	ldr	r3, [r7, #32]
     2f2:	b2da      	uxtb	r2, r3
     2f4:	2308      	movs	r3, #8
     2f6:	18fb      	adds	r3, r7, r3
     2f8:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2fa:	2308      	movs	r3, #8
     2fc:	18fb      	adds	r3, r7, r3
     2fe:	2202      	movs	r2, #2
     300:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     302:	6a3b      	ldr	r3, [r7, #32]
     304:	0c1b      	lsrs	r3, r3, #16
     306:	b2da      	uxtb	r2, r3
     308:	2308      	movs	r3, #8
     30a:	18fb      	adds	r3, r7, r3
     30c:	1c10      	adds	r0, r2, #0
     30e:	1c19      	adds	r1, r3, #0
     310:	4b73      	ldr	r3, [pc, #460]	; (4e0 <_i2c_master_set_config+0x248>)
     312:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     314:	69fb      	ldr	r3, [r7, #28]
     316:	2b00      	cmp	r3, #0
     318:	d106      	bne.n	328 <_i2c_master_set_config+0x90>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     31a:	697b      	ldr	r3, [r7, #20]
     31c:	1c18      	adds	r0, r3, #0
     31e:	2101      	movs	r1, #1
     320:	4b6e      	ldr	r3, [pc, #440]	; (4dc <_i2c_master_set_config+0x244>)
     322:	4798      	blx	r3
     324:	1c03      	adds	r3, r0, #0
     326:	61fb      	str	r3, [r7, #28]
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     328:	69fb      	ldr	r3, [r7, #28]
     32a:	b2da      	uxtb	r2, r3
     32c:	2308      	movs	r3, #8
     32e:	18fb      	adds	r3, r7, r3
     330:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     332:	2308      	movs	r3, #8
     334:	18fb      	adds	r3, r7, r3
     336:	2202      	movs	r2, #2
     338:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     33a:	69fb      	ldr	r3, [r7, #28]
     33c:	0c1b      	lsrs	r3, r3, #16
     33e:	b2da      	uxtb	r2, r3
     340:	2308      	movs	r3, #8
     342:	18fb      	adds	r3, r7, r3
     344:	1c10      	adds	r0, r2, #0
     346:	1c19      	adds	r1, r3, #0
     348:	4b65      	ldr	r3, [pc, #404]	; (4e0 <_i2c_master_set_config+0x248>)
     34a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     34c:	683b      	ldr	r3, [r7, #0]
     34e:	8a9a      	ldrh	r2, [r3, #20]
     350:	687b      	ldr	r3, [r7, #4]
     352:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     354:	683b      	ldr	r3, [r7, #0]
     356:	8ada      	ldrh	r2, [r3, #22]
     358:	687b      	ldr	r3, [r7, #4]
     35a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     35c:	683b      	ldr	r3, [r7, #0]
     35e:	7e1b      	ldrb	r3, [r3, #24]
     360:	2b00      	cmp	r3, #0
     362:	d103      	bne.n	36c <_i2c_master_set_config+0xd4>
     364:	4b5f      	ldr	r3, [pc, #380]	; (4e4 <_i2c_master_set_config+0x24c>)
     366:	4798      	blx	r3
     368:	1e03      	subs	r3, r0, #0
     36a:	d002      	beq.n	372 <_i2c_master_set_config+0xda>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     36c:	2380      	movs	r3, #128	; 0x80
     36e:	62fb      	str	r3, [r7, #44]	; 0x2c
     370:	e001      	b.n	376 <_i2c_master_set_config+0xde>
	} else {
		tmp_ctrla = 0;
     372:	2300      	movs	r3, #0
     374:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     376:	683b      	ldr	r3, [r7, #0]
     378:	691b      	ldr	r3, [r3, #16]
     37a:	2b00      	cmp	r3, #0
     37c:	d004      	beq.n	388 <_i2c_master_set_config+0xf0>
		tmp_ctrla |= config->start_hold_time;
     37e:	683b      	ldr	r3, [r7, #0]
     380:	691b      	ldr	r3, [r3, #16]
     382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     384:	4313      	orrs	r3, r2
     386:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     388:	683b      	ldr	r3, [r7, #0]
     38a:	689b      	ldr	r3, [r3, #8]
     38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     38e:	4313      	orrs	r3, r2
     390:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     392:	683b      	ldr	r3, [r7, #0]
     394:	2224      	movs	r2, #36	; 0x24
     396:	5c9b      	ldrb	r3, [r3, r2]
     398:	2b00      	cmp	r3, #0
     39a:	d004      	beq.n	3a6 <_i2c_master_set_config+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	05d2      	lsls	r2, r2, #23
     3a2:	4313      	orrs	r3, r2
     3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     3a6:	683b      	ldr	r3, [r7, #0]
     3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3aa:	2b00      	cmp	r3, #0
     3ac:	d004      	beq.n	3b8 <_i2c_master_set_config+0x120>
		tmp_ctrla |= config->inactive_timeout;
     3ae:	683b      	ldr	r3, [r7, #0]
     3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     3b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     3b4:	4313      	orrs	r3, r2
     3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     3b8:	683b      	ldr	r3, [r7, #0]
     3ba:	222c      	movs	r2, #44	; 0x2c
     3bc:	5c9b      	ldrb	r3, [r3, r2]
     3be:	2b00      	cmp	r3, #0
     3c0:	d004      	beq.n	3cc <_i2c_master_set_config+0x134>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3c4:	2280      	movs	r2, #128	; 0x80
     3c6:	0512      	lsls	r2, r2, #20
     3c8:	4313      	orrs	r3, r2
     3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     3cc:	683b      	ldr	r3, [r7, #0]
     3ce:	222d      	movs	r2, #45	; 0x2d
     3d0:	5c9b      	ldrb	r3, [r3, r2]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d004      	beq.n	3e0 <_i2c_master_set_config+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	0412      	lsls	r2, r2, #16
     3dc:	4313      	orrs	r3, r2
     3de:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     3e0:	683b      	ldr	r3, [r7, #0]
     3e2:	222e      	movs	r2, #46	; 0x2e
     3e4:	5c9b      	ldrb	r3, [r3, r2]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d004      	beq.n	3f4 <_i2c_master_set_config+0x15c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3ec:	2280      	movs	r2, #128	; 0x80
     3ee:	03d2      	lsls	r2, r2, #15
     3f0:	4313      	orrs	r3, r2
     3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     3f4:	69bb      	ldr	r3, [r7, #24]
     3f6:	681a      	ldr	r2, [r3, #0]
     3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3fa:	431a      	orrs	r2, r3
     3fc:	69bb      	ldr	r3, [r7, #24]
     3fe:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     400:	69bb      	ldr	r3, [r7, #24]
     402:	2280      	movs	r2, #128	; 0x80
     404:	0052      	lsls	r2, r2, #1
     406:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     408:	2313      	movs	r3, #19
     40a:	18fb      	adds	r3, r7, r3
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	3314      	adds	r3, #20
     410:	b2db      	uxtb	r3, r3
     412:	1c18      	adds	r0, r3, #0
     414:	4b34      	ldr	r3, [pc, #208]	; (4e8 <_i2c_master_set_config+0x250>)
     416:	4798      	blx	r3
     418:	1c01      	adds	r1, r0, #0
     41a:	683b      	ldr	r3, [r7, #0]
     41c:	681b      	ldr	r3, [r3, #0]
     41e:	22fa      	movs	r2, #250	; 0xfa
     420:	00d2      	lsls	r2, r2, #3
     422:	4353      	muls	r3, r2
     424:	18cb      	adds	r3, r1, r3
     426:	1e59      	subs	r1, r3, #1
     428:	683b      	ldr	r3, [r7, #0]
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	22fa      	movs	r2, #250	; 0xfa
     42e:	00d2      	lsls	r2, r2, #3
     430:	435a      	muls	r2, r3
     432:	4b2e      	ldr	r3, [pc, #184]	; (4ec <_i2c_master_set_config+0x254>)
     434:	1c08      	adds	r0, r1, #0
     436:	1c11      	adds	r1, r2, #0
     438:	4798      	blx	r3
     43a:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     43c:	3b05      	subs	r3, #5

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     43e:	60fb      	str	r3, [r7, #12]
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     440:	68fb      	ldr	r3, [r7, #12]
     442:	2bff      	cmp	r3, #255	; 0xff
     444:	dc02      	bgt.n	44c <_i2c_master_set_config+0x1b4>
     446:	68fb      	ldr	r3, [r7, #12]
     448:	2b00      	cmp	r3, #0
     44a:	da04      	bge.n	456 <_i2c_master_set_config+0x1be>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     44c:	2327      	movs	r3, #39	; 0x27
     44e:	18fb      	adds	r3, r7, r3
     450:	2240      	movs	r2, #64	; 0x40
     452:	701a      	strb	r2, [r3, #0]
     454:	e025      	b.n	4a2 <_i2c_master_set_config+0x20a>
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     456:	2313      	movs	r3, #19
     458:	18fb      	adds	r3, r7, r3
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	3314      	adds	r3, #20
     45e:	b2db      	uxtb	r3, r3
     460:	1c18      	adds	r0, r3, #0
     462:	4b21      	ldr	r3, [pc, #132]	; (4e8 <_i2c_master_set_config+0x250>)
     464:	4798      	blx	r3
     466:	1c01      	adds	r1, r0, #0
     468:	683b      	ldr	r3, [r7, #0]
     46a:	685b      	ldr	r3, [r3, #4]
     46c:	22fa      	movs	r2, #250	; 0xfa
     46e:	00d2      	lsls	r2, r2, #3
     470:	4353      	muls	r3, r2
     472:	18cb      	adds	r3, r1, r3
     474:	1e59      	subs	r1, r3, #1
     476:	683b      	ldr	r3, [r7, #0]
     478:	685b      	ldr	r3, [r3, #4]
     47a:	22fa      	movs	r2, #250	; 0xfa
     47c:	00d2      	lsls	r2, r2, #3
     47e:	435a      	muls	r2, r3
     480:	4b1a      	ldr	r3, [pc, #104]	; (4ec <_i2c_master_set_config+0x254>)
     482:	1c08      	adds	r0, r1, #0
     484:	1c11      	adds	r1, r2, #0
     486:	4798      	blx	r3
     488:	1c03      	adds	r3, r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     48a:	3b01      	subs	r3, #1
	if (tmp_baud > 255 || tmp_baud < 0) {
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     48c:	62bb      	str	r3, [r7, #40]	; 0x28
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     490:	2bff      	cmp	r3, #255	; 0xff
     492:	dc02      	bgt.n	49a <_i2c_master_set_config+0x202>
     494:	6abb      	ldr	r3, [r7, #40]	; 0x28
     496:	2b00      	cmp	r3, #0
     498:	da03      	bge.n	4a2 <_i2c_master_set_config+0x20a>
			/* Baud rate not supported. */
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
     49a:	2327      	movs	r3, #39	; 0x27
     49c:	18fb      	adds	r3, r7, r3
     49e:	2240      	movs	r2, #64	; 0x40
     4a0:	701a      	strb	r2, [r3, #0]
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
     4a2:	2327      	movs	r3, #39	; 0x27
     4a4:	18fb      	adds	r3, r7, r3
     4a6:	781b      	ldrb	r3, [r3, #0]
     4a8:	2b40      	cmp	r3, #64	; 0x40
     4aa:	d00b      	beq.n	4c4 <_i2c_master_set_config+0x22c>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4ac:	68fb      	ldr	r3, [r7, #12]
     4ae:	22ff      	movs	r2, #255	; 0xff
     4b0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
     4b4:	041b      	lsls	r3, r3, #16
     4b6:	1c19      	adds	r1, r3, #0
     4b8:	23ff      	movs	r3, #255	; 0xff
     4ba:	041b      	lsls	r3, r3, #16
     4bc:	400b      	ands	r3, r1
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     4be:	431a      	orrs	r2, r3
     4c0:	69bb      	ldr	r3, [r7, #24]
     4c2:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
	}

	return tmp_status_code;
     4c4:	2327      	movs	r3, #39	; 0x27
     4c6:	18fb      	adds	r3, r7, r3
     4c8:	781b      	ldrb	r3, [r3, #0]
}
     4ca:	1c18      	adds	r0, r3, #0
     4cc:	46bd      	mov	sp, r7
     4ce:	b00d      	add	sp, #52	; 0x34
     4d0:	bd90      	pop	{r4, r7, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	00001099 	.word	0x00001099
     4d8:	0000020d 	.word	0x0000020d
     4dc:	00000edd 	.word	0x00000edd
     4e0:	00002dc5 	.word	0x00002dc5
     4e4:	00000235 	.word	0x00000235
     4e8:	00002bfd 	.word	0x00002bfd
     4ec:	00003dd9 	.word	0x00003dd9

000004f0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b08a      	sub	sp, #40	; 0x28
     4f4:	af00      	add	r7, sp, #0
     4f6:	60f8      	str	r0, [r7, #12]
     4f8:	60b9      	str	r1, [r7, #8]
     4fa:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     4fc:	68fb      	ldr	r3, [r7, #12]
     4fe:	68ba      	ldr	r2, [r7, #8]
     500:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     502:	68fb      	ldr	r3, [r7, #12]
     504:	681b      	ldr	r3, [r3, #0]
     506:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	681b      	ldr	r3, [r3, #0]
     50c:	1c18      	adds	r0, r3, #0
     50e:	4b25      	ldr	r3, [pc, #148]	; (5a4 <i2c_master_init+0xb4>)
     510:	4798      	blx	r3
     512:	1c03      	adds	r3, r0, #0
     514:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     516:	6a3b      	ldr	r3, [r7, #32]
     518:	3302      	adds	r3, #2
     51a:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     51c:	6a3b      	ldr	r3, [r7, #32]
     51e:	3314      	adds	r3, #20
     520:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     522:	69fb      	ldr	r3, [r7, #28]
     524:	2201      	movs	r2, #1
     526:	409a      	lsls	r2, r3
     528:	1c13      	adds	r3, r2, #0
     52a:	2002      	movs	r0, #2
     52c:	1c19      	adds	r1, r3, #0
     52e:	4b1e      	ldr	r3, [pc, #120]	; (5a8 <i2c_master_init+0xb8>)
     530:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     532:	2314      	movs	r3, #20
     534:	18fb      	adds	r3, r7, r3
     536:	1c18      	adds	r0, r3, #0
     538:	4b1c      	ldr	r3, [pc, #112]	; (5ac <i2c_master_init+0xbc>)
     53a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	7b1a      	ldrb	r2, [r3, #12]
     540:	2314      	movs	r3, #20
     542:	18fb      	adds	r3, r7, r3
     544:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     546:	69bb      	ldr	r3, [r7, #24]
     548:	b2da      	uxtb	r2, r3
     54a:	2314      	movs	r3, #20
     54c:	18fb      	adds	r3, r7, r3
     54e:	1c10      	adds	r0, r2, #0
     550:	1c19      	adds	r1, r3, #0
     552:	4b17      	ldr	r3, [pc, #92]	; (5b0 <i2c_master_init+0xc0>)
     554:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     556:	69bb      	ldr	r3, [r7, #24]
     558:	b2db      	uxtb	r3, r3
     55a:	1c18      	adds	r0, r3, #0
     55c:	4b15      	ldr	r3, [pc, #84]	; (5b4 <i2c_master_init+0xc4>)
     55e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     560:	687b      	ldr	r3, [r7, #4]
     562:	7b1b      	ldrb	r3, [r3, #12]
     564:	1c18      	adds	r0, r3, #0
     566:	2100      	movs	r1, #0
     568:	4b13      	ldr	r3, [pc, #76]	; (5b8 <i2c_master_init+0xc8>)
     56a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     56e:	681b      	ldr	r3, [r3, #0]
     570:	2202      	movs	r2, #2
     572:	4013      	ands	r3, r2
     574:	d001      	beq.n	57a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
     576:	231c      	movs	r3, #28
     578:	e010      	b.n	59c <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	2201      	movs	r2, #1
     580:	4013      	ands	r3, r2
     582:	d001      	beq.n	588 <i2c_master_init+0x98>
		return STATUS_BUSY;
     584:	2305      	movs	r3, #5
     586:	e009      	b.n	59c <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     58a:	2214      	movs	r2, #20
     58c:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
     58e:	68fa      	ldr	r2, [r7, #12]
     590:	687b      	ldr	r3, [r7, #4]
     592:	1c10      	adds	r0, r2, #0
     594:	1c19      	adds	r1, r3, #0
     596:	4b09      	ldr	r3, [pc, #36]	; (5bc <i2c_master_init+0xcc>)
     598:	4798      	blx	r3
     59a:	1c03      	adds	r3, r0, #0
}
     59c:	1c18      	adds	r0, r3, #0
     59e:	46bd      	mov	sp, r7
     5a0:	b00a      	add	sp, #40	; 0x28
     5a2:	bd80      	pop	{r7, pc}
     5a4:	00001099 	.word	0x00001099
     5a8:	000001b1 	.word	0x000001b1
     5ac:	0000019d 	.word	0x0000019d
     5b0:	00002ad9 	.word	0x00002ad9
     5b4:	00002b1d 	.word	0x00002b1d
     5b8:	00000e51 	.word	0x00000e51
     5bc:	00000299 	.word	0x00000299

000005c0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b084      	sub	sp, #16
     5c4:	af00      	add	r7, sp, #0
     5c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     5ce:	68fb      	ldr	r3, [r7, #12]
     5d0:	7e1b      	ldrb	r3, [r3, #24]
     5d2:	b2db      	uxtb	r3, r3
     5d4:	1c1a      	adds	r2, r3, #0
     5d6:	2302      	movs	r3, #2
     5d8:	4013      	ands	r3, r2
     5da:	d00b      	beq.n	5f4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     5dc:	68fb      	ldr	r3, [r7, #12]
     5de:	2202      	movs	r2, #2
     5e0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     5e2:	68fb      	ldr	r3, [r7, #12]
     5e4:	8b5b      	ldrh	r3, [r3, #26]
     5e6:	b29b      	uxth	r3, r3
     5e8:	1c1a      	adds	r2, r3, #0
     5ea:	2302      	movs	r3, #2
     5ec:	4013      	ands	r3, r2
     5ee:	d011      	beq.n	614 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     5f0:	2341      	movs	r3, #65	; 0x41
     5f2:	e010      	b.n	616 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     5f4:	68fb      	ldr	r3, [r7, #12]
     5f6:	8b5b      	ldrh	r3, [r3, #26]
     5f8:	b29b      	uxth	r3, r3
     5fa:	1c1a      	adds	r2, r3, #0
     5fc:	2304      	movs	r3, #4
     5fe:	4013      	ands	r3, r2
     600:	d008      	beq.n	614 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     602:	68fb      	ldr	r3, [r7, #12]
     604:	685b      	ldr	r3, [r3, #4]
     606:	22c0      	movs	r2, #192	; 0xc0
     608:	0292      	lsls	r2, r2, #10
     60a:	431a      	orrs	r2, r3
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     610:	2318      	movs	r3, #24
     612:	e000      	b.n	616 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
     614:	2300      	movs	r3, #0
}
     616:	1c18      	adds	r0, r3, #0
     618:	46bd      	mov	sp, r7
     61a:	b004      	add	sp, #16
     61c:	bd80      	pop	{r7, pc}
     61e:	46c0      	nop			; (mov r8, r8)

00000620 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     62e:	230e      	movs	r3, #14
     630:	18fb      	adds	r3, r7, r3
     632:	2200      	movs	r2, #0
     634:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     636:	e00f      	b.n	658 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     638:	230e      	movs	r3, #14
     63a:	18fb      	adds	r3, r7, r3
     63c:	220e      	movs	r2, #14
     63e:	18ba      	adds	r2, r7, r2
     640:	8812      	ldrh	r2, [r2, #0]
     642:	3201      	adds	r2, #1
     644:	801a      	strh	r2, [r3, #0]
     646:	687b      	ldr	r3, [r7, #4]
     648:	891b      	ldrh	r3, [r3, #8]
     64a:	220e      	movs	r2, #14
     64c:	18ba      	adds	r2, r7, r2
     64e:	8812      	ldrh	r2, [r2, #0]
     650:	429a      	cmp	r2, r3
     652:	d301      	bcc.n	658 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
     654:	2312      	movs	r3, #18
     656:	e00e      	b.n	676 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     658:	68bb      	ldr	r3, [r7, #8]
     65a:	7e1b      	ldrb	r3, [r3, #24]
     65c:	b2db      	uxtb	r3, r3
     65e:	1c1a      	adds	r2, r3, #0
     660:	2301      	movs	r3, #1
     662:	4013      	ands	r3, r2
     664:	d106      	bne.n	674 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     666:	68bb      	ldr	r3, [r7, #8]
     668:	7e1b      	ldrb	r3, [r3, #24]
     66a:	b2db      	uxtb	r3, r3
     66c:	1c1a      	adds	r2, r3, #0
     66e:	2302      	movs	r3, #2
     670:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     672:	d0e1      	beq.n	638 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     674:	2300      	movs	r3, #0
}
     676:	1c18      	adds	r0, r3, #0
     678:	46bd      	mov	sp, r7
     67a:	b004      	add	sp, #16
     67c:	bd80      	pop	{r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     680:	b590      	push	{r4, r7, lr}
     682:	b085      	sub	sp, #20
     684:	af00      	add	r7, sp, #0
     686:	6078      	str	r0, [r7, #4]
     688:	1c0a      	adds	r2, r1, #0
     68a:	1cfb      	adds	r3, r7, #3
     68c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     68e:	687b      	ldr	r3, [r7, #4]
     690:	681b      	ldr	r3, [r3, #0]
     692:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     694:	68fb      	ldr	r3, [r7, #12]
     696:	685b      	ldr	r3, [r3, #4]
     698:	2280      	movs	r2, #128	; 0x80
     69a:	02d2      	lsls	r2, r2, #11
     69c:	431a      	orrs	r2, r3
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     6a2:	1cfb      	adds	r3, r7, #3
     6a4:	781a      	ldrb	r2, [r3, #0]
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6aa:	230b      	movs	r3, #11
     6ac:	18fc      	adds	r4, r7, r3
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	1c18      	adds	r0, r3, #0
     6b2:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_i2c_master_send_hs_master_code+0x50>)
     6b4:	4798      	blx	r3
     6b6:	1c03      	adds	r3, r0, #0
     6b8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	2201      	movs	r2, #1
     6be:	761a      	strb	r2, [r3, #24]

	return tmp_status;
     6c0:	230b      	movs	r3, #11
     6c2:	18fb      	adds	r3, r7, r3
     6c4:	781b      	ldrb	r3, [r3, #0]
}
     6c6:	1c18      	adds	r0, r3, #0
     6c8:	46bd      	mov	sp, r7
     6ca:	b005      	add	sp, #20
     6cc:	bd90      	pop	{r4, r7, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	00000621 	.word	0x00000621

000006d4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     6d4:	b590      	push	{r4, r7, lr}
     6d6:	b087      	sub	sp, #28
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	681b      	ldr	r3, [r3, #0]
     6e2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6e4:	2314      	movs	r3, #20
     6e6:	18fb      	adds	r3, r7, r3
     6e8:	683a      	ldr	r2, [r7, #0]
     6ea:	8852      	ldrh	r2, [r2, #2]
     6ec:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
     6ee:	2312      	movs	r3, #18
     6f0:	18fb      	adds	r3, r7, r3
     6f2:	2200      	movs	r2, #0
     6f4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6f6:	68fb      	ldr	r3, [r7, #12]
     6f8:	681b      	ldr	r3, [r3, #0]
     6fa:	0edb      	lsrs	r3, r3, #27
     6fc:	1c1a      	adds	r2, r3, #0
     6fe:	2301      	movs	r3, #1
     700:	4013      	ands	r3, r2
     702:	b2db      	uxtb	r3, r3
     704:	1c1a      	adds	r2, r3, #0
     706:	230b      	movs	r3, #11
     708:	18fb      	adds	r3, r7, r3
     70a:	1e51      	subs	r1, r2, #1
     70c:	418a      	sbcs	r2, r1
     70e:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     710:	683b      	ldr	r3, [r7, #0]
     712:	7a5b      	ldrb	r3, [r3, #9]
     714:	2b00      	cmp	r3, #0
     716:	d006      	beq.n	726 <_i2c_master_read_packet+0x52>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     718:	683b      	ldr	r3, [r7, #0]
     71a:	7a9b      	ldrb	r3, [r3, #10]
     71c:	687a      	ldr	r2, [r7, #4]
     71e:	1c10      	adds	r0, r2, #0
     720:	1c19      	adds	r1, r3, #0
     722:	4b7a      	ldr	r3, [pc, #488]	; (90c <_i2c_master_read_packet+0x238>)
     724:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     726:	68fb      	ldr	r3, [r7, #12]
     728:	685b      	ldr	r3, [r3, #4]
     72a:	4a79      	ldr	r2, [pc, #484]	; (910 <_i2c_master_read_packet+0x23c>)
     72c:	401a      	ands	r2, r3
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     732:	683b      	ldr	r3, [r7, #0]
     734:	7a1b      	ldrb	r3, [r3, #8]
     736:	2b00      	cmp	r3, #0
     738:	d042      	beq.n	7c0 <_i2c_master_read_packet+0xec>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     73a:	683b      	ldr	r3, [r7, #0]
     73c:	881b      	ldrh	r3, [r3, #0]
     73e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     740:	683b      	ldr	r3, [r7, #0]
     742:	7a5b      	ldrb	r3, [r3, #9]
     744:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     746:	4313      	orrs	r3, r2
     748:	1c1a      	adds	r2, r3, #0
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     74a:	2380      	movs	r3, #128	; 0x80
     74c:	021b      	lsls	r3, r3, #8
     74e:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     750:	68fb      	ldr	r3, [r7, #12]
     752:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     754:	2317      	movs	r3, #23
     756:	18fc      	adds	r4, r7, r3
     758:	687b      	ldr	r3, [r7, #4]
     75a:	1c18      	adds	r0, r3, #0
     75c:	4b6d      	ldr	r3, [pc, #436]	; (914 <_i2c_master_read_packet+0x240>)
     75e:	4798      	blx	r3
     760:	1c03      	adds	r3, r0, #0
     762:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     764:	68fb      	ldr	r3, [r7, #12]
     766:	685b      	ldr	r3, [r3, #4]
     768:	4a69      	ldr	r2, [pc, #420]	; (910 <_i2c_master_read_packet+0x23c>)
     76a:	401a      	ands	r2, r3
     76c:	68fb      	ldr	r3, [r7, #12]
     76e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     770:	2317      	movs	r3, #23
     772:	18fb      	adds	r3, r7, r3
     774:	781b      	ldrb	r3, [r3, #0]
     776:	2b00      	cmp	r3, #0
     778:	d107      	bne.n	78a <_i2c_master_read_packet+0xb6>
			tmp_status = _i2c_master_address_response(module);
     77a:	2317      	movs	r3, #23
     77c:	18fc      	adds	r4, r7, r3
     77e:	687b      	ldr	r3, [r7, #4]
     780:	1c18      	adds	r0, r3, #0
     782:	4b65      	ldr	r3, [pc, #404]	; (918 <_i2c_master_read_packet+0x244>)
     784:	4798      	blx	r3
     786:	1c03      	adds	r3, r0, #0
     788:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     78a:	2317      	movs	r3, #23
     78c:	18fb      	adds	r3, r7, r3
     78e:	781b      	ldrb	r3, [r3, #0]
     790:	2b00      	cmp	r3, #0
     792:	d111      	bne.n	7b8 <_i2c_master_read_packet+0xe4>
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     794:	683b      	ldr	r3, [r7, #0]
     796:	881b      	ldrh	r3, [r3, #0]
     798:	0a1b      	lsrs	r3, r3, #8
     79a:	b29b      	uxth	r3, r3
     79c:	2278      	movs	r2, #120	; 0x78
     79e:	4313      	orrs	r3, r2
     7a0:	b29b      	uxth	r3, r3
     7a2:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7a4:	683b      	ldr	r3, [r7, #0]
     7a6:	7a5b      	ldrb	r3, [r3, #9]
     7a8:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7aa:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     7ac:	2201      	movs	r2, #1
     7ae:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     7b0:	1c1a      	adds	r2, r3, #0
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	625a      	str	r2, [r3, #36]	; 0x24
     7b6:	e00f      	b.n	7d8 <_i2c_master_read_packet+0x104>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     7b8:	2317      	movs	r3, #23
     7ba:	18fb      	adds	r3, r7, r3
     7bc:	781b      	ldrb	r3, [r3, #0]
     7be:	e0a0      	b.n	902 <_i2c_master_read_packet+0x22e>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7c0:	683b      	ldr	r3, [r7, #0]
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	005b      	lsls	r3, r3, #1
     7c6:	2201      	movs	r2, #1
     7c8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	7a5b      	ldrb	r3, [r3, #9]
     7ce:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     7d0:	4313      	orrs	r3, r2
     7d2:	1c1a      	adds	r2, r3, #0
     7d4:	68fb      	ldr	r3, [r7, #12]
     7d6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     7d8:	2317      	movs	r3, #23
     7da:	18fc      	adds	r4, r7, r3
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	1c18      	adds	r0, r3, #0
     7e0:	4b4c      	ldr	r3, [pc, #304]	; (914 <_i2c_master_read_packet+0x240>)
     7e2:	4798      	blx	r3
     7e4:	1c03      	adds	r3, r0, #0
     7e6:	7023      	strb	r3, [r4, #0]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	685b      	ldr	r3, [r3, #4]
     7ec:	4a48      	ldr	r2, [pc, #288]	; (910 <_i2c_master_read_packet+0x23c>)
     7ee:	401a      	ands	r2, r3
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	605a      	str	r2, [r3, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     7f4:	2317      	movs	r3, #23
     7f6:	18fb      	adds	r3, r7, r3
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d107      	bne.n	80e <_i2c_master_read_packet+0x13a>
		tmp_status = _i2c_master_address_response(module);
     7fe:	2317      	movs	r3, #23
     800:	18fc      	adds	r4, r7, r3
     802:	687b      	ldr	r3, [r7, #4]
     804:	1c18      	adds	r0, r3, #0
     806:	4b44      	ldr	r3, [pc, #272]	; (918 <_i2c_master_read_packet+0x244>)
     808:	4798      	blx	r3
     80a:	1c03      	adds	r3, r0, #0
     80c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     80e:	2317      	movs	r3, #23
     810:	18fb      	adds	r3, r7, r3
     812:	781b      	ldrb	r3, [r3, #0]
     814:	2b00      	cmp	r3, #0
     816:	d000      	beq.n	81a <_i2c_master_read_packet+0x146>
     818:	e070      	b.n	8fc <_i2c_master_read_packet+0x228>
		/* Read data buffer. */
		while (tmp_data_length--) {
     81a:	e048      	b.n	8ae <_i2c_master_read_packet+0x1da>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     81c:	68fb      	ldr	r3, [r7, #12]
     81e:	8b5b      	ldrh	r3, [r3, #26]
     820:	b29b      	uxth	r3, r3
     822:	1c1a      	adds	r2, r3, #0
     824:	2320      	movs	r3, #32
     826:	4013      	ands	r3, r2
     828:	d101      	bne.n	82e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     82a:	2341      	movs	r3, #65	; 0x41
     82c:	e069      	b.n	902 <_i2c_master_read_packet+0x22e>
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     82e:	230b      	movs	r3, #11
     830:	18fb      	adds	r3, r7, r3
     832:	781b      	ldrb	r3, [r3, #0]
     834:	2201      	movs	r2, #1
     836:	4053      	eors	r3, r2
     838:	b2db      	uxtb	r3, r3
     83a:	2b00      	cmp	r3, #0
     83c:	d004      	beq.n	848 <_i2c_master_read_packet+0x174>
     83e:	2314      	movs	r3, #20
     840:	18fb      	adds	r3, r7, r3
     842:	881b      	ldrh	r3, [r3, #0]
     844:	2b00      	cmp	r3, #0
     846:	d009      	beq.n	85c <_i2c_master_read_packet+0x188>
     848:	230b      	movs	r3, #11
     84a:	18fb      	adds	r3, r7, r3
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	2b00      	cmp	r3, #0
     850:	d00c      	beq.n	86c <_i2c_master_read_packet+0x198>
					((sclsm_flag) && (tmp_data_length == 1))) {
     852:	2314      	movs	r3, #20
     854:	18fb      	adds	r3, r7, r3
     856:	881b      	ldrh	r3, [r3, #0]
     858:	2b01      	cmp	r3, #1
     85a:	d107      	bne.n	86c <_i2c_master_read_packet+0x198>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     85c:	68fb      	ldr	r3, [r7, #12]
     85e:	685b      	ldr	r3, [r3, #4]
     860:	2280      	movs	r2, #128	; 0x80
     862:	02d2      	lsls	r2, r2, #11
     864:	431a      	orrs	r2, r3
     866:	68fb      	ldr	r3, [r7, #12]
     868:	605a      	str	r2, [r3, #4]
     86a:	e01a      	b.n	8a2 <_i2c_master_read_packet+0x1ce>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	1c18      	adds	r0, r3, #0
     870:	4b2a      	ldr	r3, [pc, #168]	; (91c <_i2c_master_read_packet+0x248>)
     872:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     874:	683b      	ldr	r3, [r7, #0]
     876:	685a      	ldr	r2, [r3, #4]
     878:	2312      	movs	r3, #18
     87a:	18fb      	adds	r3, r7, r3
     87c:	881b      	ldrh	r3, [r3, #0]
     87e:	2112      	movs	r1, #18
     880:	1879      	adds	r1, r7, r1
     882:	1c58      	adds	r0, r3, #1
     884:	8008      	strh	r0, [r1, #0]
     886:	18d3      	adds	r3, r2, r3
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	2128      	movs	r1, #40	; 0x28
     88c:	5c52      	ldrb	r2, [r2, r1]
     88e:	b2d2      	uxtb	r2, r2
     890:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     892:	2317      	movs	r3, #23
     894:	18fc      	adds	r4, r7, r3
     896:	687b      	ldr	r3, [r7, #4]
     898:	1c18      	adds	r0, r3, #0
     89a:	4b1e      	ldr	r3, [pc, #120]	; (914 <_i2c_master_read_packet+0x240>)
     89c:	4798      	blx	r3
     89e:	1c03      	adds	r3, r0, #0
     8a0:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     8a2:	2317      	movs	r3, #23
     8a4:	18fb      	adds	r3, r7, r3
     8a6:	781b      	ldrb	r3, [r3, #0]
     8a8:	2b00      	cmp	r3, #0
     8aa:	d000      	beq.n	8ae <_i2c_master_read_packet+0x1da>
				break;
     8ac:	e008      	b.n	8c0 <_i2c_master_read_packet+0x1ec>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     8ae:	2314      	movs	r3, #20
     8b0:	18fb      	adds	r3, r7, r3
     8b2:	881b      	ldrh	r3, [r3, #0]
     8b4:	2214      	movs	r2, #20
     8b6:	18ba      	adds	r2, r7, r2
     8b8:	1e59      	subs	r1, r3, #1
     8ba:	8011      	strh	r1, [r2, #0]
     8bc:	2b00      	cmp	r3, #0
     8be:	d1ad      	bne.n	81c <_i2c_master_read_packet+0x148>
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	7a9b      	ldrb	r3, [r3, #10]
     8c4:	2b00      	cmp	r3, #0
     8c6:	d00a      	beq.n	8de <_i2c_master_read_packet+0x20a>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	1c18      	adds	r0, r3, #0
     8cc:	4b13      	ldr	r3, [pc, #76]	; (91c <_i2c_master_read_packet+0x248>)
     8ce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	685b      	ldr	r3, [r3, #4]
     8d4:	22c0      	movs	r2, #192	; 0xc0
     8d6:	0292      	lsls	r2, r2, #10
     8d8:	431a      	orrs	r2, r3
     8da:	68fb      	ldr	r3, [r7, #12]
     8dc:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	1c18      	adds	r0, r3, #0
     8e2:	4b0e      	ldr	r3, [pc, #56]	; (91c <_i2c_master_read_packet+0x248>)
     8e4:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     8e6:	683b      	ldr	r3, [r7, #0]
     8e8:	685a      	ldr	r2, [r3, #4]
     8ea:	2312      	movs	r3, #18
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	881b      	ldrh	r3, [r3, #0]
     8f0:	18d3      	adds	r3, r2, r3
     8f2:	68fa      	ldr	r2, [r7, #12]
     8f4:	2128      	movs	r1, #40	; 0x28
     8f6:	5c52      	ldrb	r2, [r2, r1]
     8f8:	b2d2      	uxtb	r2, r2
     8fa:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
     8fc:	2317      	movs	r3, #23
     8fe:	18fb      	adds	r3, r7, r3
     900:	781b      	ldrb	r3, [r3, #0]
}
     902:	1c18      	adds	r0, r3, #0
     904:	46bd      	mov	sp, r7
     906:	b007      	add	sp, #28
     908:	bd90      	pop	{r4, r7, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00000681 	.word	0x00000681
     910:	fffbffff 	.word	0xfffbffff
     914:	00000621 	.word	0x00000621
     918:	000005c1 	.word	0x000005c1
     91c:	00000279 	.word	0x00000279

00000920 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     920:	b580      	push	{r7, lr}
     922:	b082      	sub	sp, #8
     924:	af00      	add	r7, sp, #0
     926:	6078      	str	r0, [r7, #4]
     928:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	2201      	movs	r2, #1
     92e:	729a      	strb	r2, [r3, #10]

	return _i2c_master_read_packet(module, packet);
     930:	687a      	ldr	r2, [r7, #4]
     932:	683b      	ldr	r3, [r7, #0]
     934:	1c10      	adds	r0, r2, #0
     936:	1c19      	adds	r1, r3, #0
     938:	4b03      	ldr	r3, [pc, #12]	; (948 <i2c_master_read_packet_wait+0x28>)
     93a:	4798      	blx	r3
     93c:	1c03      	adds	r3, r0, #0
}
     93e:	1c18      	adds	r0, r3, #0
     940:	46bd      	mov	sp, r7
     942:	b002      	add	sp, #8
     944:	bd80      	pop	{r7, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	000006d5 	.word	0x000006d5

0000094c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     94c:	b590      	push	{r4, r7, lr}
     94e:	b087      	sub	sp, #28
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
     954:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     956:	687b      	ldr	r3, [r7, #4]
     958:	681b      	ldr	r3, [r3, #0]
     95a:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     95c:	2314      	movs	r3, #20
     95e:	18fb      	adds	r3, r7, r3
     960:	683a      	ldr	r2, [r7, #0]
     962:	8852      	ldrh	r2, [r2, #2]
     964:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
     966:	687b      	ldr	r3, [r7, #4]
     968:	1c18      	adds	r0, r3, #0
     96a:	4b51      	ldr	r3, [pc, #324]	; (ab0 <_i2c_master_write_packet+0x164>)
     96c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     96e:	683b      	ldr	r3, [r7, #0]
     970:	7a5b      	ldrb	r3, [r3, #9]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     976:	683b      	ldr	r3, [r7, #0]
     978:	7a9b      	ldrb	r3, [r3, #10]
     97a:	687a      	ldr	r2, [r7, #4]
     97c:	1c10      	adds	r0, r2, #0
     97e:	1c19      	adds	r1, r3, #0
     980:	4b4c      	ldr	r3, [pc, #304]	; (ab4 <_i2c_master_write_packet+0x168>)
     982:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     984:	68fb      	ldr	r3, [r7, #12]
     986:	685b      	ldr	r3, [r3, #4]
     988:	4a4b      	ldr	r2, [pc, #300]	; (ab8 <_i2c_master_write_packet+0x16c>)
     98a:	401a      	ands	r2, r3
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     990:	683b      	ldr	r3, [r7, #0]
     992:	7a1b      	ldrb	r3, [r3, #8]
     994:	2b00      	cmp	r3, #0
     996:	d00d      	beq.n	9b4 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     998:	683b      	ldr	r3, [r7, #0]
     99a:	881b      	ldrh	r3, [r3, #0]
     99c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     99e:	683b      	ldr	r3, [r7, #0]
     9a0:	7a5b      	ldrb	r3, [r3, #9]
     9a2:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9a4:	4313      	orrs	r3, r2
     9a6:	1c1a      	adds	r2, r3, #0
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     9a8:	2380      	movs	r3, #128	; 0x80
     9aa:	021b      	lsls	r3, r3, #8
     9ac:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9ae:	68fb      	ldr	r3, [r7, #12]
     9b0:	625a      	str	r2, [r3, #36]	; 0x24
     9b2:	e009      	b.n	9c8 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9b4:	683b      	ldr	r3, [r7, #0]
     9b6:	881b      	ldrh	r3, [r3, #0]
     9b8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	7a5b      	ldrb	r3, [r3, #9]
     9be:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     9c0:	4313      	orrs	r3, r2
     9c2:	1c1a      	adds	r2, r3, #0
     9c4:	68fb      	ldr	r3, [r7, #12]
     9c6:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     9c8:	2317      	movs	r3, #23
     9ca:	18fc      	adds	r4, r7, r3
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	1c18      	adds	r0, r3, #0
     9d0:	4b3a      	ldr	r3, [pc, #232]	; (abc <_i2c_master_write_packet+0x170>)
     9d2:	4798      	blx	r3
     9d4:	1c03      	adds	r3, r0, #0
     9d6:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     9d8:	2317      	movs	r3, #23
     9da:	18fb      	adds	r3, r7, r3
     9dc:	781b      	ldrb	r3, [r3, #0]
     9de:	2b00      	cmp	r3, #0
     9e0:	d107      	bne.n	9f2 <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
     9e2:	2317      	movs	r3, #23
     9e4:	18fc      	adds	r4, r7, r3
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	1c18      	adds	r0, r3, #0
     9ea:	4b35      	ldr	r3, [pc, #212]	; (ac0 <_i2c_master_write_packet+0x174>)
     9ec:	4798      	blx	r3
     9ee:	1c03      	adds	r3, r0, #0
     9f0:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     9f2:	2317      	movs	r3, #23
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d151      	bne.n	aa0 <_i2c_master_write_packet+0x154>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
     9fc:	2312      	movs	r3, #18
     9fe:	18fb      	adds	r3, r7, r3
     a00:	2200      	movs	r2, #0
     a02:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
     a04:	e034      	b.n	a70 <_i2c_master_write_packet+0x124>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	8b5b      	ldrh	r3, [r3, #26]
     a0a:	b29b      	uxth	r3, r3
     a0c:	1c1a      	adds	r2, r3, #0
     a0e:	2320      	movs	r3, #32
     a10:	4013      	ands	r3, r2
     a12:	d101      	bne.n	a18 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
     a14:	2341      	movs	r3, #65	; 0x41
     a16:	e046      	b.n	aa6 <_i2c_master_write_packet+0x15a>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     a18:	687b      	ldr	r3, [r7, #4]
     a1a:	1c18      	adds	r0, r3, #0
     a1c:	4b24      	ldr	r3, [pc, #144]	; (ab0 <_i2c_master_write_packet+0x164>)
     a1e:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     a20:	683b      	ldr	r3, [r7, #0]
     a22:	685a      	ldr	r2, [r3, #4]
     a24:	2312      	movs	r3, #18
     a26:	18fb      	adds	r3, r7, r3
     a28:	881b      	ldrh	r3, [r3, #0]
     a2a:	2112      	movs	r1, #18
     a2c:	1879      	adds	r1, r7, r1
     a2e:	1c58      	adds	r0, r3, #1
     a30:	8008      	strh	r0, [r1, #0]
     a32:	18d3      	adds	r3, r2, r3
     a34:	7819      	ldrb	r1, [r3, #0]
     a36:	68fb      	ldr	r3, [r7, #12]
     a38:	2228      	movs	r2, #40	; 0x28
     a3a:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     a3c:	2317      	movs	r3, #23
     a3e:	18fc      	adds	r4, r7, r3
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	1c18      	adds	r0, r3, #0
     a44:	4b1d      	ldr	r3, [pc, #116]	; (abc <_i2c_master_write_packet+0x170>)
     a46:	4798      	blx	r3
     a48:	1c03      	adds	r3, r0, #0
     a4a:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     a4c:	2317      	movs	r3, #23
     a4e:	18fb      	adds	r3, r7, r3
     a50:	781b      	ldrb	r3, [r3, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d000      	beq.n	a58 <_i2c_master_write_packet+0x10c>
				break;
     a56:	e014      	b.n	a82 <_i2c_master_write_packet+0x136>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a58:	68fb      	ldr	r3, [r7, #12]
     a5a:	8b5b      	ldrh	r3, [r3, #26]
     a5c:	b29b      	uxth	r3, r3
     a5e:	1c1a      	adds	r2, r3, #0
     a60:	2304      	movs	r3, #4
     a62:	4013      	ands	r3, r2
     a64:	d004      	beq.n	a70 <_i2c_master_write_packet+0x124>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     a66:	2317      	movs	r3, #23
     a68:	18fb      	adds	r3, r7, r3
     a6a:	221e      	movs	r2, #30
     a6c:	701a      	strb	r2, [r3, #0]
				break;
     a6e:	e008      	b.n	a82 <_i2c_master_write_packet+0x136>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     a70:	2314      	movs	r3, #20
     a72:	18fb      	adds	r3, r7, r3
     a74:	881b      	ldrh	r3, [r3, #0]
     a76:	2214      	movs	r2, #20
     a78:	18ba      	adds	r2, r7, r2
     a7a:	1e59      	subs	r1, r3, #1
     a7c:	8011      	strh	r1, [r2, #0]
     a7e:	2b00      	cmp	r3, #0
     a80:	d1c1      	bne.n	a06 <_i2c_master_write_packet+0xba>
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	7a9b      	ldrb	r3, [r3, #10]
     a86:	2b00      	cmp	r3, #0
     a88:	d00a      	beq.n	aa0 <_i2c_master_write_packet+0x154>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	1c18      	adds	r0, r3, #0
     a8e:	4b08      	ldr	r3, [pc, #32]	; (ab0 <_i2c_master_write_packet+0x164>)
     a90:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	685b      	ldr	r3, [r3, #4]
     a96:	22c0      	movs	r2, #192	; 0xc0
     a98:	0292      	lsls	r2, r2, #10
     a9a:	431a      	orrs	r2, r3
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
     aa0:	2317      	movs	r3, #23
     aa2:	18fb      	adds	r3, r7, r3
     aa4:	781b      	ldrb	r3, [r3, #0]
}
     aa6:	1c18      	adds	r0, r3, #0
     aa8:	46bd      	mov	sp, r7
     aaa:	b007      	add	sp, #28
     aac:	bd90      	pop	{r4, r7, pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	00000279 	.word	0x00000279
     ab4:	00000681 	.word	0x00000681
     ab8:	fffbffff 	.word	0xfffbffff
     abc:	00000621 	.word	0x00000621
     ac0:	000005c1 	.word	0x000005c1

00000ac4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	b082      	sub	sp, #8
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
     acc:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     ace:	687b      	ldr	r3, [r7, #4]
     ad0:	2201      	movs	r2, #1
     ad2:	729a      	strb	r2, [r3, #10]

	return _i2c_master_write_packet(module, packet);
     ad4:	687a      	ldr	r2, [r7, #4]
     ad6:	683b      	ldr	r3, [r7, #0]
     ad8:	1c10      	adds	r0, r2, #0
     ada:	1c19      	adds	r1, r3, #0
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <i2c_master_write_packet_wait+0x28>)
     ade:	4798      	blx	r3
     ae0:	1c03      	adds	r3, r0, #0
}
     ae2:	1c18      	adds	r0, r3, #0
     ae4:	46bd      	mov	sp, r7
     ae6:	b002      	add	sp, #8
     ae8:	bd80      	pop	{r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	0000094d 	.word	0x0000094d

00000af0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     af0:	b580      	push	{r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	2200      	movs	r2, #0
     afc:	701a      	strb	r2, [r3, #0]
}
     afe:	46bd      	mov	sp, r7
     b00:	b002      	add	sp, #8
     b02:	bd80      	pop	{r7, pc}

00000b04 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	b08d      	sub	sp, #52	; 0x34
     b08:	af00      	add	r7, sp, #0
     b0a:	60b8      	str	r0, [r7, #8]
     b0c:	60f9      	str	r1, [r7, #12]
     b0e:	603a      	str	r2, [r7, #0]
     b10:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b12:	2300      	movs	r3, #0
     b14:	2400      	movs	r4, #0
     b16:	623b      	str	r3, [r7, #32]
     b18:	627c      	str	r4, [r7, #36]	; 0x24
     b1a:	2300      	movs	r3, #0
     b1c:	2400      	movs	r4, #0
     b1e:	61bb      	str	r3, [r7, #24]
     b20:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     b22:	233f      	movs	r3, #63	; 0x3f
     b24:	62fb      	str	r3, [r7, #44]	; 0x2c
     b26:	e053      	b.n	bd0 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b2a:	3b20      	subs	r3, #32
     b2c:	2b00      	cmp	r3, #0
     b2e:	db04      	blt.n	b3a <long_division+0x36>
     b30:	2201      	movs	r2, #1
     b32:	409a      	lsls	r2, r3
     b34:	1c13      	adds	r3, r2, #0
     b36:	617b      	str	r3, [r7, #20]
     b38:	e00b      	b.n	b52 <long_division+0x4e>
     b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b3c:	2220      	movs	r2, #32
     b3e:	1ad3      	subs	r3, r2, r3
     b40:	2201      	movs	r2, #1
     b42:	40da      	lsrs	r2, r3
     b44:	1c13      	adds	r3, r2, #0
     b46:	2100      	movs	r1, #0
     b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     b4a:	4091      	lsls	r1, r2
     b4c:	1c0a      	adds	r2, r1, #0
     b4e:	4313      	orrs	r3, r2
     b50:	617b      	str	r3, [r7, #20]
     b52:	2201      	movs	r2, #1
     b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b56:	409a      	lsls	r2, r3
     b58:	1c13      	adds	r3, r2, #0
     b5a:	613b      	str	r3, [r7, #16]

		r = r << 1;
     b5c:	69bb      	ldr	r3, [r7, #24]
     b5e:	69fc      	ldr	r4, [r7, #28]
     b60:	18db      	adds	r3, r3, r3
     b62:	4164      	adcs	r4, r4
     b64:	61bb      	str	r3, [r7, #24]
     b66:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     b68:	68bb      	ldr	r3, [r7, #8]
     b6a:	693a      	ldr	r2, [r7, #16]
     b6c:	401a      	ands	r2, r3
     b6e:	1c15      	adds	r5, r2, #0
     b70:	68fb      	ldr	r3, [r7, #12]
     b72:	697a      	ldr	r2, [r7, #20]
     b74:	401a      	ands	r2, r3
     b76:	1c16      	adds	r6, r2, #0
     b78:	1c2b      	adds	r3, r5, #0
     b7a:	4333      	orrs	r3, r6
     b7c:	d007      	beq.n	b8e <long_division+0x8a>
			r |= 0x01;
     b7e:	69bb      	ldr	r3, [r7, #24]
     b80:	2201      	movs	r2, #1
     b82:	4313      	orrs	r3, r2
     b84:	61bb      	str	r3, [r7, #24]
     b86:	69fb      	ldr	r3, [r7, #28]
     b88:	2200      	movs	r2, #0
     b8a:	4313      	orrs	r3, r2
     b8c:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     b8e:	687a      	ldr	r2, [r7, #4]
     b90:	69fb      	ldr	r3, [r7, #28]
     b92:	429a      	cmp	r2, r3
     b94:	d819      	bhi.n	bca <long_division+0xc6>
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	69fb      	ldr	r3, [r7, #28]
     b9a:	429a      	cmp	r2, r3
     b9c:	d103      	bne.n	ba6 <long_division+0xa2>
     b9e:	683a      	ldr	r2, [r7, #0]
     ba0:	69bb      	ldr	r3, [r7, #24]
     ba2:	429a      	cmp	r2, r3
     ba4:	d811      	bhi.n	bca <long_division+0xc6>
			r = r - d;
     ba6:	69b9      	ldr	r1, [r7, #24]
     ba8:	69fa      	ldr	r2, [r7, #28]
     baa:	683b      	ldr	r3, [r7, #0]
     bac:	687c      	ldr	r4, [r7, #4]
     bae:	1ac9      	subs	r1, r1, r3
     bb0:	41a2      	sbcs	r2, r4
     bb2:	1c0b      	adds	r3, r1, #0
     bb4:	1c14      	adds	r4, r2, #0
     bb6:	61bb      	str	r3, [r7, #24]
     bb8:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     bba:	6a3a      	ldr	r2, [r7, #32]
     bbc:	693b      	ldr	r3, [r7, #16]
     bbe:	4313      	orrs	r3, r2
     bc0:	623b      	str	r3, [r7, #32]
     bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     bc4:	697b      	ldr	r3, [r7, #20]
     bc6:	4313      	orrs	r3, r2
     bc8:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bcc:	3b01      	subs	r3, #1
     bce:	62fb      	str	r3, [r7, #44]	; 0x2c
     bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     bd2:	2b00      	cmp	r3, #0
     bd4:	daa8      	bge.n	b28 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     bd6:	6a3b      	ldr	r3, [r7, #32]
     bd8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     bda:	1c18      	adds	r0, r3, #0
     bdc:	1c21      	adds	r1, r4, #0
     bde:	46bd      	mov	sp, r7
     be0:	b00d      	add	sp, #52	; 0x34
     be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000be4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     be4:	b580      	push	{r7, lr}
     be6:	b086      	sub	sp, #24
     be8:	af00      	add	r7, sp, #0
     bea:	60f8      	str	r0, [r7, #12]
     bec:	60b9      	str	r1, [r7, #8]
     bee:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     bf0:	2316      	movs	r3, #22
     bf2:	18fb      	adds	r3, r7, r3
     bf4:	2200      	movs	r2, #0
     bf6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     bf8:	68bb      	ldr	r3, [r7, #8]
     bfa:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     bfc:	68bb      	ldr	r3, [r7, #8]
     bfe:	085a      	lsrs	r2, r3, #1
     c00:	68fb      	ldr	r3, [r7, #12]
     c02:	429a      	cmp	r2, r3
     c04:	d201      	bcs.n	c0a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c06:	2340      	movs	r3, #64	; 0x40
     c08:	e026      	b.n	c58 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     c0a:	68bb      	ldr	r3, [r7, #8]
     c0c:	085b      	lsrs	r3, r3, #1
     c0e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     c10:	e00a      	b.n	c28 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     c12:	693a      	ldr	r2, [r7, #16]
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	1ad3      	subs	r3, r2, r3
     c18:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     c1a:	2316      	movs	r3, #22
     c1c:	18fb      	adds	r3, r7, r3
     c1e:	881a      	ldrh	r2, [r3, #0]
     c20:	2316      	movs	r3, #22
     c22:	18fb      	adds	r3, r7, r3
     c24:	3201      	adds	r2, #1
     c26:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     c28:	693a      	ldr	r2, [r7, #16]
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	429a      	cmp	r2, r3
     c2e:	d2f0      	bcs.n	c12 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     c30:	2316      	movs	r3, #22
     c32:	18fb      	adds	r3, r7, r3
     c34:	2216      	movs	r2, #22
     c36:	18ba      	adds	r2, r7, r2
     c38:	8812      	ldrh	r2, [r2, #0]
     c3a:	3a01      	subs	r2, #1
     c3c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     c3e:	2316      	movs	r3, #22
     c40:	18fb      	adds	r3, r7, r3
     c42:	881b      	ldrh	r3, [r3, #0]
     c44:	2bff      	cmp	r3, #255	; 0xff
     c46:	d901      	bls.n	c4c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c48:	2340      	movs	r3, #64	; 0x40
     c4a:	e005      	b.n	c58 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	2216      	movs	r2, #22
     c50:	18ba      	adds	r2, r7, r2
     c52:	8812      	ldrh	r2, [r2, #0]
     c54:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     c56:	2300      	movs	r3, #0
	}
}
     c58:	1c18      	adds	r0, r3, #0
     c5a:	46bd      	mov	sp, r7
     c5c:	b006      	add	sp, #24
     c5e:	bd80      	pop	{r7, pc}

00000c60 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c60:	b5f0      	push	{r4, r5, r6, r7, lr}
     c62:	b09d      	sub	sp, #116	; 0x74
     c64:	af00      	add	r7, sp, #0
     c66:	63f8      	str	r0, [r7, #60]	; 0x3c
     c68:	63b9      	str	r1, [r7, #56]	; 0x38
     c6a:	637a      	str	r2, [r7, #52]	; 0x34
     c6c:	2233      	movs	r2, #51	; 0x33
     c6e:	18ba      	adds	r2, r7, r2
     c70:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     c72:	2300      	movs	r3, #0
     c74:	2400      	movs	r4, #0
     c76:	65bb      	str	r3, [r7, #88]	; 0x58
     c78:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
     c7a:	2300      	movs	r3, #0
     c7c:	2400      	movs	r4, #0
     c7e:	653b      	str	r3, [r7, #80]	; 0x50
     c80:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
     c82:	2300      	movs	r3, #0
     c84:	2400      	movs	r4, #0
     c86:	66bb      	str	r3, [r7, #104]	; 0x68
     c88:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     c8a:	2300      	movs	r3, #0
     c8c:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c8e:	2358      	movs	r3, #88	; 0x58
     c90:	2230      	movs	r2, #48	; 0x30
     c92:	4694      	mov	ip, r2
     c94:	44bc      	add	ip, r7
     c96:	4463      	add	r3, ip
     c98:	781a      	ldrb	r2, [r3, #0]
     c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c9c:	435a      	muls	r2, r3
     c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ca0:	429a      	cmp	r2, r3
     ca2:	d901      	bls.n	ca8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ca4:	2340      	movs	r3, #64	; 0x40
     ca6:	e0c9      	b.n	e3c <_sercom_get_async_baud_val+0x1dc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     ca8:	2333      	movs	r3, #51	; 0x33
     caa:	18fb      	adds	r3, r7, r3
     cac:	781b      	ldrb	r3, [r3, #0]
     cae:	2b00      	cmp	r3, #0
     cb0:	d13f      	bne.n	d32 <_sercom_get_async_baud_val+0xd2>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cb2:	2358      	movs	r3, #88	; 0x58
     cb4:	2230      	movs	r2, #48	; 0x30
     cb6:	4694      	mov	ip, r2
     cb8:	44bc      	add	ip, r7
     cba:	4463      	add	r3, ip
     cbc:	781b      	ldrb	r3, [r3, #0]
     cbe:	b2db      	uxtb	r3, r3
     cc0:	613b      	str	r3, [r7, #16]
     cc2:	2300      	movs	r3, #0
     cc4:	617b      	str	r3, [r7, #20]
     cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cc8:	60bb      	str	r3, [r7, #8]
     cca:	2300      	movs	r3, #0
     ccc:	60fb      	str	r3, [r7, #12]
     cce:	4c5d      	ldr	r4, [pc, #372]	; (e44 <_sercom_get_async_baud_val+0x1e4>)
     cd0:	6938      	ldr	r0, [r7, #16]
     cd2:	6979      	ldr	r1, [r7, #20]
     cd4:	68ba      	ldr	r2, [r7, #8]
     cd6:	68fb      	ldr	r3, [r7, #12]
     cd8:	47a0      	blx	r4
     cda:	1c03      	adds	r3, r0, #0
     cdc:	1c0c      	adds	r4, r1, #0
     cde:	001b      	movs	r3, r3
     ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
     ce2:	2300      	movs	r3, #0
     ce4:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
     ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ce8:	603b      	str	r3, [r7, #0]
     cea:	2300      	movs	r3, #0
     cec:	607b      	str	r3, [r7, #4]
     cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     cf0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
     cf2:	1c18      	adds	r0, r3, #0
     cf4:	1c21      	adds	r1, r4, #0
     cf6:	683a      	ldr	r2, [r7, #0]
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	4c53      	ldr	r4, [pc, #332]	; (e48 <_sercom_get_async_baud_val+0x1e8>)
     cfc:	47a0      	blx	r4
     cfe:	1c03      	adds	r3, r0, #0
     d00:	1c0c      	adds	r4, r1, #0
     d02:	65bb      	str	r3, [r7, #88]	; 0x58
     d04:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d06:	2100      	movs	r1, #0
     d08:	2201      	movs	r2, #1
     d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     d0c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     d0e:	1ac9      	subs	r1, r1, r3
     d10:	41a2      	sbcs	r2, r4
     d12:	1c0b      	adds	r3, r1, #0
     d14:	1c14      	adds	r4, r2, #0
     d16:	653b      	str	r3, [r7, #80]	; 0x50
     d18:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
     d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     d1c:	0c1b      	lsrs	r3, r3, #16
     d1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     d20:	0416      	lsls	r6, r2, #16
     d22:	431e      	orrs	r6, r3
     d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     d26:	041d      	lsls	r5, r3, #16
     d28:	0033      	movs	r3, r6
     d2a:	66bb      	str	r3, [r7, #104]	; 0x68
     d2c:	2300      	movs	r3, #0
     d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
     d30:	e07e      	b.n	e30 <_sercom_get_async_baud_val+0x1d0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d32:	2333      	movs	r3, #51	; 0x33
     d34:	18fb      	adds	r3, r7, r3
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	2b01      	cmp	r3, #1
     d3a:	d000      	beq.n	d3e <_sercom_get_async_baud_val+0xde>
     d3c:	e078      	b.n	e30 <_sercom_get_async_baud_val+0x1d0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     d3e:	2337      	movs	r3, #55	; 0x37
     d40:	2230      	movs	r2, #48	; 0x30
     d42:	4694      	mov	ip, r2
     d44:	44bc      	add	ip, r7
     d46:	4463      	add	r3, ip
     d48:	2200      	movs	r2, #0
     d4a:	701a      	strb	r2, [r3, #0]
     d4c:	e051      	b.n	df2 <_sercom_get_async_baud_val+0x192>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d50:	62bb      	str	r3, [r7, #40]	; 0x28
     d52:	2300      	movs	r3, #0
     d54:	62fb      	str	r3, [r7, #44]	; 0x2c
     d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     d5a:	1c03      	adds	r3, r0, #0
     d5c:	0f5b      	lsrs	r3, r3, #29
     d5e:	1c0a      	adds	r2, r1, #0
     d60:	00d2      	lsls	r2, r2, #3
     d62:	4313      	orrs	r3, r2
     d64:	64fb      	str	r3, [r7, #76]	; 0x4c
     d66:	1c03      	adds	r3, r0, #0
     d68:	00db      	lsls	r3, r3, #3
     d6a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
     d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d6e:	623b      	str	r3, [r7, #32]
     d70:	2300      	movs	r3, #0
     d72:	627b      	str	r3, [r7, #36]	; 0x24
     d74:	2358      	movs	r3, #88	; 0x58
     d76:	2230      	movs	r2, #48	; 0x30
     d78:	4694      	mov	ip, r2
     d7a:	44bc      	add	ip, r7
     d7c:	4463      	add	r3, ip
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	b2db      	uxtb	r3, r3
     d82:	61bb      	str	r3, [r7, #24]
     d84:	2300      	movs	r3, #0
     d86:	61fb      	str	r3, [r7, #28]
     d88:	4c2e      	ldr	r4, [pc, #184]	; (e44 <_sercom_get_async_baud_val+0x1e4>)
     d8a:	6a38      	ldr	r0, [r7, #32]
     d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d8e:	69ba      	ldr	r2, [r7, #24]
     d90:	69fb      	ldr	r3, [r7, #28]
     d92:	47a0      	blx	r4
     d94:	1c03      	adds	r3, r0, #0
     d96:	1c0c      	adds	r4, r1, #0
     d98:	643b      	str	r3, [r7, #64]	; 0x40
     d9a:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
     d9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
     d9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     da2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     da4:	1c08      	adds	r0, r1, #0
     da6:	1c11      	adds	r1, r2, #0
     da8:	1c1a      	adds	r2, r3, #0
     daa:	1c23      	adds	r3, r4, #0
     dac:	4c26      	ldr	r4, [pc, #152]	; (e48 <_sercom_get_async_baud_val+0x1e8>)
     dae:	47a0      	blx	r4
     db0:	1c03      	adds	r3, r0, #0
     db2:	1c0c      	adds	r4, r1, #0
     db4:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
     db6:	2337      	movs	r3, #55	; 0x37
     db8:	2230      	movs	r2, #48	; 0x30
     dba:	4694      	mov	ip, r2
     dbc:	44bc      	add	ip, r7
     dbe:	4463      	add	r3, ip
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     dc4:	1ad3      	subs	r3, r2, r3
     dc6:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
     dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     dca:	08db      	lsrs	r3, r3, #3
     dcc:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
     dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     dd0:	4a1e      	ldr	r2, [pc, #120]	; (e4c <_sercom_get_async_baud_val+0x1ec>)
     dd2:	4293      	cmp	r3, r2
     dd4:	d800      	bhi.n	dd8 <_sercom_get_async_baud_val+0x178>
				break;
     dd6:	e014      	b.n	e02 <_sercom_get_async_baud_val+0x1a2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     dd8:	2337      	movs	r3, #55	; 0x37
     dda:	2230      	movs	r2, #48	; 0x30
     ddc:	4694      	mov	ip, r2
     dde:	44bc      	add	ip, r7
     de0:	4463      	add	r3, ip
     de2:	781a      	ldrb	r2, [r3, #0]
     de4:	2337      	movs	r3, #55	; 0x37
     de6:	2130      	movs	r1, #48	; 0x30
     de8:	468c      	mov	ip, r1
     dea:	44bc      	add	ip, r7
     dec:	4463      	add	r3, ip
     dee:	3201      	adds	r2, #1
     df0:	701a      	strb	r2, [r3, #0]
     df2:	2337      	movs	r3, #55	; 0x37
     df4:	2230      	movs	r2, #48	; 0x30
     df6:	4694      	mov	ip, r2
     df8:	44bc      	add	ip, r7
     dfa:	4463      	add	r3, ip
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	2b07      	cmp	r3, #7
     e00:	d9a5      	bls.n	d4e <_sercom_get_async_baud_val+0xee>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     e02:	2337      	movs	r3, #55	; 0x37
     e04:	2230      	movs	r2, #48	; 0x30
     e06:	4694      	mov	ip, r2
     e08:	44bc      	add	ip, r7
     e0a:	4463      	add	r3, ip
     e0c:	781b      	ldrb	r3, [r3, #0]
     e0e:	2b08      	cmp	r3, #8
     e10:	d101      	bne.n	e16 <_sercom_get_async_baud_val+0x1b6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e12:	2340      	movs	r3, #64	; 0x40
     e14:	e012      	b.n	e3c <_sercom_get_async_baud_val+0x1dc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
     e16:	2337      	movs	r3, #55	; 0x37
     e18:	2230      	movs	r2, #48	; 0x30
     e1a:	4694      	mov	ip, r2
     e1c:	44bc      	add	ip, r7
     e1e:	4463      	add	r3, ip
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	035b      	lsls	r3, r3, #13
     e24:	1c1a      	adds	r2, r3, #0
     e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     e28:	4313      	orrs	r3, r2
     e2a:	66bb      	str	r3, [r7, #104]	; 0x68
     e2c:	2300      	movs	r3, #0
     e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
     e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     e32:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     e34:	b29a      	uxth	r2, r3
     e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e38:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     e3a:	2300      	movs	r3, #0
}
     e3c:	1c18      	adds	r0, r3, #0
     e3e:	46bd      	mov	sp, r7
     e40:	b01d      	add	sp, #116	; 0x74
     e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e44:	00003fed 	.word	0x00003fed
     e48:	00000b05 	.word	0x00000b05
     e4c:	00001fff 	.word	0x00001fff

00000e50 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e50:	b580      	push	{r7, lr}
     e52:	b084      	sub	sp, #16
     e54:	af00      	add	r7, sp, #0
     e56:	1c02      	adds	r2, r0, #0
     e58:	1dfb      	adds	r3, r7, #7
     e5a:	701a      	strb	r2, [r3, #0]
     e5c:	1dbb      	adds	r3, r7, #6
     e5e:	1c0a      	adds	r2, r1, #0
     e60:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     e62:	4b1a      	ldr	r3, [pc, #104]	; (ecc <sercom_set_gclk_generator+0x7c>)
     e64:	781b      	ldrb	r3, [r3, #0]
     e66:	2201      	movs	r2, #1
     e68:	4053      	eors	r3, r2
     e6a:	b2db      	uxtb	r3, r3
     e6c:	2b00      	cmp	r3, #0
     e6e:	d103      	bne.n	e78 <sercom_set_gclk_generator+0x28>
     e70:	1dbb      	adds	r3, r7, #6
     e72:	781b      	ldrb	r3, [r3, #0]
     e74:	2b00      	cmp	r3, #0
     e76:	d01b      	beq.n	eb0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     e78:	230c      	movs	r3, #12
     e7a:	18fb      	adds	r3, r7, r3
     e7c:	1c18      	adds	r0, r3, #0
     e7e:	4b14      	ldr	r3, [pc, #80]	; (ed0 <sercom_set_gclk_generator+0x80>)
     e80:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     e82:	230c      	movs	r3, #12
     e84:	18fb      	adds	r3, r7, r3
     e86:	1dfa      	adds	r2, r7, #7
     e88:	7812      	ldrb	r2, [r2, #0]
     e8a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e8c:	230c      	movs	r3, #12
     e8e:	18fb      	adds	r3, r7, r3
     e90:	2013      	movs	r0, #19
     e92:	1c19      	adds	r1, r3, #0
     e94:	4b0f      	ldr	r3, [pc, #60]	; (ed4 <sercom_set_gclk_generator+0x84>)
     e96:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e98:	2013      	movs	r0, #19
     e9a:	4b0f      	ldr	r3, [pc, #60]	; (ed8 <sercom_set_gclk_generator+0x88>)
     e9c:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     e9e:	4b0b      	ldr	r3, [pc, #44]	; (ecc <sercom_set_gclk_generator+0x7c>)
     ea0:	1dfa      	adds	r2, r7, #7
     ea2:	7812      	ldrb	r2, [r2, #0]
     ea4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     ea6:	4b09      	ldr	r3, [pc, #36]	; (ecc <sercom_set_gclk_generator+0x7c>)
     ea8:	2201      	movs	r2, #1
     eaa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     eac:	2300      	movs	r3, #0
     eae:	e008      	b.n	ec2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     eb0:	4b06      	ldr	r3, [pc, #24]	; (ecc <sercom_set_gclk_generator+0x7c>)
     eb2:	785b      	ldrb	r3, [r3, #1]
     eb4:	1dfa      	adds	r2, r7, #7
     eb6:	7812      	ldrb	r2, [r2, #0]
     eb8:	429a      	cmp	r2, r3
     eba:	d101      	bne.n	ec0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     ebc:	2300      	movs	r3, #0
     ebe:	e000      	b.n	ec2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ec0:	231d      	movs	r3, #29
}
     ec2:	1c18      	adds	r0, r3, #0
     ec4:	46bd      	mov	sp, r7
     ec6:	b004      	add	sp, #16
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	2000009c 	.word	0x2000009c
     ed0:	00000af1 	.word	0x00000af1
     ed4:	00002ad9 	.word	0x00002ad9
     ed8:	00002b1d 	.word	0x00002b1d

00000edc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     edc:	b580      	push	{r7, lr}
     ede:	b082      	sub	sp, #8
     ee0:	af00      	add	r7, sp, #0
     ee2:	6078      	str	r0, [r7, #4]
     ee4:	1c0a      	adds	r2, r1, #0
     ee6:	1cfb      	adds	r3, r7, #3
     ee8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     eea:	687b      	ldr	r3, [r7, #4]
     eec:	4a4d      	ldr	r2, [pc, #308]	; (1024 <_sercom_get_default_pad+0x148>)
     eee:	4293      	cmp	r3, r2
     ef0:	d03f      	beq.n	f72 <_sercom_get_default_pad+0x96>
     ef2:	4a4c      	ldr	r2, [pc, #304]	; (1024 <_sercom_get_default_pad+0x148>)
     ef4:	4293      	cmp	r3, r2
     ef6:	d806      	bhi.n	f06 <_sercom_get_default_pad+0x2a>
     ef8:	4a4b      	ldr	r2, [pc, #300]	; (1028 <_sercom_get_default_pad+0x14c>)
     efa:	4293      	cmp	r3, r2
     efc:	d00f      	beq.n	f1e <_sercom_get_default_pad+0x42>
     efe:	4a4b      	ldr	r2, [pc, #300]	; (102c <_sercom_get_default_pad+0x150>)
     f00:	4293      	cmp	r3, r2
     f02:	d021      	beq.n	f48 <_sercom_get_default_pad+0x6c>
     f04:	e089      	b.n	101a <_sercom_get_default_pad+0x13e>
     f06:	4a4a      	ldr	r2, [pc, #296]	; (1030 <_sercom_get_default_pad+0x154>)
     f08:	4293      	cmp	r3, r2
     f0a:	d100      	bne.n	f0e <_sercom_get_default_pad+0x32>
     f0c:	e05b      	b.n	fc6 <_sercom_get_default_pad+0xea>
     f0e:	4a49      	ldr	r2, [pc, #292]	; (1034 <_sercom_get_default_pad+0x158>)
     f10:	4293      	cmp	r3, r2
     f12:	d100      	bne.n	f16 <_sercom_get_default_pad+0x3a>
     f14:	e06c      	b.n	ff0 <_sercom_get_default_pad+0x114>
     f16:	4a48      	ldr	r2, [pc, #288]	; (1038 <_sercom_get_default_pad+0x15c>)
     f18:	4293      	cmp	r3, r2
     f1a:	d03f      	beq.n	f9c <_sercom_get_default_pad+0xc0>
     f1c:	e07d      	b.n	101a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f1e:	1cfb      	adds	r3, r7, #3
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	2b01      	cmp	r3, #1
     f24:	d00a      	beq.n	f3c <_sercom_get_default_pad+0x60>
     f26:	dc02      	bgt.n	f2e <_sercom_get_default_pad+0x52>
     f28:	2b00      	cmp	r3, #0
     f2a:	d005      	beq.n	f38 <_sercom_get_default_pad+0x5c>
     f2c:	e075      	b.n	101a <_sercom_get_default_pad+0x13e>
     f2e:	2b02      	cmp	r3, #2
     f30:	d006      	beq.n	f40 <_sercom_get_default_pad+0x64>
     f32:	2b03      	cmp	r3, #3
     f34:	d006      	beq.n	f44 <_sercom_get_default_pad+0x68>
     f36:	e070      	b.n	101a <_sercom_get_default_pad+0x13e>
     f38:	4b40      	ldr	r3, [pc, #256]	; (103c <_sercom_get_default_pad+0x160>)
     f3a:	e06f      	b.n	101c <_sercom_get_default_pad+0x140>
     f3c:	4b40      	ldr	r3, [pc, #256]	; (1040 <_sercom_get_default_pad+0x164>)
     f3e:	e06d      	b.n	101c <_sercom_get_default_pad+0x140>
     f40:	4b40      	ldr	r3, [pc, #256]	; (1044 <_sercom_get_default_pad+0x168>)
     f42:	e06b      	b.n	101c <_sercom_get_default_pad+0x140>
     f44:	4b40      	ldr	r3, [pc, #256]	; (1048 <_sercom_get_default_pad+0x16c>)
     f46:	e069      	b.n	101c <_sercom_get_default_pad+0x140>
     f48:	1cfb      	adds	r3, r7, #3
     f4a:	781b      	ldrb	r3, [r3, #0]
     f4c:	2b01      	cmp	r3, #1
     f4e:	d00a      	beq.n	f66 <_sercom_get_default_pad+0x8a>
     f50:	dc02      	bgt.n	f58 <_sercom_get_default_pad+0x7c>
     f52:	2b00      	cmp	r3, #0
     f54:	d005      	beq.n	f62 <_sercom_get_default_pad+0x86>
     f56:	e060      	b.n	101a <_sercom_get_default_pad+0x13e>
     f58:	2b02      	cmp	r3, #2
     f5a:	d006      	beq.n	f6a <_sercom_get_default_pad+0x8e>
     f5c:	2b03      	cmp	r3, #3
     f5e:	d006      	beq.n	f6e <_sercom_get_default_pad+0x92>
     f60:	e05b      	b.n	101a <_sercom_get_default_pad+0x13e>
     f62:	2303      	movs	r3, #3
     f64:	e05a      	b.n	101c <_sercom_get_default_pad+0x140>
     f66:	4b39      	ldr	r3, [pc, #228]	; (104c <_sercom_get_default_pad+0x170>)
     f68:	e058      	b.n	101c <_sercom_get_default_pad+0x140>
     f6a:	4b39      	ldr	r3, [pc, #228]	; (1050 <_sercom_get_default_pad+0x174>)
     f6c:	e056      	b.n	101c <_sercom_get_default_pad+0x140>
     f6e:	4b39      	ldr	r3, [pc, #228]	; (1054 <_sercom_get_default_pad+0x178>)
     f70:	e054      	b.n	101c <_sercom_get_default_pad+0x140>
     f72:	1cfb      	adds	r3, r7, #3
     f74:	781b      	ldrb	r3, [r3, #0]
     f76:	2b01      	cmp	r3, #1
     f78:	d00a      	beq.n	f90 <_sercom_get_default_pad+0xb4>
     f7a:	dc02      	bgt.n	f82 <_sercom_get_default_pad+0xa6>
     f7c:	2b00      	cmp	r3, #0
     f7e:	d005      	beq.n	f8c <_sercom_get_default_pad+0xb0>
     f80:	e04b      	b.n	101a <_sercom_get_default_pad+0x13e>
     f82:	2b02      	cmp	r3, #2
     f84:	d006      	beq.n	f94 <_sercom_get_default_pad+0xb8>
     f86:	2b03      	cmp	r3, #3
     f88:	d006      	beq.n	f98 <_sercom_get_default_pad+0xbc>
     f8a:	e046      	b.n	101a <_sercom_get_default_pad+0x13e>
     f8c:	4b32      	ldr	r3, [pc, #200]	; (1058 <_sercom_get_default_pad+0x17c>)
     f8e:	e045      	b.n	101c <_sercom_get_default_pad+0x140>
     f90:	4b32      	ldr	r3, [pc, #200]	; (105c <_sercom_get_default_pad+0x180>)
     f92:	e043      	b.n	101c <_sercom_get_default_pad+0x140>
     f94:	4b32      	ldr	r3, [pc, #200]	; (1060 <_sercom_get_default_pad+0x184>)
     f96:	e041      	b.n	101c <_sercom_get_default_pad+0x140>
     f98:	4b32      	ldr	r3, [pc, #200]	; (1064 <_sercom_get_default_pad+0x188>)
     f9a:	e03f      	b.n	101c <_sercom_get_default_pad+0x140>
     f9c:	1cfb      	adds	r3, r7, #3
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b01      	cmp	r3, #1
     fa2:	d00a      	beq.n	fba <_sercom_get_default_pad+0xde>
     fa4:	dc02      	bgt.n	fac <_sercom_get_default_pad+0xd0>
     fa6:	2b00      	cmp	r3, #0
     fa8:	d005      	beq.n	fb6 <_sercom_get_default_pad+0xda>
     faa:	e036      	b.n	101a <_sercom_get_default_pad+0x13e>
     fac:	2b02      	cmp	r3, #2
     fae:	d006      	beq.n	fbe <_sercom_get_default_pad+0xe2>
     fb0:	2b03      	cmp	r3, #3
     fb2:	d006      	beq.n	fc2 <_sercom_get_default_pad+0xe6>
     fb4:	e031      	b.n	101a <_sercom_get_default_pad+0x13e>
     fb6:	4b2c      	ldr	r3, [pc, #176]	; (1068 <_sercom_get_default_pad+0x18c>)
     fb8:	e030      	b.n	101c <_sercom_get_default_pad+0x140>
     fba:	4b2c      	ldr	r3, [pc, #176]	; (106c <_sercom_get_default_pad+0x190>)
     fbc:	e02e      	b.n	101c <_sercom_get_default_pad+0x140>
     fbe:	4b2c      	ldr	r3, [pc, #176]	; (1070 <_sercom_get_default_pad+0x194>)
     fc0:	e02c      	b.n	101c <_sercom_get_default_pad+0x140>
     fc2:	4b2c      	ldr	r3, [pc, #176]	; (1074 <_sercom_get_default_pad+0x198>)
     fc4:	e02a      	b.n	101c <_sercom_get_default_pad+0x140>
     fc6:	1cfb      	adds	r3, r7, #3
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	2b01      	cmp	r3, #1
     fcc:	d00a      	beq.n	fe4 <_sercom_get_default_pad+0x108>
     fce:	dc02      	bgt.n	fd6 <_sercom_get_default_pad+0xfa>
     fd0:	2b00      	cmp	r3, #0
     fd2:	d005      	beq.n	fe0 <_sercom_get_default_pad+0x104>
     fd4:	e021      	b.n	101a <_sercom_get_default_pad+0x13e>
     fd6:	2b02      	cmp	r3, #2
     fd8:	d006      	beq.n	fe8 <_sercom_get_default_pad+0x10c>
     fda:	2b03      	cmp	r3, #3
     fdc:	d006      	beq.n	fec <_sercom_get_default_pad+0x110>
     fde:	e01c      	b.n	101a <_sercom_get_default_pad+0x13e>
     fe0:	4b25      	ldr	r3, [pc, #148]	; (1078 <_sercom_get_default_pad+0x19c>)
     fe2:	e01b      	b.n	101c <_sercom_get_default_pad+0x140>
     fe4:	4b25      	ldr	r3, [pc, #148]	; (107c <_sercom_get_default_pad+0x1a0>)
     fe6:	e019      	b.n	101c <_sercom_get_default_pad+0x140>
     fe8:	4b25      	ldr	r3, [pc, #148]	; (1080 <_sercom_get_default_pad+0x1a4>)
     fea:	e017      	b.n	101c <_sercom_get_default_pad+0x140>
     fec:	4b25      	ldr	r3, [pc, #148]	; (1084 <_sercom_get_default_pad+0x1a8>)
     fee:	e015      	b.n	101c <_sercom_get_default_pad+0x140>
     ff0:	1cfb      	adds	r3, r7, #3
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	2b01      	cmp	r3, #1
     ff6:	d00a      	beq.n	100e <_sercom_get_default_pad+0x132>
     ff8:	dc02      	bgt.n	1000 <_sercom_get_default_pad+0x124>
     ffa:	2b00      	cmp	r3, #0
     ffc:	d005      	beq.n	100a <_sercom_get_default_pad+0x12e>
     ffe:	e00c      	b.n	101a <_sercom_get_default_pad+0x13e>
    1000:	2b02      	cmp	r3, #2
    1002:	d006      	beq.n	1012 <_sercom_get_default_pad+0x136>
    1004:	2b03      	cmp	r3, #3
    1006:	d006      	beq.n	1016 <_sercom_get_default_pad+0x13a>
    1008:	e007      	b.n	101a <_sercom_get_default_pad+0x13e>
    100a:	4b1f      	ldr	r3, [pc, #124]	; (1088 <_sercom_get_default_pad+0x1ac>)
    100c:	e006      	b.n	101c <_sercom_get_default_pad+0x140>
    100e:	4b1f      	ldr	r3, [pc, #124]	; (108c <_sercom_get_default_pad+0x1b0>)
    1010:	e004      	b.n	101c <_sercom_get_default_pad+0x140>
    1012:	4b1f      	ldr	r3, [pc, #124]	; (1090 <_sercom_get_default_pad+0x1b4>)
    1014:	e002      	b.n	101c <_sercom_get_default_pad+0x140>
    1016:	4b1f      	ldr	r3, [pc, #124]	; (1094 <_sercom_get_default_pad+0x1b8>)
    1018:	e000      	b.n	101c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    101a:	2300      	movs	r3, #0
}
    101c:	1c18      	adds	r0, r3, #0
    101e:	46bd      	mov	sp, r7
    1020:	b002      	add	sp, #8
    1022:	bd80      	pop	{r7, pc}
    1024:	42001000 	.word	0x42001000
    1028:	42000800 	.word	0x42000800
    102c:	42000c00 	.word	0x42000c00
    1030:	42001800 	.word	0x42001800
    1034:	42001c00 	.word	0x42001c00
    1038:	42001400 	.word	0x42001400
    103c:	00040003 	.word	0x00040003
    1040:	00050003 	.word	0x00050003
    1044:	00060003 	.word	0x00060003
    1048:	00070003 	.word	0x00070003
    104c:	00010003 	.word	0x00010003
    1050:	001e0003 	.word	0x001e0003
    1054:	001f0003 	.word	0x001f0003
    1058:	00080003 	.word	0x00080003
    105c:	00090003 	.word	0x00090003
    1060:	000a0003 	.word	0x000a0003
    1064:	000b0003 	.word	0x000b0003
    1068:	00100003 	.word	0x00100003
    106c:	00110003 	.word	0x00110003
    1070:	00120003 	.word	0x00120003
    1074:	00130003 	.word	0x00130003
    1078:	000c0003 	.word	0x000c0003
    107c:	000d0003 	.word	0x000d0003
    1080:	000e0003 	.word	0x000e0003
    1084:	000f0003 	.word	0x000f0003
    1088:	00160003 	.word	0x00160003
    108c:	00170003 	.word	0x00170003
    1090:	00180003 	.word	0x00180003
    1094:	00190003 	.word	0x00190003

00001098 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1098:	b590      	push	{r4, r7, lr}
    109a:	b08b      	sub	sp, #44	; 0x2c
    109c:	af00      	add	r7, sp, #0
    109e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    10a0:	230c      	movs	r3, #12
    10a2:	18fb      	adds	r3, r7, r3
    10a4:	4a0e      	ldr	r2, [pc, #56]	; (10e0 <_sercom_get_sercom_inst_index+0x48>)
    10a6:	ca13      	ldmia	r2!, {r0, r1, r4}
    10a8:	c313      	stmia	r3!, {r0, r1, r4}
    10aa:	ca13      	ldmia	r2!, {r0, r1, r4}
    10ac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10ae:	2300      	movs	r3, #0
    10b0:	627b      	str	r3, [r7, #36]	; 0x24
    10b2:	e00d      	b.n	10d0 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    10b4:	687b      	ldr	r3, [r7, #4]
    10b6:	220c      	movs	r2, #12
    10b8:	18ba      	adds	r2, r7, r2
    10ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
    10bc:	0089      	lsls	r1, r1, #2
    10be:	588a      	ldr	r2, [r1, r2]
    10c0:	4293      	cmp	r3, r2
    10c2:	d102      	bne.n	10ca <_sercom_get_sercom_inst_index+0x32>
			return i;
    10c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10c6:	b2db      	uxtb	r3, r3
    10c8:	e006      	b.n	10d8 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10cc:	3301      	adds	r3, #1
    10ce:	627b      	str	r3, [r7, #36]	; 0x24
    10d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10d2:	2b05      	cmp	r3, #5
    10d4:	d9ee      	bls.n	10b4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    10d6:	2300      	movs	r3, #0
}
    10d8:	1c18      	adds	r0, r3, #0
    10da:	46bd      	mov	sp, r7
    10dc:	b00b      	add	sp, #44	; 0x2c
    10de:	bd90      	pop	{r4, r7, pc}
    10e0:	000074fc 	.word	0x000074fc

000010e4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    10ea:	1c02      	adds	r2, r0, #0
    10ec:	1dfb      	adds	r3, r7, #7
    10ee:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    10f0:	46bd      	mov	sp, r7
    10f2:	b002      	add	sp, #8
    10f4:	bd80      	pop	{r7, pc}
    10f6:	46c0      	nop			; (mov r8, r8)

000010f8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    10f8:	b580      	push	{r7, lr}
    10fa:	b084      	sub	sp, #16
    10fc:	af00      	add	r7, sp, #0
    10fe:	1c02      	adds	r2, r0, #0
    1100:	6039      	str	r1, [r7, #0]
    1102:	1dfb      	adds	r3, r7, #7
    1104:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1106:	4b13      	ldr	r3, [pc, #76]	; (1154 <_sercom_set_handler+0x5c>)
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2201      	movs	r2, #1
    110c:	4053      	eors	r3, r2
    110e:	b2db      	uxtb	r3, r3
    1110:	2b00      	cmp	r3, #0
    1112:	d015      	beq.n	1140 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1114:	2300      	movs	r3, #0
    1116:	60fb      	str	r3, [r7, #12]
    1118:	e00c      	b.n	1134 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    111a:	4b0f      	ldr	r3, [pc, #60]	; (1158 <_sercom_set_handler+0x60>)
    111c:	68fa      	ldr	r2, [r7, #12]
    111e:	0092      	lsls	r2, r2, #2
    1120:	490e      	ldr	r1, [pc, #56]	; (115c <_sercom_set_handler+0x64>)
    1122:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    1124:	4b0e      	ldr	r3, [pc, #56]	; (1160 <_sercom_set_handler+0x68>)
    1126:	68fa      	ldr	r2, [r7, #12]
    1128:	0092      	lsls	r2, r2, #2
    112a:	2100      	movs	r1, #0
    112c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	3301      	adds	r3, #1
    1132:	60fb      	str	r3, [r7, #12]
    1134:	68fb      	ldr	r3, [r7, #12]
    1136:	2b05      	cmp	r3, #5
    1138:	d9ef      	bls.n	111a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    113a:	4b06      	ldr	r3, [pc, #24]	; (1154 <_sercom_set_handler+0x5c>)
    113c:	2201      	movs	r2, #1
    113e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1140:	1dfb      	adds	r3, r7, #7
    1142:	781a      	ldrb	r2, [r3, #0]
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <_sercom_set_handler+0x60>)
    1146:	0092      	lsls	r2, r2, #2
    1148:	6839      	ldr	r1, [r7, #0]
    114a:	50d1      	str	r1, [r2, r3]
}
    114c:	46bd      	mov	sp, r7
    114e:	b004      	add	sp, #16
    1150:	bd80      	pop	{r7, pc}
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	2000009e 	.word	0x2000009e
    1158:	200000a0 	.word	0x200000a0
    115c:	000010e5 	.word	0x000010e5
    1160:	200001d4 	.word	0x200001d4

00001164 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1164:	b590      	push	{r4, r7, lr}
    1166:	b085      	sub	sp, #20
    1168:	af00      	add	r7, sp, #0
    116a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    116c:	2308      	movs	r3, #8
    116e:	18fa      	adds	r2, r7, r3
    1170:	4b0e      	ldr	r3, [pc, #56]	; (11ac <_sercom_get_interrupt_vector+0x48>)
    1172:	1c11      	adds	r1, r2, #0
    1174:	1c1a      	adds	r2, r3, #0
    1176:	2306      	movs	r3, #6
    1178:	1c08      	adds	r0, r1, #0
    117a:	1c11      	adds	r1, r2, #0
    117c:	1c1a      	adds	r2, r3, #0
    117e:	4b0c      	ldr	r3, [pc, #48]	; (11b0 <_sercom_get_interrupt_vector+0x4c>)
    1180:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1182:	230f      	movs	r3, #15
    1184:	18fc      	adds	r4, r7, r3
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	1c18      	adds	r0, r3, #0
    118a:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <_sercom_get_interrupt_vector+0x50>)
    118c:	4798      	blx	r3
    118e:	1c03      	adds	r3, r0, #0
    1190:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1192:	230f      	movs	r3, #15
    1194:	18fb      	adds	r3, r7, r3
    1196:	781b      	ldrb	r3, [r3, #0]
    1198:	2208      	movs	r2, #8
    119a:	18ba      	adds	r2, r7, r2
    119c:	5cd3      	ldrb	r3, [r2, r3]
    119e:	b2db      	uxtb	r3, r3
    11a0:	b25b      	sxtb	r3, r3
}
    11a2:	1c18      	adds	r0, r3, #0
    11a4:	46bd      	mov	sp, r7
    11a6:	b005      	add	sp, #20
    11a8:	bd90      	pop	{r4, r7, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	00007514 	.word	0x00007514
    11b0:	000064cd 	.word	0x000064cd
    11b4:	00001099 	.word	0x00001099

000011b8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    11b8:	b580      	push	{r7, lr}
    11ba:	af00      	add	r7, sp, #0
    11bc:	4b02      	ldr	r3, [pc, #8]	; (11c8 <SERCOM0_Handler+0x10>)
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	2000      	movs	r0, #0
    11c2:	4798      	blx	r3
    11c4:	46bd      	mov	sp, r7
    11c6:	bd80      	pop	{r7, pc}
    11c8:	200000a0 	.word	0x200000a0

000011cc <SERCOM1_Handler>:
    11cc:	b580      	push	{r7, lr}
    11ce:	af00      	add	r7, sp, #0
    11d0:	4b02      	ldr	r3, [pc, #8]	; (11dc <SERCOM1_Handler+0x10>)
    11d2:	685b      	ldr	r3, [r3, #4]
    11d4:	2001      	movs	r0, #1
    11d6:	4798      	blx	r3
    11d8:	46bd      	mov	sp, r7
    11da:	bd80      	pop	{r7, pc}
    11dc:	200000a0 	.word	0x200000a0

000011e0 <SERCOM2_Handler>:
    11e0:	b580      	push	{r7, lr}
    11e2:	af00      	add	r7, sp, #0
    11e4:	4b02      	ldr	r3, [pc, #8]	; (11f0 <SERCOM2_Handler+0x10>)
    11e6:	689b      	ldr	r3, [r3, #8]
    11e8:	2002      	movs	r0, #2
    11ea:	4798      	blx	r3
    11ec:	46bd      	mov	sp, r7
    11ee:	bd80      	pop	{r7, pc}
    11f0:	200000a0 	.word	0x200000a0

000011f4 <SERCOM3_Handler>:
    11f4:	b580      	push	{r7, lr}
    11f6:	af00      	add	r7, sp, #0
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <SERCOM3_Handler+0x10>)
    11fa:	68db      	ldr	r3, [r3, #12]
    11fc:	2003      	movs	r0, #3
    11fe:	4798      	blx	r3
    1200:	46bd      	mov	sp, r7
    1202:	bd80      	pop	{r7, pc}
    1204:	200000a0 	.word	0x200000a0

00001208 <SERCOM4_Handler>:
    1208:	b580      	push	{r7, lr}
    120a:	af00      	add	r7, sp, #0
    120c:	4b02      	ldr	r3, [pc, #8]	; (1218 <SERCOM4_Handler+0x10>)
    120e:	691b      	ldr	r3, [r3, #16]
    1210:	2004      	movs	r0, #4
    1212:	4798      	blx	r3
    1214:	46bd      	mov	sp, r7
    1216:	bd80      	pop	{r7, pc}
    1218:	200000a0 	.word	0x200000a0

0000121c <SERCOM5_Handler>:
    121c:	b580      	push	{r7, lr}
    121e:	af00      	add	r7, sp, #0
    1220:	4b02      	ldr	r3, [pc, #8]	; (122c <SERCOM5_Handler+0x10>)
    1222:	695b      	ldr	r3, [r3, #20]
    1224:	2005      	movs	r0, #5
    1226:	4798      	blx	r3
    1228:	46bd      	mov	sp, r7
    122a:	bd80      	pop	{r7, pc}
    122c:	200000a0 	.word	0x200000a0

00001230 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1230:	b580      	push	{r7, lr}
    1232:	b082      	sub	sp, #8
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	2200      	movs	r2, #0
    123c:	701a      	strb	r2, [r3, #0]
}
    123e:	46bd      	mov	sp, r7
    1240:	b002      	add	sp, #8
    1242:	bd80      	pop	{r7, pc}

00001244 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1244:	b580      	push	{r7, lr}
    1246:	b082      	sub	sp, #8
    1248:	af00      	add	r7, sp, #0
    124a:	1c02      	adds	r2, r0, #0
    124c:	6039      	str	r1, [r7, #0]
    124e:	1dfb      	adds	r3, r7, #7
    1250:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1252:	1dfb      	adds	r3, r7, #7
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	2b01      	cmp	r3, #1
    1258:	d00a      	beq.n	1270 <system_apb_clock_set_mask+0x2c>
    125a:	2b02      	cmp	r3, #2
    125c:	d00f      	beq.n	127e <system_apb_clock_set_mask+0x3a>
    125e:	2b00      	cmp	r3, #0
    1260:	d114      	bne.n	128c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1262:	4b0e      	ldr	r3, [pc, #56]	; (129c <system_apb_clock_set_mask+0x58>)
    1264:	4a0d      	ldr	r2, [pc, #52]	; (129c <system_apb_clock_set_mask+0x58>)
    1266:	6991      	ldr	r1, [r2, #24]
    1268:	683a      	ldr	r2, [r7, #0]
    126a:	430a      	orrs	r2, r1
    126c:	619a      	str	r2, [r3, #24]
			break;
    126e:	e00f      	b.n	1290 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1270:	4b0a      	ldr	r3, [pc, #40]	; (129c <system_apb_clock_set_mask+0x58>)
    1272:	4a0a      	ldr	r2, [pc, #40]	; (129c <system_apb_clock_set_mask+0x58>)
    1274:	69d1      	ldr	r1, [r2, #28]
    1276:	683a      	ldr	r2, [r7, #0]
    1278:	430a      	orrs	r2, r1
    127a:	61da      	str	r2, [r3, #28]
			break;
    127c:	e008      	b.n	1290 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    127e:	4b07      	ldr	r3, [pc, #28]	; (129c <system_apb_clock_set_mask+0x58>)
    1280:	4a06      	ldr	r2, [pc, #24]	; (129c <system_apb_clock_set_mask+0x58>)
    1282:	6a11      	ldr	r1, [r2, #32]
    1284:	683a      	ldr	r2, [r7, #0]
    1286:	430a      	orrs	r2, r1
    1288:	621a      	str	r2, [r3, #32]
			break;
    128a:	e001      	b.n	1290 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    128c:	2317      	movs	r3, #23
    128e:	e000      	b.n	1292 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1290:	2300      	movs	r3, #0
}
    1292:	1c18      	adds	r0, r3, #0
    1294:	46bd      	mov	sp, r7
    1296:	b002      	add	sp, #8
    1298:	bd80      	pop	{r7, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	40000400 	.word	0x40000400

000012a0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	b082      	sub	sp, #8
    12a4:	af00      	add	r7, sp, #0
    12a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	2280      	movs	r2, #128	; 0x80
    12ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12ae:	687b      	ldr	r3, [r7, #4]
    12b0:	2200      	movs	r2, #0
    12b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	2201      	movs	r2, #1
    12b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    12ba:	687b      	ldr	r3, [r7, #4]
    12bc:	2200      	movs	r2, #0
    12be:	70da      	strb	r2, [r3, #3]
}
    12c0:	46bd      	mov	sp, r7
    12c2:	b002      	add	sp, #8
    12c4:	bd80      	pop	{r7, pc}
    12c6:	46c0      	nop			; (mov r8, r8)

000012c8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    12c8:	b580      	push	{r7, lr}
    12ca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12cc:	4b05      	ldr	r3, [pc, #20]	; (12e4 <system_is_debugger_present+0x1c>)
    12ce:	789b      	ldrb	r3, [r3, #2]
    12d0:	b2db      	uxtb	r3, r3
    12d2:	1c1a      	adds	r2, r3, #0
    12d4:	2302      	movs	r3, #2
    12d6:	4013      	ands	r3, r2
    12d8:	1e5a      	subs	r2, r3, #1
    12da:	4193      	sbcs	r3, r2
    12dc:	b2db      	uxtb	r3, r3
}
    12de:	1c18      	adds	r0, r3, #0
    12e0:	46bd      	mov	sp, r7
    12e2:	bd80      	pop	{r7, pc}
    12e4:	41002000 	.word	0x41002000

000012e8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    12e8:	b580      	push	{r7, lr}
    12ea:	b084      	sub	sp, #16
    12ec:	af00      	add	r7, sp, #0
    12ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	681b      	ldr	r3, [r3, #0]
    12f4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12f6:	68fb      	ldr	r3, [r7, #12]
    12f8:	69db      	ldr	r3, [r3, #28]
    12fa:	1e5a      	subs	r2, r3, #1
    12fc:	4193      	sbcs	r3, r2
    12fe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1300:	1c18      	adds	r0, r3, #0
    1302:	46bd      	mov	sp, r7
    1304:	b004      	add	sp, #16
    1306:	bd80      	pop	{r7, pc}

00001308 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1308:	b580      	push	{r7, lr}
    130a:	b082      	sub	sp, #8
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1310:	46c0      	nop			; (mov r8, r8)
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	1c18      	adds	r0, r3, #0
    1316:	4b03      	ldr	r3, [pc, #12]	; (1324 <_usart_wait_for_sync+0x1c>)
    1318:	4798      	blx	r3
    131a:	1e03      	subs	r3, r0, #0
    131c:	d1f9      	bne.n	1312 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    131e:	46bd      	mov	sp, r7
    1320:	b002      	add	sp, #8
    1322:	bd80      	pop	{r7, pc}
    1324:	000012e9 	.word	0x000012e9

00001328 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
    132a:	b08d      	sub	sp, #52	; 0x34
    132c:	af02      	add	r7, sp, #8
    132e:	6078      	str	r0, [r7, #4]
    1330:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	681b      	ldr	r3, [r3, #0]
    1336:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1338:	687b      	ldr	r3, [r7, #4]
    133a:	681b      	ldr	r3, [r3, #0]
    133c:	1c18      	adds	r0, r3, #0
    133e:	4bae      	ldr	r3, [pc, #696]	; (15f8 <_usart_set_config+0x2d0>)
    1340:	4798      	blx	r3
    1342:	1c03      	adds	r3, r0, #0
    1344:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1346:	697b      	ldr	r3, [r7, #20]
    1348:	3314      	adds	r3, #20
    134a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    134c:	2300      	movs	r3, #0
    134e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    1350:	2300      	movs	r3, #0
    1352:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    1354:	230e      	movs	r3, #14
    1356:	18fb      	adds	r3, r7, r3
    1358:	2200      	movs	r2, #0
    135a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    135c:	231f      	movs	r3, #31
    135e:	18fb      	adds	r3, r7, r3
    1360:	2200      	movs	r2, #0
    1362:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1364:	231e      	movs	r3, #30
    1366:	18fb      	adds	r3, r7, r3
    1368:	2210      	movs	r2, #16
    136a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    136c:	683b      	ldr	r3, [r7, #0]
    136e:	8a1b      	ldrh	r3, [r3, #16]
    1370:	2280      	movs	r2, #128	; 0x80
    1372:	01d2      	lsls	r2, r2, #7
    1374:	4293      	cmp	r3, r2
    1376:	d01c      	beq.n	13b2 <_usart_set_config+0x8a>
    1378:	2280      	movs	r2, #128	; 0x80
    137a:	01d2      	lsls	r2, r2, #7
    137c:	4293      	cmp	r3, r2
    137e:	dc06      	bgt.n	138e <_usart_set_config+0x66>
    1380:	2b00      	cmp	r3, #0
    1382:	d00d      	beq.n	13a0 <_usart_set_config+0x78>
    1384:	2280      	movs	r2, #128	; 0x80
    1386:	0192      	lsls	r2, r2, #6
    1388:	4293      	cmp	r3, r2
    138a:	d024      	beq.n	13d6 <_usart_set_config+0xae>
    138c:	e035      	b.n	13fa <_usart_set_config+0xd2>
    138e:	22c0      	movs	r2, #192	; 0xc0
    1390:	01d2      	lsls	r2, r2, #7
    1392:	4293      	cmp	r3, r2
    1394:	d028      	beq.n	13e8 <_usart_set_config+0xc0>
    1396:	2280      	movs	r2, #128	; 0x80
    1398:	0212      	lsls	r2, r2, #8
    139a:	4293      	cmp	r3, r2
    139c:	d012      	beq.n	13c4 <_usart_set_config+0x9c>
    139e:	e02c      	b.n	13fa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13a0:	231f      	movs	r3, #31
    13a2:	18fb      	adds	r3, r7, r3
    13a4:	2200      	movs	r2, #0
    13a6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13a8:	231e      	movs	r3, #30
    13aa:	18fb      	adds	r3, r7, r3
    13ac:	2210      	movs	r2, #16
    13ae:	701a      	strb	r2, [r3, #0]
			break;
    13b0:	e023      	b.n	13fa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13b2:	231f      	movs	r3, #31
    13b4:	18fb      	adds	r3, r7, r3
    13b6:	2200      	movs	r2, #0
    13b8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13ba:	231e      	movs	r3, #30
    13bc:	18fb      	adds	r3, r7, r3
    13be:	2208      	movs	r2, #8
    13c0:	701a      	strb	r2, [r3, #0]
			break;
    13c2:	e01a      	b.n	13fa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13c4:	231f      	movs	r3, #31
    13c6:	18fb      	adds	r3, r7, r3
    13c8:	2200      	movs	r2, #0
    13ca:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13cc:	231e      	movs	r3, #30
    13ce:	18fb      	adds	r3, r7, r3
    13d0:	2203      	movs	r2, #3
    13d2:	701a      	strb	r2, [r3, #0]
			break;
    13d4:	e011      	b.n	13fa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13d6:	231f      	movs	r3, #31
    13d8:	18fb      	adds	r3, r7, r3
    13da:	2201      	movs	r2, #1
    13dc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13de:	231e      	movs	r3, #30
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	2210      	movs	r2, #16
    13e4:	701a      	strb	r2, [r3, #0]
			break;
    13e6:	e008      	b.n	13fa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    13e8:	231f      	movs	r3, #31
    13ea:	18fb      	adds	r3, r7, r3
    13ec:	2201      	movs	r2, #1
    13ee:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13f0:	231e      	movs	r3, #30
    13f2:	18fb      	adds	r3, r7, r3
    13f4:	2208      	movs	r2, #8
    13f6:	701a      	strb	r2, [r3, #0]
			break;
    13f8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    13fa:	683b      	ldr	r3, [r7, #0]
    13fc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    13fe:	683b      	ldr	r3, [r7, #0]
    1400:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1402:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1404:	683b      	ldr	r3, [r7, #0]
    1406:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1408:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    140a:	683a      	ldr	r2, [r7, #0]
    140c:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    140e:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1410:	683a      	ldr	r2, [r7, #0]
    1412:	7e12      	ldrb	r2, [r2, #24]
    1414:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1416:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1418:	683a      	ldr	r2, [r7, #0]
    141a:	2126      	movs	r1, #38	; 0x26
    141c:	5c52      	ldrb	r2, [r2, r1]
    141e:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1420:	4313      	orrs	r3, r2
    1422:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1424:	231d      	movs	r3, #29
    1426:	18fb      	adds	r3, r7, r3
    1428:	2200      	movs	r2, #0
    142a:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    142c:	683b      	ldr	r3, [r7, #0]
    142e:	685b      	ldr	r3, [r3, #4]
    1430:	2b00      	cmp	r3, #0
    1432:	d020      	beq.n	1476 <_usart_set_config+0x14e>
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0552      	lsls	r2, r2, #21
    1438:	4293      	cmp	r3, r2
    143a:	d150      	bne.n	14de <_usart_set_config+0x1b6>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    143c:	683b      	ldr	r3, [r7, #0]
    143e:	2227      	movs	r2, #39	; 0x27
    1440:	5c9b      	ldrb	r3, [r3, r2]
    1442:	2201      	movs	r2, #1
    1444:	4053      	eors	r3, r2
    1446:	b2db      	uxtb	r3, r3
    1448:	2b00      	cmp	r3, #0
    144a:	d013      	beq.n	1474 <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    144c:	683b      	ldr	r3, [r7, #0]
    144e:	6a1d      	ldr	r5, [r3, #32]
    1450:	693b      	ldr	r3, [r7, #16]
    1452:	b2db      	uxtb	r3, r3
    1454:	1c18      	adds	r0, r3, #0
    1456:	4b69      	ldr	r3, [pc, #420]	; (15fc <_usart_set_config+0x2d4>)
    1458:	4798      	blx	r3
    145a:	1c02      	adds	r2, r0, #0
    145c:	231d      	movs	r3, #29
    145e:	18fc      	adds	r4, r7, r3
    1460:	230e      	movs	r3, #14
    1462:	18fb      	adds	r3, r7, r3
    1464:	1c28      	adds	r0, r5, #0
    1466:	1c11      	adds	r1, r2, #0
    1468:	1c1a      	adds	r2, r3, #0
    146a:	4b65      	ldr	r3, [pc, #404]	; (1600 <_usart_set_config+0x2d8>)
    146c:	4798      	blx	r3
    146e:	1c03      	adds	r3, r0, #0
    1470:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    1472:	e034      	b.n	14de <_usart_set_config+0x1b6>
    1474:	e033      	b.n	14de <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1476:	683b      	ldr	r3, [r7, #0]
    1478:	2227      	movs	r2, #39	; 0x27
    147a:	5c9b      	ldrb	r3, [r3, r2]
    147c:	2b00      	cmp	r3, #0
    147e:	d014      	beq.n	14aa <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1480:	683b      	ldr	r3, [r7, #0]
    1482:	6a18      	ldr	r0, [r3, #32]
    1484:	683b      	ldr	r3, [r7, #0]
    1486:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    1488:	231d      	movs	r3, #29
    148a:	18fc      	adds	r4, r7, r3
    148c:	230e      	movs	r3, #14
    148e:	18fa      	adds	r2, r7, r3
    1490:	231f      	movs	r3, #31
    1492:	18fb      	adds	r3, r7, r3
    1494:	781d      	ldrb	r5, [r3, #0]
    1496:	231e      	movs	r3, #30
    1498:	18fb      	adds	r3, r7, r3
    149a:	781b      	ldrb	r3, [r3, #0]
    149c:	9300      	str	r3, [sp, #0]
    149e:	1c2b      	adds	r3, r5, #0
    14a0:	4d58      	ldr	r5, [pc, #352]	; (1604 <_usart_set_config+0x2dc>)
    14a2:	47a8      	blx	r5
    14a4:	1c03      	adds	r3, r0, #0
    14a6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    14a8:	e018      	b.n	14dc <_usart_set_config+0x1b4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    14aa:	683b      	ldr	r3, [r7, #0]
    14ac:	6a1e      	ldr	r6, [r3, #32]
    14ae:	693b      	ldr	r3, [r7, #16]
    14b0:	b2db      	uxtb	r3, r3
    14b2:	1c18      	adds	r0, r3, #0
    14b4:	4b51      	ldr	r3, [pc, #324]	; (15fc <_usart_set_config+0x2d4>)
    14b6:	4798      	blx	r3
    14b8:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    14ba:	231d      	movs	r3, #29
    14bc:	18fc      	adds	r4, r7, r3
    14be:	230e      	movs	r3, #14
    14c0:	18fa      	adds	r2, r7, r3
    14c2:	231f      	movs	r3, #31
    14c4:	18fb      	adds	r3, r7, r3
    14c6:	781d      	ldrb	r5, [r3, #0]
    14c8:	231e      	movs	r3, #30
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	9300      	str	r3, [sp, #0]
    14d0:	1c30      	adds	r0, r6, #0
    14d2:	1c2b      	adds	r3, r5, #0
    14d4:	4d4b      	ldr	r5, [pc, #300]	; (1604 <_usart_set_config+0x2dc>)
    14d6:	47a8      	blx	r5
    14d8:	1c03      	adds	r3, r0, #0
    14da:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    14dc:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    14de:	231d      	movs	r3, #29
    14e0:	18fb      	adds	r3, r7, r3
    14e2:	781b      	ldrb	r3, [r3, #0]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d003      	beq.n	14f0 <_usart_set_config+0x1c8>
		/* Abort */
		return status_code;
    14e8:	231d      	movs	r3, #29
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	781b      	ldrb	r3, [r3, #0]
    14ee:	e07e      	b.n	15ee <_usart_set_config+0x2c6>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    14f0:	683b      	ldr	r3, [r7, #0]
    14f2:	7e5b      	ldrb	r3, [r3, #25]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d003      	beq.n	1500 <_usart_set_config+0x1d8>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    14f8:	683b      	ldr	r3, [r7, #0]
    14fa:	7e9a      	ldrb	r2, [r3, #26]
    14fc:	69bb      	ldr	r3, [r7, #24]
    14fe:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	1c18      	adds	r0, r3, #0
    1504:	4b40      	ldr	r3, [pc, #256]	; (1608 <_usart_set_config+0x2e0>)
    1506:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1508:	230e      	movs	r3, #14
    150a:	18fb      	adds	r3, r7, r3
    150c:	881a      	ldrh	r2, [r3, #0]
    150e:	69bb      	ldr	r3, [r7, #24]
    1510:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1512:	683b      	ldr	r3, [r7, #0]
    1514:	685b      	ldr	r3, [r3, #4]
    1516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1518:	4313      	orrs	r3, r2
    151a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    151c:	683b      	ldr	r3, [r7, #0]
    151e:	2227      	movs	r2, #39	; 0x27
    1520:	5c9b      	ldrb	r3, [r3, r2]
    1522:	2201      	movs	r2, #1
    1524:	4053      	eors	r3, r2
    1526:	b2db      	uxtb	r3, r3
    1528:	2b00      	cmp	r3, #0
    152a:	d003      	beq.n	1534 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    152e:	2204      	movs	r2, #4
    1530:	4313      	orrs	r3, r2
    1532:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1534:	683b      	ldr	r3, [r7, #0]
    1536:	7a9a      	ldrb	r2, [r3, #10]
    1538:	683b      	ldr	r3, [r7, #0]
    153a:	7adb      	ldrb	r3, [r3, #11]
    153c:	4313      	orrs	r3, r2
    153e:	b2db      	uxtb	r3, r3
    1540:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	7e5b      	ldrb	r3, [r3, #25]
    1546:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1548:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    154a:	683a      	ldr	r2, [r7, #0]
    154c:	7f12      	ldrb	r2, [r2, #28]
    154e:	0252      	lsls	r2, r2, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1550:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1552:	683a      	ldr	r2, [r7, #0]
    1554:	7f52      	ldrb	r2, [r2, #29]
    1556:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1558:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    155a:	683a      	ldr	r2, [r7, #0]
    155c:	2124      	movs	r1, #36	; 0x24
    155e:	5c52      	ldrb	r2, [r2, r1]
    1560:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1562:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1564:	683a      	ldr	r2, [r7, #0]
    1566:	2125      	movs	r1, #37	; 0x25
    1568:	5c52      	ldrb	r2, [r2, r1]
    156a:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    156c:	4313      	orrs	r3, r2
    156e:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1570:	683b      	ldr	r3, [r7, #0]
    1572:	891b      	ldrh	r3, [r3, #8]
    1574:	2bff      	cmp	r3, #255	; 0xff
    1576:	d015      	beq.n	15a4 <_usart_set_config+0x27c>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1578:	683b      	ldr	r3, [r7, #0]
    157a:	7edb      	ldrb	r3, [r3, #27]
    157c:	2b00      	cmp	r3, #0
    157e:	d005      	beq.n	158c <_usart_set_config+0x264>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    1580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1582:	22a0      	movs	r2, #160	; 0xa0
    1584:	04d2      	lsls	r2, r2, #19
    1586:	4313      	orrs	r3, r2
    1588:	627b      	str	r3, [r7, #36]	; 0x24
    158a:	e004      	b.n	1596 <_usart_set_config+0x26e>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    158e:	2280      	movs	r2, #128	; 0x80
    1590:	0452      	lsls	r2, r2, #17
    1592:	4313      	orrs	r3, r2
    1594:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    1596:	683b      	ldr	r3, [r7, #0]
    1598:	891b      	ldrh	r3, [r3, #8]
    159a:	1c1a      	adds	r2, r3, #0
    159c:	6a3b      	ldr	r3, [r7, #32]
    159e:	4313      	orrs	r3, r2
    15a0:	623b      	str	r3, [r7, #32]
    15a2:	e008      	b.n	15b6 <_usart_set_config+0x28e>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    15a4:	683b      	ldr	r3, [r7, #0]
    15a6:	7edb      	ldrb	r3, [r3, #27]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d004      	beq.n	15b6 <_usart_set_config+0x28e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15ae:	2280      	movs	r2, #128	; 0x80
    15b0:	04d2      	lsls	r2, r2, #19
    15b2:	4313      	orrs	r3, r2
    15b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    15b6:	683b      	ldr	r3, [r7, #0]
    15b8:	222c      	movs	r2, #44	; 0x2c
    15ba:	5c9b      	ldrb	r3, [r3, r2]
    15bc:	2b00      	cmp	r3, #0
    15be:	d103      	bne.n	15c8 <_usart_set_config+0x2a0>
    15c0:	4b12      	ldr	r3, [pc, #72]	; (160c <_usart_set_config+0x2e4>)
    15c2:	4798      	blx	r3
    15c4:	1e03      	subs	r3, r0, #0
    15c6:	d003      	beq.n	15d0 <_usart_set_config+0x2a8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    15c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15ca:	2280      	movs	r2, #128	; 0x80
    15cc:	4313      	orrs	r3, r2
    15ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	1c18      	adds	r0, r3, #0
    15d4:	4b0c      	ldr	r3, [pc, #48]	; (1608 <_usart_set_config+0x2e0>)
    15d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    15d8:	69bb      	ldr	r3, [r7, #24]
    15da:	6a3a      	ldr	r2, [r7, #32]
    15dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	1c18      	adds	r0, r3, #0
    15e2:	4b09      	ldr	r3, [pc, #36]	; (1608 <_usart_set_config+0x2e0>)
    15e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    15e6:	69bb      	ldr	r3, [r7, #24]
    15e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    15ea:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    15ec:	2300      	movs	r3, #0
}
    15ee:	1c18      	adds	r0, r3, #0
    15f0:	46bd      	mov	sp, r7
    15f2:	b00b      	add	sp, #44	; 0x2c
    15f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00001099 	.word	0x00001099
    15fc:	00002bfd 	.word	0x00002bfd
    1600:	00000be5 	.word	0x00000be5
    1604:	00000c61 	.word	0x00000c61
    1608:	00001309 	.word	0x00001309
    160c:	000012c9 	.word	0x000012c9

00001610 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1610:	b590      	push	{r4, r7, lr}
    1612:	b093      	sub	sp, #76	; 0x4c
    1614:	af00      	add	r7, sp, #0
    1616:	60f8      	str	r0, [r7, #12]
    1618:	60b9      	str	r1, [r7, #8]
    161a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    161c:	233b      	movs	r3, #59	; 0x3b
    161e:	18fb      	adds	r3, r7, r3
    1620:	2200      	movs	r2, #0
    1622:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1624:	68fb      	ldr	r3, [r7, #12]
    1626:	68ba      	ldr	r2, [r7, #8]
    1628:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	1c18      	adds	r0, r3, #0
    1636:	4b85      	ldr	r3, [pc, #532]	; (184c <usart_init+0x23c>)
    1638:	4798      	blx	r3
    163a:	1c03      	adds	r3, r0, #0
    163c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1640:	3302      	adds	r3, #2
    1642:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1646:	3314      	adds	r3, #20
    1648:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	2201      	movs	r2, #1
    1650:	4013      	ands	r3, r2
    1652:	d001      	beq.n	1658 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1654:	2305      	movs	r3, #5
    1656:	e0f5      	b.n	1844 <usart_init+0x234>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	2202      	movs	r2, #2
    165e:	4013      	ands	r3, r2
    1660:	d001      	beq.n	1666 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    1662:	231c      	movs	r3, #28
    1664:	e0ee      	b.n	1844 <usart_init+0x234>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1668:	2201      	movs	r2, #1
    166a:	409a      	lsls	r2, r3
    166c:	1c13      	adds	r3, r2, #0
    166e:	2002      	movs	r0, #2
    1670:	1c19      	adds	r1, r3, #0
    1672:	4b77      	ldr	r3, [pc, #476]	; (1850 <usart_init+0x240>)
    1674:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1676:	2324      	movs	r3, #36	; 0x24
    1678:	18fb      	adds	r3, r7, r3
    167a:	1c18      	adds	r0, r3, #0
    167c:	4b75      	ldr	r3, [pc, #468]	; (1854 <usart_init+0x244>)
    167e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	222d      	movs	r2, #45	; 0x2d
    1684:	5c9a      	ldrb	r2, [r3, r2]
    1686:	2324      	movs	r3, #36	; 0x24
    1688:	18fb      	adds	r3, r7, r3
    168a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    168e:	b2da      	uxtb	r2, r3
    1690:	2324      	movs	r3, #36	; 0x24
    1692:	18fb      	adds	r3, r7, r3
    1694:	1c10      	adds	r0, r2, #0
    1696:	1c19      	adds	r1, r3, #0
    1698:	4b6f      	ldr	r3, [pc, #444]	; (1858 <usart_init+0x248>)
    169a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    169e:	b2db      	uxtb	r3, r3
    16a0:	1c18      	adds	r0, r3, #0
    16a2:	4b6e      	ldr	r3, [pc, #440]	; (185c <usart_init+0x24c>)
    16a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	222d      	movs	r2, #45	; 0x2d
    16aa:	5c9b      	ldrb	r3, [r3, r2]
    16ac:	1c18      	adds	r0, r3, #0
    16ae:	2100      	movs	r1, #0
    16b0:	4b6b      	ldr	r3, [pc, #428]	; (1860 <usart_init+0x250>)
    16b2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	7ada      	ldrb	r2, [r3, #11]
    16b8:	68fb      	ldr	r3, [r7, #12]
    16ba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	2224      	movs	r2, #36	; 0x24
    16c0:	5c9a      	ldrb	r2, [r3, r2]
    16c2:	68fb      	ldr	r3, [r7, #12]
    16c4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	2225      	movs	r2, #37	; 0x25
    16ca:	5c9a      	ldrb	r2, [r3, r2]
    16cc:	68fb      	ldr	r3, [r7, #12]
    16ce:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	7eda      	ldrb	r2, [r3, #27]
    16d4:	68fb      	ldr	r3, [r7, #12]
    16d6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	7f1a      	ldrb	r2, [r3, #28]
    16dc:	68fb      	ldr	r3, [r7, #12]
    16de:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    16e0:	233b      	movs	r3, #59	; 0x3b
    16e2:	18fc      	adds	r4, r7, r3
    16e4:	68fa      	ldr	r2, [r7, #12]
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	1c10      	adds	r0, r2, #0
    16ea:	1c19      	adds	r1, r3, #0
    16ec:	4b5d      	ldr	r3, [pc, #372]	; (1864 <usart_init+0x254>)
    16ee:	4798      	blx	r3
    16f0:	1c03      	adds	r3, r0, #0
    16f2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    16f4:	233b      	movs	r3, #59	; 0x3b
    16f6:	18fb      	adds	r3, r7, r3
    16f8:	781b      	ldrb	r3, [r3, #0]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d003      	beq.n	1706 <usart_init+0xf6>
		return status_code;
    16fe:	233b      	movs	r3, #59	; 0x3b
    1700:	18fb      	adds	r3, r7, r3
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	e09e      	b.n	1844 <usart_init+0x234>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    1706:	2320      	movs	r3, #32
    1708:	18fb      	adds	r3, r7, r3
    170a:	1c18      	adds	r0, r3, #0
    170c:	4b56      	ldr	r3, [pc, #344]	; (1868 <usart_init+0x258>)
    170e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1710:	2320      	movs	r3, #32
    1712:	18fb      	adds	r3, r7, r3
    1714:	2200      	movs	r2, #0
    1716:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1718:	2320      	movs	r3, #32
    171a:	18fb      	adds	r3, r7, r3
    171c:	2200      	movs	r2, #0
    171e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1724:	2310      	movs	r3, #16
    1726:	18fb      	adds	r3, r7, r3
    1728:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    172a:	687b      	ldr	r3, [r7, #4]
    172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    172e:	2310      	movs	r3, #16
    1730:	18fb      	adds	r3, r7, r3
    1732:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1738:	2310      	movs	r3, #16
    173a:	18fb      	adds	r3, r7, r3
    173c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1742:	2310      	movs	r3, #16
    1744:	18fb      	adds	r3, r7, r3
    1746:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1748:	2347      	movs	r3, #71	; 0x47
    174a:	18fb      	adds	r3, r7, r3
    174c:	2200      	movs	r2, #0
    174e:	701a      	strb	r2, [r3, #0]
    1750:	e02c      	b.n	17ac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1752:	2347      	movs	r3, #71	; 0x47
    1754:	18fb      	adds	r3, r7, r3
    1756:	781a      	ldrb	r2, [r3, #0]
    1758:	2310      	movs	r3, #16
    175a:	18fb      	adds	r3, r7, r3
    175c:	0092      	lsls	r2, r2, #2
    175e:	58d3      	ldr	r3, [r2, r3]
    1760:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1764:	2b00      	cmp	r3, #0
    1766:	d109      	bne.n	177c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1768:	68ba      	ldr	r2, [r7, #8]
    176a:	2347      	movs	r3, #71	; 0x47
    176c:	18fb      	adds	r3, r7, r3
    176e:	781b      	ldrb	r3, [r3, #0]
    1770:	1c10      	adds	r0, r2, #0
    1772:	1c19      	adds	r1, r3, #0
    1774:	4b3d      	ldr	r3, [pc, #244]	; (186c <usart_init+0x25c>)
    1776:	4798      	blx	r3
    1778:	1c03      	adds	r3, r0, #0
    177a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    177c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    177e:	3301      	adds	r3, #1
    1780:	d00d      	beq.n	179e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1784:	b2da      	uxtb	r2, r3
    1786:	2320      	movs	r3, #32
    1788:	18fb      	adds	r3, r7, r3
    178a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    178c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    178e:	0c1b      	lsrs	r3, r3, #16
    1790:	b2da      	uxtb	r2, r3
    1792:	2320      	movs	r3, #32
    1794:	18fb      	adds	r3, r7, r3
    1796:	1c10      	adds	r0, r2, #0
    1798:	1c19      	adds	r1, r3, #0
    179a:	4b35      	ldr	r3, [pc, #212]	; (1870 <usart_init+0x260>)
    179c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    179e:	2347      	movs	r3, #71	; 0x47
    17a0:	18fb      	adds	r3, r7, r3
    17a2:	781a      	ldrb	r2, [r3, #0]
    17a4:	2347      	movs	r3, #71	; 0x47
    17a6:	18fb      	adds	r3, r7, r3
    17a8:	3201      	adds	r2, #1
    17aa:	701a      	strb	r2, [r3, #0]
    17ac:	2347      	movs	r3, #71	; 0x47
    17ae:	18fb      	adds	r3, r7, r3
    17b0:	781b      	ldrb	r3, [r3, #0]
    17b2:	2b03      	cmp	r3, #3
    17b4:	d9cd      	bls.n	1752 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    17b6:	2300      	movs	r3, #0
    17b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    17ba:	e009      	b.n	17d0 <usart_init+0x1c0>
		module->callback[i]            = NULL;
    17bc:	68fa      	ldr	r2, [r7, #12]
    17be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17c0:	3302      	adds	r3, #2
    17c2:	009b      	lsls	r3, r3, #2
    17c4:	18d3      	adds	r3, r2, r3
    17c6:	2200      	movs	r2, #0
    17c8:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    17ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17cc:	3301      	adds	r3, #1
    17ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    17d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    17d2:	2b05      	cmp	r3, #5
    17d4:	d9f2      	bls.n	17bc <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    17d6:	68fb      	ldr	r3, [r7, #12]
    17d8:	2200      	movs	r2, #0
    17da:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	2200      	movs	r2, #0
    17e0:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	2200      	movs	r2, #0
    17e6:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	2200      	movs	r2, #0
    17ec:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	2230      	movs	r2, #48	; 0x30
    17f2:	2100      	movs	r1, #0
    17f4:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	2231      	movs	r2, #49	; 0x31
    17fa:	2100      	movs	r1, #0
    17fc:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    17fe:	68fb      	ldr	r3, [r7, #12]
    1800:	2232      	movs	r2, #50	; 0x32
    1802:	2100      	movs	r1, #0
    1804:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    1806:	68fb      	ldr	r3, [r7, #12]
    1808:	2233      	movs	r2, #51	; 0x33
    180a:	2100      	movs	r1, #0
    180c:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	681b      	ldr	r3, [r3, #0]
    1812:	2227      	movs	r2, #39	; 0x27
    1814:	18bc      	adds	r4, r7, r2
    1816:	1c18      	adds	r0, r3, #0
    1818:	4b0c      	ldr	r3, [pc, #48]	; (184c <usart_init+0x23c>)
    181a:	4798      	blx	r3
    181c:	1c03      	adds	r3, r0, #0
    181e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1820:	2327      	movs	r3, #39	; 0x27
    1822:	18fb      	adds	r3, r7, r3
    1824:	781a      	ldrb	r2, [r3, #0]
    1826:	4b13      	ldr	r3, [pc, #76]	; (1874 <usart_init+0x264>)
    1828:	1c10      	adds	r0, r2, #0
    182a:	1c19      	adds	r1, r3, #0
    182c:	4b12      	ldr	r3, [pc, #72]	; (1878 <usart_init+0x268>)
    182e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1830:	2327      	movs	r3, #39	; 0x27
    1832:	18fb      	adds	r3, r7, r3
    1834:	781a      	ldrb	r2, [r3, #0]
    1836:	4b11      	ldr	r3, [pc, #68]	; (187c <usart_init+0x26c>)
    1838:	0092      	lsls	r2, r2, #2
    183a:	68f9      	ldr	r1, [r7, #12]
    183c:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    183e:	233b      	movs	r3, #59	; 0x3b
    1840:	18fb      	adds	r3, r7, r3
    1842:	781b      	ldrb	r3, [r3, #0]
}
    1844:	1c18      	adds	r0, r3, #0
    1846:	46bd      	mov	sp, r7
    1848:	b013      	add	sp, #76	; 0x4c
    184a:	bd90      	pop	{r4, r7, pc}
    184c:	00001099 	.word	0x00001099
    1850:	00001245 	.word	0x00001245
    1854:	00001231 	.word	0x00001231
    1858:	00002ad9 	.word	0x00002ad9
    185c:	00002b1d 	.word	0x00002b1d
    1860:	00000e51 	.word	0x00000e51
    1864:	00001329 	.word	0x00001329
    1868:	000012a1 	.word	0x000012a1
    186c:	00000edd 	.word	0x00000edd
    1870:	00002dc5 	.word	0x00002dc5
    1874:	00001a25 	.word	0x00001a25
    1878:	000010f9 	.word	0x000010f9
    187c:	200001d4 	.word	0x200001d4

00001880 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1880:	b580      	push	{r7, lr}
    1882:	b084      	sub	sp, #16
    1884:	af00      	add	r7, sp, #0
    1886:	6078      	str	r0, [r7, #4]
    1888:	1c0a      	adds	r2, r1, #0
    188a:	1cbb      	adds	r3, r7, #2
    188c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    188e:	687b      	ldr	r3, [r7, #4]
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1894:	687b      	ldr	r3, [r7, #4]
    1896:	79db      	ldrb	r3, [r3, #7]
    1898:	2201      	movs	r2, #1
    189a:	4053      	eors	r3, r2
    189c:	b2db      	uxtb	r3, r3
    189e:	2b00      	cmp	r3, #0
    18a0:	d001      	beq.n	18a6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    18a2:	231c      	movs	r3, #28
    18a4:	e017      	b.n	18d6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    18aa:	b29b      	uxth	r3, r3
    18ac:	2b00      	cmp	r3, #0
    18ae:	d001      	beq.n	18b4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    18b0:	2305      	movs	r3, #5
    18b2:	e010      	b.n	18d6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	1c18      	adds	r0, r3, #0
    18b8:	4b09      	ldr	r3, [pc, #36]	; (18e0 <usart_write_wait+0x60>)
    18ba:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	1cba      	adds	r2, r7, #2
    18c0:	8812      	ldrh	r2, [r2, #0]
    18c2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    18c4:	46c0      	nop			; (mov r8, r8)
    18c6:	68fb      	ldr	r3, [r7, #12]
    18c8:	7e1b      	ldrb	r3, [r3, #24]
    18ca:	b2db      	uxtb	r3, r3
    18cc:	1c1a      	adds	r2, r3, #0
    18ce:	2302      	movs	r3, #2
    18d0:	4013      	ands	r3, r2
    18d2:	d0f8      	beq.n	18c6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    18d4:	2300      	movs	r3, #0
}
    18d6:	1c18      	adds	r0, r3, #0
    18d8:	46bd      	mov	sp, r7
    18da:	b004      	add	sp, #16
    18dc:	bd80      	pop	{r7, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00001309 	.word	0x00001309

000018e4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b084      	sub	sp, #16
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
    18ec:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	799b      	ldrb	r3, [r3, #6]
    18f8:	2201      	movs	r2, #1
    18fa:	4053      	eors	r3, r2
    18fc:	b2db      	uxtb	r3, r3
    18fe:	2b00      	cmp	r3, #0
    1900:	d001      	beq.n	1906 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1902:	231c      	movs	r3, #28
    1904:	e068      	b.n	19d8 <usart_read_wait+0xf4>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    190a:	b29b      	uxth	r3, r3
    190c:	2b00      	cmp	r3, #0
    190e:	d001      	beq.n	1914 <usart_read_wait+0x30>
		return STATUS_BUSY;
    1910:	2305      	movs	r3, #5
    1912:	e061      	b.n	19d8 <usart_read_wait+0xf4>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	7e1b      	ldrb	r3, [r3, #24]
    1918:	b2db      	uxtb	r3, r3
    191a:	1c1a      	adds	r2, r3, #0
    191c:	2304      	movs	r3, #4
    191e:	4013      	ands	r3, r2
    1920:	d101      	bne.n	1926 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1922:	2305      	movs	r3, #5
    1924:	e058      	b.n	19d8 <usart_read_wait+0xf4>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	1c18      	adds	r0, r3, #0
    192a:	4b2d      	ldr	r3, [pc, #180]	; (19e0 <usart_read_wait+0xfc>)
    192c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	8b5b      	ldrh	r3, [r3, #26]
    1932:	b29b      	uxth	r3, r3
    1934:	b2da      	uxtb	r2, r3
    1936:	230b      	movs	r3, #11
    1938:	18fb      	adds	r3, r7, r3
    193a:	213f      	movs	r1, #63	; 0x3f
    193c:	400a      	ands	r2, r1
    193e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1940:	230b      	movs	r3, #11
    1942:	18fb      	adds	r3, r7, r3
    1944:	781b      	ldrb	r3, [r3, #0]
    1946:	2b00      	cmp	r3, #0
    1948:	d040      	beq.n	19cc <usart_read_wait+0xe8>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    194a:	230b      	movs	r3, #11
    194c:	18fb      	adds	r3, r7, r3
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	2202      	movs	r2, #2
    1952:	4013      	ands	r3, r2
    1954:	d004      	beq.n	1960 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1956:	68fb      	ldr	r3, [r7, #12]
    1958:	2202      	movs	r2, #2
    195a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    195c:	231a      	movs	r3, #26
    195e:	e03b      	b.n	19d8 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1960:	230b      	movs	r3, #11
    1962:	18fb      	adds	r3, r7, r3
    1964:	781b      	ldrb	r3, [r3, #0]
    1966:	2204      	movs	r2, #4
    1968:	4013      	ands	r3, r2
    196a:	d004      	beq.n	1976 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	2204      	movs	r2, #4
    1970:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    1972:	231e      	movs	r3, #30
    1974:	e030      	b.n	19d8 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1976:	230b      	movs	r3, #11
    1978:	18fb      	adds	r3, r7, r3
    197a:	781b      	ldrb	r3, [r3, #0]
    197c:	2201      	movs	r2, #1
    197e:	4013      	ands	r3, r2
    1980:	d004      	beq.n	198c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1982:	68fb      	ldr	r3, [r7, #12]
    1984:	2201      	movs	r2, #1
    1986:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1988:	2313      	movs	r3, #19
    198a:	e025      	b.n	19d8 <usart_read_wait+0xf4>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    198c:	230b      	movs	r3, #11
    198e:	18fb      	adds	r3, r7, r3
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	2210      	movs	r2, #16
    1994:	4013      	ands	r3, r2
    1996:	d009      	beq.n	19ac <usart_read_wait+0xc8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1998:	68fb      	ldr	r3, [r7, #12]
    199a:	8b5b      	ldrh	r3, [r3, #26]
    199c:	b29b      	uxth	r3, r3
    199e:	2210      	movs	r2, #16
    19a0:	4313      	orrs	r3, r2
    19a2:	b29a      	uxth	r2, r3
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    19a8:	2342      	movs	r3, #66	; 0x42
    19aa:	e015      	b.n	19d8 <usart_read_wait+0xf4>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    19ac:	230b      	movs	r3, #11
    19ae:	18fb      	adds	r3, r7, r3
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	2220      	movs	r2, #32
    19b4:	4013      	ands	r3, r2
    19b6:	d009      	beq.n	19cc <usart_read_wait+0xe8>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    19b8:	68fb      	ldr	r3, [r7, #12]
    19ba:	8b5b      	ldrh	r3, [r3, #26]
    19bc:	b29b      	uxth	r3, r3
    19be:	2220      	movs	r2, #32
    19c0:	4313      	orrs	r3, r2
    19c2:	b29a      	uxth	r2, r3
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    19c8:	2341      	movs	r3, #65	; 0x41
    19ca:	e005      	b.n	19d8 <usart_read_wait+0xf4>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    19d0:	b29a      	uxth	r2, r3
    19d2:	683b      	ldr	r3, [r7, #0]
    19d4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    19d6:	2300      	movs	r3, #0
}
    19d8:	1c18      	adds	r0, r3, #0
    19da:	46bd      	mov	sp, r7
    19dc:	b004      	add	sp, #16
    19de:	bd80      	pop	{r7, pc}
    19e0:	00001309 	.word	0x00001309

000019e4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b084      	sub	sp, #16
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	69db      	ldr	r3, [r3, #28]
    19f6:	1e5a      	subs	r2, r3, #1
    19f8:	4193      	sbcs	r3, r2
    19fa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    19fc:	1c18      	adds	r0, r3, #0
    19fe:	46bd      	mov	sp, r7
    1a00:	b004      	add	sp, #16
    1a02:	bd80      	pop	{r7, pc}

00001a04 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1a04:	b580      	push	{r7, lr}
    1a06:	b082      	sub	sp, #8
    1a08:	af00      	add	r7, sp, #0
    1a0a:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1a0c:	46c0      	nop			; (mov r8, r8)
    1a0e:	687b      	ldr	r3, [r7, #4]
    1a10:	1c18      	adds	r0, r3, #0
    1a12:	4b03      	ldr	r3, [pc, #12]	; (1a20 <_usart_wait_for_sync+0x1c>)
    1a14:	4798      	blx	r3
    1a16:	1e03      	subs	r3, r0, #0
    1a18:	d1f9      	bne.n	1a0e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1a1a:	46bd      	mov	sp, r7
    1a1c:	b002      	add	sp, #8
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	000019e5 	.word	0x000019e5

00001a24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b088      	sub	sp, #32
    1a28:	af00      	add	r7, sp, #0
    1a2a:	1c02      	adds	r2, r0, #0
    1a2c:	1dfb      	adds	r3, r7, #7
    1a2e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1a34:	4bb0      	ldr	r3, [pc, #704]	; (1cf8 <_usart_interrupt_handler+0x2d4>)
    1a36:	0092      	lsls	r2, r2, #2
    1a38:	58d3      	ldr	r3, [r2, r3]
    1a3a:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a3c:	69bb      	ldr	r3, [r7, #24]
    1a3e:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    1a40:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1a42:	69bb      	ldr	r3, [r7, #24]
    1a44:	1c18      	adds	r0, r3, #0
    1a46:	4bad      	ldr	r3, [pc, #692]	; (1cfc <_usart_interrupt_handler+0x2d8>)
    1a48:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1a4a:	697b      	ldr	r3, [r7, #20]
    1a4c:	7e1b      	ldrb	r3, [r3, #24]
    1a4e:	b2da      	uxtb	r2, r3
    1a50:	2312      	movs	r3, #18
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1a56:	697b      	ldr	r3, [r7, #20]
    1a58:	7d9b      	ldrb	r3, [r3, #22]
    1a5a:	b2db      	uxtb	r3, r3
    1a5c:	b29a      	uxth	r2, r3
    1a5e:	2312      	movs	r3, #18
    1a60:	18fb      	adds	r3, r7, r3
    1a62:	2112      	movs	r1, #18
    1a64:	1879      	adds	r1, r7, r1
    1a66:	8809      	ldrh	r1, [r1, #0]
    1a68:	400a      	ands	r2, r1
    1a6a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1a6c:	69bb      	ldr	r3, [r7, #24]
    1a6e:	2230      	movs	r2, #48	; 0x30
    1a70:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    1a72:	69ba      	ldr	r2, [r7, #24]
    1a74:	2131      	movs	r1, #49	; 0x31
    1a76:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1a78:	4013      	ands	r3, r2
    1a7a:	b2da      	uxtb	r2, r3
    1a7c:	2310      	movs	r3, #16
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1a82:	2312      	movs	r3, #18
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	881b      	ldrh	r3, [r3, #0]
    1a88:	2201      	movs	r2, #1
    1a8a:	4013      	ands	r3, r2
    1a8c:	d044      	beq.n	1b18 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1a8e:	69bb      	ldr	r3, [r7, #24]
    1a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1a92:	b29b      	uxth	r3, r3
    1a94:	2b00      	cmp	r3, #0
    1a96:	d03c      	beq.n	1b12 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a98:	69bb      	ldr	r3, [r7, #24]
    1a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	b2da      	uxtb	r2, r3
    1aa0:	231c      	movs	r3, #28
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1aa6:	69bb      	ldr	r3, [r7, #24]
    1aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1aaa:	1c5a      	adds	r2, r3, #1
    1aac:	69bb      	ldr	r3, [r7, #24]
    1aae:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1ab0:	69bb      	ldr	r3, [r7, #24]
    1ab2:	795b      	ldrb	r3, [r3, #5]
    1ab4:	2b01      	cmp	r3, #1
    1ab6:	d112      	bne.n	1ade <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1ab8:	69bb      	ldr	r3, [r7, #24]
    1aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	b2db      	uxtb	r3, r3
    1ac0:	021b      	lsls	r3, r3, #8
    1ac2:	b29a      	uxth	r2, r3
    1ac4:	231c      	movs	r3, #28
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	881b      	ldrh	r3, [r3, #0]
    1aca:	4313      	orrs	r3, r2
    1acc:	b29a      	uxth	r2, r3
    1ace:	231c      	movs	r3, #28
    1ad0:	18fb      	adds	r3, r7, r3
    1ad2:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1ad4:	69bb      	ldr	r3, [r7, #24]
    1ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ad8:	1c5a      	adds	r2, r3, #1
    1ada:	69bb      	ldr	r3, [r7, #24]
    1adc:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1ade:	231c      	movs	r3, #28
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	881b      	ldrh	r3, [r3, #0]
    1ae4:	05db      	lsls	r3, r3, #23
    1ae6:	0ddb      	lsrs	r3, r3, #23
    1ae8:	b29a      	uxth	r2, r3
    1aea:	697b      	ldr	r3, [r7, #20]
    1aec:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1aee:	69bb      	ldr	r3, [r7, #24]
    1af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1af2:	b29b      	uxth	r3, r3
    1af4:	3b01      	subs	r3, #1
    1af6:	b29b      	uxth	r3, r3
    1af8:	69ba      	ldr	r2, [r7, #24]
    1afa:	1c19      	adds	r1, r3, #0
    1afc:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1afe:	2b00      	cmp	r3, #0
    1b00:	d106      	bne.n	1b10 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b02:	697b      	ldr	r3, [r7, #20]
    1b04:	2201      	movs	r2, #1
    1b06:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1b08:	697b      	ldr	r3, [r7, #20]
    1b0a:	2202      	movs	r2, #2
    1b0c:	759a      	strb	r2, [r3, #22]
    1b0e:	e003      	b.n	1b18 <_usart_interrupt_handler+0xf4>
    1b10:	e002      	b.n	1b18 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b12:	697b      	ldr	r3, [r7, #20]
    1b14:	2201      	movs	r2, #1
    1b16:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1b18:	2312      	movs	r3, #18
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	881b      	ldrh	r3, [r3, #0]
    1b1e:	2202      	movs	r2, #2
    1b20:	4013      	ands	r3, r2
    1b22:	d011      	beq.n	1b48 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1b24:	697b      	ldr	r3, [r7, #20]
    1b26:	2202      	movs	r2, #2
    1b28:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1b2a:	69bb      	ldr	r3, [r7, #24]
    1b2c:	2233      	movs	r2, #51	; 0x33
    1b2e:	2100      	movs	r1, #0
    1b30:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1b32:	2310      	movs	r3, #16
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	881b      	ldrh	r3, [r3, #0]
    1b38:	2201      	movs	r2, #1
    1b3a:	4013      	ands	r3, r2
    1b3c:	d004      	beq.n	1b48 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1b3e:	69bb      	ldr	r3, [r7, #24]
    1b40:	68db      	ldr	r3, [r3, #12]
    1b42:	69ba      	ldr	r2, [r7, #24]
    1b44:	1c10      	adds	r0, r2, #0
    1b46:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1b48:	2312      	movs	r3, #18
    1b4a:	18fb      	adds	r3, r7, r3
    1b4c:	881b      	ldrh	r3, [r3, #0]
    1b4e:	2204      	movs	r2, #4
    1b50:	4013      	ands	r3, r2
    1b52:	d100      	bne.n	1b56 <_usart_interrupt_handler+0x132>
    1b54:	e0d7      	b.n	1d06 <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    1b56:	69bb      	ldr	r3, [r7, #24]
    1b58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1b5a:	b29b      	uxth	r3, r3
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d100      	bne.n	1b62 <_usart_interrupt_handler+0x13e>
    1b60:	e0ce      	b.n	1d00 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b62:	697b      	ldr	r3, [r7, #20]
    1b64:	8b5b      	ldrh	r3, [r3, #26]
    1b66:	b29b      	uxth	r3, r3
    1b68:	b2da      	uxtb	r2, r3
    1b6a:	231f      	movs	r3, #31
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	213f      	movs	r1, #63	; 0x3f
    1b70:	400a      	ands	r2, r1
    1b72:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1b74:	231f      	movs	r3, #31
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	781b      	ldrb	r3, [r3, #0]
    1b7a:	2208      	movs	r2, #8
    1b7c:	4013      	ands	r3, r2
    1b7e:	d007      	beq.n	1b90 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1b80:	231f      	movs	r3, #31
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	221f      	movs	r2, #31
    1b86:	18ba      	adds	r2, r7, r2
    1b88:	7812      	ldrb	r2, [r2, #0]
    1b8a:	2108      	movs	r1, #8
    1b8c:	438a      	bics	r2, r1
    1b8e:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1b90:	231f      	movs	r3, #31
    1b92:	18fb      	adds	r3, r7, r3
    1b94:	781b      	ldrb	r3, [r3, #0]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d100      	bne.n	1b9c <_usart_interrupt_handler+0x178>
    1b9a:	e069      	b.n	1c70 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1b9c:	231f      	movs	r3, #31
    1b9e:	18fb      	adds	r3, r7, r3
    1ba0:	781b      	ldrb	r3, [r3, #0]
    1ba2:	2202      	movs	r2, #2
    1ba4:	4013      	ands	r3, r2
    1ba6:	d00c      	beq.n	1bc2 <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ba8:	69bb      	ldr	r3, [r7, #24]
    1baa:	2232      	movs	r2, #50	; 0x32
    1bac:	211a      	movs	r1, #26
    1bae:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1bb0:	697b      	ldr	r3, [r7, #20]
    1bb2:	8b5b      	ldrh	r3, [r3, #26]
    1bb4:	b29b      	uxth	r3, r3
    1bb6:	2202      	movs	r2, #2
    1bb8:	4313      	orrs	r3, r2
    1bba:	b29a      	uxth	r2, r3
    1bbc:	697b      	ldr	r3, [r7, #20]
    1bbe:	835a      	strh	r2, [r3, #26]
    1bc0:	e04a      	b.n	1c58 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1bc2:	231f      	movs	r3, #31
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	781b      	ldrb	r3, [r3, #0]
    1bc8:	2204      	movs	r2, #4
    1bca:	4013      	ands	r3, r2
    1bcc:	d00c      	beq.n	1be8 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1bce:	69bb      	ldr	r3, [r7, #24]
    1bd0:	2232      	movs	r2, #50	; 0x32
    1bd2:	211e      	movs	r1, #30
    1bd4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1bd6:	697b      	ldr	r3, [r7, #20]
    1bd8:	8b5b      	ldrh	r3, [r3, #26]
    1bda:	b29b      	uxth	r3, r3
    1bdc:	2204      	movs	r2, #4
    1bde:	4313      	orrs	r3, r2
    1be0:	b29a      	uxth	r2, r3
    1be2:	697b      	ldr	r3, [r7, #20]
    1be4:	835a      	strh	r2, [r3, #26]
    1be6:	e037      	b.n	1c58 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1be8:	231f      	movs	r3, #31
    1bea:	18fb      	adds	r3, r7, r3
    1bec:	781b      	ldrb	r3, [r3, #0]
    1bee:	2201      	movs	r2, #1
    1bf0:	4013      	ands	r3, r2
    1bf2:	d00c      	beq.n	1c0e <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1bf4:	69bb      	ldr	r3, [r7, #24]
    1bf6:	2232      	movs	r2, #50	; 0x32
    1bf8:	2113      	movs	r1, #19
    1bfa:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1bfc:	697b      	ldr	r3, [r7, #20]
    1bfe:	8b5b      	ldrh	r3, [r3, #26]
    1c00:	b29b      	uxth	r3, r3
    1c02:	2201      	movs	r2, #1
    1c04:	4313      	orrs	r3, r2
    1c06:	b29a      	uxth	r2, r3
    1c08:	697b      	ldr	r3, [r7, #20]
    1c0a:	835a      	strh	r2, [r3, #26]
    1c0c:	e024      	b.n	1c58 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1c0e:	231f      	movs	r3, #31
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	781b      	ldrb	r3, [r3, #0]
    1c14:	2210      	movs	r2, #16
    1c16:	4013      	ands	r3, r2
    1c18:	d00c      	beq.n	1c34 <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1c1a:	69bb      	ldr	r3, [r7, #24]
    1c1c:	2232      	movs	r2, #50	; 0x32
    1c1e:	2142      	movs	r1, #66	; 0x42
    1c20:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1c22:	697b      	ldr	r3, [r7, #20]
    1c24:	8b5b      	ldrh	r3, [r3, #26]
    1c26:	b29b      	uxth	r3, r3
    1c28:	2210      	movs	r2, #16
    1c2a:	4313      	orrs	r3, r2
    1c2c:	b29a      	uxth	r2, r3
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	835a      	strh	r2, [r3, #26]
    1c32:	e011      	b.n	1c58 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1c34:	231f      	movs	r3, #31
    1c36:	18fb      	adds	r3, r7, r3
    1c38:	781b      	ldrb	r3, [r3, #0]
    1c3a:	2220      	movs	r2, #32
    1c3c:	4013      	ands	r3, r2
    1c3e:	d00b      	beq.n	1c58 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1c40:	69bb      	ldr	r3, [r7, #24]
    1c42:	2232      	movs	r2, #50	; 0x32
    1c44:	2141      	movs	r1, #65	; 0x41
    1c46:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	8b5b      	ldrh	r3, [r3, #26]
    1c4c:	b29b      	uxth	r3, r3
    1c4e:	2220      	movs	r2, #32
    1c50:	4313      	orrs	r3, r2
    1c52:	b29a      	uxth	r2, r3
    1c54:	697b      	ldr	r3, [r7, #20]
    1c56:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1c58:	2310      	movs	r3, #16
    1c5a:	18fb      	adds	r3, r7, r3
    1c5c:	881b      	ldrh	r3, [r3, #0]
    1c5e:	2204      	movs	r2, #4
    1c60:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1c62:	d050      	beq.n	1d06 <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1c64:	69bb      	ldr	r3, [r7, #24]
    1c66:	695b      	ldr	r3, [r3, #20]
    1c68:	69ba      	ldr	r2, [r7, #24]
    1c6a:	1c10      	adds	r0, r2, #0
    1c6c:	4798      	blx	r3
    1c6e:	e04a      	b.n	1d06 <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1c70:	697b      	ldr	r3, [r7, #20]
    1c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1c74:	b29a      	uxth	r2, r3
    1c76:	230e      	movs	r3, #14
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	05d2      	lsls	r2, r2, #23
    1c7c:	0dd2      	lsrs	r2, r2, #23
    1c7e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1c80:	69bb      	ldr	r3, [r7, #24]
    1c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c84:	220e      	movs	r2, #14
    1c86:	18ba      	adds	r2, r7, r2
    1c88:	8812      	ldrh	r2, [r2, #0]
    1c8a:	b2d2      	uxtb	r2, r2
    1c8c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1c8e:	69bb      	ldr	r3, [r7, #24]
    1c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1c92:	1c5a      	adds	r2, r3, #1
    1c94:	69bb      	ldr	r3, [r7, #24]
    1c96:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c98:	69bb      	ldr	r3, [r7, #24]
    1c9a:	795b      	ldrb	r3, [r3, #5]
    1c9c:	2b01      	cmp	r3, #1
    1c9e:	d10d      	bne.n	1cbc <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1ca0:	69bb      	ldr	r3, [r7, #24]
    1ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ca4:	220e      	movs	r2, #14
    1ca6:	18ba      	adds	r2, r7, r2
    1ca8:	8812      	ldrh	r2, [r2, #0]
    1caa:	0a12      	lsrs	r2, r2, #8
    1cac:	b292      	uxth	r2, r2
    1cae:	b2d2      	uxtb	r2, r2
    1cb0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1cb2:	69bb      	ldr	r3, [r7, #24]
    1cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1cb6:	1c5a      	adds	r2, r3, #1
    1cb8:	69bb      	ldr	r3, [r7, #24]
    1cba:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1cbc:	69bb      	ldr	r3, [r7, #24]
    1cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1cc0:	b29b      	uxth	r3, r3
    1cc2:	3b01      	subs	r3, #1
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	69ba      	ldr	r2, [r7, #24]
    1cc8:	1c19      	adds	r1, r3, #0
    1cca:	8591      	strh	r1, [r2, #44]	; 0x2c
    1ccc:	2b00      	cmp	r3, #0
    1cce:	d112      	bne.n	1cf6 <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1cd0:	697b      	ldr	r3, [r7, #20]
    1cd2:	2204      	movs	r2, #4
    1cd4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1cd6:	69bb      	ldr	r3, [r7, #24]
    1cd8:	2232      	movs	r2, #50	; 0x32
    1cda:	2100      	movs	r1, #0
    1cdc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1cde:	2310      	movs	r3, #16
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	881b      	ldrh	r3, [r3, #0]
    1ce4:	2202      	movs	r2, #2
    1ce6:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1ce8:	d005      	beq.n	1cf6 <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1cea:	69bb      	ldr	r3, [r7, #24]
    1cec:	691b      	ldr	r3, [r3, #16]
    1cee:	69ba      	ldr	r2, [r7, #24]
    1cf0:	1c10      	adds	r0, r2, #0
    1cf2:	4798      	blx	r3
    1cf4:	e007      	b.n	1d06 <_usart_interrupt_handler+0x2e2>
    1cf6:	e006      	b.n	1d06 <_usart_interrupt_handler+0x2e2>
    1cf8:	200001d4 	.word	0x200001d4
    1cfc:	00001a05 	.word	0x00001a05
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1d00:	697b      	ldr	r3, [r7, #20]
    1d02:	2204      	movs	r2, #4
    1d04:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1d06:	2312      	movs	r3, #18
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	881b      	ldrh	r3, [r3, #0]
    1d0c:	2210      	movs	r2, #16
    1d0e:	4013      	ands	r3, r2
    1d10:	d010      	beq.n	1d34 <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1d12:	697b      	ldr	r3, [r7, #20]
    1d14:	2210      	movs	r2, #16
    1d16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1d18:	697b      	ldr	r3, [r7, #20]
    1d1a:	2210      	movs	r2, #16
    1d1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1d1e:	2310      	movs	r3, #16
    1d20:	18fb      	adds	r3, r7, r3
    1d22:	881b      	ldrh	r3, [r3, #0]
    1d24:	2210      	movs	r2, #16
    1d26:	4013      	ands	r3, r2
    1d28:	d004      	beq.n	1d34 <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1d2a:	69bb      	ldr	r3, [r7, #24]
    1d2c:	69db      	ldr	r3, [r3, #28]
    1d2e:	69ba      	ldr	r2, [r7, #24]
    1d30:	1c10      	adds	r0, r2, #0
    1d32:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1d34:	2312      	movs	r3, #18
    1d36:	18fb      	adds	r3, r7, r3
    1d38:	881b      	ldrh	r3, [r3, #0]
    1d3a:	2220      	movs	r2, #32
    1d3c:	4013      	ands	r3, r2
    1d3e:	d010      	beq.n	1d62 <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1d40:	697b      	ldr	r3, [r7, #20]
    1d42:	2220      	movs	r2, #32
    1d44:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	2220      	movs	r2, #32
    1d4a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1d4c:	2310      	movs	r3, #16
    1d4e:	18fb      	adds	r3, r7, r3
    1d50:	881b      	ldrh	r3, [r3, #0]
    1d52:	2208      	movs	r2, #8
    1d54:	4013      	ands	r3, r2
    1d56:	d004      	beq.n	1d62 <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1d58:	69bb      	ldr	r3, [r7, #24]
    1d5a:	699b      	ldr	r3, [r3, #24]
    1d5c:	69ba      	ldr	r2, [r7, #24]
    1d5e:	1c10      	adds	r0, r2, #0
    1d60:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1d62:	2312      	movs	r3, #18
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	881b      	ldrh	r3, [r3, #0]
    1d68:	2208      	movs	r2, #8
    1d6a:	4013      	ands	r3, r2
    1d6c:	d010      	beq.n	1d90 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1d6e:	697b      	ldr	r3, [r7, #20]
    1d70:	2208      	movs	r2, #8
    1d72:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1d74:	697b      	ldr	r3, [r7, #20]
    1d76:	2208      	movs	r2, #8
    1d78:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1d7a:	2310      	movs	r3, #16
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	881b      	ldrh	r3, [r3, #0]
    1d80:	2220      	movs	r2, #32
    1d82:	4013      	ands	r3, r2
    1d84:	d004      	beq.n	1d90 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1d86:	69bb      	ldr	r3, [r7, #24]
    1d88:	6a1b      	ldr	r3, [r3, #32]
    1d8a:	69ba      	ldr	r2, [r7, #24]
    1d8c:	1c10      	adds	r0, r2, #0
    1d8e:	4798      	blx	r3
		}
	}
#endif
}
    1d90:	46bd      	mov	sp, r7
    1d92:	b008      	add	sp, #32
    1d94:	bd80      	pop	{r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)

00001d98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b086      	sub	sp, #24
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	60f8      	str	r0, [r7, #12]
    1da0:	60b9      	str	r1, [r7, #8]
    1da2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1da4:	2300      	movs	r3, #0
    1da6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	2b00      	cmp	r3, #0
    1dac:	d002      	beq.n	1db4 <_read+0x1c>
		return -1;
    1dae:	2301      	movs	r3, #1
    1db0:	425b      	negs	r3, r3
    1db2:	e015      	b.n	1de0 <_read+0x48>
	}

	for (; len > 0; --len) {
    1db4:	e010      	b.n	1dd8 <_read+0x40>
		ptr_get(stdio_base, ptr);
    1db6:	4b0c      	ldr	r3, [pc, #48]	; (1de8 <_read+0x50>)
    1db8:	681a      	ldr	r2, [r3, #0]
    1dba:	4b0c      	ldr	r3, [pc, #48]	; (1dec <_read+0x54>)
    1dbc:	6819      	ldr	r1, [r3, #0]
    1dbe:	68bb      	ldr	r3, [r7, #8]
    1dc0:	1c08      	adds	r0, r1, #0
    1dc2:	1c19      	adds	r1, r3, #0
    1dc4:	4790      	blx	r2
		ptr++;
    1dc6:	68bb      	ldr	r3, [r7, #8]
    1dc8:	3301      	adds	r3, #1
    1dca:	60bb      	str	r3, [r7, #8]
		nChars++;
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	3301      	adds	r3, #1
    1dd0:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	3b01      	subs	r3, #1
    1dd6:	607b      	str	r3, [r7, #4]
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	dceb      	bgt.n	1db6 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1dde:	697b      	ldr	r3, [r7, #20]
}
    1de0:	1c18      	adds	r0, r3, #0
    1de2:	46bd      	mov	sp, r7
    1de4:	b006      	add	sp, #24
    1de6:	bd80      	pop	{r7, pc}
    1de8:	200001ec 	.word	0x200001ec
    1dec:	200001f4 	.word	0x200001f4

00001df0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b086      	sub	sp, #24
    1df4:	af00      	add	r7, sp, #0
    1df6:	60f8      	str	r0, [r7, #12]
    1df8:	60b9      	str	r1, [r7, #8]
    1dfa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1dfc:	2300      	movs	r3, #0
    1dfe:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	2b01      	cmp	r3, #1
    1e04:	d008      	beq.n	1e18 <_write+0x28>
    1e06:	68fb      	ldr	r3, [r7, #12]
    1e08:	2b02      	cmp	r3, #2
    1e0a:	d005      	beq.n	1e18 <_write+0x28>
    1e0c:	68fb      	ldr	r3, [r7, #12]
    1e0e:	2b03      	cmp	r3, #3
    1e10:	d002      	beq.n	1e18 <_write+0x28>
		return -1;
    1e12:	2301      	movs	r3, #1
    1e14:	425b      	negs	r3, r3
    1e16:	e019      	b.n	1e4c <_write+0x5c>
	}

	for (; len != 0; --len) {
    1e18:	e014      	b.n	1e44 <_write+0x54>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1e1a:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <_write+0x64>)
    1e1c:	681a      	ldr	r2, [r3, #0]
    1e1e:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <_write+0x68>)
    1e20:	6818      	ldr	r0, [r3, #0]
    1e22:	68bb      	ldr	r3, [r7, #8]
    1e24:	1c59      	adds	r1, r3, #1
    1e26:	60b9      	str	r1, [r7, #8]
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	1c19      	adds	r1, r3, #0
    1e2c:	4790      	blx	r2
    1e2e:	1e03      	subs	r3, r0, #0
    1e30:	da02      	bge.n	1e38 <_write+0x48>
			return -1;
    1e32:	2301      	movs	r3, #1
    1e34:	425b      	negs	r3, r3
    1e36:	e009      	b.n	1e4c <_write+0x5c>
		}
		++nChars;
    1e38:	697b      	ldr	r3, [r7, #20]
    1e3a:	3301      	adds	r3, #1
    1e3c:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	3b01      	subs	r3, #1
    1e42:	607b      	str	r3, [r7, #4]
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d1e7      	bne.n	1e1a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1e4a:	697b      	ldr	r3, [r7, #20]
}
    1e4c:	1c18      	adds	r0, r3, #0
    1e4e:	46bd      	mov	sp, r7
    1e50:	b006      	add	sp, #24
    1e52:	bd80      	pop	{r7, pc}
    1e54:	200001f0 	.word	0x200001f0
    1e58:	200001f4 	.word	0x200001f4

00001e5c <SVC_Handler>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1e60:	46bd      	mov	sp, r7
    1e62:	bd80      	pop	{r7, pc}

00001e64 <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1e64:	f3ef 8010 	mrs	r0, PRIMASK
    1e68:	b672      	cpsid	i
    1e6a:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    1e6c:	2300      	movs	r3, #0
}
    1e6e:	1c18      	adds	r0, r3, #0

00001e70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1e70:	f380 8810 	msr	PRIMASK, r0
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			; (mov r8, r8)

00001e78 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1e78:	f3ef 8009 	mrs	r0, PSP
    1e7c:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <pxCurrentTCBConst>)
    1e7e:	681a      	ldr	r2, [r3, #0]
    1e80:	3820      	subs	r0, #32
    1e82:	6010      	str	r0, [r2, #0]
    1e84:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1e86:	4644      	mov	r4, r8
    1e88:	464d      	mov	r5, r9
    1e8a:	4656      	mov	r6, sl
    1e8c:	465f      	mov	r7, fp
    1e8e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1e90:	b508      	push	{r3, lr}
    1e92:	b672      	cpsid	i
    1e94:	f000 f936 	bl	2104 <vTaskSwitchContext>
    1e98:	b662      	cpsie	i
    1e9a:	bc0c      	pop	{r2, r3}
    1e9c:	6811      	ldr	r1, [r2, #0]
    1e9e:	6808      	ldr	r0, [r1, #0]
    1ea0:	3010      	adds	r0, #16
    1ea2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1ea4:	46a0      	mov	r8, r4
    1ea6:	46a9      	mov	r9, r5
    1ea8:	46b2      	mov	sl, r6
    1eaa:	46bb      	mov	fp, r7
    1eac:	f380 8809 	msr	PSP, r0
    1eb0:	3820      	subs	r0, #32
    1eb2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1eb4:	4718      	bx	r3
    1eb6:	46c0      	nop			; (mov r8, r8)

00001eb8 <pxCurrentTCBConst>:
    1eb8:	200000b8 	.word	0x200000b8

00001ebc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1ec2:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <SysTick_Handler+0x2c>)
    1ec4:	4798      	blx	r3
    1ec6:	1c03      	adds	r3, r0, #0
    1ec8:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1eca:	4b08      	ldr	r3, [pc, #32]	; (1eec <SysTick_Handler+0x30>)
    1ecc:	4798      	blx	r3
    1ece:	1e03      	subs	r3, r0, #0
    1ed0:	d003      	beq.n	1eda <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1ed2:	4b07      	ldr	r3, [pc, #28]	; (1ef0 <SysTick_Handler+0x34>)
    1ed4:	2280      	movs	r2, #128	; 0x80
    1ed6:	0552      	lsls	r2, r2, #21
    1ed8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	1c18      	adds	r0, r3, #0
    1ede:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <SysTick_Handler+0x38>)
    1ee0:	4798      	blx	r3
}
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b002      	add	sp, #8
    1ee6:	bd80      	pop	{r7, pc}
    1ee8:	00001e65 	.word	0x00001e65
    1eec:	00001f8d 	.word	0x00001f8d
    1ef0:	e000ed04 	.word	0xe000ed04
    1ef4:	00001e71 	.word	0x00001e71

00001ef8 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ef8:	b580      	push	{r7, lr}
    1efa:	b084      	sub	sp, #16
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
    1f00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1f08:	683b      	ldr	r3, [r7, #0]
    1f0a:	68fa      	ldr	r2, [r7, #12]
    1f0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1f0e:	68fb      	ldr	r3, [r7, #12]
    1f10:	689a      	ldr	r2, [r3, #8]
    1f12:	683b      	ldr	r3, [r7, #0]
    1f14:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	689b      	ldr	r3, [r3, #8]
    1f1a:	683a      	ldr	r2, [r7, #0]
    1f1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1f1e:	68fb      	ldr	r3, [r7, #12]
    1f20:	683a      	ldr	r2, [r7, #0]
    1f22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f24:	683b      	ldr	r3, [r7, #0]
    1f26:	687a      	ldr	r2, [r7, #4]
    1f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	681b      	ldr	r3, [r3, #0]
    1f2e:	1c5a      	adds	r2, r3, #1
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	601a      	str	r2, [r3, #0]
}
    1f34:	46bd      	mov	sp, r7
    1f36:	b004      	add	sp, #16
    1f38:	bd80      	pop	{r7, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)

00001f3c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	b084      	sub	sp, #16
    1f40:	af00      	add	r7, sp, #0
    1f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	691b      	ldr	r3, [r3, #16]
    1f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	685b      	ldr	r3, [r3, #4]
    1f4e:	687a      	ldr	r2, [r7, #4]
    1f50:	6892      	ldr	r2, [r2, #8]
    1f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	689b      	ldr	r3, [r3, #8]
    1f58:	687a      	ldr	r2, [r7, #4]
    1f5a:	6852      	ldr	r2, [r2, #4]
    1f5c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1f5e:	68fb      	ldr	r3, [r7, #12]
    1f60:	685a      	ldr	r2, [r3, #4]
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	429a      	cmp	r2, r3
    1f66:	d103      	bne.n	1f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1f68:	687b      	ldr	r3, [r7, #4]
    1f6a:	689a      	ldr	r2, [r3, #8]
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	2200      	movs	r2, #0
    1f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    1f76:	68fb      	ldr	r3, [r7, #12]
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	1e5a      	subs	r2, r3, #1
    1f7c:	68fb      	ldr	r3, [r7, #12]
    1f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	681b      	ldr	r3, [r3, #0]
}
    1f84:	1c18      	adds	r0, r3, #0
    1f86:	46bd      	mov	sp, r7
    1f88:	b004      	add	sp, #16
    1f8a:	bd80      	pop	{r7, pc}

00001f8c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b086      	sub	sp, #24
    1f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1f92:	2300      	movs	r3, #0
    1f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f96:	4b4d      	ldr	r3, [pc, #308]	; (20cc <STACK_SIZE+0xcc>)
    1f98:	681b      	ldr	r3, [r3, #0]
    1f9a:	2b00      	cmp	r3, #0
    1f9c:	d000      	beq.n	1fa0 <xTaskIncrementTick+0x14>
    1f9e:	e084      	b.n	20aa <STACK_SIZE+0xaa>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    1fa0:	4b4b      	ldr	r3, [pc, #300]	; (20d0 <STACK_SIZE+0xd0>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	1c5a      	adds	r2, r3, #1
    1fa6:	4b4a      	ldr	r3, [pc, #296]	; (20d0 <STACK_SIZE+0xd0>)
    1fa8:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1faa:	4b49      	ldr	r3, [pc, #292]	; (20d0 <STACK_SIZE+0xd0>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
    1fb0:	693b      	ldr	r3, [r7, #16]
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d117      	bne.n	1fe6 <xTaskIncrementTick+0x5a>
			{
				taskSWITCH_DELAYED_LISTS();
    1fb6:	4b47      	ldr	r3, [pc, #284]	; (20d4 <STACK_SIZE+0xd4>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	681b      	ldr	r3, [r3, #0]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d001      	beq.n	1fc4 <xTaskIncrementTick+0x38>
    1fc0:	b672      	cpsid	i
    1fc2:	e7fe      	b.n	1fc2 <xTaskIncrementTick+0x36>
    1fc4:	4b43      	ldr	r3, [pc, #268]	; (20d4 <STACK_SIZE+0xd4>)
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	60fb      	str	r3, [r7, #12]
    1fca:	4b43      	ldr	r3, [pc, #268]	; (20d8 <STACK_SIZE+0xd8>)
    1fcc:	681a      	ldr	r2, [r3, #0]
    1fce:	4b41      	ldr	r3, [pc, #260]	; (20d4 <STACK_SIZE+0xd4>)
    1fd0:	601a      	str	r2, [r3, #0]
    1fd2:	4b41      	ldr	r3, [pc, #260]	; (20d8 <STACK_SIZE+0xd8>)
    1fd4:	68fa      	ldr	r2, [r7, #12]
    1fd6:	601a      	str	r2, [r3, #0]
    1fd8:	4b40      	ldr	r3, [pc, #256]	; (20dc <STACK_SIZE+0xdc>)
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	1c5a      	adds	r2, r3, #1
    1fde:	4b3f      	ldr	r3, [pc, #252]	; (20dc <STACK_SIZE+0xdc>)
    1fe0:	601a      	str	r2, [r3, #0]
    1fe2:	4b3f      	ldr	r3, [pc, #252]	; (20e0 <STACK_SIZE+0xe0>)
    1fe4:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1fe6:	4b3f      	ldr	r3, [pc, #252]	; (20e4 <STACK_SIZE+0xe4>)
    1fe8:	681b      	ldr	r3, [r3, #0]
    1fea:	693a      	ldr	r2, [r7, #16]
    1fec:	429a      	cmp	r2, r3
    1fee:	d34e      	bcc.n	208e <STACK_SIZE+0x8e>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1ff0:	4b38      	ldr	r3, [pc, #224]	; (20d4 <STACK_SIZE+0xd4>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d101      	bne.n	1ffe <xTaskIncrementTick+0x72>
    1ffa:	2301      	movs	r3, #1
    1ffc:	e000      	b.n	2000 <STACK_SIZE>
    1ffe:	2300      	movs	r3, #0
    2000:	2b00      	cmp	r3, #0
    2002:	d004      	beq.n	200e <STACK_SIZE+0xe>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    2004:	4b37      	ldr	r3, [pc, #220]	; (20e4 <STACK_SIZE+0xe4>)
    2006:	2201      	movs	r2, #1
    2008:	4252      	negs	r2, r2
    200a:	601a      	str	r2, [r3, #0]
						break;
    200c:	e03f      	b.n	208e <STACK_SIZE+0x8e>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    200e:	4b31      	ldr	r3, [pc, #196]	; (20d4 <STACK_SIZE+0xd4>)
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	68db      	ldr	r3, [r3, #12]
    2014:	68db      	ldr	r3, [r3, #12]
    2016:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2018:	68bb      	ldr	r3, [r7, #8]
    201a:	685b      	ldr	r3, [r3, #4]
    201c:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    201e:	693a      	ldr	r2, [r7, #16]
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	429a      	cmp	r2, r3
    2024:	d203      	bcs.n	202e <STACK_SIZE+0x2e>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2026:	4b2f      	ldr	r3, [pc, #188]	; (20e4 <STACK_SIZE+0xe4>)
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	601a      	str	r2, [r3, #0]
							break;
    202c:	e02f      	b.n	208e <STACK_SIZE+0x8e>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    202e:	68bb      	ldr	r3, [r7, #8]
    2030:	3304      	adds	r3, #4
    2032:	1c18      	adds	r0, r3, #0
    2034:	4b2c      	ldr	r3, [pc, #176]	; (20e8 <STACK_SIZE+0xe8>)
    2036:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2038:	68bb      	ldr	r3, [r7, #8]
    203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    203c:	2b00      	cmp	r3, #0
    203e:	d004      	beq.n	204a <STACK_SIZE+0x4a>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2040:	68bb      	ldr	r3, [r7, #8]
    2042:	3318      	adds	r3, #24
    2044:	1c18      	adds	r0, r3, #0
    2046:	4b28      	ldr	r3, [pc, #160]	; (20e8 <STACK_SIZE+0xe8>)
    2048:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    204a:	68bb      	ldr	r3, [r7, #8]
    204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    204e:	4b27      	ldr	r3, [pc, #156]	; (20ec <STACK_SIZE+0xec>)
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	429a      	cmp	r2, r3
    2054:	d903      	bls.n	205e <STACK_SIZE+0x5e>
    2056:	68bb      	ldr	r3, [r7, #8]
    2058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    205a:	4b24      	ldr	r3, [pc, #144]	; (20ec <STACK_SIZE+0xec>)
    205c:	601a      	str	r2, [r3, #0]
    205e:	68bb      	ldr	r3, [r7, #8]
    2060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2062:	1c13      	adds	r3, r2, #0
    2064:	009b      	lsls	r3, r3, #2
    2066:	189b      	adds	r3, r3, r2
    2068:	009b      	lsls	r3, r3, #2
    206a:	4a21      	ldr	r2, [pc, #132]	; (20f0 <STACK_SIZE+0xf0>)
    206c:	189a      	adds	r2, r3, r2
    206e:	68bb      	ldr	r3, [r7, #8]
    2070:	3304      	adds	r3, #4
    2072:	1c10      	adds	r0, r2, #0
    2074:	1c19      	adds	r1, r3, #0
    2076:	4b1f      	ldr	r3, [pc, #124]	; (20f4 <STACK_SIZE+0xf4>)
    2078:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    207a:	68bb      	ldr	r3, [r7, #8]
    207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    207e:	4b1e      	ldr	r3, [pc, #120]	; (20f8 <STACK_SIZE+0xf8>)
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2084:	429a      	cmp	r2, r3
    2086:	d301      	bcc.n	208c <STACK_SIZE+0x8c>
							{
								xSwitchRequired = pdTRUE;
    2088:	2301      	movs	r3, #1
    208a:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    208c:	e7b0      	b.n	1ff0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    208e:	4b1a      	ldr	r3, [pc, #104]	; (20f8 <STACK_SIZE+0xf8>)
    2090:	681b      	ldr	r3, [r3, #0]
    2092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2094:	4916      	ldr	r1, [pc, #88]	; (20f0 <STACK_SIZE+0xf0>)
    2096:	1c13      	adds	r3, r2, #0
    2098:	009b      	lsls	r3, r3, #2
    209a:	189b      	adds	r3, r3, r2
    209c:	009b      	lsls	r3, r3, #2
    209e:	585b      	ldr	r3, [r3, r1]
    20a0:	2b01      	cmp	r3, #1
    20a2:	d907      	bls.n	20b4 <STACK_SIZE+0xb4>
			{
				xSwitchRequired = pdTRUE;
    20a4:	2301      	movs	r3, #1
    20a6:	617b      	str	r3, [r7, #20]
    20a8:	e004      	b.n	20b4 <STACK_SIZE+0xb4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    20aa:	4b14      	ldr	r3, [pc, #80]	; (20fc <STACK_SIZE+0xfc>)
    20ac:	681b      	ldr	r3, [r3, #0]
    20ae:	1c5a      	adds	r2, r3, #1
    20b0:	4b12      	ldr	r3, [pc, #72]	; (20fc <STACK_SIZE+0xfc>)
    20b2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    20b4:	4b12      	ldr	r3, [pc, #72]	; (2100 <STACK_SIZE+0x100>)
    20b6:	681b      	ldr	r3, [r3, #0]
    20b8:	2b00      	cmp	r3, #0
    20ba:	d001      	beq.n	20c0 <STACK_SIZE+0xc0>
		{
			xSwitchRequired = pdTRUE;
    20bc:	2301      	movs	r3, #1
    20be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    20c0:	697b      	ldr	r3, [r7, #20]
}
    20c2:	1c18      	adds	r0, r3, #0
    20c4:	46bd      	mov	sp, r7
    20c6:	b006      	add	sp, #24
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	2000013c 	.word	0x2000013c
    20d0:	20000128 	.word	0x20000128
    20d4:	20000120 	.word	0x20000120
    20d8:	20000124 	.word	0x20000124
    20dc:	20000138 	.word	0x20000138
    20e0:	000021a5 	.word	0x000021a5
    20e4:	20000004 	.word	0x20000004
    20e8:	00001f3d 	.word	0x00001f3d
    20ec:	2000012c 	.word	0x2000012c
    20f0:	200000bc 	.word	0x200000bc
    20f4:	00001ef9 	.word	0x00001ef9
    20f8:	200000b8 	.word	0x200000b8
    20fc:	20000130 	.word	0x20000130
    2100:	20000134 	.word	0x20000134

00002104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2104:	b580      	push	{r7, lr}
    2106:	b082      	sub	sp, #8
    2108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    210a:	4b21      	ldr	r3, [pc, #132]	; (2190 <vTaskSwitchContext+0x8c>)
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	2b00      	cmp	r3, #0
    2110:	d003      	beq.n	211a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2112:	4b20      	ldr	r3, [pc, #128]	; (2194 <vTaskSwitchContext+0x90>)
    2114:	2201      	movs	r2, #1
    2116:	601a      	str	r2, [r3, #0]
    2118:	e036      	b.n	2188 <vTaskSwitchContext+0x84>
	}
	else
	{
		xYieldPending = pdFALSE;
    211a:	4b1e      	ldr	r3, [pc, #120]	; (2194 <vTaskSwitchContext+0x90>)
    211c:	2200      	movs	r2, #0
    211e:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2120:	e00a      	b.n	2138 <vTaskSwitchContext+0x34>
    2122:	4b1d      	ldr	r3, [pc, #116]	; (2198 <vTaskSwitchContext+0x94>)
    2124:	681b      	ldr	r3, [r3, #0]
    2126:	2b00      	cmp	r3, #0
    2128:	d101      	bne.n	212e <vTaskSwitchContext+0x2a>
    212a:	b672      	cpsid	i
    212c:	e7fe      	b.n	212c <vTaskSwitchContext+0x28>
    212e:	4b1a      	ldr	r3, [pc, #104]	; (2198 <vTaskSwitchContext+0x94>)
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	1e5a      	subs	r2, r3, #1
    2134:	4b18      	ldr	r3, [pc, #96]	; (2198 <vTaskSwitchContext+0x94>)
    2136:	601a      	str	r2, [r3, #0]
    2138:	4b17      	ldr	r3, [pc, #92]	; (2198 <vTaskSwitchContext+0x94>)
    213a:	681a      	ldr	r2, [r3, #0]
    213c:	4917      	ldr	r1, [pc, #92]	; (219c <vTaskSwitchContext+0x98>)
    213e:	1c13      	adds	r3, r2, #0
    2140:	009b      	lsls	r3, r3, #2
    2142:	189b      	adds	r3, r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	585b      	ldr	r3, [r3, r1]
    2148:	2b00      	cmp	r3, #0
    214a:	d0ea      	beq.n	2122 <vTaskSwitchContext+0x1e>
    214c:	4b12      	ldr	r3, [pc, #72]	; (2198 <vTaskSwitchContext+0x94>)
    214e:	681a      	ldr	r2, [r3, #0]
    2150:	1c13      	adds	r3, r2, #0
    2152:	009b      	lsls	r3, r3, #2
    2154:	189b      	adds	r3, r3, r2
    2156:	009b      	lsls	r3, r3, #2
    2158:	4a10      	ldr	r2, [pc, #64]	; (219c <vTaskSwitchContext+0x98>)
    215a:	189b      	adds	r3, r3, r2
    215c:	607b      	str	r3, [r7, #4]
    215e:	687b      	ldr	r3, [r7, #4]
    2160:	685b      	ldr	r3, [r3, #4]
    2162:	685a      	ldr	r2, [r3, #4]
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	605a      	str	r2, [r3, #4]
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	685a      	ldr	r2, [r3, #4]
    216c:	687b      	ldr	r3, [r7, #4]
    216e:	3308      	adds	r3, #8
    2170:	429a      	cmp	r2, r3
    2172:	d104      	bne.n	217e <vTaskSwitchContext+0x7a>
    2174:	687b      	ldr	r3, [r7, #4]
    2176:	685b      	ldr	r3, [r3, #4]
    2178:	685a      	ldr	r2, [r3, #4]
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	605a      	str	r2, [r3, #4]
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	685b      	ldr	r3, [r3, #4]
    2182:	68da      	ldr	r2, [r3, #12]
    2184:	4b06      	ldr	r3, [pc, #24]	; (21a0 <vTaskSwitchContext+0x9c>)
    2186:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2188:	46bd      	mov	sp, r7
    218a:	b002      	add	sp, #8
    218c:	bd80      	pop	{r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	2000013c 	.word	0x2000013c
    2194:	20000134 	.word	0x20000134
    2198:	2000012c 	.word	0x2000012c
    219c:	200000bc 	.word	0x200000bc
    21a0:	200000b8 	.word	0x200000b8

000021a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b082      	sub	sp, #8
    21a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    21aa:	4b0d      	ldr	r3, [pc, #52]	; (21e0 <prvResetNextTaskUnblockTime+0x3c>)
    21ac:	681b      	ldr	r3, [r3, #0]
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d101      	bne.n	21b8 <prvResetNextTaskUnblockTime+0x14>
    21b4:	2301      	movs	r3, #1
    21b6:	e000      	b.n	21ba <prvResetNextTaskUnblockTime+0x16>
    21b8:	2300      	movs	r3, #0
    21ba:	2b00      	cmp	r3, #0
    21bc:	d004      	beq.n	21c8 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    21be:	4b09      	ldr	r3, [pc, #36]	; (21e4 <prvResetNextTaskUnblockTime+0x40>)
    21c0:	2201      	movs	r2, #1
    21c2:	4252      	negs	r2, r2
    21c4:	601a      	str	r2, [r3, #0]
    21c6:	e008      	b.n	21da <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    21c8:	4b05      	ldr	r3, [pc, #20]	; (21e0 <prvResetNextTaskUnblockTime+0x3c>)
    21ca:	681b      	ldr	r3, [r3, #0]
    21cc:	68db      	ldr	r3, [r3, #12]
    21ce:	68db      	ldr	r3, [r3, #12]
    21d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	685a      	ldr	r2, [r3, #4]
    21d6:	4b03      	ldr	r3, [pc, #12]	; (21e4 <prvResetNextTaskUnblockTime+0x40>)
    21d8:	601a      	str	r2, [r3, #0]
	}
}
    21da:	46bd      	mov	sp, r7
    21dc:	b002      	add	sp, #8
    21de:	bd80      	pop	{r7, pc}
    21e0:	20000120 	.word	0x20000120
    21e4:	20000004 	.word	0x20000004

000021e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b084      	sub	sp, #16
    21ec:	af00      	add	r7, sp, #0
    21ee:	1c02      	adds	r2, r0, #0
    21f0:	1dfb      	adds	r3, r7, #7
    21f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    21f4:	230f      	movs	r3, #15
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	1dfa      	adds	r2, r7, #7
    21fa:	7812      	ldrb	r2, [r2, #0]
    21fc:	09d2      	lsrs	r2, r2, #7
    21fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2200:	230e      	movs	r3, #14
    2202:	18fb      	adds	r3, r7, r3
    2204:	1dfa      	adds	r2, r7, #7
    2206:	7812      	ldrb	r2, [r2, #0]
    2208:	0952      	lsrs	r2, r2, #5
    220a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    220c:	4b0d      	ldr	r3, [pc, #52]	; (2244 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    220e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2210:	230f      	movs	r3, #15
    2212:	18fb      	adds	r3, r7, r3
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	2b00      	cmp	r3, #0
    2218:	d10f      	bne.n	223a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    221a:	230f      	movs	r3, #15
    221c:	18fb      	adds	r3, r7, r3
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	009b      	lsls	r3, r3, #2
    2222:	2210      	movs	r2, #16
    2224:	4694      	mov	ip, r2
    2226:	44bc      	add	ip, r7
    2228:	4463      	add	r3, ip
    222a:	3b08      	subs	r3, #8
    222c:	681a      	ldr	r2, [r3, #0]
    222e:	230e      	movs	r3, #14
    2230:	18fb      	adds	r3, r7, r3
    2232:	781b      	ldrb	r3, [r3, #0]
    2234:	01db      	lsls	r3, r3, #7
    2236:	18d3      	adds	r3, r2, r3
    2238:	e000      	b.n	223c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    223a:	2300      	movs	r3, #0
	}
}
    223c:	1c18      	adds	r0, r3, #0
    223e:	46bd      	mov	sp, r7
    2240:	b004      	add	sp, #16
    2242:	bd80      	pop	{r7, pc}
    2244:	41004400 	.word	0x41004400

00002248 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	1c02      	adds	r2, r0, #0
    2250:	1dfb      	adds	r3, r7, #7
    2252:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2254:	1dfb      	adds	r3, r7, #7
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	1c18      	adds	r0, r3, #0
    225a:	4b03      	ldr	r3, [pc, #12]	; (2268 <port_get_group_from_gpio_pin+0x20>)
    225c:	4798      	blx	r3
    225e:	1c03      	adds	r3, r0, #0
}
    2260:	1c18      	adds	r0, r3, #0
    2262:	46bd      	mov	sp, r7
    2264:	b002      	add	sp, #8
    2266:	bd80      	pop	{r7, pc}
    2268:	000021e9 	.word	0x000021e9

0000226c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    226c:	b580      	push	{r7, lr}
    226e:	b082      	sub	sp, #8
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	2200      	movs	r2, #0
    2278:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	2201      	movs	r2, #1
    227e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2280:	687b      	ldr	r3, [r7, #4]
    2282:	2200      	movs	r2, #0
    2284:	709a      	strb	r2, [r3, #2]
}
    2286:	46bd      	mov	sp, r7
    2288:	b002      	add	sp, #8
    228a:	bd80      	pop	{r7, pc}

0000228c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    228c:	b580      	push	{r7, lr}
    228e:	b084      	sub	sp, #16
    2290:	af00      	add	r7, sp, #0
    2292:	1c02      	adds	r2, r0, #0
    2294:	1dfb      	adds	r3, r7, #7
    2296:	701a      	strb	r2, [r3, #0]
    2298:	1dbb      	adds	r3, r7, #6
    229a:	1c0a      	adds	r2, r1, #0
    229c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    229e:	1dfb      	adds	r3, r7, #7
    22a0:	781b      	ldrb	r3, [r3, #0]
    22a2:	1c18      	adds	r0, r3, #0
    22a4:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <port_pin_set_output_level+0x4c>)
    22a6:	4798      	blx	r3
    22a8:	1c03      	adds	r3, r0, #0
    22aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    22ac:	1dfb      	adds	r3, r7, #7
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	221f      	movs	r2, #31
    22b2:	4013      	ands	r3, r2
    22b4:	2201      	movs	r2, #1
    22b6:	409a      	lsls	r2, r3
    22b8:	1c13      	adds	r3, r2, #0
    22ba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    22bc:	1dbb      	adds	r3, r7, #6
    22be:	781b      	ldrb	r3, [r3, #0]
    22c0:	2b00      	cmp	r3, #0
    22c2:	d003      	beq.n	22cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    22c4:	68fb      	ldr	r3, [r7, #12]
    22c6:	68ba      	ldr	r2, [r7, #8]
    22c8:	619a      	str	r2, [r3, #24]
    22ca:	e002      	b.n	22d2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    22cc:	68fb      	ldr	r3, [r7, #12]
    22ce:	68ba      	ldr	r2, [r7, #8]
    22d0:	615a      	str	r2, [r3, #20]
	}
}
    22d2:	46bd      	mov	sp, r7
    22d4:	b004      	add	sp, #16
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00002249 	.word	0x00002249

000022dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    22dc:	b580      	push	{r7, lr}
    22de:	b082      	sub	sp, #8
    22e0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    22e2:	1d3b      	adds	r3, r7, #4
    22e4:	1c18      	adds	r0, r3, #0
    22e6:	4b0e      	ldr	r3, [pc, #56]	; (2320 <system_board_init+0x44>)
    22e8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    22ea:	1d3b      	adds	r3, r7, #4
    22ec:	2201      	movs	r2, #1
    22ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    22f0:	1d3b      	adds	r3, r7, #4
    22f2:	203e      	movs	r0, #62	; 0x3e
    22f4:	1c19      	adds	r1, r3, #0
    22f6:	4b0b      	ldr	r3, [pc, #44]	; (2324 <system_board_init+0x48>)
    22f8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    22fa:	203e      	movs	r0, #62	; 0x3e
    22fc:	2101      	movs	r1, #1
    22fe:	4b0a      	ldr	r3, [pc, #40]	; (2328 <system_board_init+0x4c>)
    2300:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2302:	1d3b      	adds	r3, r7, #4
    2304:	2200      	movs	r2, #0
    2306:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2308:	1d3b      	adds	r3, r7, #4
    230a:	2201      	movs	r2, #1
    230c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    230e:	1d3b      	adds	r3, r7, #4
    2310:	200f      	movs	r0, #15
    2312:	1c19      	adds	r1, r3, #0
    2314:	4b03      	ldr	r3, [pc, #12]	; (2324 <system_board_init+0x48>)
    2316:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2318:	46bd      	mov	sp, r7
    231a:	b002      	add	sp, #8
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	0000226d 	.word	0x0000226d
    2324:	00002355 	.word	0x00002355
    2328:	0000228d 	.word	0x0000228d

0000232c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    232c:	b580      	push	{r7, lr}
    232e:	b082      	sub	sp, #8
    2330:	af00      	add	r7, sp, #0
    2332:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	2280      	movs	r2, #128	; 0x80
    2338:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2200      	movs	r2, #0
    233e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2340:	687b      	ldr	r3, [r7, #4]
    2342:	2201      	movs	r2, #1
    2344:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	2200      	movs	r2, #0
    234a:	70da      	strb	r2, [r3, #3]
}
    234c:	46bd      	mov	sp, r7
    234e:	b002      	add	sp, #8
    2350:	bd80      	pop	{r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)

00002354 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2354:	b580      	push	{r7, lr}
    2356:	b084      	sub	sp, #16
    2358:	af00      	add	r7, sp, #0
    235a:	1c02      	adds	r2, r0, #0
    235c:	6039      	str	r1, [r7, #0]
    235e:	1dfb      	adds	r3, r7, #7
    2360:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2362:	230c      	movs	r3, #12
    2364:	18fb      	adds	r3, r7, r3
    2366:	1c18      	adds	r0, r3, #0
    2368:	4b0f      	ldr	r3, [pc, #60]	; (23a8 <port_pin_set_config+0x54>)
    236a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    236c:	230c      	movs	r3, #12
    236e:	18fb      	adds	r3, r7, r3
    2370:	2280      	movs	r2, #128	; 0x80
    2372:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2374:	683b      	ldr	r3, [r7, #0]
    2376:	781a      	ldrb	r2, [r3, #0]
    2378:	230c      	movs	r3, #12
    237a:	18fb      	adds	r3, r7, r3
    237c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    237e:	683b      	ldr	r3, [r7, #0]
    2380:	785a      	ldrb	r2, [r3, #1]
    2382:	230c      	movs	r3, #12
    2384:	18fb      	adds	r3, r7, r3
    2386:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2388:	683b      	ldr	r3, [r7, #0]
    238a:	789a      	ldrb	r2, [r3, #2]
    238c:	230c      	movs	r3, #12
    238e:	18fb      	adds	r3, r7, r3
    2390:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2392:	1dfb      	adds	r3, r7, #7
    2394:	781a      	ldrb	r2, [r3, #0]
    2396:	230c      	movs	r3, #12
    2398:	18fb      	adds	r3, r7, r3
    239a:	1c10      	adds	r0, r2, #0
    239c:	1c19      	adds	r1, r3, #0
    239e:	4b03      	ldr	r3, [pc, #12]	; (23ac <port_pin_set_config+0x58>)
    23a0:	4798      	blx	r3
}
    23a2:	46bd      	mov	sp, r7
    23a4:	b004      	add	sp, #16
    23a6:	bd80      	pop	{r7, pc}
    23a8:	0000232d 	.word	0x0000232d
    23ac:	00002dc5 	.word	0x00002dc5

000023b0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    23b0:	b580      	push	{r7, lr}
    23b2:	b082      	sub	sp, #8
    23b4:	af00      	add	r7, sp, #0
    23b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	2201      	movs	r2, #1
    23bc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    23be:	687b      	ldr	r3, [r7, #4]
    23c0:	2200      	movs	r2, #0
    23c2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    23c4:	687b      	ldr	r3, [r7, #4]
    23c6:	2206      	movs	r2, #6
    23c8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	2200      	movs	r2, #0
    23ce:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    23d0:	687b      	ldr	r3, [r7, #4]
    23d2:	2200      	movs	r2, #0
    23d4:	725a      	strb	r2, [r3, #9]
}
    23d6:	46bd      	mov	sp, r7
    23d8:	b002      	add	sp, #8
    23da:	bd80      	pop	{r7, pc}

000023dc <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    23dc:	b580      	push	{r7, lr}
    23de:	b082      	sub	sp, #8
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    23e4:	687b      	ldr	r3, [r7, #4]
    23e6:	2203      	movs	r2, #3
    23e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    23ea:	687b      	ldr	r3, [r7, #4]
    23ec:	2200      	movs	r2, #0
    23ee:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    23f0:	687b      	ldr	r3, [r7, #4]
    23f2:	2201      	movs	r2, #1
    23f4:	709a      	strb	r2, [r3, #2]
}
    23f6:	46bd      	mov	sp, r7
    23f8:	b002      	add	sp, #8
    23fa:	bd80      	pop	{r7, pc}

000023fc <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	1c02      	adds	r2, r0, #0
    2404:	1dfb      	adds	r3, r7, #7
    2406:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2408:	4a03      	ldr	r2, [pc, #12]	; (2418 <system_cpu_clock_set_divider+0x1c>)
    240a:	1dfb      	adds	r3, r7, #7
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	7213      	strb	r3, [r2, #8]
}
    2410:	46bd      	mov	sp, r7
    2412:	b002      	add	sp, #8
    2414:	bd80      	pop	{r7, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	40000400 	.word	0x40000400

0000241c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    241c:	b580      	push	{r7, lr}
    241e:	b082      	sub	sp, #8
    2420:	af00      	add	r7, sp, #0
    2422:	1c02      	adds	r2, r0, #0
    2424:	1dfb      	adds	r3, r7, #7
    2426:	701a      	strb	r2, [r3, #0]
    2428:	1dbb      	adds	r3, r7, #6
    242a:	1c0a      	adds	r2, r1, #0
    242c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    242e:	1dfb      	adds	r3, r7, #7
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	2b01      	cmp	r3, #1
    2434:	d008      	beq.n	2448 <system_apb_clock_set_divider+0x2c>
    2436:	2b02      	cmp	r3, #2
    2438:	d00b      	beq.n	2452 <system_apb_clock_set_divider+0x36>
    243a:	2b00      	cmp	r3, #0
    243c:	d10e      	bne.n	245c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    243e:	4a0b      	ldr	r2, [pc, #44]	; (246c <system_apb_clock_set_divider+0x50>)
    2440:	1dbb      	adds	r3, r7, #6
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	7253      	strb	r3, [r2, #9]
			break;
    2446:	e00b      	b.n	2460 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2448:	4a08      	ldr	r2, [pc, #32]	; (246c <system_apb_clock_set_divider+0x50>)
    244a:	1dbb      	adds	r3, r7, #6
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	7293      	strb	r3, [r2, #10]
			break;
    2450:	e006      	b.n	2460 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2452:	4a06      	ldr	r2, [pc, #24]	; (246c <system_apb_clock_set_divider+0x50>)
    2454:	1dbb      	adds	r3, r7, #6
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	72d3      	strb	r3, [r2, #11]
			break;
    245a:	e001      	b.n	2460 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    245c:	2317      	movs	r3, #23
    245e:	e000      	b.n	2462 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    2460:	2300      	movs	r3, #0
}
    2462:	1c18      	adds	r0, r3, #0
    2464:	46bd      	mov	sp, r7
    2466:	b002      	add	sp, #8
    2468:	bd80      	pop	{r7, pc}
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	40000400 	.word	0x40000400

00002470 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2470:	b580      	push	{r7, lr}
    2472:	b082      	sub	sp, #8
    2474:	af00      	add	r7, sp, #0
    2476:	1c02      	adds	r2, r0, #0
    2478:	1dfb      	adds	r3, r7, #7
    247a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    247c:	4b08      	ldr	r3, [pc, #32]	; (24a0 <system_flash_set_waitstates+0x30>)
    247e:	1dfa      	adds	r2, r7, #7
    2480:	7812      	ldrb	r2, [r2, #0]
    2482:	210f      	movs	r1, #15
    2484:	400a      	ands	r2, r1
    2486:	b2d2      	uxtb	r2, r2
    2488:	210f      	movs	r1, #15
    248a:	400a      	ands	r2, r1
    248c:	0052      	lsls	r2, r2, #1
    248e:	6859      	ldr	r1, [r3, #4]
    2490:	201e      	movs	r0, #30
    2492:	4381      	bics	r1, r0
    2494:	430a      	orrs	r2, r1
    2496:	605a      	str	r2, [r3, #4]
}
    2498:	46bd      	mov	sp, r7
    249a:	b002      	add	sp, #8
    249c:	bd80      	pop	{r7, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	41004000 	.word	0x41004000

000024a4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    24a4:	b580      	push	{r7, lr}
    24a6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    24a8:	46c0      	nop			; (mov r8, r8)
    24aa:	4b03      	ldr	r3, [pc, #12]	; (24b8 <_system_dfll_wait_for_sync+0x14>)
    24ac:	68db      	ldr	r3, [r3, #12]
    24ae:	2210      	movs	r2, #16
    24b0:	4013      	ands	r3, r2
    24b2:	d0fa      	beq.n	24aa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    24b4:	46bd      	mov	sp, r7
    24b6:	bd80      	pop	{r7, pc}
    24b8:	40000800 	.word	0x40000800

000024bc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    24bc:	b580      	push	{r7, lr}
    24be:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    24c0:	4a0c      	ldr	r2, [pc, #48]	; (24f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    24c2:	4b0d      	ldr	r3, [pc, #52]	; (24f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    24c4:	681b      	ldr	r3, [r3, #0]
    24c6:	b29b      	uxth	r3, r3
    24c8:	2180      	movs	r1, #128	; 0x80
    24ca:	438b      	bics	r3, r1
    24cc:	b29b      	uxth	r3, r3
    24ce:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    24d0:	4b0a      	ldr	r3, [pc, #40]	; (24fc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    24d2:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    24d4:	4a07      	ldr	r2, [pc, #28]	; (24f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    24d6:	4b08      	ldr	r3, [pc, #32]	; (24f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    24d8:	689b      	ldr	r3, [r3, #8]
    24da:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    24dc:	4a05      	ldr	r2, [pc, #20]	; (24f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    24de:	4b06      	ldr	r3, [pc, #24]	; (24f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    24e0:	685b      	ldr	r3, [r3, #4]
    24e2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    24e4:	4a03      	ldr	r2, [pc, #12]	; (24f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    24e6:	4b04      	ldr	r3, [pc, #16]	; (24f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	b29b      	uxth	r3, r3
    24ec:	8493      	strh	r3, [r2, #36]	; 0x24
}
    24ee:	46bd      	mov	sp, r7
    24f0:	bd80      	pop	{r7, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	40000800 	.word	0x40000800
    24f8:	20000140 	.word	0x20000140
    24fc:	000024a5 	.word	0x000024a5

00002500 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
    2506:	1c02      	adds	r2, r0, #0
    2508:	1dfb      	adds	r3, r7, #7
    250a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    250c:	1dfb      	adds	r3, r7, #7
    250e:	781b      	ldrb	r3, [r3, #0]
    2510:	2b08      	cmp	r3, #8
    2512:	d842      	bhi.n	259a <system_clock_source_get_hz+0x9a>
    2514:	009a      	lsls	r2, r3, #2
    2516:	4b23      	ldr	r3, [pc, #140]	; (25a4 <system_clock_source_get_hz+0xa4>)
    2518:	18d3      	adds	r3, r2, r3
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    251e:	4b22      	ldr	r3, [pc, #136]	; (25a8 <system_clock_source_get_hz+0xa8>)
    2520:	691b      	ldr	r3, [r3, #16]
    2522:	e03b      	b.n	259c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2524:	4b21      	ldr	r3, [pc, #132]	; (25ac <system_clock_source_get_hz+0xac>)
    2526:	6a1b      	ldr	r3, [r3, #32]
    2528:	0a1b      	lsrs	r3, r3, #8
    252a:	1c1a      	adds	r2, r3, #0
    252c:	2303      	movs	r3, #3
    252e:	4013      	ands	r3, r2
    2530:	b2db      	uxtb	r3, r3
    2532:	1c1a      	adds	r2, r3, #0
    2534:	4b1e      	ldr	r3, [pc, #120]	; (25b0 <system_clock_source_get_hz+0xb0>)
    2536:	40d3      	lsrs	r3, r2
    2538:	e030      	b.n	259c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    253a:	2380      	movs	r3, #128	; 0x80
    253c:	021b      	lsls	r3, r3, #8
    253e:	e02d      	b.n	259c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    2540:	2380      	movs	r3, #128	; 0x80
    2542:	021b      	lsls	r3, r3, #8
    2544:	e02a      	b.n	259c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2546:	4b18      	ldr	r3, [pc, #96]	; (25a8 <system_clock_source_get_hz+0xa8>)
    2548:	695b      	ldr	r3, [r3, #20]
    254a:	e027      	b.n	259c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    254c:	4b16      	ldr	r3, [pc, #88]	; (25a8 <system_clock_source_get_hz+0xa8>)
    254e:	681b      	ldr	r3, [r3, #0]
    2550:	2202      	movs	r2, #2
    2552:	4013      	ands	r3, r2
    2554:	d101      	bne.n	255a <system_clock_source_get_hz+0x5a>
			return 0;
    2556:	2300      	movs	r3, #0
    2558:	e020      	b.n	259c <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    255a:	4b16      	ldr	r3, [pc, #88]	; (25b4 <system_clock_source_get_hz+0xb4>)
    255c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    255e:	4b12      	ldr	r3, [pc, #72]	; (25a8 <system_clock_source_get_hz+0xa8>)
    2560:	681b      	ldr	r3, [r3, #0]
    2562:	2204      	movs	r2, #4
    2564:	4013      	ands	r3, r2
    2566:	d009      	beq.n	257c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2568:	2000      	movs	r0, #0
    256a:	4b13      	ldr	r3, [pc, #76]	; (25b8 <system_clock_source_get_hz+0xb8>)
    256c:	4798      	blx	r3
    256e:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    2570:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <system_clock_source_get_hz+0xa8>)
    2572:	689b      	ldr	r3, [r3, #8]
    2574:	041b      	lsls	r3, r3, #16
    2576:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2578:	4353      	muls	r3, r2
    257a:	e00f      	b.n	259c <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    257c:	4b0f      	ldr	r3, [pc, #60]	; (25bc <system_clock_source_get_hz+0xbc>)
    257e:	e00d      	b.n	259c <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2580:	4a0a      	ldr	r2, [pc, #40]	; (25ac <system_clock_source_get_hz+0xac>)
    2582:	2350      	movs	r3, #80	; 0x50
    2584:	5cd3      	ldrb	r3, [r2, r3]
    2586:	b2db      	uxtb	r3, r3
    2588:	1c1a      	adds	r2, r3, #0
    258a:	2304      	movs	r3, #4
    258c:	4013      	ands	r3, r2
    258e:	d101      	bne.n	2594 <system_clock_source_get_hz+0x94>
			return 0;
    2590:	2300      	movs	r3, #0
    2592:	e003      	b.n	259c <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    2594:	4b04      	ldr	r3, [pc, #16]	; (25a8 <system_clock_source_get_hz+0xa8>)
    2596:	68db      	ldr	r3, [r3, #12]
    2598:	e000      	b.n	259c <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    259a:	2300      	movs	r3, #0
	}
}
    259c:	1c18      	adds	r0, r3, #0
    259e:	46bd      	mov	sp, r7
    25a0:	b002      	add	sp, #8
    25a2:	bd80      	pop	{r7, pc}
    25a4:	0000751c 	.word	0x0000751c
    25a8:	20000140 	.word	0x20000140
    25ac:	40000800 	.word	0x40000800
    25b0:	007a1200 	.word	0x007a1200
    25b4:	000024a5 	.word	0x000024a5
    25b8:	00002bfd 	.word	0x00002bfd
    25bc:	02dc6c00 	.word	0x02dc6c00

000025c0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b084      	sub	sp, #16
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    25c8:	4b1a      	ldr	r3, [pc, #104]	; (2634 <system_clock_source_osc8m_set_config+0x74>)
    25ca:	6a1b      	ldr	r3, [r3, #32]
    25cc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    25ce:	687b      	ldr	r3, [r7, #4]
    25d0:	781b      	ldrb	r3, [r3, #0]
    25d2:	1c1a      	adds	r2, r3, #0
    25d4:	2303      	movs	r3, #3
    25d6:	4013      	ands	r3, r2
    25d8:	b2da      	uxtb	r2, r3
    25da:	230d      	movs	r3, #13
    25dc:	18fb      	adds	r3, r7, r3
    25de:	2103      	movs	r1, #3
    25e0:	400a      	ands	r2, r1
    25e2:	1c10      	adds	r0, r2, #0
    25e4:	781a      	ldrb	r2, [r3, #0]
    25e6:	2103      	movs	r1, #3
    25e8:	438a      	bics	r2, r1
    25ea:	1c11      	adds	r1, r2, #0
    25ec:	1c02      	adds	r2, r0, #0
    25ee:	430a      	orrs	r2, r1
    25f0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	789a      	ldrb	r2, [r3, #2]
    25f6:	230c      	movs	r3, #12
    25f8:	18fb      	adds	r3, r7, r3
    25fa:	01d0      	lsls	r0, r2, #7
    25fc:	781a      	ldrb	r2, [r3, #0]
    25fe:	217f      	movs	r1, #127	; 0x7f
    2600:	400a      	ands	r2, r1
    2602:	1c11      	adds	r1, r2, #0
    2604:	1c02      	adds	r2, r0, #0
    2606:	430a      	orrs	r2, r1
    2608:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	785a      	ldrb	r2, [r3, #1]
    260e:	230c      	movs	r3, #12
    2610:	18fb      	adds	r3, r7, r3
    2612:	2101      	movs	r1, #1
    2614:	400a      	ands	r2, r1
    2616:	0190      	lsls	r0, r2, #6
    2618:	781a      	ldrb	r2, [r3, #0]
    261a:	2140      	movs	r1, #64	; 0x40
    261c:	438a      	bics	r2, r1
    261e:	1c11      	adds	r1, r2, #0
    2620:	1c02      	adds	r2, r0, #0
    2622:	430a      	orrs	r2, r1
    2624:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    2626:	4b03      	ldr	r3, [pc, #12]	; (2634 <system_clock_source_osc8m_set_config+0x74>)
    2628:	68fa      	ldr	r2, [r7, #12]
    262a:	621a      	str	r2, [r3, #32]
}
    262c:	46bd      	mov	sp, r7
    262e:	b004      	add	sp, #16
    2630:	bd80      	pop	{r7, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	40000800 	.word	0x40000800

00002638 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    2638:	b580      	push	{r7, lr}
    263a:	b082      	sub	sp, #8
    263c:	af00      	add	r7, sp, #0
    263e:	1c02      	adds	r2, r0, #0
    2640:	1dfb      	adds	r3, r7, #7
    2642:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    2644:	1dfb      	adds	r3, r7, #7
    2646:	781b      	ldrb	r3, [r3, #0]
    2648:	2b08      	cmp	r3, #8
    264a:	d83b      	bhi.n	26c4 <system_clock_source_enable+0x8c>
    264c:	009a      	lsls	r2, r3, #2
    264e:	4b21      	ldr	r3, [pc, #132]	; (26d4 <system_clock_source_enable+0x9c>)
    2650:	18d3      	adds	r3, r2, r3
    2652:	681b      	ldr	r3, [r3, #0]
    2654:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2656:	4b20      	ldr	r3, [pc, #128]	; (26d8 <system_clock_source_enable+0xa0>)
    2658:	4a1f      	ldr	r2, [pc, #124]	; (26d8 <system_clock_source_enable+0xa0>)
    265a:	6a12      	ldr	r2, [r2, #32]
    265c:	2102      	movs	r1, #2
    265e:	430a      	orrs	r2, r1
    2660:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    2662:	2300      	movs	r3, #0
    2664:	e031      	b.n	26ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2666:	4b1c      	ldr	r3, [pc, #112]	; (26d8 <system_clock_source_enable+0xa0>)
    2668:	4a1b      	ldr	r2, [pc, #108]	; (26d8 <system_clock_source_enable+0xa0>)
    266a:	6992      	ldr	r2, [r2, #24]
    266c:	2102      	movs	r1, #2
    266e:	430a      	orrs	r2, r1
    2670:	619a      	str	r2, [r3, #24]
		break;
    2672:	e029      	b.n	26c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2674:	4a18      	ldr	r2, [pc, #96]	; (26d8 <system_clock_source_enable+0xa0>)
    2676:	4b18      	ldr	r3, [pc, #96]	; (26d8 <system_clock_source_enable+0xa0>)
    2678:	8a1b      	ldrh	r3, [r3, #16]
    267a:	b29b      	uxth	r3, r3
    267c:	2102      	movs	r1, #2
    267e:	430b      	orrs	r3, r1
    2680:	b29b      	uxth	r3, r3
    2682:	8213      	strh	r3, [r2, #16]
		break;
    2684:	e020      	b.n	26c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2686:	4a14      	ldr	r2, [pc, #80]	; (26d8 <system_clock_source_enable+0xa0>)
    2688:	4b13      	ldr	r3, [pc, #76]	; (26d8 <system_clock_source_enable+0xa0>)
    268a:	8a9b      	ldrh	r3, [r3, #20]
    268c:	b29b      	uxth	r3, r3
    268e:	2102      	movs	r1, #2
    2690:	430b      	orrs	r3, r1
    2692:	b29b      	uxth	r3, r3
    2694:	8293      	strh	r3, [r2, #20]
		break;
    2696:	e017      	b.n	26c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2698:	4b10      	ldr	r3, [pc, #64]	; (26dc <system_clock_source_enable+0xa4>)
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	2202      	movs	r2, #2
    269e:	431a      	orrs	r2, r3
    26a0:	4b0e      	ldr	r3, [pc, #56]	; (26dc <system_clock_source_enable+0xa4>)
    26a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    26a4:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <system_clock_source_enable+0xa8>)
    26a6:	4798      	blx	r3
		break;
    26a8:	e00e      	b.n	26c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    26aa:	4a0b      	ldr	r2, [pc, #44]	; (26d8 <system_clock_source_enable+0xa0>)
    26ac:	490a      	ldr	r1, [pc, #40]	; (26d8 <system_clock_source_enable+0xa0>)
    26ae:	2344      	movs	r3, #68	; 0x44
    26b0:	5ccb      	ldrb	r3, [r1, r3]
    26b2:	b2db      	uxtb	r3, r3
    26b4:	2102      	movs	r1, #2
    26b6:	430b      	orrs	r3, r1
    26b8:	b2d9      	uxtb	r1, r3
    26ba:	2344      	movs	r3, #68	; 0x44
    26bc:	54d1      	strb	r1, [r2, r3]
		break;
    26be:	e003      	b.n	26c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    26c0:	2300      	movs	r3, #0
    26c2:	e002      	b.n	26ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    26c4:	2317      	movs	r3, #23
    26c6:	e000      	b.n	26ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    26c8:	2300      	movs	r3, #0
}
    26ca:	1c18      	adds	r0, r3, #0
    26cc:	46bd      	mov	sp, r7
    26ce:	b002      	add	sp, #8
    26d0:	bd80      	pop	{r7, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	00007540 	.word	0x00007540
    26d8:	40000800 	.word	0x40000800
    26dc:	20000140 	.word	0x20000140
    26e0:	000024bd 	.word	0x000024bd

000026e4 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    26e4:	b580      	push	{r7, lr}
    26e6:	b09c      	sub	sp, #112	; 0x70
    26e8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    26ea:	4b24      	ldr	r3, [pc, #144]	; (277c <system_clock_init+0x98>)
    26ec:	22c2      	movs	r2, #194	; 0xc2
    26ee:	00d2      	lsls	r2, r2, #3
    26f0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    26f2:	2000      	movs	r0, #0
    26f4:	4b22      	ldr	r3, [pc, #136]	; (2780 <system_clock_init+0x9c>)
    26f6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    26f8:	236c      	movs	r3, #108	; 0x6c
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	1c18      	adds	r0, r3, #0
    26fe:	4b21      	ldr	r3, [pc, #132]	; (2784 <system_clock_init+0xa0>)
    2700:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2702:	236c      	movs	r3, #108	; 0x6c
    2704:	18fb      	adds	r3, r7, r3
    2706:	2200      	movs	r2, #0
    2708:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    270a:	236c      	movs	r3, #108	; 0x6c
    270c:	18fb      	adds	r3, r7, r3
    270e:	2201      	movs	r2, #1
    2710:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2712:	236c      	movs	r3, #108	; 0x6c
    2714:	18fb      	adds	r3, r7, r3
    2716:	2200      	movs	r2, #0
    2718:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    271a:	236c      	movs	r3, #108	; 0x6c
    271c:	18fb      	adds	r3, r7, r3
    271e:	1c18      	adds	r0, r3, #0
    2720:	4b19      	ldr	r3, [pc, #100]	; (2788 <system_clock_init+0xa4>)
    2722:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2724:	2006      	movs	r0, #6
    2726:	4b19      	ldr	r3, [pc, #100]	; (278c <system_clock_init+0xa8>)
    2728:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    272a:	4b19      	ldr	r3, [pc, #100]	; (2790 <system_clock_init+0xac>)
    272c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    272e:	2000      	movs	r0, #0
    2730:	4b18      	ldr	r3, [pc, #96]	; (2794 <system_clock_init+0xb0>)
    2732:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2734:	2000      	movs	r0, #0
    2736:	2100      	movs	r1, #0
    2738:	4b17      	ldr	r3, [pc, #92]	; (2798 <system_clock_init+0xb4>)
    273a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    273c:	2001      	movs	r0, #1
    273e:	2100      	movs	r1, #0
    2740:	4b15      	ldr	r3, [pc, #84]	; (2798 <system_clock_init+0xb4>)
    2742:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2744:	1c3b      	adds	r3, r7, #0
    2746:	1c18      	adds	r0, r3, #0
    2748:	4b14      	ldr	r3, [pc, #80]	; (279c <system_clock_init+0xb8>)
    274a:	4798      	blx	r3
    274c:	1c3b      	adds	r3, r7, #0
    274e:	2206      	movs	r2, #6
    2750:	701a      	strb	r2, [r3, #0]
    2752:	1c3b      	adds	r3, r7, #0
    2754:	2201      	movs	r2, #1
    2756:	605a      	str	r2, [r3, #4]
    2758:	1c3b      	adds	r3, r7, #0
    275a:	2200      	movs	r2, #0
    275c:	721a      	strb	r2, [r3, #8]
    275e:	1c3b      	adds	r3, r7, #0
    2760:	2200      	movs	r2, #0
    2762:	725a      	strb	r2, [r3, #9]
    2764:	1c3b      	adds	r3, r7, #0
    2766:	2000      	movs	r0, #0
    2768:	1c19      	adds	r1, r3, #0
    276a:	4b0d      	ldr	r3, [pc, #52]	; (27a0 <system_clock_init+0xbc>)
    276c:	4798      	blx	r3
    276e:	2000      	movs	r0, #0
    2770:	4b0c      	ldr	r3, [pc, #48]	; (27a4 <system_clock_init+0xc0>)
    2772:	4798      	blx	r3
#endif
}
    2774:	46bd      	mov	sp, r7
    2776:	b01c      	add	sp, #112	; 0x70
    2778:	bd80      	pop	{r7, pc}
    277a:	46c0      	nop			; (mov r8, r8)
    277c:	40000800 	.word	0x40000800
    2780:	00002471 	.word	0x00002471
    2784:	000023dd 	.word	0x000023dd
    2788:	000025c1 	.word	0x000025c1
    278c:	00002639 	.word	0x00002639
    2790:	00002849 	.word	0x00002849
    2794:	000023fd 	.word	0x000023fd
    2798:	0000241d 	.word	0x0000241d
    279c:	000023b1 	.word	0x000023b1
    27a0:	00002879 	.word	0x00002879
    27a4:	00002999 	.word	0x00002999

000027a8 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    27ac:	4b06      	ldr	r3, [pc, #24]	; (27c8 <system_gclk_is_syncing+0x20>)
    27ae:	785b      	ldrb	r3, [r3, #1]
    27b0:	b2db      	uxtb	r3, r3
    27b2:	b2db      	uxtb	r3, r3
    27b4:	b25b      	sxtb	r3, r3
    27b6:	2b00      	cmp	r3, #0
    27b8:	da01      	bge.n	27be <system_gclk_is_syncing+0x16>
		return true;
    27ba:	2301      	movs	r3, #1
    27bc:	e000      	b.n	27c0 <system_gclk_is_syncing+0x18>
	}

	return false;
    27be:	2300      	movs	r3, #0
}
    27c0:	1c18      	adds	r0, r3, #0
    27c2:	46bd      	mov	sp, r7
    27c4:	bd80      	pop	{r7, pc}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	40000c00 	.word	0x40000c00

000027cc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b082      	sub	sp, #8
    27d0:	af00      	add	r7, sp, #0
    27d2:	1c02      	adds	r2, r0, #0
    27d4:	6039      	str	r1, [r7, #0]
    27d6:	1dfb      	adds	r3, r7, #7
    27d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    27da:	1dfb      	adds	r3, r7, #7
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	2b01      	cmp	r3, #1
    27e0:	d00a      	beq.n	27f8 <system_apb_clock_set_mask+0x2c>
    27e2:	2b02      	cmp	r3, #2
    27e4:	d00f      	beq.n	2806 <system_apb_clock_set_mask+0x3a>
    27e6:	2b00      	cmp	r3, #0
    27e8:	d114      	bne.n	2814 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    27ea:	4b0e      	ldr	r3, [pc, #56]	; (2824 <system_apb_clock_set_mask+0x58>)
    27ec:	4a0d      	ldr	r2, [pc, #52]	; (2824 <system_apb_clock_set_mask+0x58>)
    27ee:	6991      	ldr	r1, [r2, #24]
    27f0:	683a      	ldr	r2, [r7, #0]
    27f2:	430a      	orrs	r2, r1
    27f4:	619a      	str	r2, [r3, #24]
			break;
    27f6:	e00f      	b.n	2818 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    27f8:	4b0a      	ldr	r3, [pc, #40]	; (2824 <system_apb_clock_set_mask+0x58>)
    27fa:	4a0a      	ldr	r2, [pc, #40]	; (2824 <system_apb_clock_set_mask+0x58>)
    27fc:	69d1      	ldr	r1, [r2, #28]
    27fe:	683a      	ldr	r2, [r7, #0]
    2800:	430a      	orrs	r2, r1
    2802:	61da      	str	r2, [r3, #28]
			break;
    2804:	e008      	b.n	2818 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <system_apb_clock_set_mask+0x58>)
    2808:	4a06      	ldr	r2, [pc, #24]	; (2824 <system_apb_clock_set_mask+0x58>)
    280a:	6a11      	ldr	r1, [r2, #32]
    280c:	683a      	ldr	r2, [r7, #0]
    280e:	430a      	orrs	r2, r1
    2810:	621a      	str	r2, [r3, #32]
			break;
    2812:	e001      	b.n	2818 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2814:	2317      	movs	r3, #23
    2816:	e000      	b.n	281a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2818:	2300      	movs	r3, #0
}
    281a:	1c18      	adds	r0, r3, #0
    281c:	46bd      	mov	sp, r7
    281e:	b002      	add	sp, #8
    2820:	bd80      	pop	{r7, pc}
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	40000400 	.word	0x40000400

00002828 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2828:	b580      	push	{r7, lr}
    282a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    282c:	4b01      	ldr	r3, [pc, #4]	; (2834 <system_interrupt_enter_critical_section+0xc>)
    282e:	4798      	blx	r3
}
    2830:	46bd      	mov	sp, r7
    2832:	bd80      	pop	{r7, pc}
    2834:	00000111 	.word	0x00000111

00002838 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2838:	b580      	push	{r7, lr}
    283a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    283c:	4b01      	ldr	r3, [pc, #4]	; (2844 <system_interrupt_leave_critical_section+0xc>)
    283e:	4798      	blx	r3
}
    2840:	46bd      	mov	sp, r7
    2842:	bd80      	pop	{r7, pc}
    2844:	00000161 	.word	0x00000161

00002848 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2848:	b580      	push	{r7, lr}
    284a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    284c:	2000      	movs	r0, #0
    284e:	2108      	movs	r1, #8
    2850:	4b07      	ldr	r3, [pc, #28]	; (2870 <system_gclk_init+0x28>)
    2852:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2854:	4b07      	ldr	r3, [pc, #28]	; (2874 <system_gclk_init+0x2c>)
    2856:	2201      	movs	r2, #1
    2858:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <system_gclk_init+0x2c>)
    285e:	781b      	ldrb	r3, [r3, #0]
    2860:	b2db      	uxtb	r3, r3
    2862:	1c1a      	adds	r2, r3, #0
    2864:	2301      	movs	r3, #1
    2866:	4013      	ands	r3, r2
    2868:	d1f8      	bne.n	285c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    286a:	46bd      	mov	sp, r7
    286c:	bd80      	pop	{r7, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	000027cd 	.word	0x000027cd
    2874:	40000c00 	.word	0x40000c00

00002878 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2878:	b580      	push	{r7, lr}
    287a:	b086      	sub	sp, #24
    287c:	af00      	add	r7, sp, #0
    287e:	1c02      	adds	r2, r0, #0
    2880:	6039      	str	r1, [r7, #0]
    2882:	1dfb      	adds	r3, r7, #7
    2884:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2886:	1dfb      	adds	r3, r7, #7
    2888:	781b      	ldrb	r3, [r3, #0]
    288a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    288c:	1dfb      	adds	r3, r7, #7
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2892:	683b      	ldr	r3, [r7, #0]
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	021b      	lsls	r3, r3, #8
    2898:	1c1a      	adds	r2, r3, #0
    289a:	697b      	ldr	r3, [r7, #20]
    289c:	4313      	orrs	r3, r2
    289e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    28a0:	683b      	ldr	r3, [r7, #0]
    28a2:	785b      	ldrb	r3, [r3, #1]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d004      	beq.n	28b2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    28a8:	697b      	ldr	r3, [r7, #20]
    28aa:	2280      	movs	r2, #128	; 0x80
    28ac:	02d2      	lsls	r2, r2, #11
    28ae:	4313      	orrs	r3, r2
    28b0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    28b2:	683b      	ldr	r3, [r7, #0]
    28b4:	7a5b      	ldrb	r3, [r3, #9]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d004      	beq.n	28c4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    28ba:	697b      	ldr	r3, [r7, #20]
    28bc:	2280      	movs	r2, #128	; 0x80
    28be:	0312      	lsls	r2, r2, #12
    28c0:	4313      	orrs	r3, r2
    28c2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    28c4:	683b      	ldr	r3, [r7, #0]
    28c6:	685b      	ldr	r3, [r3, #4]
    28c8:	2b01      	cmp	r3, #1
    28ca:	d92c      	bls.n	2926 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    28cc:	683b      	ldr	r3, [r7, #0]
    28ce:	685a      	ldr	r2, [r3, #4]
    28d0:	683b      	ldr	r3, [r7, #0]
    28d2:	685b      	ldr	r3, [r3, #4]
    28d4:	3b01      	subs	r3, #1
    28d6:	4013      	ands	r3, r2
    28d8:	d11a      	bne.n	2910 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    28da:	2300      	movs	r3, #0
    28dc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    28de:	2302      	movs	r3, #2
    28e0:	60bb      	str	r3, [r7, #8]
    28e2:	e005      	b.n	28f0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    28e4:	68fb      	ldr	r3, [r7, #12]
    28e6:	3301      	adds	r3, #1
    28e8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    28ea:	68bb      	ldr	r3, [r7, #8]
    28ec:	005b      	lsls	r3, r3, #1
    28ee:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    28f0:	683b      	ldr	r3, [r7, #0]
    28f2:	685a      	ldr	r2, [r3, #4]
    28f4:	68bb      	ldr	r3, [r7, #8]
    28f6:	429a      	cmp	r2, r3
    28f8:	d8f4      	bhi.n	28e4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    28fa:	68fb      	ldr	r3, [r7, #12]
    28fc:	021b      	lsls	r3, r3, #8
    28fe:	693a      	ldr	r2, [r7, #16]
    2900:	4313      	orrs	r3, r2
    2902:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2904:	697b      	ldr	r3, [r7, #20]
    2906:	2280      	movs	r2, #128	; 0x80
    2908:	0352      	lsls	r2, r2, #13
    290a:	4313      	orrs	r3, r2
    290c:	617b      	str	r3, [r7, #20]
    290e:	e00a      	b.n	2926 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2910:	683b      	ldr	r3, [r7, #0]
    2912:	685b      	ldr	r3, [r3, #4]
    2914:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2916:	693a      	ldr	r2, [r7, #16]
    2918:	4313      	orrs	r3, r2
    291a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    291c:	697b      	ldr	r3, [r7, #20]
    291e:	2280      	movs	r2, #128	; 0x80
    2920:	0292      	lsls	r2, r2, #10
    2922:	4313      	orrs	r3, r2
    2924:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2926:	683b      	ldr	r3, [r7, #0]
    2928:	7a1b      	ldrb	r3, [r3, #8]
    292a:	2b00      	cmp	r3, #0
    292c:	d004      	beq.n	2938 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    292e:	697b      	ldr	r3, [r7, #20]
    2930:	2280      	movs	r2, #128	; 0x80
    2932:	0392      	lsls	r2, r2, #14
    2934:	4313      	orrs	r3, r2
    2936:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2938:	46c0      	nop			; (mov r8, r8)
    293a:	4b12      	ldr	r3, [pc, #72]	; (2984 <system_gclk_gen_set_config+0x10c>)
    293c:	4798      	blx	r3
    293e:	1e03      	subs	r3, r0, #0
    2940:	d1fb      	bne.n	293a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2942:	4b11      	ldr	r3, [pc, #68]	; (2988 <system_gclk_gen_set_config+0x110>)
    2944:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2946:	4a11      	ldr	r2, [pc, #68]	; (298c <system_gclk_gen_set_config+0x114>)
    2948:	1dfb      	adds	r3, r7, #7
    294a:	781b      	ldrb	r3, [r3, #0]
    294c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	4b0c      	ldr	r3, [pc, #48]	; (2984 <system_gclk_gen_set_config+0x10c>)
    2952:	4798      	blx	r3
    2954:	1e03      	subs	r3, r0, #0
    2956:	d1fb      	bne.n	2950 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2958:	4b0d      	ldr	r3, [pc, #52]	; (2990 <system_gclk_gen_set_config+0x118>)
    295a:	693a      	ldr	r2, [r7, #16]
    295c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	4b08      	ldr	r3, [pc, #32]	; (2984 <system_gclk_gen_set_config+0x10c>)
    2962:	4798      	blx	r3
    2964:	1e03      	subs	r3, r0, #0
    2966:	d1fb      	bne.n	2960 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2968:	4b09      	ldr	r3, [pc, #36]	; (2990 <system_gclk_gen_set_config+0x118>)
    296a:	4a09      	ldr	r2, [pc, #36]	; (2990 <system_gclk_gen_set_config+0x118>)
    296c:	6851      	ldr	r1, [r2, #4]
    296e:	2280      	movs	r2, #128	; 0x80
    2970:	0252      	lsls	r2, r2, #9
    2972:	4011      	ands	r1, r2
    2974:	697a      	ldr	r2, [r7, #20]
    2976:	430a      	orrs	r2, r1
    2978:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    297a:	4b06      	ldr	r3, [pc, #24]	; (2994 <system_gclk_gen_set_config+0x11c>)
    297c:	4798      	blx	r3
}
    297e:	46bd      	mov	sp, r7
    2980:	b006      	add	sp, #24
    2982:	bd80      	pop	{r7, pc}
    2984:	000027a9 	.word	0x000027a9
    2988:	00002829 	.word	0x00002829
    298c:	40000c08 	.word	0x40000c08
    2990:	40000c00 	.word	0x40000c00
    2994:	00002839 	.word	0x00002839

00002998 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2998:	b580      	push	{r7, lr}
    299a:	b082      	sub	sp, #8
    299c:	af00      	add	r7, sp, #0
    299e:	1c02      	adds	r2, r0, #0
    29a0:	1dfb      	adds	r3, r7, #7
    29a2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    29a4:	46c0      	nop			; (mov r8, r8)
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <system_gclk_gen_enable+0x44>)
    29a8:	4798      	blx	r3
    29aa:	1e03      	subs	r3, r0, #0
    29ac:	d1fb      	bne.n	29a6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    29ae:	4b0c      	ldr	r3, [pc, #48]	; (29e0 <system_gclk_gen_enable+0x48>)
    29b0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29b2:	4a0c      	ldr	r2, [pc, #48]	; (29e4 <system_gclk_gen_enable+0x4c>)
    29b4:	1dfb      	adds	r3, r7, #7
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	4b07      	ldr	r3, [pc, #28]	; (29dc <system_gclk_gen_enable+0x44>)
    29be:	4798      	blx	r3
    29c0:	1e03      	subs	r3, r0, #0
    29c2:	d1fb      	bne.n	29bc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    29c4:	4b08      	ldr	r3, [pc, #32]	; (29e8 <system_gclk_gen_enable+0x50>)
    29c6:	4a08      	ldr	r2, [pc, #32]	; (29e8 <system_gclk_gen_enable+0x50>)
    29c8:	6852      	ldr	r2, [r2, #4]
    29ca:	2180      	movs	r1, #128	; 0x80
    29cc:	0249      	lsls	r1, r1, #9
    29ce:	430a      	orrs	r2, r1
    29d0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    29d2:	4b06      	ldr	r3, [pc, #24]	; (29ec <system_gclk_gen_enable+0x54>)
    29d4:	4798      	blx	r3
}
    29d6:	46bd      	mov	sp, r7
    29d8:	b002      	add	sp, #8
    29da:	bd80      	pop	{r7, pc}
    29dc:	000027a9 	.word	0x000027a9
    29e0:	00002829 	.word	0x00002829
    29e4:	40000c04 	.word	0x40000c04
    29e8:	40000c00 	.word	0x40000c00
    29ec:	00002839 	.word	0x00002839

000029f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b086      	sub	sp, #24
    29f4:	af00      	add	r7, sp, #0
    29f6:	1c02      	adds	r2, r0, #0
    29f8:	1dfb      	adds	r3, r7, #7
    29fa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	4b2e      	ldr	r3, [pc, #184]	; (2ab8 <system_gclk_gen_get_hz+0xc8>)
    2a00:	4798      	blx	r3
    2a02:	1e03      	subs	r3, r0, #0
    2a04:	d1fb      	bne.n	29fe <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2a06:	4b2d      	ldr	r3, [pc, #180]	; (2abc <system_gclk_gen_get_hz+0xcc>)
    2a08:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a0a:	4a2d      	ldr	r2, [pc, #180]	; (2ac0 <system_gclk_gen_get_hz+0xd0>)
    2a0c:	1dfb      	adds	r3, r7, #7
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	4b28      	ldr	r3, [pc, #160]	; (2ab8 <system_gclk_gen_get_hz+0xc8>)
    2a16:	4798      	blx	r3
    2a18:	1e03      	subs	r3, r0, #0
    2a1a:	d1fb      	bne.n	2a14 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2a1c:	4b29      	ldr	r3, [pc, #164]	; (2ac4 <system_gclk_gen_get_hz+0xd4>)
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	0a1b      	lsrs	r3, r3, #8
    2a22:	1c1a      	adds	r2, r3, #0
    2a24:	231f      	movs	r3, #31
    2a26:	4013      	ands	r3, r2
    2a28:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2a2a:	1c18      	adds	r0, r3, #0
    2a2c:	4b26      	ldr	r3, [pc, #152]	; (2ac8 <system_gclk_gen_get_hz+0xd8>)
    2a2e:	4798      	blx	r3
    2a30:	1c03      	adds	r3, r0, #0
    2a32:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a34:	4a22      	ldr	r2, [pc, #136]	; (2ac0 <system_gclk_gen_get_hz+0xd0>)
    2a36:	1dfb      	adds	r3, r7, #7
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2a3c:	4b21      	ldr	r3, [pc, #132]	; (2ac4 <system_gclk_gen_get_hz+0xd4>)
    2a3e:	685b      	ldr	r3, [r3, #4]
    2a40:	0d1b      	lsrs	r3, r3, #20
    2a42:	1c1a      	adds	r2, r3, #0
    2a44:	2301      	movs	r3, #1
    2a46:	4013      	ands	r3, r2
    2a48:	b2da      	uxtb	r2, r3
    2a4a:	2313      	movs	r3, #19
    2a4c:	18fb      	adds	r3, r7, r3
    2a4e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a50:	4a1e      	ldr	r2, [pc, #120]	; (2acc <system_gclk_gen_get_hz+0xdc>)
    2a52:	1dfb      	adds	r3, r7, #7
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2a58:	46c0      	nop			; (mov r8, r8)
    2a5a:	4b17      	ldr	r3, [pc, #92]	; (2ab8 <system_gclk_gen_get_hz+0xc8>)
    2a5c:	4798      	blx	r3
    2a5e:	1e03      	subs	r3, r0, #0
    2a60:	d1fb      	bne.n	2a5a <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2a62:	4b18      	ldr	r3, [pc, #96]	; (2ac4 <system_gclk_gen_get_hz+0xd4>)
    2a64:	689b      	ldr	r3, [r3, #8]
    2a66:	0a1b      	lsrs	r3, r3, #8
    2a68:	1c1a      	adds	r2, r3, #0
    2a6a:	2300      	movs	r3, #0
    2a6c:	439a      	bics	r2, r3
    2a6e:	1c13      	adds	r3, r2, #0
    2a70:	b29b      	uxth	r3, r3
    2a72:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    2a74:	4b16      	ldr	r3, [pc, #88]	; (2ad0 <system_gclk_gen_get_hz+0xe0>)
    2a76:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2a78:	2313      	movs	r3, #19
    2a7a:	18fb      	adds	r3, r7, r3
    2a7c:	781b      	ldrb	r3, [r3, #0]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d109      	bne.n	2a96 <system_gclk_gen_get_hz+0xa6>
    2a82:	68fb      	ldr	r3, [r7, #12]
    2a84:	2b01      	cmp	r3, #1
    2a86:	d906      	bls.n	2a96 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    2a88:	4b12      	ldr	r3, [pc, #72]	; (2ad4 <system_gclk_gen_get_hz+0xe4>)
    2a8a:	6978      	ldr	r0, [r7, #20]
    2a8c:	68f9      	ldr	r1, [r7, #12]
    2a8e:	4798      	blx	r3
    2a90:	1c03      	adds	r3, r0, #0
    2a92:	617b      	str	r3, [r7, #20]
    2a94:	e00a      	b.n	2aac <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    2a96:	2313      	movs	r3, #19
    2a98:	18fb      	adds	r3, r7, r3
    2a9a:	781b      	ldrb	r3, [r3, #0]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d005      	beq.n	2aac <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	3301      	adds	r3, #1
    2aa4:	1c1a      	adds	r2, r3, #0
    2aa6:	697b      	ldr	r3, [r7, #20]
    2aa8:	40d3      	lsrs	r3, r2
    2aaa:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2aac:	697b      	ldr	r3, [r7, #20]
}
    2aae:	1c18      	adds	r0, r3, #0
    2ab0:	46bd      	mov	sp, r7
    2ab2:	b006      	add	sp, #24
    2ab4:	bd80      	pop	{r7, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	000027a9 	.word	0x000027a9
    2abc:	00002829 	.word	0x00002829
    2ac0:	40000c04 	.word	0x40000c04
    2ac4:	40000c00 	.word	0x40000c00
    2ac8:	00002501 	.word	0x00002501
    2acc:	40000c08 	.word	0x40000c08
    2ad0:	00002839 	.word	0x00002839
    2ad4:	00003dd9 	.word	0x00003dd9

00002ad8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b084      	sub	sp, #16
    2adc:	af00      	add	r7, sp, #0
    2ade:	1c02      	adds	r2, r0, #0
    2ae0:	6039      	str	r1, [r7, #0]
    2ae2:	1dfb      	adds	r3, r7, #7
    2ae4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    2ae6:	1dfb      	adds	r3, r7, #7
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	781b      	ldrb	r3, [r3, #0]
    2af0:	021b      	lsls	r3, r3, #8
    2af2:	1c1a      	adds	r2, r3, #0
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	4313      	orrs	r3, r2
    2af8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2afa:	1dfb      	adds	r3, r7, #7
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	1c18      	adds	r0, r3, #0
    2b00:	4b04      	ldr	r3, [pc, #16]	; (2b14 <system_gclk_chan_set_config+0x3c>)
    2b02:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2b04:	4b04      	ldr	r3, [pc, #16]	; (2b18 <system_gclk_chan_set_config+0x40>)
    2b06:	68fa      	ldr	r2, [r7, #12]
    2b08:	b292      	uxth	r2, r2
    2b0a:	805a      	strh	r2, [r3, #2]
}
    2b0c:	46bd      	mov	sp, r7
    2b0e:	b004      	add	sp, #16
    2b10:	bd80      	pop	{r7, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	00002b61 	.word	0x00002b61
    2b18:	40000c00 	.word	0x40000c00

00002b1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b082      	sub	sp, #8
    2b20:	af00      	add	r7, sp, #0
    2b22:	1c02      	adds	r2, r0, #0
    2b24:	1dfb      	adds	r3, r7, #7
    2b26:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2b28:	4b09      	ldr	r3, [pc, #36]	; (2b50 <system_gclk_chan_enable+0x34>)
    2b2a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b2c:	4a09      	ldr	r2, [pc, #36]	; (2b54 <system_gclk_chan_enable+0x38>)
    2b2e:	1dfb      	adds	r3, r7, #7
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2b34:	4908      	ldr	r1, [pc, #32]	; (2b58 <system_gclk_chan_enable+0x3c>)
    2b36:	4b08      	ldr	r3, [pc, #32]	; (2b58 <system_gclk_chan_enable+0x3c>)
    2b38:	885b      	ldrh	r3, [r3, #2]
    2b3a:	b29b      	uxth	r3, r3
    2b3c:	2280      	movs	r2, #128	; 0x80
    2b3e:	01d2      	lsls	r2, r2, #7
    2b40:	4313      	orrs	r3, r2
    2b42:	b29b      	uxth	r3, r3
    2b44:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    2b46:	4b05      	ldr	r3, [pc, #20]	; (2b5c <system_gclk_chan_enable+0x40>)
    2b48:	4798      	blx	r3
}
    2b4a:	46bd      	mov	sp, r7
    2b4c:	b002      	add	sp, #8
    2b4e:	bd80      	pop	{r7, pc}
    2b50:	00002829 	.word	0x00002829
    2b54:	40000c02 	.word	0x40000c02
    2b58:	40000c00 	.word	0x40000c00
    2b5c:	00002839 	.word	0x00002839

00002b60 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2b60:	b580      	push	{r7, lr}
    2b62:	b084      	sub	sp, #16
    2b64:	af00      	add	r7, sp, #0
    2b66:	1c02      	adds	r2, r0, #0
    2b68:	1dfb      	adds	r3, r7, #7
    2b6a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2b6c:	4b1d      	ldr	r3, [pc, #116]	; (2be4 <system_gclk_chan_disable+0x84>)
    2b6e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b70:	4a1d      	ldr	r2, [pc, #116]	; (2be8 <system_gclk_chan_disable+0x88>)
    2b72:	1dfb      	adds	r3, r7, #7
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2b78:	4b1c      	ldr	r3, [pc, #112]	; (2bec <system_gclk_chan_disable+0x8c>)
    2b7a:	885b      	ldrh	r3, [r3, #2]
    2b7c:	b29b      	uxth	r3, r3
    2b7e:	0a1b      	lsrs	r3, r3, #8
    2b80:	1c1a      	adds	r2, r3, #0
    2b82:	230f      	movs	r3, #15
    2b84:	4013      	ands	r3, r2
    2b86:	b2db      	uxtb	r3, r3
    2b88:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2b8a:	4b18      	ldr	r3, [pc, #96]	; (2bec <system_gclk_chan_disable+0x8c>)
    2b8c:	885a      	ldrh	r2, [r3, #2]
    2b8e:	4918      	ldr	r1, [pc, #96]	; (2bf0 <system_gclk_chan_disable+0x90>)
    2b90:	400a      	ands	r2, r1
    2b92:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2b94:	4a15      	ldr	r2, [pc, #84]	; (2bec <system_gclk_chan_disable+0x8c>)
    2b96:	4b15      	ldr	r3, [pc, #84]	; (2bec <system_gclk_chan_disable+0x8c>)
    2b98:	885b      	ldrh	r3, [r3, #2]
    2b9a:	b29b      	uxth	r3, r3
    2b9c:	4915      	ldr	r1, [pc, #84]	; (2bf4 <system_gclk_chan_disable+0x94>)
    2b9e:	400b      	ands	r3, r1
    2ba0:	b29b      	uxth	r3, r3
    2ba2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2ba4:	46c0      	nop			; (mov r8, r8)
    2ba6:	4b11      	ldr	r3, [pc, #68]	; (2bec <system_gclk_chan_disable+0x8c>)
    2ba8:	885b      	ldrh	r3, [r3, #2]
    2baa:	b29b      	uxth	r3, r3
    2bac:	1c1a      	adds	r2, r3, #0
    2bae:	2380      	movs	r3, #128	; 0x80
    2bb0:	01db      	lsls	r3, r3, #7
    2bb2:	4013      	ands	r3, r2
    2bb4:	d1f7      	bne.n	2ba6 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2bb6:	4b0d      	ldr	r3, [pc, #52]	; (2bec <system_gclk_chan_disable+0x8c>)
    2bb8:	68fa      	ldr	r2, [r7, #12]
    2bba:	b2d2      	uxtb	r2, r2
    2bbc:	1c11      	adds	r1, r2, #0
    2bbe:	220f      	movs	r2, #15
    2bc0:	400a      	ands	r2, r1
    2bc2:	b2d2      	uxtb	r2, r2
    2bc4:	1c11      	adds	r1, r2, #0
    2bc6:	220f      	movs	r2, #15
    2bc8:	400a      	ands	r2, r1
    2bca:	0210      	lsls	r0, r2, #8
    2bcc:	885a      	ldrh	r2, [r3, #2]
    2bce:	4908      	ldr	r1, [pc, #32]	; (2bf0 <system_gclk_chan_disable+0x90>)
    2bd0:	400a      	ands	r2, r1
    2bd2:	1c11      	adds	r1, r2, #0
    2bd4:	1c02      	adds	r2, r0, #0
    2bd6:	430a      	orrs	r2, r1
    2bd8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    2bda:	4b07      	ldr	r3, [pc, #28]	; (2bf8 <system_gclk_chan_disable+0x98>)
    2bdc:	4798      	blx	r3
}
    2bde:	46bd      	mov	sp, r7
    2be0:	b004      	add	sp, #16
    2be2:	bd80      	pop	{r7, pc}
    2be4:	00002829 	.word	0x00002829
    2be8:	40000c02 	.word	0x40000c02
    2bec:	40000c00 	.word	0x40000c00
    2bf0:	fffff0ff 	.word	0xfffff0ff
    2bf4:	ffffbfff 	.word	0xffffbfff
    2bf8:	00002839 	.word	0x00002839

00002bfc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b084      	sub	sp, #16
    2c00:	af00      	add	r7, sp, #0
    2c02:	1c02      	adds	r2, r0, #0
    2c04:	1dfb      	adds	r3, r7, #7
    2c06:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2c08:	4b0e      	ldr	r3, [pc, #56]	; (2c44 <system_gclk_chan_get_hz+0x48>)
    2c0a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c0c:	4a0e      	ldr	r2, [pc, #56]	; (2c48 <system_gclk_chan_get_hz+0x4c>)
    2c0e:	1dfb      	adds	r3, r7, #7
    2c10:	781b      	ldrb	r3, [r3, #0]
    2c12:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2c14:	4b0d      	ldr	r3, [pc, #52]	; (2c4c <system_gclk_chan_get_hz+0x50>)
    2c16:	885b      	ldrh	r3, [r3, #2]
    2c18:	b29b      	uxth	r3, r3
    2c1a:	0a1b      	lsrs	r3, r3, #8
    2c1c:	1c1a      	adds	r2, r3, #0
    2c1e:	230f      	movs	r3, #15
    2c20:	4013      	ands	r3, r2
    2c22:	b2da      	uxtb	r2, r3
    2c24:	230f      	movs	r3, #15
    2c26:	18fb      	adds	r3, r7, r3
    2c28:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    2c2a:	4b09      	ldr	r3, [pc, #36]	; (2c50 <system_gclk_chan_get_hz+0x54>)
    2c2c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2c2e:	230f      	movs	r3, #15
    2c30:	18fb      	adds	r3, r7, r3
    2c32:	781b      	ldrb	r3, [r3, #0]
    2c34:	1c18      	adds	r0, r3, #0
    2c36:	4b07      	ldr	r3, [pc, #28]	; (2c54 <system_gclk_chan_get_hz+0x58>)
    2c38:	4798      	blx	r3
    2c3a:	1c03      	adds	r3, r0, #0
}
    2c3c:	1c18      	adds	r0, r3, #0
    2c3e:	46bd      	mov	sp, r7
    2c40:	b004      	add	sp, #16
    2c42:	bd80      	pop	{r7, pc}
    2c44:	00002829 	.word	0x00002829
    2c48:	40000c02 	.word	0x40000c02
    2c4c:	40000c00 	.word	0x40000c00
    2c50:	00002839 	.word	0x00002839
    2c54:	000029f1 	.word	0x000029f1

00002c58 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b084      	sub	sp, #16
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	1c02      	adds	r2, r0, #0
    2c60:	1dfb      	adds	r3, r7, #7
    2c62:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2c64:	230f      	movs	r3, #15
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	1dfa      	adds	r2, r7, #7
    2c6a:	7812      	ldrb	r2, [r2, #0]
    2c6c:	09d2      	lsrs	r2, r2, #7
    2c6e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2c70:	230e      	movs	r3, #14
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	1dfa      	adds	r2, r7, #7
    2c76:	7812      	ldrb	r2, [r2, #0]
    2c78:	0952      	lsrs	r2, r2, #5
    2c7a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2c7c:	4b0d      	ldr	r3, [pc, #52]	; (2cb4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2c7e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2c80:	230f      	movs	r3, #15
    2c82:	18fb      	adds	r3, r7, r3
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d10f      	bne.n	2caa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2c8a:	230f      	movs	r3, #15
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	781b      	ldrb	r3, [r3, #0]
    2c90:	009b      	lsls	r3, r3, #2
    2c92:	2210      	movs	r2, #16
    2c94:	4694      	mov	ip, r2
    2c96:	44bc      	add	ip, r7
    2c98:	4463      	add	r3, ip
    2c9a:	3b08      	subs	r3, #8
    2c9c:	681a      	ldr	r2, [r3, #0]
    2c9e:	230e      	movs	r3, #14
    2ca0:	18fb      	adds	r3, r7, r3
    2ca2:	781b      	ldrb	r3, [r3, #0]
    2ca4:	01db      	lsls	r3, r3, #7
    2ca6:	18d3      	adds	r3, r2, r3
    2ca8:	e000      	b.n	2cac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2caa:	2300      	movs	r3, #0
	}
}
    2cac:	1c18      	adds	r0, r3, #0
    2cae:	46bd      	mov	sp, r7
    2cb0:	b004      	add	sp, #16
    2cb2:	bd80      	pop	{r7, pc}
    2cb4:	41004400 	.word	0x41004400

00002cb8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b088      	sub	sp, #32
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	60f8      	str	r0, [r7, #12]
    2cc0:	60b9      	str	r1, [r7, #8]
    2cc2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2cc4:	2300      	movs	r3, #0
    2cc6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2cc8:	687b      	ldr	r3, [r7, #4]
    2cca:	78db      	ldrb	r3, [r3, #3]
    2ccc:	2201      	movs	r2, #1
    2cce:	4053      	eors	r3, r2
    2cd0:	b2db      	uxtb	r3, r3
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d035      	beq.n	2d42 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	2b80      	cmp	r3, #128	; 0x80
    2cdc:	d00b      	beq.n	2cf6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2cde:	69fb      	ldr	r3, [r7, #28]
    2ce0:	2280      	movs	r2, #128	; 0x80
    2ce2:	0252      	lsls	r2, r2, #9
    2ce4:	4313      	orrs	r3, r2
    2ce6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	781b      	ldrb	r3, [r3, #0]
    2cec:	061b      	lsls	r3, r3, #24
    2cee:	1c1a      	adds	r2, r3, #0
    2cf0:	69fb      	ldr	r3, [r7, #28]
    2cf2:	4313      	orrs	r3, r2
    2cf4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	785b      	ldrb	r3, [r3, #1]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d003      	beq.n	2d06 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2cfe:	687b      	ldr	r3, [r7, #4]
    2d00:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2d02:	2b02      	cmp	r3, #2
    2d04:	d110      	bne.n	2d28 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2d06:	69fb      	ldr	r3, [r7, #28]
    2d08:	2280      	movs	r2, #128	; 0x80
    2d0a:	0292      	lsls	r2, r2, #10
    2d0c:	4313      	orrs	r3, r2
    2d0e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2d10:	687b      	ldr	r3, [r7, #4]
    2d12:	789b      	ldrb	r3, [r3, #2]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d004      	beq.n	2d22 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2d18:	69fb      	ldr	r3, [r7, #28]
    2d1a:	2280      	movs	r2, #128	; 0x80
    2d1c:	02d2      	lsls	r2, r2, #11
    2d1e:	4313      	orrs	r3, r2
    2d20:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2d22:	68fb      	ldr	r3, [r7, #12]
    2d24:	68ba      	ldr	r2, [r7, #8]
    2d26:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	785b      	ldrb	r3, [r3, #1]
    2d2c:	2b01      	cmp	r3, #1
    2d2e:	d003      	beq.n	2d38 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d34:	2b02      	cmp	r3, #2
    2d36:	d107      	bne.n	2d48 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2d38:	69fb      	ldr	r3, [r7, #28]
    2d3a:	4a21      	ldr	r2, [pc, #132]	; (2dc0 <_system_pinmux_config+0x108>)
    2d3c:	4013      	ands	r3, r2
    2d3e:	61fb      	str	r3, [r7, #28]
    2d40:	e002      	b.n	2d48 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	68ba      	ldr	r2, [r7, #8]
    2d46:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d48:	68bb      	ldr	r3, [r7, #8]
    2d4a:	041b      	lsls	r3, r3, #16
    2d4c:	0c1b      	lsrs	r3, r3, #16
    2d4e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d50:	68bb      	ldr	r3, [r7, #8]
    2d52:	0c1b      	lsrs	r3, r3, #16
    2d54:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d56:	69ba      	ldr	r2, [r7, #24]
    2d58:	69fb      	ldr	r3, [r7, #28]
    2d5a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d5c:	22a0      	movs	r2, #160	; 0xa0
    2d5e:	05d2      	lsls	r2, r2, #23
    2d60:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d62:	68fb      	ldr	r3, [r7, #12]
    2d64:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d66:	697a      	ldr	r2, [r7, #20]
    2d68:	69fb      	ldr	r3, [r7, #28]
    2d6a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d6c:	22d0      	movs	r2, #208	; 0xd0
    2d6e:	0612      	lsls	r2, r2, #24
    2d70:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d72:	68fb      	ldr	r3, [r7, #12]
    2d74:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d76:	687b      	ldr	r3, [r7, #4]
    2d78:	78db      	ldrb	r3, [r3, #3]
    2d7a:	2201      	movs	r2, #1
    2d7c:	4053      	eors	r3, r2
    2d7e:	b2db      	uxtb	r3, r3
    2d80:	2b00      	cmp	r3, #0
    2d82:	d01a      	beq.n	2dba <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2d84:	69fa      	ldr	r2, [r7, #28]
    2d86:	2380      	movs	r3, #128	; 0x80
    2d88:	02db      	lsls	r3, r3, #11
    2d8a:	4013      	ands	r3, r2
    2d8c:	d00a      	beq.n	2da4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	789b      	ldrb	r3, [r3, #2]
    2d92:	2b01      	cmp	r3, #1
    2d94:	d103      	bne.n	2d9e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2d96:	68fb      	ldr	r3, [r7, #12]
    2d98:	68ba      	ldr	r2, [r7, #8]
    2d9a:	619a      	str	r2, [r3, #24]
    2d9c:	e002      	b.n	2da4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2d9e:	68fb      	ldr	r3, [r7, #12]
    2da0:	68ba      	ldr	r2, [r7, #8]
    2da2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	785b      	ldrb	r3, [r3, #1]
    2da8:	2b01      	cmp	r3, #1
    2daa:	d003      	beq.n	2db4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2db0:	2b02      	cmp	r3, #2
    2db2:	d102      	bne.n	2dba <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2db4:	68fb      	ldr	r3, [r7, #12]
    2db6:	68ba      	ldr	r2, [r7, #8]
    2db8:	609a      	str	r2, [r3, #8]
		}
	}
}
    2dba:	46bd      	mov	sp, r7
    2dbc:	b008      	add	sp, #32
    2dbe:	bd80      	pop	{r7, pc}
    2dc0:	fffbffff 	.word	0xfffbffff

00002dc4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	b084      	sub	sp, #16
    2dc8:	af00      	add	r7, sp, #0
    2dca:	1c02      	adds	r2, r0, #0
    2dcc:	6039      	str	r1, [r7, #0]
    2dce:	1dfb      	adds	r3, r7, #7
    2dd0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2dd2:	1dfb      	adds	r3, r7, #7
    2dd4:	781b      	ldrb	r3, [r3, #0]
    2dd6:	1c18      	adds	r0, r3, #0
    2dd8:	4b0b      	ldr	r3, [pc, #44]	; (2e08 <system_pinmux_pin_set_config+0x44>)
    2dda:	4798      	blx	r3
    2ddc:	1c03      	adds	r3, r0, #0
    2dde:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2de0:	1dfb      	adds	r3, r7, #7
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	221f      	movs	r2, #31
    2de6:	4013      	ands	r3, r2
    2de8:	2201      	movs	r2, #1
    2dea:	409a      	lsls	r2, r3
    2dec:	1c13      	adds	r3, r2, #0
    2dee:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2df0:	68f9      	ldr	r1, [r7, #12]
    2df2:	68ba      	ldr	r2, [r7, #8]
    2df4:	683b      	ldr	r3, [r7, #0]
    2df6:	1c08      	adds	r0, r1, #0
    2df8:	1c11      	adds	r1, r2, #0
    2dfa:	1c1a      	adds	r2, r3, #0
    2dfc:	4b03      	ldr	r3, [pc, #12]	; (2e0c <system_pinmux_pin_set_config+0x48>)
    2dfe:	4798      	blx	r3
}
    2e00:	46bd      	mov	sp, r7
    2e02:	b004      	add	sp, #16
    2e04:	bd80      	pop	{r7, pc}
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	00002c59 	.word	0x00002c59
    2e0c:	00002cb9 	.word	0x00002cb9

00002e10 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	af00      	add	r7, sp, #0
	return;
    2e14:	46c0      	nop			; (mov r8, r8)
}
    2e16:	46bd      	mov	sp, r7
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)

00002e1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2e1c:	b580      	push	{r7, lr}
    2e1e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2e20:	4b04      	ldr	r3, [pc, #16]	; (2e34 <system_init+0x18>)
    2e22:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2e24:	4b04      	ldr	r3, [pc, #16]	; (2e38 <system_init+0x1c>)
    2e26:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2e28:	4b04      	ldr	r3, [pc, #16]	; (2e3c <system_init+0x20>)
    2e2a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2e2c:	4b04      	ldr	r3, [pc, #16]	; (2e40 <system_init+0x24>)
    2e2e:	4798      	blx	r3
}
    2e30:	46bd      	mov	sp, r7
    2e32:	bd80      	pop	{r7, pc}
    2e34:	000026e5 	.word	0x000026e5
    2e38:	000022dd 	.word	0x000022dd
    2e3c:	00002e11 	.word	0x00002e11
    2e40:	00002e11 	.word	0x00002e11

00002e44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2e44:	b580      	push	{r7, lr}
    2e46:	b082      	sub	sp, #8
    2e48:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    2e4a:	4b16      	ldr	r3, [pc, #88]	; (2ea4 <Reset_Handler+0x60>)
    2e4c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    2e4e:	4b16      	ldr	r3, [pc, #88]	; (2ea8 <Reset_Handler+0x64>)
    2e50:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2e52:	687a      	ldr	r2, [r7, #4]
    2e54:	683b      	ldr	r3, [r7, #0]
    2e56:	429a      	cmp	r2, r3
    2e58:	d00c      	beq.n	2e74 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    2e5a:	e007      	b.n	2e6c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    2e5c:	683b      	ldr	r3, [r7, #0]
    2e5e:	1d1a      	adds	r2, r3, #4
    2e60:	603a      	str	r2, [r7, #0]
    2e62:	687a      	ldr	r2, [r7, #4]
    2e64:	1d11      	adds	r1, r2, #4
    2e66:	6079      	str	r1, [r7, #4]
    2e68:	6812      	ldr	r2, [r2, #0]
    2e6a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2e6c:	683a      	ldr	r2, [r7, #0]
    2e6e:	4b0f      	ldr	r3, [pc, #60]	; (2eac <Reset_Handler+0x68>)
    2e70:	429a      	cmp	r2, r3
    2e72:	d3f3      	bcc.n	2e5c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2e74:	4b0e      	ldr	r3, [pc, #56]	; (2eb0 <Reset_Handler+0x6c>)
    2e76:	603b      	str	r3, [r7, #0]
    2e78:	e004      	b.n	2e84 <Reset_Handler+0x40>
                *pDest++ = 0;
    2e7a:	683b      	ldr	r3, [r7, #0]
    2e7c:	1d1a      	adds	r2, r3, #4
    2e7e:	603a      	str	r2, [r7, #0]
    2e80:	2200      	movs	r2, #0
    2e82:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2e84:	683a      	ldr	r2, [r7, #0]
    2e86:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <Reset_Handler+0x70>)
    2e88:	429a      	cmp	r2, r3
    2e8a:	d3f6      	bcc.n	2e7a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2e8c:	4b0a      	ldr	r3, [pc, #40]	; (2eb8 <Reset_Handler+0x74>)
    2e8e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e90:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <Reset_Handler+0x78>)
    2e92:	687a      	ldr	r2, [r7, #4]
    2e94:	217f      	movs	r1, #127	; 0x7f
    2e96:	438a      	bics	r2, r1
    2e98:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    2e9a:	4b09      	ldr	r3, [pc, #36]	; (2ec0 <Reset_Handler+0x7c>)
    2e9c:	4798      	blx	r3

        /* Branch to main function */
        main();
    2e9e:	4b09      	ldr	r3, [pc, #36]	; (2ec4 <Reset_Handler+0x80>)
    2ea0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2ea2:	e7fe      	b.n	2ea2 <Reset_Handler+0x5e>
    2ea4:	0000784c 	.word	0x0000784c
    2ea8:	20000000 	.word	0x20000000
    2eac:	20000078 	.word	0x20000078
    2eb0:	20000078 	.word	0x20000078
    2eb4:	200001fc 	.word	0x200001fc
    2eb8:	00000000 	.word	0x00000000
    2ebc:	e000ed00 	.word	0xe000ed00
    2ec0:	00006481 	.word	0x00006481
    2ec4:	00003799 	.word	0x00003799

00002ec8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ec8:	b580      	push	{r7, lr}
    2eca:	af00      	add	r7, sp, #0
        while (1) {
        }
    2ecc:	e7fe      	b.n	2ecc <Dummy_Handler+0x4>
    2ece:	46c0      	nop			; (mov r8, r8)

00002ed0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2ed8:	4b0a      	ldr	r3, [pc, #40]	; (2f04 <_sbrk+0x34>)
    2eda:	681b      	ldr	r3, [r3, #0]
    2edc:	2b00      	cmp	r3, #0
    2ede:	d102      	bne.n	2ee6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2ee0:	4b08      	ldr	r3, [pc, #32]	; (2f04 <_sbrk+0x34>)
    2ee2:	4a09      	ldr	r2, [pc, #36]	; (2f08 <_sbrk+0x38>)
    2ee4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2ee6:	4b07      	ldr	r3, [pc, #28]	; (2f04 <_sbrk+0x34>)
    2ee8:	681b      	ldr	r3, [r3, #0]
    2eea:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2eec:	4b05      	ldr	r3, [pc, #20]	; (2f04 <_sbrk+0x34>)
    2eee:	681a      	ldr	r2, [r3, #0]
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	18d2      	adds	r2, r2, r3
    2ef4:	4b03      	ldr	r3, [pc, #12]	; (2f04 <_sbrk+0x34>)
    2ef6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    2ef8:	68fb      	ldr	r3, [r7, #12]
}
    2efa:	1c18      	adds	r0, r3, #0
    2efc:	46bd      	mov	sp, r7
    2efe:	b004      	add	sp, #16
    2f00:	bd80      	pop	{r7, pc}
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	20000158 	.word	0x20000158
    2f08:	20002200 	.word	0x20002200

00002f0c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    2f0c:	b580      	push	{r7, lr}
    2f0e:	b082      	sub	sp, #8
    2f10:	af00      	add	r7, sp, #0
    2f12:	6078      	str	r0, [r7, #4]
	return -1;
    2f14:	2301      	movs	r3, #1
    2f16:	425b      	negs	r3, r3
}
    2f18:	1c18      	adds	r0, r3, #0
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b002      	add	sp, #8
    2f1e:	bd80      	pop	{r7, pc}

00002f20 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b082      	sub	sp, #8
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
    2f28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	2280      	movs	r2, #128	; 0x80
    2f2e:	0192      	lsls	r2, r2, #6
    2f30:	605a      	str	r2, [r3, #4]

	return 0;
    2f32:	2300      	movs	r3, #0
}
    2f34:	1c18      	adds	r0, r3, #0
    2f36:	46bd      	mov	sp, r7
    2f38:	b002      	add	sp, #8
    2f3a:	bd80      	pop	{r7, pc}

00002f3c <_isatty>:

extern int _isatty(int file)
{
    2f3c:	b580      	push	{r7, lr}
    2f3e:	b082      	sub	sp, #8
    2f40:	af00      	add	r7, sp, #0
    2f42:	6078      	str	r0, [r7, #4]
	return 1;
    2f44:	2301      	movs	r3, #1
}
    2f46:	1c18      	adds	r0, r3, #0
    2f48:	46bd      	mov	sp, r7
    2f4a:	b002      	add	sp, #8
    2f4c:	bd80      	pop	{r7, pc}
    2f4e:	46c0      	nop			; (mov r8, r8)

00002f50 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b084      	sub	sp, #16
    2f54:	af00      	add	r7, sp, #0
    2f56:	60f8      	str	r0, [r7, #12]
    2f58:	60b9      	str	r1, [r7, #8]
    2f5a:	607a      	str	r2, [r7, #4]
	return 0;
    2f5c:	2300      	movs	r3, #0
}
    2f5e:	1c18      	adds	r0, r3, #0
    2f60:	46bd      	mov	sp, r7
    2f62:	b004      	add	sp, #16
    2f64:	bd80      	pop	{r7, pc}
    2f66:	46c0      	nop			; (mov r8, r8)

00002f68 <HMC5883L_init>:
	CURRENT SETTINGS:
	15HZ default measurement rate
	Gain = 5
	Single Measurement Mode
*/
void HMC5883L_init(void){
    2f68:	b590      	push	{r4, r7, lr}
    2f6a:	b087      	sub	sp, #28
    2f6c:	af00      	add	r7, sp, #0

	static uint8_t write_buffer_2[2] = {
		0x01, 0xA0
	};
	
	struct i2c_master_packet write_packet_1 = {
    2f6e:	230c      	movs	r3, #12
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	4a09      	ldr	r2, [pc, #36]	; (2f98 <HMC5883L_init+0x30>)
    2f74:	ca13      	ldmia	r2!, {r0, r1, r4}
    2f76:	c313      	stmia	r3!, {r0, r1, r4}
		.data        = write_buffer_1,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	struct i2c_master_packet write_packet_2 = {
    2f78:	1c3b      	adds	r3, r7, #0
    2f7a:	4a08      	ldr	r2, [pc, #32]	; (2f9c <HMC5883L_init+0x34>)
    2f7c:	ca13      	ldmia	r2!, {r0, r1, r4}
    2f7e:	c313      	stmia	r3!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	i2c_write_command(&write_packet_1);
    2f80:	230c      	movs	r3, #12
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	1c18      	adds	r0, r3, #0
    2f86:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <HMC5883L_init+0x38>)
    2f88:	4798      	blx	r3
	i2c_write_command(&write_packet_2);
    2f8a:	1c3b      	adds	r3, r7, #0
    2f8c:	1c18      	adds	r0, r3, #0
    2f8e:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <HMC5883L_init+0x38>)
    2f90:	4798      	blx	r3
}
    2f92:	46bd      	mov	sp, r7
    2f94:	b007      	add	sp, #28
    2f96:	bd90      	pop	{r4, r7, pc}
    2f98:	00007564 	.word	0x00007564
    2f9c:	00007570 	.word	0x00007570
    2fa0:	00003435 	.word	0x00003435

00002fa4 <HMC5883L_read>:

/*
	Given an input buffer to read into (6 BYTES IN LENGTH MINIMUM) read from the x,y,z LSB and MSB registers
	on the HMC5883L magnetometer in single measurement mode
*/
void HMC5883L_read(uint8_t* read_buffer){
    2fa4:	b590      	push	{r4, r7, lr}
    2fa6:	b089      	sub	sp, #36	; 0x24
    2fa8:	af00      	add	r7, sp, #0
    2faa:	6078      	str	r0, [r7, #4]
	struct i2c_master_packet read_packet = {
    2fac:	2314      	movs	r3, #20
    2fae:	18fb      	adds	r3, r7, r3
    2fb0:	221e      	movs	r2, #30
    2fb2:	801a      	strh	r2, [r3, #0]
    2fb4:	2314      	movs	r3, #20
    2fb6:	18fb      	adds	r3, r7, r3
    2fb8:	2206      	movs	r2, #6
    2fba:	805a      	strh	r2, [r3, #2]
    2fbc:	2314      	movs	r3, #20
    2fbe:	18fb      	adds	r3, r7, r3
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	605a      	str	r2, [r3, #4]
    2fc4:	2314      	movs	r3, #20
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	2200      	movs	r2, #0
    2fca:	721a      	strb	r2, [r3, #8]
    2fcc:	2314      	movs	r3, #20
    2fce:	18fb      	adds	r3, r7, r3
    2fd0:	2200      	movs	r2, #0
    2fd2:	725a      	strb	r2, [r3, #9]
    2fd4:	2314      	movs	r3, #20
    2fd6:	18fb      	adds	r3, r7, r3
    2fd8:	2200      	movs	r2, #0
    2fda:	729a      	strb	r2, [r3, #10]
	
	static uint8_t write_buffer[2] = {
		0x02, 0x01
	};
	
	struct i2c_master_packet write_packet = {
    2fdc:	2308      	movs	r3, #8
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	4a07      	ldr	r2, [pc, #28]	; (3000 <HMC5883L_read+0x5c>)
    2fe2:	ca13      	ldmia	r2!, {r0, r1, r4}
    2fe4:	c313      	stmia	r3!, {r0, r1, r4}
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	
	i2c_write_command(&write_packet);
    2fe6:	2308      	movs	r3, #8
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	1c18      	adds	r0, r3, #0
    2fec:	4b05      	ldr	r3, [pc, #20]	; (3004 <HMC5883L_read+0x60>)
    2fee:	4798      	blx	r3
	i2c_read_command(&read_packet);
    2ff0:	2314      	movs	r3, #20
    2ff2:	18fb      	adds	r3, r7, r3
    2ff4:	1c18      	adds	r0, r3, #0
    2ff6:	4b04      	ldr	r3, [pc, #16]	; (3008 <HMC5883L_read+0x64>)
    2ff8:	4798      	blx	r3
}
    2ffa:	46bd      	mov	sp, r7
    2ffc:	b009      	add	sp, #36	; 0x24
    2ffe:	bd90      	pop	{r4, r7, pc}
    3000:	0000757c 	.word	0x0000757c
    3004:	00003435 	.word	0x00003435
    3008:	00003459 	.word	0x00003459

0000300c <getXYZ>:

//Converts the raw data from sensor into xyz coordinates in milligauss.
//xyzBuffer must be of length 3 and will be populated with xyz.
void getXYZ(uint8_t* readBuffer, int16_t* xyzBuffer) {
    300c:	b580      	push	{r7, lr}
    300e:	b084      	sub	sp, #16
    3010:	af00      	add	r7, sp, #0
    3012:	6078      	str	r0, [r7, #4]
    3014:	6039      	str	r1, [r7, #0]
	uint16_t x = ((uint16_t)readBuffer[0] << 8) | readBuffer[1];
    3016:	687b      	ldr	r3, [r7, #4]
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	021b      	lsls	r3, r3, #8
    301c:	b29a      	uxth	r2, r3
    301e:	687b      	ldr	r3, [r7, #4]
    3020:	3301      	adds	r3, #1
    3022:	781b      	ldrb	r3, [r3, #0]
    3024:	b29b      	uxth	r3, r3
    3026:	4313      	orrs	r3, r2
    3028:	b29a      	uxth	r2, r3
    302a:	230e      	movs	r3, #14
    302c:	18fb      	adds	r3, r7, r3
    302e:	801a      	strh	r2, [r3, #0]
	uint16_t y = ((uint16_t)readBuffer[2] << 8) | readBuffer[3];
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	3302      	adds	r3, #2
    3034:	781b      	ldrb	r3, [r3, #0]
    3036:	021b      	lsls	r3, r3, #8
    3038:	b29a      	uxth	r2, r3
    303a:	687b      	ldr	r3, [r7, #4]
    303c:	3303      	adds	r3, #3
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	b29b      	uxth	r3, r3
    3042:	4313      	orrs	r3, r2
    3044:	b29a      	uxth	r2, r3
    3046:	230c      	movs	r3, #12
    3048:	18fb      	adds	r3, r7, r3
    304a:	801a      	strh	r2, [r3, #0]
	uint16_t z = ((uint16_t)readBuffer[4] << 8) | readBuffer[5];
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	3304      	adds	r3, #4
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	021b      	lsls	r3, r3, #8
    3054:	b29a      	uxth	r2, r3
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	3305      	adds	r3, #5
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	b29b      	uxth	r3, r3
    305e:	4313      	orrs	r3, r2
    3060:	b29a      	uxth	r2, r3
    3062:	230a      	movs	r3, #10
    3064:	18fb      	adds	r3, r7, r3
    3066:	801a      	strh	r2, [r3, #0]
	xyzBuffer[0] = (int16_t) x;
    3068:	230e      	movs	r3, #14
    306a:	18fb      	adds	r3, r7, r3
    306c:	881a      	ldrh	r2, [r3, #0]
    306e:	683b      	ldr	r3, [r7, #0]
    3070:	801a      	strh	r2, [r3, #0]
	xyzBuffer[1] = (int16_t) y;
    3072:	683b      	ldr	r3, [r7, #0]
    3074:	3302      	adds	r3, #2
    3076:	220c      	movs	r2, #12
    3078:	18ba      	adds	r2, r7, r2
    307a:	8812      	ldrh	r2, [r2, #0]
    307c:	801a      	strh	r2, [r3, #0]
	xyzBuffer[2] = (int16_t) z;
    307e:	683b      	ldr	r3, [r7, #0]
    3080:	3304      	adds	r3, #4
    3082:	220a      	movs	r2, #10
    3084:	18ba      	adds	r2, r7, r2
    3086:	8812      	ldrh	r2, [r2, #0]
    3088:	801a      	strh	r2, [r3, #0]
}
    308a:	46bd      	mov	sp, r7
    308c:	b004      	add	sp, #16
    308e:	bd80      	pop	{r7, pc}

00003090 <computeCompassDir>:

float computeCompassDir(int16_t x, int16_t y, int16_t z) {
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
    3092:	b087      	sub	sp, #28
    3094:	af00      	add	r7, sp, #0
    3096:	1c04      	adds	r4, r0, #0
    3098:	1c08      	adds	r0, r1, #0
    309a:	1c11      	adds	r1, r2, #0
    309c:	1dbb      	adds	r3, r7, #6
    309e:	1c22      	adds	r2, r4, #0
    30a0:	801a      	strh	r2, [r3, #0]
    30a2:	1d3b      	adds	r3, r7, #4
    30a4:	1c02      	adds	r2, r0, #0
    30a6:	801a      	strh	r2, [r3, #0]
    30a8:	1cbb      	adds	r3, r7, #2
    30aa:	1c0a      	adds	r2, r1, #0
    30ac:	801a      	strh	r2, [r3, #0]
	float heading = atan2(y, x);
    30ae:	1d3b      	adds	r3, r7, #4
    30b0:	2200      	movs	r2, #0
    30b2:	5e9a      	ldrsh	r2, [r3, r2]
    30b4:	4b3f      	ldr	r3, [pc, #252]	; (31b4 <computeCompassDir+0x124>)
    30b6:	1c10      	adds	r0, r2, #0
    30b8:	4798      	blx	r3
    30ba:	1c05      	adds	r5, r0, #0
    30bc:	1c0e      	adds	r6, r1, #0
    30be:	1dbb      	adds	r3, r7, #6
    30c0:	2200      	movs	r2, #0
    30c2:	5e9a      	ldrsh	r2, [r3, r2]
    30c4:	4b3b      	ldr	r3, [pc, #236]	; (31b4 <computeCompassDir+0x124>)
    30c6:	1c10      	adds	r0, r2, #0
    30c8:	4798      	blx	r3
    30ca:	1c03      	adds	r3, r0, #0
    30cc:	1c0c      	adds	r4, r1, #0
    30ce:	1c28      	adds	r0, r5, #0
    30d0:	1c31      	adds	r1, r6, #0
    30d2:	1c1a      	adds	r2, r3, #0
    30d4:	1c23      	adds	r3, r4, #0
    30d6:	4c38      	ldr	r4, [pc, #224]	; (31b8 <computeCompassDir+0x128>)
    30d8:	47a0      	blx	r4
    30da:	1c0a      	adds	r2, r1, #0
    30dc:	1c01      	adds	r1, r0, #0
    30de:	4b37      	ldr	r3, [pc, #220]	; (31bc <computeCompassDir+0x12c>)
    30e0:	1c08      	adds	r0, r1, #0
    30e2:	1c11      	adds	r1, r2, #0
    30e4:	4798      	blx	r3
    30e6:	1c03      	adds	r3, r0, #0
    30e8:	617b      	str	r3, [r7, #20]
	float declinationAngle = 0.244346;
    30ea:	4b35      	ldr	r3, [pc, #212]	; (31c0 <computeCompassDir+0x130>)
    30ec:	613b      	str	r3, [r7, #16]
	heading += declinationAngle;
    30ee:	4b35      	ldr	r3, [pc, #212]	; (31c4 <computeCompassDir+0x134>)
    30f0:	6978      	ldr	r0, [r7, #20]
    30f2:	6939      	ldr	r1, [r7, #16]
    30f4:	4798      	blx	r3
    30f6:	1c03      	adds	r3, r0, #0
    30f8:	617b      	str	r3, [r7, #20]
	// Correct for when signs are reversed.
	if(heading < 0) {
    30fa:	4b33      	ldr	r3, [pc, #204]	; (31c8 <computeCompassDir+0x138>)
    30fc:	6978      	ldr	r0, [r7, #20]
    30fe:	2100      	movs	r1, #0
    3100:	4798      	blx	r3
    3102:	1e03      	subs	r3, r0, #0
    3104:	d014      	beq.n	3130 <computeCompassDir+0xa0>
		heading += 2*M_PI;	
    3106:	4b31      	ldr	r3, [pc, #196]	; (31cc <computeCompassDir+0x13c>)
    3108:	6978      	ldr	r0, [r7, #20]
    310a:	4798      	blx	r3
    310c:	1c02      	adds	r2, r0, #0
    310e:	1c0b      	adds	r3, r1, #0
    3110:	4c2f      	ldr	r4, [pc, #188]	; (31d0 <computeCompassDir+0x140>)
    3112:	1c10      	adds	r0, r2, #0
    3114:	1c19      	adds	r1, r3, #0
    3116:	4a2f      	ldr	r2, [pc, #188]	; (31d4 <computeCompassDir+0x144>)
    3118:	4b2f      	ldr	r3, [pc, #188]	; (31d8 <computeCompassDir+0x148>)
    311a:	47a0      	blx	r4
    311c:	1c03      	adds	r3, r0, #0
    311e:	1c0c      	adds	r4, r1, #0
    3120:	1c19      	adds	r1, r3, #0
    3122:	1c22      	adds	r2, r4, #0
    3124:	4b25      	ldr	r3, [pc, #148]	; (31bc <computeCompassDir+0x12c>)
    3126:	1c08      	adds	r0, r1, #0
    3128:	1c11      	adds	r1, r2, #0
    312a:	4798      	blx	r3
    312c:	1c03      	adds	r3, r0, #0
    312e:	617b      	str	r3, [r7, #20]
	}	

	// Check for wrap due to addition of declination.
	if(heading > 2*M_PI) {
    3130:	4b26      	ldr	r3, [pc, #152]	; (31cc <computeCompassDir+0x13c>)
    3132:	6978      	ldr	r0, [r7, #20]
    3134:	4798      	blx	r3
    3136:	1c02      	adds	r2, r0, #0
    3138:	1c0b      	adds	r3, r1, #0
    313a:	4c28      	ldr	r4, [pc, #160]	; (31dc <computeCompassDir+0x14c>)
    313c:	1c10      	adds	r0, r2, #0
    313e:	1c19      	adds	r1, r3, #0
    3140:	4a24      	ldr	r2, [pc, #144]	; (31d4 <computeCompassDir+0x144>)
    3142:	4b25      	ldr	r3, [pc, #148]	; (31d8 <computeCompassDir+0x148>)
    3144:	47a0      	blx	r4
    3146:	1e03      	subs	r3, r0, #0
    3148:	d014      	beq.n	3174 <computeCompassDir+0xe4>
		heading -= 2*M_PI;	
    314a:	4b20      	ldr	r3, [pc, #128]	; (31cc <computeCompassDir+0x13c>)
    314c:	6978      	ldr	r0, [r7, #20]
    314e:	4798      	blx	r3
    3150:	1c02      	adds	r2, r0, #0
    3152:	1c0b      	adds	r3, r1, #0
    3154:	4c22      	ldr	r4, [pc, #136]	; (31e0 <computeCompassDir+0x150>)
    3156:	1c10      	adds	r0, r2, #0
    3158:	1c19      	adds	r1, r3, #0
    315a:	4a1e      	ldr	r2, [pc, #120]	; (31d4 <computeCompassDir+0x144>)
    315c:	4b1e      	ldr	r3, [pc, #120]	; (31d8 <computeCompassDir+0x148>)
    315e:	47a0      	blx	r4
    3160:	1c03      	adds	r3, r0, #0
    3162:	1c0c      	adds	r4, r1, #0
    3164:	1c19      	adds	r1, r3, #0
    3166:	1c22      	adds	r2, r4, #0
    3168:	4b14      	ldr	r3, [pc, #80]	; (31bc <computeCompassDir+0x12c>)
    316a:	1c08      	adds	r0, r1, #0
    316c:	1c11      	adds	r1, r2, #0
    316e:	4798      	blx	r3
    3170:	1c03      	adds	r3, r0, #0
    3172:	617b      	str	r3, [r7, #20]
	}	
	float headingDegrees = heading * 180/M_PI;	
    3174:	4b1b      	ldr	r3, [pc, #108]	; (31e4 <computeCompassDir+0x154>)
    3176:	6978      	ldr	r0, [r7, #20]
    3178:	491b      	ldr	r1, [pc, #108]	; (31e8 <computeCompassDir+0x158>)
    317a:	4798      	blx	r3
    317c:	1c03      	adds	r3, r0, #0
    317e:	1c1a      	adds	r2, r3, #0
    3180:	4b12      	ldr	r3, [pc, #72]	; (31cc <computeCompassDir+0x13c>)
    3182:	1c10      	adds	r0, r2, #0
    3184:	4798      	blx	r3
    3186:	1c02      	adds	r2, r0, #0
    3188:	1c0b      	adds	r3, r1, #0
    318a:	4c18      	ldr	r4, [pc, #96]	; (31ec <computeCompassDir+0x15c>)
    318c:	1c10      	adds	r0, r2, #0
    318e:	1c19      	adds	r1, r3, #0
    3190:	4a10      	ldr	r2, [pc, #64]	; (31d4 <computeCompassDir+0x144>)
    3192:	4b17      	ldr	r3, [pc, #92]	; (31f0 <computeCompassDir+0x160>)
    3194:	47a0      	blx	r4
    3196:	1c03      	adds	r3, r0, #0
    3198:	1c0c      	adds	r4, r1, #0
    319a:	1c19      	adds	r1, r3, #0
    319c:	1c22      	adds	r2, r4, #0
    319e:	4b07      	ldr	r3, [pc, #28]	; (31bc <computeCompassDir+0x12c>)
    31a0:	1c08      	adds	r0, r1, #0
    31a2:	1c11      	adds	r1, r2, #0
    31a4:	4798      	blx	r3
    31a6:	1c03      	adds	r3, r0, #0
    31a8:	60fb      	str	r3, [r7, #12]
	return headingDegrees;
    31aa:	68fb      	ldr	r3, [r7, #12]
}
    31ac:	1c18      	adds	r0, r3, #0
    31ae:	46bd      	mov	sp, r7
    31b0:	b007      	add	sp, #28
    31b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b4:	00006205 	.word	0x00006205
    31b8:	000038e5 	.word	0x000038e5
    31bc:	00006325 	.word	0x00006325
    31c0:	3e7a35d6 	.word	0x3e7a35d6
    31c4:	00004041 	.word	0x00004041
    31c8:	00003f9d 	.word	0x00003f9d
    31cc:	0000627d 	.word	0x0000627d
    31d0:	00004711 	.word	0x00004711
    31d4:	54442d18 	.word	0x54442d18
    31d8:	401921fb 	.word	0x401921fb
    31dc:	00003f51 	.word	0x00003f51
    31e0:	00005b11 	.word	0x00005b11
    31e4:	000044ad 	.word	0x000044ad
    31e8:	43340000 	.word	0x43340000
    31ec:	00004d61 	.word	0x00004d61
    31f0:	400921fb 	.word	0x400921fb

000031f4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b084      	sub	sp, #16
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    31fc:	687b      	ldr	r3, [r7, #4]
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3202:	68fb      	ldr	r3, [r7, #12]
    3204:	69db      	ldr	r3, [r3, #28]
    3206:	2207      	movs	r2, #7
    3208:	4013      	ands	r3, r2
    320a:	1e5a      	subs	r2, r3, #1
    320c:	4193      	sbcs	r3, r2
    320e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3210:	1c18      	adds	r0, r3, #0
    3212:	46bd      	mov	sp, r7
    3214:	b004      	add	sp, #16
    3216:	bd80      	pop	{r7, pc}

00003218 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3220:	46c0      	nop			; (mov r8, r8)
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	1c18      	adds	r0, r3, #0
    3226:	4b03      	ldr	r3, [pc, #12]	; (3234 <_i2c_master_wait_for_sync+0x1c>)
    3228:	4798      	blx	r3
    322a:	1e03      	subs	r3, r0, #0
    322c:	d1f9      	bne.n	3222 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    322e:	46bd      	mov	sp, r7
    3230:	b002      	add	sp, #8
    3232:	bd80      	pop	{r7, pc}
    3234:	000031f5 	.word	0x000031f5

00003238 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	2264      	movs	r2, #100	; 0x64
    3244:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	4a19      	ldr	r2, [pc, #100]	; (32b0 <i2c_master_get_config_defaults+0x78>)
    324a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	2200      	movs	r2, #0
    3250:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	2200      	movs	r2, #0
    3256:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	2200      	movs	r2, #0
    325c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    325e:	687b      	ldr	r3, [r7, #4]
    3260:	2280      	movs	r2, #128	; 0x80
    3262:	0392      	lsls	r2, r2, #14
    3264:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	2201      	movs	r2, #1
    326a:	4252      	negs	r2, r2
    326c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    326e:	687b      	ldr	r3, [r7, #4]
    3270:	2201      	movs	r2, #1
    3272:	4252      	negs	r2, r2
    3274:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	2200      	movs	r2, #0
    327a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    327c:	687b      	ldr	r3, [r7, #4]
    327e:	2200      	movs	r2, #0
    3280:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	2224      	movs	r2, #36	; 0x24
    3286:	2100      	movs	r1, #0
    3288:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    328a:	687b      	ldr	r3, [r7, #4]
    328c:	2200      	movs	r2, #0
    328e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	222c      	movs	r2, #44	; 0x2c
    3294:	2100      	movs	r1, #0
    3296:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3298:	687b      	ldr	r3, [r7, #4]
    329a:	222d      	movs	r2, #45	; 0x2d
    329c:	2100      	movs	r1, #0
    329e:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    32a0:	687b      	ldr	r3, [r7, #4]
    32a2:	222e      	movs	r2, #46	; 0x2e
    32a4:	2100      	movs	r1, #0
    32a6:	5499      	strb	r1, [r3, r2]
#endif
}
    32a8:	46bd      	mov	sp, r7
    32aa:	b002      	add	sp, #8
    32ac:	bd80      	pop	{r7, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	00000d48 	.word	0x00000d48

000032b4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b084      	sub	sp, #16
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    32c2:	2300      	movs	r3, #0
    32c4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);
    32c6:	687b      	ldr	r3, [r7, #4]
    32c8:	1c18      	adds	r0, r3, #0
    32ca:	4b10      	ldr	r3, [pc, #64]	; (330c <i2c_master_enable+0x58>)
    32cc:	4798      	blx	r3

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    32ce:	68bb      	ldr	r3, [r7, #8]
    32d0:	681b      	ldr	r3, [r3, #0]
    32d2:	2202      	movs	r2, #2
    32d4:	431a      	orrs	r2, r3
    32d6:	68bb      	ldr	r3, [r7, #8]
    32d8:	601a      	str	r2, [r3, #0]
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    32da:	e00c      	b.n	32f6 <i2c_master_enable+0x42>
		timeout_counter++;
    32dc:	68fb      	ldr	r3, [r7, #12]
    32de:	3301      	adds	r3, #1
    32e0:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    32e2:	687b      	ldr	r3, [r7, #4]
    32e4:	88db      	ldrh	r3, [r3, #6]
    32e6:	1e1a      	subs	r2, r3, #0
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	429a      	cmp	r2, r3
    32ec:	d803      	bhi.n	32f6 <i2c_master_enable+0x42>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    32ee:	68bb      	ldr	r3, [r7, #8]
    32f0:	2210      	movs	r2, #16
    32f2:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    32f4:	e006      	b.n	3304 <i2c_master_enable+0x50>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    32f6:	68bb      	ldr	r3, [r7, #8]
    32f8:	8b5b      	ldrh	r3, [r3, #26]
    32fa:	b29b      	uxth	r3, r3
    32fc:	1c1a      	adds	r2, r3, #0
    32fe:	2310      	movs	r3, #16
    3300:	4013      	ands	r3, r2
    3302:	d0eb      	beq.n	32dc <i2c_master_enable+0x28>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    3304:	46bd      	mov	sp, r7
    3306:	b004      	add	sp, #16
    3308:	bd80      	pop	{r7, pc}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	00003219 	.word	0x00003219

00003310 <configure_i2c_master>:

/*
	Configures I2C connection with standard settings
*/
void configure_i2c_master(void)
{
    3310:	b580      	push	{r7, lr}
    3312:	b082      	sub	sp, #8
    3314:	af00      	add	r7, sp, #0
	/* Initialize config structure and software module. */
	//! [init_conf]
	i2c_master_get_config_defaults(&config_i2c_master);
    3316:	4b18      	ldr	r3, [pc, #96]	; (3378 <configure_i2c_master+0x68>)
    3318:	1c18      	adds	r0, r3, #0
    331a:	4b18      	ldr	r3, [pc, #96]	; (337c <configure_i2c_master+0x6c>)
    331c:	4798      	blx	r3
	//! [init_conf]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 65535;
    331e:	4b16      	ldr	r3, [pc, #88]	; (3378 <configure_i2c_master+0x68>)
    3320:	2201      	movs	r2, #1
    3322:	4252      	negs	r2, r2
    3324:	82da      	strh	r2, [r3, #22]
	//! [conf_change]

	/* Initialize and enable device with config. */
	//! [init_module]
	int init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    3326:	4a16      	ldr	r2, [pc, #88]	; (3380 <configure_i2c_master+0x70>)
    3328:	4916      	ldr	r1, [pc, #88]	; (3384 <configure_i2c_master+0x74>)
    332a:	4b13      	ldr	r3, [pc, #76]	; (3378 <configure_i2c_master+0x68>)
    332c:	1c10      	adds	r0, r2, #0
    332e:	1c1a      	adds	r2, r3, #0
    3330:	4b15      	ldr	r3, [pc, #84]	; (3388 <configure_i2c_master+0x78>)
    3332:	4798      	blx	r3
    3334:	1c03      	adds	r3, r0, #0
    3336:	607b      	str	r3, [r7, #4]
	printf("I2C master init status: %d\r\n", init_status);
    3338:	4a14      	ldr	r2, [pc, #80]	; (338c <configure_i2c_master+0x7c>)
    333a:	687b      	ldr	r3, [r7, #4]
    333c:	1c10      	adds	r0, r2, #0
    333e:	1c19      	adds	r1, r3, #0
    3340:	4b13      	ldr	r3, [pc, #76]	; (3390 <configure_i2c_master+0x80>)
    3342:	4798      	blx	r3
	while(init_status != STATUS_OK) {
    3344:	e00e      	b.n	3364 <configure_i2c_master+0x54>
		init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
    3346:	4a0e      	ldr	r2, [pc, #56]	; (3380 <configure_i2c_master+0x70>)
    3348:	490e      	ldr	r1, [pc, #56]	; (3384 <configure_i2c_master+0x74>)
    334a:	4b0b      	ldr	r3, [pc, #44]	; (3378 <configure_i2c_master+0x68>)
    334c:	1c10      	adds	r0, r2, #0
    334e:	1c1a      	adds	r2, r3, #0
    3350:	4b0d      	ldr	r3, [pc, #52]	; (3388 <configure_i2c_master+0x78>)
    3352:	4798      	blx	r3
    3354:	1c03      	adds	r3, r0, #0
    3356:	607b      	str	r3, [r7, #4]
		printf("I2C master init error status: %d\r\n", init_status);
    3358:	4a0e      	ldr	r2, [pc, #56]	; (3394 <configure_i2c_master+0x84>)
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	1c10      	adds	r0, r2, #0
    335e:	1c19      	adds	r1, r3, #0
    3360:	4b0b      	ldr	r3, [pc, #44]	; (3390 <configure_i2c_master+0x80>)
    3362:	4798      	blx	r3

	/* Initialize and enable device with config. */
	//! [init_module]
	int init_status = i2c_master_init(&i2c_master_instance, SERCOM2, &config_i2c_master);
	printf("I2C master init status: %d\r\n", init_status);
	while(init_status != STATUS_OK) {
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	2b00      	cmp	r3, #0
    3368:	d1ed      	bne.n	3346 <configure_i2c_master+0x36>
		printf("I2C master init error status: %d\r\n", init_status);
	}
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
    336a:	4b05      	ldr	r3, [pc, #20]	; (3380 <configure_i2c_master+0x70>)
    336c:	1c18      	adds	r0, r3, #0
    336e:	4b0a      	ldr	r3, [pc, #40]	; (3398 <configure_i2c_master+0x88>)
    3370:	4798      	blx	r3
	//! [enable_module]
}
    3372:	46bd      	mov	sp, r7
    3374:	b002      	add	sp, #8
    3376:	bd80      	pop	{r7, pc}
    3378:	200001a4 	.word	0x200001a4
    337c:	00003239 	.word	0x00003239
    3380:	20000198 	.word	0x20000198
    3384:	42001000 	.word	0x42001000
    3388:	000004f1 	.word	0x000004f1
    338c:	00007588 	.word	0x00007588
    3390:	000064f1 	.word	0x000064f1
    3394:	000075a8 	.word	0x000075a8
    3398:	000032b5 	.word	0x000032b5

0000339c <i2c_writer_helper>:
	detailed in the packet
*/
void i2c_writer_helper(struct i2c_master_packet* packet_address,
                       enum status_code (*i2c_write)(struct i2c_master_module *const module,
                                                     struct i2c_master_packet *const packet))
{
    339c:	b580      	push	{r7, lr}
    339e:	b084      	sub	sp, #16
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0;
    33a6:	230e      	movs	r3, #14
    33a8:	18fb      	adds	r3, r7, r3
    33aa:	2200      	movs	r2, #0
    33ac:	801a      	strh	r2, [r3, #0]
	while (true) {
		int x = i2c_write(&i2c_master_instance, packet_address);
    33ae:	491b      	ldr	r1, [pc, #108]	; (341c <i2c_writer_helper+0x80>)
    33b0:	687a      	ldr	r2, [r7, #4]
    33b2:	683b      	ldr	r3, [r7, #0]
    33b4:	1c08      	adds	r0, r1, #0
    33b6:	1c11      	adds	r1, r2, #0
    33b8:	4798      	blx	r3
    33ba:	1c03      	adds	r3, r0, #0
    33bc:	60bb      	str	r3, [r7, #8]
		if (x == STATUS_OK){
    33be:	68bb      	ldr	r3, [r7, #8]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d100      	bne.n	33c6 <i2c_writer_helper+0x2a>
			break;
    33c4:	e027      	b.n	3416 <i2c_writer_helper+0x7a>
		}
		if(timeout%100 == 0) {
    33c6:	230e      	movs	r3, #14
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	881a      	ldrh	r2, [r3, #0]
    33cc:	4b14      	ldr	r3, [pc, #80]	; (3420 <i2c_writer_helper+0x84>)
    33ce:	1c10      	adds	r0, r2, #0
    33d0:	2164      	movs	r1, #100	; 0x64
    33d2:	4798      	blx	r3
    33d4:	1c0b      	adds	r3, r1, #0
    33d6:	b29b      	uxth	r3, r3
    33d8:	2b00      	cmp	r3, #0
    33da:	d105      	bne.n	33e8 <i2c_writer_helper+0x4c>
			printf("i2c_master_write_packet_wait status: %d\r\n",x);
    33dc:	4a11      	ldr	r2, [pc, #68]	; (3424 <i2c_writer_helper+0x88>)
    33de:	68bb      	ldr	r3, [r7, #8]
    33e0:	1c10      	adds	r0, r2, #0
    33e2:	1c19      	adds	r1, r3, #0
    33e4:	4b10      	ldr	r3, [pc, #64]	; (3428 <i2c_writer_helper+0x8c>)
    33e6:	4798      	blx	r3
		}
		// Increment timeout counter and check if timed out.
		if (timeout++ == TIMEOUT) {
    33e8:	230e      	movs	r3, #14
    33ea:	18fb      	adds	r3, r7, r3
    33ec:	881b      	ldrh	r3, [r3, #0]
    33ee:	220e      	movs	r2, #14
    33f0:	18ba      	adds	r2, r7, r2
    33f2:	1c59      	adds	r1, r3, #1
    33f4:	8011      	strh	r1, [r2, #0]
    33f6:	22fa      	movs	r2, #250	; 0xfa
    33f8:	0092      	lsls	r2, r2, #2
    33fa:	4293      	cmp	r3, r2
    33fc:	d104      	bne.n	3408 <i2c_writer_helper+0x6c>
			printf("I2C write timed out.\r\n");
    33fe:	4b0b      	ldr	r3, [pc, #44]	; (342c <i2c_writer_helper+0x90>)
    3400:	1c18      	adds	r0, r3, #0
    3402:	4b0b      	ldr	r3, [pc, #44]	; (3430 <i2c_writer_helper+0x94>)
    3404:	4798      	blx	r3
			break;
    3406:	e006      	b.n	3416 <i2c_writer_helper+0x7a>
		}
		printf("i2c_master_write_packet_wait status: %d\r\n",x);
    3408:	4a06      	ldr	r2, [pc, #24]	; (3424 <i2c_writer_helper+0x88>)
    340a:	68bb      	ldr	r3, [r7, #8]
    340c:	1c10      	adds	r0, r2, #0
    340e:	1c19      	adds	r1, r3, #0
    3410:	4b05      	ldr	r3, [pc, #20]	; (3428 <i2c_writer_helper+0x8c>)
    3412:	4798      	blx	r3
	}
    3414:	e7cb      	b.n	33ae <i2c_writer_helper+0x12>
}
    3416:	46bd      	mov	sp, r7
    3418:	b004      	add	sp, #16
    341a:	bd80      	pop	{r7, pc}
    341c:	20000198 	.word	0x20000198
    3420:	00003ee5 	.word	0x00003ee5
    3424:	000075cc 	.word	0x000075cc
    3428:	000064f1 	.word	0x000064f1
    342c:	000075f8 	.word	0x000075f8
    3430:	000065e9 	.word	0x000065e9

00003434 <i2c_write_command>:

/*
	Given a pointer to a packet, perform a write over I2C following the information
	detailed in the packet
*/
void i2c_write_command(struct i2c_master_packet* packet_address){
    3434:	b580      	push	{r7, lr}
    3436:	b082      	sub	sp, #8
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
  i2c_writer_helper(packet_address, i2c_master_write_packet_wait);
    343c:	687a      	ldr	r2, [r7, #4]
    343e:	4b04      	ldr	r3, [pc, #16]	; (3450 <i2c_write_command+0x1c>)
    3440:	1c10      	adds	r0, r2, #0
    3442:	1c19      	adds	r1, r3, #0
    3444:	4b03      	ldr	r3, [pc, #12]	; (3454 <i2c_write_command+0x20>)
    3446:	4798      	blx	r3
}
    3448:	46bd      	mov	sp, r7
    344a:	b002      	add	sp, #8
    344c:	bd80      	pop	{r7, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	00000ac5 	.word	0x00000ac5
    3454:	0000339d 	.word	0x0000339d

00003458 <i2c_read_command>:

/*
	Given a pointer to a packet, perform a read over I2C following the information
	detailed in the packet
*/
void i2c_read_command(struct i2c_master_packet* packet_address){
    3458:	b580      	push	{r7, lr}
    345a:	b084      	sub	sp, #16
    345c:	af00      	add	r7, sp, #0
    345e:	6078      	str	r0, [r7, #4]
	uint16_t timeout = 0;
    3460:	230e      	movs	r3, #14
    3462:	18fb      	adds	r3, r7, r3
    3464:	2200      	movs	r2, #0
    3466:	801a      	strh	r2, [r3, #0]
	while ((i2c_master_read_packet_wait(&i2c_master_instance, packet_address)) != STATUS_OK) {
    3468:	e00b      	b.n	3482 <i2c_read_command+0x2a>
		if (timeout++ == TIMEOUT) {
    346a:	230e      	movs	r3, #14
    346c:	18fb      	adds	r3, r7, r3
    346e:	881b      	ldrh	r3, [r3, #0]
    3470:	220e      	movs	r2, #14
    3472:	18ba      	adds	r2, r7, r2
    3474:	1c59      	adds	r1, r3, #1
    3476:	8011      	strh	r1, [r2, #0]
    3478:	22fa      	movs	r2, #250	; 0xfa
    347a:	0092      	lsls	r2, r2, #2
    347c:	4293      	cmp	r3, r2
    347e:	d100      	bne.n	3482 <i2c_read_command+0x2a>
			break;
    3480:	e007      	b.n	3492 <i2c_read_command+0x3a>
	Given a pointer to a packet, perform a read over I2C following the information
	detailed in the packet
*/
void i2c_read_command(struct i2c_master_packet* packet_address){
	uint16_t timeout = 0;
	while ((i2c_master_read_packet_wait(&i2c_master_instance, packet_address)) != STATUS_OK) {
    3482:	4a05      	ldr	r2, [pc, #20]	; (3498 <i2c_read_command+0x40>)
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	1c10      	adds	r0, r2, #0
    3488:	1c19      	adds	r1, r3, #0
    348a:	4b04      	ldr	r3, [pc, #16]	; (349c <i2c_read_command+0x44>)
    348c:	4798      	blx	r3
    348e:	1e03      	subs	r3, r0, #0
    3490:	d1eb      	bne.n	346a <i2c_read_command+0x12>
		if (timeout++ == TIMEOUT) {
			break;
			printf("timeout");
		}
	}
}
    3492:	46bd      	mov	sp, r7
    3494:	b004      	add	sp, #16
    3496:	bd80      	pop	{r7, pc}
    3498:	20000198 	.word	0x20000198
    349c:	00000921 	.word	0x00000921

000034a0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    34a0:	b580      	push	{r7, lr}
    34a2:	b082      	sub	sp, #8
    34a4:	af00      	add	r7, sp, #0
    34a6:	1c02      	adds	r2, r0, #0
    34a8:	1dfb      	adds	r3, r7, #7
    34aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    34ac:	4b06      	ldr	r3, [pc, #24]	; (34c8 <system_interrupt_enable+0x28>)
    34ae:	1dfa      	adds	r2, r7, #7
    34b0:	7812      	ldrb	r2, [r2, #0]
    34b2:	1c11      	adds	r1, r2, #0
    34b4:	221f      	movs	r2, #31
    34b6:	400a      	ands	r2, r1
    34b8:	2101      	movs	r1, #1
    34ba:	4091      	lsls	r1, r2
    34bc:	1c0a      	adds	r2, r1, #0
    34be:	601a      	str	r2, [r3, #0]
}
    34c0:	46bd      	mov	sp, r7
    34c2:	b002      	add	sp, #8
    34c4:	bd80      	pop	{r7, pc}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	e000e100 	.word	0xe000e100

000034cc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b084      	sub	sp, #16
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	681b      	ldr	r3, [r3, #0]
    34d8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	69db      	ldr	r3, [r3, #28]
    34de:	1e5a      	subs	r2, r3, #1
    34e0:	4193      	sbcs	r3, r2
    34e2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    34e4:	1c18      	adds	r0, r3, #0
    34e6:	46bd      	mov	sp, r7
    34e8:	b004      	add	sp, #16
    34ea:	bd80      	pop	{r7, pc}

000034ec <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    34ec:	b580      	push	{r7, lr}
    34ee:	b082      	sub	sp, #8
    34f0:	af00      	add	r7, sp, #0
    34f2:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    34f4:	46c0      	nop			; (mov r8, r8)
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	1c18      	adds	r0, r3, #0
    34fa:	4b03      	ldr	r3, [pc, #12]	; (3508 <_usart_wait_for_sync+0x1c>)
    34fc:	4798      	blx	r3
    34fe:	1e03      	subs	r3, r0, #0
    3500:	d1f9      	bne.n	34f6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    3502:	46bd      	mov	sp, r7
    3504:	b002      	add	sp, #8
    3506:	bd80      	pop	{r7, pc}
    3508:	000034cd 	.word	0x000034cd

0000350c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    350c:	b580      	push	{r7, lr}
    350e:	b082      	sub	sp, #8
    3510:	af00      	add	r7, sp, #0
    3512:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	2280      	movs	r2, #128	; 0x80
    3518:	05d2      	lsls	r2, r2, #23
    351a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	2200      	movs	r2, #0
    3520:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	22ff      	movs	r2, #255	; 0xff
    3526:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	2200      	movs	r2, #0
    352c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    352e:	687b      	ldr	r3, [r7, #4]
    3530:	2200      	movs	r2, #0
    3532:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    3534:	687b      	ldr	r3, [r7, #4]
    3536:	2296      	movs	r2, #150	; 0x96
    3538:	0192      	lsls	r2, r2, #6
    353a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    353c:	687b      	ldr	r3, [r7, #4]
    353e:	2224      	movs	r2, #36	; 0x24
    3540:	2101      	movs	r1, #1
    3542:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    3544:	687b      	ldr	r3, [r7, #4]
    3546:	2225      	movs	r2, #37	; 0x25
    3548:	2101      	movs	r1, #1
    354a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    354c:	687b      	ldr	r3, [r7, #4]
    354e:	2226      	movs	r2, #38	; 0x26
    3550:	2100      	movs	r1, #0
    3552:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	2227      	movs	r2, #39	; 0x27
    3558:	2100      	movs	r1, #0
    355a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    355c:	687b      	ldr	r3, [r7, #4]
    355e:	2200      	movs	r2, #0
    3560:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	2288      	movs	r2, #136	; 0x88
    3566:	0352      	lsls	r2, r2, #13
    3568:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    356a:	687b      	ldr	r3, [r7, #4]
    356c:	222c      	movs	r2, #44	; 0x2c
    356e:	2100      	movs	r1, #0
    3570:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	222d      	movs	r2, #45	; 0x2d
    3576:	2100      	movs	r1, #0
    3578:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	2200      	movs	r2, #0
    357e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	2200      	movs	r2, #0
    3584:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	2200      	movs	r2, #0
    358a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    358c:	687b      	ldr	r3, [r7, #4]
    358e:	2200      	movs	r2, #0
    3590:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3592:	687b      	ldr	r3, [r7, #4]
    3594:	2200      	movs	r2, #0
    3596:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3598:	687b      	ldr	r3, [r7, #4]
    359a:	2200      	movs	r2, #0
    359c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	2200      	movs	r2, #0
    35a2:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    35a4:	687b      	ldr	r3, [r7, #4]
    35a6:	2200      	movs	r2, #0
    35a8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	2200      	movs	r2, #0
    35ae:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    35b0:	687b      	ldr	r3, [r7, #4]
    35b2:	2200      	movs	r2, #0
    35b4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    35b6:	687b      	ldr	r3, [r7, #4]
    35b8:	2213      	movs	r2, #19
    35ba:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	2200      	movs	r2, #0
    35c0:	775a      	strb	r2, [r3, #29]
#endif
}
    35c2:	46bd      	mov	sp, r7
    35c4:	b002      	add	sp, #8
    35c6:	bd80      	pop	{r7, pc}

000035c8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    35c8:	b580      	push	{r7, lr}
    35ca:	b084      	sub	sp, #16
    35cc:	af00      	add	r7, sp, #0
    35ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    35d0:	687b      	ldr	r3, [r7, #4]
    35d2:	681b      	ldr	r3, [r3, #0]
    35d4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	681b      	ldr	r3, [r3, #0]
    35da:	1c18      	adds	r0, r3, #0
    35dc:	4b09      	ldr	r3, [pc, #36]	; (3604 <usart_enable+0x3c>)
    35de:	4798      	blx	r3
    35e0:	1c03      	adds	r3, r0, #0
    35e2:	1c18      	adds	r0, r3, #0
    35e4:	4b08      	ldr	r3, [pc, #32]	; (3608 <usart_enable+0x40>)
    35e6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	1c18      	adds	r0, r3, #0
    35ec:	4b07      	ldr	r3, [pc, #28]	; (360c <usart_enable+0x44>)
    35ee:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    35f0:	68fb      	ldr	r3, [r7, #12]
    35f2:	681b      	ldr	r3, [r3, #0]
    35f4:	2202      	movs	r2, #2
    35f6:	431a      	orrs	r2, r3
    35f8:	68fb      	ldr	r3, [r7, #12]
    35fa:	601a      	str	r2, [r3, #0]
}
    35fc:	46bd      	mov	sp, r7
    35fe:	b004      	add	sp, #16
    3600:	bd80      	pop	{r7, pc}
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	00001165 	.word	0x00001165
    3608:	000034a1 	.word	0x000034a1
    360c:	000034ed 	.word	0x000034ed

00003610 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    3610:	b580      	push	{r7, lr}
    3612:	b084      	sub	sp, #16
    3614:	af00      	add	r7, sp, #0
    3616:	60f8      	str	r0, [r7, #12]
    3618:	60b9      	str	r1, [r7, #8]
    361a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    361c:	68f9      	ldr	r1, [r7, #12]
    361e:	68ba      	ldr	r2, [r7, #8]
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	1c08      	adds	r0, r1, #0
    3624:	1c11      	adds	r1, r2, #0
    3626:	1c1a      	adds	r2, r3, #0
    3628:	4b05      	ldr	r3, [pc, #20]	; (3640 <usart_serial_init+0x30>)
    362a:	4798      	blx	r3
    362c:	1e03      	subs	r3, r0, #0
    362e:	d101      	bne.n	3634 <usart_serial_init+0x24>
		return true;
    3630:	2301      	movs	r3, #1
    3632:	e000      	b.n	3636 <usart_serial_init+0x26>
	}
	else {
		return false;
    3634:	2300      	movs	r3, #0
	}
}
    3636:	1c18      	adds	r0, r3, #0
    3638:	46bd      	mov	sp, r7
    363a:	b004      	add	sp, #16
    363c:	bd80      	pop	{r7, pc}
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	00001611 	.word	0x00001611

00003644 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3644:	b580      	push	{r7, lr}
    3646:	b082      	sub	sp, #8
    3648:	af00      	add	r7, sp, #0
    364a:	6078      	str	r0, [r7, #4]
    364c:	1c0a      	adds	r2, r1, #0
    364e:	1cfb      	adds	r3, r7, #3
    3650:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	1cfb      	adds	r3, r7, #3
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	b29b      	uxth	r3, r3
    365a:	687a      	ldr	r2, [r7, #4]
    365c:	1c10      	adds	r0, r2, #0
    365e:	1c19      	adds	r1, r3, #0
    3660:	4b04      	ldr	r3, [pc, #16]	; (3674 <usart_serial_putchar+0x30>)
    3662:	4798      	blx	r3
    3664:	1e03      	subs	r3, r0, #0
    3666:	d1f5      	bne.n	3654 <usart_serial_putchar+0x10>

	return STATUS_OK;
    3668:	2300      	movs	r3, #0
}
    366a:	1c18      	adds	r0, r3, #0
    366c:	46bd      	mov	sp, r7
    366e:	b002      	add	sp, #8
    3670:	bd80      	pop	{r7, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	00001881 	.word	0x00001881

00003678 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3678:	b580      	push	{r7, lr}
    367a:	b084      	sub	sp, #16
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
    3680:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    3682:	230e      	movs	r3, #14
    3684:	18fb      	adds	r3, r7, r3
    3686:	2200      	movs	r2, #0
    3688:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	687a      	ldr	r2, [r7, #4]
    368e:	230e      	movs	r3, #14
    3690:	18fb      	adds	r3, r7, r3
    3692:	1c10      	adds	r0, r2, #0
    3694:	1c19      	adds	r1, r3, #0
    3696:	4b06      	ldr	r3, [pc, #24]	; (36b0 <usart_serial_getchar+0x38>)
    3698:	4798      	blx	r3
    369a:	1e03      	subs	r3, r0, #0
    369c:	d1f6      	bne.n	368c <usart_serial_getchar+0x14>

	*c = temp;
    369e:	230e      	movs	r3, #14
    36a0:	18fb      	adds	r3, r7, r3
    36a2:	881b      	ldrh	r3, [r3, #0]
    36a4:	b2da      	uxtb	r2, r3
    36a6:	683b      	ldr	r3, [r7, #0]
    36a8:	701a      	strb	r2, [r3, #0]
}
    36aa:	46bd      	mov	sp, r7
    36ac:	b004      	add	sp, #16
    36ae:	bd80      	pop	{r7, pc}
    36b0:	000018e5 	.word	0x000018e5

000036b4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	b084      	sub	sp, #16
    36b8:	af00      	add	r7, sp, #0
    36ba:	60f8      	str	r0, [r7, #12]
    36bc:	60b9      	str	r1, [r7, #8]
    36be:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    36c0:	4b10      	ldr	r3, [pc, #64]	; (3704 <stdio_serial_init+0x50>)
    36c2:	68fa      	ldr	r2, [r7, #12]
    36c4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    36c6:	4b10      	ldr	r3, [pc, #64]	; (3708 <stdio_serial_init+0x54>)
    36c8:	4a10      	ldr	r2, [pc, #64]	; (370c <stdio_serial_init+0x58>)
    36ca:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    36cc:	4b10      	ldr	r3, [pc, #64]	; (3710 <stdio_serial_init+0x5c>)
    36ce:	4a11      	ldr	r2, [pc, #68]	; (3714 <stdio_serial_init+0x60>)
    36d0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    36d2:	68f9      	ldr	r1, [r7, #12]
    36d4:	68ba      	ldr	r2, [r7, #8]
    36d6:	687b      	ldr	r3, [r7, #4]
    36d8:	1c08      	adds	r0, r1, #0
    36da:	1c11      	adds	r1, r2, #0
    36dc:	1c1a      	adds	r2, r3, #0
    36de:	4b0e      	ldr	r3, [pc, #56]	; (3718 <stdio_serial_init+0x64>)
    36e0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    36e2:	4b0e      	ldr	r3, [pc, #56]	; (371c <stdio_serial_init+0x68>)
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	689b      	ldr	r3, [r3, #8]
    36e8:	1c18      	adds	r0, r3, #0
    36ea:	2100      	movs	r1, #0
    36ec:	4b0c      	ldr	r3, [pc, #48]	; (3720 <stdio_serial_init+0x6c>)
    36ee:	4798      	blx	r3
	setbuf(stdin, NULL);
    36f0:	4b0a      	ldr	r3, [pc, #40]	; (371c <stdio_serial_init+0x68>)
    36f2:	681b      	ldr	r3, [r3, #0]
    36f4:	685b      	ldr	r3, [r3, #4]
    36f6:	1c18      	adds	r0, r3, #0
    36f8:	2100      	movs	r1, #0
    36fa:	4b09      	ldr	r3, [pc, #36]	; (3720 <stdio_serial_init+0x6c>)
    36fc:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    36fe:	46bd      	mov	sp, r7
    3700:	b004      	add	sp, #16
    3702:	bd80      	pop	{r7, pc}
    3704:	200001f4 	.word	0x200001f4
    3708:	200001f0 	.word	0x200001f0
    370c:	00003645 	.word	0x00003645
    3710:	200001ec 	.word	0x200001ec
    3714:	00003679 	.word	0x00003679
    3718:	00003611 	.word	0x00003611
    371c:	20000074 	.word	0x20000074
    3720:	000065fd 	.word	0x000065fd

00003724 <configure_console>:

#include "main.h"

//extern void xPortSysTickHandler(void);

static void configure_console(void) {
    3724:	b580      	push	{r7, lr}
    3726:	b090      	sub	sp, #64	; 0x40
    3728:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    372a:	1c3b      	adds	r3, r7, #0
    372c:	1c18      	adds	r0, r3, #0
    372e:	4b13      	ldr	r3, [pc, #76]	; (377c <configure_console+0x58>)
    3730:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    3732:	1c3b      	adds	r3, r7, #0
    3734:	2280      	movs	r2, #128	; 0x80
    3736:	0352      	lsls	r2, r2, #13
    3738:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    373a:	1c3b      	adds	r3, r7, #0
    373c:	4a10      	ldr	r2, [pc, #64]	; (3780 <configure_console+0x5c>)
    373e:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    3740:	1c3b      	adds	r3, r7, #0
    3742:	4a10      	ldr	r2, [pc, #64]	; (3784 <configure_console+0x60>)
    3744:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    3746:	1c3b      	adds	r3, r7, #0
    3748:	2201      	movs	r2, #1
    374a:	4252      	negs	r2, r2
    374c:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    374e:	1c3b      	adds	r3, r7, #0
    3750:	2201      	movs	r2, #1
    3752:	4252      	negs	r2, r2
    3754:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    3756:	1c3b      	adds	r3, r7, #0
    3758:	2296      	movs	r2, #150	; 0x96
    375a:	0212      	lsls	r2, r2, #8
    375c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE,
    375e:	4a0a      	ldr	r2, [pc, #40]	; (3788 <configure_console+0x64>)
    3760:	490a      	ldr	r1, [pc, #40]	; (378c <configure_console+0x68>)
    3762:	1c3b      	adds	r3, r7, #0
    3764:	1c10      	adds	r0, r2, #0
    3766:	1c1a      	adds	r2, r3, #0
    3768:	4b09      	ldr	r3, [pc, #36]	; (3790 <configure_console+0x6c>)
    376a:	4798      	blx	r3
	&usart_conf);
	usart_enable(&cdc_uart_module);
    376c:	4b06      	ldr	r3, [pc, #24]	; (3788 <configure_console+0x64>)
    376e:	1c18      	adds	r0, r3, #0
    3770:	4b08      	ldr	r3, [pc, #32]	; (3794 <configure_console+0x70>)
    3772:	4798      	blx	r3
}
    3774:	46bd      	mov	sp, r7
    3776:	b010      	add	sp, #64	; 0x40
    3778:	bd80      	pop	{r7, pc}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	0000350d 	.word	0x0000350d
    3780:	00160002 	.word	0x00160002
    3784:	00170002 	.word	0x00170002
    3788:	2000015c 	.word	0x2000015c
    378c:	42001400 	.word	0x42001400
    3790:	000036b5 	.word	0x000036b5
    3794:	000035c9 	.word	0x000035c9

00003798 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    3798:	b590      	push	{r4, r7, lr}
    379a:	b087      	sub	sp, #28
    379c:	af00      	add	r7, sp, #0
	// Initilize the SAM system
	system_init();
    379e:	4b40      	ldr	r3, [pc, #256]	; (38a0 <main+0x108>)
    37a0:	4798      	blx	r3

	// Initialize the console uart
	configure_console();
    37a2:	4b40      	ldr	r3, [pc, #256]	; (38a4 <main+0x10c>)
    37a4:	4798      	blx	r3
	
	// Output demo infomation.
	printf("-- Freertos Example --\n\r");
    37a6:	4b40      	ldr	r3, [pc, #256]	; (38a8 <main+0x110>)
    37a8:	1c18      	adds	r0, r3, #0
    37aa:	4b40      	ldr	r3, [pc, #256]	; (38ac <main+0x114>)
    37ac:	4798      	blx	r3
	printf("-- %s\n\r", BOARD_NAME);
    37ae:	4a40      	ldr	r2, [pc, #256]	; (38b0 <main+0x118>)
    37b0:	4b40      	ldr	r3, [pc, #256]	; (38b4 <main+0x11c>)
    37b2:	1c10      	adds	r0, r2, #0
    37b4:	1c19      	adds	r1, r3, #0
    37b6:	4b3d      	ldr	r3, [pc, #244]	; (38ac <main+0x114>)
    37b8:	4798      	blx	r3
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    37ba:	493f      	ldr	r1, [pc, #252]	; (38b8 <main+0x120>)
    37bc:	4a3f      	ldr	r2, [pc, #252]	; (38bc <main+0x124>)
    37be:	4b40      	ldr	r3, [pc, #256]	; (38c0 <main+0x128>)
    37c0:	1c08      	adds	r0, r1, #0
    37c2:	1c11      	adds	r1, r2, #0
    37c4:	1c1a      	adds	r2, r3, #0
    37c6:	4b39      	ldr	r3, [pc, #228]	; (38ac <main+0x114>)
    37c8:	4798      	blx	r3
	
	configure_i2c_master();
    37ca:	4b3e      	ldr	r3, [pc, #248]	; (38c4 <main+0x12c>)
    37cc:	4798      	blx	r3
	//READ FROM MAGNETOMETER
	HMC5883L_init();
    37ce:	4b3e      	ldr	r3, [pc, #248]	; (38c8 <main+0x130>)
    37d0:	4798      	blx	r3
	uint8_t readBuff[6] = {0, 0, 0, 0, 0, 0};
    37d2:	2308      	movs	r3, #8
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	2200      	movs	r2, #0
    37d8:	701a      	strb	r2, [r3, #0]
    37da:	2308      	movs	r3, #8
    37dc:	18fb      	adds	r3, r7, r3
    37de:	2200      	movs	r2, #0
    37e0:	705a      	strb	r2, [r3, #1]
    37e2:	2308      	movs	r3, #8
    37e4:	18fb      	adds	r3, r7, r3
    37e6:	2200      	movs	r2, #0
    37e8:	709a      	strb	r2, [r3, #2]
    37ea:	2308      	movs	r3, #8
    37ec:	18fb      	adds	r3, r7, r3
    37ee:	2200      	movs	r2, #0
    37f0:	70da      	strb	r2, [r3, #3]
    37f2:	2308      	movs	r3, #8
    37f4:	18fb      	adds	r3, r7, r3
    37f6:	2200      	movs	r2, #0
    37f8:	711a      	strb	r2, [r3, #4]
    37fa:	2308      	movs	r3, #8
    37fc:	18fb      	adds	r3, r7, r3
    37fe:	2200      	movs	r2, #0
    3800:	715a      	strb	r2, [r3, #5]
	HMC5883L_read(readBuff);
    3802:	2308      	movs	r3, #8
    3804:	18fb      	adds	r3, r7, r3
    3806:	1c18      	adds	r0, r3, #0
    3808:	4b30      	ldr	r3, [pc, #192]	; (38cc <main+0x134>)
    380a:	4798      	blx	r3
	int16_t xyzBuff[3] = {0, 0, 0};
    380c:	1c3b      	adds	r3, r7, #0
    380e:	2200      	movs	r2, #0
    3810:	801a      	strh	r2, [r3, #0]
    3812:	1c3b      	adds	r3, r7, #0
    3814:	2200      	movs	r2, #0
    3816:	805a      	strh	r2, [r3, #2]
    3818:	1c3b      	adds	r3, r7, #0
    381a:	2200      	movs	r2, #0
    381c:	809a      	strh	r2, [r3, #4]
	getXYZ(readBuff, xyzBuff);
    381e:	2308      	movs	r3, #8
    3820:	18fa      	adds	r2, r7, r3
    3822:	1c3b      	adds	r3, r7, #0
    3824:	1c10      	adds	r0, r2, #0
    3826:	1c19      	adds	r1, r3, #0
    3828:	4b29      	ldr	r3, [pc, #164]	; (38d0 <main+0x138>)
    382a:	4798      	blx	r3
	int i;
	for (i = 0; i < 6; i++) {		
    382c:	2300      	movs	r3, #0
    382e:	617b      	str	r3, [r7, #20]
    3830:	e00d      	b.n	384e <main+0xb6>
		printf("%x ", readBuff[i]);					
    3832:	2308      	movs	r3, #8
    3834:	18fa      	adds	r2, r7, r3
    3836:	697b      	ldr	r3, [r7, #20]
    3838:	18d3      	adds	r3, r2, r3
    383a:	781b      	ldrb	r3, [r3, #0]
    383c:	1c1a      	adds	r2, r3, #0
    383e:	4b25      	ldr	r3, [pc, #148]	; (38d4 <main+0x13c>)
    3840:	1c18      	adds	r0, r3, #0
    3842:	1c11      	adds	r1, r2, #0
    3844:	4b19      	ldr	r3, [pc, #100]	; (38ac <main+0x114>)
    3846:	4798      	blx	r3
	uint8_t readBuff[6] = {0, 0, 0, 0, 0, 0};
	HMC5883L_read(readBuff);
	int16_t xyzBuff[3] = {0, 0, 0};
	getXYZ(readBuff, xyzBuff);
	int i;
	for (i = 0; i < 6; i++) {		
    3848:	697b      	ldr	r3, [r7, #20]
    384a:	3301      	adds	r3, #1
    384c:	617b      	str	r3, [r7, #20]
    384e:	697b      	ldr	r3, [r7, #20]
    3850:	2b05      	cmp	r3, #5
    3852:	ddee      	ble.n	3832 <main+0x9a>
		printf("%x ", readBuff[i]);					
	}
	printf("\n\r");
    3854:	4b20      	ldr	r3, [pc, #128]	; (38d8 <main+0x140>)
    3856:	1c18      	adds	r0, r3, #0
    3858:	4b14      	ldr	r3, [pc, #80]	; (38ac <main+0x114>)
    385a:	4798      	blx	r3
	printf("%d %d %d\n\r", xyzBuff[0], xyzBuff[1], xyzBuff[2]);	
    385c:	1c3b      	adds	r3, r7, #0
    385e:	881b      	ldrh	r3, [r3, #0]
    3860:	b219      	sxth	r1, r3
    3862:	1c3b      	adds	r3, r7, #0
    3864:	885b      	ldrh	r3, [r3, #2]
    3866:	b21a      	sxth	r2, r3
    3868:	1c3b      	adds	r3, r7, #0
    386a:	889b      	ldrh	r3, [r3, #4]
    386c:	b21b      	sxth	r3, r3
    386e:	481b      	ldr	r0, [pc, #108]	; (38dc <main+0x144>)
    3870:	4c0e      	ldr	r4, [pc, #56]	; (38ac <main+0x114>)
    3872:	47a0      	blx	r4
	float heading = computeCompassDir(xyzBuff[0], xyzBuff[1], xyzBuff[2]);
    3874:	1c3b      	adds	r3, r7, #0
    3876:	8819      	ldrh	r1, [r3, #0]
    3878:	1c3b      	adds	r3, r7, #0
    387a:	885a      	ldrh	r2, [r3, #2]
    387c:	1c3b      	adds	r3, r7, #0
    387e:	889b      	ldrh	r3, [r3, #4]
    3880:	b209      	sxth	r1, r1
    3882:	b212      	sxth	r2, r2
    3884:	b21b      	sxth	r3, r3
    3886:	1c08      	adds	r0, r1, #0
    3888:	1c11      	adds	r1, r2, #0
    388a:	1c1a      	adds	r2, r3, #0
    388c:	4b14      	ldr	r3, [pc, #80]	; (38e0 <main+0x148>)
    388e:	4798      	blx	r3
    3890:	1c03      	adds	r3, r0, #0
    3892:	613b      	str	r3, [r7, #16]
	// Start the scheduler.
	vTaskStartScheduler();

	// Will only get here if there was insufficient memory to create the idle task.
	*/
	return 0;
    3894:	2300      	movs	r3, #0
}
    3896:	1c18      	adds	r0, r3, #0
    3898:	46bd      	mov	sp, r7
    389a:	b007      	add	sp, #28
    389c:	bd90      	pop	{r4, r7, pc}
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	00002e1d 	.word	0x00002e1d
    38a4:	00003725 	.word	0x00003725
    38a8:	00007610 	.word	0x00007610
    38ac:	000064f1 	.word	0x000064f1
    38b0:	0000762c 	.word	0x0000762c
    38b4:	00007634 	.word	0x00007634
    38b8:	00007648 	.word	0x00007648
    38bc:	00007660 	.word	0x00007660
    38c0:	0000766c 	.word	0x0000766c
    38c4:	00003311 	.word	0x00003311
    38c8:	00002f69 	.word	0x00002f69
    38cc:	00002fa5 	.word	0x00002fa5
    38d0:	0000300d 	.word	0x0000300d
    38d4:	00007678 	.word	0x00007678
    38d8:	0000767c 	.word	0x0000767c
    38dc:	00007680 	.word	0x00007680
    38e0:	00003091 	.word	0x00003091

000038e4 <atan2>:
    38e4:	b508      	push	{r3, lr}
    38e6:	f000 f801 	bl	38ec <__ieee754_atan2>
    38ea:	bd08      	pop	{r3, pc}

000038ec <__ieee754_atan2>:
    38ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ee:	464f      	mov	r7, r9
    38f0:	4646      	mov	r6, r8
    38f2:	1c0c      	adds	r4, r1, #0
    38f4:	4689      	mov	r9, r1
    38f6:	4251      	negs	r1, r2
    38f8:	b4c0      	push	{r6, r7}
    38fa:	1c05      	adds	r5, r0, #0
    38fc:	4311      	orrs	r1, r2
    38fe:	0058      	lsls	r0, r3, #1
    3900:	4e56      	ldr	r6, [pc, #344]	; (3a5c <__ieee754_atan2+0x170>)
    3902:	0840      	lsrs	r0, r0, #1
    3904:	0fc9      	lsrs	r1, r1, #31
    3906:	469c      	mov	ip, r3
    3908:	4301      	orrs	r1, r0
    390a:	42b1      	cmp	r1, r6
    390c:	d83d      	bhi.n	398a <__ieee754_atan2+0x9e>
    390e:	0061      	lsls	r1, r4, #1
    3910:	0849      	lsrs	r1, r1, #1
    3912:	4688      	mov	r8, r1
    3914:	4647      	mov	r7, r8
    3916:	4269      	negs	r1, r5
    3918:	4329      	orrs	r1, r5
    391a:	0fc9      	lsrs	r1, r1, #31
    391c:	4339      	orrs	r1, r7
    391e:	42b1      	cmp	r1, r6
    3920:	d833      	bhi.n	398a <__ieee754_atan2+0x9e>
    3922:	494f      	ldr	r1, [pc, #316]	; (3a60 <__ieee754_atan2+0x174>)
    3924:	1859      	adds	r1, r3, r1
    3926:	4311      	orrs	r1, r2
    3928:	d047      	beq.n	39ba <__ieee754_atan2+0xce>
    392a:	2602      	movs	r6, #2
    392c:	1799      	asrs	r1, r3, #30
    392e:	400e      	ands	r6, r1
    3930:	0fe1      	lsrs	r1, r4, #31
    3932:	430e      	orrs	r6, r1
    3934:	4641      	mov	r1, r8
    3936:	4329      	orrs	r1, r5
    3938:	d031      	beq.n	399e <__ieee754_atan2+0xb2>
    393a:	1c01      	adds	r1, r0, #0
    393c:	4311      	orrs	r1, r2
    393e:	d036      	beq.n	39ae <__ieee754_atan2+0xc2>
    3940:	4946      	ldr	r1, [pc, #280]	; (3a5c <__ieee754_atan2+0x170>)
    3942:	4288      	cmp	r0, r1
    3944:	d049      	beq.n	39da <__ieee754_atan2+0xee>
    3946:	4945      	ldr	r1, [pc, #276]	; (3a5c <__ieee754_atan2+0x170>)
    3948:	4588      	cmp	r8, r1
    394a:	d030      	beq.n	39ae <__ieee754_atan2+0xc2>
    394c:	4641      	mov	r1, r8
    394e:	1a08      	subs	r0, r1, r0
    3950:	1500      	asrs	r0, r0, #20
    3952:	283c      	cmp	r0, #60	; 0x3c
    3954:	dc3b      	bgt.n	39ce <__ieee754_atan2+0xe2>
    3956:	4661      	mov	r1, ip
    3958:	2900      	cmp	r1, #0
    395a:	db5a      	blt.n	3a12 <__ieee754_atan2+0x126>
    395c:	1c28      	adds	r0, r5, #0
    395e:	1c21      	adds	r1, r4, #0
    3960:	f001 f9fe 	bl	4d60 <__aeabi_ddiv>
    3964:	f000 fa34 	bl	3dd0 <fabs>
    3968:	f000 f894 	bl	3a94 <atan>
    396c:	2e01      	cmp	r6, #1
    396e:	d040      	beq.n	39f2 <__ieee754_atan2+0x106>
    3970:	2e02      	cmp	r6, #2
    3972:	d043      	beq.n	39fc <__ieee754_atan2+0x110>
    3974:	2e00      	cmp	r6, #0
    3976:	d00e      	beq.n	3996 <__ieee754_atan2+0xaa>
    3978:	4a3a      	ldr	r2, [pc, #232]	; (3a64 <__ieee754_atan2+0x178>)
    397a:	4b3b      	ldr	r3, [pc, #236]	; (3a68 <__ieee754_atan2+0x17c>)
    397c:	f002 f8c8 	bl	5b10 <__aeabi_dsub>
    3980:	4a3a      	ldr	r2, [pc, #232]	; (3a6c <__ieee754_atan2+0x180>)
    3982:	4b3b      	ldr	r3, [pc, #236]	; (3a70 <__ieee754_atan2+0x184>)
    3984:	f002 f8c4 	bl	5b10 <__aeabi_dsub>
    3988:	e005      	b.n	3996 <__ieee754_atan2+0xaa>
    398a:	1c10      	adds	r0, r2, #0
    398c:	1c19      	adds	r1, r3, #0
    398e:	1c2a      	adds	r2, r5, #0
    3990:	1c23      	adds	r3, r4, #0
    3992:	f000 febd 	bl	4710 <__aeabi_dadd>
    3996:	bc0c      	pop	{r2, r3}
    3998:	4690      	mov	r8, r2
    399a:	4699      	mov	r9, r3
    399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    399e:	2e02      	cmp	r6, #2
    39a0:	d018      	beq.n	39d4 <__ieee754_atan2+0xe8>
    39a2:	dc0f      	bgt.n	39c4 <__ieee754_atan2+0xd8>
    39a4:	2e00      	cmp	r6, #0
    39a6:	dbc8      	blt.n	393a <__ieee754_atan2+0x4e>
    39a8:	1c28      	adds	r0, r5, #0
    39aa:	1c21      	adds	r1, r4, #0
    39ac:	e7f3      	b.n	3996 <__ieee754_atan2+0xaa>
    39ae:	464b      	mov	r3, r9
    39b0:	482e      	ldr	r0, [pc, #184]	; (3a6c <__ieee754_atan2+0x180>)
    39b2:	2b00      	cmp	r3, #0
    39b4:	db1b      	blt.n	39ee <__ieee754_atan2+0x102>
    39b6:	492f      	ldr	r1, [pc, #188]	; (3a74 <__ieee754_atan2+0x188>)
    39b8:	e7ed      	b.n	3996 <__ieee754_atan2+0xaa>
    39ba:	1c28      	adds	r0, r5, #0
    39bc:	1c21      	adds	r1, r4, #0
    39be:	f000 f869 	bl	3a94 <atan>
    39c2:	e7e8      	b.n	3996 <__ieee754_atan2+0xaa>
    39c4:	2e03      	cmp	r6, #3
    39c6:	d1b8      	bne.n	393a <__ieee754_atan2+0x4e>
    39c8:	4828      	ldr	r0, [pc, #160]	; (3a6c <__ieee754_atan2+0x180>)
    39ca:	492b      	ldr	r1, [pc, #172]	; (3a78 <__ieee754_atan2+0x18c>)
    39cc:	e7e3      	b.n	3996 <__ieee754_atan2+0xaa>
    39ce:	4827      	ldr	r0, [pc, #156]	; (3a6c <__ieee754_atan2+0x180>)
    39d0:	4928      	ldr	r1, [pc, #160]	; (3a74 <__ieee754_atan2+0x188>)
    39d2:	e7cb      	b.n	396c <__ieee754_atan2+0x80>
    39d4:	4825      	ldr	r0, [pc, #148]	; (3a6c <__ieee754_atan2+0x180>)
    39d6:	4926      	ldr	r1, [pc, #152]	; (3a70 <__ieee754_atan2+0x184>)
    39d8:	e7dd      	b.n	3996 <__ieee754_atan2+0xaa>
    39da:	4580      	cmp	r8, r0
    39dc:	d01e      	beq.n	3a1c <__ieee754_atan2+0x130>
    39de:	2e01      	cmp	r6, #1
    39e0:	d02c      	beq.n	3a3c <__ieee754_atan2+0x150>
    39e2:	dd25      	ble.n	3a30 <__ieee754_atan2+0x144>
    39e4:	2e02      	cmp	r6, #2
    39e6:	d0f5      	beq.n	39d4 <__ieee754_atan2+0xe8>
    39e8:	2e03      	cmp	r6, #3
    39ea:	d0ed      	beq.n	39c8 <__ieee754_atan2+0xdc>
    39ec:	e7ab      	b.n	3946 <__ieee754_atan2+0x5a>
    39ee:	4923      	ldr	r1, [pc, #140]	; (3a7c <__ieee754_atan2+0x190>)
    39f0:	e7d1      	b.n	3996 <__ieee754_atan2+0xaa>
    39f2:	2480      	movs	r4, #128	; 0x80
    39f4:	0624      	lsls	r4, r4, #24
    39f6:	190b      	adds	r3, r1, r4
    39f8:	1c19      	adds	r1, r3, #0
    39fa:	e7cc      	b.n	3996 <__ieee754_atan2+0xaa>
    39fc:	4a19      	ldr	r2, [pc, #100]	; (3a64 <__ieee754_atan2+0x178>)
    39fe:	4b1a      	ldr	r3, [pc, #104]	; (3a68 <__ieee754_atan2+0x17c>)
    3a00:	f002 f886 	bl	5b10 <__aeabi_dsub>
    3a04:	1c02      	adds	r2, r0, #0
    3a06:	1c0b      	adds	r3, r1, #0
    3a08:	4818      	ldr	r0, [pc, #96]	; (3a6c <__ieee754_atan2+0x180>)
    3a0a:	4919      	ldr	r1, [pc, #100]	; (3a70 <__ieee754_atan2+0x184>)
    3a0c:	f002 f880 	bl	5b10 <__aeabi_dsub>
    3a10:	e7c1      	b.n	3996 <__ieee754_atan2+0xaa>
    3a12:	303c      	adds	r0, #60	; 0x3c
    3a14:	daa2      	bge.n	395c <__ieee754_atan2+0x70>
    3a16:	2000      	movs	r0, #0
    3a18:	2100      	movs	r1, #0
    3a1a:	e7a7      	b.n	396c <__ieee754_atan2+0x80>
    3a1c:	2e01      	cmp	r6, #1
    3a1e:	d019      	beq.n	3a54 <__ieee754_atan2+0x168>
    3a20:	dd10      	ble.n	3a44 <__ieee754_atan2+0x158>
    3a22:	2e02      	cmp	r6, #2
    3a24:	d013      	beq.n	3a4e <__ieee754_atan2+0x162>
    3a26:	2e03      	cmp	r6, #3
    3a28:	d1c1      	bne.n	39ae <__ieee754_atan2+0xc2>
    3a2a:	4815      	ldr	r0, [pc, #84]	; (3a80 <__ieee754_atan2+0x194>)
    3a2c:	4915      	ldr	r1, [pc, #84]	; (3a84 <__ieee754_atan2+0x198>)
    3a2e:	e7b2      	b.n	3996 <__ieee754_atan2+0xaa>
    3a30:	2e00      	cmp	r6, #0
    3a32:	d000      	beq.n	3a36 <__ieee754_atan2+0x14a>
    3a34:	e787      	b.n	3946 <__ieee754_atan2+0x5a>
    3a36:	2000      	movs	r0, #0
    3a38:	2100      	movs	r1, #0
    3a3a:	e7ac      	b.n	3996 <__ieee754_atan2+0xaa>
    3a3c:	2180      	movs	r1, #128	; 0x80
    3a3e:	2000      	movs	r0, #0
    3a40:	0609      	lsls	r1, r1, #24
    3a42:	e7a8      	b.n	3996 <__ieee754_atan2+0xaa>
    3a44:	2e00      	cmp	r6, #0
    3a46:	d1b2      	bne.n	39ae <__ieee754_atan2+0xc2>
    3a48:	4808      	ldr	r0, [pc, #32]	; (3a6c <__ieee754_atan2+0x180>)
    3a4a:	490f      	ldr	r1, [pc, #60]	; (3a88 <__ieee754_atan2+0x19c>)
    3a4c:	e7a3      	b.n	3996 <__ieee754_atan2+0xaa>
    3a4e:	480c      	ldr	r0, [pc, #48]	; (3a80 <__ieee754_atan2+0x194>)
    3a50:	490e      	ldr	r1, [pc, #56]	; (3a8c <__ieee754_atan2+0x1a0>)
    3a52:	e7a0      	b.n	3996 <__ieee754_atan2+0xaa>
    3a54:	4805      	ldr	r0, [pc, #20]	; (3a6c <__ieee754_atan2+0x180>)
    3a56:	490e      	ldr	r1, [pc, #56]	; (3a90 <__ieee754_atan2+0x1a4>)
    3a58:	e79d      	b.n	3996 <__ieee754_atan2+0xaa>
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	7ff00000 	.word	0x7ff00000
    3a60:	c0100000 	.word	0xc0100000
    3a64:	33145c07 	.word	0x33145c07
    3a68:	3ca1a626 	.word	0x3ca1a626
    3a6c:	54442d18 	.word	0x54442d18
    3a70:	400921fb 	.word	0x400921fb
    3a74:	3ff921fb 	.word	0x3ff921fb
    3a78:	c00921fb 	.word	0xc00921fb
    3a7c:	bff921fb 	.word	0xbff921fb
    3a80:	7f3321d2 	.word	0x7f3321d2
    3a84:	c002d97c 	.word	0xc002d97c
    3a88:	3fe921fb 	.word	0x3fe921fb
    3a8c:	4002d97c 	.word	0x4002d97c
    3a90:	bfe921fb 	.word	0xbfe921fb

00003a94 <atan>:
    3a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a96:	4656      	mov	r6, sl
    3a98:	464d      	mov	r5, r9
    3a9a:	4644      	mov	r4, r8
    3a9c:	465f      	mov	r7, fp
    3a9e:	4ba5      	ldr	r3, [pc, #660]	; (3d34 <atan+0x2a0>)
    3aa0:	b4f0      	push	{r4, r5, r6, r7}
    3aa2:	004e      	lsls	r6, r1, #1
    3aa4:	4680      	mov	r8, r0
    3aa6:	4689      	mov	r9, r1
    3aa8:	468a      	mov	sl, r1
    3aaa:	0876      	lsrs	r6, r6, #1
    3aac:	429e      	cmp	r6, r3
    3aae:	dd0c      	ble.n	3aca <atan+0x36>
    3ab0:	4ba1      	ldr	r3, [pc, #644]	; (3d38 <atan+0x2a4>)
    3ab2:	429e      	cmp	r6, r3
    3ab4:	dd00      	ble.n	3ab8 <atan+0x24>
    3ab6:	e0a0      	b.n	3bfa <atan+0x166>
    3ab8:	d100      	bne.n	3abc <atan+0x28>
    3aba:	e09b      	b.n	3bf4 <atan+0x160>
    3abc:	4653      	mov	r3, sl
    3abe:	2b00      	cmp	r3, #0
    3ac0:	dc00      	bgt.n	3ac4 <atan+0x30>
    3ac2:	e0de      	b.n	3c82 <atan+0x1ee>
    3ac4:	4b9d      	ldr	r3, [pc, #628]	; (3d3c <atan+0x2a8>)
    3ac6:	4a9e      	ldr	r2, [pc, #632]	; (3d40 <atan+0x2ac>)
    3ac8:	e09f      	b.n	3c0a <atan+0x176>
    3aca:	4b9e      	ldr	r3, [pc, #632]	; (3d44 <atan+0x2b0>)
    3acc:	429e      	cmp	r6, r3
    3ace:	dd00      	ble.n	3ad2 <atan+0x3e>
    3ad0:	e0b1      	b.n	3c36 <atan+0x1a2>
    3ad2:	4b9d      	ldr	r3, [pc, #628]	; (3d48 <atan+0x2b4>)
    3ad4:	429e      	cmp	r6, r3
    3ad6:	dc00      	bgt.n	3ada <atan+0x46>
    3ad8:	e09f      	b.n	3c1a <atan+0x186>
    3ada:	2301      	movs	r3, #1
    3adc:	425b      	negs	r3, r3
    3ade:	469b      	mov	fp, r3
    3ae0:	4642      	mov	r2, r8
    3ae2:	464b      	mov	r3, r9
    3ae4:	4640      	mov	r0, r8
    3ae6:	4649      	mov	r1, r9
    3ae8:	f001 fd78 	bl	55dc <__aeabi_dmul>
    3aec:	1c06      	adds	r6, r0, #0
    3aee:	1c0f      	adds	r7, r1, #0
    3af0:	1c32      	adds	r2, r6, #0
    3af2:	1c3b      	adds	r3, r7, #0
    3af4:	f001 fd72 	bl	55dc <__aeabi_dmul>
    3af8:	1c04      	adds	r4, r0, #0
    3afa:	1c0d      	adds	r5, r1, #0
    3afc:	4a93      	ldr	r2, [pc, #588]	; (3d4c <atan+0x2b8>)
    3afe:	4b94      	ldr	r3, [pc, #592]	; (3d50 <atan+0x2bc>)
    3b00:	f001 fd6c 	bl	55dc <__aeabi_dmul>
    3b04:	4a93      	ldr	r2, [pc, #588]	; (3d54 <atan+0x2c0>)
    3b06:	4b94      	ldr	r3, [pc, #592]	; (3d58 <atan+0x2c4>)
    3b08:	f000 fe02 	bl	4710 <__aeabi_dadd>
    3b0c:	1c22      	adds	r2, r4, #0
    3b0e:	1c2b      	adds	r3, r5, #0
    3b10:	f001 fd64 	bl	55dc <__aeabi_dmul>
    3b14:	4a91      	ldr	r2, [pc, #580]	; (3d5c <atan+0x2c8>)
    3b16:	4b92      	ldr	r3, [pc, #584]	; (3d60 <atan+0x2cc>)
    3b18:	f000 fdfa 	bl	4710 <__aeabi_dadd>
    3b1c:	1c22      	adds	r2, r4, #0
    3b1e:	1c2b      	adds	r3, r5, #0
    3b20:	f001 fd5c 	bl	55dc <__aeabi_dmul>
    3b24:	4a8f      	ldr	r2, [pc, #572]	; (3d64 <atan+0x2d0>)
    3b26:	4b90      	ldr	r3, [pc, #576]	; (3d68 <atan+0x2d4>)
    3b28:	f000 fdf2 	bl	4710 <__aeabi_dadd>
    3b2c:	1c22      	adds	r2, r4, #0
    3b2e:	1c2b      	adds	r3, r5, #0
    3b30:	f001 fd54 	bl	55dc <__aeabi_dmul>
    3b34:	4a8d      	ldr	r2, [pc, #564]	; (3d6c <atan+0x2d8>)
    3b36:	4b8e      	ldr	r3, [pc, #568]	; (3d70 <atan+0x2dc>)
    3b38:	f000 fdea 	bl	4710 <__aeabi_dadd>
    3b3c:	1c22      	adds	r2, r4, #0
    3b3e:	1c2b      	adds	r3, r5, #0
    3b40:	f001 fd4c 	bl	55dc <__aeabi_dmul>
    3b44:	4a8b      	ldr	r2, [pc, #556]	; (3d74 <atan+0x2e0>)
    3b46:	4b8c      	ldr	r3, [pc, #560]	; (3d78 <atan+0x2e4>)
    3b48:	f000 fde2 	bl	4710 <__aeabi_dadd>
    3b4c:	1c32      	adds	r2, r6, #0
    3b4e:	1c3b      	adds	r3, r7, #0
    3b50:	f001 fd44 	bl	55dc <__aeabi_dmul>
    3b54:	4a89      	ldr	r2, [pc, #548]	; (3d7c <atan+0x2e8>)
    3b56:	4b8a      	ldr	r3, [pc, #552]	; (3d80 <atan+0x2ec>)
    3b58:	1c06      	adds	r6, r0, #0
    3b5a:	1c0f      	adds	r7, r1, #0
    3b5c:	1c20      	adds	r0, r4, #0
    3b5e:	1c29      	adds	r1, r5, #0
    3b60:	f001 fd3c 	bl	55dc <__aeabi_dmul>
    3b64:	4a87      	ldr	r2, [pc, #540]	; (3d84 <atan+0x2f0>)
    3b66:	4b88      	ldr	r3, [pc, #544]	; (3d88 <atan+0x2f4>)
    3b68:	f001 ffd2 	bl	5b10 <__aeabi_dsub>
    3b6c:	1c22      	adds	r2, r4, #0
    3b6e:	1c2b      	adds	r3, r5, #0
    3b70:	f001 fd34 	bl	55dc <__aeabi_dmul>
    3b74:	4a85      	ldr	r2, [pc, #532]	; (3d8c <atan+0x2f8>)
    3b76:	4b86      	ldr	r3, [pc, #536]	; (3d90 <atan+0x2fc>)
    3b78:	f001 ffca 	bl	5b10 <__aeabi_dsub>
    3b7c:	1c22      	adds	r2, r4, #0
    3b7e:	1c2b      	adds	r3, r5, #0
    3b80:	f001 fd2c 	bl	55dc <__aeabi_dmul>
    3b84:	4a83      	ldr	r2, [pc, #524]	; (3d94 <atan+0x300>)
    3b86:	4b84      	ldr	r3, [pc, #528]	; (3d98 <atan+0x304>)
    3b88:	f001 ffc2 	bl	5b10 <__aeabi_dsub>
    3b8c:	1c22      	adds	r2, r4, #0
    3b8e:	1c2b      	adds	r3, r5, #0
    3b90:	f001 fd24 	bl	55dc <__aeabi_dmul>
    3b94:	4a81      	ldr	r2, [pc, #516]	; (3d9c <atan+0x308>)
    3b96:	4b82      	ldr	r3, [pc, #520]	; (3da0 <atan+0x30c>)
    3b98:	f001 ffba 	bl	5b10 <__aeabi_dsub>
    3b9c:	1c22      	adds	r2, r4, #0
    3b9e:	1c2b      	adds	r3, r5, #0
    3ba0:	f001 fd1c 	bl	55dc <__aeabi_dmul>
    3ba4:	1c0b      	adds	r3, r1, #0
    3ba6:	4659      	mov	r1, fp
    3ba8:	1c02      	adds	r2, r0, #0
    3baa:	3101      	adds	r1, #1
    3bac:	d100      	bne.n	3bb0 <atan+0x11c>
    3bae:	e070      	b.n	3c92 <atan+0x1fe>
    3bb0:	4659      	mov	r1, fp
    3bb2:	1c30      	adds	r0, r6, #0
    3bb4:	00cc      	lsls	r4, r1, #3
    3bb6:	1c39      	adds	r1, r7, #0
    3bb8:	f000 fdaa 	bl	4710 <__aeabi_dadd>
    3bbc:	4642      	mov	r2, r8
    3bbe:	464b      	mov	r3, r9
    3bc0:	f001 fd0c 	bl	55dc <__aeabi_dmul>
    3bc4:	4d77      	ldr	r5, [pc, #476]	; (3da4 <atan+0x310>)
    3bc6:	4b78      	ldr	r3, [pc, #480]	; (3da8 <atan+0x314>)
    3bc8:	192d      	adds	r5, r5, r4
    3bca:	191c      	adds	r4, r3, r4
    3bcc:	6822      	ldr	r2, [r4, #0]
    3bce:	6863      	ldr	r3, [r4, #4]
    3bd0:	f001 ff9e 	bl	5b10 <__aeabi_dsub>
    3bd4:	4642      	mov	r2, r8
    3bd6:	464b      	mov	r3, r9
    3bd8:	f001 ff9a 	bl	5b10 <__aeabi_dsub>
    3bdc:	1c02      	adds	r2, r0, #0
    3bde:	1c0b      	adds	r3, r1, #0
    3be0:	6828      	ldr	r0, [r5, #0]
    3be2:	6869      	ldr	r1, [r5, #4]
    3be4:	f001 ff94 	bl	5b10 <__aeabi_dsub>
    3be8:	4653      	mov	r3, sl
    3bea:	1c0a      	adds	r2, r1, #0
    3bec:	2b00      	cmp	r3, #0
    3bee:	db4b      	blt.n	3c88 <atan+0x1f4>
    3bf0:	1c03      	adds	r3, r0, #0
    3bf2:	e00a      	b.n	3c0a <atan+0x176>
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d100      	bne.n	3bfa <atan+0x166>
    3bf8:	e760      	b.n	3abc <atan+0x28>
    3bfa:	4642      	mov	r2, r8
    3bfc:	464b      	mov	r3, r9
    3bfe:	4640      	mov	r0, r8
    3c00:	4649      	mov	r1, r9
    3c02:	f000 fd85 	bl	4710 <__aeabi_dadd>
    3c06:	1c03      	adds	r3, r0, #0
    3c08:	1c0a      	adds	r2, r1, #0
    3c0a:	1c18      	adds	r0, r3, #0
    3c0c:	1c11      	adds	r1, r2, #0
    3c0e:	bc3c      	pop	{r2, r3, r4, r5}
    3c10:	4690      	mov	r8, r2
    3c12:	4699      	mov	r9, r3
    3c14:	46a2      	mov	sl, r4
    3c16:	46ab      	mov	fp, r5
    3c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c1a:	4a64      	ldr	r2, [pc, #400]	; (3dac <atan+0x318>)
    3c1c:	4b64      	ldr	r3, [pc, #400]	; (3db0 <atan+0x31c>)
    3c1e:	f000 fd77 	bl	4710 <__aeabi_dadd>
    3c22:	2200      	movs	r2, #0
    3c24:	4b63      	ldr	r3, [pc, #396]	; (3db4 <atan+0x320>)
    3c26:	f000 f993 	bl	3f50 <__aeabi_dcmpgt>
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d100      	bne.n	3c30 <atan+0x19c>
    3c2e:	e754      	b.n	3ada <atan+0x46>
    3c30:	4643      	mov	r3, r8
    3c32:	464a      	mov	r2, r9
    3c34:	e7e9      	b.n	3c0a <atan+0x176>
    3c36:	f000 f8cb 	bl	3dd0 <fabs>
    3c3a:	4b5f      	ldr	r3, [pc, #380]	; (3db8 <atan+0x324>)
    3c3c:	1c04      	adds	r4, r0, #0
    3c3e:	1c0d      	adds	r5, r1, #0
    3c40:	429e      	cmp	r6, r3
    3c42:	dc37      	bgt.n	3cb4 <atan+0x220>
    3c44:	4b5d      	ldr	r3, [pc, #372]	; (3dbc <atan+0x328>)
    3c46:	429e      	cmp	r6, r3
    3c48:	dc5d      	bgt.n	3d06 <atan+0x272>
    3c4a:	1c22      	adds	r2, r4, #0
    3c4c:	1c2b      	adds	r3, r5, #0
    3c4e:	f000 fd5f 	bl	4710 <__aeabi_dadd>
    3c52:	2200      	movs	r2, #0
    3c54:	4b57      	ldr	r3, [pc, #348]	; (3db4 <atan+0x320>)
    3c56:	f001 ff5b 	bl	5b10 <__aeabi_dsub>
    3c5a:	2380      	movs	r3, #128	; 0x80
    3c5c:	1c06      	adds	r6, r0, #0
    3c5e:	1c0f      	adds	r7, r1, #0
    3c60:	2200      	movs	r2, #0
    3c62:	05db      	lsls	r3, r3, #23
    3c64:	1c20      	adds	r0, r4, #0
    3c66:	1c29      	adds	r1, r5, #0
    3c68:	f000 fd52 	bl	4710 <__aeabi_dadd>
    3c6c:	1c0b      	adds	r3, r1, #0
    3c6e:	1c02      	adds	r2, r0, #0
    3c70:	1c39      	adds	r1, r7, #0
    3c72:	1c30      	adds	r0, r6, #0
    3c74:	f001 f874 	bl	4d60 <__aeabi_ddiv>
    3c78:	2300      	movs	r3, #0
    3c7a:	4680      	mov	r8, r0
    3c7c:	4689      	mov	r9, r1
    3c7e:	469b      	mov	fp, r3
    3c80:	e72e      	b.n	3ae0 <atan+0x4c>
    3c82:	4b2e      	ldr	r3, [pc, #184]	; (3d3c <atan+0x2a8>)
    3c84:	4a4e      	ldr	r2, [pc, #312]	; (3dc0 <atan+0x32c>)
    3c86:	e7c0      	b.n	3c0a <atan+0x176>
    3c88:	2280      	movs	r2, #128	; 0x80
    3c8a:	0612      	lsls	r2, r2, #24
    3c8c:	1c03      	adds	r3, r0, #0
    3c8e:	188a      	adds	r2, r1, r2
    3c90:	e7bb      	b.n	3c0a <atan+0x176>
    3c92:	1c30      	adds	r0, r6, #0
    3c94:	1c39      	adds	r1, r7, #0
    3c96:	f000 fd3b 	bl	4710 <__aeabi_dadd>
    3c9a:	4642      	mov	r2, r8
    3c9c:	464b      	mov	r3, r9
    3c9e:	f001 fc9d 	bl	55dc <__aeabi_dmul>
    3ca2:	1c02      	adds	r2, r0, #0
    3ca4:	1c0b      	adds	r3, r1, #0
    3ca6:	4640      	mov	r0, r8
    3ca8:	4649      	mov	r1, r9
    3caa:	f001 ff31 	bl	5b10 <__aeabi_dsub>
    3cae:	1c03      	adds	r3, r0, #0
    3cb0:	1c0a      	adds	r2, r1, #0
    3cb2:	e7aa      	b.n	3c0a <atan+0x176>
    3cb4:	4b43      	ldr	r3, [pc, #268]	; (3dc4 <atan+0x330>)
    3cb6:	429e      	cmp	r6, r3
    3cb8:	dc1a      	bgt.n	3cf0 <atan+0x25c>
    3cba:	2200      	movs	r2, #0
    3cbc:	4b42      	ldr	r3, [pc, #264]	; (3dc8 <atan+0x334>)
    3cbe:	f001 ff27 	bl	5b10 <__aeabi_dsub>
    3cc2:	2200      	movs	r2, #0
    3cc4:	1c06      	adds	r6, r0, #0
    3cc6:	1c0f      	adds	r7, r1, #0
    3cc8:	4b3f      	ldr	r3, [pc, #252]	; (3dc8 <atan+0x334>)
    3cca:	1c20      	adds	r0, r4, #0
    3ccc:	1c29      	adds	r1, r5, #0
    3cce:	f001 fc85 	bl	55dc <__aeabi_dmul>
    3cd2:	2200      	movs	r2, #0
    3cd4:	4b37      	ldr	r3, [pc, #220]	; (3db4 <atan+0x320>)
    3cd6:	f000 fd1b 	bl	4710 <__aeabi_dadd>
    3cda:	1c0b      	adds	r3, r1, #0
    3cdc:	1c02      	adds	r2, r0, #0
    3cde:	1c39      	adds	r1, r7, #0
    3ce0:	1c30      	adds	r0, r6, #0
    3ce2:	f001 f83d 	bl	4d60 <__aeabi_ddiv>
    3ce6:	2302      	movs	r3, #2
    3ce8:	4680      	mov	r8, r0
    3cea:	4689      	mov	r9, r1
    3cec:	469b      	mov	fp, r3
    3cee:	e6f7      	b.n	3ae0 <atan+0x4c>
    3cf0:	1c2b      	adds	r3, r5, #0
    3cf2:	2000      	movs	r0, #0
    3cf4:	4935      	ldr	r1, [pc, #212]	; (3dcc <atan+0x338>)
    3cf6:	1c22      	adds	r2, r4, #0
    3cf8:	f001 f832 	bl	4d60 <__aeabi_ddiv>
    3cfc:	2303      	movs	r3, #3
    3cfe:	4680      	mov	r8, r0
    3d00:	4689      	mov	r9, r1
    3d02:	469b      	mov	fp, r3
    3d04:	e6ec      	b.n	3ae0 <atan+0x4c>
    3d06:	2200      	movs	r2, #0
    3d08:	4b2a      	ldr	r3, [pc, #168]	; (3db4 <atan+0x320>)
    3d0a:	f001 ff01 	bl	5b10 <__aeabi_dsub>
    3d0e:	2200      	movs	r2, #0
    3d10:	1c06      	adds	r6, r0, #0
    3d12:	1c0f      	adds	r7, r1, #0
    3d14:	4b27      	ldr	r3, [pc, #156]	; (3db4 <atan+0x320>)
    3d16:	1c20      	adds	r0, r4, #0
    3d18:	1c29      	adds	r1, r5, #0
    3d1a:	f000 fcf9 	bl	4710 <__aeabi_dadd>
    3d1e:	1c0b      	adds	r3, r1, #0
    3d20:	1c02      	adds	r2, r0, #0
    3d22:	1c39      	adds	r1, r7, #0
    3d24:	1c30      	adds	r0, r6, #0
    3d26:	f001 f81b 	bl	4d60 <__aeabi_ddiv>
    3d2a:	2301      	movs	r3, #1
    3d2c:	4680      	mov	r8, r0
    3d2e:	4689      	mov	r9, r1
    3d30:	469b      	mov	fp, r3
    3d32:	e6d5      	b.n	3ae0 <atan+0x4c>
    3d34:	440fffff 	.word	0x440fffff
    3d38:	7ff00000 	.word	0x7ff00000
    3d3c:	54442d18 	.word	0x54442d18
    3d40:	3ff921fb 	.word	0x3ff921fb
    3d44:	3fdbffff 	.word	0x3fdbffff
    3d48:	3e1fffff 	.word	0x3e1fffff
    3d4c:	e322da11 	.word	0xe322da11
    3d50:	3f90ad3a 	.word	0x3f90ad3a
    3d54:	24760deb 	.word	0x24760deb
    3d58:	3fa97b4b 	.word	0x3fa97b4b
    3d5c:	a0d03d51 	.word	0xa0d03d51
    3d60:	3fb10d66 	.word	0x3fb10d66
    3d64:	c54c206e 	.word	0xc54c206e
    3d68:	3fb745cd 	.word	0x3fb745cd
    3d6c:	920083ff 	.word	0x920083ff
    3d70:	3fc24924 	.word	0x3fc24924
    3d74:	5555550d 	.word	0x5555550d
    3d78:	3fd55555 	.word	0x3fd55555
    3d7c:	2c6a6c2f 	.word	0x2c6a6c2f
    3d80:	bfa2b444 	.word	0xbfa2b444
    3d84:	52defd9a 	.word	0x52defd9a
    3d88:	3fadde2d 	.word	0x3fadde2d
    3d8c:	af749a6d 	.word	0xaf749a6d
    3d90:	3fb3b0f2 	.word	0x3fb3b0f2
    3d94:	fe231671 	.word	0xfe231671
    3d98:	3fbc71c6 	.word	0x3fbc71c6
    3d9c:	9998ebc4 	.word	0x9998ebc4
    3da0:	3fc99999 	.word	0x3fc99999
    3da4:	000076b0 	.word	0x000076b0
    3da8:	00007690 	.word	0x00007690
    3dac:	8800759c 	.word	0x8800759c
    3db0:	7e37e43c 	.word	0x7e37e43c
    3db4:	3ff00000 	.word	0x3ff00000
    3db8:	3ff2ffff 	.word	0x3ff2ffff
    3dbc:	3fe5ffff 	.word	0x3fe5ffff
    3dc0:	bff921fb 	.word	0xbff921fb
    3dc4:	40037fff 	.word	0x40037fff
    3dc8:	3ff80000 	.word	0x3ff80000
    3dcc:	bff00000 	.word	0xbff00000

00003dd0 <fabs>:
    3dd0:	0049      	lsls	r1, r1, #1
    3dd2:	084b      	lsrs	r3, r1, #1
    3dd4:	1c19      	adds	r1, r3, #0
    3dd6:	4770      	bx	lr

00003dd8 <__aeabi_uidiv>:
    3dd8:	2200      	movs	r2, #0
    3dda:	0843      	lsrs	r3, r0, #1
    3ddc:	428b      	cmp	r3, r1
    3dde:	d374      	bcc.n	3eca <__aeabi_uidiv+0xf2>
    3de0:	0903      	lsrs	r3, r0, #4
    3de2:	428b      	cmp	r3, r1
    3de4:	d35f      	bcc.n	3ea6 <__aeabi_uidiv+0xce>
    3de6:	0a03      	lsrs	r3, r0, #8
    3de8:	428b      	cmp	r3, r1
    3dea:	d344      	bcc.n	3e76 <__aeabi_uidiv+0x9e>
    3dec:	0b03      	lsrs	r3, r0, #12
    3dee:	428b      	cmp	r3, r1
    3df0:	d328      	bcc.n	3e44 <__aeabi_uidiv+0x6c>
    3df2:	0c03      	lsrs	r3, r0, #16
    3df4:	428b      	cmp	r3, r1
    3df6:	d30d      	bcc.n	3e14 <__aeabi_uidiv+0x3c>
    3df8:	22ff      	movs	r2, #255	; 0xff
    3dfa:	0209      	lsls	r1, r1, #8
    3dfc:	ba12      	rev	r2, r2
    3dfe:	0c03      	lsrs	r3, r0, #16
    3e00:	428b      	cmp	r3, r1
    3e02:	d302      	bcc.n	3e0a <__aeabi_uidiv+0x32>
    3e04:	1212      	asrs	r2, r2, #8
    3e06:	0209      	lsls	r1, r1, #8
    3e08:	d065      	beq.n	3ed6 <__aeabi_uidiv+0xfe>
    3e0a:	0b03      	lsrs	r3, r0, #12
    3e0c:	428b      	cmp	r3, r1
    3e0e:	d319      	bcc.n	3e44 <__aeabi_uidiv+0x6c>
    3e10:	e000      	b.n	3e14 <__aeabi_uidiv+0x3c>
    3e12:	0a09      	lsrs	r1, r1, #8
    3e14:	0bc3      	lsrs	r3, r0, #15
    3e16:	428b      	cmp	r3, r1
    3e18:	d301      	bcc.n	3e1e <__aeabi_uidiv+0x46>
    3e1a:	03cb      	lsls	r3, r1, #15
    3e1c:	1ac0      	subs	r0, r0, r3
    3e1e:	4152      	adcs	r2, r2
    3e20:	0b83      	lsrs	r3, r0, #14
    3e22:	428b      	cmp	r3, r1
    3e24:	d301      	bcc.n	3e2a <__aeabi_uidiv+0x52>
    3e26:	038b      	lsls	r3, r1, #14
    3e28:	1ac0      	subs	r0, r0, r3
    3e2a:	4152      	adcs	r2, r2
    3e2c:	0b43      	lsrs	r3, r0, #13
    3e2e:	428b      	cmp	r3, r1
    3e30:	d301      	bcc.n	3e36 <__aeabi_uidiv+0x5e>
    3e32:	034b      	lsls	r3, r1, #13
    3e34:	1ac0      	subs	r0, r0, r3
    3e36:	4152      	adcs	r2, r2
    3e38:	0b03      	lsrs	r3, r0, #12
    3e3a:	428b      	cmp	r3, r1
    3e3c:	d301      	bcc.n	3e42 <__aeabi_uidiv+0x6a>
    3e3e:	030b      	lsls	r3, r1, #12
    3e40:	1ac0      	subs	r0, r0, r3
    3e42:	4152      	adcs	r2, r2
    3e44:	0ac3      	lsrs	r3, r0, #11
    3e46:	428b      	cmp	r3, r1
    3e48:	d301      	bcc.n	3e4e <__aeabi_uidiv+0x76>
    3e4a:	02cb      	lsls	r3, r1, #11
    3e4c:	1ac0      	subs	r0, r0, r3
    3e4e:	4152      	adcs	r2, r2
    3e50:	0a83      	lsrs	r3, r0, #10
    3e52:	428b      	cmp	r3, r1
    3e54:	d301      	bcc.n	3e5a <__aeabi_uidiv+0x82>
    3e56:	028b      	lsls	r3, r1, #10
    3e58:	1ac0      	subs	r0, r0, r3
    3e5a:	4152      	adcs	r2, r2
    3e5c:	0a43      	lsrs	r3, r0, #9
    3e5e:	428b      	cmp	r3, r1
    3e60:	d301      	bcc.n	3e66 <__aeabi_uidiv+0x8e>
    3e62:	024b      	lsls	r3, r1, #9
    3e64:	1ac0      	subs	r0, r0, r3
    3e66:	4152      	adcs	r2, r2
    3e68:	0a03      	lsrs	r3, r0, #8
    3e6a:	428b      	cmp	r3, r1
    3e6c:	d301      	bcc.n	3e72 <__aeabi_uidiv+0x9a>
    3e6e:	020b      	lsls	r3, r1, #8
    3e70:	1ac0      	subs	r0, r0, r3
    3e72:	4152      	adcs	r2, r2
    3e74:	d2cd      	bcs.n	3e12 <__aeabi_uidiv+0x3a>
    3e76:	09c3      	lsrs	r3, r0, #7
    3e78:	428b      	cmp	r3, r1
    3e7a:	d301      	bcc.n	3e80 <__aeabi_uidiv+0xa8>
    3e7c:	01cb      	lsls	r3, r1, #7
    3e7e:	1ac0      	subs	r0, r0, r3
    3e80:	4152      	adcs	r2, r2
    3e82:	0983      	lsrs	r3, r0, #6
    3e84:	428b      	cmp	r3, r1
    3e86:	d301      	bcc.n	3e8c <__aeabi_uidiv+0xb4>
    3e88:	018b      	lsls	r3, r1, #6
    3e8a:	1ac0      	subs	r0, r0, r3
    3e8c:	4152      	adcs	r2, r2
    3e8e:	0943      	lsrs	r3, r0, #5
    3e90:	428b      	cmp	r3, r1
    3e92:	d301      	bcc.n	3e98 <__aeabi_uidiv+0xc0>
    3e94:	014b      	lsls	r3, r1, #5
    3e96:	1ac0      	subs	r0, r0, r3
    3e98:	4152      	adcs	r2, r2
    3e9a:	0903      	lsrs	r3, r0, #4
    3e9c:	428b      	cmp	r3, r1
    3e9e:	d301      	bcc.n	3ea4 <__aeabi_uidiv+0xcc>
    3ea0:	010b      	lsls	r3, r1, #4
    3ea2:	1ac0      	subs	r0, r0, r3
    3ea4:	4152      	adcs	r2, r2
    3ea6:	08c3      	lsrs	r3, r0, #3
    3ea8:	428b      	cmp	r3, r1
    3eaa:	d301      	bcc.n	3eb0 <__aeabi_uidiv+0xd8>
    3eac:	00cb      	lsls	r3, r1, #3
    3eae:	1ac0      	subs	r0, r0, r3
    3eb0:	4152      	adcs	r2, r2
    3eb2:	0883      	lsrs	r3, r0, #2
    3eb4:	428b      	cmp	r3, r1
    3eb6:	d301      	bcc.n	3ebc <__aeabi_uidiv+0xe4>
    3eb8:	008b      	lsls	r3, r1, #2
    3eba:	1ac0      	subs	r0, r0, r3
    3ebc:	4152      	adcs	r2, r2
    3ebe:	0843      	lsrs	r3, r0, #1
    3ec0:	428b      	cmp	r3, r1
    3ec2:	d301      	bcc.n	3ec8 <__aeabi_uidiv+0xf0>
    3ec4:	004b      	lsls	r3, r1, #1
    3ec6:	1ac0      	subs	r0, r0, r3
    3ec8:	4152      	adcs	r2, r2
    3eca:	1a41      	subs	r1, r0, r1
    3ecc:	d200      	bcs.n	3ed0 <__aeabi_uidiv+0xf8>
    3ece:	4601      	mov	r1, r0
    3ed0:	4152      	adcs	r2, r2
    3ed2:	4610      	mov	r0, r2
    3ed4:	4770      	bx	lr
    3ed6:	e7ff      	b.n	3ed8 <__aeabi_uidiv+0x100>
    3ed8:	b501      	push	{r0, lr}
    3eda:	2000      	movs	r0, #0
    3edc:	f000 f80c 	bl	3ef8 <__aeabi_idiv0>
    3ee0:	bd02      	pop	{r1, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)

00003ee4 <__aeabi_uidivmod>:
    3ee4:	2900      	cmp	r1, #0
    3ee6:	d0f7      	beq.n	3ed8 <__aeabi_uidiv+0x100>
    3ee8:	b503      	push	{r0, r1, lr}
    3eea:	f7ff ff75 	bl	3dd8 <__aeabi_uidiv>
    3eee:	bc0e      	pop	{r1, r2, r3}
    3ef0:	4342      	muls	r2, r0
    3ef2:	1a89      	subs	r1, r1, r2
    3ef4:	4718      	bx	r3
    3ef6:	46c0      	nop			; (mov r8, r8)

00003ef8 <__aeabi_idiv0>:
    3ef8:	4770      	bx	lr
    3efa:	46c0      	nop			; (mov r8, r8)

00003efc <__aeabi_cdrcmple>:
    3efc:	4684      	mov	ip, r0
    3efe:	1c10      	adds	r0, r2, #0
    3f00:	4662      	mov	r2, ip
    3f02:	468c      	mov	ip, r1
    3f04:	1c19      	adds	r1, r3, #0
    3f06:	4663      	mov	r3, ip
    3f08:	e000      	b.n	3f0c <__aeabi_cdcmpeq>
    3f0a:	46c0      	nop			; (mov r8, r8)

00003f0c <__aeabi_cdcmpeq>:
    3f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3f0e:	f001 faff 	bl	5510 <__ledf2>
    3f12:	2800      	cmp	r0, #0
    3f14:	d401      	bmi.n	3f1a <__aeabi_cdcmpeq+0xe>
    3f16:	2100      	movs	r1, #0
    3f18:	42c8      	cmn	r0, r1
    3f1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003f1c <__aeabi_dcmpeq>:
    3f1c:	b510      	push	{r4, lr}
    3f1e:	f001 fa43 	bl	53a8 <__eqdf2>
    3f22:	4240      	negs	r0, r0
    3f24:	3001      	adds	r0, #1
    3f26:	bd10      	pop	{r4, pc}

00003f28 <__aeabi_dcmplt>:
    3f28:	b510      	push	{r4, lr}
    3f2a:	f001 faf1 	bl	5510 <__ledf2>
    3f2e:	2800      	cmp	r0, #0
    3f30:	db01      	blt.n	3f36 <__aeabi_dcmplt+0xe>
    3f32:	2000      	movs	r0, #0
    3f34:	bd10      	pop	{r4, pc}
    3f36:	2001      	movs	r0, #1
    3f38:	bd10      	pop	{r4, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)

00003f3c <__aeabi_dcmple>:
    3f3c:	b510      	push	{r4, lr}
    3f3e:	f001 fae7 	bl	5510 <__ledf2>
    3f42:	2800      	cmp	r0, #0
    3f44:	dd01      	ble.n	3f4a <__aeabi_dcmple+0xe>
    3f46:	2000      	movs	r0, #0
    3f48:	bd10      	pop	{r4, pc}
    3f4a:	2001      	movs	r0, #1
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)

00003f50 <__aeabi_dcmpgt>:
    3f50:	b510      	push	{r4, lr}
    3f52:	f001 fa6d 	bl	5430 <__gedf2>
    3f56:	2800      	cmp	r0, #0
    3f58:	dc01      	bgt.n	3f5e <__aeabi_dcmpgt+0xe>
    3f5a:	2000      	movs	r0, #0
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	2001      	movs	r0, #1
    3f60:	bd10      	pop	{r4, pc}
    3f62:	46c0      	nop			; (mov r8, r8)

00003f64 <__aeabi_dcmpge>:
    3f64:	b510      	push	{r4, lr}
    3f66:	f001 fa63 	bl	5430 <__gedf2>
    3f6a:	2800      	cmp	r0, #0
    3f6c:	da01      	bge.n	3f72 <__aeabi_dcmpge+0xe>
    3f6e:	2000      	movs	r0, #0
    3f70:	bd10      	pop	{r4, pc}
    3f72:	2001      	movs	r0, #1
    3f74:	bd10      	pop	{r4, pc}
    3f76:	46c0      	nop			; (mov r8, r8)

00003f78 <__aeabi_cfrcmple>:
    3f78:	4684      	mov	ip, r0
    3f7a:	1c08      	adds	r0, r1, #0
    3f7c:	4661      	mov	r1, ip
    3f7e:	e7ff      	b.n	3f80 <__aeabi_cfcmpeq>

00003f80 <__aeabi_cfcmpeq>:
    3f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3f82:	f000 fa4d 	bl	4420 <__lesf2>
    3f86:	2800      	cmp	r0, #0
    3f88:	d401      	bmi.n	3f8e <__aeabi_cfcmpeq+0xe>
    3f8a:	2100      	movs	r1, #0
    3f8c:	42c8      	cmn	r0, r1
    3f8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003f90 <__aeabi_fcmpeq>:
    3f90:	b510      	push	{r4, lr}
    3f92:	f000 f9d1 	bl	4338 <__eqsf2>
    3f96:	4240      	negs	r0, r0
    3f98:	3001      	adds	r0, #1
    3f9a:	bd10      	pop	{r4, pc}

00003f9c <__aeabi_fcmplt>:
    3f9c:	b510      	push	{r4, lr}
    3f9e:	f000 fa3f 	bl	4420 <__lesf2>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	db01      	blt.n	3faa <__aeabi_fcmplt+0xe>
    3fa6:	2000      	movs	r0, #0
    3fa8:	bd10      	pop	{r4, pc}
    3faa:	2001      	movs	r0, #1
    3fac:	bd10      	pop	{r4, pc}
    3fae:	46c0      	nop			; (mov r8, r8)

00003fb0 <__aeabi_fcmple>:
    3fb0:	b510      	push	{r4, lr}
    3fb2:	f000 fa35 	bl	4420 <__lesf2>
    3fb6:	2800      	cmp	r0, #0
    3fb8:	dd01      	ble.n	3fbe <__aeabi_fcmple+0xe>
    3fba:	2000      	movs	r0, #0
    3fbc:	bd10      	pop	{r4, pc}
    3fbe:	2001      	movs	r0, #1
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)

00003fc4 <__aeabi_fcmpgt>:
    3fc4:	b510      	push	{r4, lr}
    3fc6:	f000 f9e1 	bl	438c <__gesf2>
    3fca:	2800      	cmp	r0, #0
    3fcc:	dc01      	bgt.n	3fd2 <__aeabi_fcmpgt+0xe>
    3fce:	2000      	movs	r0, #0
    3fd0:	bd10      	pop	{r4, pc}
    3fd2:	2001      	movs	r0, #1
    3fd4:	bd10      	pop	{r4, pc}
    3fd6:	46c0      	nop			; (mov r8, r8)

00003fd8 <__aeabi_fcmpge>:
    3fd8:	b510      	push	{r4, lr}
    3fda:	f000 f9d7 	bl	438c <__gesf2>
    3fde:	2800      	cmp	r0, #0
    3fe0:	da01      	bge.n	3fe6 <__aeabi_fcmpge+0xe>
    3fe2:	2000      	movs	r0, #0
    3fe4:	bd10      	pop	{r4, pc}
    3fe6:	2001      	movs	r0, #1
    3fe8:	bd10      	pop	{r4, pc}
    3fea:	46c0      	nop			; (mov r8, r8)

00003fec <__aeabi_lmul>:
    3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fee:	464f      	mov	r7, r9
    3ff0:	4646      	mov	r6, r8
    3ff2:	0405      	lsls	r5, r0, #16
    3ff4:	0c2d      	lsrs	r5, r5, #16
    3ff6:	1c2c      	adds	r4, r5, #0
    3ff8:	b4c0      	push	{r6, r7}
    3ffa:	0417      	lsls	r7, r2, #16
    3ffc:	0c16      	lsrs	r6, r2, #16
    3ffe:	0c3f      	lsrs	r7, r7, #16
    4000:	4699      	mov	r9, r3
    4002:	0c03      	lsrs	r3, r0, #16
    4004:	437c      	muls	r4, r7
    4006:	4375      	muls	r5, r6
    4008:	435f      	muls	r7, r3
    400a:	4373      	muls	r3, r6
    400c:	197d      	adds	r5, r7, r5
    400e:	0c26      	lsrs	r6, r4, #16
    4010:	19ad      	adds	r5, r5, r6
    4012:	469c      	mov	ip, r3
    4014:	42af      	cmp	r7, r5
    4016:	d903      	bls.n	4020 <__aeabi_lmul+0x34>
    4018:	2380      	movs	r3, #128	; 0x80
    401a:	025b      	lsls	r3, r3, #9
    401c:	4698      	mov	r8, r3
    401e:	44c4      	add	ip, r8
    4020:	464b      	mov	r3, r9
    4022:	4351      	muls	r1, r2
    4024:	4343      	muls	r3, r0
    4026:	0424      	lsls	r4, r4, #16
    4028:	0c2e      	lsrs	r6, r5, #16
    402a:	0c24      	lsrs	r4, r4, #16
    402c:	042d      	lsls	r5, r5, #16
    402e:	4466      	add	r6, ip
    4030:	192c      	adds	r4, r5, r4
    4032:	1859      	adds	r1, r3, r1
    4034:	1989      	adds	r1, r1, r6
    4036:	1c20      	adds	r0, r4, #0
    4038:	bc0c      	pop	{r2, r3}
    403a:	4690      	mov	r8, r2
    403c:	4699      	mov	r9, r3
    403e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004040 <__aeabi_fadd>:
    4040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4042:	004a      	lsls	r2, r1, #1
    4044:	0243      	lsls	r3, r0, #9
    4046:	0044      	lsls	r4, r0, #1
    4048:	024e      	lsls	r6, r1, #9
    404a:	0fc5      	lsrs	r5, r0, #31
    404c:	0e24      	lsrs	r4, r4, #24
    404e:	1c28      	adds	r0, r5, #0
    4050:	099b      	lsrs	r3, r3, #6
    4052:	0e12      	lsrs	r2, r2, #24
    4054:	0fc9      	lsrs	r1, r1, #31
    4056:	09b7      	lsrs	r7, r6, #6
    4058:	428d      	cmp	r5, r1
    405a:	d040      	beq.n	40de <__aeabi_fadd+0x9e>
    405c:	1aa0      	subs	r0, r4, r2
    405e:	2800      	cmp	r0, #0
    4060:	dc00      	bgt.n	4064 <__aeabi_fadd+0x24>
    4062:	e084      	b.n	416e <__aeabi_fadd+0x12e>
    4064:	2a00      	cmp	r2, #0
    4066:	d11c      	bne.n	40a2 <__aeabi_fadd+0x62>
    4068:	2f00      	cmp	r7, #0
    406a:	d15c      	bne.n	4126 <__aeabi_fadd+0xe6>
    406c:	075a      	lsls	r2, r3, #29
    406e:	d004      	beq.n	407a <__aeabi_fadd+0x3a>
    4070:	220f      	movs	r2, #15
    4072:	401a      	ands	r2, r3
    4074:	2a04      	cmp	r2, #4
    4076:	d000      	beq.n	407a <__aeabi_fadd+0x3a>
    4078:	3304      	adds	r3, #4
    407a:	2280      	movs	r2, #128	; 0x80
    407c:	04d2      	lsls	r2, r2, #19
    407e:	401a      	ands	r2, r3
    4080:	1c28      	adds	r0, r5, #0
    4082:	2a00      	cmp	r2, #0
    4084:	d024      	beq.n	40d0 <__aeabi_fadd+0x90>
    4086:	3401      	adds	r4, #1
    4088:	2cff      	cmp	r4, #255	; 0xff
    408a:	d100      	bne.n	408e <__aeabi_fadd+0x4e>
    408c:	e07b      	b.n	4186 <__aeabi_fadd+0x146>
    408e:	019b      	lsls	r3, r3, #6
    4090:	0a5b      	lsrs	r3, r3, #9
    4092:	b2e4      	uxtb	r4, r4
    4094:	025b      	lsls	r3, r3, #9
    4096:	05e4      	lsls	r4, r4, #23
    4098:	0a5b      	lsrs	r3, r3, #9
    409a:	4323      	orrs	r3, r4
    409c:	07c0      	lsls	r0, r0, #31
    409e:	4318      	orrs	r0, r3
    40a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40a2:	2cff      	cmp	r4, #255	; 0xff
    40a4:	d0e2      	beq.n	406c <__aeabi_fadd+0x2c>
    40a6:	2280      	movs	r2, #128	; 0x80
    40a8:	04d2      	lsls	r2, r2, #19
    40aa:	4317      	orrs	r7, r2
    40ac:	2601      	movs	r6, #1
    40ae:	281b      	cmp	r0, #27
    40b0:	dc08      	bgt.n	40c4 <__aeabi_fadd+0x84>
    40b2:	1c39      	adds	r1, r7, #0
    40b4:	2220      	movs	r2, #32
    40b6:	1c3e      	adds	r6, r7, #0
    40b8:	40c1      	lsrs	r1, r0
    40ba:	1a10      	subs	r0, r2, r0
    40bc:	4086      	lsls	r6, r0
    40be:	1e77      	subs	r7, r6, #1
    40c0:	41be      	sbcs	r6, r7
    40c2:	430e      	orrs	r6, r1
    40c4:	1b9b      	subs	r3, r3, r6
    40c6:	015a      	lsls	r2, r3, #5
    40c8:	d433      	bmi.n	4132 <__aeabi_fadd+0xf2>
    40ca:	1c28      	adds	r0, r5, #0
    40cc:	075a      	lsls	r2, r3, #29
    40ce:	d1cf      	bne.n	4070 <__aeabi_fadd+0x30>
    40d0:	08db      	lsrs	r3, r3, #3
    40d2:	2cff      	cmp	r4, #255	; 0xff
    40d4:	d01e      	beq.n	4114 <__aeabi_fadd+0xd4>
    40d6:	025b      	lsls	r3, r3, #9
    40d8:	0a5b      	lsrs	r3, r3, #9
    40da:	b2e4      	uxtb	r4, r4
    40dc:	e7da      	b.n	4094 <__aeabi_fadd+0x54>
    40de:	1aa1      	subs	r1, r4, r2
    40e0:	2900      	cmp	r1, #0
    40e2:	dd57      	ble.n	4194 <__aeabi_fadd+0x154>
    40e4:	2a00      	cmp	r2, #0
    40e6:	d03a      	beq.n	415e <__aeabi_fadd+0x11e>
    40e8:	2cff      	cmp	r4, #255	; 0xff
    40ea:	d0bf      	beq.n	406c <__aeabi_fadd+0x2c>
    40ec:	2280      	movs	r2, #128	; 0x80
    40ee:	04d2      	lsls	r2, r2, #19
    40f0:	4317      	orrs	r7, r2
    40f2:	2601      	movs	r6, #1
    40f4:	291b      	cmp	r1, #27
    40f6:	dd72      	ble.n	41de <__aeabi_fadd+0x19e>
    40f8:	199b      	adds	r3, r3, r6
    40fa:	015a      	lsls	r2, r3, #5
    40fc:	d5e5      	bpl.n	40ca <__aeabi_fadd+0x8a>
    40fe:	3401      	adds	r4, #1
    4100:	2cff      	cmp	r4, #255	; 0xff
    4102:	d100      	bne.n	4106 <__aeabi_fadd+0xc6>
    4104:	e087      	b.n	4216 <__aeabi_fadd+0x1d6>
    4106:	2101      	movs	r1, #1
    4108:	4a8a      	ldr	r2, [pc, #552]	; (4334 <__aeabi_fadd+0x2f4>)
    410a:	4019      	ands	r1, r3
    410c:	4013      	ands	r3, r2
    410e:	085b      	lsrs	r3, r3, #1
    4110:	430b      	orrs	r3, r1
    4112:	e7ab      	b.n	406c <__aeabi_fadd+0x2c>
    4114:	2b00      	cmp	r3, #0
    4116:	d036      	beq.n	4186 <__aeabi_fadd+0x146>
    4118:	2280      	movs	r2, #128	; 0x80
    411a:	03d2      	lsls	r2, r2, #15
    411c:	4313      	orrs	r3, r2
    411e:	025b      	lsls	r3, r3, #9
    4120:	0a5b      	lsrs	r3, r3, #9
    4122:	24ff      	movs	r4, #255	; 0xff
    4124:	e7b6      	b.n	4094 <__aeabi_fadd+0x54>
    4126:	3801      	subs	r0, #1
    4128:	2800      	cmp	r0, #0
    412a:	d13f      	bne.n	41ac <__aeabi_fadd+0x16c>
    412c:	1bdb      	subs	r3, r3, r7
    412e:	015a      	lsls	r2, r3, #5
    4130:	d5cb      	bpl.n	40ca <__aeabi_fadd+0x8a>
    4132:	019b      	lsls	r3, r3, #6
    4134:	099e      	lsrs	r6, r3, #6
    4136:	1c30      	adds	r0, r6, #0
    4138:	f002 f984 	bl	6444 <__clzsi2>
    413c:	3805      	subs	r0, #5
    413e:	4086      	lsls	r6, r0
    4140:	4284      	cmp	r4, r0
    4142:	dc23      	bgt.n	418c <__aeabi_fadd+0x14c>
    4144:	1b00      	subs	r0, r0, r4
    4146:	241f      	movs	r4, #31
    4148:	1c32      	adds	r2, r6, #0
    414a:	1c43      	adds	r3, r0, #1
    414c:	1a20      	subs	r0, r4, r0
    414e:	40da      	lsrs	r2, r3
    4150:	4086      	lsls	r6, r0
    4152:	1c13      	adds	r3, r2, #0
    4154:	1e74      	subs	r4, r6, #1
    4156:	41a6      	sbcs	r6, r4
    4158:	2400      	movs	r4, #0
    415a:	4333      	orrs	r3, r6
    415c:	e786      	b.n	406c <__aeabi_fadd+0x2c>
    415e:	2f00      	cmp	r7, #0
    4160:	d100      	bne.n	4164 <__aeabi_fadd+0x124>
    4162:	e783      	b.n	406c <__aeabi_fadd+0x2c>
    4164:	3901      	subs	r1, #1
    4166:	2900      	cmp	r1, #0
    4168:	d150      	bne.n	420c <__aeabi_fadd+0x1cc>
    416a:	19db      	adds	r3, r3, r7
    416c:	e7c5      	b.n	40fa <__aeabi_fadd+0xba>
    416e:	2800      	cmp	r0, #0
    4170:	d120      	bne.n	41b4 <__aeabi_fadd+0x174>
    4172:	1c62      	adds	r2, r4, #1
    4174:	b2d2      	uxtb	r2, r2
    4176:	2a01      	cmp	r2, #1
    4178:	dd5e      	ble.n	4238 <__aeabi_fadd+0x1f8>
    417a:	1bde      	subs	r6, r3, r7
    417c:	0172      	lsls	r2, r6, #5
    417e:	d528      	bpl.n	41d2 <__aeabi_fadd+0x192>
    4180:	1afe      	subs	r6, r7, r3
    4182:	1c0d      	adds	r5, r1, #0
    4184:	e7d7      	b.n	4136 <__aeabi_fadd+0xf6>
    4186:	24ff      	movs	r4, #255	; 0xff
    4188:	2300      	movs	r3, #0
    418a:	e783      	b.n	4094 <__aeabi_fadd+0x54>
    418c:	4b69      	ldr	r3, [pc, #420]	; (4334 <__aeabi_fadd+0x2f4>)
    418e:	1a24      	subs	r4, r4, r0
    4190:	4033      	ands	r3, r6
    4192:	e76b      	b.n	406c <__aeabi_fadd+0x2c>
    4194:	2900      	cmp	r1, #0
    4196:	d158      	bne.n	424a <__aeabi_fadd+0x20a>
    4198:	1c62      	adds	r2, r4, #1
    419a:	b2d1      	uxtb	r1, r2
    419c:	2901      	cmp	r1, #1
    419e:	dd3c      	ble.n	421a <__aeabi_fadd+0x1da>
    41a0:	2aff      	cmp	r2, #255	; 0xff
    41a2:	d037      	beq.n	4214 <__aeabi_fadd+0x1d4>
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	085b      	lsrs	r3, r3, #1
    41a8:	1c14      	adds	r4, r2, #0
    41aa:	e75f      	b.n	406c <__aeabi_fadd+0x2c>
    41ac:	2cff      	cmp	r4, #255	; 0xff
    41ae:	d000      	beq.n	41b2 <__aeabi_fadd+0x172>
    41b0:	e77c      	b.n	40ac <__aeabi_fadd+0x6c>
    41b2:	e75b      	b.n	406c <__aeabi_fadd+0x2c>
    41b4:	2c00      	cmp	r4, #0
    41b6:	d01e      	beq.n	41f6 <__aeabi_fadd+0x1b6>
    41b8:	2aff      	cmp	r2, #255	; 0xff
    41ba:	d023      	beq.n	4204 <__aeabi_fadd+0x1c4>
    41bc:	2480      	movs	r4, #128	; 0x80
    41be:	04e4      	lsls	r4, r4, #19
    41c0:	4240      	negs	r0, r0
    41c2:	4323      	orrs	r3, r4
    41c4:	281b      	cmp	r0, #27
    41c6:	dd5b      	ble.n	4280 <__aeabi_fadd+0x240>
    41c8:	2301      	movs	r3, #1
    41ca:	1afb      	subs	r3, r7, r3
    41cc:	1c14      	adds	r4, r2, #0
    41ce:	1c0d      	adds	r5, r1, #0
    41d0:	e7ad      	b.n	412e <__aeabi_fadd+0xee>
    41d2:	2e00      	cmp	r6, #0
    41d4:	d1af      	bne.n	4136 <__aeabi_fadd+0xf6>
    41d6:	2300      	movs	r3, #0
    41d8:	2000      	movs	r0, #0
    41da:	2400      	movs	r4, #0
    41dc:	e778      	b.n	40d0 <__aeabi_fadd+0x90>
    41de:	1c3a      	adds	r2, r7, #0
    41e0:	40ca      	lsrs	r2, r1
    41e2:	4694      	mov	ip, r2
    41e4:	2220      	movs	r2, #32
    41e6:	1c3e      	adds	r6, r7, #0
    41e8:	1a51      	subs	r1, r2, r1
    41ea:	408e      	lsls	r6, r1
    41ec:	4662      	mov	r2, ip
    41ee:	1e77      	subs	r7, r6, #1
    41f0:	41be      	sbcs	r6, r7
    41f2:	4316      	orrs	r6, r2
    41f4:	e780      	b.n	40f8 <__aeabi_fadd+0xb8>
    41f6:	2b00      	cmp	r3, #0
    41f8:	d03e      	beq.n	4278 <__aeabi_fadd+0x238>
    41fa:	43c0      	mvns	r0, r0
    41fc:	2800      	cmp	r0, #0
    41fe:	d0e4      	beq.n	41ca <__aeabi_fadd+0x18a>
    4200:	2aff      	cmp	r2, #255	; 0xff
    4202:	d1df      	bne.n	41c4 <__aeabi_fadd+0x184>
    4204:	1c3b      	adds	r3, r7, #0
    4206:	24ff      	movs	r4, #255	; 0xff
    4208:	1c0d      	adds	r5, r1, #0
    420a:	e72f      	b.n	406c <__aeabi_fadd+0x2c>
    420c:	2cff      	cmp	r4, #255	; 0xff
    420e:	d000      	beq.n	4212 <__aeabi_fadd+0x1d2>
    4210:	e76f      	b.n	40f2 <__aeabi_fadd+0xb2>
    4212:	e72b      	b.n	406c <__aeabi_fadd+0x2c>
    4214:	24ff      	movs	r4, #255	; 0xff
    4216:	2300      	movs	r3, #0
    4218:	e75a      	b.n	40d0 <__aeabi_fadd+0x90>
    421a:	2c00      	cmp	r4, #0
    421c:	d15a      	bne.n	42d4 <__aeabi_fadd+0x294>
    421e:	2b00      	cmp	r3, #0
    4220:	d07f      	beq.n	4322 <__aeabi_fadd+0x2e2>
    4222:	2f00      	cmp	r7, #0
    4224:	d100      	bne.n	4228 <__aeabi_fadd+0x1e8>
    4226:	e721      	b.n	406c <__aeabi_fadd+0x2c>
    4228:	19db      	adds	r3, r3, r7
    422a:	015a      	lsls	r2, r3, #5
    422c:	d400      	bmi.n	4230 <__aeabi_fadd+0x1f0>
    422e:	e74c      	b.n	40ca <__aeabi_fadd+0x8a>
    4230:	4a40      	ldr	r2, [pc, #256]	; (4334 <__aeabi_fadd+0x2f4>)
    4232:	3401      	adds	r4, #1
    4234:	4013      	ands	r3, r2
    4236:	e719      	b.n	406c <__aeabi_fadd+0x2c>
    4238:	2c00      	cmp	r4, #0
    423a:	d115      	bne.n	4268 <__aeabi_fadd+0x228>
    423c:	2b00      	cmp	r3, #0
    423e:	d12f      	bne.n	42a0 <__aeabi_fadd+0x260>
    4240:	2f00      	cmp	r7, #0
    4242:	d05d      	beq.n	4300 <__aeabi_fadd+0x2c0>
    4244:	1c3b      	adds	r3, r7, #0
    4246:	1c0d      	adds	r5, r1, #0
    4248:	e710      	b.n	406c <__aeabi_fadd+0x2c>
    424a:	2c00      	cmp	r4, #0
    424c:	d121      	bne.n	4292 <__aeabi_fadd+0x252>
    424e:	2b00      	cmp	r3, #0
    4250:	d053      	beq.n	42fa <__aeabi_fadd+0x2ba>
    4252:	43c9      	mvns	r1, r1
    4254:	2900      	cmp	r1, #0
    4256:	d004      	beq.n	4262 <__aeabi_fadd+0x222>
    4258:	2aff      	cmp	r2, #255	; 0xff
    425a:	d04b      	beq.n	42f4 <__aeabi_fadd+0x2b4>
    425c:	291b      	cmp	r1, #27
    425e:	dd57      	ble.n	4310 <__aeabi_fadd+0x2d0>
    4260:	2301      	movs	r3, #1
    4262:	19db      	adds	r3, r3, r7
    4264:	1c14      	adds	r4, r2, #0
    4266:	e748      	b.n	40fa <__aeabi_fadd+0xba>
    4268:	2b00      	cmp	r3, #0
    426a:	d122      	bne.n	42b2 <__aeabi_fadd+0x272>
    426c:	2f00      	cmp	r7, #0
    426e:	d04a      	beq.n	4306 <__aeabi_fadd+0x2c6>
    4270:	1c3b      	adds	r3, r7, #0
    4272:	1c0d      	adds	r5, r1, #0
    4274:	24ff      	movs	r4, #255	; 0xff
    4276:	e6f9      	b.n	406c <__aeabi_fadd+0x2c>
    4278:	1c3b      	adds	r3, r7, #0
    427a:	1c14      	adds	r4, r2, #0
    427c:	1c0d      	adds	r5, r1, #0
    427e:	e6f5      	b.n	406c <__aeabi_fadd+0x2c>
    4280:	1c1d      	adds	r5, r3, #0
    4282:	2420      	movs	r4, #32
    4284:	40c5      	lsrs	r5, r0
    4286:	1a20      	subs	r0, r4, r0
    4288:	4083      	lsls	r3, r0
    428a:	1e58      	subs	r0, r3, #1
    428c:	4183      	sbcs	r3, r0
    428e:	432b      	orrs	r3, r5
    4290:	e79b      	b.n	41ca <__aeabi_fadd+0x18a>
    4292:	2aff      	cmp	r2, #255	; 0xff
    4294:	d02e      	beq.n	42f4 <__aeabi_fadd+0x2b4>
    4296:	2480      	movs	r4, #128	; 0x80
    4298:	04e4      	lsls	r4, r4, #19
    429a:	4249      	negs	r1, r1
    429c:	4323      	orrs	r3, r4
    429e:	e7dd      	b.n	425c <__aeabi_fadd+0x21c>
    42a0:	2f00      	cmp	r7, #0
    42a2:	d100      	bne.n	42a6 <__aeabi_fadd+0x266>
    42a4:	e6e2      	b.n	406c <__aeabi_fadd+0x2c>
    42a6:	1bda      	subs	r2, r3, r7
    42a8:	0150      	lsls	r0, r2, #5
    42aa:	d53c      	bpl.n	4326 <__aeabi_fadd+0x2e6>
    42ac:	1afb      	subs	r3, r7, r3
    42ae:	1c0d      	adds	r5, r1, #0
    42b0:	e6dc      	b.n	406c <__aeabi_fadd+0x2c>
    42b2:	24ff      	movs	r4, #255	; 0xff
    42b4:	2f00      	cmp	r7, #0
    42b6:	d100      	bne.n	42ba <__aeabi_fadd+0x27a>
    42b8:	e6d8      	b.n	406c <__aeabi_fadd+0x2c>
    42ba:	2280      	movs	r2, #128	; 0x80
    42bc:	08db      	lsrs	r3, r3, #3
    42be:	03d2      	lsls	r2, r2, #15
    42c0:	4213      	tst	r3, r2
    42c2:	d004      	beq.n	42ce <__aeabi_fadd+0x28e>
    42c4:	08fe      	lsrs	r6, r7, #3
    42c6:	4216      	tst	r6, r2
    42c8:	d101      	bne.n	42ce <__aeabi_fadd+0x28e>
    42ca:	1c33      	adds	r3, r6, #0
    42cc:	1c0d      	adds	r5, r1, #0
    42ce:	00db      	lsls	r3, r3, #3
    42d0:	24ff      	movs	r4, #255	; 0xff
    42d2:	e6cb      	b.n	406c <__aeabi_fadd+0x2c>
    42d4:	2b00      	cmp	r3, #0
    42d6:	d00d      	beq.n	42f4 <__aeabi_fadd+0x2b4>
    42d8:	24ff      	movs	r4, #255	; 0xff
    42da:	2f00      	cmp	r7, #0
    42dc:	d100      	bne.n	42e0 <__aeabi_fadd+0x2a0>
    42de:	e6c5      	b.n	406c <__aeabi_fadd+0x2c>
    42e0:	2280      	movs	r2, #128	; 0x80
    42e2:	08db      	lsrs	r3, r3, #3
    42e4:	03d2      	lsls	r2, r2, #15
    42e6:	4213      	tst	r3, r2
    42e8:	d0f1      	beq.n	42ce <__aeabi_fadd+0x28e>
    42ea:	08fe      	lsrs	r6, r7, #3
    42ec:	4216      	tst	r6, r2
    42ee:	d1ee      	bne.n	42ce <__aeabi_fadd+0x28e>
    42f0:	1c33      	adds	r3, r6, #0
    42f2:	e7ec      	b.n	42ce <__aeabi_fadd+0x28e>
    42f4:	1c3b      	adds	r3, r7, #0
    42f6:	24ff      	movs	r4, #255	; 0xff
    42f8:	e6b8      	b.n	406c <__aeabi_fadd+0x2c>
    42fa:	1c3b      	adds	r3, r7, #0
    42fc:	1c14      	adds	r4, r2, #0
    42fe:	e6b5      	b.n	406c <__aeabi_fadd+0x2c>
    4300:	1c23      	adds	r3, r4, #0
    4302:	2000      	movs	r0, #0
    4304:	e6e4      	b.n	40d0 <__aeabi_fadd+0x90>
    4306:	2380      	movs	r3, #128	; 0x80
    4308:	2000      	movs	r0, #0
    430a:	049b      	lsls	r3, r3, #18
    430c:	24ff      	movs	r4, #255	; 0xff
    430e:	e6df      	b.n	40d0 <__aeabi_fadd+0x90>
    4310:	1c1e      	adds	r6, r3, #0
    4312:	2420      	movs	r4, #32
    4314:	40ce      	lsrs	r6, r1
    4316:	1a61      	subs	r1, r4, r1
    4318:	408b      	lsls	r3, r1
    431a:	1e59      	subs	r1, r3, #1
    431c:	418b      	sbcs	r3, r1
    431e:	4333      	orrs	r3, r6
    4320:	e79f      	b.n	4262 <__aeabi_fadd+0x222>
    4322:	1c3b      	adds	r3, r7, #0
    4324:	e6a2      	b.n	406c <__aeabi_fadd+0x2c>
    4326:	1e13      	subs	r3, r2, #0
    4328:	d000      	beq.n	432c <__aeabi_fadd+0x2ec>
    432a:	e6ce      	b.n	40ca <__aeabi_fadd+0x8a>
    432c:	2300      	movs	r3, #0
    432e:	2000      	movs	r0, #0
    4330:	e6ce      	b.n	40d0 <__aeabi_fadd+0x90>
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	fbffffff 	.word	0xfbffffff

00004338 <__eqsf2>:
    4338:	0243      	lsls	r3, r0, #9
    433a:	b570      	push	{r4, r5, r6, lr}
    433c:	0042      	lsls	r2, r0, #1
    433e:	004c      	lsls	r4, r1, #1
    4340:	0a5d      	lsrs	r5, r3, #9
    4342:	0fc3      	lsrs	r3, r0, #31
    4344:	0248      	lsls	r0, r1, #9
    4346:	0e12      	lsrs	r2, r2, #24
    4348:	0a46      	lsrs	r6, r0, #9
    434a:	0e24      	lsrs	r4, r4, #24
    434c:	0fc9      	lsrs	r1, r1, #31
    434e:	2aff      	cmp	r2, #255	; 0xff
    4350:	d005      	beq.n	435e <__eqsf2+0x26>
    4352:	2cff      	cmp	r4, #255	; 0xff
    4354:	d008      	beq.n	4368 <__eqsf2+0x30>
    4356:	2001      	movs	r0, #1
    4358:	42a2      	cmp	r2, r4
    435a:	d00b      	beq.n	4374 <__eqsf2+0x3c>
    435c:	bd70      	pop	{r4, r5, r6, pc}
    435e:	2001      	movs	r0, #1
    4360:	2d00      	cmp	r5, #0
    4362:	d1fb      	bne.n	435c <__eqsf2+0x24>
    4364:	2cff      	cmp	r4, #255	; 0xff
    4366:	d1f6      	bne.n	4356 <__eqsf2+0x1e>
    4368:	2001      	movs	r0, #1
    436a:	2e00      	cmp	r6, #0
    436c:	d1f6      	bne.n	435c <__eqsf2+0x24>
    436e:	2001      	movs	r0, #1
    4370:	42a2      	cmp	r2, r4
    4372:	d1f3      	bne.n	435c <__eqsf2+0x24>
    4374:	42b5      	cmp	r5, r6
    4376:	d1f1      	bne.n	435c <__eqsf2+0x24>
    4378:	428b      	cmp	r3, r1
    437a:	d005      	beq.n	4388 <__eqsf2+0x50>
    437c:	2a00      	cmp	r2, #0
    437e:	d1ed      	bne.n	435c <__eqsf2+0x24>
    4380:	1c28      	adds	r0, r5, #0
    4382:	1e43      	subs	r3, r0, #1
    4384:	4198      	sbcs	r0, r3
    4386:	e7e9      	b.n	435c <__eqsf2+0x24>
    4388:	2000      	movs	r0, #0
    438a:	e7e7      	b.n	435c <__eqsf2+0x24>

0000438c <__gesf2>:
    438c:	b5f0      	push	{r4, r5, r6, r7, lr}
    438e:	0243      	lsls	r3, r0, #9
    4390:	024d      	lsls	r5, r1, #9
    4392:	004a      	lsls	r2, r1, #1
    4394:	0044      	lsls	r4, r0, #1
    4396:	0a5e      	lsrs	r6, r3, #9
    4398:	0e24      	lsrs	r4, r4, #24
    439a:	0fc3      	lsrs	r3, r0, #31
    439c:	0a6d      	lsrs	r5, r5, #9
    439e:	0e12      	lsrs	r2, r2, #24
    43a0:	0fc9      	lsrs	r1, r1, #31
    43a2:	2cff      	cmp	r4, #255	; 0xff
    43a4:	d00d      	beq.n	43c2 <__gesf2+0x36>
    43a6:	2aff      	cmp	r2, #255	; 0xff
    43a8:	d031      	beq.n	440e <__gesf2+0x82>
    43aa:	2c00      	cmp	r4, #0
    43ac:	d10d      	bne.n	43ca <__gesf2+0x3e>
    43ae:	4277      	negs	r7, r6
    43b0:	4177      	adcs	r7, r6
    43b2:	2a00      	cmp	r2, #0
    43b4:	d123      	bne.n	43fe <__gesf2+0x72>
    43b6:	2d00      	cmp	r5, #0
    43b8:	d121      	bne.n	43fe <__gesf2+0x72>
    43ba:	2000      	movs	r0, #0
    43bc:	2f00      	cmp	r7, #0
    43be:	d10b      	bne.n	43d8 <__gesf2+0x4c>
    43c0:	e007      	b.n	43d2 <__gesf2+0x46>
    43c2:	2e00      	cmp	r6, #0
    43c4:	d128      	bne.n	4418 <__gesf2+0x8c>
    43c6:	2aff      	cmp	r2, #255	; 0xff
    43c8:	d021      	beq.n	440e <__gesf2+0x82>
    43ca:	2a00      	cmp	r2, #0
    43cc:	d005      	beq.n	43da <__gesf2+0x4e>
    43ce:	428b      	cmp	r3, r1
    43d0:	d007      	beq.n	43e2 <__gesf2+0x56>
    43d2:	4258      	negs	r0, r3
    43d4:	2301      	movs	r3, #1
    43d6:	4318      	orrs	r0, r3
    43d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43da:	2d00      	cmp	r5, #0
    43dc:	d0f9      	beq.n	43d2 <__gesf2+0x46>
    43de:	428b      	cmp	r3, r1
    43e0:	d1f7      	bne.n	43d2 <__gesf2+0x46>
    43e2:	4294      	cmp	r4, r2
    43e4:	dcf5      	bgt.n	43d2 <__gesf2+0x46>
    43e6:	db04      	blt.n	43f2 <__gesf2+0x66>
    43e8:	42ae      	cmp	r6, r5
    43ea:	d8f2      	bhi.n	43d2 <__gesf2+0x46>
    43ec:	2000      	movs	r0, #0
    43ee:	42ae      	cmp	r6, r5
    43f0:	d2f2      	bcs.n	43d8 <__gesf2+0x4c>
    43f2:	4258      	negs	r0, r3
    43f4:	4143      	adcs	r3, r0
    43f6:	2001      	movs	r0, #1
    43f8:	425b      	negs	r3, r3
    43fa:	4318      	orrs	r0, r3
    43fc:	e7ec      	b.n	43d8 <__gesf2+0x4c>
    43fe:	2f00      	cmp	r7, #0
    4400:	d0e5      	beq.n	43ce <__gesf2+0x42>
    4402:	4248      	negs	r0, r1
    4404:	4141      	adcs	r1, r0
    4406:	2001      	movs	r0, #1
    4408:	4249      	negs	r1, r1
    440a:	4308      	orrs	r0, r1
    440c:	e7e4      	b.n	43d8 <__gesf2+0x4c>
    440e:	2d00      	cmp	r5, #0
    4410:	d102      	bne.n	4418 <__gesf2+0x8c>
    4412:	2c00      	cmp	r4, #0
    4414:	d0cb      	beq.n	43ae <__gesf2+0x22>
    4416:	e7da      	b.n	43ce <__gesf2+0x42>
    4418:	2002      	movs	r0, #2
    441a:	4240      	negs	r0, r0
    441c:	e7dc      	b.n	43d8 <__gesf2+0x4c>
    441e:	46c0      	nop			; (mov r8, r8)

00004420 <__lesf2>:
    4420:	0243      	lsls	r3, r0, #9
    4422:	b5f0      	push	{r4, r5, r6, r7, lr}
    4424:	0042      	lsls	r2, r0, #1
    4426:	004c      	lsls	r4, r1, #1
    4428:	0a5e      	lsrs	r6, r3, #9
    442a:	0fc3      	lsrs	r3, r0, #31
    442c:	0248      	lsls	r0, r1, #9
    442e:	0e12      	lsrs	r2, r2, #24
    4430:	0a45      	lsrs	r5, r0, #9
    4432:	0e24      	lsrs	r4, r4, #24
    4434:	0fc9      	lsrs	r1, r1, #31
    4436:	2aff      	cmp	r2, #255	; 0xff
    4438:	d00f      	beq.n	445a <__lesf2+0x3a>
    443a:	2cff      	cmp	r4, #255	; 0xff
    443c:	d01a      	beq.n	4474 <__lesf2+0x54>
    443e:	2a00      	cmp	r2, #0
    4440:	d110      	bne.n	4464 <__lesf2+0x44>
    4442:	4277      	negs	r7, r6
    4444:	4177      	adcs	r7, r6
    4446:	2c00      	cmp	r4, #0
    4448:	d029      	beq.n	449e <__lesf2+0x7e>
    444a:	2f00      	cmp	r7, #0
    444c:	d017      	beq.n	447e <__lesf2+0x5e>
    444e:	4248      	negs	r0, r1
    4450:	4141      	adcs	r1, r0
    4452:	2001      	movs	r0, #1
    4454:	4249      	negs	r1, r1
    4456:	4308      	orrs	r0, r1
    4458:	e00b      	b.n	4472 <__lesf2+0x52>
    445a:	2002      	movs	r0, #2
    445c:	2e00      	cmp	r6, #0
    445e:	d108      	bne.n	4472 <__lesf2+0x52>
    4460:	2cff      	cmp	r4, #255	; 0xff
    4462:	d007      	beq.n	4474 <__lesf2+0x54>
    4464:	2c00      	cmp	r4, #0
    4466:	d10a      	bne.n	447e <__lesf2+0x5e>
    4468:	2d00      	cmp	r5, #0
    446a:	d108      	bne.n	447e <__lesf2+0x5e>
    446c:	4258      	negs	r0, r3
    446e:	2301      	movs	r3, #1
    4470:	4318      	orrs	r0, r3
    4472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4474:	2002      	movs	r0, #2
    4476:	2d00      	cmp	r5, #0
    4478:	d1fb      	bne.n	4472 <__lesf2+0x52>
    447a:	2a00      	cmp	r2, #0
    447c:	d0e1      	beq.n	4442 <__lesf2+0x22>
    447e:	428b      	cmp	r3, r1
    4480:	d1f4      	bne.n	446c <__lesf2+0x4c>
    4482:	42a2      	cmp	r2, r4
    4484:	dcf2      	bgt.n	446c <__lesf2+0x4c>
    4486:	db04      	blt.n	4492 <__lesf2+0x72>
    4488:	42ae      	cmp	r6, r5
    448a:	d8ef      	bhi.n	446c <__lesf2+0x4c>
    448c:	2000      	movs	r0, #0
    448e:	42ae      	cmp	r6, r5
    4490:	d2ef      	bcs.n	4472 <__lesf2+0x52>
    4492:	4258      	negs	r0, r3
    4494:	4143      	adcs	r3, r0
    4496:	2001      	movs	r0, #1
    4498:	425b      	negs	r3, r3
    449a:	4318      	orrs	r0, r3
    449c:	e7e9      	b.n	4472 <__lesf2+0x52>
    449e:	2d00      	cmp	r5, #0
    44a0:	d1d3      	bne.n	444a <__lesf2+0x2a>
    44a2:	2000      	movs	r0, #0
    44a4:	2f00      	cmp	r7, #0
    44a6:	d1e4      	bne.n	4472 <__lesf2+0x52>
    44a8:	e7e0      	b.n	446c <__lesf2+0x4c>
    44aa:	46c0      	nop			; (mov r8, r8)

000044ac <__aeabi_fmul>:
    44ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ae:	465f      	mov	r7, fp
    44b0:	4656      	mov	r6, sl
    44b2:	464d      	mov	r5, r9
    44b4:	4644      	mov	r4, r8
    44b6:	b4f0      	push	{r4, r5, r6, r7}
    44b8:	0245      	lsls	r5, r0, #9
    44ba:	0046      	lsls	r6, r0, #1
    44bc:	0fc4      	lsrs	r4, r0, #31
    44be:	b083      	sub	sp, #12
    44c0:	1c0f      	adds	r7, r1, #0
    44c2:	0a6d      	lsrs	r5, r5, #9
    44c4:	0e36      	lsrs	r6, r6, #24
    44c6:	46a3      	mov	fp, r4
    44c8:	d045      	beq.n	4556 <__aeabi_fmul+0xaa>
    44ca:	2eff      	cmp	r6, #255	; 0xff
    44cc:	d025      	beq.n	451a <__aeabi_fmul+0x6e>
    44ce:	2380      	movs	r3, #128	; 0x80
    44d0:	041b      	lsls	r3, r3, #16
    44d2:	431d      	orrs	r5, r3
    44d4:	2300      	movs	r3, #0
    44d6:	469a      	mov	sl, r3
    44d8:	00ed      	lsls	r5, r5, #3
    44da:	3e7f      	subs	r6, #127	; 0x7f
    44dc:	9301      	str	r3, [sp, #4]
    44de:	027b      	lsls	r3, r7, #9
    44e0:	0a5b      	lsrs	r3, r3, #9
    44e2:	4698      	mov	r8, r3
    44e4:	0078      	lsls	r0, r7, #1
    44e6:	0ffb      	lsrs	r3, r7, #31
    44e8:	0e00      	lsrs	r0, r0, #24
    44ea:	4699      	mov	r9, r3
    44ec:	d040      	beq.n	4570 <__aeabi_fmul+0xc4>
    44ee:	28ff      	cmp	r0, #255	; 0xff
    44f0:	d038      	beq.n	4564 <__aeabi_fmul+0xb8>
    44f2:	2380      	movs	r3, #128	; 0x80
    44f4:	4642      	mov	r2, r8
    44f6:	041b      	lsls	r3, r3, #16
    44f8:	4313      	orrs	r3, r2
    44fa:	00db      	lsls	r3, r3, #3
    44fc:	4698      	mov	r8, r3
    44fe:	2300      	movs	r3, #0
    4500:	387f      	subs	r0, #127	; 0x7f
    4502:	464a      	mov	r2, r9
    4504:	9f01      	ldr	r7, [sp, #4]
    4506:	1830      	adds	r0, r6, r0
    4508:	4062      	eors	r2, r4
    450a:	1c41      	adds	r1, r0, #1
    450c:	431f      	orrs	r7, r3
    450e:	2f0f      	cmp	r7, #15
    4510:	d869      	bhi.n	45e6 <__aeabi_fmul+0x13a>
    4512:	4e7d      	ldr	r6, [pc, #500]	; (4708 <__aeabi_fmul+0x25c>)
    4514:	00bf      	lsls	r7, r7, #2
    4516:	59f6      	ldr	r6, [r6, r7]
    4518:	46b7      	mov	pc, r6
    451a:	2d00      	cmp	r5, #0
    451c:	d145      	bne.n	45aa <__aeabi_fmul+0xfe>
    451e:	2308      	movs	r3, #8
    4520:	9301      	str	r3, [sp, #4]
    4522:	3b06      	subs	r3, #6
    4524:	469a      	mov	sl, r3
    4526:	e7da      	b.n	44de <__aeabi_fmul+0x32>
    4528:	4693      	mov	fp, r2
    452a:	4653      	mov	r3, sl
    452c:	2b02      	cmp	r3, #2
    452e:	d12f      	bne.n	4590 <__aeabi_fmul+0xe4>
    4530:	465b      	mov	r3, fp
    4532:	2401      	movs	r4, #1
    4534:	2500      	movs	r5, #0
    4536:	401c      	ands	r4, r3
    4538:	23ff      	movs	r3, #255	; 0xff
    453a:	026d      	lsls	r5, r5, #9
    453c:	05db      	lsls	r3, r3, #23
    453e:	0a6d      	lsrs	r5, r5, #9
    4540:	07e4      	lsls	r4, r4, #31
    4542:	431d      	orrs	r5, r3
    4544:	4325      	orrs	r5, r4
    4546:	1c28      	adds	r0, r5, #0
    4548:	b003      	add	sp, #12
    454a:	bc3c      	pop	{r2, r3, r4, r5}
    454c:	4690      	mov	r8, r2
    454e:	4699      	mov	r9, r3
    4550:	46a2      	mov	sl, r4
    4552:	46ab      	mov	fp, r5
    4554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4556:	2d00      	cmp	r5, #0
    4558:	d12c      	bne.n	45b4 <__aeabi_fmul+0x108>
    455a:	2304      	movs	r3, #4
    455c:	9301      	str	r3, [sp, #4]
    455e:	3b03      	subs	r3, #3
    4560:	469a      	mov	sl, r3
    4562:	e7bc      	b.n	44de <__aeabi_fmul+0x32>
    4564:	4643      	mov	r3, r8
    4566:	425a      	negs	r2, r3
    4568:	4153      	adcs	r3, r2
    456a:	2203      	movs	r2, #3
    456c:	1ad3      	subs	r3, r2, r3
    456e:	e7c8      	b.n	4502 <__aeabi_fmul+0x56>
    4570:	4642      	mov	r2, r8
    4572:	2301      	movs	r3, #1
    4574:	2a00      	cmp	r2, #0
    4576:	d0c4      	beq.n	4502 <__aeabi_fmul+0x56>
    4578:	4640      	mov	r0, r8
    457a:	f001 ff63 	bl	6444 <__clzsi2>
    457e:	4642      	mov	r2, r8
    4580:	1f43      	subs	r3, r0, #5
    4582:	409a      	lsls	r2, r3
    4584:	2376      	movs	r3, #118	; 0x76
    4586:	425b      	negs	r3, r3
    4588:	1a18      	subs	r0, r3, r0
    458a:	4690      	mov	r8, r2
    458c:	2300      	movs	r3, #0
    458e:	e7b8      	b.n	4502 <__aeabi_fmul+0x56>
    4590:	2b03      	cmp	r3, #3
    4592:	d100      	bne.n	4596 <__aeabi_fmul+0xea>
    4594:	e0ad      	b.n	46f2 <__aeabi_fmul+0x246>
    4596:	2b01      	cmp	r3, #1
    4598:	d000      	beq.n	459c <__aeabi_fmul+0xf0>
    459a:	e08c      	b.n	46b6 <__aeabi_fmul+0x20a>
    459c:	465b      	mov	r3, fp
    459e:	4654      	mov	r4, sl
    45a0:	401c      	ands	r4, r3
    45a2:	b2e4      	uxtb	r4, r4
    45a4:	2300      	movs	r3, #0
    45a6:	2500      	movs	r5, #0
    45a8:	e7c7      	b.n	453a <__aeabi_fmul+0x8e>
    45aa:	230c      	movs	r3, #12
    45ac:	9301      	str	r3, [sp, #4]
    45ae:	3b09      	subs	r3, #9
    45b0:	469a      	mov	sl, r3
    45b2:	e794      	b.n	44de <__aeabi_fmul+0x32>
    45b4:	1c28      	adds	r0, r5, #0
    45b6:	f001 ff45 	bl	6444 <__clzsi2>
    45ba:	2676      	movs	r6, #118	; 0x76
    45bc:	1f43      	subs	r3, r0, #5
    45be:	409d      	lsls	r5, r3
    45c0:	2300      	movs	r3, #0
    45c2:	4276      	negs	r6, r6
    45c4:	1a36      	subs	r6, r6, r0
    45c6:	9301      	str	r3, [sp, #4]
    45c8:	469a      	mov	sl, r3
    45ca:	e788      	b.n	44de <__aeabi_fmul+0x32>
    45cc:	2580      	movs	r5, #128	; 0x80
    45ce:	2400      	movs	r4, #0
    45d0:	03ed      	lsls	r5, r5, #15
    45d2:	23ff      	movs	r3, #255	; 0xff
    45d4:	e7b1      	b.n	453a <__aeabi_fmul+0x8e>
    45d6:	4645      	mov	r5, r8
    45d8:	46cb      	mov	fp, r9
    45da:	469a      	mov	sl, r3
    45dc:	e7a5      	b.n	452a <__aeabi_fmul+0x7e>
    45de:	4645      	mov	r5, r8
    45e0:	4693      	mov	fp, r2
    45e2:	469a      	mov	sl, r3
    45e4:	e7a1      	b.n	452a <__aeabi_fmul+0x7e>
    45e6:	4643      	mov	r3, r8
    45e8:	042c      	lsls	r4, r5, #16
    45ea:	0c1b      	lsrs	r3, r3, #16
    45ec:	469c      	mov	ip, r3
    45ee:	0c23      	lsrs	r3, r4, #16
    45f0:	4644      	mov	r4, r8
    45f2:	0426      	lsls	r6, r4, #16
    45f4:	1c1c      	adds	r4, r3, #0
    45f6:	0c36      	lsrs	r6, r6, #16
    45f8:	0c2f      	lsrs	r7, r5, #16
    45fa:	4374      	muls	r4, r6
    45fc:	1c35      	adds	r5, r6, #0
    45fe:	4666      	mov	r6, ip
    4600:	437d      	muls	r5, r7
    4602:	4373      	muls	r3, r6
    4604:	4377      	muls	r7, r6
    4606:	18eb      	adds	r3, r5, r3
    4608:	0c26      	lsrs	r6, r4, #16
    460a:	199e      	adds	r6, r3, r6
    460c:	42b5      	cmp	r5, r6
    460e:	d903      	bls.n	4618 <__aeabi_fmul+0x16c>
    4610:	2380      	movs	r3, #128	; 0x80
    4612:	025b      	lsls	r3, r3, #9
    4614:	469c      	mov	ip, r3
    4616:	4467      	add	r7, ip
    4618:	0424      	lsls	r4, r4, #16
    461a:	0433      	lsls	r3, r6, #16
    461c:	0c24      	lsrs	r4, r4, #16
    461e:	191b      	adds	r3, r3, r4
    4620:	019d      	lsls	r5, r3, #6
    4622:	1e6c      	subs	r4, r5, #1
    4624:	41a5      	sbcs	r5, r4
    4626:	0e9b      	lsrs	r3, r3, #26
    4628:	0c36      	lsrs	r6, r6, #16
    462a:	432b      	orrs	r3, r5
    462c:	19bd      	adds	r5, r7, r6
    462e:	01ad      	lsls	r5, r5, #6
    4630:	431d      	orrs	r5, r3
    4632:	012b      	lsls	r3, r5, #4
    4634:	d504      	bpl.n	4640 <__aeabi_fmul+0x194>
    4636:	2301      	movs	r3, #1
    4638:	0868      	lsrs	r0, r5, #1
    463a:	401d      	ands	r5, r3
    463c:	4305      	orrs	r5, r0
    463e:	1c08      	adds	r0, r1, #0
    4640:	1c03      	adds	r3, r0, #0
    4642:	337f      	adds	r3, #127	; 0x7f
    4644:	2b00      	cmp	r3, #0
    4646:	dd2c      	ble.n	46a2 <__aeabi_fmul+0x1f6>
    4648:	0769      	lsls	r1, r5, #29
    464a:	d004      	beq.n	4656 <__aeabi_fmul+0x1aa>
    464c:	210f      	movs	r1, #15
    464e:	4029      	ands	r1, r5
    4650:	2904      	cmp	r1, #4
    4652:	d000      	beq.n	4656 <__aeabi_fmul+0x1aa>
    4654:	3504      	adds	r5, #4
    4656:	0129      	lsls	r1, r5, #4
    4658:	d503      	bpl.n	4662 <__aeabi_fmul+0x1b6>
    465a:	4b2c      	ldr	r3, [pc, #176]	; (470c <__aeabi_fmul+0x260>)
    465c:	401d      	ands	r5, r3
    465e:	1c03      	adds	r3, r0, #0
    4660:	3380      	adds	r3, #128	; 0x80
    4662:	2bfe      	cmp	r3, #254	; 0xfe
    4664:	dd17      	ble.n	4696 <__aeabi_fmul+0x1ea>
    4666:	2401      	movs	r4, #1
    4668:	23ff      	movs	r3, #255	; 0xff
    466a:	4014      	ands	r4, r2
    466c:	2500      	movs	r5, #0
    466e:	e764      	b.n	453a <__aeabi_fmul+0x8e>
    4670:	2080      	movs	r0, #128	; 0x80
    4672:	03c0      	lsls	r0, r0, #15
    4674:	4205      	tst	r5, r0
    4676:	d009      	beq.n	468c <__aeabi_fmul+0x1e0>
    4678:	4643      	mov	r3, r8
    467a:	4203      	tst	r3, r0
    467c:	d106      	bne.n	468c <__aeabi_fmul+0x1e0>
    467e:	4645      	mov	r5, r8
    4680:	4305      	orrs	r5, r0
    4682:	026d      	lsls	r5, r5, #9
    4684:	0a6d      	lsrs	r5, r5, #9
    4686:	464c      	mov	r4, r9
    4688:	23ff      	movs	r3, #255	; 0xff
    468a:	e756      	b.n	453a <__aeabi_fmul+0x8e>
    468c:	4305      	orrs	r5, r0
    468e:	026d      	lsls	r5, r5, #9
    4690:	0a6d      	lsrs	r5, r5, #9
    4692:	23ff      	movs	r3, #255	; 0xff
    4694:	e751      	b.n	453a <__aeabi_fmul+0x8e>
    4696:	2401      	movs	r4, #1
    4698:	01ad      	lsls	r5, r5, #6
    469a:	0a6d      	lsrs	r5, r5, #9
    469c:	b2db      	uxtb	r3, r3
    469e:	4014      	ands	r4, r2
    46a0:	e74b      	b.n	453a <__aeabi_fmul+0x8e>
    46a2:	237e      	movs	r3, #126	; 0x7e
    46a4:	425b      	negs	r3, r3
    46a6:	1a1b      	subs	r3, r3, r0
    46a8:	2b1b      	cmp	r3, #27
    46aa:	dd07      	ble.n	46bc <__aeabi_fmul+0x210>
    46ac:	2401      	movs	r4, #1
    46ae:	2300      	movs	r3, #0
    46b0:	4014      	ands	r4, r2
    46b2:	2500      	movs	r5, #0
    46b4:	e741      	b.n	453a <__aeabi_fmul+0x8e>
    46b6:	1c08      	adds	r0, r1, #0
    46b8:	465a      	mov	r2, fp
    46ba:	e7c1      	b.n	4640 <__aeabi_fmul+0x194>
    46bc:	309e      	adds	r0, #158	; 0x9e
    46be:	1c29      	adds	r1, r5, #0
    46c0:	4085      	lsls	r5, r0
    46c2:	40d9      	lsrs	r1, r3
    46c4:	1e68      	subs	r0, r5, #1
    46c6:	4185      	sbcs	r5, r0
    46c8:	430d      	orrs	r5, r1
    46ca:	076b      	lsls	r3, r5, #29
    46cc:	d004      	beq.n	46d8 <__aeabi_fmul+0x22c>
    46ce:	230f      	movs	r3, #15
    46d0:	402b      	ands	r3, r5
    46d2:	2b04      	cmp	r3, #4
    46d4:	d000      	beq.n	46d8 <__aeabi_fmul+0x22c>
    46d6:	3504      	adds	r5, #4
    46d8:	016b      	lsls	r3, r5, #5
    46da:	d504      	bpl.n	46e6 <__aeabi_fmul+0x23a>
    46dc:	2401      	movs	r4, #1
    46de:	2301      	movs	r3, #1
    46e0:	4014      	ands	r4, r2
    46e2:	2500      	movs	r5, #0
    46e4:	e729      	b.n	453a <__aeabi_fmul+0x8e>
    46e6:	2401      	movs	r4, #1
    46e8:	01ad      	lsls	r5, r5, #6
    46ea:	0a6d      	lsrs	r5, r5, #9
    46ec:	4014      	ands	r4, r2
    46ee:	2300      	movs	r3, #0
    46f0:	e723      	b.n	453a <__aeabi_fmul+0x8e>
    46f2:	2380      	movs	r3, #128	; 0x80
    46f4:	03db      	lsls	r3, r3, #15
    46f6:	431d      	orrs	r5, r3
    46f8:	2401      	movs	r4, #1
    46fa:	465b      	mov	r3, fp
    46fc:	026d      	lsls	r5, r5, #9
    46fe:	4023      	ands	r3, r4
    4700:	1c1c      	adds	r4, r3, #0
    4702:	0a6d      	lsrs	r5, r5, #9
    4704:	23ff      	movs	r3, #255	; 0xff
    4706:	e718      	b.n	453a <__aeabi_fmul+0x8e>
    4708:	000076d0 	.word	0x000076d0
    470c:	f7ffffff 	.word	0xf7ffffff

00004710 <__aeabi_dadd>:
    4710:	b5f0      	push	{r4, r5, r6, r7, lr}
    4712:	4645      	mov	r5, r8
    4714:	4657      	mov	r7, sl
    4716:	464e      	mov	r6, r9
    4718:	4694      	mov	ip, r2
    471a:	004c      	lsls	r4, r1, #1
    471c:	030a      	lsls	r2, r1, #12
    471e:	0fc9      	lsrs	r1, r1, #31
    4720:	b4e0      	push	{r5, r6, r7}
    4722:	4688      	mov	r8, r1
    4724:	1c0e      	adds	r6, r1, #0
    4726:	0319      	lsls	r1, r3, #12
    4728:	0f47      	lsrs	r7, r0, #29
    472a:	00c5      	lsls	r5, r0, #3
    472c:	0a48      	lsrs	r0, r1, #9
    472e:	4661      	mov	r1, ip
    4730:	0f49      	lsrs	r1, r1, #29
    4732:	4301      	orrs	r1, r0
    4734:	4660      	mov	r0, ip
    4736:	0a52      	lsrs	r2, r2, #9
    4738:	4317      	orrs	r7, r2
    473a:	00c0      	lsls	r0, r0, #3
    473c:	005a      	lsls	r2, r3, #1
    473e:	0d64      	lsrs	r4, r4, #21
    4740:	0d52      	lsrs	r2, r2, #21
    4742:	0fdb      	lsrs	r3, r3, #31
    4744:	4684      	mov	ip, r0
    4746:	4598      	cmp	r8, r3
    4748:	d100      	bne.n	474c <__aeabi_dadd+0x3c>
    474a:	e0a7      	b.n	489c <__aeabi_dadd+0x18c>
    474c:	1aa0      	subs	r0, r4, r2
    474e:	2800      	cmp	r0, #0
    4750:	dc00      	bgt.n	4754 <__aeabi_dadd+0x44>
    4752:	e101      	b.n	4958 <__aeabi_dadd+0x248>
    4754:	2a00      	cmp	r2, #0
    4756:	d13d      	bne.n	47d4 <__aeabi_dadd+0xc4>
    4758:	4663      	mov	r3, ip
    475a:	430b      	orrs	r3, r1
    475c:	d000      	beq.n	4760 <__aeabi_dadd+0x50>
    475e:	e0d4      	b.n	490a <__aeabi_dadd+0x1fa>
    4760:	076b      	lsls	r3, r5, #29
    4762:	d100      	bne.n	4766 <__aeabi_dadd+0x56>
    4764:	e088      	b.n	4878 <__aeabi_dadd+0x168>
    4766:	230f      	movs	r3, #15
    4768:	402b      	ands	r3, r5
    476a:	2b04      	cmp	r3, #4
    476c:	d100      	bne.n	4770 <__aeabi_dadd+0x60>
    476e:	e083      	b.n	4878 <__aeabi_dadd+0x168>
    4770:	1d2a      	adds	r2, r5, #4
    4772:	42aa      	cmp	r2, r5
    4774:	41ad      	sbcs	r5, r5
    4776:	2380      	movs	r3, #128	; 0x80
    4778:	426d      	negs	r5, r5
    477a:	197f      	adds	r7, r7, r5
    477c:	041b      	lsls	r3, r3, #16
    477e:	403b      	ands	r3, r7
    4780:	4646      	mov	r6, r8
    4782:	1c15      	adds	r5, r2, #0
    4784:	2b00      	cmp	r3, #0
    4786:	d100      	bne.n	478a <__aeabi_dadd+0x7a>
    4788:	e07c      	b.n	4884 <__aeabi_dadd+0x174>
    478a:	4bcc      	ldr	r3, [pc, #816]	; (4abc <__aeabi_dadd+0x3ac>)
    478c:	3401      	adds	r4, #1
    478e:	429c      	cmp	r4, r3
    4790:	d100      	bne.n	4794 <__aeabi_dadd+0x84>
    4792:	e0fd      	b.n	4990 <__aeabi_dadd+0x280>
    4794:	1c3a      	adds	r2, r7, #0
    4796:	4bca      	ldr	r3, [pc, #808]	; (4ac0 <__aeabi_dadd+0x3b0>)
    4798:	08ed      	lsrs	r5, r5, #3
    479a:	401a      	ands	r2, r3
    479c:	0750      	lsls	r0, r2, #29
    479e:	0564      	lsls	r4, r4, #21
    47a0:	0252      	lsls	r2, r2, #9
    47a2:	4305      	orrs	r5, r0
    47a4:	0b12      	lsrs	r2, r2, #12
    47a6:	0d64      	lsrs	r4, r4, #21
    47a8:	2100      	movs	r1, #0
    47aa:	0312      	lsls	r2, r2, #12
    47ac:	0d0b      	lsrs	r3, r1, #20
    47ae:	051b      	lsls	r3, r3, #20
    47b0:	0564      	lsls	r4, r4, #21
    47b2:	0b12      	lsrs	r2, r2, #12
    47b4:	431a      	orrs	r2, r3
    47b6:	0863      	lsrs	r3, r4, #1
    47b8:	4cc2      	ldr	r4, [pc, #776]	; (4ac4 <__aeabi_dadd+0x3b4>)
    47ba:	07f6      	lsls	r6, r6, #31
    47bc:	4014      	ands	r4, r2
    47be:	431c      	orrs	r4, r3
    47c0:	0064      	lsls	r4, r4, #1
    47c2:	0864      	lsrs	r4, r4, #1
    47c4:	4334      	orrs	r4, r6
    47c6:	1c28      	adds	r0, r5, #0
    47c8:	1c21      	adds	r1, r4, #0
    47ca:	bc1c      	pop	{r2, r3, r4}
    47cc:	4690      	mov	r8, r2
    47ce:	4699      	mov	r9, r3
    47d0:	46a2      	mov	sl, r4
    47d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d4:	4bb9      	ldr	r3, [pc, #740]	; (4abc <__aeabi_dadd+0x3ac>)
    47d6:	429c      	cmp	r4, r3
    47d8:	d0c2      	beq.n	4760 <__aeabi_dadd+0x50>
    47da:	2380      	movs	r3, #128	; 0x80
    47dc:	041b      	lsls	r3, r3, #16
    47de:	4319      	orrs	r1, r3
    47e0:	2838      	cmp	r0, #56	; 0x38
    47e2:	dd00      	ble.n	47e6 <__aeabi_dadd+0xd6>
    47e4:	e0ec      	b.n	49c0 <__aeabi_dadd+0x2b0>
    47e6:	281f      	cmp	r0, #31
    47e8:	dd00      	ble.n	47ec <__aeabi_dadd+0xdc>
    47ea:	e121      	b.n	4a30 <__aeabi_dadd+0x320>
    47ec:	2220      	movs	r2, #32
    47ee:	1c0e      	adds	r6, r1, #0
    47f0:	4663      	mov	r3, ip
    47f2:	1a12      	subs	r2, r2, r0
    47f4:	4096      	lsls	r6, r2
    47f6:	40c3      	lsrs	r3, r0
    47f8:	4333      	orrs	r3, r6
    47fa:	4666      	mov	r6, ip
    47fc:	4096      	lsls	r6, r2
    47fe:	1c32      	adds	r2, r6, #0
    4800:	1e56      	subs	r6, r2, #1
    4802:	41b2      	sbcs	r2, r6
    4804:	4313      	orrs	r3, r2
    4806:	1c0a      	adds	r2, r1, #0
    4808:	40c2      	lsrs	r2, r0
    480a:	1aeb      	subs	r3, r5, r3
    480c:	429d      	cmp	r5, r3
    480e:	41b6      	sbcs	r6, r6
    4810:	1c1d      	adds	r5, r3, #0
    4812:	1aba      	subs	r2, r7, r2
    4814:	4276      	negs	r6, r6
    4816:	1b97      	subs	r7, r2, r6
    4818:	023b      	lsls	r3, r7, #8
    481a:	d400      	bmi.n	481e <__aeabi_dadd+0x10e>
    481c:	e097      	b.n	494e <__aeabi_dadd+0x23e>
    481e:	027a      	lsls	r2, r7, #9
    4820:	0a56      	lsrs	r6, r2, #9
    4822:	2e00      	cmp	r6, #0
    4824:	d100      	bne.n	4828 <__aeabi_dadd+0x118>
    4826:	e0b6      	b.n	4996 <__aeabi_dadd+0x286>
    4828:	1c30      	adds	r0, r6, #0
    482a:	f001 fe0b 	bl	6444 <__clzsi2>
    482e:	1c03      	adds	r3, r0, #0
    4830:	3b08      	subs	r3, #8
    4832:	2b1f      	cmp	r3, #31
    4834:	dd00      	ble.n	4838 <__aeabi_dadd+0x128>
    4836:	e0b7      	b.n	49a8 <__aeabi_dadd+0x298>
    4838:	409e      	lsls	r6, r3
    483a:	1c37      	adds	r7, r6, #0
    483c:	2628      	movs	r6, #40	; 0x28
    483e:	1c2a      	adds	r2, r5, #0
    4840:	1a36      	subs	r6, r6, r0
    4842:	40f2      	lsrs	r2, r6
    4844:	1c16      	adds	r6, r2, #0
    4846:	409d      	lsls	r5, r3
    4848:	433e      	orrs	r6, r7
    484a:	429c      	cmp	r4, r3
    484c:	dd00      	ble.n	4850 <__aeabi_dadd+0x140>
    484e:	e0b2      	b.n	49b6 <__aeabi_dadd+0x2a6>
    4850:	1b1c      	subs	r4, r3, r4
    4852:	1c62      	adds	r2, r4, #1
    4854:	2a1f      	cmp	r2, #31
    4856:	dd00      	ble.n	485a <__aeabi_dadd+0x14a>
    4858:	e0d8      	b.n	4a0c <__aeabi_dadd+0x2fc>
    485a:	231f      	movs	r3, #31
    485c:	1c29      	adds	r1, r5, #0
    485e:	1b1c      	subs	r4, r3, r4
    4860:	1c33      	adds	r3, r6, #0
    4862:	40a5      	lsls	r5, r4
    4864:	40a3      	lsls	r3, r4
    4866:	40d1      	lsrs	r1, r2
    4868:	1e6c      	subs	r4, r5, #1
    486a:	41a5      	sbcs	r5, r4
    486c:	40d6      	lsrs	r6, r2
    486e:	4319      	orrs	r1, r3
    4870:	430d      	orrs	r5, r1
    4872:	1c37      	adds	r7, r6, #0
    4874:	2400      	movs	r4, #0
    4876:	e773      	b.n	4760 <__aeabi_dadd+0x50>
    4878:	2380      	movs	r3, #128	; 0x80
    487a:	041b      	lsls	r3, r3, #16
    487c:	403b      	ands	r3, r7
    487e:	4646      	mov	r6, r8
    4880:	d000      	beq.n	4884 <__aeabi_dadd+0x174>
    4882:	e782      	b.n	478a <__aeabi_dadd+0x7a>
    4884:	4b8d      	ldr	r3, [pc, #564]	; (4abc <__aeabi_dadd+0x3ac>)
    4886:	08ed      	lsrs	r5, r5, #3
    4888:	0778      	lsls	r0, r7, #29
    488a:	4305      	orrs	r5, r0
    488c:	08fa      	lsrs	r2, r7, #3
    488e:	429c      	cmp	r4, r3
    4890:	d032      	beq.n	48f8 <__aeabi_dadd+0x1e8>
    4892:	0312      	lsls	r2, r2, #12
    4894:	0564      	lsls	r4, r4, #21
    4896:	0b12      	lsrs	r2, r2, #12
    4898:	0d64      	lsrs	r4, r4, #21
    489a:	e785      	b.n	47a8 <__aeabi_dadd+0x98>
    489c:	1aa3      	subs	r3, r4, r2
    489e:	2b00      	cmp	r3, #0
    48a0:	dc00      	bgt.n	48a4 <__aeabi_dadd+0x194>
    48a2:	e094      	b.n	49ce <__aeabi_dadd+0x2be>
    48a4:	2a00      	cmp	r2, #0
    48a6:	d03c      	beq.n	4922 <__aeabi_dadd+0x212>
    48a8:	4a84      	ldr	r2, [pc, #528]	; (4abc <__aeabi_dadd+0x3ac>)
    48aa:	4294      	cmp	r4, r2
    48ac:	d100      	bne.n	48b0 <__aeabi_dadd+0x1a0>
    48ae:	e757      	b.n	4760 <__aeabi_dadd+0x50>
    48b0:	2280      	movs	r2, #128	; 0x80
    48b2:	0412      	lsls	r2, r2, #16
    48b4:	4311      	orrs	r1, r2
    48b6:	2b38      	cmp	r3, #56	; 0x38
    48b8:	dc00      	bgt.n	48bc <__aeabi_dadd+0x1ac>
    48ba:	e105      	b.n	4ac8 <__aeabi_dadd+0x3b8>
    48bc:	4663      	mov	r3, ip
    48be:	4319      	orrs	r1, r3
    48c0:	1e48      	subs	r0, r1, #1
    48c2:	4181      	sbcs	r1, r0
    48c4:	2200      	movs	r2, #0
    48c6:	b2c8      	uxtb	r0, r1
    48c8:	1940      	adds	r0, r0, r5
    48ca:	42a8      	cmp	r0, r5
    48cc:	419b      	sbcs	r3, r3
    48ce:	1c05      	adds	r5, r0, #0
    48d0:	19d2      	adds	r2, r2, r7
    48d2:	425b      	negs	r3, r3
    48d4:	18d7      	adds	r7, r2, r3
    48d6:	023b      	lsls	r3, r7, #8
    48d8:	d539      	bpl.n	494e <__aeabi_dadd+0x23e>
    48da:	4b78      	ldr	r3, [pc, #480]	; (4abc <__aeabi_dadd+0x3ac>)
    48dc:	3401      	adds	r4, #1
    48de:	429c      	cmp	r4, r3
    48e0:	d100      	bne.n	48e4 <__aeabi_dadd+0x1d4>
    48e2:	e14c      	b.n	4b7e <__aeabi_dadd+0x46e>
    48e4:	2001      	movs	r0, #1
    48e6:	4a76      	ldr	r2, [pc, #472]	; (4ac0 <__aeabi_dadd+0x3b0>)
    48e8:	086b      	lsrs	r3, r5, #1
    48ea:	403a      	ands	r2, r7
    48ec:	4028      	ands	r0, r5
    48ee:	4318      	orrs	r0, r3
    48f0:	07d5      	lsls	r5, r2, #31
    48f2:	4305      	orrs	r5, r0
    48f4:	0857      	lsrs	r7, r2, #1
    48f6:	e733      	b.n	4760 <__aeabi_dadd+0x50>
    48f8:	1c2b      	adds	r3, r5, #0
    48fa:	4313      	orrs	r3, r2
    48fc:	d048      	beq.n	4990 <__aeabi_dadd+0x280>
    48fe:	2380      	movs	r3, #128	; 0x80
    4900:	031b      	lsls	r3, r3, #12
    4902:	431a      	orrs	r2, r3
    4904:	0312      	lsls	r2, r2, #12
    4906:	0b12      	lsrs	r2, r2, #12
    4908:	e74e      	b.n	47a8 <__aeabi_dadd+0x98>
    490a:	3801      	subs	r0, #1
    490c:	2800      	cmp	r0, #0
    490e:	d178      	bne.n	4a02 <__aeabi_dadd+0x2f2>
    4910:	4663      	mov	r3, ip
    4912:	1aee      	subs	r6, r5, r3
    4914:	42b5      	cmp	r5, r6
    4916:	419b      	sbcs	r3, r3
    4918:	1a7a      	subs	r2, r7, r1
    491a:	425b      	negs	r3, r3
    491c:	1ad7      	subs	r7, r2, r3
    491e:	1c35      	adds	r5, r6, #0
    4920:	e77a      	b.n	4818 <__aeabi_dadd+0x108>
    4922:	1c02      	adds	r2, r0, #0
    4924:	430a      	orrs	r2, r1
    4926:	d100      	bne.n	492a <__aeabi_dadd+0x21a>
    4928:	e71a      	b.n	4760 <__aeabi_dadd+0x50>
    492a:	3b01      	subs	r3, #1
    492c:	2b00      	cmp	r3, #0
    492e:	d000      	beq.n	4932 <__aeabi_dadd+0x222>
    4930:	e0f2      	b.n	4b18 <__aeabi_dadd+0x408>
    4932:	1940      	adds	r0, r0, r5
    4934:	42a8      	cmp	r0, r5
    4936:	419b      	sbcs	r3, r3
    4938:	19ca      	adds	r2, r1, r7
    493a:	425b      	negs	r3, r3
    493c:	18d7      	adds	r7, r2, r3
    493e:	1c05      	adds	r5, r0, #0
    4940:	e7c9      	b.n	48d6 <__aeabi_dadd+0x1c6>
    4942:	1c13      	adds	r3, r2, #0
    4944:	4333      	orrs	r3, r6
    4946:	d100      	bne.n	494a <__aeabi_dadd+0x23a>
    4948:	e118      	b.n	4b7c <__aeabi_dadd+0x46c>
    494a:	1c17      	adds	r7, r2, #0
    494c:	1c35      	adds	r5, r6, #0
    494e:	4646      	mov	r6, r8
    4950:	076b      	lsls	r3, r5, #29
    4952:	d000      	beq.n	4956 <__aeabi_dadd+0x246>
    4954:	e707      	b.n	4766 <__aeabi_dadd+0x56>
    4956:	e795      	b.n	4884 <__aeabi_dadd+0x174>
    4958:	2800      	cmp	r0, #0
    495a:	d17a      	bne.n	4a52 <__aeabi_dadd+0x342>
    495c:	1c62      	adds	r2, r4, #1
    495e:	0552      	lsls	r2, r2, #21
    4960:	0d52      	lsrs	r2, r2, #21
    4962:	2a01      	cmp	r2, #1
    4964:	dc00      	bgt.n	4968 <__aeabi_dadd+0x258>
    4966:	e0fb      	b.n	4b60 <__aeabi_dadd+0x450>
    4968:	4662      	mov	r2, ip
    496a:	1aaa      	subs	r2, r5, r2
    496c:	4295      	cmp	r5, r2
    496e:	41b6      	sbcs	r6, r6
    4970:	4691      	mov	r9, r2
    4972:	1a78      	subs	r0, r7, r1
    4974:	4272      	negs	r2, r6
    4976:	1a86      	subs	r6, r0, r2
    4978:	0232      	lsls	r2, r6, #8
    497a:	d400      	bmi.n	497e <__aeabi_dadd+0x26e>
    497c:	e093      	b.n	4aa6 <__aeabi_dadd+0x396>
    497e:	4662      	mov	r2, ip
    4980:	1b55      	subs	r5, r2, r5
    4982:	45ac      	cmp	ip, r5
    4984:	4180      	sbcs	r0, r0
    4986:	1bcf      	subs	r7, r1, r7
    4988:	4240      	negs	r0, r0
    498a:	1a3e      	subs	r6, r7, r0
    498c:	4698      	mov	r8, r3
    498e:	e748      	b.n	4822 <__aeabi_dadd+0x112>
    4990:	2200      	movs	r2, #0
    4992:	2500      	movs	r5, #0
    4994:	e708      	b.n	47a8 <__aeabi_dadd+0x98>
    4996:	1c28      	adds	r0, r5, #0
    4998:	f001 fd54 	bl	6444 <__clzsi2>
    499c:	3020      	adds	r0, #32
    499e:	1c03      	adds	r3, r0, #0
    49a0:	3b08      	subs	r3, #8
    49a2:	2b1f      	cmp	r3, #31
    49a4:	dc00      	bgt.n	49a8 <__aeabi_dadd+0x298>
    49a6:	e747      	b.n	4838 <__aeabi_dadd+0x128>
    49a8:	3828      	subs	r0, #40	; 0x28
    49aa:	4085      	lsls	r5, r0
    49ac:	1c2e      	adds	r6, r5, #0
    49ae:	2500      	movs	r5, #0
    49b0:	429c      	cmp	r4, r3
    49b2:	dc00      	bgt.n	49b6 <__aeabi_dadd+0x2a6>
    49b4:	e74c      	b.n	4850 <__aeabi_dadd+0x140>
    49b6:	4a42      	ldr	r2, [pc, #264]	; (4ac0 <__aeabi_dadd+0x3b0>)
    49b8:	1ae4      	subs	r4, r4, r3
    49ba:	4016      	ands	r6, r2
    49bc:	1c37      	adds	r7, r6, #0
    49be:	e6cf      	b.n	4760 <__aeabi_dadd+0x50>
    49c0:	4663      	mov	r3, ip
    49c2:	4319      	orrs	r1, r3
    49c4:	1e4b      	subs	r3, r1, #1
    49c6:	4199      	sbcs	r1, r3
    49c8:	2200      	movs	r2, #0
    49ca:	b2cb      	uxtb	r3, r1
    49cc:	e71d      	b.n	480a <__aeabi_dadd+0xfa>
    49ce:	2b00      	cmp	r3, #0
    49d0:	d000      	beq.n	49d4 <__aeabi_dadd+0x2c4>
    49d2:	e0f2      	b.n	4bba <__aeabi_dadd+0x4aa>
    49d4:	1c60      	adds	r0, r4, #1
    49d6:	0543      	lsls	r3, r0, #21
    49d8:	0d5b      	lsrs	r3, r3, #21
    49da:	2b01      	cmp	r3, #1
    49dc:	dc00      	bgt.n	49e0 <__aeabi_dadd+0x2d0>
    49de:	e0a4      	b.n	4b2a <__aeabi_dadd+0x41a>
    49e0:	4b36      	ldr	r3, [pc, #216]	; (4abc <__aeabi_dadd+0x3ac>)
    49e2:	4298      	cmp	r0, r3
    49e4:	d100      	bne.n	49e8 <__aeabi_dadd+0x2d8>
    49e6:	e121      	b.n	4c2c <__aeabi_dadd+0x51c>
    49e8:	4663      	mov	r3, ip
    49ea:	195c      	adds	r4, r3, r5
    49ec:	42ac      	cmp	r4, r5
    49ee:	419b      	sbcs	r3, r3
    49f0:	19cf      	adds	r7, r1, r7
    49f2:	425b      	negs	r3, r3
    49f4:	18fa      	adds	r2, r7, r3
    49f6:	0864      	lsrs	r4, r4, #1
    49f8:	07d5      	lsls	r5, r2, #31
    49fa:	4325      	orrs	r5, r4
    49fc:	0857      	lsrs	r7, r2, #1
    49fe:	1c04      	adds	r4, r0, #0
    4a00:	e6ae      	b.n	4760 <__aeabi_dadd+0x50>
    4a02:	4b2e      	ldr	r3, [pc, #184]	; (4abc <__aeabi_dadd+0x3ac>)
    4a04:	429c      	cmp	r4, r3
    4a06:	d000      	beq.n	4a0a <__aeabi_dadd+0x2fa>
    4a08:	e6ea      	b.n	47e0 <__aeabi_dadd+0xd0>
    4a0a:	e6a9      	b.n	4760 <__aeabi_dadd+0x50>
    4a0c:	1c21      	adds	r1, r4, #0
    4a0e:	1c33      	adds	r3, r6, #0
    4a10:	391f      	subs	r1, #31
    4a12:	40cb      	lsrs	r3, r1
    4a14:	1c19      	adds	r1, r3, #0
    4a16:	2a20      	cmp	r2, #32
    4a18:	d100      	bne.n	4a1c <__aeabi_dadd+0x30c>
    4a1a:	e082      	b.n	4b22 <__aeabi_dadd+0x412>
    4a1c:	233f      	movs	r3, #63	; 0x3f
    4a1e:	1b1c      	subs	r4, r3, r4
    4a20:	40a6      	lsls	r6, r4
    4a22:	4335      	orrs	r5, r6
    4a24:	1e6e      	subs	r6, r5, #1
    4a26:	41b5      	sbcs	r5, r6
    4a28:	2700      	movs	r7, #0
    4a2a:	430d      	orrs	r5, r1
    4a2c:	2400      	movs	r4, #0
    4a2e:	e78e      	b.n	494e <__aeabi_dadd+0x23e>
    4a30:	1c03      	adds	r3, r0, #0
    4a32:	1c0e      	adds	r6, r1, #0
    4a34:	3b20      	subs	r3, #32
    4a36:	40de      	lsrs	r6, r3
    4a38:	2820      	cmp	r0, #32
    4a3a:	d074      	beq.n	4b26 <__aeabi_dadd+0x416>
    4a3c:	2340      	movs	r3, #64	; 0x40
    4a3e:	1a1b      	subs	r3, r3, r0
    4a40:	4099      	lsls	r1, r3
    4a42:	1c0b      	adds	r3, r1, #0
    4a44:	4662      	mov	r2, ip
    4a46:	4313      	orrs	r3, r2
    4a48:	1e59      	subs	r1, r3, #1
    4a4a:	418b      	sbcs	r3, r1
    4a4c:	2200      	movs	r2, #0
    4a4e:	4333      	orrs	r3, r6
    4a50:	e6db      	b.n	480a <__aeabi_dadd+0xfa>
    4a52:	2c00      	cmp	r4, #0
    4a54:	d050      	beq.n	4af8 <__aeabi_dadd+0x3e8>
    4a56:	4c19      	ldr	r4, [pc, #100]	; (4abc <__aeabi_dadd+0x3ac>)
    4a58:	42a2      	cmp	r2, r4
    4a5a:	d100      	bne.n	4a5e <__aeabi_dadd+0x34e>
    4a5c:	e0a8      	b.n	4bb0 <__aeabi_dadd+0x4a0>
    4a5e:	2480      	movs	r4, #128	; 0x80
    4a60:	0424      	lsls	r4, r4, #16
    4a62:	4240      	negs	r0, r0
    4a64:	4327      	orrs	r7, r4
    4a66:	2838      	cmp	r0, #56	; 0x38
    4a68:	dd00      	ble.n	4a6c <__aeabi_dadd+0x35c>
    4a6a:	e0d9      	b.n	4c20 <__aeabi_dadd+0x510>
    4a6c:	281f      	cmp	r0, #31
    4a6e:	dd00      	ble.n	4a72 <__aeabi_dadd+0x362>
    4a70:	e139      	b.n	4ce6 <__aeabi_dadd+0x5d6>
    4a72:	2420      	movs	r4, #32
    4a74:	1c3e      	adds	r6, r7, #0
    4a76:	1a24      	subs	r4, r4, r0
    4a78:	40a6      	lsls	r6, r4
    4a7a:	46b0      	mov	r8, r6
    4a7c:	1c2e      	adds	r6, r5, #0
    4a7e:	46a1      	mov	r9, r4
    4a80:	40c6      	lsrs	r6, r0
    4a82:	4644      	mov	r4, r8
    4a84:	4326      	orrs	r6, r4
    4a86:	464c      	mov	r4, r9
    4a88:	40a5      	lsls	r5, r4
    4a8a:	1e6c      	subs	r4, r5, #1
    4a8c:	41a5      	sbcs	r5, r4
    4a8e:	40c7      	lsrs	r7, r0
    4a90:	4335      	orrs	r5, r6
    4a92:	4660      	mov	r0, ip
    4a94:	1b45      	subs	r5, r0, r5
    4a96:	1bcf      	subs	r7, r1, r7
    4a98:	45ac      	cmp	ip, r5
    4a9a:	4189      	sbcs	r1, r1
    4a9c:	4249      	negs	r1, r1
    4a9e:	1a7f      	subs	r7, r7, r1
    4aa0:	1c14      	adds	r4, r2, #0
    4aa2:	4698      	mov	r8, r3
    4aa4:	e6b8      	b.n	4818 <__aeabi_dadd+0x108>
    4aa6:	464b      	mov	r3, r9
    4aa8:	464d      	mov	r5, r9
    4aaa:	4333      	orrs	r3, r6
    4aac:	d000      	beq.n	4ab0 <__aeabi_dadd+0x3a0>
    4aae:	e6b8      	b.n	4822 <__aeabi_dadd+0x112>
    4ab0:	2600      	movs	r6, #0
    4ab2:	2700      	movs	r7, #0
    4ab4:	2400      	movs	r4, #0
    4ab6:	2500      	movs	r5, #0
    4ab8:	e6e4      	b.n	4884 <__aeabi_dadd+0x174>
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	000007ff 	.word	0x000007ff
    4ac0:	ff7fffff 	.word	0xff7fffff
    4ac4:	800fffff 	.word	0x800fffff
    4ac8:	2b1f      	cmp	r3, #31
    4aca:	dc5b      	bgt.n	4b84 <__aeabi_dadd+0x474>
    4acc:	2220      	movs	r2, #32
    4ace:	1c08      	adds	r0, r1, #0
    4ad0:	1ad2      	subs	r2, r2, r3
    4ad2:	4090      	lsls	r0, r2
    4ad4:	4681      	mov	r9, r0
    4ad6:	4660      	mov	r0, ip
    4ad8:	4692      	mov	sl, r2
    4ada:	40d8      	lsrs	r0, r3
    4adc:	464a      	mov	r2, r9
    4ade:	4310      	orrs	r0, r2
    4ae0:	4681      	mov	r9, r0
    4ae2:	4652      	mov	r2, sl
    4ae4:	4660      	mov	r0, ip
    4ae6:	4090      	lsls	r0, r2
    4ae8:	1c02      	adds	r2, r0, #0
    4aea:	1e50      	subs	r0, r2, #1
    4aec:	4182      	sbcs	r2, r0
    4aee:	4648      	mov	r0, r9
    4af0:	4310      	orrs	r0, r2
    4af2:	1c0a      	adds	r2, r1, #0
    4af4:	40da      	lsrs	r2, r3
    4af6:	e6e7      	b.n	48c8 <__aeabi_dadd+0x1b8>
    4af8:	1c3c      	adds	r4, r7, #0
    4afa:	432c      	orrs	r4, r5
    4afc:	d058      	beq.n	4bb0 <__aeabi_dadd+0x4a0>
    4afe:	43c0      	mvns	r0, r0
    4b00:	2800      	cmp	r0, #0
    4b02:	d151      	bne.n	4ba8 <__aeabi_dadd+0x498>
    4b04:	4660      	mov	r0, ip
    4b06:	1b45      	subs	r5, r0, r5
    4b08:	45ac      	cmp	ip, r5
    4b0a:	4180      	sbcs	r0, r0
    4b0c:	1bcf      	subs	r7, r1, r7
    4b0e:	4240      	negs	r0, r0
    4b10:	1a3f      	subs	r7, r7, r0
    4b12:	1c14      	adds	r4, r2, #0
    4b14:	4698      	mov	r8, r3
    4b16:	e67f      	b.n	4818 <__aeabi_dadd+0x108>
    4b18:	4a8f      	ldr	r2, [pc, #572]	; (4d58 <__aeabi_dadd+0x648>)
    4b1a:	4294      	cmp	r4, r2
    4b1c:	d000      	beq.n	4b20 <__aeabi_dadd+0x410>
    4b1e:	e6ca      	b.n	48b6 <__aeabi_dadd+0x1a6>
    4b20:	e61e      	b.n	4760 <__aeabi_dadd+0x50>
    4b22:	2600      	movs	r6, #0
    4b24:	e77d      	b.n	4a22 <__aeabi_dadd+0x312>
    4b26:	2300      	movs	r3, #0
    4b28:	e78c      	b.n	4a44 <__aeabi_dadd+0x334>
    4b2a:	1c3b      	adds	r3, r7, #0
    4b2c:	432b      	orrs	r3, r5
    4b2e:	2c00      	cmp	r4, #0
    4b30:	d000      	beq.n	4b34 <__aeabi_dadd+0x424>
    4b32:	e0bd      	b.n	4cb0 <__aeabi_dadd+0x5a0>
    4b34:	2b00      	cmp	r3, #0
    4b36:	d100      	bne.n	4b3a <__aeabi_dadd+0x42a>
    4b38:	e0f5      	b.n	4d26 <__aeabi_dadd+0x616>
    4b3a:	4663      	mov	r3, ip
    4b3c:	430b      	orrs	r3, r1
    4b3e:	d100      	bne.n	4b42 <__aeabi_dadd+0x432>
    4b40:	e60e      	b.n	4760 <__aeabi_dadd+0x50>
    4b42:	4663      	mov	r3, ip
    4b44:	195b      	adds	r3, r3, r5
    4b46:	42ab      	cmp	r3, r5
    4b48:	4180      	sbcs	r0, r0
    4b4a:	19ca      	adds	r2, r1, r7
    4b4c:	4240      	negs	r0, r0
    4b4e:	1817      	adds	r7, r2, r0
    4b50:	023a      	lsls	r2, r7, #8
    4b52:	d400      	bmi.n	4b56 <__aeabi_dadd+0x446>
    4b54:	e0fc      	b.n	4d50 <__aeabi_dadd+0x640>
    4b56:	4a81      	ldr	r2, [pc, #516]	; (4d5c <__aeabi_dadd+0x64c>)
    4b58:	1c1d      	adds	r5, r3, #0
    4b5a:	4017      	ands	r7, r2
    4b5c:	3401      	adds	r4, #1
    4b5e:	e5ff      	b.n	4760 <__aeabi_dadd+0x50>
    4b60:	1c3a      	adds	r2, r7, #0
    4b62:	432a      	orrs	r2, r5
    4b64:	2c00      	cmp	r4, #0
    4b66:	d151      	bne.n	4c0c <__aeabi_dadd+0x4fc>
    4b68:	2a00      	cmp	r2, #0
    4b6a:	d000      	beq.n	4b6e <__aeabi_dadd+0x45e>
    4b6c:	e085      	b.n	4c7a <__aeabi_dadd+0x56a>
    4b6e:	4662      	mov	r2, ip
    4b70:	430a      	orrs	r2, r1
    4b72:	d003      	beq.n	4b7c <__aeabi_dadd+0x46c>
    4b74:	1c0f      	adds	r7, r1, #0
    4b76:	4665      	mov	r5, ip
    4b78:	4698      	mov	r8, r3
    4b7a:	e5f1      	b.n	4760 <__aeabi_dadd+0x50>
    4b7c:	2600      	movs	r6, #0
    4b7e:	2700      	movs	r7, #0
    4b80:	2500      	movs	r5, #0
    4b82:	e67f      	b.n	4884 <__aeabi_dadd+0x174>
    4b84:	1c18      	adds	r0, r3, #0
    4b86:	1c0a      	adds	r2, r1, #0
    4b88:	3820      	subs	r0, #32
    4b8a:	40c2      	lsrs	r2, r0
    4b8c:	2b20      	cmp	r3, #32
    4b8e:	d100      	bne.n	4b92 <__aeabi_dadd+0x482>
    4b90:	e0a7      	b.n	4ce2 <__aeabi_dadd+0x5d2>
    4b92:	2040      	movs	r0, #64	; 0x40
    4b94:	1ac0      	subs	r0, r0, r3
    4b96:	4081      	lsls	r1, r0
    4b98:	1c08      	adds	r0, r1, #0
    4b9a:	4663      	mov	r3, ip
    4b9c:	4318      	orrs	r0, r3
    4b9e:	1e41      	subs	r1, r0, #1
    4ba0:	4188      	sbcs	r0, r1
    4ba2:	4310      	orrs	r0, r2
    4ba4:	2200      	movs	r2, #0
    4ba6:	e68f      	b.n	48c8 <__aeabi_dadd+0x1b8>
    4ba8:	4c6b      	ldr	r4, [pc, #428]	; (4d58 <__aeabi_dadd+0x648>)
    4baa:	42a2      	cmp	r2, r4
    4bac:	d000      	beq.n	4bb0 <__aeabi_dadd+0x4a0>
    4bae:	e75a      	b.n	4a66 <__aeabi_dadd+0x356>
    4bb0:	1c0f      	adds	r7, r1, #0
    4bb2:	4665      	mov	r5, ip
    4bb4:	1c14      	adds	r4, r2, #0
    4bb6:	4698      	mov	r8, r3
    4bb8:	e5d2      	b.n	4760 <__aeabi_dadd+0x50>
    4bba:	2c00      	cmp	r4, #0
    4bbc:	d13a      	bne.n	4c34 <__aeabi_dadd+0x524>
    4bbe:	1c38      	adds	r0, r7, #0
    4bc0:	4328      	orrs	r0, r5
    4bc2:	d071      	beq.n	4ca8 <__aeabi_dadd+0x598>
    4bc4:	43db      	mvns	r3, r3
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d018      	beq.n	4bfc <__aeabi_dadd+0x4ec>
    4bca:	4863      	ldr	r0, [pc, #396]	; (4d58 <__aeabi_dadd+0x648>)
    4bcc:	4282      	cmp	r2, r0
    4bce:	d06b      	beq.n	4ca8 <__aeabi_dadd+0x598>
    4bd0:	2b38      	cmp	r3, #56	; 0x38
    4bd2:	dd00      	ble.n	4bd6 <__aeabi_dadd+0x4c6>
    4bd4:	e09d      	b.n	4d12 <__aeabi_dadd+0x602>
    4bd6:	2b1f      	cmp	r3, #31
    4bd8:	dd00      	ble.n	4bdc <__aeabi_dadd+0x4cc>
    4bda:	e0a7      	b.n	4d2c <__aeabi_dadd+0x61c>
    4bdc:	2020      	movs	r0, #32
    4bde:	1c3c      	adds	r4, r7, #0
    4be0:	1ac0      	subs	r0, r0, r3
    4be2:	4084      	lsls	r4, r0
    4be4:	46a1      	mov	r9, r4
    4be6:	1c2c      	adds	r4, r5, #0
    4be8:	4682      	mov	sl, r0
    4bea:	40dc      	lsrs	r4, r3
    4bec:	4648      	mov	r0, r9
    4bee:	4304      	orrs	r4, r0
    4bf0:	4650      	mov	r0, sl
    4bf2:	4085      	lsls	r5, r0
    4bf4:	1e68      	subs	r0, r5, #1
    4bf6:	4185      	sbcs	r5, r0
    4bf8:	40df      	lsrs	r7, r3
    4bfa:	4325      	orrs	r5, r4
    4bfc:	4465      	add	r5, ip
    4bfe:	4565      	cmp	r5, ip
    4c00:	419b      	sbcs	r3, r3
    4c02:	187f      	adds	r7, r7, r1
    4c04:	425b      	negs	r3, r3
    4c06:	18ff      	adds	r7, r7, r3
    4c08:	1c14      	adds	r4, r2, #0
    4c0a:	e664      	b.n	48d6 <__aeabi_dadd+0x1c6>
    4c0c:	2a00      	cmp	r2, #0
    4c0e:	d119      	bne.n	4c44 <__aeabi_dadd+0x534>
    4c10:	4662      	mov	r2, ip
    4c12:	430a      	orrs	r2, r1
    4c14:	d077      	beq.n	4d06 <__aeabi_dadd+0x5f6>
    4c16:	1c0f      	adds	r7, r1, #0
    4c18:	4665      	mov	r5, ip
    4c1a:	4698      	mov	r8, r3
    4c1c:	4c4e      	ldr	r4, [pc, #312]	; (4d58 <__aeabi_dadd+0x648>)
    4c1e:	e59f      	b.n	4760 <__aeabi_dadd+0x50>
    4c20:	433d      	orrs	r5, r7
    4c22:	1e6f      	subs	r7, r5, #1
    4c24:	41bd      	sbcs	r5, r7
    4c26:	2700      	movs	r7, #0
    4c28:	b2ed      	uxtb	r5, r5
    4c2a:	e732      	b.n	4a92 <__aeabi_dadd+0x382>
    4c2c:	1c04      	adds	r4, r0, #0
    4c2e:	2700      	movs	r7, #0
    4c30:	2500      	movs	r5, #0
    4c32:	e627      	b.n	4884 <__aeabi_dadd+0x174>
    4c34:	4848      	ldr	r0, [pc, #288]	; (4d58 <__aeabi_dadd+0x648>)
    4c36:	4282      	cmp	r2, r0
    4c38:	d036      	beq.n	4ca8 <__aeabi_dadd+0x598>
    4c3a:	2080      	movs	r0, #128	; 0x80
    4c3c:	0400      	lsls	r0, r0, #16
    4c3e:	425b      	negs	r3, r3
    4c40:	4307      	orrs	r7, r0
    4c42:	e7c5      	b.n	4bd0 <__aeabi_dadd+0x4c0>
    4c44:	4662      	mov	r2, ip
    4c46:	430a      	orrs	r2, r1
    4c48:	d049      	beq.n	4cde <__aeabi_dadd+0x5ce>
    4c4a:	2480      	movs	r4, #128	; 0x80
    4c4c:	08ed      	lsrs	r5, r5, #3
    4c4e:	0778      	lsls	r0, r7, #29
    4c50:	08fa      	lsrs	r2, r7, #3
    4c52:	0324      	lsls	r4, r4, #12
    4c54:	4328      	orrs	r0, r5
    4c56:	4222      	tst	r2, r4
    4c58:	d009      	beq.n	4c6e <__aeabi_dadd+0x55e>
    4c5a:	08ce      	lsrs	r6, r1, #3
    4c5c:	4226      	tst	r6, r4
    4c5e:	d106      	bne.n	4c6e <__aeabi_dadd+0x55e>
    4c60:	4662      	mov	r2, ip
    4c62:	074f      	lsls	r7, r1, #29
    4c64:	1c38      	adds	r0, r7, #0
    4c66:	08d2      	lsrs	r2, r2, #3
    4c68:	4310      	orrs	r0, r2
    4c6a:	4698      	mov	r8, r3
    4c6c:	1c32      	adds	r2, r6, #0
    4c6e:	00d2      	lsls	r2, r2, #3
    4c70:	0f47      	lsrs	r7, r0, #29
    4c72:	4317      	orrs	r7, r2
    4c74:	00c5      	lsls	r5, r0, #3
    4c76:	4c38      	ldr	r4, [pc, #224]	; (4d58 <__aeabi_dadd+0x648>)
    4c78:	e572      	b.n	4760 <__aeabi_dadd+0x50>
    4c7a:	4662      	mov	r2, ip
    4c7c:	430a      	orrs	r2, r1
    4c7e:	d100      	bne.n	4c82 <__aeabi_dadd+0x572>
    4c80:	e56e      	b.n	4760 <__aeabi_dadd+0x50>
    4c82:	4662      	mov	r2, ip
    4c84:	1aae      	subs	r6, r5, r2
    4c86:	42b5      	cmp	r5, r6
    4c88:	4192      	sbcs	r2, r2
    4c8a:	1a78      	subs	r0, r7, r1
    4c8c:	4252      	negs	r2, r2
    4c8e:	1a82      	subs	r2, r0, r2
    4c90:	0210      	lsls	r0, r2, #8
    4c92:	d400      	bmi.n	4c96 <__aeabi_dadd+0x586>
    4c94:	e655      	b.n	4942 <__aeabi_dadd+0x232>
    4c96:	4662      	mov	r2, ip
    4c98:	1b55      	subs	r5, r2, r5
    4c9a:	45ac      	cmp	ip, r5
    4c9c:	4180      	sbcs	r0, r0
    4c9e:	1bca      	subs	r2, r1, r7
    4ca0:	4240      	negs	r0, r0
    4ca2:	1a17      	subs	r7, r2, r0
    4ca4:	4698      	mov	r8, r3
    4ca6:	e55b      	b.n	4760 <__aeabi_dadd+0x50>
    4ca8:	1c0f      	adds	r7, r1, #0
    4caa:	4665      	mov	r5, ip
    4cac:	1c14      	adds	r4, r2, #0
    4cae:	e557      	b.n	4760 <__aeabi_dadd+0x50>
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	d034      	beq.n	4d1e <__aeabi_dadd+0x60e>
    4cb4:	4663      	mov	r3, ip
    4cb6:	430b      	orrs	r3, r1
    4cb8:	d011      	beq.n	4cde <__aeabi_dadd+0x5ce>
    4cba:	2480      	movs	r4, #128	; 0x80
    4cbc:	08ed      	lsrs	r5, r5, #3
    4cbe:	0778      	lsls	r0, r7, #29
    4cc0:	08fa      	lsrs	r2, r7, #3
    4cc2:	0324      	lsls	r4, r4, #12
    4cc4:	4328      	orrs	r0, r5
    4cc6:	4222      	tst	r2, r4
    4cc8:	d0d1      	beq.n	4c6e <__aeabi_dadd+0x55e>
    4cca:	08cb      	lsrs	r3, r1, #3
    4ccc:	4223      	tst	r3, r4
    4cce:	d1ce      	bne.n	4c6e <__aeabi_dadd+0x55e>
    4cd0:	4662      	mov	r2, ip
    4cd2:	074f      	lsls	r7, r1, #29
    4cd4:	1c38      	adds	r0, r7, #0
    4cd6:	08d2      	lsrs	r2, r2, #3
    4cd8:	4310      	orrs	r0, r2
    4cda:	1c1a      	adds	r2, r3, #0
    4cdc:	e7c7      	b.n	4c6e <__aeabi_dadd+0x55e>
    4cde:	4c1e      	ldr	r4, [pc, #120]	; (4d58 <__aeabi_dadd+0x648>)
    4ce0:	e53e      	b.n	4760 <__aeabi_dadd+0x50>
    4ce2:	2000      	movs	r0, #0
    4ce4:	e759      	b.n	4b9a <__aeabi_dadd+0x48a>
    4ce6:	1c04      	adds	r4, r0, #0
    4ce8:	1c3e      	adds	r6, r7, #0
    4cea:	3c20      	subs	r4, #32
    4cec:	40e6      	lsrs	r6, r4
    4cee:	1c34      	adds	r4, r6, #0
    4cf0:	2820      	cmp	r0, #32
    4cf2:	d02b      	beq.n	4d4c <__aeabi_dadd+0x63c>
    4cf4:	2640      	movs	r6, #64	; 0x40
    4cf6:	1a30      	subs	r0, r6, r0
    4cf8:	4087      	lsls	r7, r0
    4cfa:	433d      	orrs	r5, r7
    4cfc:	1e6f      	subs	r7, r5, #1
    4cfe:	41bd      	sbcs	r5, r7
    4d00:	2700      	movs	r7, #0
    4d02:	4325      	orrs	r5, r4
    4d04:	e6c5      	b.n	4a92 <__aeabi_dadd+0x382>
    4d06:	2780      	movs	r7, #128	; 0x80
    4d08:	2600      	movs	r6, #0
    4d0a:	03ff      	lsls	r7, r7, #15
    4d0c:	4c12      	ldr	r4, [pc, #72]	; (4d58 <__aeabi_dadd+0x648>)
    4d0e:	2500      	movs	r5, #0
    4d10:	e5b8      	b.n	4884 <__aeabi_dadd+0x174>
    4d12:	433d      	orrs	r5, r7
    4d14:	1e6f      	subs	r7, r5, #1
    4d16:	41bd      	sbcs	r5, r7
    4d18:	2700      	movs	r7, #0
    4d1a:	b2ed      	uxtb	r5, r5
    4d1c:	e76e      	b.n	4bfc <__aeabi_dadd+0x4ec>
    4d1e:	1c0f      	adds	r7, r1, #0
    4d20:	4665      	mov	r5, ip
    4d22:	4c0d      	ldr	r4, [pc, #52]	; (4d58 <__aeabi_dadd+0x648>)
    4d24:	e51c      	b.n	4760 <__aeabi_dadd+0x50>
    4d26:	1c0f      	adds	r7, r1, #0
    4d28:	4665      	mov	r5, ip
    4d2a:	e519      	b.n	4760 <__aeabi_dadd+0x50>
    4d2c:	1c1c      	adds	r4, r3, #0
    4d2e:	1c38      	adds	r0, r7, #0
    4d30:	3c20      	subs	r4, #32
    4d32:	40e0      	lsrs	r0, r4
    4d34:	1c04      	adds	r4, r0, #0
    4d36:	2b20      	cmp	r3, #32
    4d38:	d00c      	beq.n	4d54 <__aeabi_dadd+0x644>
    4d3a:	2040      	movs	r0, #64	; 0x40
    4d3c:	1ac3      	subs	r3, r0, r3
    4d3e:	409f      	lsls	r7, r3
    4d40:	433d      	orrs	r5, r7
    4d42:	1e6f      	subs	r7, r5, #1
    4d44:	41bd      	sbcs	r5, r7
    4d46:	2700      	movs	r7, #0
    4d48:	4325      	orrs	r5, r4
    4d4a:	e757      	b.n	4bfc <__aeabi_dadd+0x4ec>
    4d4c:	2700      	movs	r7, #0
    4d4e:	e7d4      	b.n	4cfa <__aeabi_dadd+0x5ea>
    4d50:	1c1d      	adds	r5, r3, #0
    4d52:	e5fc      	b.n	494e <__aeabi_dadd+0x23e>
    4d54:	2700      	movs	r7, #0
    4d56:	e7f3      	b.n	4d40 <__aeabi_dadd+0x630>
    4d58:	000007ff 	.word	0x000007ff
    4d5c:	ff7fffff 	.word	0xff7fffff

00004d60 <__aeabi_ddiv>:
    4d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d62:	465f      	mov	r7, fp
    4d64:	4656      	mov	r6, sl
    4d66:	464d      	mov	r5, r9
    4d68:	4644      	mov	r4, r8
    4d6a:	b4f0      	push	{r4, r5, r6, r7}
    4d6c:	030f      	lsls	r7, r1, #12
    4d6e:	b087      	sub	sp, #28
    4d70:	4698      	mov	r8, r3
    4d72:	004d      	lsls	r5, r1, #1
    4d74:	0b3b      	lsrs	r3, r7, #12
    4d76:	0fcc      	lsrs	r4, r1, #31
    4d78:	1c06      	adds	r6, r0, #0
    4d7a:	4692      	mov	sl, r2
    4d7c:	4681      	mov	r9, r0
    4d7e:	469b      	mov	fp, r3
    4d80:	0d6d      	lsrs	r5, r5, #21
    4d82:	9401      	str	r4, [sp, #4]
    4d84:	d06b      	beq.n	4e5e <__aeabi_ddiv+0xfe>
    4d86:	4b66      	ldr	r3, [pc, #408]	; (4f20 <__aeabi_ddiv+0x1c0>)
    4d88:	429d      	cmp	r5, r3
    4d8a:	d035      	beq.n	4df8 <__aeabi_ddiv+0x98>
    4d8c:	2780      	movs	r7, #128	; 0x80
    4d8e:	465b      	mov	r3, fp
    4d90:	037f      	lsls	r7, r7, #13
    4d92:	431f      	orrs	r7, r3
    4d94:	00f3      	lsls	r3, r6, #3
    4d96:	4699      	mov	r9, r3
    4d98:	4b62      	ldr	r3, [pc, #392]	; (4f24 <__aeabi_ddiv+0x1c4>)
    4d9a:	00ff      	lsls	r7, r7, #3
    4d9c:	0f40      	lsrs	r0, r0, #29
    4d9e:	469c      	mov	ip, r3
    4da0:	4307      	orrs	r7, r0
    4da2:	2300      	movs	r3, #0
    4da4:	46bb      	mov	fp, r7
    4da6:	2600      	movs	r6, #0
    4da8:	4465      	add	r5, ip
    4daa:	9300      	str	r3, [sp, #0]
    4dac:	4642      	mov	r2, r8
    4dae:	0317      	lsls	r7, r2, #12
    4db0:	0050      	lsls	r0, r2, #1
    4db2:	0fd2      	lsrs	r2, r2, #31
    4db4:	4653      	mov	r3, sl
    4db6:	0b3f      	lsrs	r7, r7, #12
    4db8:	0d40      	lsrs	r0, r0, #21
    4dba:	4690      	mov	r8, r2
    4dbc:	d100      	bne.n	4dc0 <__aeabi_ddiv+0x60>
    4dbe:	e072      	b.n	4ea6 <__aeabi_ddiv+0x146>
    4dc0:	4a57      	ldr	r2, [pc, #348]	; (4f20 <__aeabi_ddiv+0x1c0>)
    4dc2:	4290      	cmp	r0, r2
    4dc4:	d067      	beq.n	4e96 <__aeabi_ddiv+0x136>
    4dc6:	2380      	movs	r3, #128	; 0x80
    4dc8:	035b      	lsls	r3, r3, #13
    4dca:	431f      	orrs	r7, r3
    4dcc:	4653      	mov	r3, sl
    4dce:	4a55      	ldr	r2, [pc, #340]	; (4f24 <__aeabi_ddiv+0x1c4>)
    4dd0:	0f5b      	lsrs	r3, r3, #29
    4dd2:	00ff      	lsls	r7, r7, #3
    4dd4:	431f      	orrs	r7, r3
    4dd6:	4694      	mov	ip, r2
    4dd8:	4653      	mov	r3, sl
    4dda:	2100      	movs	r1, #0
    4ddc:	00db      	lsls	r3, r3, #3
    4dde:	4460      	add	r0, ip
    4de0:	4642      	mov	r2, r8
    4de2:	4062      	eors	r2, r4
    4de4:	4692      	mov	sl, r2
    4de6:	1a2d      	subs	r5, r5, r0
    4de8:	430e      	orrs	r6, r1
    4dea:	2e0f      	cmp	r6, #15
    4dec:	d900      	bls.n	4df0 <__aeabi_ddiv+0x90>
    4dee:	e0a1      	b.n	4f34 <__aeabi_ddiv+0x1d4>
    4df0:	484d      	ldr	r0, [pc, #308]	; (4f28 <__aeabi_ddiv+0x1c8>)
    4df2:	00b6      	lsls	r6, r6, #2
    4df4:	5980      	ldr	r0, [r0, r6]
    4df6:	4687      	mov	pc, r0
    4df8:	465b      	mov	r3, fp
    4dfa:	431e      	orrs	r6, r3
    4dfc:	d000      	beq.n	4e00 <__aeabi_ddiv+0xa0>
    4dfe:	e076      	b.n	4eee <__aeabi_ddiv+0x18e>
    4e00:	2300      	movs	r3, #0
    4e02:	469b      	mov	fp, r3
    4e04:	4699      	mov	r9, r3
    4e06:	3302      	adds	r3, #2
    4e08:	2608      	movs	r6, #8
    4e0a:	9300      	str	r3, [sp, #0]
    4e0c:	e7ce      	b.n	4dac <__aeabi_ddiv+0x4c>
    4e0e:	4699      	mov	r9, r3
    4e10:	4643      	mov	r3, r8
    4e12:	46bb      	mov	fp, r7
    4e14:	9301      	str	r3, [sp, #4]
    4e16:	9100      	str	r1, [sp, #0]
    4e18:	9b00      	ldr	r3, [sp, #0]
    4e1a:	2b02      	cmp	r3, #2
    4e1c:	d16b      	bne.n	4ef6 <__aeabi_ddiv+0x196>
    4e1e:	9b01      	ldr	r3, [sp, #4]
    4e20:	469a      	mov	sl, r3
    4e22:	2100      	movs	r1, #0
    4e24:	4653      	mov	r3, sl
    4e26:	2201      	movs	r2, #1
    4e28:	2700      	movs	r7, #0
    4e2a:	4689      	mov	r9, r1
    4e2c:	401a      	ands	r2, r3
    4e2e:	4b3c      	ldr	r3, [pc, #240]	; (4f20 <__aeabi_ddiv+0x1c0>)
    4e30:	2100      	movs	r1, #0
    4e32:	033f      	lsls	r7, r7, #12
    4e34:	0d0c      	lsrs	r4, r1, #20
    4e36:	0524      	lsls	r4, r4, #20
    4e38:	0b3f      	lsrs	r7, r7, #12
    4e3a:	4327      	orrs	r7, r4
    4e3c:	4c3b      	ldr	r4, [pc, #236]	; (4f2c <__aeabi_ddiv+0x1cc>)
    4e3e:	051b      	lsls	r3, r3, #20
    4e40:	4027      	ands	r7, r4
    4e42:	431f      	orrs	r7, r3
    4e44:	007f      	lsls	r7, r7, #1
    4e46:	07d2      	lsls	r2, r2, #31
    4e48:	087f      	lsrs	r7, r7, #1
    4e4a:	4317      	orrs	r7, r2
    4e4c:	4648      	mov	r0, r9
    4e4e:	1c39      	adds	r1, r7, #0
    4e50:	b007      	add	sp, #28
    4e52:	bc3c      	pop	{r2, r3, r4, r5}
    4e54:	4690      	mov	r8, r2
    4e56:	4699      	mov	r9, r3
    4e58:	46a2      	mov	sl, r4
    4e5a:	46ab      	mov	fp, r5
    4e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e5e:	4303      	orrs	r3, r0
    4e60:	d03e      	beq.n	4ee0 <__aeabi_ddiv+0x180>
    4e62:	465b      	mov	r3, fp
    4e64:	2b00      	cmp	r3, #0
    4e66:	d100      	bne.n	4e6a <__aeabi_ddiv+0x10a>
    4e68:	e19c      	b.n	51a4 <__aeabi_ddiv+0x444>
    4e6a:	4658      	mov	r0, fp
    4e6c:	f001 faea 	bl	6444 <__clzsi2>
    4e70:	2328      	movs	r3, #40	; 0x28
    4e72:	1c31      	adds	r1, r6, #0
    4e74:	1a1b      	subs	r3, r3, r0
    4e76:	1c02      	adds	r2, r0, #0
    4e78:	465f      	mov	r7, fp
    4e7a:	40d9      	lsrs	r1, r3
    4e7c:	3a08      	subs	r2, #8
    4e7e:	4097      	lsls	r7, r2
    4e80:	1c0b      	adds	r3, r1, #0
    4e82:	4096      	lsls	r6, r2
    4e84:	433b      	orrs	r3, r7
    4e86:	469b      	mov	fp, r3
    4e88:	46b1      	mov	r9, r6
    4e8a:	2300      	movs	r3, #0
    4e8c:	4d28      	ldr	r5, [pc, #160]	; (4f30 <__aeabi_ddiv+0x1d0>)
    4e8e:	2600      	movs	r6, #0
    4e90:	1a2d      	subs	r5, r5, r0
    4e92:	9300      	str	r3, [sp, #0]
    4e94:	e78a      	b.n	4dac <__aeabi_ddiv+0x4c>
    4e96:	4652      	mov	r2, sl
    4e98:	2103      	movs	r1, #3
    4e9a:	433a      	orrs	r2, r7
    4e9c:	d1a0      	bne.n	4de0 <__aeabi_ddiv+0x80>
    4e9e:	2700      	movs	r7, #0
    4ea0:	2300      	movs	r3, #0
    4ea2:	2102      	movs	r1, #2
    4ea4:	e79c      	b.n	4de0 <__aeabi_ddiv+0x80>
    4ea6:	4652      	mov	r2, sl
    4ea8:	433a      	orrs	r2, r7
    4eaa:	d015      	beq.n	4ed8 <__aeabi_ddiv+0x178>
    4eac:	2f00      	cmp	r7, #0
    4eae:	d100      	bne.n	4eb2 <__aeabi_ddiv+0x152>
    4eb0:	e185      	b.n	51be <__aeabi_ddiv+0x45e>
    4eb2:	1c38      	adds	r0, r7, #0
    4eb4:	f001 fac6 	bl	6444 <__clzsi2>
    4eb8:	1c02      	adds	r2, r0, #0
    4eba:	2128      	movs	r1, #40	; 0x28
    4ebc:	4650      	mov	r0, sl
    4ebe:	1a89      	subs	r1, r1, r2
    4ec0:	1c13      	adds	r3, r2, #0
    4ec2:	40c8      	lsrs	r0, r1
    4ec4:	4651      	mov	r1, sl
    4ec6:	3b08      	subs	r3, #8
    4ec8:	4099      	lsls	r1, r3
    4eca:	409f      	lsls	r7, r3
    4ecc:	1c0b      	adds	r3, r1, #0
    4ece:	4307      	orrs	r7, r0
    4ed0:	4817      	ldr	r0, [pc, #92]	; (4f30 <__aeabi_ddiv+0x1d0>)
    4ed2:	2100      	movs	r1, #0
    4ed4:	1a80      	subs	r0, r0, r2
    4ed6:	e783      	b.n	4de0 <__aeabi_ddiv+0x80>
    4ed8:	2700      	movs	r7, #0
    4eda:	2300      	movs	r3, #0
    4edc:	2101      	movs	r1, #1
    4ede:	e77f      	b.n	4de0 <__aeabi_ddiv+0x80>
    4ee0:	2300      	movs	r3, #0
    4ee2:	469b      	mov	fp, r3
    4ee4:	4699      	mov	r9, r3
    4ee6:	3301      	adds	r3, #1
    4ee8:	2604      	movs	r6, #4
    4eea:	9300      	str	r3, [sp, #0]
    4eec:	e75e      	b.n	4dac <__aeabi_ddiv+0x4c>
    4eee:	2303      	movs	r3, #3
    4ef0:	260c      	movs	r6, #12
    4ef2:	9300      	str	r3, [sp, #0]
    4ef4:	e75a      	b.n	4dac <__aeabi_ddiv+0x4c>
    4ef6:	2b03      	cmp	r3, #3
    4ef8:	d100      	bne.n	4efc <__aeabi_ddiv+0x19c>
    4efa:	e23c      	b.n	5376 <__aeabi_ddiv+0x616>
    4efc:	2b01      	cmp	r3, #1
    4efe:	d000      	beq.n	4f02 <__aeabi_ddiv+0x1a2>
    4f00:	e1bf      	b.n	5282 <__aeabi_ddiv+0x522>
    4f02:	1c1a      	adds	r2, r3, #0
    4f04:	9b01      	ldr	r3, [sp, #4]
    4f06:	401a      	ands	r2, r3
    4f08:	2100      	movs	r1, #0
    4f0a:	2300      	movs	r3, #0
    4f0c:	2700      	movs	r7, #0
    4f0e:	4689      	mov	r9, r1
    4f10:	e78e      	b.n	4e30 <__aeabi_ddiv+0xd0>
    4f12:	2300      	movs	r3, #0
    4f14:	2780      	movs	r7, #128	; 0x80
    4f16:	4699      	mov	r9, r3
    4f18:	2200      	movs	r2, #0
    4f1a:	033f      	lsls	r7, r7, #12
    4f1c:	4b00      	ldr	r3, [pc, #0]	; (4f20 <__aeabi_ddiv+0x1c0>)
    4f1e:	e787      	b.n	4e30 <__aeabi_ddiv+0xd0>
    4f20:	000007ff 	.word	0x000007ff
    4f24:	fffffc01 	.word	0xfffffc01
    4f28:	00007710 	.word	0x00007710
    4f2c:	800fffff 	.word	0x800fffff
    4f30:	fffffc0d 	.word	0xfffffc0d
    4f34:	45bb      	cmp	fp, r7
    4f36:	d900      	bls.n	4f3a <__aeabi_ddiv+0x1da>
    4f38:	e151      	b.n	51de <__aeabi_ddiv+0x47e>
    4f3a:	d100      	bne.n	4f3e <__aeabi_ddiv+0x1de>
    4f3c:	e14c      	b.n	51d8 <__aeabi_ddiv+0x478>
    4f3e:	464a      	mov	r2, r9
    4f40:	9203      	str	r2, [sp, #12]
    4f42:	2200      	movs	r2, #0
    4f44:	465c      	mov	r4, fp
    4f46:	4690      	mov	r8, r2
    4f48:	3d01      	subs	r5, #1
    4f4a:	0e18      	lsrs	r0, r3, #24
    4f4c:	023f      	lsls	r7, r7, #8
    4f4e:	4338      	orrs	r0, r7
    4f50:	021b      	lsls	r3, r3, #8
    4f52:	9301      	str	r3, [sp, #4]
    4f54:	0c03      	lsrs	r3, r0, #16
    4f56:	4699      	mov	r9, r3
    4f58:	0403      	lsls	r3, r0, #16
    4f5a:	0c1b      	lsrs	r3, r3, #16
    4f5c:	4649      	mov	r1, r9
    4f5e:	1c06      	adds	r6, r0, #0
    4f60:	1c20      	adds	r0, r4, #0
    4f62:	1c1f      	adds	r7, r3, #0
    4f64:	9300      	str	r3, [sp, #0]
    4f66:	f7fe ff37 	bl	3dd8 <__aeabi_uidiv>
    4f6a:	1c02      	adds	r2, r0, #0
    4f6c:	437a      	muls	r2, r7
    4f6e:	9002      	str	r0, [sp, #8]
    4f70:	4649      	mov	r1, r9
    4f72:	1c20      	adds	r0, r4, #0
    4f74:	1c17      	adds	r7, r2, #0
    4f76:	f7fe ffb5 	bl	3ee4 <__aeabi_uidivmod>
    4f7a:	9b03      	ldr	r3, [sp, #12]
    4f7c:	0409      	lsls	r1, r1, #16
    4f7e:	0c1b      	lsrs	r3, r3, #16
    4f80:	4319      	orrs	r1, r3
    4f82:	428f      	cmp	r7, r1
    4f84:	d90c      	bls.n	4fa0 <__aeabi_ddiv+0x240>
    4f86:	9b02      	ldr	r3, [sp, #8]
    4f88:	1989      	adds	r1, r1, r6
    4f8a:	3b01      	subs	r3, #1
    4f8c:	428e      	cmp	r6, r1
    4f8e:	d900      	bls.n	4f92 <__aeabi_ddiv+0x232>
    4f90:	e152      	b.n	5238 <__aeabi_ddiv+0x4d8>
    4f92:	428f      	cmp	r7, r1
    4f94:	d800      	bhi.n	4f98 <__aeabi_ddiv+0x238>
    4f96:	e14f      	b.n	5238 <__aeabi_ddiv+0x4d8>
    4f98:	9b02      	ldr	r3, [sp, #8]
    4f9a:	1989      	adds	r1, r1, r6
    4f9c:	3b02      	subs	r3, #2
    4f9e:	9302      	str	r3, [sp, #8]
    4fa0:	1bcc      	subs	r4, r1, r7
    4fa2:	1c20      	adds	r0, r4, #0
    4fa4:	4649      	mov	r1, r9
    4fa6:	f7fe ff17 	bl	3dd8 <__aeabi_uidiv>
    4faa:	9f00      	ldr	r7, [sp, #0]
    4fac:	4683      	mov	fp, r0
    4fae:	4347      	muls	r7, r0
    4fb0:	4649      	mov	r1, r9
    4fb2:	1c20      	adds	r0, r4, #0
    4fb4:	f7fe ff96 	bl	3ee4 <__aeabi_uidivmod>
    4fb8:	9a03      	ldr	r2, [sp, #12]
    4fba:	040b      	lsls	r3, r1, #16
    4fbc:	0414      	lsls	r4, r2, #16
    4fbe:	0c24      	lsrs	r4, r4, #16
    4fc0:	4323      	orrs	r3, r4
    4fc2:	429f      	cmp	r7, r3
    4fc4:	d90d      	bls.n	4fe2 <__aeabi_ddiv+0x282>
    4fc6:	465a      	mov	r2, fp
    4fc8:	199b      	adds	r3, r3, r6
    4fca:	3a01      	subs	r2, #1
    4fcc:	429e      	cmp	r6, r3
    4fce:	d900      	bls.n	4fd2 <__aeabi_ddiv+0x272>
    4fd0:	e130      	b.n	5234 <__aeabi_ddiv+0x4d4>
    4fd2:	429f      	cmp	r7, r3
    4fd4:	d800      	bhi.n	4fd8 <__aeabi_ddiv+0x278>
    4fd6:	e12d      	b.n	5234 <__aeabi_ddiv+0x4d4>
    4fd8:	2202      	movs	r2, #2
    4fda:	4252      	negs	r2, r2
    4fdc:	4694      	mov	ip, r2
    4fde:	199b      	adds	r3, r3, r6
    4fe0:	44e3      	add	fp, ip
    4fe2:	9a02      	ldr	r2, [sp, #8]
    4fe4:	1bdb      	subs	r3, r3, r7
    4fe6:	0417      	lsls	r7, r2, #16
    4fe8:	465a      	mov	r2, fp
    4fea:	433a      	orrs	r2, r7
    4fec:	4693      	mov	fp, r2
    4fee:	9c01      	ldr	r4, [sp, #4]
    4ff0:	0c17      	lsrs	r7, r2, #16
    4ff2:	0c22      	lsrs	r2, r4, #16
    4ff4:	1c10      	adds	r0, r2, #0
    4ff6:	9204      	str	r2, [sp, #16]
    4ff8:	465a      	mov	r2, fp
    4ffa:	0411      	lsls	r1, r2, #16
    4ffc:	0422      	lsls	r2, r4, #16
    4ffe:	0c12      	lsrs	r2, r2, #16
    5000:	1c14      	adds	r4, r2, #0
    5002:	0c09      	lsrs	r1, r1, #16
    5004:	437c      	muls	r4, r7
    5006:	9205      	str	r2, [sp, #20]
    5008:	434a      	muls	r2, r1
    500a:	4341      	muls	r1, r0
    500c:	4347      	muls	r7, r0
    500e:	1861      	adds	r1, r4, r1
    5010:	0c10      	lsrs	r0, r2, #16
    5012:	1809      	adds	r1, r1, r0
    5014:	428c      	cmp	r4, r1
    5016:	d903      	bls.n	5020 <__aeabi_ddiv+0x2c0>
    5018:	2080      	movs	r0, #128	; 0x80
    501a:	0240      	lsls	r0, r0, #9
    501c:	4684      	mov	ip, r0
    501e:	4467      	add	r7, ip
    5020:	0c0c      	lsrs	r4, r1, #16
    5022:	0412      	lsls	r2, r2, #16
    5024:	0408      	lsls	r0, r1, #16
    5026:	0c12      	lsrs	r2, r2, #16
    5028:	193c      	adds	r4, r7, r4
    502a:	1881      	adds	r1, r0, r2
    502c:	42a3      	cmp	r3, r4
    502e:	d200      	bcs.n	5032 <__aeabi_ddiv+0x2d2>
    5030:	e0e5      	b.n	51fe <__aeabi_ddiv+0x49e>
    5032:	d100      	bne.n	5036 <__aeabi_ddiv+0x2d6>
    5034:	e0df      	b.n	51f6 <__aeabi_ddiv+0x496>
    5036:	1b1f      	subs	r7, r3, r4
    5038:	4643      	mov	r3, r8
    503a:	1a5c      	subs	r4, r3, r1
    503c:	45a0      	cmp	r8, r4
    503e:	4192      	sbcs	r2, r2
    5040:	4252      	negs	r2, r2
    5042:	1abf      	subs	r7, r7, r2
    5044:	42b7      	cmp	r7, r6
    5046:	d100      	bne.n	504a <__aeabi_ddiv+0x2ea>
    5048:	e10e      	b.n	5268 <__aeabi_ddiv+0x508>
    504a:	1c38      	adds	r0, r7, #0
    504c:	4649      	mov	r1, r9
    504e:	f7fe fec3 	bl	3dd8 <__aeabi_uidiv>
    5052:	9b00      	ldr	r3, [sp, #0]
    5054:	9002      	str	r0, [sp, #8]
    5056:	4343      	muls	r3, r0
    5058:	4649      	mov	r1, r9
    505a:	1c38      	adds	r0, r7, #0
    505c:	4698      	mov	r8, r3
    505e:	f7fe ff41 	bl	3ee4 <__aeabi_uidivmod>
    5062:	0c23      	lsrs	r3, r4, #16
    5064:	040f      	lsls	r7, r1, #16
    5066:	431f      	orrs	r7, r3
    5068:	45b8      	cmp	r8, r7
    506a:	d90c      	bls.n	5086 <__aeabi_ddiv+0x326>
    506c:	9b02      	ldr	r3, [sp, #8]
    506e:	19bf      	adds	r7, r7, r6
    5070:	3b01      	subs	r3, #1
    5072:	42be      	cmp	r6, r7
    5074:	d900      	bls.n	5078 <__aeabi_ddiv+0x318>
    5076:	e0fb      	b.n	5270 <__aeabi_ddiv+0x510>
    5078:	45b8      	cmp	r8, r7
    507a:	d800      	bhi.n	507e <__aeabi_ddiv+0x31e>
    507c:	e0f8      	b.n	5270 <__aeabi_ddiv+0x510>
    507e:	9b02      	ldr	r3, [sp, #8]
    5080:	19bf      	adds	r7, r7, r6
    5082:	3b02      	subs	r3, #2
    5084:	9302      	str	r3, [sp, #8]
    5086:	4643      	mov	r3, r8
    5088:	1aff      	subs	r7, r7, r3
    508a:	4649      	mov	r1, r9
    508c:	1c38      	adds	r0, r7, #0
    508e:	f7fe fea3 	bl	3dd8 <__aeabi_uidiv>
    5092:	9b00      	ldr	r3, [sp, #0]
    5094:	9003      	str	r0, [sp, #12]
    5096:	4343      	muls	r3, r0
    5098:	4649      	mov	r1, r9
    509a:	1c38      	adds	r0, r7, #0
    509c:	4698      	mov	r8, r3
    509e:	f7fe ff21 	bl	3ee4 <__aeabi_uidivmod>
    50a2:	0424      	lsls	r4, r4, #16
    50a4:	0409      	lsls	r1, r1, #16
    50a6:	0c24      	lsrs	r4, r4, #16
    50a8:	4321      	orrs	r1, r4
    50aa:	4588      	cmp	r8, r1
    50ac:	d90c      	bls.n	50c8 <__aeabi_ddiv+0x368>
    50ae:	9b03      	ldr	r3, [sp, #12]
    50b0:	1989      	adds	r1, r1, r6
    50b2:	3b01      	subs	r3, #1
    50b4:	428e      	cmp	r6, r1
    50b6:	d900      	bls.n	50ba <__aeabi_ddiv+0x35a>
    50b8:	e0dc      	b.n	5274 <__aeabi_ddiv+0x514>
    50ba:	4588      	cmp	r8, r1
    50bc:	d800      	bhi.n	50c0 <__aeabi_ddiv+0x360>
    50be:	e0d9      	b.n	5274 <__aeabi_ddiv+0x514>
    50c0:	9b03      	ldr	r3, [sp, #12]
    50c2:	1989      	adds	r1, r1, r6
    50c4:	3b02      	subs	r3, #2
    50c6:	9303      	str	r3, [sp, #12]
    50c8:	4643      	mov	r3, r8
    50ca:	1ac9      	subs	r1, r1, r3
    50cc:	9b02      	ldr	r3, [sp, #8]
    50ce:	9a03      	ldr	r2, [sp, #12]
    50d0:	041b      	lsls	r3, r3, #16
    50d2:	9c05      	ldr	r4, [sp, #20]
    50d4:	431a      	orrs	r2, r3
    50d6:	0c10      	lsrs	r0, r2, #16
    50d8:	0413      	lsls	r3, r2, #16
    50da:	4691      	mov	r9, r2
    50dc:	1c22      	adds	r2, r4, #0
    50de:	9f04      	ldr	r7, [sp, #16]
    50e0:	0c1b      	lsrs	r3, r3, #16
    50e2:	435a      	muls	r2, r3
    50e4:	4344      	muls	r4, r0
    50e6:	437b      	muls	r3, r7
    50e8:	4378      	muls	r0, r7
    50ea:	18e3      	adds	r3, r4, r3
    50ec:	0c17      	lsrs	r7, r2, #16
    50ee:	19db      	adds	r3, r3, r7
    50f0:	429c      	cmp	r4, r3
    50f2:	d903      	bls.n	50fc <__aeabi_ddiv+0x39c>
    50f4:	2480      	movs	r4, #128	; 0x80
    50f6:	0264      	lsls	r4, r4, #9
    50f8:	46a4      	mov	ip, r4
    50fa:	4460      	add	r0, ip
    50fc:	0c1c      	lsrs	r4, r3, #16
    50fe:	0412      	lsls	r2, r2, #16
    5100:	041b      	lsls	r3, r3, #16
    5102:	0c12      	lsrs	r2, r2, #16
    5104:	1900      	adds	r0, r0, r4
    5106:	189b      	adds	r3, r3, r2
    5108:	4281      	cmp	r1, r0
    510a:	d200      	bcs.n	510e <__aeabi_ddiv+0x3ae>
    510c:	e096      	b.n	523c <__aeabi_ddiv+0x4dc>
    510e:	d100      	bne.n	5112 <__aeabi_ddiv+0x3b2>
    5110:	e0fc      	b.n	530c <__aeabi_ddiv+0x5ac>
    5112:	464a      	mov	r2, r9
    5114:	2301      	movs	r3, #1
    5116:	431a      	orrs	r2, r3
    5118:	4691      	mov	r9, r2
    511a:	4b9b      	ldr	r3, [pc, #620]	; (5388 <__aeabi_ddiv+0x628>)
    511c:	18eb      	adds	r3, r5, r3
    511e:	2b00      	cmp	r3, #0
    5120:	dc00      	bgt.n	5124 <__aeabi_ddiv+0x3c4>
    5122:	e099      	b.n	5258 <__aeabi_ddiv+0x4f8>
    5124:	464a      	mov	r2, r9
    5126:	0752      	lsls	r2, r2, #29
    5128:	d00a      	beq.n	5140 <__aeabi_ddiv+0x3e0>
    512a:	220f      	movs	r2, #15
    512c:	4649      	mov	r1, r9
    512e:	400a      	ands	r2, r1
    5130:	2a04      	cmp	r2, #4
    5132:	d005      	beq.n	5140 <__aeabi_ddiv+0x3e0>
    5134:	3104      	adds	r1, #4
    5136:	4549      	cmp	r1, r9
    5138:	4192      	sbcs	r2, r2
    513a:	4689      	mov	r9, r1
    513c:	4252      	negs	r2, r2
    513e:	4493      	add	fp, r2
    5140:	465a      	mov	r2, fp
    5142:	01d2      	lsls	r2, r2, #7
    5144:	d506      	bpl.n	5154 <__aeabi_ddiv+0x3f4>
    5146:	465a      	mov	r2, fp
    5148:	4b90      	ldr	r3, [pc, #576]	; (538c <__aeabi_ddiv+0x62c>)
    514a:	401a      	ands	r2, r3
    514c:	2380      	movs	r3, #128	; 0x80
    514e:	4693      	mov	fp, r2
    5150:	00db      	lsls	r3, r3, #3
    5152:	18eb      	adds	r3, r5, r3
    5154:	4a8e      	ldr	r2, [pc, #568]	; (5390 <__aeabi_ddiv+0x630>)
    5156:	4293      	cmp	r3, r2
    5158:	dd00      	ble.n	515c <__aeabi_ddiv+0x3fc>
    515a:	e662      	b.n	4e22 <__aeabi_ddiv+0xc2>
    515c:	464a      	mov	r2, r9
    515e:	4659      	mov	r1, fp
    5160:	08d2      	lsrs	r2, r2, #3
    5162:	0749      	lsls	r1, r1, #29
    5164:	4311      	orrs	r1, r2
    5166:	465a      	mov	r2, fp
    5168:	4689      	mov	r9, r1
    516a:	0257      	lsls	r7, r2, #9
    516c:	4651      	mov	r1, sl
    516e:	2201      	movs	r2, #1
    5170:	055b      	lsls	r3, r3, #21
    5172:	0b3f      	lsrs	r7, r7, #12
    5174:	0d5b      	lsrs	r3, r3, #21
    5176:	400a      	ands	r2, r1
    5178:	e65a      	b.n	4e30 <__aeabi_ddiv+0xd0>
    517a:	2080      	movs	r0, #128	; 0x80
    517c:	465a      	mov	r2, fp
    517e:	0300      	lsls	r0, r0, #12
    5180:	4202      	tst	r2, r0
    5182:	d008      	beq.n	5196 <__aeabi_ddiv+0x436>
    5184:	4207      	tst	r7, r0
    5186:	d106      	bne.n	5196 <__aeabi_ddiv+0x436>
    5188:	4307      	orrs	r7, r0
    518a:	033f      	lsls	r7, r7, #12
    518c:	4699      	mov	r9, r3
    518e:	0b3f      	lsrs	r7, r7, #12
    5190:	4642      	mov	r2, r8
    5192:	4b80      	ldr	r3, [pc, #512]	; (5394 <__aeabi_ddiv+0x634>)
    5194:	e64c      	b.n	4e30 <__aeabi_ddiv+0xd0>
    5196:	465f      	mov	r7, fp
    5198:	4307      	orrs	r7, r0
    519a:	033f      	lsls	r7, r7, #12
    519c:	0b3f      	lsrs	r7, r7, #12
    519e:	1c22      	adds	r2, r4, #0
    51a0:	4b7c      	ldr	r3, [pc, #496]	; (5394 <__aeabi_ddiv+0x634>)
    51a2:	e645      	b.n	4e30 <__aeabi_ddiv+0xd0>
    51a4:	f001 f94e 	bl	6444 <__clzsi2>
    51a8:	1c03      	adds	r3, r0, #0
    51aa:	3020      	adds	r0, #32
    51ac:	2827      	cmp	r0, #39	; 0x27
    51ae:	dc00      	bgt.n	51b2 <__aeabi_ddiv+0x452>
    51b0:	e65e      	b.n	4e70 <__aeabi_ddiv+0x110>
    51b2:	3b08      	subs	r3, #8
    51b4:	409e      	lsls	r6, r3
    51b6:	2300      	movs	r3, #0
    51b8:	46b3      	mov	fp, r6
    51ba:	4699      	mov	r9, r3
    51bc:	e665      	b.n	4e8a <__aeabi_ddiv+0x12a>
    51be:	4650      	mov	r0, sl
    51c0:	f001 f940 	bl	6444 <__clzsi2>
    51c4:	1c02      	adds	r2, r0, #0
    51c6:	3220      	adds	r2, #32
    51c8:	2a27      	cmp	r2, #39	; 0x27
    51ca:	dc00      	bgt.n	51ce <__aeabi_ddiv+0x46e>
    51cc:	e675      	b.n	4eba <__aeabi_ddiv+0x15a>
    51ce:	4657      	mov	r7, sl
    51d0:	3808      	subs	r0, #8
    51d2:	4087      	lsls	r7, r0
    51d4:	2300      	movs	r3, #0
    51d6:	e67b      	b.n	4ed0 <__aeabi_ddiv+0x170>
    51d8:	4599      	cmp	r9, r3
    51da:	d200      	bcs.n	51de <__aeabi_ddiv+0x47e>
    51dc:	e6af      	b.n	4f3e <__aeabi_ddiv+0x1de>
    51de:	465a      	mov	r2, fp
    51e0:	4659      	mov	r1, fp
    51e2:	0854      	lsrs	r4, r2, #1
    51e4:	464a      	mov	r2, r9
    51e6:	07c8      	lsls	r0, r1, #31
    51e8:	0852      	lsrs	r2, r2, #1
    51ea:	4302      	orrs	r2, r0
    51ec:	9203      	str	r2, [sp, #12]
    51ee:	464a      	mov	r2, r9
    51f0:	07d2      	lsls	r2, r2, #31
    51f2:	4690      	mov	r8, r2
    51f4:	e6a9      	b.n	4f4a <__aeabi_ddiv+0x1ea>
    51f6:	2700      	movs	r7, #0
    51f8:	4588      	cmp	r8, r1
    51fa:	d300      	bcc.n	51fe <__aeabi_ddiv+0x49e>
    51fc:	e71c      	b.n	5038 <__aeabi_ddiv+0x2d8>
    51fe:	9f01      	ldr	r7, [sp, #4]
    5200:	465a      	mov	r2, fp
    5202:	46bc      	mov	ip, r7
    5204:	44e0      	add	r8, ip
    5206:	45b8      	cmp	r8, r7
    5208:	41bf      	sbcs	r7, r7
    520a:	427f      	negs	r7, r7
    520c:	19bf      	adds	r7, r7, r6
    520e:	18ff      	adds	r7, r7, r3
    5210:	3a01      	subs	r2, #1
    5212:	42be      	cmp	r6, r7
    5214:	d206      	bcs.n	5224 <__aeabi_ddiv+0x4c4>
    5216:	42bc      	cmp	r4, r7
    5218:	d85f      	bhi.n	52da <__aeabi_ddiv+0x57a>
    521a:	d100      	bne.n	521e <__aeabi_ddiv+0x4be>
    521c:	e09f      	b.n	535e <__aeabi_ddiv+0x5fe>
    521e:	1b3f      	subs	r7, r7, r4
    5220:	4693      	mov	fp, r2
    5222:	e709      	b.n	5038 <__aeabi_ddiv+0x2d8>
    5224:	42b7      	cmp	r7, r6
    5226:	d1fa      	bne.n	521e <__aeabi_ddiv+0x4be>
    5228:	9b01      	ldr	r3, [sp, #4]
    522a:	4543      	cmp	r3, r8
    522c:	d9f3      	bls.n	5216 <__aeabi_ddiv+0x4b6>
    522e:	1b37      	subs	r7, r6, r4
    5230:	4693      	mov	fp, r2
    5232:	e701      	b.n	5038 <__aeabi_ddiv+0x2d8>
    5234:	4693      	mov	fp, r2
    5236:	e6d4      	b.n	4fe2 <__aeabi_ddiv+0x282>
    5238:	9302      	str	r3, [sp, #8]
    523a:	e6b1      	b.n	4fa0 <__aeabi_ddiv+0x240>
    523c:	464a      	mov	r2, r9
    523e:	1989      	adds	r1, r1, r6
    5240:	3a01      	subs	r2, #1
    5242:	428e      	cmp	r6, r1
    5244:	d918      	bls.n	5278 <__aeabi_ddiv+0x518>
    5246:	4691      	mov	r9, r2
    5248:	4281      	cmp	r1, r0
    524a:	d000      	beq.n	524e <__aeabi_ddiv+0x4ee>
    524c:	e761      	b.n	5112 <__aeabi_ddiv+0x3b2>
    524e:	9a01      	ldr	r2, [sp, #4]
    5250:	429a      	cmp	r2, r3
    5252:	d000      	beq.n	5256 <__aeabi_ddiv+0x4f6>
    5254:	e75d      	b.n	5112 <__aeabi_ddiv+0x3b2>
    5256:	e760      	b.n	511a <__aeabi_ddiv+0x3ba>
    5258:	4f4f      	ldr	r7, [pc, #316]	; (5398 <__aeabi_ddiv+0x638>)
    525a:	1b7f      	subs	r7, r7, r5
    525c:	2f38      	cmp	r7, #56	; 0x38
    525e:	dd13      	ble.n	5288 <__aeabi_ddiv+0x528>
    5260:	2201      	movs	r2, #1
    5262:	4653      	mov	r3, sl
    5264:	401a      	ands	r2, r3
    5266:	e64f      	b.n	4f08 <__aeabi_ddiv+0x1a8>
    5268:	2301      	movs	r3, #1
    526a:	425b      	negs	r3, r3
    526c:	4699      	mov	r9, r3
    526e:	e754      	b.n	511a <__aeabi_ddiv+0x3ba>
    5270:	9302      	str	r3, [sp, #8]
    5272:	e708      	b.n	5086 <__aeabi_ddiv+0x326>
    5274:	9303      	str	r3, [sp, #12]
    5276:	e727      	b.n	50c8 <__aeabi_ddiv+0x368>
    5278:	4288      	cmp	r0, r1
    527a:	d83c      	bhi.n	52f6 <__aeabi_ddiv+0x596>
    527c:	d074      	beq.n	5368 <__aeabi_ddiv+0x608>
    527e:	4691      	mov	r9, r2
    5280:	e747      	b.n	5112 <__aeabi_ddiv+0x3b2>
    5282:	9b01      	ldr	r3, [sp, #4]
    5284:	469a      	mov	sl, r3
    5286:	e748      	b.n	511a <__aeabi_ddiv+0x3ba>
    5288:	2f1f      	cmp	r7, #31
    528a:	dc44      	bgt.n	5316 <__aeabi_ddiv+0x5b6>
    528c:	4b43      	ldr	r3, [pc, #268]	; (539c <__aeabi_ddiv+0x63c>)
    528e:	464a      	mov	r2, r9
    5290:	469c      	mov	ip, r3
    5292:	465b      	mov	r3, fp
    5294:	4465      	add	r5, ip
    5296:	40fa      	lsrs	r2, r7
    5298:	40ab      	lsls	r3, r5
    529a:	4313      	orrs	r3, r2
    529c:	464a      	mov	r2, r9
    529e:	40aa      	lsls	r2, r5
    52a0:	1c15      	adds	r5, r2, #0
    52a2:	1e6a      	subs	r2, r5, #1
    52a4:	4195      	sbcs	r5, r2
    52a6:	465a      	mov	r2, fp
    52a8:	40fa      	lsrs	r2, r7
    52aa:	432b      	orrs	r3, r5
    52ac:	1c17      	adds	r7, r2, #0
    52ae:	075a      	lsls	r2, r3, #29
    52b0:	d009      	beq.n	52c6 <__aeabi_ddiv+0x566>
    52b2:	220f      	movs	r2, #15
    52b4:	401a      	ands	r2, r3
    52b6:	2a04      	cmp	r2, #4
    52b8:	d005      	beq.n	52c6 <__aeabi_ddiv+0x566>
    52ba:	1d1a      	adds	r2, r3, #4
    52bc:	429a      	cmp	r2, r3
    52be:	419b      	sbcs	r3, r3
    52c0:	425b      	negs	r3, r3
    52c2:	18ff      	adds	r7, r7, r3
    52c4:	1c13      	adds	r3, r2, #0
    52c6:	023a      	lsls	r2, r7, #8
    52c8:	d53e      	bpl.n	5348 <__aeabi_ddiv+0x5e8>
    52ca:	4653      	mov	r3, sl
    52cc:	2201      	movs	r2, #1
    52ce:	2100      	movs	r1, #0
    52d0:	401a      	ands	r2, r3
    52d2:	2700      	movs	r7, #0
    52d4:	2301      	movs	r3, #1
    52d6:	4689      	mov	r9, r1
    52d8:	e5aa      	b.n	4e30 <__aeabi_ddiv+0xd0>
    52da:	2302      	movs	r3, #2
    52dc:	425b      	negs	r3, r3
    52de:	469c      	mov	ip, r3
    52e0:	9a01      	ldr	r2, [sp, #4]
    52e2:	44e3      	add	fp, ip
    52e4:	4694      	mov	ip, r2
    52e6:	44e0      	add	r8, ip
    52e8:	4590      	cmp	r8, r2
    52ea:	419b      	sbcs	r3, r3
    52ec:	425b      	negs	r3, r3
    52ee:	199b      	adds	r3, r3, r6
    52f0:	19df      	adds	r7, r3, r7
    52f2:	1b3f      	subs	r7, r7, r4
    52f4:	e6a0      	b.n	5038 <__aeabi_ddiv+0x2d8>
    52f6:	9f01      	ldr	r7, [sp, #4]
    52f8:	464a      	mov	r2, r9
    52fa:	007c      	lsls	r4, r7, #1
    52fc:	42bc      	cmp	r4, r7
    52fe:	41bf      	sbcs	r7, r7
    5300:	427f      	negs	r7, r7
    5302:	19bf      	adds	r7, r7, r6
    5304:	3a02      	subs	r2, #2
    5306:	19c9      	adds	r1, r1, r7
    5308:	9401      	str	r4, [sp, #4]
    530a:	e79c      	b.n	5246 <__aeabi_ddiv+0x4e6>
    530c:	2b00      	cmp	r3, #0
    530e:	d195      	bne.n	523c <__aeabi_ddiv+0x4dc>
    5310:	2200      	movs	r2, #0
    5312:	9201      	str	r2, [sp, #4]
    5314:	e79b      	b.n	524e <__aeabi_ddiv+0x4ee>
    5316:	465a      	mov	r2, fp
    5318:	4b21      	ldr	r3, [pc, #132]	; (53a0 <__aeabi_ddiv+0x640>)
    531a:	1b5b      	subs	r3, r3, r5
    531c:	40da      	lsrs	r2, r3
    531e:	2f20      	cmp	r7, #32
    5320:	d027      	beq.n	5372 <__aeabi_ddiv+0x612>
    5322:	4b20      	ldr	r3, [pc, #128]	; (53a4 <__aeabi_ddiv+0x644>)
    5324:	469c      	mov	ip, r3
    5326:	465b      	mov	r3, fp
    5328:	4465      	add	r5, ip
    532a:	40ab      	lsls	r3, r5
    532c:	4649      	mov	r1, r9
    532e:	430b      	orrs	r3, r1
    5330:	1e59      	subs	r1, r3, #1
    5332:	418b      	sbcs	r3, r1
    5334:	4313      	orrs	r3, r2
    5336:	2207      	movs	r2, #7
    5338:	2700      	movs	r7, #0
    533a:	401a      	ands	r2, r3
    533c:	d007      	beq.n	534e <__aeabi_ddiv+0x5ee>
    533e:	220f      	movs	r2, #15
    5340:	2700      	movs	r7, #0
    5342:	401a      	ands	r2, r3
    5344:	2a04      	cmp	r2, #4
    5346:	d1b8      	bne.n	52ba <__aeabi_ddiv+0x55a>
    5348:	077a      	lsls	r2, r7, #29
    534a:	027f      	lsls	r7, r7, #9
    534c:	0b3f      	lsrs	r7, r7, #12
    534e:	08db      	lsrs	r3, r3, #3
    5350:	4313      	orrs	r3, r2
    5352:	4699      	mov	r9, r3
    5354:	2201      	movs	r2, #1
    5356:	4653      	mov	r3, sl
    5358:	401a      	ands	r2, r3
    535a:	2300      	movs	r3, #0
    535c:	e568      	b.n	4e30 <__aeabi_ddiv+0xd0>
    535e:	4541      	cmp	r1, r8
    5360:	d8bb      	bhi.n	52da <__aeabi_ddiv+0x57a>
    5362:	4693      	mov	fp, r2
    5364:	2700      	movs	r7, #0
    5366:	e667      	b.n	5038 <__aeabi_ddiv+0x2d8>
    5368:	9c01      	ldr	r4, [sp, #4]
    536a:	429c      	cmp	r4, r3
    536c:	d3c3      	bcc.n	52f6 <__aeabi_ddiv+0x596>
    536e:	4691      	mov	r9, r2
    5370:	e76d      	b.n	524e <__aeabi_ddiv+0x4ee>
    5372:	2300      	movs	r3, #0
    5374:	e7da      	b.n	532c <__aeabi_ddiv+0x5cc>
    5376:	2780      	movs	r7, #128	; 0x80
    5378:	465b      	mov	r3, fp
    537a:	033f      	lsls	r7, r7, #12
    537c:	431f      	orrs	r7, r3
    537e:	033f      	lsls	r7, r7, #12
    5380:	0b3f      	lsrs	r7, r7, #12
    5382:	9a01      	ldr	r2, [sp, #4]
    5384:	4b03      	ldr	r3, [pc, #12]	; (5394 <__aeabi_ddiv+0x634>)
    5386:	e553      	b.n	4e30 <__aeabi_ddiv+0xd0>
    5388:	000003ff 	.word	0x000003ff
    538c:	feffffff 	.word	0xfeffffff
    5390:	000007fe 	.word	0x000007fe
    5394:	000007ff 	.word	0x000007ff
    5398:	fffffc02 	.word	0xfffffc02
    539c:	0000041e 	.word	0x0000041e
    53a0:	fffffbe2 	.word	0xfffffbe2
    53a4:	0000043e 	.word	0x0000043e

000053a8 <__eqdf2>:
    53a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53aa:	465f      	mov	r7, fp
    53ac:	464d      	mov	r5, r9
    53ae:	4644      	mov	r4, r8
    53b0:	4656      	mov	r6, sl
    53b2:	b4f0      	push	{r4, r5, r6, r7}
    53b4:	031f      	lsls	r7, r3, #12
    53b6:	005c      	lsls	r4, r3, #1
    53b8:	0fdb      	lsrs	r3, r3, #31
    53ba:	4699      	mov	r9, r3
    53bc:	4b1b      	ldr	r3, [pc, #108]	; (542c <__eqdf2+0x84>)
    53be:	030e      	lsls	r6, r1, #12
    53c0:	004d      	lsls	r5, r1, #1
    53c2:	0fc9      	lsrs	r1, r1, #31
    53c4:	4684      	mov	ip, r0
    53c6:	0b36      	lsrs	r6, r6, #12
    53c8:	0d6d      	lsrs	r5, r5, #21
    53ca:	468b      	mov	fp, r1
    53cc:	4690      	mov	r8, r2
    53ce:	0b3f      	lsrs	r7, r7, #12
    53d0:	0d64      	lsrs	r4, r4, #21
    53d2:	429d      	cmp	r5, r3
    53d4:	d00c      	beq.n	53f0 <__eqdf2+0x48>
    53d6:	4b15      	ldr	r3, [pc, #84]	; (542c <__eqdf2+0x84>)
    53d8:	429c      	cmp	r4, r3
    53da:	d010      	beq.n	53fe <__eqdf2+0x56>
    53dc:	2301      	movs	r3, #1
    53de:	42a5      	cmp	r5, r4
    53e0:	d014      	beq.n	540c <__eqdf2+0x64>
    53e2:	1c18      	adds	r0, r3, #0
    53e4:	bc3c      	pop	{r2, r3, r4, r5}
    53e6:	4690      	mov	r8, r2
    53e8:	4699      	mov	r9, r3
    53ea:	46a2      	mov	sl, r4
    53ec:	46ab      	mov	fp, r5
    53ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53f0:	1c31      	adds	r1, r6, #0
    53f2:	2301      	movs	r3, #1
    53f4:	4301      	orrs	r1, r0
    53f6:	d1f4      	bne.n	53e2 <__eqdf2+0x3a>
    53f8:	4b0c      	ldr	r3, [pc, #48]	; (542c <__eqdf2+0x84>)
    53fa:	429c      	cmp	r4, r3
    53fc:	d1ee      	bne.n	53dc <__eqdf2+0x34>
    53fe:	433a      	orrs	r2, r7
    5400:	2301      	movs	r3, #1
    5402:	2a00      	cmp	r2, #0
    5404:	d1ed      	bne.n	53e2 <__eqdf2+0x3a>
    5406:	2301      	movs	r3, #1
    5408:	42a5      	cmp	r5, r4
    540a:	d1ea      	bne.n	53e2 <__eqdf2+0x3a>
    540c:	42be      	cmp	r6, r7
    540e:	d1e8      	bne.n	53e2 <__eqdf2+0x3a>
    5410:	45c4      	cmp	ip, r8
    5412:	d1e6      	bne.n	53e2 <__eqdf2+0x3a>
    5414:	45cb      	cmp	fp, r9
    5416:	d006      	beq.n	5426 <__eqdf2+0x7e>
    5418:	2d00      	cmp	r5, #0
    541a:	d1e2      	bne.n	53e2 <__eqdf2+0x3a>
    541c:	4330      	orrs	r0, r6
    541e:	1c03      	adds	r3, r0, #0
    5420:	1e58      	subs	r0, r3, #1
    5422:	4183      	sbcs	r3, r0
    5424:	e7dd      	b.n	53e2 <__eqdf2+0x3a>
    5426:	2300      	movs	r3, #0
    5428:	e7db      	b.n	53e2 <__eqdf2+0x3a>
    542a:	46c0      	nop			; (mov r8, r8)
    542c:	000007ff 	.word	0x000007ff

00005430 <__gedf2>:
    5430:	b5f0      	push	{r4, r5, r6, r7, lr}
    5432:	4657      	mov	r7, sl
    5434:	4645      	mov	r5, r8
    5436:	464e      	mov	r6, r9
    5438:	b4e0      	push	{r5, r6, r7}
    543a:	030f      	lsls	r7, r1, #12
    543c:	004e      	lsls	r6, r1, #1
    543e:	0fc9      	lsrs	r1, r1, #31
    5440:	468a      	mov	sl, r1
    5442:	4932      	ldr	r1, [pc, #200]	; (550c <__gedf2+0xdc>)
    5444:	031d      	lsls	r5, r3, #12
    5446:	005c      	lsls	r4, r3, #1
    5448:	4684      	mov	ip, r0
    544a:	0b3f      	lsrs	r7, r7, #12
    544c:	0d76      	lsrs	r6, r6, #21
    544e:	4690      	mov	r8, r2
    5450:	0b2d      	lsrs	r5, r5, #12
    5452:	0d64      	lsrs	r4, r4, #21
    5454:	0fdb      	lsrs	r3, r3, #31
    5456:	428e      	cmp	r6, r1
    5458:	d00f      	beq.n	547a <__gedf2+0x4a>
    545a:	428c      	cmp	r4, r1
    545c:	d039      	beq.n	54d2 <__gedf2+0xa2>
    545e:	2e00      	cmp	r6, #0
    5460:	d110      	bne.n	5484 <__gedf2+0x54>
    5462:	4338      	orrs	r0, r7
    5464:	4241      	negs	r1, r0
    5466:	4141      	adcs	r1, r0
    5468:	4689      	mov	r9, r1
    546a:	2c00      	cmp	r4, #0
    546c:	d127      	bne.n	54be <__gedf2+0x8e>
    546e:	432a      	orrs	r2, r5
    5470:	d125      	bne.n	54be <__gedf2+0x8e>
    5472:	2000      	movs	r0, #0
    5474:	2900      	cmp	r1, #0
    5476:	d10e      	bne.n	5496 <__gedf2+0x66>
    5478:	e008      	b.n	548c <__gedf2+0x5c>
    547a:	1c39      	adds	r1, r7, #0
    547c:	4301      	orrs	r1, r0
    547e:	d12e      	bne.n	54de <__gedf2+0xae>
    5480:	42b4      	cmp	r4, r6
    5482:	d026      	beq.n	54d2 <__gedf2+0xa2>
    5484:	2c00      	cmp	r4, #0
    5486:	d00b      	beq.n	54a0 <__gedf2+0x70>
    5488:	459a      	cmp	sl, r3
    548a:	d00d      	beq.n	54a8 <__gedf2+0x78>
    548c:	4653      	mov	r3, sl
    548e:	4259      	negs	r1, r3
    5490:	2301      	movs	r3, #1
    5492:	4319      	orrs	r1, r3
    5494:	1c08      	adds	r0, r1, #0
    5496:	bc1c      	pop	{r2, r3, r4}
    5498:	4690      	mov	r8, r2
    549a:	4699      	mov	r9, r3
    549c:	46a2      	mov	sl, r4
    549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54a0:	432a      	orrs	r2, r5
    54a2:	d0f3      	beq.n	548c <__gedf2+0x5c>
    54a4:	459a      	cmp	sl, r3
    54a6:	d1f1      	bne.n	548c <__gedf2+0x5c>
    54a8:	42a6      	cmp	r6, r4
    54aa:	dcef      	bgt.n	548c <__gedf2+0x5c>
    54ac:	da1a      	bge.n	54e4 <__gedf2+0xb4>
    54ae:	4650      	mov	r0, sl
    54b0:	4241      	negs	r1, r0
    54b2:	4148      	adcs	r0, r1
    54b4:	2301      	movs	r3, #1
    54b6:	4241      	negs	r1, r0
    54b8:	4319      	orrs	r1, r3
    54ba:	1c08      	adds	r0, r1, #0
    54bc:	e7eb      	b.n	5496 <__gedf2+0x66>
    54be:	464a      	mov	r2, r9
    54c0:	2a00      	cmp	r2, #0
    54c2:	d0e1      	beq.n	5488 <__gedf2+0x58>
    54c4:	4258      	negs	r0, r3
    54c6:	4158      	adcs	r0, r3
    54c8:	2201      	movs	r2, #1
    54ca:	4241      	negs	r1, r0
    54cc:	4311      	orrs	r1, r2
    54ce:	1c08      	adds	r0, r1, #0
    54d0:	e7e1      	b.n	5496 <__gedf2+0x66>
    54d2:	1c29      	adds	r1, r5, #0
    54d4:	4311      	orrs	r1, r2
    54d6:	d102      	bne.n	54de <__gedf2+0xae>
    54d8:	2e00      	cmp	r6, #0
    54da:	d0c2      	beq.n	5462 <__gedf2+0x32>
    54dc:	e7d4      	b.n	5488 <__gedf2+0x58>
    54de:	2002      	movs	r0, #2
    54e0:	4240      	negs	r0, r0
    54e2:	e7d8      	b.n	5496 <__gedf2+0x66>
    54e4:	42af      	cmp	r7, r5
    54e6:	d8d1      	bhi.n	548c <__gedf2+0x5c>
    54e8:	d009      	beq.n	54fe <__gedf2+0xce>
    54ea:	2000      	movs	r0, #0
    54ec:	42af      	cmp	r7, r5
    54ee:	d2d2      	bcs.n	5496 <__gedf2+0x66>
    54f0:	4650      	mov	r0, sl
    54f2:	4241      	negs	r1, r0
    54f4:	4148      	adcs	r0, r1
    54f6:	2301      	movs	r3, #1
    54f8:	4240      	negs	r0, r0
    54fa:	4318      	orrs	r0, r3
    54fc:	e7cb      	b.n	5496 <__gedf2+0x66>
    54fe:	45c4      	cmp	ip, r8
    5500:	d8c4      	bhi.n	548c <__gedf2+0x5c>
    5502:	2000      	movs	r0, #0
    5504:	45c4      	cmp	ip, r8
    5506:	d3f3      	bcc.n	54f0 <__gedf2+0xc0>
    5508:	e7c5      	b.n	5496 <__gedf2+0x66>
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	000007ff 	.word	0x000007ff

00005510 <__ledf2>:
    5510:	b5f0      	push	{r4, r5, r6, r7, lr}
    5512:	465f      	mov	r7, fp
    5514:	464d      	mov	r5, r9
    5516:	4644      	mov	r4, r8
    5518:	4656      	mov	r6, sl
    551a:	4680      	mov	r8, r0
    551c:	b4f0      	push	{r4, r5, r6, r7}
    551e:	1c06      	adds	r6, r0, #0
    5520:	0308      	lsls	r0, r1, #12
    5522:	0b00      	lsrs	r0, r0, #12
    5524:	4684      	mov	ip, r0
    5526:	482c      	ldr	r0, [pc, #176]	; (55d8 <__ledf2+0xc8>)
    5528:	004c      	lsls	r4, r1, #1
    552a:	031f      	lsls	r7, r3, #12
    552c:	005d      	lsls	r5, r3, #1
    552e:	0fc9      	lsrs	r1, r1, #31
    5530:	0d64      	lsrs	r4, r4, #21
    5532:	468b      	mov	fp, r1
    5534:	4691      	mov	r9, r2
    5536:	0b3f      	lsrs	r7, r7, #12
    5538:	0d6d      	lsrs	r5, r5, #21
    553a:	0fdb      	lsrs	r3, r3, #31
    553c:	4284      	cmp	r4, r0
    553e:	d012      	beq.n	5566 <__ledf2+0x56>
    5540:	4285      	cmp	r5, r0
    5542:	d025      	beq.n	5590 <__ledf2+0x80>
    5544:	2c00      	cmp	r4, #0
    5546:	d114      	bne.n	5572 <__ledf2+0x62>
    5548:	4661      	mov	r1, ip
    554a:	430e      	orrs	r6, r1
    554c:	4270      	negs	r0, r6
    554e:	4146      	adcs	r6, r0
    5550:	2d00      	cmp	r5, #0
    5552:	d035      	beq.n	55c0 <__ledf2+0xb0>
    5554:	2e00      	cmp	r6, #0
    5556:	d021      	beq.n	559c <__ledf2+0x8c>
    5558:	4258      	negs	r0, r3
    555a:	4158      	adcs	r0, r3
    555c:	2101      	movs	r1, #1
    555e:	4243      	negs	r3, r0
    5560:	430b      	orrs	r3, r1
    5562:	1c18      	adds	r0, r3, #0
    5564:	e00e      	b.n	5584 <__ledf2+0x74>
    5566:	4661      	mov	r1, ip
    5568:	2002      	movs	r0, #2
    556a:	4331      	orrs	r1, r6
    556c:	d10a      	bne.n	5584 <__ledf2+0x74>
    556e:	42a5      	cmp	r5, r4
    5570:	d00e      	beq.n	5590 <__ledf2+0x80>
    5572:	2d00      	cmp	r5, #0
    5574:	d112      	bne.n	559c <__ledf2+0x8c>
    5576:	433a      	orrs	r2, r7
    5578:	d110      	bne.n	559c <__ledf2+0x8c>
    557a:	465b      	mov	r3, fp
    557c:	4259      	negs	r1, r3
    557e:	2301      	movs	r3, #1
    5580:	4319      	orrs	r1, r3
    5582:	1c08      	adds	r0, r1, #0
    5584:	bc3c      	pop	{r2, r3, r4, r5}
    5586:	4690      	mov	r8, r2
    5588:	4699      	mov	r9, r3
    558a:	46a2      	mov	sl, r4
    558c:	46ab      	mov	fp, r5
    558e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5590:	1c39      	adds	r1, r7, #0
    5592:	2002      	movs	r0, #2
    5594:	4311      	orrs	r1, r2
    5596:	d1f5      	bne.n	5584 <__ledf2+0x74>
    5598:	2c00      	cmp	r4, #0
    559a:	d0d5      	beq.n	5548 <__ledf2+0x38>
    559c:	459b      	cmp	fp, r3
    559e:	d1ec      	bne.n	557a <__ledf2+0x6a>
    55a0:	42ac      	cmp	r4, r5
    55a2:	dcea      	bgt.n	557a <__ledf2+0x6a>
    55a4:	db05      	blt.n	55b2 <__ledf2+0xa2>
    55a6:	45bc      	cmp	ip, r7
    55a8:	d8e7      	bhi.n	557a <__ledf2+0x6a>
    55aa:	d00f      	beq.n	55cc <__ledf2+0xbc>
    55ac:	2000      	movs	r0, #0
    55ae:	45bc      	cmp	ip, r7
    55b0:	d2e8      	bcs.n	5584 <__ledf2+0x74>
    55b2:	4658      	mov	r0, fp
    55b4:	4241      	negs	r1, r0
    55b6:	4148      	adcs	r0, r1
    55b8:	4241      	negs	r1, r0
    55ba:	2001      	movs	r0, #1
    55bc:	4308      	orrs	r0, r1
    55be:	e7e1      	b.n	5584 <__ledf2+0x74>
    55c0:	433a      	orrs	r2, r7
    55c2:	d1c7      	bne.n	5554 <__ledf2+0x44>
    55c4:	2000      	movs	r0, #0
    55c6:	2e00      	cmp	r6, #0
    55c8:	d1dc      	bne.n	5584 <__ledf2+0x74>
    55ca:	e7d6      	b.n	557a <__ledf2+0x6a>
    55cc:	45c8      	cmp	r8, r9
    55ce:	d8d4      	bhi.n	557a <__ledf2+0x6a>
    55d0:	2000      	movs	r0, #0
    55d2:	45c8      	cmp	r8, r9
    55d4:	d3ed      	bcc.n	55b2 <__ledf2+0xa2>
    55d6:	e7d5      	b.n	5584 <__ledf2+0x74>
    55d8:	000007ff 	.word	0x000007ff

000055dc <__aeabi_dmul>:
    55dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55de:	465f      	mov	r7, fp
    55e0:	4656      	mov	r6, sl
    55e2:	464d      	mov	r5, r9
    55e4:	4644      	mov	r4, r8
    55e6:	b4f0      	push	{r4, r5, r6, r7}
    55e8:	1c05      	adds	r5, r0, #0
    55ea:	1c06      	adds	r6, r0, #0
    55ec:	0308      	lsls	r0, r1, #12
    55ee:	b087      	sub	sp, #28
    55f0:	4699      	mov	r9, r3
    55f2:	004f      	lsls	r7, r1, #1
    55f4:	0b03      	lsrs	r3, r0, #12
    55f6:	0fcc      	lsrs	r4, r1, #31
    55f8:	4692      	mov	sl, r2
    55fa:	469b      	mov	fp, r3
    55fc:	0d7f      	lsrs	r7, r7, #21
    55fe:	9401      	str	r4, [sp, #4]
    5600:	d067      	beq.n	56d2 <__aeabi_dmul+0xf6>
    5602:	4b6c      	ldr	r3, [pc, #432]	; (57b4 <__aeabi_dmul+0x1d8>)
    5604:	429f      	cmp	r7, r3
    5606:	d036      	beq.n	5676 <__aeabi_dmul+0x9a>
    5608:	2080      	movs	r0, #128	; 0x80
    560a:	465b      	mov	r3, fp
    560c:	0340      	lsls	r0, r0, #13
    560e:	4318      	orrs	r0, r3
    5610:	00c0      	lsls	r0, r0, #3
    5612:	0f6b      	lsrs	r3, r5, #29
    5614:	4318      	orrs	r0, r3
    5616:	4b68      	ldr	r3, [pc, #416]	; (57b8 <__aeabi_dmul+0x1dc>)
    5618:	4683      	mov	fp, r0
    561a:	469c      	mov	ip, r3
    561c:	2300      	movs	r3, #0
    561e:	4698      	mov	r8, r3
    5620:	00ee      	lsls	r6, r5, #3
    5622:	4467      	add	r7, ip
    5624:	9300      	str	r3, [sp, #0]
    5626:	464b      	mov	r3, r9
    5628:	4649      	mov	r1, r9
    562a:	031d      	lsls	r5, r3, #12
    562c:	0fc9      	lsrs	r1, r1, #31
    562e:	005b      	lsls	r3, r3, #1
    5630:	4652      	mov	r2, sl
    5632:	0b2d      	lsrs	r5, r5, #12
    5634:	0d5b      	lsrs	r3, r3, #21
    5636:	4689      	mov	r9, r1
    5638:	d100      	bne.n	563c <__aeabi_dmul+0x60>
    563a:	e06e      	b.n	571a <__aeabi_dmul+0x13e>
    563c:	495d      	ldr	r1, [pc, #372]	; (57b4 <__aeabi_dmul+0x1d8>)
    563e:	428b      	cmp	r3, r1
    5640:	d064      	beq.n	570c <__aeabi_dmul+0x130>
    5642:	2080      	movs	r0, #128	; 0x80
    5644:	495c      	ldr	r1, [pc, #368]	; (57b8 <__aeabi_dmul+0x1dc>)
    5646:	0340      	lsls	r0, r0, #13
    5648:	468c      	mov	ip, r1
    564a:	2100      	movs	r1, #0
    564c:	4305      	orrs	r5, r0
    564e:	00ed      	lsls	r5, r5, #3
    5650:	0f50      	lsrs	r0, r2, #29
    5652:	4305      	orrs	r5, r0
    5654:	00d2      	lsls	r2, r2, #3
    5656:	4463      	add	r3, ip
    5658:	4648      	mov	r0, r9
    565a:	18ff      	adds	r7, r7, r3
    565c:	1c7b      	adds	r3, r7, #1
    565e:	469a      	mov	sl, r3
    5660:	9b00      	ldr	r3, [sp, #0]
    5662:	4060      	eors	r0, r4
    5664:	9002      	str	r0, [sp, #8]
    5666:	430b      	orrs	r3, r1
    5668:	2b0f      	cmp	r3, #15
    566a:	d900      	bls.n	566e <__aeabi_dmul+0x92>
    566c:	e0ac      	b.n	57c8 <__aeabi_dmul+0x1ec>
    566e:	4853      	ldr	r0, [pc, #332]	; (57bc <__aeabi_dmul+0x1e0>)
    5670:	009b      	lsls	r3, r3, #2
    5672:	58c3      	ldr	r3, [r0, r3]
    5674:	469f      	mov	pc, r3
    5676:	465b      	mov	r3, fp
    5678:	431d      	orrs	r5, r3
    567a:	d000      	beq.n	567e <__aeabi_dmul+0xa2>
    567c:	e082      	b.n	5784 <__aeabi_dmul+0x1a8>
    567e:	2308      	movs	r3, #8
    5680:	9300      	str	r3, [sp, #0]
    5682:	2300      	movs	r3, #0
    5684:	469b      	mov	fp, r3
    5686:	3302      	adds	r3, #2
    5688:	2600      	movs	r6, #0
    568a:	4698      	mov	r8, r3
    568c:	e7cb      	b.n	5626 <__aeabi_dmul+0x4a>
    568e:	9b02      	ldr	r3, [sp, #8]
    5690:	9301      	str	r3, [sp, #4]
    5692:	4643      	mov	r3, r8
    5694:	2b02      	cmp	r3, #2
    5696:	d159      	bne.n	574c <__aeabi_dmul+0x170>
    5698:	2401      	movs	r4, #1
    569a:	2500      	movs	r5, #0
    569c:	2600      	movs	r6, #0
    569e:	9b01      	ldr	r3, [sp, #4]
    56a0:	401c      	ands	r4, r3
    56a2:	4b44      	ldr	r3, [pc, #272]	; (57b4 <__aeabi_dmul+0x1d8>)
    56a4:	2100      	movs	r1, #0
    56a6:	032d      	lsls	r5, r5, #12
    56a8:	0d0a      	lsrs	r2, r1, #20
    56aa:	0512      	lsls	r2, r2, #20
    56ac:	0b2d      	lsrs	r5, r5, #12
    56ae:	4315      	orrs	r5, r2
    56b0:	4a43      	ldr	r2, [pc, #268]	; (57c0 <__aeabi_dmul+0x1e4>)
    56b2:	051b      	lsls	r3, r3, #20
    56b4:	4015      	ands	r5, r2
    56b6:	431d      	orrs	r5, r3
    56b8:	006d      	lsls	r5, r5, #1
    56ba:	07e4      	lsls	r4, r4, #31
    56bc:	086d      	lsrs	r5, r5, #1
    56be:	4325      	orrs	r5, r4
    56c0:	1c30      	adds	r0, r6, #0
    56c2:	1c29      	adds	r1, r5, #0
    56c4:	b007      	add	sp, #28
    56c6:	bc3c      	pop	{r2, r3, r4, r5}
    56c8:	4690      	mov	r8, r2
    56ca:	4699      	mov	r9, r3
    56cc:	46a2      	mov	sl, r4
    56ce:	46ab      	mov	fp, r5
    56d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d2:	432b      	orrs	r3, r5
    56d4:	d04e      	beq.n	5774 <__aeabi_dmul+0x198>
    56d6:	465b      	mov	r3, fp
    56d8:	2b00      	cmp	r3, #0
    56da:	d100      	bne.n	56de <__aeabi_dmul+0x102>
    56dc:	e185      	b.n	59ea <__aeabi_dmul+0x40e>
    56de:	4658      	mov	r0, fp
    56e0:	f000 feb0 	bl	6444 <__clzsi2>
    56e4:	1c02      	adds	r2, r0, #0
    56e6:	2328      	movs	r3, #40	; 0x28
    56e8:	1c29      	adds	r1, r5, #0
    56ea:	1a9b      	subs	r3, r3, r2
    56ec:	1c16      	adds	r6, r2, #0
    56ee:	4658      	mov	r0, fp
    56f0:	40d9      	lsrs	r1, r3
    56f2:	3e08      	subs	r6, #8
    56f4:	40b0      	lsls	r0, r6
    56f6:	1c0b      	adds	r3, r1, #0
    56f8:	40b5      	lsls	r5, r6
    56fa:	4303      	orrs	r3, r0
    56fc:	469b      	mov	fp, r3
    56fe:	1c2e      	adds	r6, r5, #0
    5700:	2300      	movs	r3, #0
    5702:	4f30      	ldr	r7, [pc, #192]	; (57c4 <__aeabi_dmul+0x1e8>)
    5704:	9300      	str	r3, [sp, #0]
    5706:	1abf      	subs	r7, r7, r2
    5708:	4698      	mov	r8, r3
    570a:	e78c      	b.n	5626 <__aeabi_dmul+0x4a>
    570c:	4651      	mov	r1, sl
    570e:	4329      	orrs	r1, r5
    5710:	d12e      	bne.n	5770 <__aeabi_dmul+0x194>
    5712:	2500      	movs	r5, #0
    5714:	2200      	movs	r2, #0
    5716:	2102      	movs	r1, #2
    5718:	e79e      	b.n	5658 <__aeabi_dmul+0x7c>
    571a:	4651      	mov	r1, sl
    571c:	4329      	orrs	r1, r5
    571e:	d023      	beq.n	5768 <__aeabi_dmul+0x18c>
    5720:	2d00      	cmp	r5, #0
    5722:	d100      	bne.n	5726 <__aeabi_dmul+0x14a>
    5724:	e154      	b.n	59d0 <__aeabi_dmul+0x3f4>
    5726:	1c28      	adds	r0, r5, #0
    5728:	f000 fe8c 	bl	6444 <__clzsi2>
    572c:	1c03      	adds	r3, r0, #0
    572e:	2128      	movs	r1, #40	; 0x28
    5730:	4650      	mov	r0, sl
    5732:	1ac9      	subs	r1, r1, r3
    5734:	1c1a      	adds	r2, r3, #0
    5736:	40c8      	lsrs	r0, r1
    5738:	4651      	mov	r1, sl
    573a:	3a08      	subs	r2, #8
    573c:	4091      	lsls	r1, r2
    573e:	4095      	lsls	r5, r2
    5740:	1c0a      	adds	r2, r1, #0
    5742:	4305      	orrs	r5, r0
    5744:	481f      	ldr	r0, [pc, #124]	; (57c4 <__aeabi_dmul+0x1e8>)
    5746:	2100      	movs	r1, #0
    5748:	1ac3      	subs	r3, r0, r3
    574a:	e785      	b.n	5658 <__aeabi_dmul+0x7c>
    574c:	2b03      	cmp	r3, #3
    574e:	d100      	bne.n	5752 <__aeabi_dmul+0x176>
    5750:	e1c2      	b.n	5ad8 <__aeabi_dmul+0x4fc>
    5752:	2b01      	cmp	r3, #1
    5754:	d000      	beq.n	5758 <__aeabi_dmul+0x17c>
    5756:	e16d      	b.n	5a34 <__aeabi_dmul+0x458>
    5758:	4644      	mov	r4, r8
    575a:	9b01      	ldr	r3, [sp, #4]
    575c:	2500      	movs	r5, #0
    575e:	401c      	ands	r4, r3
    5760:	b2e4      	uxtb	r4, r4
    5762:	2300      	movs	r3, #0
    5764:	2600      	movs	r6, #0
    5766:	e79d      	b.n	56a4 <__aeabi_dmul+0xc8>
    5768:	2500      	movs	r5, #0
    576a:	2200      	movs	r2, #0
    576c:	2101      	movs	r1, #1
    576e:	e773      	b.n	5658 <__aeabi_dmul+0x7c>
    5770:	2103      	movs	r1, #3
    5772:	e771      	b.n	5658 <__aeabi_dmul+0x7c>
    5774:	2304      	movs	r3, #4
    5776:	9300      	str	r3, [sp, #0]
    5778:	2300      	movs	r3, #0
    577a:	469b      	mov	fp, r3
    577c:	3301      	adds	r3, #1
    577e:	2600      	movs	r6, #0
    5780:	4698      	mov	r8, r3
    5782:	e750      	b.n	5626 <__aeabi_dmul+0x4a>
    5784:	230c      	movs	r3, #12
    5786:	9300      	str	r3, [sp, #0]
    5788:	3b09      	subs	r3, #9
    578a:	4698      	mov	r8, r3
    578c:	e74b      	b.n	5626 <__aeabi_dmul+0x4a>
    578e:	2580      	movs	r5, #128	; 0x80
    5790:	2400      	movs	r4, #0
    5792:	032d      	lsls	r5, r5, #12
    5794:	2600      	movs	r6, #0
    5796:	4b07      	ldr	r3, [pc, #28]	; (57b4 <__aeabi_dmul+0x1d8>)
    5798:	e784      	b.n	56a4 <__aeabi_dmul+0xc8>
    579a:	464b      	mov	r3, r9
    579c:	46ab      	mov	fp, r5
    579e:	1c16      	adds	r6, r2, #0
    57a0:	9301      	str	r3, [sp, #4]
    57a2:	4688      	mov	r8, r1
    57a4:	e775      	b.n	5692 <__aeabi_dmul+0xb6>
    57a6:	9b02      	ldr	r3, [sp, #8]
    57a8:	46ab      	mov	fp, r5
    57aa:	1c16      	adds	r6, r2, #0
    57ac:	9301      	str	r3, [sp, #4]
    57ae:	4688      	mov	r8, r1
    57b0:	e76f      	b.n	5692 <__aeabi_dmul+0xb6>
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	000007ff 	.word	0x000007ff
    57b8:	fffffc01 	.word	0xfffffc01
    57bc:	00007750 	.word	0x00007750
    57c0:	800fffff 	.word	0x800fffff
    57c4:	fffffc0d 	.word	0xfffffc0d
    57c8:	0c33      	lsrs	r3, r6, #16
    57ca:	0436      	lsls	r6, r6, #16
    57cc:	0c36      	lsrs	r6, r6, #16
    57ce:	469c      	mov	ip, r3
    57d0:	1c33      	adds	r3, r6, #0
    57d2:	0c14      	lsrs	r4, r2, #16
    57d4:	0412      	lsls	r2, r2, #16
    57d6:	0c12      	lsrs	r2, r2, #16
    57d8:	4353      	muls	r3, r2
    57da:	4698      	mov	r8, r3
    57dc:	4663      	mov	r3, ip
    57de:	4353      	muls	r3, r2
    57e0:	4699      	mov	r9, r3
    57e2:	4663      	mov	r3, ip
    57e4:	4363      	muls	r3, r4
    57e6:	9301      	str	r3, [sp, #4]
    57e8:	1c33      	adds	r3, r6, #0
    57ea:	4641      	mov	r1, r8
    57ec:	4363      	muls	r3, r4
    57ee:	0c09      	lsrs	r1, r1, #16
    57f0:	444b      	add	r3, r9
    57f2:	185b      	adds	r3, r3, r1
    57f4:	4599      	cmp	r9, r3
    57f6:	d905      	bls.n	5804 <__aeabi_dmul+0x228>
    57f8:	2080      	movs	r0, #128	; 0x80
    57fa:	0240      	lsls	r0, r0, #9
    57fc:	4681      	mov	r9, r0
    57fe:	9901      	ldr	r1, [sp, #4]
    5800:	4449      	add	r1, r9
    5802:	9101      	str	r1, [sp, #4]
    5804:	0c19      	lsrs	r1, r3, #16
    5806:	9103      	str	r1, [sp, #12]
    5808:	4641      	mov	r1, r8
    580a:	0409      	lsls	r1, r1, #16
    580c:	0c09      	lsrs	r1, r1, #16
    580e:	041b      	lsls	r3, r3, #16
    5810:	185b      	adds	r3, r3, r1
    5812:	9304      	str	r3, [sp, #16]
    5814:	0c2b      	lsrs	r3, r5, #16
    5816:	4698      	mov	r8, r3
    5818:	1c33      	adds	r3, r6, #0
    581a:	042d      	lsls	r5, r5, #16
    581c:	0c29      	lsrs	r1, r5, #16
    581e:	434b      	muls	r3, r1
    5820:	4660      	mov	r0, ip
    5822:	9300      	str	r3, [sp, #0]
    5824:	4643      	mov	r3, r8
    5826:	4665      	mov	r5, ip
    5828:	4358      	muls	r0, r3
    582a:	435e      	muls	r6, r3
    582c:	9b00      	ldr	r3, [sp, #0]
    582e:	434d      	muls	r5, r1
    5830:	0c1b      	lsrs	r3, r3, #16
    5832:	4699      	mov	r9, r3
    5834:	19ae      	adds	r6, r5, r6
    5836:	444e      	add	r6, r9
    5838:	4684      	mov	ip, r0
    583a:	42b5      	cmp	r5, r6
    583c:	d903      	bls.n	5846 <__aeabi_dmul+0x26a>
    583e:	2380      	movs	r3, #128	; 0x80
    5840:	025b      	lsls	r3, r3, #9
    5842:	4699      	mov	r9, r3
    5844:	44cc      	add	ip, r9
    5846:	0c35      	lsrs	r5, r6, #16
    5848:	1c2b      	adds	r3, r5, #0
    584a:	9803      	ldr	r0, [sp, #12]
    584c:	4463      	add	r3, ip
    584e:	4684      	mov	ip, r0
    5850:	9305      	str	r3, [sp, #20]
    5852:	9b00      	ldr	r3, [sp, #0]
    5854:	0436      	lsls	r6, r6, #16
    5856:	041b      	lsls	r3, r3, #16
    5858:	0c1b      	lsrs	r3, r3, #16
    585a:	18f3      	adds	r3, r6, r3
    585c:	449c      	add	ip, r3
    585e:	4660      	mov	r0, ip
    5860:	9003      	str	r0, [sp, #12]
    5862:	4658      	mov	r0, fp
    5864:	0405      	lsls	r5, r0, #16
    5866:	0c06      	lsrs	r6, r0, #16
    5868:	0c28      	lsrs	r0, r5, #16
    586a:	4684      	mov	ip, r0
    586c:	4350      	muls	r0, r2
    586e:	1c35      	adds	r5, r6, #0
    5870:	4681      	mov	r9, r0
    5872:	4660      	mov	r0, ip
    5874:	4365      	muls	r5, r4
    5876:	4344      	muls	r4, r0
    5878:	4648      	mov	r0, r9
    587a:	0c00      	lsrs	r0, r0, #16
    587c:	4683      	mov	fp, r0
    587e:	4372      	muls	r2, r6
    5880:	1914      	adds	r4, r2, r4
    5882:	445c      	add	r4, fp
    5884:	42a2      	cmp	r2, r4
    5886:	d903      	bls.n	5890 <__aeabi_dmul+0x2b4>
    5888:	2280      	movs	r2, #128	; 0x80
    588a:	0252      	lsls	r2, r2, #9
    588c:	4693      	mov	fp, r2
    588e:	445d      	add	r5, fp
    5890:	0c22      	lsrs	r2, r4, #16
    5892:	18ad      	adds	r5, r5, r2
    5894:	464a      	mov	r2, r9
    5896:	0412      	lsls	r2, r2, #16
    5898:	0c12      	lsrs	r2, r2, #16
    589a:	0424      	lsls	r4, r4, #16
    589c:	4640      	mov	r0, r8
    589e:	18a4      	adds	r4, r4, r2
    58a0:	4662      	mov	r2, ip
    58a2:	434a      	muls	r2, r1
    58a4:	4371      	muls	r1, r6
    58a6:	4346      	muls	r6, r0
    58a8:	4660      	mov	r0, ip
    58aa:	9600      	str	r6, [sp, #0]
    58ac:	4646      	mov	r6, r8
    58ae:	4370      	muls	r0, r6
    58b0:	4680      	mov	r8, r0
    58b2:	0c10      	lsrs	r0, r2, #16
    58b4:	4684      	mov	ip, r0
    58b6:	4488      	add	r8, r1
    58b8:	44e0      	add	r8, ip
    58ba:	4541      	cmp	r1, r8
    58bc:	d905      	bls.n	58ca <__aeabi_dmul+0x2ee>
    58be:	2180      	movs	r1, #128	; 0x80
    58c0:	0249      	lsls	r1, r1, #9
    58c2:	468c      	mov	ip, r1
    58c4:	9900      	ldr	r1, [sp, #0]
    58c6:	4461      	add	r1, ip
    58c8:	9100      	str	r1, [sp, #0]
    58ca:	9801      	ldr	r0, [sp, #4]
    58cc:	9903      	ldr	r1, [sp, #12]
    58ce:	4684      	mov	ip, r0
    58d0:	4461      	add	r1, ip
    58d2:	4299      	cmp	r1, r3
    58d4:	419b      	sbcs	r3, r3
    58d6:	425b      	negs	r3, r3
    58d8:	4699      	mov	r9, r3
    58da:	9805      	ldr	r0, [sp, #20]
    58dc:	4643      	mov	r3, r8
    58de:	4684      	mov	ip, r0
    58e0:	0412      	lsls	r2, r2, #16
    58e2:	0c12      	lsrs	r2, r2, #16
    58e4:	041b      	lsls	r3, r3, #16
    58e6:	189b      	adds	r3, r3, r2
    58e8:	4463      	add	r3, ip
    58ea:	469c      	mov	ip, r3
    58ec:	46ab      	mov	fp, r5
    58ee:	4283      	cmp	r3, r0
    58f0:	419b      	sbcs	r3, r3
    58f2:	4640      	mov	r0, r8
    58f4:	190a      	adds	r2, r1, r4
    58f6:	44cc      	add	ip, r9
    58f8:	42a2      	cmp	r2, r4
    58fa:	4189      	sbcs	r1, r1
    58fc:	44e3      	add	fp, ip
    58fe:	45cc      	cmp	ip, r9
    5900:	41b6      	sbcs	r6, r6
    5902:	465c      	mov	r4, fp
    5904:	0c00      	lsrs	r0, r0, #16
    5906:	4680      	mov	r8, r0
    5908:	4249      	negs	r1, r1
    590a:	4276      	negs	r6, r6
    590c:	425b      	negs	r3, r3
    590e:	1864      	adds	r4, r4, r1
    5910:	4333      	orrs	r3, r6
    5912:	4498      	add	r8, r3
    5914:	428c      	cmp	r4, r1
    5916:	4189      	sbcs	r1, r1
    5918:	45ab      	cmp	fp, r5
    591a:	419b      	sbcs	r3, r3
    591c:	4249      	negs	r1, r1
    591e:	425b      	negs	r3, r3
    5920:	4319      	orrs	r1, r3
    5922:	1c0d      	adds	r5, r1, #0
    5924:	9b00      	ldr	r3, [sp, #0]
    5926:	4445      	add	r5, r8
    5928:	18ee      	adds	r6, r5, r3
    592a:	0276      	lsls	r6, r6, #9
    592c:	0de5      	lsrs	r5, r4, #23
    592e:	432e      	orrs	r6, r5
    5930:	46b3      	mov	fp, r6
    5932:	9b04      	ldr	r3, [sp, #16]
    5934:	0256      	lsls	r6, r2, #9
    5936:	431e      	orrs	r6, r3
    5938:	1e73      	subs	r3, r6, #1
    593a:	419e      	sbcs	r6, r3
    593c:	465b      	mov	r3, fp
    593e:	0dd2      	lsrs	r2, r2, #23
    5940:	4332      	orrs	r2, r6
    5942:	0266      	lsls	r6, r4, #9
    5944:	4316      	orrs	r6, r2
    5946:	01db      	lsls	r3, r3, #7
    5948:	d50a      	bpl.n	5960 <__aeabi_dmul+0x384>
    594a:	2301      	movs	r3, #1
    594c:	4033      	ands	r3, r6
    594e:	0876      	lsrs	r6, r6, #1
    5950:	431e      	orrs	r6, r3
    5952:	465b      	mov	r3, fp
    5954:	07db      	lsls	r3, r3, #31
    5956:	431e      	orrs	r6, r3
    5958:	465b      	mov	r3, fp
    595a:	085b      	lsrs	r3, r3, #1
    595c:	469b      	mov	fp, r3
    595e:	4657      	mov	r7, sl
    5960:	4b63      	ldr	r3, [pc, #396]	; (5af0 <__aeabi_dmul+0x514>)
    5962:	18fb      	adds	r3, r7, r3
    5964:	2b00      	cmp	r3, #0
    5966:	dd5a      	ble.n	5a1e <__aeabi_dmul+0x442>
    5968:	0772      	lsls	r2, r6, #29
    596a:	d009      	beq.n	5980 <__aeabi_dmul+0x3a4>
    596c:	220f      	movs	r2, #15
    596e:	4032      	ands	r2, r6
    5970:	2a04      	cmp	r2, #4
    5972:	d005      	beq.n	5980 <__aeabi_dmul+0x3a4>
    5974:	1d32      	adds	r2, r6, #4
    5976:	42b2      	cmp	r2, r6
    5978:	41b6      	sbcs	r6, r6
    597a:	4276      	negs	r6, r6
    597c:	44b3      	add	fp, r6
    597e:	1c16      	adds	r6, r2, #0
    5980:	465a      	mov	r2, fp
    5982:	01d2      	lsls	r2, r2, #7
    5984:	d506      	bpl.n	5994 <__aeabi_dmul+0x3b8>
    5986:	465a      	mov	r2, fp
    5988:	4b5a      	ldr	r3, [pc, #360]	; (5af4 <__aeabi_dmul+0x518>)
    598a:	401a      	ands	r2, r3
    598c:	2380      	movs	r3, #128	; 0x80
    598e:	4693      	mov	fp, r2
    5990:	00db      	lsls	r3, r3, #3
    5992:	18fb      	adds	r3, r7, r3
    5994:	4a58      	ldr	r2, [pc, #352]	; (5af8 <__aeabi_dmul+0x51c>)
    5996:	4293      	cmp	r3, r2
    5998:	dd34      	ble.n	5a04 <__aeabi_dmul+0x428>
    599a:	2401      	movs	r4, #1
    599c:	9b02      	ldr	r3, [sp, #8]
    599e:	2500      	movs	r5, #0
    59a0:	401c      	ands	r4, r3
    59a2:	2600      	movs	r6, #0
    59a4:	4b55      	ldr	r3, [pc, #340]	; (5afc <__aeabi_dmul+0x520>)
    59a6:	e67d      	b.n	56a4 <__aeabi_dmul+0xc8>
    59a8:	2080      	movs	r0, #128	; 0x80
    59aa:	465b      	mov	r3, fp
    59ac:	0300      	lsls	r0, r0, #12
    59ae:	4203      	tst	r3, r0
    59b0:	d008      	beq.n	59c4 <__aeabi_dmul+0x3e8>
    59b2:	4205      	tst	r5, r0
    59b4:	d106      	bne.n	59c4 <__aeabi_dmul+0x3e8>
    59b6:	4305      	orrs	r5, r0
    59b8:	032d      	lsls	r5, r5, #12
    59ba:	0b2d      	lsrs	r5, r5, #12
    59bc:	464c      	mov	r4, r9
    59be:	1c16      	adds	r6, r2, #0
    59c0:	4b4e      	ldr	r3, [pc, #312]	; (5afc <__aeabi_dmul+0x520>)
    59c2:	e66f      	b.n	56a4 <__aeabi_dmul+0xc8>
    59c4:	465d      	mov	r5, fp
    59c6:	4305      	orrs	r5, r0
    59c8:	032d      	lsls	r5, r5, #12
    59ca:	0b2d      	lsrs	r5, r5, #12
    59cc:	4b4b      	ldr	r3, [pc, #300]	; (5afc <__aeabi_dmul+0x520>)
    59ce:	e669      	b.n	56a4 <__aeabi_dmul+0xc8>
    59d0:	4650      	mov	r0, sl
    59d2:	f000 fd37 	bl	6444 <__clzsi2>
    59d6:	1c03      	adds	r3, r0, #0
    59d8:	3320      	adds	r3, #32
    59da:	2b27      	cmp	r3, #39	; 0x27
    59dc:	dc00      	bgt.n	59e0 <__aeabi_dmul+0x404>
    59de:	e6a6      	b.n	572e <__aeabi_dmul+0x152>
    59e0:	4655      	mov	r5, sl
    59e2:	3808      	subs	r0, #8
    59e4:	4085      	lsls	r5, r0
    59e6:	2200      	movs	r2, #0
    59e8:	e6ac      	b.n	5744 <__aeabi_dmul+0x168>
    59ea:	1c28      	adds	r0, r5, #0
    59ec:	f000 fd2a 	bl	6444 <__clzsi2>
    59f0:	1c02      	adds	r2, r0, #0
    59f2:	3220      	adds	r2, #32
    59f4:	2a27      	cmp	r2, #39	; 0x27
    59f6:	dc00      	bgt.n	59fa <__aeabi_dmul+0x41e>
    59f8:	e675      	b.n	56e6 <__aeabi_dmul+0x10a>
    59fa:	3808      	subs	r0, #8
    59fc:	4085      	lsls	r5, r0
    59fe:	2600      	movs	r6, #0
    5a00:	46ab      	mov	fp, r5
    5a02:	e67d      	b.n	5700 <__aeabi_dmul+0x124>
    5a04:	465a      	mov	r2, fp
    5a06:	08f6      	lsrs	r6, r6, #3
    5a08:	0752      	lsls	r2, r2, #29
    5a0a:	4316      	orrs	r6, r2
    5a0c:	465a      	mov	r2, fp
    5a0e:	2401      	movs	r4, #1
    5a10:	0255      	lsls	r5, r2, #9
    5a12:	9a02      	ldr	r2, [sp, #8]
    5a14:	055b      	lsls	r3, r3, #21
    5a16:	0b2d      	lsrs	r5, r5, #12
    5a18:	0d5b      	lsrs	r3, r3, #21
    5a1a:	4014      	ands	r4, r2
    5a1c:	e642      	b.n	56a4 <__aeabi_dmul+0xc8>
    5a1e:	4d38      	ldr	r5, [pc, #224]	; (5b00 <__aeabi_dmul+0x524>)
    5a20:	1bed      	subs	r5, r5, r7
    5a22:	2d38      	cmp	r5, #56	; 0x38
    5a24:	dd0a      	ble.n	5a3c <__aeabi_dmul+0x460>
    5a26:	2401      	movs	r4, #1
    5a28:	9b02      	ldr	r3, [sp, #8]
    5a2a:	2500      	movs	r5, #0
    5a2c:	401c      	ands	r4, r3
    5a2e:	2600      	movs	r6, #0
    5a30:	2300      	movs	r3, #0
    5a32:	e637      	b.n	56a4 <__aeabi_dmul+0xc8>
    5a34:	9b01      	ldr	r3, [sp, #4]
    5a36:	4657      	mov	r7, sl
    5a38:	9302      	str	r3, [sp, #8]
    5a3a:	e791      	b.n	5960 <__aeabi_dmul+0x384>
    5a3c:	2d1f      	cmp	r5, #31
    5a3e:	dc25      	bgt.n	5a8c <__aeabi_dmul+0x4b0>
    5a40:	4b30      	ldr	r3, [pc, #192]	; (5b04 <__aeabi_dmul+0x528>)
    5a42:	1c32      	adds	r2, r6, #0
    5a44:	469c      	mov	ip, r3
    5a46:	4467      	add	r7, ip
    5a48:	40be      	lsls	r6, r7
    5a4a:	465b      	mov	r3, fp
    5a4c:	40bb      	lsls	r3, r7
    5a4e:	1c37      	adds	r7, r6, #0
    5a50:	40ea      	lsrs	r2, r5
    5a52:	1e7e      	subs	r6, r7, #1
    5a54:	41b7      	sbcs	r7, r6
    5a56:	4313      	orrs	r3, r2
    5a58:	433b      	orrs	r3, r7
    5a5a:	1c1e      	adds	r6, r3, #0
    5a5c:	465b      	mov	r3, fp
    5a5e:	40eb      	lsrs	r3, r5
    5a60:	1c1d      	adds	r5, r3, #0
    5a62:	0773      	lsls	r3, r6, #29
    5a64:	d009      	beq.n	5a7a <__aeabi_dmul+0x49e>
    5a66:	230f      	movs	r3, #15
    5a68:	4033      	ands	r3, r6
    5a6a:	2b04      	cmp	r3, #4
    5a6c:	d005      	beq.n	5a7a <__aeabi_dmul+0x49e>
    5a6e:	1d33      	adds	r3, r6, #4
    5a70:	42b3      	cmp	r3, r6
    5a72:	41b6      	sbcs	r6, r6
    5a74:	4276      	negs	r6, r6
    5a76:	19ad      	adds	r5, r5, r6
    5a78:	1c1e      	adds	r6, r3, #0
    5a7a:	022b      	lsls	r3, r5, #8
    5a7c:	d520      	bpl.n	5ac0 <__aeabi_dmul+0x4e4>
    5a7e:	2401      	movs	r4, #1
    5a80:	9b02      	ldr	r3, [sp, #8]
    5a82:	2500      	movs	r5, #0
    5a84:	401c      	ands	r4, r3
    5a86:	2600      	movs	r6, #0
    5a88:	2301      	movs	r3, #1
    5a8a:	e60b      	b.n	56a4 <__aeabi_dmul+0xc8>
    5a8c:	465a      	mov	r2, fp
    5a8e:	4b1e      	ldr	r3, [pc, #120]	; (5b08 <__aeabi_dmul+0x52c>)
    5a90:	1bdb      	subs	r3, r3, r7
    5a92:	40da      	lsrs	r2, r3
    5a94:	1c13      	adds	r3, r2, #0
    5a96:	2d20      	cmp	r5, #32
    5a98:	d01c      	beq.n	5ad4 <__aeabi_dmul+0x4f8>
    5a9a:	4a1c      	ldr	r2, [pc, #112]	; (5b0c <__aeabi_dmul+0x530>)
    5a9c:	4694      	mov	ip, r2
    5a9e:	465a      	mov	r2, fp
    5aa0:	4467      	add	r7, ip
    5aa2:	40ba      	lsls	r2, r7
    5aa4:	1c17      	adds	r7, r2, #0
    5aa6:	433e      	orrs	r6, r7
    5aa8:	1e72      	subs	r2, r6, #1
    5aaa:	4196      	sbcs	r6, r2
    5aac:	431e      	orrs	r6, r3
    5aae:	2307      	movs	r3, #7
    5ab0:	2500      	movs	r5, #0
    5ab2:	4033      	ands	r3, r6
    5ab4:	d007      	beq.n	5ac6 <__aeabi_dmul+0x4ea>
    5ab6:	230f      	movs	r3, #15
    5ab8:	2500      	movs	r5, #0
    5aba:	4033      	ands	r3, r6
    5abc:	2b04      	cmp	r3, #4
    5abe:	d1d6      	bne.n	5a6e <__aeabi_dmul+0x492>
    5ac0:	076b      	lsls	r3, r5, #29
    5ac2:	026d      	lsls	r5, r5, #9
    5ac4:	0b2d      	lsrs	r5, r5, #12
    5ac6:	2401      	movs	r4, #1
    5ac8:	08f6      	lsrs	r6, r6, #3
    5aca:	431e      	orrs	r6, r3
    5acc:	9b02      	ldr	r3, [sp, #8]
    5ace:	401c      	ands	r4, r3
    5ad0:	2300      	movs	r3, #0
    5ad2:	e5e7      	b.n	56a4 <__aeabi_dmul+0xc8>
    5ad4:	2700      	movs	r7, #0
    5ad6:	e7e6      	b.n	5aa6 <__aeabi_dmul+0x4ca>
    5ad8:	2580      	movs	r5, #128	; 0x80
    5ada:	465b      	mov	r3, fp
    5adc:	2401      	movs	r4, #1
    5ade:	032d      	lsls	r5, r5, #12
    5ae0:	431d      	orrs	r5, r3
    5ae2:	9b01      	ldr	r3, [sp, #4]
    5ae4:	032d      	lsls	r5, r5, #12
    5ae6:	4023      	ands	r3, r4
    5ae8:	1c1c      	adds	r4, r3, #0
    5aea:	0b2d      	lsrs	r5, r5, #12
    5aec:	4b03      	ldr	r3, [pc, #12]	; (5afc <__aeabi_dmul+0x520>)
    5aee:	e5d9      	b.n	56a4 <__aeabi_dmul+0xc8>
    5af0:	000003ff 	.word	0x000003ff
    5af4:	feffffff 	.word	0xfeffffff
    5af8:	000007fe 	.word	0x000007fe
    5afc:	000007ff 	.word	0x000007ff
    5b00:	fffffc02 	.word	0xfffffc02
    5b04:	0000041e 	.word	0x0000041e
    5b08:	fffffbe2 	.word	0xfffffbe2
    5b0c:	0000043e 	.word	0x0000043e

00005b10 <__aeabi_dsub>:
    5b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b12:	464d      	mov	r5, r9
    5b14:	4644      	mov	r4, r8
    5b16:	465f      	mov	r7, fp
    5b18:	4656      	mov	r6, sl
    5b1a:	b4f0      	push	{r4, r5, r6, r7}
    5b1c:	1c0e      	adds	r6, r1, #0
    5b1e:	1c11      	adds	r1, r2, #0
    5b20:	0332      	lsls	r2, r6, #12
    5b22:	0a52      	lsrs	r2, r2, #9
    5b24:	0f47      	lsrs	r7, r0, #29
    5b26:	4317      	orrs	r7, r2
    5b28:	00c5      	lsls	r5, r0, #3
    5b2a:	031a      	lsls	r2, r3, #12
    5b2c:	0058      	lsls	r0, r3, #1
    5b2e:	0fdb      	lsrs	r3, r3, #31
    5b30:	4699      	mov	r9, r3
    5b32:	0a52      	lsrs	r2, r2, #9
    5b34:	0f4b      	lsrs	r3, r1, #29
    5b36:	b083      	sub	sp, #12
    5b38:	431a      	orrs	r2, r3
    5b3a:	00cb      	lsls	r3, r1, #3
    5b3c:	9301      	str	r3, [sp, #4]
    5b3e:	4bcf      	ldr	r3, [pc, #828]	; (5e7c <__aeabi_dsub+0x36c>)
    5b40:	0074      	lsls	r4, r6, #1
    5b42:	0ff6      	lsrs	r6, r6, #31
    5b44:	0d64      	lsrs	r4, r4, #21
    5b46:	46b0      	mov	r8, r6
    5b48:	0d40      	lsrs	r0, r0, #21
    5b4a:	4298      	cmp	r0, r3
    5b4c:	d100      	bne.n	5b50 <__aeabi_dsub+0x40>
    5b4e:	e0e8      	b.n	5d22 <__aeabi_dsub+0x212>
    5b50:	2301      	movs	r3, #1
    5b52:	4649      	mov	r1, r9
    5b54:	4059      	eors	r1, r3
    5b56:	1c0b      	adds	r3, r1, #0
    5b58:	429e      	cmp	r6, r3
    5b5a:	d100      	bne.n	5b5e <__aeabi_dsub+0x4e>
    5b5c:	e0b1      	b.n	5cc2 <__aeabi_dsub+0x1b2>
    5b5e:	1a26      	subs	r6, r4, r0
    5b60:	2e00      	cmp	r6, #0
    5b62:	dc00      	bgt.n	5b66 <__aeabi_dsub+0x56>
    5b64:	e11c      	b.n	5da0 <__aeabi_dsub+0x290>
    5b66:	2800      	cmp	r0, #0
    5b68:	d142      	bne.n	5bf0 <__aeabi_dsub+0xe0>
    5b6a:	1c13      	adds	r3, r2, #0
    5b6c:	9901      	ldr	r1, [sp, #4]
    5b6e:	430b      	orrs	r3, r1
    5b70:	d000      	beq.n	5b74 <__aeabi_dsub+0x64>
    5b72:	e0e6      	b.n	5d42 <__aeabi_dsub+0x232>
    5b74:	076b      	lsls	r3, r5, #29
    5b76:	d100      	bne.n	5b7a <__aeabi_dsub+0x6a>
    5b78:	e08e      	b.n	5c98 <__aeabi_dsub+0x188>
    5b7a:	230f      	movs	r3, #15
    5b7c:	402b      	ands	r3, r5
    5b7e:	2b04      	cmp	r3, #4
    5b80:	d100      	bne.n	5b84 <__aeabi_dsub+0x74>
    5b82:	e089      	b.n	5c98 <__aeabi_dsub+0x188>
    5b84:	1d2a      	adds	r2, r5, #4
    5b86:	42aa      	cmp	r2, r5
    5b88:	41ad      	sbcs	r5, r5
    5b8a:	2380      	movs	r3, #128	; 0x80
    5b8c:	2601      	movs	r6, #1
    5b8e:	4641      	mov	r1, r8
    5b90:	426d      	negs	r5, r5
    5b92:	197f      	adds	r7, r7, r5
    5b94:	041b      	lsls	r3, r3, #16
    5b96:	403b      	ands	r3, r7
    5b98:	400e      	ands	r6, r1
    5b9a:	1c15      	adds	r5, r2, #0
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d100      	bne.n	5ba2 <__aeabi_dsub+0x92>
    5ba0:	e083      	b.n	5caa <__aeabi_dsub+0x19a>
    5ba2:	4bb6      	ldr	r3, [pc, #728]	; (5e7c <__aeabi_dsub+0x36c>)
    5ba4:	3401      	adds	r4, #1
    5ba6:	429c      	cmp	r4, r3
    5ba8:	d100      	bne.n	5bac <__aeabi_dsub+0x9c>
    5baa:	e116      	b.n	5dda <__aeabi_dsub+0x2ca>
    5bac:	1c3a      	adds	r2, r7, #0
    5bae:	4bb4      	ldr	r3, [pc, #720]	; (5e80 <__aeabi_dsub+0x370>)
    5bb0:	08ed      	lsrs	r5, r5, #3
    5bb2:	401a      	ands	r2, r3
    5bb4:	0750      	lsls	r0, r2, #29
    5bb6:	0564      	lsls	r4, r4, #21
    5bb8:	0252      	lsls	r2, r2, #9
    5bba:	4305      	orrs	r5, r0
    5bbc:	0b12      	lsrs	r2, r2, #12
    5bbe:	0d64      	lsrs	r4, r4, #21
    5bc0:	2100      	movs	r1, #0
    5bc2:	0312      	lsls	r2, r2, #12
    5bc4:	0d0b      	lsrs	r3, r1, #20
    5bc6:	051b      	lsls	r3, r3, #20
    5bc8:	0564      	lsls	r4, r4, #21
    5bca:	0b12      	lsrs	r2, r2, #12
    5bcc:	431a      	orrs	r2, r3
    5bce:	0863      	lsrs	r3, r4, #1
    5bd0:	4cac      	ldr	r4, [pc, #688]	; (5e84 <__aeabi_dsub+0x374>)
    5bd2:	07f6      	lsls	r6, r6, #31
    5bd4:	4014      	ands	r4, r2
    5bd6:	431c      	orrs	r4, r3
    5bd8:	0064      	lsls	r4, r4, #1
    5bda:	0864      	lsrs	r4, r4, #1
    5bdc:	4334      	orrs	r4, r6
    5bde:	1c28      	adds	r0, r5, #0
    5be0:	1c21      	adds	r1, r4, #0
    5be2:	b003      	add	sp, #12
    5be4:	bc3c      	pop	{r2, r3, r4, r5}
    5be6:	4690      	mov	r8, r2
    5be8:	4699      	mov	r9, r3
    5bea:	46a2      	mov	sl, r4
    5bec:	46ab      	mov	fp, r5
    5bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bf0:	4ba2      	ldr	r3, [pc, #648]	; (5e7c <__aeabi_dsub+0x36c>)
    5bf2:	429c      	cmp	r4, r3
    5bf4:	d0be      	beq.n	5b74 <__aeabi_dsub+0x64>
    5bf6:	2380      	movs	r3, #128	; 0x80
    5bf8:	041b      	lsls	r3, r3, #16
    5bfa:	431a      	orrs	r2, r3
    5bfc:	2e38      	cmp	r6, #56	; 0x38
    5bfe:	dd00      	ble.n	5c02 <__aeabi_dsub+0xf2>
    5c00:	e103      	b.n	5e0a <__aeabi_dsub+0x2fa>
    5c02:	2e1f      	cmp	r6, #31
    5c04:	dd00      	ble.n	5c08 <__aeabi_dsub+0xf8>
    5c06:	e13f      	b.n	5e88 <__aeabi_dsub+0x378>
    5c08:	2020      	movs	r0, #32
    5c0a:	1b83      	subs	r3, r0, r6
    5c0c:	4699      	mov	r9, r3
    5c0e:	1c13      	adds	r3, r2, #0
    5c10:	4649      	mov	r1, r9
    5c12:	408b      	lsls	r3, r1
    5c14:	469c      	mov	ip, r3
    5c16:	9b01      	ldr	r3, [sp, #4]
    5c18:	4660      	mov	r0, ip
    5c1a:	40f3      	lsrs	r3, r6
    5c1c:	4303      	orrs	r3, r0
    5c1e:	9801      	ldr	r0, [sp, #4]
    5c20:	40f2      	lsrs	r2, r6
    5c22:	4088      	lsls	r0, r1
    5c24:	1c01      	adds	r1, r0, #0
    5c26:	1e48      	subs	r0, r1, #1
    5c28:	4181      	sbcs	r1, r0
    5c2a:	430b      	orrs	r3, r1
    5c2c:	1aeb      	subs	r3, r5, r3
    5c2e:	429d      	cmp	r5, r3
    5c30:	4180      	sbcs	r0, r0
    5c32:	1c1d      	adds	r5, r3, #0
    5c34:	1aba      	subs	r2, r7, r2
    5c36:	4240      	negs	r0, r0
    5c38:	1a17      	subs	r7, r2, r0
    5c3a:	023b      	lsls	r3, r7, #8
    5c3c:	d400      	bmi.n	5c40 <__aeabi_dsub+0x130>
    5c3e:	e0a8      	b.n	5d92 <__aeabi_dsub+0x282>
    5c40:	027a      	lsls	r2, r7, #9
    5c42:	0a56      	lsrs	r6, r2, #9
    5c44:	2e00      	cmp	r6, #0
    5c46:	d100      	bne.n	5c4a <__aeabi_dsub+0x13a>
    5c48:	e0ca      	b.n	5de0 <__aeabi_dsub+0x2d0>
    5c4a:	1c30      	adds	r0, r6, #0
    5c4c:	f000 fbfa 	bl	6444 <__clzsi2>
    5c50:	1c03      	adds	r3, r0, #0
    5c52:	3b08      	subs	r3, #8
    5c54:	2b1f      	cmp	r3, #31
    5c56:	dd00      	ble.n	5c5a <__aeabi_dsub+0x14a>
    5c58:	e0cb      	b.n	5df2 <__aeabi_dsub+0x2e2>
    5c5a:	2228      	movs	r2, #40	; 0x28
    5c5c:	1c29      	adds	r1, r5, #0
    5c5e:	1a12      	subs	r2, r2, r0
    5c60:	40d1      	lsrs	r1, r2
    5c62:	409e      	lsls	r6, r3
    5c64:	1c0a      	adds	r2, r1, #0
    5c66:	409d      	lsls	r5, r3
    5c68:	4332      	orrs	r2, r6
    5c6a:	429c      	cmp	r4, r3
    5c6c:	dd00      	ble.n	5c70 <__aeabi_dsub+0x160>
    5c6e:	e0c8      	b.n	5e02 <__aeabi_dsub+0x2f2>
    5c70:	1b1c      	subs	r4, r3, r4
    5c72:	1c67      	adds	r7, r4, #1
    5c74:	2f1f      	cmp	r7, #31
    5c76:	dd00      	ble.n	5c7a <__aeabi_dsub+0x16a>
    5c78:	e0ed      	b.n	5e56 <__aeabi_dsub+0x346>
    5c7a:	231f      	movs	r3, #31
    5c7c:	1c29      	adds	r1, r5, #0
    5c7e:	1b1c      	subs	r4, r3, r4
    5c80:	1c13      	adds	r3, r2, #0
    5c82:	40a5      	lsls	r5, r4
    5c84:	40a3      	lsls	r3, r4
    5c86:	40f9      	lsrs	r1, r7
    5c88:	1e6c      	subs	r4, r5, #1
    5c8a:	41a5      	sbcs	r5, r4
    5c8c:	40fa      	lsrs	r2, r7
    5c8e:	4319      	orrs	r1, r3
    5c90:	430d      	orrs	r5, r1
    5c92:	1c17      	adds	r7, r2, #0
    5c94:	2400      	movs	r4, #0
    5c96:	e76d      	b.n	5b74 <__aeabi_dsub+0x64>
    5c98:	2380      	movs	r3, #128	; 0x80
    5c9a:	2601      	movs	r6, #1
    5c9c:	4642      	mov	r2, r8
    5c9e:	041b      	lsls	r3, r3, #16
    5ca0:	403b      	ands	r3, r7
    5ca2:	4016      	ands	r6, r2
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d000      	beq.n	5caa <__aeabi_dsub+0x19a>
    5ca8:	e77b      	b.n	5ba2 <__aeabi_dsub+0x92>
    5caa:	4b74      	ldr	r3, [pc, #464]	; (5e7c <__aeabi_dsub+0x36c>)
    5cac:	08ed      	lsrs	r5, r5, #3
    5cae:	0778      	lsls	r0, r7, #29
    5cb0:	4305      	orrs	r5, r0
    5cb2:	08fa      	lsrs	r2, r7, #3
    5cb4:	429c      	cmp	r4, r3
    5cb6:	d03b      	beq.n	5d30 <__aeabi_dsub+0x220>
    5cb8:	0312      	lsls	r2, r2, #12
    5cba:	0564      	lsls	r4, r4, #21
    5cbc:	0b12      	lsrs	r2, r2, #12
    5cbe:	0d64      	lsrs	r4, r4, #21
    5cc0:	e77e      	b.n	5bc0 <__aeabi_dsub+0xb0>
    5cc2:	1a23      	subs	r3, r4, r0
    5cc4:	469a      	mov	sl, r3
    5cc6:	2b00      	cmp	r3, #0
    5cc8:	dc00      	bgt.n	5ccc <__aeabi_dsub+0x1bc>
    5cca:	e0a5      	b.n	5e18 <__aeabi_dsub+0x308>
    5ccc:	2800      	cmp	r0, #0
    5cce:	d044      	beq.n	5d5a <__aeabi_dsub+0x24a>
    5cd0:	486a      	ldr	r0, [pc, #424]	; (5e7c <__aeabi_dsub+0x36c>)
    5cd2:	4284      	cmp	r4, r0
    5cd4:	d100      	bne.n	5cd8 <__aeabi_dsub+0x1c8>
    5cd6:	e74d      	b.n	5b74 <__aeabi_dsub+0x64>
    5cd8:	2080      	movs	r0, #128	; 0x80
    5cda:	0400      	lsls	r0, r0, #16
    5cdc:	4302      	orrs	r2, r0
    5cde:	4653      	mov	r3, sl
    5ce0:	2b38      	cmp	r3, #56	; 0x38
    5ce2:	dc00      	bgt.n	5ce6 <__aeabi_dsub+0x1d6>
    5ce4:	e11c      	b.n	5f20 <__aeabi_dsub+0x410>
    5ce6:	9b01      	ldr	r3, [sp, #4]
    5ce8:	431a      	orrs	r2, r3
    5cea:	1e51      	subs	r1, r2, #1
    5cec:	418a      	sbcs	r2, r1
    5cee:	b2d1      	uxtb	r1, r2
    5cf0:	2200      	movs	r2, #0
    5cf2:	1949      	adds	r1, r1, r5
    5cf4:	42a9      	cmp	r1, r5
    5cf6:	4180      	sbcs	r0, r0
    5cf8:	1c0d      	adds	r5, r1, #0
    5cfa:	19d2      	adds	r2, r2, r7
    5cfc:	4240      	negs	r0, r0
    5cfe:	1817      	adds	r7, r2, r0
    5d00:	023b      	lsls	r3, r7, #8
    5d02:	d546      	bpl.n	5d92 <__aeabi_dsub+0x282>
    5d04:	4b5d      	ldr	r3, [pc, #372]	; (5e7c <__aeabi_dsub+0x36c>)
    5d06:	3401      	adds	r4, #1
    5d08:	429c      	cmp	r4, r3
    5d0a:	d100      	bne.n	5d0e <__aeabi_dsub+0x1fe>
    5d0c:	e169      	b.n	5fe2 <__aeabi_dsub+0x4d2>
    5d0e:	2001      	movs	r0, #1
    5d10:	4a5b      	ldr	r2, [pc, #364]	; (5e80 <__aeabi_dsub+0x370>)
    5d12:	086b      	lsrs	r3, r5, #1
    5d14:	403a      	ands	r2, r7
    5d16:	4028      	ands	r0, r5
    5d18:	4318      	orrs	r0, r3
    5d1a:	07d5      	lsls	r5, r2, #31
    5d1c:	4305      	orrs	r5, r0
    5d1e:	0857      	lsrs	r7, r2, #1
    5d20:	e728      	b.n	5b74 <__aeabi_dsub+0x64>
    5d22:	1c13      	adds	r3, r2, #0
    5d24:	9901      	ldr	r1, [sp, #4]
    5d26:	430b      	orrs	r3, r1
    5d28:	d100      	bne.n	5d2c <__aeabi_dsub+0x21c>
    5d2a:	e711      	b.n	5b50 <__aeabi_dsub+0x40>
    5d2c:	464b      	mov	r3, r9
    5d2e:	e713      	b.n	5b58 <__aeabi_dsub+0x48>
    5d30:	1c2b      	adds	r3, r5, #0
    5d32:	4313      	orrs	r3, r2
    5d34:	d051      	beq.n	5dda <__aeabi_dsub+0x2ca>
    5d36:	2380      	movs	r3, #128	; 0x80
    5d38:	031b      	lsls	r3, r3, #12
    5d3a:	431a      	orrs	r2, r3
    5d3c:	0312      	lsls	r2, r2, #12
    5d3e:	0b12      	lsrs	r2, r2, #12
    5d40:	e73e      	b.n	5bc0 <__aeabi_dsub+0xb0>
    5d42:	3e01      	subs	r6, #1
    5d44:	2e00      	cmp	r6, #0
    5d46:	d000      	beq.n	5d4a <__aeabi_dsub+0x23a>
    5d48:	e080      	b.n	5e4c <__aeabi_dsub+0x33c>
    5d4a:	1a69      	subs	r1, r5, r1
    5d4c:	428d      	cmp	r5, r1
    5d4e:	419b      	sbcs	r3, r3
    5d50:	1aba      	subs	r2, r7, r2
    5d52:	425b      	negs	r3, r3
    5d54:	1ad7      	subs	r7, r2, r3
    5d56:	1c0d      	adds	r5, r1, #0
    5d58:	e76f      	b.n	5c3a <__aeabi_dsub+0x12a>
    5d5a:	1c10      	adds	r0, r2, #0
    5d5c:	9b01      	ldr	r3, [sp, #4]
    5d5e:	4318      	orrs	r0, r3
    5d60:	d100      	bne.n	5d64 <__aeabi_dsub+0x254>
    5d62:	e707      	b.n	5b74 <__aeabi_dsub+0x64>
    5d64:	2301      	movs	r3, #1
    5d66:	425b      	negs	r3, r3
    5d68:	469c      	mov	ip, r3
    5d6a:	44e2      	add	sl, ip
    5d6c:	4653      	mov	r3, sl
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d000      	beq.n	5d74 <__aeabi_dsub+0x264>
    5d72:	e102      	b.n	5f7a <__aeabi_dsub+0x46a>
    5d74:	9b01      	ldr	r3, [sp, #4]
    5d76:	19d2      	adds	r2, r2, r7
    5d78:	1959      	adds	r1, r3, r5
    5d7a:	42a9      	cmp	r1, r5
    5d7c:	419b      	sbcs	r3, r3
    5d7e:	425b      	negs	r3, r3
    5d80:	18d7      	adds	r7, r2, r3
    5d82:	1c0d      	adds	r5, r1, #0
    5d84:	e7bc      	b.n	5d00 <__aeabi_dsub+0x1f0>
    5d86:	4663      	mov	r3, ip
    5d88:	4303      	orrs	r3, r0
    5d8a:	d100      	bne.n	5d8e <__aeabi_dsub+0x27e>
    5d8c:	e128      	b.n	5fe0 <__aeabi_dsub+0x4d0>
    5d8e:	1c07      	adds	r7, r0, #0
    5d90:	4665      	mov	r5, ip
    5d92:	076b      	lsls	r3, r5, #29
    5d94:	d000      	beq.n	5d98 <__aeabi_dsub+0x288>
    5d96:	e6f0      	b.n	5b7a <__aeabi_dsub+0x6a>
    5d98:	2601      	movs	r6, #1
    5d9a:	4643      	mov	r3, r8
    5d9c:	401e      	ands	r6, r3
    5d9e:	e784      	b.n	5caa <__aeabi_dsub+0x19a>
    5da0:	2e00      	cmp	r6, #0
    5da2:	d000      	beq.n	5da6 <__aeabi_dsub+0x296>
    5da4:	e081      	b.n	5eaa <__aeabi_dsub+0x39a>
    5da6:	1c60      	adds	r0, r4, #1
    5da8:	0540      	lsls	r0, r0, #21
    5daa:	0d40      	lsrs	r0, r0, #21
    5dac:	2801      	cmp	r0, #1
    5dae:	dc00      	bgt.n	5db2 <__aeabi_dsub+0x2a2>
    5db0:	e107      	b.n	5fc2 <__aeabi_dsub+0x4b2>
    5db2:	9901      	ldr	r1, [sp, #4]
    5db4:	1a68      	subs	r0, r5, r1
    5db6:	4684      	mov	ip, r0
    5db8:	4565      	cmp	r5, ip
    5dba:	41b6      	sbcs	r6, r6
    5dbc:	1ab8      	subs	r0, r7, r2
    5dbe:	4276      	negs	r6, r6
    5dc0:	1b86      	subs	r6, r0, r6
    5dc2:	0230      	lsls	r0, r6, #8
    5dc4:	d400      	bmi.n	5dc8 <__aeabi_dsub+0x2b8>
    5dc6:	e0a1      	b.n	5f0c <__aeabi_dsub+0x3fc>
    5dc8:	468c      	mov	ip, r1
    5dca:	1b4d      	subs	r5, r1, r5
    5dcc:	45ac      	cmp	ip, r5
    5dce:	4189      	sbcs	r1, r1
    5dd0:	1bd2      	subs	r2, r2, r7
    5dd2:	4249      	negs	r1, r1
    5dd4:	1a56      	subs	r6, r2, r1
    5dd6:	4698      	mov	r8, r3
    5dd8:	e734      	b.n	5c44 <__aeabi_dsub+0x134>
    5dda:	2200      	movs	r2, #0
    5ddc:	2500      	movs	r5, #0
    5dde:	e6ef      	b.n	5bc0 <__aeabi_dsub+0xb0>
    5de0:	1c28      	adds	r0, r5, #0
    5de2:	f000 fb2f 	bl	6444 <__clzsi2>
    5de6:	3020      	adds	r0, #32
    5de8:	1c03      	adds	r3, r0, #0
    5dea:	3b08      	subs	r3, #8
    5dec:	2b1f      	cmp	r3, #31
    5dee:	dc00      	bgt.n	5df2 <__aeabi_dsub+0x2e2>
    5df0:	e733      	b.n	5c5a <__aeabi_dsub+0x14a>
    5df2:	1c02      	adds	r2, r0, #0
    5df4:	3a28      	subs	r2, #40	; 0x28
    5df6:	4095      	lsls	r5, r2
    5df8:	1c2a      	adds	r2, r5, #0
    5dfa:	2500      	movs	r5, #0
    5dfc:	429c      	cmp	r4, r3
    5dfe:	dc00      	bgt.n	5e02 <__aeabi_dsub+0x2f2>
    5e00:	e736      	b.n	5c70 <__aeabi_dsub+0x160>
    5e02:	4f1f      	ldr	r7, [pc, #124]	; (5e80 <__aeabi_dsub+0x370>)
    5e04:	1ae4      	subs	r4, r4, r3
    5e06:	4017      	ands	r7, r2
    5e08:	e6b4      	b.n	5b74 <__aeabi_dsub+0x64>
    5e0a:	9b01      	ldr	r3, [sp, #4]
    5e0c:	431a      	orrs	r2, r3
    5e0e:	1e51      	subs	r1, r2, #1
    5e10:	418a      	sbcs	r2, r1
    5e12:	b2d3      	uxtb	r3, r2
    5e14:	2200      	movs	r2, #0
    5e16:	e709      	b.n	5c2c <__aeabi_dsub+0x11c>
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d000      	beq.n	5e1e <__aeabi_dsub+0x30e>
    5e1c:	e101      	b.n	6022 <__aeabi_dsub+0x512>
    5e1e:	1c60      	adds	r0, r4, #1
    5e20:	0543      	lsls	r3, r0, #21
    5e22:	0d5b      	lsrs	r3, r3, #21
    5e24:	2b01      	cmp	r3, #1
    5e26:	dc00      	bgt.n	5e2a <__aeabi_dsub+0x31a>
    5e28:	e0b0      	b.n	5f8c <__aeabi_dsub+0x47c>
    5e2a:	4b14      	ldr	r3, [pc, #80]	; (5e7c <__aeabi_dsub+0x36c>)
    5e2c:	4298      	cmp	r0, r3
    5e2e:	d100      	bne.n	5e32 <__aeabi_dsub+0x322>
    5e30:	e11e      	b.n	6070 <__aeabi_dsub+0x560>
    5e32:	9b01      	ldr	r3, [sp, #4]
    5e34:	19d2      	adds	r2, r2, r7
    5e36:	1959      	adds	r1, r3, r5
    5e38:	42a9      	cmp	r1, r5
    5e3a:	419b      	sbcs	r3, r3
    5e3c:	425b      	negs	r3, r3
    5e3e:	18d2      	adds	r2, r2, r3
    5e40:	0849      	lsrs	r1, r1, #1
    5e42:	07d5      	lsls	r5, r2, #31
    5e44:	430d      	orrs	r5, r1
    5e46:	0857      	lsrs	r7, r2, #1
    5e48:	1c04      	adds	r4, r0, #0
    5e4a:	e693      	b.n	5b74 <__aeabi_dsub+0x64>
    5e4c:	4b0b      	ldr	r3, [pc, #44]	; (5e7c <__aeabi_dsub+0x36c>)
    5e4e:	429c      	cmp	r4, r3
    5e50:	d000      	beq.n	5e54 <__aeabi_dsub+0x344>
    5e52:	e6d3      	b.n	5bfc <__aeabi_dsub+0xec>
    5e54:	e68e      	b.n	5b74 <__aeabi_dsub+0x64>
    5e56:	1c21      	adds	r1, r4, #0
    5e58:	1c13      	adds	r3, r2, #0
    5e5a:	391f      	subs	r1, #31
    5e5c:	40cb      	lsrs	r3, r1
    5e5e:	1c19      	adds	r1, r3, #0
    5e60:	2f20      	cmp	r7, #32
    5e62:	d100      	bne.n	5e66 <__aeabi_dsub+0x356>
    5e64:	e08e      	b.n	5f84 <__aeabi_dsub+0x474>
    5e66:	233f      	movs	r3, #63	; 0x3f
    5e68:	1b1c      	subs	r4, r3, r4
    5e6a:	40a2      	lsls	r2, r4
    5e6c:	4315      	orrs	r5, r2
    5e6e:	1e6a      	subs	r2, r5, #1
    5e70:	4195      	sbcs	r5, r2
    5e72:	2700      	movs	r7, #0
    5e74:	430d      	orrs	r5, r1
    5e76:	2400      	movs	r4, #0
    5e78:	e78b      	b.n	5d92 <__aeabi_dsub+0x282>
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	000007ff 	.word	0x000007ff
    5e80:	ff7fffff 	.word	0xff7fffff
    5e84:	800fffff 	.word	0x800fffff
    5e88:	1c33      	adds	r3, r6, #0
    5e8a:	1c10      	adds	r0, r2, #0
    5e8c:	3b20      	subs	r3, #32
    5e8e:	40d8      	lsrs	r0, r3
    5e90:	2e20      	cmp	r6, #32
    5e92:	d079      	beq.n	5f88 <__aeabi_dsub+0x478>
    5e94:	2340      	movs	r3, #64	; 0x40
    5e96:	1b9b      	subs	r3, r3, r6
    5e98:	409a      	lsls	r2, r3
    5e9a:	1c13      	adds	r3, r2, #0
    5e9c:	9a01      	ldr	r2, [sp, #4]
    5e9e:	4313      	orrs	r3, r2
    5ea0:	1e59      	subs	r1, r3, #1
    5ea2:	418b      	sbcs	r3, r1
    5ea4:	2200      	movs	r2, #0
    5ea6:	4303      	orrs	r3, r0
    5ea8:	e6c0      	b.n	5c2c <__aeabi_dsub+0x11c>
    5eaa:	2c00      	cmp	r4, #0
    5eac:	d053      	beq.n	5f56 <__aeabi_dsub+0x446>
    5eae:	4cc7      	ldr	r4, [pc, #796]	; (61cc <__aeabi_dsub+0x6bc>)
    5eb0:	42a0      	cmp	r0, r4
    5eb2:	d100      	bne.n	5eb6 <__aeabi_dsub+0x3a6>
    5eb4:	e0b0      	b.n	6018 <__aeabi_dsub+0x508>
    5eb6:	2480      	movs	r4, #128	; 0x80
    5eb8:	4271      	negs	r1, r6
    5eba:	4689      	mov	r9, r1
    5ebc:	0424      	lsls	r4, r4, #16
    5ebe:	4327      	orrs	r7, r4
    5ec0:	4649      	mov	r1, r9
    5ec2:	2938      	cmp	r1, #56	; 0x38
    5ec4:	dd00      	ble.n	5ec8 <__aeabi_dsub+0x3b8>
    5ec6:	e0cd      	b.n	6064 <__aeabi_dsub+0x554>
    5ec8:	291f      	cmp	r1, #31
    5eca:	dd00      	ble.n	5ece <__aeabi_dsub+0x3be>
    5ecc:	e159      	b.n	6182 <__aeabi_dsub+0x672>
    5ece:	2420      	movs	r4, #32
    5ed0:	1c3e      	adds	r6, r7, #0
    5ed2:	1a61      	subs	r1, r4, r1
    5ed4:	408e      	lsls	r6, r1
    5ed6:	468a      	mov	sl, r1
    5ed8:	46b0      	mov	r8, r6
    5eda:	4649      	mov	r1, r9
    5edc:	1c2e      	adds	r6, r5, #0
    5ede:	40ce      	lsrs	r6, r1
    5ee0:	4651      	mov	r1, sl
    5ee2:	46b4      	mov	ip, r6
    5ee4:	408d      	lsls	r5, r1
    5ee6:	4664      	mov	r4, ip
    5ee8:	4646      	mov	r6, r8
    5eea:	4649      	mov	r1, r9
    5eec:	4326      	orrs	r6, r4
    5eee:	1e6c      	subs	r4, r5, #1
    5ef0:	41a5      	sbcs	r5, r4
    5ef2:	40cf      	lsrs	r7, r1
    5ef4:	4335      	orrs	r5, r6
    5ef6:	9901      	ldr	r1, [sp, #4]
    5ef8:	1bd7      	subs	r7, r2, r7
    5efa:	468c      	mov	ip, r1
    5efc:	1b4d      	subs	r5, r1, r5
    5efe:	45ac      	cmp	ip, r5
    5f00:	4192      	sbcs	r2, r2
    5f02:	4252      	negs	r2, r2
    5f04:	1abf      	subs	r7, r7, r2
    5f06:	1c04      	adds	r4, r0, #0
    5f08:	4698      	mov	r8, r3
    5f0a:	e696      	b.n	5c3a <__aeabi_dsub+0x12a>
    5f0c:	4663      	mov	r3, ip
    5f0e:	4665      	mov	r5, ip
    5f10:	4333      	orrs	r3, r6
    5f12:	d000      	beq.n	5f16 <__aeabi_dsub+0x406>
    5f14:	e696      	b.n	5c44 <__aeabi_dsub+0x134>
    5f16:	2600      	movs	r6, #0
    5f18:	2700      	movs	r7, #0
    5f1a:	2400      	movs	r4, #0
    5f1c:	2500      	movs	r5, #0
    5f1e:	e6c4      	b.n	5caa <__aeabi_dsub+0x19a>
    5f20:	2b1f      	cmp	r3, #31
    5f22:	dc61      	bgt.n	5fe8 <__aeabi_dsub+0x4d8>
    5f24:	2020      	movs	r0, #32
    5f26:	1ac3      	subs	r3, r0, r3
    5f28:	469b      	mov	fp, r3
    5f2a:	1c13      	adds	r3, r2, #0
    5f2c:	4659      	mov	r1, fp
    5f2e:	408b      	lsls	r3, r1
    5f30:	4651      	mov	r1, sl
    5f32:	4699      	mov	r9, r3
    5f34:	9b01      	ldr	r3, [sp, #4]
    5f36:	40cb      	lsrs	r3, r1
    5f38:	469c      	mov	ip, r3
    5f3a:	464b      	mov	r3, r9
    5f3c:	4660      	mov	r0, ip
    5f3e:	4303      	orrs	r3, r0
    5f40:	469c      	mov	ip, r3
    5f42:	465b      	mov	r3, fp
    5f44:	9901      	ldr	r1, [sp, #4]
    5f46:	4099      	lsls	r1, r3
    5f48:	4663      	mov	r3, ip
    5f4a:	1e48      	subs	r0, r1, #1
    5f4c:	4181      	sbcs	r1, r0
    5f4e:	4319      	orrs	r1, r3
    5f50:	4653      	mov	r3, sl
    5f52:	40da      	lsrs	r2, r3
    5f54:	e6cd      	b.n	5cf2 <__aeabi_dsub+0x1e2>
    5f56:	1c3c      	adds	r4, r7, #0
    5f58:	432c      	orrs	r4, r5
    5f5a:	d05d      	beq.n	6018 <__aeabi_dsub+0x508>
    5f5c:	43f1      	mvns	r1, r6
    5f5e:	4689      	mov	r9, r1
    5f60:	2900      	cmp	r1, #0
    5f62:	d155      	bne.n	6010 <__aeabi_dsub+0x500>
    5f64:	9901      	ldr	r1, [sp, #4]
    5f66:	1bd2      	subs	r2, r2, r7
    5f68:	468c      	mov	ip, r1
    5f6a:	1b4d      	subs	r5, r1, r5
    5f6c:	45ac      	cmp	ip, r5
    5f6e:	4189      	sbcs	r1, r1
    5f70:	4249      	negs	r1, r1
    5f72:	1a57      	subs	r7, r2, r1
    5f74:	1c04      	adds	r4, r0, #0
    5f76:	4698      	mov	r8, r3
    5f78:	e65f      	b.n	5c3a <__aeabi_dsub+0x12a>
    5f7a:	4894      	ldr	r0, [pc, #592]	; (61cc <__aeabi_dsub+0x6bc>)
    5f7c:	4284      	cmp	r4, r0
    5f7e:	d000      	beq.n	5f82 <__aeabi_dsub+0x472>
    5f80:	e6ad      	b.n	5cde <__aeabi_dsub+0x1ce>
    5f82:	e5f7      	b.n	5b74 <__aeabi_dsub+0x64>
    5f84:	2200      	movs	r2, #0
    5f86:	e771      	b.n	5e6c <__aeabi_dsub+0x35c>
    5f88:	2300      	movs	r3, #0
    5f8a:	e787      	b.n	5e9c <__aeabi_dsub+0x38c>
    5f8c:	1c3b      	adds	r3, r7, #0
    5f8e:	432b      	orrs	r3, r5
    5f90:	2c00      	cmp	r4, #0
    5f92:	d000      	beq.n	5f96 <__aeabi_dsub+0x486>
    5f94:	e0da      	b.n	614c <__aeabi_dsub+0x63c>
    5f96:	2b00      	cmp	r3, #0
    5f98:	d100      	bne.n	5f9c <__aeabi_dsub+0x48c>
    5f9a:	e113      	b.n	61c4 <__aeabi_dsub+0x6b4>
    5f9c:	1c13      	adds	r3, r2, #0
    5f9e:	9901      	ldr	r1, [sp, #4]
    5fa0:	430b      	orrs	r3, r1
    5fa2:	d100      	bne.n	5fa6 <__aeabi_dsub+0x496>
    5fa4:	e5e6      	b.n	5b74 <__aeabi_dsub+0x64>
    5fa6:	1949      	adds	r1, r1, r5
    5fa8:	42a9      	cmp	r1, r5
    5faa:	419b      	sbcs	r3, r3
    5fac:	19d2      	adds	r2, r2, r7
    5fae:	425b      	negs	r3, r3
    5fb0:	18d7      	adds	r7, r2, r3
    5fb2:	023b      	lsls	r3, r7, #8
    5fb4:	d400      	bmi.n	5fb8 <__aeabi_dsub+0x4a8>
    5fb6:	e121      	b.n	61fc <__aeabi_dsub+0x6ec>
    5fb8:	4b85      	ldr	r3, [pc, #532]	; (61d0 <__aeabi_dsub+0x6c0>)
    5fba:	1c0d      	adds	r5, r1, #0
    5fbc:	401f      	ands	r7, r3
    5fbe:	1c04      	adds	r4, r0, #0
    5fc0:	e5d8      	b.n	5b74 <__aeabi_dsub+0x64>
    5fc2:	1c38      	adds	r0, r7, #0
    5fc4:	4328      	orrs	r0, r5
    5fc6:	2c00      	cmp	r4, #0
    5fc8:	d140      	bne.n	604c <__aeabi_dsub+0x53c>
    5fca:	2800      	cmp	r0, #0
    5fcc:	d000      	beq.n	5fd0 <__aeabi_dsub+0x4c0>
    5fce:	e083      	b.n	60d8 <__aeabi_dsub+0x5c8>
    5fd0:	1c10      	adds	r0, r2, #0
    5fd2:	9901      	ldr	r1, [sp, #4]
    5fd4:	4308      	orrs	r0, r1
    5fd6:	d003      	beq.n	5fe0 <__aeabi_dsub+0x4d0>
    5fd8:	1c17      	adds	r7, r2, #0
    5fda:	1c0d      	adds	r5, r1, #0
    5fdc:	4698      	mov	r8, r3
    5fde:	e5c9      	b.n	5b74 <__aeabi_dsub+0x64>
    5fe0:	2600      	movs	r6, #0
    5fe2:	2700      	movs	r7, #0
    5fe4:	2500      	movs	r5, #0
    5fe6:	e660      	b.n	5caa <__aeabi_dsub+0x19a>
    5fe8:	4650      	mov	r0, sl
    5fea:	1c13      	adds	r3, r2, #0
    5fec:	3820      	subs	r0, #32
    5fee:	40c3      	lsrs	r3, r0
    5ff0:	1c18      	adds	r0, r3, #0
    5ff2:	4653      	mov	r3, sl
    5ff4:	2b20      	cmp	r3, #32
    5ff6:	d100      	bne.n	5ffa <__aeabi_dsub+0x4ea>
    5ff8:	e0c1      	b.n	617e <__aeabi_dsub+0x66e>
    5ffa:	2340      	movs	r3, #64	; 0x40
    5ffc:	4651      	mov	r1, sl
    5ffe:	1a5b      	subs	r3, r3, r1
    6000:	409a      	lsls	r2, r3
    6002:	9901      	ldr	r1, [sp, #4]
    6004:	4311      	orrs	r1, r2
    6006:	1e4a      	subs	r2, r1, #1
    6008:	4191      	sbcs	r1, r2
    600a:	2200      	movs	r2, #0
    600c:	4301      	orrs	r1, r0
    600e:	e670      	b.n	5cf2 <__aeabi_dsub+0x1e2>
    6010:	4c6e      	ldr	r4, [pc, #440]	; (61cc <__aeabi_dsub+0x6bc>)
    6012:	42a0      	cmp	r0, r4
    6014:	d000      	beq.n	6018 <__aeabi_dsub+0x508>
    6016:	e753      	b.n	5ec0 <__aeabi_dsub+0x3b0>
    6018:	1c17      	adds	r7, r2, #0
    601a:	9d01      	ldr	r5, [sp, #4]
    601c:	1c04      	adds	r4, r0, #0
    601e:	4698      	mov	r8, r3
    6020:	e5a8      	b.n	5b74 <__aeabi_dsub+0x64>
    6022:	2c00      	cmp	r4, #0
    6024:	d128      	bne.n	6078 <__aeabi_dsub+0x568>
    6026:	1c3c      	adds	r4, r7, #0
    6028:	432c      	orrs	r4, r5
    602a:	d100      	bne.n	602e <__aeabi_dsub+0x51e>
    602c:	e08a      	b.n	6144 <__aeabi_dsub+0x634>
    602e:	43db      	mvns	r3, r3
    6030:	469a      	mov	sl, r3
    6032:	2b00      	cmp	r3, #0
    6034:	d000      	beq.n	6038 <__aeabi_dsub+0x528>
    6036:	e082      	b.n	613e <__aeabi_dsub+0x62e>
    6038:	9b01      	ldr	r3, [sp, #4]
    603a:	19d2      	adds	r2, r2, r7
    603c:	469c      	mov	ip, r3
    603e:	4465      	add	r5, ip
    6040:	429d      	cmp	r5, r3
    6042:	4189      	sbcs	r1, r1
    6044:	4249      	negs	r1, r1
    6046:	1857      	adds	r7, r2, r1
    6048:	1c04      	adds	r4, r0, #0
    604a:	e659      	b.n	5d00 <__aeabi_dsub+0x1f0>
    604c:	2800      	cmp	r0, #0
    604e:	d15b      	bne.n	6108 <__aeabi_dsub+0x5f8>
    6050:	1c10      	adds	r0, r2, #0
    6052:	9901      	ldr	r1, [sp, #4]
    6054:	4308      	orrs	r0, r1
    6056:	d100      	bne.n	605a <__aeabi_dsub+0x54a>
    6058:	e0a4      	b.n	61a4 <__aeabi_dsub+0x694>
    605a:	1c17      	adds	r7, r2, #0
    605c:	1c0d      	adds	r5, r1, #0
    605e:	4698      	mov	r8, r3
    6060:	4c5a      	ldr	r4, [pc, #360]	; (61cc <__aeabi_dsub+0x6bc>)
    6062:	e587      	b.n	5b74 <__aeabi_dsub+0x64>
    6064:	433d      	orrs	r5, r7
    6066:	1e6f      	subs	r7, r5, #1
    6068:	41bd      	sbcs	r5, r7
    606a:	2700      	movs	r7, #0
    606c:	b2ed      	uxtb	r5, r5
    606e:	e742      	b.n	5ef6 <__aeabi_dsub+0x3e6>
    6070:	1c04      	adds	r4, r0, #0
    6072:	2700      	movs	r7, #0
    6074:	2500      	movs	r5, #0
    6076:	e618      	b.n	5caa <__aeabi_dsub+0x19a>
    6078:	4c54      	ldr	r4, [pc, #336]	; (61cc <__aeabi_dsub+0x6bc>)
    607a:	42a0      	cmp	r0, r4
    607c:	d062      	beq.n	6144 <__aeabi_dsub+0x634>
    607e:	4653      	mov	r3, sl
    6080:	2480      	movs	r4, #128	; 0x80
    6082:	425b      	negs	r3, r3
    6084:	469a      	mov	sl, r3
    6086:	0424      	lsls	r4, r4, #16
    6088:	4327      	orrs	r7, r4
    608a:	4653      	mov	r3, sl
    608c:	2b38      	cmp	r3, #56	; 0x38
    608e:	dd00      	ble.n	6092 <__aeabi_dsub+0x582>
    6090:	e08e      	b.n	61b0 <__aeabi_dsub+0x6a0>
    6092:	2b1f      	cmp	r3, #31
    6094:	dd00      	ble.n	6098 <__aeabi_dsub+0x588>
    6096:	e09d      	b.n	61d4 <__aeabi_dsub+0x6c4>
    6098:	2420      	movs	r4, #32
    609a:	1ae3      	subs	r3, r4, r3
    609c:	469b      	mov	fp, r3
    609e:	1c3b      	adds	r3, r7, #0
    60a0:	4659      	mov	r1, fp
    60a2:	408b      	lsls	r3, r1
    60a4:	4651      	mov	r1, sl
    60a6:	4699      	mov	r9, r3
    60a8:	1c2b      	adds	r3, r5, #0
    60aa:	40cb      	lsrs	r3, r1
    60ac:	469c      	mov	ip, r3
    60ae:	464b      	mov	r3, r9
    60b0:	4664      	mov	r4, ip
    60b2:	4323      	orrs	r3, r4
    60b4:	469c      	mov	ip, r3
    60b6:	465b      	mov	r3, fp
    60b8:	409d      	lsls	r5, r3
    60ba:	4663      	mov	r3, ip
    60bc:	1e6c      	subs	r4, r5, #1
    60be:	41a5      	sbcs	r5, r4
    60c0:	40cf      	lsrs	r7, r1
    60c2:	431d      	orrs	r5, r3
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	18bf      	adds	r7, r7, r2
    60c8:	469c      	mov	ip, r3
    60ca:	4465      	add	r5, ip
    60cc:	429d      	cmp	r5, r3
    60ce:	4192      	sbcs	r2, r2
    60d0:	4252      	negs	r2, r2
    60d2:	18bf      	adds	r7, r7, r2
    60d4:	1c04      	adds	r4, r0, #0
    60d6:	e613      	b.n	5d00 <__aeabi_dsub+0x1f0>
    60d8:	1c10      	adds	r0, r2, #0
    60da:	9901      	ldr	r1, [sp, #4]
    60dc:	4308      	orrs	r0, r1
    60de:	d100      	bne.n	60e2 <__aeabi_dsub+0x5d2>
    60e0:	e548      	b.n	5b74 <__aeabi_dsub+0x64>
    60e2:	1a68      	subs	r0, r5, r1
    60e4:	4684      	mov	ip, r0
    60e6:	4285      	cmp	r5, r0
    60e8:	4180      	sbcs	r0, r0
    60ea:	1abe      	subs	r6, r7, r2
    60ec:	4240      	negs	r0, r0
    60ee:	1a30      	subs	r0, r6, r0
    60f0:	0206      	lsls	r6, r0, #8
    60f2:	d400      	bmi.n	60f6 <__aeabi_dsub+0x5e6>
    60f4:	e647      	b.n	5d86 <__aeabi_dsub+0x276>
    60f6:	468c      	mov	ip, r1
    60f8:	1b4d      	subs	r5, r1, r5
    60fa:	45ac      	cmp	ip, r5
    60fc:	4189      	sbcs	r1, r1
    60fe:	1bd2      	subs	r2, r2, r7
    6100:	4249      	negs	r1, r1
    6102:	1a57      	subs	r7, r2, r1
    6104:	4698      	mov	r8, r3
    6106:	e535      	b.n	5b74 <__aeabi_dsub+0x64>
    6108:	1c10      	adds	r0, r2, #0
    610a:	9901      	ldr	r1, [sp, #4]
    610c:	4308      	orrs	r0, r1
    610e:	d034      	beq.n	617a <__aeabi_dsub+0x66a>
    6110:	2480      	movs	r4, #128	; 0x80
    6112:	0778      	lsls	r0, r7, #29
    6114:	08ed      	lsrs	r5, r5, #3
    6116:	08ff      	lsrs	r7, r7, #3
    6118:	0324      	lsls	r4, r4, #12
    611a:	4328      	orrs	r0, r5
    611c:	4227      	tst	r7, r4
    611e:	d008      	beq.n	6132 <__aeabi_dsub+0x622>
    6120:	08d6      	lsrs	r6, r2, #3
    6122:	4226      	tst	r6, r4
    6124:	d105      	bne.n	6132 <__aeabi_dsub+0x622>
    6126:	08c9      	lsrs	r1, r1, #3
    6128:	0752      	lsls	r2, r2, #29
    612a:	430a      	orrs	r2, r1
    612c:	1c10      	adds	r0, r2, #0
    612e:	1c37      	adds	r7, r6, #0
    6130:	4698      	mov	r8, r3
    6132:	00ff      	lsls	r7, r7, #3
    6134:	0f42      	lsrs	r2, r0, #29
    6136:	4317      	orrs	r7, r2
    6138:	00c5      	lsls	r5, r0, #3
    613a:	4c24      	ldr	r4, [pc, #144]	; (61cc <__aeabi_dsub+0x6bc>)
    613c:	e51a      	b.n	5b74 <__aeabi_dsub+0x64>
    613e:	4c23      	ldr	r4, [pc, #140]	; (61cc <__aeabi_dsub+0x6bc>)
    6140:	42a0      	cmp	r0, r4
    6142:	d1a2      	bne.n	608a <__aeabi_dsub+0x57a>
    6144:	1c17      	adds	r7, r2, #0
    6146:	9d01      	ldr	r5, [sp, #4]
    6148:	1c04      	adds	r4, r0, #0
    614a:	e513      	b.n	5b74 <__aeabi_dsub+0x64>
    614c:	2b00      	cmp	r3, #0
    614e:	d035      	beq.n	61bc <__aeabi_dsub+0x6ac>
    6150:	1c13      	adds	r3, r2, #0
    6152:	9901      	ldr	r1, [sp, #4]
    6154:	430b      	orrs	r3, r1
    6156:	d010      	beq.n	617a <__aeabi_dsub+0x66a>
    6158:	2480      	movs	r4, #128	; 0x80
    615a:	0778      	lsls	r0, r7, #29
    615c:	08ed      	lsrs	r5, r5, #3
    615e:	08ff      	lsrs	r7, r7, #3
    6160:	0324      	lsls	r4, r4, #12
    6162:	4328      	orrs	r0, r5
    6164:	4227      	tst	r7, r4
    6166:	d0e4      	beq.n	6132 <__aeabi_dsub+0x622>
    6168:	08d3      	lsrs	r3, r2, #3
    616a:	4223      	tst	r3, r4
    616c:	d1e1      	bne.n	6132 <__aeabi_dsub+0x622>
    616e:	08c9      	lsrs	r1, r1, #3
    6170:	0752      	lsls	r2, r2, #29
    6172:	430a      	orrs	r2, r1
    6174:	1c10      	adds	r0, r2, #0
    6176:	1c1f      	adds	r7, r3, #0
    6178:	e7db      	b.n	6132 <__aeabi_dsub+0x622>
    617a:	4c14      	ldr	r4, [pc, #80]	; (61cc <__aeabi_dsub+0x6bc>)
    617c:	e4fa      	b.n	5b74 <__aeabi_dsub+0x64>
    617e:	2200      	movs	r2, #0
    6180:	e73f      	b.n	6002 <__aeabi_dsub+0x4f2>
    6182:	464c      	mov	r4, r9
    6184:	1c3e      	adds	r6, r7, #0
    6186:	3c20      	subs	r4, #32
    6188:	40e6      	lsrs	r6, r4
    618a:	4649      	mov	r1, r9
    618c:	1c34      	adds	r4, r6, #0
    618e:	2920      	cmp	r1, #32
    6190:	d032      	beq.n	61f8 <__aeabi_dsub+0x6e8>
    6192:	2640      	movs	r6, #64	; 0x40
    6194:	1a76      	subs	r6, r6, r1
    6196:	40b7      	lsls	r7, r6
    6198:	433d      	orrs	r5, r7
    619a:	1e6f      	subs	r7, r5, #1
    619c:	41bd      	sbcs	r5, r7
    619e:	2700      	movs	r7, #0
    61a0:	4325      	orrs	r5, r4
    61a2:	e6a8      	b.n	5ef6 <__aeabi_dsub+0x3e6>
    61a4:	2780      	movs	r7, #128	; 0x80
    61a6:	2600      	movs	r6, #0
    61a8:	03ff      	lsls	r7, r7, #15
    61aa:	4c08      	ldr	r4, [pc, #32]	; (61cc <__aeabi_dsub+0x6bc>)
    61ac:	2500      	movs	r5, #0
    61ae:	e57c      	b.n	5caa <__aeabi_dsub+0x19a>
    61b0:	433d      	orrs	r5, r7
    61b2:	1e6f      	subs	r7, r5, #1
    61b4:	41bd      	sbcs	r5, r7
    61b6:	2700      	movs	r7, #0
    61b8:	b2ed      	uxtb	r5, r5
    61ba:	e783      	b.n	60c4 <__aeabi_dsub+0x5b4>
    61bc:	1c17      	adds	r7, r2, #0
    61be:	9d01      	ldr	r5, [sp, #4]
    61c0:	4c02      	ldr	r4, [pc, #8]	; (61cc <__aeabi_dsub+0x6bc>)
    61c2:	e4d7      	b.n	5b74 <__aeabi_dsub+0x64>
    61c4:	1c17      	adds	r7, r2, #0
    61c6:	9d01      	ldr	r5, [sp, #4]
    61c8:	e4d4      	b.n	5b74 <__aeabi_dsub+0x64>
    61ca:	46c0      	nop			; (mov r8, r8)
    61cc:	000007ff 	.word	0x000007ff
    61d0:	ff7fffff 	.word	0xff7fffff
    61d4:	4654      	mov	r4, sl
    61d6:	1c3b      	adds	r3, r7, #0
    61d8:	3c20      	subs	r4, #32
    61da:	40e3      	lsrs	r3, r4
    61dc:	1c1c      	adds	r4, r3, #0
    61de:	4653      	mov	r3, sl
    61e0:	2b20      	cmp	r3, #32
    61e2:	d00d      	beq.n	6200 <__aeabi_dsub+0x6f0>
    61e4:	2340      	movs	r3, #64	; 0x40
    61e6:	4651      	mov	r1, sl
    61e8:	1a5b      	subs	r3, r3, r1
    61ea:	409f      	lsls	r7, r3
    61ec:	433d      	orrs	r5, r7
    61ee:	1e6f      	subs	r7, r5, #1
    61f0:	41bd      	sbcs	r5, r7
    61f2:	2700      	movs	r7, #0
    61f4:	4325      	orrs	r5, r4
    61f6:	e765      	b.n	60c4 <__aeabi_dsub+0x5b4>
    61f8:	2700      	movs	r7, #0
    61fa:	e7cd      	b.n	6198 <__aeabi_dsub+0x688>
    61fc:	1c0d      	adds	r5, r1, #0
    61fe:	e5c8      	b.n	5d92 <__aeabi_dsub+0x282>
    6200:	2700      	movs	r7, #0
    6202:	e7f3      	b.n	61ec <__aeabi_dsub+0x6dc>

00006204 <__aeabi_i2d>:
    6204:	b538      	push	{r3, r4, r5, lr}
    6206:	1e04      	subs	r4, r0, #0
    6208:	d016      	beq.n	6238 <__aeabi_i2d+0x34>
    620a:	0fc5      	lsrs	r5, r0, #31
    620c:	d000      	beq.n	6210 <__aeabi_i2d+0xc>
    620e:	4244      	negs	r4, r0
    6210:	1c20      	adds	r0, r4, #0
    6212:	f000 f917 	bl	6444 <__clzsi2>
    6216:	4b17      	ldr	r3, [pc, #92]	; (6274 <__aeabi_i2d+0x70>)
    6218:	1a1b      	subs	r3, r3, r0
    621a:	280a      	cmp	r0, #10
    621c:	dc21      	bgt.n	6262 <__aeabi_i2d+0x5e>
    621e:	1c02      	adds	r2, r0, #0
    6220:	1c21      	adds	r1, r4, #0
    6222:	3215      	adds	r2, #21
    6224:	4091      	lsls	r1, r2
    6226:	1c0a      	adds	r2, r1, #0
    6228:	210b      	movs	r1, #11
    622a:	1a08      	subs	r0, r1, r0
    622c:	40c4      	lsrs	r4, r0
    622e:	055b      	lsls	r3, r3, #21
    6230:	0324      	lsls	r4, r4, #12
    6232:	0b24      	lsrs	r4, r4, #12
    6234:	0d5b      	lsrs	r3, r3, #21
    6236:	e003      	b.n	6240 <__aeabi_i2d+0x3c>
    6238:	2500      	movs	r5, #0
    623a:	2300      	movs	r3, #0
    623c:	2400      	movs	r4, #0
    623e:	2200      	movs	r2, #0
    6240:	2100      	movs	r1, #0
    6242:	1c10      	adds	r0, r2, #0
    6244:	0324      	lsls	r4, r4, #12
    6246:	0d0a      	lsrs	r2, r1, #20
    6248:	0512      	lsls	r2, r2, #20
    624a:	0b24      	lsrs	r4, r4, #12
    624c:	4314      	orrs	r4, r2
    624e:	4a0a      	ldr	r2, [pc, #40]	; (6278 <__aeabi_i2d+0x74>)
    6250:	051b      	lsls	r3, r3, #20
    6252:	4014      	ands	r4, r2
    6254:	431c      	orrs	r4, r3
    6256:	0064      	lsls	r4, r4, #1
    6258:	07ed      	lsls	r5, r5, #31
    625a:	0864      	lsrs	r4, r4, #1
    625c:	432c      	orrs	r4, r5
    625e:	1c21      	adds	r1, r4, #0
    6260:	bd38      	pop	{r3, r4, r5, pc}
    6262:	380b      	subs	r0, #11
    6264:	4084      	lsls	r4, r0
    6266:	055b      	lsls	r3, r3, #21
    6268:	0324      	lsls	r4, r4, #12
    626a:	0b24      	lsrs	r4, r4, #12
    626c:	0d5b      	lsrs	r3, r3, #21
    626e:	2200      	movs	r2, #0
    6270:	e7e6      	b.n	6240 <__aeabi_i2d+0x3c>
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	0000041e 	.word	0x0000041e
    6278:	800fffff 	.word	0x800fffff

0000627c <__aeabi_f2d>:
    627c:	0042      	lsls	r2, r0, #1
    627e:	0e12      	lsrs	r2, r2, #24
    6280:	1c51      	adds	r1, r2, #1
    6282:	b538      	push	{r3, r4, r5, lr}
    6284:	b2c9      	uxtb	r1, r1
    6286:	0243      	lsls	r3, r0, #9
    6288:	0a5d      	lsrs	r5, r3, #9
    628a:	0fc4      	lsrs	r4, r0, #31
    628c:	2901      	cmp	r1, #1
    628e:	dd15      	ble.n	62bc <__aeabi_f2d+0x40>
    6290:	21e0      	movs	r1, #224	; 0xe0
    6292:	0089      	lsls	r1, r1, #2
    6294:	468c      	mov	ip, r1
    6296:	076d      	lsls	r5, r5, #29
    6298:	0b1b      	lsrs	r3, r3, #12
    629a:	4462      	add	r2, ip
    629c:	2100      	movs	r1, #0
    629e:	1c28      	adds	r0, r5, #0
    62a0:	0d0d      	lsrs	r5, r1, #20
    62a2:	052d      	lsls	r5, r5, #20
    62a4:	432b      	orrs	r3, r5
    62a6:	4d1c      	ldr	r5, [pc, #112]	; (6318 <__aeabi_f2d+0x9c>)
    62a8:	0552      	lsls	r2, r2, #21
    62aa:	402b      	ands	r3, r5
    62ac:	0852      	lsrs	r2, r2, #1
    62ae:	4313      	orrs	r3, r2
    62b0:	005b      	lsls	r3, r3, #1
    62b2:	07e4      	lsls	r4, r4, #31
    62b4:	085b      	lsrs	r3, r3, #1
    62b6:	4323      	orrs	r3, r4
    62b8:	1c19      	adds	r1, r3, #0
    62ba:	bd38      	pop	{r3, r4, r5, pc}
    62bc:	2a00      	cmp	r2, #0
    62be:	d115      	bne.n	62ec <__aeabi_f2d+0x70>
    62c0:	2d00      	cmp	r5, #0
    62c2:	d01f      	beq.n	6304 <__aeabi_f2d+0x88>
    62c4:	1c28      	adds	r0, r5, #0
    62c6:	f000 f8bd 	bl	6444 <__clzsi2>
    62ca:	280a      	cmp	r0, #10
    62cc:	dc1d      	bgt.n	630a <__aeabi_f2d+0x8e>
    62ce:	230b      	movs	r3, #11
    62d0:	1c2a      	adds	r2, r5, #0
    62d2:	1a1b      	subs	r3, r3, r0
    62d4:	40da      	lsrs	r2, r3
    62d6:	1c13      	adds	r3, r2, #0
    62d8:	1c02      	adds	r2, r0, #0
    62da:	3215      	adds	r2, #21
    62dc:	4095      	lsls	r5, r2
    62de:	4a0f      	ldr	r2, [pc, #60]	; (631c <__aeabi_f2d+0xa0>)
    62e0:	031b      	lsls	r3, r3, #12
    62e2:	1a12      	subs	r2, r2, r0
    62e4:	0552      	lsls	r2, r2, #21
    62e6:	0b1b      	lsrs	r3, r3, #12
    62e8:	0d52      	lsrs	r2, r2, #21
    62ea:	e7d7      	b.n	629c <__aeabi_f2d+0x20>
    62ec:	2d00      	cmp	r5, #0
    62ee:	d006      	beq.n	62fe <__aeabi_f2d+0x82>
    62f0:	2280      	movs	r2, #128	; 0x80
    62f2:	0b1b      	lsrs	r3, r3, #12
    62f4:	0312      	lsls	r2, r2, #12
    62f6:	4313      	orrs	r3, r2
    62f8:	076d      	lsls	r5, r5, #29
    62fa:	4a09      	ldr	r2, [pc, #36]	; (6320 <__aeabi_f2d+0xa4>)
    62fc:	e7ce      	b.n	629c <__aeabi_f2d+0x20>
    62fe:	4a08      	ldr	r2, [pc, #32]	; (6320 <__aeabi_f2d+0xa4>)
    6300:	2300      	movs	r3, #0
    6302:	e7cb      	b.n	629c <__aeabi_f2d+0x20>
    6304:	2200      	movs	r2, #0
    6306:	2300      	movs	r3, #0
    6308:	e7c8      	b.n	629c <__aeabi_f2d+0x20>
    630a:	1c03      	adds	r3, r0, #0
    630c:	3b0b      	subs	r3, #11
    630e:	409d      	lsls	r5, r3
    6310:	1c2b      	adds	r3, r5, #0
    6312:	2500      	movs	r5, #0
    6314:	e7e3      	b.n	62de <__aeabi_f2d+0x62>
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	800fffff 	.word	0x800fffff
    631c:	00000389 	.word	0x00000389
    6320:	000007ff 	.word	0x000007ff

00006324 <__aeabi_d2f>:
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	030b      	lsls	r3, r1, #12
    6328:	004d      	lsls	r5, r1, #1
    632a:	0f44      	lsrs	r4, r0, #29
    632c:	0d6d      	lsrs	r5, r5, #21
    632e:	0a5b      	lsrs	r3, r3, #9
    6330:	4323      	orrs	r3, r4
    6332:	1c6c      	adds	r4, r5, #1
    6334:	0564      	lsls	r4, r4, #21
    6336:	0fc9      	lsrs	r1, r1, #31
    6338:	00c2      	lsls	r2, r0, #3
    633a:	0d64      	lsrs	r4, r4, #21
    633c:	2c01      	cmp	r4, #1
    633e:	dd2a      	ble.n	6396 <__aeabi_d2f+0x72>
    6340:	4c3b      	ldr	r4, [pc, #236]	; (6430 <__aeabi_d2f+0x10c>)
    6342:	192c      	adds	r4, r5, r4
    6344:	2cfe      	cmp	r4, #254	; 0xfe
    6346:	dc1a      	bgt.n	637e <__aeabi_d2f+0x5a>
    6348:	2c00      	cmp	r4, #0
    634a:	dd35      	ble.n	63b8 <__aeabi_d2f+0x94>
    634c:	0180      	lsls	r0, r0, #6
    634e:	1e45      	subs	r5, r0, #1
    6350:	41a8      	sbcs	r0, r5
    6352:	00db      	lsls	r3, r3, #3
    6354:	4303      	orrs	r3, r0
    6356:	0f52      	lsrs	r2, r2, #29
    6358:	4313      	orrs	r3, r2
    635a:	075a      	lsls	r2, r3, #29
    635c:	d004      	beq.n	6368 <__aeabi_d2f+0x44>
    635e:	220f      	movs	r2, #15
    6360:	401a      	ands	r2, r3
    6362:	2a04      	cmp	r2, #4
    6364:	d000      	beq.n	6368 <__aeabi_d2f+0x44>
    6366:	3304      	adds	r3, #4
    6368:	2280      	movs	r2, #128	; 0x80
    636a:	04d2      	lsls	r2, r2, #19
    636c:	401a      	ands	r2, r3
    636e:	d027      	beq.n	63c0 <__aeabi_d2f+0x9c>
    6370:	3401      	adds	r4, #1
    6372:	2cff      	cmp	r4, #255	; 0xff
    6374:	d003      	beq.n	637e <__aeabi_d2f+0x5a>
    6376:	019b      	lsls	r3, r3, #6
    6378:	0a5b      	lsrs	r3, r3, #9
    637a:	b2e4      	uxtb	r4, r4
    637c:	e001      	b.n	6382 <__aeabi_d2f+0x5e>
    637e:	24ff      	movs	r4, #255	; 0xff
    6380:	2300      	movs	r3, #0
    6382:	025b      	lsls	r3, r3, #9
    6384:	05e4      	lsls	r4, r4, #23
    6386:	0a5b      	lsrs	r3, r3, #9
    6388:	4323      	orrs	r3, r4
    638a:	005b      	lsls	r3, r3, #1
    638c:	07c9      	lsls	r1, r1, #31
    638e:	085b      	lsrs	r3, r3, #1
    6390:	430b      	orrs	r3, r1
    6392:	1c18      	adds	r0, r3, #0
    6394:	bd70      	pop	{r4, r5, r6, pc}
    6396:	2d00      	cmp	r5, #0
    6398:	d106      	bne.n	63a8 <__aeabi_d2f+0x84>
    639a:	4313      	orrs	r3, r2
    639c:	d10e      	bne.n	63bc <__aeabi_d2f+0x98>
    639e:	2400      	movs	r4, #0
    63a0:	025b      	lsls	r3, r3, #9
    63a2:	0a5b      	lsrs	r3, r3, #9
    63a4:	b2e4      	uxtb	r4, r4
    63a6:	e7ec      	b.n	6382 <__aeabi_d2f+0x5e>
    63a8:	431a      	orrs	r2, r3
    63aa:	d0e8      	beq.n	637e <__aeabi_d2f+0x5a>
    63ac:	2080      	movs	r0, #128	; 0x80
    63ae:	00db      	lsls	r3, r3, #3
    63b0:	0480      	lsls	r0, r0, #18
    63b2:	4303      	orrs	r3, r0
    63b4:	24ff      	movs	r4, #255	; 0xff
    63b6:	e7d0      	b.n	635a <__aeabi_d2f+0x36>
    63b8:	3417      	adds	r4, #23
    63ba:	da0c      	bge.n	63d6 <__aeabi_d2f+0xb2>
    63bc:	2305      	movs	r3, #5
    63be:	2400      	movs	r4, #0
    63c0:	08db      	lsrs	r3, r3, #3
    63c2:	2cff      	cmp	r4, #255	; 0xff
    63c4:	d1ec      	bne.n	63a0 <__aeabi_d2f+0x7c>
    63c6:	2b00      	cmp	r3, #0
    63c8:	d02d      	beq.n	6426 <__aeabi_d2f+0x102>
    63ca:	2280      	movs	r2, #128	; 0x80
    63cc:	03d2      	lsls	r2, r2, #15
    63ce:	4313      	orrs	r3, r2
    63d0:	025b      	lsls	r3, r3, #9
    63d2:	0a5b      	lsrs	r3, r3, #9
    63d4:	e7d5      	b.n	6382 <__aeabi_d2f+0x5e>
    63d6:	2480      	movs	r4, #128	; 0x80
    63d8:	4816      	ldr	r0, [pc, #88]	; (6434 <__aeabi_d2f+0x110>)
    63da:	0424      	lsls	r4, r4, #16
    63dc:	4323      	orrs	r3, r4
    63de:	1b40      	subs	r0, r0, r5
    63e0:	281f      	cmp	r0, #31
    63e2:	dc0d      	bgt.n	6400 <__aeabi_d2f+0xdc>
    63e4:	4c14      	ldr	r4, [pc, #80]	; (6438 <__aeabi_d2f+0x114>)
    63e6:	46a4      	mov	ip, r4
    63e8:	4465      	add	r5, ip
    63ea:	40ab      	lsls	r3, r5
    63ec:	1c1c      	adds	r4, r3, #0
    63ee:	1c13      	adds	r3, r2, #0
    63f0:	40ab      	lsls	r3, r5
    63f2:	1e5d      	subs	r5, r3, #1
    63f4:	41ab      	sbcs	r3, r5
    63f6:	40c2      	lsrs	r2, r0
    63f8:	4323      	orrs	r3, r4
    63fa:	4313      	orrs	r3, r2
    63fc:	2400      	movs	r4, #0
    63fe:	e7ac      	b.n	635a <__aeabi_d2f+0x36>
    6400:	1c1e      	adds	r6, r3, #0
    6402:	4c0e      	ldr	r4, [pc, #56]	; (643c <__aeabi_d2f+0x118>)
    6404:	1b64      	subs	r4, r4, r5
    6406:	40e6      	lsrs	r6, r4
    6408:	1c34      	adds	r4, r6, #0
    640a:	2820      	cmp	r0, #32
    640c:	d00d      	beq.n	642a <__aeabi_d2f+0x106>
    640e:	480c      	ldr	r0, [pc, #48]	; (6440 <__aeabi_d2f+0x11c>)
    6410:	4684      	mov	ip, r0
    6412:	4465      	add	r5, ip
    6414:	40ab      	lsls	r3, r5
    6416:	1c1d      	adds	r5, r3, #0
    6418:	432a      	orrs	r2, r5
    641a:	1e53      	subs	r3, r2, #1
    641c:	419a      	sbcs	r2, r3
    641e:	1c13      	adds	r3, r2, #0
    6420:	4323      	orrs	r3, r4
    6422:	2400      	movs	r4, #0
    6424:	e799      	b.n	635a <__aeabi_d2f+0x36>
    6426:	2300      	movs	r3, #0
    6428:	e7ab      	b.n	6382 <__aeabi_d2f+0x5e>
    642a:	2500      	movs	r5, #0
    642c:	e7f4      	b.n	6418 <__aeabi_d2f+0xf4>
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	fffffc80 	.word	0xfffffc80
    6434:	0000039e 	.word	0x0000039e
    6438:	fffffc82 	.word	0xfffffc82
    643c:	0000037e 	.word	0x0000037e
    6440:	fffffca2 	.word	0xfffffca2

00006444 <__clzsi2>:
    6444:	211c      	movs	r1, #28
    6446:	2301      	movs	r3, #1
    6448:	041b      	lsls	r3, r3, #16
    644a:	4298      	cmp	r0, r3
    644c:	d301      	bcc.n	6452 <__clzsi2+0xe>
    644e:	0c00      	lsrs	r0, r0, #16
    6450:	3910      	subs	r1, #16
    6452:	0a1b      	lsrs	r3, r3, #8
    6454:	4298      	cmp	r0, r3
    6456:	d301      	bcc.n	645c <__clzsi2+0x18>
    6458:	0a00      	lsrs	r0, r0, #8
    645a:	3908      	subs	r1, #8
    645c:	091b      	lsrs	r3, r3, #4
    645e:	4298      	cmp	r0, r3
    6460:	d301      	bcc.n	6466 <__clzsi2+0x22>
    6462:	0900      	lsrs	r0, r0, #4
    6464:	3904      	subs	r1, #4
    6466:	a202      	add	r2, pc, #8	; (adr r2, 6470 <__clzsi2+0x2c>)
    6468:	5c10      	ldrb	r0, [r2, r0]
    646a:	1840      	adds	r0, r0, r1
    646c:	4770      	bx	lr
    646e:	46c0      	nop			; (mov r8, r8)
    6470:	02020304 	.word	0x02020304
    6474:	01010101 	.word	0x01010101
	...

00006480 <__libc_init_array>:
    6480:	4b0e      	ldr	r3, [pc, #56]	; (64bc <__libc_init_array+0x3c>)
    6482:	b570      	push	{r4, r5, r6, lr}
    6484:	2500      	movs	r5, #0
    6486:	1c1e      	adds	r6, r3, #0
    6488:	4c0d      	ldr	r4, [pc, #52]	; (64c0 <__libc_init_array+0x40>)
    648a:	1ae4      	subs	r4, r4, r3
    648c:	10a4      	asrs	r4, r4, #2
    648e:	42a5      	cmp	r5, r4
    6490:	d004      	beq.n	649c <__libc_init_array+0x1c>
    6492:	00ab      	lsls	r3, r5, #2
    6494:	58f3      	ldr	r3, [r6, r3]
    6496:	4798      	blx	r3
    6498:	3501      	adds	r5, #1
    649a:	e7f8      	b.n	648e <__libc_init_array+0xe>
    649c:	f001 f9c6 	bl	782c <_init>
    64a0:	4b08      	ldr	r3, [pc, #32]	; (64c4 <__libc_init_array+0x44>)
    64a2:	2500      	movs	r5, #0
    64a4:	1c1e      	adds	r6, r3, #0
    64a6:	4c08      	ldr	r4, [pc, #32]	; (64c8 <__libc_init_array+0x48>)
    64a8:	1ae4      	subs	r4, r4, r3
    64aa:	10a4      	asrs	r4, r4, #2
    64ac:	42a5      	cmp	r5, r4
    64ae:	d004      	beq.n	64ba <__libc_init_array+0x3a>
    64b0:	00ab      	lsls	r3, r5, #2
    64b2:	58f3      	ldr	r3, [r6, r3]
    64b4:	4798      	blx	r3
    64b6:	3501      	adds	r5, #1
    64b8:	e7f8      	b.n	64ac <__libc_init_array+0x2c>
    64ba:	bd70      	pop	{r4, r5, r6, pc}
    64bc:	00007838 	.word	0x00007838
    64c0:	00007838 	.word	0x00007838
    64c4:	00007838 	.word	0x00007838
    64c8:	0000783c 	.word	0x0000783c

000064cc <memcpy>:
    64cc:	2300      	movs	r3, #0
    64ce:	b510      	push	{r4, lr}
    64d0:	4293      	cmp	r3, r2
    64d2:	d003      	beq.n	64dc <memcpy+0x10>
    64d4:	5ccc      	ldrb	r4, [r1, r3]
    64d6:	54c4      	strb	r4, [r0, r3]
    64d8:	3301      	adds	r3, #1
    64da:	e7f9      	b.n	64d0 <memcpy+0x4>
    64dc:	bd10      	pop	{r4, pc}

000064de <memset>:
    64de:	1c03      	adds	r3, r0, #0
    64e0:	1882      	adds	r2, r0, r2
    64e2:	4293      	cmp	r3, r2
    64e4:	d002      	beq.n	64ec <memset+0xe>
    64e6:	7019      	strb	r1, [r3, #0]
    64e8:	3301      	adds	r3, #1
    64ea:	e7fa      	b.n	64e2 <memset+0x4>
    64ec:	4770      	bx	lr
	...

000064f0 <iprintf>:
    64f0:	b40f      	push	{r0, r1, r2, r3}
    64f2:	4b0b      	ldr	r3, [pc, #44]	; (6520 <iprintf+0x30>)
    64f4:	b513      	push	{r0, r1, r4, lr}
    64f6:	681c      	ldr	r4, [r3, #0]
    64f8:	2c00      	cmp	r4, #0
    64fa:	d005      	beq.n	6508 <iprintf+0x18>
    64fc:	69a3      	ldr	r3, [r4, #24]
    64fe:	2b00      	cmp	r3, #0
    6500:	d102      	bne.n	6508 <iprintf+0x18>
    6502:	1c20      	adds	r0, r4, #0
    6504:	f000 face 	bl	6aa4 <__sinit>
    6508:	ab05      	add	r3, sp, #20
    650a:	1c20      	adds	r0, r4, #0
    650c:	68a1      	ldr	r1, [r4, #8]
    650e:	9a04      	ldr	r2, [sp, #16]
    6510:	9301      	str	r3, [sp, #4]
    6512:	f000 fc81 	bl	6e18 <_vfiprintf_r>
    6516:	bc16      	pop	{r1, r2, r4}
    6518:	bc08      	pop	{r3}
    651a:	b004      	add	sp, #16
    651c:	4718      	bx	r3
    651e:	46c0      	nop			; (mov r8, r8)
    6520:	20000074 	.word	0x20000074

00006524 <_puts_r>:
    6524:	b570      	push	{r4, r5, r6, lr}
    6526:	1c05      	adds	r5, r0, #0
    6528:	1c0e      	adds	r6, r1, #0
    652a:	2800      	cmp	r0, #0
    652c:	d004      	beq.n	6538 <_puts_r+0x14>
    652e:	6983      	ldr	r3, [r0, #24]
    6530:	2b00      	cmp	r3, #0
    6532:	d101      	bne.n	6538 <_puts_r+0x14>
    6534:	f000 fab6 	bl	6aa4 <__sinit>
    6538:	68ac      	ldr	r4, [r5, #8]
    653a:	89a3      	ldrh	r3, [r4, #12]
    653c:	071b      	lsls	r3, r3, #28
    653e:	d502      	bpl.n	6546 <_puts_r+0x22>
    6540:	6923      	ldr	r3, [r4, #16]
    6542:	2b00      	cmp	r3, #0
    6544:	d119      	bne.n	657a <_puts_r+0x56>
    6546:	1c28      	adds	r0, r5, #0
    6548:	1c21      	adds	r1, r4, #0
    654a:	f000 f93f 	bl	67cc <__swsetup_r>
    654e:	2800      	cmp	r0, #0
    6550:	d013      	beq.n	657a <_puts_r+0x56>
    6552:	2001      	movs	r0, #1
    6554:	4240      	negs	r0, r0
    6556:	e045      	b.n	65e4 <_puts_r+0xc0>
    6558:	7831      	ldrb	r1, [r6, #0]
    655a:	2b00      	cmp	r3, #0
    655c:	da1b      	bge.n	6596 <_puts_r+0x72>
    655e:	69a2      	ldr	r2, [r4, #24]
    6560:	4293      	cmp	r3, r2
    6562:	da11      	bge.n	6588 <_puts_r+0x64>
    6564:	1c22      	adds	r2, r4, #0
    6566:	1c28      	adds	r0, r5, #0
    6568:	f000 f8d8 	bl	671c <__swbuf_r>
    656c:	3001      	adds	r0, #1
    656e:	4242      	negs	r2, r0
    6570:	4142      	adcs	r2, r0
    6572:	b2d0      	uxtb	r0, r2
    6574:	2800      	cmp	r0, #0
    6576:	d1ec      	bne.n	6552 <_puts_r+0x2e>
    6578:	3601      	adds	r6, #1
    657a:	68a3      	ldr	r3, [r4, #8]
    657c:	7832      	ldrb	r2, [r6, #0]
    657e:	3b01      	subs	r3, #1
    6580:	60a3      	str	r3, [r4, #8]
    6582:	2a00      	cmp	r2, #0
    6584:	d1e8      	bne.n	6558 <_puts_r+0x34>
    6586:	e00c      	b.n	65a2 <_puts_r+0x7e>
    6588:	6823      	ldr	r3, [r4, #0]
    658a:	7019      	strb	r1, [r3, #0]
    658c:	6823      	ldr	r3, [r4, #0]
    658e:	7819      	ldrb	r1, [r3, #0]
    6590:	290a      	cmp	r1, #10
    6592:	d103      	bne.n	659c <_puts_r+0x78>
    6594:	e7e6      	b.n	6564 <_puts_r+0x40>
    6596:	6823      	ldr	r3, [r4, #0]
    6598:	7019      	strb	r1, [r3, #0]
    659a:	6823      	ldr	r3, [r4, #0]
    659c:	3301      	adds	r3, #1
    659e:	6023      	str	r3, [r4, #0]
    65a0:	e7ea      	b.n	6578 <_puts_r+0x54>
    65a2:	2b00      	cmp	r3, #0
    65a4:	da17      	bge.n	65d6 <_puts_r+0xb2>
    65a6:	69a2      	ldr	r2, [r4, #24]
    65a8:	4293      	cmp	r3, r2
    65aa:	db08      	blt.n	65be <_puts_r+0x9a>
    65ac:	230a      	movs	r3, #10
    65ae:	6822      	ldr	r2, [r4, #0]
    65b0:	7013      	strb	r3, [r2, #0]
    65b2:	6823      	ldr	r3, [r4, #0]
    65b4:	7819      	ldrb	r1, [r3, #0]
    65b6:	290a      	cmp	r1, #10
    65b8:	d111      	bne.n	65de <_puts_r+0xba>
    65ba:	1c28      	adds	r0, r5, #0
    65bc:	e001      	b.n	65c2 <_puts_r+0x9e>
    65be:	1c28      	adds	r0, r5, #0
    65c0:	210a      	movs	r1, #10
    65c2:	1c22      	adds	r2, r4, #0
    65c4:	f000 f8aa 	bl	671c <__swbuf_r>
    65c8:	3001      	adds	r0, #1
    65ca:	4242      	negs	r2, r0
    65cc:	4142      	adcs	r2, r0
    65ce:	b2d0      	uxtb	r0, r2
    65d0:	2800      	cmp	r0, #0
    65d2:	d006      	beq.n	65e2 <_puts_r+0xbe>
    65d4:	e7bd      	b.n	6552 <_puts_r+0x2e>
    65d6:	230a      	movs	r3, #10
    65d8:	6822      	ldr	r2, [r4, #0]
    65da:	7013      	strb	r3, [r2, #0]
    65dc:	6823      	ldr	r3, [r4, #0]
    65de:	3301      	adds	r3, #1
    65e0:	6023      	str	r3, [r4, #0]
    65e2:	200a      	movs	r0, #10
    65e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000065e8 <puts>:
    65e8:	b508      	push	{r3, lr}
    65ea:	4b03      	ldr	r3, [pc, #12]	; (65f8 <puts+0x10>)
    65ec:	1c01      	adds	r1, r0, #0
    65ee:	6818      	ldr	r0, [r3, #0]
    65f0:	f7ff ff98 	bl	6524 <_puts_r>
    65f4:	bd08      	pop	{r3, pc}
    65f6:	46c0      	nop			; (mov r8, r8)
    65f8:	20000074 	.word	0x20000074

000065fc <setbuf>:
    65fc:	b508      	push	{r3, lr}
    65fe:	424a      	negs	r2, r1
    6600:	414a      	adcs	r2, r1
    6602:	2380      	movs	r3, #128	; 0x80
    6604:	0052      	lsls	r2, r2, #1
    6606:	00db      	lsls	r3, r3, #3
    6608:	f000 f802 	bl	6610 <setvbuf>
    660c:	bd08      	pop	{r3, pc}
	...

00006610 <setvbuf>:
    6610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6612:	1c1e      	adds	r6, r3, #0
    6614:	4b3c      	ldr	r3, [pc, #240]	; (6708 <setvbuf+0xf8>)
    6616:	1c04      	adds	r4, r0, #0
    6618:	681d      	ldr	r5, [r3, #0]
    661a:	1c0f      	adds	r7, r1, #0
    661c:	9201      	str	r2, [sp, #4]
    661e:	2d00      	cmp	r5, #0
    6620:	d005      	beq.n	662e <setvbuf+0x1e>
    6622:	69ab      	ldr	r3, [r5, #24]
    6624:	2b00      	cmp	r3, #0
    6626:	d102      	bne.n	662e <setvbuf+0x1e>
    6628:	1c28      	adds	r0, r5, #0
    662a:	f000 fa3b 	bl	6aa4 <__sinit>
    662e:	4b37      	ldr	r3, [pc, #220]	; (670c <setvbuf+0xfc>)
    6630:	429c      	cmp	r4, r3
    6632:	d101      	bne.n	6638 <setvbuf+0x28>
    6634:	686c      	ldr	r4, [r5, #4]
    6636:	e008      	b.n	664a <setvbuf+0x3a>
    6638:	4b35      	ldr	r3, [pc, #212]	; (6710 <setvbuf+0x100>)
    663a:	429c      	cmp	r4, r3
    663c:	d101      	bne.n	6642 <setvbuf+0x32>
    663e:	68ac      	ldr	r4, [r5, #8]
    6640:	e003      	b.n	664a <setvbuf+0x3a>
    6642:	4b34      	ldr	r3, [pc, #208]	; (6714 <setvbuf+0x104>)
    6644:	429c      	cmp	r4, r3
    6646:	d100      	bne.n	664a <setvbuf+0x3a>
    6648:	68ec      	ldr	r4, [r5, #12]
    664a:	9b01      	ldr	r3, [sp, #4]
    664c:	2b02      	cmp	r3, #2
    664e:	d858      	bhi.n	6702 <setvbuf+0xf2>
    6650:	2e00      	cmp	r6, #0
    6652:	db56      	blt.n	6702 <setvbuf+0xf2>
    6654:	1c28      	adds	r0, r5, #0
    6656:	1c21      	adds	r1, r4, #0
    6658:	f000 f9b6 	bl	69c8 <_fflush_r>
    665c:	2300      	movs	r3, #0
    665e:	6063      	str	r3, [r4, #4]
    6660:	61a3      	str	r3, [r4, #24]
    6662:	89a3      	ldrh	r3, [r4, #12]
    6664:	061b      	lsls	r3, r3, #24
    6666:	d503      	bpl.n	6670 <setvbuf+0x60>
    6668:	1c28      	adds	r0, r5, #0
    666a:	6921      	ldr	r1, [r4, #16]
    666c:	f000 fb0e 	bl	6c8c <_free_r>
    6670:	2283      	movs	r2, #131	; 0x83
    6672:	89a3      	ldrh	r3, [r4, #12]
    6674:	4393      	bics	r3, r2
    6676:	81a3      	strh	r3, [r4, #12]
    6678:	9b01      	ldr	r3, [sp, #4]
    667a:	2b02      	cmp	r3, #2
    667c:	d013      	beq.n	66a6 <setvbuf+0x96>
    667e:	2f00      	cmp	r7, #0
    6680:	d125      	bne.n	66ce <setvbuf+0xbe>
    6682:	2e00      	cmp	r6, #0
    6684:	d101      	bne.n	668a <setvbuf+0x7a>
    6686:	2680      	movs	r6, #128	; 0x80
    6688:	00f6      	lsls	r6, r6, #3
    668a:	1c30      	adds	r0, r6, #0
    668c:	f000 faf4 	bl	6c78 <malloc>
    6690:	1e07      	subs	r7, r0, #0
    6692:	d118      	bne.n	66c6 <setvbuf+0xb6>
    6694:	2080      	movs	r0, #128	; 0x80
    6696:	00c0      	lsls	r0, r0, #3
    6698:	f000 faee 	bl	6c78 <malloc>
    669c:	1e07      	subs	r7, r0, #0
    669e:	d110      	bne.n	66c2 <setvbuf+0xb2>
    66a0:	2001      	movs	r0, #1
    66a2:	4240      	negs	r0, r0
    66a4:	e000      	b.n	66a8 <setvbuf+0x98>
    66a6:	2000      	movs	r0, #0
    66a8:	2202      	movs	r2, #2
    66aa:	89a3      	ldrh	r3, [r4, #12]
    66ac:	4313      	orrs	r3, r2
    66ae:	81a3      	strh	r3, [r4, #12]
    66b0:	2300      	movs	r3, #0
    66b2:	60a3      	str	r3, [r4, #8]
    66b4:	1c23      	adds	r3, r4, #0
    66b6:	3347      	adds	r3, #71	; 0x47
    66b8:	6023      	str	r3, [r4, #0]
    66ba:	6123      	str	r3, [r4, #16]
    66bc:	2301      	movs	r3, #1
    66be:	6163      	str	r3, [r4, #20]
    66c0:	e021      	b.n	6706 <setvbuf+0xf6>
    66c2:	2680      	movs	r6, #128	; 0x80
    66c4:	00f6      	lsls	r6, r6, #3
    66c6:	2280      	movs	r2, #128	; 0x80
    66c8:	89a3      	ldrh	r3, [r4, #12]
    66ca:	4313      	orrs	r3, r2
    66cc:	81a3      	strh	r3, [r4, #12]
    66ce:	9b01      	ldr	r3, [sp, #4]
    66d0:	2b01      	cmp	r3, #1
    66d2:	d105      	bne.n	66e0 <setvbuf+0xd0>
    66d4:	89a3      	ldrh	r3, [r4, #12]
    66d6:	9a01      	ldr	r2, [sp, #4]
    66d8:	431a      	orrs	r2, r3
    66da:	4273      	negs	r3, r6
    66dc:	81a2      	strh	r2, [r4, #12]
    66de:	61a3      	str	r3, [r4, #24]
    66e0:	4b0d      	ldr	r3, [pc, #52]	; (6718 <setvbuf+0x108>)
    66e2:	2000      	movs	r0, #0
    66e4:	62ab      	str	r3, [r5, #40]	; 0x28
    66e6:	89a2      	ldrh	r2, [r4, #12]
    66e8:	6027      	str	r7, [r4, #0]
    66ea:	6127      	str	r7, [r4, #16]
    66ec:	6166      	str	r6, [r4, #20]
    66ee:	0713      	lsls	r3, r2, #28
    66f0:	d509      	bpl.n	6706 <setvbuf+0xf6>
    66f2:	2303      	movs	r3, #3
    66f4:	401a      	ands	r2, r3
    66f6:	4253      	negs	r3, r2
    66f8:	4153      	adcs	r3, r2
    66fa:	425b      	negs	r3, r3
    66fc:	401e      	ands	r6, r3
    66fe:	60a6      	str	r6, [r4, #8]
    6700:	e001      	b.n	6706 <setvbuf+0xf6>
    6702:	2001      	movs	r0, #1
    6704:	4240      	negs	r0, r0
    6706:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6708:	20000074 	.word	0x20000074
    670c:	00007798 	.word	0x00007798
    6710:	000077b8 	.word	0x000077b8
    6714:	000077d8 	.word	0x000077d8
    6718:	00006a21 	.word	0x00006a21

0000671c <__swbuf_r>:
    671c:	b570      	push	{r4, r5, r6, lr}
    671e:	1c05      	adds	r5, r0, #0
    6720:	1c0e      	adds	r6, r1, #0
    6722:	1c14      	adds	r4, r2, #0
    6724:	2800      	cmp	r0, #0
    6726:	d004      	beq.n	6732 <__swbuf_r+0x16>
    6728:	6983      	ldr	r3, [r0, #24]
    672a:	2b00      	cmp	r3, #0
    672c:	d101      	bne.n	6732 <__swbuf_r+0x16>
    672e:	f000 f9b9 	bl	6aa4 <__sinit>
    6732:	4b23      	ldr	r3, [pc, #140]	; (67c0 <__swbuf_r+0xa4>)
    6734:	429c      	cmp	r4, r3
    6736:	d101      	bne.n	673c <__swbuf_r+0x20>
    6738:	686c      	ldr	r4, [r5, #4]
    673a:	e008      	b.n	674e <__swbuf_r+0x32>
    673c:	4b21      	ldr	r3, [pc, #132]	; (67c4 <__swbuf_r+0xa8>)
    673e:	429c      	cmp	r4, r3
    6740:	d101      	bne.n	6746 <__swbuf_r+0x2a>
    6742:	68ac      	ldr	r4, [r5, #8]
    6744:	e003      	b.n	674e <__swbuf_r+0x32>
    6746:	4b20      	ldr	r3, [pc, #128]	; (67c8 <__swbuf_r+0xac>)
    6748:	429c      	cmp	r4, r3
    674a:	d100      	bne.n	674e <__swbuf_r+0x32>
    674c:	68ec      	ldr	r4, [r5, #12]
    674e:	69a3      	ldr	r3, [r4, #24]
    6750:	60a3      	str	r3, [r4, #8]
    6752:	89a3      	ldrh	r3, [r4, #12]
    6754:	071b      	lsls	r3, r3, #28
    6756:	d50a      	bpl.n	676e <__swbuf_r+0x52>
    6758:	6923      	ldr	r3, [r4, #16]
    675a:	2b00      	cmp	r3, #0
    675c:	d007      	beq.n	676e <__swbuf_r+0x52>
    675e:	6823      	ldr	r3, [r4, #0]
    6760:	6922      	ldr	r2, [r4, #16]
    6762:	b2f6      	uxtb	r6, r6
    6764:	1a98      	subs	r0, r3, r2
    6766:	6963      	ldr	r3, [r4, #20]
    6768:	4298      	cmp	r0, r3
    676a:	db0f      	blt.n	678c <__swbuf_r+0x70>
    676c:	e008      	b.n	6780 <__swbuf_r+0x64>
    676e:	1c28      	adds	r0, r5, #0
    6770:	1c21      	adds	r1, r4, #0
    6772:	f000 f82b 	bl	67cc <__swsetup_r>
    6776:	2800      	cmp	r0, #0
    6778:	d0f1      	beq.n	675e <__swbuf_r+0x42>
    677a:	2001      	movs	r0, #1
    677c:	4240      	negs	r0, r0
    677e:	e01d      	b.n	67bc <__swbuf_r+0xa0>
    6780:	1c28      	adds	r0, r5, #0
    6782:	1c21      	adds	r1, r4, #0
    6784:	f000 f920 	bl	69c8 <_fflush_r>
    6788:	2800      	cmp	r0, #0
    678a:	d1f6      	bne.n	677a <__swbuf_r+0x5e>
    678c:	68a3      	ldr	r3, [r4, #8]
    678e:	3001      	adds	r0, #1
    6790:	3b01      	subs	r3, #1
    6792:	60a3      	str	r3, [r4, #8]
    6794:	6823      	ldr	r3, [r4, #0]
    6796:	1c5a      	adds	r2, r3, #1
    6798:	6022      	str	r2, [r4, #0]
    679a:	701e      	strb	r6, [r3, #0]
    679c:	6963      	ldr	r3, [r4, #20]
    679e:	4298      	cmp	r0, r3
    67a0:	d005      	beq.n	67ae <__swbuf_r+0x92>
    67a2:	89a3      	ldrh	r3, [r4, #12]
    67a4:	1c30      	adds	r0, r6, #0
    67a6:	07db      	lsls	r3, r3, #31
    67a8:	d508      	bpl.n	67bc <__swbuf_r+0xa0>
    67aa:	2e0a      	cmp	r6, #10
    67ac:	d106      	bne.n	67bc <__swbuf_r+0xa0>
    67ae:	1c28      	adds	r0, r5, #0
    67b0:	1c21      	adds	r1, r4, #0
    67b2:	f000 f909 	bl	69c8 <_fflush_r>
    67b6:	2800      	cmp	r0, #0
    67b8:	d1df      	bne.n	677a <__swbuf_r+0x5e>
    67ba:	1c30      	adds	r0, r6, #0
    67bc:	bd70      	pop	{r4, r5, r6, pc}
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	00007798 	.word	0x00007798
    67c4:	000077b8 	.word	0x000077b8
    67c8:	000077d8 	.word	0x000077d8

000067cc <__swsetup_r>:
    67cc:	4b35      	ldr	r3, [pc, #212]	; (68a4 <__swsetup_r+0xd8>)
    67ce:	b570      	push	{r4, r5, r6, lr}
    67d0:	681d      	ldr	r5, [r3, #0]
    67d2:	1c06      	adds	r6, r0, #0
    67d4:	1c0c      	adds	r4, r1, #0
    67d6:	2d00      	cmp	r5, #0
    67d8:	d005      	beq.n	67e6 <__swsetup_r+0x1a>
    67da:	69ab      	ldr	r3, [r5, #24]
    67dc:	2b00      	cmp	r3, #0
    67de:	d102      	bne.n	67e6 <__swsetup_r+0x1a>
    67e0:	1c28      	adds	r0, r5, #0
    67e2:	f000 f95f 	bl	6aa4 <__sinit>
    67e6:	4b30      	ldr	r3, [pc, #192]	; (68a8 <__swsetup_r+0xdc>)
    67e8:	429c      	cmp	r4, r3
    67ea:	d101      	bne.n	67f0 <__swsetup_r+0x24>
    67ec:	686c      	ldr	r4, [r5, #4]
    67ee:	e008      	b.n	6802 <__swsetup_r+0x36>
    67f0:	4b2e      	ldr	r3, [pc, #184]	; (68ac <__swsetup_r+0xe0>)
    67f2:	429c      	cmp	r4, r3
    67f4:	d101      	bne.n	67fa <__swsetup_r+0x2e>
    67f6:	68ac      	ldr	r4, [r5, #8]
    67f8:	e003      	b.n	6802 <__swsetup_r+0x36>
    67fa:	4b2d      	ldr	r3, [pc, #180]	; (68b0 <__swsetup_r+0xe4>)
    67fc:	429c      	cmp	r4, r3
    67fe:	d100      	bne.n	6802 <__swsetup_r+0x36>
    6800:	68ec      	ldr	r4, [r5, #12]
    6802:	89a3      	ldrh	r3, [r4, #12]
    6804:	b29a      	uxth	r2, r3
    6806:	0711      	lsls	r1, r2, #28
    6808:	d423      	bmi.n	6852 <__swsetup_r+0x86>
    680a:	06d1      	lsls	r1, r2, #27
    680c:	d407      	bmi.n	681e <__swsetup_r+0x52>
    680e:	2209      	movs	r2, #9
    6810:	2001      	movs	r0, #1
    6812:	6032      	str	r2, [r6, #0]
    6814:	3237      	adds	r2, #55	; 0x37
    6816:	4313      	orrs	r3, r2
    6818:	81a3      	strh	r3, [r4, #12]
    681a:	4240      	negs	r0, r0
    681c:	e040      	b.n	68a0 <__swsetup_r+0xd4>
    681e:	0753      	lsls	r3, r2, #29
    6820:	d513      	bpl.n	684a <__swsetup_r+0x7e>
    6822:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6824:	2900      	cmp	r1, #0
    6826:	d008      	beq.n	683a <__swsetup_r+0x6e>
    6828:	1c23      	adds	r3, r4, #0
    682a:	3344      	adds	r3, #68	; 0x44
    682c:	4299      	cmp	r1, r3
    682e:	d002      	beq.n	6836 <__swsetup_r+0x6a>
    6830:	1c30      	adds	r0, r6, #0
    6832:	f000 fa2b 	bl	6c8c <_free_r>
    6836:	2300      	movs	r3, #0
    6838:	6363      	str	r3, [r4, #52]	; 0x34
    683a:	2224      	movs	r2, #36	; 0x24
    683c:	89a3      	ldrh	r3, [r4, #12]
    683e:	4393      	bics	r3, r2
    6840:	81a3      	strh	r3, [r4, #12]
    6842:	2300      	movs	r3, #0
    6844:	6063      	str	r3, [r4, #4]
    6846:	6923      	ldr	r3, [r4, #16]
    6848:	6023      	str	r3, [r4, #0]
    684a:	2208      	movs	r2, #8
    684c:	89a3      	ldrh	r3, [r4, #12]
    684e:	4313      	orrs	r3, r2
    6850:	81a3      	strh	r3, [r4, #12]
    6852:	6923      	ldr	r3, [r4, #16]
    6854:	2b00      	cmp	r3, #0
    6856:	d10b      	bne.n	6870 <__swsetup_r+0xa4>
    6858:	23a0      	movs	r3, #160	; 0xa0
    685a:	89a2      	ldrh	r2, [r4, #12]
    685c:	009b      	lsls	r3, r3, #2
    685e:	4013      	ands	r3, r2
    6860:	2280      	movs	r2, #128	; 0x80
    6862:	0092      	lsls	r2, r2, #2
    6864:	4293      	cmp	r3, r2
    6866:	d003      	beq.n	6870 <__swsetup_r+0xa4>
    6868:	1c30      	adds	r0, r6, #0
    686a:	1c21      	adds	r1, r4, #0
    686c:	f000 f9ac 	bl	6bc8 <__smakebuf_r>
    6870:	2301      	movs	r3, #1
    6872:	89a2      	ldrh	r2, [r4, #12]
    6874:	4013      	ands	r3, r2
    6876:	d005      	beq.n	6884 <__swsetup_r+0xb8>
    6878:	2300      	movs	r3, #0
    687a:	60a3      	str	r3, [r4, #8]
    687c:	6963      	ldr	r3, [r4, #20]
    687e:	425b      	negs	r3, r3
    6880:	61a3      	str	r3, [r4, #24]
    6882:	e003      	b.n	688c <__swsetup_r+0xc0>
    6884:	0791      	lsls	r1, r2, #30
    6886:	d400      	bmi.n	688a <__swsetup_r+0xbe>
    6888:	6963      	ldr	r3, [r4, #20]
    688a:	60a3      	str	r3, [r4, #8]
    688c:	2000      	movs	r0, #0
    688e:	6923      	ldr	r3, [r4, #16]
    6890:	4283      	cmp	r3, r0
    6892:	d105      	bne.n	68a0 <__swsetup_r+0xd4>
    6894:	0613      	lsls	r3, r2, #24
    6896:	d503      	bpl.n	68a0 <__swsetup_r+0xd4>
    6898:	2340      	movs	r3, #64	; 0x40
    689a:	431a      	orrs	r2, r3
    689c:	81a2      	strh	r2, [r4, #12]
    689e:	3801      	subs	r0, #1
    68a0:	bd70      	pop	{r4, r5, r6, pc}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	20000074 	.word	0x20000074
    68a8:	00007798 	.word	0x00007798
    68ac:	000077b8 	.word	0x000077b8
    68b0:	000077d8 	.word	0x000077d8

000068b4 <__sflush_r>:
    68b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68b6:	898a      	ldrh	r2, [r1, #12]
    68b8:	1c05      	adds	r5, r0, #0
    68ba:	1c0c      	adds	r4, r1, #0
    68bc:	0713      	lsls	r3, r2, #28
    68be:	d45e      	bmi.n	697e <__sflush_r+0xca>
    68c0:	684b      	ldr	r3, [r1, #4]
    68c2:	2b00      	cmp	r3, #0
    68c4:	dc02      	bgt.n	68cc <__sflush_r+0x18>
    68c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    68c8:	2b00      	cmp	r3, #0
    68ca:	dd1a      	ble.n	6902 <__sflush_r+0x4e>
    68cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    68ce:	2f00      	cmp	r7, #0
    68d0:	d017      	beq.n	6902 <__sflush_r+0x4e>
    68d2:	2300      	movs	r3, #0
    68d4:	682e      	ldr	r6, [r5, #0]
    68d6:	602b      	str	r3, [r5, #0]
    68d8:	2380      	movs	r3, #128	; 0x80
    68da:	015b      	lsls	r3, r3, #5
    68dc:	401a      	ands	r2, r3
    68de:	d001      	beq.n	68e4 <__sflush_r+0x30>
    68e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    68e2:	e015      	b.n	6910 <__sflush_r+0x5c>
    68e4:	1c28      	adds	r0, r5, #0
    68e6:	6a21      	ldr	r1, [r4, #32]
    68e8:	2301      	movs	r3, #1
    68ea:	47b8      	blx	r7
    68ec:	1c02      	adds	r2, r0, #0
    68ee:	1c43      	adds	r3, r0, #1
    68f0:	d10e      	bne.n	6910 <__sflush_r+0x5c>
    68f2:	682b      	ldr	r3, [r5, #0]
    68f4:	2b00      	cmp	r3, #0
    68f6:	d00b      	beq.n	6910 <__sflush_r+0x5c>
    68f8:	2b1d      	cmp	r3, #29
    68fa:	d001      	beq.n	6900 <__sflush_r+0x4c>
    68fc:	2b16      	cmp	r3, #22
    68fe:	d102      	bne.n	6906 <__sflush_r+0x52>
    6900:	602e      	str	r6, [r5, #0]
    6902:	2000      	movs	r0, #0
    6904:	e05e      	b.n	69c4 <__sflush_r+0x110>
    6906:	2140      	movs	r1, #64	; 0x40
    6908:	89a3      	ldrh	r3, [r4, #12]
    690a:	430b      	orrs	r3, r1
    690c:	81a3      	strh	r3, [r4, #12]
    690e:	e059      	b.n	69c4 <__sflush_r+0x110>
    6910:	89a3      	ldrh	r3, [r4, #12]
    6912:	075b      	lsls	r3, r3, #29
    6914:	d506      	bpl.n	6924 <__sflush_r+0x70>
    6916:	6863      	ldr	r3, [r4, #4]
    6918:	1ad2      	subs	r2, r2, r3
    691a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    691c:	2b00      	cmp	r3, #0
    691e:	d001      	beq.n	6924 <__sflush_r+0x70>
    6920:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6922:	1ad2      	subs	r2, r2, r3
    6924:	2300      	movs	r3, #0
    6926:	1c28      	adds	r0, r5, #0
    6928:	6a21      	ldr	r1, [r4, #32]
    692a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    692c:	47b8      	blx	r7
    692e:	89a3      	ldrh	r3, [r4, #12]
    6930:	1c42      	adds	r2, r0, #1
    6932:	d106      	bne.n	6942 <__sflush_r+0x8e>
    6934:	682a      	ldr	r2, [r5, #0]
    6936:	2a00      	cmp	r2, #0
    6938:	d003      	beq.n	6942 <__sflush_r+0x8e>
    693a:	2a1d      	cmp	r2, #29
    693c:	d001      	beq.n	6942 <__sflush_r+0x8e>
    693e:	2a16      	cmp	r2, #22
    6940:	d119      	bne.n	6976 <__sflush_r+0xc2>
    6942:	2200      	movs	r2, #0
    6944:	6062      	str	r2, [r4, #4]
    6946:	6922      	ldr	r2, [r4, #16]
    6948:	6022      	str	r2, [r4, #0]
    694a:	04db      	lsls	r3, r3, #19
    694c:	d505      	bpl.n	695a <__sflush_r+0xa6>
    694e:	1c43      	adds	r3, r0, #1
    6950:	d102      	bne.n	6958 <__sflush_r+0xa4>
    6952:	682b      	ldr	r3, [r5, #0]
    6954:	2b00      	cmp	r3, #0
    6956:	d100      	bne.n	695a <__sflush_r+0xa6>
    6958:	6560      	str	r0, [r4, #84]	; 0x54
    695a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    695c:	602e      	str	r6, [r5, #0]
    695e:	2900      	cmp	r1, #0
    6960:	d0cf      	beq.n	6902 <__sflush_r+0x4e>
    6962:	1c23      	adds	r3, r4, #0
    6964:	3344      	adds	r3, #68	; 0x44
    6966:	4299      	cmp	r1, r3
    6968:	d002      	beq.n	6970 <__sflush_r+0xbc>
    696a:	1c28      	adds	r0, r5, #0
    696c:	f000 f98e 	bl	6c8c <_free_r>
    6970:	2000      	movs	r0, #0
    6972:	6360      	str	r0, [r4, #52]	; 0x34
    6974:	e026      	b.n	69c4 <__sflush_r+0x110>
    6976:	2240      	movs	r2, #64	; 0x40
    6978:	4313      	orrs	r3, r2
    697a:	81a3      	strh	r3, [r4, #12]
    697c:	e022      	b.n	69c4 <__sflush_r+0x110>
    697e:	690f      	ldr	r7, [r1, #16]
    6980:	2f00      	cmp	r7, #0
    6982:	d0be      	beq.n	6902 <__sflush_r+0x4e>
    6984:	680b      	ldr	r3, [r1, #0]
    6986:	600f      	str	r7, [r1, #0]
    6988:	1bdb      	subs	r3, r3, r7
    698a:	9301      	str	r3, [sp, #4]
    698c:	2300      	movs	r3, #0
    698e:	0792      	lsls	r2, r2, #30
    6990:	d100      	bne.n	6994 <__sflush_r+0xe0>
    6992:	694b      	ldr	r3, [r1, #20]
    6994:	60a3      	str	r3, [r4, #8]
    6996:	9b01      	ldr	r3, [sp, #4]
    6998:	2b00      	cmp	r3, #0
    699a:	ddb2      	ble.n	6902 <__sflush_r+0x4e>
    699c:	1c28      	adds	r0, r5, #0
    699e:	6a21      	ldr	r1, [r4, #32]
    69a0:	1c3a      	adds	r2, r7, #0
    69a2:	9b01      	ldr	r3, [sp, #4]
    69a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    69a6:	47b0      	blx	r6
    69a8:	2800      	cmp	r0, #0
    69aa:	dc06      	bgt.n	69ba <__sflush_r+0x106>
    69ac:	2240      	movs	r2, #64	; 0x40
    69ae:	2001      	movs	r0, #1
    69b0:	89a3      	ldrh	r3, [r4, #12]
    69b2:	4240      	negs	r0, r0
    69b4:	4313      	orrs	r3, r2
    69b6:	81a3      	strh	r3, [r4, #12]
    69b8:	e004      	b.n	69c4 <__sflush_r+0x110>
    69ba:	9b01      	ldr	r3, [sp, #4]
    69bc:	183f      	adds	r7, r7, r0
    69be:	1a1b      	subs	r3, r3, r0
    69c0:	9301      	str	r3, [sp, #4]
    69c2:	e7e8      	b.n	6996 <__sflush_r+0xe2>
    69c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000069c8 <_fflush_r>:
    69c8:	b538      	push	{r3, r4, r5, lr}
    69ca:	690b      	ldr	r3, [r1, #16]
    69cc:	1c05      	adds	r5, r0, #0
    69ce:	1c0c      	adds	r4, r1, #0
    69d0:	2b00      	cmp	r3, #0
    69d2:	d101      	bne.n	69d8 <_fflush_r+0x10>
    69d4:	2000      	movs	r0, #0
    69d6:	e01c      	b.n	6a12 <_fflush_r+0x4a>
    69d8:	2800      	cmp	r0, #0
    69da:	d004      	beq.n	69e6 <_fflush_r+0x1e>
    69dc:	6983      	ldr	r3, [r0, #24]
    69de:	2b00      	cmp	r3, #0
    69e0:	d101      	bne.n	69e6 <_fflush_r+0x1e>
    69e2:	f000 f85f 	bl	6aa4 <__sinit>
    69e6:	4b0b      	ldr	r3, [pc, #44]	; (6a14 <_fflush_r+0x4c>)
    69e8:	429c      	cmp	r4, r3
    69ea:	d101      	bne.n	69f0 <_fflush_r+0x28>
    69ec:	686c      	ldr	r4, [r5, #4]
    69ee:	e008      	b.n	6a02 <_fflush_r+0x3a>
    69f0:	4b09      	ldr	r3, [pc, #36]	; (6a18 <_fflush_r+0x50>)
    69f2:	429c      	cmp	r4, r3
    69f4:	d101      	bne.n	69fa <_fflush_r+0x32>
    69f6:	68ac      	ldr	r4, [r5, #8]
    69f8:	e003      	b.n	6a02 <_fflush_r+0x3a>
    69fa:	4b08      	ldr	r3, [pc, #32]	; (6a1c <_fflush_r+0x54>)
    69fc:	429c      	cmp	r4, r3
    69fe:	d100      	bne.n	6a02 <_fflush_r+0x3a>
    6a00:	68ec      	ldr	r4, [r5, #12]
    6a02:	220c      	movs	r2, #12
    6a04:	5ea3      	ldrsh	r3, [r4, r2]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d0e4      	beq.n	69d4 <_fflush_r+0xc>
    6a0a:	1c28      	adds	r0, r5, #0
    6a0c:	1c21      	adds	r1, r4, #0
    6a0e:	f7ff ff51 	bl	68b4 <__sflush_r>
    6a12:	bd38      	pop	{r3, r4, r5, pc}
    6a14:	00007798 	.word	0x00007798
    6a18:	000077b8 	.word	0x000077b8
    6a1c:	000077d8 	.word	0x000077d8

00006a20 <_cleanup_r>:
    6a20:	b508      	push	{r3, lr}
    6a22:	4902      	ldr	r1, [pc, #8]	; (6a2c <_cleanup_r+0xc>)
    6a24:	f000 f8ae 	bl	6b84 <_fwalk_reent>
    6a28:	bd08      	pop	{r3, pc}
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	000069c9 	.word	0x000069c9

00006a30 <std.isra.0>:
    6a30:	2300      	movs	r3, #0
    6a32:	b510      	push	{r4, lr}
    6a34:	1c04      	adds	r4, r0, #0
    6a36:	6003      	str	r3, [r0, #0]
    6a38:	6043      	str	r3, [r0, #4]
    6a3a:	6083      	str	r3, [r0, #8]
    6a3c:	8181      	strh	r1, [r0, #12]
    6a3e:	6643      	str	r3, [r0, #100]	; 0x64
    6a40:	81c2      	strh	r2, [r0, #14]
    6a42:	6103      	str	r3, [r0, #16]
    6a44:	6143      	str	r3, [r0, #20]
    6a46:	6183      	str	r3, [r0, #24]
    6a48:	1c19      	adds	r1, r3, #0
    6a4a:	2208      	movs	r2, #8
    6a4c:	305c      	adds	r0, #92	; 0x5c
    6a4e:	f7ff fd46 	bl	64de <memset>
    6a52:	4b05      	ldr	r3, [pc, #20]	; (6a68 <std.isra.0+0x38>)
    6a54:	6224      	str	r4, [r4, #32]
    6a56:	6263      	str	r3, [r4, #36]	; 0x24
    6a58:	4b04      	ldr	r3, [pc, #16]	; (6a6c <std.isra.0+0x3c>)
    6a5a:	62a3      	str	r3, [r4, #40]	; 0x28
    6a5c:	4b04      	ldr	r3, [pc, #16]	; (6a70 <std.isra.0+0x40>)
    6a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6a60:	4b04      	ldr	r3, [pc, #16]	; (6a74 <std.isra.0+0x44>)
    6a62:	6323      	str	r3, [r4, #48]	; 0x30
    6a64:	bd10      	pop	{r4, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	00007369 	.word	0x00007369
    6a6c:	00007391 	.word	0x00007391
    6a70:	000073c9 	.word	0x000073c9
    6a74:	000073f5 	.word	0x000073f5

00006a78 <__sfmoreglue>:
    6a78:	b570      	push	{r4, r5, r6, lr}
    6a7a:	2568      	movs	r5, #104	; 0x68
    6a7c:	1e4b      	subs	r3, r1, #1
    6a7e:	435d      	muls	r5, r3
    6a80:	1c0e      	adds	r6, r1, #0
    6a82:	1c29      	adds	r1, r5, #0
    6a84:	3174      	adds	r1, #116	; 0x74
    6a86:	f000 f947 	bl	6d18 <_malloc_r>
    6a8a:	1e04      	subs	r4, r0, #0
    6a8c:	d008      	beq.n	6aa0 <__sfmoreglue+0x28>
    6a8e:	2100      	movs	r1, #0
    6a90:	1c2a      	adds	r2, r5, #0
    6a92:	6001      	str	r1, [r0, #0]
    6a94:	6046      	str	r6, [r0, #4]
    6a96:	300c      	adds	r0, #12
    6a98:	60a0      	str	r0, [r4, #8]
    6a9a:	3268      	adds	r2, #104	; 0x68
    6a9c:	f7ff fd1f 	bl	64de <memset>
    6aa0:	1c20      	adds	r0, r4, #0
    6aa2:	bd70      	pop	{r4, r5, r6, pc}

00006aa4 <__sinit>:
    6aa4:	6983      	ldr	r3, [r0, #24]
    6aa6:	b513      	push	{r0, r1, r4, lr}
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	d128      	bne.n	6afe <__sinit+0x5a>
    6aac:	6483      	str	r3, [r0, #72]	; 0x48
    6aae:	64c3      	str	r3, [r0, #76]	; 0x4c
    6ab0:	6503      	str	r3, [r0, #80]	; 0x50
    6ab2:	4b13      	ldr	r3, [pc, #76]	; (6b00 <__sinit+0x5c>)
    6ab4:	4a13      	ldr	r2, [pc, #76]	; (6b04 <__sinit+0x60>)
    6ab6:	681b      	ldr	r3, [r3, #0]
    6ab8:	6282      	str	r2, [r0, #40]	; 0x28
    6aba:	9301      	str	r3, [sp, #4]
    6abc:	4298      	cmp	r0, r3
    6abe:	d101      	bne.n	6ac4 <__sinit+0x20>
    6ac0:	2301      	movs	r3, #1
    6ac2:	6183      	str	r3, [r0, #24]
    6ac4:	1c04      	adds	r4, r0, #0
    6ac6:	f000 f81f 	bl	6b08 <__sfp>
    6aca:	6060      	str	r0, [r4, #4]
    6acc:	1c20      	adds	r0, r4, #0
    6ace:	f000 f81b 	bl	6b08 <__sfp>
    6ad2:	60a0      	str	r0, [r4, #8]
    6ad4:	1c20      	adds	r0, r4, #0
    6ad6:	f000 f817 	bl	6b08 <__sfp>
    6ada:	2104      	movs	r1, #4
    6adc:	60e0      	str	r0, [r4, #12]
    6ade:	2200      	movs	r2, #0
    6ae0:	6860      	ldr	r0, [r4, #4]
    6ae2:	f7ff ffa5 	bl	6a30 <std.isra.0>
    6ae6:	68a0      	ldr	r0, [r4, #8]
    6ae8:	2109      	movs	r1, #9
    6aea:	2201      	movs	r2, #1
    6aec:	f7ff ffa0 	bl	6a30 <std.isra.0>
    6af0:	68e0      	ldr	r0, [r4, #12]
    6af2:	2112      	movs	r1, #18
    6af4:	2202      	movs	r2, #2
    6af6:	f7ff ff9b 	bl	6a30 <std.isra.0>
    6afa:	2301      	movs	r3, #1
    6afc:	61a3      	str	r3, [r4, #24]
    6afe:	bd13      	pop	{r0, r1, r4, pc}
    6b00:	00007794 	.word	0x00007794
    6b04:	00006a21 	.word	0x00006a21

00006b08 <__sfp>:
    6b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b0a:	4b1d      	ldr	r3, [pc, #116]	; (6b80 <__sfp+0x78>)
    6b0c:	1c06      	adds	r6, r0, #0
    6b0e:	681d      	ldr	r5, [r3, #0]
    6b10:	69ab      	ldr	r3, [r5, #24]
    6b12:	2b00      	cmp	r3, #0
    6b14:	d102      	bne.n	6b1c <__sfp+0x14>
    6b16:	1c28      	adds	r0, r5, #0
    6b18:	f7ff ffc4 	bl	6aa4 <__sinit>
    6b1c:	3548      	adds	r5, #72	; 0x48
    6b1e:	68ac      	ldr	r4, [r5, #8]
    6b20:	686b      	ldr	r3, [r5, #4]
    6b22:	3b01      	subs	r3, #1
    6b24:	d405      	bmi.n	6b32 <__sfp+0x2a>
    6b26:	220c      	movs	r2, #12
    6b28:	5ea7      	ldrsh	r7, [r4, r2]
    6b2a:	2f00      	cmp	r7, #0
    6b2c:	d010      	beq.n	6b50 <__sfp+0x48>
    6b2e:	3468      	adds	r4, #104	; 0x68
    6b30:	e7f7      	b.n	6b22 <__sfp+0x1a>
    6b32:	682b      	ldr	r3, [r5, #0]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d106      	bne.n	6b46 <__sfp+0x3e>
    6b38:	1c30      	adds	r0, r6, #0
    6b3a:	2104      	movs	r1, #4
    6b3c:	f7ff ff9c 	bl	6a78 <__sfmoreglue>
    6b40:	6028      	str	r0, [r5, #0]
    6b42:	2800      	cmp	r0, #0
    6b44:	d001      	beq.n	6b4a <__sfp+0x42>
    6b46:	682d      	ldr	r5, [r5, #0]
    6b48:	e7e9      	b.n	6b1e <__sfp+0x16>
    6b4a:	230c      	movs	r3, #12
    6b4c:	6033      	str	r3, [r6, #0]
    6b4e:	e016      	b.n	6b7e <__sfp+0x76>
    6b50:	2301      	movs	r3, #1
    6b52:	1c20      	adds	r0, r4, #0
    6b54:	425b      	negs	r3, r3
    6b56:	81e3      	strh	r3, [r4, #14]
    6b58:	3302      	adds	r3, #2
    6b5a:	81a3      	strh	r3, [r4, #12]
    6b5c:	6667      	str	r7, [r4, #100]	; 0x64
    6b5e:	6027      	str	r7, [r4, #0]
    6b60:	60a7      	str	r7, [r4, #8]
    6b62:	6067      	str	r7, [r4, #4]
    6b64:	6127      	str	r7, [r4, #16]
    6b66:	6167      	str	r7, [r4, #20]
    6b68:	61a7      	str	r7, [r4, #24]
    6b6a:	305c      	adds	r0, #92	; 0x5c
    6b6c:	1c39      	adds	r1, r7, #0
    6b6e:	2208      	movs	r2, #8
    6b70:	f7ff fcb5 	bl	64de <memset>
    6b74:	1c20      	adds	r0, r4, #0
    6b76:	6367      	str	r7, [r4, #52]	; 0x34
    6b78:	63a7      	str	r7, [r4, #56]	; 0x38
    6b7a:	64a7      	str	r7, [r4, #72]	; 0x48
    6b7c:	64e7      	str	r7, [r4, #76]	; 0x4c
    6b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b80:	00007794 	.word	0x00007794

00006b84 <_fwalk_reent>:
    6b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b86:	1c04      	adds	r4, r0, #0
    6b88:	1c07      	adds	r7, r0, #0
    6b8a:	2600      	movs	r6, #0
    6b8c:	9101      	str	r1, [sp, #4]
    6b8e:	3448      	adds	r4, #72	; 0x48
    6b90:	2c00      	cmp	r4, #0
    6b92:	d016      	beq.n	6bc2 <_fwalk_reent+0x3e>
    6b94:	6863      	ldr	r3, [r4, #4]
    6b96:	68a5      	ldr	r5, [r4, #8]
    6b98:	9300      	str	r3, [sp, #0]
    6b9a:	9b00      	ldr	r3, [sp, #0]
    6b9c:	3b01      	subs	r3, #1
    6b9e:	9300      	str	r3, [sp, #0]
    6ba0:	d40d      	bmi.n	6bbe <_fwalk_reent+0x3a>
    6ba2:	89ab      	ldrh	r3, [r5, #12]
    6ba4:	2b01      	cmp	r3, #1
    6ba6:	d908      	bls.n	6bba <_fwalk_reent+0x36>
    6ba8:	220e      	movs	r2, #14
    6baa:	5eab      	ldrsh	r3, [r5, r2]
    6bac:	3301      	adds	r3, #1
    6bae:	d004      	beq.n	6bba <_fwalk_reent+0x36>
    6bb0:	1c38      	adds	r0, r7, #0
    6bb2:	1c29      	adds	r1, r5, #0
    6bb4:	9b01      	ldr	r3, [sp, #4]
    6bb6:	4798      	blx	r3
    6bb8:	4306      	orrs	r6, r0
    6bba:	3568      	adds	r5, #104	; 0x68
    6bbc:	e7ed      	b.n	6b9a <_fwalk_reent+0x16>
    6bbe:	6824      	ldr	r4, [r4, #0]
    6bc0:	e7e6      	b.n	6b90 <_fwalk_reent+0xc>
    6bc2:	1c30      	adds	r0, r6, #0
    6bc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006bc8 <__smakebuf_r>:
    6bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bca:	898b      	ldrh	r3, [r1, #12]
    6bcc:	b091      	sub	sp, #68	; 0x44
    6bce:	079b      	lsls	r3, r3, #30
    6bd0:	d506      	bpl.n	6be0 <__smakebuf_r+0x18>
    6bd2:	1c0b      	adds	r3, r1, #0
    6bd4:	3347      	adds	r3, #71	; 0x47
    6bd6:	600b      	str	r3, [r1, #0]
    6bd8:	610b      	str	r3, [r1, #16]
    6bda:	2301      	movs	r3, #1
    6bdc:	614b      	str	r3, [r1, #20]
    6bde:	e045      	b.n	6c6c <__smakebuf_r+0xa4>
    6be0:	1c0c      	adds	r4, r1, #0
    6be2:	230e      	movs	r3, #14
    6be4:	5ec9      	ldrsh	r1, [r1, r3]
    6be6:	1c06      	adds	r6, r0, #0
    6be8:	2900      	cmp	r1, #0
    6bea:	da04      	bge.n	6bf6 <__smakebuf_r+0x2e>
    6bec:	2380      	movs	r3, #128	; 0x80
    6bee:	89a5      	ldrh	r5, [r4, #12]
    6bf0:	401d      	ands	r5, r3
    6bf2:	d110      	bne.n	6c16 <__smakebuf_r+0x4e>
    6bf4:	e00c      	b.n	6c10 <__smakebuf_r+0x48>
    6bf6:	aa01      	add	r2, sp, #4
    6bf8:	f000 fc28 	bl	744c <_fstat_r>
    6bfc:	2800      	cmp	r0, #0
    6bfe:	dbf5      	blt.n	6bec <__smakebuf_r+0x24>
    6c00:	23f0      	movs	r3, #240	; 0xf0
    6c02:	9d02      	ldr	r5, [sp, #8]
    6c04:	021b      	lsls	r3, r3, #8
    6c06:	401d      	ands	r5, r3
    6c08:	4b19      	ldr	r3, [pc, #100]	; (6c70 <__smakebuf_r+0xa8>)
    6c0a:	18ed      	adds	r5, r5, r3
    6c0c:	426b      	negs	r3, r5
    6c0e:	415d      	adcs	r5, r3
    6c10:	2780      	movs	r7, #128	; 0x80
    6c12:	00ff      	lsls	r7, r7, #3
    6c14:	e001      	b.n	6c1a <__smakebuf_r+0x52>
    6c16:	2500      	movs	r5, #0
    6c18:	2740      	movs	r7, #64	; 0x40
    6c1a:	1c30      	adds	r0, r6, #0
    6c1c:	1c39      	adds	r1, r7, #0
    6c1e:	f000 f87b 	bl	6d18 <_malloc_r>
    6c22:	2800      	cmp	r0, #0
    6c24:	d10c      	bne.n	6c40 <__smakebuf_r+0x78>
    6c26:	89a3      	ldrh	r3, [r4, #12]
    6c28:	059a      	lsls	r2, r3, #22
    6c2a:	d41f      	bmi.n	6c6c <__smakebuf_r+0xa4>
    6c2c:	2202      	movs	r2, #2
    6c2e:	4313      	orrs	r3, r2
    6c30:	81a3      	strh	r3, [r4, #12]
    6c32:	1c23      	adds	r3, r4, #0
    6c34:	3347      	adds	r3, #71	; 0x47
    6c36:	6023      	str	r3, [r4, #0]
    6c38:	6123      	str	r3, [r4, #16]
    6c3a:	2301      	movs	r3, #1
    6c3c:	6163      	str	r3, [r4, #20]
    6c3e:	e015      	b.n	6c6c <__smakebuf_r+0xa4>
    6c40:	2280      	movs	r2, #128	; 0x80
    6c42:	4b0c      	ldr	r3, [pc, #48]	; (6c74 <__smakebuf_r+0xac>)
    6c44:	62b3      	str	r3, [r6, #40]	; 0x28
    6c46:	89a3      	ldrh	r3, [r4, #12]
    6c48:	6020      	str	r0, [r4, #0]
    6c4a:	4313      	orrs	r3, r2
    6c4c:	81a3      	strh	r3, [r4, #12]
    6c4e:	6120      	str	r0, [r4, #16]
    6c50:	6167      	str	r7, [r4, #20]
    6c52:	2d00      	cmp	r5, #0
    6c54:	d00a      	beq.n	6c6c <__smakebuf_r+0xa4>
    6c56:	230e      	movs	r3, #14
    6c58:	5ee1      	ldrsh	r1, [r4, r3]
    6c5a:	1c30      	adds	r0, r6, #0
    6c5c:	f000 fc08 	bl	7470 <_isatty_r>
    6c60:	2800      	cmp	r0, #0
    6c62:	d003      	beq.n	6c6c <__smakebuf_r+0xa4>
    6c64:	2201      	movs	r2, #1
    6c66:	89a3      	ldrh	r3, [r4, #12]
    6c68:	4313      	orrs	r3, r2
    6c6a:	81a3      	strh	r3, [r4, #12]
    6c6c:	b011      	add	sp, #68	; 0x44
    6c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c70:	ffffe000 	.word	0xffffe000
    6c74:	00006a21 	.word	0x00006a21

00006c78 <malloc>:
    6c78:	b508      	push	{r3, lr}
    6c7a:	4b03      	ldr	r3, [pc, #12]	; (6c88 <malloc+0x10>)
    6c7c:	1c01      	adds	r1, r0, #0
    6c7e:	6818      	ldr	r0, [r3, #0]
    6c80:	f000 f84a 	bl	6d18 <_malloc_r>
    6c84:	bd08      	pop	{r3, pc}
    6c86:	46c0      	nop			; (mov r8, r8)
    6c88:	20000074 	.word	0x20000074

00006c8c <_free_r>:
    6c8c:	b530      	push	{r4, r5, lr}
    6c8e:	2900      	cmp	r1, #0
    6c90:	d03e      	beq.n	6d10 <_free_r+0x84>
    6c92:	3904      	subs	r1, #4
    6c94:	680b      	ldr	r3, [r1, #0]
    6c96:	2b00      	cmp	r3, #0
    6c98:	da00      	bge.n	6c9c <_free_r+0x10>
    6c9a:	18c9      	adds	r1, r1, r3
    6c9c:	4a1d      	ldr	r2, [pc, #116]	; (6d14 <_free_r+0x88>)
    6c9e:	6813      	ldr	r3, [r2, #0]
    6ca0:	1c14      	adds	r4, r2, #0
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d102      	bne.n	6cac <_free_r+0x20>
    6ca6:	604b      	str	r3, [r1, #4]
    6ca8:	6011      	str	r1, [r2, #0]
    6caa:	e031      	b.n	6d10 <_free_r+0x84>
    6cac:	4299      	cmp	r1, r3
    6cae:	d20d      	bcs.n	6ccc <_free_r+0x40>
    6cb0:	6808      	ldr	r0, [r1, #0]
    6cb2:	180a      	adds	r2, r1, r0
    6cb4:	429a      	cmp	r2, r3
    6cb6:	d103      	bne.n	6cc0 <_free_r+0x34>
    6cb8:	6813      	ldr	r3, [r2, #0]
    6cba:	18c3      	adds	r3, r0, r3
    6cbc:	600b      	str	r3, [r1, #0]
    6cbe:	6853      	ldr	r3, [r2, #4]
    6cc0:	604b      	str	r3, [r1, #4]
    6cc2:	6021      	str	r1, [r4, #0]
    6cc4:	e024      	b.n	6d10 <_free_r+0x84>
    6cc6:	428a      	cmp	r2, r1
    6cc8:	d803      	bhi.n	6cd2 <_free_r+0x46>
    6cca:	1c13      	adds	r3, r2, #0
    6ccc:	685a      	ldr	r2, [r3, #4]
    6cce:	2a00      	cmp	r2, #0
    6cd0:	d1f9      	bne.n	6cc6 <_free_r+0x3a>
    6cd2:	681d      	ldr	r5, [r3, #0]
    6cd4:	195c      	adds	r4, r3, r5
    6cd6:	428c      	cmp	r4, r1
    6cd8:	d10b      	bne.n	6cf2 <_free_r+0x66>
    6cda:	6809      	ldr	r1, [r1, #0]
    6cdc:	1869      	adds	r1, r5, r1
    6cde:	1858      	adds	r0, r3, r1
    6ce0:	6019      	str	r1, [r3, #0]
    6ce2:	4290      	cmp	r0, r2
    6ce4:	d114      	bne.n	6d10 <_free_r+0x84>
    6ce6:	6810      	ldr	r0, [r2, #0]
    6ce8:	6852      	ldr	r2, [r2, #4]
    6cea:	1809      	adds	r1, r1, r0
    6cec:	6019      	str	r1, [r3, #0]
    6cee:	605a      	str	r2, [r3, #4]
    6cf0:	e00e      	b.n	6d10 <_free_r+0x84>
    6cf2:	428c      	cmp	r4, r1
    6cf4:	d902      	bls.n	6cfc <_free_r+0x70>
    6cf6:	230c      	movs	r3, #12
    6cf8:	6003      	str	r3, [r0, #0]
    6cfa:	e009      	b.n	6d10 <_free_r+0x84>
    6cfc:	6808      	ldr	r0, [r1, #0]
    6cfe:	180c      	adds	r4, r1, r0
    6d00:	4294      	cmp	r4, r2
    6d02:	d103      	bne.n	6d0c <_free_r+0x80>
    6d04:	6814      	ldr	r4, [r2, #0]
    6d06:	6852      	ldr	r2, [r2, #4]
    6d08:	1900      	adds	r0, r0, r4
    6d0a:	6008      	str	r0, [r1, #0]
    6d0c:	604a      	str	r2, [r1, #4]
    6d0e:	6059      	str	r1, [r3, #4]
    6d10:	bd30      	pop	{r4, r5, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	20000194 	.word	0x20000194

00006d18 <_malloc_r>:
    6d18:	2303      	movs	r3, #3
    6d1a:	b570      	push	{r4, r5, r6, lr}
    6d1c:	1ccc      	adds	r4, r1, #3
    6d1e:	439c      	bics	r4, r3
    6d20:	3408      	adds	r4, #8
    6d22:	1c05      	adds	r5, r0, #0
    6d24:	2c0c      	cmp	r4, #12
    6d26:	d201      	bcs.n	6d2c <_malloc_r+0x14>
    6d28:	240c      	movs	r4, #12
    6d2a:	e005      	b.n	6d38 <_malloc_r+0x20>
    6d2c:	2c00      	cmp	r4, #0
    6d2e:	da03      	bge.n	6d38 <_malloc_r+0x20>
    6d30:	230c      	movs	r3, #12
    6d32:	2000      	movs	r0, #0
    6d34:	602b      	str	r3, [r5, #0]
    6d36:	e042      	b.n	6dbe <_malloc_r+0xa6>
    6d38:	428c      	cmp	r4, r1
    6d3a:	d3f9      	bcc.n	6d30 <_malloc_r+0x18>
    6d3c:	4a20      	ldr	r2, [pc, #128]	; (6dc0 <_malloc_r+0xa8>)
    6d3e:	6813      	ldr	r3, [r2, #0]
    6d40:	1c10      	adds	r0, r2, #0
    6d42:	1c19      	adds	r1, r3, #0
    6d44:	2900      	cmp	r1, #0
    6d46:	d013      	beq.n	6d70 <_malloc_r+0x58>
    6d48:	680a      	ldr	r2, [r1, #0]
    6d4a:	1b12      	subs	r2, r2, r4
    6d4c:	d40d      	bmi.n	6d6a <_malloc_r+0x52>
    6d4e:	2a0b      	cmp	r2, #11
    6d50:	d902      	bls.n	6d58 <_malloc_r+0x40>
    6d52:	600a      	str	r2, [r1, #0]
    6d54:	188b      	adds	r3, r1, r2
    6d56:	e01f      	b.n	6d98 <_malloc_r+0x80>
    6d58:	428b      	cmp	r3, r1
    6d5a:	d102      	bne.n	6d62 <_malloc_r+0x4a>
    6d5c:	685a      	ldr	r2, [r3, #4]
    6d5e:	6002      	str	r2, [r0, #0]
    6d60:	e01b      	b.n	6d9a <_malloc_r+0x82>
    6d62:	684a      	ldr	r2, [r1, #4]
    6d64:	605a      	str	r2, [r3, #4]
    6d66:	1c0b      	adds	r3, r1, #0
    6d68:	e017      	b.n	6d9a <_malloc_r+0x82>
    6d6a:	1c0b      	adds	r3, r1, #0
    6d6c:	6849      	ldr	r1, [r1, #4]
    6d6e:	e7e9      	b.n	6d44 <_malloc_r+0x2c>
    6d70:	4e14      	ldr	r6, [pc, #80]	; (6dc4 <_malloc_r+0xac>)
    6d72:	6833      	ldr	r3, [r6, #0]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d103      	bne.n	6d80 <_malloc_r+0x68>
    6d78:	1c28      	adds	r0, r5, #0
    6d7a:	f000 fae3 	bl	7344 <_sbrk_r>
    6d7e:	6030      	str	r0, [r6, #0]
    6d80:	1c28      	adds	r0, r5, #0
    6d82:	1c21      	adds	r1, r4, #0
    6d84:	f000 fade 	bl	7344 <_sbrk_r>
    6d88:	1c03      	adds	r3, r0, #0
    6d8a:	1c42      	adds	r2, r0, #1
    6d8c:	d0d0      	beq.n	6d30 <_malloc_r+0x18>
    6d8e:	2203      	movs	r2, #3
    6d90:	1cc6      	adds	r6, r0, #3
    6d92:	4396      	bics	r6, r2
    6d94:	4286      	cmp	r6, r0
    6d96:	d10a      	bne.n	6dae <_malloc_r+0x96>
    6d98:	601c      	str	r4, [r3, #0]
    6d9a:	1c18      	adds	r0, r3, #0
    6d9c:	2107      	movs	r1, #7
    6d9e:	300b      	adds	r0, #11
    6da0:	1d1a      	adds	r2, r3, #4
    6da2:	4388      	bics	r0, r1
    6da4:	1a82      	subs	r2, r0, r2
    6da6:	d00a      	beq.n	6dbe <_malloc_r+0xa6>
    6da8:	4251      	negs	r1, r2
    6daa:	5099      	str	r1, [r3, r2]
    6dac:	e007      	b.n	6dbe <_malloc_r+0xa6>
    6dae:	1a31      	subs	r1, r6, r0
    6db0:	1c28      	adds	r0, r5, #0
    6db2:	f000 fac7 	bl	7344 <_sbrk_r>
    6db6:	1c43      	adds	r3, r0, #1
    6db8:	d0ba      	beq.n	6d30 <_malloc_r+0x18>
    6dba:	1c33      	adds	r3, r6, #0
    6dbc:	e7ec      	b.n	6d98 <_malloc_r+0x80>
    6dbe:	bd70      	pop	{r4, r5, r6, pc}
    6dc0:	20000194 	.word	0x20000194
    6dc4:	20000190 	.word	0x20000190

00006dc8 <__sfputc_r>:
    6dc8:	6893      	ldr	r3, [r2, #8]
    6dca:	b510      	push	{r4, lr}
    6dcc:	3b01      	subs	r3, #1
    6dce:	6093      	str	r3, [r2, #8]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	da05      	bge.n	6de0 <__sfputc_r+0x18>
    6dd4:	6994      	ldr	r4, [r2, #24]
    6dd6:	42a3      	cmp	r3, r4
    6dd8:	db08      	blt.n	6dec <__sfputc_r+0x24>
    6dda:	b2cb      	uxtb	r3, r1
    6ddc:	2b0a      	cmp	r3, #10
    6dde:	d005      	beq.n	6dec <__sfputc_r+0x24>
    6de0:	6813      	ldr	r3, [r2, #0]
    6de2:	1c58      	adds	r0, r3, #1
    6de4:	6010      	str	r0, [r2, #0]
    6de6:	7019      	strb	r1, [r3, #0]
    6de8:	b2c8      	uxtb	r0, r1
    6dea:	e001      	b.n	6df0 <__sfputc_r+0x28>
    6dec:	f7ff fc96 	bl	671c <__swbuf_r>
    6df0:	bd10      	pop	{r4, pc}

00006df2 <__sfputs_r>:
    6df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6df4:	1c06      	adds	r6, r0, #0
    6df6:	1c0f      	adds	r7, r1, #0
    6df8:	1c14      	adds	r4, r2, #0
    6dfa:	18d5      	adds	r5, r2, r3
    6dfc:	42ac      	cmp	r4, r5
    6dfe:	d008      	beq.n	6e12 <__sfputs_r+0x20>
    6e00:	7821      	ldrb	r1, [r4, #0]
    6e02:	1c30      	adds	r0, r6, #0
    6e04:	1c3a      	adds	r2, r7, #0
    6e06:	f7ff ffdf 	bl	6dc8 <__sfputc_r>
    6e0a:	3401      	adds	r4, #1
    6e0c:	1c43      	adds	r3, r0, #1
    6e0e:	d1f5      	bne.n	6dfc <__sfputs_r+0xa>
    6e10:	e000      	b.n	6e14 <__sfputs_r+0x22>
    6e12:	2000      	movs	r0, #0
    6e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006e18 <_vfiprintf_r>:
    6e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e1a:	b09f      	sub	sp, #124	; 0x7c
    6e1c:	1c06      	adds	r6, r0, #0
    6e1e:	1c0f      	adds	r7, r1, #0
    6e20:	9202      	str	r2, [sp, #8]
    6e22:	9305      	str	r3, [sp, #20]
    6e24:	2800      	cmp	r0, #0
    6e26:	d004      	beq.n	6e32 <_vfiprintf_r+0x1a>
    6e28:	6983      	ldr	r3, [r0, #24]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d101      	bne.n	6e32 <_vfiprintf_r+0x1a>
    6e2e:	f7ff fe39 	bl	6aa4 <__sinit>
    6e32:	4b79      	ldr	r3, [pc, #484]	; (7018 <_vfiprintf_r+0x200>)
    6e34:	429f      	cmp	r7, r3
    6e36:	d101      	bne.n	6e3c <_vfiprintf_r+0x24>
    6e38:	6877      	ldr	r7, [r6, #4]
    6e3a:	e008      	b.n	6e4e <_vfiprintf_r+0x36>
    6e3c:	4b77      	ldr	r3, [pc, #476]	; (701c <_vfiprintf_r+0x204>)
    6e3e:	429f      	cmp	r7, r3
    6e40:	d101      	bne.n	6e46 <_vfiprintf_r+0x2e>
    6e42:	68b7      	ldr	r7, [r6, #8]
    6e44:	e003      	b.n	6e4e <_vfiprintf_r+0x36>
    6e46:	4b76      	ldr	r3, [pc, #472]	; (7020 <_vfiprintf_r+0x208>)
    6e48:	429f      	cmp	r7, r3
    6e4a:	d100      	bne.n	6e4e <_vfiprintf_r+0x36>
    6e4c:	68f7      	ldr	r7, [r6, #12]
    6e4e:	89bb      	ldrh	r3, [r7, #12]
    6e50:	071b      	lsls	r3, r3, #28
    6e52:	d50a      	bpl.n	6e6a <_vfiprintf_r+0x52>
    6e54:	693b      	ldr	r3, [r7, #16]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d007      	beq.n	6e6a <_vfiprintf_r+0x52>
    6e5a:	2300      	movs	r3, #0
    6e5c:	ad06      	add	r5, sp, #24
    6e5e:	616b      	str	r3, [r5, #20]
    6e60:	3320      	adds	r3, #32
    6e62:	766b      	strb	r3, [r5, #25]
    6e64:	3310      	adds	r3, #16
    6e66:	76ab      	strb	r3, [r5, #26]
    6e68:	e03d      	b.n	6ee6 <_vfiprintf_r+0xce>
    6e6a:	1c30      	adds	r0, r6, #0
    6e6c:	1c39      	adds	r1, r7, #0
    6e6e:	f7ff fcad 	bl	67cc <__swsetup_r>
    6e72:	2800      	cmp	r0, #0
    6e74:	d0f1      	beq.n	6e5a <_vfiprintf_r+0x42>
    6e76:	2001      	movs	r0, #1
    6e78:	4240      	negs	r0, r0
    6e7a:	e0ca      	b.n	7012 <_vfiprintf_r+0x1fa>
    6e7c:	9a05      	ldr	r2, [sp, #20]
    6e7e:	1d11      	adds	r1, r2, #4
    6e80:	6812      	ldr	r2, [r2, #0]
    6e82:	9105      	str	r1, [sp, #20]
    6e84:	2a00      	cmp	r2, #0
    6e86:	db7e      	blt.n	6f86 <_vfiprintf_r+0x16e>
    6e88:	9209      	str	r2, [sp, #36]	; 0x24
    6e8a:	3401      	adds	r4, #1
    6e8c:	7823      	ldrb	r3, [r4, #0]
    6e8e:	2b2e      	cmp	r3, #46	; 0x2e
    6e90:	d100      	bne.n	6e94 <_vfiprintf_r+0x7c>
    6e92:	e089      	b.n	6fa8 <_vfiprintf_r+0x190>
    6e94:	7821      	ldrb	r1, [r4, #0]
    6e96:	4863      	ldr	r0, [pc, #396]	; (7024 <_vfiprintf_r+0x20c>)
    6e98:	2203      	movs	r2, #3
    6e9a:	f000 fb0f 	bl	74bc <memchr>
    6e9e:	2800      	cmp	r0, #0
    6ea0:	d008      	beq.n	6eb4 <_vfiprintf_r+0x9c>
    6ea2:	4b60      	ldr	r3, [pc, #384]	; (7024 <_vfiprintf_r+0x20c>)
    6ea4:	3401      	adds	r4, #1
    6ea6:	1ac0      	subs	r0, r0, r3
    6ea8:	2340      	movs	r3, #64	; 0x40
    6eaa:	4083      	lsls	r3, r0
    6eac:	1c18      	adds	r0, r3, #0
    6eae:	682b      	ldr	r3, [r5, #0]
    6eb0:	4318      	orrs	r0, r3
    6eb2:	6028      	str	r0, [r5, #0]
    6eb4:	7821      	ldrb	r1, [r4, #0]
    6eb6:	1c63      	adds	r3, r4, #1
    6eb8:	485b      	ldr	r0, [pc, #364]	; (7028 <_vfiprintf_r+0x210>)
    6eba:	2206      	movs	r2, #6
    6ebc:	9302      	str	r3, [sp, #8]
    6ebe:	7629      	strb	r1, [r5, #24]
    6ec0:	f000 fafc 	bl	74bc <memchr>
    6ec4:	2800      	cmp	r0, #0
    6ec6:	d100      	bne.n	6eca <_vfiprintf_r+0xb2>
    6ec8:	e091      	b.n	6fee <_vfiprintf_r+0x1d6>
    6eca:	4b58      	ldr	r3, [pc, #352]	; (702c <_vfiprintf_r+0x214>)
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d000      	beq.n	6ed2 <_vfiprintf_r+0xba>
    6ed0:	e084      	b.n	6fdc <_vfiprintf_r+0x1c4>
    6ed2:	2207      	movs	r2, #7
    6ed4:	9b05      	ldr	r3, [sp, #20]
    6ed6:	3307      	adds	r3, #7
    6ed8:	4393      	bics	r3, r2
    6eda:	3308      	adds	r3, #8
    6edc:	9305      	str	r3, [sp, #20]
    6ede:	696b      	ldr	r3, [r5, #20]
    6ee0:	9a03      	ldr	r2, [sp, #12]
    6ee2:	189b      	adds	r3, r3, r2
    6ee4:	616b      	str	r3, [r5, #20]
    6ee6:	9c02      	ldr	r4, [sp, #8]
    6ee8:	7823      	ldrb	r3, [r4, #0]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d104      	bne.n	6ef8 <_vfiprintf_r+0xe0>
    6eee:	9b02      	ldr	r3, [sp, #8]
    6ef0:	1ae3      	subs	r3, r4, r3
    6ef2:	9304      	str	r3, [sp, #16]
    6ef4:	d011      	beq.n	6f1a <_vfiprintf_r+0x102>
    6ef6:	e003      	b.n	6f00 <_vfiprintf_r+0xe8>
    6ef8:	2b25      	cmp	r3, #37	; 0x25
    6efa:	d0f8      	beq.n	6eee <_vfiprintf_r+0xd6>
    6efc:	3401      	adds	r4, #1
    6efe:	e7f3      	b.n	6ee8 <_vfiprintf_r+0xd0>
    6f00:	9b04      	ldr	r3, [sp, #16]
    6f02:	1c30      	adds	r0, r6, #0
    6f04:	1c39      	adds	r1, r7, #0
    6f06:	9a02      	ldr	r2, [sp, #8]
    6f08:	f7ff ff73 	bl	6df2 <__sfputs_r>
    6f0c:	1c43      	adds	r3, r0, #1
    6f0e:	d07b      	beq.n	7008 <_vfiprintf_r+0x1f0>
    6f10:	696a      	ldr	r2, [r5, #20]
    6f12:	9b04      	ldr	r3, [sp, #16]
    6f14:	4694      	mov	ip, r2
    6f16:	4463      	add	r3, ip
    6f18:	616b      	str	r3, [r5, #20]
    6f1a:	7823      	ldrb	r3, [r4, #0]
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d073      	beq.n	7008 <_vfiprintf_r+0x1f0>
    6f20:	2201      	movs	r2, #1
    6f22:	2300      	movs	r3, #0
    6f24:	4252      	negs	r2, r2
    6f26:	606a      	str	r2, [r5, #4]
    6f28:	a902      	add	r1, sp, #8
    6f2a:	3254      	adds	r2, #84	; 0x54
    6f2c:	1852      	adds	r2, r2, r1
    6f2e:	3401      	adds	r4, #1
    6f30:	602b      	str	r3, [r5, #0]
    6f32:	60eb      	str	r3, [r5, #12]
    6f34:	60ab      	str	r3, [r5, #8]
    6f36:	7013      	strb	r3, [r2, #0]
    6f38:	65ab      	str	r3, [r5, #88]	; 0x58
    6f3a:	7821      	ldrb	r1, [r4, #0]
    6f3c:	483c      	ldr	r0, [pc, #240]	; (7030 <_vfiprintf_r+0x218>)
    6f3e:	2205      	movs	r2, #5
    6f40:	f000 fabc 	bl	74bc <memchr>
    6f44:	2800      	cmp	r0, #0
    6f46:	d009      	beq.n	6f5c <_vfiprintf_r+0x144>
    6f48:	4b39      	ldr	r3, [pc, #228]	; (7030 <_vfiprintf_r+0x218>)
    6f4a:	3401      	adds	r4, #1
    6f4c:	1ac0      	subs	r0, r0, r3
    6f4e:	2301      	movs	r3, #1
    6f50:	4083      	lsls	r3, r0
    6f52:	1c18      	adds	r0, r3, #0
    6f54:	682b      	ldr	r3, [r5, #0]
    6f56:	4318      	orrs	r0, r3
    6f58:	6028      	str	r0, [r5, #0]
    6f5a:	e7ee      	b.n	6f3a <_vfiprintf_r+0x122>
    6f5c:	682b      	ldr	r3, [r5, #0]
    6f5e:	06da      	lsls	r2, r3, #27
    6f60:	d504      	bpl.n	6f6c <_vfiprintf_r+0x154>
    6f62:	2253      	movs	r2, #83	; 0x53
    6f64:	2120      	movs	r1, #32
    6f66:	a802      	add	r0, sp, #8
    6f68:	1812      	adds	r2, r2, r0
    6f6a:	7011      	strb	r1, [r2, #0]
    6f6c:	071a      	lsls	r2, r3, #28
    6f6e:	d504      	bpl.n	6f7a <_vfiprintf_r+0x162>
    6f70:	2253      	movs	r2, #83	; 0x53
    6f72:	212b      	movs	r1, #43	; 0x2b
    6f74:	a802      	add	r0, sp, #8
    6f76:	1812      	adds	r2, r2, r0
    6f78:	7011      	strb	r1, [r2, #0]
    6f7a:	7822      	ldrb	r2, [r4, #0]
    6f7c:	2a2a      	cmp	r2, #42	; 0x2a
    6f7e:	d100      	bne.n	6f82 <_vfiprintf_r+0x16a>
    6f80:	e77c      	b.n	6e7c <_vfiprintf_r+0x64>
    6f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f84:	e005      	b.n	6f92 <_vfiprintf_r+0x17a>
    6f86:	4252      	negs	r2, r2
    6f88:	60ea      	str	r2, [r5, #12]
    6f8a:	2202      	movs	r2, #2
    6f8c:	4313      	orrs	r3, r2
    6f8e:	602b      	str	r3, [r5, #0]
    6f90:	e77b      	b.n	6e8a <_vfiprintf_r+0x72>
    6f92:	7822      	ldrb	r2, [r4, #0]
    6f94:	3a30      	subs	r2, #48	; 0x30
    6f96:	2a09      	cmp	r2, #9
    6f98:	d804      	bhi.n	6fa4 <_vfiprintf_r+0x18c>
    6f9a:	210a      	movs	r1, #10
    6f9c:	434b      	muls	r3, r1
    6f9e:	3401      	adds	r4, #1
    6fa0:	189b      	adds	r3, r3, r2
    6fa2:	e7f6      	b.n	6f92 <_vfiprintf_r+0x17a>
    6fa4:	9309      	str	r3, [sp, #36]	; 0x24
    6fa6:	e771      	b.n	6e8c <_vfiprintf_r+0x74>
    6fa8:	7863      	ldrb	r3, [r4, #1]
    6faa:	2b2a      	cmp	r3, #42	; 0x2a
    6fac:	d109      	bne.n	6fc2 <_vfiprintf_r+0x1aa>
    6fae:	9b05      	ldr	r3, [sp, #20]
    6fb0:	3402      	adds	r4, #2
    6fb2:	1d1a      	adds	r2, r3, #4
    6fb4:	681b      	ldr	r3, [r3, #0]
    6fb6:	9205      	str	r2, [sp, #20]
    6fb8:	2b00      	cmp	r3, #0
    6fba:	da0d      	bge.n	6fd8 <_vfiprintf_r+0x1c0>
    6fbc:	2301      	movs	r3, #1
    6fbe:	425b      	negs	r3, r3
    6fc0:	e00a      	b.n	6fd8 <_vfiprintf_r+0x1c0>
    6fc2:	2300      	movs	r3, #0
    6fc4:	3401      	adds	r4, #1
    6fc6:	7822      	ldrb	r2, [r4, #0]
    6fc8:	3a30      	subs	r2, #48	; 0x30
    6fca:	2a09      	cmp	r2, #9
    6fcc:	d804      	bhi.n	6fd8 <_vfiprintf_r+0x1c0>
    6fce:	210a      	movs	r1, #10
    6fd0:	434b      	muls	r3, r1
    6fd2:	3401      	adds	r4, #1
    6fd4:	189b      	adds	r3, r3, r2
    6fd6:	e7f6      	b.n	6fc6 <_vfiprintf_r+0x1ae>
    6fd8:	9307      	str	r3, [sp, #28]
    6fda:	e75b      	b.n	6e94 <_vfiprintf_r+0x7c>
    6fdc:	ab05      	add	r3, sp, #20
    6fde:	9300      	str	r3, [sp, #0]
    6fe0:	1c30      	adds	r0, r6, #0
    6fe2:	1c29      	adds	r1, r5, #0
    6fe4:	1c3a      	adds	r2, r7, #0
    6fe6:	4b13      	ldr	r3, [pc, #76]	; (7034 <_vfiprintf_r+0x21c>)
    6fe8:	e000      	b.n	6fec <_vfiprintf_r+0x1d4>
    6fea:	bf00      	nop
    6fec:	e007      	b.n	6ffe <_vfiprintf_r+0x1e6>
    6fee:	ab05      	add	r3, sp, #20
    6ff0:	9300      	str	r3, [sp, #0]
    6ff2:	1c30      	adds	r0, r6, #0
    6ff4:	1c29      	adds	r1, r5, #0
    6ff6:	1c3a      	adds	r2, r7, #0
    6ff8:	4b0e      	ldr	r3, [pc, #56]	; (7034 <_vfiprintf_r+0x21c>)
    6ffa:	f000 f88b 	bl	7114 <_printf_i>
    6ffe:	9003      	str	r0, [sp, #12]
    7000:	9b03      	ldr	r3, [sp, #12]
    7002:	3301      	adds	r3, #1
    7004:	d000      	beq.n	7008 <_vfiprintf_r+0x1f0>
    7006:	e76a      	b.n	6ede <_vfiprintf_r+0xc6>
    7008:	89bb      	ldrh	r3, [r7, #12]
    700a:	065b      	lsls	r3, r3, #25
    700c:	d500      	bpl.n	7010 <_vfiprintf_r+0x1f8>
    700e:	e732      	b.n	6e76 <_vfiprintf_r+0x5e>
    7010:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7012:	b01f      	add	sp, #124	; 0x7c
    7014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	00007798 	.word	0x00007798
    701c:	000077b8 	.word	0x000077b8
    7020:	000077d8 	.word	0x000077d8
    7024:	000077fe 	.word	0x000077fe
    7028:	00007802 	.word	0x00007802
    702c:	00000000 	.word	0x00000000
    7030:	000077f8 	.word	0x000077f8
    7034:	00006df3 	.word	0x00006df3

00007038 <_printf_common>:
    7038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    703a:	1c17      	adds	r7, r2, #0
    703c:	9301      	str	r3, [sp, #4]
    703e:	690a      	ldr	r2, [r1, #16]
    7040:	688b      	ldr	r3, [r1, #8]
    7042:	9000      	str	r0, [sp, #0]
    7044:	1c0c      	adds	r4, r1, #0
    7046:	4293      	cmp	r3, r2
    7048:	da00      	bge.n	704c <_printf_common+0x14>
    704a:	1c13      	adds	r3, r2, #0
    704c:	1c22      	adds	r2, r4, #0
    704e:	603b      	str	r3, [r7, #0]
    7050:	3243      	adds	r2, #67	; 0x43
    7052:	7812      	ldrb	r2, [r2, #0]
    7054:	2a00      	cmp	r2, #0
    7056:	d001      	beq.n	705c <_printf_common+0x24>
    7058:	3301      	adds	r3, #1
    705a:	603b      	str	r3, [r7, #0]
    705c:	6823      	ldr	r3, [r4, #0]
    705e:	069b      	lsls	r3, r3, #26
    7060:	d502      	bpl.n	7068 <_printf_common+0x30>
    7062:	683b      	ldr	r3, [r7, #0]
    7064:	3302      	adds	r3, #2
    7066:	603b      	str	r3, [r7, #0]
    7068:	2506      	movs	r5, #6
    706a:	6823      	ldr	r3, [r4, #0]
    706c:	401d      	ands	r5, r3
    706e:	d01e      	beq.n	70ae <_printf_common+0x76>
    7070:	1c23      	adds	r3, r4, #0
    7072:	3343      	adds	r3, #67	; 0x43
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	1e5a      	subs	r2, r3, #1
    7078:	4193      	sbcs	r3, r2
    707a:	6822      	ldr	r2, [r4, #0]
    707c:	0692      	lsls	r2, r2, #26
    707e:	d51c      	bpl.n	70ba <_printf_common+0x82>
    7080:	2030      	movs	r0, #48	; 0x30
    7082:	18e1      	adds	r1, r4, r3
    7084:	3140      	adds	r1, #64	; 0x40
    7086:	70c8      	strb	r0, [r1, #3]
    7088:	1c21      	adds	r1, r4, #0
    708a:	1c5a      	adds	r2, r3, #1
    708c:	3145      	adds	r1, #69	; 0x45
    708e:	7809      	ldrb	r1, [r1, #0]
    7090:	18a2      	adds	r2, r4, r2
    7092:	3240      	adds	r2, #64	; 0x40
    7094:	3302      	adds	r3, #2
    7096:	70d1      	strb	r1, [r2, #3]
    7098:	e00f      	b.n	70ba <_printf_common+0x82>
    709a:	1c22      	adds	r2, r4, #0
    709c:	2301      	movs	r3, #1
    709e:	9800      	ldr	r0, [sp, #0]
    70a0:	9901      	ldr	r1, [sp, #4]
    70a2:	3219      	adds	r2, #25
    70a4:	9e08      	ldr	r6, [sp, #32]
    70a6:	47b0      	blx	r6
    70a8:	1c43      	adds	r3, r0, #1
    70aa:	d00e      	beq.n	70ca <_printf_common+0x92>
    70ac:	3501      	adds	r5, #1
    70ae:	68e3      	ldr	r3, [r4, #12]
    70b0:	683a      	ldr	r2, [r7, #0]
    70b2:	1a9b      	subs	r3, r3, r2
    70b4:	429d      	cmp	r5, r3
    70b6:	dbf0      	blt.n	709a <_printf_common+0x62>
    70b8:	e7da      	b.n	7070 <_printf_common+0x38>
    70ba:	1c22      	adds	r2, r4, #0
    70bc:	9800      	ldr	r0, [sp, #0]
    70be:	9901      	ldr	r1, [sp, #4]
    70c0:	3243      	adds	r2, #67	; 0x43
    70c2:	9d08      	ldr	r5, [sp, #32]
    70c4:	47a8      	blx	r5
    70c6:	1c43      	adds	r3, r0, #1
    70c8:	d102      	bne.n	70d0 <_printf_common+0x98>
    70ca:	2001      	movs	r0, #1
    70cc:	4240      	negs	r0, r0
    70ce:	e020      	b.n	7112 <_printf_common+0xda>
    70d0:	2306      	movs	r3, #6
    70d2:	6820      	ldr	r0, [r4, #0]
    70d4:	68e1      	ldr	r1, [r4, #12]
    70d6:	683a      	ldr	r2, [r7, #0]
    70d8:	4003      	ands	r3, r0
    70da:	2500      	movs	r5, #0
    70dc:	2b04      	cmp	r3, #4
    70de:	d103      	bne.n	70e8 <_printf_common+0xb0>
    70e0:	1a8d      	subs	r5, r1, r2
    70e2:	43eb      	mvns	r3, r5
    70e4:	17db      	asrs	r3, r3, #31
    70e6:	401d      	ands	r5, r3
    70e8:	68a3      	ldr	r3, [r4, #8]
    70ea:	6922      	ldr	r2, [r4, #16]
    70ec:	4293      	cmp	r3, r2
    70ee:	dd01      	ble.n	70f4 <_printf_common+0xbc>
    70f0:	1a9b      	subs	r3, r3, r2
    70f2:	18ed      	adds	r5, r5, r3
    70f4:	2700      	movs	r7, #0
    70f6:	42af      	cmp	r7, r5
    70f8:	da0a      	bge.n	7110 <_printf_common+0xd8>
    70fa:	1c22      	adds	r2, r4, #0
    70fc:	2301      	movs	r3, #1
    70fe:	9800      	ldr	r0, [sp, #0]
    7100:	9901      	ldr	r1, [sp, #4]
    7102:	321a      	adds	r2, #26
    7104:	9e08      	ldr	r6, [sp, #32]
    7106:	47b0      	blx	r6
    7108:	1c43      	adds	r3, r0, #1
    710a:	d0de      	beq.n	70ca <_printf_common+0x92>
    710c:	3701      	adds	r7, #1
    710e:	e7f2      	b.n	70f6 <_printf_common+0xbe>
    7110:	2000      	movs	r0, #0
    7112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007114 <_printf_i>:
    7114:	b5f0      	push	{r4, r5, r6, r7, lr}
    7116:	b08b      	sub	sp, #44	; 0x2c
    7118:	9206      	str	r2, [sp, #24]
    711a:	1c0a      	adds	r2, r1, #0
    711c:	3243      	adds	r2, #67	; 0x43
    711e:	9307      	str	r3, [sp, #28]
    7120:	9005      	str	r0, [sp, #20]
    7122:	9204      	str	r2, [sp, #16]
    7124:	7e0a      	ldrb	r2, [r1, #24]
    7126:	1c0c      	adds	r4, r1, #0
    7128:	9b10      	ldr	r3, [sp, #64]	; 0x40
    712a:	2a6e      	cmp	r2, #110	; 0x6e
    712c:	d100      	bne.n	7130 <_printf_i+0x1c>
    712e:	e0a8      	b.n	7282 <_printf_i+0x16e>
    7130:	d811      	bhi.n	7156 <_printf_i+0x42>
    7132:	2a63      	cmp	r2, #99	; 0x63
    7134:	d022      	beq.n	717c <_printf_i+0x68>
    7136:	d809      	bhi.n	714c <_printf_i+0x38>
    7138:	2a00      	cmp	r2, #0
    713a:	d100      	bne.n	713e <_printf_i+0x2a>
    713c:	e0b2      	b.n	72a4 <_printf_i+0x190>
    713e:	2a58      	cmp	r2, #88	; 0x58
    7140:	d000      	beq.n	7144 <_printf_i+0x30>
    7142:	e0c2      	b.n	72ca <_printf_i+0x1b6>
    7144:	3145      	adds	r1, #69	; 0x45
    7146:	700a      	strb	r2, [r1, #0]
    7148:	4a7c      	ldr	r2, [pc, #496]	; (733c <_printf_i+0x228>)
    714a:	e04f      	b.n	71ec <_printf_i+0xd8>
    714c:	2a64      	cmp	r2, #100	; 0x64
    714e:	d01d      	beq.n	718c <_printf_i+0x78>
    7150:	2a69      	cmp	r2, #105	; 0x69
    7152:	d01b      	beq.n	718c <_printf_i+0x78>
    7154:	e0b9      	b.n	72ca <_printf_i+0x1b6>
    7156:	2a73      	cmp	r2, #115	; 0x73
    7158:	d100      	bne.n	715c <_printf_i+0x48>
    715a:	e0a7      	b.n	72ac <_printf_i+0x198>
    715c:	d809      	bhi.n	7172 <_printf_i+0x5e>
    715e:	2a6f      	cmp	r2, #111	; 0x6f
    7160:	d029      	beq.n	71b6 <_printf_i+0xa2>
    7162:	2a70      	cmp	r2, #112	; 0x70
    7164:	d000      	beq.n	7168 <_printf_i+0x54>
    7166:	e0b0      	b.n	72ca <_printf_i+0x1b6>
    7168:	2220      	movs	r2, #32
    716a:	6809      	ldr	r1, [r1, #0]
    716c:	430a      	orrs	r2, r1
    716e:	6022      	str	r2, [r4, #0]
    7170:	e037      	b.n	71e2 <_printf_i+0xce>
    7172:	2a75      	cmp	r2, #117	; 0x75
    7174:	d01f      	beq.n	71b6 <_printf_i+0xa2>
    7176:	2a78      	cmp	r2, #120	; 0x78
    7178:	d033      	beq.n	71e2 <_printf_i+0xce>
    717a:	e0a6      	b.n	72ca <_printf_i+0x1b6>
    717c:	1c0e      	adds	r6, r1, #0
    717e:	681a      	ldr	r2, [r3, #0]
    7180:	3642      	adds	r6, #66	; 0x42
    7182:	1d11      	adds	r1, r2, #4
    7184:	6019      	str	r1, [r3, #0]
    7186:	6813      	ldr	r3, [r2, #0]
    7188:	7033      	strb	r3, [r6, #0]
    718a:	e0a1      	b.n	72d0 <_printf_i+0x1bc>
    718c:	6821      	ldr	r1, [r4, #0]
    718e:	681a      	ldr	r2, [r3, #0]
    7190:	0608      	lsls	r0, r1, #24
    7192:	d406      	bmi.n	71a2 <_printf_i+0x8e>
    7194:	0649      	lsls	r1, r1, #25
    7196:	d504      	bpl.n	71a2 <_printf_i+0x8e>
    7198:	1d11      	adds	r1, r2, #4
    719a:	6019      	str	r1, [r3, #0]
    719c:	2300      	movs	r3, #0
    719e:	5ed5      	ldrsh	r5, [r2, r3]
    71a0:	e002      	b.n	71a8 <_printf_i+0x94>
    71a2:	1d11      	adds	r1, r2, #4
    71a4:	6019      	str	r1, [r3, #0]
    71a6:	6815      	ldr	r5, [r2, #0]
    71a8:	2d00      	cmp	r5, #0
    71aa:	da3b      	bge.n	7224 <_printf_i+0x110>
    71ac:	232d      	movs	r3, #45	; 0x2d
    71ae:	9a04      	ldr	r2, [sp, #16]
    71b0:	426d      	negs	r5, r5
    71b2:	7013      	strb	r3, [r2, #0]
    71b4:	e036      	b.n	7224 <_printf_i+0x110>
    71b6:	6821      	ldr	r1, [r4, #0]
    71b8:	681a      	ldr	r2, [r3, #0]
    71ba:	0608      	lsls	r0, r1, #24
    71bc:	d406      	bmi.n	71cc <_printf_i+0xb8>
    71be:	0649      	lsls	r1, r1, #25
    71c0:	d504      	bpl.n	71cc <_printf_i+0xb8>
    71c2:	6815      	ldr	r5, [r2, #0]
    71c4:	1d11      	adds	r1, r2, #4
    71c6:	6019      	str	r1, [r3, #0]
    71c8:	b2ad      	uxth	r5, r5
    71ca:	e002      	b.n	71d2 <_printf_i+0xbe>
    71cc:	1d11      	adds	r1, r2, #4
    71ce:	6019      	str	r1, [r3, #0]
    71d0:	6815      	ldr	r5, [r2, #0]
    71d2:	4b5a      	ldr	r3, [pc, #360]	; (733c <_printf_i+0x228>)
    71d4:	7e22      	ldrb	r2, [r4, #24]
    71d6:	9303      	str	r3, [sp, #12]
    71d8:	270a      	movs	r7, #10
    71da:	2a6f      	cmp	r2, #111	; 0x6f
    71dc:	d11d      	bne.n	721a <_printf_i+0x106>
    71de:	2708      	movs	r7, #8
    71e0:	e01b      	b.n	721a <_printf_i+0x106>
    71e2:	1c22      	adds	r2, r4, #0
    71e4:	2178      	movs	r1, #120	; 0x78
    71e6:	3245      	adds	r2, #69	; 0x45
    71e8:	7011      	strb	r1, [r2, #0]
    71ea:	4a55      	ldr	r2, [pc, #340]	; (7340 <_printf_i+0x22c>)
    71ec:	6819      	ldr	r1, [r3, #0]
    71ee:	9203      	str	r2, [sp, #12]
    71f0:	1d08      	adds	r0, r1, #4
    71f2:	6822      	ldr	r2, [r4, #0]
    71f4:	6018      	str	r0, [r3, #0]
    71f6:	680d      	ldr	r5, [r1, #0]
    71f8:	0610      	lsls	r0, r2, #24
    71fa:	d402      	bmi.n	7202 <_printf_i+0xee>
    71fc:	0650      	lsls	r0, r2, #25
    71fe:	d500      	bpl.n	7202 <_printf_i+0xee>
    7200:	b2ad      	uxth	r5, r5
    7202:	07d3      	lsls	r3, r2, #31
    7204:	d502      	bpl.n	720c <_printf_i+0xf8>
    7206:	2320      	movs	r3, #32
    7208:	431a      	orrs	r2, r3
    720a:	6022      	str	r2, [r4, #0]
    720c:	2710      	movs	r7, #16
    720e:	2d00      	cmp	r5, #0
    7210:	d103      	bne.n	721a <_printf_i+0x106>
    7212:	2320      	movs	r3, #32
    7214:	6822      	ldr	r2, [r4, #0]
    7216:	439a      	bics	r2, r3
    7218:	6022      	str	r2, [r4, #0]
    721a:	1c23      	adds	r3, r4, #0
    721c:	2200      	movs	r2, #0
    721e:	3343      	adds	r3, #67	; 0x43
    7220:	701a      	strb	r2, [r3, #0]
    7222:	e002      	b.n	722a <_printf_i+0x116>
    7224:	270a      	movs	r7, #10
    7226:	4b45      	ldr	r3, [pc, #276]	; (733c <_printf_i+0x228>)
    7228:	9303      	str	r3, [sp, #12]
    722a:	6863      	ldr	r3, [r4, #4]
    722c:	60a3      	str	r3, [r4, #8]
    722e:	2b00      	cmp	r3, #0
    7230:	db03      	blt.n	723a <_printf_i+0x126>
    7232:	2204      	movs	r2, #4
    7234:	6821      	ldr	r1, [r4, #0]
    7236:	4391      	bics	r1, r2
    7238:	6021      	str	r1, [r4, #0]
    723a:	2d00      	cmp	r5, #0
    723c:	d102      	bne.n	7244 <_printf_i+0x130>
    723e:	9e04      	ldr	r6, [sp, #16]
    7240:	2b00      	cmp	r3, #0
    7242:	d00e      	beq.n	7262 <_printf_i+0x14e>
    7244:	9e04      	ldr	r6, [sp, #16]
    7246:	1c28      	adds	r0, r5, #0
    7248:	1c39      	adds	r1, r7, #0
    724a:	f7fc fe4b 	bl	3ee4 <__aeabi_uidivmod>
    724e:	9b03      	ldr	r3, [sp, #12]
    7250:	3e01      	subs	r6, #1
    7252:	5c5b      	ldrb	r3, [r3, r1]
    7254:	1c28      	adds	r0, r5, #0
    7256:	7033      	strb	r3, [r6, #0]
    7258:	1c39      	adds	r1, r7, #0
    725a:	f7fc fdbd 	bl	3dd8 <__aeabi_uidiv>
    725e:	1e05      	subs	r5, r0, #0
    7260:	d1f1      	bne.n	7246 <_printf_i+0x132>
    7262:	2f08      	cmp	r7, #8
    7264:	d109      	bne.n	727a <_printf_i+0x166>
    7266:	6823      	ldr	r3, [r4, #0]
    7268:	07db      	lsls	r3, r3, #31
    726a:	d506      	bpl.n	727a <_printf_i+0x166>
    726c:	6863      	ldr	r3, [r4, #4]
    726e:	6922      	ldr	r2, [r4, #16]
    7270:	4293      	cmp	r3, r2
    7272:	dc02      	bgt.n	727a <_printf_i+0x166>
    7274:	2330      	movs	r3, #48	; 0x30
    7276:	3e01      	subs	r6, #1
    7278:	7033      	strb	r3, [r6, #0]
    727a:	9b04      	ldr	r3, [sp, #16]
    727c:	1b9b      	subs	r3, r3, r6
    727e:	6123      	str	r3, [r4, #16]
    7280:	e02b      	b.n	72da <_printf_i+0x1c6>
    7282:	6809      	ldr	r1, [r1, #0]
    7284:	681a      	ldr	r2, [r3, #0]
    7286:	0608      	lsls	r0, r1, #24
    7288:	d407      	bmi.n	729a <_printf_i+0x186>
    728a:	0649      	lsls	r1, r1, #25
    728c:	d505      	bpl.n	729a <_printf_i+0x186>
    728e:	1d11      	adds	r1, r2, #4
    7290:	6019      	str	r1, [r3, #0]
    7292:	6813      	ldr	r3, [r2, #0]
    7294:	8aa2      	ldrh	r2, [r4, #20]
    7296:	801a      	strh	r2, [r3, #0]
    7298:	e004      	b.n	72a4 <_printf_i+0x190>
    729a:	1d11      	adds	r1, r2, #4
    729c:	6019      	str	r1, [r3, #0]
    729e:	6813      	ldr	r3, [r2, #0]
    72a0:	6962      	ldr	r2, [r4, #20]
    72a2:	601a      	str	r2, [r3, #0]
    72a4:	2300      	movs	r3, #0
    72a6:	9e04      	ldr	r6, [sp, #16]
    72a8:	6123      	str	r3, [r4, #16]
    72aa:	e016      	b.n	72da <_printf_i+0x1c6>
    72ac:	681a      	ldr	r2, [r3, #0]
    72ae:	1d11      	adds	r1, r2, #4
    72b0:	6019      	str	r1, [r3, #0]
    72b2:	6816      	ldr	r6, [r2, #0]
    72b4:	2100      	movs	r1, #0
    72b6:	1c30      	adds	r0, r6, #0
    72b8:	6862      	ldr	r2, [r4, #4]
    72ba:	f000 f8ff 	bl	74bc <memchr>
    72be:	2800      	cmp	r0, #0
    72c0:	d001      	beq.n	72c6 <_printf_i+0x1b2>
    72c2:	1b80      	subs	r0, r0, r6
    72c4:	6060      	str	r0, [r4, #4]
    72c6:	6863      	ldr	r3, [r4, #4]
    72c8:	e003      	b.n	72d2 <_printf_i+0x1be>
    72ca:	1c26      	adds	r6, r4, #0
    72cc:	3642      	adds	r6, #66	; 0x42
    72ce:	7032      	strb	r2, [r6, #0]
    72d0:	2301      	movs	r3, #1
    72d2:	6123      	str	r3, [r4, #16]
    72d4:	2300      	movs	r3, #0
    72d6:	9a04      	ldr	r2, [sp, #16]
    72d8:	7013      	strb	r3, [r2, #0]
    72da:	9b07      	ldr	r3, [sp, #28]
    72dc:	9805      	ldr	r0, [sp, #20]
    72de:	9300      	str	r3, [sp, #0]
    72e0:	1c21      	adds	r1, r4, #0
    72e2:	9b06      	ldr	r3, [sp, #24]
    72e4:	aa09      	add	r2, sp, #36	; 0x24
    72e6:	f7ff fea7 	bl	7038 <_printf_common>
    72ea:	1c43      	adds	r3, r0, #1
    72ec:	d102      	bne.n	72f4 <_printf_i+0x1e0>
    72ee:	2001      	movs	r0, #1
    72f0:	4240      	negs	r0, r0
    72f2:	e021      	b.n	7338 <_printf_i+0x224>
    72f4:	6923      	ldr	r3, [r4, #16]
    72f6:	9805      	ldr	r0, [sp, #20]
    72f8:	9906      	ldr	r1, [sp, #24]
    72fa:	1c32      	adds	r2, r6, #0
    72fc:	9d07      	ldr	r5, [sp, #28]
    72fe:	47a8      	blx	r5
    7300:	1c43      	adds	r3, r0, #1
    7302:	d0f4      	beq.n	72ee <_printf_i+0x1da>
    7304:	6823      	ldr	r3, [r4, #0]
    7306:	079b      	lsls	r3, r3, #30
    7308:	d405      	bmi.n	7316 <_printf_i+0x202>
    730a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    730c:	68e0      	ldr	r0, [r4, #12]
    730e:	4298      	cmp	r0, r3
    7310:	da12      	bge.n	7338 <_printf_i+0x224>
    7312:	1c18      	adds	r0, r3, #0
    7314:	e010      	b.n	7338 <_printf_i+0x224>
    7316:	2500      	movs	r5, #0
    7318:	68e3      	ldr	r3, [r4, #12]
    731a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    731c:	1a9b      	subs	r3, r3, r2
    731e:	429d      	cmp	r5, r3
    7320:	daf3      	bge.n	730a <_printf_i+0x1f6>
    7322:	1c22      	adds	r2, r4, #0
    7324:	2301      	movs	r3, #1
    7326:	9805      	ldr	r0, [sp, #20]
    7328:	9906      	ldr	r1, [sp, #24]
    732a:	3219      	adds	r2, #25
    732c:	9e07      	ldr	r6, [sp, #28]
    732e:	47b0      	blx	r6
    7330:	1c43      	adds	r3, r0, #1
    7332:	d0dc      	beq.n	72ee <_printf_i+0x1da>
    7334:	3501      	adds	r5, #1
    7336:	e7ef      	b.n	7318 <_printf_i+0x204>
    7338:	b00b      	add	sp, #44	; 0x2c
    733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    733c:	00007809 	.word	0x00007809
    7340:	0000781a 	.word	0x0000781a

00007344 <_sbrk_r>:
    7344:	b538      	push	{r3, r4, r5, lr}
    7346:	2300      	movs	r3, #0
    7348:	4c06      	ldr	r4, [pc, #24]	; (7364 <_sbrk_r+0x20>)
    734a:	1c05      	adds	r5, r0, #0
    734c:	1c08      	adds	r0, r1, #0
    734e:	6023      	str	r3, [r4, #0]
    7350:	f7fb fdbe 	bl	2ed0 <_sbrk>
    7354:	1c43      	adds	r3, r0, #1
    7356:	d103      	bne.n	7360 <_sbrk_r+0x1c>
    7358:	6823      	ldr	r3, [r4, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d000      	beq.n	7360 <_sbrk_r+0x1c>
    735e:	602b      	str	r3, [r5, #0]
    7360:	bd38      	pop	{r3, r4, r5, pc}
    7362:	46c0      	nop			; (mov r8, r8)
    7364:	200001f8 	.word	0x200001f8

00007368 <__sread>:
    7368:	b538      	push	{r3, r4, r5, lr}
    736a:	1c0c      	adds	r4, r1, #0
    736c:	250e      	movs	r5, #14
    736e:	5f49      	ldrsh	r1, [r1, r5]
    7370:	f000 f8b0 	bl	74d4 <_read_r>
    7374:	2800      	cmp	r0, #0
    7376:	db03      	blt.n	7380 <__sread+0x18>
    7378:	6d63      	ldr	r3, [r4, #84]	; 0x54
    737a:	181b      	adds	r3, r3, r0
    737c:	6563      	str	r3, [r4, #84]	; 0x54
    737e:	e003      	b.n	7388 <__sread+0x20>
    7380:	89a2      	ldrh	r2, [r4, #12]
    7382:	4b02      	ldr	r3, [pc, #8]	; (738c <__sread+0x24>)
    7384:	4013      	ands	r3, r2
    7386:	81a3      	strh	r3, [r4, #12]
    7388:	bd38      	pop	{r3, r4, r5, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	ffffefff 	.word	0xffffefff

00007390 <__swrite>:
    7390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7392:	1c1e      	adds	r6, r3, #0
    7394:	898b      	ldrh	r3, [r1, #12]
    7396:	1c05      	adds	r5, r0, #0
    7398:	1c0c      	adds	r4, r1, #0
    739a:	1c17      	adds	r7, r2, #0
    739c:	05db      	lsls	r3, r3, #23
    739e:	d505      	bpl.n	73ac <__swrite+0x1c>
    73a0:	230e      	movs	r3, #14
    73a2:	5ec9      	ldrsh	r1, [r1, r3]
    73a4:	2200      	movs	r2, #0
    73a6:	2302      	movs	r3, #2
    73a8:	f000 f874 	bl	7494 <_lseek_r>
    73ac:	89a2      	ldrh	r2, [r4, #12]
    73ae:	4b05      	ldr	r3, [pc, #20]	; (73c4 <__swrite+0x34>)
    73b0:	1c28      	adds	r0, r5, #0
    73b2:	4013      	ands	r3, r2
    73b4:	81a3      	strh	r3, [r4, #12]
    73b6:	1c3a      	adds	r2, r7, #0
    73b8:	230e      	movs	r3, #14
    73ba:	5ee1      	ldrsh	r1, [r4, r3]
    73bc:	1c33      	adds	r3, r6, #0
    73be:	f000 f81f 	bl	7400 <_write_r>
    73c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73c4:	ffffefff 	.word	0xffffefff

000073c8 <__sseek>:
    73c8:	b538      	push	{r3, r4, r5, lr}
    73ca:	1c0c      	adds	r4, r1, #0
    73cc:	250e      	movs	r5, #14
    73ce:	5f49      	ldrsh	r1, [r1, r5]
    73d0:	f000 f860 	bl	7494 <_lseek_r>
    73d4:	89a3      	ldrh	r3, [r4, #12]
    73d6:	1c42      	adds	r2, r0, #1
    73d8:	d103      	bne.n	73e2 <__sseek+0x1a>
    73da:	4a05      	ldr	r2, [pc, #20]	; (73f0 <__sseek+0x28>)
    73dc:	4013      	ands	r3, r2
    73de:	81a3      	strh	r3, [r4, #12]
    73e0:	e004      	b.n	73ec <__sseek+0x24>
    73e2:	2280      	movs	r2, #128	; 0x80
    73e4:	0152      	lsls	r2, r2, #5
    73e6:	4313      	orrs	r3, r2
    73e8:	81a3      	strh	r3, [r4, #12]
    73ea:	6560      	str	r0, [r4, #84]	; 0x54
    73ec:	bd38      	pop	{r3, r4, r5, pc}
    73ee:	46c0      	nop			; (mov r8, r8)
    73f0:	ffffefff 	.word	0xffffefff

000073f4 <__sclose>:
    73f4:	b508      	push	{r3, lr}
    73f6:	230e      	movs	r3, #14
    73f8:	5ec9      	ldrsh	r1, [r1, r3]
    73fa:	f000 f815 	bl	7428 <_close_r>
    73fe:	bd08      	pop	{r3, pc}

00007400 <_write_r>:
    7400:	b538      	push	{r3, r4, r5, lr}
    7402:	1c05      	adds	r5, r0, #0
    7404:	2000      	movs	r0, #0
    7406:	4c07      	ldr	r4, [pc, #28]	; (7424 <_write_r+0x24>)
    7408:	6020      	str	r0, [r4, #0]
    740a:	1c08      	adds	r0, r1, #0
    740c:	1c11      	adds	r1, r2, #0
    740e:	1c1a      	adds	r2, r3, #0
    7410:	f7fa fcee 	bl	1df0 <_write>
    7414:	1c43      	adds	r3, r0, #1
    7416:	d103      	bne.n	7420 <_write_r+0x20>
    7418:	6823      	ldr	r3, [r4, #0]
    741a:	2b00      	cmp	r3, #0
    741c:	d000      	beq.n	7420 <_write_r+0x20>
    741e:	602b      	str	r3, [r5, #0]
    7420:	bd38      	pop	{r3, r4, r5, pc}
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	200001f8 	.word	0x200001f8

00007428 <_close_r>:
    7428:	b538      	push	{r3, r4, r5, lr}
    742a:	2300      	movs	r3, #0
    742c:	4c06      	ldr	r4, [pc, #24]	; (7448 <_close_r+0x20>)
    742e:	1c05      	adds	r5, r0, #0
    7430:	1c08      	adds	r0, r1, #0
    7432:	6023      	str	r3, [r4, #0]
    7434:	f7fb fd6a 	bl	2f0c <_close>
    7438:	1c43      	adds	r3, r0, #1
    743a:	d103      	bne.n	7444 <_close_r+0x1c>
    743c:	6823      	ldr	r3, [r4, #0]
    743e:	2b00      	cmp	r3, #0
    7440:	d000      	beq.n	7444 <_close_r+0x1c>
    7442:	602b      	str	r3, [r5, #0]
    7444:	bd38      	pop	{r3, r4, r5, pc}
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	200001f8 	.word	0x200001f8

0000744c <_fstat_r>:
    744c:	b538      	push	{r3, r4, r5, lr}
    744e:	2300      	movs	r3, #0
    7450:	4c06      	ldr	r4, [pc, #24]	; (746c <_fstat_r+0x20>)
    7452:	1c05      	adds	r5, r0, #0
    7454:	1c08      	adds	r0, r1, #0
    7456:	1c11      	adds	r1, r2, #0
    7458:	6023      	str	r3, [r4, #0]
    745a:	f7fb fd61 	bl	2f20 <_fstat>
    745e:	1c43      	adds	r3, r0, #1
    7460:	d103      	bne.n	746a <_fstat_r+0x1e>
    7462:	6823      	ldr	r3, [r4, #0]
    7464:	2b00      	cmp	r3, #0
    7466:	d000      	beq.n	746a <_fstat_r+0x1e>
    7468:	602b      	str	r3, [r5, #0]
    746a:	bd38      	pop	{r3, r4, r5, pc}
    746c:	200001f8 	.word	0x200001f8

00007470 <_isatty_r>:
    7470:	b538      	push	{r3, r4, r5, lr}
    7472:	2300      	movs	r3, #0
    7474:	4c06      	ldr	r4, [pc, #24]	; (7490 <_isatty_r+0x20>)
    7476:	1c05      	adds	r5, r0, #0
    7478:	1c08      	adds	r0, r1, #0
    747a:	6023      	str	r3, [r4, #0]
    747c:	f7fb fd5e 	bl	2f3c <_isatty>
    7480:	1c43      	adds	r3, r0, #1
    7482:	d103      	bne.n	748c <_isatty_r+0x1c>
    7484:	6823      	ldr	r3, [r4, #0]
    7486:	2b00      	cmp	r3, #0
    7488:	d000      	beq.n	748c <_isatty_r+0x1c>
    748a:	602b      	str	r3, [r5, #0]
    748c:	bd38      	pop	{r3, r4, r5, pc}
    748e:	46c0      	nop			; (mov r8, r8)
    7490:	200001f8 	.word	0x200001f8

00007494 <_lseek_r>:
    7494:	b538      	push	{r3, r4, r5, lr}
    7496:	1c05      	adds	r5, r0, #0
    7498:	2000      	movs	r0, #0
    749a:	4c07      	ldr	r4, [pc, #28]	; (74b8 <_lseek_r+0x24>)
    749c:	6020      	str	r0, [r4, #0]
    749e:	1c08      	adds	r0, r1, #0
    74a0:	1c11      	adds	r1, r2, #0
    74a2:	1c1a      	adds	r2, r3, #0
    74a4:	f7fb fd54 	bl	2f50 <_lseek>
    74a8:	1c43      	adds	r3, r0, #1
    74aa:	d103      	bne.n	74b4 <_lseek_r+0x20>
    74ac:	6823      	ldr	r3, [r4, #0]
    74ae:	2b00      	cmp	r3, #0
    74b0:	d000      	beq.n	74b4 <_lseek_r+0x20>
    74b2:	602b      	str	r3, [r5, #0]
    74b4:	bd38      	pop	{r3, r4, r5, pc}
    74b6:	46c0      	nop			; (mov r8, r8)
    74b8:	200001f8 	.word	0x200001f8

000074bc <memchr>:
    74bc:	b2c9      	uxtb	r1, r1
    74be:	1882      	adds	r2, r0, r2
    74c0:	4290      	cmp	r0, r2
    74c2:	d004      	beq.n	74ce <memchr+0x12>
    74c4:	7803      	ldrb	r3, [r0, #0]
    74c6:	428b      	cmp	r3, r1
    74c8:	d002      	beq.n	74d0 <memchr+0x14>
    74ca:	3001      	adds	r0, #1
    74cc:	e7f8      	b.n	74c0 <memchr+0x4>
    74ce:	2000      	movs	r0, #0
    74d0:	4770      	bx	lr
	...

000074d4 <_read_r>:
    74d4:	b538      	push	{r3, r4, r5, lr}
    74d6:	1c05      	adds	r5, r0, #0
    74d8:	2000      	movs	r0, #0
    74da:	4c07      	ldr	r4, [pc, #28]	; (74f8 <_read_r+0x24>)
    74dc:	6020      	str	r0, [r4, #0]
    74de:	1c08      	adds	r0, r1, #0
    74e0:	1c11      	adds	r1, r2, #0
    74e2:	1c1a      	adds	r2, r3, #0
    74e4:	f7fa fc58 	bl	1d98 <_read>
    74e8:	1c43      	adds	r3, r0, #1
    74ea:	d103      	bne.n	74f4 <_read_r+0x20>
    74ec:	6823      	ldr	r3, [r4, #0]
    74ee:	2b00      	cmp	r3, #0
    74f0:	d000      	beq.n	74f4 <_read_r+0x20>
    74f2:	602b      	str	r3, [r5, #0]
    74f4:	bd38      	pop	{r3, r4, r5, pc}
    74f6:	46c0      	nop			; (mov r8, r8)
    74f8:	200001f8 	.word	0x200001f8
    74fc:	42000800 	.word	0x42000800
    7500:	42000c00 	.word	0x42000c00
    7504:	42001000 	.word	0x42001000
    7508:	42001400 	.word	0x42001400
    750c:	42001800 	.word	0x42001800
    7510:	42001c00 	.word	0x42001c00
    7514:	0c0b0a09 	.word	0x0c0b0a09
    7518:	00000e0d 	.word	0x00000e0d
    751c:	0000251e 	.word	0x0000251e
    7520:	0000259a 	.word	0x0000259a
    7524:	0000259a 	.word	0x0000259a
    7528:	00002540 	.word	0x00002540
    752c:	0000253a 	.word	0x0000253a
    7530:	00002546 	.word	0x00002546
    7534:	00002524 	.word	0x00002524
    7538:	0000254c 	.word	0x0000254c
    753c:	00002580 	.word	0x00002580
    7540:	00002674 	.word	0x00002674
    7544:	000026c4 	.word	0x000026c4
    7548:	000026c4 	.word	0x000026c4
    754c:	000026c0 	.word	0x000026c0
    7550:	00002666 	.word	0x00002666
    7554:	00002686 	.word	0x00002686
    7558:	00002656 	.word	0x00002656
    755c:	00002698 	.word	0x00002698
    7560:	000026aa 	.word	0x000026aa
    7564:	0002001e 	.word	0x0002001e
    7568:	2000000c 	.word	0x2000000c
    756c:	00000000 	.word	0x00000000
    7570:	0002001e 	.word	0x0002001e
    7574:	20000008 	.word	0x20000008
    7578:	00000000 	.word	0x00000000
    757c:	0002001e 	.word	0x0002001e
    7580:	20000010 	.word	0x20000010
    7584:	00000000 	.word	0x00000000
    7588:	20433249 	.word	0x20433249
    758c:	7473616d 	.word	0x7473616d
    7590:	69207265 	.word	0x69207265
    7594:	2074696e 	.word	0x2074696e
    7598:	74617473 	.word	0x74617473
    759c:	203a7375 	.word	0x203a7375
    75a0:	0a0d6425 	.word	0x0a0d6425
    75a4:	00000000 	.word	0x00000000
    75a8:	20433249 	.word	0x20433249
    75ac:	7473616d 	.word	0x7473616d
    75b0:	69207265 	.word	0x69207265
    75b4:	2074696e 	.word	0x2074696e
    75b8:	6f727265 	.word	0x6f727265
    75bc:	74732072 	.word	0x74732072
    75c0:	73757461 	.word	0x73757461
    75c4:	6425203a 	.word	0x6425203a
    75c8:	00000a0d 	.word	0x00000a0d
    75cc:	5f633269 	.word	0x5f633269
    75d0:	7473616d 	.word	0x7473616d
    75d4:	775f7265 	.word	0x775f7265
    75d8:	65746972 	.word	0x65746972
    75dc:	6361705f 	.word	0x6361705f
    75e0:	5f74656b 	.word	0x5f74656b
    75e4:	74696177 	.word	0x74696177
    75e8:	61747320 	.word	0x61747320
    75ec:	3a737574 	.word	0x3a737574
    75f0:	0d642520 	.word	0x0d642520
    75f4:	0000000a 	.word	0x0000000a
    75f8:	20433249 	.word	0x20433249
    75fc:	74697277 	.word	0x74697277
    7600:	69742065 	.word	0x69742065
    7604:	2064656d 	.word	0x2064656d
    7608:	2e74756f 	.word	0x2e74756f
    760c:	0000000d 	.word	0x0000000d
    7610:	46202d2d 	.word	0x46202d2d
    7614:	72656572 	.word	0x72656572
    7618:	20736f74 	.word	0x20736f74
    761c:	6d617845 	.word	0x6d617845
    7620:	20656c70 	.word	0x20656c70
    7624:	0d0a2d2d 	.word	0x0d0a2d2d
    7628:	00000000 	.word	0x00000000
    762c:	25202d2d 	.word	0x25202d2d
    7630:	000d0a73 	.word	0x000d0a73
    7634:	444d4153 	.word	0x444d4153
    7638:	585f3132 	.word	0x585f3132
    763c:	49414c50 	.word	0x49414c50
    7640:	5f44454e 	.word	0x5f44454e
    7644:	004f5250 	.word	0x004f5250
    7648:	43202d2d 	.word	0x43202d2d
    764c:	69706d6f 	.word	0x69706d6f
    7650:	3a64656c 	.word	0x3a64656c
    7654:	20732520 	.word	0x20732520
    7658:	2d207325 	.word	0x2d207325
    765c:	000d0a2d 	.word	0x000d0a2d
    7660:	20766f4e 	.word	0x20766f4e
    7664:	32203332 	.word	0x32203332
    7668:	00353130 	.word	0x00353130
    766c:	303a3430 	.word	0x303a3430
    7670:	32353a34 	.word	0x32353a34
    7674:	00000000 	.word	0x00000000
    7678:	00207825 	.word	0x00207825
    767c:	00000d0a 	.word	0x00000d0a
    7680:	25206425 	.word	0x25206425
    7684:	64252064 	.word	0x64252064
    7688:	00000d0a 	.word	0x00000d0a
    768c:	00000000 	.word	0x00000000

00007690 <atanlo>:
    7690:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
    76a0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

000076b0 <atanhi>:
    76b0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
    76c0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
    76d0:	000045e6 000045de 000045de 000045d6     .E...E...E...E..
    76e0:	00004528 00004528 000045cc 000045d6     (E..(E...E...E..
    76f0:	00004528 000045cc 00004528 000045d6     (E...E..(E...E..
    7700:	0000452a 0000452a 0000452a 00004670     *E..*E..*E..pF..
    7710:	00004f34 00004e22 00004f08 00004e0e     4O.."N...O...N..
    7720:	00004f08 00004f12 00004f08 00004e0e     .O...O...O...N..
    7730:	00004e22 00004e22 00004f12 00004e0e     "N.."N...O...N..
    7740:	00004e18 00004e18 00004e18 0000517a     .N...N...N..zQ..
    7750:	000057c8 000057a6 000057a6 0000579a     .W...W...W...W..
    7760:	0000568e 0000568e 0000578e 0000579a     .V...V...W...W..
    7770:	0000568e 0000578e 0000568e 0000579a     .V...W...V...W..
    7780:	00005692 00005692 00005692 000059a8     .V...V...V...Y..
    7790:	00000043                                C...

00007794 <_global_impure_ptr>:
    7794:	20000014                                ... 

00007798 <__sf_fake_stdin>:
	...

000077b8 <__sf_fake_stdout>:
	...

000077d8 <__sf_fake_stderr>:
	...
    77f8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7808:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7818:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7828:	00006665                                ef..

0000782c <_init>:
    782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7832:	bc08      	pop	{r3}
    7834:	469e      	mov	lr, r3
    7836:	4770      	bx	lr

00007838 <__init_array_start>:
    7838:	000000d9 	.word	0x000000d9

0000783c <_fini>:
    783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    783e:	46c0      	nop			; (mov r8, r8)
    7840:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7842:	bc08      	pop	{r3}
    7844:	469e      	mov	lr, r3
    7846:	4770      	bx	lr

00007848 <__fini_array_start>:
    7848:	000000b1 	.word	0x000000b1
