
CubesatFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075bc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000075bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c94  20000070  0000762c  00010070  2**2
                  ALLOC
  3 .stack        00002004  20003d04  0000b2c0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001f1b1  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cf7  00000000  00000000  0002f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003660  00000000  00000000  00031f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  000355fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e0  00000000  00000000  0003605b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000068ff  00000000  00000000  0003693b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d8de  00000000  00000000  0003d23a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d15a  00000000  00000000  0004ab18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002a20  00000000  00000000  000d7c74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005d08 	.word	0x20005d08
       4:	00004c85 	.word	0x00004c85
       8:	00004d09 	.word	0x00004d09
       c:	00004d09 	.word	0x00004d09
	...
      2c:	00002041 	.word	0x00002041
	...
      38:	00002135 	.word	0x00002135
      3c:	00002179 	.word	0x00002179
      40:	00004d09 	.word	0x00004d09
      44:	00004d09 	.word	0x00004d09
      48:	00004d09 	.word	0x00004d09
      4c:	00004d09 	.word	0x00004d09
      50:	00004d09 	.word	0x00004d09
      54:	00004d09 	.word	0x00004d09
      58:	00004d09 	.word	0x00004d09
      5c:	00004d09 	.word	0x00004d09
      60:	00004d09 	.word	0x00004d09
      64:	00001331 	.word	0x00001331
      68:	00001345 	.word	0x00001345
      6c:	00001359 	.word	0x00001359
      70:	0000136d 	.word	0x0000136d
      74:	00001381 	.word	0x00001381
      78:	00001395 	.word	0x00001395
      7c:	00004d09 	.word	0x00004d09
      80:	00004d09 	.word	0x00004d09
      84:	00004d09 	.word	0x00004d09
      88:	00004d09 	.word	0x00004d09
      8c:	00004d09 	.word	0x00004d09
      90:	00004d09 	.word	0x00004d09
      94:	00004d09 	.word	0x00004d09
      98:	00004d09 	.word	0x00004d09
      9c:	00004d09 	.word	0x00004d09
      a0:	00004d09 	.word	0x00004d09
      a4:	00004d09 	.word	0x00004d09
      a8:	00004d09 	.word	0x00004d09
      ac:	00004d09 	.word	0x00004d09

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000070 	.word	0x20000070
      d0:	00000000 	.word	0x00000000
      d4:	000075bc 	.word	0x000075bc

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	000075bc 	.word	0x000075bc
     104:	20000074 	.word	0x20000074
     108:	000075bc 	.word	0x000075bc
     10c:	00000000 	.word	0x00000000

00000110 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
     116:	1c02      	adds	r2, r0, #0
     118:	1dfb      	adds	r3, r7, #7
     11a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     11c:	1dfb      	adds	r3, r7, #7
     11e:	781b      	ldrb	r3, [r3, #0]
     120:	2b00      	cmp	r3, #0
     122:	d002      	beq.n	12a <system_voltage_reference_enable+0x1a>
     124:	2b01      	cmp	r3, #1
     126:	d007      	beq.n	138 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
     128:	e00d      	b.n	146 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     12a:	4b08      	ldr	r3, [pc, #32]	; (14c <system_voltage_reference_enable+0x3c>)
     12c:	4a07      	ldr	r2, [pc, #28]	; (14c <system_voltage_reference_enable+0x3c>)
     12e:	6c12      	ldr	r2, [r2, #64]	; 0x40
     130:	2102      	movs	r1, #2
     132:	430a      	orrs	r2, r1
     134:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     136:	e006      	b.n	146 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     138:	4b04      	ldr	r3, [pc, #16]	; (14c <system_voltage_reference_enable+0x3c>)
     13a:	4a04      	ldr	r2, [pc, #16]	; (14c <system_voltage_reference_enable+0x3c>)
     13c:	6c12      	ldr	r2, [r2, #64]	; 0x40
     13e:	2104      	movs	r1, #4
     140:	430a      	orrs	r2, r1
     142:	641a      	str	r2, [r3, #64]	; 0x40
			break;
     144:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
     146:	46bd      	mov	sp, r7
     148:	b002      	add	sp, #8
     14a:	bd80      	pop	{r7, pc}
     14c:	40000800 	.word	0x40000800

00000150 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
static inline void adc_get_config_defaults(struct adc_config *const config)
{
     150:	b580      	push	{r7, lr}
     152:	b082      	sub	sp, #8
     154:	af00      	add	r7, sp, #0
     156:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     158:	687b      	ldr	r3, [r7, #4]
     15a:	2200      	movs	r2, #0
     15c:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     15e:	687b      	ldr	r3, [r7, #4]
     160:	2200      	movs	r2, #0
     162:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     164:	687b      	ldr	r3, [r7, #4]
     166:	2200      	movs	r2, #0
     168:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     16a:	687b      	ldr	r3, [r7, #4]
     16c:	2200      	movs	r2, #0
     16e:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     170:	687b      	ldr	r3, [r7, #4]
     172:	2200      	movs	r2, #0
     174:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     176:	687b      	ldr	r3, [r7, #4]
     178:	2200      	movs	r2, #0
     17a:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     17c:	687b      	ldr	r3, [r7, #4]
     17e:	2200      	movs	r2, #0
     180:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     182:	687b      	ldr	r3, [r7, #4]
     184:	2200      	movs	r2, #0
     186:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     188:	687b      	ldr	r3, [r7, #4]
     18a:	2200      	movs	r2, #0
     18c:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     18e:	687b      	ldr	r3, [r7, #4]
     190:	22c0      	movs	r2, #192	; 0xc0
     192:	0152      	lsls	r2, r2, #5
     194:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     196:	687b      	ldr	r3, [r7, #4]
     198:	2200      	movs	r2, #0
     19a:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	2200      	movs	r2, #0
     1a0:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	2200      	movs	r2, #0
     1a6:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	2200      	movs	r2, #0
     1ac:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
     1ae:	687b      	ldr	r3, [r7, #4]
     1b0:	2200      	movs	r2, #0
     1b2:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	222a      	movs	r2, #42	; 0x2a
     1b8:	2100      	movs	r1, #0
     1ba:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2200      	movs	r2, #0
     1c0:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	2224      	movs	r2, #36	; 0x24
     1cc:	2100      	movs	r1, #0
     1ce:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1d0:	687b      	ldr	r3, [r7, #4]
     1d2:	2200      	movs	r2, #0
     1d4:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1d6:	687b      	ldr	r3, [r7, #4]
     1d8:	2200      	movs	r2, #0
     1da:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	2200      	movs	r2, #0
     1e0:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
     1e2:	687b      	ldr	r3, [r7, #4]
     1e4:	222b      	movs	r2, #43	; 0x2b
     1e6:	2100      	movs	r1, #0
     1e8:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
     1ea:	687b      	ldr	r3, [r7, #4]
     1ec:	222c      	movs	r2, #44	; 0x2c
     1ee:	2100      	movs	r1, #0
     1f0:	5499      	strb	r1, [r3, r2]
}
     1f2:	46bd      	mov	sp, r7
     1f4:	b002      	add	sp, #8
     1f6:	bd80      	pop	{r7, pc}

000001f8 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	b086      	sub	sp, #24
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     200:	687b      	ldr	r3, [r7, #4]
     202:	681b      	ldr	r3, [r3, #0]
     204:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
     206:	693b      	ldr	r3, [r7, #16]
     208:	7e1b      	ldrb	r3, [r3, #24]
     20a:	b2db      	uxtb	r3, r3
     20c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
     20e:	2300      	movs	r3, #0
     210:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
     212:	68fb      	ldr	r3, [r7, #12]
     214:	2201      	movs	r2, #1
     216:	4013      	ands	r3, r2
     218:	d003      	beq.n	222 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
     21a:	697b      	ldr	r3, [r7, #20]
     21c:	2201      	movs	r2, #1
     21e:	4313      	orrs	r3, r2
     220:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
     222:	68fb      	ldr	r3, [r7, #12]
     224:	2204      	movs	r2, #4
     226:	4013      	ands	r3, r2
     228:	d003      	beq.n	232 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
     22a:	697b      	ldr	r3, [r7, #20]
     22c:	2202      	movs	r2, #2
     22e:	4313      	orrs	r3, r2
     230:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     232:	68fb      	ldr	r3, [r7, #12]
     234:	2202      	movs	r2, #2
     236:	4013      	ands	r3, r2
     238:	d003      	beq.n	242 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
     23a:	697b      	ldr	r3, [r7, #20]
     23c:	2204      	movs	r2, #4
     23e:	4313      	orrs	r3, r2
     240:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
     242:	697b      	ldr	r3, [r7, #20]
}
     244:	1c18      	adds	r0, r3, #0
     246:	46bd      	mov	sp, r7
     248:	b006      	add	sp, #24
     24a:	bd80      	pop	{r7, pc}

0000024c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
     24c:	b580      	push	{r7, lr}
     24e:	b084      	sub	sp, #16
     250:	af00      	add	r7, sp, #0
     252:	6078      	str	r0, [r7, #4]
     254:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     256:	687b      	ldr	r3, [r7, #4]
     258:	681b      	ldr	r3, [r3, #0]
     25a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
     25c:	2300      	movs	r3, #0
     25e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
     260:	683b      	ldr	r3, [r7, #0]
     262:	2201      	movs	r2, #1
     264:	4013      	ands	r3, r2
     266:	d003      	beq.n	270 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
     268:	68fb      	ldr	r3, [r7, #12]
     26a:	2201      	movs	r2, #1
     26c:	4313      	orrs	r3, r2
     26e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
     270:	683b      	ldr	r3, [r7, #0]
     272:	2202      	movs	r2, #2
     274:	4013      	ands	r3, r2
     276:	d003      	beq.n	280 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	2204      	movs	r2, #4
     27c:	4313      	orrs	r3, r2
     27e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
     280:	683b      	ldr	r3, [r7, #0]
     282:	2204      	movs	r2, #4
     284:	4013      	ands	r3, r2
     286:	d003      	beq.n	290 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
     288:	68fb      	ldr	r3, [r7, #12]
     28a:	2202      	movs	r2, #2
     28c:	4313      	orrs	r3, r2
     28e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
     290:	68fb      	ldr	r3, [r7, #12]
     292:	b2da      	uxtb	r2, r3
     294:	68bb      	ldr	r3, [r7, #8]
     296:	761a      	strb	r2, [r3, #24]
}
     298:	46bd      	mov	sp, r7
     29a:	b004      	add	sp, #16
     29c:	bd80      	pop	{r7, pc}
     29e:	46c0      	nop			; (mov r8, r8)

000002a0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     2a0:	b580      	push	{r7, lr}
     2a2:	b084      	sub	sp, #16
     2a4:	af00      	add	r7, sp, #0
     2a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     2a8:	687b      	ldr	r3, [r7, #4]
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     2ae:	68fb      	ldr	r3, [r7, #12]
     2b0:	7e5b      	ldrb	r3, [r3, #25]
     2b2:	b2db      	uxtb	r3, r3
     2b4:	b2db      	uxtb	r3, r3
     2b6:	b25b      	sxtb	r3, r3
     2b8:	2b00      	cmp	r3, #0
     2ba:	da01      	bge.n	2c0 <adc_is_syncing+0x20>
		return true;
     2bc:	2301      	movs	r3, #1
     2be:	e000      	b.n	2c2 <adc_is_syncing+0x22>
	}

	return false;
     2c0:	2300      	movs	r3, #0
}
     2c2:	1c18      	adds	r0, r3, #0
     2c4:	46bd      	mov	sp, r7
     2c6:	b004      	add	sp, #16
     2c8:	bd80      	pop	{r7, pc}
     2ca:	46c0      	nop			; (mov r8, r8)

000002cc <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	b084      	sub	sp, #16
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	681b      	ldr	r3, [r3, #0]
     2d8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	1c18      	adds	r0, r3, #0
     2e0:	4b0b      	ldr	r3, [pc, #44]	; (310 <adc_enable+0x44>)
     2e2:	4798      	blx	r3
     2e4:	1e03      	subs	r3, r0, #0
     2e6:	d1f9      	bne.n	2dc <adc_enable+0x10>
		/* Wait for synchronization */
	}

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	791b      	ldrb	r3, [r3, #4]
     2ec:	2b00      	cmp	r3, #0
     2ee:	d102      	bne.n	2f6 <adc_enable+0x2a>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
     2f0:	2001      	movs	r0, #1
     2f2:	4b08      	ldr	r3, [pc, #32]	; (314 <adc_enable+0x48>)
     2f4:	4798      	blx	r3

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     2f6:	68fb      	ldr	r3, [r7, #12]
     2f8:	781b      	ldrb	r3, [r3, #0]
     2fa:	b2db      	uxtb	r3, r3
     2fc:	2202      	movs	r2, #2
     2fe:	4313      	orrs	r3, r2
     300:	b2da      	uxtb	r2, r3
     302:	68fb      	ldr	r3, [r7, #12]
     304:	701a      	strb	r2, [r3, #0]
	return STATUS_OK;
     306:	2300      	movs	r3, #0
}
     308:	1c18      	adds	r0, r3, #0
     30a:	46bd      	mov	sp, r7
     30c:	b004      	add	sp, #16
     30e:	bd80      	pop	{r7, pc}
     310:	000002a1 	.word	0x000002a1
     314:	00000111 	.word	0x00000111

00000318 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     318:	b580      	push	{r7, lr}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     320:	687b      	ldr	r3, [r7, #4]
     322:	681b      	ldr	r3, [r3, #0]
     324:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     326:	46c0      	nop			; (mov r8, r8)
     328:	687b      	ldr	r3, [r7, #4]
     32a:	1c18      	adds	r0, r3, #0
     32c:	4b07      	ldr	r3, [pc, #28]	; (34c <adc_start_conversion+0x34>)
     32e:	4798      	blx	r3
     330:	1e03      	subs	r3, r0, #0
     332:	d1f9      	bne.n	328 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     334:	68fb      	ldr	r3, [r7, #12]
     336:	7b1b      	ldrb	r3, [r3, #12]
     338:	b2db      	uxtb	r3, r3
     33a:	2202      	movs	r2, #2
     33c:	4313      	orrs	r3, r2
     33e:	b2da      	uxtb	r2, r3
     340:	68fb      	ldr	r3, [r7, #12]
     342:	731a      	strb	r2, [r3, #12]
}
     344:	46bd      	mov	sp, r7
     346:	b004      	add	sp, #16
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	000002a1 	.word	0x000002a1

00000350 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
     350:	b580      	push	{r7, lr}
     352:	b084      	sub	sp, #16
     354:	af00      	add	r7, sp, #0
     356:	6078      	str	r0, [r7, #4]
     358:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	1c18      	adds	r0, r3, #0
     35e:	4b18      	ldr	r3, [pc, #96]	; (3c0 <adc_read+0x70>)
     360:	4798      	blx	r3
     362:	1c02      	adds	r2, r0, #0
     364:	2301      	movs	r3, #1
     366:	4013      	ands	r3, r2
     368:	d101      	bne.n	36e <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
     36a:	2305      	movs	r3, #5
     36c:	e023      	b.n	3b6 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
     36e:	687b      	ldr	r3, [r7, #4]
     370:	681b      	ldr	r3, [r3, #0]
     372:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     374:	46c0      	nop			; (mov r8, r8)
     376:	687b      	ldr	r3, [r7, #4]
     378:	1c18      	adds	r0, r3, #0
     37a:	4b12      	ldr	r3, [pc, #72]	; (3c4 <adc_read+0x74>)
     37c:	4798      	blx	r3
     37e:	1e03      	subs	r3, r0, #0
     380:	d1f9      	bne.n	376 <adc_read+0x26>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     382:	68fb      	ldr	r3, [r7, #12]
     384:	8b5b      	ldrh	r3, [r3, #26]
     386:	b29a      	uxth	r2, r3
     388:	683b      	ldr	r3, [r7, #0]
     38a:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	1c18      	adds	r0, r3, #0
     390:	2101      	movs	r1, #1
     392:	4b0d      	ldr	r3, [pc, #52]	; (3c8 <adc_read+0x78>)
     394:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     396:	687b      	ldr	r3, [r7, #4]
     398:	1c18      	adds	r0, r3, #0
     39a:	4b09      	ldr	r3, [pc, #36]	; (3c0 <adc_read+0x70>)
     39c:	4798      	blx	r3
     39e:	1c02      	adds	r2, r0, #0
     3a0:	2304      	movs	r3, #4
     3a2:	4013      	ands	r3, r2
     3a4:	d006      	beq.n	3b4 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
     3a6:	687b      	ldr	r3, [r7, #4]
     3a8:	1c18      	adds	r0, r3, #0
     3aa:	2104      	movs	r1, #4
     3ac:	4b06      	ldr	r3, [pc, #24]	; (3c8 <adc_read+0x78>)
     3ae:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
     3b0:	231e      	movs	r3, #30
     3b2:	e000      	b.n	3b6 <adc_read+0x66>
	}

	return STATUS_OK;
     3b4:	2300      	movs	r3, #0
}
     3b6:	1c18      	adds	r0, r3, #0
     3b8:	46bd      	mov	sp, r7
     3ba:	b004      	add	sp, #16
     3bc:	bd80      	pop	{r7, pc}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	000001f9 	.word	0x000001f9
     3c4:	000002a1 	.word	0x000002a1
     3c8:	0000024d 	.word	0x0000024d

000003cc <configure_adc>:
 *  Author: Daniel
 */ 

#include "ADC_Commands.h"

void configure_adc(struct adc_module *adc_instance) {
     3cc:	b580      	push	{r7, lr}
     3ce:	b08e      	sub	sp, #56	; 0x38
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	struct adc_config config_adc;
	// setup_config_defaults
	adc_get_config_defaults(&config_adc);
     3d4:	2308      	movs	r3, #8
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	1c18      	adds	r0, r3, #0
     3da:	4b13      	ldr	r3, [pc, #76]	; (428 <configure_adc+0x5c>)
     3dc:	4798      	blx	r3

	config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
     3de:	2308      	movs	r3, #8
     3e0:	18fb      	adds	r3, r7, r3
     3e2:	22f0      	movs	r2, #240	; 0xf0
     3e4:	0512      	lsls	r2, r2, #20
     3e6:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
     3e8:	2308      	movs	r3, #8
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	2200      	movs	r2, #0
     3ee:	805a      	strh	r2, [r3, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
     3f0:	2308      	movs	r3, #8
     3f2:	18fb      	adds	r3, r7, r3
     3f4:	2200      	movs	r2, #0
     3f6:	705a      	strb	r2, [r3, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8; //PB00
     3f8:	2308      	movs	r3, #8
     3fa:	18fb      	adds	r3, r7, r3
     3fc:	2208      	movs	r2, #8
     3fe:	731a      	strb	r2, [r3, #12]
	config_adc.resolution = ADC_RESOLUTION_12BIT;
     400:	2308      	movs	r3, #8
     402:	18fb      	adds	r3, r7, r3
     404:	2200      	movs	r2, #0
     406:	711a      	strb	r2, [r3, #4]

	//setup_set_config
	adc_init(adc_instance, ADC, &config_adc);
     408:	687a      	ldr	r2, [r7, #4]
     40a:	4908      	ldr	r1, [pc, #32]	; (42c <configure_adc+0x60>)
     40c:	2308      	movs	r3, #8
     40e:	18fb      	adds	r3, r7, r3
     410:	1c10      	adds	r0, r2, #0
     412:	1c1a      	adds	r2, r3, #0
     414:	4b06      	ldr	r3, [pc, #24]	; (430 <configure_adc+0x64>)
     416:	4798      	blx	r3
	adc_enable(adc_instance);
     418:	687b      	ldr	r3, [r7, #4]
     41a:	1c18      	adds	r0, r3, #0
     41c:	4b05      	ldr	r3, [pc, #20]	; (434 <configure_adc+0x68>)
     41e:	4798      	blx	r3
}
     420:	46bd      	mov	sp, r7
     422:	b00e      	add	sp, #56	; 0x38
     424:	bd80      	pop	{r7, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	00000151 	.word	0x00000151
     42c:	42004000 	.word	0x42004000
     430:	00000c01 	.word	0x00000c01
     434:	000002cd 	.word	0x000002cd

00000438 <readVoltagemV>:

//reads the current voltage from the ADC connection
float readVoltagemV(struct adc_module adc_instance) {
     438:	b580      	push	{r7, lr}
     43a:	b084      	sub	sp, #16
     43c:	af00      	add	r7, sp, #0
     43e:	1c3b      	adds	r3, r7, #0
     440:	6018      	str	r0, [r3, #0]
     442:	6059      	str	r1, [r3, #4]
	if (!&adc_instance || !adc_instance.hw) {
     444:	1c3b      	adds	r3, r7, #0
     446:	681b      	ldr	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d101      	bne.n	450 <readVoltagemV+0x18>
		//You must configure the adc_instance and set it as a global variable.
		return -1;
     44c:	4b12      	ldr	r3, [pc, #72]	; (498 <readVoltagemV+0x60>)
     44e:	e01e      	b.n	48e <readVoltagemV+0x56>
	}
	
	uint16_t result = 0;
     450:	230a      	movs	r3, #10
     452:	18fb      	adds	r3, r7, r3
     454:	2200      	movs	r2, #0
     456:	801a      	strh	r2, [r3, #0]
	int status;
	
	//start conversion
	adc_start_conversion(&adc_instance);
     458:	1c3b      	adds	r3, r7, #0
     45a:	1c18      	adds	r0, r3, #0
     45c:	4b0f      	ldr	r3, [pc, #60]	; (49c <readVoltagemV+0x64>)
     45e:	4798      	blx	r3
	
	do {
		// Wait for conversion to be done and read out result
		status = adc_read(&adc_instance, &result);
     460:	1c3a      	adds	r2, r7, #0
     462:	230a      	movs	r3, #10
     464:	18fb      	adds	r3, r7, r3
     466:	1c10      	adds	r0, r2, #0
     468:	1c19      	adds	r1, r3, #0
     46a:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <readVoltagemV+0x68>)
     46c:	4798      	blx	r3
     46e:	1c03      	adds	r3, r0, #0
     470:	60fb      	str	r3, [r7, #12]
	} while (status == STATUS_BUSY);
     472:	68fb      	ldr	r3, [r7, #12]
     474:	2b05      	cmp	r3, #5
     476:	d0f3      	beq.n	460 <readVoltagemV+0x28>
	//float resFloat = result;
	return resultToVoltage(result);
     478:	230a      	movs	r3, #10
     47a:	18fb      	adds	r3, r7, r3
     47c:	881a      	ldrh	r2, [r3, #0]
     47e:	4b09      	ldr	r3, [pc, #36]	; (4a4 <readVoltagemV+0x6c>)
     480:	1c10      	adds	r0, r2, #0
     482:	4798      	blx	r3
     484:	1c03      	adds	r3, r0, #0
     486:	1c18      	adds	r0, r3, #0
     488:	4b07      	ldr	r3, [pc, #28]	; (4a8 <readVoltagemV+0x70>)
     48a:	4798      	blx	r3
     48c:	1c03      	adds	r3, r0, #0
}
     48e:	1c18      	adds	r0, r3, #0
     490:	46bd      	mov	sp, r7
     492:	b004      	add	sp, #16
     494:	bd80      	pop	{r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	bf800000 	.word	0xbf800000
     49c:	00000319 	.word	0x00000319
     4a0:	00000351 	.word	0x00000351
     4a4:	000054b1 	.word	0x000054b1
     4a8:	000004ad 	.word	0x000004ad

000004ac <resultToVoltage>:

float readVoltageV(struct adc_module adc_instance){
	return readVoltagemV(adc_instance)/1000;
} 

float resultToVoltage(float result) {
     4ac:	b590      	push	{r4, r7, lr}
     4ae:	b083      	sub	sp, #12
     4b0:	af00      	add	r7, sp, #0
     4b2:	6078      	str	r0, [r7, #4]
	return 5.599744685 + 0.4909903275 * result;
     4b4:	4b10      	ldr	r3, [pc, #64]	; (4f8 <resultToVoltage+0x4c>)
     4b6:	6878      	ldr	r0, [r7, #4]
     4b8:	4798      	blx	r3
     4ba:	1c02      	adds	r2, r0, #0
     4bc:	1c0b      	adds	r3, r1, #0
     4be:	4c0f      	ldr	r4, [pc, #60]	; (4fc <resultToVoltage+0x50>)
     4c0:	1c10      	adds	r0, r2, #0
     4c2:	1c19      	adds	r1, r3, #0
     4c4:	4a0e      	ldr	r2, [pc, #56]	; (500 <resultToVoltage+0x54>)
     4c6:	4b0f      	ldr	r3, [pc, #60]	; (504 <resultToVoltage+0x58>)
     4c8:	47a0      	blx	r4
     4ca:	1c03      	adds	r3, r0, #0
     4cc:	1c0c      	adds	r4, r1, #0
     4ce:	1c1a      	adds	r2, r3, #0
     4d0:	1c23      	adds	r3, r4, #0
     4d2:	4c0d      	ldr	r4, [pc, #52]	; (508 <resultToVoltage+0x5c>)
     4d4:	1c10      	adds	r0, r2, #0
     4d6:	1c19      	adds	r1, r3, #0
     4d8:	4a0c      	ldr	r2, [pc, #48]	; (50c <resultToVoltage+0x60>)
     4da:	4b0d      	ldr	r3, [pc, #52]	; (510 <resultToVoltage+0x64>)
     4dc:	47a0      	blx	r4
     4de:	1c03      	adds	r3, r0, #0
     4e0:	1c0c      	adds	r4, r1, #0
     4e2:	1c19      	adds	r1, r3, #0
     4e4:	1c22      	adds	r2, r4, #0
     4e6:	4b0b      	ldr	r3, [pc, #44]	; (514 <resultToVoltage+0x68>)
     4e8:	1c08      	adds	r0, r1, #0
     4ea:	1c11      	adds	r1, r2, #0
     4ec:	4798      	blx	r3
     4ee:	1c03      	adds	r3, r0, #0
}
     4f0:	1c18      	adds	r0, r3, #0
     4f2:	46bd      	mov	sp, r7
     4f4:	b003      	add	sp, #12
     4f6:	bd90      	pop	{r4, r7, pc}
     4f8:	000060c5 	.word	0x000060c5
     4fc:	00005b91 	.word	0x00005b91
     500:	b1d0f2f7 	.word	0xb1d0f2f7
     504:	3fdf6c62 	.word	0x3fdf6c62
     508:	00005541 	.word	0x00005541
     50c:	7880196b 	.word	0x7880196b
     510:	40166623 	.word	0x40166623
     514:	0000616d 	.word	0x0000616d

00000518 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     51e:	4b0f      	ldr	r3, [pc, #60]	; (55c <cpu_irq_enter_critical+0x44>)
     520:	681b      	ldr	r3, [r3, #0]
     522:	2b00      	cmp	r3, #0
     524:	d112      	bne.n	54c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     526:	f3ef 8310 	mrs	r3, PRIMASK
     52a:	607b      	str	r3, [r7, #4]
  return(result);
     52c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     52e:	2b00      	cmp	r3, #0
     530:	d109      	bne.n	546 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     532:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     534:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <cpu_irq_enter_critical+0x48>)
     53a:	2200      	movs	r2, #0
     53c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <cpu_irq_enter_critical+0x4c>)
     540:	2201      	movs	r2, #1
     542:	701a      	strb	r2, [r3, #0]
     544:	e002      	b.n	54c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     546:	4b07      	ldr	r3, [pc, #28]	; (564 <cpu_irq_enter_critical+0x4c>)
     548:	2200      	movs	r2, #0
     54a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     54c:	4b03      	ldr	r3, [pc, #12]	; (55c <cpu_irq_enter_critical+0x44>)
     54e:	681b      	ldr	r3, [r3, #0]
     550:	1c5a      	adds	r2, r3, #1
     552:	4b02      	ldr	r3, [pc, #8]	; (55c <cpu_irq_enter_critical+0x44>)
     554:	601a      	str	r2, [r3, #0]
}
     556:	46bd      	mov	sp, r7
     558:	b002      	add	sp, #8
     55a:	bd80      	pop	{r7, pc}
     55c:	2000008c 	.word	0x2000008c
     560:	20000000 	.word	0x20000000
     564:	20000090 	.word	0x20000090

00000568 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     568:	b580      	push	{r7, lr}
     56a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     56c:	4b0a      	ldr	r3, [pc, #40]	; (598 <cpu_irq_leave_critical+0x30>)
     56e:	681b      	ldr	r3, [r3, #0]
     570:	1e5a      	subs	r2, r3, #1
     572:	4b09      	ldr	r3, [pc, #36]	; (598 <cpu_irq_leave_critical+0x30>)
     574:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     576:	4b08      	ldr	r3, [pc, #32]	; (598 <cpu_irq_leave_critical+0x30>)
     578:	681b      	ldr	r3, [r3, #0]
     57a:	2b00      	cmp	r3, #0
     57c:	d10a      	bne.n	594 <cpu_irq_leave_critical+0x2c>
     57e:	4b07      	ldr	r3, [pc, #28]	; (59c <cpu_irq_leave_critical+0x34>)
     580:	781b      	ldrb	r3, [r3, #0]
     582:	b2db      	uxtb	r3, r3
     584:	2b00      	cmp	r3, #0
     586:	d005      	beq.n	594 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <cpu_irq_leave_critical+0x38>)
     58a:	2201      	movs	r2, #1
     58c:	701a      	strb	r2, [r3, #0]
     58e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     592:	b662      	cpsie	i
	}
}
     594:	46bd      	mov	sp, r7
     596:	bd80      	pop	{r7, pc}
     598:	2000008c 	.word	0x2000008c
     59c:	20000090 	.word	0x20000090
     5a0:	20000000 	.word	0x20000000

000005a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     5a4:	b580      	push	{r7, lr}
     5a6:	b082      	sub	sp, #8
     5a8:	af00      	add	r7, sp, #0
     5aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5ac:	687b      	ldr	r3, [r7, #4]
     5ae:	2200      	movs	r2, #0
     5b0:	701a      	strb	r2, [r3, #0]
}
     5b2:	46bd      	mov	sp, r7
     5b4:	b002      	add	sp, #8
     5b6:	bd80      	pop	{r7, pc}

000005b8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	1c02      	adds	r2, r0, #0
     5c0:	6039      	str	r1, [r7, #0]
     5c2:	1dfb      	adds	r3, r7, #7
     5c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5c6:	1dfb      	adds	r3, r7, #7
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b01      	cmp	r3, #1
     5cc:	d00a      	beq.n	5e4 <system_apb_clock_set_mask+0x2c>
     5ce:	2b02      	cmp	r3, #2
     5d0:	d00f      	beq.n	5f2 <system_apb_clock_set_mask+0x3a>
     5d2:	2b00      	cmp	r3, #0
     5d4:	d114      	bne.n	600 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     5d6:	4b0e      	ldr	r3, [pc, #56]	; (610 <system_apb_clock_set_mask+0x58>)
     5d8:	4a0d      	ldr	r2, [pc, #52]	; (610 <system_apb_clock_set_mask+0x58>)
     5da:	6991      	ldr	r1, [r2, #24]
     5dc:	683a      	ldr	r2, [r7, #0]
     5de:	430a      	orrs	r2, r1
     5e0:	619a      	str	r2, [r3, #24]
			break;
     5e2:	e00f      	b.n	604 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     5e4:	4b0a      	ldr	r3, [pc, #40]	; (610 <system_apb_clock_set_mask+0x58>)
     5e6:	4a0a      	ldr	r2, [pc, #40]	; (610 <system_apb_clock_set_mask+0x58>)
     5e8:	69d1      	ldr	r1, [r2, #28]
     5ea:	683a      	ldr	r2, [r7, #0]
     5ec:	430a      	orrs	r2, r1
     5ee:	61da      	str	r2, [r3, #28]
			break;
     5f0:	e008      	b.n	604 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5f2:	4b07      	ldr	r3, [pc, #28]	; (610 <system_apb_clock_set_mask+0x58>)
     5f4:	4a06      	ldr	r2, [pc, #24]	; (610 <system_apb_clock_set_mask+0x58>)
     5f6:	6a11      	ldr	r1, [r2, #32]
     5f8:	683a      	ldr	r2, [r7, #0]
     5fa:	430a      	orrs	r2, r1
     5fc:	621a      	str	r2, [r3, #32]
			break;
     5fe:	e001      	b.n	604 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     600:	2317      	movs	r3, #23
     602:	e000      	b.n	606 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     604:	2300      	movs	r3, #0
}
     606:	1c18      	adds	r0, r3, #0
     608:	46bd      	mov	sp, r7
     60a:	b002      	add	sp, #8
     60c:	bd80      	pop	{r7, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	40000400 	.word	0x40000400

00000614 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     614:	b580      	push	{r7, lr}
     616:	b082      	sub	sp, #8
     618:	af00      	add	r7, sp, #0
     61a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	2280      	movs	r2, #128	; 0x80
     620:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     622:	687b      	ldr	r3, [r7, #4]
     624:	2200      	movs	r2, #0
     626:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     628:	687b      	ldr	r3, [r7, #4]
     62a:	2201      	movs	r2, #1
     62c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     62e:	687b      	ldr	r3, [r7, #4]
     630:	2200      	movs	r2, #0
     632:	70da      	strb	r2, [r3, #3]
}
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)

0000063c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     63c:	b580      	push	{r7, lr}
     63e:	b084      	sub	sp, #16
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     644:	687b      	ldr	r3, [r7, #4]
     646:	681b      	ldr	r3, [r3, #0]
     648:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     64a:	68fb      	ldr	r3, [r7, #12]
     64c:	7e5b      	ldrb	r3, [r3, #25]
     64e:	b2db      	uxtb	r3, r3
     650:	b2db      	uxtb	r3, r3
     652:	b25b      	sxtb	r3, r3
     654:	2b00      	cmp	r3, #0
     656:	da01      	bge.n	65c <adc_is_syncing+0x20>
		return true;
     658:	2301      	movs	r3, #1
     65a:	e000      	b.n	65e <adc_is_syncing+0x22>
	}

	return false;
     65c:	2300      	movs	r3, #0
}
     65e:	1c18      	adds	r0, r3, #0
     660:	46bd      	mov	sp, r7
     662:	b004      	add	sp, #16
     664:	bd80      	pop	{r7, pc}
     666:	46c0      	nop			; (mov r8, r8)

00000668 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     668:	b580      	push	{r7, lr}
     66a:	b098      	sub	sp, #96	; 0x60
     66c:	af00      	add	r7, sp, #0
     66e:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     670:	230c      	movs	r3, #12
     672:	18fa      	adds	r2, r7, r3
     674:	4b15      	ldr	r3, [pc, #84]	; (6cc <_adc_configure_ain_pin+0x64>)
     676:	1c11      	adds	r1, r2, #0
     678:	1c1a      	adds	r2, r3, #0
     67a:	2350      	movs	r3, #80	; 0x50
     67c:	1c08      	adds	r0, r1, #0
     67e:	1c11      	adds	r1, r2, #0
     680:	1c1a      	adds	r2, r3, #0
     682:	4b13      	ldr	r3, [pc, #76]	; (6d0 <_adc_configure_ain_pin+0x68>)
     684:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     686:	4b13      	ldr	r3, [pc, #76]	; (6d4 <_adc_configure_ain_pin+0x6c>)
     688:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2b13      	cmp	r3, #19
     68e:	d81a      	bhi.n	6c6 <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     690:	230c      	movs	r3, #12
     692:	18fb      	adds	r3, r7, r3
     694:	687a      	ldr	r2, [r7, #4]
     696:	0092      	lsls	r2, r2, #2
     698:	58d3      	ldr	r3, [r2, r3]
     69a:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     69c:	2308      	movs	r3, #8
     69e:	18fb      	adds	r3, r7, r3
     6a0:	1c18      	adds	r0, r3, #0
     6a2:	4b0d      	ldr	r3, [pc, #52]	; (6d8 <_adc_configure_ain_pin+0x70>)
     6a4:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6a6:	2308      	movs	r3, #8
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	2200      	movs	r2, #0
     6ac:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     6ae:	2308      	movs	r3, #8
     6b0:	18fb      	adds	r3, r7, r3
     6b2:	2201      	movs	r2, #1
     6b4:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     6b8:	b2da      	uxtb	r2, r3
     6ba:	2308      	movs	r3, #8
     6bc:	18fb      	adds	r3, r7, r3
     6be:	1c10      	adds	r0, r2, #0
     6c0:	1c19      	adds	r1, r3, #0
     6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <_adc_configure_ain_pin+0x74>)
     6c4:	4798      	blx	r3
	}
}
     6c6:	46bd      	mov	sp, r7
     6c8:	b018      	add	sp, #96	; 0x60
     6ca:	bd80      	pop	{r7, pc}
     6cc:	0000726c 	.word	0x0000726c
     6d0:	00006315 	.word	0x00006315
     6d4:	0000ffff 	.word	0x0000ffff
     6d8:	00000615 	.word	0x00000615
     6dc:	00004c05 	.word	0x00004c05

000006e0 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e2:	b089      	sub	sp, #36	; 0x24
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
     6e8:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
     6ea:	231f      	movs	r3, #31
     6ec:	18fb      	adds	r3, r7, r3
     6ee:	2200      	movs	r2, #0
     6f0:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     6f2:	2310      	movs	r3, #16
     6f4:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6f6:	2317      	movs	r3, #23
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	2200      	movs	r2, #0
     6fc:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	681b      	ldr	r3, [r3, #0]
     702:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     704:	230c      	movs	r3, #12
     706:	18fb      	adds	r3, r7, r3
     708:	1c18      	adds	r0, r3, #0
     70a:	4bc1      	ldr	r3, [pc, #772]	; (a10 <_adc_set_config+0x330>)
     70c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     70e:	683b      	ldr	r3, [r7, #0]
     710:	781a      	ldrb	r2, [r3, #0]
     712:	230c      	movs	r3, #12
     714:	18fb      	adds	r3, r7, r3
     716:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     718:	230c      	movs	r3, #12
     71a:	18fb      	adds	r3, r7, r3
     71c:	201e      	movs	r0, #30
     71e:	1c19      	adds	r1, r3, #0
     720:	4bbc      	ldr	r3, [pc, #752]	; (a14 <_adc_set_config+0x334>)
     722:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     724:	201e      	movs	r0, #30
     726:	4bbc      	ldr	r3, [pc, #752]	; (a18 <_adc_set_config+0x338>)
     728:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     72a:	683b      	ldr	r3, [r7, #0]
     72c:	222c      	movs	r2, #44	; 0x2c
     72e:	5c9b      	ldrb	r3, [r3, r2]
     730:	2b00      	cmp	r3, #0
     732:	d040      	beq.n	7b6 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
     734:	2316      	movs	r3, #22
     736:	18fb      	adds	r3, r7, r3
     738:	683a      	ldr	r2, [r7, #0]
     73a:	212b      	movs	r1, #43	; 0x2b
     73c:	5c52      	ldrb	r2, [r2, r1]
     73e:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     740:	683b      	ldr	r3, [r7, #0]
     742:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     744:	2315      	movs	r3, #21
     746:	18fb      	adds	r3, r7, r3
     748:	2216      	movs	r2, #22
     74a:	18ba      	adds	r2, r7, r2
     74c:	7812      	ldrb	r2, [r2, #0]
     74e:	188a      	adds	r2, r1, r2
     750:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
     752:	683b      	ldr	r3, [r7, #0]
     754:	222c      	movs	r2, #44	; 0x2c
     756:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     758:	230f      	movs	r3, #15
     75a:	18fb      	adds	r3, r7, r3
     75c:	2215      	movs	r2, #21
     75e:	18ba      	adds	r2, r7, r2
     760:	7812      	ldrb	r2, [r2, #0]
     762:	188a      	adds	r2, r1, r2
     764:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     766:	e018      	b.n	79a <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     768:	2316      	movs	r3, #22
     76a:	18fb      	adds	r3, r7, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	220f      	movs	r2, #15
     770:	4013      	ands	r3, r2
     772:	683a      	ldr	r2, [r7, #0]
     774:	7b12      	ldrb	r2, [r2, #12]
     776:	189b      	adds	r3, r3, r2
     778:	1c18      	adds	r0, r3, #0
     77a:	4ba8      	ldr	r3, [pc, #672]	; (a1c <_adc_set_config+0x33c>)
     77c:	4798      	blx	r3
			start_pin++;
     77e:	2315      	movs	r3, #21
     780:	18fb      	adds	r3, r7, r3
     782:	781a      	ldrb	r2, [r3, #0]
     784:	2315      	movs	r3, #21
     786:	18fb      	adds	r3, r7, r3
     788:	3201      	adds	r2, #1
     78a:	701a      	strb	r2, [r3, #0]
			offset++;
     78c:	2316      	movs	r3, #22
     78e:	18fb      	adds	r3, r7, r3
     790:	781a      	ldrb	r2, [r3, #0]
     792:	2316      	movs	r3, #22
     794:	18fb      	adds	r3, r7, r3
     796:	3201      	adds	r2, #1
     798:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     79a:	2315      	movs	r3, #21
     79c:	18fa      	adds	r2, r7, r3
     79e:	230f      	movs	r3, #15
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	7812      	ldrb	r2, [r2, #0]
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	429a      	cmp	r2, r3
     7a8:	d3de      	bcc.n	768 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     7aa:	683b      	ldr	r3, [r7, #0]
     7ac:	89db      	ldrh	r3, [r3, #14]
     7ae:	1c18      	adds	r0, r3, #0
     7b0:	4b9a      	ldr	r3, [pc, #616]	; (a1c <_adc_set_config+0x33c>)
     7b2:	4798      	blx	r3
     7b4:	e009      	b.n	7ca <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	7b1b      	ldrb	r3, [r3, #12]
     7ba:	1c18      	adds	r0, r3, #0
     7bc:	4b97      	ldr	r3, [pc, #604]	; (a1c <_adc_set_config+0x33c>)
     7be:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
     7c0:	683b      	ldr	r3, [r7, #0]
     7c2:	89db      	ldrh	r3, [r3, #14]
     7c4:	1c18      	adds	r0, r3, #0
     7c6:	4b95      	ldr	r3, [pc, #596]	; (a1c <_adc_set_config+0x33c>)
     7c8:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	7d5b      	ldrb	r3, [r3, #21]
     7ce:	009b      	lsls	r3, r3, #2
     7d0:	b2da      	uxtb	r2, r3
     7d2:	693b      	ldr	r3, [r7, #16]
     7d4:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     7d6:	683b      	ldr	r3, [r7, #0]
     7d8:	7d9b      	ldrb	r3, [r3, #22]
     7da:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     7dc:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     7e2:	b2db      	uxtb	r3, r3
     7e4:	4313      	orrs	r3, r2
     7e6:	b2db      	uxtb	r3, r3
     7e8:	b2da      	uxtb	r2, r3
     7ea:	693b      	ldr	r3, [r7, #16]
     7ec:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	791b      	ldrb	r3, [r3, #4]
     7f2:	2b34      	cmp	r3, #52	; 0x34
     7f4:	d846      	bhi.n	884 <_adc_set_config+0x1a4>
     7f6:	009a      	lsls	r2, r3, #2
     7f8:	4b89      	ldr	r3, [pc, #548]	; (a20 <_adc_set_config+0x340>)
     7fa:	18d3      	adds	r3, r2, r3
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     800:	231f      	movs	r3, #31
     802:	18fb      	adds	r3, r7, r3
     804:	683a      	ldr	r2, [r7, #0]
     806:	7c52      	ldrb	r2, [r2, #17]
     808:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     80a:	2317      	movs	r3, #23
     80c:	18fb      	adds	r3, r7, r3
     80e:	683a      	ldr	r2, [r7, #0]
     810:	7c12      	ldrb	r2, [r2, #16]
     812:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     814:	2310      	movs	r3, #16
     816:	61bb      	str	r3, [r7, #24]
		break;
     818:	e036      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     81a:	231f      	movs	r3, #31
     81c:	18fb      	adds	r3, r7, r3
     81e:	2201      	movs	r2, #1
     820:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     822:	2317      	movs	r3, #23
     824:	18fb      	adds	r3, r7, r3
     826:	2202      	movs	r2, #2
     828:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     82a:	2310      	movs	r3, #16
     82c:	61bb      	str	r3, [r7, #24]
		break;
     82e:	e02b      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     830:	231f      	movs	r3, #31
     832:	18fb      	adds	r3, r7, r3
     834:	2202      	movs	r2, #2
     836:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     838:	2317      	movs	r3, #23
     83a:	18fb      	adds	r3, r7, r3
     83c:	2204      	movs	r2, #4
     83e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     840:	2310      	movs	r3, #16
     842:	61bb      	str	r3, [r7, #24]
		break;
     844:	e020      	b.n	888 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     846:	231f      	movs	r3, #31
     848:	18fb      	adds	r3, r7, r3
     84a:	2201      	movs	r2, #1
     84c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     84e:	2317      	movs	r3, #23
     850:	18fb      	adds	r3, r7, r3
     852:	2206      	movs	r2, #6
     854:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     856:	2310      	movs	r3, #16
     858:	61bb      	str	r3, [r7, #24]
		break;
     85a:	e015      	b.n	888 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     85c:	231f      	movs	r3, #31
     85e:	18fb      	adds	r3, r7, r3
     860:	2200      	movs	r2, #0
     862:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     864:	2317      	movs	r3, #23
     866:	18fb      	adds	r3, r7, r3
     868:	2208      	movs	r2, #8
     86a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     86c:	2310      	movs	r3, #16
     86e:	61bb      	str	r3, [r7, #24]
		break;
     870:	e00a      	b.n	888 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     872:	2330      	movs	r3, #48	; 0x30
     874:	61bb      	str	r3, [r7, #24]
		break;
     876:	e007      	b.n	888 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     878:	2320      	movs	r3, #32
     87a:	61bb      	str	r3, [r7, #24]
		break;
     87c:	e004      	b.n	888 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     87e:	2300      	movs	r3, #0
     880:	61bb      	str	r3, [r7, #24]
		break;
     882:	e001      	b.n	888 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     884:	2317      	movs	r3, #23
     886:	e1a5      	b.n	bd4 <_adc_set_config+0x4f4>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     888:	231f      	movs	r3, #31
     88a:	18fb      	adds	r3, r7, r3
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	011b      	lsls	r3, r3, #4
     890:	b2db      	uxtb	r3, r3
     892:	2270      	movs	r2, #112	; 0x70
     894:	4013      	ands	r3, r2
     896:	b2da      	uxtb	r2, r3
     898:	2317      	movs	r3, #23
     89a:	18fb      	adds	r3, r7, r3
     89c:	781b      	ldrb	r3, [r3, #0]
     89e:	4313      	orrs	r3, r2
     8a0:	b2da      	uxtb	r2, r3
     8a2:	693b      	ldr	r3, [r7, #16]
     8a4:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     8a6:	683b      	ldr	r3, [r7, #0]
     8a8:	7ddb      	ldrb	r3, [r3, #23]
     8aa:	2b3f      	cmp	r3, #63	; 0x3f
     8ac:	d901      	bls.n	8b2 <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
     8ae:	2317      	movs	r3, #23
     8b0:	e190      	b.n	bd4 <_adc_set_config+0x4f4>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
     8b2:	683b      	ldr	r3, [r7, #0]
     8b4:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     8b6:	693b      	ldr	r3, [r7, #16]
     8b8:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	1c18      	adds	r0, r3, #0
     8c0:	4b58      	ldr	r3, [pc, #352]	; (a24 <_adc_set_config+0x344>)
     8c2:	4798      	blx	r3
     8c4:	1e03      	subs	r3, r0, #0
     8c6:	d1f9      	bne.n	8bc <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8cc:	69bb      	ldr	r3, [r7, #24]
     8ce:	b29b      	uxth	r3, r3
     8d0:	4313      	orrs	r3, r2
     8d2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     8d4:	683b      	ldr	r3, [r7, #0]
     8d6:	2124      	movs	r1, #36	; 0x24
     8d8:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8da:	b29b      	uxth	r3, r3
     8dc:	00db      	lsls	r3, r3, #3
     8de:	b29b      	uxth	r3, r3
     8e0:	4313      	orrs	r3, r2
     8e2:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     8e4:	683b      	ldr	r3, [r7, #0]
     8e6:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8e8:	b29b      	uxth	r3, r3
     8ea:	009b      	lsls	r3, r3, #2
     8ec:	b29b      	uxth	r3, r3
     8ee:	4313      	orrs	r3, r2
     8f0:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8f2:	683b      	ldr	r3, [r7, #0]
     8f4:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     8f6:	b29b      	uxth	r3, r3
     8f8:	18db      	adds	r3, r3, r3
     8fa:	b29b      	uxth	r3, r3
     8fc:	4313      	orrs	r3, r2
     8fe:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     900:	683b      	ldr	r3, [r7, #0]
     902:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     904:	b29b      	uxth	r3, r3
     906:	4313      	orrs	r3, r2
     908:	b29a      	uxth	r2, r3
     90a:	693b      	ldr	r3, [r7, #16]
     90c:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     90e:	683b      	ldr	r3, [r7, #0]
     910:	7e1b      	ldrb	r3, [r3, #24]
     912:	2b00      	cmp	r3, #0
     914:	d100      	bne.n	918 <_adc_set_config+0x238>
     916:	e0bc      	b.n	a92 <_adc_set_config+0x3b2>
		switch (resolution) {
     918:	69bb      	ldr	r3, [r7, #24]
     91a:	2b10      	cmp	r3, #16
     91c:	d100      	bne.n	920 <_adc_set_config+0x240>
     91e:	e091      	b.n	a44 <_adc_set_config+0x364>
     920:	d802      	bhi.n	928 <_adc_set_config+0x248>
     922:	2b00      	cmp	r3, #0
     924:	d04d      	beq.n	9c2 <_adc_set_config+0x2e2>
     926:	e0b4      	b.n	a92 <_adc_set_config+0x3b2>
     928:	2b20      	cmp	r3, #32
     92a:	d023      	beq.n	974 <_adc_set_config+0x294>
     92c:	2b30      	cmp	r3, #48	; 0x30
     92e:	d000      	beq.n	932 <_adc_set_config+0x252>
     930:	e0af      	b.n	a92 <_adc_set_config+0x3b2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     932:	683b      	ldr	r3, [r7, #0]
     934:	7cdb      	ldrb	r3, [r3, #19]
     936:	2b00      	cmp	r3, #0
     938:	d011      	beq.n	95e <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
     93a:	683b      	ldr	r3, [r7, #0]
     93c:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     93e:	2b7f      	cmp	r3, #127	; 0x7f
     940:	dc0b      	bgt.n	95a <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     942:	683b      	ldr	r3, [r7, #0]
     944:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
     946:	3380      	adds	r3, #128	; 0x80
     948:	db07      	blt.n	95a <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     94a:	683b      	ldr	r3, [r7, #0]
     94c:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     94e:	2b7f      	cmp	r3, #127	; 0x7f
     950:	dc03      	bgt.n	95a <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
     952:	683b      	ldr	r3, [r7, #0]
     954:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
     956:	3380      	adds	r3, #128	; 0x80
     958:	da01      	bge.n	95e <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     95a:	2317      	movs	r3, #23
     95c:	e13a      	b.n	bd4 <_adc_set_config+0x4f4>
			} else if (config->window.window_lower_value > 255 ||
     95e:	683b      	ldr	r3, [r7, #0]
     960:	69db      	ldr	r3, [r3, #28]
     962:	2bff      	cmp	r3, #255	; 0xff
     964:	dc03      	bgt.n	96e <_adc_set_config+0x28e>
					config->window.window_upper_value > 255){
     966:	683b      	ldr	r3, [r7, #0]
     968:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     96a:	2bff      	cmp	r3, #255	; 0xff
     96c:	dd01      	ble.n	972 <_adc_set_config+0x292>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     96e:	2317      	movs	r3, #23
     970:	e130      	b.n	bd4 <_adc_set_config+0x4f4>
			}
			break;
     972:	e08e      	b.n	a92 <_adc_set_config+0x3b2>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     974:	683b      	ldr	r3, [r7, #0]
     976:	7cdb      	ldrb	r3, [r3, #19]
     978:	2b00      	cmp	r3, #0
     97a:	d015      	beq.n	9a8 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
     97c:	683b      	ldr	r3, [r7, #0]
     97e:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     980:	4a29      	ldr	r2, [pc, #164]	; (a28 <_adc_set_config+0x348>)
     982:	4293      	cmp	r3, r2
     984:	dc0e      	bgt.n	9a4 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     986:	683b      	ldr	r3, [r7, #0]
     988:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
     98a:	4a28      	ldr	r2, [pc, #160]	; (a2c <_adc_set_config+0x34c>)
     98c:	4293      	cmp	r3, r2
     98e:	db09      	blt.n	9a4 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     990:	683b      	ldr	r3, [r7, #0]
     992:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
     994:	4a24      	ldr	r2, [pc, #144]	; (a28 <_adc_set_config+0x348>)
     996:	4293      	cmp	r3, r2
     998:	dc04      	bgt.n	9a4 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
     99a:	683b      	ldr	r3, [r7, #0]
     99c:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     99e:	4a24      	ldr	r2, [pc, #144]	; (a30 <_adc_set_config+0x350>)
     9a0:	4293      	cmp	r3, r2
     9a2:	db01      	blt.n	9a8 <_adc_set_config+0x2c8>
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9a4:	2317      	movs	r3, #23
     9a6:	e115      	b.n	bd4 <_adc_set_config+0x4f4>
			} else if (config->window.window_lower_value > 1023 ||
     9a8:	683b      	ldr	r3, [r7, #0]
     9aa:	69db      	ldr	r3, [r3, #28]
     9ac:	4a21      	ldr	r2, [pc, #132]	; (a34 <_adc_set_config+0x354>)
     9ae:	4293      	cmp	r3, r2
     9b0:	dc04      	bgt.n	9bc <_adc_set_config+0x2dc>
					config->window.window_upper_value > 1023){
     9b2:	683b      	ldr	r3, [r7, #0]
     9b4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     9b6:	4a1f      	ldr	r2, [pc, #124]	; (a34 <_adc_set_config+0x354>)
     9b8:	4293      	cmp	r3, r2
     9ba:	dd01      	ble.n	9c0 <_adc_set_config+0x2e0>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9bc:	2317      	movs	r3, #23
     9be:	e109      	b.n	bd4 <_adc_set_config+0x4f4>
			}
			break;
     9c0:	e067      	b.n	a92 <_adc_set_config+0x3b2>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9c2:	683b      	ldr	r3, [r7, #0]
     9c4:	7cdb      	ldrb	r3, [r3, #19]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d015      	beq.n	9f6 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
     9ca:	683b      	ldr	r3, [r7, #0]
     9cc:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9ce:	4a1a      	ldr	r2, [pc, #104]	; (a38 <_adc_set_config+0x358>)
     9d0:	4293      	cmp	r3, r2
     9d2:	dc0e      	bgt.n	9f2 <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     9d4:	683b      	ldr	r3, [r7, #0]
     9d6:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
     9d8:	4a18      	ldr	r2, [pc, #96]	; (a3c <_adc_set_config+0x35c>)
     9da:	4293      	cmp	r3, r2
     9dc:	db09      	blt.n	9f2 <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     9de:	683b      	ldr	r3, [r7, #0]
     9e0:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     9e2:	4a15      	ldr	r2, [pc, #84]	; (a38 <_adc_set_config+0x358>)
     9e4:	4293      	cmp	r3, r2
     9e6:	dc04      	bgt.n	9f2 <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
     9ec:	4a13      	ldr	r2, [pc, #76]	; (a3c <_adc_set_config+0x35c>)
     9ee:	4293      	cmp	r3, r2
     9f0:	da01      	bge.n	9f6 <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9f2:	2317      	movs	r3, #23
     9f4:	e0ee      	b.n	bd4 <_adc_set_config+0x4f4>
			} else if (config->window.window_lower_value > 4095 ||
     9f6:	683b      	ldr	r3, [r7, #0]
     9f8:	69db      	ldr	r3, [r3, #28]
     9fa:	4a11      	ldr	r2, [pc, #68]	; (a40 <_adc_set_config+0x360>)
     9fc:	4293      	cmp	r3, r2
     9fe:	dc04      	bgt.n	a0a <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
     a00:	683b      	ldr	r3, [r7, #0]
     a02:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     a04:	4a0e      	ldr	r2, [pc, #56]	; (a40 <_adc_set_config+0x360>)
     a06:	4293      	cmp	r3, r2
     a08:	dd01      	ble.n	a0e <_adc_set_config+0x32e>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a0a:	2317      	movs	r3, #23
     a0c:	e0e2      	b.n	bd4 <_adc_set_config+0x4f4>
			}
			break;
     a0e:	e040      	b.n	a92 <_adc_set_config+0x3b2>
     a10:	000005a5 	.word	0x000005a5
     a14:	00004919 	.word	0x00004919
     a18:	0000495d 	.word	0x0000495d
     a1c:	00000669 	.word	0x00000669
     a20:	000072bc 	.word	0x000072bc
     a24:	0000063d 	.word	0x0000063d
     a28:	000001ff 	.word	0x000001ff
     a2c:	fffffe00 	.word	0xfffffe00
     a30:	fffffe01 	.word	0xfffffe01
     a34:	000003ff 	.word	0x000003ff
     a38:	000007ff 	.word	0x000007ff
     a3c:	fffff800 	.word	0xfffff800
     a40:	00000fff 	.word	0x00000fff
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a44:	683b      	ldr	r3, [r7, #0]
     a46:	7cdb      	ldrb	r3, [r3, #19]
     a48:	2b00      	cmp	r3, #0
     a4a:	d015      	beq.n	a78 <_adc_set_config+0x398>
					(config->window.window_lower_value > 32767 ||
     a4c:	683b      	ldr	r3, [r7, #0]
     a4e:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a50:	4a62      	ldr	r2, [pc, #392]	; (bdc <_adc_set_config+0x4fc>)
     a52:	4293      	cmp	r3, r2
     a54:	dc0e      	bgt.n	a74 <_adc_set_config+0x394>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     a56:	683b      	ldr	r3, [r7, #0]
     a58:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
     a5a:	4a61      	ldr	r2, [pc, #388]	; (be0 <_adc_set_config+0x500>)
     a5c:	4293      	cmp	r3, r2
     a5e:	db09      	blt.n	a74 <_adc_set_config+0x394>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     a60:	683b      	ldr	r3, [r7, #0]
     a62:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     a64:	4a5d      	ldr	r2, [pc, #372]	; (bdc <_adc_set_config+0x4fc>)
     a66:	4293      	cmp	r3, r2
     a68:	dc04      	bgt.n	a74 <_adc_set_config+0x394>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
     a6a:	683b      	ldr	r3, [r7, #0]
     a6c:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
     a6e:	4a5c      	ldr	r2, [pc, #368]	; (be0 <_adc_set_config+0x500>)
     a70:	4293      	cmp	r3, r2
     a72:	da01      	bge.n	a78 <_adc_set_config+0x398>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a74:	2317      	movs	r3, #23
     a76:	e0ad      	b.n	bd4 <_adc_set_config+0x4f4>
			} else if (config->window.window_lower_value > 65535 ||
     a78:	683b      	ldr	r3, [r7, #0]
     a7a:	69db      	ldr	r3, [r3, #28]
     a7c:	4a59      	ldr	r2, [pc, #356]	; (be4 <_adc_set_config+0x504>)
     a7e:	4293      	cmp	r3, r2
     a80:	dc04      	bgt.n	a8c <_adc_set_config+0x3ac>
					config->window.window_upper_value > 65535){
     a82:	683b      	ldr	r3, [r7, #0]
     a84:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     a86:	4a57      	ldr	r2, [pc, #348]	; (be4 <_adc_set_config+0x504>)
     a88:	4293      	cmp	r3, r2
     a8a:	dd01      	ble.n	a90 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a8c:	2317      	movs	r3, #23
     a8e:	e0a1      	b.n	bd4 <_adc_set_config+0x4f4>
			}
			break;
     a90:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	1c18      	adds	r0, r3, #0
     a98:	4b53      	ldr	r3, [pc, #332]	; (be8 <_adc_set_config+0x508>)
     a9a:	4798      	blx	r3
     a9c:	1e03      	subs	r3, r0, #0
     a9e:	d1f9      	bne.n	a94 <_adc_set_config+0x3b4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     aa0:	683b      	ldr	r3, [r7, #0]
     aa2:	7e1a      	ldrb	r2, [r3, #24]
     aa4:	693b      	ldr	r3, [r7, #16]
     aa6:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     aa8:	46c0      	nop			; (mov r8, r8)
     aaa:	687b      	ldr	r3, [r7, #4]
     aac:	1c18      	adds	r0, r3, #0
     aae:	4b4e      	ldr	r3, [pc, #312]	; (be8 <_adc_set_config+0x508>)
     ab0:	4798      	blx	r3
     ab2:	1e03      	subs	r3, r0, #0
     ab4:	d1f9      	bne.n	aaa <_adc_set_config+0x3ca>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     ab6:	683b      	ldr	r3, [r7, #0]
     ab8:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     aba:	b29a      	uxth	r2, r3
     abc:	693b      	ldr	r3, [r7, #16]
     abe:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     ac0:	46c0      	nop			; (mov r8, r8)
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	1c18      	adds	r0, r3, #0
     ac6:	4b48      	ldr	r3, [pc, #288]	; (be8 <_adc_set_config+0x508>)
     ac8:	4798      	blx	r3
     aca:	1e03      	subs	r3, r0, #0
     acc:	d1f9      	bne.n	ac2 <_adc_set_config+0x3e2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ace:	683b      	ldr	r3, [r7, #0]
     ad0:	6a1b      	ldr	r3, [r3, #32]
     ad2:	b29a      	uxth	r2, r3
     ad4:	693b      	ldr	r3, [r7, #16]
     ad6:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ad8:	2314      	movs	r3, #20
     ada:	18fb      	adds	r3, r7, r3
     adc:	683a      	ldr	r2, [r7, #0]
     ade:	212c      	movs	r1, #44	; 0x2c
     ae0:	5c52      	ldrb	r2, [r2, r1]
     ae2:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     ae4:	2314      	movs	r3, #20
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	781b      	ldrb	r3, [r3, #0]
     aea:	2b00      	cmp	r3, #0
     aec:	d006      	beq.n	afc <_adc_set_config+0x41c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     aee:	2314      	movs	r3, #20
     af0:	18fb      	adds	r3, r7, r3
     af2:	781a      	ldrb	r2, [r3, #0]
     af4:	2314      	movs	r3, #20
     af6:	18fb      	adds	r3, r7, r3
     af8:	3a01      	subs	r2, #1
     afa:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     afc:	2314      	movs	r3, #20
     afe:	18fb      	adds	r3, r7, r3
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b0f      	cmp	r3, #15
     b04:	d804      	bhi.n	b10 <_adc_set_config+0x430>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     b06:	683b      	ldr	r3, [r7, #0]
     b08:	222b      	movs	r2, #43	; 0x2b
     b0a:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     b0c:	2b0f      	cmp	r3, #15
     b0e:	d901      	bls.n	b14 <_adc_set_config+0x434>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     b10:	2317      	movs	r3, #23
     b12:	e05f      	b.n	bd4 <_adc_set_config+0x4f4>
	}

	while (adc_is_syncing(module_inst)) {
     b14:	46c0      	nop			; (mov r8, r8)
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	1c18      	adds	r0, r3, #0
     b1a:	4b33      	ldr	r3, [pc, #204]	; (be8 <_adc_set_config+0x508>)
     b1c:	4798      	blx	r3
     b1e:	1e03      	subs	r3, r0, #0
     b20:	d1f9      	bne.n	b16 <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     b22:	683b      	ldr	r3, [r7, #0]
     b24:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
     b26:	683a      	ldr	r2, [r7, #0]
     b28:	212b      	movs	r1, #43	; 0x2b
     b2a:	5c52      	ldrb	r2, [r2, r1]
     b2c:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
     b2e:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b30:	2214      	movs	r2, #20
     b32:	18ba      	adds	r2, r7, r2
     b34:	7812      	ldrb	r2, [r2, #0]
     b36:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     b38:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     b3a:	683a      	ldr	r2, [r7, #0]
     b3c:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b3e:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
     b40:	683a      	ldr	r2, [r7, #0]
     b42:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
     b44:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     b46:	693b      	ldr	r3, [r7, #16]
     b48:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     b4a:	683b      	ldr	r3, [r7, #0]
     b4c:	222a      	movs	r2, #42	; 0x2a
     b4e:	5c9a      	ldrb	r2, [r3, r2]
     b50:	693b      	ldr	r3, [r7, #16]
     b52:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     b54:	693b      	ldr	r3, [r7, #16]
     b56:	220f      	movs	r2, #15
     b58:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     b5a:	683b      	ldr	r3, [r7, #0]
     b5c:	2224      	movs	r2, #36	; 0x24
     b5e:	5c9b      	ldrb	r3, [r3, r2]
     b60:	2b00      	cmp	r3, #0
     b62:	d01d      	beq.n	ba0 <_adc_set_config+0x4c0>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b64:	683b      	ldr	r3, [r7, #0]
     b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     b68:	4a20      	ldr	r2, [pc, #128]	; (bec <_adc_set_config+0x50c>)
     b6a:	4293      	cmp	r3, r2
     b6c:	d901      	bls.n	b72 <_adc_set_config+0x492>
			return STATUS_ERR_INVALID_ARG;
     b6e:	2317      	movs	r3, #23
     b70:	e030      	b.n	bd4 <_adc_set_config+0x4f4>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     b72:	683b      	ldr	r3, [r7, #0]
     b74:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     b76:	693b      	ldr	r3, [r7, #16]
     b78:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b7a:	683b      	ldr	r3, [r7, #0]
     b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b7e:	b21b      	sxth	r3, r3
     b80:	4a1b      	ldr	r2, [pc, #108]	; (bf0 <_adc_set_config+0x510>)
     b82:	4293      	cmp	r3, r2
     b84:	dc05      	bgt.n	b92 <_adc_set_config+0x4b2>
				config->correction.offset_correction < -2048) {
     b86:	683b      	ldr	r3, [r7, #0]
     b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b8a:	b21b      	sxth	r3, r3
     b8c:	4a19      	ldr	r2, [pc, #100]	; (bf4 <_adc_set_config+0x514>)
     b8e:	4293      	cmp	r3, r2
     b90:	da01      	bge.n	b96 <_adc_set_config+0x4b6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     b92:	2317      	movs	r3, #23
     b94:	e01e      	b.n	bd4 <_adc_set_config+0x4f4>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     b96:	683b      	ldr	r3, [r7, #0]
     b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     b9a:	b29a      	uxth	r2, r3
     b9c:	693b      	ldr	r3, [r7, #16]
     b9e:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     ba0:	4b15      	ldr	r3, [pc, #84]	; (bf8 <_adc_set_config+0x518>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     ba6:	b29b      	uxth	r3, r3
     ba8:	021b      	lsls	r3, r3, #8
     baa:	b29a      	uxth	r2, r3
     bac:	23e0      	movs	r3, #224	; 0xe0
     bae:	00db      	lsls	r3, r3, #3
     bb0:	4013      	ands	r3, r2
     bb2:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     bb4:	4b11      	ldr	r3, [pc, #68]	; (bfc <_adc_set_config+0x51c>)
     bb6:	685c      	ldr	r4, [r3, #4]
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	0161      	lsls	r1, r4, #5
     bbc:	0edd      	lsrs	r5, r3, #27
     bbe:	430d      	orrs	r5, r1
     bc0:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     bc2:	b2ab      	uxth	r3, r5
     bc4:	21ff      	movs	r1, #255	; 0xff
     bc6:	400b      	ands	r3, r1
     bc8:	b29b      	uxth	r3, r3
     bca:	4313      	orrs	r3, r2
     bcc:	b29a      	uxth	r2, r3
     bce:	693b      	ldr	r3, [r7, #16]
     bd0:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     bd2:	2300      	movs	r3, #0
}
     bd4:	1c18      	adds	r0, r3, #0
     bd6:	46bd      	mov	sp, r7
     bd8:	b009      	add	sp, #36	; 0x24
     bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bdc:	00007fff 	.word	0x00007fff
     be0:	ffff8000 	.word	0xffff8000
     be4:	0000ffff 	.word	0x0000ffff
     be8:	0000063d 	.word	0x0000063d
     bec:	00000fff 	.word	0x00000fff
     bf0:	000007ff 	.word	0x000007ff
     bf4:	fffff800 	.word	0xfffff800
     bf8:	00806024 	.word	0x00806024
     bfc:	00806020 	.word	0x00806020

00000c00 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c00:	b580      	push	{r7, lr}
     c02:	b084      	sub	sp, #16
     c04:	af00      	add	r7, sp, #0
     c06:	60f8      	str	r0, [r7, #12]
     c08:	60b9      	str	r1, [r7, #8]
     c0a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	68ba      	ldr	r2, [r7, #8]
     c10:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
     c12:	2380      	movs	r3, #128	; 0x80
     c14:	025b      	lsls	r3, r3, #9
     c16:	2002      	movs	r0, #2
     c18:	1c19      	adds	r1, r3, #0
     c1a:	4b11      	ldr	r3, [pc, #68]	; (c60 <adc_init+0x60>)
     c1c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     c1e:	68bb      	ldr	r3, [r7, #8]
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	b2db      	uxtb	r3, r3
     c24:	1c1a      	adds	r2, r3, #0
     c26:	2301      	movs	r3, #1
     c28:	4013      	ands	r3, r2
     c2a:	d001      	beq.n	c30 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c2c:	2305      	movs	r3, #5
     c2e:	e013      	b.n	c58 <adc_init+0x58>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c30:	68bb      	ldr	r3, [r7, #8]
     c32:	781b      	ldrb	r3, [r3, #0]
     c34:	b2db      	uxtb	r3, r3
     c36:	1c1a      	adds	r2, r3, #0
     c38:	2302      	movs	r3, #2
     c3a:	4013      	ands	r3, r2
     c3c:	d001      	beq.n	c42 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     c3e:	231c      	movs	r3, #28
     c40:	e00a      	b.n	c58 <adc_init+0x58>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	785a      	ldrb	r2, [r3, #1]
     c46:	68fb      	ldr	r3, [r7, #12]
     c48:	711a      	strb	r2, [r3, #4]
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     c4a:	68fa      	ldr	r2, [r7, #12]
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	1c10      	adds	r0, r2, #0
     c50:	1c19      	adds	r1, r3, #0
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <adc_init+0x64>)
     c54:	4798      	blx	r3
     c56:	1c03      	adds	r3, r0, #0
}
     c58:	1c18      	adds	r0, r3, #0
     c5a:	46bd      	mov	sp, r7
     c5c:	b004      	add	sp, #16
     c5e:	bd80      	pop	{r7, pc}
     c60:	000005b9 	.word	0x000005b9
     c64:	000006e1 	.word	0x000006e1

00000c68 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     c68:	b580      	push	{r7, lr}
     c6a:	b082      	sub	sp, #8
     c6c:	af00      	add	r7, sp, #0
     c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	2200      	movs	r2, #0
     c74:	701a      	strb	r2, [r3, #0]
}
     c76:	46bd      	mov	sp, r7
     c78:	b002      	add	sp, #8
     c7a:	bd80      	pop	{r7, pc}

00000c7c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7e:	b08d      	sub	sp, #52	; 0x34
     c80:	af00      	add	r7, sp, #0
     c82:	60b8      	str	r0, [r7, #8]
     c84:	60f9      	str	r1, [r7, #12]
     c86:	603a      	str	r2, [r7, #0]
     c88:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c8a:	2300      	movs	r3, #0
     c8c:	2400      	movs	r4, #0
     c8e:	623b      	str	r3, [r7, #32]
     c90:	627c      	str	r4, [r7, #36]	; 0x24
     c92:	2300      	movs	r3, #0
     c94:	2400      	movs	r4, #0
     c96:	61bb      	str	r3, [r7, #24]
     c98:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     c9a:	233f      	movs	r3, #63	; 0x3f
     c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
     c9e:	e053      	b.n	d48 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca2:	3b20      	subs	r3, #32
     ca4:	2b00      	cmp	r3, #0
     ca6:	db04      	blt.n	cb2 <long_division+0x36>
     ca8:	2201      	movs	r2, #1
     caa:	409a      	lsls	r2, r3
     cac:	1c13      	adds	r3, r2, #0
     cae:	617b      	str	r3, [r7, #20]
     cb0:	e00b      	b.n	cca <long_division+0x4e>
     cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cb4:	2220      	movs	r2, #32
     cb6:	1ad3      	subs	r3, r2, r3
     cb8:	2201      	movs	r2, #1
     cba:	40da      	lsrs	r2, r3
     cbc:	1c13      	adds	r3, r2, #0
     cbe:	2100      	movs	r1, #0
     cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cc2:	4091      	lsls	r1, r2
     cc4:	1c0a      	adds	r2, r1, #0
     cc6:	4313      	orrs	r3, r2
     cc8:	617b      	str	r3, [r7, #20]
     cca:	2201      	movs	r2, #1
     ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cce:	409a      	lsls	r2, r3
     cd0:	1c13      	adds	r3, r2, #0
     cd2:	613b      	str	r3, [r7, #16]

		r = r << 1;
     cd4:	69bb      	ldr	r3, [r7, #24]
     cd6:	69fc      	ldr	r4, [r7, #28]
     cd8:	18db      	adds	r3, r3, r3
     cda:	4164      	adcs	r4, r4
     cdc:	61bb      	str	r3, [r7, #24]
     cde:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     ce0:	68bb      	ldr	r3, [r7, #8]
     ce2:	693a      	ldr	r2, [r7, #16]
     ce4:	401a      	ands	r2, r3
     ce6:	1c15      	adds	r5, r2, #0
     ce8:	68fb      	ldr	r3, [r7, #12]
     cea:	697a      	ldr	r2, [r7, #20]
     cec:	401a      	ands	r2, r3
     cee:	1c16      	adds	r6, r2, #0
     cf0:	1c2b      	adds	r3, r5, #0
     cf2:	4333      	orrs	r3, r6
     cf4:	d007      	beq.n	d06 <long_division+0x8a>
			r |= 0x01;
     cf6:	69bb      	ldr	r3, [r7, #24]
     cf8:	2201      	movs	r2, #1
     cfa:	4313      	orrs	r3, r2
     cfc:	61bb      	str	r3, [r7, #24]
     cfe:	69fb      	ldr	r3, [r7, #28]
     d00:	2200      	movs	r2, #0
     d02:	4313      	orrs	r3, r2
     d04:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     d06:	687a      	ldr	r2, [r7, #4]
     d08:	69fb      	ldr	r3, [r7, #28]
     d0a:	429a      	cmp	r2, r3
     d0c:	d819      	bhi.n	d42 <long_division+0xc6>
     d0e:	687a      	ldr	r2, [r7, #4]
     d10:	69fb      	ldr	r3, [r7, #28]
     d12:	429a      	cmp	r2, r3
     d14:	d103      	bne.n	d1e <long_division+0xa2>
     d16:	683a      	ldr	r2, [r7, #0]
     d18:	69bb      	ldr	r3, [r7, #24]
     d1a:	429a      	cmp	r2, r3
     d1c:	d811      	bhi.n	d42 <long_division+0xc6>
			r = r - d;
     d1e:	69b9      	ldr	r1, [r7, #24]
     d20:	69fa      	ldr	r2, [r7, #28]
     d22:	683b      	ldr	r3, [r7, #0]
     d24:	687c      	ldr	r4, [r7, #4]
     d26:	1ac9      	subs	r1, r1, r3
     d28:	41a2      	sbcs	r2, r4
     d2a:	1c0b      	adds	r3, r1, #0
     d2c:	1c14      	adds	r4, r2, #0
     d2e:	61bb      	str	r3, [r7, #24]
     d30:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     d32:	6a3a      	ldr	r2, [r7, #32]
     d34:	693b      	ldr	r3, [r7, #16]
     d36:	4313      	orrs	r3, r2
     d38:	623b      	str	r3, [r7, #32]
     d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d3c:	697b      	ldr	r3, [r7, #20]
     d3e:	4313      	orrs	r3, r2
     d40:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d44:	3b01      	subs	r3, #1
     d46:	62fb      	str	r3, [r7, #44]	; 0x2c
     d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d4a:	2b00      	cmp	r3, #0
     d4c:	daa8      	bge.n	ca0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     d4e:	6a3b      	ldr	r3, [r7, #32]
     d50:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     d52:	1c18      	adds	r0, r3, #0
     d54:	1c21      	adds	r1, r4, #0
     d56:	46bd      	mov	sp, r7
     d58:	b00d      	add	sp, #52	; 0x34
     d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d5c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b086      	sub	sp, #24
     d60:	af00      	add	r7, sp, #0
     d62:	60f8      	str	r0, [r7, #12]
     d64:	60b9      	str	r1, [r7, #8]
     d66:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     d68:	2316      	movs	r3, #22
     d6a:	18fb      	adds	r3, r7, r3
     d6c:	2200      	movs	r2, #0
     d6e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     d70:	68bb      	ldr	r3, [r7, #8]
     d72:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     d74:	68bb      	ldr	r3, [r7, #8]
     d76:	085a      	lsrs	r2, r3, #1
     d78:	68fb      	ldr	r3, [r7, #12]
     d7a:	429a      	cmp	r2, r3
     d7c:	d201      	bcs.n	d82 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d7e:	2340      	movs	r3, #64	; 0x40
     d80:	e026      	b.n	dd0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     d82:	68bb      	ldr	r3, [r7, #8]
     d84:	085b      	lsrs	r3, r3, #1
     d86:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     d88:	e00a      	b.n	da0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     d8a:	693a      	ldr	r2, [r7, #16]
     d8c:	68fb      	ldr	r3, [r7, #12]
     d8e:	1ad3      	subs	r3, r2, r3
     d90:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     d92:	2316      	movs	r3, #22
     d94:	18fb      	adds	r3, r7, r3
     d96:	881a      	ldrh	r2, [r3, #0]
     d98:	2316      	movs	r3, #22
     d9a:	18fb      	adds	r3, r7, r3
     d9c:	3201      	adds	r2, #1
     d9e:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     da0:	693a      	ldr	r2, [r7, #16]
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	429a      	cmp	r2, r3
     da6:	d2f0      	bcs.n	d8a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     da8:	2316      	movs	r3, #22
     daa:	18fb      	adds	r3, r7, r3
     dac:	2216      	movs	r2, #22
     dae:	18ba      	adds	r2, r7, r2
     db0:	8812      	ldrh	r2, [r2, #0]
     db2:	3a01      	subs	r2, #1
     db4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     db6:	2316      	movs	r3, #22
     db8:	18fb      	adds	r3, r7, r3
     dba:	881b      	ldrh	r3, [r3, #0]
     dbc:	2bff      	cmp	r3, #255	; 0xff
     dbe:	d901      	bls.n	dc4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dc0:	2340      	movs	r3, #64	; 0x40
     dc2:	e005      	b.n	dd0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	2216      	movs	r2, #22
     dc8:	18ba      	adds	r2, r7, r2
     dca:	8812      	ldrh	r2, [r2, #0]
     dcc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     dce:	2300      	movs	r3, #0
	}
}
     dd0:	1c18      	adds	r0, r3, #0
     dd2:	46bd      	mov	sp, r7
     dd4:	b006      	add	sp, #24
     dd6:	bd80      	pop	{r7, pc}

00000dd8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dda:	b09d      	sub	sp, #116	; 0x74
     ddc:	af00      	add	r7, sp, #0
     dde:	63f8      	str	r0, [r7, #60]	; 0x3c
     de0:	63b9      	str	r1, [r7, #56]	; 0x38
     de2:	637a      	str	r2, [r7, #52]	; 0x34
     de4:	2233      	movs	r2, #51	; 0x33
     de6:	18ba      	adds	r2, r7, r2
     de8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     dea:	2300      	movs	r3, #0
     dec:	2400      	movs	r4, #0
     dee:	65bb      	str	r3, [r7, #88]	; 0x58
     df0:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
     df2:	2300      	movs	r3, #0
     df4:	2400      	movs	r4, #0
     df6:	653b      	str	r3, [r7, #80]	; 0x50
     df8:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
     dfa:	2300      	movs	r3, #0
     dfc:	2400      	movs	r4, #0
     dfe:	66bb      	str	r3, [r7, #104]	; 0x68
     e00:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     e02:	2300      	movs	r3, #0
     e04:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e06:	2358      	movs	r3, #88	; 0x58
     e08:	2230      	movs	r2, #48	; 0x30
     e0a:	4694      	mov	ip, r2
     e0c:	44bc      	add	ip, r7
     e0e:	4463      	add	r3, ip
     e10:	781a      	ldrb	r2, [r3, #0]
     e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e14:	435a      	muls	r2, r3
     e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e18:	429a      	cmp	r2, r3
     e1a:	d901      	bls.n	e20 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e1c:	2340      	movs	r3, #64	; 0x40
     e1e:	e0c9      	b.n	fb4 <_sercom_get_async_baud_val+0x1dc>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     e20:	2333      	movs	r3, #51	; 0x33
     e22:	18fb      	adds	r3, r7, r3
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	2b00      	cmp	r3, #0
     e28:	d13f      	bne.n	eaa <_sercom_get_async_baud_val+0xd2>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     e2a:	2358      	movs	r3, #88	; 0x58
     e2c:	2230      	movs	r2, #48	; 0x30
     e2e:	4694      	mov	ip, r2
     e30:	44bc      	add	ip, r7
     e32:	4463      	add	r3, ip
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	b2db      	uxtb	r3, r3
     e38:	613b      	str	r3, [r7, #16]
     e3a:	2300      	movs	r3, #0
     e3c:	617b      	str	r3, [r7, #20]
     e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e40:	60bb      	str	r3, [r7, #8]
     e42:	2300      	movs	r3, #0
     e44:	60fb      	str	r3, [r7, #12]
     e46:	4c5d      	ldr	r4, [pc, #372]	; (fbc <_sercom_get_async_baud_val+0x1e4>)
     e48:	6938      	ldr	r0, [r7, #16]
     e4a:	6979      	ldr	r1, [r7, #20]
     e4c:	68ba      	ldr	r2, [r7, #8]
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	47a0      	blx	r4
     e52:	1c03      	adds	r3, r0, #0
     e54:	1c0c      	adds	r4, r1, #0
     e56:	001b      	movs	r3, r3
     e58:	64fb      	str	r3, [r7, #76]	; 0x4c
     e5a:	2300      	movs	r3, #0
     e5c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
     e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e60:	603b      	str	r3, [r7, #0]
     e62:	2300      	movs	r3, #0
     e64:	607b      	str	r3, [r7, #4]
     e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     e68:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
     e6a:	1c18      	adds	r0, r3, #0
     e6c:	1c21      	adds	r1, r4, #0
     e6e:	683a      	ldr	r2, [r7, #0]
     e70:	687b      	ldr	r3, [r7, #4]
     e72:	4c53      	ldr	r4, [pc, #332]	; (fc0 <_sercom_get_async_baud_val+0x1e8>)
     e74:	47a0      	blx	r4
     e76:	1c03      	adds	r3, r0, #0
     e78:	1c0c      	adds	r4, r1, #0
     e7a:	65bb      	str	r3, [r7, #88]	; 0x58
     e7c:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
     e7e:	2100      	movs	r1, #0
     e80:	2201      	movs	r2, #1
     e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     e84:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     e86:	1ac9      	subs	r1, r1, r3
     e88:	41a2      	sbcs	r2, r4
     e8a:	1c0b      	adds	r3, r1, #0
     e8c:	1c14      	adds	r4, r2, #0
     e8e:	653b      	str	r3, [r7, #80]	; 0x50
     e90:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
     e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     e94:	0c1b      	lsrs	r3, r3, #16
     e96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     e98:	0416      	lsls	r6, r2, #16
     e9a:	431e      	orrs	r6, r3
     e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     e9e:	041d      	lsls	r5, r3, #16
     ea0:	0033      	movs	r3, r6
     ea2:	66bb      	str	r3, [r7, #104]	; 0x68
     ea4:	2300      	movs	r3, #0
     ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
     ea8:	e07e      	b.n	fa8 <_sercom_get_async_baud_val+0x1d0>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     eaa:	2333      	movs	r3, #51	; 0x33
     eac:	18fb      	adds	r3, r7, r3
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	2b01      	cmp	r3, #1
     eb2:	d000      	beq.n	eb6 <_sercom_get_async_baud_val+0xde>
     eb4:	e078      	b.n	fa8 <_sercom_get_async_baud_val+0x1d0>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     eb6:	2337      	movs	r3, #55	; 0x37
     eb8:	2230      	movs	r2, #48	; 0x30
     eba:	4694      	mov	ip, r2
     ebc:	44bc      	add	ip, r7
     ebe:	4463      	add	r3, ip
     ec0:	2200      	movs	r2, #0
     ec2:	701a      	strb	r2, [r3, #0]
     ec4:	e051      	b.n	f6a <_sercom_get_async_baud_val+0x192>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ec8:	62bb      	str	r3, [r7, #40]	; 0x28
     eca:	2300      	movs	r3, #0
     ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
     ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
     ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     ed2:	1c03      	adds	r3, r0, #0
     ed4:	0f5b      	lsrs	r3, r3, #29
     ed6:	1c0a      	adds	r2, r1, #0
     ed8:	00d2      	lsls	r2, r2, #3
     eda:	4313      	orrs	r3, r2
     edc:	64fb      	str	r3, [r7, #76]	; 0x4c
     ede:	1c03      	adds	r3, r0, #0
     ee0:	00db      	lsls	r3, r3, #3
     ee2:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
     ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     ee6:	623b      	str	r3, [r7, #32]
     ee8:	2300      	movs	r3, #0
     eea:	627b      	str	r3, [r7, #36]	; 0x24
     eec:	2358      	movs	r3, #88	; 0x58
     eee:	2230      	movs	r2, #48	; 0x30
     ef0:	4694      	mov	ip, r2
     ef2:	44bc      	add	ip, r7
     ef4:	4463      	add	r3, ip
     ef6:	781b      	ldrb	r3, [r3, #0]
     ef8:	b2db      	uxtb	r3, r3
     efa:	61bb      	str	r3, [r7, #24]
     efc:	2300      	movs	r3, #0
     efe:	61fb      	str	r3, [r7, #28]
     f00:	4c2e      	ldr	r4, [pc, #184]	; (fbc <_sercom_get_async_baud_val+0x1e4>)
     f02:	6a38      	ldr	r0, [r7, #32]
     f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
     f06:	69ba      	ldr	r2, [r7, #24]
     f08:	69fb      	ldr	r3, [r7, #28]
     f0a:	47a0      	blx	r4
     f0c:	1c03      	adds	r3, r0, #0
     f0e:	1c0c      	adds	r4, r1, #0
     f10:	643b      	str	r3, [r7, #64]	; 0x40
     f12:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
     f14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
     f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
     f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f1a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
     f1c:	1c08      	adds	r0, r1, #0
     f1e:	1c11      	adds	r1, r2, #0
     f20:	1c1a      	adds	r2, r3, #0
     f22:	1c23      	adds	r3, r4, #0
     f24:	4c26      	ldr	r4, [pc, #152]	; (fc0 <_sercom_get_async_baud_val+0x1e8>)
     f26:	47a0      	blx	r4
     f28:	1c03      	adds	r3, r0, #0
     f2a:	1c0c      	adds	r4, r1, #0
     f2c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
     f2e:	2337      	movs	r3, #55	; 0x37
     f30:	2230      	movs	r2, #48	; 0x30
     f32:	4694      	mov	ip, r2
     f34:	44bc      	add	ip, r7
     f36:	4463      	add	r3, ip
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     f3c:	1ad3      	subs	r3, r2, r3
     f3e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
     f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     f42:	08db      	lsrs	r3, r3, #3
     f44:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
     f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     f48:	4a1e      	ldr	r2, [pc, #120]	; (fc4 <_sercom_get_async_baud_val+0x1ec>)
     f4a:	4293      	cmp	r3, r2
     f4c:	d800      	bhi.n	f50 <_sercom_get_async_baud_val+0x178>
				break;
     f4e:	e014      	b.n	f7a <_sercom_get_async_baud_val+0x1a2>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     f50:	2337      	movs	r3, #55	; 0x37
     f52:	2230      	movs	r2, #48	; 0x30
     f54:	4694      	mov	ip, r2
     f56:	44bc      	add	ip, r7
     f58:	4463      	add	r3, ip
     f5a:	781a      	ldrb	r2, [r3, #0]
     f5c:	2337      	movs	r3, #55	; 0x37
     f5e:	2130      	movs	r1, #48	; 0x30
     f60:	468c      	mov	ip, r1
     f62:	44bc      	add	ip, r7
     f64:	4463      	add	r3, ip
     f66:	3201      	adds	r2, #1
     f68:	701a      	strb	r2, [r3, #0]
     f6a:	2337      	movs	r3, #55	; 0x37
     f6c:	2230      	movs	r2, #48	; 0x30
     f6e:	4694      	mov	ip, r2
     f70:	44bc      	add	ip, r7
     f72:	4463      	add	r3, ip
     f74:	781b      	ldrb	r3, [r3, #0]
     f76:	2b07      	cmp	r3, #7
     f78:	d9a5      	bls.n	ec6 <_sercom_get_async_baud_val+0xee>
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     f7a:	2337      	movs	r3, #55	; 0x37
     f7c:	2230      	movs	r2, #48	; 0x30
     f7e:	4694      	mov	ip, r2
     f80:	44bc      	add	ip, r7
     f82:	4463      	add	r3, ip
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2b08      	cmp	r3, #8
     f88:	d101      	bne.n	f8e <_sercom_get_async_baud_val+0x1b6>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f8a:	2340      	movs	r3, #64	; 0x40
     f8c:	e012      	b.n	fb4 <_sercom_get_async_baud_val+0x1dc>
		}
		baud_calculated = baud_int | (baud_fp << 13);
     f8e:	2337      	movs	r3, #55	; 0x37
     f90:	2230      	movs	r2, #48	; 0x30
     f92:	4694      	mov	ip, r2
     f94:	44bc      	add	ip, r7
     f96:	4463      	add	r3, ip
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	035b      	lsls	r3, r3, #13
     f9c:	1c1a      	adds	r2, r3, #0
     f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     fa0:	4313      	orrs	r3, r2
     fa2:	66bb      	str	r3, [r7, #104]	; 0x68
     fa4:	2300      	movs	r3, #0
     fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
     fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     faa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
     fac:	b29a      	uxth	r2, r3
     fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fb0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     fb2:	2300      	movs	r3, #0
}
     fb4:	1c18      	adds	r0, r3, #0
     fb6:	46bd      	mov	sp, r7
     fb8:	b01d      	add	sp, #116	; 0x74
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fbc:	0000541d 	.word	0x0000541d
     fc0:	00000c7d 	.word	0x00000c7d
     fc4:	00001fff 	.word	0x00001fff

00000fc8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b084      	sub	sp, #16
     fcc:	af00      	add	r7, sp, #0
     fce:	1c02      	adds	r2, r0, #0
     fd0:	1dfb      	adds	r3, r7, #7
     fd2:	701a      	strb	r2, [r3, #0]
     fd4:	1dbb      	adds	r3, r7, #6
     fd6:	1c0a      	adds	r2, r1, #0
     fd8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     fda:	4b1a      	ldr	r3, [pc, #104]	; (1044 <sercom_set_gclk_generator+0x7c>)
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2201      	movs	r2, #1
     fe0:	4053      	eors	r3, r2
     fe2:	b2db      	uxtb	r3, r3
     fe4:	2b00      	cmp	r3, #0
     fe6:	d103      	bne.n	ff0 <sercom_set_gclk_generator+0x28>
     fe8:	1dbb      	adds	r3, r7, #6
     fea:	781b      	ldrb	r3, [r3, #0]
     fec:	2b00      	cmp	r3, #0
     fee:	d01b      	beq.n	1028 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     ff0:	230c      	movs	r3, #12
     ff2:	18fb      	adds	r3, r7, r3
     ff4:	1c18      	adds	r0, r3, #0
     ff6:	4b14      	ldr	r3, [pc, #80]	; (1048 <sercom_set_gclk_generator+0x80>)
     ff8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     ffa:	230c      	movs	r3, #12
     ffc:	18fb      	adds	r3, r7, r3
     ffe:	1dfa      	adds	r2, r7, #7
    1000:	7812      	ldrb	r2, [r2, #0]
    1002:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1004:	230c      	movs	r3, #12
    1006:	18fb      	adds	r3, r7, r3
    1008:	2013      	movs	r0, #19
    100a:	1c19      	adds	r1, r3, #0
    100c:	4b0f      	ldr	r3, [pc, #60]	; (104c <sercom_set_gclk_generator+0x84>)
    100e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1010:	2013      	movs	r0, #19
    1012:	4b0f      	ldr	r3, [pc, #60]	; (1050 <sercom_set_gclk_generator+0x88>)
    1014:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    1016:	4b0b      	ldr	r3, [pc, #44]	; (1044 <sercom_set_gclk_generator+0x7c>)
    1018:	1dfa      	adds	r2, r7, #7
    101a:	7812      	ldrb	r2, [r2, #0]
    101c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    101e:	4b09      	ldr	r3, [pc, #36]	; (1044 <sercom_set_gclk_generator+0x7c>)
    1020:	2201      	movs	r2, #1
    1022:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1024:	2300      	movs	r3, #0
    1026:	e008      	b.n	103a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    1028:	4b06      	ldr	r3, [pc, #24]	; (1044 <sercom_set_gclk_generator+0x7c>)
    102a:	785b      	ldrb	r3, [r3, #1]
    102c:	1dfa      	adds	r2, r7, #7
    102e:	7812      	ldrb	r2, [r2, #0]
    1030:	429a      	cmp	r2, r3
    1032:	d101      	bne.n	1038 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    1034:	2300      	movs	r3, #0
    1036:	e000      	b.n	103a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1038:	231d      	movs	r3, #29
}
    103a:	1c18      	adds	r0, r3, #0
    103c:	46bd      	mov	sp, r7
    103e:	b004      	add	sp, #16
    1040:	bd80      	pop	{r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	20000094 	.word	0x20000094
    1048:	00000c69 	.word	0x00000c69
    104c:	00004919 	.word	0x00004919
    1050:	0000495d 	.word	0x0000495d

00001054 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1054:	b580      	push	{r7, lr}
    1056:	b082      	sub	sp, #8
    1058:	af00      	add	r7, sp, #0
    105a:	6078      	str	r0, [r7, #4]
    105c:	1c0a      	adds	r2, r1, #0
    105e:	1cfb      	adds	r3, r7, #3
    1060:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	4a4d      	ldr	r2, [pc, #308]	; (119c <_sercom_get_default_pad+0x148>)
    1066:	4293      	cmp	r3, r2
    1068:	d03f      	beq.n	10ea <_sercom_get_default_pad+0x96>
    106a:	4a4c      	ldr	r2, [pc, #304]	; (119c <_sercom_get_default_pad+0x148>)
    106c:	4293      	cmp	r3, r2
    106e:	d806      	bhi.n	107e <_sercom_get_default_pad+0x2a>
    1070:	4a4b      	ldr	r2, [pc, #300]	; (11a0 <_sercom_get_default_pad+0x14c>)
    1072:	4293      	cmp	r3, r2
    1074:	d00f      	beq.n	1096 <_sercom_get_default_pad+0x42>
    1076:	4a4b      	ldr	r2, [pc, #300]	; (11a4 <_sercom_get_default_pad+0x150>)
    1078:	4293      	cmp	r3, r2
    107a:	d021      	beq.n	10c0 <_sercom_get_default_pad+0x6c>
    107c:	e089      	b.n	1192 <_sercom_get_default_pad+0x13e>
    107e:	4a4a      	ldr	r2, [pc, #296]	; (11a8 <_sercom_get_default_pad+0x154>)
    1080:	4293      	cmp	r3, r2
    1082:	d100      	bne.n	1086 <_sercom_get_default_pad+0x32>
    1084:	e05b      	b.n	113e <_sercom_get_default_pad+0xea>
    1086:	4a49      	ldr	r2, [pc, #292]	; (11ac <_sercom_get_default_pad+0x158>)
    1088:	4293      	cmp	r3, r2
    108a:	d100      	bne.n	108e <_sercom_get_default_pad+0x3a>
    108c:	e06c      	b.n	1168 <_sercom_get_default_pad+0x114>
    108e:	4a48      	ldr	r2, [pc, #288]	; (11b0 <_sercom_get_default_pad+0x15c>)
    1090:	4293      	cmp	r3, r2
    1092:	d03f      	beq.n	1114 <_sercom_get_default_pad+0xc0>
    1094:	e07d      	b.n	1192 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1096:	1cfb      	adds	r3, r7, #3
    1098:	781b      	ldrb	r3, [r3, #0]
    109a:	2b01      	cmp	r3, #1
    109c:	d00a      	beq.n	10b4 <_sercom_get_default_pad+0x60>
    109e:	dc02      	bgt.n	10a6 <_sercom_get_default_pad+0x52>
    10a0:	2b00      	cmp	r3, #0
    10a2:	d005      	beq.n	10b0 <_sercom_get_default_pad+0x5c>
    10a4:	e075      	b.n	1192 <_sercom_get_default_pad+0x13e>
    10a6:	2b02      	cmp	r3, #2
    10a8:	d006      	beq.n	10b8 <_sercom_get_default_pad+0x64>
    10aa:	2b03      	cmp	r3, #3
    10ac:	d006      	beq.n	10bc <_sercom_get_default_pad+0x68>
    10ae:	e070      	b.n	1192 <_sercom_get_default_pad+0x13e>
    10b0:	4b40      	ldr	r3, [pc, #256]	; (11b4 <_sercom_get_default_pad+0x160>)
    10b2:	e06f      	b.n	1194 <_sercom_get_default_pad+0x140>
    10b4:	4b40      	ldr	r3, [pc, #256]	; (11b8 <_sercom_get_default_pad+0x164>)
    10b6:	e06d      	b.n	1194 <_sercom_get_default_pad+0x140>
    10b8:	4b40      	ldr	r3, [pc, #256]	; (11bc <_sercom_get_default_pad+0x168>)
    10ba:	e06b      	b.n	1194 <_sercom_get_default_pad+0x140>
    10bc:	4b40      	ldr	r3, [pc, #256]	; (11c0 <_sercom_get_default_pad+0x16c>)
    10be:	e069      	b.n	1194 <_sercom_get_default_pad+0x140>
    10c0:	1cfb      	adds	r3, r7, #3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2b01      	cmp	r3, #1
    10c6:	d00a      	beq.n	10de <_sercom_get_default_pad+0x8a>
    10c8:	dc02      	bgt.n	10d0 <_sercom_get_default_pad+0x7c>
    10ca:	2b00      	cmp	r3, #0
    10cc:	d005      	beq.n	10da <_sercom_get_default_pad+0x86>
    10ce:	e060      	b.n	1192 <_sercom_get_default_pad+0x13e>
    10d0:	2b02      	cmp	r3, #2
    10d2:	d006      	beq.n	10e2 <_sercom_get_default_pad+0x8e>
    10d4:	2b03      	cmp	r3, #3
    10d6:	d006      	beq.n	10e6 <_sercom_get_default_pad+0x92>
    10d8:	e05b      	b.n	1192 <_sercom_get_default_pad+0x13e>
    10da:	2303      	movs	r3, #3
    10dc:	e05a      	b.n	1194 <_sercom_get_default_pad+0x140>
    10de:	4b39      	ldr	r3, [pc, #228]	; (11c4 <_sercom_get_default_pad+0x170>)
    10e0:	e058      	b.n	1194 <_sercom_get_default_pad+0x140>
    10e2:	4b39      	ldr	r3, [pc, #228]	; (11c8 <_sercom_get_default_pad+0x174>)
    10e4:	e056      	b.n	1194 <_sercom_get_default_pad+0x140>
    10e6:	4b39      	ldr	r3, [pc, #228]	; (11cc <_sercom_get_default_pad+0x178>)
    10e8:	e054      	b.n	1194 <_sercom_get_default_pad+0x140>
    10ea:	1cfb      	adds	r3, r7, #3
    10ec:	781b      	ldrb	r3, [r3, #0]
    10ee:	2b01      	cmp	r3, #1
    10f0:	d00a      	beq.n	1108 <_sercom_get_default_pad+0xb4>
    10f2:	dc02      	bgt.n	10fa <_sercom_get_default_pad+0xa6>
    10f4:	2b00      	cmp	r3, #0
    10f6:	d005      	beq.n	1104 <_sercom_get_default_pad+0xb0>
    10f8:	e04b      	b.n	1192 <_sercom_get_default_pad+0x13e>
    10fa:	2b02      	cmp	r3, #2
    10fc:	d006      	beq.n	110c <_sercom_get_default_pad+0xb8>
    10fe:	2b03      	cmp	r3, #3
    1100:	d006      	beq.n	1110 <_sercom_get_default_pad+0xbc>
    1102:	e046      	b.n	1192 <_sercom_get_default_pad+0x13e>
    1104:	4b32      	ldr	r3, [pc, #200]	; (11d0 <_sercom_get_default_pad+0x17c>)
    1106:	e045      	b.n	1194 <_sercom_get_default_pad+0x140>
    1108:	4b32      	ldr	r3, [pc, #200]	; (11d4 <_sercom_get_default_pad+0x180>)
    110a:	e043      	b.n	1194 <_sercom_get_default_pad+0x140>
    110c:	4b32      	ldr	r3, [pc, #200]	; (11d8 <_sercom_get_default_pad+0x184>)
    110e:	e041      	b.n	1194 <_sercom_get_default_pad+0x140>
    1110:	4b32      	ldr	r3, [pc, #200]	; (11dc <_sercom_get_default_pad+0x188>)
    1112:	e03f      	b.n	1194 <_sercom_get_default_pad+0x140>
    1114:	1cfb      	adds	r3, r7, #3
    1116:	781b      	ldrb	r3, [r3, #0]
    1118:	2b01      	cmp	r3, #1
    111a:	d00a      	beq.n	1132 <_sercom_get_default_pad+0xde>
    111c:	dc02      	bgt.n	1124 <_sercom_get_default_pad+0xd0>
    111e:	2b00      	cmp	r3, #0
    1120:	d005      	beq.n	112e <_sercom_get_default_pad+0xda>
    1122:	e036      	b.n	1192 <_sercom_get_default_pad+0x13e>
    1124:	2b02      	cmp	r3, #2
    1126:	d006      	beq.n	1136 <_sercom_get_default_pad+0xe2>
    1128:	2b03      	cmp	r3, #3
    112a:	d006      	beq.n	113a <_sercom_get_default_pad+0xe6>
    112c:	e031      	b.n	1192 <_sercom_get_default_pad+0x13e>
    112e:	4b2c      	ldr	r3, [pc, #176]	; (11e0 <_sercom_get_default_pad+0x18c>)
    1130:	e030      	b.n	1194 <_sercom_get_default_pad+0x140>
    1132:	4b2c      	ldr	r3, [pc, #176]	; (11e4 <_sercom_get_default_pad+0x190>)
    1134:	e02e      	b.n	1194 <_sercom_get_default_pad+0x140>
    1136:	4b2c      	ldr	r3, [pc, #176]	; (11e8 <_sercom_get_default_pad+0x194>)
    1138:	e02c      	b.n	1194 <_sercom_get_default_pad+0x140>
    113a:	4b2c      	ldr	r3, [pc, #176]	; (11ec <_sercom_get_default_pad+0x198>)
    113c:	e02a      	b.n	1194 <_sercom_get_default_pad+0x140>
    113e:	1cfb      	adds	r3, r7, #3
    1140:	781b      	ldrb	r3, [r3, #0]
    1142:	2b01      	cmp	r3, #1
    1144:	d00a      	beq.n	115c <_sercom_get_default_pad+0x108>
    1146:	dc02      	bgt.n	114e <_sercom_get_default_pad+0xfa>
    1148:	2b00      	cmp	r3, #0
    114a:	d005      	beq.n	1158 <_sercom_get_default_pad+0x104>
    114c:	e021      	b.n	1192 <_sercom_get_default_pad+0x13e>
    114e:	2b02      	cmp	r3, #2
    1150:	d006      	beq.n	1160 <_sercom_get_default_pad+0x10c>
    1152:	2b03      	cmp	r3, #3
    1154:	d006      	beq.n	1164 <_sercom_get_default_pad+0x110>
    1156:	e01c      	b.n	1192 <_sercom_get_default_pad+0x13e>
    1158:	4b25      	ldr	r3, [pc, #148]	; (11f0 <_sercom_get_default_pad+0x19c>)
    115a:	e01b      	b.n	1194 <_sercom_get_default_pad+0x140>
    115c:	4b25      	ldr	r3, [pc, #148]	; (11f4 <_sercom_get_default_pad+0x1a0>)
    115e:	e019      	b.n	1194 <_sercom_get_default_pad+0x140>
    1160:	4b25      	ldr	r3, [pc, #148]	; (11f8 <_sercom_get_default_pad+0x1a4>)
    1162:	e017      	b.n	1194 <_sercom_get_default_pad+0x140>
    1164:	4b25      	ldr	r3, [pc, #148]	; (11fc <_sercom_get_default_pad+0x1a8>)
    1166:	e015      	b.n	1194 <_sercom_get_default_pad+0x140>
    1168:	1cfb      	adds	r3, r7, #3
    116a:	781b      	ldrb	r3, [r3, #0]
    116c:	2b01      	cmp	r3, #1
    116e:	d00a      	beq.n	1186 <_sercom_get_default_pad+0x132>
    1170:	dc02      	bgt.n	1178 <_sercom_get_default_pad+0x124>
    1172:	2b00      	cmp	r3, #0
    1174:	d005      	beq.n	1182 <_sercom_get_default_pad+0x12e>
    1176:	e00c      	b.n	1192 <_sercom_get_default_pad+0x13e>
    1178:	2b02      	cmp	r3, #2
    117a:	d006      	beq.n	118a <_sercom_get_default_pad+0x136>
    117c:	2b03      	cmp	r3, #3
    117e:	d006      	beq.n	118e <_sercom_get_default_pad+0x13a>
    1180:	e007      	b.n	1192 <_sercom_get_default_pad+0x13e>
    1182:	4b1f      	ldr	r3, [pc, #124]	; (1200 <_sercom_get_default_pad+0x1ac>)
    1184:	e006      	b.n	1194 <_sercom_get_default_pad+0x140>
    1186:	4b1f      	ldr	r3, [pc, #124]	; (1204 <_sercom_get_default_pad+0x1b0>)
    1188:	e004      	b.n	1194 <_sercom_get_default_pad+0x140>
    118a:	4b1f      	ldr	r3, [pc, #124]	; (1208 <_sercom_get_default_pad+0x1b4>)
    118c:	e002      	b.n	1194 <_sercom_get_default_pad+0x140>
    118e:	4b1f      	ldr	r3, [pc, #124]	; (120c <_sercom_get_default_pad+0x1b8>)
    1190:	e000      	b.n	1194 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    1192:	2300      	movs	r3, #0
}
    1194:	1c18      	adds	r0, r3, #0
    1196:	46bd      	mov	sp, r7
    1198:	b002      	add	sp, #8
    119a:	bd80      	pop	{r7, pc}
    119c:	42001000 	.word	0x42001000
    11a0:	42000800 	.word	0x42000800
    11a4:	42000c00 	.word	0x42000c00
    11a8:	42001800 	.word	0x42001800
    11ac:	42001c00 	.word	0x42001c00
    11b0:	42001400 	.word	0x42001400
    11b4:	00040003 	.word	0x00040003
    11b8:	00050003 	.word	0x00050003
    11bc:	00060003 	.word	0x00060003
    11c0:	00070003 	.word	0x00070003
    11c4:	00010003 	.word	0x00010003
    11c8:	001e0003 	.word	0x001e0003
    11cc:	001f0003 	.word	0x001f0003
    11d0:	00080003 	.word	0x00080003
    11d4:	00090003 	.word	0x00090003
    11d8:	000a0003 	.word	0x000a0003
    11dc:	000b0003 	.word	0x000b0003
    11e0:	00100003 	.word	0x00100003
    11e4:	00110003 	.word	0x00110003
    11e8:	00120003 	.word	0x00120003
    11ec:	00130003 	.word	0x00130003
    11f0:	000c0003 	.word	0x000c0003
    11f4:	000d0003 	.word	0x000d0003
    11f8:	000e0003 	.word	0x000e0003
    11fc:	000f0003 	.word	0x000f0003
    1200:	00160003 	.word	0x00160003
    1204:	00170003 	.word	0x00170003
    1208:	00180003 	.word	0x00180003
    120c:	00190003 	.word	0x00190003

00001210 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1210:	b590      	push	{r4, r7, lr}
    1212:	b08b      	sub	sp, #44	; 0x2c
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1218:	230c      	movs	r3, #12
    121a:	18fb      	adds	r3, r7, r3
    121c:	4a0e      	ldr	r2, [pc, #56]	; (1258 <_sercom_get_sercom_inst_index+0x48>)
    121e:	ca13      	ldmia	r2!, {r0, r1, r4}
    1220:	c313      	stmia	r3!, {r0, r1, r4}
    1222:	ca13      	ldmia	r2!, {r0, r1, r4}
    1224:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1226:	2300      	movs	r3, #0
    1228:	627b      	str	r3, [r7, #36]	; 0x24
    122a:	e00d      	b.n	1248 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    122c:	687b      	ldr	r3, [r7, #4]
    122e:	220c      	movs	r2, #12
    1230:	18ba      	adds	r2, r7, r2
    1232:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1234:	0089      	lsls	r1, r1, #2
    1236:	588a      	ldr	r2, [r1, r2]
    1238:	4293      	cmp	r3, r2
    123a:	d102      	bne.n	1242 <_sercom_get_sercom_inst_index+0x32>
			return i;
    123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    123e:	b2db      	uxtb	r3, r3
    1240:	e006      	b.n	1250 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1244:	3301      	adds	r3, #1
    1246:	627b      	str	r3, [r7, #36]	; 0x24
    1248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    124a:	2b05      	cmp	r3, #5
    124c:	d9ee      	bls.n	122c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    124e:	2300      	movs	r3, #0
}
    1250:	1c18      	adds	r0, r3, #0
    1252:	46bd      	mov	sp, r7
    1254:	b00b      	add	sp, #44	; 0x2c
    1256:	bd90      	pop	{r4, r7, pc}
    1258:	00007390 	.word	0x00007390

0000125c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    125c:	b580      	push	{r7, lr}
    125e:	b082      	sub	sp, #8
    1260:	af00      	add	r7, sp, #0
    1262:	1c02      	adds	r2, r0, #0
    1264:	1dfb      	adds	r3, r7, #7
    1266:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    1268:	46bd      	mov	sp, r7
    126a:	b002      	add	sp, #8
    126c:	bd80      	pop	{r7, pc}
    126e:	46c0      	nop			; (mov r8, r8)

00001270 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1270:	b580      	push	{r7, lr}
    1272:	b084      	sub	sp, #16
    1274:	af00      	add	r7, sp, #0
    1276:	1c02      	adds	r2, r0, #0
    1278:	6039      	str	r1, [r7, #0]
    127a:	1dfb      	adds	r3, r7, #7
    127c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    127e:	4b13      	ldr	r3, [pc, #76]	; (12cc <_sercom_set_handler+0x5c>)
    1280:	781b      	ldrb	r3, [r3, #0]
    1282:	2201      	movs	r2, #1
    1284:	4053      	eors	r3, r2
    1286:	b2db      	uxtb	r3, r3
    1288:	2b00      	cmp	r3, #0
    128a:	d015      	beq.n	12b8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    128c:	2300      	movs	r3, #0
    128e:	60fb      	str	r3, [r7, #12]
    1290:	e00c      	b.n	12ac <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1292:	4b0f      	ldr	r3, [pc, #60]	; (12d0 <_sercom_set_handler+0x60>)
    1294:	68fa      	ldr	r2, [r7, #12]
    1296:	0092      	lsls	r2, r2, #2
    1298:	490e      	ldr	r1, [pc, #56]	; (12d4 <_sercom_set_handler+0x64>)
    129a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    129c:	4b0e      	ldr	r3, [pc, #56]	; (12d8 <_sercom_set_handler+0x68>)
    129e:	68fa      	ldr	r2, [r7, #12]
    12a0:	0092      	lsls	r2, r2, #2
    12a2:	2100      	movs	r1, #0
    12a4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12a6:	68fb      	ldr	r3, [r7, #12]
    12a8:	3301      	adds	r3, #1
    12aa:	60fb      	str	r3, [r7, #12]
    12ac:	68fb      	ldr	r3, [r7, #12]
    12ae:	2b05      	cmp	r3, #5
    12b0:	d9ef      	bls.n	1292 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    12b2:	4b06      	ldr	r3, [pc, #24]	; (12cc <_sercom_set_handler+0x5c>)
    12b4:	2201      	movs	r2, #1
    12b6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    12b8:	1dfb      	adds	r3, r7, #7
    12ba:	781a      	ldrb	r2, [r3, #0]
    12bc:	4b04      	ldr	r3, [pc, #16]	; (12d0 <_sercom_set_handler+0x60>)
    12be:	0092      	lsls	r2, r2, #2
    12c0:	6839      	ldr	r1, [r7, #0]
    12c2:	50d1      	str	r1, [r2, r3]
}
    12c4:	46bd      	mov	sp, r7
    12c6:	b004      	add	sp, #16
    12c8:	bd80      	pop	{r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	20000096 	.word	0x20000096
    12d0:	20000098 	.word	0x20000098
    12d4:	0000125d 	.word	0x0000125d
    12d8:	20003cdc 	.word	0x20003cdc

000012dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    12dc:	b590      	push	{r4, r7, lr}
    12de:	b085      	sub	sp, #20
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12e4:	2308      	movs	r3, #8
    12e6:	18fa      	adds	r2, r7, r3
    12e8:	4b0e      	ldr	r3, [pc, #56]	; (1324 <_sercom_get_interrupt_vector+0x48>)
    12ea:	1c11      	adds	r1, r2, #0
    12ec:	1c1a      	adds	r2, r3, #0
    12ee:	2306      	movs	r3, #6
    12f0:	1c08      	adds	r0, r1, #0
    12f2:	1c11      	adds	r1, r2, #0
    12f4:	1c1a      	adds	r2, r3, #0
    12f6:	4b0c      	ldr	r3, [pc, #48]	; (1328 <_sercom_get_interrupt_vector+0x4c>)
    12f8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12fa:	230f      	movs	r3, #15
    12fc:	18fc      	adds	r4, r7, r3
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	1c18      	adds	r0, r3, #0
    1302:	4b0a      	ldr	r3, [pc, #40]	; (132c <_sercom_get_interrupt_vector+0x50>)
    1304:	4798      	blx	r3
    1306:	1c03      	adds	r3, r0, #0
    1308:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    130a:	230f      	movs	r3, #15
    130c:	18fb      	adds	r3, r7, r3
    130e:	781b      	ldrb	r3, [r3, #0]
    1310:	2208      	movs	r2, #8
    1312:	18ba      	adds	r2, r7, r2
    1314:	5cd3      	ldrb	r3, [r2, r3]
    1316:	b2db      	uxtb	r3, r3
    1318:	b25b      	sxtb	r3, r3
}
    131a:	1c18      	adds	r0, r3, #0
    131c:	46bd      	mov	sp, r7
    131e:	b005      	add	sp, #20
    1320:	bd90      	pop	{r4, r7, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	000073a8 	.word	0x000073a8
    1328:	00006315 	.word	0x00006315
    132c:	00001211 	.word	0x00001211

00001330 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1330:	b580      	push	{r7, lr}
    1332:	af00      	add	r7, sp, #0
    1334:	4b02      	ldr	r3, [pc, #8]	; (1340 <SERCOM0_Handler+0x10>)
    1336:	681b      	ldr	r3, [r3, #0]
    1338:	2000      	movs	r0, #0
    133a:	4798      	blx	r3
    133c:	46bd      	mov	sp, r7
    133e:	bd80      	pop	{r7, pc}
    1340:	20000098 	.word	0x20000098

00001344 <SERCOM1_Handler>:
    1344:	b580      	push	{r7, lr}
    1346:	af00      	add	r7, sp, #0
    1348:	4b02      	ldr	r3, [pc, #8]	; (1354 <SERCOM1_Handler+0x10>)
    134a:	685b      	ldr	r3, [r3, #4]
    134c:	2001      	movs	r0, #1
    134e:	4798      	blx	r3
    1350:	46bd      	mov	sp, r7
    1352:	bd80      	pop	{r7, pc}
    1354:	20000098 	.word	0x20000098

00001358 <SERCOM2_Handler>:
    1358:	b580      	push	{r7, lr}
    135a:	af00      	add	r7, sp, #0
    135c:	4b02      	ldr	r3, [pc, #8]	; (1368 <SERCOM2_Handler+0x10>)
    135e:	689b      	ldr	r3, [r3, #8]
    1360:	2002      	movs	r0, #2
    1362:	4798      	blx	r3
    1364:	46bd      	mov	sp, r7
    1366:	bd80      	pop	{r7, pc}
    1368:	20000098 	.word	0x20000098

0000136c <SERCOM3_Handler>:
    136c:	b580      	push	{r7, lr}
    136e:	af00      	add	r7, sp, #0
    1370:	4b02      	ldr	r3, [pc, #8]	; (137c <SERCOM3_Handler+0x10>)
    1372:	68db      	ldr	r3, [r3, #12]
    1374:	2003      	movs	r0, #3
    1376:	4798      	blx	r3
    1378:	46bd      	mov	sp, r7
    137a:	bd80      	pop	{r7, pc}
    137c:	20000098 	.word	0x20000098

00001380 <SERCOM4_Handler>:
    1380:	b580      	push	{r7, lr}
    1382:	af00      	add	r7, sp, #0
    1384:	4b02      	ldr	r3, [pc, #8]	; (1390 <SERCOM4_Handler+0x10>)
    1386:	691b      	ldr	r3, [r3, #16]
    1388:	2004      	movs	r0, #4
    138a:	4798      	blx	r3
    138c:	46bd      	mov	sp, r7
    138e:	bd80      	pop	{r7, pc}
    1390:	20000098 	.word	0x20000098

00001394 <SERCOM5_Handler>:
    1394:	b580      	push	{r7, lr}
    1396:	af00      	add	r7, sp, #0
    1398:	4b02      	ldr	r3, [pc, #8]	; (13a4 <SERCOM5_Handler+0x10>)
    139a:	695b      	ldr	r3, [r3, #20]
    139c:	2005      	movs	r0, #5
    139e:	4798      	blx	r3
    13a0:	46bd      	mov	sp, r7
    13a2:	bd80      	pop	{r7, pc}
    13a4:	20000098 	.word	0x20000098

000013a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    13a8:	b580      	push	{r7, lr}
    13aa:	b082      	sub	sp, #8
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2200      	movs	r2, #0
    13b4:	701a      	strb	r2, [r3, #0]
}
    13b6:	46bd      	mov	sp, r7
    13b8:	b002      	add	sp, #8
    13ba:	bd80      	pop	{r7, pc}

000013bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    13bc:	b580      	push	{r7, lr}
    13be:	b082      	sub	sp, #8
    13c0:	af00      	add	r7, sp, #0
    13c2:	1c02      	adds	r2, r0, #0
    13c4:	6039      	str	r1, [r7, #0]
    13c6:	1dfb      	adds	r3, r7, #7
    13c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    13ca:	1dfb      	adds	r3, r7, #7
    13cc:	781b      	ldrb	r3, [r3, #0]
    13ce:	2b01      	cmp	r3, #1
    13d0:	d00a      	beq.n	13e8 <system_apb_clock_set_mask+0x2c>
    13d2:	2b02      	cmp	r3, #2
    13d4:	d00f      	beq.n	13f6 <system_apb_clock_set_mask+0x3a>
    13d6:	2b00      	cmp	r3, #0
    13d8:	d114      	bne.n	1404 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    13da:	4b0e      	ldr	r3, [pc, #56]	; (1414 <system_apb_clock_set_mask+0x58>)
    13dc:	4a0d      	ldr	r2, [pc, #52]	; (1414 <system_apb_clock_set_mask+0x58>)
    13de:	6991      	ldr	r1, [r2, #24]
    13e0:	683a      	ldr	r2, [r7, #0]
    13e2:	430a      	orrs	r2, r1
    13e4:	619a      	str	r2, [r3, #24]
			break;
    13e6:	e00f      	b.n	1408 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <system_apb_clock_set_mask+0x58>)
    13ea:	4a0a      	ldr	r2, [pc, #40]	; (1414 <system_apb_clock_set_mask+0x58>)
    13ec:	69d1      	ldr	r1, [r2, #28]
    13ee:	683a      	ldr	r2, [r7, #0]
    13f0:	430a      	orrs	r2, r1
    13f2:	61da      	str	r2, [r3, #28]
			break;
    13f4:	e008      	b.n	1408 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    13f6:	4b07      	ldr	r3, [pc, #28]	; (1414 <system_apb_clock_set_mask+0x58>)
    13f8:	4a06      	ldr	r2, [pc, #24]	; (1414 <system_apb_clock_set_mask+0x58>)
    13fa:	6a11      	ldr	r1, [r2, #32]
    13fc:	683a      	ldr	r2, [r7, #0]
    13fe:	430a      	orrs	r2, r1
    1400:	621a      	str	r2, [r3, #32]
			break;
    1402:	e001      	b.n	1408 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1404:	2317      	movs	r3, #23
    1406:	e000      	b.n	140a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1408:	2300      	movs	r3, #0
}
    140a:	1c18      	adds	r0, r3, #0
    140c:	46bd      	mov	sp, r7
    140e:	b002      	add	sp, #8
    1410:	bd80      	pop	{r7, pc}
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	40000400 	.word	0x40000400

00001418 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1418:	b580      	push	{r7, lr}
    141a:	b082      	sub	sp, #8
    141c:	af00      	add	r7, sp, #0
    141e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	2280      	movs	r2, #128	; 0x80
    1424:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1426:	687b      	ldr	r3, [r7, #4]
    1428:	2200      	movs	r2, #0
    142a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	2201      	movs	r2, #1
    1430:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	2200      	movs	r2, #0
    1436:	70da      	strb	r2, [r3, #3]
}
    1438:	46bd      	mov	sp, r7
    143a:	b002      	add	sp, #8
    143c:	bd80      	pop	{r7, pc}
    143e:	46c0      	nop			; (mov r8, r8)

00001440 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1444:	4b05      	ldr	r3, [pc, #20]	; (145c <system_is_debugger_present+0x1c>)
    1446:	789b      	ldrb	r3, [r3, #2]
    1448:	b2db      	uxtb	r3, r3
    144a:	1c1a      	adds	r2, r3, #0
    144c:	2302      	movs	r3, #2
    144e:	4013      	ands	r3, r2
    1450:	1e5a      	subs	r2, r3, #1
    1452:	4193      	sbcs	r3, r2
    1454:	b2db      	uxtb	r3, r3
}
    1456:	1c18      	adds	r0, r3, #0
    1458:	46bd      	mov	sp, r7
    145a:	bd80      	pop	{r7, pc}
    145c:	41002000 	.word	0x41002000

00001460 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1460:	b580      	push	{r7, lr}
    1462:	b084      	sub	sp, #16
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    146e:	68fb      	ldr	r3, [r7, #12]
    1470:	69db      	ldr	r3, [r3, #28]
    1472:	1e5a      	subs	r2, r3, #1
    1474:	4193      	sbcs	r3, r2
    1476:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1478:	1c18      	adds	r0, r3, #0
    147a:	46bd      	mov	sp, r7
    147c:	b004      	add	sp, #16
    147e:	bd80      	pop	{r7, pc}

00001480 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
    1486:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1488:	46c0      	nop			; (mov r8, r8)
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	1c18      	adds	r0, r3, #0
    148e:	4b03      	ldr	r3, [pc, #12]	; (149c <_usart_wait_for_sync+0x1c>)
    1490:	4798      	blx	r3
    1492:	1e03      	subs	r3, r0, #0
    1494:	d1f9      	bne.n	148a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1496:	46bd      	mov	sp, r7
    1498:	b002      	add	sp, #8
    149a:	bd80      	pop	{r7, pc}
    149c:	00001461 	.word	0x00001461

000014a0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    14a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a2:	b08d      	sub	sp, #52	; 0x34
    14a4:	af02      	add	r7, sp, #8
    14a6:	6078      	str	r0, [r7, #4]
    14a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14aa:	687b      	ldr	r3, [r7, #4]
    14ac:	681b      	ldr	r3, [r3, #0]
    14ae:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	681b      	ldr	r3, [r3, #0]
    14b4:	1c18      	adds	r0, r3, #0
    14b6:	4bae      	ldr	r3, [pc, #696]	; (1770 <_usart_set_config+0x2d0>)
    14b8:	4798      	blx	r3
    14ba:	1c03      	adds	r3, r0, #0
    14bc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14be:	697b      	ldr	r3, [r7, #20]
    14c0:	3314      	adds	r3, #20
    14c2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    14c4:	2300      	movs	r3, #0
    14c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    14c8:	2300      	movs	r3, #0
    14ca:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    14cc:	230e      	movs	r3, #14
    14ce:	18fb      	adds	r3, r7, r3
    14d0:	2200      	movs	r2, #0
    14d2:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14d4:	231f      	movs	r3, #31
    14d6:	18fb      	adds	r3, r7, r3
    14d8:	2200      	movs	r2, #0
    14da:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    14dc:	231e      	movs	r3, #30
    14de:	18fb      	adds	r3, r7, r3
    14e0:	2210      	movs	r2, #16
    14e2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    14e4:	683b      	ldr	r3, [r7, #0]
    14e6:	8a1b      	ldrh	r3, [r3, #16]
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	01d2      	lsls	r2, r2, #7
    14ec:	4293      	cmp	r3, r2
    14ee:	d01c      	beq.n	152a <_usart_set_config+0x8a>
    14f0:	2280      	movs	r2, #128	; 0x80
    14f2:	01d2      	lsls	r2, r2, #7
    14f4:	4293      	cmp	r3, r2
    14f6:	dc06      	bgt.n	1506 <_usart_set_config+0x66>
    14f8:	2b00      	cmp	r3, #0
    14fa:	d00d      	beq.n	1518 <_usart_set_config+0x78>
    14fc:	2280      	movs	r2, #128	; 0x80
    14fe:	0192      	lsls	r2, r2, #6
    1500:	4293      	cmp	r3, r2
    1502:	d024      	beq.n	154e <_usart_set_config+0xae>
    1504:	e035      	b.n	1572 <_usart_set_config+0xd2>
    1506:	22c0      	movs	r2, #192	; 0xc0
    1508:	01d2      	lsls	r2, r2, #7
    150a:	4293      	cmp	r3, r2
    150c:	d028      	beq.n	1560 <_usart_set_config+0xc0>
    150e:	2280      	movs	r2, #128	; 0x80
    1510:	0212      	lsls	r2, r2, #8
    1512:	4293      	cmp	r3, r2
    1514:	d012      	beq.n	153c <_usart_set_config+0x9c>
    1516:	e02c      	b.n	1572 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1518:	231f      	movs	r3, #31
    151a:	18fb      	adds	r3, r7, r3
    151c:	2200      	movs	r2, #0
    151e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1520:	231e      	movs	r3, #30
    1522:	18fb      	adds	r3, r7, r3
    1524:	2210      	movs	r2, #16
    1526:	701a      	strb	r2, [r3, #0]
			break;
    1528:	e023      	b.n	1572 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    152a:	231f      	movs	r3, #31
    152c:	18fb      	adds	r3, r7, r3
    152e:	2200      	movs	r2, #0
    1530:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1532:	231e      	movs	r3, #30
    1534:	18fb      	adds	r3, r7, r3
    1536:	2208      	movs	r2, #8
    1538:	701a      	strb	r2, [r3, #0]
			break;
    153a:	e01a      	b.n	1572 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    153c:	231f      	movs	r3, #31
    153e:	18fb      	adds	r3, r7, r3
    1540:	2200      	movs	r2, #0
    1542:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1544:	231e      	movs	r3, #30
    1546:	18fb      	adds	r3, r7, r3
    1548:	2203      	movs	r2, #3
    154a:	701a      	strb	r2, [r3, #0]
			break;
    154c:	e011      	b.n	1572 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    154e:	231f      	movs	r3, #31
    1550:	18fb      	adds	r3, r7, r3
    1552:	2201      	movs	r2, #1
    1554:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1556:	231e      	movs	r3, #30
    1558:	18fb      	adds	r3, r7, r3
    155a:	2210      	movs	r2, #16
    155c:	701a      	strb	r2, [r3, #0]
			break;
    155e:	e008      	b.n	1572 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1560:	231f      	movs	r3, #31
    1562:	18fb      	adds	r3, r7, r3
    1564:	2201      	movs	r2, #1
    1566:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1568:	231e      	movs	r3, #30
    156a:	18fb      	adds	r3, r7, r3
    156c:	2208      	movs	r2, #8
    156e:	701a      	strb	r2, [r3, #0]
			break;
    1570:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1572:	683b      	ldr	r3, [r7, #0]
    1574:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    1576:	683b      	ldr	r3, [r7, #0]
    1578:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    157a:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1580:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1582:	683a      	ldr	r2, [r7, #0]
    1584:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1586:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1588:	683a      	ldr	r2, [r7, #0]
    158a:	7e12      	ldrb	r2, [r2, #24]
    158c:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    158e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1590:	683a      	ldr	r2, [r7, #0]
    1592:	2126      	movs	r1, #38	; 0x26
    1594:	5c52      	ldrb	r2, [r2, r1]
    1596:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1598:	4313      	orrs	r3, r2
    159a:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    159c:	231d      	movs	r3, #29
    159e:	18fb      	adds	r3, r7, r3
    15a0:	2200      	movs	r2, #0
    15a2:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    15a4:	683b      	ldr	r3, [r7, #0]
    15a6:	685b      	ldr	r3, [r3, #4]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d020      	beq.n	15ee <_usart_set_config+0x14e>
    15ac:	2280      	movs	r2, #128	; 0x80
    15ae:	0552      	lsls	r2, r2, #21
    15b0:	4293      	cmp	r3, r2
    15b2:	d150      	bne.n	1656 <_usart_set_config+0x1b6>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    15b4:	683b      	ldr	r3, [r7, #0]
    15b6:	2227      	movs	r2, #39	; 0x27
    15b8:	5c9b      	ldrb	r3, [r3, r2]
    15ba:	2201      	movs	r2, #1
    15bc:	4053      	eors	r3, r2
    15be:	b2db      	uxtb	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	d013      	beq.n	15ec <_usart_set_config+0x14c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15c4:	683b      	ldr	r3, [r7, #0]
    15c6:	6a1d      	ldr	r5, [r3, #32]
    15c8:	693b      	ldr	r3, [r7, #16]
    15ca:	b2db      	uxtb	r3, r3
    15cc:	1c18      	adds	r0, r3, #0
    15ce:	4b69      	ldr	r3, [pc, #420]	; (1774 <_usart_set_config+0x2d4>)
    15d0:	4798      	blx	r3
    15d2:	1c02      	adds	r2, r0, #0
    15d4:	231d      	movs	r3, #29
    15d6:	18fc      	adds	r4, r7, r3
    15d8:	230e      	movs	r3, #14
    15da:	18fb      	adds	r3, r7, r3
    15dc:	1c28      	adds	r0, r5, #0
    15de:	1c11      	adds	r1, r2, #0
    15e0:	1c1a      	adds	r2, r3, #0
    15e2:	4b65      	ldr	r3, [pc, #404]	; (1778 <_usart_set_config+0x2d8>)
    15e4:	4798      	blx	r3
    15e6:	1c03      	adds	r3, r0, #0
    15e8:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    15ea:	e034      	b.n	1656 <_usart_set_config+0x1b6>
    15ec:	e033      	b.n	1656 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15ee:	683b      	ldr	r3, [r7, #0]
    15f0:	2227      	movs	r2, #39	; 0x27
    15f2:	5c9b      	ldrb	r3, [r3, r2]
    15f4:	2b00      	cmp	r3, #0
    15f6:	d014      	beq.n	1622 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    15f8:	683b      	ldr	r3, [r7, #0]
    15fa:	6a18      	ldr	r0, [r3, #32]
    15fc:	683b      	ldr	r3, [r7, #0]
    15fe:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    1600:	231d      	movs	r3, #29
    1602:	18fc      	adds	r4, r7, r3
    1604:	230e      	movs	r3, #14
    1606:	18fa      	adds	r2, r7, r3
    1608:	231f      	movs	r3, #31
    160a:	18fb      	adds	r3, r7, r3
    160c:	781d      	ldrb	r5, [r3, #0]
    160e:	231e      	movs	r3, #30
    1610:	18fb      	adds	r3, r7, r3
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	9300      	str	r3, [sp, #0]
    1616:	1c2b      	adds	r3, r5, #0
    1618:	4d58      	ldr	r5, [pc, #352]	; (177c <_usart_set_config+0x2dc>)
    161a:	47a8      	blx	r5
    161c:	1c03      	adds	r3, r0, #0
    161e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1620:	e018      	b.n	1654 <_usart_set_config+0x1b4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1622:	683b      	ldr	r3, [r7, #0]
    1624:	6a1e      	ldr	r6, [r3, #32]
    1626:	693b      	ldr	r3, [r7, #16]
    1628:	b2db      	uxtb	r3, r3
    162a:	1c18      	adds	r0, r3, #0
    162c:	4b51      	ldr	r3, [pc, #324]	; (1774 <_usart_set_config+0x2d4>)
    162e:	4798      	blx	r3
    1630:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1632:	231d      	movs	r3, #29
    1634:	18fc      	adds	r4, r7, r3
    1636:	230e      	movs	r3, #14
    1638:	18fa      	adds	r2, r7, r3
    163a:	231f      	movs	r3, #31
    163c:	18fb      	adds	r3, r7, r3
    163e:	781d      	ldrb	r5, [r3, #0]
    1640:	231e      	movs	r3, #30
    1642:	18fb      	adds	r3, r7, r3
    1644:	781b      	ldrb	r3, [r3, #0]
    1646:	9300      	str	r3, [sp, #0]
    1648:	1c30      	adds	r0, r6, #0
    164a:	1c2b      	adds	r3, r5, #0
    164c:	4d4b      	ldr	r5, [pc, #300]	; (177c <_usart_set_config+0x2dc>)
    164e:	47a8      	blx	r5
    1650:	1c03      	adds	r3, r0, #0
    1652:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    1654:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1656:	231d      	movs	r3, #29
    1658:	18fb      	adds	r3, r7, r3
    165a:	781b      	ldrb	r3, [r3, #0]
    165c:	2b00      	cmp	r3, #0
    165e:	d003      	beq.n	1668 <_usart_set_config+0x1c8>
		/* Abort */
		return status_code;
    1660:	231d      	movs	r3, #29
    1662:	18fb      	adds	r3, r7, r3
    1664:	781b      	ldrb	r3, [r3, #0]
    1666:	e07e      	b.n	1766 <_usart_set_config+0x2c6>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	7e5b      	ldrb	r3, [r3, #25]
    166c:	2b00      	cmp	r3, #0
    166e:	d003      	beq.n	1678 <_usart_set_config+0x1d8>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1670:	683b      	ldr	r3, [r7, #0]
    1672:	7e9a      	ldrb	r2, [r3, #26]
    1674:	69bb      	ldr	r3, [r7, #24]
    1676:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1678:	687b      	ldr	r3, [r7, #4]
    167a:	1c18      	adds	r0, r3, #0
    167c:	4b40      	ldr	r3, [pc, #256]	; (1780 <_usart_set_config+0x2e0>)
    167e:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1680:	230e      	movs	r3, #14
    1682:	18fb      	adds	r3, r7, r3
    1684:	881a      	ldrh	r2, [r3, #0]
    1686:	69bb      	ldr	r3, [r7, #24]
    1688:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    168a:	683b      	ldr	r3, [r7, #0]
    168c:	685b      	ldr	r3, [r3, #4]
    168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1690:	4313      	orrs	r3, r2
    1692:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1694:	683b      	ldr	r3, [r7, #0]
    1696:	2227      	movs	r2, #39	; 0x27
    1698:	5c9b      	ldrb	r3, [r3, r2]
    169a:	2201      	movs	r2, #1
    169c:	4053      	eors	r3, r2
    169e:	b2db      	uxtb	r3, r3
    16a0:	2b00      	cmp	r3, #0
    16a2:	d003      	beq.n	16ac <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    16a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a6:	2204      	movs	r2, #4
    16a8:	4313      	orrs	r3, r2
    16aa:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16ac:	683b      	ldr	r3, [r7, #0]
    16ae:	7a9a      	ldrb	r2, [r3, #10]
    16b0:	683b      	ldr	r3, [r7, #0]
    16b2:	7adb      	ldrb	r3, [r3, #11]
    16b4:	4313      	orrs	r3, r2
    16b6:	b2db      	uxtb	r3, r3
    16b8:	1c1a      	adds	r2, r3, #0
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    16ba:	683b      	ldr	r3, [r7, #0]
    16bc:	7e5b      	ldrb	r3, [r3, #25]
    16be:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16c0:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    16c2:	683a      	ldr	r2, [r7, #0]
    16c4:	7f12      	ldrb	r2, [r2, #28]
    16c6:	0252      	lsls	r2, r2, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    16c8:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    16ca:	683a      	ldr	r2, [r7, #0]
    16cc:	7f52      	ldrb	r2, [r2, #29]
    16ce:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    16d0:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    16d2:	683a      	ldr	r2, [r7, #0]
    16d4:	2124      	movs	r1, #36	; 0x24
    16d6:	5c52      	ldrb	r2, [r2, r1]
    16d8:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    16da:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    16dc:	683a      	ldr	r2, [r7, #0]
    16de:	2125      	movs	r1, #37	; 0x25
    16e0:	5c52      	ldrb	r2, [r2, r1]
    16e2:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    16e4:	4313      	orrs	r3, r2
    16e6:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	891b      	ldrh	r3, [r3, #8]
    16ec:	2bff      	cmp	r3, #255	; 0xff
    16ee:	d015      	beq.n	171c <_usart_set_config+0x27c>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16f0:	683b      	ldr	r3, [r7, #0]
    16f2:	7edb      	ldrb	r3, [r3, #27]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d005      	beq.n	1704 <_usart_set_config+0x264>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    16f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16fa:	22a0      	movs	r2, #160	; 0xa0
    16fc:	04d2      	lsls	r2, r2, #19
    16fe:	4313      	orrs	r3, r2
    1700:	627b      	str	r3, [r7, #36]	; 0x24
    1702:	e004      	b.n	170e <_usart_set_config+0x26e>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1706:	2280      	movs	r2, #128	; 0x80
    1708:	0452      	lsls	r2, r2, #17
    170a:	4313      	orrs	r3, r2
    170c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    170e:	683b      	ldr	r3, [r7, #0]
    1710:	891b      	ldrh	r3, [r3, #8]
    1712:	1c1a      	adds	r2, r3, #0
    1714:	6a3b      	ldr	r3, [r7, #32]
    1716:	4313      	orrs	r3, r2
    1718:	623b      	str	r3, [r7, #32]
    171a:	e008      	b.n	172e <_usart_set_config+0x28e>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    171c:	683b      	ldr	r3, [r7, #0]
    171e:	7edb      	ldrb	r3, [r3, #27]
    1720:	2b00      	cmp	r3, #0
    1722:	d004      	beq.n	172e <_usart_set_config+0x28e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1726:	2280      	movs	r2, #128	; 0x80
    1728:	04d2      	lsls	r2, r2, #19
    172a:	4313      	orrs	r3, r2
    172c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    172e:	683b      	ldr	r3, [r7, #0]
    1730:	222c      	movs	r2, #44	; 0x2c
    1732:	5c9b      	ldrb	r3, [r3, r2]
    1734:	2b00      	cmp	r3, #0
    1736:	d103      	bne.n	1740 <_usart_set_config+0x2a0>
    1738:	4b12      	ldr	r3, [pc, #72]	; (1784 <_usart_set_config+0x2e4>)
    173a:	4798      	blx	r3
    173c:	1e03      	subs	r3, r0, #0
    173e:	d003      	beq.n	1748 <_usart_set_config+0x2a8>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1742:	2280      	movs	r2, #128	; 0x80
    1744:	4313      	orrs	r3, r2
    1746:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1748:	687b      	ldr	r3, [r7, #4]
    174a:	1c18      	adds	r0, r3, #0
    174c:	4b0c      	ldr	r3, [pc, #48]	; (1780 <_usart_set_config+0x2e0>)
    174e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1750:	69bb      	ldr	r3, [r7, #24]
    1752:	6a3a      	ldr	r2, [r7, #32]
    1754:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	1c18      	adds	r0, r3, #0
    175a:	4b09      	ldr	r3, [pc, #36]	; (1780 <_usart_set_config+0x2e0>)
    175c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    175e:	69bb      	ldr	r3, [r7, #24]
    1760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1762:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    1764:	2300      	movs	r3, #0
}
    1766:	1c18      	adds	r0, r3, #0
    1768:	46bd      	mov	sp, r7
    176a:	b00b      	add	sp, #44	; 0x2c
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	00001211 	.word	0x00001211
    1774:	00004a3d 	.word	0x00004a3d
    1778:	00000d5d 	.word	0x00000d5d
    177c:	00000dd9 	.word	0x00000dd9
    1780:	00001481 	.word	0x00001481
    1784:	00001441 	.word	0x00001441

00001788 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1788:	b590      	push	{r4, r7, lr}
    178a:	b093      	sub	sp, #76	; 0x4c
    178c:	af00      	add	r7, sp, #0
    178e:	60f8      	str	r0, [r7, #12]
    1790:	60b9      	str	r1, [r7, #8]
    1792:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1794:	233b      	movs	r3, #59	; 0x3b
    1796:	18fb      	adds	r3, r7, r3
    1798:	2200      	movs	r2, #0
    179a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	68ba      	ldr	r2, [r7, #8]
    17a0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17a2:	68fb      	ldr	r3, [r7, #12]
    17a4:	681b      	ldr	r3, [r3, #0]
    17a6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17a8:	68fb      	ldr	r3, [r7, #12]
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	1c18      	adds	r0, r3, #0
    17ae:	4b85      	ldr	r3, [pc, #532]	; (19c4 <usart_init+0x23c>)
    17b0:	4798      	blx	r3
    17b2:	1c03      	adds	r3, r0, #0
    17b4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    17b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17b8:	3302      	adds	r3, #2
    17ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    17bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17be:	3314      	adds	r3, #20
    17c0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    17c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17c4:	681b      	ldr	r3, [r3, #0]
    17c6:	2201      	movs	r2, #1
    17c8:	4013      	ands	r3, r2
    17ca:	d001      	beq.n	17d0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    17cc:	2305      	movs	r3, #5
    17ce:	e0f5      	b.n	19bc <usart_init+0x234>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	2202      	movs	r2, #2
    17d6:	4013      	ands	r3, r2
    17d8:	d001      	beq.n	17de <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    17da:	231c      	movs	r3, #28
    17dc:	e0ee      	b.n	19bc <usart_init+0x234>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    17de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17e0:	2201      	movs	r2, #1
    17e2:	409a      	lsls	r2, r3
    17e4:	1c13      	adds	r3, r2, #0
    17e6:	2002      	movs	r0, #2
    17e8:	1c19      	adds	r1, r3, #0
    17ea:	4b77      	ldr	r3, [pc, #476]	; (19c8 <usart_init+0x240>)
    17ec:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    17ee:	2324      	movs	r3, #36	; 0x24
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	1c18      	adds	r0, r3, #0
    17f4:	4b75      	ldr	r3, [pc, #468]	; (19cc <usart_init+0x244>)
    17f6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	222d      	movs	r2, #45	; 0x2d
    17fc:	5c9a      	ldrb	r2, [r3, r2]
    17fe:	2324      	movs	r3, #36	; 0x24
    1800:	18fb      	adds	r3, r7, r3
    1802:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1804:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1806:	b2da      	uxtb	r2, r3
    1808:	2324      	movs	r3, #36	; 0x24
    180a:	18fb      	adds	r3, r7, r3
    180c:	1c10      	adds	r0, r2, #0
    180e:	1c19      	adds	r1, r3, #0
    1810:	4b6f      	ldr	r3, [pc, #444]	; (19d0 <usart_init+0x248>)
    1812:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1814:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1816:	b2db      	uxtb	r3, r3
    1818:	1c18      	adds	r0, r3, #0
    181a:	4b6e      	ldr	r3, [pc, #440]	; (19d4 <usart_init+0x24c>)
    181c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	222d      	movs	r2, #45	; 0x2d
    1822:	5c9b      	ldrb	r3, [r3, r2]
    1824:	1c18      	adds	r0, r3, #0
    1826:	2100      	movs	r1, #0
    1828:	4b6b      	ldr	r3, [pc, #428]	; (19d8 <usart_init+0x250>)
    182a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	7ada      	ldrb	r2, [r3, #11]
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1834:	687b      	ldr	r3, [r7, #4]
    1836:	2224      	movs	r2, #36	; 0x24
    1838:	5c9a      	ldrb	r2, [r3, r2]
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	2225      	movs	r2, #37	; 0x25
    1842:	5c9a      	ldrb	r2, [r3, r2]
    1844:	68fb      	ldr	r3, [r7, #12]
    1846:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	7eda      	ldrb	r2, [r3, #27]
    184c:	68fb      	ldr	r3, [r7, #12]
    184e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1850:	687b      	ldr	r3, [r7, #4]
    1852:	7f1a      	ldrb	r2, [r3, #28]
    1854:	68fb      	ldr	r3, [r7, #12]
    1856:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    1858:	233b      	movs	r3, #59	; 0x3b
    185a:	18fc      	adds	r4, r7, r3
    185c:	68fa      	ldr	r2, [r7, #12]
    185e:	687b      	ldr	r3, [r7, #4]
    1860:	1c10      	adds	r0, r2, #0
    1862:	1c19      	adds	r1, r3, #0
    1864:	4b5d      	ldr	r3, [pc, #372]	; (19dc <usart_init+0x254>)
    1866:	4798      	blx	r3
    1868:	1c03      	adds	r3, r0, #0
    186a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    186c:	233b      	movs	r3, #59	; 0x3b
    186e:	18fb      	adds	r3, r7, r3
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	2b00      	cmp	r3, #0
    1874:	d003      	beq.n	187e <usart_init+0xf6>
		return status_code;
    1876:	233b      	movs	r3, #59	; 0x3b
    1878:	18fb      	adds	r3, r7, r3
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	e09e      	b.n	19bc <usart_init+0x234>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    187e:	2320      	movs	r3, #32
    1880:	18fb      	adds	r3, r7, r3
    1882:	1c18      	adds	r0, r3, #0
    1884:	4b56      	ldr	r3, [pc, #344]	; (19e0 <usart_init+0x258>)
    1886:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1888:	2320      	movs	r3, #32
    188a:	18fb      	adds	r3, r7, r3
    188c:	2200      	movs	r2, #0
    188e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1890:	2320      	movs	r3, #32
    1892:	18fb      	adds	r3, r7, r3
    1894:	2200      	movs	r2, #0
    1896:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    189c:	2310      	movs	r3, #16
    189e:	18fb      	adds	r3, r7, r3
    18a0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    18a2:	687b      	ldr	r3, [r7, #4]
    18a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    18a6:	2310      	movs	r3, #16
    18a8:	18fb      	adds	r3, r7, r3
    18aa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    18ac:	687b      	ldr	r3, [r7, #4]
    18ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    18b0:	2310      	movs	r3, #16
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    18ba:	2310      	movs	r3, #16
    18bc:	18fb      	adds	r3, r7, r3
    18be:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    18c0:	2347      	movs	r3, #71	; 0x47
    18c2:	18fb      	adds	r3, r7, r3
    18c4:	2200      	movs	r2, #0
    18c6:	701a      	strb	r2, [r3, #0]
    18c8:	e02c      	b.n	1924 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    18ca:	2347      	movs	r3, #71	; 0x47
    18cc:	18fb      	adds	r3, r7, r3
    18ce:	781a      	ldrb	r2, [r3, #0]
    18d0:	2310      	movs	r3, #16
    18d2:	18fb      	adds	r3, r7, r3
    18d4:	0092      	lsls	r2, r2, #2
    18d6:	58d3      	ldr	r3, [r2, r3]
    18d8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    18da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18dc:	2b00      	cmp	r3, #0
    18de:	d109      	bne.n	18f4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    18e0:	68ba      	ldr	r2, [r7, #8]
    18e2:	2347      	movs	r3, #71	; 0x47
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	781b      	ldrb	r3, [r3, #0]
    18e8:	1c10      	adds	r0, r2, #0
    18ea:	1c19      	adds	r1, r3, #0
    18ec:	4b3d      	ldr	r3, [pc, #244]	; (19e4 <usart_init+0x25c>)
    18ee:	4798      	blx	r3
    18f0:	1c03      	adds	r3, r0, #0
    18f2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    18f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18f6:	3301      	adds	r3, #1
    18f8:	d00d      	beq.n	1916 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    18fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    18fc:	b2da      	uxtb	r2, r3
    18fe:	2320      	movs	r3, #32
    1900:	18fb      	adds	r3, r7, r3
    1902:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1906:	0c1b      	lsrs	r3, r3, #16
    1908:	b2da      	uxtb	r2, r3
    190a:	2320      	movs	r3, #32
    190c:	18fb      	adds	r3, r7, r3
    190e:	1c10      	adds	r0, r2, #0
    1910:	1c19      	adds	r1, r3, #0
    1912:	4b35      	ldr	r3, [pc, #212]	; (19e8 <usart_init+0x260>)
    1914:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1916:	2347      	movs	r3, #71	; 0x47
    1918:	18fb      	adds	r3, r7, r3
    191a:	781a      	ldrb	r2, [r3, #0]
    191c:	2347      	movs	r3, #71	; 0x47
    191e:	18fb      	adds	r3, r7, r3
    1920:	3201      	adds	r2, #1
    1922:	701a      	strb	r2, [r3, #0]
    1924:	2347      	movs	r3, #71	; 0x47
    1926:	18fb      	adds	r3, r7, r3
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	2b03      	cmp	r3, #3
    192c:	d9cd      	bls.n	18ca <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    192e:	2300      	movs	r3, #0
    1930:	63fb      	str	r3, [r7, #60]	; 0x3c
    1932:	e009      	b.n	1948 <usart_init+0x1c0>
		module->callback[i]            = NULL;
    1934:	68fa      	ldr	r2, [r7, #12]
    1936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1938:	3302      	adds	r3, #2
    193a:	009b      	lsls	r3, r3, #2
    193c:	18d3      	adds	r3, r2, r3
    193e:	2200      	movs	r2, #0
    1940:	605a      	str	r2, [r3, #4]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    1942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1944:	3301      	adds	r3, #1
    1946:	63fb      	str	r3, [r7, #60]	; 0x3c
    1948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    194a:	2b05      	cmp	r3, #5
    194c:	d9f2      	bls.n	1934 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    194e:	68fb      	ldr	r3, [r7, #12]
    1950:	2200      	movs	r2, #0
    1952:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1954:	68fb      	ldr	r3, [r7, #12]
    1956:	2200      	movs	r2, #0
    1958:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	2200      	movs	r2, #0
    195e:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1960:	68fb      	ldr	r3, [r7, #12]
    1962:	2200      	movs	r2, #0
    1964:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	2230      	movs	r2, #48	; 0x30
    196a:	2100      	movs	r1, #0
    196c:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    196e:	68fb      	ldr	r3, [r7, #12]
    1970:	2231      	movs	r2, #49	; 0x31
    1972:	2100      	movs	r1, #0
    1974:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    1976:	68fb      	ldr	r3, [r7, #12]
    1978:	2232      	movs	r2, #50	; 0x32
    197a:	2100      	movs	r1, #0
    197c:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	2233      	movs	r2, #51	; 0x33
    1982:	2100      	movs	r1, #0
    1984:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	681b      	ldr	r3, [r3, #0]
    198a:	2227      	movs	r2, #39	; 0x27
    198c:	18bc      	adds	r4, r7, r2
    198e:	1c18      	adds	r0, r3, #0
    1990:	4b0c      	ldr	r3, [pc, #48]	; (19c4 <usart_init+0x23c>)
    1992:	4798      	blx	r3
    1994:	1c03      	adds	r3, r0, #0
    1996:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1998:	2327      	movs	r3, #39	; 0x27
    199a:	18fb      	adds	r3, r7, r3
    199c:	781a      	ldrb	r2, [r3, #0]
    199e:	4b13      	ldr	r3, [pc, #76]	; (19ec <usart_init+0x264>)
    19a0:	1c10      	adds	r0, r2, #0
    19a2:	1c19      	adds	r1, r3, #0
    19a4:	4b12      	ldr	r3, [pc, #72]	; (19f0 <usart_init+0x268>)
    19a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    19a8:	2327      	movs	r3, #39	; 0x27
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	781a      	ldrb	r2, [r3, #0]
    19ae:	4b11      	ldr	r3, [pc, #68]	; (19f4 <usart_init+0x26c>)
    19b0:	0092      	lsls	r2, r2, #2
    19b2:	68f9      	ldr	r1, [r7, #12]
    19b4:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    19b6:	233b      	movs	r3, #59	; 0x3b
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	781b      	ldrb	r3, [r3, #0]
}
    19bc:	1c18      	adds	r0, r3, #0
    19be:	46bd      	mov	sp, r7
    19c0:	b013      	add	sp, #76	; 0x4c
    19c2:	bd90      	pop	{r4, r7, pc}
    19c4:	00001211 	.word	0x00001211
    19c8:	000013bd 	.word	0x000013bd
    19cc:	000013a9 	.word	0x000013a9
    19d0:	00004919 	.word	0x00004919
    19d4:	0000495d 	.word	0x0000495d
    19d8:	00000fc9 	.word	0x00000fc9
    19dc:	000014a1 	.word	0x000014a1
    19e0:	00001419 	.word	0x00001419
    19e4:	00001055 	.word	0x00001055
    19e8:	00004c05 	.word	0x00004c05
    19ec:	00001b9d 	.word	0x00001b9d
    19f0:	00001271 	.word	0x00001271
    19f4:	20003cdc 	.word	0x20003cdc

000019f8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b084      	sub	sp, #16
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	1c0a      	adds	r2, r1, #0
    1a02:	1cbb      	adds	r3, r7, #2
    1a04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	681b      	ldr	r3, [r3, #0]
    1a0a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	79db      	ldrb	r3, [r3, #7]
    1a10:	2201      	movs	r2, #1
    1a12:	4053      	eors	r3, r2
    1a14:	b2db      	uxtb	r3, r3
    1a16:	2b00      	cmp	r3, #0
    1a18:	d001      	beq.n	1a1e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    1a1a:	231c      	movs	r3, #28
    1a1c:	e017      	b.n	1a4e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1a22:	b29b      	uxth	r3, r3
    1a24:	2b00      	cmp	r3, #0
    1a26:	d001      	beq.n	1a2c <usart_write_wait+0x34>
		return STATUS_BUSY;
    1a28:	2305      	movs	r3, #5
    1a2a:	e010      	b.n	1a4e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	1c18      	adds	r0, r3, #0
    1a30:	4b09      	ldr	r3, [pc, #36]	; (1a58 <usart_write_wait+0x60>)
    1a32:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	1cba      	adds	r2, r7, #2
    1a38:	8812      	ldrh	r2, [r2, #0]
    1a3a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1a3c:	46c0      	nop			; (mov r8, r8)
    1a3e:	68fb      	ldr	r3, [r7, #12]
    1a40:	7e1b      	ldrb	r3, [r3, #24]
    1a42:	b2db      	uxtb	r3, r3
    1a44:	1c1a      	adds	r2, r3, #0
    1a46:	2302      	movs	r3, #2
    1a48:	4013      	ands	r3, r2
    1a4a:	d0f8      	beq.n	1a3e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1a4c:	2300      	movs	r3, #0
}
    1a4e:	1c18      	adds	r0, r3, #0
    1a50:	46bd      	mov	sp, r7
    1a52:	b004      	add	sp, #16
    1a54:	bd80      	pop	{r7, pc}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	00001481 	.word	0x00001481

00001a5c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1a5c:	b580      	push	{r7, lr}
    1a5e:	b084      	sub	sp, #16
    1a60:	af00      	add	r7, sp, #0
    1a62:	6078      	str	r0, [r7, #4]
    1a64:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	799b      	ldrb	r3, [r3, #6]
    1a70:	2201      	movs	r2, #1
    1a72:	4053      	eors	r3, r2
    1a74:	b2db      	uxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d001      	beq.n	1a7e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    1a7a:	231c      	movs	r3, #28
    1a7c:	e068      	b.n	1b50 <usart_read_wait+0xf4>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1a7e:	687b      	ldr	r3, [r7, #4]
    1a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1a82:	b29b      	uxth	r3, r3
    1a84:	2b00      	cmp	r3, #0
    1a86:	d001      	beq.n	1a8c <usart_read_wait+0x30>
		return STATUS_BUSY;
    1a88:	2305      	movs	r3, #5
    1a8a:	e061      	b.n	1b50 <usart_read_wait+0xf4>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1a8c:	68fb      	ldr	r3, [r7, #12]
    1a8e:	7e1b      	ldrb	r3, [r3, #24]
    1a90:	b2db      	uxtb	r3, r3
    1a92:	1c1a      	adds	r2, r3, #0
    1a94:	2304      	movs	r3, #4
    1a96:	4013      	ands	r3, r2
    1a98:	d101      	bne.n	1a9e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1a9a:	2305      	movs	r3, #5
    1a9c:	e058      	b.n	1b50 <usart_read_wait+0xf4>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	1c18      	adds	r0, r3, #0
    1aa2:	4b2d      	ldr	r3, [pc, #180]	; (1b58 <usart_read_wait+0xfc>)
    1aa4:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1aa6:	68fb      	ldr	r3, [r7, #12]
    1aa8:	8b5b      	ldrh	r3, [r3, #26]
    1aaa:	b29b      	uxth	r3, r3
    1aac:	b2da      	uxtb	r2, r3
    1aae:	230b      	movs	r3, #11
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	213f      	movs	r1, #63	; 0x3f
    1ab4:	400a      	ands	r2, r1
    1ab6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1ab8:	230b      	movs	r3, #11
    1aba:	18fb      	adds	r3, r7, r3
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d040      	beq.n	1b44 <usart_read_wait+0xe8>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ac2:	230b      	movs	r3, #11
    1ac4:	18fb      	adds	r3, r7, r3
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	2202      	movs	r2, #2
    1aca:	4013      	ands	r3, r2
    1acc:	d004      	beq.n	1ad8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ace:	68fb      	ldr	r3, [r7, #12]
    1ad0:	2202      	movs	r2, #2
    1ad2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    1ad4:	231a      	movs	r3, #26
    1ad6:	e03b      	b.n	1b50 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ad8:	230b      	movs	r3, #11
    1ada:	18fb      	adds	r3, r7, r3
    1adc:	781b      	ldrb	r3, [r3, #0]
    1ade:	2204      	movs	r2, #4
    1ae0:	4013      	ands	r3, r2
    1ae2:	d004      	beq.n	1aee <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	2204      	movs	r2, #4
    1ae8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    1aea:	231e      	movs	r3, #30
    1aec:	e030      	b.n	1b50 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1aee:	230b      	movs	r3, #11
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	2201      	movs	r2, #1
    1af6:	4013      	ands	r3, r2
    1af8:	d004      	beq.n	1b04 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1afa:	68fb      	ldr	r3, [r7, #12]
    1afc:	2201      	movs	r2, #1
    1afe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1b00:	2313      	movs	r3, #19
    1b02:	e025      	b.n	1b50 <usart_read_wait+0xf4>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b04:	230b      	movs	r3, #11
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	2210      	movs	r2, #16
    1b0c:	4013      	ands	r3, r2
    1b0e:	d009      	beq.n	1b24 <usart_read_wait+0xc8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1b10:	68fb      	ldr	r3, [r7, #12]
    1b12:	8b5b      	ldrh	r3, [r3, #26]
    1b14:	b29b      	uxth	r3, r3
    1b16:	2210      	movs	r2, #16
    1b18:	4313      	orrs	r3, r2
    1b1a:	b29a      	uxth	r2, r3
    1b1c:	68fb      	ldr	r3, [r7, #12]
    1b1e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    1b20:	2342      	movs	r3, #66	; 0x42
    1b22:	e015      	b.n	1b50 <usart_read_wait+0xf4>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b24:	230b      	movs	r3, #11
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2220      	movs	r2, #32
    1b2c:	4013      	ands	r3, r2
    1b2e:	d009      	beq.n	1b44 <usart_read_wait+0xe8>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	8b5b      	ldrh	r3, [r3, #26]
    1b34:	b29b      	uxth	r3, r3
    1b36:	2220      	movs	r2, #32
    1b38:	4313      	orrs	r3, r2
    1b3a:	b29a      	uxth	r2, r3
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1b40:	2341      	movs	r3, #65	; 0x41
    1b42:	e005      	b.n	1b50 <usart_read_wait+0xf4>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1b44:	68fb      	ldr	r3, [r7, #12]
    1b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1b48:	b29a      	uxth	r2, r3
    1b4a:	683b      	ldr	r3, [r7, #0]
    1b4c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    1b4e:	2300      	movs	r3, #0
}
    1b50:	1c18      	adds	r0, r3, #0
    1b52:	46bd      	mov	sp, r7
    1b54:	b004      	add	sp, #16
    1b56:	bd80      	pop	{r7, pc}
    1b58:	00001481 	.word	0x00001481

00001b5c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b084      	sub	sp, #16
    1b60:	af00      	add	r7, sp, #0
    1b62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	69db      	ldr	r3, [r3, #28]
    1b6e:	1e5a      	subs	r2, r3, #1
    1b70:	4193      	sbcs	r3, r2
    1b72:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1b74:	1c18      	adds	r0, r3, #0
    1b76:	46bd      	mov	sp, r7
    1b78:	b004      	add	sp, #16
    1b7a:	bd80      	pop	{r7, pc}

00001b7c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	1c18      	adds	r0, r3, #0
    1b8a:	4b03      	ldr	r3, [pc, #12]	; (1b98 <_usart_wait_for_sync+0x1c>)
    1b8c:	4798      	blx	r3
    1b8e:	1e03      	subs	r3, r0, #0
    1b90:	d1f9      	bne.n	1b86 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1b92:	46bd      	mov	sp, r7
    1b94:	b002      	add	sp, #8
    1b96:	bd80      	pop	{r7, pc}
    1b98:	00001b5d 	.word	0x00001b5d

00001b9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b088      	sub	sp, #32
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	1c02      	adds	r2, r0, #0
    1ba4:	1dfb      	adds	r3, r7, #7
    1ba6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1ba8:	1dfb      	adds	r3, r7, #7
    1baa:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1bac:	4bb0      	ldr	r3, [pc, #704]	; (1e70 <_usart_interrupt_handler+0x2d4>)
    1bae:	0092      	lsls	r2, r2, #2
    1bb0:	58d3      	ldr	r3, [r2, r3]
    1bb2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1bb4:	69bb      	ldr	r3, [r7, #24]
    1bb6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    1bb8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1bba:	69bb      	ldr	r3, [r7, #24]
    1bbc:	1c18      	adds	r0, r3, #0
    1bbe:	4bad      	ldr	r3, [pc, #692]	; (1e74 <_usart_interrupt_handler+0x2d8>)
    1bc0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1bc2:	697b      	ldr	r3, [r7, #20]
    1bc4:	7e1b      	ldrb	r3, [r3, #24]
    1bc6:	b2da      	uxtb	r2, r3
    1bc8:	2312      	movs	r3, #18
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1bce:	697b      	ldr	r3, [r7, #20]
    1bd0:	7d9b      	ldrb	r3, [r3, #22]
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	b29a      	uxth	r2, r3
    1bd6:	2312      	movs	r3, #18
    1bd8:	18fb      	adds	r3, r7, r3
    1bda:	2112      	movs	r1, #18
    1bdc:	1879      	adds	r1, r7, r1
    1bde:	8809      	ldrh	r1, [r1, #0]
    1be0:	400a      	ands	r2, r1
    1be2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1be4:	69bb      	ldr	r3, [r7, #24]
    1be6:	2230      	movs	r2, #48	; 0x30
    1be8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    1bea:	69ba      	ldr	r2, [r7, #24]
    1bec:	2131      	movs	r1, #49	; 0x31
    1bee:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1bf0:	4013      	ands	r3, r2
    1bf2:	b2da      	uxtb	r2, r3
    1bf4:	2310      	movs	r3, #16
    1bf6:	18fb      	adds	r3, r7, r3
    1bf8:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1bfa:	2312      	movs	r3, #18
    1bfc:	18fb      	adds	r3, r7, r3
    1bfe:	881b      	ldrh	r3, [r3, #0]
    1c00:	2201      	movs	r2, #1
    1c02:	4013      	ands	r3, r2
    1c04:	d044      	beq.n	1c90 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    1c06:	69bb      	ldr	r3, [r7, #24]
    1c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c0a:	b29b      	uxth	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d03c      	beq.n	1c8a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1c10:	69bb      	ldr	r3, [r7, #24]
    1c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	b2da      	uxtb	r2, r3
    1c18:	231c      	movs	r3, #28
    1c1a:	18fb      	adds	r3, r7, r3
    1c1c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1c1e:	69bb      	ldr	r3, [r7, #24]
    1c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c22:	1c5a      	adds	r2, r3, #1
    1c24:	69bb      	ldr	r3, [r7, #24]
    1c26:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c28:	69bb      	ldr	r3, [r7, #24]
    1c2a:	795b      	ldrb	r3, [r3, #5]
    1c2c:	2b01      	cmp	r3, #1
    1c2e:	d112      	bne.n	1c56 <_usart_interrupt_handler+0xba>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1c30:	69bb      	ldr	r3, [r7, #24]
    1c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c34:	781b      	ldrb	r3, [r3, #0]
    1c36:	b2db      	uxtb	r3, r3
    1c38:	021b      	lsls	r3, r3, #8
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	231c      	movs	r3, #28
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	881b      	ldrh	r3, [r3, #0]
    1c42:	4313      	orrs	r3, r2
    1c44:	b29a      	uxth	r2, r3
    1c46:	231c      	movs	r3, #28
    1c48:	18fb      	adds	r3, r7, r3
    1c4a:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1c4c:	69bb      	ldr	r3, [r7, #24]
    1c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c50:	1c5a      	adds	r2, r3, #1
    1c52:	69bb      	ldr	r3, [r7, #24]
    1c54:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1c56:	231c      	movs	r3, #28
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	881b      	ldrh	r3, [r3, #0]
    1c5c:	05db      	lsls	r3, r3, #23
    1c5e:	0ddb      	lsrs	r3, r3, #23
    1c60:	b29a      	uxth	r2, r3
    1c62:	697b      	ldr	r3, [r7, #20]
    1c64:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1c66:	69bb      	ldr	r3, [r7, #24]
    1c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1c6a:	b29b      	uxth	r3, r3
    1c6c:	3b01      	subs	r3, #1
    1c6e:	b29b      	uxth	r3, r3
    1c70:	69ba      	ldr	r2, [r7, #24]
    1c72:	1c19      	adds	r1, r3, #0
    1c74:	85d1      	strh	r1, [r2, #46]	; 0x2e
    1c76:	2b00      	cmp	r3, #0
    1c78:	d106      	bne.n	1c88 <_usart_interrupt_handler+0xec>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c7a:	697b      	ldr	r3, [r7, #20]
    1c7c:	2201      	movs	r2, #1
    1c7e:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1c80:	697b      	ldr	r3, [r7, #20]
    1c82:	2202      	movs	r2, #2
    1c84:	759a      	strb	r2, [r3, #22]
    1c86:	e003      	b.n	1c90 <_usart_interrupt_handler+0xf4>
    1c88:	e002      	b.n	1c90 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1c8a:	697b      	ldr	r3, [r7, #20]
    1c8c:	2201      	movs	r2, #1
    1c8e:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1c90:	2312      	movs	r3, #18
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	881b      	ldrh	r3, [r3, #0]
    1c96:	2202      	movs	r2, #2
    1c98:	4013      	ands	r3, r2
    1c9a:	d011      	beq.n	1cc0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1c9c:	697b      	ldr	r3, [r7, #20]
    1c9e:	2202      	movs	r2, #2
    1ca0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1ca2:	69bb      	ldr	r3, [r7, #24]
    1ca4:	2233      	movs	r2, #51	; 0x33
    1ca6:	2100      	movs	r1, #0
    1ca8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1caa:	2310      	movs	r3, #16
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	881b      	ldrh	r3, [r3, #0]
    1cb0:	2201      	movs	r2, #1
    1cb2:	4013      	ands	r3, r2
    1cb4:	d004      	beq.n	1cc0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1cb6:	69bb      	ldr	r3, [r7, #24]
    1cb8:	68db      	ldr	r3, [r3, #12]
    1cba:	69ba      	ldr	r2, [r7, #24]
    1cbc:	1c10      	adds	r0, r2, #0
    1cbe:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1cc0:	2312      	movs	r3, #18
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	881b      	ldrh	r3, [r3, #0]
    1cc6:	2204      	movs	r2, #4
    1cc8:	4013      	ands	r3, r2
    1cca:	d100      	bne.n	1cce <_usart_interrupt_handler+0x132>
    1ccc:	e0d7      	b.n	1e7e <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    1cce:	69bb      	ldr	r3, [r7, #24]
    1cd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1cd2:	b29b      	uxth	r3, r3
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d100      	bne.n	1cda <_usart_interrupt_handler+0x13e>
    1cd8:	e0ce      	b.n	1e78 <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1cda:	697b      	ldr	r3, [r7, #20]
    1cdc:	8b5b      	ldrh	r3, [r3, #26]
    1cde:	b29b      	uxth	r3, r3
    1ce0:	b2da      	uxtb	r2, r3
    1ce2:	231f      	movs	r3, #31
    1ce4:	18fb      	adds	r3, r7, r3
    1ce6:	213f      	movs	r1, #63	; 0x3f
    1ce8:	400a      	ands	r2, r1
    1cea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1cec:	231f      	movs	r3, #31
    1cee:	18fb      	adds	r3, r7, r3
    1cf0:	781b      	ldrb	r3, [r3, #0]
    1cf2:	2208      	movs	r2, #8
    1cf4:	4013      	ands	r3, r2
    1cf6:	d007      	beq.n	1d08 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1cf8:	231f      	movs	r3, #31
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	221f      	movs	r2, #31
    1cfe:	18ba      	adds	r2, r7, r2
    1d00:	7812      	ldrb	r2, [r2, #0]
    1d02:	2108      	movs	r1, #8
    1d04:	438a      	bics	r2, r1
    1d06:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1d08:	231f      	movs	r3, #31
    1d0a:	18fb      	adds	r3, r7, r3
    1d0c:	781b      	ldrb	r3, [r3, #0]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d100      	bne.n	1d14 <_usart_interrupt_handler+0x178>
    1d12:	e069      	b.n	1de8 <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1d14:	231f      	movs	r3, #31
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	2202      	movs	r2, #2
    1d1c:	4013      	ands	r3, r2
    1d1e:	d00c      	beq.n	1d3a <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1d20:	69bb      	ldr	r3, [r7, #24]
    1d22:	2232      	movs	r2, #50	; 0x32
    1d24:	211a      	movs	r1, #26
    1d26:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1d28:	697b      	ldr	r3, [r7, #20]
    1d2a:	8b5b      	ldrh	r3, [r3, #26]
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	2202      	movs	r2, #2
    1d30:	4313      	orrs	r3, r2
    1d32:	b29a      	uxth	r2, r3
    1d34:	697b      	ldr	r3, [r7, #20]
    1d36:	835a      	strh	r2, [r3, #26]
    1d38:	e04a      	b.n	1dd0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d3a:	231f      	movs	r3, #31
    1d3c:	18fb      	adds	r3, r7, r3
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	2204      	movs	r2, #4
    1d42:	4013      	ands	r3, r2
    1d44:	d00c      	beq.n	1d60 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1d46:	69bb      	ldr	r3, [r7, #24]
    1d48:	2232      	movs	r2, #50	; 0x32
    1d4a:	211e      	movs	r1, #30
    1d4c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1d4e:	697b      	ldr	r3, [r7, #20]
    1d50:	8b5b      	ldrh	r3, [r3, #26]
    1d52:	b29b      	uxth	r3, r3
    1d54:	2204      	movs	r2, #4
    1d56:	4313      	orrs	r3, r2
    1d58:	b29a      	uxth	r2, r3
    1d5a:	697b      	ldr	r3, [r7, #20]
    1d5c:	835a      	strh	r2, [r3, #26]
    1d5e:	e037      	b.n	1dd0 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d60:	231f      	movs	r3, #31
    1d62:	18fb      	adds	r3, r7, r3
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	2201      	movs	r2, #1
    1d68:	4013      	ands	r3, r2
    1d6a:	d00c      	beq.n	1d86 <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1d6c:	69bb      	ldr	r3, [r7, #24]
    1d6e:	2232      	movs	r2, #50	; 0x32
    1d70:	2113      	movs	r1, #19
    1d72:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1d74:	697b      	ldr	r3, [r7, #20]
    1d76:	8b5b      	ldrh	r3, [r3, #26]
    1d78:	b29b      	uxth	r3, r3
    1d7a:	2201      	movs	r2, #1
    1d7c:	4313      	orrs	r3, r2
    1d7e:	b29a      	uxth	r2, r3
    1d80:	697b      	ldr	r3, [r7, #20]
    1d82:	835a      	strh	r2, [r3, #26]
    1d84:	e024      	b.n	1dd0 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d86:	231f      	movs	r3, #31
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	2210      	movs	r2, #16
    1d8e:	4013      	ands	r3, r2
    1d90:	d00c      	beq.n	1dac <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1d92:	69bb      	ldr	r3, [r7, #24]
    1d94:	2232      	movs	r2, #50	; 0x32
    1d96:	2142      	movs	r1, #66	; 0x42
    1d98:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1d9a:	697b      	ldr	r3, [r7, #20]
    1d9c:	8b5b      	ldrh	r3, [r3, #26]
    1d9e:	b29b      	uxth	r3, r3
    1da0:	2210      	movs	r2, #16
    1da2:	4313      	orrs	r3, r2
    1da4:	b29a      	uxth	r2, r3
    1da6:	697b      	ldr	r3, [r7, #20]
    1da8:	835a      	strh	r2, [r3, #26]
    1daa:	e011      	b.n	1dd0 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1dac:	231f      	movs	r3, #31
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	2220      	movs	r2, #32
    1db4:	4013      	ands	r3, r2
    1db6:	d00b      	beq.n	1dd0 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1db8:	69bb      	ldr	r3, [r7, #24]
    1dba:	2232      	movs	r2, #50	; 0x32
    1dbc:	2141      	movs	r1, #65	; 0x41
    1dbe:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1dc0:	697b      	ldr	r3, [r7, #20]
    1dc2:	8b5b      	ldrh	r3, [r3, #26]
    1dc4:	b29b      	uxth	r3, r3
    1dc6:	2220      	movs	r2, #32
    1dc8:	4313      	orrs	r3, r2
    1dca:	b29a      	uxth	r2, r3
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1dd0:	2310      	movs	r3, #16
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	881b      	ldrh	r3, [r3, #0]
    1dd6:	2204      	movs	r2, #4
    1dd8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1dda:	d050      	beq.n	1e7e <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1ddc:	69bb      	ldr	r3, [r7, #24]
    1dde:	695b      	ldr	r3, [r3, #20]
    1de0:	69ba      	ldr	r2, [r7, #24]
    1de2:	1c10      	adds	r0, r2, #0
    1de4:	4798      	blx	r3
    1de6:	e04a      	b.n	1e7e <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1de8:	697b      	ldr	r3, [r7, #20]
    1dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1dec:	b29a      	uxth	r2, r3
    1dee:	230e      	movs	r3, #14
    1df0:	18fb      	adds	r3, r7, r3
    1df2:	05d2      	lsls	r2, r2, #23
    1df4:	0dd2      	lsrs	r2, r2, #23
    1df6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1df8:	69bb      	ldr	r3, [r7, #24]
    1dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1dfc:	220e      	movs	r2, #14
    1dfe:	18ba      	adds	r2, r7, r2
    1e00:	8812      	ldrh	r2, [r2, #0]
    1e02:	b2d2      	uxtb	r2, r2
    1e04:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1e06:	69bb      	ldr	r3, [r7, #24]
    1e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e0a:	1c5a      	adds	r2, r3, #1
    1e0c:	69bb      	ldr	r3, [r7, #24]
    1e0e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e10:	69bb      	ldr	r3, [r7, #24]
    1e12:	795b      	ldrb	r3, [r3, #5]
    1e14:	2b01      	cmp	r3, #1
    1e16:	d10d      	bne.n	1e34 <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1e18:	69bb      	ldr	r3, [r7, #24]
    1e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e1c:	220e      	movs	r2, #14
    1e1e:	18ba      	adds	r2, r7, r2
    1e20:	8812      	ldrh	r2, [r2, #0]
    1e22:	0a12      	lsrs	r2, r2, #8
    1e24:	b292      	uxth	r2, r2
    1e26:	b2d2      	uxtb	r2, r2
    1e28:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1e2a:	69bb      	ldr	r3, [r7, #24]
    1e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1e2e:	1c5a      	adds	r2, r3, #1
    1e30:	69bb      	ldr	r3, [r7, #24]
    1e32:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1e34:	69bb      	ldr	r3, [r7, #24]
    1e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1e38:	b29b      	uxth	r3, r3
    1e3a:	3b01      	subs	r3, #1
    1e3c:	b29b      	uxth	r3, r3
    1e3e:	69ba      	ldr	r2, [r7, #24]
    1e40:	1c19      	adds	r1, r3, #0
    1e42:	8591      	strh	r1, [r2, #44]	; 0x2c
    1e44:	2b00      	cmp	r3, #0
    1e46:	d112      	bne.n	1e6e <_usart_interrupt_handler+0x2d2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e48:	697b      	ldr	r3, [r7, #20]
    1e4a:	2204      	movs	r2, #4
    1e4c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1e4e:	69bb      	ldr	r3, [r7, #24]
    1e50:	2232      	movs	r2, #50	; 0x32
    1e52:	2100      	movs	r1, #0
    1e54:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1e56:	2310      	movs	r3, #16
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	881b      	ldrh	r3, [r3, #0]
    1e5c:	2202      	movs	r2, #2
    1e5e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1e60:	d005      	beq.n	1e6e <_usart_interrupt_handler+0x2d2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1e62:	69bb      	ldr	r3, [r7, #24]
    1e64:	691b      	ldr	r3, [r3, #16]
    1e66:	69ba      	ldr	r2, [r7, #24]
    1e68:	1c10      	adds	r0, r2, #0
    1e6a:	4798      	blx	r3
    1e6c:	e007      	b.n	1e7e <_usart_interrupt_handler+0x2e2>
    1e6e:	e006      	b.n	1e7e <_usart_interrupt_handler+0x2e2>
    1e70:	20003cdc 	.word	0x20003cdc
    1e74:	00001b7d 	.word	0x00001b7d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e78:	697b      	ldr	r3, [r7, #20]
    1e7a:	2204      	movs	r2, #4
    1e7c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1e7e:	2312      	movs	r3, #18
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	881b      	ldrh	r3, [r3, #0]
    1e84:	2210      	movs	r2, #16
    1e86:	4013      	ands	r3, r2
    1e88:	d010      	beq.n	1eac <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1e8a:	697b      	ldr	r3, [r7, #20]
    1e8c:	2210      	movs	r2, #16
    1e8e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1e90:	697b      	ldr	r3, [r7, #20]
    1e92:	2210      	movs	r2, #16
    1e94:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1e96:	2310      	movs	r3, #16
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	881b      	ldrh	r3, [r3, #0]
    1e9c:	2210      	movs	r2, #16
    1e9e:	4013      	ands	r3, r2
    1ea0:	d004      	beq.n	1eac <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1ea2:	69bb      	ldr	r3, [r7, #24]
    1ea4:	69db      	ldr	r3, [r3, #28]
    1ea6:	69ba      	ldr	r2, [r7, #24]
    1ea8:	1c10      	adds	r0, r2, #0
    1eaa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1eac:	2312      	movs	r3, #18
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	881b      	ldrh	r3, [r3, #0]
    1eb2:	2220      	movs	r2, #32
    1eb4:	4013      	ands	r3, r2
    1eb6:	d010      	beq.n	1eda <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1eb8:	697b      	ldr	r3, [r7, #20]
    1eba:	2220      	movs	r2, #32
    1ebc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1ebe:	697b      	ldr	r3, [r7, #20]
    1ec0:	2220      	movs	r2, #32
    1ec2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ec4:	2310      	movs	r3, #16
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	881b      	ldrh	r3, [r3, #0]
    1eca:	2208      	movs	r2, #8
    1ecc:	4013      	ands	r3, r2
    1ece:	d004      	beq.n	1eda <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1ed0:	69bb      	ldr	r3, [r7, #24]
    1ed2:	699b      	ldr	r3, [r3, #24]
    1ed4:	69ba      	ldr	r2, [r7, #24]
    1ed6:	1c10      	adds	r0, r2, #0
    1ed8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1eda:	2312      	movs	r3, #18
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	881b      	ldrh	r3, [r3, #0]
    1ee0:	2208      	movs	r2, #8
    1ee2:	4013      	ands	r3, r2
    1ee4:	d010      	beq.n	1f08 <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ee6:	697b      	ldr	r3, [r7, #20]
    1ee8:	2208      	movs	r2, #8
    1eea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1eec:	697b      	ldr	r3, [r7, #20]
    1eee:	2208      	movs	r2, #8
    1ef0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ef2:	2310      	movs	r3, #16
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	881b      	ldrh	r3, [r3, #0]
    1ef8:	2220      	movs	r2, #32
    1efa:	4013      	ands	r3, r2
    1efc:	d004      	beq.n	1f08 <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1efe:	69bb      	ldr	r3, [r7, #24]
    1f00:	6a1b      	ldr	r3, [r3, #32]
    1f02:	69ba      	ldr	r2, [r7, #24]
    1f04:	1c10      	adds	r0, r2, #0
    1f06:	4798      	blx	r3
		}
	}
#endif
}
    1f08:	46bd      	mov	sp, r7
    1f0a:	b008      	add	sp, #32
    1f0c:	bd80      	pop	{r7, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)

00001f10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	b086      	sub	sp, #24
    1f14:	af00      	add	r7, sp, #0
    1f16:	60f8      	str	r0, [r7, #12]
    1f18:	60b9      	str	r1, [r7, #8]
    1f1a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1f1c:	2300      	movs	r3, #0
    1f1e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    1f20:	68fb      	ldr	r3, [r7, #12]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d002      	beq.n	1f2c <_read+0x1c>
		return -1;
    1f26:	2301      	movs	r3, #1
    1f28:	425b      	negs	r3, r3
    1f2a:	e015      	b.n	1f58 <_read+0x48>
	}

	for (; len > 0; --len) {
    1f2c:	e010      	b.n	1f50 <_read+0x40>
		ptr_get(stdio_base, ptr);
    1f2e:	4b0c      	ldr	r3, [pc, #48]	; (1f60 <_read+0x50>)
    1f30:	681a      	ldr	r2, [r3, #0]
    1f32:	4b0c      	ldr	r3, [pc, #48]	; (1f64 <_read+0x54>)
    1f34:	6819      	ldr	r1, [r3, #0]
    1f36:	68bb      	ldr	r3, [r7, #8]
    1f38:	1c08      	adds	r0, r1, #0
    1f3a:	1c19      	adds	r1, r3, #0
    1f3c:	4790      	blx	r2
		ptr++;
    1f3e:	68bb      	ldr	r3, [r7, #8]
    1f40:	3301      	adds	r3, #1
    1f42:	60bb      	str	r3, [r7, #8]
		nChars++;
    1f44:	697b      	ldr	r3, [r7, #20]
    1f46:	3301      	adds	r3, #1
    1f48:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	3b01      	subs	r3, #1
    1f4e:	607b      	str	r3, [r7, #4]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	2b00      	cmp	r3, #0
    1f54:	dceb      	bgt.n	1f2e <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    1f56:	697b      	ldr	r3, [r7, #20]
}
    1f58:	1c18      	adds	r0, r3, #0
    1f5a:	46bd      	mov	sp, r7
    1f5c:	b006      	add	sp, #24
    1f5e:	bd80      	pop	{r7, pc}
    1f60:	20003cf4 	.word	0x20003cf4
    1f64:	20003cfc 	.word	0x20003cfc

00001f68 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b086      	sub	sp, #24
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	60f8      	str	r0, [r7, #12]
    1f70:	60b9      	str	r1, [r7, #8]
    1f72:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    1f74:	2300      	movs	r3, #0
    1f76:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    1f78:	68fb      	ldr	r3, [r7, #12]
    1f7a:	2b01      	cmp	r3, #1
    1f7c:	d008      	beq.n	1f90 <_write+0x28>
    1f7e:	68fb      	ldr	r3, [r7, #12]
    1f80:	2b02      	cmp	r3, #2
    1f82:	d005      	beq.n	1f90 <_write+0x28>
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	2b03      	cmp	r3, #3
    1f88:	d002      	beq.n	1f90 <_write+0x28>
		return -1;
    1f8a:	2301      	movs	r3, #1
    1f8c:	425b      	negs	r3, r3
    1f8e:	e019      	b.n	1fc4 <_write+0x5c>
	}

	for (; len != 0; --len) {
    1f90:	e014      	b.n	1fbc <_write+0x54>
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1f92:	4b0e      	ldr	r3, [pc, #56]	; (1fcc <_write+0x64>)
    1f94:	681a      	ldr	r2, [r3, #0]
    1f96:	4b0e      	ldr	r3, [pc, #56]	; (1fd0 <_write+0x68>)
    1f98:	6818      	ldr	r0, [r3, #0]
    1f9a:	68bb      	ldr	r3, [r7, #8]
    1f9c:	1c59      	adds	r1, r3, #1
    1f9e:	60b9      	str	r1, [r7, #8]
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	1c19      	adds	r1, r3, #0
    1fa4:	4790      	blx	r2
    1fa6:	1e03      	subs	r3, r0, #0
    1fa8:	da02      	bge.n	1fb0 <_write+0x48>
			return -1;
    1faa:	2301      	movs	r3, #1
    1fac:	425b      	negs	r3, r3
    1fae:	e009      	b.n	1fc4 <_write+0x5c>
		}
		++nChars;
    1fb0:	697b      	ldr	r3, [r7, #20]
    1fb2:	3301      	adds	r3, #1
    1fb4:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	3b01      	subs	r3, #1
    1fba:	607b      	str	r3, [r7, #4]
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	d1e7      	bne.n	1f92 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    1fc2:	697b      	ldr	r3, [r7, #20]
}
    1fc4:	1c18      	adds	r0, r3, #0
    1fc6:	46bd      	mov	sp, r7
    1fc8:	b006      	add	sp, #24
    1fca:	bd80      	pop	{r7, pc}
    1fcc:	20003cf8 	.word	0x20003cf8
    1fd0:	20003cfc 	.word	0x20003cfc

00001fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1fd4:	b580      	push	{r7, lr}
    1fd6:	b084      	sub	sp, #16
    1fd8:	af00      	add	r7, sp, #0
    1fda:	60f8      	str	r0, [r7, #12]
    1fdc:	60b9      	str	r1, [r7, #8]
    1fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    1fe0:	68fb      	ldr	r3, [r7, #12]
    1fe2:	3b04      	subs	r3, #4
    1fe4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	2280      	movs	r2, #128	; 0x80
    1fea:	0452      	lsls	r2, r2, #17
    1fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1fee:	68fb      	ldr	r3, [r7, #12]
    1ff0:	3b04      	subs	r3, #4
    1ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1ff4:	68ba      	ldr	r2, [r7, #8]
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    1ffa:	68fb      	ldr	r3, [r7, #12]
    1ffc:	3b04      	subs	r3, #4
    1ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2000:	4a08      	ldr	r2, [pc, #32]	; (2024 <STACK_SIZE+0x24>)
    2002:	68fb      	ldr	r3, [r7, #12]
    2004:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	3b14      	subs	r3, #20
    200a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	68fb      	ldr	r3, [r7, #12]
    2010:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    2012:	68fb      	ldr	r3, [r7, #12]
    2014:	3b20      	subs	r3, #32
    2016:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    2018:	68fb      	ldr	r3, [r7, #12]
}
    201a:	1c18      	adds	r0, r3, #0
    201c:	46bd      	mov	sp, r7
    201e:	b004      	add	sp, #16
    2020:	bd80      	pop	{r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	00002029 	.word	0x00002029

00002028 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    2028:	b580      	push	{r7, lr}
    202a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    202c:	4b03      	ldr	r3, [pc, #12]	; (203c <prvTaskExitError+0x14>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	3301      	adds	r3, #1
    2032:	d001      	beq.n	2038 <prvTaskExitError+0x10>
    2034:	b672      	cpsid	i
    2036:	e7fe      	b.n	2036 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    2038:	b672      	cpsid	i
	for( ;; );
    203a:	e7fe      	b.n	203a <prvTaskExitError+0x12>
    203c:	20000004 	.word	0x20000004

00002040 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    2040:	b580      	push	{r7, lr}
    2042:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    2044:	46bd      	mov	sp, r7
    2046:	bd80      	pop	{r7, pc}

00002048 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2048:	4a06      	ldr	r2, [pc, #24]	; (2064 <pxCurrentTCBConst2>)
    204a:	6813      	ldr	r3, [r2, #0]
    204c:	6818      	ldr	r0, [r3, #0]
    204e:	3020      	adds	r0, #32
    2050:	f380 8809 	msr	PSP, r0
    2054:	2002      	movs	r0, #2
    2056:	f380 8814 	msr	CONTROL, r0
    205a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    205c:	46ae      	mov	lr, r5
    205e:	b662      	cpsie	i
    2060:	bd00      	pop	{pc}
    2062:	46c0      	nop			; (mov r8, r8)

00002064 <pxCurrentTCBConst2>:
    2064:	20003b50 	.word	0x20003b50

00002068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2068:	b580      	push	{r7, lr}
    206a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    206c:	4b0d      	ldr	r3, [pc, #52]	; (20a4 <xPortStartScheduler+0x3c>)
    206e:	4a0d      	ldr	r2, [pc, #52]	; (20a4 <xPortStartScheduler+0x3c>)
    2070:	6812      	ldr	r2, [r2, #0]
    2072:	21ff      	movs	r1, #255	; 0xff
    2074:	0409      	lsls	r1, r1, #16
    2076:	430a      	orrs	r2, r1
    2078:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    207a:	4b0a      	ldr	r3, [pc, #40]	; (20a4 <xPortStartScheduler+0x3c>)
    207c:	4a09      	ldr	r2, [pc, #36]	; (20a4 <xPortStartScheduler+0x3c>)
    207e:	6812      	ldr	r2, [r2, #0]
    2080:	21ff      	movs	r1, #255	; 0xff
    2082:	0609      	lsls	r1, r1, #24
    2084:	430a      	orrs	r2, r1
    2086:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    2088:	4b07      	ldr	r3, [pc, #28]	; (20a8 <xPortStartScheduler+0x40>)
    208a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    208c:	4b07      	ldr	r3, [pc, #28]	; (20ac <xPortStartScheduler+0x44>)
    208e:	2200      	movs	r2, #0
    2090:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    2092:	4b07      	ldr	r3, [pc, #28]	; (20b0 <xPortStartScheduler+0x48>)
    2094:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <xPortStartScheduler+0x4c>)
    2098:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    209a:	2300      	movs	r3, #0
}
    209c:	1c18      	adds	r0, r3, #0
    209e:	46bd      	mov	sp, r7
    20a0:	bd80      	pop	{r7, pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	e000ed20 	.word	0xe000ed20
    20a8:	000021b5 	.word	0x000021b5
    20ac:	20000004 	.word	0x20000004
    20b0:	00002049 	.word	0x00002049
    20b4:	00002029 	.word	0x00002029

000020b8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    20b8:	b580      	push	{r7, lr}
    20ba:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <vPortYield+0x18>)
    20be:	2280      	movs	r2, #128	; 0x80
    20c0:	0552      	lsls	r2, r2, #21
    20c2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    20c4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    20c8:	f3bf 8f6f 	isb	sy
}
    20cc:	46bd      	mov	sp, r7
    20ce:	bd80      	pop	{r7, pc}
    20d0:	e000ed04 	.word	0xe000ed04

000020d4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    20d4:	b580      	push	{r7, lr}
    20d6:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    20d8:	b672      	cpsid	i
    uxCriticalNesting++;
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <vPortEnterCritical+0x1c>)
    20dc:	681b      	ldr	r3, [r3, #0]
    20de:	1c5a      	adds	r2, r3, #1
    20e0:	4b03      	ldr	r3, [pc, #12]	; (20f0 <vPortEnterCritical+0x1c>)
    20e2:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    20e4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    20e8:	f3bf 8f6f 	isb	sy
}
    20ec:	46bd      	mov	sp, r7
    20ee:	bd80      	pop	{r7, pc}
    20f0:	20000004 	.word	0x20000004

000020f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    20f4:	b580      	push	{r7, lr}
    20f6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    20f8:	4b08      	ldr	r3, [pc, #32]	; (211c <vPortExitCritical+0x28>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	2b00      	cmp	r3, #0
    20fe:	d101      	bne.n	2104 <vPortExitCritical+0x10>
    2100:	b672      	cpsid	i
    2102:	e7fe      	b.n	2102 <vPortExitCritical+0xe>
    uxCriticalNesting--;
    2104:	4b05      	ldr	r3, [pc, #20]	; (211c <vPortExitCritical+0x28>)
    2106:	681b      	ldr	r3, [r3, #0]
    2108:	1e5a      	subs	r2, r3, #1
    210a:	4b04      	ldr	r3, [pc, #16]	; (211c <vPortExitCritical+0x28>)
    210c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    210e:	4b03      	ldr	r3, [pc, #12]	; (211c <vPortExitCritical+0x28>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	2b00      	cmp	r3, #0
    2114:	d100      	bne.n	2118 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    2116:	b662      	cpsie	i
    }
}
    2118:	46bd      	mov	sp, r7
    211a:	bd80      	pop	{r7, pc}
    211c:	20000004 	.word	0x20000004

00002120 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    2120:	f3ef 8010 	mrs	r0, PRIMASK
    2124:	b672      	cpsid	i
    2126:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    2128:	2300      	movs	r3, #0
}
    212a:	1c18      	adds	r0, r3, #0

0000212c <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    212c:	f380 8810 	msr	PRIMASK, r0
    2130:	4770      	bx	lr
    2132:	46c0      	nop			; (mov r8, r8)

00002134 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2134:	f3ef 8009 	mrs	r0, PSP
    2138:	4b0e      	ldr	r3, [pc, #56]	; (2174 <pxCurrentTCBConst>)
    213a:	681a      	ldr	r2, [r3, #0]
    213c:	3820      	subs	r0, #32
    213e:	6010      	str	r0, [r2, #0]
    2140:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2142:	4644      	mov	r4, r8
    2144:	464d      	mov	r5, r9
    2146:	4656      	mov	r6, sl
    2148:	465f      	mov	r7, fp
    214a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    214c:	b508      	push	{r3, lr}
    214e:	b672      	cpsid	i
    2150:	f001 f8a6 	bl	32a0 <vTaskSwitchContext>
    2154:	b662      	cpsie	i
    2156:	bc0c      	pop	{r2, r3}
    2158:	6811      	ldr	r1, [r2, #0]
    215a:	6808      	ldr	r0, [r1, #0]
    215c:	3010      	adds	r0, #16
    215e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2160:	46a0      	mov	r8, r4
    2162:	46a9      	mov	r9, r5
    2164:	46b2      	mov	sl, r6
    2166:	46bb      	mov	fp, r7
    2168:	f380 8809 	msr	PSP, r0
    216c:	3820      	subs	r0, #32
    216e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2170:	4718      	bx	r3
    2172:	46c0      	nop			; (mov r8, r8)

00002174 <pxCurrentTCBConst>:
    2174:	20003b50 	.word	0x20003b50

00002178 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    217e:	4b09      	ldr	r3, [pc, #36]	; (21a4 <SysTick_Handler+0x2c>)
    2180:	4798      	blx	r3
    2182:	1c03      	adds	r3, r0, #0
    2184:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2186:	4b08      	ldr	r3, [pc, #32]	; (21a8 <SysTick_Handler+0x30>)
    2188:	4798      	blx	r3
    218a:	1e03      	subs	r3, r0, #0
    218c:	d003      	beq.n	2196 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    218e:	4b07      	ldr	r3, [pc, #28]	; (21ac <SysTick_Handler+0x34>)
    2190:	2280      	movs	r2, #128	; 0x80
    2192:	0552      	lsls	r2, r2, #21
    2194:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	1c18      	adds	r0, r3, #0
    219a:	4b05      	ldr	r3, [pc, #20]	; (21b0 <SysTick_Handler+0x38>)
    219c:	4798      	blx	r3
}
    219e:	46bd      	mov	sp, r7
    21a0:	b002      	add	sp, #8
    21a2:	bd80      	pop	{r7, pc}
    21a4:	00002121 	.word	0x00002121
    21a8:	00003129 	.word	0x00003129
    21ac:	e000ed04 	.word	0xe000ed04
    21b0:	0000212d 	.word	0x0000212d

000021b4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    21b4:	b580      	push	{r7, lr}
    21b6:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <vPortSetupTimerInterrupt+0x1c>)
    21ba:	2200      	movs	r2, #0
    21bc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    21be:	4b05      	ldr	r3, [pc, #20]	; (21d4 <vPortSetupTimerInterrupt+0x20>)
    21c0:	4a05      	ldr	r2, [pc, #20]	; (21d8 <vPortSetupTimerInterrupt+0x24>)
    21c2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    21c4:	4b05      	ldr	r3, [pc, #20]	; (21dc <vPortSetupTimerInterrupt+0x28>)
    21c6:	2207      	movs	r2, #7
    21c8:	601a      	str	r2, [r3, #0]
}
    21ca:	46bd      	mov	sp, r7
    21cc:	bd80      	pop	{r7, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	e000e018 	.word	0xe000e018
    21d4:	e000e014 	.word	0xe000e014
    21d8:	00001f3f 	.word	0x00001f3f
    21dc:	e000e010 	.word	0xe000e010

000021e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	af00      	add	r7, sp, #0
    21e6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    21e8:	2300      	movs	r3, #0
    21ea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	2207      	movs	r2, #7
    21f0:	4013      	ands	r3, r2
    21f2:	d004      	beq.n	21fe <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	2207      	movs	r2, #7
    21f8:	4393      	bics	r3, r2
    21fa:	3308      	adds	r3, #8
    21fc:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    21fe:	4b17      	ldr	r3, [pc, #92]	; (225c <pvPortMalloc+0x7c>)
    2200:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2202:	4b17      	ldr	r3, [pc, #92]	; (2260 <pvPortMalloc+0x80>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	2b00      	cmp	r3, #0
    2208:	d105      	bne.n	2216 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    220a:	4b16      	ldr	r3, [pc, #88]	; (2264 <pvPortMalloc+0x84>)
    220c:	2207      	movs	r2, #7
    220e:	4393      	bics	r3, r2
    2210:	1c1a      	adds	r2, r3, #0
    2212:	4b13      	ldr	r3, [pc, #76]	; (2260 <pvPortMalloc+0x80>)
    2214:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2216:	4b14      	ldr	r3, [pc, #80]	; (2268 <pvPortMalloc+0x88>)
    2218:	681a      	ldr	r2, [r3, #0]
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	18d3      	adds	r3, r2, r3
    221e:	4a13      	ldr	r2, [pc, #76]	; (226c <pvPortMalloc+0x8c>)
    2220:	4293      	cmp	r3, r2
    2222:	d813      	bhi.n	224c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    2224:	4b10      	ldr	r3, [pc, #64]	; (2268 <pvPortMalloc+0x88>)
    2226:	681a      	ldr	r2, [r3, #0]
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	18d2      	adds	r2, r2, r3
    222c:	4b0e      	ldr	r3, [pc, #56]	; (2268 <pvPortMalloc+0x88>)
    222e:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2230:	429a      	cmp	r2, r3
    2232:	d90b      	bls.n	224c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2234:	4b0a      	ldr	r3, [pc, #40]	; (2260 <pvPortMalloc+0x80>)
    2236:	681a      	ldr	r2, [r3, #0]
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <pvPortMalloc+0x88>)
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	18d3      	adds	r3, r2, r3
    223e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    2240:	4b09      	ldr	r3, [pc, #36]	; (2268 <pvPortMalloc+0x88>)
    2242:	681a      	ldr	r2, [r3, #0]
    2244:	687b      	ldr	r3, [r7, #4]
    2246:	18d2      	adds	r2, r2, r3
    2248:	4b07      	ldr	r3, [pc, #28]	; (2268 <pvPortMalloc+0x88>)
    224a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    224c:	4b08      	ldr	r3, [pc, #32]	; (2270 <pvPortMalloc+0x90>)
    224e:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    2250:	68fb      	ldr	r3, [r7, #12]
}
    2252:	1c18      	adds	r0, r3, #0
    2254:	46bd      	mov	sp, r7
    2256:	b004      	add	sp, #16
    2258:	bd80      	pop	{r7, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	00002fc5 	.word	0x00002fc5
    2260:	20003b4c 	.word	0x20003b4c
    2264:	200000b8 	.word	0x200000b8
    2268:	20003b48 	.word	0x20003b48
    226c:	00003a8f 	.word	0x00003a8f
    2270:	00002fdd 	.word	0x00002fdd

00002274 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2274:	b580      	push	{r7, lr}
    2276:	b082      	sub	sp, #8
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	2b00      	cmp	r3, #0
    2280:	d001      	beq.n	2286 <vPortFree+0x12>
    2282:	b672      	cpsid	i
    2284:	e7fe      	b.n	2284 <vPortFree+0x10>
}
    2286:	46bd      	mov	sp, r7
    2288:	b002      	add	sp, #8
    228a:	bd80      	pop	{r7, pc}

0000228c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    228c:	b580      	push	{r7, lr}
    228e:	b082      	sub	sp, #8
    2290:	af00      	add	r7, sp, #0
    2292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	3308      	adds	r3, #8
    2298:	1c1a      	adds	r2, r3, #0
    229a:	687b      	ldr	r3, [r7, #4]
    229c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    229e:	687b      	ldr	r3, [r7, #4]
    22a0:	2201      	movs	r2, #1
    22a2:	4252      	negs	r2, r2
    22a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	3308      	adds	r3, #8
    22aa:	1c1a      	adds	r2, r3, #0
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	3308      	adds	r3, #8
    22b4:	1c1a      	adds	r2, r3, #0
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	2200      	movs	r2, #0
    22be:	601a      	str	r2, [r3, #0]
}
    22c0:	46bd      	mov	sp, r7
    22c2:	b002      	add	sp, #8
    22c4:	bd80      	pop	{r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)

000022c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b082      	sub	sp, #8
    22cc:	af00      	add	r7, sp, #0
    22ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	2200      	movs	r2, #0
    22d4:	611a      	str	r2, [r3, #16]
}
    22d6:	46bd      	mov	sp, r7
    22d8:	b002      	add	sp, #8
    22da:	bd80      	pop	{r7, pc}

000022dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    22dc:	b580      	push	{r7, lr}
    22de:	b084      	sub	sp, #16
    22e0:	af00      	add	r7, sp, #0
    22e2:	6078      	str	r0, [r7, #4]
    22e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    22e6:	687b      	ldr	r3, [r7, #4]
    22e8:	685b      	ldr	r3, [r3, #4]
    22ea:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    22ec:	683b      	ldr	r3, [r7, #0]
    22ee:	68fa      	ldr	r2, [r7, #12]
    22f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    22f2:	68fb      	ldr	r3, [r7, #12]
    22f4:	689a      	ldr	r2, [r3, #8]
    22f6:	683b      	ldr	r3, [r7, #0]
    22f8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    22fa:	68fb      	ldr	r3, [r7, #12]
    22fc:	689b      	ldr	r3, [r3, #8]
    22fe:	683a      	ldr	r2, [r7, #0]
    2300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2302:	68fb      	ldr	r3, [r7, #12]
    2304:	683a      	ldr	r2, [r7, #0]
    2306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2308:	683b      	ldr	r3, [r7, #0]
    230a:	687a      	ldr	r2, [r7, #4]
    230c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	1c5a      	adds	r2, r3, #1
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	601a      	str	r2, [r3, #0]
}
    2318:	46bd      	mov	sp, r7
    231a:	b004      	add	sp, #16
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)

00002320 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2320:	b580      	push	{r7, lr}
    2322:	b084      	sub	sp, #16
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    232a:	683b      	ldr	r3, [r7, #0]
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2330:	68bb      	ldr	r3, [r7, #8]
    2332:	3301      	adds	r3, #1
    2334:	d103      	bne.n	233e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	691b      	ldr	r3, [r3, #16]
    233a:	60fb      	str	r3, [r7, #12]
    233c:	e00c      	b.n	2358 <vListInsert+0x38>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	3308      	adds	r3, #8
    2342:	60fb      	str	r3, [r7, #12]
    2344:	e002      	b.n	234c <vListInsert+0x2c>
    2346:	68fb      	ldr	r3, [r7, #12]
    2348:	685b      	ldr	r3, [r3, #4]
    234a:	60fb      	str	r3, [r7, #12]
    234c:	68fb      	ldr	r3, [r7, #12]
    234e:	685b      	ldr	r3, [r3, #4]
    2350:	681a      	ldr	r2, [r3, #0]
    2352:	68bb      	ldr	r3, [r7, #8]
    2354:	429a      	cmp	r2, r3
    2356:	d9f6      	bls.n	2346 <vListInsert+0x26>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2358:	68fb      	ldr	r3, [r7, #12]
    235a:	685a      	ldr	r2, [r3, #4]
    235c:	683b      	ldr	r3, [r7, #0]
    235e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2360:	683b      	ldr	r3, [r7, #0]
    2362:	685b      	ldr	r3, [r3, #4]
    2364:	683a      	ldr	r2, [r7, #0]
    2366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2368:	683b      	ldr	r3, [r7, #0]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    236e:	68fb      	ldr	r3, [r7, #12]
    2370:	683a      	ldr	r2, [r7, #0]
    2372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2374:	683b      	ldr	r3, [r7, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    237a:	687b      	ldr	r3, [r7, #4]
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	1c5a      	adds	r2, r3, #1
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	601a      	str	r2, [r3, #0]
}
    2384:	46bd      	mov	sp, r7
    2386:	b004      	add	sp, #16
    2388:	bd80      	pop	{r7, pc}
    238a:	46c0      	nop			; (mov r8, r8)

0000238c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    238c:	b580      	push	{r7, lr}
    238e:	b084      	sub	sp, #16
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	691b      	ldr	r3, [r3, #16]
    2398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	685b      	ldr	r3, [r3, #4]
    239e:	687a      	ldr	r2, [r7, #4]
    23a0:	6892      	ldr	r2, [r2, #8]
    23a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	689b      	ldr	r3, [r3, #8]
    23a8:	687a      	ldr	r2, [r7, #4]
    23aa:	6852      	ldr	r2, [r2, #4]
    23ac:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    23ae:	68fb      	ldr	r3, [r7, #12]
    23b0:	685a      	ldr	r2, [r3, #4]
    23b2:	687b      	ldr	r3, [r7, #4]
    23b4:	429a      	cmp	r2, r3
    23b6:	d103      	bne.n	23c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    23b8:	687b      	ldr	r3, [r7, #4]
    23ba:	689a      	ldr	r2, [r3, #8]
    23bc:	68fb      	ldr	r3, [r7, #12]
    23be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    23c0:	687b      	ldr	r3, [r7, #4]
    23c2:	2200      	movs	r2, #0
    23c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    23c6:	68fb      	ldr	r3, [r7, #12]
    23c8:	681b      	ldr	r3, [r3, #0]
    23ca:	1e5a      	subs	r2, r3, #1
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    23d0:	68fb      	ldr	r3, [r7, #12]
    23d2:	681b      	ldr	r3, [r3, #0]
}
    23d4:	1c18      	adds	r0, r3, #0
    23d6:	46bd      	mov	sp, r7
    23d8:	b004      	add	sp, #16
    23da:	bd80      	pop	{r7, pc}

000023dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    23dc:	b580      	push	{r7, lr}
    23de:	b084      	sub	sp, #16
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    23ea:	68fb      	ldr	r3, [r7, #12]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d101      	bne.n	23f4 <xQueueGenericReset+0x18>
    23f0:	b672      	cpsid	i
    23f2:	e7fe      	b.n	23f2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    23f4:	4b24      	ldr	r3, [pc, #144]	; (2488 <xQueueGenericReset+0xac>)
    23f6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    23f8:	68fb      	ldr	r3, [r7, #12]
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	68fb      	ldr	r3, [r7, #12]
    23fe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2404:	434b      	muls	r3, r1
    2406:	18d2      	adds	r2, r2, r3
    2408:	68fb      	ldr	r3, [r7, #12]
    240a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	2200      	movs	r2, #0
    2410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2412:	68fb      	ldr	r3, [r7, #12]
    2414:	681a      	ldr	r2, [r3, #0]
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    241a:	68fb      	ldr	r3, [r7, #12]
    241c:	681a      	ldr	r2, [r3, #0]
    241e:	68fb      	ldr	r3, [r7, #12]
    2420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2422:	1e59      	subs	r1, r3, #1
    2424:	68fb      	ldr	r3, [r7, #12]
    2426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2428:	434b      	muls	r3, r1
    242a:	18d2      	adds	r2, r2, r3
    242c:	68fb      	ldr	r3, [r7, #12]
    242e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2430:	68fb      	ldr	r3, [r7, #12]
    2432:	2201      	movs	r2, #1
    2434:	4252      	negs	r2, r2
    2436:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	2201      	movs	r2, #1
    243c:	4252      	negs	r2, r2
    243e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    2440:	683b      	ldr	r3, [r7, #0]
    2442:	2b00      	cmp	r3, #0
    2444:	d10e      	bne.n	2464 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	691b      	ldr	r3, [r3, #16]
    244a:	2b00      	cmp	r3, #0
    244c:	d014      	beq.n	2478 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    244e:	68fb      	ldr	r3, [r7, #12]
    2450:	3310      	adds	r3, #16
    2452:	1c18      	adds	r0, r3, #0
    2454:	4b0d      	ldr	r3, [pc, #52]	; (248c <xQueueGenericReset+0xb0>)
    2456:	4798      	blx	r3
    2458:	1e03      	subs	r3, r0, #0
    245a:	2b01      	cmp	r3, #1
    245c:	d10c      	bne.n	2478 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    245e:	4b0c      	ldr	r3, [pc, #48]	; (2490 <xQueueGenericReset+0xb4>)
    2460:	4798      	blx	r3
    2462:	e009      	b.n	2478 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2464:	68fb      	ldr	r3, [r7, #12]
    2466:	3310      	adds	r3, #16
    2468:	1c18      	adds	r0, r3, #0
    246a:	4b0a      	ldr	r3, [pc, #40]	; (2494 <xQueueGenericReset+0xb8>)
    246c:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    246e:	68fb      	ldr	r3, [r7, #12]
    2470:	3324      	adds	r3, #36	; 0x24
    2472:	1c18      	adds	r0, r3, #0
    2474:	4b07      	ldr	r3, [pc, #28]	; (2494 <xQueueGenericReset+0xb8>)
    2476:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    2478:	4b07      	ldr	r3, [pc, #28]	; (2498 <xQueueGenericReset+0xbc>)
    247a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    247c:	2301      	movs	r3, #1
}
    247e:	1c18      	adds	r0, r3, #0
    2480:	46bd      	mov	sp, r7
    2482:	b004      	add	sp, #16
    2484:	bd80      	pop	{r7, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	000020d5 	.word	0x000020d5
    248c:	00003419 	.word	0x00003419
    2490:	000020b9 	.word	0x000020b9
    2494:	0000228d 	.word	0x0000228d
    2498:	000020f5 	.word	0x000020f5

0000249c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    249c:	b580      	push	{r7, lr}
    249e:	b088      	sub	sp, #32
    24a0:	af00      	add	r7, sp, #0
    24a2:	60f8      	str	r0, [r7, #12]
    24a4:	60b9      	str	r1, [r7, #8]
    24a6:	1dfb      	adds	r3, r7, #7
    24a8:	701a      	strb	r2, [r3, #0]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
    24aa:	2300      	movs	r3, #0
    24ac:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    24ae:	68fb      	ldr	r3, [r7, #12]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d02c      	beq.n	250e <xQueueGenericCreate+0x72>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    24b4:	2050      	movs	r0, #80	; 0x50
    24b6:	4b1b      	ldr	r3, [pc, #108]	; (2524 <xQueueGenericCreate+0x88>)
    24b8:	4798      	blx	r3
    24ba:	1c03      	adds	r3, r0, #0
    24bc:	61bb      	str	r3, [r7, #24]
		if( pxNewQueue != NULL )
    24be:	69bb      	ldr	r3, [r7, #24]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d024      	beq.n	250e <xQueueGenericCreate+0x72>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24c4:	68fb      	ldr	r3, [r7, #12]
    24c6:	68ba      	ldr	r2, [r7, #8]
    24c8:	4353      	muls	r3, r2
    24ca:	3301      	adds	r3, #1
    24cc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    24ce:	697b      	ldr	r3, [r7, #20]
    24d0:	1c18      	adds	r0, r3, #0
    24d2:	4b14      	ldr	r3, [pc, #80]	; (2524 <xQueueGenericCreate+0x88>)
    24d4:	4798      	blx	r3
    24d6:	1c02      	adds	r2, r0, #0
    24d8:	69bb      	ldr	r3, [r7, #24]
    24da:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    24dc:	69bb      	ldr	r3, [r7, #24]
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	2b00      	cmp	r3, #0
    24e2:	d010      	beq.n	2506 <xQueueGenericCreate+0x6a>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    24e4:	69bb      	ldr	r3, [r7, #24]
    24e6:	68fa      	ldr	r2, [r7, #12]
    24e8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    24ea:	69bb      	ldr	r3, [r7, #24]
    24ec:	68ba      	ldr	r2, [r7, #8]
    24ee:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    24f0:	69bb      	ldr	r3, [r7, #24]
    24f2:	1c18      	adds	r0, r3, #0
    24f4:	2101      	movs	r1, #1
    24f6:	4b0c      	ldr	r3, [pc, #48]	; (2528 <xQueueGenericCreate+0x8c>)
    24f8:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    24fa:	69bb      	ldr	r3, [r7, #24]
    24fc:	2200      	movs	r2, #0
    24fe:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2500:	69bb      	ldr	r3, [r7, #24]
    2502:	61fb      	str	r3, [r7, #28]
    2504:	e003      	b.n	250e <xQueueGenericCreate+0x72>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2506:	69bb      	ldr	r3, [r7, #24]
    2508:	1c18      	adds	r0, r3, #0
    250a:	4b08      	ldr	r3, [pc, #32]	; (252c <xQueueGenericCreate+0x90>)
    250c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    250e:	69fb      	ldr	r3, [r7, #28]
    2510:	2b00      	cmp	r3, #0
    2512:	d101      	bne.n	2518 <xQueueGenericCreate+0x7c>
    2514:	b672      	cpsid	i
    2516:	e7fe      	b.n	2516 <xQueueGenericCreate+0x7a>

	return xReturn;
    2518:	69fb      	ldr	r3, [r7, #28]
}
    251a:	1c18      	adds	r0, r3, #0
    251c:	46bd      	mov	sp, r7
    251e:	b008      	add	sp, #32
    2520:	bd80      	pop	{r7, pc}
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	000021e1 	.word	0x000021e1
    2528:	000023dd 	.word	0x000023dd
    252c:	00002275 	.word	0x00002275

00002530 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2530:	b580      	push	{r7, lr}
    2532:	b088      	sub	sp, #32
    2534:	af00      	add	r7, sp, #0
    2536:	60f8      	str	r0, [r7, #12]
    2538:	60b9      	str	r1, [r7, #8]
    253a:	607a      	str	r2, [r7, #4]
    253c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    253e:	2300      	movs	r3, #0
    2540:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2542:	68fb      	ldr	r3, [r7, #12]
    2544:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    2546:	69bb      	ldr	r3, [r7, #24]
    2548:	2b00      	cmp	r3, #0
    254a:	d101      	bne.n	2550 <xQueueGenericSend+0x20>
    254c:	b672      	cpsid	i
    254e:	e7fe      	b.n	254e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2550:	68bb      	ldr	r3, [r7, #8]
    2552:	2b00      	cmp	r3, #0
    2554:	d103      	bne.n	255e <xQueueGenericSend+0x2e>
    2556:	69bb      	ldr	r3, [r7, #24]
    2558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    255a:	2b00      	cmp	r3, #0
    255c:	d101      	bne.n	2562 <xQueueGenericSend+0x32>
    255e:	2301      	movs	r3, #1
    2560:	e000      	b.n	2564 <xQueueGenericSend+0x34>
    2562:	2300      	movs	r3, #0
    2564:	2b00      	cmp	r3, #0
    2566:	d101      	bne.n	256c <xQueueGenericSend+0x3c>
    2568:	b672      	cpsid	i
    256a:	e7fe      	b.n	256a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    256c:	683b      	ldr	r3, [r7, #0]
    256e:	2b02      	cmp	r3, #2
    2570:	d103      	bne.n	257a <xQueueGenericSend+0x4a>
    2572:	69bb      	ldr	r3, [r7, #24]
    2574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2576:	2b01      	cmp	r3, #1
    2578:	d101      	bne.n	257e <xQueueGenericSend+0x4e>
    257a:	2301      	movs	r3, #1
    257c:	e000      	b.n	2580 <xQueueGenericSend+0x50>
    257e:	2300      	movs	r3, #0
    2580:	2b00      	cmp	r3, #0
    2582:	d101      	bne.n	2588 <xQueueGenericSend+0x58>
    2584:	b672      	cpsid	i
    2586:	e7fe      	b.n	2586 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2588:	4b4f      	ldr	r3, [pc, #316]	; (26c8 <xQueueGenericSend+0x198>)
    258a:	4798      	blx	r3
    258c:	1e03      	subs	r3, r0, #0
    258e:	d102      	bne.n	2596 <xQueueGenericSend+0x66>
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	2b00      	cmp	r3, #0
    2594:	d101      	bne.n	259a <xQueueGenericSend+0x6a>
    2596:	2301      	movs	r3, #1
    2598:	e000      	b.n	259c <xQueueGenericSend+0x6c>
    259a:	2300      	movs	r3, #0
    259c:	2b00      	cmp	r3, #0
    259e:	d101      	bne.n	25a4 <xQueueGenericSend+0x74>
    25a0:	b672      	cpsid	i
    25a2:	e7fe      	b.n	25a2 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    25a4:	4b49      	ldr	r3, [pc, #292]	; (26cc <xQueueGenericSend+0x19c>)
    25a6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    25a8:	69bb      	ldr	r3, [r7, #24]
    25aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    25ac:	69bb      	ldr	r3, [r7, #24]
    25ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    25b0:	429a      	cmp	r2, r3
    25b2:	d302      	bcc.n	25ba <xQueueGenericSend+0x8a>
    25b4:	683b      	ldr	r3, [r7, #0]
    25b6:	2b02      	cmp	r3, #2
    25b8:	d129      	bne.n	260e <xQueueGenericSend+0xde>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    25ba:	69b9      	ldr	r1, [r7, #24]
    25bc:	68ba      	ldr	r2, [r7, #8]
    25be:	683b      	ldr	r3, [r7, #0]
    25c0:	1c08      	adds	r0, r1, #0
    25c2:	1c11      	adds	r1, r2, #0
    25c4:	1c1a      	adds	r2, r3, #0
    25c6:	4b42      	ldr	r3, [pc, #264]	; (26d0 <xQueueGenericSend+0x1a0>)
    25c8:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    25ca:	69bb      	ldr	r3, [r7, #24]
    25cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    25ce:	2b00      	cmp	r3, #0
    25d0:	d00b      	beq.n	25ea <xQueueGenericSend+0xba>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    25d2:	69ba      	ldr	r2, [r7, #24]
    25d4:	683b      	ldr	r3, [r7, #0]
    25d6:	1c10      	adds	r0, r2, #0
    25d8:	1c19      	adds	r1, r3, #0
    25da:	4b3e      	ldr	r3, [pc, #248]	; (26d4 <xQueueGenericSend+0x1a4>)
    25dc:	4798      	blx	r3
    25de:	1e03      	subs	r3, r0, #0
    25e0:	2b01      	cmp	r3, #1
    25e2:	d110      	bne.n	2606 <xQueueGenericSend+0xd6>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    25e4:	4b3c      	ldr	r3, [pc, #240]	; (26d8 <xQueueGenericSend+0x1a8>)
    25e6:	4798      	blx	r3
    25e8:	e00d      	b.n	2606 <xQueueGenericSend+0xd6>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    25ea:	69bb      	ldr	r3, [r7, #24]
    25ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    25ee:	2b00      	cmp	r3, #0
    25f0:	d009      	beq.n	2606 <xQueueGenericSend+0xd6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    25f2:	69bb      	ldr	r3, [r7, #24]
    25f4:	3324      	adds	r3, #36	; 0x24
    25f6:	1c18      	adds	r0, r3, #0
    25f8:	4b38      	ldr	r3, [pc, #224]	; (26dc <xQueueGenericSend+0x1ac>)
    25fa:	4798      	blx	r3
    25fc:	1e03      	subs	r3, r0, #0
    25fe:	2b01      	cmp	r3, #1
    2600:	d101      	bne.n	2606 <xQueueGenericSend+0xd6>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    2602:	4b35      	ldr	r3, [pc, #212]	; (26d8 <xQueueGenericSend+0x1a8>)
    2604:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    2606:	4b36      	ldr	r3, [pc, #216]	; (26e0 <xQueueGenericSend+0x1b0>)
    2608:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    260a:	2301      	movs	r3, #1
    260c:	e058      	b.n	26c0 <xQueueGenericSend+0x190>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	2b00      	cmp	r3, #0
    2612:	d103      	bne.n	261c <xQueueGenericSend+0xec>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2614:	4b32      	ldr	r3, [pc, #200]	; (26e0 <xQueueGenericSend+0x1b0>)
    2616:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2618:	2300      	movs	r3, #0
    261a:	e051      	b.n	26c0 <xQueueGenericSend+0x190>
				}
				else if( xEntryTimeSet == pdFALSE )
    261c:	69fb      	ldr	r3, [r7, #28]
    261e:	2b00      	cmp	r3, #0
    2620:	d106      	bne.n	2630 <xQueueGenericSend+0x100>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2622:	2310      	movs	r3, #16
    2624:	18fb      	adds	r3, r7, r3
    2626:	1c18      	adds	r0, r3, #0
    2628:	4b2e      	ldr	r3, [pc, #184]	; (26e4 <xQueueGenericSend+0x1b4>)
    262a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    262c:	2301      	movs	r3, #1
    262e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2630:	4b2b      	ldr	r3, [pc, #172]	; (26e0 <xQueueGenericSend+0x1b0>)
    2632:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2634:	4b2c      	ldr	r3, [pc, #176]	; (26e8 <xQueueGenericSend+0x1b8>)
    2636:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2638:	4b24      	ldr	r3, [pc, #144]	; (26cc <xQueueGenericSend+0x19c>)
    263a:	4798      	blx	r3
    263c:	69bb      	ldr	r3, [r7, #24]
    263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2640:	3301      	adds	r3, #1
    2642:	d102      	bne.n	264a <xQueueGenericSend+0x11a>
    2644:	69bb      	ldr	r3, [r7, #24]
    2646:	2200      	movs	r2, #0
    2648:	645a      	str	r2, [r3, #68]	; 0x44
    264a:	69bb      	ldr	r3, [r7, #24]
    264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    264e:	3301      	adds	r3, #1
    2650:	d102      	bne.n	2658 <xQueueGenericSend+0x128>
    2652:	69bb      	ldr	r3, [r7, #24]
    2654:	2200      	movs	r2, #0
    2656:	649a      	str	r2, [r3, #72]	; 0x48
    2658:	4b21      	ldr	r3, [pc, #132]	; (26e0 <xQueueGenericSend+0x1b0>)
    265a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    265c:	2310      	movs	r3, #16
    265e:	18fa      	adds	r2, r7, r3
    2660:	1d3b      	adds	r3, r7, #4
    2662:	1c10      	adds	r0, r2, #0
    2664:	1c19      	adds	r1, r3, #0
    2666:	4b21      	ldr	r3, [pc, #132]	; (26ec <xQueueGenericSend+0x1bc>)
    2668:	4798      	blx	r3
    266a:	1e03      	subs	r3, r0, #0
    266c:	d11f      	bne.n	26ae <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    266e:	69bb      	ldr	r3, [r7, #24]
    2670:	1c18      	adds	r0, r3, #0
    2672:	4b1f      	ldr	r3, [pc, #124]	; (26f0 <xQueueGenericSend+0x1c0>)
    2674:	4798      	blx	r3
    2676:	1e03      	subs	r3, r0, #0
    2678:	d012      	beq.n	26a0 <xQueueGenericSend+0x170>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    267a:	69bb      	ldr	r3, [r7, #24]
    267c:	3310      	adds	r3, #16
    267e:	1c1a      	adds	r2, r3, #0
    2680:	687b      	ldr	r3, [r7, #4]
    2682:	1c10      	adds	r0, r2, #0
    2684:	1c19      	adds	r1, r3, #0
    2686:	4b1b      	ldr	r3, [pc, #108]	; (26f4 <xQueueGenericSend+0x1c4>)
    2688:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    268a:	69bb      	ldr	r3, [r7, #24]
    268c:	1c18      	adds	r0, r3, #0
    268e:	4b1a      	ldr	r3, [pc, #104]	; (26f8 <xQueueGenericSend+0x1c8>)
    2690:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2692:	4b1a      	ldr	r3, [pc, #104]	; (26fc <xQueueGenericSend+0x1cc>)
    2694:	4798      	blx	r3
    2696:	1e03      	subs	r3, r0, #0
    2698:	d111      	bne.n	26be <xQueueGenericSend+0x18e>
				{
					portYIELD_WITHIN_API();
    269a:	4b0f      	ldr	r3, [pc, #60]	; (26d8 <xQueueGenericSend+0x1a8>)
    269c:	4798      	blx	r3
    269e:	e00e      	b.n	26be <xQueueGenericSend+0x18e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    26a0:	69bb      	ldr	r3, [r7, #24]
    26a2:	1c18      	adds	r0, r3, #0
    26a4:	4b14      	ldr	r3, [pc, #80]	; (26f8 <xQueueGenericSend+0x1c8>)
    26a6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    26a8:	4b14      	ldr	r3, [pc, #80]	; (26fc <xQueueGenericSend+0x1cc>)
    26aa:	4798      	blx	r3
    26ac:	e77a      	b.n	25a4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    26ae:	69bb      	ldr	r3, [r7, #24]
    26b0:	1c18      	adds	r0, r3, #0
    26b2:	4b11      	ldr	r3, [pc, #68]	; (26f8 <xQueueGenericSend+0x1c8>)
    26b4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    26b6:	4b11      	ldr	r3, [pc, #68]	; (26fc <xQueueGenericSend+0x1cc>)
    26b8:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    26ba:	2300      	movs	r3, #0
    26bc:	e000      	b.n	26c0 <xQueueGenericSend+0x190>
		}
	}
    26be:	e771      	b.n	25a4 <xQueueGenericSend+0x74>
}
    26c0:	1c18      	adds	r0, r3, #0
    26c2:	46bd      	mov	sp, r7
    26c4:	b008      	add	sp, #32
    26c6:	bd80      	pop	{r7, pc}
    26c8:	000038f1 	.word	0x000038f1
    26cc:	000020d5 	.word	0x000020d5
    26d0:	000029fd 	.word	0x000029fd
    26d4:	00002cc5 	.word	0x00002cc5
    26d8:	000020b9 	.word	0x000020b9
    26dc:	00003419 	.word	0x00003419
    26e0:	000020f5 	.word	0x000020f5
    26e4:	000034d9 	.word	0x000034d9
    26e8:	00002fc5 	.word	0x00002fc5
    26ec:	00003509 	.word	0x00003509
    26f0:	00002c25 	.word	0x00002c25
    26f4:	00003341 	.word	0x00003341
    26f8:	00002b2d 	.word	0x00002b2d
    26fc:	00002fdd 	.word	0x00002fdd

00002700 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2700:	b580      	push	{r7, lr}
    2702:	b088      	sub	sp, #32
    2704:	af00      	add	r7, sp, #0
    2706:	60f8      	str	r0, [r7, #12]
    2708:	60b9      	str	r1, [r7, #8]
    270a:	607a      	str	r2, [r7, #4]
    270c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    2712:	69bb      	ldr	r3, [r7, #24]
    2714:	2b00      	cmp	r3, #0
    2716:	d101      	bne.n	271c <xQueueGenericSendFromISR+0x1c>
    2718:	b672      	cpsid	i
    271a:	e7fe      	b.n	271a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    271c:	68bb      	ldr	r3, [r7, #8]
    271e:	2b00      	cmp	r3, #0
    2720:	d103      	bne.n	272a <xQueueGenericSendFromISR+0x2a>
    2722:	69bb      	ldr	r3, [r7, #24]
    2724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2726:	2b00      	cmp	r3, #0
    2728:	d101      	bne.n	272e <xQueueGenericSendFromISR+0x2e>
    272a:	2301      	movs	r3, #1
    272c:	e000      	b.n	2730 <xQueueGenericSendFromISR+0x30>
    272e:	2300      	movs	r3, #0
    2730:	2b00      	cmp	r3, #0
    2732:	d101      	bne.n	2738 <xQueueGenericSendFromISR+0x38>
    2734:	b672      	cpsid	i
    2736:	e7fe      	b.n	2736 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2738:	683b      	ldr	r3, [r7, #0]
    273a:	2b02      	cmp	r3, #2
    273c:	d103      	bne.n	2746 <xQueueGenericSendFromISR+0x46>
    273e:	69bb      	ldr	r3, [r7, #24]
    2740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2742:	2b01      	cmp	r3, #1
    2744:	d101      	bne.n	274a <xQueueGenericSendFromISR+0x4a>
    2746:	2301      	movs	r3, #1
    2748:	e000      	b.n	274c <xQueueGenericSendFromISR+0x4c>
    274a:	2300      	movs	r3, #0
    274c:	2b00      	cmp	r3, #0
    274e:	d101      	bne.n	2754 <xQueueGenericSendFromISR+0x54>
    2750:	b672      	cpsid	i
    2752:	e7fe      	b.n	2752 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2754:	4b28      	ldr	r3, [pc, #160]	; (27f8 <xQueueGenericSendFromISR+0xf8>)
    2756:	4798      	blx	r3
    2758:	1c03      	adds	r3, r0, #0
    275a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    275c:	69bb      	ldr	r3, [r7, #24]
    275e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2760:	69bb      	ldr	r3, [r7, #24]
    2762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2764:	429a      	cmp	r2, r3
    2766:	d302      	bcc.n	276e <xQueueGenericSendFromISR+0x6e>
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	2b02      	cmp	r3, #2
    276c:	d139      	bne.n	27e2 <xQueueGenericSendFromISR+0xe2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    276e:	69b9      	ldr	r1, [r7, #24]
    2770:	68ba      	ldr	r2, [r7, #8]
    2772:	683b      	ldr	r3, [r7, #0]
    2774:	1c08      	adds	r0, r1, #0
    2776:	1c11      	adds	r1, r2, #0
    2778:	1c1a      	adds	r2, r3, #0
    277a:	4b20      	ldr	r3, [pc, #128]	; (27fc <xQueueGenericSendFromISR+0xfc>)
    277c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    277e:	69bb      	ldr	r3, [r7, #24]
    2780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2782:	3301      	adds	r3, #1
    2784:	d125      	bne.n	27d2 <xQueueGenericSendFromISR+0xd2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    2786:	69bb      	ldr	r3, [r7, #24]
    2788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    278a:	2b00      	cmp	r3, #0
    278c:	d00f      	beq.n	27ae <xQueueGenericSendFromISR+0xae>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    278e:	69ba      	ldr	r2, [r7, #24]
    2790:	683b      	ldr	r3, [r7, #0]
    2792:	1c10      	adds	r0, r2, #0
    2794:	1c19      	adds	r1, r3, #0
    2796:	4b1a      	ldr	r3, [pc, #104]	; (2800 <xQueueGenericSendFromISR+0x100>)
    2798:	4798      	blx	r3
    279a:	1e03      	subs	r3, r0, #0
    279c:	2b01      	cmp	r3, #1
    279e:	d11d      	bne.n	27dc <xQueueGenericSendFromISR+0xdc>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d01a      	beq.n	27dc <xQueueGenericSendFromISR+0xdc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    27a6:	687b      	ldr	r3, [r7, #4]
    27a8:	2201      	movs	r2, #1
    27aa:	601a      	str	r2, [r3, #0]
    27ac:	e016      	b.n	27dc <xQueueGenericSendFromISR+0xdc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27ae:	69bb      	ldr	r3, [r7, #24]
    27b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    27b2:	2b00      	cmp	r3, #0
    27b4:	d012      	beq.n	27dc <xQueueGenericSendFromISR+0xdc>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27b6:	69bb      	ldr	r3, [r7, #24]
    27b8:	3324      	adds	r3, #36	; 0x24
    27ba:	1c18      	adds	r0, r3, #0
    27bc:	4b11      	ldr	r3, [pc, #68]	; (2804 <xQueueGenericSendFromISR+0x104>)
    27be:	4798      	blx	r3
    27c0:	1e03      	subs	r3, r0, #0
    27c2:	d00b      	beq.n	27dc <xQueueGenericSendFromISR+0xdc>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	2b00      	cmp	r3, #0
    27c8:	d008      	beq.n	27dc <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	2201      	movs	r2, #1
    27ce:	601a      	str	r2, [r3, #0]
    27d0:	e004      	b.n	27dc <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    27d2:	69bb      	ldr	r3, [r7, #24]
    27d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    27d6:	1c5a      	adds	r2, r3, #1
    27d8:	69bb      	ldr	r3, [r7, #24]
    27da:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    27dc:	2301      	movs	r3, #1
    27de:	61fb      	str	r3, [r7, #28]
    27e0:	e001      	b.n	27e6 <xQueueGenericSendFromISR+0xe6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    27e2:	2300      	movs	r3, #0
    27e4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    27e6:	697b      	ldr	r3, [r7, #20]
    27e8:	1c18      	adds	r0, r3, #0
    27ea:	4b07      	ldr	r3, [pc, #28]	; (2808 <xQueueGenericSendFromISR+0x108>)
    27ec:	4798      	blx	r3

	return xReturn;
    27ee:	69fb      	ldr	r3, [r7, #28]
}
    27f0:	1c18      	adds	r0, r3, #0
    27f2:	46bd      	mov	sp, r7
    27f4:	b008      	add	sp, #32
    27f6:	bd80      	pop	{r7, pc}
    27f8:	00002121 	.word	0x00002121
    27fc:	000029fd 	.word	0x000029fd
    2800:	00002cc5 	.word	0x00002cc5
    2804:	00003419 	.word	0x00003419
    2808:	0000212d 	.word	0x0000212d

0000280c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    280c:	b580      	push	{r7, lr}
    280e:	b08a      	sub	sp, #40	; 0x28
    2810:	af00      	add	r7, sp, #0
    2812:	60f8      	str	r0, [r7, #12]
    2814:	60b9      	str	r1, [r7, #8]
    2816:	607a      	str	r2, [r7, #4]
    2818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    281a:	2300      	movs	r3, #0
    281c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    281e:	68fb      	ldr	r3, [r7, #12]
    2820:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    2822:	6a3b      	ldr	r3, [r7, #32]
    2824:	2b00      	cmp	r3, #0
    2826:	d101      	bne.n	282c <xQueueGenericReceive+0x20>
    2828:	b672      	cpsid	i
    282a:	e7fe      	b.n	282a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    282c:	68bb      	ldr	r3, [r7, #8]
    282e:	2b00      	cmp	r3, #0
    2830:	d103      	bne.n	283a <xQueueGenericReceive+0x2e>
    2832:	6a3b      	ldr	r3, [r7, #32]
    2834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2836:	2b00      	cmp	r3, #0
    2838:	d101      	bne.n	283e <xQueueGenericReceive+0x32>
    283a:	2301      	movs	r3, #1
    283c:	e000      	b.n	2840 <xQueueGenericReceive+0x34>
    283e:	2300      	movs	r3, #0
    2840:	2b00      	cmp	r3, #0
    2842:	d101      	bne.n	2848 <xQueueGenericReceive+0x3c>
    2844:	b672      	cpsid	i
    2846:	e7fe      	b.n	2846 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2848:	4b5d      	ldr	r3, [pc, #372]	; (29c0 <xQueueGenericReceive+0x1b4>)
    284a:	4798      	blx	r3
    284c:	1e03      	subs	r3, r0, #0
    284e:	d102      	bne.n	2856 <xQueueGenericReceive+0x4a>
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	2b00      	cmp	r3, #0
    2854:	d101      	bne.n	285a <xQueueGenericReceive+0x4e>
    2856:	2301      	movs	r3, #1
    2858:	e000      	b.n	285c <xQueueGenericReceive+0x50>
    285a:	2300      	movs	r3, #0
    285c:	2b00      	cmp	r3, #0
    285e:	d101      	bne.n	2864 <xQueueGenericReceive+0x58>
    2860:	b672      	cpsid	i
    2862:	e7fe      	b.n	2862 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2864:	4b57      	ldr	r3, [pc, #348]	; (29c4 <xQueueGenericReceive+0x1b8>)
    2866:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2868:	6a3b      	ldr	r3, [r7, #32]
    286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    286c:	2b00      	cmp	r3, #0
    286e:	d03c      	beq.n	28ea <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2870:	6a3b      	ldr	r3, [r7, #32]
    2872:	68db      	ldr	r3, [r3, #12]
    2874:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2876:	6a3a      	ldr	r2, [r7, #32]
    2878:	68bb      	ldr	r3, [r7, #8]
    287a:	1c10      	adds	r0, r2, #0
    287c:	1c19      	adds	r1, r3, #0
    287e:	4b52      	ldr	r3, [pc, #328]	; (29c8 <xQueueGenericReceive+0x1bc>)
    2880:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2882:	683b      	ldr	r3, [r7, #0]
    2884:	2b00      	cmp	r3, #0
    2886:	d11c      	bne.n	28c2 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2888:	6a3b      	ldr	r3, [r7, #32]
    288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    288c:	1e5a      	subs	r2, r3, #1
    288e:	6a3b      	ldr	r3, [r7, #32]
    2890:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2892:	6a3b      	ldr	r3, [r7, #32]
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	2b00      	cmp	r3, #0
    2898:	d104      	bne.n	28a4 <xQueueGenericReceive+0x98>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    289a:	4b4c      	ldr	r3, [pc, #304]	; (29cc <xQueueGenericReceive+0x1c0>)
    289c:	4798      	blx	r3
    289e:	1c02      	adds	r2, r0, #0
    28a0:	6a3b      	ldr	r3, [r7, #32]
    28a2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    28a4:	6a3b      	ldr	r3, [r7, #32]
    28a6:	691b      	ldr	r3, [r3, #16]
    28a8:	2b00      	cmp	r3, #0
    28aa:	d01a      	beq.n	28e2 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    28ac:	6a3b      	ldr	r3, [r7, #32]
    28ae:	3310      	adds	r3, #16
    28b0:	1c18      	adds	r0, r3, #0
    28b2:	4b47      	ldr	r3, [pc, #284]	; (29d0 <xQueueGenericReceive+0x1c4>)
    28b4:	4798      	blx	r3
    28b6:	1e03      	subs	r3, r0, #0
    28b8:	2b01      	cmp	r3, #1
    28ba:	d112      	bne.n	28e2 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    28bc:	4b45      	ldr	r3, [pc, #276]	; (29d4 <xQueueGenericReceive+0x1c8>)
    28be:	4798      	blx	r3
    28c0:	e00f      	b.n	28e2 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    28c2:	6a3b      	ldr	r3, [r7, #32]
    28c4:	69fa      	ldr	r2, [r7, #28]
    28c6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    28c8:	6a3b      	ldr	r3, [r7, #32]
    28ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    28cc:	2b00      	cmp	r3, #0
    28ce:	d008      	beq.n	28e2 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    28d0:	6a3b      	ldr	r3, [r7, #32]
    28d2:	3324      	adds	r3, #36	; 0x24
    28d4:	1c18      	adds	r0, r3, #0
    28d6:	4b3e      	ldr	r3, [pc, #248]	; (29d0 <xQueueGenericReceive+0x1c4>)
    28d8:	4798      	blx	r3
    28da:	1e03      	subs	r3, r0, #0
    28dc:	d001      	beq.n	28e2 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    28de:	4b3d      	ldr	r3, [pc, #244]	; (29d4 <xQueueGenericReceive+0x1c8>)
    28e0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    28e2:	4b3d      	ldr	r3, [pc, #244]	; (29d8 <xQueueGenericReceive+0x1cc>)
    28e4:	4798      	blx	r3
				return pdPASS;
    28e6:	2301      	movs	r3, #1
    28e8:	e065      	b.n	29b6 <xQueueGenericReceive+0x1aa>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d103      	bne.n	28f8 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    28f0:	4b39      	ldr	r3, [pc, #228]	; (29d8 <xQueueGenericReceive+0x1cc>)
    28f2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    28f4:	2300      	movs	r3, #0
    28f6:	e05e      	b.n	29b6 <xQueueGenericReceive+0x1aa>
				}
				else if( xEntryTimeSet == pdFALSE )
    28f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28fa:	2b00      	cmp	r3, #0
    28fc:	d106      	bne.n	290c <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    28fe:	2314      	movs	r3, #20
    2900:	18fb      	adds	r3, r7, r3
    2902:	1c18      	adds	r0, r3, #0
    2904:	4b35      	ldr	r3, [pc, #212]	; (29dc <xQueueGenericReceive+0x1d0>)
    2906:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    2908:	2301      	movs	r3, #1
    290a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    290c:	4b32      	ldr	r3, [pc, #200]	; (29d8 <xQueueGenericReceive+0x1cc>)
    290e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2910:	4b33      	ldr	r3, [pc, #204]	; (29e0 <xQueueGenericReceive+0x1d4>)
    2912:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2914:	4b2b      	ldr	r3, [pc, #172]	; (29c4 <xQueueGenericReceive+0x1b8>)
    2916:	4798      	blx	r3
    2918:	6a3b      	ldr	r3, [r7, #32]
    291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    291c:	3301      	adds	r3, #1
    291e:	d102      	bne.n	2926 <xQueueGenericReceive+0x11a>
    2920:	6a3b      	ldr	r3, [r7, #32]
    2922:	2200      	movs	r2, #0
    2924:	645a      	str	r2, [r3, #68]	; 0x44
    2926:	6a3b      	ldr	r3, [r7, #32]
    2928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    292a:	3301      	adds	r3, #1
    292c:	d102      	bne.n	2934 <xQueueGenericReceive+0x128>
    292e:	6a3b      	ldr	r3, [r7, #32]
    2930:	2200      	movs	r2, #0
    2932:	649a      	str	r2, [r3, #72]	; 0x48
    2934:	4b28      	ldr	r3, [pc, #160]	; (29d8 <xQueueGenericReceive+0x1cc>)
    2936:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2938:	2314      	movs	r3, #20
    293a:	18fa      	adds	r2, r7, r3
    293c:	1d3b      	adds	r3, r7, #4
    293e:	1c10      	adds	r0, r2, #0
    2940:	1c19      	adds	r1, r3, #0
    2942:	4b28      	ldr	r3, [pc, #160]	; (29e4 <xQueueGenericReceive+0x1d8>)
    2944:	4798      	blx	r3
    2946:	1e03      	subs	r3, r0, #0
    2948:	d12c      	bne.n	29a4 <xQueueGenericReceive+0x198>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    294a:	6a3b      	ldr	r3, [r7, #32]
    294c:	1c18      	adds	r0, r3, #0
    294e:	4b26      	ldr	r3, [pc, #152]	; (29e8 <xQueueGenericReceive+0x1dc>)
    2950:	4798      	blx	r3
    2952:	1e03      	subs	r3, r0, #0
    2954:	d01f      	beq.n	2996 <xQueueGenericReceive+0x18a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2956:	6a3b      	ldr	r3, [r7, #32]
    2958:	681b      	ldr	r3, [r3, #0]
    295a:	2b00      	cmp	r3, #0
    295c:	d108      	bne.n	2970 <xQueueGenericReceive+0x164>
					{
						taskENTER_CRITICAL();
    295e:	4b19      	ldr	r3, [pc, #100]	; (29c4 <xQueueGenericReceive+0x1b8>)
    2960:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2962:	6a3b      	ldr	r3, [r7, #32]
    2964:	685b      	ldr	r3, [r3, #4]
    2966:	1c18      	adds	r0, r3, #0
    2968:	4b20      	ldr	r3, [pc, #128]	; (29ec <xQueueGenericReceive+0x1e0>)
    296a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    296c:	4b1a      	ldr	r3, [pc, #104]	; (29d8 <xQueueGenericReceive+0x1cc>)
    296e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2970:	6a3b      	ldr	r3, [r7, #32]
    2972:	3324      	adds	r3, #36	; 0x24
    2974:	1c1a      	adds	r2, r3, #0
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	1c10      	adds	r0, r2, #0
    297a:	1c19      	adds	r1, r3, #0
    297c:	4b1c      	ldr	r3, [pc, #112]	; (29f0 <xQueueGenericReceive+0x1e4>)
    297e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2980:	6a3b      	ldr	r3, [r7, #32]
    2982:	1c18      	adds	r0, r3, #0
    2984:	4b1b      	ldr	r3, [pc, #108]	; (29f4 <xQueueGenericReceive+0x1e8>)
    2986:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2988:	4b1b      	ldr	r3, [pc, #108]	; (29f8 <xQueueGenericReceive+0x1ec>)
    298a:	4798      	blx	r3
    298c:	1e03      	subs	r3, r0, #0
    298e:	d111      	bne.n	29b4 <xQueueGenericReceive+0x1a8>
				{
					portYIELD_WITHIN_API();
    2990:	4b10      	ldr	r3, [pc, #64]	; (29d4 <xQueueGenericReceive+0x1c8>)
    2992:	4798      	blx	r3
    2994:	e00e      	b.n	29b4 <xQueueGenericReceive+0x1a8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2996:	6a3b      	ldr	r3, [r7, #32]
    2998:	1c18      	adds	r0, r3, #0
    299a:	4b16      	ldr	r3, [pc, #88]	; (29f4 <xQueueGenericReceive+0x1e8>)
    299c:	4798      	blx	r3
				( void ) xTaskResumeAll();
    299e:	4b16      	ldr	r3, [pc, #88]	; (29f8 <xQueueGenericReceive+0x1ec>)
    29a0:	4798      	blx	r3
    29a2:	e75f      	b.n	2864 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    29a4:	6a3b      	ldr	r3, [r7, #32]
    29a6:	1c18      	adds	r0, r3, #0
    29a8:	4b12      	ldr	r3, [pc, #72]	; (29f4 <xQueueGenericReceive+0x1e8>)
    29aa:	4798      	blx	r3
			( void ) xTaskResumeAll();
    29ac:	4b12      	ldr	r3, [pc, #72]	; (29f8 <xQueueGenericReceive+0x1ec>)
    29ae:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    29b0:	2300      	movs	r3, #0
    29b2:	e000      	b.n	29b6 <xQueueGenericReceive+0x1aa>
		}
	}
    29b4:	e756      	b.n	2864 <xQueueGenericReceive+0x58>
}
    29b6:	1c18      	adds	r0, r3, #0
    29b8:	46bd      	mov	sp, r7
    29ba:	b00a      	add	sp, #40	; 0x28
    29bc:	bd80      	pop	{r7, pc}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	000038f1 	.word	0x000038f1
    29c4:	000020d5 	.word	0x000020d5
    29c8:	00002ad9 	.word	0x00002ad9
    29cc:	000038d5 	.word	0x000038d5
    29d0:	00003419 	.word	0x00003419
    29d4:	000020b9 	.word	0x000020b9
    29d8:	000020f5 	.word	0x000020f5
    29dc:	000034d9 	.word	0x000034d9
    29e0:	00002fc5 	.word	0x00002fc5
    29e4:	00003509 	.word	0x00003509
    29e8:	00002bf1 	.word	0x00002bf1
    29ec:	00003929 	.word	0x00003929
    29f0:	00003341 	.word	0x00003341
    29f4:	00002b2d 	.word	0x00002b2d
    29f8:	00002fdd 	.word	0x00002fdd

000029fc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b084      	sub	sp, #16
    2a00:	af00      	add	r7, sp, #0
    2a02:	60f8      	str	r0, [r7, #12]
    2a04:	60b9      	str	r1, [r7, #8]
    2a06:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2a08:	68fb      	ldr	r3, [r7, #12]
    2a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d10c      	bne.n	2a2a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d153      	bne.n	2ac0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2a18:	68fb      	ldr	r3, [r7, #12]
    2a1a:	685b      	ldr	r3, [r3, #4]
    2a1c:	1c18      	adds	r0, r3, #0
    2a1e:	4b2c      	ldr	r3, [pc, #176]	; (2ad0 <prvCopyDataToQueue+0xd4>)
    2a20:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2a22:	68fb      	ldr	r3, [r7, #12]
    2a24:	2200      	movs	r2, #0
    2a26:	605a      	str	r2, [r3, #4]
    2a28:	e04a      	b.n	2ac0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d11b      	bne.n	2a68 <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2a30:	68fb      	ldr	r3, [r7, #12]
    2a32:	6899      	ldr	r1, [r3, #8]
    2a34:	68fb      	ldr	r3, [r7, #12]
    2a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a38:	68ba      	ldr	r2, [r7, #8]
    2a3a:	1c08      	adds	r0, r1, #0
    2a3c:	1c11      	adds	r1, r2, #0
    2a3e:	1c1a      	adds	r2, r3, #0
    2a40:	4b24      	ldr	r3, [pc, #144]	; (2ad4 <prvCopyDataToQueue+0xd8>)
    2a42:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2a44:	68fb      	ldr	r3, [r7, #12]
    2a46:	689a      	ldr	r2, [r3, #8]
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a4c:	18d2      	adds	r2, r2, r3
    2a4e:	68fb      	ldr	r3, [r7, #12]
    2a50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2a52:	68fb      	ldr	r3, [r7, #12]
    2a54:	689a      	ldr	r2, [r3, #8]
    2a56:	68fb      	ldr	r3, [r7, #12]
    2a58:	685b      	ldr	r3, [r3, #4]
    2a5a:	429a      	cmp	r2, r3
    2a5c:	d330      	bcc.n	2ac0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2a5e:	68fb      	ldr	r3, [r7, #12]
    2a60:	681a      	ldr	r2, [r3, #0]
    2a62:	68fb      	ldr	r3, [r7, #12]
    2a64:	609a      	str	r2, [r3, #8]
    2a66:	e02b      	b.n	2ac0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2a68:	68fb      	ldr	r3, [r7, #12]
    2a6a:	68d9      	ldr	r1, [r3, #12]
    2a6c:	68fb      	ldr	r3, [r7, #12]
    2a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a70:	68ba      	ldr	r2, [r7, #8]
    2a72:	1c08      	adds	r0, r1, #0
    2a74:	1c11      	adds	r1, r2, #0
    2a76:	1c1a      	adds	r2, r3, #0
    2a78:	4b16      	ldr	r3, [pc, #88]	; (2ad4 <prvCopyDataToQueue+0xd8>)
    2a7a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2a7c:	68fb      	ldr	r3, [r7, #12]
    2a7e:	68da      	ldr	r2, [r3, #12]
    2a80:	68fb      	ldr	r3, [r7, #12]
    2a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a84:	425b      	negs	r3, r3
    2a86:	18d2      	adds	r2, r2, r3
    2a88:	68fb      	ldr	r3, [r7, #12]
    2a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2a8c:	68fb      	ldr	r3, [r7, #12]
    2a8e:	68da      	ldr	r2, [r3, #12]
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	681b      	ldr	r3, [r3, #0]
    2a94:	429a      	cmp	r2, r3
    2a96:	d207      	bcs.n	2aa8 <prvCopyDataToQueue+0xac>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2a98:	68fb      	ldr	r3, [r7, #12]
    2a9a:	685a      	ldr	r2, [r3, #4]
    2a9c:	68fb      	ldr	r3, [r7, #12]
    2a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2aa0:	425b      	negs	r3, r3
    2aa2:	18d2      	adds	r2, r2, r3
    2aa4:	68fb      	ldr	r3, [r7, #12]
    2aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	2b02      	cmp	r3, #2
    2aac:	d108      	bne.n	2ac0 <prvCopyDataToQueue+0xc4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2aae:	68fb      	ldr	r3, [r7, #12]
    2ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d004      	beq.n	2ac0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    2ab6:	68fb      	ldr	r3, [r7, #12]
    2ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2aba:	1e5a      	subs	r2, r3, #1
    2abc:	68fb      	ldr	r3, [r7, #12]
    2abe:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2ac4:	1c5a      	adds	r2, r3, #1
    2ac6:	68fb      	ldr	r3, [r7, #12]
    2ac8:	639a      	str	r2, [r3, #56]	; 0x38
}
    2aca:	46bd      	mov	sp, r7
    2acc:	b004      	add	sp, #16
    2ace:	bd80      	pop	{r7, pc}
    2ad0:	000039ed 	.word	0x000039ed
    2ad4:	00006315 	.word	0x00006315

00002ad8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
    2ae0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	681b      	ldr	r3, [r3, #0]
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d01a      	beq.n	2b20 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2aea:	687b      	ldr	r3, [r7, #4]
    2aec:	68da      	ldr	r2, [r3, #12]
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2af2:	18d2      	adds	r2, r2, r3
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	68da      	ldr	r2, [r3, #12]
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	685b      	ldr	r3, [r3, #4]
    2b00:	429a      	cmp	r2, r3
    2b02:	d303      	bcc.n	2b0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2b04:	687b      	ldr	r3, [r7, #4]
    2b06:	681a      	ldr	r2, [r3, #0]
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	68da      	ldr	r2, [r3, #12]
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b14:	6839      	ldr	r1, [r7, #0]
    2b16:	1c08      	adds	r0, r1, #0
    2b18:	1c11      	adds	r1, r2, #0
    2b1a:	1c1a      	adds	r2, r3, #0
    2b1c:	4b02      	ldr	r3, [pc, #8]	; (2b28 <prvCopyDataFromQueue+0x50>)
    2b1e:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2b20:	46bd      	mov	sp, r7
    2b22:	b002      	add	sp, #8
    2b24:	bd80      	pop	{r7, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	00006315 	.word	0x00006315

00002b2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b082      	sub	sp, #8
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2b34:	4b29      	ldr	r3, [pc, #164]	; (2bdc <prvUnlockQueue+0xb0>)
    2b36:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2b38:	e022      	b.n	2b80 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d00a      	beq.n	2b58 <prvUnlockQueue+0x2c>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	1c18      	adds	r0, r3, #0
    2b46:	2100      	movs	r1, #0
    2b48:	4b25      	ldr	r3, [pc, #148]	; (2be0 <prvUnlockQueue+0xb4>)
    2b4a:	4798      	blx	r3
    2b4c:	1e03      	subs	r3, r0, #0
    2b4e:	2b01      	cmp	r3, #1
    2b50:	d111      	bne.n	2b76 <prvUnlockQueue+0x4a>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    2b52:	4b24      	ldr	r3, [pc, #144]	; (2be4 <prvUnlockQueue+0xb8>)
    2b54:	4798      	blx	r3
    2b56:	e00e      	b.n	2b76 <prvUnlockQueue+0x4a>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d009      	beq.n	2b74 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	3324      	adds	r3, #36	; 0x24
    2b64:	1c18      	adds	r0, r3, #0
    2b66:	4b20      	ldr	r3, [pc, #128]	; (2be8 <prvUnlockQueue+0xbc>)
    2b68:	4798      	blx	r3
    2b6a:	1e03      	subs	r3, r0, #0
    2b6c:	d003      	beq.n	2b76 <prvUnlockQueue+0x4a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    2b6e:	4b1d      	ldr	r3, [pc, #116]	; (2be4 <prvUnlockQueue+0xb8>)
    2b70:	4798      	blx	r3
    2b72:	e000      	b.n	2b76 <prvUnlockQueue+0x4a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    2b74:	e008      	b.n	2b88 <prvUnlockQueue+0x5c>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b7a:	1e5a      	subs	r2, r3, #1
    2b7c:	687b      	ldr	r3, [r7, #4]
    2b7e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2b84:	2b00      	cmp	r3, #0
    2b86:	dcd8      	bgt.n	2b3a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	2201      	movs	r2, #1
    2b8c:	4252      	negs	r2, r2
    2b8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2b90:	4b16      	ldr	r3, [pc, #88]	; (2bec <prvUnlockQueue+0xc0>)
    2b92:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2b94:	4b11      	ldr	r3, [pc, #68]	; (2bdc <prvUnlockQueue+0xb0>)
    2b96:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2b98:	e013      	b.n	2bc2 <prvUnlockQueue+0x96>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	691b      	ldr	r3, [r3, #16]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d00e      	beq.n	2bc0 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	3310      	adds	r3, #16
    2ba6:	1c18      	adds	r0, r3, #0
    2ba8:	4b0f      	ldr	r3, [pc, #60]	; (2be8 <prvUnlockQueue+0xbc>)
    2baa:	4798      	blx	r3
    2bac:	1e03      	subs	r3, r0, #0
    2bae:	d001      	beq.n	2bb4 <prvUnlockQueue+0x88>
				{
					vTaskMissedYield();
    2bb0:	4b0c      	ldr	r3, [pc, #48]	; (2be4 <prvUnlockQueue+0xb8>)
    2bb2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    2bb4:	687b      	ldr	r3, [r7, #4]
    2bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2bb8:	1e5a      	subs	r2, r3, #1
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	645a      	str	r2, [r3, #68]	; 0x44
    2bbe:	e000      	b.n	2bc2 <prvUnlockQueue+0x96>
			}
			else
			{
				break;
    2bc0:	e003      	b.n	2bca <prvUnlockQueue+0x9e>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	dce7      	bgt.n	2b9a <prvUnlockQueue+0x6e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	2201      	movs	r2, #1
    2bce:	4252      	negs	r2, r2
    2bd0:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2bd2:	4b06      	ldr	r3, [pc, #24]	; (2bec <prvUnlockQueue+0xc0>)
    2bd4:	4798      	blx	r3
}
    2bd6:	46bd      	mov	sp, r7
    2bd8:	b002      	add	sp, #8
    2bda:	bd80      	pop	{r7, pc}
    2bdc:	000020d5 	.word	0x000020d5
    2be0:	00002cc5 	.word	0x00002cc5
    2be4:	000035b1 	.word	0x000035b1
    2be8:	00003419 	.word	0x00003419
    2bec:	000020f5 	.word	0x000020f5

00002bf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b084      	sub	sp, #16
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2bf8:	4b08      	ldr	r3, [pc, #32]	; (2c1c <prvIsQueueEmpty+0x2c>)
    2bfa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2bfc:	687b      	ldr	r3, [r7, #4]
    2bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2c00:	2b00      	cmp	r3, #0
    2c02:	d102      	bne.n	2c0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    2c04:	2301      	movs	r3, #1
    2c06:	60fb      	str	r3, [r7, #12]
    2c08:	e001      	b.n	2c0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    2c0a:	2300      	movs	r3, #0
    2c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2c0e:	4b04      	ldr	r3, [pc, #16]	; (2c20 <prvIsQueueEmpty+0x30>)
    2c10:	4798      	blx	r3

	return xReturn;
    2c12:	68fb      	ldr	r3, [r7, #12]
}
    2c14:	1c18      	adds	r0, r3, #0
    2c16:	46bd      	mov	sp, r7
    2c18:	b004      	add	sp, #16
    2c1a:	bd80      	pop	{r7, pc}
    2c1c:	000020d5 	.word	0x000020d5
    2c20:	000020f5 	.word	0x000020f5

00002c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2c24:	b580      	push	{r7, lr}
    2c26:	b084      	sub	sp, #16
    2c28:	af00      	add	r7, sp, #0
    2c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2c2c:	4b09      	ldr	r3, [pc, #36]	; (2c54 <prvIsQueueFull+0x30>)
    2c2e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2c38:	429a      	cmp	r2, r3
    2c3a:	d102      	bne.n	2c42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    2c3c:	2301      	movs	r3, #1
    2c3e:	60fb      	str	r3, [r7, #12]
    2c40:	e001      	b.n	2c46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    2c42:	2300      	movs	r3, #0
    2c44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    2c46:	4b04      	ldr	r3, [pc, #16]	; (2c58 <prvIsQueueFull+0x34>)
    2c48:	4798      	blx	r3

	return xReturn;
    2c4a:	68fb      	ldr	r3, [r7, #12]
}
    2c4c:	1c18      	adds	r0, r3, #0
    2c4e:	46bd      	mov	sp, r7
    2c50:	b004      	add	sp, #16
    2c52:	bd80      	pop	{r7, pc}
    2c54:	000020d5 	.word	0x000020d5
    2c58:	000020f5 	.word	0x000020f5

00002c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    2c5c:	b580      	push	{r7, lr}
    2c5e:	b084      	sub	sp, #16
    2c60:	af00      	add	r7, sp, #0
    2c62:	6078      	str	r0, [r7, #4]
    2c64:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    2c6a:	4b12      	ldr	r3, [pc, #72]	; (2cb4 <vQueueWaitForMessageRestricted+0x58>)
    2c6c:	4798      	blx	r3
    2c6e:	68fb      	ldr	r3, [r7, #12]
    2c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2c72:	3301      	adds	r3, #1
    2c74:	d102      	bne.n	2c7c <vQueueWaitForMessageRestricted+0x20>
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	2200      	movs	r2, #0
    2c7a:	645a      	str	r2, [r3, #68]	; 0x44
    2c7c:	68fb      	ldr	r3, [r7, #12]
    2c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2c80:	3301      	adds	r3, #1
    2c82:	d102      	bne.n	2c8a <vQueueWaitForMessageRestricted+0x2e>
    2c84:	68fb      	ldr	r3, [r7, #12]
    2c86:	2200      	movs	r2, #0
    2c88:	649a      	str	r2, [r3, #72]	; 0x48
    2c8a:	4b0b      	ldr	r3, [pc, #44]	; (2cb8 <vQueueWaitForMessageRestricted+0x5c>)
    2c8c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    2c92:	2b00      	cmp	r3, #0
    2c94:	d107      	bne.n	2ca6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	3324      	adds	r3, #36	; 0x24
    2c9a:	1c1a      	adds	r2, r3, #0
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	1c10      	adds	r0, r2, #0
    2ca0:	1c19      	adds	r1, r3, #0
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <vQueueWaitForMessageRestricted+0x60>)
    2ca4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    2ca6:	68fb      	ldr	r3, [r7, #12]
    2ca8:	1c18      	adds	r0, r3, #0
    2caa:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <vQueueWaitForMessageRestricted+0x64>)
    2cac:	4798      	blx	r3
	}
    2cae:	46bd      	mov	sp, r7
    2cb0:	b004      	add	sp, #16
    2cb2:	bd80      	pop	{r7, pc}
    2cb4:	000020d5 	.word	0x000020d5
    2cb8:	000020f5 	.word	0x000020f5
    2cbc:	000033bd 	.word	0x000033bd
    2cc0:	00002b2d 	.word	0x00002b2d

00002cc4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2cc4:	b580      	push	{r7, lr}
    2cc6:	b084      	sub	sp, #16
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    2ccc:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2cd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    2cd4:	2300      	movs	r3, #0
    2cd6:	60fb      	str	r3, [r7, #12]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    2cd8:	68bb      	ldr	r3, [r7, #8]
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d101      	bne.n	2ce2 <prvNotifyQueueSetContainer+0x1e>
    2cde:	b672      	cpsid	i
    2ce0:	e7fe      	b.n	2ce0 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2ce2:	68bb      	ldr	r3, [r7, #8]
    2ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2ce6:	68bb      	ldr	r3, [r7, #8]
    2ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2cea:	429a      	cmp	r2, r3
    2cec:	d301      	bcc.n	2cf2 <prvNotifyQueueSetContainer+0x2e>
    2cee:	b672      	cpsid	i
    2cf0:	e7fe      	b.n	2cf0 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2cf2:	68bb      	ldr	r3, [r7, #8]
    2cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2cf6:	68bb      	ldr	r3, [r7, #8]
    2cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2cfa:	429a      	cmp	r2, r3
    2cfc:	d214      	bcs.n	2d28 <prvNotifyQueueSetContainer+0x64>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2cfe:	68b9      	ldr	r1, [r7, #8]
    2d00:	1d3a      	adds	r2, r7, #4
    2d02:	683b      	ldr	r3, [r7, #0]
    2d04:	1c08      	adds	r0, r1, #0
    2d06:	1c11      	adds	r1, r2, #0
    2d08:	1c1a      	adds	r2, r3, #0
    2d0a:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <prvNotifyQueueSetContainer+0x70>)
    2d0c:	4798      	blx	r3
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d12:	2b00      	cmp	r3, #0
    2d14:	d008      	beq.n	2d28 <prvNotifyQueueSetContainer+0x64>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2d16:	68bb      	ldr	r3, [r7, #8]
    2d18:	3324      	adds	r3, #36	; 0x24
    2d1a:	1c18      	adds	r0, r3, #0
    2d1c:	4b06      	ldr	r3, [pc, #24]	; (2d38 <prvNotifyQueueSetContainer+0x74>)
    2d1e:	4798      	blx	r3
    2d20:	1e03      	subs	r3, r0, #0
    2d22:	d001      	beq.n	2d28 <prvNotifyQueueSetContainer+0x64>
				{
					/* The task waiting has a higher priority */
					xReturn = pdTRUE;
    2d24:	2301      	movs	r3, #1
    2d26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2d28:	68fb      	ldr	r3, [r7, #12]
	}
    2d2a:	1c18      	adds	r0, r3, #0
    2d2c:	46bd      	mov	sp, r7
    2d2e:	b004      	add	sp, #16
    2d30:	bd80      	pop	{r7, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	000029fd 	.word	0x000029fd
    2d38:	00003419 	.word	0x00003419

00002d3c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2d3c:	b590      	push	{r4, r7, lr}
    2d3e:	b08b      	sub	sp, #44	; 0x2c
    2d40:	af02      	add	r7, sp, #8
    2d42:	60f8      	str	r0, [r7, #12]
    2d44:	60b9      	str	r1, [r7, #8]
    2d46:	603b      	str	r3, [r7, #0]
    2d48:	1dbb      	adds	r3, r7, #6
    2d4a:	801a      	strh	r2, [r3, #0]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d101      	bne.n	2d56 <xTaskGenericCreate+0x1a>
    2d52:	b672      	cpsid	i
    2d54:	e7fe      	b.n	2d54 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    2d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d58:	2b04      	cmp	r3, #4
    2d5a:	d901      	bls.n	2d60 <xTaskGenericCreate+0x24>
    2d5c:	b672      	cpsid	i
    2d5e:	e7fe      	b.n	2d5e <xTaskGenericCreate+0x22>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2d60:	1dbb      	adds	r3, r7, #6
    2d62:	881a      	ldrh	r2, [r3, #0]
    2d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d66:	1c10      	adds	r0, r2, #0
    2d68:	1c19      	adds	r1, r3, #0
    2d6a:	4b49      	ldr	r3, [pc, #292]	; (2e90 <xTaskGenericCreate+0x154>)
    2d6c:	4798      	blx	r3
    2d6e:	1c03      	adds	r3, r0, #0
    2d70:	61bb      	str	r3, [r7, #24]

	if( pxNewTCB != NULL )
    2d72:	69bb      	ldr	r3, [r7, #24]
    2d74:	2b00      	cmp	r3, #0
    2d76:	d100      	bne.n	2d7a <xTaskGenericCreate+0x3e>
    2d78:	e072      	b.n	2e60 <xTaskGenericCreate+0x124>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2d7a:	69bb      	ldr	r3, [r7, #24]
    2d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2d7e:	1dbb      	adds	r3, r7, #6
    2d80:	881b      	ldrh	r3, [r3, #0]
    2d82:	4944      	ldr	r1, [pc, #272]	; (2e94 <xTaskGenericCreate+0x158>)
    2d84:	468c      	mov	ip, r1
    2d86:	4463      	add	r3, ip
    2d88:	009b      	lsls	r3, r3, #2
    2d8a:	18d3      	adds	r3, r2, r3
    2d8c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2d8e:	697b      	ldr	r3, [r7, #20]
    2d90:	2207      	movs	r2, #7
    2d92:	4393      	bics	r3, r2
    2d94:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    2d96:	697b      	ldr	r3, [r7, #20]
    2d98:	2207      	movs	r2, #7
    2d9a:	4013      	ands	r3, r2
    2d9c:	d001      	beq.n	2da2 <xTaskGenericCreate+0x66>
    2d9e:	b672      	cpsid	i
    2da0:	e7fe      	b.n	2da0 <xTaskGenericCreate+0x64>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    2da2:	69b8      	ldr	r0, [r7, #24]
    2da4:	68b9      	ldr	r1, [r7, #8]
    2da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2da8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    2daa:	1dbb      	adds	r3, r7, #6
    2dac:	881b      	ldrh	r3, [r3, #0]
    2dae:	9300      	str	r3, [sp, #0]
    2db0:	1c23      	adds	r3, r4, #0
    2db2:	4c39      	ldr	r4, [pc, #228]	; (2e98 <xTaskGenericCreate+0x15c>)
    2db4:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2db6:	6979      	ldr	r1, [r7, #20]
    2db8:	68fa      	ldr	r2, [r7, #12]
    2dba:	683b      	ldr	r3, [r7, #0]
    2dbc:	1c08      	adds	r0, r1, #0
    2dbe:	1c11      	adds	r1, r2, #0
    2dc0:	1c1a      	adds	r2, r3, #0
    2dc2:	4b36      	ldr	r3, [pc, #216]	; (2e9c <xTaskGenericCreate+0x160>)
    2dc4:	4798      	blx	r3
    2dc6:	1c02      	adds	r2, r0, #0
    2dc8:	69bb      	ldr	r3, [r7, #24]
    2dca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    2dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d002      	beq.n	2dd8 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2dd4:	69ba      	ldr	r2, [r7, #24]
    2dd6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2dd8:	4b31      	ldr	r3, [pc, #196]	; (2ea0 <xTaskGenericCreate+0x164>)
    2dda:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    2ddc:	4b31      	ldr	r3, [pc, #196]	; (2ea4 <xTaskGenericCreate+0x168>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	1c5a      	adds	r2, r3, #1
    2de2:	4b30      	ldr	r3, [pc, #192]	; (2ea4 <xTaskGenericCreate+0x168>)
    2de4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    2de6:	4b30      	ldr	r3, [pc, #192]	; (2ea8 <xTaskGenericCreate+0x16c>)
    2de8:	681b      	ldr	r3, [r3, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d109      	bne.n	2e02 <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2dee:	4b2e      	ldr	r3, [pc, #184]	; (2ea8 <xTaskGenericCreate+0x16c>)
    2df0:	69ba      	ldr	r2, [r7, #24]
    2df2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2df4:	4b2b      	ldr	r3, [pc, #172]	; (2ea4 <xTaskGenericCreate+0x168>)
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	2b01      	cmp	r3, #1
    2dfa:	d10f      	bne.n	2e1c <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2dfc:	4b2b      	ldr	r3, [pc, #172]	; (2eac <xTaskGenericCreate+0x170>)
    2dfe:	4798      	blx	r3
    2e00:	e00c      	b.n	2e1c <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2e02:	4b2b      	ldr	r3, [pc, #172]	; (2eb0 <xTaskGenericCreate+0x174>)
    2e04:	681b      	ldr	r3, [r3, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d108      	bne.n	2e1c <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2e0a:	4b27      	ldr	r3, [pc, #156]	; (2ea8 <xTaskGenericCreate+0x16c>)
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e12:	429a      	cmp	r2, r3
    2e14:	d802      	bhi.n	2e1c <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    2e16:	4b24      	ldr	r3, [pc, #144]	; (2ea8 <xTaskGenericCreate+0x16c>)
    2e18:	69ba      	ldr	r2, [r7, #24]
    2e1a:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    2e1c:	4b25      	ldr	r3, [pc, #148]	; (2eb4 <xTaskGenericCreate+0x178>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	1c5a      	adds	r2, r3, #1
    2e22:	4b24      	ldr	r3, [pc, #144]	; (2eb4 <xTaskGenericCreate+0x178>)
    2e24:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    2e26:	69bb      	ldr	r3, [r7, #24]
    2e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e2a:	4b23      	ldr	r3, [pc, #140]	; (2eb8 <xTaskGenericCreate+0x17c>)
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	429a      	cmp	r2, r3
    2e30:	d903      	bls.n	2e3a <xTaskGenericCreate+0xfe>
    2e32:	69bb      	ldr	r3, [r7, #24]
    2e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e36:	4b20      	ldr	r3, [pc, #128]	; (2eb8 <xTaskGenericCreate+0x17c>)
    2e38:	601a      	str	r2, [r3, #0]
    2e3a:	69bb      	ldr	r3, [r7, #24]
    2e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e3e:	1c13      	adds	r3, r2, #0
    2e40:	009b      	lsls	r3, r3, #2
    2e42:	189b      	adds	r3, r3, r2
    2e44:	009b      	lsls	r3, r3, #2
    2e46:	4a1d      	ldr	r2, [pc, #116]	; (2ebc <xTaskGenericCreate+0x180>)
    2e48:	189a      	adds	r2, r3, r2
    2e4a:	69bb      	ldr	r3, [r7, #24]
    2e4c:	3304      	adds	r3, #4
    2e4e:	1c10      	adds	r0, r2, #0
    2e50:	1c19      	adds	r1, r3, #0
    2e52:	4b1b      	ldr	r3, [pc, #108]	; (2ec0 <xTaskGenericCreate+0x184>)
    2e54:	4798      	blx	r3

			xReturn = pdPASS;
    2e56:	2301      	movs	r3, #1
    2e58:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    2e5a:	4b1a      	ldr	r3, [pc, #104]	; (2ec4 <xTaskGenericCreate+0x188>)
    2e5c:	4798      	blx	r3
    2e5e:	e002      	b.n	2e66 <xTaskGenericCreate+0x12a>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2e60:	2301      	movs	r3, #1
    2e62:	425b      	negs	r3, r3
    2e64:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    2e66:	69fb      	ldr	r3, [r7, #28]
    2e68:	2b01      	cmp	r3, #1
    2e6a:	d10b      	bne.n	2e84 <xTaskGenericCreate+0x148>
	{
		if( xSchedulerRunning != pdFALSE )
    2e6c:	4b10      	ldr	r3, [pc, #64]	; (2eb0 <xTaskGenericCreate+0x174>)
    2e6e:	681b      	ldr	r3, [r3, #0]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d007      	beq.n	2e84 <xTaskGenericCreate+0x148>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    2e74:	4b0c      	ldr	r3, [pc, #48]	; (2ea8 <xTaskGenericCreate+0x16c>)
    2e76:	681b      	ldr	r3, [r3, #0]
    2e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e7c:	429a      	cmp	r2, r3
    2e7e:	d201      	bcs.n	2e84 <xTaskGenericCreate+0x148>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2e80:	4b11      	ldr	r3, [pc, #68]	; (2ec8 <xTaskGenericCreate+0x18c>)
    2e82:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
    2e84:	69fb      	ldr	r3, [r7, #28]
}
    2e86:	1c18      	adds	r0, r3, #0
    2e88:	46bd      	mov	sp, r7
    2e8a:	b009      	add	sp, #36	; 0x24
    2e8c:	bd90      	pop	{r4, r7, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	0000380d 	.word	0x0000380d
    2e94:	3fffffff 	.word	0x3fffffff
    2e98:	000035ed 	.word	0x000035ed
    2e9c:	00001fd5 	.word	0x00001fd5
    2ea0:	000020d5 	.word	0x000020d5
    2ea4:	20003c28 	.word	0x20003c28
    2ea8:	20003b50 	.word	0x20003b50
    2eac:	00003685 	.word	0x00003685
    2eb0:	20003c34 	.word	0x20003c34
    2eb4:	20003c44 	.word	0x20003c44
    2eb8:	20003c30 	.word	0x20003c30
    2ebc:	20003b54 	.word	0x20003b54
    2ec0:	000022dd 	.word	0x000022dd
    2ec4:	000020f5 	.word	0x000020f5
    2ec8:	000020b9 	.word	0x000020b9

00002ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2ecc:	b580      	push	{r7, lr}
    2ece:	b084      	sub	sp, #16
    2ed0:	af00      	add	r7, sp, #0
    2ed2:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
    2ed4:	2300      	movs	r3, #0
    2ed6:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	2b00      	cmp	r3, #0
    2edc:	d01a      	beq.n	2f14 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    2ede:	4b11      	ldr	r3, [pc, #68]	; (2f24 <vTaskDelay+0x58>)
    2ee0:	681b      	ldr	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d001      	beq.n	2eea <vTaskDelay+0x1e>
    2ee6:	b672      	cpsid	i
    2ee8:	e7fe      	b.n	2ee8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    2eea:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <vTaskDelay+0x5c>)
    2eec:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2eee:	4b0f      	ldr	r3, [pc, #60]	; (2f2c <vTaskDelay+0x60>)
    2ef0:	681a      	ldr	r2, [r3, #0]
    2ef2:	687b      	ldr	r3, [r7, #4]
    2ef4:	18d3      	adds	r3, r2, r3
    2ef6:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2ef8:	4b0d      	ldr	r3, [pc, #52]	; (2f30 <vTaskDelay+0x64>)
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	3304      	adds	r3, #4
    2efe:	1c18      	adds	r0, r3, #0
    2f00:	4b0c      	ldr	r3, [pc, #48]	; (2f34 <vTaskDelay+0x68>)
    2f02:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f04:	68bb      	ldr	r3, [r7, #8]
    2f06:	1c18      	adds	r0, r3, #0
    2f08:	4b0b      	ldr	r3, [pc, #44]	; (2f38 <vTaskDelay+0x6c>)
    2f0a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2f0c:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <vTaskDelay+0x70>)
    2f0e:	4798      	blx	r3
    2f10:	1c03      	adds	r3, r0, #0
    2f12:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f14:	68fb      	ldr	r3, [r7, #12]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d101      	bne.n	2f1e <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    2f1a:	4b09      	ldr	r3, [pc, #36]	; (2f40 <vTaskDelay+0x74>)
    2f1c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f1e:	46bd      	mov	sp, r7
    2f20:	b004      	add	sp, #16
    2f22:	bd80      	pop	{r7, pc}
    2f24:	20003c48 	.word	0x20003c48
    2f28:	00002fc5 	.word	0x00002fc5
    2f2c:	20003c2c 	.word	0x20003c2c
    2f30:	20003b50 	.word	0x20003b50
    2f34:	0000238d 	.word	0x0000238d
    2f38:	0000379d 	.word	0x0000379d
    2f3c:	00002fdd 	.word	0x00002fdd
    2f40:	000020b9 	.word	0x000020b9

00002f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2f44:	b590      	push	{r4, r7, lr}
    2f46:	b087      	sub	sp, #28
    2f48:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2f4a:	4917      	ldr	r1, [pc, #92]	; (2fa8 <vTaskStartScheduler+0x64>)
    2f4c:	4a17      	ldr	r2, [pc, #92]	; (2fac <vTaskStartScheduler+0x68>)
    2f4e:	2300      	movs	r3, #0
    2f50:	9300      	str	r3, [sp, #0]
    2f52:	2300      	movs	r3, #0
    2f54:	9301      	str	r3, [sp, #4]
    2f56:	2300      	movs	r3, #0
    2f58:	9302      	str	r3, [sp, #8]
    2f5a:	2300      	movs	r3, #0
    2f5c:	9303      	str	r3, [sp, #12]
    2f5e:	1c08      	adds	r0, r1, #0
    2f60:	1c11      	adds	r1, r2, #0
    2f62:	2264      	movs	r2, #100	; 0x64
    2f64:	2300      	movs	r3, #0
    2f66:	4c12      	ldr	r4, [pc, #72]	; (2fb0 <vTaskStartScheduler+0x6c>)
    2f68:	47a0      	blx	r4
    2f6a:	1c03      	adds	r3, r0, #0
    2f6c:	607b      	str	r3, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2f6e:	687b      	ldr	r3, [r7, #4]
    2f70:	2b01      	cmp	r3, #1
    2f72:	d103      	bne.n	2f7c <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2f74:	4b0f      	ldr	r3, [pc, #60]	; (2fb4 <vTaskStartScheduler+0x70>)
    2f76:	4798      	blx	r3
    2f78:	1c03      	adds	r3, r0, #0
    2f7a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	2b01      	cmp	r3, #1
    2f80:	d109      	bne.n	2f96 <vTaskStartScheduler+0x52>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2f82:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2f84:	4b0c      	ldr	r3, [pc, #48]	; (2fb8 <vTaskStartScheduler+0x74>)
    2f86:	2201      	movs	r2, #1
    2f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2f8a:	4b0c      	ldr	r3, [pc, #48]	; (2fbc <vTaskStartScheduler+0x78>)
    2f8c:	2200      	movs	r2, #0
    2f8e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2f90:	4b0b      	ldr	r3, [pc, #44]	; (2fc0 <vTaskStartScheduler+0x7c>)
    2f92:	4798      	blx	r3
    2f94:	e004      	b.n	2fa0 <vTaskStartScheduler+0x5c>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2f96:	687b      	ldr	r3, [r7, #4]
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d101      	bne.n	2fa0 <vTaskStartScheduler+0x5c>
    2f9c:	b672      	cpsid	i
    2f9e:	e7fe      	b.n	2f9e <vTaskStartScheduler+0x5a>
	}
}
    2fa0:	46bd      	mov	sp, r7
    2fa2:	b003      	add	sp, #12
    2fa4:	bd90      	pop	{r4, r7, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	000035c5 	.word	0x000035c5
    2fac:	000073b0 	.word	0x000073b0
    2fb0:	00002d3d 	.word	0x00002d3d
    2fb4:	00003a79 	.word	0x00003a79
    2fb8:	20003c34 	.word	0x20003c34
    2fbc:	20003c2c 	.word	0x20003c2c
    2fc0:	00002069 	.word	0x00002069

00002fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2fc4:	b580      	push	{r7, lr}
    2fc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2fc8:	4b03      	ldr	r3, [pc, #12]	; (2fd8 <vTaskSuspendAll+0x14>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	1c5a      	adds	r2, r3, #1
    2fce:	4b02      	ldr	r3, [pc, #8]	; (2fd8 <vTaskSuspendAll+0x14>)
    2fd0:	601a      	str	r2, [r3, #0]
}
    2fd2:	46bd      	mov	sp, r7
    2fd4:	bd80      	pop	{r7, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	20003c48 	.word	0x20003c48

00002fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2fdc:	b580      	push	{r7, lr}
    2fde:	b082      	sub	sp, #8
    2fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2fe2:	2300      	movs	r3, #0
    2fe4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2fe6:	4b37      	ldr	r3, [pc, #220]	; (30c4 <xTaskResumeAll+0xe8>)
    2fe8:	681b      	ldr	r3, [r3, #0]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d101      	bne.n	2ff2 <xTaskResumeAll+0x16>
    2fee:	b672      	cpsid	i
    2ff0:	e7fe      	b.n	2ff0 <xTaskResumeAll+0x14>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2ff2:	4b35      	ldr	r3, [pc, #212]	; (30c8 <xTaskResumeAll+0xec>)
    2ff4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2ff6:	4b33      	ldr	r3, [pc, #204]	; (30c4 <xTaskResumeAll+0xe8>)
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	1e5a      	subs	r2, r3, #1
    2ffc:	4b31      	ldr	r3, [pc, #196]	; (30c4 <xTaskResumeAll+0xe8>)
    2ffe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3000:	4b30      	ldr	r3, [pc, #192]	; (30c4 <xTaskResumeAll+0xe8>)
    3002:	681b      	ldr	r3, [r3, #0]
    3004:	2b00      	cmp	r3, #0
    3006:	d155      	bne.n	30b4 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3008:	4b30      	ldr	r3, [pc, #192]	; (30cc <xTaskResumeAll+0xf0>)
    300a:	681b      	ldr	r3, [r3, #0]
    300c:	2b00      	cmp	r3, #0
    300e:	d051      	beq.n	30b4 <xTaskResumeAll+0xd8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3010:	e02f      	b.n	3072 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3012:	4b2f      	ldr	r3, [pc, #188]	; (30d0 <xTaskResumeAll+0xf4>)
    3014:	68db      	ldr	r3, [r3, #12]
    3016:	68db      	ldr	r3, [r3, #12]
    3018:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    301a:	683b      	ldr	r3, [r7, #0]
    301c:	3318      	adds	r3, #24
    301e:	1c18      	adds	r0, r3, #0
    3020:	4b2c      	ldr	r3, [pc, #176]	; (30d4 <xTaskResumeAll+0xf8>)
    3022:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3024:	683b      	ldr	r3, [r7, #0]
    3026:	3304      	adds	r3, #4
    3028:	1c18      	adds	r0, r3, #0
    302a:	4b2a      	ldr	r3, [pc, #168]	; (30d4 <xTaskResumeAll+0xf8>)
    302c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    302e:	683b      	ldr	r3, [r7, #0]
    3030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3032:	4b29      	ldr	r3, [pc, #164]	; (30d8 <xTaskResumeAll+0xfc>)
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	429a      	cmp	r2, r3
    3038:	d903      	bls.n	3042 <xTaskResumeAll+0x66>
    303a:	683b      	ldr	r3, [r7, #0]
    303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    303e:	4b26      	ldr	r3, [pc, #152]	; (30d8 <xTaskResumeAll+0xfc>)
    3040:	601a      	str	r2, [r3, #0]
    3042:	683b      	ldr	r3, [r7, #0]
    3044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3046:	1c13      	adds	r3, r2, #0
    3048:	009b      	lsls	r3, r3, #2
    304a:	189b      	adds	r3, r3, r2
    304c:	009b      	lsls	r3, r3, #2
    304e:	4a23      	ldr	r2, [pc, #140]	; (30dc <xTaskResumeAll+0x100>)
    3050:	189a      	adds	r2, r3, r2
    3052:	683b      	ldr	r3, [r7, #0]
    3054:	3304      	adds	r3, #4
    3056:	1c10      	adds	r0, r2, #0
    3058:	1c19      	adds	r1, r3, #0
    305a:	4b21      	ldr	r3, [pc, #132]	; (30e0 <xTaskResumeAll+0x104>)
    305c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3062:	4b20      	ldr	r3, [pc, #128]	; (30e4 <xTaskResumeAll+0x108>)
    3064:	681b      	ldr	r3, [r3, #0]
    3066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3068:	429a      	cmp	r2, r3
    306a:	d302      	bcc.n	3072 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
    306c:	4b1e      	ldr	r3, [pc, #120]	; (30e8 <xTaskResumeAll+0x10c>)
    306e:	2201      	movs	r2, #1
    3070:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3072:	4b17      	ldr	r3, [pc, #92]	; (30d0 <xTaskResumeAll+0xf4>)
    3074:	681b      	ldr	r3, [r3, #0]
    3076:	2b00      	cmp	r3, #0
    3078:	d1cb      	bne.n	3012 <xTaskResumeAll+0x36>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    307a:	4b1c      	ldr	r3, [pc, #112]	; (30ec <xTaskResumeAll+0x110>)
    307c:	681b      	ldr	r3, [r3, #0]
    307e:	2b00      	cmp	r3, #0
    3080:	d010      	beq.n	30a4 <xTaskResumeAll+0xc8>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    3082:	e00b      	b.n	309c <xTaskResumeAll+0xc0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    3084:	4b1a      	ldr	r3, [pc, #104]	; (30f0 <xTaskResumeAll+0x114>)
    3086:	4798      	blx	r3
    3088:	1e03      	subs	r3, r0, #0
    308a:	d002      	beq.n	3092 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
    308c:	4b16      	ldr	r3, [pc, #88]	; (30e8 <xTaskResumeAll+0x10c>)
    308e:	2201      	movs	r2, #1
    3090:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    3092:	4b16      	ldr	r3, [pc, #88]	; (30ec <xTaskResumeAll+0x110>)
    3094:	681b      	ldr	r3, [r3, #0]
    3096:	1e5a      	subs	r2, r3, #1
    3098:	4b14      	ldr	r3, [pc, #80]	; (30ec <xTaskResumeAll+0x110>)
    309a:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    309c:	4b13      	ldr	r3, [pc, #76]	; (30ec <xTaskResumeAll+0x110>)
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d1ef      	bne.n	3084 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    30a4:	4b10      	ldr	r3, [pc, #64]	; (30e8 <xTaskResumeAll+0x10c>)
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	2b01      	cmp	r3, #1
    30aa:	d103      	bne.n	30b4 <xTaskResumeAll+0xd8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    30ac:	2301      	movs	r3, #1
    30ae:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    30b0:	4b10      	ldr	r3, [pc, #64]	; (30f4 <xTaskResumeAll+0x118>)
    30b2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    30b4:	4b10      	ldr	r3, [pc, #64]	; (30f8 <xTaskResumeAll+0x11c>)
    30b6:	4798      	blx	r3

	return xAlreadyYielded;
    30b8:	687b      	ldr	r3, [r7, #4]
}
    30ba:	1c18      	adds	r0, r3, #0
    30bc:	46bd      	mov	sp, r7
    30be:	b002      	add	sp, #8
    30c0:	bd80      	pop	{r7, pc}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	20003c48 	.word	0x20003c48
    30c8:	000020d5 	.word	0x000020d5
    30cc:	20003c28 	.word	0x20003c28
    30d0:	20003be8 	.word	0x20003be8
    30d4:	0000238d 	.word	0x0000238d
    30d8:	20003c30 	.word	0x20003c30
    30dc:	20003b54 	.word	0x20003b54
    30e0:	000022dd 	.word	0x000022dd
    30e4:	20003b50 	.word	0x20003b50
    30e8:	20003c3c 	.word	0x20003c3c
    30ec:	20003c38 	.word	0x20003c38
    30f0:	00003129 	.word	0x00003129
    30f4:	000020b9 	.word	0x000020b9
    30f8:	000020f5 	.word	0x000020f5

000030fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    30fc:	b580      	push	{r7, lr}
    30fe:	b082      	sub	sp, #8
    3100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3102:	4b06      	ldr	r3, [pc, #24]	; (311c <xTaskGetTickCount+0x20>)
    3104:	4798      	blx	r3
	{
		xTicks = xTickCount;
    3106:	4b06      	ldr	r3, [pc, #24]	; (3120 <xTaskGetTickCount+0x24>)
    3108:	681b      	ldr	r3, [r3, #0]
    310a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    310c:	4b05      	ldr	r3, [pc, #20]	; (3124 <xTaskGetTickCount+0x28>)
    310e:	4798      	blx	r3

	return xTicks;
    3110:	687b      	ldr	r3, [r7, #4]
}
    3112:	1c18      	adds	r0, r3, #0
    3114:	46bd      	mov	sp, r7
    3116:	b002      	add	sp, #8
    3118:	bd80      	pop	{r7, pc}
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	000020d5 	.word	0x000020d5
    3120:	20003c2c 	.word	0x20003c2c
    3124:	000020f5 	.word	0x000020f5

00003128 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3128:	b580      	push	{r7, lr}
    312a:	b086      	sub	sp, #24
    312c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    312e:	2300      	movs	r3, #0
    3130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3132:	4b4d      	ldr	r3, [pc, #308]	; (3268 <xTaskIncrementTick+0x140>)
    3134:	681b      	ldr	r3, [r3, #0]
    3136:	2b00      	cmp	r3, #0
    3138:	d000      	beq.n	313c <xTaskIncrementTick+0x14>
    313a:	e084      	b.n	3246 <xTaskIncrementTick+0x11e>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    313c:	4b4b      	ldr	r3, [pc, #300]	; (326c <xTaskIncrementTick+0x144>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	1c5a      	adds	r2, r3, #1
    3142:	4b4a      	ldr	r3, [pc, #296]	; (326c <xTaskIncrementTick+0x144>)
    3144:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3146:	4b49      	ldr	r3, [pc, #292]	; (326c <xTaskIncrementTick+0x144>)
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
    314c:	693b      	ldr	r3, [r7, #16]
    314e:	2b00      	cmp	r3, #0
    3150:	d117      	bne.n	3182 <xTaskIncrementTick+0x5a>
			{
				taskSWITCH_DELAYED_LISTS();
    3152:	4b47      	ldr	r3, [pc, #284]	; (3270 <xTaskIncrementTick+0x148>)
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	2b00      	cmp	r3, #0
    315a:	d001      	beq.n	3160 <xTaskIncrementTick+0x38>
    315c:	b672      	cpsid	i
    315e:	e7fe      	b.n	315e <xTaskIncrementTick+0x36>
    3160:	4b43      	ldr	r3, [pc, #268]	; (3270 <xTaskIncrementTick+0x148>)
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	60fb      	str	r3, [r7, #12]
    3166:	4b43      	ldr	r3, [pc, #268]	; (3274 <xTaskIncrementTick+0x14c>)
    3168:	681a      	ldr	r2, [r3, #0]
    316a:	4b41      	ldr	r3, [pc, #260]	; (3270 <xTaskIncrementTick+0x148>)
    316c:	601a      	str	r2, [r3, #0]
    316e:	4b41      	ldr	r3, [pc, #260]	; (3274 <xTaskIncrementTick+0x14c>)
    3170:	68fa      	ldr	r2, [r7, #12]
    3172:	601a      	str	r2, [r3, #0]
    3174:	4b40      	ldr	r3, [pc, #256]	; (3278 <xTaskIncrementTick+0x150>)
    3176:	681b      	ldr	r3, [r3, #0]
    3178:	1c5a      	adds	r2, r3, #1
    317a:	4b3f      	ldr	r3, [pc, #252]	; (3278 <xTaskIncrementTick+0x150>)
    317c:	601a      	str	r2, [r3, #0]
    317e:	4b3f      	ldr	r3, [pc, #252]	; (327c <xTaskIncrementTick+0x154>)
    3180:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3182:	4b3f      	ldr	r3, [pc, #252]	; (3280 <xTaskIncrementTick+0x158>)
    3184:	681b      	ldr	r3, [r3, #0]
    3186:	693a      	ldr	r2, [r7, #16]
    3188:	429a      	cmp	r2, r3
    318a:	d34e      	bcc.n	322a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    318c:	4b38      	ldr	r3, [pc, #224]	; (3270 <xTaskIncrementTick+0x148>)
    318e:	681b      	ldr	r3, [r3, #0]
    3190:	681b      	ldr	r3, [r3, #0]
    3192:	2b00      	cmp	r3, #0
    3194:	d101      	bne.n	319a <xTaskIncrementTick+0x72>
    3196:	2301      	movs	r3, #1
    3198:	e000      	b.n	319c <xTaskIncrementTick+0x74>
    319a:	2300      	movs	r3, #0
    319c:	2b00      	cmp	r3, #0
    319e:	d004      	beq.n	31aa <xTaskIncrementTick+0x82>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    31a0:	4b37      	ldr	r3, [pc, #220]	; (3280 <xTaskIncrementTick+0x158>)
    31a2:	2201      	movs	r2, #1
    31a4:	4252      	negs	r2, r2
    31a6:	601a      	str	r2, [r3, #0]
						break;
    31a8:	e03f      	b.n	322a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    31aa:	4b31      	ldr	r3, [pc, #196]	; (3270 <xTaskIncrementTick+0x148>)
    31ac:	681b      	ldr	r3, [r3, #0]
    31ae:	68db      	ldr	r3, [r3, #12]
    31b0:	68db      	ldr	r3, [r3, #12]
    31b2:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    31b4:	68bb      	ldr	r3, [r7, #8]
    31b6:	685b      	ldr	r3, [r3, #4]
    31b8:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
    31ba:	693a      	ldr	r2, [r7, #16]
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	429a      	cmp	r2, r3
    31c0:	d203      	bcs.n	31ca <xTaskIncrementTick+0xa2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    31c2:	4b2f      	ldr	r3, [pc, #188]	; (3280 <xTaskIncrementTick+0x158>)
    31c4:	687a      	ldr	r2, [r7, #4]
    31c6:	601a      	str	r2, [r3, #0]
							break;
    31c8:	e02f      	b.n	322a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    31ca:	68bb      	ldr	r3, [r7, #8]
    31cc:	3304      	adds	r3, #4
    31ce:	1c18      	adds	r0, r3, #0
    31d0:	4b2c      	ldr	r3, [pc, #176]	; (3284 <xTaskIncrementTick+0x15c>)
    31d2:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    31d4:	68bb      	ldr	r3, [r7, #8]
    31d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31d8:	2b00      	cmp	r3, #0
    31da:	d004      	beq.n	31e6 <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    31dc:	68bb      	ldr	r3, [r7, #8]
    31de:	3318      	adds	r3, #24
    31e0:	1c18      	adds	r0, r3, #0
    31e2:	4b28      	ldr	r3, [pc, #160]	; (3284 <xTaskIncrementTick+0x15c>)
    31e4:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    31e6:	68bb      	ldr	r3, [r7, #8]
    31e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    31ea:	4b27      	ldr	r3, [pc, #156]	; (3288 <xTaskIncrementTick+0x160>)
    31ec:	681b      	ldr	r3, [r3, #0]
    31ee:	429a      	cmp	r2, r3
    31f0:	d903      	bls.n	31fa <xTaskIncrementTick+0xd2>
    31f2:	68bb      	ldr	r3, [r7, #8]
    31f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    31f6:	4b24      	ldr	r3, [pc, #144]	; (3288 <xTaskIncrementTick+0x160>)
    31f8:	601a      	str	r2, [r3, #0]
    31fa:	68bb      	ldr	r3, [r7, #8]
    31fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    31fe:	1c13      	adds	r3, r2, #0
    3200:	009b      	lsls	r3, r3, #2
    3202:	189b      	adds	r3, r3, r2
    3204:	009b      	lsls	r3, r3, #2
    3206:	4a21      	ldr	r2, [pc, #132]	; (328c <xTaskIncrementTick+0x164>)
    3208:	189a      	adds	r2, r3, r2
    320a:	68bb      	ldr	r3, [r7, #8]
    320c:	3304      	adds	r3, #4
    320e:	1c10      	adds	r0, r2, #0
    3210:	1c19      	adds	r1, r3, #0
    3212:	4b1f      	ldr	r3, [pc, #124]	; (3290 <xTaskIncrementTick+0x168>)
    3214:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3216:	68bb      	ldr	r3, [r7, #8]
    3218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    321a:	4b1e      	ldr	r3, [pc, #120]	; (3294 <xTaskIncrementTick+0x16c>)
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3220:	429a      	cmp	r2, r3
    3222:	d301      	bcc.n	3228 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
    3224:	2301      	movs	r3, #1
    3226:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
    3228:	e7b0      	b.n	318c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    322a:	4b1a      	ldr	r3, [pc, #104]	; (3294 <xTaskIncrementTick+0x16c>)
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3230:	4916      	ldr	r1, [pc, #88]	; (328c <xTaskIncrementTick+0x164>)
    3232:	1c13      	adds	r3, r2, #0
    3234:	009b      	lsls	r3, r3, #2
    3236:	189b      	adds	r3, r3, r2
    3238:	009b      	lsls	r3, r3, #2
    323a:	585b      	ldr	r3, [r3, r1]
    323c:	2b01      	cmp	r3, #1
    323e:	d907      	bls.n	3250 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
    3240:	2301      	movs	r3, #1
    3242:	617b      	str	r3, [r7, #20]
    3244:	e004      	b.n	3250 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3246:	4b14      	ldr	r3, [pc, #80]	; (3298 <xTaskIncrementTick+0x170>)
    3248:	681b      	ldr	r3, [r3, #0]
    324a:	1c5a      	adds	r2, r3, #1
    324c:	4b12      	ldr	r3, [pc, #72]	; (3298 <xTaskIncrementTick+0x170>)
    324e:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3250:	4b12      	ldr	r3, [pc, #72]	; (329c <xTaskIncrementTick+0x174>)
    3252:	681b      	ldr	r3, [r3, #0]
    3254:	2b00      	cmp	r3, #0
    3256:	d001      	beq.n	325c <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
    3258:	2301      	movs	r3, #1
    325a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    325c:	697b      	ldr	r3, [r7, #20]
}
    325e:	1c18      	adds	r0, r3, #0
    3260:	46bd      	mov	sp, r7
    3262:	b006      	add	sp, #24
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	20003c48 	.word	0x20003c48
    326c:	20003c2c 	.word	0x20003c2c
    3270:	20003be0 	.word	0x20003be0
    3274:	20003be4 	.word	0x20003be4
    3278:	20003c40 	.word	0x20003c40
    327c:	00003891 	.word	0x00003891
    3280:	20000008 	.word	0x20000008
    3284:	0000238d 	.word	0x0000238d
    3288:	20003c30 	.word	0x20003c30
    328c:	20003b54 	.word	0x20003b54
    3290:	000022dd 	.word	0x000022dd
    3294:	20003b50 	.word	0x20003b50
    3298:	20003c38 	.word	0x20003c38
    329c:	20003c3c 	.word	0x20003c3c

000032a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    32a0:	b580      	push	{r7, lr}
    32a2:	b082      	sub	sp, #8
    32a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    32a6:	4b21      	ldr	r3, [pc, #132]	; (332c <vTaskSwitchContext+0x8c>)
    32a8:	681b      	ldr	r3, [r3, #0]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d003      	beq.n	32b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    32ae:	4b20      	ldr	r3, [pc, #128]	; (3330 <vTaskSwitchContext+0x90>)
    32b0:	2201      	movs	r2, #1
    32b2:	601a      	str	r2, [r3, #0]
    32b4:	e036      	b.n	3324 <vTaskSwitchContext+0x84>
	}
	else
	{
		xYieldPending = pdFALSE;
    32b6:	4b1e      	ldr	r3, [pc, #120]	; (3330 <vTaskSwitchContext+0x90>)
    32b8:	2200      	movs	r2, #0
    32ba:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    32bc:	e00a      	b.n	32d4 <vTaskSwitchContext+0x34>
    32be:	4b1d      	ldr	r3, [pc, #116]	; (3334 <vTaskSwitchContext+0x94>)
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	2b00      	cmp	r3, #0
    32c4:	d101      	bne.n	32ca <vTaskSwitchContext+0x2a>
    32c6:	b672      	cpsid	i
    32c8:	e7fe      	b.n	32c8 <vTaskSwitchContext+0x28>
    32ca:	4b1a      	ldr	r3, [pc, #104]	; (3334 <vTaskSwitchContext+0x94>)
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	1e5a      	subs	r2, r3, #1
    32d0:	4b18      	ldr	r3, [pc, #96]	; (3334 <vTaskSwitchContext+0x94>)
    32d2:	601a      	str	r2, [r3, #0]
    32d4:	4b17      	ldr	r3, [pc, #92]	; (3334 <vTaskSwitchContext+0x94>)
    32d6:	681a      	ldr	r2, [r3, #0]
    32d8:	4917      	ldr	r1, [pc, #92]	; (3338 <vTaskSwitchContext+0x98>)
    32da:	1c13      	adds	r3, r2, #0
    32dc:	009b      	lsls	r3, r3, #2
    32de:	189b      	adds	r3, r3, r2
    32e0:	009b      	lsls	r3, r3, #2
    32e2:	585b      	ldr	r3, [r3, r1]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d0ea      	beq.n	32be <vTaskSwitchContext+0x1e>
    32e8:	4b12      	ldr	r3, [pc, #72]	; (3334 <vTaskSwitchContext+0x94>)
    32ea:	681a      	ldr	r2, [r3, #0]
    32ec:	1c13      	adds	r3, r2, #0
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	189b      	adds	r3, r3, r2
    32f2:	009b      	lsls	r3, r3, #2
    32f4:	4a10      	ldr	r2, [pc, #64]	; (3338 <vTaskSwitchContext+0x98>)
    32f6:	189b      	adds	r3, r3, r2
    32f8:	607b      	str	r3, [r7, #4]
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	685b      	ldr	r3, [r3, #4]
    32fe:	685a      	ldr	r2, [r3, #4]
    3300:	687b      	ldr	r3, [r7, #4]
    3302:	605a      	str	r2, [r3, #4]
    3304:	687b      	ldr	r3, [r7, #4]
    3306:	685a      	ldr	r2, [r3, #4]
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	3308      	adds	r3, #8
    330c:	429a      	cmp	r2, r3
    330e:	d104      	bne.n	331a <vTaskSwitchContext+0x7a>
    3310:	687b      	ldr	r3, [r7, #4]
    3312:	685b      	ldr	r3, [r3, #4]
    3314:	685a      	ldr	r2, [r3, #4]
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	605a      	str	r2, [r3, #4]
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	685b      	ldr	r3, [r3, #4]
    331e:	68da      	ldr	r2, [r3, #12]
    3320:	4b06      	ldr	r3, [pc, #24]	; (333c <vTaskSwitchContext+0x9c>)
    3322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3324:	46bd      	mov	sp, r7
    3326:	b002      	add	sp, #8
    3328:	bd80      	pop	{r7, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	20003c48 	.word	0x20003c48
    3330:	20003c3c 	.word	0x20003c3c
    3334:	20003c30 	.word	0x20003c30
    3338:	20003b54 	.word	0x20003b54
    333c:	20003b50 	.word	0x20003b50

00003340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3340:	b580      	push	{r7, lr}
    3342:	b084      	sub	sp, #16
    3344:	af00      	add	r7, sp, #0
    3346:	6078      	str	r0, [r7, #4]
    3348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    334a:	687b      	ldr	r3, [r7, #4]
    334c:	2b00      	cmp	r3, #0
    334e:	d101      	bne.n	3354 <vTaskPlaceOnEventList+0x14>
    3350:	b672      	cpsid	i
    3352:	e7fe      	b.n	3352 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3354:	4b12      	ldr	r3, [pc, #72]	; (33a0 <vTaskPlaceOnEventList+0x60>)
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	3318      	adds	r3, #24
    335a:	687a      	ldr	r2, [r7, #4]
    335c:	1c10      	adds	r0, r2, #0
    335e:	1c19      	adds	r1, r3, #0
    3360:	4b10      	ldr	r3, [pc, #64]	; (33a4 <vTaskPlaceOnEventList+0x64>)
    3362:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3364:	4b0e      	ldr	r3, [pc, #56]	; (33a0 <vTaskPlaceOnEventList+0x60>)
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	3304      	adds	r3, #4
    336a:	1c18      	adds	r0, r3, #0
    336c:	4b0e      	ldr	r3, [pc, #56]	; (33a8 <vTaskPlaceOnEventList+0x68>)
    336e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3370:	683b      	ldr	r3, [r7, #0]
    3372:	3301      	adds	r3, #1
    3374:	d108      	bne.n	3388 <vTaskPlaceOnEventList+0x48>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3376:	4b0a      	ldr	r3, [pc, #40]	; (33a0 <vTaskPlaceOnEventList+0x60>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	3304      	adds	r3, #4
    337c:	4a0b      	ldr	r2, [pc, #44]	; (33ac <vTaskPlaceOnEventList+0x6c>)
    337e:	1c10      	adds	r0, r2, #0
    3380:	1c19      	adds	r1, r3, #0
    3382:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <vTaskPlaceOnEventList+0x70>)
    3384:	4798      	blx	r3
    3386:	e008      	b.n	339a <vTaskPlaceOnEventList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    3388:	4b0a      	ldr	r3, [pc, #40]	; (33b4 <vTaskPlaceOnEventList+0x74>)
    338a:	681a      	ldr	r2, [r3, #0]
    338c:	683b      	ldr	r3, [r7, #0]
    338e:	18d3      	adds	r3, r2, r3
    3390:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3392:	68fb      	ldr	r3, [r7, #12]
    3394:	1c18      	adds	r0, r3, #0
    3396:	4b08      	ldr	r3, [pc, #32]	; (33b8 <vTaskPlaceOnEventList+0x78>)
    3398:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    339a:	46bd      	mov	sp, r7
    339c:	b004      	add	sp, #16
    339e:	bd80      	pop	{r7, pc}
    33a0:	20003b50 	.word	0x20003b50
    33a4:	00002321 	.word	0x00002321
    33a8:	0000238d 	.word	0x0000238d
    33ac:	20003c14 	.word	0x20003c14
    33b0:	000022dd 	.word	0x000022dd
    33b4:	20003c2c 	.word	0x20003c2c
    33b8:	0000379d 	.word	0x0000379d

000033bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    33bc:	b580      	push	{r7, lr}
    33be:	b084      	sub	sp, #16
    33c0:	af00      	add	r7, sp, #0
    33c2:	6078      	str	r0, [r7, #4]
    33c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    33c6:	687b      	ldr	r3, [r7, #4]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d101      	bne.n	33d0 <vTaskPlaceOnEventListRestricted+0x14>
    33cc:	b672      	cpsid	i
    33ce:	e7fe      	b.n	33ce <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    33d0:	4b0c      	ldr	r3, [pc, #48]	; (3404 <vTaskPlaceOnEventListRestricted+0x48>)
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	3318      	adds	r3, #24
    33d6:	687a      	ldr	r2, [r7, #4]
    33d8:	1c10      	adds	r0, r2, #0
    33da:	1c19      	adds	r1, r3, #0
    33dc:	4b0a      	ldr	r3, [pc, #40]	; (3408 <vTaskPlaceOnEventListRestricted+0x4c>)
    33de:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    33e0:	4b08      	ldr	r3, [pc, #32]	; (3404 <vTaskPlaceOnEventListRestricted+0x48>)
    33e2:	681b      	ldr	r3, [r3, #0]
    33e4:	3304      	adds	r3, #4
    33e6:	1c18      	adds	r0, r3, #0
    33e8:	4b08      	ldr	r3, [pc, #32]	; (340c <vTaskPlaceOnEventListRestricted+0x50>)
    33ea:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    33ec:	4b08      	ldr	r3, [pc, #32]	; (3410 <vTaskPlaceOnEventListRestricted+0x54>)
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	683b      	ldr	r3, [r7, #0]
    33f2:	18d3      	adds	r3, r2, r3
    33f4:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    33f6:	68fb      	ldr	r3, [r7, #12]
    33f8:	1c18      	adds	r0, r3, #0
    33fa:	4b06      	ldr	r3, [pc, #24]	; (3414 <vTaskPlaceOnEventListRestricted+0x58>)
    33fc:	4798      	blx	r3
	}
    33fe:	46bd      	mov	sp, r7
    3400:	b004      	add	sp, #16
    3402:	bd80      	pop	{r7, pc}
    3404:	20003b50 	.word	0x20003b50
    3408:	000022dd 	.word	0x000022dd
    340c:	0000238d 	.word	0x0000238d
    3410:	20003c2c 	.word	0x20003c2c
    3414:	0000379d 	.word	0x0000379d

00003418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3418:	b580      	push	{r7, lr}
    341a:	b084      	sub	sp, #16
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3420:	687b      	ldr	r3, [r7, #4]
    3422:	68db      	ldr	r3, [r3, #12]
    3424:	68db      	ldr	r3, [r3, #12]
    3426:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    3428:	68bb      	ldr	r3, [r7, #8]
    342a:	2b00      	cmp	r3, #0
    342c:	d101      	bne.n	3432 <xTaskRemoveFromEventList+0x1a>
    342e:	b672      	cpsid	i
    3430:	e7fe      	b.n	3430 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3432:	68bb      	ldr	r3, [r7, #8]
    3434:	3318      	adds	r3, #24
    3436:	1c18      	adds	r0, r3, #0
    3438:	4b1f      	ldr	r3, [pc, #124]	; (34b8 <xTaskRemoveFromEventList+0xa0>)
    343a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    343c:	4b1f      	ldr	r3, [pc, #124]	; (34bc <xTaskRemoveFromEventList+0xa4>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d11d      	bne.n	3480 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	3304      	adds	r3, #4
    3448:	1c18      	adds	r0, r3, #0
    344a:	4b1b      	ldr	r3, [pc, #108]	; (34b8 <xTaskRemoveFromEventList+0xa0>)
    344c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    344e:	68bb      	ldr	r3, [r7, #8]
    3450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3452:	4b1b      	ldr	r3, [pc, #108]	; (34c0 <xTaskRemoveFromEventList+0xa8>)
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	429a      	cmp	r2, r3
    3458:	d903      	bls.n	3462 <xTaskRemoveFromEventList+0x4a>
    345a:	68bb      	ldr	r3, [r7, #8]
    345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    345e:	4b18      	ldr	r3, [pc, #96]	; (34c0 <xTaskRemoveFromEventList+0xa8>)
    3460:	601a      	str	r2, [r3, #0]
    3462:	68bb      	ldr	r3, [r7, #8]
    3464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3466:	1c13      	adds	r3, r2, #0
    3468:	009b      	lsls	r3, r3, #2
    346a:	189b      	adds	r3, r3, r2
    346c:	009b      	lsls	r3, r3, #2
    346e:	4a15      	ldr	r2, [pc, #84]	; (34c4 <xTaskRemoveFromEventList+0xac>)
    3470:	189a      	adds	r2, r3, r2
    3472:	68bb      	ldr	r3, [r7, #8]
    3474:	3304      	adds	r3, #4
    3476:	1c10      	adds	r0, r2, #0
    3478:	1c19      	adds	r1, r3, #0
    347a:	4b13      	ldr	r3, [pc, #76]	; (34c8 <xTaskRemoveFromEventList+0xb0>)
    347c:	4798      	blx	r3
    347e:	e006      	b.n	348e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3480:	68bb      	ldr	r3, [r7, #8]
    3482:	3318      	adds	r3, #24
    3484:	4a11      	ldr	r2, [pc, #68]	; (34cc <xTaskRemoveFromEventList+0xb4>)
    3486:	1c10      	adds	r0, r2, #0
    3488:	1c19      	adds	r1, r3, #0
    348a:	4b0f      	ldr	r3, [pc, #60]	; (34c8 <xTaskRemoveFromEventList+0xb0>)
    348c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    348e:	68bb      	ldr	r3, [r7, #8]
    3490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3492:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <xTaskRemoveFromEventList+0xb8>)
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3498:	429a      	cmp	r2, r3
    349a:	d905      	bls.n	34a8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    349c:	2301      	movs	r3, #1
    349e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    34a0:	4b0c      	ldr	r3, [pc, #48]	; (34d4 <xTaskRemoveFromEventList+0xbc>)
    34a2:	2201      	movs	r2, #1
    34a4:	601a      	str	r2, [r3, #0]
    34a6:	e001      	b.n	34ac <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
    34a8:	2300      	movs	r3, #0
    34aa:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    34ac:	68fb      	ldr	r3, [r7, #12]
}
    34ae:	1c18      	adds	r0, r3, #0
    34b0:	46bd      	mov	sp, r7
    34b2:	b004      	add	sp, #16
    34b4:	bd80      	pop	{r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	0000238d 	.word	0x0000238d
    34bc:	20003c48 	.word	0x20003c48
    34c0:	20003c30 	.word	0x20003c30
    34c4:	20003b54 	.word	0x20003b54
    34c8:	000022dd 	.word	0x000022dd
    34cc:	20003be8 	.word	0x20003be8
    34d0:	20003b50 	.word	0x20003b50
    34d4:	20003c3c 	.word	0x20003c3c

000034d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    34d8:	b580      	push	{r7, lr}
    34da:	b082      	sub	sp, #8
    34dc:	af00      	add	r7, sp, #0
    34de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d101      	bne.n	34ea <vTaskSetTimeOutState+0x12>
    34e6:	b672      	cpsid	i
    34e8:	e7fe      	b.n	34e8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    34ea:	4b05      	ldr	r3, [pc, #20]	; (3500 <vTaskSetTimeOutState+0x28>)
    34ec:	681a      	ldr	r2, [r3, #0]
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    34f2:	4b04      	ldr	r3, [pc, #16]	; (3504 <vTaskSetTimeOutState+0x2c>)
    34f4:	681a      	ldr	r2, [r3, #0]
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	605a      	str	r2, [r3, #4]
}
    34fa:	46bd      	mov	sp, r7
    34fc:	b002      	add	sp, #8
    34fe:	bd80      	pop	{r7, pc}
    3500:	20003c40 	.word	0x20003c40
    3504:	20003c2c 	.word	0x20003c2c

00003508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3508:	b580      	push	{r7, lr}
    350a:	b084      	sub	sp, #16
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
    3510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    3512:	687b      	ldr	r3, [r7, #4]
    3514:	2b00      	cmp	r3, #0
    3516:	d101      	bne.n	351c <xTaskCheckForTimeOut+0x14>
    3518:	b672      	cpsid	i
    351a:	e7fe      	b.n	351a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    351c:	683b      	ldr	r3, [r7, #0]
    351e:	2b00      	cmp	r3, #0
    3520:	d101      	bne.n	3526 <xTaskCheckForTimeOut+0x1e>
    3522:	b672      	cpsid	i
    3524:	e7fe      	b.n	3524 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    3526:	4b1d      	ldr	r3, [pc, #116]	; (359c <xTaskCheckForTimeOut+0x94>)
    3528:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    352a:	4b1d      	ldr	r3, [pc, #116]	; (35a0 <xTaskCheckForTimeOut+0x98>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3530:	683b      	ldr	r3, [r7, #0]
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	3301      	adds	r3, #1
    3536:	d102      	bne.n	353e <xTaskCheckForTimeOut+0x36>
			{
				xReturn = pdFALSE;
    3538:	2300      	movs	r3, #0
    353a:	60fb      	str	r3, [r7, #12]
    353c:	e027      	b.n	358e <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    353e:	687b      	ldr	r3, [r7, #4]
    3540:	681a      	ldr	r2, [r3, #0]
    3542:	4b18      	ldr	r3, [pc, #96]	; (35a4 <xTaskCheckForTimeOut+0x9c>)
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	429a      	cmp	r2, r3
    3548:	d007      	beq.n	355a <xTaskCheckForTimeOut+0x52>
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	685a      	ldr	r2, [r3, #4]
    354e:	68bb      	ldr	r3, [r7, #8]
    3550:	429a      	cmp	r2, r3
    3552:	d802      	bhi.n	355a <xTaskCheckForTimeOut+0x52>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3554:	2301      	movs	r3, #1
    3556:	60fb      	str	r3, [r7, #12]
    3558:	e019      	b.n	358e <xTaskCheckForTimeOut+0x86>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    355a:	687b      	ldr	r3, [r7, #4]
    355c:	685b      	ldr	r3, [r3, #4]
    355e:	68ba      	ldr	r2, [r7, #8]
    3560:	1ad2      	subs	r2, r2, r3
    3562:	683b      	ldr	r3, [r7, #0]
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	429a      	cmp	r2, r3
    3568:	d20f      	bcs.n	358a <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    356a:	683b      	ldr	r3, [r7, #0]
    356c:	681a      	ldr	r2, [r3, #0]
    356e:	687b      	ldr	r3, [r7, #4]
    3570:	6859      	ldr	r1, [r3, #4]
    3572:	68bb      	ldr	r3, [r7, #8]
    3574:	1acb      	subs	r3, r1, r3
    3576:	18d2      	adds	r2, r2, r3
    3578:	683b      	ldr	r3, [r7, #0]
    357a:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	1c18      	adds	r0, r3, #0
    3580:	4b09      	ldr	r3, [pc, #36]	; (35a8 <xTaskCheckForTimeOut+0xa0>)
    3582:	4798      	blx	r3
			xReturn = pdFALSE;
    3584:	2300      	movs	r3, #0
    3586:	60fb      	str	r3, [r7, #12]
    3588:	e001      	b.n	358e <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    358a:	2301      	movs	r3, #1
    358c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    358e:	4b07      	ldr	r3, [pc, #28]	; (35ac <xTaskCheckForTimeOut+0xa4>)
    3590:	4798      	blx	r3

	return xReturn;
    3592:	68fb      	ldr	r3, [r7, #12]
}
    3594:	1c18      	adds	r0, r3, #0
    3596:	46bd      	mov	sp, r7
    3598:	b004      	add	sp, #16
    359a:	bd80      	pop	{r7, pc}
    359c:	000020d5 	.word	0x000020d5
    35a0:	20003c2c 	.word	0x20003c2c
    35a4:	20003c40 	.word	0x20003c40
    35a8:	000034d9 	.word	0x000034d9
    35ac:	000020f5 	.word	0x000020f5

000035b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    35b0:	b580      	push	{r7, lr}
    35b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    35b4:	4b02      	ldr	r3, [pc, #8]	; (35c0 <vTaskMissedYield+0x10>)
    35b6:	2201      	movs	r2, #1
    35b8:	601a      	str	r2, [r3, #0]
}
    35ba:	46bd      	mov	sp, r7
    35bc:	bd80      	pop	{r7, pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	20003c3c 	.word	0x20003c3c

000035c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    35cc:	4b04      	ldr	r3, [pc, #16]	; (35e0 <prvIdleTask+0x1c>)
    35ce:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    35d0:	4b04      	ldr	r3, [pc, #16]	; (35e4 <prvIdleTask+0x20>)
    35d2:	681b      	ldr	r3, [r3, #0]
    35d4:	2b01      	cmp	r3, #1
    35d6:	d901      	bls.n	35dc <prvIdleTask+0x18>
			{
				taskYIELD();
    35d8:	4b03      	ldr	r3, [pc, #12]	; (35e8 <prvIdleTask+0x24>)
    35da:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    35dc:	e7f6      	b.n	35cc <prvIdleTask+0x8>
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	00003711 	.word	0x00003711
    35e4:	20003b54 	.word	0x20003b54
    35e8:	000020b9 	.word	0x000020b9

000035ec <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    35ec:	b580      	push	{r7, lr}
    35ee:	b086      	sub	sp, #24
    35f0:	af00      	add	r7, sp, #0
    35f2:	60f8      	str	r0, [r7, #12]
    35f4:	60b9      	str	r1, [r7, #8]
    35f6:	607a      	str	r2, [r7, #4]
    35f8:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    35fa:	2300      	movs	r3, #0
    35fc:	617b      	str	r3, [r7, #20]
    35fe:	e014      	b.n	362a <prvInitialiseTCBVariables+0x3e>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3600:	68ba      	ldr	r2, [r7, #8]
    3602:	697b      	ldr	r3, [r7, #20]
    3604:	18d3      	adds	r3, r2, r3
    3606:	7818      	ldrb	r0, [r3, #0]
    3608:	68fa      	ldr	r2, [r7, #12]
    360a:	2130      	movs	r1, #48	; 0x30
    360c:	697b      	ldr	r3, [r7, #20]
    360e:	18d3      	adds	r3, r2, r3
    3610:	185b      	adds	r3, r3, r1
    3612:	1c02      	adds	r2, r0, #0
    3614:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3616:	68ba      	ldr	r2, [r7, #8]
    3618:	697b      	ldr	r3, [r7, #20]
    361a:	18d3      	adds	r3, r2, r3
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	2b00      	cmp	r3, #0
    3620:	d100      	bne.n	3624 <prvInitialiseTCBVariables+0x38>
		{
			break;
    3622:	e005      	b.n	3630 <prvInitialiseTCBVariables+0x44>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3624:	697b      	ldr	r3, [r7, #20]
    3626:	3301      	adds	r3, #1
    3628:	617b      	str	r3, [r7, #20]
    362a:	697b      	ldr	r3, [r7, #20]
    362c:	2b07      	cmp	r3, #7
    362e:	d9e7      	bls.n	3600 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3630:	68fb      	ldr	r3, [r7, #12]
    3632:	223b      	movs	r2, #59	; 0x3b
    3634:	2100      	movs	r1, #0
    3636:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3638:	687b      	ldr	r3, [r7, #4]
    363a:	2b04      	cmp	r3, #4
    363c:	d901      	bls.n	3642 <prvInitialiseTCBVariables+0x56>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    363e:	2304      	movs	r3, #4
    3640:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    3642:	68fb      	ldr	r3, [r7, #12]
    3644:	687a      	ldr	r2, [r7, #4]
    3646:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3648:	68fb      	ldr	r3, [r7, #12]
    364a:	687a      	ldr	r2, [r7, #4]
    364c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    364e:	68fb      	ldr	r3, [r7, #12]
    3650:	3304      	adds	r3, #4
    3652:	1c18      	adds	r0, r3, #0
    3654:	4b0a      	ldr	r3, [pc, #40]	; (3680 <prvInitialiseTCBVariables+0x94>)
    3656:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3658:	68fb      	ldr	r3, [r7, #12]
    365a:	3318      	adds	r3, #24
    365c:	1c18      	adds	r0, r3, #0
    365e:	4b08      	ldr	r3, [pc, #32]	; (3680 <prvInitialiseTCBVariables+0x94>)
    3660:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3662:	68fb      	ldr	r3, [r7, #12]
    3664:	68fa      	ldr	r2, [r7, #12]
    3666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	2205      	movs	r2, #5
    366c:	1ad2      	subs	r2, r2, r3
    366e:	68fb      	ldr	r3, [r7, #12]
    3670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3672:	68fb      	ldr	r3, [r7, #12]
    3674:	68fa      	ldr	r2, [r7, #12]
    3676:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    3678:	46bd      	mov	sp, r7
    367a:	b006      	add	sp, #24
    367c:	bd80      	pop	{r7, pc}
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	000022c9 	.word	0x000022c9

00003684 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3684:	b580      	push	{r7, lr}
    3686:	b082      	sub	sp, #8
    3688:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    368a:	2300      	movs	r3, #0
    368c:	607b      	str	r3, [r7, #4]
    368e:	e00c      	b.n	36aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3690:	687a      	ldr	r2, [r7, #4]
    3692:	1c13      	adds	r3, r2, #0
    3694:	009b      	lsls	r3, r3, #2
    3696:	189b      	adds	r3, r3, r2
    3698:	009b      	lsls	r3, r3, #2
    369a:	4a14      	ldr	r2, [pc, #80]	; (36ec <prvInitialiseTaskLists+0x68>)
    369c:	189b      	adds	r3, r3, r2
    369e:	1c18      	adds	r0, r3, #0
    36a0:	4b13      	ldr	r3, [pc, #76]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36a2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    36a4:	687b      	ldr	r3, [r7, #4]
    36a6:	3301      	adds	r3, #1
    36a8:	607b      	str	r3, [r7, #4]
    36aa:	687b      	ldr	r3, [r7, #4]
    36ac:	2b04      	cmp	r3, #4
    36ae:	d9ef      	bls.n	3690 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    36b0:	4b10      	ldr	r3, [pc, #64]	; (36f4 <prvInitialiseTaskLists+0x70>)
    36b2:	1c18      	adds	r0, r3, #0
    36b4:	4b0e      	ldr	r3, [pc, #56]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36b6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    36b8:	4b0f      	ldr	r3, [pc, #60]	; (36f8 <prvInitialiseTaskLists+0x74>)
    36ba:	1c18      	adds	r0, r3, #0
    36bc:	4b0c      	ldr	r3, [pc, #48]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36be:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    36c0:	4b0e      	ldr	r3, [pc, #56]	; (36fc <prvInitialiseTaskLists+0x78>)
    36c2:	1c18      	adds	r0, r3, #0
    36c4:	4b0a      	ldr	r3, [pc, #40]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36c6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    36c8:	4b0d      	ldr	r3, [pc, #52]	; (3700 <prvInitialiseTaskLists+0x7c>)
    36ca:	1c18      	adds	r0, r3, #0
    36cc:	4b08      	ldr	r3, [pc, #32]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36ce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    36d0:	4b0c      	ldr	r3, [pc, #48]	; (3704 <prvInitialiseTaskLists+0x80>)
    36d2:	1c18      	adds	r0, r3, #0
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <prvInitialiseTaskLists+0x6c>)
    36d6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    36d8:	4b0b      	ldr	r3, [pc, #44]	; (3708 <prvInitialiseTaskLists+0x84>)
    36da:	4a06      	ldr	r2, [pc, #24]	; (36f4 <prvInitialiseTaskLists+0x70>)
    36dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    36de:	4b0b      	ldr	r3, [pc, #44]	; (370c <prvInitialiseTaskLists+0x88>)
    36e0:	4a05      	ldr	r2, [pc, #20]	; (36f8 <prvInitialiseTaskLists+0x74>)
    36e2:	601a      	str	r2, [r3, #0]
}
    36e4:	46bd      	mov	sp, r7
    36e6:	b002      	add	sp, #8
    36e8:	bd80      	pop	{r7, pc}
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	20003b54 	.word	0x20003b54
    36f0:	0000228d 	.word	0x0000228d
    36f4:	20003bb8 	.word	0x20003bb8
    36f8:	20003bcc 	.word	0x20003bcc
    36fc:	20003be8 	.word	0x20003be8
    3700:	20003bfc 	.word	0x20003bfc
    3704:	20003c14 	.word	0x20003c14
    3708:	20003be0 	.word	0x20003be0
    370c:	20003be4 	.word	0x20003be4

00003710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3710:	b580      	push	{r7, lr}
    3712:	b082      	sub	sp, #8
    3714:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3716:	e027      	b.n	3768 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    3718:	4b17      	ldr	r3, [pc, #92]	; (3778 <prvCheckTasksWaitingTermination+0x68>)
    371a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    371c:	4b17      	ldr	r3, [pc, #92]	; (377c <prvCheckTasksWaitingTermination+0x6c>)
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	425a      	negs	r2, r3
    3722:	4153      	adcs	r3, r2
    3724:	b2db      	uxtb	r3, r3
    3726:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    3728:	4b15      	ldr	r3, [pc, #84]	; (3780 <prvCheckTasksWaitingTermination+0x70>)
    372a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	2b00      	cmp	r3, #0
    3730:	d11a      	bne.n	3768 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3732:	4b14      	ldr	r3, [pc, #80]	; (3784 <prvCheckTasksWaitingTermination+0x74>)
    3734:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3736:	4b11      	ldr	r3, [pc, #68]	; (377c <prvCheckTasksWaitingTermination+0x6c>)
    3738:	68db      	ldr	r3, [r3, #12]
    373a:	68db      	ldr	r3, [r3, #12]
    373c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    373e:	683b      	ldr	r3, [r7, #0]
    3740:	3304      	adds	r3, #4
    3742:	1c18      	adds	r0, r3, #0
    3744:	4b10      	ldr	r3, [pc, #64]	; (3788 <prvCheckTasksWaitingTermination+0x78>)
    3746:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    3748:	4b10      	ldr	r3, [pc, #64]	; (378c <prvCheckTasksWaitingTermination+0x7c>)
    374a:	681b      	ldr	r3, [r3, #0]
    374c:	1e5a      	subs	r2, r3, #1
    374e:	4b0f      	ldr	r3, [pc, #60]	; (378c <prvCheckTasksWaitingTermination+0x7c>)
    3750:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    3752:	4b0f      	ldr	r3, [pc, #60]	; (3790 <prvCheckTasksWaitingTermination+0x80>)
    3754:	681b      	ldr	r3, [r3, #0]
    3756:	1e5a      	subs	r2, r3, #1
    3758:	4b0d      	ldr	r3, [pc, #52]	; (3790 <prvCheckTasksWaitingTermination+0x80>)
    375a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    375c:	4b0d      	ldr	r3, [pc, #52]	; (3794 <prvCheckTasksWaitingTermination+0x84>)
    375e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    3760:	683b      	ldr	r3, [r7, #0]
    3762:	1c18      	adds	r0, r3, #0
    3764:	4b0c      	ldr	r3, [pc, #48]	; (3798 <prvCheckTasksWaitingTermination+0x88>)
    3766:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    3768:	4b09      	ldr	r3, [pc, #36]	; (3790 <prvCheckTasksWaitingTermination+0x80>)
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	2b00      	cmp	r3, #0
    376e:	d1d3      	bne.n	3718 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    3770:	46bd      	mov	sp, r7
    3772:	b002      	add	sp, #8
    3774:	bd80      	pop	{r7, pc}
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	00002fc5 	.word	0x00002fc5
    377c:	20003bfc 	.word	0x20003bfc
    3780:	00002fdd 	.word	0x00002fdd
    3784:	000020d5 	.word	0x000020d5
    3788:	0000238d 	.word	0x0000238d
    378c:	20003c28 	.word	0x20003c28
    3790:	20003c10 	.word	0x20003c10
    3794:	000020f5 	.word	0x000020f5
    3798:	0000386d 	.word	0x0000386d

0000379c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    379c:	b580      	push	{r7, lr}
    379e:	b082      	sub	sp, #8
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    37a4:	4b13      	ldr	r3, [pc, #76]	; (37f4 <prvAddCurrentTaskToDelayedList+0x58>)
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	687a      	ldr	r2, [r7, #4]
    37aa:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    37ac:	4b12      	ldr	r3, [pc, #72]	; (37f8 <prvAddCurrentTaskToDelayedList+0x5c>)
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	687a      	ldr	r2, [r7, #4]
    37b2:	429a      	cmp	r2, r3
    37b4:	d209      	bcs.n	37ca <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37b6:	4b11      	ldr	r3, [pc, #68]	; (37fc <prvAddCurrentTaskToDelayedList+0x60>)
    37b8:	681a      	ldr	r2, [r3, #0]
    37ba:	4b0e      	ldr	r3, [pc, #56]	; (37f4 <prvAddCurrentTaskToDelayedList+0x58>)
    37bc:	681b      	ldr	r3, [r3, #0]
    37be:	3304      	adds	r3, #4
    37c0:	1c10      	adds	r0, r2, #0
    37c2:	1c19      	adds	r1, r3, #0
    37c4:	4b0e      	ldr	r3, [pc, #56]	; (3800 <prvAddCurrentTaskToDelayedList+0x64>)
    37c6:	4798      	blx	r3
    37c8:	e010      	b.n	37ec <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    37ca:	4b0e      	ldr	r3, [pc, #56]	; (3804 <prvAddCurrentTaskToDelayedList+0x68>)
    37cc:	681a      	ldr	r2, [r3, #0]
    37ce:	4b09      	ldr	r3, [pc, #36]	; (37f4 <prvAddCurrentTaskToDelayedList+0x58>)
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	3304      	adds	r3, #4
    37d4:	1c10      	adds	r0, r2, #0
    37d6:	1c19      	adds	r1, r3, #0
    37d8:	4b09      	ldr	r3, [pc, #36]	; (3800 <prvAddCurrentTaskToDelayedList+0x64>)
    37da:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    37dc:	4b0a      	ldr	r3, [pc, #40]	; (3808 <prvAddCurrentTaskToDelayedList+0x6c>)
    37de:	681b      	ldr	r3, [r3, #0]
    37e0:	687a      	ldr	r2, [r7, #4]
    37e2:	429a      	cmp	r2, r3
    37e4:	d202      	bcs.n	37ec <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
    37e6:	4b08      	ldr	r3, [pc, #32]	; (3808 <prvAddCurrentTaskToDelayedList+0x6c>)
    37e8:	687a      	ldr	r2, [r7, #4]
    37ea:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    37ec:	46bd      	mov	sp, r7
    37ee:	b002      	add	sp, #8
    37f0:	bd80      	pop	{r7, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	20003b50 	.word	0x20003b50
    37f8:	20003c2c 	.word	0x20003c2c
    37fc:	20003be4 	.word	0x20003be4
    3800:	00002321 	.word	0x00002321
    3804:	20003be0 	.word	0x20003be0
    3808:	20000008 	.word	0x20000008

0000380c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    380c:	b580      	push	{r7, lr}
    380e:	b084      	sub	sp, #16
    3810:	af00      	add	r7, sp, #0
    3812:	1c02      	adds	r2, r0, #0
    3814:	6039      	str	r1, [r7, #0]
    3816:	1dbb      	adds	r3, r7, #6
    3818:	801a      	strh	r2, [r3, #0]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    381a:	2040      	movs	r0, #64	; 0x40
    381c:	4b11      	ldr	r3, [pc, #68]	; (3864 <prvAllocateTCBAndStack+0x58>)
    381e:	4798      	blx	r3
    3820:	1c03      	adds	r3, r0, #0
    3822:	60fb      	str	r3, [r7, #12]

	if( pxNewTCB != NULL )
    3824:	68fb      	ldr	r3, [r7, #12]
    3826:	2b00      	cmp	r3, #0
    3828:	d017      	beq.n	385a <prvAllocateTCBAndStack+0x4e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    382a:	683b      	ldr	r3, [r7, #0]
    382c:	2b00      	cmp	r3, #0
    382e:	d107      	bne.n	3840 <prvAllocateTCBAndStack+0x34>
    3830:	1dbb      	adds	r3, r7, #6
    3832:	881b      	ldrh	r3, [r3, #0]
    3834:	009b      	lsls	r3, r3, #2
    3836:	1c18      	adds	r0, r3, #0
    3838:	4b0a      	ldr	r3, [pc, #40]	; (3864 <prvAllocateTCBAndStack+0x58>)
    383a:	4798      	blx	r3
    383c:	1c02      	adds	r2, r0, #0
    383e:	e000      	b.n	3842 <prvAllocateTCBAndStack+0x36>
    3840:	683a      	ldr	r2, [r7, #0]
    3842:	68fb      	ldr	r3, [r7, #12]
    3844:	631a      	str	r2, [r3, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3846:	68fb      	ldr	r3, [r7, #12]
    3848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    384a:	2b00      	cmp	r3, #0
    384c:	d105      	bne.n	385a <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    384e:	68fb      	ldr	r3, [r7, #12]
    3850:	1c18      	adds	r0, r3, #0
    3852:	4b05      	ldr	r3, [pc, #20]	; (3868 <prvAllocateTCBAndStack+0x5c>)
    3854:	4798      	blx	r3
			pxNewTCB = NULL;
    3856:	2300      	movs	r3, #0
    3858:	60fb      	str	r3, [r7, #12]
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
    385a:	68fb      	ldr	r3, [r7, #12]
}
    385c:	1c18      	adds	r0, r3, #0
    385e:	46bd      	mov	sp, r7
    3860:	b004      	add	sp, #16
    3862:	bd80      	pop	{r7, pc}
    3864:	000021e1 	.word	0x000021e1
    3868:	00002275 	.word	0x00002275

0000386c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    386c:	b580      	push	{r7, lr}
    386e:	b082      	sub	sp, #8
    3870:	af00      	add	r7, sp, #0
    3872:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3878:	1c18      	adds	r0, r3, #0
    387a:	4b04      	ldr	r3, [pc, #16]	; (388c <prvDeleteTCB+0x20>)
    387c:	4798      	blx	r3
		vPortFree( pxTCB );
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	1c18      	adds	r0, r3, #0
    3882:	4b02      	ldr	r3, [pc, #8]	; (388c <prvDeleteTCB+0x20>)
    3884:	4798      	blx	r3
	}
    3886:	46bd      	mov	sp, r7
    3888:	b002      	add	sp, #8
    388a:	bd80      	pop	{r7, pc}
    388c:	00002275 	.word	0x00002275

00003890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3890:	b580      	push	{r7, lr}
    3892:	b082      	sub	sp, #8
    3894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3896:	4b0d      	ldr	r3, [pc, #52]	; (38cc <prvResetNextTaskUnblockTime+0x3c>)
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	2b00      	cmp	r3, #0
    389e:	d101      	bne.n	38a4 <prvResetNextTaskUnblockTime+0x14>
    38a0:	2301      	movs	r3, #1
    38a2:	e000      	b.n	38a6 <prvResetNextTaskUnblockTime+0x16>
    38a4:	2300      	movs	r3, #0
    38a6:	2b00      	cmp	r3, #0
    38a8:	d004      	beq.n	38b4 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    38aa:	4b09      	ldr	r3, [pc, #36]	; (38d0 <prvResetNextTaskUnblockTime+0x40>)
    38ac:	2201      	movs	r2, #1
    38ae:	4252      	negs	r2, r2
    38b0:	601a      	str	r2, [r3, #0]
    38b2:	e008      	b.n	38c6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    38b4:	4b05      	ldr	r3, [pc, #20]	; (38cc <prvResetNextTaskUnblockTime+0x3c>)
    38b6:	681b      	ldr	r3, [r3, #0]
    38b8:	68db      	ldr	r3, [r3, #12]
    38ba:	68db      	ldr	r3, [r3, #12]
    38bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	685a      	ldr	r2, [r3, #4]
    38c2:	4b03      	ldr	r3, [pc, #12]	; (38d0 <prvResetNextTaskUnblockTime+0x40>)
    38c4:	601a      	str	r2, [r3, #0]
	}
}
    38c6:	46bd      	mov	sp, r7
    38c8:	b002      	add	sp, #8
    38ca:	bd80      	pop	{r7, pc}
    38cc:	20003be0 	.word	0x20003be0
    38d0:	20000008 	.word	0x20000008

000038d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    38d4:	b580      	push	{r7, lr}
    38d6:	b082      	sub	sp, #8
    38d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    38da:	4b04      	ldr	r3, [pc, #16]	; (38ec <xTaskGetCurrentTaskHandle+0x18>)
    38dc:	681b      	ldr	r3, [r3, #0]
    38de:	607b      	str	r3, [r7, #4]

		return xReturn;
    38e0:	687b      	ldr	r3, [r7, #4]
	}
    38e2:	1c18      	adds	r0, r3, #0
    38e4:	46bd      	mov	sp, r7
    38e6:	b002      	add	sp, #8
    38e8:	bd80      	pop	{r7, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	20003b50 	.word	0x20003b50

000038f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    38f0:	b580      	push	{r7, lr}
    38f2:	b082      	sub	sp, #8
    38f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    38f6:	4b0a      	ldr	r3, [pc, #40]	; (3920 <xTaskGetSchedulerState+0x30>)
    38f8:	681b      	ldr	r3, [r3, #0]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d102      	bne.n	3904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    38fe:	2301      	movs	r3, #1
    3900:	607b      	str	r3, [r7, #4]
    3902:	e008      	b.n	3916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3904:	4b07      	ldr	r3, [pc, #28]	; (3924 <xTaskGetSchedulerState+0x34>)
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	2b00      	cmp	r3, #0
    390a:	d102      	bne.n	3912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    390c:	2302      	movs	r3, #2
    390e:	607b      	str	r3, [r7, #4]
    3910:	e001      	b.n	3916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    3912:	2300      	movs	r3, #0
    3914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    3916:	687b      	ldr	r3, [r7, #4]
	}
    3918:	1c18      	adds	r0, r3, #0
    391a:	46bd      	mov	sp, r7
    391c:	b002      	add	sp, #8
    391e:	bd80      	pop	{r7, pc}
    3920:	20003c34 	.word	0x20003c34
    3924:	20003c48 	.word	0x20003c48

00003928 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3928:	b580      	push	{r7, lr}
    392a:	b084      	sub	sp, #16
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	2b00      	cmp	r3, #0
    3938:	d04a      	beq.n	39d0 <vTaskPriorityInherit+0xa8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    393a:	68fb      	ldr	r3, [r7, #12]
    393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    393e:	4b26      	ldr	r3, [pc, #152]	; (39d8 <vTaskPriorityInherit+0xb0>)
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3944:	429a      	cmp	r2, r3
    3946:	d243      	bcs.n	39d0 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	699b      	ldr	r3, [r3, #24]
    394c:	2b00      	cmp	r3, #0
    394e:	db06      	blt.n	395e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3950:	4b21      	ldr	r3, [pc, #132]	; (39d8 <vTaskPriorityInherit+0xb0>)
    3952:	681b      	ldr	r3, [r3, #0]
    3954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3956:	2205      	movs	r2, #5
    3958:	1ad2      	subs	r2, r2, r3
    395a:	68fb      	ldr	r3, [r7, #12]
    395c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	6959      	ldr	r1, [r3, #20]
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3966:	1c13      	adds	r3, r2, #0
    3968:	009b      	lsls	r3, r3, #2
    396a:	189b      	adds	r3, r3, r2
    396c:	009b      	lsls	r3, r3, #2
    396e:	4a1b      	ldr	r2, [pc, #108]	; (39dc <vTaskPriorityInherit+0xb4>)
    3970:	189b      	adds	r3, r3, r2
    3972:	4299      	cmp	r1, r3
    3974:	d101      	bne.n	397a <vTaskPriorityInherit+0x52>
    3976:	2301      	movs	r3, #1
    3978:	e000      	b.n	397c <vTaskPriorityInherit+0x54>
    397a:	2300      	movs	r3, #0
    397c:	2b00      	cmp	r3, #0
    397e:	d022      	beq.n	39c6 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3980:	68fb      	ldr	r3, [r7, #12]
    3982:	3304      	adds	r3, #4
    3984:	1c18      	adds	r0, r3, #0
    3986:	4b16      	ldr	r3, [pc, #88]	; (39e0 <vTaskPriorityInherit+0xb8>)
    3988:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    398a:	4b13      	ldr	r3, [pc, #76]	; (39d8 <vTaskPriorityInherit+0xb0>)
    398c:	681b      	ldr	r3, [r3, #0]
    398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3990:	68fb      	ldr	r3, [r7, #12]
    3992:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    3994:	68fb      	ldr	r3, [r7, #12]
    3996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3998:	4b12      	ldr	r3, [pc, #72]	; (39e4 <vTaskPriorityInherit+0xbc>)
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	429a      	cmp	r2, r3
    399e:	d903      	bls.n	39a8 <vTaskPriorityInherit+0x80>
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39a4:	4b0f      	ldr	r3, [pc, #60]	; (39e4 <vTaskPriorityInherit+0xbc>)
    39a6:	601a      	str	r2, [r3, #0]
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39ac:	1c13      	adds	r3, r2, #0
    39ae:	009b      	lsls	r3, r3, #2
    39b0:	189b      	adds	r3, r3, r2
    39b2:	009b      	lsls	r3, r3, #2
    39b4:	4a09      	ldr	r2, [pc, #36]	; (39dc <vTaskPriorityInherit+0xb4>)
    39b6:	189a      	adds	r2, r3, r2
    39b8:	68fb      	ldr	r3, [r7, #12]
    39ba:	3304      	adds	r3, #4
    39bc:	1c10      	adds	r0, r2, #0
    39be:	1c19      	adds	r1, r3, #0
    39c0:	4b09      	ldr	r3, [pc, #36]	; (39e8 <vTaskPriorityInherit+0xc0>)
    39c2:	4798      	blx	r3
    39c4:	e004      	b.n	39d0 <vTaskPriorityInherit+0xa8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    39c6:	4b04      	ldr	r3, [pc, #16]	; (39d8 <vTaskPriorityInherit+0xb0>)
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    39d0:	46bd      	mov	sp, r7
    39d2:	b004      	add	sp, #16
    39d4:	bd80      	pop	{r7, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	20003b50 	.word	0x20003b50
    39dc:	20003b54 	.word	0x20003b54
    39e0:	0000238d 	.word	0x0000238d
    39e4:	20003c30 	.word	0x20003c30
    39e8:	000022dd 	.word	0x000022dd

000039ec <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    39ec:	b580      	push	{r7, lr}
    39ee:	b084      	sub	sp, #16
    39f0:	af00      	add	r7, sp, #0
    39f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    39f4:	687b      	ldr	r3, [r7, #4]
    39f6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    39f8:	687b      	ldr	r3, [r7, #4]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d030      	beq.n	3a60 <vTaskPriorityDisinherit+0x74>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a02:	68fb      	ldr	r3, [r7, #12]
    3a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3a06:	429a      	cmp	r2, r3
    3a08:	d02a      	beq.n	3a60 <vTaskPriorityDisinherit+0x74>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3a0a:	68fb      	ldr	r3, [r7, #12]
    3a0c:	3304      	adds	r3, #4
    3a0e:	1c18      	adds	r0, r3, #0
    3a10:	4b15      	ldr	r3, [pc, #84]	; (3a68 <vTaskPriorityDisinherit+0x7c>)
    3a12:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3a14:	68fb      	ldr	r3, [r7, #12]
    3a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3a18:	68fb      	ldr	r3, [r7, #12]
    3a1a:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3a1c:	68fb      	ldr	r3, [r7, #12]
    3a1e:	699b      	ldr	r3, [r3, #24]
    3a20:	2b00      	cmp	r3, #0
    3a22:	db05      	blt.n	3a30 <vTaskPriorityDisinherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a24:	68fb      	ldr	r3, [r7, #12]
    3a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a28:	2205      	movs	r2, #5
    3a2a:	1ad2      	subs	r2, r2, r3
    3a2c:	68fb      	ldr	r3, [r7, #12]
    3a2e:	619a      	str	r2, [r3, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a34:	4b0d      	ldr	r3, [pc, #52]	; (3a6c <vTaskPriorityDisinherit+0x80>)
    3a36:	681b      	ldr	r3, [r3, #0]
    3a38:	429a      	cmp	r2, r3
    3a3a:	d903      	bls.n	3a44 <vTaskPriorityDisinherit+0x58>
    3a3c:	68fb      	ldr	r3, [r7, #12]
    3a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a40:	4b0a      	ldr	r3, [pc, #40]	; (3a6c <vTaskPriorityDisinherit+0x80>)
    3a42:	601a      	str	r2, [r3, #0]
    3a44:	68fb      	ldr	r3, [r7, #12]
    3a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3a48:	1c13      	adds	r3, r2, #0
    3a4a:	009b      	lsls	r3, r3, #2
    3a4c:	189b      	adds	r3, r3, r2
    3a4e:	009b      	lsls	r3, r3, #2
    3a50:	4a07      	ldr	r2, [pc, #28]	; (3a70 <vTaskPriorityDisinherit+0x84>)
    3a52:	189a      	adds	r2, r3, r2
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	3304      	adds	r3, #4
    3a58:	1c10      	adds	r0, r2, #0
    3a5a:	1c19      	adds	r1, r3, #0
    3a5c:	4b05      	ldr	r3, [pc, #20]	; (3a74 <vTaskPriorityDisinherit+0x88>)
    3a5e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3a60:	46bd      	mov	sp, r7
    3a62:	b004      	add	sp, #16
    3a64:	bd80      	pop	{r7, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	0000238d 	.word	0x0000238d
    3a6c:	20003c30 	.word	0x20003c30
    3a70:	20003b54 	.word	0x20003b54
    3a74:	000022dd 	.word	0x000022dd

00003a78 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    3a78:	b590      	push	{r4, r7, lr}
    3a7a:	b087      	sub	sp, #28
    3a7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    3a7e:	2300      	movs	r3, #0
    3a80:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    3a82:	4b11      	ldr	r3, [pc, #68]	; (3ac8 <xTimerCreateTimerTask+0x50>)
    3a84:	4798      	blx	r3

	if( xTimerQueue != NULL )
    3a86:	4b11      	ldr	r3, [pc, #68]	; (3acc <xTimerCreateTimerTask+0x54>)
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d011      	beq.n	3ab2 <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    3a8e:	4910      	ldr	r1, [pc, #64]	; (3ad0 <xTimerCreateTimerTask+0x58>)
    3a90:	4a10      	ldr	r2, [pc, #64]	; (3ad4 <xTimerCreateTimerTask+0x5c>)
    3a92:	2302      	movs	r3, #2
    3a94:	9300      	str	r3, [sp, #0]
    3a96:	2300      	movs	r3, #0
    3a98:	9301      	str	r3, [sp, #4]
    3a9a:	2300      	movs	r3, #0
    3a9c:	9302      	str	r3, [sp, #8]
    3a9e:	2300      	movs	r3, #0
    3aa0:	9303      	str	r3, [sp, #12]
    3aa2:	1c08      	adds	r0, r1, #0
    3aa4:	1c11      	adds	r1, r2, #0
    3aa6:	2250      	movs	r2, #80	; 0x50
    3aa8:	2300      	movs	r3, #0
    3aaa:	4c0b      	ldr	r4, [pc, #44]	; (3ad8 <xTimerCreateTimerTask+0x60>)
    3aac:	47a0      	blx	r4
    3aae:	1c03      	adds	r3, r0, #0
    3ab0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d101      	bne.n	3abc <xTimerCreateTimerTask+0x44>
    3ab8:	b672      	cpsid	i
    3aba:	e7fe      	b.n	3aba <xTimerCreateTimerTask+0x42>
	return xReturn;
    3abc:	687b      	ldr	r3, [r7, #4]
}
    3abe:	1c18      	adds	r0, r3, #0
    3ac0:	46bd      	mov	sp, r7
    3ac2:	b003      	add	sp, #12
    3ac4:	bd90      	pop	{r4, r7, pc}
    3ac6:	46c0      	nop			; (mov r8, r8)
    3ac8:	00003fb5 	.word	0x00003fb5
    3acc:	20003c7c 	.word	0x20003c7c
    3ad0:	00003c09 	.word	0x00003c09
    3ad4:	000073b8 	.word	0x000073b8
    3ad8:	00002d3d 	.word	0x00002d3d

00003adc <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3adc:	b590      	push	{r4, r7, lr}
    3ade:	b089      	sub	sp, #36	; 0x24
    3ae0:	af00      	add	r7, sp, #0
    3ae2:	60f8      	str	r0, [r7, #12]
    3ae4:	60b9      	str	r1, [r7, #8]
    3ae6:	607a      	str	r2, [r7, #4]
    3ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    3aea:	2300      	movs	r3, #0
    3aec:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    3aee:	4b22      	ldr	r3, [pc, #136]	; (3b78 <xTimerGenericCommand+0x9c>)
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d03b      	beq.n	3b6e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    3af6:	2310      	movs	r3, #16
    3af8:	18fb      	adds	r3, r7, r3
    3afa:	68ba      	ldr	r2, [r7, #8]
    3afc:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    3afe:	2310      	movs	r3, #16
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	687a      	ldr	r2, [r7, #4]
    3b04:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    3b06:	2310      	movs	r3, #16
    3b08:	18fb      	adds	r3, r7, r3
    3b0a:	68fa      	ldr	r2, [r7, #12]
    3b0c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3b0e:	68bb      	ldr	r3, [r7, #8]
    3b10:	2b05      	cmp	r3, #5
    3b12:	dc1f      	bgt.n	3b54 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3b14:	4b19      	ldr	r3, [pc, #100]	; (3b7c <xTimerGenericCommand+0xa0>)
    3b16:	4798      	blx	r3
    3b18:	1e03      	subs	r3, r0, #0
    3b1a:	2b02      	cmp	r3, #2
    3b1c:	d10d      	bne.n	3b3a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3b1e:	4b16      	ldr	r3, [pc, #88]	; (3b78 <xTimerGenericCommand+0x9c>)
    3b20:	6819      	ldr	r1, [r3, #0]
    3b22:	2310      	movs	r3, #16
    3b24:	18fa      	adds	r2, r7, r3
    3b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b28:	1c08      	adds	r0, r1, #0
    3b2a:	1c11      	adds	r1, r2, #0
    3b2c:	1c1a      	adds	r2, r3, #0
    3b2e:	2300      	movs	r3, #0
    3b30:	4c13      	ldr	r4, [pc, #76]	; (3b80 <xTimerGenericCommand+0xa4>)
    3b32:	47a0      	blx	r4
    3b34:	1c03      	adds	r3, r0, #0
    3b36:	61fb      	str	r3, [r7, #28]
    3b38:	e019      	b.n	3b6e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    3b3a:	4b0f      	ldr	r3, [pc, #60]	; (3b78 <xTimerGenericCommand+0x9c>)
    3b3c:	681a      	ldr	r2, [r3, #0]
    3b3e:	2310      	movs	r3, #16
    3b40:	18fb      	adds	r3, r7, r3
    3b42:	1c10      	adds	r0, r2, #0
    3b44:	1c19      	adds	r1, r3, #0
    3b46:	2200      	movs	r2, #0
    3b48:	2300      	movs	r3, #0
    3b4a:	4c0d      	ldr	r4, [pc, #52]	; (3b80 <xTimerGenericCommand+0xa4>)
    3b4c:	47a0      	blx	r4
    3b4e:	1c03      	adds	r3, r0, #0
    3b50:	61fb      	str	r3, [r7, #28]
    3b52:	e00c      	b.n	3b6e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3b54:	4b08      	ldr	r3, [pc, #32]	; (3b78 <xTimerGenericCommand+0x9c>)
    3b56:	6819      	ldr	r1, [r3, #0]
    3b58:	2310      	movs	r3, #16
    3b5a:	18fa      	adds	r2, r7, r3
    3b5c:	683b      	ldr	r3, [r7, #0]
    3b5e:	1c08      	adds	r0, r1, #0
    3b60:	1c11      	adds	r1, r2, #0
    3b62:	1c1a      	adds	r2, r3, #0
    3b64:	2300      	movs	r3, #0
    3b66:	4c07      	ldr	r4, [pc, #28]	; (3b84 <xTimerGenericCommand+0xa8>)
    3b68:	47a0      	blx	r4
    3b6a:	1c03      	adds	r3, r0, #0
    3b6c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    3b6e:	69fb      	ldr	r3, [r7, #28]
}
    3b70:	1c18      	adds	r0, r3, #0
    3b72:	46bd      	mov	sp, r7
    3b74:	b009      	add	sp, #36	; 0x24
    3b76:	bd90      	pop	{r4, r7, pc}
    3b78:	20003c7c 	.word	0x20003c7c
    3b7c:	000038f1 	.word	0x000038f1
    3b80:	00002531 	.word	0x00002531
    3b84:	00002701 	.word	0x00002701

00003b88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3b88:	b590      	push	{r4, r7, lr}
    3b8a:	b087      	sub	sp, #28
    3b8c:	af02      	add	r7, sp, #8
    3b8e:	6078      	str	r0, [r7, #4]
    3b90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3b92:	4b19      	ldr	r3, [pc, #100]	; (3bf8 <prvProcessExpiredTimer+0x70>)
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	68db      	ldr	r3, [r3, #12]
    3b98:	68db      	ldr	r3, [r3, #12]
    3b9a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b9c:	68fb      	ldr	r3, [r7, #12]
    3b9e:	3304      	adds	r3, #4
    3ba0:	1c18      	adds	r0, r3, #0
    3ba2:	4b16      	ldr	r3, [pc, #88]	; (3bfc <prvProcessExpiredTimer+0x74>)
    3ba4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3ba6:	68fb      	ldr	r3, [r7, #12]
    3ba8:	69db      	ldr	r3, [r3, #28]
    3baa:	2b01      	cmp	r3, #1
    3bac:	d11b      	bne.n	3be6 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    3bae:	68fb      	ldr	r3, [r7, #12]
    3bb0:	699a      	ldr	r2, [r3, #24]
    3bb2:	687b      	ldr	r3, [r7, #4]
    3bb4:	18d1      	adds	r1, r2, r3
    3bb6:	68f8      	ldr	r0, [r7, #12]
    3bb8:	683a      	ldr	r2, [r7, #0]
    3bba:	687b      	ldr	r3, [r7, #4]
    3bbc:	4c10      	ldr	r4, [pc, #64]	; (3c00 <prvProcessExpiredTimer+0x78>)
    3bbe:	47a0      	blx	r4
    3bc0:	1e03      	subs	r3, r0, #0
    3bc2:	2b01      	cmp	r3, #1
    3bc4:	d10f      	bne.n	3be6 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bc6:	68f9      	ldr	r1, [r7, #12]
    3bc8:	687a      	ldr	r2, [r7, #4]
    3bca:	2300      	movs	r3, #0
    3bcc:	9300      	str	r3, [sp, #0]
    3bce:	1c08      	adds	r0, r1, #0
    3bd0:	2100      	movs	r1, #0
    3bd2:	2300      	movs	r3, #0
    3bd4:	4c0b      	ldr	r4, [pc, #44]	; (3c04 <prvProcessExpiredTimer+0x7c>)
    3bd6:	47a0      	blx	r4
    3bd8:	1c03      	adds	r3, r0, #0
    3bda:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    3bdc:	68bb      	ldr	r3, [r7, #8]
    3bde:	2b00      	cmp	r3, #0
    3be0:	d101      	bne.n	3be6 <prvProcessExpiredTimer+0x5e>
    3be2:	b672      	cpsid	i
    3be4:	e7fe      	b.n	3be4 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3be6:	68fb      	ldr	r3, [r7, #12]
    3be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3bea:	68fa      	ldr	r2, [r7, #12]
    3bec:	1c10      	adds	r0, r2, #0
    3bee:	4798      	blx	r3
}
    3bf0:	46bd      	mov	sp, r7
    3bf2:	b005      	add	sp, #20
    3bf4:	bd90      	pop	{r4, r7, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	20003c74 	.word	0x20003c74
    3bfc:	0000238d 	.word	0x0000238d
    3c00:	00003d4d 	.word	0x00003d4d
    3c04:	00003add 	.word	0x00003add

00003c08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    3c08:	b580      	push	{r7, lr}
    3c0a:	b084      	sub	sp, #16
    3c0c:	af00      	add	r7, sp, #0
    3c0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    3c10:	2308      	movs	r3, #8
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	1c18      	adds	r0, r3, #0
    3c16:	4b06      	ldr	r3, [pc, #24]	; (3c30 <prvTimerTask+0x28>)
    3c18:	4798      	blx	r3
    3c1a:	1c03      	adds	r3, r0, #0
    3c1c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    3c1e:	68bb      	ldr	r3, [r7, #8]
    3c20:	68fa      	ldr	r2, [r7, #12]
    3c22:	1c10      	adds	r0, r2, #0
    3c24:	1c19      	adds	r1, r3, #0
    3c26:	4b03      	ldr	r3, [pc, #12]	; (3c34 <prvTimerTask+0x2c>)
    3c28:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    3c2a:	4b03      	ldr	r3, [pc, #12]	; (3c38 <prvTimerTask+0x30>)
    3c2c:	4798      	blx	r3
	}
    3c2e:	e7ef      	b.n	3c10 <prvTimerTask+0x8>
    3c30:	00003cc5 	.word	0x00003cc5
    3c34:	00003c3d 	.word	0x00003c3d
    3c38:	00003dd5 	.word	0x00003dd5

00003c3c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b084      	sub	sp, #16
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
    3c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3c46:	4b18      	ldr	r3, [pc, #96]	; (3ca8 <prvProcessTimerOrBlockTask+0x6c>)
    3c48:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c4a:	2308      	movs	r3, #8
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	1c18      	adds	r0, r3, #0
    3c50:	4b16      	ldr	r3, [pc, #88]	; (3cac <prvProcessTimerOrBlockTask+0x70>)
    3c52:	4798      	blx	r3
    3c54:	1c03      	adds	r3, r0, #0
    3c56:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    3c58:	68bb      	ldr	r3, [r7, #8]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d11f      	bne.n	3c9e <prvProcessTimerOrBlockTask+0x62>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c5e:	683b      	ldr	r3, [r7, #0]
    3c60:	2b00      	cmp	r3, #0
    3c62:	d10c      	bne.n	3c7e <prvProcessTimerOrBlockTask+0x42>
    3c64:	687a      	ldr	r2, [r7, #4]
    3c66:	68fb      	ldr	r3, [r7, #12]
    3c68:	429a      	cmp	r2, r3
    3c6a:	d808      	bhi.n	3c7e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    3c6c:	4b10      	ldr	r3, [pc, #64]	; (3cb0 <prvProcessTimerOrBlockTask+0x74>)
    3c6e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c70:	687a      	ldr	r2, [r7, #4]
    3c72:	68fb      	ldr	r3, [r7, #12]
    3c74:	1c10      	adds	r0, r2, #0
    3c76:	1c19      	adds	r1, r3, #0
    3c78:	4b0e      	ldr	r3, [pc, #56]	; (3cb4 <prvProcessTimerOrBlockTask+0x78>)
    3c7a:	4798      	blx	r3
    3c7c:	e011      	b.n	3ca2 <prvProcessTimerOrBlockTask+0x66>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    3c7e:	4b0e      	ldr	r3, [pc, #56]	; (3cb8 <prvProcessTimerOrBlockTask+0x7c>)
    3c80:	6819      	ldr	r1, [r3, #0]
    3c82:	687a      	ldr	r2, [r7, #4]
    3c84:	68fb      	ldr	r3, [r7, #12]
    3c86:	1ad3      	subs	r3, r2, r3
    3c88:	1c08      	adds	r0, r1, #0
    3c8a:	1c19      	adds	r1, r3, #0
    3c8c:	4b0b      	ldr	r3, [pc, #44]	; (3cbc <prvProcessTimerOrBlockTask+0x80>)
    3c8e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    3c90:	4b07      	ldr	r3, [pc, #28]	; (3cb0 <prvProcessTimerOrBlockTask+0x74>)
    3c92:	4798      	blx	r3
    3c94:	1e03      	subs	r3, r0, #0
    3c96:	d104      	bne.n	3ca2 <prvProcessTimerOrBlockTask+0x66>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    3c98:	4b09      	ldr	r3, [pc, #36]	; (3cc0 <prvProcessTimerOrBlockTask+0x84>)
    3c9a:	4798      	blx	r3
    3c9c:	e001      	b.n	3ca2 <prvProcessTimerOrBlockTask+0x66>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    3c9e:	4b04      	ldr	r3, [pc, #16]	; (3cb0 <prvProcessTimerOrBlockTask+0x74>)
    3ca0:	4798      	blx	r3
		}
	}
}
    3ca2:	46bd      	mov	sp, r7
    3ca4:	b004      	add	sp, #16
    3ca6:	bd80      	pop	{r7, pc}
    3ca8:	00002fc5 	.word	0x00002fc5
    3cac:	00003d05 	.word	0x00003d05
    3cb0:	00002fdd 	.word	0x00002fdd
    3cb4:	00003b89 	.word	0x00003b89
    3cb8:	20003c7c 	.word	0x20003c7c
    3cbc:	00002c5d 	.word	0x00002c5d
    3cc0:	000020b9 	.word	0x000020b9

00003cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b084      	sub	sp, #16
    3cc8:	af00      	add	r7, sp, #0
    3cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3ccc:	4b0c      	ldr	r3, [pc, #48]	; (3d00 <prvGetNextExpireTime+0x3c>)
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	425a      	negs	r2, r3
    3cd4:	4153      	adcs	r3, r2
    3cd6:	b2db      	uxtb	r3, r3
    3cd8:	1c1a      	adds	r2, r3, #0
    3cda:	687b      	ldr	r3, [r7, #4]
    3cdc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	681b      	ldr	r3, [r3, #0]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d105      	bne.n	3cf2 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3ce6:	4b06      	ldr	r3, [pc, #24]	; (3d00 <prvGetNextExpireTime+0x3c>)
    3ce8:	681b      	ldr	r3, [r3, #0]
    3cea:	68db      	ldr	r3, [r3, #12]
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	60fb      	str	r3, [r7, #12]
    3cf0:	e001      	b.n	3cf6 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    3cf2:	2300      	movs	r3, #0
    3cf4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    3cf6:	68fb      	ldr	r3, [r7, #12]
}
    3cf8:	1c18      	adds	r0, r3, #0
    3cfa:	46bd      	mov	sp, r7
    3cfc:	b004      	add	sp, #16
    3cfe:	bd80      	pop	{r7, pc}
    3d00:	20003c74 	.word	0x20003c74

00003d04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b084      	sub	sp, #16
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3d0c:	4b0c      	ldr	r3, [pc, #48]	; (3d40 <prvSampleTimeNow+0x3c>)
    3d0e:	4798      	blx	r3
    3d10:	1c03      	adds	r3, r0, #0
    3d12:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    3d14:	4b0b      	ldr	r3, [pc, #44]	; (3d44 <prvSampleTimeNow+0x40>)
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	68fa      	ldr	r2, [r7, #12]
    3d1a:	429a      	cmp	r2, r3
    3d1c:	d205      	bcs.n	3d2a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    3d1e:	4b0a      	ldr	r3, [pc, #40]	; (3d48 <prvSampleTimeNow+0x44>)
    3d20:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    3d22:	687b      	ldr	r3, [r7, #4]
    3d24:	2201      	movs	r2, #1
    3d26:	601a      	str	r2, [r3, #0]
    3d28:	e002      	b.n	3d30 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    3d2a:	687b      	ldr	r3, [r7, #4]
    3d2c:	2200      	movs	r2, #0
    3d2e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    3d30:	4b04      	ldr	r3, [pc, #16]	; (3d44 <prvSampleTimeNow+0x40>)
    3d32:	68fa      	ldr	r2, [r7, #12]
    3d34:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    3d36:	68fb      	ldr	r3, [r7, #12]
}
    3d38:	1c18      	adds	r0, r3, #0
    3d3a:	46bd      	mov	sp, r7
    3d3c:	b004      	add	sp, #16
    3d3e:	bd80      	pop	{r7, pc}
    3d40:	000030fd 	.word	0x000030fd
    3d44:	20003c80 	.word	0x20003c80
    3d48:	00003ef5 	.word	0x00003ef5

00003d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b086      	sub	sp, #24
    3d50:	af00      	add	r7, sp, #0
    3d52:	60f8      	str	r0, [r7, #12]
    3d54:	60b9      	str	r1, [r7, #8]
    3d56:	607a      	str	r2, [r7, #4]
    3d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    3d5a:	2300      	movs	r3, #0
    3d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    3d5e:	68fb      	ldr	r3, [r7, #12]
    3d60:	68ba      	ldr	r2, [r7, #8]
    3d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3d64:	68fb      	ldr	r3, [r7, #12]
    3d66:	68fa      	ldr	r2, [r7, #12]
    3d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    3d6a:	68ba      	ldr	r2, [r7, #8]
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	429a      	cmp	r2, r3
    3d70:	d812      	bhi.n	3d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    3d72:	687a      	ldr	r2, [r7, #4]
    3d74:	683b      	ldr	r3, [r7, #0]
    3d76:	1ad2      	subs	r2, r2, r3
    3d78:	68fb      	ldr	r3, [r7, #12]
    3d7a:	699b      	ldr	r3, [r3, #24]
    3d7c:	429a      	cmp	r2, r3
    3d7e:	d302      	bcc.n	3d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    3d80:	2301      	movs	r3, #1
    3d82:	617b      	str	r3, [r7, #20]
    3d84:	e01b      	b.n	3dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    3d86:	4b10      	ldr	r3, [pc, #64]	; (3dc8 <prvInsertTimerInActiveList+0x7c>)
    3d88:	681a      	ldr	r2, [r3, #0]
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	3304      	adds	r3, #4
    3d8e:	1c10      	adds	r0, r2, #0
    3d90:	1c19      	adds	r1, r3, #0
    3d92:	4b0e      	ldr	r3, [pc, #56]	; (3dcc <prvInsertTimerInActiveList+0x80>)
    3d94:	4798      	blx	r3
    3d96:	e012      	b.n	3dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3d98:	687a      	ldr	r2, [r7, #4]
    3d9a:	683b      	ldr	r3, [r7, #0]
    3d9c:	429a      	cmp	r2, r3
    3d9e:	d206      	bcs.n	3dae <prvInsertTimerInActiveList+0x62>
    3da0:	68ba      	ldr	r2, [r7, #8]
    3da2:	683b      	ldr	r3, [r7, #0]
    3da4:	429a      	cmp	r2, r3
    3da6:	d302      	bcc.n	3dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    3da8:	2301      	movs	r3, #1
    3daa:	617b      	str	r3, [r7, #20]
    3dac:	e007      	b.n	3dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3dae:	4b08      	ldr	r3, [pc, #32]	; (3dd0 <prvInsertTimerInActiveList+0x84>)
    3db0:	681a      	ldr	r2, [r3, #0]
    3db2:	68fb      	ldr	r3, [r7, #12]
    3db4:	3304      	adds	r3, #4
    3db6:	1c10      	adds	r0, r2, #0
    3db8:	1c19      	adds	r1, r3, #0
    3dba:	4b04      	ldr	r3, [pc, #16]	; (3dcc <prvInsertTimerInActiveList+0x80>)
    3dbc:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    3dbe:	697b      	ldr	r3, [r7, #20]
}
    3dc0:	1c18      	adds	r0, r3, #0
    3dc2:	46bd      	mov	sp, r7
    3dc4:	b006      	add	sp, #24
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	20003c78 	.word	0x20003c78
    3dcc:	00002321 	.word	0x00002321
    3dd0:	20003c74 	.word	0x20003c74

00003dd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    3dd4:	b590      	push	{r4, r7, lr}
    3dd6:	b08b      	sub	sp, #44	; 0x2c
    3dd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3dda:	e06b      	b.n	3eb4 <prvProcessReceivedCommands+0xe0>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3ddc:	2308      	movs	r3, #8
    3dde:	18fb      	adds	r3, r7, r3
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	2b00      	cmp	r3, #0
    3de4:	db66      	blt.n	3eb4 <prvProcessReceivedCommands+0xe0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3de6:	2308      	movs	r3, #8
    3de8:	18fb      	adds	r3, r7, r3
    3dea:	689b      	ldr	r3, [r3, #8]
    3dec:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    3dee:	69fb      	ldr	r3, [r7, #28]
    3df0:	695b      	ldr	r3, [r3, #20]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d004      	beq.n	3e00 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3df6:	69fb      	ldr	r3, [r7, #28]
    3df8:	3304      	adds	r3, #4
    3dfa:	1c18      	adds	r0, r3, #0
    3dfc:	4b35      	ldr	r3, [pc, #212]	; (3ed4 <prvProcessReceivedCommands+0x100>)
    3dfe:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3e00:	1d3b      	adds	r3, r7, #4
    3e02:	1c18      	adds	r0, r3, #0
    3e04:	4b34      	ldr	r3, [pc, #208]	; (3ed8 <prvProcessReceivedCommands+0x104>)
    3e06:	4798      	blx	r3
    3e08:	1c03      	adds	r3, r0, #0
    3e0a:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    3e0c:	2308      	movs	r3, #8
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	681b      	ldr	r3, [r3, #0]
    3e12:	2b09      	cmp	r3, #9
    3e14:	d84d      	bhi.n	3eb2 <prvProcessReceivedCommands+0xde>
    3e16:	009a      	lsls	r2, r3, #2
    3e18:	4b30      	ldr	r3, [pc, #192]	; (3edc <prvProcessReceivedCommands+0x108>)
    3e1a:	18d3      	adds	r3, r2, r3
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    3e20:	2308      	movs	r3, #8
    3e22:	18fb      	adds	r3, r7, r3
    3e24:	685a      	ldr	r2, [r3, #4]
    3e26:	69fb      	ldr	r3, [r7, #28]
    3e28:	699b      	ldr	r3, [r3, #24]
    3e2a:	18d1      	adds	r1, r2, r3
    3e2c:	2308      	movs	r3, #8
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	685b      	ldr	r3, [r3, #4]
    3e32:	69f8      	ldr	r0, [r7, #28]
    3e34:	69ba      	ldr	r2, [r7, #24]
    3e36:	4c2a      	ldr	r4, [pc, #168]	; (3ee0 <prvProcessReceivedCommands+0x10c>)
    3e38:	47a0      	blx	r4
    3e3a:	1e03      	subs	r3, r0, #0
    3e3c:	2b01      	cmp	r3, #1
    3e3e:	d11d      	bne.n	3e7c <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3e40:	69fb      	ldr	r3, [r7, #28]
    3e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e44:	69fa      	ldr	r2, [r7, #28]
    3e46:	1c10      	adds	r0, r2, #0
    3e48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3e4a:	69fb      	ldr	r3, [r7, #28]
    3e4c:	69db      	ldr	r3, [r3, #28]
    3e4e:	2b01      	cmp	r3, #1
    3e50:	d114      	bne.n	3e7c <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3e52:	2308      	movs	r3, #8
    3e54:	18fb      	adds	r3, r7, r3
    3e56:	685a      	ldr	r2, [r3, #4]
    3e58:	69fb      	ldr	r3, [r7, #28]
    3e5a:	699b      	ldr	r3, [r3, #24]
    3e5c:	18d2      	adds	r2, r2, r3
    3e5e:	69f9      	ldr	r1, [r7, #28]
    3e60:	2300      	movs	r3, #0
    3e62:	9300      	str	r3, [sp, #0]
    3e64:	1c08      	adds	r0, r1, #0
    3e66:	2100      	movs	r1, #0
    3e68:	2300      	movs	r3, #0
    3e6a:	4c1e      	ldr	r4, [pc, #120]	; (3ee4 <prvProcessReceivedCommands+0x110>)
    3e6c:	47a0      	blx	r4
    3e6e:	1c03      	adds	r3, r0, #0
    3e70:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    3e72:	697b      	ldr	r3, [r7, #20]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d101      	bne.n	3e7c <prvProcessReceivedCommands+0xa8>
    3e78:	b672      	cpsid	i
    3e7a:	e7fe      	b.n	3e7a <prvProcessReceivedCommands+0xa6>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
    3e7c:	e01a      	b.n	3eb4 <prvProcessReceivedCommands+0xe0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3e7e:	2308      	movs	r3, #8
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	685a      	ldr	r2, [r3, #4]
    3e84:	69fb      	ldr	r3, [r7, #28]
    3e86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3e88:	69fb      	ldr	r3, [r7, #28]
    3e8a:	699b      	ldr	r3, [r3, #24]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d101      	bne.n	3e94 <prvProcessReceivedCommands+0xc0>
    3e90:	b672      	cpsid	i
    3e92:	e7fe      	b.n	3e92 <prvProcessReceivedCommands+0xbe>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3e94:	69fb      	ldr	r3, [r7, #28]
    3e96:	699a      	ldr	r2, [r3, #24]
    3e98:	69bb      	ldr	r3, [r7, #24]
    3e9a:	18d1      	adds	r1, r2, r3
    3e9c:	69f8      	ldr	r0, [r7, #28]
    3e9e:	69ba      	ldr	r2, [r7, #24]
    3ea0:	69bb      	ldr	r3, [r7, #24]
    3ea2:	4c0f      	ldr	r4, [pc, #60]	; (3ee0 <prvProcessReceivedCommands+0x10c>)
    3ea4:	47a0      	blx	r4
					break;
    3ea6:	e005      	b.n	3eb4 <prvProcessReceivedCommands+0xe0>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    3ea8:	69fb      	ldr	r3, [r7, #28]
    3eaa:	1c18      	adds	r0, r3, #0
    3eac:	4b0e      	ldr	r3, [pc, #56]	; (3ee8 <prvProcessReceivedCommands+0x114>)
    3eae:	4798      	blx	r3
					break;
    3eb0:	e000      	b.n	3eb4 <prvProcessReceivedCommands+0xe0>

				default	:
					/* Don't expect to get here. */
					break;
    3eb2:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3eb4:	4b0d      	ldr	r3, [pc, #52]	; (3eec <prvProcessReceivedCommands+0x118>)
    3eb6:	681a      	ldr	r2, [r3, #0]
    3eb8:	2308      	movs	r3, #8
    3eba:	18fb      	adds	r3, r7, r3
    3ebc:	1c10      	adds	r0, r2, #0
    3ebe:	1c19      	adds	r1, r3, #0
    3ec0:	2200      	movs	r2, #0
    3ec2:	2300      	movs	r3, #0
    3ec4:	4c0a      	ldr	r4, [pc, #40]	; (3ef0 <prvProcessReceivedCommands+0x11c>)
    3ec6:	47a0      	blx	r4
    3ec8:	1e03      	subs	r3, r0, #0
    3eca:	d187      	bne.n	3ddc <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    3ecc:	46bd      	mov	sp, r7
    3ece:	b009      	add	sp, #36	; 0x24
    3ed0:	bd90      	pop	{r4, r7, pc}
    3ed2:	46c0      	nop			; (mov r8, r8)
    3ed4:	0000238d 	.word	0x0000238d
    3ed8:	00003d05 	.word	0x00003d05
    3edc:	000073c0 	.word	0x000073c0
    3ee0:	00003d4d 	.word	0x00003d4d
    3ee4:	00003add 	.word	0x00003add
    3ee8:	00002275 	.word	0x00002275
    3eec:	20003c7c 	.word	0x20003c7c
    3ef0:	0000280d 	.word	0x0000280d

00003ef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    3ef4:	b590      	push	{r4, r7, lr}
    3ef6:	b089      	sub	sp, #36	; 0x24
    3ef8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3efa:	e03f      	b.n	3f7c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3efc:	4b28      	ldr	r3, [pc, #160]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	68db      	ldr	r3, [r3, #12]
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3f06:	4b26      	ldr	r3, [pc, #152]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3f08:	681b      	ldr	r3, [r3, #0]
    3f0a:	68db      	ldr	r3, [r3, #12]
    3f0c:	68db      	ldr	r3, [r3, #12]
    3f0e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3f10:	693b      	ldr	r3, [r7, #16]
    3f12:	3304      	adds	r3, #4
    3f14:	1c18      	adds	r0, r3, #0
    3f16:	4b23      	ldr	r3, [pc, #140]	; (3fa4 <prvSwitchTimerLists+0xb0>)
    3f18:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f1a:	693b      	ldr	r3, [r7, #16]
    3f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f1e:	693a      	ldr	r2, [r7, #16]
    3f20:	1c10      	adds	r0, r2, #0
    3f22:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3f24:	693b      	ldr	r3, [r7, #16]
    3f26:	69db      	ldr	r3, [r3, #28]
    3f28:	2b01      	cmp	r3, #1
    3f2a:	d127      	bne.n	3f7c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3f2c:	693b      	ldr	r3, [r7, #16]
    3f2e:	699a      	ldr	r2, [r3, #24]
    3f30:	697b      	ldr	r3, [r7, #20]
    3f32:	18d3      	adds	r3, r2, r3
    3f34:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    3f36:	68fa      	ldr	r2, [r7, #12]
    3f38:	697b      	ldr	r3, [r7, #20]
    3f3a:	429a      	cmp	r2, r3
    3f3c:	d90e      	bls.n	3f5c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3f3e:	693b      	ldr	r3, [r7, #16]
    3f40:	68fa      	ldr	r2, [r7, #12]
    3f42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3f44:	693b      	ldr	r3, [r7, #16]
    3f46:	693a      	ldr	r2, [r7, #16]
    3f48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3f4a:	4b15      	ldr	r3, [pc, #84]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3f4c:	681a      	ldr	r2, [r3, #0]
    3f4e:	693b      	ldr	r3, [r7, #16]
    3f50:	3304      	adds	r3, #4
    3f52:	1c10      	adds	r0, r2, #0
    3f54:	1c19      	adds	r1, r3, #0
    3f56:	4b14      	ldr	r3, [pc, #80]	; (3fa8 <prvSwitchTimerLists+0xb4>)
    3f58:	4798      	blx	r3
    3f5a:	e00f      	b.n	3f7c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3f5c:	6939      	ldr	r1, [r7, #16]
    3f5e:	697a      	ldr	r2, [r7, #20]
    3f60:	2300      	movs	r3, #0
    3f62:	9300      	str	r3, [sp, #0]
    3f64:	1c08      	adds	r0, r1, #0
    3f66:	2100      	movs	r1, #0
    3f68:	2300      	movs	r3, #0
    3f6a:	4c10      	ldr	r4, [pc, #64]	; (3fac <prvSwitchTimerLists+0xb8>)
    3f6c:	47a0      	blx	r4
    3f6e:	1c03      	adds	r3, r0, #0
    3f70:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    3f72:	68bb      	ldr	r3, [r7, #8]
    3f74:	2b00      	cmp	r3, #0
    3f76:	d101      	bne.n	3f7c <prvSwitchTimerLists+0x88>
    3f78:	b672      	cpsid	i
    3f7a:	e7fe      	b.n	3f7a <prvSwitchTimerLists+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3f7c:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	681b      	ldr	r3, [r3, #0]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d1ba      	bne.n	3efc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    3f86:	4b06      	ldr	r3, [pc, #24]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    3f8c:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <prvSwitchTimerLists+0xbc>)
    3f8e:	681a      	ldr	r2, [r3, #0]
    3f90:	4b03      	ldr	r3, [pc, #12]	; (3fa0 <prvSwitchTimerLists+0xac>)
    3f92:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    3f94:	4b06      	ldr	r3, [pc, #24]	; (3fb0 <prvSwitchTimerLists+0xbc>)
    3f96:	687a      	ldr	r2, [r7, #4]
    3f98:	601a      	str	r2, [r3, #0]
}
    3f9a:	46bd      	mov	sp, r7
    3f9c:	b007      	add	sp, #28
    3f9e:	bd90      	pop	{r4, r7, pc}
    3fa0:	20003c74 	.word	0x20003c74
    3fa4:	0000238d 	.word	0x0000238d
    3fa8:	00002321 	.word	0x00002321
    3fac:	00003add 	.word	0x00003add
    3fb0:	20003c78 	.word	0x20003c78

00003fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    3fb8:	4b12      	ldr	r3, [pc, #72]	; (4004 <prvCheckForValidListAndQueue+0x50>)
    3fba:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    3fbc:	4b12      	ldr	r3, [pc, #72]	; (4008 <prvCheckForValidListAndQueue+0x54>)
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d11b      	bne.n	3ffc <prvCheckForValidListAndQueue+0x48>
		{
			vListInitialise( &xActiveTimerList1 );
    3fc4:	4b11      	ldr	r3, [pc, #68]	; (400c <prvCheckForValidListAndQueue+0x58>)
    3fc6:	1c18      	adds	r0, r3, #0
    3fc8:	4b11      	ldr	r3, [pc, #68]	; (4010 <prvCheckForValidListAndQueue+0x5c>)
    3fca:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    3fcc:	4b11      	ldr	r3, [pc, #68]	; (4014 <prvCheckForValidListAndQueue+0x60>)
    3fce:	1c18      	adds	r0, r3, #0
    3fd0:	4b0f      	ldr	r3, [pc, #60]	; (4010 <prvCheckForValidListAndQueue+0x5c>)
    3fd2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    3fd4:	4b10      	ldr	r3, [pc, #64]	; (4018 <prvCheckForValidListAndQueue+0x64>)
    3fd6:	4a0d      	ldr	r2, [pc, #52]	; (400c <prvCheckForValidListAndQueue+0x58>)
    3fd8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    3fda:	4b10      	ldr	r3, [pc, #64]	; (401c <prvCheckForValidListAndQueue+0x68>)
    3fdc:	4a0d      	ldr	r2, [pc, #52]	; (4014 <prvCheckForValidListAndQueue+0x60>)
    3fde:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    3fe0:	2002      	movs	r0, #2
    3fe2:	210c      	movs	r1, #12
    3fe4:	2200      	movs	r2, #0
    3fe6:	4b0e      	ldr	r3, [pc, #56]	; (4020 <prvCheckForValidListAndQueue+0x6c>)
    3fe8:	4798      	blx	r3
    3fea:	1c02      	adds	r2, r0, #0
    3fec:	4b06      	ldr	r3, [pc, #24]	; (4008 <prvCheckForValidListAndQueue+0x54>)
    3fee:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
    3ff0:	4b05      	ldr	r3, [pc, #20]	; (4008 <prvCheckForValidListAndQueue+0x54>)
    3ff2:	681b      	ldr	r3, [r3, #0]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	d101      	bne.n	3ffc <prvCheckForValidListAndQueue+0x48>
    3ff8:	b672      	cpsid	i
    3ffa:	e7fe      	b.n	3ffa <prvCheckForValidListAndQueue+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3ffc:	4b09      	ldr	r3, [pc, #36]	; (4024 <prvCheckForValidListAndQueue+0x70>)
    3ffe:	4798      	blx	r3
}
    4000:	46bd      	mov	sp, r7
    4002:	bd80      	pop	{r7, pc}
    4004:	000020d5 	.word	0x000020d5
    4008:	20003c7c 	.word	0x20003c7c
    400c:	20003c4c 	.word	0x20003c4c
    4010:	0000228d 	.word	0x0000228d
    4014:	20003c60 	.word	0x20003c60
    4018:	20003c74 	.word	0x20003c74
    401c:	20003c78 	.word	0x20003c78
    4020:	0000249d 	.word	0x0000249d
    4024:	000020f5 	.word	0x000020f5

00004028 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4028:	b580      	push	{r7, lr}
    402a:	b084      	sub	sp, #16
    402c:	af00      	add	r7, sp, #0
    402e:	1c02      	adds	r2, r0, #0
    4030:	1dfb      	adds	r3, r7, #7
    4032:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4034:	230f      	movs	r3, #15
    4036:	18fb      	adds	r3, r7, r3
    4038:	1dfa      	adds	r2, r7, #7
    403a:	7812      	ldrb	r2, [r2, #0]
    403c:	09d2      	lsrs	r2, r2, #7
    403e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4040:	230e      	movs	r3, #14
    4042:	18fb      	adds	r3, r7, r3
    4044:	1dfa      	adds	r2, r7, #7
    4046:	7812      	ldrb	r2, [r2, #0]
    4048:	0952      	lsrs	r2, r2, #5
    404a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    404c:	4b0d      	ldr	r3, [pc, #52]	; (4084 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    404e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4050:	230f      	movs	r3, #15
    4052:	18fb      	adds	r3, r7, r3
    4054:	781b      	ldrb	r3, [r3, #0]
    4056:	2b00      	cmp	r3, #0
    4058:	d10f      	bne.n	407a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    405a:	230f      	movs	r3, #15
    405c:	18fb      	adds	r3, r7, r3
    405e:	781b      	ldrb	r3, [r3, #0]
    4060:	009b      	lsls	r3, r3, #2
    4062:	2210      	movs	r2, #16
    4064:	4694      	mov	ip, r2
    4066:	44bc      	add	ip, r7
    4068:	4463      	add	r3, ip
    406a:	3b08      	subs	r3, #8
    406c:	681a      	ldr	r2, [r3, #0]
    406e:	230e      	movs	r3, #14
    4070:	18fb      	adds	r3, r7, r3
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	01db      	lsls	r3, r3, #7
    4076:	18d3      	adds	r3, r2, r3
    4078:	e000      	b.n	407c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    407a:	2300      	movs	r3, #0
	}
}
    407c:	1c18      	adds	r0, r3, #0
    407e:	46bd      	mov	sp, r7
    4080:	b004      	add	sp, #16
    4082:	bd80      	pop	{r7, pc}
    4084:	41004400 	.word	0x41004400

00004088 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4088:	b580      	push	{r7, lr}
    408a:	b082      	sub	sp, #8
    408c:	af00      	add	r7, sp, #0
    408e:	1c02      	adds	r2, r0, #0
    4090:	1dfb      	adds	r3, r7, #7
    4092:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4094:	1dfb      	adds	r3, r7, #7
    4096:	781b      	ldrb	r3, [r3, #0]
    4098:	1c18      	adds	r0, r3, #0
    409a:	4b03      	ldr	r3, [pc, #12]	; (40a8 <port_get_group_from_gpio_pin+0x20>)
    409c:	4798      	blx	r3
    409e:	1c03      	adds	r3, r0, #0
}
    40a0:	1c18      	adds	r0, r3, #0
    40a2:	46bd      	mov	sp, r7
    40a4:	b002      	add	sp, #8
    40a6:	bd80      	pop	{r7, pc}
    40a8:	00004029 	.word	0x00004029

000040ac <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	2200      	movs	r2, #0
    40b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    40ba:	687b      	ldr	r3, [r7, #4]
    40bc:	2201      	movs	r2, #1
    40be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	2200      	movs	r2, #0
    40c4:	709a      	strb	r2, [r3, #2]
}
    40c6:	46bd      	mov	sp, r7
    40c8:	b002      	add	sp, #8
    40ca:	bd80      	pop	{r7, pc}

000040cc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b084      	sub	sp, #16
    40d0:	af00      	add	r7, sp, #0
    40d2:	1c02      	adds	r2, r0, #0
    40d4:	1dfb      	adds	r3, r7, #7
    40d6:	701a      	strb	r2, [r3, #0]
    40d8:	1dbb      	adds	r3, r7, #6
    40da:	1c0a      	adds	r2, r1, #0
    40dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    40de:	1dfb      	adds	r3, r7, #7
    40e0:	781b      	ldrb	r3, [r3, #0]
    40e2:	1c18      	adds	r0, r3, #0
    40e4:	4b0c      	ldr	r3, [pc, #48]	; (4118 <port_pin_set_output_level+0x4c>)
    40e6:	4798      	blx	r3
    40e8:	1c03      	adds	r3, r0, #0
    40ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    40ec:	1dfb      	adds	r3, r7, #7
    40ee:	781b      	ldrb	r3, [r3, #0]
    40f0:	221f      	movs	r2, #31
    40f2:	4013      	ands	r3, r2
    40f4:	2201      	movs	r2, #1
    40f6:	409a      	lsls	r2, r3
    40f8:	1c13      	adds	r3, r2, #0
    40fa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    40fc:	1dbb      	adds	r3, r7, #6
    40fe:	781b      	ldrb	r3, [r3, #0]
    4100:	2b00      	cmp	r3, #0
    4102:	d003      	beq.n	410c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4104:	68fb      	ldr	r3, [r7, #12]
    4106:	68ba      	ldr	r2, [r7, #8]
    4108:	619a      	str	r2, [r3, #24]
    410a:	e002      	b.n	4112 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    410c:	68fb      	ldr	r3, [r7, #12]
    410e:	68ba      	ldr	r2, [r7, #8]
    4110:	615a      	str	r2, [r3, #20]
	}
}
    4112:	46bd      	mov	sp, r7
    4114:	b004      	add	sp, #16
    4116:	bd80      	pop	{r7, pc}
    4118:	00004089 	.word	0x00004089

0000411c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    411c:	b580      	push	{r7, lr}
    411e:	b082      	sub	sp, #8
    4120:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4122:	1d3b      	adds	r3, r7, #4
    4124:	1c18      	adds	r0, r3, #0
    4126:	4b0e      	ldr	r3, [pc, #56]	; (4160 <system_board_init+0x44>)
    4128:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    412a:	1d3b      	adds	r3, r7, #4
    412c:	2201      	movs	r2, #1
    412e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4130:	1d3b      	adds	r3, r7, #4
    4132:	203e      	movs	r0, #62	; 0x3e
    4134:	1c19      	adds	r1, r3, #0
    4136:	4b0b      	ldr	r3, [pc, #44]	; (4164 <system_board_init+0x48>)
    4138:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    413a:	203e      	movs	r0, #62	; 0x3e
    413c:	2101      	movs	r1, #1
    413e:	4b0a      	ldr	r3, [pc, #40]	; (4168 <system_board_init+0x4c>)
    4140:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4142:	1d3b      	adds	r3, r7, #4
    4144:	2200      	movs	r2, #0
    4146:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4148:	1d3b      	adds	r3, r7, #4
    414a:	2201      	movs	r2, #1
    414c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    414e:	1d3b      	adds	r3, r7, #4
    4150:	200f      	movs	r0, #15
    4152:	1c19      	adds	r1, r3, #0
    4154:	4b03      	ldr	r3, [pc, #12]	; (4164 <system_board_init+0x48>)
    4156:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    4158:	46bd      	mov	sp, r7
    415a:	b002      	add	sp, #8
    415c:	bd80      	pop	{r7, pc}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	000040ad 	.word	0x000040ad
    4164:	00004195 	.word	0x00004195
    4168:	000040cd 	.word	0x000040cd

0000416c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    416c:	b580      	push	{r7, lr}
    416e:	b082      	sub	sp, #8
    4170:	af00      	add	r7, sp, #0
    4172:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	2280      	movs	r2, #128	; 0x80
    4178:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	2200      	movs	r2, #0
    417e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	2201      	movs	r2, #1
    4184:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4186:	687b      	ldr	r3, [r7, #4]
    4188:	2200      	movs	r2, #0
    418a:	70da      	strb	r2, [r3, #3]
}
    418c:	46bd      	mov	sp, r7
    418e:	b002      	add	sp, #8
    4190:	bd80      	pop	{r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)

00004194 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4194:	b580      	push	{r7, lr}
    4196:	b084      	sub	sp, #16
    4198:	af00      	add	r7, sp, #0
    419a:	1c02      	adds	r2, r0, #0
    419c:	6039      	str	r1, [r7, #0]
    419e:	1dfb      	adds	r3, r7, #7
    41a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    41a2:	230c      	movs	r3, #12
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	1c18      	adds	r0, r3, #0
    41a8:	4b0f      	ldr	r3, [pc, #60]	; (41e8 <port_pin_set_config+0x54>)
    41aa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    41ac:	230c      	movs	r3, #12
    41ae:	18fb      	adds	r3, r7, r3
    41b0:	2280      	movs	r2, #128	; 0x80
    41b2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41b4:	683b      	ldr	r3, [r7, #0]
    41b6:	781a      	ldrb	r2, [r3, #0]
    41b8:	230c      	movs	r3, #12
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41be:	683b      	ldr	r3, [r7, #0]
    41c0:	785a      	ldrb	r2, [r3, #1]
    41c2:	230c      	movs	r3, #12
    41c4:	18fb      	adds	r3, r7, r3
    41c6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41c8:	683b      	ldr	r3, [r7, #0]
    41ca:	789a      	ldrb	r2, [r3, #2]
    41cc:	230c      	movs	r3, #12
    41ce:	18fb      	adds	r3, r7, r3
    41d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41d2:	1dfb      	adds	r3, r7, #7
    41d4:	781a      	ldrb	r2, [r3, #0]
    41d6:	230c      	movs	r3, #12
    41d8:	18fb      	adds	r3, r7, r3
    41da:	1c10      	adds	r0, r2, #0
    41dc:	1c19      	adds	r1, r3, #0
    41de:	4b03      	ldr	r3, [pc, #12]	; (41ec <port_pin_set_config+0x58>)
    41e0:	4798      	blx	r3
}
    41e2:	46bd      	mov	sp, r7
    41e4:	b004      	add	sp, #16
    41e6:	bd80      	pop	{r7, pc}
    41e8:	0000416d 	.word	0x0000416d
    41ec:	00004c05 	.word	0x00004c05

000041f0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    41f0:	b580      	push	{r7, lr}
    41f2:	b082      	sub	sp, #8
    41f4:	af00      	add	r7, sp, #0
    41f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	2201      	movs	r2, #1
    41fc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    41fe:	687b      	ldr	r3, [r7, #4]
    4200:	2200      	movs	r2, #0
    4202:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4204:	687b      	ldr	r3, [r7, #4]
    4206:	2206      	movs	r2, #6
    4208:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    420a:	687b      	ldr	r3, [r7, #4]
    420c:	2200      	movs	r2, #0
    420e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	2200      	movs	r2, #0
    4214:	725a      	strb	r2, [r3, #9]
}
    4216:	46bd      	mov	sp, r7
    4218:	b002      	add	sp, #8
    421a:	bd80      	pop	{r7, pc}

0000421c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    421c:	b580      	push	{r7, lr}
    421e:	b082      	sub	sp, #8
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    4224:	687b      	ldr	r3, [r7, #4]
    4226:	2203      	movs	r2, #3
    4228:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	2200      	movs	r2, #0
    422e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	2201      	movs	r2, #1
    4234:	709a      	strb	r2, [r3, #2]
}
    4236:	46bd      	mov	sp, r7
    4238:	b002      	add	sp, #8
    423a:	bd80      	pop	{r7, pc}

0000423c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    423c:	b580      	push	{r7, lr}
    423e:	b082      	sub	sp, #8
    4240:	af00      	add	r7, sp, #0
    4242:	1c02      	adds	r2, r0, #0
    4244:	1dfb      	adds	r3, r7, #7
    4246:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4248:	4a03      	ldr	r2, [pc, #12]	; (4258 <system_cpu_clock_set_divider+0x1c>)
    424a:	1dfb      	adds	r3, r7, #7
    424c:	781b      	ldrb	r3, [r3, #0]
    424e:	7213      	strb	r3, [r2, #8]
}
    4250:	46bd      	mov	sp, r7
    4252:	b002      	add	sp, #8
    4254:	bd80      	pop	{r7, pc}
    4256:	46c0      	nop			; (mov r8, r8)
    4258:	40000400 	.word	0x40000400

0000425c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    425c:	b580      	push	{r7, lr}
    425e:	b082      	sub	sp, #8
    4260:	af00      	add	r7, sp, #0
    4262:	1c02      	adds	r2, r0, #0
    4264:	1dfb      	adds	r3, r7, #7
    4266:	701a      	strb	r2, [r3, #0]
    4268:	1dbb      	adds	r3, r7, #6
    426a:	1c0a      	adds	r2, r1, #0
    426c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    426e:	1dfb      	adds	r3, r7, #7
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b01      	cmp	r3, #1
    4274:	d008      	beq.n	4288 <system_apb_clock_set_divider+0x2c>
    4276:	2b02      	cmp	r3, #2
    4278:	d00b      	beq.n	4292 <system_apb_clock_set_divider+0x36>
    427a:	2b00      	cmp	r3, #0
    427c:	d10e      	bne.n	429c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    427e:	4a0b      	ldr	r2, [pc, #44]	; (42ac <system_apb_clock_set_divider+0x50>)
    4280:	1dbb      	adds	r3, r7, #6
    4282:	781b      	ldrb	r3, [r3, #0]
    4284:	7253      	strb	r3, [r2, #9]
			break;
    4286:	e00b      	b.n	42a0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4288:	4a08      	ldr	r2, [pc, #32]	; (42ac <system_apb_clock_set_divider+0x50>)
    428a:	1dbb      	adds	r3, r7, #6
    428c:	781b      	ldrb	r3, [r3, #0]
    428e:	7293      	strb	r3, [r2, #10]
			break;
    4290:	e006      	b.n	42a0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4292:	4a06      	ldr	r2, [pc, #24]	; (42ac <system_apb_clock_set_divider+0x50>)
    4294:	1dbb      	adds	r3, r7, #6
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	72d3      	strb	r3, [r2, #11]
			break;
    429a:	e001      	b.n	42a0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    429c:	2317      	movs	r3, #23
    429e:	e000      	b.n	42a2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    42a0:	2300      	movs	r3, #0
}
    42a2:	1c18      	adds	r0, r3, #0
    42a4:	46bd      	mov	sp, r7
    42a6:	b002      	add	sp, #8
    42a8:	bd80      	pop	{r7, pc}
    42aa:	46c0      	nop			; (mov r8, r8)
    42ac:	40000400 	.word	0x40000400

000042b0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    42b0:	b580      	push	{r7, lr}
    42b2:	b082      	sub	sp, #8
    42b4:	af00      	add	r7, sp, #0
    42b6:	1c02      	adds	r2, r0, #0
    42b8:	1dfb      	adds	r3, r7, #7
    42ba:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    42bc:	4b08      	ldr	r3, [pc, #32]	; (42e0 <system_flash_set_waitstates+0x30>)
    42be:	1dfa      	adds	r2, r7, #7
    42c0:	7812      	ldrb	r2, [r2, #0]
    42c2:	210f      	movs	r1, #15
    42c4:	400a      	ands	r2, r1
    42c6:	b2d2      	uxtb	r2, r2
    42c8:	210f      	movs	r1, #15
    42ca:	400a      	ands	r2, r1
    42cc:	0052      	lsls	r2, r2, #1
    42ce:	6859      	ldr	r1, [r3, #4]
    42d0:	201e      	movs	r0, #30
    42d2:	4381      	bics	r1, r0
    42d4:	430a      	orrs	r2, r1
    42d6:	605a      	str	r2, [r3, #4]
}
    42d8:	46bd      	mov	sp, r7
    42da:	b002      	add	sp, #8
    42dc:	bd80      	pop	{r7, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	41004000 	.word	0x41004000

000042e4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    42e8:	46c0      	nop			; (mov r8, r8)
    42ea:	4b03      	ldr	r3, [pc, #12]	; (42f8 <_system_dfll_wait_for_sync+0x14>)
    42ec:	68db      	ldr	r3, [r3, #12]
    42ee:	2210      	movs	r2, #16
    42f0:	4013      	ands	r3, r2
    42f2:	d0fa      	beq.n	42ea <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    42f4:	46bd      	mov	sp, r7
    42f6:	bd80      	pop	{r7, pc}
    42f8:	40000800 	.word	0x40000800

000042fc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    42fc:	b580      	push	{r7, lr}
    42fe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4300:	4a0c      	ldr	r2, [pc, #48]	; (4334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4302:	4b0d      	ldr	r3, [pc, #52]	; (4338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	b29b      	uxth	r3, r3
    4308:	2180      	movs	r1, #128	; 0x80
    430a:	438b      	bics	r3, r1
    430c:	b29b      	uxth	r3, r3
    430e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4310:	4b0a      	ldr	r3, [pc, #40]	; (433c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4312:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4314:	4a07      	ldr	r2, [pc, #28]	; (4334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4316:	4b08      	ldr	r3, [pc, #32]	; (4338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4318:	689b      	ldr	r3, [r3, #8]
    431a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    431c:	4a05      	ldr	r2, [pc, #20]	; (4334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    431e:	4b06      	ldr	r3, [pc, #24]	; (4338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4320:	685b      	ldr	r3, [r3, #4]
    4322:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4324:	4a03      	ldr	r2, [pc, #12]	; (4334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4326:	4b04      	ldr	r3, [pc, #16]	; (4338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	b29b      	uxth	r3, r3
    432c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    432e:	46bd      	mov	sp, r7
    4330:	bd80      	pop	{r7, pc}
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	40000800 	.word	0x40000800
    4338:	20003c84 	.word	0x20003c84
    433c:	000042e5 	.word	0x000042e5

00004340 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4340:	b580      	push	{r7, lr}
    4342:	b082      	sub	sp, #8
    4344:	af00      	add	r7, sp, #0
    4346:	1c02      	adds	r2, r0, #0
    4348:	1dfb      	adds	r3, r7, #7
    434a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    434c:	1dfb      	adds	r3, r7, #7
    434e:	781b      	ldrb	r3, [r3, #0]
    4350:	2b08      	cmp	r3, #8
    4352:	d842      	bhi.n	43da <system_clock_source_get_hz+0x9a>
    4354:	009a      	lsls	r2, r3, #2
    4356:	4b23      	ldr	r3, [pc, #140]	; (43e4 <system_clock_source_get_hz+0xa4>)
    4358:	18d3      	adds	r3, r2, r3
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    435e:	4b22      	ldr	r3, [pc, #136]	; (43e8 <system_clock_source_get_hz+0xa8>)
    4360:	691b      	ldr	r3, [r3, #16]
    4362:	e03b      	b.n	43dc <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4364:	4b21      	ldr	r3, [pc, #132]	; (43ec <system_clock_source_get_hz+0xac>)
    4366:	6a1b      	ldr	r3, [r3, #32]
    4368:	0a1b      	lsrs	r3, r3, #8
    436a:	1c1a      	adds	r2, r3, #0
    436c:	2303      	movs	r3, #3
    436e:	4013      	ands	r3, r2
    4370:	b2db      	uxtb	r3, r3
    4372:	1c1a      	adds	r2, r3, #0
    4374:	4b1e      	ldr	r3, [pc, #120]	; (43f0 <system_clock_source_get_hz+0xb0>)
    4376:	40d3      	lsrs	r3, r2
    4378:	e030      	b.n	43dc <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    437a:	2380      	movs	r3, #128	; 0x80
    437c:	021b      	lsls	r3, r3, #8
    437e:	e02d      	b.n	43dc <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4380:	2380      	movs	r3, #128	; 0x80
    4382:	021b      	lsls	r3, r3, #8
    4384:	e02a      	b.n	43dc <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4386:	4b18      	ldr	r3, [pc, #96]	; (43e8 <system_clock_source_get_hz+0xa8>)
    4388:	695b      	ldr	r3, [r3, #20]
    438a:	e027      	b.n	43dc <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    438c:	4b16      	ldr	r3, [pc, #88]	; (43e8 <system_clock_source_get_hz+0xa8>)
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	2202      	movs	r2, #2
    4392:	4013      	ands	r3, r2
    4394:	d101      	bne.n	439a <system_clock_source_get_hz+0x5a>
			return 0;
    4396:	2300      	movs	r3, #0
    4398:	e020      	b.n	43dc <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    439a:	4b16      	ldr	r3, [pc, #88]	; (43f4 <system_clock_source_get_hz+0xb4>)
    439c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    439e:	4b12      	ldr	r3, [pc, #72]	; (43e8 <system_clock_source_get_hz+0xa8>)
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	2204      	movs	r2, #4
    43a4:	4013      	ands	r3, r2
    43a6:	d009      	beq.n	43bc <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    43a8:	2000      	movs	r0, #0
    43aa:	4b13      	ldr	r3, [pc, #76]	; (43f8 <system_clock_source_get_hz+0xb8>)
    43ac:	4798      	blx	r3
    43ae:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    43b0:	4b0d      	ldr	r3, [pc, #52]	; (43e8 <system_clock_source_get_hz+0xa8>)
    43b2:	689b      	ldr	r3, [r3, #8]
    43b4:	041b      	lsls	r3, r3, #16
    43b6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    43b8:	4353      	muls	r3, r2
    43ba:	e00f      	b.n	43dc <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    43bc:	4b0f      	ldr	r3, [pc, #60]	; (43fc <system_clock_source_get_hz+0xbc>)
    43be:	e00d      	b.n	43dc <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    43c0:	4a0a      	ldr	r2, [pc, #40]	; (43ec <system_clock_source_get_hz+0xac>)
    43c2:	2350      	movs	r3, #80	; 0x50
    43c4:	5cd3      	ldrb	r3, [r2, r3]
    43c6:	b2db      	uxtb	r3, r3
    43c8:	1c1a      	adds	r2, r3, #0
    43ca:	2304      	movs	r3, #4
    43cc:	4013      	ands	r3, r2
    43ce:	d101      	bne.n	43d4 <system_clock_source_get_hz+0x94>
			return 0;
    43d0:	2300      	movs	r3, #0
    43d2:	e003      	b.n	43dc <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    43d4:	4b04      	ldr	r3, [pc, #16]	; (43e8 <system_clock_source_get_hz+0xa8>)
    43d6:	68db      	ldr	r3, [r3, #12]
    43d8:	e000      	b.n	43dc <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    43da:	2300      	movs	r3, #0
	}
}
    43dc:	1c18      	adds	r0, r3, #0
    43de:	46bd      	mov	sp, r7
    43e0:	b002      	add	sp, #8
    43e2:	bd80      	pop	{r7, pc}
    43e4:	000073e8 	.word	0x000073e8
    43e8:	20003c84 	.word	0x20003c84
    43ec:	40000800 	.word	0x40000800
    43f0:	007a1200 	.word	0x007a1200
    43f4:	000042e5 	.word	0x000042e5
    43f8:	00004a3d 	.word	0x00004a3d
    43fc:	02dc6c00 	.word	0x02dc6c00

00004400 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4400:	b580      	push	{r7, lr}
    4402:	b084      	sub	sp, #16
    4404:	af00      	add	r7, sp, #0
    4406:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4408:	4b1a      	ldr	r3, [pc, #104]	; (4474 <system_clock_source_osc8m_set_config+0x74>)
    440a:	6a1b      	ldr	r3, [r3, #32]
    440c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	1c1a      	adds	r2, r3, #0
    4414:	2303      	movs	r3, #3
    4416:	4013      	ands	r3, r2
    4418:	b2da      	uxtb	r2, r3
    441a:	230d      	movs	r3, #13
    441c:	18fb      	adds	r3, r7, r3
    441e:	2103      	movs	r1, #3
    4420:	400a      	ands	r2, r1
    4422:	1c10      	adds	r0, r2, #0
    4424:	781a      	ldrb	r2, [r3, #0]
    4426:	2103      	movs	r1, #3
    4428:	438a      	bics	r2, r1
    442a:	1c11      	adds	r1, r2, #0
    442c:	1c02      	adds	r2, r0, #0
    442e:	430a      	orrs	r2, r1
    4430:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	789a      	ldrb	r2, [r3, #2]
    4436:	230c      	movs	r3, #12
    4438:	18fb      	adds	r3, r7, r3
    443a:	01d0      	lsls	r0, r2, #7
    443c:	781a      	ldrb	r2, [r3, #0]
    443e:	217f      	movs	r1, #127	; 0x7f
    4440:	400a      	ands	r2, r1
    4442:	1c11      	adds	r1, r2, #0
    4444:	1c02      	adds	r2, r0, #0
    4446:	430a      	orrs	r2, r1
    4448:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    444a:	687b      	ldr	r3, [r7, #4]
    444c:	785a      	ldrb	r2, [r3, #1]
    444e:	230c      	movs	r3, #12
    4450:	18fb      	adds	r3, r7, r3
    4452:	2101      	movs	r1, #1
    4454:	400a      	ands	r2, r1
    4456:	0190      	lsls	r0, r2, #6
    4458:	781a      	ldrb	r2, [r3, #0]
    445a:	2140      	movs	r1, #64	; 0x40
    445c:	438a      	bics	r2, r1
    445e:	1c11      	adds	r1, r2, #0
    4460:	1c02      	adds	r2, r0, #0
    4462:	430a      	orrs	r2, r1
    4464:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4466:	4b03      	ldr	r3, [pc, #12]	; (4474 <system_clock_source_osc8m_set_config+0x74>)
    4468:	68fa      	ldr	r2, [r7, #12]
    446a:	621a      	str	r2, [r3, #32]
}
    446c:	46bd      	mov	sp, r7
    446e:	b004      	add	sp, #16
    4470:	bd80      	pop	{r7, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	40000800 	.word	0x40000800

00004478 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4478:	b580      	push	{r7, lr}
    447a:	b082      	sub	sp, #8
    447c:	af00      	add	r7, sp, #0
    447e:	1c02      	adds	r2, r0, #0
    4480:	1dfb      	adds	r3, r7, #7
    4482:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4484:	1dfb      	adds	r3, r7, #7
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	2b08      	cmp	r3, #8
    448a:	d83b      	bhi.n	4504 <system_clock_source_enable+0x8c>
    448c:	009a      	lsls	r2, r3, #2
    448e:	4b21      	ldr	r3, [pc, #132]	; (4514 <system_clock_source_enable+0x9c>)
    4490:	18d3      	adds	r3, r2, r3
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4496:	4b20      	ldr	r3, [pc, #128]	; (4518 <system_clock_source_enable+0xa0>)
    4498:	4a1f      	ldr	r2, [pc, #124]	; (4518 <system_clock_source_enable+0xa0>)
    449a:	6a12      	ldr	r2, [r2, #32]
    449c:	2102      	movs	r1, #2
    449e:	430a      	orrs	r2, r1
    44a0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    44a2:	2300      	movs	r3, #0
    44a4:	e031      	b.n	450a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    44a6:	4b1c      	ldr	r3, [pc, #112]	; (4518 <system_clock_source_enable+0xa0>)
    44a8:	4a1b      	ldr	r2, [pc, #108]	; (4518 <system_clock_source_enable+0xa0>)
    44aa:	6992      	ldr	r2, [r2, #24]
    44ac:	2102      	movs	r1, #2
    44ae:	430a      	orrs	r2, r1
    44b0:	619a      	str	r2, [r3, #24]
		break;
    44b2:	e029      	b.n	4508 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    44b4:	4a18      	ldr	r2, [pc, #96]	; (4518 <system_clock_source_enable+0xa0>)
    44b6:	4b18      	ldr	r3, [pc, #96]	; (4518 <system_clock_source_enable+0xa0>)
    44b8:	8a1b      	ldrh	r3, [r3, #16]
    44ba:	b29b      	uxth	r3, r3
    44bc:	2102      	movs	r1, #2
    44be:	430b      	orrs	r3, r1
    44c0:	b29b      	uxth	r3, r3
    44c2:	8213      	strh	r3, [r2, #16]
		break;
    44c4:	e020      	b.n	4508 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    44c6:	4a14      	ldr	r2, [pc, #80]	; (4518 <system_clock_source_enable+0xa0>)
    44c8:	4b13      	ldr	r3, [pc, #76]	; (4518 <system_clock_source_enable+0xa0>)
    44ca:	8a9b      	ldrh	r3, [r3, #20]
    44cc:	b29b      	uxth	r3, r3
    44ce:	2102      	movs	r1, #2
    44d0:	430b      	orrs	r3, r1
    44d2:	b29b      	uxth	r3, r3
    44d4:	8293      	strh	r3, [r2, #20]
		break;
    44d6:	e017      	b.n	4508 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    44d8:	4b10      	ldr	r3, [pc, #64]	; (451c <system_clock_source_enable+0xa4>)
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	2202      	movs	r2, #2
    44de:	431a      	orrs	r2, r3
    44e0:	4b0e      	ldr	r3, [pc, #56]	; (451c <system_clock_source_enable+0xa4>)
    44e2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    44e4:	4b0e      	ldr	r3, [pc, #56]	; (4520 <system_clock_source_enable+0xa8>)
    44e6:	4798      	blx	r3
		break;
    44e8:	e00e      	b.n	4508 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    44ea:	4a0b      	ldr	r2, [pc, #44]	; (4518 <system_clock_source_enable+0xa0>)
    44ec:	490a      	ldr	r1, [pc, #40]	; (4518 <system_clock_source_enable+0xa0>)
    44ee:	2344      	movs	r3, #68	; 0x44
    44f0:	5ccb      	ldrb	r3, [r1, r3]
    44f2:	b2db      	uxtb	r3, r3
    44f4:	2102      	movs	r1, #2
    44f6:	430b      	orrs	r3, r1
    44f8:	b2d9      	uxtb	r1, r3
    44fa:	2344      	movs	r3, #68	; 0x44
    44fc:	54d1      	strb	r1, [r2, r3]
		break;
    44fe:	e003      	b.n	4508 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4500:	2300      	movs	r3, #0
    4502:	e002      	b.n	450a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4504:	2317      	movs	r3, #23
    4506:	e000      	b.n	450a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4508:	2300      	movs	r3, #0
}
    450a:	1c18      	adds	r0, r3, #0
    450c:	46bd      	mov	sp, r7
    450e:	b002      	add	sp, #8
    4510:	bd80      	pop	{r7, pc}
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	0000740c 	.word	0x0000740c
    4518:	40000800 	.word	0x40000800
    451c:	20003c84 	.word	0x20003c84
    4520:	000042fd 	.word	0x000042fd

00004524 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    4524:	b580      	push	{r7, lr}
    4526:	b09c      	sub	sp, #112	; 0x70
    4528:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    452a:	4b24      	ldr	r3, [pc, #144]	; (45bc <system_clock_init+0x98>)
    452c:	22c2      	movs	r2, #194	; 0xc2
    452e:	00d2      	lsls	r2, r2, #3
    4530:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4532:	2000      	movs	r0, #0
    4534:	4b22      	ldr	r3, [pc, #136]	; (45c0 <system_clock_init+0x9c>)
    4536:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4538:	236c      	movs	r3, #108	; 0x6c
    453a:	18fb      	adds	r3, r7, r3
    453c:	1c18      	adds	r0, r3, #0
    453e:	4b21      	ldr	r3, [pc, #132]	; (45c4 <system_clock_init+0xa0>)
    4540:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4542:	236c      	movs	r3, #108	; 0x6c
    4544:	18fb      	adds	r3, r7, r3
    4546:	2200      	movs	r2, #0
    4548:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    454a:	236c      	movs	r3, #108	; 0x6c
    454c:	18fb      	adds	r3, r7, r3
    454e:	2201      	movs	r2, #1
    4550:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4552:	236c      	movs	r3, #108	; 0x6c
    4554:	18fb      	adds	r3, r7, r3
    4556:	2200      	movs	r2, #0
    4558:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    455a:	236c      	movs	r3, #108	; 0x6c
    455c:	18fb      	adds	r3, r7, r3
    455e:	1c18      	adds	r0, r3, #0
    4560:	4b19      	ldr	r3, [pc, #100]	; (45c8 <system_clock_init+0xa4>)
    4562:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4564:	2006      	movs	r0, #6
    4566:	4b19      	ldr	r3, [pc, #100]	; (45cc <system_clock_init+0xa8>)
    4568:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    456a:	4b19      	ldr	r3, [pc, #100]	; (45d0 <system_clock_init+0xac>)
    456c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    456e:	2000      	movs	r0, #0
    4570:	4b18      	ldr	r3, [pc, #96]	; (45d4 <system_clock_init+0xb0>)
    4572:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4574:	2000      	movs	r0, #0
    4576:	2100      	movs	r1, #0
    4578:	4b17      	ldr	r3, [pc, #92]	; (45d8 <system_clock_init+0xb4>)
    457a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    457c:	2001      	movs	r0, #1
    457e:	2100      	movs	r1, #0
    4580:	4b15      	ldr	r3, [pc, #84]	; (45d8 <system_clock_init+0xb4>)
    4582:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4584:	1c3b      	adds	r3, r7, #0
    4586:	1c18      	adds	r0, r3, #0
    4588:	4b14      	ldr	r3, [pc, #80]	; (45dc <system_clock_init+0xb8>)
    458a:	4798      	blx	r3
    458c:	1c3b      	adds	r3, r7, #0
    458e:	2206      	movs	r2, #6
    4590:	701a      	strb	r2, [r3, #0]
    4592:	1c3b      	adds	r3, r7, #0
    4594:	2201      	movs	r2, #1
    4596:	605a      	str	r2, [r3, #4]
    4598:	1c3b      	adds	r3, r7, #0
    459a:	2200      	movs	r2, #0
    459c:	721a      	strb	r2, [r3, #8]
    459e:	1c3b      	adds	r3, r7, #0
    45a0:	2200      	movs	r2, #0
    45a2:	725a      	strb	r2, [r3, #9]
    45a4:	1c3b      	adds	r3, r7, #0
    45a6:	2000      	movs	r0, #0
    45a8:	1c19      	adds	r1, r3, #0
    45aa:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <system_clock_init+0xbc>)
    45ac:	4798      	blx	r3
    45ae:	2000      	movs	r0, #0
    45b0:	4b0c      	ldr	r3, [pc, #48]	; (45e4 <system_clock_init+0xc0>)
    45b2:	4798      	blx	r3
#endif
}
    45b4:	46bd      	mov	sp, r7
    45b6:	b01c      	add	sp, #112	; 0x70
    45b8:	bd80      	pop	{r7, pc}
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	40000800 	.word	0x40000800
    45c0:	000042b1 	.word	0x000042b1
    45c4:	0000421d 	.word	0x0000421d
    45c8:	00004401 	.word	0x00004401
    45cc:	00004479 	.word	0x00004479
    45d0:	00004689 	.word	0x00004689
    45d4:	0000423d 	.word	0x0000423d
    45d8:	0000425d 	.word	0x0000425d
    45dc:	000041f1 	.word	0x000041f1
    45e0:	000046b9 	.word	0x000046b9
    45e4:	000047d9 	.word	0x000047d9

000045e8 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    45e8:	b580      	push	{r7, lr}
    45ea:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    45ec:	4b06      	ldr	r3, [pc, #24]	; (4608 <system_gclk_is_syncing+0x20>)
    45ee:	785b      	ldrb	r3, [r3, #1]
    45f0:	b2db      	uxtb	r3, r3
    45f2:	b2db      	uxtb	r3, r3
    45f4:	b25b      	sxtb	r3, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	da01      	bge.n	45fe <system_gclk_is_syncing+0x16>
		return true;
    45fa:	2301      	movs	r3, #1
    45fc:	e000      	b.n	4600 <system_gclk_is_syncing+0x18>
	}

	return false;
    45fe:	2300      	movs	r3, #0
}
    4600:	1c18      	adds	r0, r3, #0
    4602:	46bd      	mov	sp, r7
    4604:	bd80      	pop	{r7, pc}
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	40000c00 	.word	0x40000c00

0000460c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    460c:	b580      	push	{r7, lr}
    460e:	b082      	sub	sp, #8
    4610:	af00      	add	r7, sp, #0
    4612:	1c02      	adds	r2, r0, #0
    4614:	6039      	str	r1, [r7, #0]
    4616:	1dfb      	adds	r3, r7, #7
    4618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    461a:	1dfb      	adds	r3, r7, #7
    461c:	781b      	ldrb	r3, [r3, #0]
    461e:	2b01      	cmp	r3, #1
    4620:	d00a      	beq.n	4638 <system_apb_clock_set_mask+0x2c>
    4622:	2b02      	cmp	r3, #2
    4624:	d00f      	beq.n	4646 <system_apb_clock_set_mask+0x3a>
    4626:	2b00      	cmp	r3, #0
    4628:	d114      	bne.n	4654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    462a:	4b0e      	ldr	r3, [pc, #56]	; (4664 <system_apb_clock_set_mask+0x58>)
    462c:	4a0d      	ldr	r2, [pc, #52]	; (4664 <system_apb_clock_set_mask+0x58>)
    462e:	6991      	ldr	r1, [r2, #24]
    4630:	683a      	ldr	r2, [r7, #0]
    4632:	430a      	orrs	r2, r1
    4634:	619a      	str	r2, [r3, #24]
			break;
    4636:	e00f      	b.n	4658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4638:	4b0a      	ldr	r3, [pc, #40]	; (4664 <system_apb_clock_set_mask+0x58>)
    463a:	4a0a      	ldr	r2, [pc, #40]	; (4664 <system_apb_clock_set_mask+0x58>)
    463c:	69d1      	ldr	r1, [r2, #28]
    463e:	683a      	ldr	r2, [r7, #0]
    4640:	430a      	orrs	r2, r1
    4642:	61da      	str	r2, [r3, #28]
			break;
    4644:	e008      	b.n	4658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4646:	4b07      	ldr	r3, [pc, #28]	; (4664 <system_apb_clock_set_mask+0x58>)
    4648:	4a06      	ldr	r2, [pc, #24]	; (4664 <system_apb_clock_set_mask+0x58>)
    464a:	6a11      	ldr	r1, [r2, #32]
    464c:	683a      	ldr	r2, [r7, #0]
    464e:	430a      	orrs	r2, r1
    4650:	621a      	str	r2, [r3, #32]
			break;
    4652:	e001      	b.n	4658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4654:	2317      	movs	r3, #23
    4656:	e000      	b.n	465a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4658:	2300      	movs	r3, #0
}
    465a:	1c18      	adds	r0, r3, #0
    465c:	46bd      	mov	sp, r7
    465e:	b002      	add	sp, #8
    4660:	bd80      	pop	{r7, pc}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	40000400 	.word	0x40000400

00004668 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    4668:	b580      	push	{r7, lr}
    466a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    466c:	4b01      	ldr	r3, [pc, #4]	; (4674 <system_interrupt_enter_critical_section+0xc>)
    466e:	4798      	blx	r3
}
    4670:	46bd      	mov	sp, r7
    4672:	bd80      	pop	{r7, pc}
    4674:	00000519 	.word	0x00000519

00004678 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    4678:	b580      	push	{r7, lr}
    467a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    467c:	4b01      	ldr	r3, [pc, #4]	; (4684 <system_interrupt_leave_critical_section+0xc>)
    467e:	4798      	blx	r3
}
    4680:	46bd      	mov	sp, r7
    4682:	bd80      	pop	{r7, pc}
    4684:	00000569 	.word	0x00000569

00004688 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    4688:	b580      	push	{r7, lr}
    468a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    468c:	2000      	movs	r0, #0
    468e:	2108      	movs	r1, #8
    4690:	4b07      	ldr	r3, [pc, #28]	; (46b0 <system_gclk_init+0x28>)
    4692:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4694:	4b07      	ldr	r3, [pc, #28]	; (46b4 <system_gclk_init+0x2c>)
    4696:	2201      	movs	r2, #1
    4698:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	4b05      	ldr	r3, [pc, #20]	; (46b4 <system_gclk_init+0x2c>)
    469e:	781b      	ldrb	r3, [r3, #0]
    46a0:	b2db      	uxtb	r3, r3
    46a2:	1c1a      	adds	r2, r3, #0
    46a4:	2301      	movs	r3, #1
    46a6:	4013      	ands	r3, r2
    46a8:	d1f8      	bne.n	469c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    46aa:	46bd      	mov	sp, r7
    46ac:	bd80      	pop	{r7, pc}
    46ae:	46c0      	nop			; (mov r8, r8)
    46b0:	0000460d 	.word	0x0000460d
    46b4:	40000c00 	.word	0x40000c00

000046b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b086      	sub	sp, #24
    46bc:	af00      	add	r7, sp, #0
    46be:	1c02      	adds	r2, r0, #0
    46c0:	6039      	str	r1, [r7, #0]
    46c2:	1dfb      	adds	r3, r7, #7
    46c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    46c6:	1dfb      	adds	r3, r7, #7
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    46cc:	1dfb      	adds	r3, r7, #7
    46ce:	781b      	ldrb	r3, [r3, #0]
    46d0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    46d2:	683b      	ldr	r3, [r7, #0]
    46d4:	781b      	ldrb	r3, [r3, #0]
    46d6:	021b      	lsls	r3, r3, #8
    46d8:	1c1a      	adds	r2, r3, #0
    46da:	697b      	ldr	r3, [r7, #20]
    46dc:	4313      	orrs	r3, r2
    46de:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    46e0:	683b      	ldr	r3, [r7, #0]
    46e2:	785b      	ldrb	r3, [r3, #1]
    46e4:	2b00      	cmp	r3, #0
    46e6:	d004      	beq.n	46f2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    46e8:	697b      	ldr	r3, [r7, #20]
    46ea:	2280      	movs	r2, #128	; 0x80
    46ec:	02d2      	lsls	r2, r2, #11
    46ee:	4313      	orrs	r3, r2
    46f0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    46f2:	683b      	ldr	r3, [r7, #0]
    46f4:	7a5b      	ldrb	r3, [r3, #9]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d004      	beq.n	4704 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    46fa:	697b      	ldr	r3, [r7, #20]
    46fc:	2280      	movs	r2, #128	; 0x80
    46fe:	0312      	lsls	r2, r2, #12
    4700:	4313      	orrs	r3, r2
    4702:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4704:	683b      	ldr	r3, [r7, #0]
    4706:	685b      	ldr	r3, [r3, #4]
    4708:	2b01      	cmp	r3, #1
    470a:	d92c      	bls.n	4766 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    470c:	683b      	ldr	r3, [r7, #0]
    470e:	685a      	ldr	r2, [r3, #4]
    4710:	683b      	ldr	r3, [r7, #0]
    4712:	685b      	ldr	r3, [r3, #4]
    4714:	3b01      	subs	r3, #1
    4716:	4013      	ands	r3, r2
    4718:	d11a      	bne.n	4750 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    471a:	2300      	movs	r3, #0
    471c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    471e:	2302      	movs	r3, #2
    4720:	60bb      	str	r3, [r7, #8]
    4722:	e005      	b.n	4730 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    4724:	68fb      	ldr	r3, [r7, #12]
    4726:	3301      	adds	r3, #1
    4728:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    472a:	68bb      	ldr	r3, [r7, #8]
    472c:	005b      	lsls	r3, r3, #1
    472e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4730:	683b      	ldr	r3, [r7, #0]
    4732:	685a      	ldr	r2, [r3, #4]
    4734:	68bb      	ldr	r3, [r7, #8]
    4736:	429a      	cmp	r2, r3
    4738:	d8f4      	bhi.n	4724 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	021b      	lsls	r3, r3, #8
    473e:	693a      	ldr	r2, [r7, #16]
    4740:	4313      	orrs	r3, r2
    4742:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4744:	697b      	ldr	r3, [r7, #20]
    4746:	2280      	movs	r2, #128	; 0x80
    4748:	0352      	lsls	r2, r2, #13
    474a:	4313      	orrs	r3, r2
    474c:	617b      	str	r3, [r7, #20]
    474e:	e00a      	b.n	4766 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4750:	683b      	ldr	r3, [r7, #0]
    4752:	685b      	ldr	r3, [r3, #4]
    4754:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4756:	693a      	ldr	r2, [r7, #16]
    4758:	4313      	orrs	r3, r2
    475a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    475c:	697b      	ldr	r3, [r7, #20]
    475e:	2280      	movs	r2, #128	; 0x80
    4760:	0292      	lsls	r2, r2, #10
    4762:	4313      	orrs	r3, r2
    4764:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4766:	683b      	ldr	r3, [r7, #0]
    4768:	7a1b      	ldrb	r3, [r3, #8]
    476a:	2b00      	cmp	r3, #0
    476c:	d004      	beq.n	4778 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    476e:	697b      	ldr	r3, [r7, #20]
    4770:	2280      	movs	r2, #128	; 0x80
    4772:	0392      	lsls	r2, r2, #14
    4774:	4313      	orrs	r3, r2
    4776:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    4778:	46c0      	nop			; (mov r8, r8)
    477a:	4b12      	ldr	r3, [pc, #72]	; (47c4 <system_gclk_gen_set_config+0x10c>)
    477c:	4798      	blx	r3
    477e:	1e03      	subs	r3, r0, #0
    4780:	d1fb      	bne.n	477a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4782:	4b11      	ldr	r3, [pc, #68]	; (47c8 <system_gclk_gen_set_config+0x110>)
    4784:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4786:	4a11      	ldr	r2, [pc, #68]	; (47cc <system_gclk_gen_set_config+0x114>)
    4788:	1dfb      	adds	r3, r7, #7
    478a:	781b      	ldrb	r3, [r3, #0]
    478c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    478e:	46c0      	nop			; (mov r8, r8)
    4790:	4b0c      	ldr	r3, [pc, #48]	; (47c4 <system_gclk_gen_set_config+0x10c>)
    4792:	4798      	blx	r3
    4794:	1e03      	subs	r3, r0, #0
    4796:	d1fb      	bne.n	4790 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4798:	4b0d      	ldr	r3, [pc, #52]	; (47d0 <system_gclk_gen_set_config+0x118>)
    479a:	693a      	ldr	r2, [r7, #16]
    479c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    479e:	46c0      	nop			; (mov r8, r8)
    47a0:	4b08      	ldr	r3, [pc, #32]	; (47c4 <system_gclk_gen_set_config+0x10c>)
    47a2:	4798      	blx	r3
    47a4:	1e03      	subs	r3, r0, #0
    47a6:	d1fb      	bne.n	47a0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    47a8:	4b09      	ldr	r3, [pc, #36]	; (47d0 <system_gclk_gen_set_config+0x118>)
    47aa:	4a09      	ldr	r2, [pc, #36]	; (47d0 <system_gclk_gen_set_config+0x118>)
    47ac:	6851      	ldr	r1, [r2, #4]
    47ae:	2280      	movs	r2, #128	; 0x80
    47b0:	0252      	lsls	r2, r2, #9
    47b2:	4011      	ands	r1, r2
    47b4:	697a      	ldr	r2, [r7, #20]
    47b6:	430a      	orrs	r2, r1
    47b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    47ba:	4b06      	ldr	r3, [pc, #24]	; (47d4 <system_gclk_gen_set_config+0x11c>)
    47bc:	4798      	blx	r3
}
    47be:	46bd      	mov	sp, r7
    47c0:	b006      	add	sp, #24
    47c2:	bd80      	pop	{r7, pc}
    47c4:	000045e9 	.word	0x000045e9
    47c8:	00004669 	.word	0x00004669
    47cc:	40000c08 	.word	0x40000c08
    47d0:	40000c00 	.word	0x40000c00
    47d4:	00004679 	.word	0x00004679

000047d8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    47d8:	b580      	push	{r7, lr}
    47da:	b082      	sub	sp, #8
    47dc:	af00      	add	r7, sp, #0
    47de:	1c02      	adds	r2, r0, #0
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    47e4:	46c0      	nop			; (mov r8, r8)
    47e6:	4b0d      	ldr	r3, [pc, #52]	; (481c <system_gclk_gen_enable+0x44>)
    47e8:	4798      	blx	r3
    47ea:	1e03      	subs	r3, r0, #0
    47ec:	d1fb      	bne.n	47e6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    47ee:	4b0c      	ldr	r3, [pc, #48]	; (4820 <system_gclk_gen_enable+0x48>)
    47f0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    47f2:	4a0c      	ldr	r2, [pc, #48]	; (4824 <system_gclk_gen_enable+0x4c>)
    47f4:	1dfb      	adds	r3, r7, #7
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	4b07      	ldr	r3, [pc, #28]	; (481c <system_gclk_gen_enable+0x44>)
    47fe:	4798      	blx	r3
    4800:	1e03      	subs	r3, r0, #0
    4802:	d1fb      	bne.n	47fc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4804:	4b08      	ldr	r3, [pc, #32]	; (4828 <system_gclk_gen_enable+0x50>)
    4806:	4a08      	ldr	r2, [pc, #32]	; (4828 <system_gclk_gen_enable+0x50>)
    4808:	6852      	ldr	r2, [r2, #4]
    480a:	2180      	movs	r1, #128	; 0x80
    480c:	0249      	lsls	r1, r1, #9
    480e:	430a      	orrs	r2, r1
    4810:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    4812:	4b06      	ldr	r3, [pc, #24]	; (482c <system_gclk_gen_enable+0x54>)
    4814:	4798      	blx	r3
}
    4816:	46bd      	mov	sp, r7
    4818:	b002      	add	sp, #8
    481a:	bd80      	pop	{r7, pc}
    481c:	000045e9 	.word	0x000045e9
    4820:	00004669 	.word	0x00004669
    4824:	40000c04 	.word	0x40000c04
    4828:	40000c00 	.word	0x40000c00
    482c:	00004679 	.word	0x00004679

00004830 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4830:	b580      	push	{r7, lr}
    4832:	b086      	sub	sp, #24
    4834:	af00      	add	r7, sp, #0
    4836:	1c02      	adds	r2, r0, #0
    4838:	1dfb      	adds	r3, r7, #7
    483a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    483c:	46c0      	nop			; (mov r8, r8)
    483e:	4b2e      	ldr	r3, [pc, #184]	; (48f8 <system_gclk_gen_get_hz+0xc8>)
    4840:	4798      	blx	r3
    4842:	1e03      	subs	r3, r0, #0
    4844:	d1fb      	bne.n	483e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    4846:	4b2d      	ldr	r3, [pc, #180]	; (48fc <system_gclk_gen_get_hz+0xcc>)
    4848:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    484a:	4a2d      	ldr	r2, [pc, #180]	; (4900 <system_gclk_gen_get_hz+0xd0>)
    484c:	1dfb      	adds	r3, r7, #7
    484e:	781b      	ldrb	r3, [r3, #0]
    4850:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4852:	46c0      	nop			; (mov r8, r8)
    4854:	4b28      	ldr	r3, [pc, #160]	; (48f8 <system_gclk_gen_get_hz+0xc8>)
    4856:	4798      	blx	r3
    4858:	1e03      	subs	r3, r0, #0
    485a:	d1fb      	bne.n	4854 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    485c:	4b29      	ldr	r3, [pc, #164]	; (4904 <system_gclk_gen_get_hz+0xd4>)
    485e:	685b      	ldr	r3, [r3, #4]
    4860:	0a1b      	lsrs	r3, r3, #8
    4862:	1c1a      	adds	r2, r3, #0
    4864:	231f      	movs	r3, #31
    4866:	4013      	ands	r3, r2
    4868:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    486a:	1c18      	adds	r0, r3, #0
    486c:	4b26      	ldr	r3, [pc, #152]	; (4908 <system_gclk_gen_get_hz+0xd8>)
    486e:	4798      	blx	r3
    4870:	1c03      	adds	r3, r0, #0
    4872:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4874:	4a22      	ldr	r2, [pc, #136]	; (4900 <system_gclk_gen_get_hz+0xd0>)
    4876:	1dfb      	adds	r3, r7, #7
    4878:	781b      	ldrb	r3, [r3, #0]
    487a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    487c:	4b21      	ldr	r3, [pc, #132]	; (4904 <system_gclk_gen_get_hz+0xd4>)
    487e:	685b      	ldr	r3, [r3, #4]
    4880:	0d1b      	lsrs	r3, r3, #20
    4882:	1c1a      	adds	r2, r3, #0
    4884:	2301      	movs	r3, #1
    4886:	4013      	ands	r3, r2
    4888:	b2da      	uxtb	r2, r3
    488a:	2313      	movs	r3, #19
    488c:	18fb      	adds	r3, r7, r3
    488e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4890:	4a1e      	ldr	r2, [pc, #120]	; (490c <system_gclk_gen_get_hz+0xdc>)
    4892:	1dfb      	adds	r3, r7, #7
    4894:	781b      	ldrb	r3, [r3, #0]
    4896:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    4898:	46c0      	nop			; (mov r8, r8)
    489a:	4b17      	ldr	r3, [pc, #92]	; (48f8 <system_gclk_gen_get_hz+0xc8>)
    489c:	4798      	blx	r3
    489e:	1e03      	subs	r3, r0, #0
    48a0:	d1fb      	bne.n	489a <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    48a2:	4b18      	ldr	r3, [pc, #96]	; (4904 <system_gclk_gen_get_hz+0xd4>)
    48a4:	689b      	ldr	r3, [r3, #8]
    48a6:	0a1b      	lsrs	r3, r3, #8
    48a8:	1c1a      	adds	r2, r3, #0
    48aa:	2300      	movs	r3, #0
    48ac:	439a      	bics	r2, r3
    48ae:	1c13      	adds	r3, r2, #0
    48b0:	b29b      	uxth	r3, r3
    48b2:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    48b4:	4b16      	ldr	r3, [pc, #88]	; (4910 <system_gclk_gen_get_hz+0xe0>)
    48b6:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    48b8:	2313      	movs	r3, #19
    48ba:	18fb      	adds	r3, r7, r3
    48bc:	781b      	ldrb	r3, [r3, #0]
    48be:	2b00      	cmp	r3, #0
    48c0:	d109      	bne.n	48d6 <system_gclk_gen_get_hz+0xa6>
    48c2:	68fb      	ldr	r3, [r7, #12]
    48c4:	2b01      	cmp	r3, #1
    48c6:	d906      	bls.n	48d6 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    48c8:	4b12      	ldr	r3, [pc, #72]	; (4914 <system_gclk_gen_get_hz+0xe4>)
    48ca:	6978      	ldr	r0, [r7, #20]
    48cc:	68f9      	ldr	r1, [r7, #12]
    48ce:	4798      	blx	r3
    48d0:	1c03      	adds	r3, r0, #0
    48d2:	617b      	str	r3, [r7, #20]
    48d4:	e00a      	b.n	48ec <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    48d6:	2313      	movs	r3, #19
    48d8:	18fb      	adds	r3, r7, r3
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	2b00      	cmp	r3, #0
    48de:	d005      	beq.n	48ec <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    48e0:	68fb      	ldr	r3, [r7, #12]
    48e2:	3301      	adds	r3, #1
    48e4:	1c1a      	adds	r2, r3, #0
    48e6:	697b      	ldr	r3, [r7, #20]
    48e8:	40d3      	lsrs	r3, r2
    48ea:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    48ec:	697b      	ldr	r3, [r7, #20]
}
    48ee:	1c18      	adds	r0, r3, #0
    48f0:	46bd      	mov	sp, r7
    48f2:	b006      	add	sp, #24
    48f4:	bd80      	pop	{r7, pc}
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	000045e9 	.word	0x000045e9
    48fc:	00004669 	.word	0x00004669
    4900:	40000c04 	.word	0x40000c04
    4904:	40000c00 	.word	0x40000c00
    4908:	00004341 	.word	0x00004341
    490c:	40000c08 	.word	0x40000c08
    4910:	00004679 	.word	0x00004679
    4914:	000052f9 	.word	0x000052f9

00004918 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4918:	b580      	push	{r7, lr}
    491a:	b084      	sub	sp, #16
    491c:	af00      	add	r7, sp, #0
    491e:	1c02      	adds	r2, r0, #0
    4920:	6039      	str	r1, [r7, #0]
    4922:	1dfb      	adds	r3, r7, #7
    4924:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    4926:	1dfb      	adds	r3, r7, #7
    4928:	781b      	ldrb	r3, [r3, #0]
    492a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    492c:	683b      	ldr	r3, [r7, #0]
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	021b      	lsls	r3, r3, #8
    4932:	1c1a      	adds	r2, r3, #0
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	4313      	orrs	r3, r2
    4938:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    493a:	1dfb      	adds	r3, r7, #7
    493c:	781b      	ldrb	r3, [r3, #0]
    493e:	1c18      	adds	r0, r3, #0
    4940:	4b04      	ldr	r3, [pc, #16]	; (4954 <system_gclk_chan_set_config+0x3c>)
    4942:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4944:	4b04      	ldr	r3, [pc, #16]	; (4958 <system_gclk_chan_set_config+0x40>)
    4946:	68fa      	ldr	r2, [r7, #12]
    4948:	b292      	uxth	r2, r2
    494a:	805a      	strh	r2, [r3, #2]
}
    494c:	46bd      	mov	sp, r7
    494e:	b004      	add	sp, #16
    4950:	bd80      	pop	{r7, pc}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	000049a1 	.word	0x000049a1
    4958:	40000c00 	.word	0x40000c00

0000495c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    495c:	b580      	push	{r7, lr}
    495e:	b082      	sub	sp, #8
    4960:	af00      	add	r7, sp, #0
    4962:	1c02      	adds	r2, r0, #0
    4964:	1dfb      	adds	r3, r7, #7
    4966:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    4968:	4b09      	ldr	r3, [pc, #36]	; (4990 <system_gclk_chan_enable+0x34>)
    496a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    496c:	4a09      	ldr	r2, [pc, #36]	; (4994 <system_gclk_chan_enable+0x38>)
    496e:	1dfb      	adds	r3, r7, #7
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4974:	4908      	ldr	r1, [pc, #32]	; (4998 <system_gclk_chan_enable+0x3c>)
    4976:	4b08      	ldr	r3, [pc, #32]	; (4998 <system_gclk_chan_enable+0x3c>)
    4978:	885b      	ldrh	r3, [r3, #2]
    497a:	b29b      	uxth	r3, r3
    497c:	2280      	movs	r2, #128	; 0x80
    497e:	01d2      	lsls	r2, r2, #7
    4980:	4313      	orrs	r3, r2
    4982:	b29b      	uxth	r3, r3
    4984:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    4986:	4b05      	ldr	r3, [pc, #20]	; (499c <system_gclk_chan_enable+0x40>)
    4988:	4798      	blx	r3
}
    498a:	46bd      	mov	sp, r7
    498c:	b002      	add	sp, #8
    498e:	bd80      	pop	{r7, pc}
    4990:	00004669 	.word	0x00004669
    4994:	40000c02 	.word	0x40000c02
    4998:	40000c00 	.word	0x40000c00
    499c:	00004679 	.word	0x00004679

000049a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    49a0:	b580      	push	{r7, lr}
    49a2:	b084      	sub	sp, #16
    49a4:	af00      	add	r7, sp, #0
    49a6:	1c02      	adds	r2, r0, #0
    49a8:	1dfb      	adds	r3, r7, #7
    49aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    49ac:	4b1d      	ldr	r3, [pc, #116]	; (4a24 <system_gclk_chan_disable+0x84>)
    49ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    49b0:	4a1d      	ldr	r2, [pc, #116]	; (4a28 <system_gclk_chan_disable+0x88>)
    49b2:	1dfb      	adds	r3, r7, #7
    49b4:	781b      	ldrb	r3, [r3, #0]
    49b6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    49b8:	4b1c      	ldr	r3, [pc, #112]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49ba:	885b      	ldrh	r3, [r3, #2]
    49bc:	b29b      	uxth	r3, r3
    49be:	0a1b      	lsrs	r3, r3, #8
    49c0:	1c1a      	adds	r2, r3, #0
    49c2:	230f      	movs	r3, #15
    49c4:	4013      	ands	r3, r2
    49c6:	b2db      	uxtb	r3, r3
    49c8:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    49ca:	4b18      	ldr	r3, [pc, #96]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49cc:	885a      	ldrh	r2, [r3, #2]
    49ce:	4918      	ldr	r1, [pc, #96]	; (4a30 <system_gclk_chan_disable+0x90>)
    49d0:	400a      	ands	r2, r1
    49d2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    49d4:	4a15      	ldr	r2, [pc, #84]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49d6:	4b15      	ldr	r3, [pc, #84]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49d8:	885b      	ldrh	r3, [r3, #2]
    49da:	b29b      	uxth	r3, r3
    49dc:	4915      	ldr	r1, [pc, #84]	; (4a34 <system_gclk_chan_disable+0x94>)
    49de:	400b      	ands	r3, r1
    49e0:	b29b      	uxth	r3, r3
    49e2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	4b11      	ldr	r3, [pc, #68]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49e8:	885b      	ldrh	r3, [r3, #2]
    49ea:	b29b      	uxth	r3, r3
    49ec:	1c1a      	adds	r2, r3, #0
    49ee:	2380      	movs	r3, #128	; 0x80
    49f0:	01db      	lsls	r3, r3, #7
    49f2:	4013      	ands	r3, r2
    49f4:	d1f7      	bne.n	49e6 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    49f6:	4b0d      	ldr	r3, [pc, #52]	; (4a2c <system_gclk_chan_disable+0x8c>)
    49f8:	68fa      	ldr	r2, [r7, #12]
    49fa:	b2d2      	uxtb	r2, r2
    49fc:	1c11      	adds	r1, r2, #0
    49fe:	220f      	movs	r2, #15
    4a00:	400a      	ands	r2, r1
    4a02:	b2d2      	uxtb	r2, r2
    4a04:	1c11      	adds	r1, r2, #0
    4a06:	220f      	movs	r2, #15
    4a08:	400a      	ands	r2, r1
    4a0a:	0210      	lsls	r0, r2, #8
    4a0c:	885a      	ldrh	r2, [r3, #2]
    4a0e:	4908      	ldr	r1, [pc, #32]	; (4a30 <system_gclk_chan_disable+0x90>)
    4a10:	400a      	ands	r2, r1
    4a12:	1c11      	adds	r1, r2, #0
    4a14:	1c02      	adds	r2, r0, #0
    4a16:	430a      	orrs	r2, r1
    4a18:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    4a1a:	4b07      	ldr	r3, [pc, #28]	; (4a38 <system_gclk_chan_disable+0x98>)
    4a1c:	4798      	blx	r3
}
    4a1e:	46bd      	mov	sp, r7
    4a20:	b004      	add	sp, #16
    4a22:	bd80      	pop	{r7, pc}
    4a24:	00004669 	.word	0x00004669
    4a28:	40000c02 	.word	0x40000c02
    4a2c:	40000c00 	.word	0x40000c00
    4a30:	fffff0ff 	.word	0xfffff0ff
    4a34:	ffffbfff 	.word	0xffffbfff
    4a38:	00004679 	.word	0x00004679

00004a3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b084      	sub	sp, #16
    4a40:	af00      	add	r7, sp, #0
    4a42:	1c02      	adds	r2, r0, #0
    4a44:	1dfb      	adds	r3, r7, #7
    4a46:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4a48:	4b0e      	ldr	r3, [pc, #56]	; (4a84 <system_gclk_chan_get_hz+0x48>)
    4a4a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4a4c:	4a0e      	ldr	r2, [pc, #56]	; (4a88 <system_gclk_chan_get_hz+0x4c>)
    4a4e:	1dfb      	adds	r3, r7, #7
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4a54:	4b0d      	ldr	r3, [pc, #52]	; (4a8c <system_gclk_chan_get_hz+0x50>)
    4a56:	885b      	ldrh	r3, [r3, #2]
    4a58:	b29b      	uxth	r3, r3
    4a5a:	0a1b      	lsrs	r3, r3, #8
    4a5c:	1c1a      	adds	r2, r3, #0
    4a5e:	230f      	movs	r3, #15
    4a60:	4013      	ands	r3, r2
    4a62:	b2da      	uxtb	r2, r3
    4a64:	230f      	movs	r3, #15
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4a6a:	4b09      	ldr	r3, [pc, #36]	; (4a90 <system_gclk_chan_get_hz+0x54>)
    4a6c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4a6e:	230f      	movs	r3, #15
    4a70:	18fb      	adds	r3, r7, r3
    4a72:	781b      	ldrb	r3, [r3, #0]
    4a74:	1c18      	adds	r0, r3, #0
    4a76:	4b07      	ldr	r3, [pc, #28]	; (4a94 <system_gclk_chan_get_hz+0x58>)
    4a78:	4798      	blx	r3
    4a7a:	1c03      	adds	r3, r0, #0
}
    4a7c:	1c18      	adds	r0, r3, #0
    4a7e:	46bd      	mov	sp, r7
    4a80:	b004      	add	sp, #16
    4a82:	bd80      	pop	{r7, pc}
    4a84:	00004669 	.word	0x00004669
    4a88:	40000c02 	.word	0x40000c02
    4a8c:	40000c00 	.word	0x40000c00
    4a90:	00004679 	.word	0x00004679
    4a94:	00004831 	.word	0x00004831

00004a98 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b084      	sub	sp, #16
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	1c02      	adds	r2, r0, #0
    4aa0:	1dfb      	adds	r3, r7, #7
    4aa2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4aa4:	230f      	movs	r3, #15
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	1dfa      	adds	r2, r7, #7
    4aaa:	7812      	ldrb	r2, [r2, #0]
    4aac:	09d2      	lsrs	r2, r2, #7
    4aae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ab0:	230e      	movs	r3, #14
    4ab2:	18fb      	adds	r3, r7, r3
    4ab4:	1dfa      	adds	r2, r7, #7
    4ab6:	7812      	ldrb	r2, [r2, #0]
    4ab8:	0952      	lsrs	r2, r2, #5
    4aba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4abc:	4b0d      	ldr	r3, [pc, #52]	; (4af4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4abe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4ac0:	230f      	movs	r3, #15
    4ac2:	18fb      	adds	r3, r7, r3
    4ac4:	781b      	ldrb	r3, [r3, #0]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d10f      	bne.n	4aea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4aca:	230f      	movs	r3, #15
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	009b      	lsls	r3, r3, #2
    4ad2:	2210      	movs	r2, #16
    4ad4:	4694      	mov	ip, r2
    4ad6:	44bc      	add	ip, r7
    4ad8:	4463      	add	r3, ip
    4ada:	3b08      	subs	r3, #8
    4adc:	681a      	ldr	r2, [r3, #0]
    4ade:	230e      	movs	r3, #14
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	781b      	ldrb	r3, [r3, #0]
    4ae4:	01db      	lsls	r3, r3, #7
    4ae6:	18d3      	adds	r3, r2, r3
    4ae8:	e000      	b.n	4aec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4aea:	2300      	movs	r3, #0
	}
}
    4aec:	1c18      	adds	r0, r3, #0
    4aee:	46bd      	mov	sp, r7
    4af0:	b004      	add	sp, #16
    4af2:	bd80      	pop	{r7, pc}
    4af4:	41004400 	.word	0x41004400

00004af8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4af8:	b580      	push	{r7, lr}
    4afa:	b088      	sub	sp, #32
    4afc:	af00      	add	r7, sp, #0
    4afe:	60f8      	str	r0, [r7, #12]
    4b00:	60b9      	str	r1, [r7, #8]
    4b02:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4b04:	2300      	movs	r3, #0
    4b06:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	78db      	ldrb	r3, [r3, #3]
    4b0c:	2201      	movs	r2, #1
    4b0e:	4053      	eors	r3, r2
    4b10:	b2db      	uxtb	r3, r3
    4b12:	2b00      	cmp	r3, #0
    4b14:	d035      	beq.n	4b82 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	781b      	ldrb	r3, [r3, #0]
    4b1a:	2b80      	cmp	r3, #128	; 0x80
    4b1c:	d00b      	beq.n	4b36 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    4b1e:	69fb      	ldr	r3, [r7, #28]
    4b20:	2280      	movs	r2, #128	; 0x80
    4b22:	0252      	lsls	r2, r2, #9
    4b24:	4313      	orrs	r3, r2
    4b26:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	781b      	ldrb	r3, [r3, #0]
    4b2c:	061b      	lsls	r3, r3, #24
    4b2e:	1c1a      	adds	r2, r3, #0
    4b30:	69fb      	ldr	r3, [r7, #28]
    4b32:	4313      	orrs	r3, r2
    4b34:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	785b      	ldrb	r3, [r3, #1]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d003      	beq.n	4b46 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4b3e:	687b      	ldr	r3, [r7, #4]
    4b40:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4b42:	2b02      	cmp	r3, #2
    4b44:	d110      	bne.n	4b68 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4b46:	69fb      	ldr	r3, [r7, #28]
    4b48:	2280      	movs	r2, #128	; 0x80
    4b4a:	0292      	lsls	r2, r2, #10
    4b4c:	4313      	orrs	r3, r2
    4b4e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	789b      	ldrb	r3, [r3, #2]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d004      	beq.n	4b62 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4b58:	69fb      	ldr	r3, [r7, #28]
    4b5a:	2280      	movs	r2, #128	; 0x80
    4b5c:	02d2      	lsls	r2, r2, #11
    4b5e:	4313      	orrs	r3, r2
    4b60:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4b62:	68fb      	ldr	r3, [r7, #12]
    4b64:	68ba      	ldr	r2, [r7, #8]
    4b66:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	785b      	ldrb	r3, [r3, #1]
    4b6c:	2b01      	cmp	r3, #1
    4b6e:	d003      	beq.n	4b78 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4b74:	2b02      	cmp	r3, #2
    4b76:	d107      	bne.n	4b88 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4b78:	69fb      	ldr	r3, [r7, #28]
    4b7a:	4a21      	ldr	r2, [pc, #132]	; (4c00 <_system_pinmux_config+0x108>)
    4b7c:	4013      	ands	r3, r2
    4b7e:	61fb      	str	r3, [r7, #28]
    4b80:	e002      	b.n	4b88 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4b82:	68fb      	ldr	r3, [r7, #12]
    4b84:	68ba      	ldr	r2, [r7, #8]
    4b86:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4b88:	68bb      	ldr	r3, [r7, #8]
    4b8a:	041b      	lsls	r3, r3, #16
    4b8c:	0c1b      	lsrs	r3, r3, #16
    4b8e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4b90:	68bb      	ldr	r3, [r7, #8]
    4b92:	0c1b      	lsrs	r3, r3, #16
    4b94:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4b96:	69ba      	ldr	r2, [r7, #24]
    4b98:	69fb      	ldr	r3, [r7, #28]
    4b9a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4b9c:	22a0      	movs	r2, #160	; 0xa0
    4b9e:	05d2      	lsls	r2, r2, #23
    4ba0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ba2:	68fb      	ldr	r3, [r7, #12]
    4ba4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4ba6:	697a      	ldr	r2, [r7, #20]
    4ba8:	69fb      	ldr	r3, [r7, #28]
    4baa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4bac:	22d0      	movs	r2, #208	; 0xd0
    4bae:	0612      	lsls	r2, r2, #24
    4bb0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4bb2:	68fb      	ldr	r3, [r7, #12]
    4bb4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	78db      	ldrb	r3, [r3, #3]
    4bba:	2201      	movs	r2, #1
    4bbc:	4053      	eors	r3, r2
    4bbe:	b2db      	uxtb	r3, r3
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d01a      	beq.n	4bfa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4bc4:	69fa      	ldr	r2, [r7, #28]
    4bc6:	2380      	movs	r3, #128	; 0x80
    4bc8:	02db      	lsls	r3, r3, #11
    4bca:	4013      	ands	r3, r2
    4bcc:	d00a      	beq.n	4be4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4bce:	687b      	ldr	r3, [r7, #4]
    4bd0:	789b      	ldrb	r3, [r3, #2]
    4bd2:	2b01      	cmp	r3, #1
    4bd4:	d103      	bne.n	4bde <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	68ba      	ldr	r2, [r7, #8]
    4bda:	619a      	str	r2, [r3, #24]
    4bdc:	e002      	b.n	4be4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    4bde:	68fb      	ldr	r3, [r7, #12]
    4be0:	68ba      	ldr	r2, [r7, #8]
    4be2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4be4:	687b      	ldr	r3, [r7, #4]
    4be6:	785b      	ldrb	r3, [r3, #1]
    4be8:	2b01      	cmp	r3, #1
    4bea:	d003      	beq.n	4bf4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4bf0:	2b02      	cmp	r3, #2
    4bf2:	d102      	bne.n	4bfa <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4bf4:	68fb      	ldr	r3, [r7, #12]
    4bf6:	68ba      	ldr	r2, [r7, #8]
    4bf8:	609a      	str	r2, [r3, #8]
		}
	}
}
    4bfa:	46bd      	mov	sp, r7
    4bfc:	b008      	add	sp, #32
    4bfe:	bd80      	pop	{r7, pc}
    4c00:	fffbffff 	.word	0xfffbffff

00004c04 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4c04:	b580      	push	{r7, lr}
    4c06:	b084      	sub	sp, #16
    4c08:	af00      	add	r7, sp, #0
    4c0a:	1c02      	adds	r2, r0, #0
    4c0c:	6039      	str	r1, [r7, #0]
    4c0e:	1dfb      	adds	r3, r7, #7
    4c10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4c12:	1dfb      	adds	r3, r7, #7
    4c14:	781b      	ldrb	r3, [r3, #0]
    4c16:	1c18      	adds	r0, r3, #0
    4c18:	4b0b      	ldr	r3, [pc, #44]	; (4c48 <system_pinmux_pin_set_config+0x44>)
    4c1a:	4798      	blx	r3
    4c1c:	1c03      	adds	r3, r0, #0
    4c1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4c20:	1dfb      	adds	r3, r7, #7
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	221f      	movs	r2, #31
    4c26:	4013      	ands	r3, r2
    4c28:	2201      	movs	r2, #1
    4c2a:	409a      	lsls	r2, r3
    4c2c:	1c13      	adds	r3, r2, #0
    4c2e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4c30:	68f9      	ldr	r1, [r7, #12]
    4c32:	68ba      	ldr	r2, [r7, #8]
    4c34:	683b      	ldr	r3, [r7, #0]
    4c36:	1c08      	adds	r0, r1, #0
    4c38:	1c11      	adds	r1, r2, #0
    4c3a:	1c1a      	adds	r2, r3, #0
    4c3c:	4b03      	ldr	r3, [pc, #12]	; (4c4c <system_pinmux_pin_set_config+0x48>)
    4c3e:	4798      	blx	r3
}
    4c40:	46bd      	mov	sp, r7
    4c42:	b004      	add	sp, #16
    4c44:	bd80      	pop	{r7, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	00004a99 	.word	0x00004a99
    4c4c:	00004af9 	.word	0x00004af9

00004c50 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    4c50:	b580      	push	{r7, lr}
    4c52:	af00      	add	r7, sp, #0
	return;
    4c54:	46c0      	nop			; (mov r8, r8)
}
    4c56:	46bd      	mov	sp, r7
    4c58:	bd80      	pop	{r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)

00004c5c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4c60:	4b04      	ldr	r3, [pc, #16]	; (4c74 <system_init+0x18>)
    4c62:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4c64:	4b04      	ldr	r3, [pc, #16]	; (4c78 <system_init+0x1c>)
    4c66:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4c68:	4b04      	ldr	r3, [pc, #16]	; (4c7c <system_init+0x20>)
    4c6a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4c6c:	4b04      	ldr	r3, [pc, #16]	; (4c80 <system_init+0x24>)
    4c6e:	4798      	blx	r3
}
    4c70:	46bd      	mov	sp, r7
    4c72:	bd80      	pop	{r7, pc}
    4c74:	00004525 	.word	0x00004525
    4c78:	0000411d 	.word	0x0000411d
    4c7c:	00004c51 	.word	0x00004c51
    4c80:	00004c51 	.word	0x00004c51

00004c84 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	b082      	sub	sp, #8
    4c88:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4c8a:	4b16      	ldr	r3, [pc, #88]	; (4ce4 <Reset_Handler+0x60>)
    4c8c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4c8e:	4b16      	ldr	r3, [pc, #88]	; (4ce8 <Reset_Handler+0x64>)
    4c90:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    4c92:	687a      	ldr	r2, [r7, #4]
    4c94:	683b      	ldr	r3, [r7, #0]
    4c96:	429a      	cmp	r2, r3
    4c98:	d00c      	beq.n	4cb4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4c9a:	e007      	b.n	4cac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	1d1a      	adds	r2, r3, #4
    4ca0:	603a      	str	r2, [r7, #0]
    4ca2:	687a      	ldr	r2, [r7, #4]
    4ca4:	1d11      	adds	r1, r2, #4
    4ca6:	6079      	str	r1, [r7, #4]
    4ca8:	6812      	ldr	r2, [r2, #0]
    4caa:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4cac:	683a      	ldr	r2, [r7, #0]
    4cae:	4b0f      	ldr	r3, [pc, #60]	; (4cec <Reset_Handler+0x68>)
    4cb0:	429a      	cmp	r2, r3
    4cb2:	d3f3      	bcc.n	4c9c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4cb4:	4b0e      	ldr	r3, [pc, #56]	; (4cf0 <Reset_Handler+0x6c>)
    4cb6:	603b      	str	r3, [r7, #0]
    4cb8:	e004      	b.n	4cc4 <Reset_Handler+0x40>
                *pDest++ = 0;
    4cba:	683b      	ldr	r3, [r7, #0]
    4cbc:	1d1a      	adds	r2, r3, #4
    4cbe:	603a      	str	r2, [r7, #0]
    4cc0:	2200      	movs	r2, #0
    4cc2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4cc4:	683a      	ldr	r2, [r7, #0]
    4cc6:	4b0b      	ldr	r3, [pc, #44]	; (4cf4 <Reset_Handler+0x70>)
    4cc8:	429a      	cmp	r2, r3
    4cca:	d3f6      	bcc.n	4cba <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    4ccc:	4b0a      	ldr	r3, [pc, #40]	; (4cf8 <Reset_Handler+0x74>)
    4cce:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4cd0:	4b0a      	ldr	r3, [pc, #40]	; (4cfc <Reset_Handler+0x78>)
    4cd2:	687a      	ldr	r2, [r7, #4]
    4cd4:	217f      	movs	r1, #127	; 0x7f
    4cd6:	438a      	bics	r2, r1
    4cd8:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    4cda:	4b09      	ldr	r3, [pc, #36]	; (4d00 <Reset_Handler+0x7c>)
    4cdc:	4798      	blx	r3

        /* Branch to main function */
        main();
    4cde:	4b09      	ldr	r3, [pc, #36]	; (4d04 <Reset_Handler+0x80>)
    4ce0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    4ce2:	e7fe      	b.n	4ce2 <Reset_Handler+0x5e>
    4ce4:	000075bc 	.word	0x000075bc
    4ce8:	20000000 	.word	0x20000000
    4cec:	20000070 	.word	0x20000070
    4cf0:	20000070 	.word	0x20000070
    4cf4:	20003d04 	.word	0x20003d04
    4cf8:	00000000 	.word	0x00000000
    4cfc:	e000ed00 	.word	0xe000ed00
    4d00:	000062c9 	.word	0x000062c9
    4d04:	000051c1 	.word	0x000051c1

00004d08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4d08:	b580      	push	{r7, lr}
    4d0a:	af00      	add	r7, sp, #0
        while (1) {
        }
    4d0c:	e7fe      	b.n	4d0c <Dummy_Handler+0x4>
    4d0e:	46c0      	nop			; (mov r8, r8)

00004d10 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4d10:	b580      	push	{r7, lr}
    4d12:	b084      	sub	sp, #16
    4d14:	af00      	add	r7, sp, #0
    4d16:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4d18:	4b0a      	ldr	r3, [pc, #40]	; (4d44 <_sbrk+0x34>)
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d102      	bne.n	4d26 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    4d20:	4b08      	ldr	r3, [pc, #32]	; (4d44 <_sbrk+0x34>)
    4d22:	4a09      	ldr	r2, [pc, #36]	; (4d48 <_sbrk+0x38>)
    4d24:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4d26:	4b07      	ldr	r3, [pc, #28]	; (4d44 <_sbrk+0x34>)
    4d28:	681b      	ldr	r3, [r3, #0]
    4d2a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4d2c:	4b05      	ldr	r3, [pc, #20]	; (4d44 <_sbrk+0x34>)
    4d2e:	681a      	ldr	r2, [r3, #0]
    4d30:	687b      	ldr	r3, [r7, #4]
    4d32:	18d2      	adds	r2, r2, r3
    4d34:	4b03      	ldr	r3, [pc, #12]	; (4d44 <_sbrk+0x34>)
    4d36:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4d38:	68fb      	ldr	r3, [r7, #12]
}
    4d3a:	1c18      	adds	r0, r3, #0
    4d3c:	46bd      	mov	sp, r7
    4d3e:	b004      	add	sp, #16
    4d40:	bd80      	pop	{r7, pc}
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	20003c9c 	.word	0x20003c9c
    4d48:	20005d08 	.word	0x20005d08

00004d4c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4d4c:	b580      	push	{r7, lr}
    4d4e:	b082      	sub	sp, #8
    4d50:	af00      	add	r7, sp, #0
    4d52:	6078      	str	r0, [r7, #4]
	return -1;
    4d54:	2301      	movs	r3, #1
    4d56:	425b      	negs	r3, r3
}
    4d58:	1c18      	adds	r0, r3, #0
    4d5a:	46bd      	mov	sp, r7
    4d5c:	b002      	add	sp, #8
    4d5e:	bd80      	pop	{r7, pc}

00004d60 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    4d60:	b580      	push	{r7, lr}
    4d62:	b082      	sub	sp, #8
    4d64:	af00      	add	r7, sp, #0
    4d66:	6078      	str	r0, [r7, #4]
    4d68:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    4d6a:	683b      	ldr	r3, [r7, #0]
    4d6c:	2280      	movs	r2, #128	; 0x80
    4d6e:	0192      	lsls	r2, r2, #6
    4d70:	605a      	str	r2, [r3, #4]

	return 0;
    4d72:	2300      	movs	r3, #0
}
    4d74:	1c18      	adds	r0, r3, #0
    4d76:	46bd      	mov	sp, r7
    4d78:	b002      	add	sp, #8
    4d7a:	bd80      	pop	{r7, pc}

00004d7c <_isatty>:

extern int _isatty(int file)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b082      	sub	sp, #8
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
	return 1;
    4d84:	2301      	movs	r3, #1
}
    4d86:	1c18      	adds	r0, r3, #0
    4d88:	46bd      	mov	sp, r7
    4d8a:	b002      	add	sp, #8
    4d8c:	bd80      	pop	{r7, pc}
    4d8e:	46c0      	nop			; (mov r8, r8)

00004d90 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b084      	sub	sp, #16
    4d94:	af00      	add	r7, sp, #0
    4d96:	60f8      	str	r0, [r7, #12]
    4d98:	60b9      	str	r1, [r7, #8]
    4d9a:	607a      	str	r2, [r7, #4]
	return 0;
    4d9c:	2300      	movs	r3, #0
}
    4d9e:	1c18      	adds	r0, r3, #0
    4da0:	46bd      	mov	sp, r7
    4da2:	b004      	add	sp, #16
    4da4:	bd80      	pop	{r7, pc}
    4da6:	46c0      	nop			; (mov r8, r8)

00004da8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	1c02      	adds	r2, r0, #0
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4db4:	230f      	movs	r3, #15
    4db6:	18fb      	adds	r3, r7, r3
    4db8:	1dfa      	adds	r2, r7, #7
    4dba:	7812      	ldrb	r2, [r2, #0]
    4dbc:	09d2      	lsrs	r2, r2, #7
    4dbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4dc0:	230e      	movs	r3, #14
    4dc2:	18fb      	adds	r3, r7, r3
    4dc4:	1dfa      	adds	r2, r7, #7
    4dc6:	7812      	ldrb	r2, [r2, #0]
    4dc8:	0952      	lsrs	r2, r2, #5
    4dca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4dcc:	4b0d      	ldr	r3, [pc, #52]	; (4e04 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4dce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4dd0:	230f      	movs	r3, #15
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	781b      	ldrb	r3, [r3, #0]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d10f      	bne.n	4dfa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4dda:	230f      	movs	r3, #15
    4ddc:	18fb      	adds	r3, r7, r3
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	009b      	lsls	r3, r3, #2
    4de2:	2210      	movs	r2, #16
    4de4:	4694      	mov	ip, r2
    4de6:	44bc      	add	ip, r7
    4de8:	4463      	add	r3, ip
    4dea:	3b08      	subs	r3, #8
    4dec:	681a      	ldr	r2, [r3, #0]
    4dee:	230e      	movs	r3, #14
    4df0:	18fb      	adds	r3, r7, r3
    4df2:	781b      	ldrb	r3, [r3, #0]
    4df4:	01db      	lsls	r3, r3, #7
    4df6:	18d3      	adds	r3, r2, r3
    4df8:	e000      	b.n	4dfc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4dfa:	2300      	movs	r3, #0
	}
}
    4dfc:	1c18      	adds	r0, r3, #0
    4dfe:	46bd      	mov	sp, r7
    4e00:	b004      	add	sp, #16
    4e02:	bd80      	pop	{r7, pc}
    4e04:	41004400 	.word	0x41004400

00004e08 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	1c02      	adds	r2, r0, #0
    4e10:	1dfb      	adds	r3, r7, #7
    4e12:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4e14:	1dfb      	adds	r3, r7, #7
    4e16:	781b      	ldrb	r3, [r3, #0]
    4e18:	1c18      	adds	r0, r3, #0
    4e1a:	4b03      	ldr	r3, [pc, #12]	; (4e28 <port_get_group_from_gpio_pin+0x20>)
    4e1c:	4798      	blx	r3
    4e1e:	1c03      	adds	r3, r0, #0
}
    4e20:	1c18      	adds	r0, r3, #0
    4e22:	46bd      	mov	sp, r7
    4e24:	b002      	add	sp, #8
    4e26:	bd80      	pop	{r7, pc}
    4e28:	00004da9 	.word	0x00004da9

00004e2c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	1c02      	adds	r2, r0, #0
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4e38:	1dfb      	adds	r3, r7, #7
    4e3a:	781b      	ldrb	r3, [r3, #0]
    4e3c:	1c18      	adds	r0, r3, #0
    4e3e:	4b09      	ldr	r3, [pc, #36]	; (4e64 <port_pin_toggle_output_level+0x38>)
    4e40:	4798      	blx	r3
    4e42:	1c03      	adds	r3, r0, #0
    4e44:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4e46:	1dfb      	adds	r3, r7, #7
    4e48:	781b      	ldrb	r3, [r3, #0]
    4e4a:	221f      	movs	r2, #31
    4e4c:	4013      	ands	r3, r2
    4e4e:	2201      	movs	r2, #1
    4e50:	409a      	lsls	r2, r3
    4e52:	1c13      	adds	r3, r2, #0
    4e54:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4e56:	68fb      	ldr	r3, [r7, #12]
    4e58:	68ba      	ldr	r2, [r7, #8]
    4e5a:	61da      	str	r2, [r3, #28]
}
    4e5c:	46bd      	mov	sp, r7
    4e5e:	b004      	add	sp, #16
    4e60:	bd80      	pop	{r7, pc}
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	00004e09 	.word	0x00004e09

00004e68 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b082      	sub	sp, #8
    4e6c:	af00      	add	r7, sp, #0
    4e6e:	1c02      	adds	r2, r0, #0
    4e70:	1dfb      	adds	r3, r7, #7
    4e72:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e74:	4b06      	ldr	r3, [pc, #24]	; (4e90 <system_interrupt_enable+0x28>)
    4e76:	1dfa      	adds	r2, r7, #7
    4e78:	7812      	ldrb	r2, [r2, #0]
    4e7a:	1c11      	adds	r1, r2, #0
    4e7c:	221f      	movs	r2, #31
    4e7e:	400a      	ands	r2, r1
    4e80:	2101      	movs	r1, #1
    4e82:	4091      	lsls	r1, r2
    4e84:	1c0a      	adds	r2, r1, #0
    4e86:	601a      	str	r2, [r3, #0]
}
    4e88:	46bd      	mov	sp, r7
    4e8a:	b002      	add	sp, #8
    4e8c:	bd80      	pop	{r7, pc}
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	e000e100 	.word	0xe000e100

00004e94 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4e94:	b580      	push	{r7, lr}
    4e96:	b084      	sub	sp, #16
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4e9c:	687b      	ldr	r3, [r7, #4]
    4e9e:	681b      	ldr	r3, [r3, #0]
    4ea0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4ea2:	68fb      	ldr	r3, [r7, #12]
    4ea4:	69db      	ldr	r3, [r3, #28]
    4ea6:	1e5a      	subs	r2, r3, #1
    4ea8:	4193      	sbcs	r3, r2
    4eaa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4eac:	1c18      	adds	r0, r3, #0
    4eae:	46bd      	mov	sp, r7
    4eb0:	b004      	add	sp, #16
    4eb2:	bd80      	pop	{r7, pc}

00004eb4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4eb4:	b580      	push	{r7, lr}
    4eb6:	b082      	sub	sp, #8
    4eb8:	af00      	add	r7, sp, #0
    4eba:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4ebc:	46c0      	nop			; (mov r8, r8)
    4ebe:	687b      	ldr	r3, [r7, #4]
    4ec0:	1c18      	adds	r0, r3, #0
    4ec2:	4b03      	ldr	r3, [pc, #12]	; (4ed0 <_usart_wait_for_sync+0x1c>)
    4ec4:	4798      	blx	r3
    4ec6:	1e03      	subs	r3, r0, #0
    4ec8:	d1f9      	bne.n	4ebe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4eca:	46bd      	mov	sp, r7
    4ecc:	b002      	add	sp, #8
    4ece:	bd80      	pop	{r7, pc}
    4ed0:	00004e95 	.word	0x00004e95

00004ed4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b082      	sub	sp, #8
    4ed8:	af00      	add	r7, sp, #0
    4eda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4edc:	687b      	ldr	r3, [r7, #4]
    4ede:	2280      	movs	r2, #128	; 0x80
    4ee0:	05d2      	lsls	r2, r2, #23
    4ee2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4ee4:	687b      	ldr	r3, [r7, #4]
    4ee6:	2200      	movs	r2, #0
    4ee8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	22ff      	movs	r2, #255	; 0xff
    4eee:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4ef0:	687b      	ldr	r3, [r7, #4]
    4ef2:	2200      	movs	r2, #0
    4ef4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4ef6:	687b      	ldr	r3, [r7, #4]
    4ef8:	2200      	movs	r2, #0
    4efa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    4efc:	687b      	ldr	r3, [r7, #4]
    4efe:	2296      	movs	r2, #150	; 0x96
    4f00:	0192      	lsls	r2, r2, #6
    4f02:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	2224      	movs	r2, #36	; 0x24
    4f08:	2101      	movs	r1, #1
    4f0a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	2225      	movs	r2, #37	; 0x25
    4f10:	2101      	movs	r1, #1
    4f12:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	2226      	movs	r2, #38	; 0x26
    4f18:	2100      	movs	r1, #0
    4f1a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    4f1c:	687b      	ldr	r3, [r7, #4]
    4f1e:	2227      	movs	r2, #39	; 0x27
    4f20:	2100      	movs	r1, #0
    4f22:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	2200      	movs	r2, #0
    4f28:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    4f2a:	687b      	ldr	r3, [r7, #4]
    4f2c:	2288      	movs	r2, #136	; 0x88
    4f2e:	0352      	lsls	r2, r2, #13
    4f30:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4f32:	687b      	ldr	r3, [r7, #4]
    4f34:	222c      	movs	r2, #44	; 0x2c
    4f36:	2100      	movs	r1, #0
    4f38:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    4f3a:	687b      	ldr	r3, [r7, #4]
    4f3c:	222d      	movs	r2, #45	; 0x2d
    4f3e:	2100      	movs	r1, #0
    4f40:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	2200      	movs	r2, #0
    4f46:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2200      	movs	r2, #0
    4f4c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    4f4e:	687b      	ldr	r3, [r7, #4]
    4f50:	2200      	movs	r2, #0
    4f52:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	2200      	movs	r2, #0
    4f58:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4f5a:	687b      	ldr	r3, [r7, #4]
    4f5c:	2200      	movs	r2, #0
    4f5e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	2200      	movs	r2, #0
    4f64:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4f66:	687b      	ldr	r3, [r7, #4]
    4f68:	2200      	movs	r2, #0
    4f6a:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	2200      	movs	r2, #0
    4f70:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4f72:	687b      	ldr	r3, [r7, #4]
    4f74:	2200      	movs	r2, #0
    4f76:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	2200      	movs	r2, #0
    4f7c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
    4f7e:	687b      	ldr	r3, [r7, #4]
    4f80:	2213      	movs	r2, #19
    4f82:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	2200      	movs	r2, #0
    4f88:	775a      	strb	r2, [r3, #29]
#endif
}
    4f8a:	46bd      	mov	sp, r7
    4f8c:	b002      	add	sp, #8
    4f8e:	bd80      	pop	{r7, pc}

00004f90 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b084      	sub	sp, #16
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	681b      	ldr	r3, [r3, #0]
    4f9c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4f9e:	687b      	ldr	r3, [r7, #4]
    4fa0:	681b      	ldr	r3, [r3, #0]
    4fa2:	1c18      	adds	r0, r3, #0
    4fa4:	4b09      	ldr	r3, [pc, #36]	; (4fcc <usart_enable+0x3c>)
    4fa6:	4798      	blx	r3
    4fa8:	1c03      	adds	r3, r0, #0
    4faa:	1c18      	adds	r0, r3, #0
    4fac:	4b08      	ldr	r3, [pc, #32]	; (4fd0 <usart_enable+0x40>)
    4fae:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	1c18      	adds	r0, r3, #0
    4fb4:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <usart_enable+0x44>)
    4fb6:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4fb8:	68fb      	ldr	r3, [r7, #12]
    4fba:	681b      	ldr	r3, [r3, #0]
    4fbc:	2202      	movs	r2, #2
    4fbe:	431a      	orrs	r2, r3
    4fc0:	68fb      	ldr	r3, [r7, #12]
    4fc2:	601a      	str	r2, [r3, #0]
}
    4fc4:	46bd      	mov	sp, r7
    4fc6:	b004      	add	sp, #16
    4fc8:	bd80      	pop	{r7, pc}
    4fca:	46c0      	nop			; (mov r8, r8)
    4fcc:	000012dd 	.word	0x000012dd
    4fd0:	00004e69 	.word	0x00004e69
    4fd4:	00004eb5 	.word	0x00004eb5

00004fd8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b084      	sub	sp, #16
    4fdc:	af00      	add	r7, sp, #0
    4fde:	60f8      	str	r0, [r7, #12]
    4fe0:	60b9      	str	r1, [r7, #8]
    4fe2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4fe4:	68f9      	ldr	r1, [r7, #12]
    4fe6:	68ba      	ldr	r2, [r7, #8]
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	1c08      	adds	r0, r1, #0
    4fec:	1c11      	adds	r1, r2, #0
    4fee:	1c1a      	adds	r2, r3, #0
    4ff0:	4b05      	ldr	r3, [pc, #20]	; (5008 <usart_serial_init+0x30>)
    4ff2:	4798      	blx	r3
    4ff4:	1e03      	subs	r3, r0, #0
    4ff6:	d101      	bne.n	4ffc <usart_serial_init+0x24>
		return true;
    4ff8:	2301      	movs	r3, #1
    4ffa:	e000      	b.n	4ffe <usart_serial_init+0x26>
	}
	else {
		return false;
    4ffc:	2300      	movs	r3, #0
	}
}
    4ffe:	1c18      	adds	r0, r3, #0
    5000:	46bd      	mov	sp, r7
    5002:	b004      	add	sp, #16
    5004:	bd80      	pop	{r7, pc}
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	00001789 	.word	0x00001789

0000500c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    500c:	b580      	push	{r7, lr}
    500e:	b082      	sub	sp, #8
    5010:	af00      	add	r7, sp, #0
    5012:	6078      	str	r0, [r7, #4]
    5014:	1c0a      	adds	r2, r1, #0
    5016:	1cfb      	adds	r3, r7, #3
    5018:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    501a:	46c0      	nop			; (mov r8, r8)
    501c:	1cfb      	adds	r3, r7, #3
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	b29b      	uxth	r3, r3
    5022:	687a      	ldr	r2, [r7, #4]
    5024:	1c10      	adds	r0, r2, #0
    5026:	1c19      	adds	r1, r3, #0
    5028:	4b04      	ldr	r3, [pc, #16]	; (503c <usart_serial_putchar+0x30>)
    502a:	4798      	blx	r3
    502c:	1e03      	subs	r3, r0, #0
    502e:	d1f5      	bne.n	501c <usart_serial_putchar+0x10>

	return STATUS_OK;
    5030:	2300      	movs	r3, #0
}
    5032:	1c18      	adds	r0, r3, #0
    5034:	46bd      	mov	sp, r7
    5036:	b002      	add	sp, #8
    5038:	bd80      	pop	{r7, pc}
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	000019f9 	.word	0x000019f9

00005040 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5040:	b580      	push	{r7, lr}
    5042:	b084      	sub	sp, #16
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
    5048:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    504a:	230e      	movs	r3, #14
    504c:	18fb      	adds	r3, r7, r3
    504e:	2200      	movs	r2, #0
    5050:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	687a      	ldr	r2, [r7, #4]
    5056:	230e      	movs	r3, #14
    5058:	18fb      	adds	r3, r7, r3
    505a:	1c10      	adds	r0, r2, #0
    505c:	1c19      	adds	r1, r3, #0
    505e:	4b06      	ldr	r3, [pc, #24]	; (5078 <usart_serial_getchar+0x38>)
    5060:	4798      	blx	r3
    5062:	1e03      	subs	r3, r0, #0
    5064:	d1f6      	bne.n	5054 <usart_serial_getchar+0x14>

	*c = temp;
    5066:	230e      	movs	r3, #14
    5068:	18fb      	adds	r3, r7, r3
    506a:	881b      	ldrh	r3, [r3, #0]
    506c:	b2da      	uxtb	r2, r3
    506e:	683b      	ldr	r3, [r7, #0]
    5070:	701a      	strb	r2, [r3, #0]
}
    5072:	46bd      	mov	sp, r7
    5074:	b004      	add	sp, #16
    5076:	bd80      	pop	{r7, pc}
    5078:	00001a5d 	.word	0x00001a5d

0000507c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    507c:	b580      	push	{r7, lr}
    507e:	b084      	sub	sp, #16
    5080:	af00      	add	r7, sp, #0
    5082:	60f8      	str	r0, [r7, #12]
    5084:	60b9      	str	r1, [r7, #8]
    5086:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    5088:	4b10      	ldr	r3, [pc, #64]	; (50cc <stdio_serial_init+0x50>)
    508a:	68fa      	ldr	r2, [r7, #12]
    508c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    508e:	4b10      	ldr	r3, [pc, #64]	; (50d0 <stdio_serial_init+0x54>)
    5090:	4a10      	ldr	r2, [pc, #64]	; (50d4 <stdio_serial_init+0x58>)
    5092:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5094:	4b10      	ldr	r3, [pc, #64]	; (50d8 <stdio_serial_init+0x5c>)
    5096:	4a11      	ldr	r2, [pc, #68]	; (50dc <stdio_serial_init+0x60>)
    5098:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    509a:	68f9      	ldr	r1, [r7, #12]
    509c:	68ba      	ldr	r2, [r7, #8]
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	1c08      	adds	r0, r1, #0
    50a2:	1c11      	adds	r1, r2, #0
    50a4:	1c1a      	adds	r2, r3, #0
    50a6:	4b0e      	ldr	r3, [pc, #56]	; (50e0 <stdio_serial_init+0x64>)
    50a8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    50aa:	4b0e      	ldr	r3, [pc, #56]	; (50e4 <stdio_serial_init+0x68>)
    50ac:	681b      	ldr	r3, [r3, #0]
    50ae:	689b      	ldr	r3, [r3, #8]
    50b0:	1c18      	adds	r0, r3, #0
    50b2:	2100      	movs	r1, #0
    50b4:	4b0c      	ldr	r3, [pc, #48]	; (50e8 <stdio_serial_init+0x6c>)
    50b6:	4798      	blx	r3
	setbuf(stdin, NULL);
    50b8:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <stdio_serial_init+0x68>)
    50ba:	681b      	ldr	r3, [r3, #0]
    50bc:	685b      	ldr	r3, [r3, #4]
    50be:	1c18      	adds	r0, r3, #0
    50c0:	2100      	movs	r1, #0
    50c2:	4b09      	ldr	r3, [pc, #36]	; (50e8 <stdio_serial_init+0x6c>)
    50c4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    50c6:	46bd      	mov	sp, r7
    50c8:	b004      	add	sp, #16
    50ca:	bd80      	pop	{r7, pc}
    50cc:	20003cfc 	.word	0x20003cfc
    50d0:	20003cf8 	.word	0x20003cf8
    50d4:	0000500d 	.word	0x0000500d
    50d8:	20003cf4 	.word	0x20003cf4
    50dc:	00005041 	.word	0x00005041
    50e0:	00004fd9 	.word	0x00004fd9
    50e4:	2000006c 	.word	0x2000006c
    50e8:	0000636d 	.word	0x0000636d

000050ec <configure_console>:

#include "main.h"

//extern void xPortSysTickHandler(void);

static void configure_console(void) {
    50ec:	b580      	push	{r7, lr}
    50ee:	b090      	sub	sp, #64	; 0x40
    50f0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    50f2:	1c3b      	adds	r3, r7, #0
    50f4:	1c18      	adds	r0, r3, #0
    50f6:	4b13      	ldr	r3, [pc, #76]	; (5144 <configure_console+0x58>)
    50f8:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    50fa:	1c3b      	adds	r3, r7, #0
    50fc:	2280      	movs	r2, #128	; 0x80
    50fe:	0352      	lsls	r2, r2, #13
    5100:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    5102:	1c3b      	adds	r3, r7, #0
    5104:	4a10      	ldr	r2, [pc, #64]	; (5148 <configure_console+0x5c>)
    5106:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    5108:	1c3b      	adds	r3, r7, #0
    510a:	4a10      	ldr	r2, [pc, #64]	; (514c <configure_console+0x60>)
    510c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    510e:	1c3b      	adds	r3, r7, #0
    5110:	2201      	movs	r2, #1
    5112:	4252      	negs	r2, r2
    5114:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    5116:	1c3b      	adds	r3, r7, #0
    5118:	2201      	movs	r2, #1
    511a:	4252      	negs	r2, r2
    511c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    511e:	1c3b      	adds	r3, r7, #0
    5120:	2296      	movs	r2, #150	; 0x96
    5122:	0212      	lsls	r2, r2, #8
    5124:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE,
    5126:	4a0a      	ldr	r2, [pc, #40]	; (5150 <configure_console+0x64>)
    5128:	490a      	ldr	r1, [pc, #40]	; (5154 <configure_console+0x68>)
    512a:	1c3b      	adds	r3, r7, #0
    512c:	1c10      	adds	r0, r2, #0
    512e:	1c1a      	adds	r2, r3, #0
    5130:	4b09      	ldr	r3, [pc, #36]	; (5158 <configure_console+0x6c>)
    5132:	4798      	blx	r3
	&usart_conf);
	usart_enable(&cdc_uart_module);
    5134:	4b06      	ldr	r3, [pc, #24]	; (5150 <configure_console+0x64>)
    5136:	1c18      	adds	r0, r3, #0
    5138:	4b08      	ldr	r3, [pc, #32]	; (515c <configure_console+0x70>)
    513a:	4798      	blx	r3
}
    513c:	46bd      	mov	sp, r7
    513e:	b010      	add	sp, #64	; 0x40
    5140:	bd80      	pop	{r7, pc}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	00004ed5 	.word	0x00004ed5
    5148:	00160002 	.word	0x00160002
    514c:	00170002 	.word	0x00170002
    5150:	20003ca0 	.word	0x20003ca0
    5154:	42001400 	.word	0x42001400
    5158:	0000507d 	.word	0x0000507d
    515c:	00004f91 	.word	0x00004f91

00005160 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
    5160:	b580      	push	{r7, lr}
    5162:	b082      	sub	sp, #8
    5164:	af00      	add	r7, sp, #0
    5166:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);

    configure_console();
    5168:	4b05      	ldr	r3, [pc, #20]	; (5180 <task_monitor+0x20>)
    516a:	4798      	blx	r3
	for (;;) {
		printf("hi");
    516c:	4b05      	ldr	r3, [pc, #20]	; (5184 <task_monitor+0x24>)
    516e:	1c18      	adds	r0, r3, #0
    5170:	4b05      	ldr	r3, [pc, #20]	; (5188 <task_monitor+0x28>)
    5172:	4798      	blx	r3
		vTaskDelay(1000);
    5174:	23fa      	movs	r3, #250	; 0xfa
    5176:	009b      	lsls	r3, r3, #2
    5178:	1c18      	adds	r0, r3, #0
    517a:	4b04      	ldr	r3, [pc, #16]	; (518c <task_monitor+0x2c>)
    517c:	4798      	blx	r3
	}
    517e:	e7f5      	b.n	516c <task_monitor+0xc>
    5180:	000050ed 	.word	0x000050ed
    5184:	00007430 	.word	0x00007430
    5188:	00006339 	.word	0x00006339
    518c:	00002ecd 	.word	0x00002ecd

00005190 <task_led>:

/**
 * \brief This task, when activated, make LED blink at a fixed rate
 */
static void task_led(void *pvParameters)
{
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
	for (;;) {
		//printf("blinking\n");
	#if SAM4CM
		LED_Toggle(LED4);
	#else
		LED_Toggle(LED0);
    5198:	203e      	movs	r0, #62	; 0x3e
    519a:	4b04      	ldr	r3, [pc, #16]	; (51ac <task_led+0x1c>)
    519c:	4798      	blx	r3
	#endif
		vTaskDelay(1000);
    519e:	23fa      	movs	r3, #250	; 0xfa
    51a0:	009b      	lsls	r3, r3, #2
    51a2:	1c18      	adds	r0, r3, #0
    51a4:	4b02      	ldr	r3, [pc, #8]	; (51b0 <task_led+0x20>)
    51a6:	4798      	blx	r3
	}
    51a8:	e7f6      	b.n	5198 <task_led+0x8>
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	00004e2d 	.word	0x00004e2d
    51b0:	00002ecd 	.word	0x00002ecd

000051b4 <task_adc_read>:
}

static void task_adc_read(void *pvParameters) {
    51b4:	b580      	push	{r7, lr}
    51b6:	b082      	sub	sp, #8
    51b8:	af00      	add	r7, sp, #0
    51ba:	6078      	str	r0, [r7, #4]
	UNUSED(pvParameters);
	for (;;) {
		
	}
    51bc:	e7fe      	b.n	51bc <task_adc_read+0x8>
    51be:	46c0      	nop			; (mov r8, r8)

000051c0 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{	
    51c0:	b590      	push	{r4, r7, lr}
    51c2:	b089      	sub	sp, #36	; 0x24
    51c4:	af04      	add	r7, sp, #16
	
	
	
	/* Initilize the SAM system */
	system_init();
    51c6:	4b36      	ldr	r3, [pc, #216]	; (52a0 <main+0xe0>)
    51c8:	4798      	blx	r3

	/* Initialize the console uart */
	configure_console();
    51ca:	4b36      	ldr	r3, [pc, #216]	; (52a4 <main+0xe4>)
    51cc:	4798      	blx	r3

	/* Output demo infomation. */
	printf("-- Freertos Example --\n\r");
    51ce:	4b36      	ldr	r3, [pc, #216]	; (52a8 <main+0xe8>)
    51d0:	1c18      	adds	r0, r3, #0
    51d2:	4b36      	ldr	r3, [pc, #216]	; (52ac <main+0xec>)
    51d4:	4798      	blx	r3
	printf("-- %s\n\r", BOARD_NAME);
    51d6:	4a36      	ldr	r2, [pc, #216]	; (52b0 <main+0xf0>)
    51d8:	4b36      	ldr	r3, [pc, #216]	; (52b4 <main+0xf4>)
    51da:	1c10      	adds	r0, r2, #0
    51dc:	1c19      	adds	r1, r3, #0
    51de:	4b33      	ldr	r3, [pc, #204]	; (52ac <main+0xec>)
    51e0:	4798      	blx	r3
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
    51e2:	4935      	ldr	r1, [pc, #212]	; (52b8 <main+0xf8>)
    51e4:	4a35      	ldr	r2, [pc, #212]	; (52bc <main+0xfc>)
    51e6:	4b36      	ldr	r3, [pc, #216]	; (52c0 <main+0x100>)
    51e8:	1c08      	adds	r0, r1, #0
    51ea:	1c11      	adds	r1, r2, #0
    51ec:	1c1a      	adds	r2, r3, #0
    51ee:	4b2f      	ldr	r3, [pc, #188]	; (52ac <main+0xec>)
    51f0:	4798      	blx	r3
	
	struct adc_module temp_instance;
	configure_adc(&temp_instance);
    51f2:	1c3b      	adds	r3, r7, #0
    51f4:	1c18      	adds	r0, r3, #0
    51f6:	4b33      	ldr	r3, [pc, #204]	; (52c4 <main+0x104>)
    51f8:	4798      	blx	r3
	int i = 0;
    51fa:	2300      	movs	r3, #0
    51fc:	60fb      	str	r3, [r7, #12]
	while(i<10){
    51fe:	e013      	b.n	5228 <main+0x68>
		int x = readVoltagemV(temp_instance);
    5200:	1c3b      	adds	r3, r7, #0
    5202:	6818      	ldr	r0, [r3, #0]
    5204:	6859      	ldr	r1, [r3, #4]
    5206:	4b30      	ldr	r3, [pc, #192]	; (52c8 <main+0x108>)
    5208:	4798      	blx	r3
    520a:	1c02      	adds	r2, r0, #0
    520c:	4b2f      	ldr	r3, [pc, #188]	; (52cc <main+0x10c>)
    520e:	1c10      	adds	r0, r2, #0
    5210:	4798      	blx	r3
    5212:	1c03      	adds	r3, r0, #0
    5214:	60bb      	str	r3, [r7, #8]
		printf("%d\n\r",x);
    5216:	4a2e      	ldr	r2, [pc, #184]	; (52d0 <main+0x110>)
    5218:	68bb      	ldr	r3, [r7, #8]
    521a:	1c10      	adds	r0, r2, #0
    521c:	1c19      	adds	r1, r3, #0
    521e:	4b23      	ldr	r3, [pc, #140]	; (52ac <main+0xec>)
    5220:	4798      	blx	r3
		i++;
    5222:	68fb      	ldr	r3, [r7, #12]
    5224:	3301      	adds	r3, #1
    5226:	60fb      	str	r3, [r7, #12]
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
	
	struct adc_module temp_instance;
	configure_adc(&temp_instance);
	int i = 0;
	while(i<10){
    5228:	68fb      	ldr	r3, [r7, #12]
    522a:	2b09      	cmp	r3, #9
    522c:	dde8      	ble.n	5200 <main+0x40>
		int x = readVoltagemV(temp_instance);
		printf("%d\n\r",x);
		i++;
	}
	
	printf("pause point");
    522e:	4b29      	ldr	r3, [pc, #164]	; (52d4 <main+0x114>)
    5230:	1c18      	adds	r0, r3, #0
    5232:	4b1e      	ldr	r3, [pc, #120]	; (52ac <main+0xec>)
    5234:	4798      	blx	r3
	
	

	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
    5236:	4828      	ldr	r0, [pc, #160]	; (52d8 <main+0x118>)
    5238:	4928      	ldr	r1, [pc, #160]	; (52dc <main+0x11c>)
    523a:	2380      	movs	r3, #128	; 0x80
    523c:	009a      	lsls	r2, r3, #2
    523e:	2300      	movs	r3, #0
    5240:	9300      	str	r3, [sp, #0]
    5242:	2300      	movs	r3, #0
    5244:	9301      	str	r3, [sp, #4]
    5246:	2300      	movs	r3, #0
    5248:	9302      	str	r3, [sp, #8]
    524a:	2300      	movs	r3, #0
    524c:	9303      	str	r3, [sp, #12]
    524e:	2300      	movs	r3, #0
    5250:	4c23      	ldr	r4, [pc, #140]	; (52e0 <main+0x120>)
    5252:	47a0      	blx	r4
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create Monitor task\r\n");
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
    5254:	4823      	ldr	r0, [pc, #140]	; (52e4 <main+0x124>)
    5256:	4924      	ldr	r1, [pc, #144]	; (52e8 <main+0x128>)
    5258:	2380      	movs	r3, #128	; 0x80
    525a:	005a      	lsls	r2, r3, #1
    525c:	2300      	movs	r3, #0
    525e:	9300      	str	r3, [sp, #0]
    5260:	2300      	movs	r3, #0
    5262:	9301      	str	r3, [sp, #4]
    5264:	2300      	movs	r3, #0
    5266:	9302      	str	r3, [sp, #8]
    5268:	2300      	movs	r3, #0
    526a:	9303      	str	r3, [sp, #12]
    526c:	2300      	movs	r3, #0
    526e:	4c1c      	ldr	r4, [pc, #112]	; (52e0 <main+0x120>)
    5270:	47a0      	blx	r4
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}
	
	/* Create task to make led blink */
	if (xTaskCreate(task_adc_read, "ADC", TASK_ADC_STACK_SIZE, NULL,
    5272:	481e      	ldr	r0, [pc, #120]	; (52ec <main+0x12c>)
    5274:	491e      	ldr	r1, [pc, #120]	; (52f0 <main+0x130>)
    5276:	2380      	movs	r3, #128	; 0x80
    5278:	00da      	lsls	r2, r3, #3
    527a:	2300      	movs	r3, #0
    527c:	9300      	str	r3, [sp, #0]
    527e:	2300      	movs	r3, #0
    5280:	9301      	str	r3, [sp, #4]
    5282:	2300      	movs	r3, #0
    5284:	9302      	str	r3, [sp, #8]
    5286:	2300      	movs	r3, #0
    5288:	9303      	str	r3, [sp, #12]
    528a:	2300      	movs	r3, #0
    528c:	4c14      	ldr	r4, [pc, #80]	; (52e0 <main+0x120>)
    528e:	47a0      	blx	r4
	TASK_ADC_STACK_PRIORITY, NULL) != pdPASS) {
		//printf("Failed to create test led task\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
    5290:	4b18      	ldr	r3, [pc, #96]	; (52f4 <main+0x134>)
    5292:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
    5294:	2300      	movs	r3, #0
    5296:	1c18      	adds	r0, r3, #0
    5298:	46bd      	mov	sp, r7
    529a:	b005      	add	sp, #20
    529c:	bd90      	pop	{r4, r7, pc}
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	00004c5d 	.word	0x00004c5d
    52a4:	000050ed 	.word	0x000050ed
    52a8:	00007434 	.word	0x00007434
    52ac:	00006339 	.word	0x00006339
    52b0:	00007450 	.word	0x00007450
    52b4:	00007458 	.word	0x00007458
    52b8:	0000746c 	.word	0x0000746c
    52bc:	00007484 	.word	0x00007484
    52c0:	00007490 	.word	0x00007490
    52c4:	000003cd 	.word	0x000003cd
    52c8:	00000439 	.word	0x00000439
    52cc:	00005471 	.word	0x00005471
    52d0:	0000749c 	.word	0x0000749c
    52d4:	000074a4 	.word	0x000074a4
    52d8:	00005161 	.word	0x00005161
    52dc:	000074b0 	.word	0x000074b0
    52e0:	00002d3d 	.word	0x00002d3d
    52e4:	00005191 	.word	0x00005191
    52e8:	000074b8 	.word	0x000074b8
    52ec:	000051b5 	.word	0x000051b5
    52f0:	000074bc 	.word	0x000074bc
    52f4:	00002f45 	.word	0x00002f45

000052f8 <__aeabi_uidiv>:
    52f8:	2200      	movs	r2, #0
    52fa:	0843      	lsrs	r3, r0, #1
    52fc:	428b      	cmp	r3, r1
    52fe:	d374      	bcc.n	53ea <__aeabi_uidiv+0xf2>
    5300:	0903      	lsrs	r3, r0, #4
    5302:	428b      	cmp	r3, r1
    5304:	d35f      	bcc.n	53c6 <__aeabi_uidiv+0xce>
    5306:	0a03      	lsrs	r3, r0, #8
    5308:	428b      	cmp	r3, r1
    530a:	d344      	bcc.n	5396 <__aeabi_uidiv+0x9e>
    530c:	0b03      	lsrs	r3, r0, #12
    530e:	428b      	cmp	r3, r1
    5310:	d328      	bcc.n	5364 <__aeabi_uidiv+0x6c>
    5312:	0c03      	lsrs	r3, r0, #16
    5314:	428b      	cmp	r3, r1
    5316:	d30d      	bcc.n	5334 <__aeabi_uidiv+0x3c>
    5318:	22ff      	movs	r2, #255	; 0xff
    531a:	0209      	lsls	r1, r1, #8
    531c:	ba12      	rev	r2, r2
    531e:	0c03      	lsrs	r3, r0, #16
    5320:	428b      	cmp	r3, r1
    5322:	d302      	bcc.n	532a <__aeabi_uidiv+0x32>
    5324:	1212      	asrs	r2, r2, #8
    5326:	0209      	lsls	r1, r1, #8
    5328:	d065      	beq.n	53f6 <__aeabi_uidiv+0xfe>
    532a:	0b03      	lsrs	r3, r0, #12
    532c:	428b      	cmp	r3, r1
    532e:	d319      	bcc.n	5364 <__aeabi_uidiv+0x6c>
    5330:	e000      	b.n	5334 <__aeabi_uidiv+0x3c>
    5332:	0a09      	lsrs	r1, r1, #8
    5334:	0bc3      	lsrs	r3, r0, #15
    5336:	428b      	cmp	r3, r1
    5338:	d301      	bcc.n	533e <__aeabi_uidiv+0x46>
    533a:	03cb      	lsls	r3, r1, #15
    533c:	1ac0      	subs	r0, r0, r3
    533e:	4152      	adcs	r2, r2
    5340:	0b83      	lsrs	r3, r0, #14
    5342:	428b      	cmp	r3, r1
    5344:	d301      	bcc.n	534a <__aeabi_uidiv+0x52>
    5346:	038b      	lsls	r3, r1, #14
    5348:	1ac0      	subs	r0, r0, r3
    534a:	4152      	adcs	r2, r2
    534c:	0b43      	lsrs	r3, r0, #13
    534e:	428b      	cmp	r3, r1
    5350:	d301      	bcc.n	5356 <__aeabi_uidiv+0x5e>
    5352:	034b      	lsls	r3, r1, #13
    5354:	1ac0      	subs	r0, r0, r3
    5356:	4152      	adcs	r2, r2
    5358:	0b03      	lsrs	r3, r0, #12
    535a:	428b      	cmp	r3, r1
    535c:	d301      	bcc.n	5362 <__aeabi_uidiv+0x6a>
    535e:	030b      	lsls	r3, r1, #12
    5360:	1ac0      	subs	r0, r0, r3
    5362:	4152      	adcs	r2, r2
    5364:	0ac3      	lsrs	r3, r0, #11
    5366:	428b      	cmp	r3, r1
    5368:	d301      	bcc.n	536e <__aeabi_uidiv+0x76>
    536a:	02cb      	lsls	r3, r1, #11
    536c:	1ac0      	subs	r0, r0, r3
    536e:	4152      	adcs	r2, r2
    5370:	0a83      	lsrs	r3, r0, #10
    5372:	428b      	cmp	r3, r1
    5374:	d301      	bcc.n	537a <__aeabi_uidiv+0x82>
    5376:	028b      	lsls	r3, r1, #10
    5378:	1ac0      	subs	r0, r0, r3
    537a:	4152      	adcs	r2, r2
    537c:	0a43      	lsrs	r3, r0, #9
    537e:	428b      	cmp	r3, r1
    5380:	d301      	bcc.n	5386 <__aeabi_uidiv+0x8e>
    5382:	024b      	lsls	r3, r1, #9
    5384:	1ac0      	subs	r0, r0, r3
    5386:	4152      	adcs	r2, r2
    5388:	0a03      	lsrs	r3, r0, #8
    538a:	428b      	cmp	r3, r1
    538c:	d301      	bcc.n	5392 <__aeabi_uidiv+0x9a>
    538e:	020b      	lsls	r3, r1, #8
    5390:	1ac0      	subs	r0, r0, r3
    5392:	4152      	adcs	r2, r2
    5394:	d2cd      	bcs.n	5332 <__aeabi_uidiv+0x3a>
    5396:	09c3      	lsrs	r3, r0, #7
    5398:	428b      	cmp	r3, r1
    539a:	d301      	bcc.n	53a0 <__aeabi_uidiv+0xa8>
    539c:	01cb      	lsls	r3, r1, #7
    539e:	1ac0      	subs	r0, r0, r3
    53a0:	4152      	adcs	r2, r2
    53a2:	0983      	lsrs	r3, r0, #6
    53a4:	428b      	cmp	r3, r1
    53a6:	d301      	bcc.n	53ac <__aeabi_uidiv+0xb4>
    53a8:	018b      	lsls	r3, r1, #6
    53aa:	1ac0      	subs	r0, r0, r3
    53ac:	4152      	adcs	r2, r2
    53ae:	0943      	lsrs	r3, r0, #5
    53b0:	428b      	cmp	r3, r1
    53b2:	d301      	bcc.n	53b8 <__aeabi_uidiv+0xc0>
    53b4:	014b      	lsls	r3, r1, #5
    53b6:	1ac0      	subs	r0, r0, r3
    53b8:	4152      	adcs	r2, r2
    53ba:	0903      	lsrs	r3, r0, #4
    53bc:	428b      	cmp	r3, r1
    53be:	d301      	bcc.n	53c4 <__aeabi_uidiv+0xcc>
    53c0:	010b      	lsls	r3, r1, #4
    53c2:	1ac0      	subs	r0, r0, r3
    53c4:	4152      	adcs	r2, r2
    53c6:	08c3      	lsrs	r3, r0, #3
    53c8:	428b      	cmp	r3, r1
    53ca:	d301      	bcc.n	53d0 <__aeabi_uidiv+0xd8>
    53cc:	00cb      	lsls	r3, r1, #3
    53ce:	1ac0      	subs	r0, r0, r3
    53d0:	4152      	adcs	r2, r2
    53d2:	0883      	lsrs	r3, r0, #2
    53d4:	428b      	cmp	r3, r1
    53d6:	d301      	bcc.n	53dc <__aeabi_uidiv+0xe4>
    53d8:	008b      	lsls	r3, r1, #2
    53da:	1ac0      	subs	r0, r0, r3
    53dc:	4152      	adcs	r2, r2
    53de:	0843      	lsrs	r3, r0, #1
    53e0:	428b      	cmp	r3, r1
    53e2:	d301      	bcc.n	53e8 <__aeabi_uidiv+0xf0>
    53e4:	004b      	lsls	r3, r1, #1
    53e6:	1ac0      	subs	r0, r0, r3
    53e8:	4152      	adcs	r2, r2
    53ea:	1a41      	subs	r1, r0, r1
    53ec:	d200      	bcs.n	53f0 <__aeabi_uidiv+0xf8>
    53ee:	4601      	mov	r1, r0
    53f0:	4152      	adcs	r2, r2
    53f2:	4610      	mov	r0, r2
    53f4:	4770      	bx	lr
    53f6:	e7ff      	b.n	53f8 <__aeabi_uidiv+0x100>
    53f8:	b501      	push	{r0, lr}
    53fa:	2000      	movs	r0, #0
    53fc:	f000 f80c 	bl	5418 <__aeabi_idiv0>
    5400:	bd02      	pop	{r1, pc}
    5402:	46c0      	nop			; (mov r8, r8)

00005404 <__aeabi_uidivmod>:
    5404:	2900      	cmp	r1, #0
    5406:	d0f7      	beq.n	53f8 <__aeabi_uidiv+0x100>
    5408:	b503      	push	{r0, r1, lr}
    540a:	f7ff ff75 	bl	52f8 <__aeabi_uidiv>
    540e:	bc0e      	pop	{r1, r2, r3}
    5410:	4342      	muls	r2, r0
    5412:	1a89      	subs	r1, r1, r2
    5414:	4718      	bx	r3
    5416:	46c0      	nop			; (mov r8, r8)

00005418 <__aeabi_idiv0>:
    5418:	4770      	bx	lr
    541a:	46c0      	nop			; (mov r8, r8)

0000541c <__aeabi_lmul>:
    541c:	b5f0      	push	{r4, r5, r6, r7, lr}
    541e:	464f      	mov	r7, r9
    5420:	4646      	mov	r6, r8
    5422:	0405      	lsls	r5, r0, #16
    5424:	0c2d      	lsrs	r5, r5, #16
    5426:	1c2c      	adds	r4, r5, #0
    5428:	b4c0      	push	{r6, r7}
    542a:	0417      	lsls	r7, r2, #16
    542c:	0c16      	lsrs	r6, r2, #16
    542e:	0c3f      	lsrs	r7, r7, #16
    5430:	4699      	mov	r9, r3
    5432:	0c03      	lsrs	r3, r0, #16
    5434:	437c      	muls	r4, r7
    5436:	4375      	muls	r5, r6
    5438:	435f      	muls	r7, r3
    543a:	4373      	muls	r3, r6
    543c:	197d      	adds	r5, r7, r5
    543e:	0c26      	lsrs	r6, r4, #16
    5440:	19ad      	adds	r5, r5, r6
    5442:	469c      	mov	ip, r3
    5444:	42af      	cmp	r7, r5
    5446:	d903      	bls.n	5450 <__aeabi_lmul+0x34>
    5448:	2380      	movs	r3, #128	; 0x80
    544a:	025b      	lsls	r3, r3, #9
    544c:	4698      	mov	r8, r3
    544e:	44c4      	add	ip, r8
    5450:	464b      	mov	r3, r9
    5452:	4351      	muls	r1, r2
    5454:	4343      	muls	r3, r0
    5456:	0424      	lsls	r4, r4, #16
    5458:	0c2e      	lsrs	r6, r5, #16
    545a:	0c24      	lsrs	r4, r4, #16
    545c:	042d      	lsls	r5, r5, #16
    545e:	4466      	add	r6, ip
    5460:	192c      	adds	r4, r5, r4
    5462:	1859      	adds	r1, r3, r1
    5464:	1989      	adds	r1, r1, r6
    5466:	1c20      	adds	r0, r4, #0
    5468:	bc0c      	pop	{r2, r3}
    546a:	4690      	mov	r8, r2
    546c:	4699      	mov	r9, r3
    546e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005470 <__aeabi_f2iz>:
    5470:	0242      	lsls	r2, r0, #9
    5472:	0a51      	lsrs	r1, r2, #9
    5474:	0042      	lsls	r2, r0, #1
    5476:	0fc3      	lsrs	r3, r0, #31
    5478:	0e12      	lsrs	r2, r2, #24
    547a:	2000      	movs	r0, #0
    547c:	2a7e      	cmp	r2, #126	; 0x7e
    547e:	dd0d      	ble.n	549c <__aeabi_f2iz+0x2c>
    5480:	2a9d      	cmp	r2, #157	; 0x9d
    5482:	dc0c      	bgt.n	549e <__aeabi_f2iz+0x2e>
    5484:	2080      	movs	r0, #128	; 0x80
    5486:	0400      	lsls	r0, r0, #16
    5488:	4301      	orrs	r1, r0
    548a:	2a95      	cmp	r2, #149	; 0x95
    548c:	dc0a      	bgt.n	54a4 <__aeabi_f2iz+0x34>
    548e:	2096      	movs	r0, #150	; 0x96
    5490:	1a82      	subs	r2, r0, r2
    5492:	40d1      	lsrs	r1, r2
    5494:	1c0a      	adds	r2, r1, #0
    5496:	4258      	negs	r0, r3
    5498:	4042      	eors	r2, r0
    549a:	18d0      	adds	r0, r2, r3
    549c:	4770      	bx	lr
    549e:	4a03      	ldr	r2, [pc, #12]	; (54ac <__aeabi_f2iz+0x3c>)
    54a0:	1898      	adds	r0, r3, r2
    54a2:	e7fb      	b.n	549c <__aeabi_f2iz+0x2c>
    54a4:	3a96      	subs	r2, #150	; 0x96
    54a6:	4091      	lsls	r1, r2
    54a8:	1c0a      	adds	r2, r1, #0
    54aa:	e7f4      	b.n	5496 <__aeabi_f2iz+0x26>
    54ac:	7fffffff 	.word	0x7fffffff

000054b0 <__aeabi_ui2f>:
    54b0:	b510      	push	{r4, lr}
    54b2:	1e04      	subs	r4, r0, #0
    54b4:	d035      	beq.n	5522 <__aeabi_ui2f+0x72>
    54b6:	f000 fee9 	bl	628c <__clzsi2>
    54ba:	219e      	movs	r1, #158	; 0x9e
    54bc:	1a09      	subs	r1, r1, r0
    54be:	2996      	cmp	r1, #150	; 0x96
    54c0:	dc09      	bgt.n	54d6 <__aeabi_ui2f+0x26>
    54c2:	2808      	cmp	r0, #8
    54c4:	dd30      	ble.n	5528 <__aeabi_ui2f+0x78>
    54c6:	1c02      	adds	r2, r0, #0
    54c8:	1c23      	adds	r3, r4, #0
    54ca:	3a08      	subs	r2, #8
    54cc:	4093      	lsls	r3, r2
    54ce:	025b      	lsls	r3, r3, #9
    54d0:	0a5b      	lsrs	r3, r3, #9
    54d2:	b2c8      	uxtb	r0, r1
    54d4:	e020      	b.n	5518 <__aeabi_ui2f+0x68>
    54d6:	2999      	cmp	r1, #153	; 0x99
    54d8:	dd0c      	ble.n	54f4 <__aeabi_ui2f+0x44>
    54da:	2205      	movs	r2, #5
    54dc:	1c23      	adds	r3, r4, #0
    54de:	1a12      	subs	r2, r2, r0
    54e0:	40d3      	lsrs	r3, r2
    54e2:	1c1a      	adds	r2, r3, #0
    54e4:	1c03      	adds	r3, r0, #0
    54e6:	331b      	adds	r3, #27
    54e8:	409c      	lsls	r4, r3
    54ea:	1c23      	adds	r3, r4, #0
    54ec:	1e5c      	subs	r4, r3, #1
    54ee:	41a3      	sbcs	r3, r4
    54f0:	4313      	orrs	r3, r2
    54f2:	1c1c      	adds	r4, r3, #0
    54f4:	2805      	cmp	r0, #5
    54f6:	dd01      	ble.n	54fc <__aeabi_ui2f+0x4c>
    54f8:	1f43      	subs	r3, r0, #5
    54fa:	409c      	lsls	r4, r3
    54fc:	4b0f      	ldr	r3, [pc, #60]	; (553c <__aeabi_ui2f+0x8c>)
    54fe:	4023      	ands	r3, r4
    5500:	0762      	lsls	r2, r4, #29
    5502:	d004      	beq.n	550e <__aeabi_ui2f+0x5e>
    5504:	220f      	movs	r2, #15
    5506:	4014      	ands	r4, r2
    5508:	2c04      	cmp	r4, #4
    550a:	d000      	beq.n	550e <__aeabi_ui2f+0x5e>
    550c:	3304      	adds	r3, #4
    550e:	015a      	lsls	r2, r3, #5
    5510:	d40e      	bmi.n	5530 <__aeabi_ui2f+0x80>
    5512:	019b      	lsls	r3, r3, #6
    5514:	0a5b      	lsrs	r3, r3, #9
    5516:	b2c8      	uxtb	r0, r1
    5518:	025b      	lsls	r3, r3, #9
    551a:	0a5b      	lsrs	r3, r3, #9
    551c:	05c0      	lsls	r0, r0, #23
    551e:	4318      	orrs	r0, r3
    5520:	bd10      	pop	{r4, pc}
    5522:	2000      	movs	r0, #0
    5524:	2300      	movs	r3, #0
    5526:	e7f7      	b.n	5518 <__aeabi_ui2f+0x68>
    5528:	0263      	lsls	r3, r4, #9
    552a:	0a5b      	lsrs	r3, r3, #9
    552c:	b2c8      	uxtb	r0, r1
    552e:	e7f3      	b.n	5518 <__aeabi_ui2f+0x68>
    5530:	219f      	movs	r1, #159	; 0x9f
    5532:	4a02      	ldr	r2, [pc, #8]	; (553c <__aeabi_ui2f+0x8c>)
    5534:	1a09      	subs	r1, r1, r0
    5536:	4013      	ands	r3, r2
    5538:	e7eb      	b.n	5512 <__aeabi_ui2f+0x62>
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	fbffffff 	.word	0xfbffffff

00005540 <__aeabi_dadd>:
    5540:	b5f0      	push	{r4, r5, r6, r7, lr}
    5542:	4645      	mov	r5, r8
    5544:	4657      	mov	r7, sl
    5546:	464e      	mov	r6, r9
    5548:	4694      	mov	ip, r2
    554a:	004c      	lsls	r4, r1, #1
    554c:	030a      	lsls	r2, r1, #12
    554e:	0fc9      	lsrs	r1, r1, #31
    5550:	b4e0      	push	{r5, r6, r7}
    5552:	4688      	mov	r8, r1
    5554:	1c0e      	adds	r6, r1, #0
    5556:	0319      	lsls	r1, r3, #12
    5558:	0f47      	lsrs	r7, r0, #29
    555a:	00c5      	lsls	r5, r0, #3
    555c:	0a48      	lsrs	r0, r1, #9
    555e:	4661      	mov	r1, ip
    5560:	0f49      	lsrs	r1, r1, #29
    5562:	4301      	orrs	r1, r0
    5564:	4660      	mov	r0, ip
    5566:	0a52      	lsrs	r2, r2, #9
    5568:	4317      	orrs	r7, r2
    556a:	00c0      	lsls	r0, r0, #3
    556c:	005a      	lsls	r2, r3, #1
    556e:	0d64      	lsrs	r4, r4, #21
    5570:	0d52      	lsrs	r2, r2, #21
    5572:	0fdb      	lsrs	r3, r3, #31
    5574:	4684      	mov	ip, r0
    5576:	4598      	cmp	r8, r3
    5578:	d100      	bne.n	557c <__aeabi_dadd+0x3c>
    557a:	e0a7      	b.n	56cc <__aeabi_dadd+0x18c>
    557c:	1aa0      	subs	r0, r4, r2
    557e:	2800      	cmp	r0, #0
    5580:	dc00      	bgt.n	5584 <__aeabi_dadd+0x44>
    5582:	e101      	b.n	5788 <__aeabi_dadd+0x248>
    5584:	2a00      	cmp	r2, #0
    5586:	d13d      	bne.n	5604 <__aeabi_dadd+0xc4>
    5588:	4663      	mov	r3, ip
    558a:	430b      	orrs	r3, r1
    558c:	d000      	beq.n	5590 <__aeabi_dadd+0x50>
    558e:	e0d4      	b.n	573a <__aeabi_dadd+0x1fa>
    5590:	076b      	lsls	r3, r5, #29
    5592:	d100      	bne.n	5596 <__aeabi_dadd+0x56>
    5594:	e088      	b.n	56a8 <__aeabi_dadd+0x168>
    5596:	230f      	movs	r3, #15
    5598:	402b      	ands	r3, r5
    559a:	2b04      	cmp	r3, #4
    559c:	d100      	bne.n	55a0 <__aeabi_dadd+0x60>
    559e:	e083      	b.n	56a8 <__aeabi_dadd+0x168>
    55a0:	1d2a      	adds	r2, r5, #4
    55a2:	42aa      	cmp	r2, r5
    55a4:	41ad      	sbcs	r5, r5
    55a6:	2380      	movs	r3, #128	; 0x80
    55a8:	426d      	negs	r5, r5
    55aa:	197f      	adds	r7, r7, r5
    55ac:	041b      	lsls	r3, r3, #16
    55ae:	403b      	ands	r3, r7
    55b0:	4646      	mov	r6, r8
    55b2:	1c15      	adds	r5, r2, #0
    55b4:	2b00      	cmp	r3, #0
    55b6:	d100      	bne.n	55ba <__aeabi_dadd+0x7a>
    55b8:	e07c      	b.n	56b4 <__aeabi_dadd+0x174>
    55ba:	4bcc      	ldr	r3, [pc, #816]	; (58ec <__aeabi_dadd+0x3ac>)
    55bc:	3401      	adds	r4, #1
    55be:	429c      	cmp	r4, r3
    55c0:	d100      	bne.n	55c4 <__aeabi_dadd+0x84>
    55c2:	e0fd      	b.n	57c0 <__aeabi_dadd+0x280>
    55c4:	1c3a      	adds	r2, r7, #0
    55c6:	4bca      	ldr	r3, [pc, #808]	; (58f0 <__aeabi_dadd+0x3b0>)
    55c8:	08ed      	lsrs	r5, r5, #3
    55ca:	401a      	ands	r2, r3
    55cc:	0750      	lsls	r0, r2, #29
    55ce:	0564      	lsls	r4, r4, #21
    55d0:	0252      	lsls	r2, r2, #9
    55d2:	4305      	orrs	r5, r0
    55d4:	0b12      	lsrs	r2, r2, #12
    55d6:	0d64      	lsrs	r4, r4, #21
    55d8:	2100      	movs	r1, #0
    55da:	0312      	lsls	r2, r2, #12
    55dc:	0d0b      	lsrs	r3, r1, #20
    55de:	051b      	lsls	r3, r3, #20
    55e0:	0564      	lsls	r4, r4, #21
    55e2:	0b12      	lsrs	r2, r2, #12
    55e4:	431a      	orrs	r2, r3
    55e6:	0863      	lsrs	r3, r4, #1
    55e8:	4cc2      	ldr	r4, [pc, #776]	; (58f4 <__aeabi_dadd+0x3b4>)
    55ea:	07f6      	lsls	r6, r6, #31
    55ec:	4014      	ands	r4, r2
    55ee:	431c      	orrs	r4, r3
    55f0:	0064      	lsls	r4, r4, #1
    55f2:	0864      	lsrs	r4, r4, #1
    55f4:	4334      	orrs	r4, r6
    55f6:	1c28      	adds	r0, r5, #0
    55f8:	1c21      	adds	r1, r4, #0
    55fa:	bc1c      	pop	{r2, r3, r4}
    55fc:	4690      	mov	r8, r2
    55fe:	4699      	mov	r9, r3
    5600:	46a2      	mov	sl, r4
    5602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5604:	4bb9      	ldr	r3, [pc, #740]	; (58ec <__aeabi_dadd+0x3ac>)
    5606:	429c      	cmp	r4, r3
    5608:	d0c2      	beq.n	5590 <__aeabi_dadd+0x50>
    560a:	2380      	movs	r3, #128	; 0x80
    560c:	041b      	lsls	r3, r3, #16
    560e:	4319      	orrs	r1, r3
    5610:	2838      	cmp	r0, #56	; 0x38
    5612:	dd00      	ble.n	5616 <__aeabi_dadd+0xd6>
    5614:	e0ec      	b.n	57f0 <__aeabi_dadd+0x2b0>
    5616:	281f      	cmp	r0, #31
    5618:	dd00      	ble.n	561c <__aeabi_dadd+0xdc>
    561a:	e121      	b.n	5860 <__aeabi_dadd+0x320>
    561c:	2220      	movs	r2, #32
    561e:	1c0e      	adds	r6, r1, #0
    5620:	4663      	mov	r3, ip
    5622:	1a12      	subs	r2, r2, r0
    5624:	4096      	lsls	r6, r2
    5626:	40c3      	lsrs	r3, r0
    5628:	4333      	orrs	r3, r6
    562a:	4666      	mov	r6, ip
    562c:	4096      	lsls	r6, r2
    562e:	1c32      	adds	r2, r6, #0
    5630:	1e56      	subs	r6, r2, #1
    5632:	41b2      	sbcs	r2, r6
    5634:	4313      	orrs	r3, r2
    5636:	1c0a      	adds	r2, r1, #0
    5638:	40c2      	lsrs	r2, r0
    563a:	1aeb      	subs	r3, r5, r3
    563c:	429d      	cmp	r5, r3
    563e:	41b6      	sbcs	r6, r6
    5640:	1c1d      	adds	r5, r3, #0
    5642:	1aba      	subs	r2, r7, r2
    5644:	4276      	negs	r6, r6
    5646:	1b97      	subs	r7, r2, r6
    5648:	023b      	lsls	r3, r7, #8
    564a:	d400      	bmi.n	564e <__aeabi_dadd+0x10e>
    564c:	e097      	b.n	577e <__aeabi_dadd+0x23e>
    564e:	027a      	lsls	r2, r7, #9
    5650:	0a56      	lsrs	r6, r2, #9
    5652:	2e00      	cmp	r6, #0
    5654:	d100      	bne.n	5658 <__aeabi_dadd+0x118>
    5656:	e0b6      	b.n	57c6 <__aeabi_dadd+0x286>
    5658:	1c30      	adds	r0, r6, #0
    565a:	f000 fe17 	bl	628c <__clzsi2>
    565e:	1c03      	adds	r3, r0, #0
    5660:	3b08      	subs	r3, #8
    5662:	2b1f      	cmp	r3, #31
    5664:	dd00      	ble.n	5668 <__aeabi_dadd+0x128>
    5666:	e0b7      	b.n	57d8 <__aeabi_dadd+0x298>
    5668:	409e      	lsls	r6, r3
    566a:	1c37      	adds	r7, r6, #0
    566c:	2628      	movs	r6, #40	; 0x28
    566e:	1c2a      	adds	r2, r5, #0
    5670:	1a36      	subs	r6, r6, r0
    5672:	40f2      	lsrs	r2, r6
    5674:	1c16      	adds	r6, r2, #0
    5676:	409d      	lsls	r5, r3
    5678:	433e      	orrs	r6, r7
    567a:	429c      	cmp	r4, r3
    567c:	dd00      	ble.n	5680 <__aeabi_dadd+0x140>
    567e:	e0b2      	b.n	57e6 <__aeabi_dadd+0x2a6>
    5680:	1b1c      	subs	r4, r3, r4
    5682:	1c62      	adds	r2, r4, #1
    5684:	2a1f      	cmp	r2, #31
    5686:	dd00      	ble.n	568a <__aeabi_dadd+0x14a>
    5688:	e0d8      	b.n	583c <__aeabi_dadd+0x2fc>
    568a:	231f      	movs	r3, #31
    568c:	1c29      	adds	r1, r5, #0
    568e:	1b1c      	subs	r4, r3, r4
    5690:	1c33      	adds	r3, r6, #0
    5692:	40a5      	lsls	r5, r4
    5694:	40a3      	lsls	r3, r4
    5696:	40d1      	lsrs	r1, r2
    5698:	1e6c      	subs	r4, r5, #1
    569a:	41a5      	sbcs	r5, r4
    569c:	40d6      	lsrs	r6, r2
    569e:	4319      	orrs	r1, r3
    56a0:	430d      	orrs	r5, r1
    56a2:	1c37      	adds	r7, r6, #0
    56a4:	2400      	movs	r4, #0
    56a6:	e773      	b.n	5590 <__aeabi_dadd+0x50>
    56a8:	2380      	movs	r3, #128	; 0x80
    56aa:	041b      	lsls	r3, r3, #16
    56ac:	403b      	ands	r3, r7
    56ae:	4646      	mov	r6, r8
    56b0:	d000      	beq.n	56b4 <__aeabi_dadd+0x174>
    56b2:	e782      	b.n	55ba <__aeabi_dadd+0x7a>
    56b4:	4b8d      	ldr	r3, [pc, #564]	; (58ec <__aeabi_dadd+0x3ac>)
    56b6:	08ed      	lsrs	r5, r5, #3
    56b8:	0778      	lsls	r0, r7, #29
    56ba:	4305      	orrs	r5, r0
    56bc:	08fa      	lsrs	r2, r7, #3
    56be:	429c      	cmp	r4, r3
    56c0:	d032      	beq.n	5728 <__aeabi_dadd+0x1e8>
    56c2:	0312      	lsls	r2, r2, #12
    56c4:	0564      	lsls	r4, r4, #21
    56c6:	0b12      	lsrs	r2, r2, #12
    56c8:	0d64      	lsrs	r4, r4, #21
    56ca:	e785      	b.n	55d8 <__aeabi_dadd+0x98>
    56cc:	1aa3      	subs	r3, r4, r2
    56ce:	2b00      	cmp	r3, #0
    56d0:	dc00      	bgt.n	56d4 <__aeabi_dadd+0x194>
    56d2:	e094      	b.n	57fe <__aeabi_dadd+0x2be>
    56d4:	2a00      	cmp	r2, #0
    56d6:	d03c      	beq.n	5752 <__aeabi_dadd+0x212>
    56d8:	4a84      	ldr	r2, [pc, #528]	; (58ec <__aeabi_dadd+0x3ac>)
    56da:	4294      	cmp	r4, r2
    56dc:	d100      	bne.n	56e0 <__aeabi_dadd+0x1a0>
    56de:	e757      	b.n	5590 <__aeabi_dadd+0x50>
    56e0:	2280      	movs	r2, #128	; 0x80
    56e2:	0412      	lsls	r2, r2, #16
    56e4:	4311      	orrs	r1, r2
    56e6:	2b38      	cmp	r3, #56	; 0x38
    56e8:	dc00      	bgt.n	56ec <__aeabi_dadd+0x1ac>
    56ea:	e105      	b.n	58f8 <__aeabi_dadd+0x3b8>
    56ec:	4663      	mov	r3, ip
    56ee:	4319      	orrs	r1, r3
    56f0:	1e48      	subs	r0, r1, #1
    56f2:	4181      	sbcs	r1, r0
    56f4:	2200      	movs	r2, #0
    56f6:	b2c8      	uxtb	r0, r1
    56f8:	1940      	adds	r0, r0, r5
    56fa:	42a8      	cmp	r0, r5
    56fc:	419b      	sbcs	r3, r3
    56fe:	1c05      	adds	r5, r0, #0
    5700:	19d2      	adds	r2, r2, r7
    5702:	425b      	negs	r3, r3
    5704:	18d7      	adds	r7, r2, r3
    5706:	023b      	lsls	r3, r7, #8
    5708:	d539      	bpl.n	577e <__aeabi_dadd+0x23e>
    570a:	4b78      	ldr	r3, [pc, #480]	; (58ec <__aeabi_dadd+0x3ac>)
    570c:	3401      	adds	r4, #1
    570e:	429c      	cmp	r4, r3
    5710:	d100      	bne.n	5714 <__aeabi_dadd+0x1d4>
    5712:	e14c      	b.n	59ae <__aeabi_dadd+0x46e>
    5714:	2001      	movs	r0, #1
    5716:	4a76      	ldr	r2, [pc, #472]	; (58f0 <__aeabi_dadd+0x3b0>)
    5718:	086b      	lsrs	r3, r5, #1
    571a:	403a      	ands	r2, r7
    571c:	4028      	ands	r0, r5
    571e:	4318      	orrs	r0, r3
    5720:	07d5      	lsls	r5, r2, #31
    5722:	4305      	orrs	r5, r0
    5724:	0857      	lsrs	r7, r2, #1
    5726:	e733      	b.n	5590 <__aeabi_dadd+0x50>
    5728:	1c2b      	adds	r3, r5, #0
    572a:	4313      	orrs	r3, r2
    572c:	d048      	beq.n	57c0 <__aeabi_dadd+0x280>
    572e:	2380      	movs	r3, #128	; 0x80
    5730:	031b      	lsls	r3, r3, #12
    5732:	431a      	orrs	r2, r3
    5734:	0312      	lsls	r2, r2, #12
    5736:	0b12      	lsrs	r2, r2, #12
    5738:	e74e      	b.n	55d8 <__aeabi_dadd+0x98>
    573a:	3801      	subs	r0, #1
    573c:	2800      	cmp	r0, #0
    573e:	d178      	bne.n	5832 <__aeabi_dadd+0x2f2>
    5740:	4663      	mov	r3, ip
    5742:	1aee      	subs	r6, r5, r3
    5744:	42b5      	cmp	r5, r6
    5746:	419b      	sbcs	r3, r3
    5748:	1a7a      	subs	r2, r7, r1
    574a:	425b      	negs	r3, r3
    574c:	1ad7      	subs	r7, r2, r3
    574e:	1c35      	adds	r5, r6, #0
    5750:	e77a      	b.n	5648 <__aeabi_dadd+0x108>
    5752:	1c02      	adds	r2, r0, #0
    5754:	430a      	orrs	r2, r1
    5756:	d100      	bne.n	575a <__aeabi_dadd+0x21a>
    5758:	e71a      	b.n	5590 <__aeabi_dadd+0x50>
    575a:	3b01      	subs	r3, #1
    575c:	2b00      	cmp	r3, #0
    575e:	d000      	beq.n	5762 <__aeabi_dadd+0x222>
    5760:	e0f2      	b.n	5948 <__aeabi_dadd+0x408>
    5762:	1940      	adds	r0, r0, r5
    5764:	42a8      	cmp	r0, r5
    5766:	419b      	sbcs	r3, r3
    5768:	19ca      	adds	r2, r1, r7
    576a:	425b      	negs	r3, r3
    576c:	18d7      	adds	r7, r2, r3
    576e:	1c05      	adds	r5, r0, #0
    5770:	e7c9      	b.n	5706 <__aeabi_dadd+0x1c6>
    5772:	1c13      	adds	r3, r2, #0
    5774:	4333      	orrs	r3, r6
    5776:	d100      	bne.n	577a <__aeabi_dadd+0x23a>
    5778:	e118      	b.n	59ac <__aeabi_dadd+0x46c>
    577a:	1c17      	adds	r7, r2, #0
    577c:	1c35      	adds	r5, r6, #0
    577e:	4646      	mov	r6, r8
    5780:	076b      	lsls	r3, r5, #29
    5782:	d000      	beq.n	5786 <__aeabi_dadd+0x246>
    5784:	e707      	b.n	5596 <__aeabi_dadd+0x56>
    5786:	e795      	b.n	56b4 <__aeabi_dadd+0x174>
    5788:	2800      	cmp	r0, #0
    578a:	d17a      	bne.n	5882 <__aeabi_dadd+0x342>
    578c:	1c62      	adds	r2, r4, #1
    578e:	0552      	lsls	r2, r2, #21
    5790:	0d52      	lsrs	r2, r2, #21
    5792:	2a01      	cmp	r2, #1
    5794:	dc00      	bgt.n	5798 <__aeabi_dadd+0x258>
    5796:	e0fb      	b.n	5990 <__aeabi_dadd+0x450>
    5798:	4662      	mov	r2, ip
    579a:	1aaa      	subs	r2, r5, r2
    579c:	4295      	cmp	r5, r2
    579e:	41b6      	sbcs	r6, r6
    57a0:	4691      	mov	r9, r2
    57a2:	1a78      	subs	r0, r7, r1
    57a4:	4272      	negs	r2, r6
    57a6:	1a86      	subs	r6, r0, r2
    57a8:	0232      	lsls	r2, r6, #8
    57aa:	d400      	bmi.n	57ae <__aeabi_dadd+0x26e>
    57ac:	e093      	b.n	58d6 <__aeabi_dadd+0x396>
    57ae:	4662      	mov	r2, ip
    57b0:	1b55      	subs	r5, r2, r5
    57b2:	45ac      	cmp	ip, r5
    57b4:	4180      	sbcs	r0, r0
    57b6:	1bcf      	subs	r7, r1, r7
    57b8:	4240      	negs	r0, r0
    57ba:	1a3e      	subs	r6, r7, r0
    57bc:	4698      	mov	r8, r3
    57be:	e748      	b.n	5652 <__aeabi_dadd+0x112>
    57c0:	2200      	movs	r2, #0
    57c2:	2500      	movs	r5, #0
    57c4:	e708      	b.n	55d8 <__aeabi_dadd+0x98>
    57c6:	1c28      	adds	r0, r5, #0
    57c8:	f000 fd60 	bl	628c <__clzsi2>
    57cc:	3020      	adds	r0, #32
    57ce:	1c03      	adds	r3, r0, #0
    57d0:	3b08      	subs	r3, #8
    57d2:	2b1f      	cmp	r3, #31
    57d4:	dc00      	bgt.n	57d8 <__aeabi_dadd+0x298>
    57d6:	e747      	b.n	5668 <__aeabi_dadd+0x128>
    57d8:	3828      	subs	r0, #40	; 0x28
    57da:	4085      	lsls	r5, r0
    57dc:	1c2e      	adds	r6, r5, #0
    57de:	2500      	movs	r5, #0
    57e0:	429c      	cmp	r4, r3
    57e2:	dc00      	bgt.n	57e6 <__aeabi_dadd+0x2a6>
    57e4:	e74c      	b.n	5680 <__aeabi_dadd+0x140>
    57e6:	4a42      	ldr	r2, [pc, #264]	; (58f0 <__aeabi_dadd+0x3b0>)
    57e8:	1ae4      	subs	r4, r4, r3
    57ea:	4016      	ands	r6, r2
    57ec:	1c37      	adds	r7, r6, #0
    57ee:	e6cf      	b.n	5590 <__aeabi_dadd+0x50>
    57f0:	4663      	mov	r3, ip
    57f2:	4319      	orrs	r1, r3
    57f4:	1e4b      	subs	r3, r1, #1
    57f6:	4199      	sbcs	r1, r3
    57f8:	2200      	movs	r2, #0
    57fa:	b2cb      	uxtb	r3, r1
    57fc:	e71d      	b.n	563a <__aeabi_dadd+0xfa>
    57fe:	2b00      	cmp	r3, #0
    5800:	d000      	beq.n	5804 <__aeabi_dadd+0x2c4>
    5802:	e0f2      	b.n	59ea <__aeabi_dadd+0x4aa>
    5804:	1c60      	adds	r0, r4, #1
    5806:	0543      	lsls	r3, r0, #21
    5808:	0d5b      	lsrs	r3, r3, #21
    580a:	2b01      	cmp	r3, #1
    580c:	dc00      	bgt.n	5810 <__aeabi_dadd+0x2d0>
    580e:	e0a4      	b.n	595a <__aeabi_dadd+0x41a>
    5810:	4b36      	ldr	r3, [pc, #216]	; (58ec <__aeabi_dadd+0x3ac>)
    5812:	4298      	cmp	r0, r3
    5814:	d100      	bne.n	5818 <__aeabi_dadd+0x2d8>
    5816:	e121      	b.n	5a5c <__aeabi_dadd+0x51c>
    5818:	4663      	mov	r3, ip
    581a:	195c      	adds	r4, r3, r5
    581c:	42ac      	cmp	r4, r5
    581e:	419b      	sbcs	r3, r3
    5820:	19cf      	adds	r7, r1, r7
    5822:	425b      	negs	r3, r3
    5824:	18fa      	adds	r2, r7, r3
    5826:	0864      	lsrs	r4, r4, #1
    5828:	07d5      	lsls	r5, r2, #31
    582a:	4325      	orrs	r5, r4
    582c:	0857      	lsrs	r7, r2, #1
    582e:	1c04      	adds	r4, r0, #0
    5830:	e6ae      	b.n	5590 <__aeabi_dadd+0x50>
    5832:	4b2e      	ldr	r3, [pc, #184]	; (58ec <__aeabi_dadd+0x3ac>)
    5834:	429c      	cmp	r4, r3
    5836:	d000      	beq.n	583a <__aeabi_dadd+0x2fa>
    5838:	e6ea      	b.n	5610 <__aeabi_dadd+0xd0>
    583a:	e6a9      	b.n	5590 <__aeabi_dadd+0x50>
    583c:	1c21      	adds	r1, r4, #0
    583e:	1c33      	adds	r3, r6, #0
    5840:	391f      	subs	r1, #31
    5842:	40cb      	lsrs	r3, r1
    5844:	1c19      	adds	r1, r3, #0
    5846:	2a20      	cmp	r2, #32
    5848:	d100      	bne.n	584c <__aeabi_dadd+0x30c>
    584a:	e082      	b.n	5952 <__aeabi_dadd+0x412>
    584c:	233f      	movs	r3, #63	; 0x3f
    584e:	1b1c      	subs	r4, r3, r4
    5850:	40a6      	lsls	r6, r4
    5852:	4335      	orrs	r5, r6
    5854:	1e6e      	subs	r6, r5, #1
    5856:	41b5      	sbcs	r5, r6
    5858:	2700      	movs	r7, #0
    585a:	430d      	orrs	r5, r1
    585c:	2400      	movs	r4, #0
    585e:	e78e      	b.n	577e <__aeabi_dadd+0x23e>
    5860:	1c03      	adds	r3, r0, #0
    5862:	1c0e      	adds	r6, r1, #0
    5864:	3b20      	subs	r3, #32
    5866:	40de      	lsrs	r6, r3
    5868:	2820      	cmp	r0, #32
    586a:	d074      	beq.n	5956 <__aeabi_dadd+0x416>
    586c:	2340      	movs	r3, #64	; 0x40
    586e:	1a1b      	subs	r3, r3, r0
    5870:	4099      	lsls	r1, r3
    5872:	1c0b      	adds	r3, r1, #0
    5874:	4662      	mov	r2, ip
    5876:	4313      	orrs	r3, r2
    5878:	1e59      	subs	r1, r3, #1
    587a:	418b      	sbcs	r3, r1
    587c:	2200      	movs	r2, #0
    587e:	4333      	orrs	r3, r6
    5880:	e6db      	b.n	563a <__aeabi_dadd+0xfa>
    5882:	2c00      	cmp	r4, #0
    5884:	d050      	beq.n	5928 <__aeabi_dadd+0x3e8>
    5886:	4c19      	ldr	r4, [pc, #100]	; (58ec <__aeabi_dadd+0x3ac>)
    5888:	42a2      	cmp	r2, r4
    588a:	d100      	bne.n	588e <__aeabi_dadd+0x34e>
    588c:	e0a8      	b.n	59e0 <__aeabi_dadd+0x4a0>
    588e:	2480      	movs	r4, #128	; 0x80
    5890:	0424      	lsls	r4, r4, #16
    5892:	4240      	negs	r0, r0
    5894:	4327      	orrs	r7, r4
    5896:	2838      	cmp	r0, #56	; 0x38
    5898:	dd00      	ble.n	589c <__aeabi_dadd+0x35c>
    589a:	e0d9      	b.n	5a50 <__aeabi_dadd+0x510>
    589c:	281f      	cmp	r0, #31
    589e:	dd00      	ble.n	58a2 <__aeabi_dadd+0x362>
    58a0:	e139      	b.n	5b16 <__aeabi_dadd+0x5d6>
    58a2:	2420      	movs	r4, #32
    58a4:	1c3e      	adds	r6, r7, #0
    58a6:	1a24      	subs	r4, r4, r0
    58a8:	40a6      	lsls	r6, r4
    58aa:	46b0      	mov	r8, r6
    58ac:	1c2e      	adds	r6, r5, #0
    58ae:	46a1      	mov	r9, r4
    58b0:	40c6      	lsrs	r6, r0
    58b2:	4644      	mov	r4, r8
    58b4:	4326      	orrs	r6, r4
    58b6:	464c      	mov	r4, r9
    58b8:	40a5      	lsls	r5, r4
    58ba:	1e6c      	subs	r4, r5, #1
    58bc:	41a5      	sbcs	r5, r4
    58be:	40c7      	lsrs	r7, r0
    58c0:	4335      	orrs	r5, r6
    58c2:	4660      	mov	r0, ip
    58c4:	1b45      	subs	r5, r0, r5
    58c6:	1bcf      	subs	r7, r1, r7
    58c8:	45ac      	cmp	ip, r5
    58ca:	4189      	sbcs	r1, r1
    58cc:	4249      	negs	r1, r1
    58ce:	1a7f      	subs	r7, r7, r1
    58d0:	1c14      	adds	r4, r2, #0
    58d2:	4698      	mov	r8, r3
    58d4:	e6b8      	b.n	5648 <__aeabi_dadd+0x108>
    58d6:	464b      	mov	r3, r9
    58d8:	464d      	mov	r5, r9
    58da:	4333      	orrs	r3, r6
    58dc:	d000      	beq.n	58e0 <__aeabi_dadd+0x3a0>
    58de:	e6b8      	b.n	5652 <__aeabi_dadd+0x112>
    58e0:	2600      	movs	r6, #0
    58e2:	2700      	movs	r7, #0
    58e4:	2400      	movs	r4, #0
    58e6:	2500      	movs	r5, #0
    58e8:	e6e4      	b.n	56b4 <__aeabi_dadd+0x174>
    58ea:	46c0      	nop			; (mov r8, r8)
    58ec:	000007ff 	.word	0x000007ff
    58f0:	ff7fffff 	.word	0xff7fffff
    58f4:	800fffff 	.word	0x800fffff
    58f8:	2b1f      	cmp	r3, #31
    58fa:	dc5b      	bgt.n	59b4 <__aeabi_dadd+0x474>
    58fc:	2220      	movs	r2, #32
    58fe:	1c08      	adds	r0, r1, #0
    5900:	1ad2      	subs	r2, r2, r3
    5902:	4090      	lsls	r0, r2
    5904:	4681      	mov	r9, r0
    5906:	4660      	mov	r0, ip
    5908:	4692      	mov	sl, r2
    590a:	40d8      	lsrs	r0, r3
    590c:	464a      	mov	r2, r9
    590e:	4310      	orrs	r0, r2
    5910:	4681      	mov	r9, r0
    5912:	4652      	mov	r2, sl
    5914:	4660      	mov	r0, ip
    5916:	4090      	lsls	r0, r2
    5918:	1c02      	adds	r2, r0, #0
    591a:	1e50      	subs	r0, r2, #1
    591c:	4182      	sbcs	r2, r0
    591e:	4648      	mov	r0, r9
    5920:	4310      	orrs	r0, r2
    5922:	1c0a      	adds	r2, r1, #0
    5924:	40da      	lsrs	r2, r3
    5926:	e6e7      	b.n	56f8 <__aeabi_dadd+0x1b8>
    5928:	1c3c      	adds	r4, r7, #0
    592a:	432c      	orrs	r4, r5
    592c:	d058      	beq.n	59e0 <__aeabi_dadd+0x4a0>
    592e:	43c0      	mvns	r0, r0
    5930:	2800      	cmp	r0, #0
    5932:	d151      	bne.n	59d8 <__aeabi_dadd+0x498>
    5934:	4660      	mov	r0, ip
    5936:	1b45      	subs	r5, r0, r5
    5938:	45ac      	cmp	ip, r5
    593a:	4180      	sbcs	r0, r0
    593c:	1bcf      	subs	r7, r1, r7
    593e:	4240      	negs	r0, r0
    5940:	1a3f      	subs	r7, r7, r0
    5942:	1c14      	adds	r4, r2, #0
    5944:	4698      	mov	r8, r3
    5946:	e67f      	b.n	5648 <__aeabi_dadd+0x108>
    5948:	4a8f      	ldr	r2, [pc, #572]	; (5b88 <__aeabi_dadd+0x648>)
    594a:	4294      	cmp	r4, r2
    594c:	d000      	beq.n	5950 <__aeabi_dadd+0x410>
    594e:	e6ca      	b.n	56e6 <__aeabi_dadd+0x1a6>
    5950:	e61e      	b.n	5590 <__aeabi_dadd+0x50>
    5952:	2600      	movs	r6, #0
    5954:	e77d      	b.n	5852 <__aeabi_dadd+0x312>
    5956:	2300      	movs	r3, #0
    5958:	e78c      	b.n	5874 <__aeabi_dadd+0x334>
    595a:	1c3b      	adds	r3, r7, #0
    595c:	432b      	orrs	r3, r5
    595e:	2c00      	cmp	r4, #0
    5960:	d000      	beq.n	5964 <__aeabi_dadd+0x424>
    5962:	e0bd      	b.n	5ae0 <__aeabi_dadd+0x5a0>
    5964:	2b00      	cmp	r3, #0
    5966:	d100      	bne.n	596a <__aeabi_dadd+0x42a>
    5968:	e0f5      	b.n	5b56 <__aeabi_dadd+0x616>
    596a:	4663      	mov	r3, ip
    596c:	430b      	orrs	r3, r1
    596e:	d100      	bne.n	5972 <__aeabi_dadd+0x432>
    5970:	e60e      	b.n	5590 <__aeabi_dadd+0x50>
    5972:	4663      	mov	r3, ip
    5974:	195b      	adds	r3, r3, r5
    5976:	42ab      	cmp	r3, r5
    5978:	4180      	sbcs	r0, r0
    597a:	19ca      	adds	r2, r1, r7
    597c:	4240      	negs	r0, r0
    597e:	1817      	adds	r7, r2, r0
    5980:	023a      	lsls	r2, r7, #8
    5982:	d400      	bmi.n	5986 <__aeabi_dadd+0x446>
    5984:	e0fc      	b.n	5b80 <__aeabi_dadd+0x640>
    5986:	4a81      	ldr	r2, [pc, #516]	; (5b8c <__aeabi_dadd+0x64c>)
    5988:	1c1d      	adds	r5, r3, #0
    598a:	4017      	ands	r7, r2
    598c:	3401      	adds	r4, #1
    598e:	e5ff      	b.n	5590 <__aeabi_dadd+0x50>
    5990:	1c3a      	adds	r2, r7, #0
    5992:	432a      	orrs	r2, r5
    5994:	2c00      	cmp	r4, #0
    5996:	d151      	bne.n	5a3c <__aeabi_dadd+0x4fc>
    5998:	2a00      	cmp	r2, #0
    599a:	d000      	beq.n	599e <__aeabi_dadd+0x45e>
    599c:	e085      	b.n	5aaa <__aeabi_dadd+0x56a>
    599e:	4662      	mov	r2, ip
    59a0:	430a      	orrs	r2, r1
    59a2:	d003      	beq.n	59ac <__aeabi_dadd+0x46c>
    59a4:	1c0f      	adds	r7, r1, #0
    59a6:	4665      	mov	r5, ip
    59a8:	4698      	mov	r8, r3
    59aa:	e5f1      	b.n	5590 <__aeabi_dadd+0x50>
    59ac:	2600      	movs	r6, #0
    59ae:	2700      	movs	r7, #0
    59b0:	2500      	movs	r5, #0
    59b2:	e67f      	b.n	56b4 <__aeabi_dadd+0x174>
    59b4:	1c18      	adds	r0, r3, #0
    59b6:	1c0a      	adds	r2, r1, #0
    59b8:	3820      	subs	r0, #32
    59ba:	40c2      	lsrs	r2, r0
    59bc:	2b20      	cmp	r3, #32
    59be:	d100      	bne.n	59c2 <__aeabi_dadd+0x482>
    59c0:	e0a7      	b.n	5b12 <__aeabi_dadd+0x5d2>
    59c2:	2040      	movs	r0, #64	; 0x40
    59c4:	1ac0      	subs	r0, r0, r3
    59c6:	4081      	lsls	r1, r0
    59c8:	1c08      	adds	r0, r1, #0
    59ca:	4663      	mov	r3, ip
    59cc:	4318      	orrs	r0, r3
    59ce:	1e41      	subs	r1, r0, #1
    59d0:	4188      	sbcs	r0, r1
    59d2:	4310      	orrs	r0, r2
    59d4:	2200      	movs	r2, #0
    59d6:	e68f      	b.n	56f8 <__aeabi_dadd+0x1b8>
    59d8:	4c6b      	ldr	r4, [pc, #428]	; (5b88 <__aeabi_dadd+0x648>)
    59da:	42a2      	cmp	r2, r4
    59dc:	d000      	beq.n	59e0 <__aeabi_dadd+0x4a0>
    59de:	e75a      	b.n	5896 <__aeabi_dadd+0x356>
    59e0:	1c0f      	adds	r7, r1, #0
    59e2:	4665      	mov	r5, ip
    59e4:	1c14      	adds	r4, r2, #0
    59e6:	4698      	mov	r8, r3
    59e8:	e5d2      	b.n	5590 <__aeabi_dadd+0x50>
    59ea:	2c00      	cmp	r4, #0
    59ec:	d13a      	bne.n	5a64 <__aeabi_dadd+0x524>
    59ee:	1c38      	adds	r0, r7, #0
    59f0:	4328      	orrs	r0, r5
    59f2:	d071      	beq.n	5ad8 <__aeabi_dadd+0x598>
    59f4:	43db      	mvns	r3, r3
    59f6:	2b00      	cmp	r3, #0
    59f8:	d018      	beq.n	5a2c <__aeabi_dadd+0x4ec>
    59fa:	4863      	ldr	r0, [pc, #396]	; (5b88 <__aeabi_dadd+0x648>)
    59fc:	4282      	cmp	r2, r0
    59fe:	d06b      	beq.n	5ad8 <__aeabi_dadd+0x598>
    5a00:	2b38      	cmp	r3, #56	; 0x38
    5a02:	dd00      	ble.n	5a06 <__aeabi_dadd+0x4c6>
    5a04:	e09d      	b.n	5b42 <__aeabi_dadd+0x602>
    5a06:	2b1f      	cmp	r3, #31
    5a08:	dd00      	ble.n	5a0c <__aeabi_dadd+0x4cc>
    5a0a:	e0a7      	b.n	5b5c <__aeabi_dadd+0x61c>
    5a0c:	2020      	movs	r0, #32
    5a0e:	1c3c      	adds	r4, r7, #0
    5a10:	1ac0      	subs	r0, r0, r3
    5a12:	4084      	lsls	r4, r0
    5a14:	46a1      	mov	r9, r4
    5a16:	1c2c      	adds	r4, r5, #0
    5a18:	4682      	mov	sl, r0
    5a1a:	40dc      	lsrs	r4, r3
    5a1c:	4648      	mov	r0, r9
    5a1e:	4304      	orrs	r4, r0
    5a20:	4650      	mov	r0, sl
    5a22:	4085      	lsls	r5, r0
    5a24:	1e68      	subs	r0, r5, #1
    5a26:	4185      	sbcs	r5, r0
    5a28:	40df      	lsrs	r7, r3
    5a2a:	4325      	orrs	r5, r4
    5a2c:	4465      	add	r5, ip
    5a2e:	4565      	cmp	r5, ip
    5a30:	419b      	sbcs	r3, r3
    5a32:	187f      	adds	r7, r7, r1
    5a34:	425b      	negs	r3, r3
    5a36:	18ff      	adds	r7, r7, r3
    5a38:	1c14      	adds	r4, r2, #0
    5a3a:	e664      	b.n	5706 <__aeabi_dadd+0x1c6>
    5a3c:	2a00      	cmp	r2, #0
    5a3e:	d119      	bne.n	5a74 <__aeabi_dadd+0x534>
    5a40:	4662      	mov	r2, ip
    5a42:	430a      	orrs	r2, r1
    5a44:	d077      	beq.n	5b36 <__aeabi_dadd+0x5f6>
    5a46:	1c0f      	adds	r7, r1, #0
    5a48:	4665      	mov	r5, ip
    5a4a:	4698      	mov	r8, r3
    5a4c:	4c4e      	ldr	r4, [pc, #312]	; (5b88 <__aeabi_dadd+0x648>)
    5a4e:	e59f      	b.n	5590 <__aeabi_dadd+0x50>
    5a50:	433d      	orrs	r5, r7
    5a52:	1e6f      	subs	r7, r5, #1
    5a54:	41bd      	sbcs	r5, r7
    5a56:	2700      	movs	r7, #0
    5a58:	b2ed      	uxtb	r5, r5
    5a5a:	e732      	b.n	58c2 <__aeabi_dadd+0x382>
    5a5c:	1c04      	adds	r4, r0, #0
    5a5e:	2700      	movs	r7, #0
    5a60:	2500      	movs	r5, #0
    5a62:	e627      	b.n	56b4 <__aeabi_dadd+0x174>
    5a64:	4848      	ldr	r0, [pc, #288]	; (5b88 <__aeabi_dadd+0x648>)
    5a66:	4282      	cmp	r2, r0
    5a68:	d036      	beq.n	5ad8 <__aeabi_dadd+0x598>
    5a6a:	2080      	movs	r0, #128	; 0x80
    5a6c:	0400      	lsls	r0, r0, #16
    5a6e:	425b      	negs	r3, r3
    5a70:	4307      	orrs	r7, r0
    5a72:	e7c5      	b.n	5a00 <__aeabi_dadd+0x4c0>
    5a74:	4662      	mov	r2, ip
    5a76:	430a      	orrs	r2, r1
    5a78:	d049      	beq.n	5b0e <__aeabi_dadd+0x5ce>
    5a7a:	2480      	movs	r4, #128	; 0x80
    5a7c:	08ed      	lsrs	r5, r5, #3
    5a7e:	0778      	lsls	r0, r7, #29
    5a80:	08fa      	lsrs	r2, r7, #3
    5a82:	0324      	lsls	r4, r4, #12
    5a84:	4328      	orrs	r0, r5
    5a86:	4222      	tst	r2, r4
    5a88:	d009      	beq.n	5a9e <__aeabi_dadd+0x55e>
    5a8a:	08ce      	lsrs	r6, r1, #3
    5a8c:	4226      	tst	r6, r4
    5a8e:	d106      	bne.n	5a9e <__aeabi_dadd+0x55e>
    5a90:	4662      	mov	r2, ip
    5a92:	074f      	lsls	r7, r1, #29
    5a94:	1c38      	adds	r0, r7, #0
    5a96:	08d2      	lsrs	r2, r2, #3
    5a98:	4310      	orrs	r0, r2
    5a9a:	4698      	mov	r8, r3
    5a9c:	1c32      	adds	r2, r6, #0
    5a9e:	00d2      	lsls	r2, r2, #3
    5aa0:	0f47      	lsrs	r7, r0, #29
    5aa2:	4317      	orrs	r7, r2
    5aa4:	00c5      	lsls	r5, r0, #3
    5aa6:	4c38      	ldr	r4, [pc, #224]	; (5b88 <__aeabi_dadd+0x648>)
    5aa8:	e572      	b.n	5590 <__aeabi_dadd+0x50>
    5aaa:	4662      	mov	r2, ip
    5aac:	430a      	orrs	r2, r1
    5aae:	d100      	bne.n	5ab2 <__aeabi_dadd+0x572>
    5ab0:	e56e      	b.n	5590 <__aeabi_dadd+0x50>
    5ab2:	4662      	mov	r2, ip
    5ab4:	1aae      	subs	r6, r5, r2
    5ab6:	42b5      	cmp	r5, r6
    5ab8:	4192      	sbcs	r2, r2
    5aba:	1a78      	subs	r0, r7, r1
    5abc:	4252      	negs	r2, r2
    5abe:	1a82      	subs	r2, r0, r2
    5ac0:	0210      	lsls	r0, r2, #8
    5ac2:	d400      	bmi.n	5ac6 <__aeabi_dadd+0x586>
    5ac4:	e655      	b.n	5772 <__aeabi_dadd+0x232>
    5ac6:	4662      	mov	r2, ip
    5ac8:	1b55      	subs	r5, r2, r5
    5aca:	45ac      	cmp	ip, r5
    5acc:	4180      	sbcs	r0, r0
    5ace:	1bca      	subs	r2, r1, r7
    5ad0:	4240      	negs	r0, r0
    5ad2:	1a17      	subs	r7, r2, r0
    5ad4:	4698      	mov	r8, r3
    5ad6:	e55b      	b.n	5590 <__aeabi_dadd+0x50>
    5ad8:	1c0f      	adds	r7, r1, #0
    5ada:	4665      	mov	r5, ip
    5adc:	1c14      	adds	r4, r2, #0
    5ade:	e557      	b.n	5590 <__aeabi_dadd+0x50>
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d034      	beq.n	5b4e <__aeabi_dadd+0x60e>
    5ae4:	4663      	mov	r3, ip
    5ae6:	430b      	orrs	r3, r1
    5ae8:	d011      	beq.n	5b0e <__aeabi_dadd+0x5ce>
    5aea:	2480      	movs	r4, #128	; 0x80
    5aec:	08ed      	lsrs	r5, r5, #3
    5aee:	0778      	lsls	r0, r7, #29
    5af0:	08fa      	lsrs	r2, r7, #3
    5af2:	0324      	lsls	r4, r4, #12
    5af4:	4328      	orrs	r0, r5
    5af6:	4222      	tst	r2, r4
    5af8:	d0d1      	beq.n	5a9e <__aeabi_dadd+0x55e>
    5afa:	08cb      	lsrs	r3, r1, #3
    5afc:	4223      	tst	r3, r4
    5afe:	d1ce      	bne.n	5a9e <__aeabi_dadd+0x55e>
    5b00:	4662      	mov	r2, ip
    5b02:	074f      	lsls	r7, r1, #29
    5b04:	1c38      	adds	r0, r7, #0
    5b06:	08d2      	lsrs	r2, r2, #3
    5b08:	4310      	orrs	r0, r2
    5b0a:	1c1a      	adds	r2, r3, #0
    5b0c:	e7c7      	b.n	5a9e <__aeabi_dadd+0x55e>
    5b0e:	4c1e      	ldr	r4, [pc, #120]	; (5b88 <__aeabi_dadd+0x648>)
    5b10:	e53e      	b.n	5590 <__aeabi_dadd+0x50>
    5b12:	2000      	movs	r0, #0
    5b14:	e759      	b.n	59ca <__aeabi_dadd+0x48a>
    5b16:	1c04      	adds	r4, r0, #0
    5b18:	1c3e      	adds	r6, r7, #0
    5b1a:	3c20      	subs	r4, #32
    5b1c:	40e6      	lsrs	r6, r4
    5b1e:	1c34      	adds	r4, r6, #0
    5b20:	2820      	cmp	r0, #32
    5b22:	d02b      	beq.n	5b7c <__aeabi_dadd+0x63c>
    5b24:	2640      	movs	r6, #64	; 0x40
    5b26:	1a30      	subs	r0, r6, r0
    5b28:	4087      	lsls	r7, r0
    5b2a:	433d      	orrs	r5, r7
    5b2c:	1e6f      	subs	r7, r5, #1
    5b2e:	41bd      	sbcs	r5, r7
    5b30:	2700      	movs	r7, #0
    5b32:	4325      	orrs	r5, r4
    5b34:	e6c5      	b.n	58c2 <__aeabi_dadd+0x382>
    5b36:	2780      	movs	r7, #128	; 0x80
    5b38:	2600      	movs	r6, #0
    5b3a:	03ff      	lsls	r7, r7, #15
    5b3c:	4c12      	ldr	r4, [pc, #72]	; (5b88 <__aeabi_dadd+0x648>)
    5b3e:	2500      	movs	r5, #0
    5b40:	e5b8      	b.n	56b4 <__aeabi_dadd+0x174>
    5b42:	433d      	orrs	r5, r7
    5b44:	1e6f      	subs	r7, r5, #1
    5b46:	41bd      	sbcs	r5, r7
    5b48:	2700      	movs	r7, #0
    5b4a:	b2ed      	uxtb	r5, r5
    5b4c:	e76e      	b.n	5a2c <__aeabi_dadd+0x4ec>
    5b4e:	1c0f      	adds	r7, r1, #0
    5b50:	4665      	mov	r5, ip
    5b52:	4c0d      	ldr	r4, [pc, #52]	; (5b88 <__aeabi_dadd+0x648>)
    5b54:	e51c      	b.n	5590 <__aeabi_dadd+0x50>
    5b56:	1c0f      	adds	r7, r1, #0
    5b58:	4665      	mov	r5, ip
    5b5a:	e519      	b.n	5590 <__aeabi_dadd+0x50>
    5b5c:	1c1c      	adds	r4, r3, #0
    5b5e:	1c38      	adds	r0, r7, #0
    5b60:	3c20      	subs	r4, #32
    5b62:	40e0      	lsrs	r0, r4
    5b64:	1c04      	adds	r4, r0, #0
    5b66:	2b20      	cmp	r3, #32
    5b68:	d00c      	beq.n	5b84 <__aeabi_dadd+0x644>
    5b6a:	2040      	movs	r0, #64	; 0x40
    5b6c:	1ac3      	subs	r3, r0, r3
    5b6e:	409f      	lsls	r7, r3
    5b70:	433d      	orrs	r5, r7
    5b72:	1e6f      	subs	r7, r5, #1
    5b74:	41bd      	sbcs	r5, r7
    5b76:	2700      	movs	r7, #0
    5b78:	4325      	orrs	r5, r4
    5b7a:	e757      	b.n	5a2c <__aeabi_dadd+0x4ec>
    5b7c:	2700      	movs	r7, #0
    5b7e:	e7d4      	b.n	5b2a <__aeabi_dadd+0x5ea>
    5b80:	1c1d      	adds	r5, r3, #0
    5b82:	e5fc      	b.n	577e <__aeabi_dadd+0x23e>
    5b84:	2700      	movs	r7, #0
    5b86:	e7f3      	b.n	5b70 <__aeabi_dadd+0x630>
    5b88:	000007ff 	.word	0x000007ff
    5b8c:	ff7fffff 	.word	0xff7fffff

00005b90 <__aeabi_dmul>:
    5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b92:	465f      	mov	r7, fp
    5b94:	4656      	mov	r6, sl
    5b96:	464d      	mov	r5, r9
    5b98:	4644      	mov	r4, r8
    5b9a:	b4f0      	push	{r4, r5, r6, r7}
    5b9c:	1c05      	adds	r5, r0, #0
    5b9e:	1c06      	adds	r6, r0, #0
    5ba0:	0308      	lsls	r0, r1, #12
    5ba2:	b087      	sub	sp, #28
    5ba4:	4699      	mov	r9, r3
    5ba6:	004f      	lsls	r7, r1, #1
    5ba8:	0b03      	lsrs	r3, r0, #12
    5baa:	0fcc      	lsrs	r4, r1, #31
    5bac:	4692      	mov	sl, r2
    5bae:	469b      	mov	fp, r3
    5bb0:	0d7f      	lsrs	r7, r7, #21
    5bb2:	9401      	str	r4, [sp, #4]
    5bb4:	d067      	beq.n	5c86 <__aeabi_dmul+0xf6>
    5bb6:	4b6c      	ldr	r3, [pc, #432]	; (5d68 <__aeabi_dmul+0x1d8>)
    5bb8:	429f      	cmp	r7, r3
    5bba:	d036      	beq.n	5c2a <__aeabi_dmul+0x9a>
    5bbc:	2080      	movs	r0, #128	; 0x80
    5bbe:	465b      	mov	r3, fp
    5bc0:	0340      	lsls	r0, r0, #13
    5bc2:	4318      	orrs	r0, r3
    5bc4:	00c0      	lsls	r0, r0, #3
    5bc6:	0f6b      	lsrs	r3, r5, #29
    5bc8:	4318      	orrs	r0, r3
    5bca:	4b68      	ldr	r3, [pc, #416]	; (5d6c <__aeabi_dmul+0x1dc>)
    5bcc:	4683      	mov	fp, r0
    5bce:	469c      	mov	ip, r3
    5bd0:	2300      	movs	r3, #0
    5bd2:	4698      	mov	r8, r3
    5bd4:	00ee      	lsls	r6, r5, #3
    5bd6:	4467      	add	r7, ip
    5bd8:	9300      	str	r3, [sp, #0]
    5bda:	464b      	mov	r3, r9
    5bdc:	4649      	mov	r1, r9
    5bde:	031d      	lsls	r5, r3, #12
    5be0:	0fc9      	lsrs	r1, r1, #31
    5be2:	005b      	lsls	r3, r3, #1
    5be4:	4652      	mov	r2, sl
    5be6:	0b2d      	lsrs	r5, r5, #12
    5be8:	0d5b      	lsrs	r3, r3, #21
    5bea:	4689      	mov	r9, r1
    5bec:	d100      	bne.n	5bf0 <__aeabi_dmul+0x60>
    5bee:	e06e      	b.n	5cce <__aeabi_dmul+0x13e>
    5bf0:	495d      	ldr	r1, [pc, #372]	; (5d68 <__aeabi_dmul+0x1d8>)
    5bf2:	428b      	cmp	r3, r1
    5bf4:	d064      	beq.n	5cc0 <__aeabi_dmul+0x130>
    5bf6:	2080      	movs	r0, #128	; 0x80
    5bf8:	495c      	ldr	r1, [pc, #368]	; (5d6c <__aeabi_dmul+0x1dc>)
    5bfa:	0340      	lsls	r0, r0, #13
    5bfc:	468c      	mov	ip, r1
    5bfe:	2100      	movs	r1, #0
    5c00:	4305      	orrs	r5, r0
    5c02:	00ed      	lsls	r5, r5, #3
    5c04:	0f50      	lsrs	r0, r2, #29
    5c06:	4305      	orrs	r5, r0
    5c08:	00d2      	lsls	r2, r2, #3
    5c0a:	4463      	add	r3, ip
    5c0c:	4648      	mov	r0, r9
    5c0e:	18ff      	adds	r7, r7, r3
    5c10:	1c7b      	adds	r3, r7, #1
    5c12:	469a      	mov	sl, r3
    5c14:	9b00      	ldr	r3, [sp, #0]
    5c16:	4060      	eors	r0, r4
    5c18:	9002      	str	r0, [sp, #8]
    5c1a:	430b      	orrs	r3, r1
    5c1c:	2b0f      	cmp	r3, #15
    5c1e:	d900      	bls.n	5c22 <__aeabi_dmul+0x92>
    5c20:	e0ac      	b.n	5d7c <__aeabi_dmul+0x1ec>
    5c22:	4853      	ldr	r0, [pc, #332]	; (5d70 <__aeabi_dmul+0x1e0>)
    5c24:	009b      	lsls	r3, r3, #2
    5c26:	58c3      	ldr	r3, [r0, r3]
    5c28:	469f      	mov	pc, r3
    5c2a:	465b      	mov	r3, fp
    5c2c:	431d      	orrs	r5, r3
    5c2e:	d000      	beq.n	5c32 <__aeabi_dmul+0xa2>
    5c30:	e082      	b.n	5d38 <__aeabi_dmul+0x1a8>
    5c32:	2308      	movs	r3, #8
    5c34:	9300      	str	r3, [sp, #0]
    5c36:	2300      	movs	r3, #0
    5c38:	469b      	mov	fp, r3
    5c3a:	3302      	adds	r3, #2
    5c3c:	2600      	movs	r6, #0
    5c3e:	4698      	mov	r8, r3
    5c40:	e7cb      	b.n	5bda <__aeabi_dmul+0x4a>
    5c42:	9b02      	ldr	r3, [sp, #8]
    5c44:	9301      	str	r3, [sp, #4]
    5c46:	4643      	mov	r3, r8
    5c48:	2b02      	cmp	r3, #2
    5c4a:	d159      	bne.n	5d00 <__aeabi_dmul+0x170>
    5c4c:	2401      	movs	r4, #1
    5c4e:	2500      	movs	r5, #0
    5c50:	2600      	movs	r6, #0
    5c52:	9b01      	ldr	r3, [sp, #4]
    5c54:	401c      	ands	r4, r3
    5c56:	4b44      	ldr	r3, [pc, #272]	; (5d68 <__aeabi_dmul+0x1d8>)
    5c58:	2100      	movs	r1, #0
    5c5a:	032d      	lsls	r5, r5, #12
    5c5c:	0d0a      	lsrs	r2, r1, #20
    5c5e:	0512      	lsls	r2, r2, #20
    5c60:	0b2d      	lsrs	r5, r5, #12
    5c62:	4315      	orrs	r5, r2
    5c64:	4a43      	ldr	r2, [pc, #268]	; (5d74 <__aeabi_dmul+0x1e4>)
    5c66:	051b      	lsls	r3, r3, #20
    5c68:	4015      	ands	r5, r2
    5c6a:	431d      	orrs	r5, r3
    5c6c:	006d      	lsls	r5, r5, #1
    5c6e:	07e4      	lsls	r4, r4, #31
    5c70:	086d      	lsrs	r5, r5, #1
    5c72:	4325      	orrs	r5, r4
    5c74:	1c30      	adds	r0, r6, #0
    5c76:	1c29      	adds	r1, r5, #0
    5c78:	b007      	add	sp, #28
    5c7a:	bc3c      	pop	{r2, r3, r4, r5}
    5c7c:	4690      	mov	r8, r2
    5c7e:	4699      	mov	r9, r3
    5c80:	46a2      	mov	sl, r4
    5c82:	46ab      	mov	fp, r5
    5c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c86:	432b      	orrs	r3, r5
    5c88:	d04e      	beq.n	5d28 <__aeabi_dmul+0x198>
    5c8a:	465b      	mov	r3, fp
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d100      	bne.n	5c92 <__aeabi_dmul+0x102>
    5c90:	e185      	b.n	5f9e <__aeabi_dmul+0x40e>
    5c92:	4658      	mov	r0, fp
    5c94:	f000 fafa 	bl	628c <__clzsi2>
    5c98:	1c02      	adds	r2, r0, #0
    5c9a:	2328      	movs	r3, #40	; 0x28
    5c9c:	1c29      	adds	r1, r5, #0
    5c9e:	1a9b      	subs	r3, r3, r2
    5ca0:	1c16      	adds	r6, r2, #0
    5ca2:	4658      	mov	r0, fp
    5ca4:	40d9      	lsrs	r1, r3
    5ca6:	3e08      	subs	r6, #8
    5ca8:	40b0      	lsls	r0, r6
    5caa:	1c0b      	adds	r3, r1, #0
    5cac:	40b5      	lsls	r5, r6
    5cae:	4303      	orrs	r3, r0
    5cb0:	469b      	mov	fp, r3
    5cb2:	1c2e      	adds	r6, r5, #0
    5cb4:	2300      	movs	r3, #0
    5cb6:	4f30      	ldr	r7, [pc, #192]	; (5d78 <__aeabi_dmul+0x1e8>)
    5cb8:	9300      	str	r3, [sp, #0]
    5cba:	1abf      	subs	r7, r7, r2
    5cbc:	4698      	mov	r8, r3
    5cbe:	e78c      	b.n	5bda <__aeabi_dmul+0x4a>
    5cc0:	4651      	mov	r1, sl
    5cc2:	4329      	orrs	r1, r5
    5cc4:	d12e      	bne.n	5d24 <__aeabi_dmul+0x194>
    5cc6:	2500      	movs	r5, #0
    5cc8:	2200      	movs	r2, #0
    5cca:	2102      	movs	r1, #2
    5ccc:	e79e      	b.n	5c0c <__aeabi_dmul+0x7c>
    5cce:	4651      	mov	r1, sl
    5cd0:	4329      	orrs	r1, r5
    5cd2:	d023      	beq.n	5d1c <__aeabi_dmul+0x18c>
    5cd4:	2d00      	cmp	r5, #0
    5cd6:	d100      	bne.n	5cda <__aeabi_dmul+0x14a>
    5cd8:	e154      	b.n	5f84 <__aeabi_dmul+0x3f4>
    5cda:	1c28      	adds	r0, r5, #0
    5cdc:	f000 fad6 	bl	628c <__clzsi2>
    5ce0:	1c03      	adds	r3, r0, #0
    5ce2:	2128      	movs	r1, #40	; 0x28
    5ce4:	4650      	mov	r0, sl
    5ce6:	1ac9      	subs	r1, r1, r3
    5ce8:	1c1a      	adds	r2, r3, #0
    5cea:	40c8      	lsrs	r0, r1
    5cec:	4651      	mov	r1, sl
    5cee:	3a08      	subs	r2, #8
    5cf0:	4091      	lsls	r1, r2
    5cf2:	4095      	lsls	r5, r2
    5cf4:	1c0a      	adds	r2, r1, #0
    5cf6:	4305      	orrs	r5, r0
    5cf8:	481f      	ldr	r0, [pc, #124]	; (5d78 <__aeabi_dmul+0x1e8>)
    5cfa:	2100      	movs	r1, #0
    5cfc:	1ac3      	subs	r3, r0, r3
    5cfe:	e785      	b.n	5c0c <__aeabi_dmul+0x7c>
    5d00:	2b03      	cmp	r3, #3
    5d02:	d100      	bne.n	5d06 <__aeabi_dmul+0x176>
    5d04:	e1c2      	b.n	608c <__aeabi_dmul+0x4fc>
    5d06:	2b01      	cmp	r3, #1
    5d08:	d000      	beq.n	5d0c <__aeabi_dmul+0x17c>
    5d0a:	e16d      	b.n	5fe8 <__aeabi_dmul+0x458>
    5d0c:	4644      	mov	r4, r8
    5d0e:	9b01      	ldr	r3, [sp, #4]
    5d10:	2500      	movs	r5, #0
    5d12:	401c      	ands	r4, r3
    5d14:	b2e4      	uxtb	r4, r4
    5d16:	2300      	movs	r3, #0
    5d18:	2600      	movs	r6, #0
    5d1a:	e79d      	b.n	5c58 <__aeabi_dmul+0xc8>
    5d1c:	2500      	movs	r5, #0
    5d1e:	2200      	movs	r2, #0
    5d20:	2101      	movs	r1, #1
    5d22:	e773      	b.n	5c0c <__aeabi_dmul+0x7c>
    5d24:	2103      	movs	r1, #3
    5d26:	e771      	b.n	5c0c <__aeabi_dmul+0x7c>
    5d28:	2304      	movs	r3, #4
    5d2a:	9300      	str	r3, [sp, #0]
    5d2c:	2300      	movs	r3, #0
    5d2e:	469b      	mov	fp, r3
    5d30:	3301      	adds	r3, #1
    5d32:	2600      	movs	r6, #0
    5d34:	4698      	mov	r8, r3
    5d36:	e750      	b.n	5bda <__aeabi_dmul+0x4a>
    5d38:	230c      	movs	r3, #12
    5d3a:	9300      	str	r3, [sp, #0]
    5d3c:	3b09      	subs	r3, #9
    5d3e:	4698      	mov	r8, r3
    5d40:	e74b      	b.n	5bda <__aeabi_dmul+0x4a>
    5d42:	2580      	movs	r5, #128	; 0x80
    5d44:	2400      	movs	r4, #0
    5d46:	032d      	lsls	r5, r5, #12
    5d48:	2600      	movs	r6, #0
    5d4a:	4b07      	ldr	r3, [pc, #28]	; (5d68 <__aeabi_dmul+0x1d8>)
    5d4c:	e784      	b.n	5c58 <__aeabi_dmul+0xc8>
    5d4e:	464b      	mov	r3, r9
    5d50:	46ab      	mov	fp, r5
    5d52:	1c16      	adds	r6, r2, #0
    5d54:	9301      	str	r3, [sp, #4]
    5d56:	4688      	mov	r8, r1
    5d58:	e775      	b.n	5c46 <__aeabi_dmul+0xb6>
    5d5a:	9b02      	ldr	r3, [sp, #8]
    5d5c:	46ab      	mov	fp, r5
    5d5e:	1c16      	adds	r6, r2, #0
    5d60:	9301      	str	r3, [sp, #4]
    5d62:	4688      	mov	r8, r1
    5d64:	e76f      	b.n	5c46 <__aeabi_dmul+0xb6>
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	000007ff 	.word	0x000007ff
    5d6c:	fffffc01 	.word	0xfffffc01
    5d70:	000074c0 	.word	0x000074c0
    5d74:	800fffff 	.word	0x800fffff
    5d78:	fffffc0d 	.word	0xfffffc0d
    5d7c:	0c33      	lsrs	r3, r6, #16
    5d7e:	0436      	lsls	r6, r6, #16
    5d80:	0c36      	lsrs	r6, r6, #16
    5d82:	469c      	mov	ip, r3
    5d84:	1c33      	adds	r3, r6, #0
    5d86:	0c14      	lsrs	r4, r2, #16
    5d88:	0412      	lsls	r2, r2, #16
    5d8a:	0c12      	lsrs	r2, r2, #16
    5d8c:	4353      	muls	r3, r2
    5d8e:	4698      	mov	r8, r3
    5d90:	4663      	mov	r3, ip
    5d92:	4353      	muls	r3, r2
    5d94:	4699      	mov	r9, r3
    5d96:	4663      	mov	r3, ip
    5d98:	4363      	muls	r3, r4
    5d9a:	9301      	str	r3, [sp, #4]
    5d9c:	1c33      	adds	r3, r6, #0
    5d9e:	4641      	mov	r1, r8
    5da0:	4363      	muls	r3, r4
    5da2:	0c09      	lsrs	r1, r1, #16
    5da4:	444b      	add	r3, r9
    5da6:	185b      	adds	r3, r3, r1
    5da8:	4599      	cmp	r9, r3
    5daa:	d905      	bls.n	5db8 <__aeabi_dmul+0x228>
    5dac:	2080      	movs	r0, #128	; 0x80
    5dae:	0240      	lsls	r0, r0, #9
    5db0:	4681      	mov	r9, r0
    5db2:	9901      	ldr	r1, [sp, #4]
    5db4:	4449      	add	r1, r9
    5db6:	9101      	str	r1, [sp, #4]
    5db8:	0c19      	lsrs	r1, r3, #16
    5dba:	9103      	str	r1, [sp, #12]
    5dbc:	4641      	mov	r1, r8
    5dbe:	0409      	lsls	r1, r1, #16
    5dc0:	0c09      	lsrs	r1, r1, #16
    5dc2:	041b      	lsls	r3, r3, #16
    5dc4:	185b      	adds	r3, r3, r1
    5dc6:	9304      	str	r3, [sp, #16]
    5dc8:	0c2b      	lsrs	r3, r5, #16
    5dca:	4698      	mov	r8, r3
    5dcc:	1c33      	adds	r3, r6, #0
    5dce:	042d      	lsls	r5, r5, #16
    5dd0:	0c29      	lsrs	r1, r5, #16
    5dd2:	434b      	muls	r3, r1
    5dd4:	4660      	mov	r0, ip
    5dd6:	9300      	str	r3, [sp, #0]
    5dd8:	4643      	mov	r3, r8
    5dda:	4665      	mov	r5, ip
    5ddc:	4358      	muls	r0, r3
    5dde:	435e      	muls	r6, r3
    5de0:	9b00      	ldr	r3, [sp, #0]
    5de2:	434d      	muls	r5, r1
    5de4:	0c1b      	lsrs	r3, r3, #16
    5de6:	4699      	mov	r9, r3
    5de8:	19ae      	adds	r6, r5, r6
    5dea:	444e      	add	r6, r9
    5dec:	4684      	mov	ip, r0
    5dee:	42b5      	cmp	r5, r6
    5df0:	d903      	bls.n	5dfa <__aeabi_dmul+0x26a>
    5df2:	2380      	movs	r3, #128	; 0x80
    5df4:	025b      	lsls	r3, r3, #9
    5df6:	4699      	mov	r9, r3
    5df8:	44cc      	add	ip, r9
    5dfa:	0c35      	lsrs	r5, r6, #16
    5dfc:	1c2b      	adds	r3, r5, #0
    5dfe:	9803      	ldr	r0, [sp, #12]
    5e00:	4463      	add	r3, ip
    5e02:	4684      	mov	ip, r0
    5e04:	9305      	str	r3, [sp, #20]
    5e06:	9b00      	ldr	r3, [sp, #0]
    5e08:	0436      	lsls	r6, r6, #16
    5e0a:	041b      	lsls	r3, r3, #16
    5e0c:	0c1b      	lsrs	r3, r3, #16
    5e0e:	18f3      	adds	r3, r6, r3
    5e10:	449c      	add	ip, r3
    5e12:	4660      	mov	r0, ip
    5e14:	9003      	str	r0, [sp, #12]
    5e16:	4658      	mov	r0, fp
    5e18:	0405      	lsls	r5, r0, #16
    5e1a:	0c06      	lsrs	r6, r0, #16
    5e1c:	0c28      	lsrs	r0, r5, #16
    5e1e:	4684      	mov	ip, r0
    5e20:	4350      	muls	r0, r2
    5e22:	1c35      	adds	r5, r6, #0
    5e24:	4681      	mov	r9, r0
    5e26:	4660      	mov	r0, ip
    5e28:	4365      	muls	r5, r4
    5e2a:	4344      	muls	r4, r0
    5e2c:	4648      	mov	r0, r9
    5e2e:	0c00      	lsrs	r0, r0, #16
    5e30:	4683      	mov	fp, r0
    5e32:	4372      	muls	r2, r6
    5e34:	1914      	adds	r4, r2, r4
    5e36:	445c      	add	r4, fp
    5e38:	42a2      	cmp	r2, r4
    5e3a:	d903      	bls.n	5e44 <__aeabi_dmul+0x2b4>
    5e3c:	2280      	movs	r2, #128	; 0x80
    5e3e:	0252      	lsls	r2, r2, #9
    5e40:	4693      	mov	fp, r2
    5e42:	445d      	add	r5, fp
    5e44:	0c22      	lsrs	r2, r4, #16
    5e46:	18ad      	adds	r5, r5, r2
    5e48:	464a      	mov	r2, r9
    5e4a:	0412      	lsls	r2, r2, #16
    5e4c:	0c12      	lsrs	r2, r2, #16
    5e4e:	0424      	lsls	r4, r4, #16
    5e50:	4640      	mov	r0, r8
    5e52:	18a4      	adds	r4, r4, r2
    5e54:	4662      	mov	r2, ip
    5e56:	434a      	muls	r2, r1
    5e58:	4371      	muls	r1, r6
    5e5a:	4346      	muls	r6, r0
    5e5c:	4660      	mov	r0, ip
    5e5e:	9600      	str	r6, [sp, #0]
    5e60:	4646      	mov	r6, r8
    5e62:	4370      	muls	r0, r6
    5e64:	4680      	mov	r8, r0
    5e66:	0c10      	lsrs	r0, r2, #16
    5e68:	4684      	mov	ip, r0
    5e6a:	4488      	add	r8, r1
    5e6c:	44e0      	add	r8, ip
    5e6e:	4541      	cmp	r1, r8
    5e70:	d905      	bls.n	5e7e <__aeabi_dmul+0x2ee>
    5e72:	2180      	movs	r1, #128	; 0x80
    5e74:	0249      	lsls	r1, r1, #9
    5e76:	468c      	mov	ip, r1
    5e78:	9900      	ldr	r1, [sp, #0]
    5e7a:	4461      	add	r1, ip
    5e7c:	9100      	str	r1, [sp, #0]
    5e7e:	9801      	ldr	r0, [sp, #4]
    5e80:	9903      	ldr	r1, [sp, #12]
    5e82:	4684      	mov	ip, r0
    5e84:	4461      	add	r1, ip
    5e86:	4299      	cmp	r1, r3
    5e88:	419b      	sbcs	r3, r3
    5e8a:	425b      	negs	r3, r3
    5e8c:	4699      	mov	r9, r3
    5e8e:	9805      	ldr	r0, [sp, #20]
    5e90:	4643      	mov	r3, r8
    5e92:	4684      	mov	ip, r0
    5e94:	0412      	lsls	r2, r2, #16
    5e96:	0c12      	lsrs	r2, r2, #16
    5e98:	041b      	lsls	r3, r3, #16
    5e9a:	189b      	adds	r3, r3, r2
    5e9c:	4463      	add	r3, ip
    5e9e:	469c      	mov	ip, r3
    5ea0:	46ab      	mov	fp, r5
    5ea2:	4283      	cmp	r3, r0
    5ea4:	419b      	sbcs	r3, r3
    5ea6:	4640      	mov	r0, r8
    5ea8:	190a      	adds	r2, r1, r4
    5eaa:	44cc      	add	ip, r9
    5eac:	42a2      	cmp	r2, r4
    5eae:	4189      	sbcs	r1, r1
    5eb0:	44e3      	add	fp, ip
    5eb2:	45cc      	cmp	ip, r9
    5eb4:	41b6      	sbcs	r6, r6
    5eb6:	465c      	mov	r4, fp
    5eb8:	0c00      	lsrs	r0, r0, #16
    5eba:	4680      	mov	r8, r0
    5ebc:	4249      	negs	r1, r1
    5ebe:	4276      	negs	r6, r6
    5ec0:	425b      	negs	r3, r3
    5ec2:	1864      	adds	r4, r4, r1
    5ec4:	4333      	orrs	r3, r6
    5ec6:	4498      	add	r8, r3
    5ec8:	428c      	cmp	r4, r1
    5eca:	4189      	sbcs	r1, r1
    5ecc:	45ab      	cmp	fp, r5
    5ece:	419b      	sbcs	r3, r3
    5ed0:	4249      	negs	r1, r1
    5ed2:	425b      	negs	r3, r3
    5ed4:	4319      	orrs	r1, r3
    5ed6:	1c0d      	adds	r5, r1, #0
    5ed8:	9b00      	ldr	r3, [sp, #0]
    5eda:	4445      	add	r5, r8
    5edc:	18ee      	adds	r6, r5, r3
    5ede:	0276      	lsls	r6, r6, #9
    5ee0:	0de5      	lsrs	r5, r4, #23
    5ee2:	432e      	orrs	r6, r5
    5ee4:	46b3      	mov	fp, r6
    5ee6:	9b04      	ldr	r3, [sp, #16]
    5ee8:	0256      	lsls	r6, r2, #9
    5eea:	431e      	orrs	r6, r3
    5eec:	1e73      	subs	r3, r6, #1
    5eee:	419e      	sbcs	r6, r3
    5ef0:	465b      	mov	r3, fp
    5ef2:	0dd2      	lsrs	r2, r2, #23
    5ef4:	4332      	orrs	r2, r6
    5ef6:	0266      	lsls	r6, r4, #9
    5ef8:	4316      	orrs	r6, r2
    5efa:	01db      	lsls	r3, r3, #7
    5efc:	d50a      	bpl.n	5f14 <__aeabi_dmul+0x384>
    5efe:	2301      	movs	r3, #1
    5f00:	4033      	ands	r3, r6
    5f02:	0876      	lsrs	r6, r6, #1
    5f04:	431e      	orrs	r6, r3
    5f06:	465b      	mov	r3, fp
    5f08:	07db      	lsls	r3, r3, #31
    5f0a:	431e      	orrs	r6, r3
    5f0c:	465b      	mov	r3, fp
    5f0e:	085b      	lsrs	r3, r3, #1
    5f10:	469b      	mov	fp, r3
    5f12:	4657      	mov	r7, sl
    5f14:	4b63      	ldr	r3, [pc, #396]	; (60a4 <__aeabi_dmul+0x514>)
    5f16:	18fb      	adds	r3, r7, r3
    5f18:	2b00      	cmp	r3, #0
    5f1a:	dd5a      	ble.n	5fd2 <__aeabi_dmul+0x442>
    5f1c:	0772      	lsls	r2, r6, #29
    5f1e:	d009      	beq.n	5f34 <__aeabi_dmul+0x3a4>
    5f20:	220f      	movs	r2, #15
    5f22:	4032      	ands	r2, r6
    5f24:	2a04      	cmp	r2, #4
    5f26:	d005      	beq.n	5f34 <__aeabi_dmul+0x3a4>
    5f28:	1d32      	adds	r2, r6, #4
    5f2a:	42b2      	cmp	r2, r6
    5f2c:	41b6      	sbcs	r6, r6
    5f2e:	4276      	negs	r6, r6
    5f30:	44b3      	add	fp, r6
    5f32:	1c16      	adds	r6, r2, #0
    5f34:	465a      	mov	r2, fp
    5f36:	01d2      	lsls	r2, r2, #7
    5f38:	d506      	bpl.n	5f48 <__aeabi_dmul+0x3b8>
    5f3a:	465a      	mov	r2, fp
    5f3c:	4b5a      	ldr	r3, [pc, #360]	; (60a8 <__aeabi_dmul+0x518>)
    5f3e:	401a      	ands	r2, r3
    5f40:	2380      	movs	r3, #128	; 0x80
    5f42:	4693      	mov	fp, r2
    5f44:	00db      	lsls	r3, r3, #3
    5f46:	18fb      	adds	r3, r7, r3
    5f48:	4a58      	ldr	r2, [pc, #352]	; (60ac <__aeabi_dmul+0x51c>)
    5f4a:	4293      	cmp	r3, r2
    5f4c:	dd34      	ble.n	5fb8 <__aeabi_dmul+0x428>
    5f4e:	2401      	movs	r4, #1
    5f50:	9b02      	ldr	r3, [sp, #8]
    5f52:	2500      	movs	r5, #0
    5f54:	401c      	ands	r4, r3
    5f56:	2600      	movs	r6, #0
    5f58:	4b55      	ldr	r3, [pc, #340]	; (60b0 <__aeabi_dmul+0x520>)
    5f5a:	e67d      	b.n	5c58 <__aeabi_dmul+0xc8>
    5f5c:	2080      	movs	r0, #128	; 0x80
    5f5e:	465b      	mov	r3, fp
    5f60:	0300      	lsls	r0, r0, #12
    5f62:	4203      	tst	r3, r0
    5f64:	d008      	beq.n	5f78 <__aeabi_dmul+0x3e8>
    5f66:	4205      	tst	r5, r0
    5f68:	d106      	bne.n	5f78 <__aeabi_dmul+0x3e8>
    5f6a:	4305      	orrs	r5, r0
    5f6c:	032d      	lsls	r5, r5, #12
    5f6e:	0b2d      	lsrs	r5, r5, #12
    5f70:	464c      	mov	r4, r9
    5f72:	1c16      	adds	r6, r2, #0
    5f74:	4b4e      	ldr	r3, [pc, #312]	; (60b0 <__aeabi_dmul+0x520>)
    5f76:	e66f      	b.n	5c58 <__aeabi_dmul+0xc8>
    5f78:	465d      	mov	r5, fp
    5f7a:	4305      	orrs	r5, r0
    5f7c:	032d      	lsls	r5, r5, #12
    5f7e:	0b2d      	lsrs	r5, r5, #12
    5f80:	4b4b      	ldr	r3, [pc, #300]	; (60b0 <__aeabi_dmul+0x520>)
    5f82:	e669      	b.n	5c58 <__aeabi_dmul+0xc8>
    5f84:	4650      	mov	r0, sl
    5f86:	f000 f981 	bl	628c <__clzsi2>
    5f8a:	1c03      	adds	r3, r0, #0
    5f8c:	3320      	adds	r3, #32
    5f8e:	2b27      	cmp	r3, #39	; 0x27
    5f90:	dc00      	bgt.n	5f94 <__aeabi_dmul+0x404>
    5f92:	e6a6      	b.n	5ce2 <__aeabi_dmul+0x152>
    5f94:	4655      	mov	r5, sl
    5f96:	3808      	subs	r0, #8
    5f98:	4085      	lsls	r5, r0
    5f9a:	2200      	movs	r2, #0
    5f9c:	e6ac      	b.n	5cf8 <__aeabi_dmul+0x168>
    5f9e:	1c28      	adds	r0, r5, #0
    5fa0:	f000 f974 	bl	628c <__clzsi2>
    5fa4:	1c02      	adds	r2, r0, #0
    5fa6:	3220      	adds	r2, #32
    5fa8:	2a27      	cmp	r2, #39	; 0x27
    5faa:	dc00      	bgt.n	5fae <__aeabi_dmul+0x41e>
    5fac:	e675      	b.n	5c9a <__aeabi_dmul+0x10a>
    5fae:	3808      	subs	r0, #8
    5fb0:	4085      	lsls	r5, r0
    5fb2:	2600      	movs	r6, #0
    5fb4:	46ab      	mov	fp, r5
    5fb6:	e67d      	b.n	5cb4 <__aeabi_dmul+0x124>
    5fb8:	465a      	mov	r2, fp
    5fba:	08f6      	lsrs	r6, r6, #3
    5fbc:	0752      	lsls	r2, r2, #29
    5fbe:	4316      	orrs	r6, r2
    5fc0:	465a      	mov	r2, fp
    5fc2:	2401      	movs	r4, #1
    5fc4:	0255      	lsls	r5, r2, #9
    5fc6:	9a02      	ldr	r2, [sp, #8]
    5fc8:	055b      	lsls	r3, r3, #21
    5fca:	0b2d      	lsrs	r5, r5, #12
    5fcc:	0d5b      	lsrs	r3, r3, #21
    5fce:	4014      	ands	r4, r2
    5fd0:	e642      	b.n	5c58 <__aeabi_dmul+0xc8>
    5fd2:	4d38      	ldr	r5, [pc, #224]	; (60b4 <__aeabi_dmul+0x524>)
    5fd4:	1bed      	subs	r5, r5, r7
    5fd6:	2d38      	cmp	r5, #56	; 0x38
    5fd8:	dd0a      	ble.n	5ff0 <__aeabi_dmul+0x460>
    5fda:	2401      	movs	r4, #1
    5fdc:	9b02      	ldr	r3, [sp, #8]
    5fde:	2500      	movs	r5, #0
    5fe0:	401c      	ands	r4, r3
    5fe2:	2600      	movs	r6, #0
    5fe4:	2300      	movs	r3, #0
    5fe6:	e637      	b.n	5c58 <__aeabi_dmul+0xc8>
    5fe8:	9b01      	ldr	r3, [sp, #4]
    5fea:	4657      	mov	r7, sl
    5fec:	9302      	str	r3, [sp, #8]
    5fee:	e791      	b.n	5f14 <__aeabi_dmul+0x384>
    5ff0:	2d1f      	cmp	r5, #31
    5ff2:	dc25      	bgt.n	6040 <__aeabi_dmul+0x4b0>
    5ff4:	4b30      	ldr	r3, [pc, #192]	; (60b8 <__aeabi_dmul+0x528>)
    5ff6:	1c32      	adds	r2, r6, #0
    5ff8:	469c      	mov	ip, r3
    5ffa:	4467      	add	r7, ip
    5ffc:	40be      	lsls	r6, r7
    5ffe:	465b      	mov	r3, fp
    6000:	40bb      	lsls	r3, r7
    6002:	1c37      	adds	r7, r6, #0
    6004:	40ea      	lsrs	r2, r5
    6006:	1e7e      	subs	r6, r7, #1
    6008:	41b7      	sbcs	r7, r6
    600a:	4313      	orrs	r3, r2
    600c:	433b      	orrs	r3, r7
    600e:	1c1e      	adds	r6, r3, #0
    6010:	465b      	mov	r3, fp
    6012:	40eb      	lsrs	r3, r5
    6014:	1c1d      	adds	r5, r3, #0
    6016:	0773      	lsls	r3, r6, #29
    6018:	d009      	beq.n	602e <__aeabi_dmul+0x49e>
    601a:	230f      	movs	r3, #15
    601c:	4033      	ands	r3, r6
    601e:	2b04      	cmp	r3, #4
    6020:	d005      	beq.n	602e <__aeabi_dmul+0x49e>
    6022:	1d33      	adds	r3, r6, #4
    6024:	42b3      	cmp	r3, r6
    6026:	41b6      	sbcs	r6, r6
    6028:	4276      	negs	r6, r6
    602a:	19ad      	adds	r5, r5, r6
    602c:	1c1e      	adds	r6, r3, #0
    602e:	022b      	lsls	r3, r5, #8
    6030:	d520      	bpl.n	6074 <__aeabi_dmul+0x4e4>
    6032:	2401      	movs	r4, #1
    6034:	9b02      	ldr	r3, [sp, #8]
    6036:	2500      	movs	r5, #0
    6038:	401c      	ands	r4, r3
    603a:	2600      	movs	r6, #0
    603c:	2301      	movs	r3, #1
    603e:	e60b      	b.n	5c58 <__aeabi_dmul+0xc8>
    6040:	465a      	mov	r2, fp
    6042:	4b1e      	ldr	r3, [pc, #120]	; (60bc <__aeabi_dmul+0x52c>)
    6044:	1bdb      	subs	r3, r3, r7
    6046:	40da      	lsrs	r2, r3
    6048:	1c13      	adds	r3, r2, #0
    604a:	2d20      	cmp	r5, #32
    604c:	d01c      	beq.n	6088 <__aeabi_dmul+0x4f8>
    604e:	4a1c      	ldr	r2, [pc, #112]	; (60c0 <__aeabi_dmul+0x530>)
    6050:	4694      	mov	ip, r2
    6052:	465a      	mov	r2, fp
    6054:	4467      	add	r7, ip
    6056:	40ba      	lsls	r2, r7
    6058:	1c17      	adds	r7, r2, #0
    605a:	433e      	orrs	r6, r7
    605c:	1e72      	subs	r2, r6, #1
    605e:	4196      	sbcs	r6, r2
    6060:	431e      	orrs	r6, r3
    6062:	2307      	movs	r3, #7
    6064:	2500      	movs	r5, #0
    6066:	4033      	ands	r3, r6
    6068:	d007      	beq.n	607a <__aeabi_dmul+0x4ea>
    606a:	230f      	movs	r3, #15
    606c:	2500      	movs	r5, #0
    606e:	4033      	ands	r3, r6
    6070:	2b04      	cmp	r3, #4
    6072:	d1d6      	bne.n	6022 <__aeabi_dmul+0x492>
    6074:	076b      	lsls	r3, r5, #29
    6076:	026d      	lsls	r5, r5, #9
    6078:	0b2d      	lsrs	r5, r5, #12
    607a:	2401      	movs	r4, #1
    607c:	08f6      	lsrs	r6, r6, #3
    607e:	431e      	orrs	r6, r3
    6080:	9b02      	ldr	r3, [sp, #8]
    6082:	401c      	ands	r4, r3
    6084:	2300      	movs	r3, #0
    6086:	e5e7      	b.n	5c58 <__aeabi_dmul+0xc8>
    6088:	2700      	movs	r7, #0
    608a:	e7e6      	b.n	605a <__aeabi_dmul+0x4ca>
    608c:	2580      	movs	r5, #128	; 0x80
    608e:	465b      	mov	r3, fp
    6090:	2401      	movs	r4, #1
    6092:	032d      	lsls	r5, r5, #12
    6094:	431d      	orrs	r5, r3
    6096:	9b01      	ldr	r3, [sp, #4]
    6098:	032d      	lsls	r5, r5, #12
    609a:	4023      	ands	r3, r4
    609c:	1c1c      	adds	r4, r3, #0
    609e:	0b2d      	lsrs	r5, r5, #12
    60a0:	4b03      	ldr	r3, [pc, #12]	; (60b0 <__aeabi_dmul+0x520>)
    60a2:	e5d9      	b.n	5c58 <__aeabi_dmul+0xc8>
    60a4:	000003ff 	.word	0x000003ff
    60a8:	feffffff 	.word	0xfeffffff
    60ac:	000007fe 	.word	0x000007fe
    60b0:	000007ff 	.word	0x000007ff
    60b4:	fffffc02 	.word	0xfffffc02
    60b8:	0000041e 	.word	0x0000041e
    60bc:	fffffbe2 	.word	0xfffffbe2
    60c0:	0000043e 	.word	0x0000043e

000060c4 <__aeabi_f2d>:
    60c4:	0042      	lsls	r2, r0, #1
    60c6:	0e12      	lsrs	r2, r2, #24
    60c8:	1c51      	adds	r1, r2, #1
    60ca:	b538      	push	{r3, r4, r5, lr}
    60cc:	b2c9      	uxtb	r1, r1
    60ce:	0243      	lsls	r3, r0, #9
    60d0:	0a5d      	lsrs	r5, r3, #9
    60d2:	0fc4      	lsrs	r4, r0, #31
    60d4:	2901      	cmp	r1, #1
    60d6:	dd15      	ble.n	6104 <__aeabi_f2d+0x40>
    60d8:	21e0      	movs	r1, #224	; 0xe0
    60da:	0089      	lsls	r1, r1, #2
    60dc:	468c      	mov	ip, r1
    60de:	076d      	lsls	r5, r5, #29
    60e0:	0b1b      	lsrs	r3, r3, #12
    60e2:	4462      	add	r2, ip
    60e4:	2100      	movs	r1, #0
    60e6:	1c28      	adds	r0, r5, #0
    60e8:	0d0d      	lsrs	r5, r1, #20
    60ea:	052d      	lsls	r5, r5, #20
    60ec:	432b      	orrs	r3, r5
    60ee:	4d1c      	ldr	r5, [pc, #112]	; (6160 <__aeabi_f2d+0x9c>)
    60f0:	0552      	lsls	r2, r2, #21
    60f2:	402b      	ands	r3, r5
    60f4:	0852      	lsrs	r2, r2, #1
    60f6:	4313      	orrs	r3, r2
    60f8:	005b      	lsls	r3, r3, #1
    60fa:	07e4      	lsls	r4, r4, #31
    60fc:	085b      	lsrs	r3, r3, #1
    60fe:	4323      	orrs	r3, r4
    6100:	1c19      	adds	r1, r3, #0
    6102:	bd38      	pop	{r3, r4, r5, pc}
    6104:	2a00      	cmp	r2, #0
    6106:	d115      	bne.n	6134 <__aeabi_f2d+0x70>
    6108:	2d00      	cmp	r5, #0
    610a:	d01f      	beq.n	614c <__aeabi_f2d+0x88>
    610c:	1c28      	adds	r0, r5, #0
    610e:	f000 f8bd 	bl	628c <__clzsi2>
    6112:	280a      	cmp	r0, #10
    6114:	dc1d      	bgt.n	6152 <__aeabi_f2d+0x8e>
    6116:	230b      	movs	r3, #11
    6118:	1c2a      	adds	r2, r5, #0
    611a:	1a1b      	subs	r3, r3, r0
    611c:	40da      	lsrs	r2, r3
    611e:	1c13      	adds	r3, r2, #0
    6120:	1c02      	adds	r2, r0, #0
    6122:	3215      	adds	r2, #21
    6124:	4095      	lsls	r5, r2
    6126:	4a0f      	ldr	r2, [pc, #60]	; (6164 <__aeabi_f2d+0xa0>)
    6128:	031b      	lsls	r3, r3, #12
    612a:	1a12      	subs	r2, r2, r0
    612c:	0552      	lsls	r2, r2, #21
    612e:	0b1b      	lsrs	r3, r3, #12
    6130:	0d52      	lsrs	r2, r2, #21
    6132:	e7d7      	b.n	60e4 <__aeabi_f2d+0x20>
    6134:	2d00      	cmp	r5, #0
    6136:	d006      	beq.n	6146 <__aeabi_f2d+0x82>
    6138:	2280      	movs	r2, #128	; 0x80
    613a:	0b1b      	lsrs	r3, r3, #12
    613c:	0312      	lsls	r2, r2, #12
    613e:	4313      	orrs	r3, r2
    6140:	076d      	lsls	r5, r5, #29
    6142:	4a09      	ldr	r2, [pc, #36]	; (6168 <__aeabi_f2d+0xa4>)
    6144:	e7ce      	b.n	60e4 <__aeabi_f2d+0x20>
    6146:	4a08      	ldr	r2, [pc, #32]	; (6168 <__aeabi_f2d+0xa4>)
    6148:	2300      	movs	r3, #0
    614a:	e7cb      	b.n	60e4 <__aeabi_f2d+0x20>
    614c:	2200      	movs	r2, #0
    614e:	2300      	movs	r3, #0
    6150:	e7c8      	b.n	60e4 <__aeabi_f2d+0x20>
    6152:	1c03      	adds	r3, r0, #0
    6154:	3b0b      	subs	r3, #11
    6156:	409d      	lsls	r5, r3
    6158:	1c2b      	adds	r3, r5, #0
    615a:	2500      	movs	r5, #0
    615c:	e7e3      	b.n	6126 <__aeabi_f2d+0x62>
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	800fffff 	.word	0x800fffff
    6164:	00000389 	.word	0x00000389
    6168:	000007ff 	.word	0x000007ff

0000616c <__aeabi_d2f>:
    616c:	b570      	push	{r4, r5, r6, lr}
    616e:	030b      	lsls	r3, r1, #12
    6170:	004d      	lsls	r5, r1, #1
    6172:	0f44      	lsrs	r4, r0, #29
    6174:	0d6d      	lsrs	r5, r5, #21
    6176:	0a5b      	lsrs	r3, r3, #9
    6178:	4323      	orrs	r3, r4
    617a:	1c6c      	adds	r4, r5, #1
    617c:	0564      	lsls	r4, r4, #21
    617e:	0fc9      	lsrs	r1, r1, #31
    6180:	00c2      	lsls	r2, r0, #3
    6182:	0d64      	lsrs	r4, r4, #21
    6184:	2c01      	cmp	r4, #1
    6186:	dd2a      	ble.n	61de <__aeabi_d2f+0x72>
    6188:	4c3b      	ldr	r4, [pc, #236]	; (6278 <__aeabi_d2f+0x10c>)
    618a:	192c      	adds	r4, r5, r4
    618c:	2cfe      	cmp	r4, #254	; 0xfe
    618e:	dc1a      	bgt.n	61c6 <__aeabi_d2f+0x5a>
    6190:	2c00      	cmp	r4, #0
    6192:	dd35      	ble.n	6200 <__aeabi_d2f+0x94>
    6194:	0180      	lsls	r0, r0, #6
    6196:	1e45      	subs	r5, r0, #1
    6198:	41a8      	sbcs	r0, r5
    619a:	00db      	lsls	r3, r3, #3
    619c:	4303      	orrs	r3, r0
    619e:	0f52      	lsrs	r2, r2, #29
    61a0:	4313      	orrs	r3, r2
    61a2:	075a      	lsls	r2, r3, #29
    61a4:	d004      	beq.n	61b0 <__aeabi_d2f+0x44>
    61a6:	220f      	movs	r2, #15
    61a8:	401a      	ands	r2, r3
    61aa:	2a04      	cmp	r2, #4
    61ac:	d000      	beq.n	61b0 <__aeabi_d2f+0x44>
    61ae:	3304      	adds	r3, #4
    61b0:	2280      	movs	r2, #128	; 0x80
    61b2:	04d2      	lsls	r2, r2, #19
    61b4:	401a      	ands	r2, r3
    61b6:	d027      	beq.n	6208 <__aeabi_d2f+0x9c>
    61b8:	3401      	adds	r4, #1
    61ba:	2cff      	cmp	r4, #255	; 0xff
    61bc:	d003      	beq.n	61c6 <__aeabi_d2f+0x5a>
    61be:	019b      	lsls	r3, r3, #6
    61c0:	0a5b      	lsrs	r3, r3, #9
    61c2:	b2e4      	uxtb	r4, r4
    61c4:	e001      	b.n	61ca <__aeabi_d2f+0x5e>
    61c6:	24ff      	movs	r4, #255	; 0xff
    61c8:	2300      	movs	r3, #0
    61ca:	025b      	lsls	r3, r3, #9
    61cc:	05e4      	lsls	r4, r4, #23
    61ce:	0a5b      	lsrs	r3, r3, #9
    61d0:	4323      	orrs	r3, r4
    61d2:	005b      	lsls	r3, r3, #1
    61d4:	07c9      	lsls	r1, r1, #31
    61d6:	085b      	lsrs	r3, r3, #1
    61d8:	430b      	orrs	r3, r1
    61da:	1c18      	adds	r0, r3, #0
    61dc:	bd70      	pop	{r4, r5, r6, pc}
    61de:	2d00      	cmp	r5, #0
    61e0:	d106      	bne.n	61f0 <__aeabi_d2f+0x84>
    61e2:	4313      	orrs	r3, r2
    61e4:	d10e      	bne.n	6204 <__aeabi_d2f+0x98>
    61e6:	2400      	movs	r4, #0
    61e8:	025b      	lsls	r3, r3, #9
    61ea:	0a5b      	lsrs	r3, r3, #9
    61ec:	b2e4      	uxtb	r4, r4
    61ee:	e7ec      	b.n	61ca <__aeabi_d2f+0x5e>
    61f0:	431a      	orrs	r2, r3
    61f2:	d0e8      	beq.n	61c6 <__aeabi_d2f+0x5a>
    61f4:	2080      	movs	r0, #128	; 0x80
    61f6:	00db      	lsls	r3, r3, #3
    61f8:	0480      	lsls	r0, r0, #18
    61fa:	4303      	orrs	r3, r0
    61fc:	24ff      	movs	r4, #255	; 0xff
    61fe:	e7d0      	b.n	61a2 <__aeabi_d2f+0x36>
    6200:	3417      	adds	r4, #23
    6202:	da0c      	bge.n	621e <__aeabi_d2f+0xb2>
    6204:	2305      	movs	r3, #5
    6206:	2400      	movs	r4, #0
    6208:	08db      	lsrs	r3, r3, #3
    620a:	2cff      	cmp	r4, #255	; 0xff
    620c:	d1ec      	bne.n	61e8 <__aeabi_d2f+0x7c>
    620e:	2b00      	cmp	r3, #0
    6210:	d02d      	beq.n	626e <__aeabi_d2f+0x102>
    6212:	2280      	movs	r2, #128	; 0x80
    6214:	03d2      	lsls	r2, r2, #15
    6216:	4313      	orrs	r3, r2
    6218:	025b      	lsls	r3, r3, #9
    621a:	0a5b      	lsrs	r3, r3, #9
    621c:	e7d5      	b.n	61ca <__aeabi_d2f+0x5e>
    621e:	2480      	movs	r4, #128	; 0x80
    6220:	4816      	ldr	r0, [pc, #88]	; (627c <__aeabi_d2f+0x110>)
    6222:	0424      	lsls	r4, r4, #16
    6224:	4323      	orrs	r3, r4
    6226:	1b40      	subs	r0, r0, r5
    6228:	281f      	cmp	r0, #31
    622a:	dc0d      	bgt.n	6248 <__aeabi_d2f+0xdc>
    622c:	4c14      	ldr	r4, [pc, #80]	; (6280 <__aeabi_d2f+0x114>)
    622e:	46a4      	mov	ip, r4
    6230:	4465      	add	r5, ip
    6232:	40ab      	lsls	r3, r5
    6234:	1c1c      	adds	r4, r3, #0
    6236:	1c13      	adds	r3, r2, #0
    6238:	40ab      	lsls	r3, r5
    623a:	1e5d      	subs	r5, r3, #1
    623c:	41ab      	sbcs	r3, r5
    623e:	40c2      	lsrs	r2, r0
    6240:	4323      	orrs	r3, r4
    6242:	4313      	orrs	r3, r2
    6244:	2400      	movs	r4, #0
    6246:	e7ac      	b.n	61a2 <__aeabi_d2f+0x36>
    6248:	1c1e      	adds	r6, r3, #0
    624a:	4c0e      	ldr	r4, [pc, #56]	; (6284 <__aeabi_d2f+0x118>)
    624c:	1b64      	subs	r4, r4, r5
    624e:	40e6      	lsrs	r6, r4
    6250:	1c34      	adds	r4, r6, #0
    6252:	2820      	cmp	r0, #32
    6254:	d00d      	beq.n	6272 <__aeabi_d2f+0x106>
    6256:	480c      	ldr	r0, [pc, #48]	; (6288 <__aeabi_d2f+0x11c>)
    6258:	4684      	mov	ip, r0
    625a:	4465      	add	r5, ip
    625c:	40ab      	lsls	r3, r5
    625e:	1c1d      	adds	r5, r3, #0
    6260:	432a      	orrs	r2, r5
    6262:	1e53      	subs	r3, r2, #1
    6264:	419a      	sbcs	r2, r3
    6266:	1c13      	adds	r3, r2, #0
    6268:	4323      	orrs	r3, r4
    626a:	2400      	movs	r4, #0
    626c:	e799      	b.n	61a2 <__aeabi_d2f+0x36>
    626e:	2300      	movs	r3, #0
    6270:	e7ab      	b.n	61ca <__aeabi_d2f+0x5e>
    6272:	2500      	movs	r5, #0
    6274:	e7f4      	b.n	6260 <__aeabi_d2f+0xf4>
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	fffffc80 	.word	0xfffffc80
    627c:	0000039e 	.word	0x0000039e
    6280:	fffffc82 	.word	0xfffffc82
    6284:	0000037e 	.word	0x0000037e
    6288:	fffffca2 	.word	0xfffffca2

0000628c <__clzsi2>:
    628c:	211c      	movs	r1, #28
    628e:	2301      	movs	r3, #1
    6290:	041b      	lsls	r3, r3, #16
    6292:	4298      	cmp	r0, r3
    6294:	d301      	bcc.n	629a <__clzsi2+0xe>
    6296:	0c00      	lsrs	r0, r0, #16
    6298:	3910      	subs	r1, #16
    629a:	0a1b      	lsrs	r3, r3, #8
    629c:	4298      	cmp	r0, r3
    629e:	d301      	bcc.n	62a4 <__clzsi2+0x18>
    62a0:	0a00      	lsrs	r0, r0, #8
    62a2:	3908      	subs	r1, #8
    62a4:	091b      	lsrs	r3, r3, #4
    62a6:	4298      	cmp	r0, r3
    62a8:	d301      	bcc.n	62ae <__clzsi2+0x22>
    62aa:	0900      	lsrs	r0, r0, #4
    62ac:	3904      	subs	r1, #4
    62ae:	a202      	add	r2, pc, #8	; (adr r2, 62b8 <__clzsi2+0x2c>)
    62b0:	5c10      	ldrb	r0, [r2, r0]
    62b2:	1840      	adds	r0, r0, r1
    62b4:	4770      	bx	lr
    62b6:	46c0      	nop			; (mov r8, r8)
    62b8:	02020304 	.word	0x02020304
    62bc:	01010101 	.word	0x01010101
	...

000062c8 <__libc_init_array>:
    62c8:	4b0e      	ldr	r3, [pc, #56]	; (6304 <__libc_init_array+0x3c>)
    62ca:	b570      	push	{r4, r5, r6, lr}
    62cc:	2500      	movs	r5, #0
    62ce:	1c1e      	adds	r6, r3, #0
    62d0:	4c0d      	ldr	r4, [pc, #52]	; (6308 <__libc_init_array+0x40>)
    62d2:	1ae4      	subs	r4, r4, r3
    62d4:	10a4      	asrs	r4, r4, #2
    62d6:	42a5      	cmp	r5, r4
    62d8:	d004      	beq.n	62e4 <__libc_init_array+0x1c>
    62da:	00ab      	lsls	r3, r5, #2
    62dc:	58f3      	ldr	r3, [r6, r3]
    62de:	4798      	blx	r3
    62e0:	3501      	adds	r5, #1
    62e2:	e7f8      	b.n	62d6 <__libc_init_array+0xe>
    62e4:	f001 f95a 	bl	759c <_init>
    62e8:	4b08      	ldr	r3, [pc, #32]	; (630c <__libc_init_array+0x44>)
    62ea:	2500      	movs	r5, #0
    62ec:	1c1e      	adds	r6, r3, #0
    62ee:	4c08      	ldr	r4, [pc, #32]	; (6310 <__libc_init_array+0x48>)
    62f0:	1ae4      	subs	r4, r4, r3
    62f2:	10a4      	asrs	r4, r4, #2
    62f4:	42a5      	cmp	r5, r4
    62f6:	d004      	beq.n	6302 <__libc_init_array+0x3a>
    62f8:	00ab      	lsls	r3, r5, #2
    62fa:	58f3      	ldr	r3, [r6, r3]
    62fc:	4798      	blx	r3
    62fe:	3501      	adds	r5, #1
    6300:	e7f8      	b.n	62f4 <__libc_init_array+0x2c>
    6302:	bd70      	pop	{r4, r5, r6, pc}
    6304:	000075a8 	.word	0x000075a8
    6308:	000075a8 	.word	0x000075a8
    630c:	000075a8 	.word	0x000075a8
    6310:	000075ac 	.word	0x000075ac

00006314 <memcpy>:
    6314:	2300      	movs	r3, #0
    6316:	b510      	push	{r4, lr}
    6318:	4293      	cmp	r3, r2
    631a:	d003      	beq.n	6324 <memcpy+0x10>
    631c:	5ccc      	ldrb	r4, [r1, r3]
    631e:	54c4      	strb	r4, [r0, r3]
    6320:	3301      	adds	r3, #1
    6322:	e7f9      	b.n	6318 <memcpy+0x4>
    6324:	bd10      	pop	{r4, pc}

00006326 <memset>:
    6326:	1c03      	adds	r3, r0, #0
    6328:	1882      	adds	r2, r0, r2
    632a:	4293      	cmp	r3, r2
    632c:	d002      	beq.n	6334 <memset+0xe>
    632e:	7019      	strb	r1, [r3, #0]
    6330:	3301      	adds	r3, #1
    6332:	e7fa      	b.n	632a <memset+0x4>
    6334:	4770      	bx	lr
	...

00006338 <iprintf>:
    6338:	b40f      	push	{r0, r1, r2, r3}
    633a:	4b0b      	ldr	r3, [pc, #44]	; (6368 <iprintf+0x30>)
    633c:	b513      	push	{r0, r1, r4, lr}
    633e:	681c      	ldr	r4, [r3, #0]
    6340:	2c00      	cmp	r4, #0
    6342:	d005      	beq.n	6350 <iprintf+0x18>
    6344:	69a3      	ldr	r3, [r4, #24]
    6346:	2b00      	cmp	r3, #0
    6348:	d102      	bne.n	6350 <iprintf+0x18>
    634a:	1c20      	adds	r0, r4, #0
    634c:	f000 fa62 	bl	6814 <__sinit>
    6350:	ab05      	add	r3, sp, #20
    6352:	1c20      	adds	r0, r4, #0
    6354:	68a1      	ldr	r1, [r4, #8]
    6356:	9a04      	ldr	r2, [sp, #16]
    6358:	9301      	str	r3, [sp, #4]
    635a:	f000 fc15 	bl	6b88 <_vfiprintf_r>
    635e:	bc16      	pop	{r1, r2, r4}
    6360:	bc08      	pop	{r3}
    6362:	b004      	add	sp, #16
    6364:	4718      	bx	r3
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	2000006c 	.word	0x2000006c

0000636c <setbuf>:
    636c:	b508      	push	{r3, lr}
    636e:	424a      	negs	r2, r1
    6370:	414a      	adcs	r2, r1
    6372:	2380      	movs	r3, #128	; 0x80
    6374:	0052      	lsls	r2, r2, #1
    6376:	00db      	lsls	r3, r3, #3
    6378:	f000 f802 	bl	6380 <setvbuf>
    637c:	bd08      	pop	{r3, pc}
	...

00006380 <setvbuf>:
    6380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6382:	1c1e      	adds	r6, r3, #0
    6384:	4b3c      	ldr	r3, [pc, #240]	; (6478 <setvbuf+0xf8>)
    6386:	1c04      	adds	r4, r0, #0
    6388:	681d      	ldr	r5, [r3, #0]
    638a:	1c0f      	adds	r7, r1, #0
    638c:	9201      	str	r2, [sp, #4]
    638e:	2d00      	cmp	r5, #0
    6390:	d005      	beq.n	639e <setvbuf+0x1e>
    6392:	69ab      	ldr	r3, [r5, #24]
    6394:	2b00      	cmp	r3, #0
    6396:	d102      	bne.n	639e <setvbuf+0x1e>
    6398:	1c28      	adds	r0, r5, #0
    639a:	f000 fa3b 	bl	6814 <__sinit>
    639e:	4b37      	ldr	r3, [pc, #220]	; (647c <setvbuf+0xfc>)
    63a0:	429c      	cmp	r4, r3
    63a2:	d101      	bne.n	63a8 <setvbuf+0x28>
    63a4:	686c      	ldr	r4, [r5, #4]
    63a6:	e008      	b.n	63ba <setvbuf+0x3a>
    63a8:	4b35      	ldr	r3, [pc, #212]	; (6480 <setvbuf+0x100>)
    63aa:	429c      	cmp	r4, r3
    63ac:	d101      	bne.n	63b2 <setvbuf+0x32>
    63ae:	68ac      	ldr	r4, [r5, #8]
    63b0:	e003      	b.n	63ba <setvbuf+0x3a>
    63b2:	4b34      	ldr	r3, [pc, #208]	; (6484 <setvbuf+0x104>)
    63b4:	429c      	cmp	r4, r3
    63b6:	d100      	bne.n	63ba <setvbuf+0x3a>
    63b8:	68ec      	ldr	r4, [r5, #12]
    63ba:	9b01      	ldr	r3, [sp, #4]
    63bc:	2b02      	cmp	r3, #2
    63be:	d858      	bhi.n	6472 <setvbuf+0xf2>
    63c0:	2e00      	cmp	r6, #0
    63c2:	db56      	blt.n	6472 <setvbuf+0xf2>
    63c4:	1c28      	adds	r0, r5, #0
    63c6:	1c21      	adds	r1, r4, #0
    63c8:	f000 f9b6 	bl	6738 <_fflush_r>
    63cc:	2300      	movs	r3, #0
    63ce:	6063      	str	r3, [r4, #4]
    63d0:	61a3      	str	r3, [r4, #24]
    63d2:	89a3      	ldrh	r3, [r4, #12]
    63d4:	061b      	lsls	r3, r3, #24
    63d6:	d503      	bpl.n	63e0 <setvbuf+0x60>
    63d8:	1c28      	adds	r0, r5, #0
    63da:	6921      	ldr	r1, [r4, #16]
    63dc:	f000 fb0e 	bl	69fc <_free_r>
    63e0:	2283      	movs	r2, #131	; 0x83
    63e2:	89a3      	ldrh	r3, [r4, #12]
    63e4:	4393      	bics	r3, r2
    63e6:	81a3      	strh	r3, [r4, #12]
    63e8:	9b01      	ldr	r3, [sp, #4]
    63ea:	2b02      	cmp	r3, #2
    63ec:	d013      	beq.n	6416 <setvbuf+0x96>
    63ee:	2f00      	cmp	r7, #0
    63f0:	d125      	bne.n	643e <setvbuf+0xbe>
    63f2:	2e00      	cmp	r6, #0
    63f4:	d101      	bne.n	63fa <setvbuf+0x7a>
    63f6:	2680      	movs	r6, #128	; 0x80
    63f8:	00f6      	lsls	r6, r6, #3
    63fa:	1c30      	adds	r0, r6, #0
    63fc:	f000 faf4 	bl	69e8 <malloc>
    6400:	1e07      	subs	r7, r0, #0
    6402:	d118      	bne.n	6436 <setvbuf+0xb6>
    6404:	2080      	movs	r0, #128	; 0x80
    6406:	00c0      	lsls	r0, r0, #3
    6408:	f000 faee 	bl	69e8 <malloc>
    640c:	1e07      	subs	r7, r0, #0
    640e:	d110      	bne.n	6432 <setvbuf+0xb2>
    6410:	2001      	movs	r0, #1
    6412:	4240      	negs	r0, r0
    6414:	e000      	b.n	6418 <setvbuf+0x98>
    6416:	2000      	movs	r0, #0
    6418:	2202      	movs	r2, #2
    641a:	89a3      	ldrh	r3, [r4, #12]
    641c:	4313      	orrs	r3, r2
    641e:	81a3      	strh	r3, [r4, #12]
    6420:	2300      	movs	r3, #0
    6422:	60a3      	str	r3, [r4, #8]
    6424:	1c23      	adds	r3, r4, #0
    6426:	3347      	adds	r3, #71	; 0x47
    6428:	6023      	str	r3, [r4, #0]
    642a:	6123      	str	r3, [r4, #16]
    642c:	2301      	movs	r3, #1
    642e:	6163      	str	r3, [r4, #20]
    6430:	e021      	b.n	6476 <setvbuf+0xf6>
    6432:	2680      	movs	r6, #128	; 0x80
    6434:	00f6      	lsls	r6, r6, #3
    6436:	2280      	movs	r2, #128	; 0x80
    6438:	89a3      	ldrh	r3, [r4, #12]
    643a:	4313      	orrs	r3, r2
    643c:	81a3      	strh	r3, [r4, #12]
    643e:	9b01      	ldr	r3, [sp, #4]
    6440:	2b01      	cmp	r3, #1
    6442:	d105      	bne.n	6450 <setvbuf+0xd0>
    6444:	89a3      	ldrh	r3, [r4, #12]
    6446:	9a01      	ldr	r2, [sp, #4]
    6448:	431a      	orrs	r2, r3
    644a:	4273      	negs	r3, r6
    644c:	81a2      	strh	r2, [r4, #12]
    644e:	61a3      	str	r3, [r4, #24]
    6450:	4b0d      	ldr	r3, [pc, #52]	; (6488 <setvbuf+0x108>)
    6452:	2000      	movs	r0, #0
    6454:	62ab      	str	r3, [r5, #40]	; 0x28
    6456:	89a2      	ldrh	r2, [r4, #12]
    6458:	6027      	str	r7, [r4, #0]
    645a:	6127      	str	r7, [r4, #16]
    645c:	6166      	str	r6, [r4, #20]
    645e:	0713      	lsls	r3, r2, #28
    6460:	d509      	bpl.n	6476 <setvbuf+0xf6>
    6462:	2303      	movs	r3, #3
    6464:	401a      	ands	r2, r3
    6466:	4253      	negs	r3, r2
    6468:	4153      	adcs	r3, r2
    646a:	425b      	negs	r3, r3
    646c:	401e      	ands	r6, r3
    646e:	60a6      	str	r6, [r4, #8]
    6470:	e001      	b.n	6476 <setvbuf+0xf6>
    6472:	2001      	movs	r0, #1
    6474:	4240      	negs	r0, r0
    6476:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6478:	2000006c 	.word	0x2000006c
    647c:	00007508 	.word	0x00007508
    6480:	00007528 	.word	0x00007528
    6484:	00007548 	.word	0x00007548
    6488:	00006791 	.word	0x00006791

0000648c <__swbuf_r>:
    648c:	b570      	push	{r4, r5, r6, lr}
    648e:	1c05      	adds	r5, r0, #0
    6490:	1c0e      	adds	r6, r1, #0
    6492:	1c14      	adds	r4, r2, #0
    6494:	2800      	cmp	r0, #0
    6496:	d004      	beq.n	64a2 <__swbuf_r+0x16>
    6498:	6983      	ldr	r3, [r0, #24]
    649a:	2b00      	cmp	r3, #0
    649c:	d101      	bne.n	64a2 <__swbuf_r+0x16>
    649e:	f000 f9b9 	bl	6814 <__sinit>
    64a2:	4b23      	ldr	r3, [pc, #140]	; (6530 <__swbuf_r+0xa4>)
    64a4:	429c      	cmp	r4, r3
    64a6:	d101      	bne.n	64ac <__swbuf_r+0x20>
    64a8:	686c      	ldr	r4, [r5, #4]
    64aa:	e008      	b.n	64be <__swbuf_r+0x32>
    64ac:	4b21      	ldr	r3, [pc, #132]	; (6534 <__swbuf_r+0xa8>)
    64ae:	429c      	cmp	r4, r3
    64b0:	d101      	bne.n	64b6 <__swbuf_r+0x2a>
    64b2:	68ac      	ldr	r4, [r5, #8]
    64b4:	e003      	b.n	64be <__swbuf_r+0x32>
    64b6:	4b20      	ldr	r3, [pc, #128]	; (6538 <__swbuf_r+0xac>)
    64b8:	429c      	cmp	r4, r3
    64ba:	d100      	bne.n	64be <__swbuf_r+0x32>
    64bc:	68ec      	ldr	r4, [r5, #12]
    64be:	69a3      	ldr	r3, [r4, #24]
    64c0:	60a3      	str	r3, [r4, #8]
    64c2:	89a3      	ldrh	r3, [r4, #12]
    64c4:	071b      	lsls	r3, r3, #28
    64c6:	d50a      	bpl.n	64de <__swbuf_r+0x52>
    64c8:	6923      	ldr	r3, [r4, #16]
    64ca:	2b00      	cmp	r3, #0
    64cc:	d007      	beq.n	64de <__swbuf_r+0x52>
    64ce:	6823      	ldr	r3, [r4, #0]
    64d0:	6922      	ldr	r2, [r4, #16]
    64d2:	b2f6      	uxtb	r6, r6
    64d4:	1a98      	subs	r0, r3, r2
    64d6:	6963      	ldr	r3, [r4, #20]
    64d8:	4298      	cmp	r0, r3
    64da:	db0f      	blt.n	64fc <__swbuf_r+0x70>
    64dc:	e008      	b.n	64f0 <__swbuf_r+0x64>
    64de:	1c28      	adds	r0, r5, #0
    64e0:	1c21      	adds	r1, r4, #0
    64e2:	f000 f82b 	bl	653c <__swsetup_r>
    64e6:	2800      	cmp	r0, #0
    64e8:	d0f1      	beq.n	64ce <__swbuf_r+0x42>
    64ea:	2001      	movs	r0, #1
    64ec:	4240      	negs	r0, r0
    64ee:	e01d      	b.n	652c <__swbuf_r+0xa0>
    64f0:	1c28      	adds	r0, r5, #0
    64f2:	1c21      	adds	r1, r4, #0
    64f4:	f000 f920 	bl	6738 <_fflush_r>
    64f8:	2800      	cmp	r0, #0
    64fa:	d1f6      	bne.n	64ea <__swbuf_r+0x5e>
    64fc:	68a3      	ldr	r3, [r4, #8]
    64fe:	3001      	adds	r0, #1
    6500:	3b01      	subs	r3, #1
    6502:	60a3      	str	r3, [r4, #8]
    6504:	6823      	ldr	r3, [r4, #0]
    6506:	1c5a      	adds	r2, r3, #1
    6508:	6022      	str	r2, [r4, #0]
    650a:	701e      	strb	r6, [r3, #0]
    650c:	6963      	ldr	r3, [r4, #20]
    650e:	4298      	cmp	r0, r3
    6510:	d005      	beq.n	651e <__swbuf_r+0x92>
    6512:	89a3      	ldrh	r3, [r4, #12]
    6514:	1c30      	adds	r0, r6, #0
    6516:	07db      	lsls	r3, r3, #31
    6518:	d508      	bpl.n	652c <__swbuf_r+0xa0>
    651a:	2e0a      	cmp	r6, #10
    651c:	d106      	bne.n	652c <__swbuf_r+0xa0>
    651e:	1c28      	adds	r0, r5, #0
    6520:	1c21      	adds	r1, r4, #0
    6522:	f000 f909 	bl	6738 <_fflush_r>
    6526:	2800      	cmp	r0, #0
    6528:	d1df      	bne.n	64ea <__swbuf_r+0x5e>
    652a:	1c30      	adds	r0, r6, #0
    652c:	bd70      	pop	{r4, r5, r6, pc}
    652e:	46c0      	nop			; (mov r8, r8)
    6530:	00007508 	.word	0x00007508
    6534:	00007528 	.word	0x00007528
    6538:	00007548 	.word	0x00007548

0000653c <__swsetup_r>:
    653c:	4b35      	ldr	r3, [pc, #212]	; (6614 <__swsetup_r+0xd8>)
    653e:	b570      	push	{r4, r5, r6, lr}
    6540:	681d      	ldr	r5, [r3, #0]
    6542:	1c06      	adds	r6, r0, #0
    6544:	1c0c      	adds	r4, r1, #0
    6546:	2d00      	cmp	r5, #0
    6548:	d005      	beq.n	6556 <__swsetup_r+0x1a>
    654a:	69ab      	ldr	r3, [r5, #24]
    654c:	2b00      	cmp	r3, #0
    654e:	d102      	bne.n	6556 <__swsetup_r+0x1a>
    6550:	1c28      	adds	r0, r5, #0
    6552:	f000 f95f 	bl	6814 <__sinit>
    6556:	4b30      	ldr	r3, [pc, #192]	; (6618 <__swsetup_r+0xdc>)
    6558:	429c      	cmp	r4, r3
    655a:	d101      	bne.n	6560 <__swsetup_r+0x24>
    655c:	686c      	ldr	r4, [r5, #4]
    655e:	e008      	b.n	6572 <__swsetup_r+0x36>
    6560:	4b2e      	ldr	r3, [pc, #184]	; (661c <__swsetup_r+0xe0>)
    6562:	429c      	cmp	r4, r3
    6564:	d101      	bne.n	656a <__swsetup_r+0x2e>
    6566:	68ac      	ldr	r4, [r5, #8]
    6568:	e003      	b.n	6572 <__swsetup_r+0x36>
    656a:	4b2d      	ldr	r3, [pc, #180]	; (6620 <__swsetup_r+0xe4>)
    656c:	429c      	cmp	r4, r3
    656e:	d100      	bne.n	6572 <__swsetup_r+0x36>
    6570:	68ec      	ldr	r4, [r5, #12]
    6572:	89a3      	ldrh	r3, [r4, #12]
    6574:	b29a      	uxth	r2, r3
    6576:	0711      	lsls	r1, r2, #28
    6578:	d423      	bmi.n	65c2 <__swsetup_r+0x86>
    657a:	06d1      	lsls	r1, r2, #27
    657c:	d407      	bmi.n	658e <__swsetup_r+0x52>
    657e:	2209      	movs	r2, #9
    6580:	2001      	movs	r0, #1
    6582:	6032      	str	r2, [r6, #0]
    6584:	3237      	adds	r2, #55	; 0x37
    6586:	4313      	orrs	r3, r2
    6588:	81a3      	strh	r3, [r4, #12]
    658a:	4240      	negs	r0, r0
    658c:	e040      	b.n	6610 <__swsetup_r+0xd4>
    658e:	0753      	lsls	r3, r2, #29
    6590:	d513      	bpl.n	65ba <__swsetup_r+0x7e>
    6592:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6594:	2900      	cmp	r1, #0
    6596:	d008      	beq.n	65aa <__swsetup_r+0x6e>
    6598:	1c23      	adds	r3, r4, #0
    659a:	3344      	adds	r3, #68	; 0x44
    659c:	4299      	cmp	r1, r3
    659e:	d002      	beq.n	65a6 <__swsetup_r+0x6a>
    65a0:	1c30      	adds	r0, r6, #0
    65a2:	f000 fa2b 	bl	69fc <_free_r>
    65a6:	2300      	movs	r3, #0
    65a8:	6363      	str	r3, [r4, #52]	; 0x34
    65aa:	2224      	movs	r2, #36	; 0x24
    65ac:	89a3      	ldrh	r3, [r4, #12]
    65ae:	4393      	bics	r3, r2
    65b0:	81a3      	strh	r3, [r4, #12]
    65b2:	2300      	movs	r3, #0
    65b4:	6063      	str	r3, [r4, #4]
    65b6:	6923      	ldr	r3, [r4, #16]
    65b8:	6023      	str	r3, [r4, #0]
    65ba:	2208      	movs	r2, #8
    65bc:	89a3      	ldrh	r3, [r4, #12]
    65be:	4313      	orrs	r3, r2
    65c0:	81a3      	strh	r3, [r4, #12]
    65c2:	6923      	ldr	r3, [r4, #16]
    65c4:	2b00      	cmp	r3, #0
    65c6:	d10b      	bne.n	65e0 <__swsetup_r+0xa4>
    65c8:	23a0      	movs	r3, #160	; 0xa0
    65ca:	89a2      	ldrh	r2, [r4, #12]
    65cc:	009b      	lsls	r3, r3, #2
    65ce:	4013      	ands	r3, r2
    65d0:	2280      	movs	r2, #128	; 0x80
    65d2:	0092      	lsls	r2, r2, #2
    65d4:	4293      	cmp	r3, r2
    65d6:	d003      	beq.n	65e0 <__swsetup_r+0xa4>
    65d8:	1c30      	adds	r0, r6, #0
    65da:	1c21      	adds	r1, r4, #0
    65dc:	f000 f9ac 	bl	6938 <__smakebuf_r>
    65e0:	2301      	movs	r3, #1
    65e2:	89a2      	ldrh	r2, [r4, #12]
    65e4:	4013      	ands	r3, r2
    65e6:	d005      	beq.n	65f4 <__swsetup_r+0xb8>
    65e8:	2300      	movs	r3, #0
    65ea:	60a3      	str	r3, [r4, #8]
    65ec:	6963      	ldr	r3, [r4, #20]
    65ee:	425b      	negs	r3, r3
    65f0:	61a3      	str	r3, [r4, #24]
    65f2:	e003      	b.n	65fc <__swsetup_r+0xc0>
    65f4:	0791      	lsls	r1, r2, #30
    65f6:	d400      	bmi.n	65fa <__swsetup_r+0xbe>
    65f8:	6963      	ldr	r3, [r4, #20]
    65fa:	60a3      	str	r3, [r4, #8]
    65fc:	2000      	movs	r0, #0
    65fe:	6923      	ldr	r3, [r4, #16]
    6600:	4283      	cmp	r3, r0
    6602:	d105      	bne.n	6610 <__swsetup_r+0xd4>
    6604:	0613      	lsls	r3, r2, #24
    6606:	d503      	bpl.n	6610 <__swsetup_r+0xd4>
    6608:	2340      	movs	r3, #64	; 0x40
    660a:	431a      	orrs	r2, r3
    660c:	81a2      	strh	r2, [r4, #12]
    660e:	3801      	subs	r0, #1
    6610:	bd70      	pop	{r4, r5, r6, pc}
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	2000006c 	.word	0x2000006c
    6618:	00007508 	.word	0x00007508
    661c:	00007528 	.word	0x00007528
    6620:	00007548 	.word	0x00007548

00006624 <__sflush_r>:
    6624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6626:	898a      	ldrh	r2, [r1, #12]
    6628:	1c05      	adds	r5, r0, #0
    662a:	1c0c      	adds	r4, r1, #0
    662c:	0713      	lsls	r3, r2, #28
    662e:	d45e      	bmi.n	66ee <__sflush_r+0xca>
    6630:	684b      	ldr	r3, [r1, #4]
    6632:	2b00      	cmp	r3, #0
    6634:	dc02      	bgt.n	663c <__sflush_r+0x18>
    6636:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6638:	2b00      	cmp	r3, #0
    663a:	dd1a      	ble.n	6672 <__sflush_r+0x4e>
    663c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    663e:	2f00      	cmp	r7, #0
    6640:	d017      	beq.n	6672 <__sflush_r+0x4e>
    6642:	2300      	movs	r3, #0
    6644:	682e      	ldr	r6, [r5, #0]
    6646:	602b      	str	r3, [r5, #0]
    6648:	2380      	movs	r3, #128	; 0x80
    664a:	015b      	lsls	r3, r3, #5
    664c:	401a      	ands	r2, r3
    664e:	d001      	beq.n	6654 <__sflush_r+0x30>
    6650:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6652:	e015      	b.n	6680 <__sflush_r+0x5c>
    6654:	1c28      	adds	r0, r5, #0
    6656:	6a21      	ldr	r1, [r4, #32]
    6658:	2301      	movs	r3, #1
    665a:	47b8      	blx	r7
    665c:	1c02      	adds	r2, r0, #0
    665e:	1c43      	adds	r3, r0, #1
    6660:	d10e      	bne.n	6680 <__sflush_r+0x5c>
    6662:	682b      	ldr	r3, [r5, #0]
    6664:	2b00      	cmp	r3, #0
    6666:	d00b      	beq.n	6680 <__sflush_r+0x5c>
    6668:	2b1d      	cmp	r3, #29
    666a:	d001      	beq.n	6670 <__sflush_r+0x4c>
    666c:	2b16      	cmp	r3, #22
    666e:	d102      	bne.n	6676 <__sflush_r+0x52>
    6670:	602e      	str	r6, [r5, #0]
    6672:	2000      	movs	r0, #0
    6674:	e05e      	b.n	6734 <__sflush_r+0x110>
    6676:	2140      	movs	r1, #64	; 0x40
    6678:	89a3      	ldrh	r3, [r4, #12]
    667a:	430b      	orrs	r3, r1
    667c:	81a3      	strh	r3, [r4, #12]
    667e:	e059      	b.n	6734 <__sflush_r+0x110>
    6680:	89a3      	ldrh	r3, [r4, #12]
    6682:	075b      	lsls	r3, r3, #29
    6684:	d506      	bpl.n	6694 <__sflush_r+0x70>
    6686:	6863      	ldr	r3, [r4, #4]
    6688:	1ad2      	subs	r2, r2, r3
    668a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    668c:	2b00      	cmp	r3, #0
    668e:	d001      	beq.n	6694 <__sflush_r+0x70>
    6690:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6692:	1ad2      	subs	r2, r2, r3
    6694:	2300      	movs	r3, #0
    6696:	1c28      	adds	r0, r5, #0
    6698:	6a21      	ldr	r1, [r4, #32]
    669a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    669c:	47b8      	blx	r7
    669e:	89a3      	ldrh	r3, [r4, #12]
    66a0:	1c42      	adds	r2, r0, #1
    66a2:	d106      	bne.n	66b2 <__sflush_r+0x8e>
    66a4:	682a      	ldr	r2, [r5, #0]
    66a6:	2a00      	cmp	r2, #0
    66a8:	d003      	beq.n	66b2 <__sflush_r+0x8e>
    66aa:	2a1d      	cmp	r2, #29
    66ac:	d001      	beq.n	66b2 <__sflush_r+0x8e>
    66ae:	2a16      	cmp	r2, #22
    66b0:	d119      	bne.n	66e6 <__sflush_r+0xc2>
    66b2:	2200      	movs	r2, #0
    66b4:	6062      	str	r2, [r4, #4]
    66b6:	6922      	ldr	r2, [r4, #16]
    66b8:	6022      	str	r2, [r4, #0]
    66ba:	04db      	lsls	r3, r3, #19
    66bc:	d505      	bpl.n	66ca <__sflush_r+0xa6>
    66be:	1c43      	adds	r3, r0, #1
    66c0:	d102      	bne.n	66c8 <__sflush_r+0xa4>
    66c2:	682b      	ldr	r3, [r5, #0]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d100      	bne.n	66ca <__sflush_r+0xa6>
    66c8:	6560      	str	r0, [r4, #84]	; 0x54
    66ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    66cc:	602e      	str	r6, [r5, #0]
    66ce:	2900      	cmp	r1, #0
    66d0:	d0cf      	beq.n	6672 <__sflush_r+0x4e>
    66d2:	1c23      	adds	r3, r4, #0
    66d4:	3344      	adds	r3, #68	; 0x44
    66d6:	4299      	cmp	r1, r3
    66d8:	d002      	beq.n	66e0 <__sflush_r+0xbc>
    66da:	1c28      	adds	r0, r5, #0
    66dc:	f000 f98e 	bl	69fc <_free_r>
    66e0:	2000      	movs	r0, #0
    66e2:	6360      	str	r0, [r4, #52]	; 0x34
    66e4:	e026      	b.n	6734 <__sflush_r+0x110>
    66e6:	2240      	movs	r2, #64	; 0x40
    66e8:	4313      	orrs	r3, r2
    66ea:	81a3      	strh	r3, [r4, #12]
    66ec:	e022      	b.n	6734 <__sflush_r+0x110>
    66ee:	690f      	ldr	r7, [r1, #16]
    66f0:	2f00      	cmp	r7, #0
    66f2:	d0be      	beq.n	6672 <__sflush_r+0x4e>
    66f4:	680b      	ldr	r3, [r1, #0]
    66f6:	600f      	str	r7, [r1, #0]
    66f8:	1bdb      	subs	r3, r3, r7
    66fa:	9301      	str	r3, [sp, #4]
    66fc:	2300      	movs	r3, #0
    66fe:	0792      	lsls	r2, r2, #30
    6700:	d100      	bne.n	6704 <__sflush_r+0xe0>
    6702:	694b      	ldr	r3, [r1, #20]
    6704:	60a3      	str	r3, [r4, #8]
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	2b00      	cmp	r3, #0
    670a:	ddb2      	ble.n	6672 <__sflush_r+0x4e>
    670c:	1c28      	adds	r0, r5, #0
    670e:	6a21      	ldr	r1, [r4, #32]
    6710:	1c3a      	adds	r2, r7, #0
    6712:	9b01      	ldr	r3, [sp, #4]
    6714:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6716:	47b0      	blx	r6
    6718:	2800      	cmp	r0, #0
    671a:	dc06      	bgt.n	672a <__sflush_r+0x106>
    671c:	2240      	movs	r2, #64	; 0x40
    671e:	2001      	movs	r0, #1
    6720:	89a3      	ldrh	r3, [r4, #12]
    6722:	4240      	negs	r0, r0
    6724:	4313      	orrs	r3, r2
    6726:	81a3      	strh	r3, [r4, #12]
    6728:	e004      	b.n	6734 <__sflush_r+0x110>
    672a:	9b01      	ldr	r3, [sp, #4]
    672c:	183f      	adds	r7, r7, r0
    672e:	1a1b      	subs	r3, r3, r0
    6730:	9301      	str	r3, [sp, #4]
    6732:	e7e8      	b.n	6706 <__sflush_r+0xe2>
    6734:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006738 <_fflush_r>:
    6738:	b538      	push	{r3, r4, r5, lr}
    673a:	690b      	ldr	r3, [r1, #16]
    673c:	1c05      	adds	r5, r0, #0
    673e:	1c0c      	adds	r4, r1, #0
    6740:	2b00      	cmp	r3, #0
    6742:	d101      	bne.n	6748 <_fflush_r+0x10>
    6744:	2000      	movs	r0, #0
    6746:	e01c      	b.n	6782 <_fflush_r+0x4a>
    6748:	2800      	cmp	r0, #0
    674a:	d004      	beq.n	6756 <_fflush_r+0x1e>
    674c:	6983      	ldr	r3, [r0, #24]
    674e:	2b00      	cmp	r3, #0
    6750:	d101      	bne.n	6756 <_fflush_r+0x1e>
    6752:	f000 f85f 	bl	6814 <__sinit>
    6756:	4b0b      	ldr	r3, [pc, #44]	; (6784 <_fflush_r+0x4c>)
    6758:	429c      	cmp	r4, r3
    675a:	d101      	bne.n	6760 <_fflush_r+0x28>
    675c:	686c      	ldr	r4, [r5, #4]
    675e:	e008      	b.n	6772 <_fflush_r+0x3a>
    6760:	4b09      	ldr	r3, [pc, #36]	; (6788 <_fflush_r+0x50>)
    6762:	429c      	cmp	r4, r3
    6764:	d101      	bne.n	676a <_fflush_r+0x32>
    6766:	68ac      	ldr	r4, [r5, #8]
    6768:	e003      	b.n	6772 <_fflush_r+0x3a>
    676a:	4b08      	ldr	r3, [pc, #32]	; (678c <_fflush_r+0x54>)
    676c:	429c      	cmp	r4, r3
    676e:	d100      	bne.n	6772 <_fflush_r+0x3a>
    6770:	68ec      	ldr	r4, [r5, #12]
    6772:	220c      	movs	r2, #12
    6774:	5ea3      	ldrsh	r3, [r4, r2]
    6776:	2b00      	cmp	r3, #0
    6778:	d0e4      	beq.n	6744 <_fflush_r+0xc>
    677a:	1c28      	adds	r0, r5, #0
    677c:	1c21      	adds	r1, r4, #0
    677e:	f7ff ff51 	bl	6624 <__sflush_r>
    6782:	bd38      	pop	{r3, r4, r5, pc}
    6784:	00007508 	.word	0x00007508
    6788:	00007528 	.word	0x00007528
    678c:	00007548 	.word	0x00007548

00006790 <_cleanup_r>:
    6790:	b508      	push	{r3, lr}
    6792:	4902      	ldr	r1, [pc, #8]	; (679c <_cleanup_r+0xc>)
    6794:	f000 f8ae 	bl	68f4 <_fwalk_reent>
    6798:	bd08      	pop	{r3, pc}
    679a:	46c0      	nop			; (mov r8, r8)
    679c:	00006739 	.word	0x00006739

000067a0 <std.isra.0>:
    67a0:	2300      	movs	r3, #0
    67a2:	b510      	push	{r4, lr}
    67a4:	1c04      	adds	r4, r0, #0
    67a6:	6003      	str	r3, [r0, #0]
    67a8:	6043      	str	r3, [r0, #4]
    67aa:	6083      	str	r3, [r0, #8]
    67ac:	8181      	strh	r1, [r0, #12]
    67ae:	6643      	str	r3, [r0, #100]	; 0x64
    67b0:	81c2      	strh	r2, [r0, #14]
    67b2:	6103      	str	r3, [r0, #16]
    67b4:	6143      	str	r3, [r0, #20]
    67b6:	6183      	str	r3, [r0, #24]
    67b8:	1c19      	adds	r1, r3, #0
    67ba:	2208      	movs	r2, #8
    67bc:	305c      	adds	r0, #92	; 0x5c
    67be:	f7ff fdb2 	bl	6326 <memset>
    67c2:	4b05      	ldr	r3, [pc, #20]	; (67d8 <std.isra.0+0x38>)
    67c4:	6224      	str	r4, [r4, #32]
    67c6:	6263      	str	r3, [r4, #36]	; 0x24
    67c8:	4b04      	ldr	r3, [pc, #16]	; (67dc <std.isra.0+0x3c>)
    67ca:	62a3      	str	r3, [r4, #40]	; 0x28
    67cc:	4b04      	ldr	r3, [pc, #16]	; (67e0 <std.isra.0+0x40>)
    67ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    67d0:	4b04      	ldr	r3, [pc, #16]	; (67e4 <std.isra.0+0x44>)
    67d2:	6323      	str	r3, [r4, #48]	; 0x30
    67d4:	bd10      	pop	{r4, pc}
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	000070d9 	.word	0x000070d9
    67dc:	00007101 	.word	0x00007101
    67e0:	00007139 	.word	0x00007139
    67e4:	00007165 	.word	0x00007165

000067e8 <__sfmoreglue>:
    67e8:	b570      	push	{r4, r5, r6, lr}
    67ea:	2568      	movs	r5, #104	; 0x68
    67ec:	1e4b      	subs	r3, r1, #1
    67ee:	435d      	muls	r5, r3
    67f0:	1c0e      	adds	r6, r1, #0
    67f2:	1c29      	adds	r1, r5, #0
    67f4:	3174      	adds	r1, #116	; 0x74
    67f6:	f000 f947 	bl	6a88 <_malloc_r>
    67fa:	1e04      	subs	r4, r0, #0
    67fc:	d008      	beq.n	6810 <__sfmoreglue+0x28>
    67fe:	2100      	movs	r1, #0
    6800:	1c2a      	adds	r2, r5, #0
    6802:	6001      	str	r1, [r0, #0]
    6804:	6046      	str	r6, [r0, #4]
    6806:	300c      	adds	r0, #12
    6808:	60a0      	str	r0, [r4, #8]
    680a:	3268      	adds	r2, #104	; 0x68
    680c:	f7ff fd8b 	bl	6326 <memset>
    6810:	1c20      	adds	r0, r4, #0
    6812:	bd70      	pop	{r4, r5, r6, pc}

00006814 <__sinit>:
    6814:	6983      	ldr	r3, [r0, #24]
    6816:	b513      	push	{r0, r1, r4, lr}
    6818:	2b00      	cmp	r3, #0
    681a:	d128      	bne.n	686e <__sinit+0x5a>
    681c:	6483      	str	r3, [r0, #72]	; 0x48
    681e:	64c3      	str	r3, [r0, #76]	; 0x4c
    6820:	6503      	str	r3, [r0, #80]	; 0x50
    6822:	4b13      	ldr	r3, [pc, #76]	; (6870 <__sinit+0x5c>)
    6824:	4a13      	ldr	r2, [pc, #76]	; (6874 <__sinit+0x60>)
    6826:	681b      	ldr	r3, [r3, #0]
    6828:	6282      	str	r2, [r0, #40]	; 0x28
    682a:	9301      	str	r3, [sp, #4]
    682c:	4298      	cmp	r0, r3
    682e:	d101      	bne.n	6834 <__sinit+0x20>
    6830:	2301      	movs	r3, #1
    6832:	6183      	str	r3, [r0, #24]
    6834:	1c04      	adds	r4, r0, #0
    6836:	f000 f81f 	bl	6878 <__sfp>
    683a:	6060      	str	r0, [r4, #4]
    683c:	1c20      	adds	r0, r4, #0
    683e:	f000 f81b 	bl	6878 <__sfp>
    6842:	60a0      	str	r0, [r4, #8]
    6844:	1c20      	adds	r0, r4, #0
    6846:	f000 f817 	bl	6878 <__sfp>
    684a:	2104      	movs	r1, #4
    684c:	60e0      	str	r0, [r4, #12]
    684e:	2200      	movs	r2, #0
    6850:	6860      	ldr	r0, [r4, #4]
    6852:	f7ff ffa5 	bl	67a0 <std.isra.0>
    6856:	68a0      	ldr	r0, [r4, #8]
    6858:	2109      	movs	r1, #9
    685a:	2201      	movs	r2, #1
    685c:	f7ff ffa0 	bl	67a0 <std.isra.0>
    6860:	68e0      	ldr	r0, [r4, #12]
    6862:	2112      	movs	r1, #18
    6864:	2202      	movs	r2, #2
    6866:	f7ff ff9b 	bl	67a0 <std.isra.0>
    686a:	2301      	movs	r3, #1
    686c:	61a3      	str	r3, [r4, #24]
    686e:	bd13      	pop	{r0, r1, r4, pc}
    6870:	00007504 	.word	0x00007504
    6874:	00006791 	.word	0x00006791

00006878 <__sfp>:
    6878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    687a:	4b1d      	ldr	r3, [pc, #116]	; (68f0 <__sfp+0x78>)
    687c:	1c06      	adds	r6, r0, #0
    687e:	681d      	ldr	r5, [r3, #0]
    6880:	69ab      	ldr	r3, [r5, #24]
    6882:	2b00      	cmp	r3, #0
    6884:	d102      	bne.n	688c <__sfp+0x14>
    6886:	1c28      	adds	r0, r5, #0
    6888:	f7ff ffc4 	bl	6814 <__sinit>
    688c:	3548      	adds	r5, #72	; 0x48
    688e:	68ac      	ldr	r4, [r5, #8]
    6890:	686b      	ldr	r3, [r5, #4]
    6892:	3b01      	subs	r3, #1
    6894:	d405      	bmi.n	68a2 <__sfp+0x2a>
    6896:	220c      	movs	r2, #12
    6898:	5ea7      	ldrsh	r7, [r4, r2]
    689a:	2f00      	cmp	r7, #0
    689c:	d010      	beq.n	68c0 <__sfp+0x48>
    689e:	3468      	adds	r4, #104	; 0x68
    68a0:	e7f7      	b.n	6892 <__sfp+0x1a>
    68a2:	682b      	ldr	r3, [r5, #0]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d106      	bne.n	68b6 <__sfp+0x3e>
    68a8:	1c30      	adds	r0, r6, #0
    68aa:	2104      	movs	r1, #4
    68ac:	f7ff ff9c 	bl	67e8 <__sfmoreglue>
    68b0:	6028      	str	r0, [r5, #0]
    68b2:	2800      	cmp	r0, #0
    68b4:	d001      	beq.n	68ba <__sfp+0x42>
    68b6:	682d      	ldr	r5, [r5, #0]
    68b8:	e7e9      	b.n	688e <__sfp+0x16>
    68ba:	230c      	movs	r3, #12
    68bc:	6033      	str	r3, [r6, #0]
    68be:	e016      	b.n	68ee <__sfp+0x76>
    68c0:	2301      	movs	r3, #1
    68c2:	1c20      	adds	r0, r4, #0
    68c4:	425b      	negs	r3, r3
    68c6:	81e3      	strh	r3, [r4, #14]
    68c8:	3302      	adds	r3, #2
    68ca:	81a3      	strh	r3, [r4, #12]
    68cc:	6667      	str	r7, [r4, #100]	; 0x64
    68ce:	6027      	str	r7, [r4, #0]
    68d0:	60a7      	str	r7, [r4, #8]
    68d2:	6067      	str	r7, [r4, #4]
    68d4:	6127      	str	r7, [r4, #16]
    68d6:	6167      	str	r7, [r4, #20]
    68d8:	61a7      	str	r7, [r4, #24]
    68da:	305c      	adds	r0, #92	; 0x5c
    68dc:	1c39      	adds	r1, r7, #0
    68de:	2208      	movs	r2, #8
    68e0:	f7ff fd21 	bl	6326 <memset>
    68e4:	1c20      	adds	r0, r4, #0
    68e6:	6367      	str	r7, [r4, #52]	; 0x34
    68e8:	63a7      	str	r7, [r4, #56]	; 0x38
    68ea:	64a7      	str	r7, [r4, #72]	; 0x48
    68ec:	64e7      	str	r7, [r4, #76]	; 0x4c
    68ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68f0:	00007504 	.word	0x00007504

000068f4 <_fwalk_reent>:
    68f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68f6:	1c04      	adds	r4, r0, #0
    68f8:	1c07      	adds	r7, r0, #0
    68fa:	2600      	movs	r6, #0
    68fc:	9101      	str	r1, [sp, #4]
    68fe:	3448      	adds	r4, #72	; 0x48
    6900:	2c00      	cmp	r4, #0
    6902:	d016      	beq.n	6932 <_fwalk_reent+0x3e>
    6904:	6863      	ldr	r3, [r4, #4]
    6906:	68a5      	ldr	r5, [r4, #8]
    6908:	9300      	str	r3, [sp, #0]
    690a:	9b00      	ldr	r3, [sp, #0]
    690c:	3b01      	subs	r3, #1
    690e:	9300      	str	r3, [sp, #0]
    6910:	d40d      	bmi.n	692e <_fwalk_reent+0x3a>
    6912:	89ab      	ldrh	r3, [r5, #12]
    6914:	2b01      	cmp	r3, #1
    6916:	d908      	bls.n	692a <_fwalk_reent+0x36>
    6918:	220e      	movs	r2, #14
    691a:	5eab      	ldrsh	r3, [r5, r2]
    691c:	3301      	adds	r3, #1
    691e:	d004      	beq.n	692a <_fwalk_reent+0x36>
    6920:	1c38      	adds	r0, r7, #0
    6922:	1c29      	adds	r1, r5, #0
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	4798      	blx	r3
    6928:	4306      	orrs	r6, r0
    692a:	3568      	adds	r5, #104	; 0x68
    692c:	e7ed      	b.n	690a <_fwalk_reent+0x16>
    692e:	6824      	ldr	r4, [r4, #0]
    6930:	e7e6      	b.n	6900 <_fwalk_reent+0xc>
    6932:	1c30      	adds	r0, r6, #0
    6934:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006938 <__smakebuf_r>:
    6938:	b5f0      	push	{r4, r5, r6, r7, lr}
    693a:	898b      	ldrh	r3, [r1, #12]
    693c:	b091      	sub	sp, #68	; 0x44
    693e:	079b      	lsls	r3, r3, #30
    6940:	d506      	bpl.n	6950 <__smakebuf_r+0x18>
    6942:	1c0b      	adds	r3, r1, #0
    6944:	3347      	adds	r3, #71	; 0x47
    6946:	600b      	str	r3, [r1, #0]
    6948:	610b      	str	r3, [r1, #16]
    694a:	2301      	movs	r3, #1
    694c:	614b      	str	r3, [r1, #20]
    694e:	e045      	b.n	69dc <__smakebuf_r+0xa4>
    6950:	1c0c      	adds	r4, r1, #0
    6952:	230e      	movs	r3, #14
    6954:	5ec9      	ldrsh	r1, [r1, r3]
    6956:	1c06      	adds	r6, r0, #0
    6958:	2900      	cmp	r1, #0
    695a:	da04      	bge.n	6966 <__smakebuf_r+0x2e>
    695c:	2380      	movs	r3, #128	; 0x80
    695e:	89a5      	ldrh	r5, [r4, #12]
    6960:	401d      	ands	r5, r3
    6962:	d110      	bne.n	6986 <__smakebuf_r+0x4e>
    6964:	e00c      	b.n	6980 <__smakebuf_r+0x48>
    6966:	aa01      	add	r2, sp, #4
    6968:	f000 fc28 	bl	71bc <_fstat_r>
    696c:	2800      	cmp	r0, #0
    696e:	dbf5      	blt.n	695c <__smakebuf_r+0x24>
    6970:	23f0      	movs	r3, #240	; 0xf0
    6972:	9d02      	ldr	r5, [sp, #8]
    6974:	021b      	lsls	r3, r3, #8
    6976:	401d      	ands	r5, r3
    6978:	4b19      	ldr	r3, [pc, #100]	; (69e0 <__smakebuf_r+0xa8>)
    697a:	18ed      	adds	r5, r5, r3
    697c:	426b      	negs	r3, r5
    697e:	415d      	adcs	r5, r3
    6980:	2780      	movs	r7, #128	; 0x80
    6982:	00ff      	lsls	r7, r7, #3
    6984:	e001      	b.n	698a <__smakebuf_r+0x52>
    6986:	2500      	movs	r5, #0
    6988:	2740      	movs	r7, #64	; 0x40
    698a:	1c30      	adds	r0, r6, #0
    698c:	1c39      	adds	r1, r7, #0
    698e:	f000 f87b 	bl	6a88 <_malloc_r>
    6992:	2800      	cmp	r0, #0
    6994:	d10c      	bne.n	69b0 <__smakebuf_r+0x78>
    6996:	89a3      	ldrh	r3, [r4, #12]
    6998:	059a      	lsls	r2, r3, #22
    699a:	d41f      	bmi.n	69dc <__smakebuf_r+0xa4>
    699c:	2202      	movs	r2, #2
    699e:	4313      	orrs	r3, r2
    69a0:	81a3      	strh	r3, [r4, #12]
    69a2:	1c23      	adds	r3, r4, #0
    69a4:	3347      	adds	r3, #71	; 0x47
    69a6:	6023      	str	r3, [r4, #0]
    69a8:	6123      	str	r3, [r4, #16]
    69aa:	2301      	movs	r3, #1
    69ac:	6163      	str	r3, [r4, #20]
    69ae:	e015      	b.n	69dc <__smakebuf_r+0xa4>
    69b0:	2280      	movs	r2, #128	; 0x80
    69b2:	4b0c      	ldr	r3, [pc, #48]	; (69e4 <__smakebuf_r+0xac>)
    69b4:	62b3      	str	r3, [r6, #40]	; 0x28
    69b6:	89a3      	ldrh	r3, [r4, #12]
    69b8:	6020      	str	r0, [r4, #0]
    69ba:	4313      	orrs	r3, r2
    69bc:	81a3      	strh	r3, [r4, #12]
    69be:	6120      	str	r0, [r4, #16]
    69c0:	6167      	str	r7, [r4, #20]
    69c2:	2d00      	cmp	r5, #0
    69c4:	d00a      	beq.n	69dc <__smakebuf_r+0xa4>
    69c6:	230e      	movs	r3, #14
    69c8:	5ee1      	ldrsh	r1, [r4, r3]
    69ca:	1c30      	adds	r0, r6, #0
    69cc:	f000 fc08 	bl	71e0 <_isatty_r>
    69d0:	2800      	cmp	r0, #0
    69d2:	d003      	beq.n	69dc <__smakebuf_r+0xa4>
    69d4:	2201      	movs	r2, #1
    69d6:	89a3      	ldrh	r3, [r4, #12]
    69d8:	4313      	orrs	r3, r2
    69da:	81a3      	strh	r3, [r4, #12]
    69dc:	b011      	add	sp, #68	; 0x44
    69de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69e0:	ffffe000 	.word	0xffffe000
    69e4:	00006791 	.word	0x00006791

000069e8 <malloc>:
    69e8:	b508      	push	{r3, lr}
    69ea:	4b03      	ldr	r3, [pc, #12]	; (69f8 <malloc+0x10>)
    69ec:	1c01      	adds	r1, r0, #0
    69ee:	6818      	ldr	r0, [r3, #0]
    69f0:	f000 f84a 	bl	6a88 <_malloc_r>
    69f4:	bd08      	pop	{r3, pc}
    69f6:	46c0      	nop			; (mov r8, r8)
    69f8:	2000006c 	.word	0x2000006c

000069fc <_free_r>:
    69fc:	b530      	push	{r4, r5, lr}
    69fe:	2900      	cmp	r1, #0
    6a00:	d03e      	beq.n	6a80 <_free_r+0x84>
    6a02:	3904      	subs	r1, #4
    6a04:	680b      	ldr	r3, [r1, #0]
    6a06:	2b00      	cmp	r3, #0
    6a08:	da00      	bge.n	6a0c <_free_r+0x10>
    6a0a:	18c9      	adds	r1, r1, r3
    6a0c:	4a1d      	ldr	r2, [pc, #116]	; (6a84 <_free_r+0x88>)
    6a0e:	6813      	ldr	r3, [r2, #0]
    6a10:	1c14      	adds	r4, r2, #0
    6a12:	2b00      	cmp	r3, #0
    6a14:	d102      	bne.n	6a1c <_free_r+0x20>
    6a16:	604b      	str	r3, [r1, #4]
    6a18:	6011      	str	r1, [r2, #0]
    6a1a:	e031      	b.n	6a80 <_free_r+0x84>
    6a1c:	4299      	cmp	r1, r3
    6a1e:	d20d      	bcs.n	6a3c <_free_r+0x40>
    6a20:	6808      	ldr	r0, [r1, #0]
    6a22:	180a      	adds	r2, r1, r0
    6a24:	429a      	cmp	r2, r3
    6a26:	d103      	bne.n	6a30 <_free_r+0x34>
    6a28:	6813      	ldr	r3, [r2, #0]
    6a2a:	18c3      	adds	r3, r0, r3
    6a2c:	600b      	str	r3, [r1, #0]
    6a2e:	6853      	ldr	r3, [r2, #4]
    6a30:	604b      	str	r3, [r1, #4]
    6a32:	6021      	str	r1, [r4, #0]
    6a34:	e024      	b.n	6a80 <_free_r+0x84>
    6a36:	428a      	cmp	r2, r1
    6a38:	d803      	bhi.n	6a42 <_free_r+0x46>
    6a3a:	1c13      	adds	r3, r2, #0
    6a3c:	685a      	ldr	r2, [r3, #4]
    6a3e:	2a00      	cmp	r2, #0
    6a40:	d1f9      	bne.n	6a36 <_free_r+0x3a>
    6a42:	681d      	ldr	r5, [r3, #0]
    6a44:	195c      	adds	r4, r3, r5
    6a46:	428c      	cmp	r4, r1
    6a48:	d10b      	bne.n	6a62 <_free_r+0x66>
    6a4a:	6809      	ldr	r1, [r1, #0]
    6a4c:	1869      	adds	r1, r5, r1
    6a4e:	1858      	adds	r0, r3, r1
    6a50:	6019      	str	r1, [r3, #0]
    6a52:	4290      	cmp	r0, r2
    6a54:	d114      	bne.n	6a80 <_free_r+0x84>
    6a56:	6810      	ldr	r0, [r2, #0]
    6a58:	6852      	ldr	r2, [r2, #4]
    6a5a:	1809      	adds	r1, r1, r0
    6a5c:	6019      	str	r1, [r3, #0]
    6a5e:	605a      	str	r2, [r3, #4]
    6a60:	e00e      	b.n	6a80 <_free_r+0x84>
    6a62:	428c      	cmp	r4, r1
    6a64:	d902      	bls.n	6a6c <_free_r+0x70>
    6a66:	230c      	movs	r3, #12
    6a68:	6003      	str	r3, [r0, #0]
    6a6a:	e009      	b.n	6a80 <_free_r+0x84>
    6a6c:	6808      	ldr	r0, [r1, #0]
    6a6e:	180c      	adds	r4, r1, r0
    6a70:	4294      	cmp	r4, r2
    6a72:	d103      	bne.n	6a7c <_free_r+0x80>
    6a74:	6814      	ldr	r4, [r2, #0]
    6a76:	6852      	ldr	r2, [r2, #4]
    6a78:	1900      	adds	r0, r0, r4
    6a7a:	6008      	str	r0, [r1, #0]
    6a7c:	604a      	str	r2, [r1, #4]
    6a7e:	6059      	str	r1, [r3, #4]
    6a80:	bd30      	pop	{r4, r5, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	20003cd8 	.word	0x20003cd8

00006a88 <_malloc_r>:
    6a88:	2303      	movs	r3, #3
    6a8a:	b570      	push	{r4, r5, r6, lr}
    6a8c:	1ccc      	adds	r4, r1, #3
    6a8e:	439c      	bics	r4, r3
    6a90:	3408      	adds	r4, #8
    6a92:	1c05      	adds	r5, r0, #0
    6a94:	2c0c      	cmp	r4, #12
    6a96:	d201      	bcs.n	6a9c <_malloc_r+0x14>
    6a98:	240c      	movs	r4, #12
    6a9a:	e005      	b.n	6aa8 <_malloc_r+0x20>
    6a9c:	2c00      	cmp	r4, #0
    6a9e:	da03      	bge.n	6aa8 <_malloc_r+0x20>
    6aa0:	230c      	movs	r3, #12
    6aa2:	2000      	movs	r0, #0
    6aa4:	602b      	str	r3, [r5, #0]
    6aa6:	e042      	b.n	6b2e <_malloc_r+0xa6>
    6aa8:	428c      	cmp	r4, r1
    6aaa:	d3f9      	bcc.n	6aa0 <_malloc_r+0x18>
    6aac:	4a20      	ldr	r2, [pc, #128]	; (6b30 <_malloc_r+0xa8>)
    6aae:	6813      	ldr	r3, [r2, #0]
    6ab0:	1c10      	adds	r0, r2, #0
    6ab2:	1c19      	adds	r1, r3, #0
    6ab4:	2900      	cmp	r1, #0
    6ab6:	d013      	beq.n	6ae0 <_malloc_r+0x58>
    6ab8:	680a      	ldr	r2, [r1, #0]
    6aba:	1b12      	subs	r2, r2, r4
    6abc:	d40d      	bmi.n	6ada <_malloc_r+0x52>
    6abe:	2a0b      	cmp	r2, #11
    6ac0:	d902      	bls.n	6ac8 <_malloc_r+0x40>
    6ac2:	600a      	str	r2, [r1, #0]
    6ac4:	188b      	adds	r3, r1, r2
    6ac6:	e01f      	b.n	6b08 <_malloc_r+0x80>
    6ac8:	428b      	cmp	r3, r1
    6aca:	d102      	bne.n	6ad2 <_malloc_r+0x4a>
    6acc:	685a      	ldr	r2, [r3, #4]
    6ace:	6002      	str	r2, [r0, #0]
    6ad0:	e01b      	b.n	6b0a <_malloc_r+0x82>
    6ad2:	684a      	ldr	r2, [r1, #4]
    6ad4:	605a      	str	r2, [r3, #4]
    6ad6:	1c0b      	adds	r3, r1, #0
    6ad8:	e017      	b.n	6b0a <_malloc_r+0x82>
    6ada:	1c0b      	adds	r3, r1, #0
    6adc:	6849      	ldr	r1, [r1, #4]
    6ade:	e7e9      	b.n	6ab4 <_malloc_r+0x2c>
    6ae0:	4e14      	ldr	r6, [pc, #80]	; (6b34 <_malloc_r+0xac>)
    6ae2:	6833      	ldr	r3, [r6, #0]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d103      	bne.n	6af0 <_malloc_r+0x68>
    6ae8:	1c28      	adds	r0, r5, #0
    6aea:	f000 fae3 	bl	70b4 <_sbrk_r>
    6aee:	6030      	str	r0, [r6, #0]
    6af0:	1c28      	adds	r0, r5, #0
    6af2:	1c21      	adds	r1, r4, #0
    6af4:	f000 fade 	bl	70b4 <_sbrk_r>
    6af8:	1c03      	adds	r3, r0, #0
    6afa:	1c42      	adds	r2, r0, #1
    6afc:	d0d0      	beq.n	6aa0 <_malloc_r+0x18>
    6afe:	2203      	movs	r2, #3
    6b00:	1cc6      	adds	r6, r0, #3
    6b02:	4396      	bics	r6, r2
    6b04:	4286      	cmp	r6, r0
    6b06:	d10a      	bne.n	6b1e <_malloc_r+0x96>
    6b08:	601c      	str	r4, [r3, #0]
    6b0a:	1c18      	adds	r0, r3, #0
    6b0c:	2107      	movs	r1, #7
    6b0e:	300b      	adds	r0, #11
    6b10:	1d1a      	adds	r2, r3, #4
    6b12:	4388      	bics	r0, r1
    6b14:	1a82      	subs	r2, r0, r2
    6b16:	d00a      	beq.n	6b2e <_malloc_r+0xa6>
    6b18:	4251      	negs	r1, r2
    6b1a:	5099      	str	r1, [r3, r2]
    6b1c:	e007      	b.n	6b2e <_malloc_r+0xa6>
    6b1e:	1a31      	subs	r1, r6, r0
    6b20:	1c28      	adds	r0, r5, #0
    6b22:	f000 fac7 	bl	70b4 <_sbrk_r>
    6b26:	1c43      	adds	r3, r0, #1
    6b28:	d0ba      	beq.n	6aa0 <_malloc_r+0x18>
    6b2a:	1c33      	adds	r3, r6, #0
    6b2c:	e7ec      	b.n	6b08 <_malloc_r+0x80>
    6b2e:	bd70      	pop	{r4, r5, r6, pc}
    6b30:	20003cd8 	.word	0x20003cd8
    6b34:	20003cd4 	.word	0x20003cd4

00006b38 <__sfputc_r>:
    6b38:	6893      	ldr	r3, [r2, #8]
    6b3a:	b510      	push	{r4, lr}
    6b3c:	3b01      	subs	r3, #1
    6b3e:	6093      	str	r3, [r2, #8]
    6b40:	2b00      	cmp	r3, #0
    6b42:	da05      	bge.n	6b50 <__sfputc_r+0x18>
    6b44:	6994      	ldr	r4, [r2, #24]
    6b46:	42a3      	cmp	r3, r4
    6b48:	db08      	blt.n	6b5c <__sfputc_r+0x24>
    6b4a:	b2cb      	uxtb	r3, r1
    6b4c:	2b0a      	cmp	r3, #10
    6b4e:	d005      	beq.n	6b5c <__sfputc_r+0x24>
    6b50:	6813      	ldr	r3, [r2, #0]
    6b52:	1c58      	adds	r0, r3, #1
    6b54:	6010      	str	r0, [r2, #0]
    6b56:	7019      	strb	r1, [r3, #0]
    6b58:	b2c8      	uxtb	r0, r1
    6b5a:	e001      	b.n	6b60 <__sfputc_r+0x28>
    6b5c:	f7ff fc96 	bl	648c <__swbuf_r>
    6b60:	bd10      	pop	{r4, pc}

00006b62 <__sfputs_r>:
    6b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b64:	1c06      	adds	r6, r0, #0
    6b66:	1c0f      	adds	r7, r1, #0
    6b68:	1c14      	adds	r4, r2, #0
    6b6a:	18d5      	adds	r5, r2, r3
    6b6c:	42ac      	cmp	r4, r5
    6b6e:	d008      	beq.n	6b82 <__sfputs_r+0x20>
    6b70:	7821      	ldrb	r1, [r4, #0]
    6b72:	1c30      	adds	r0, r6, #0
    6b74:	1c3a      	adds	r2, r7, #0
    6b76:	f7ff ffdf 	bl	6b38 <__sfputc_r>
    6b7a:	3401      	adds	r4, #1
    6b7c:	1c43      	adds	r3, r0, #1
    6b7e:	d1f5      	bne.n	6b6c <__sfputs_r+0xa>
    6b80:	e000      	b.n	6b84 <__sfputs_r+0x22>
    6b82:	2000      	movs	r0, #0
    6b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006b88 <_vfiprintf_r>:
    6b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8a:	b09f      	sub	sp, #124	; 0x7c
    6b8c:	1c06      	adds	r6, r0, #0
    6b8e:	1c0f      	adds	r7, r1, #0
    6b90:	9202      	str	r2, [sp, #8]
    6b92:	9305      	str	r3, [sp, #20]
    6b94:	2800      	cmp	r0, #0
    6b96:	d004      	beq.n	6ba2 <_vfiprintf_r+0x1a>
    6b98:	6983      	ldr	r3, [r0, #24]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d101      	bne.n	6ba2 <_vfiprintf_r+0x1a>
    6b9e:	f7ff fe39 	bl	6814 <__sinit>
    6ba2:	4b79      	ldr	r3, [pc, #484]	; (6d88 <_vfiprintf_r+0x200>)
    6ba4:	429f      	cmp	r7, r3
    6ba6:	d101      	bne.n	6bac <_vfiprintf_r+0x24>
    6ba8:	6877      	ldr	r7, [r6, #4]
    6baa:	e008      	b.n	6bbe <_vfiprintf_r+0x36>
    6bac:	4b77      	ldr	r3, [pc, #476]	; (6d8c <_vfiprintf_r+0x204>)
    6bae:	429f      	cmp	r7, r3
    6bb0:	d101      	bne.n	6bb6 <_vfiprintf_r+0x2e>
    6bb2:	68b7      	ldr	r7, [r6, #8]
    6bb4:	e003      	b.n	6bbe <_vfiprintf_r+0x36>
    6bb6:	4b76      	ldr	r3, [pc, #472]	; (6d90 <_vfiprintf_r+0x208>)
    6bb8:	429f      	cmp	r7, r3
    6bba:	d100      	bne.n	6bbe <_vfiprintf_r+0x36>
    6bbc:	68f7      	ldr	r7, [r6, #12]
    6bbe:	89bb      	ldrh	r3, [r7, #12]
    6bc0:	071b      	lsls	r3, r3, #28
    6bc2:	d50a      	bpl.n	6bda <_vfiprintf_r+0x52>
    6bc4:	693b      	ldr	r3, [r7, #16]
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d007      	beq.n	6bda <_vfiprintf_r+0x52>
    6bca:	2300      	movs	r3, #0
    6bcc:	ad06      	add	r5, sp, #24
    6bce:	616b      	str	r3, [r5, #20]
    6bd0:	3320      	adds	r3, #32
    6bd2:	766b      	strb	r3, [r5, #25]
    6bd4:	3310      	adds	r3, #16
    6bd6:	76ab      	strb	r3, [r5, #26]
    6bd8:	e03d      	b.n	6c56 <_vfiprintf_r+0xce>
    6bda:	1c30      	adds	r0, r6, #0
    6bdc:	1c39      	adds	r1, r7, #0
    6bde:	f7ff fcad 	bl	653c <__swsetup_r>
    6be2:	2800      	cmp	r0, #0
    6be4:	d0f1      	beq.n	6bca <_vfiprintf_r+0x42>
    6be6:	2001      	movs	r0, #1
    6be8:	4240      	negs	r0, r0
    6bea:	e0ca      	b.n	6d82 <_vfiprintf_r+0x1fa>
    6bec:	9a05      	ldr	r2, [sp, #20]
    6bee:	1d11      	adds	r1, r2, #4
    6bf0:	6812      	ldr	r2, [r2, #0]
    6bf2:	9105      	str	r1, [sp, #20]
    6bf4:	2a00      	cmp	r2, #0
    6bf6:	db7e      	blt.n	6cf6 <_vfiprintf_r+0x16e>
    6bf8:	9209      	str	r2, [sp, #36]	; 0x24
    6bfa:	3401      	adds	r4, #1
    6bfc:	7823      	ldrb	r3, [r4, #0]
    6bfe:	2b2e      	cmp	r3, #46	; 0x2e
    6c00:	d100      	bne.n	6c04 <_vfiprintf_r+0x7c>
    6c02:	e089      	b.n	6d18 <_vfiprintf_r+0x190>
    6c04:	7821      	ldrb	r1, [r4, #0]
    6c06:	4863      	ldr	r0, [pc, #396]	; (6d94 <_vfiprintf_r+0x20c>)
    6c08:	2203      	movs	r2, #3
    6c0a:	f000 fb0f 	bl	722c <memchr>
    6c0e:	2800      	cmp	r0, #0
    6c10:	d008      	beq.n	6c24 <_vfiprintf_r+0x9c>
    6c12:	4b60      	ldr	r3, [pc, #384]	; (6d94 <_vfiprintf_r+0x20c>)
    6c14:	3401      	adds	r4, #1
    6c16:	1ac0      	subs	r0, r0, r3
    6c18:	2340      	movs	r3, #64	; 0x40
    6c1a:	4083      	lsls	r3, r0
    6c1c:	1c18      	adds	r0, r3, #0
    6c1e:	682b      	ldr	r3, [r5, #0]
    6c20:	4318      	orrs	r0, r3
    6c22:	6028      	str	r0, [r5, #0]
    6c24:	7821      	ldrb	r1, [r4, #0]
    6c26:	1c63      	adds	r3, r4, #1
    6c28:	485b      	ldr	r0, [pc, #364]	; (6d98 <_vfiprintf_r+0x210>)
    6c2a:	2206      	movs	r2, #6
    6c2c:	9302      	str	r3, [sp, #8]
    6c2e:	7629      	strb	r1, [r5, #24]
    6c30:	f000 fafc 	bl	722c <memchr>
    6c34:	2800      	cmp	r0, #0
    6c36:	d100      	bne.n	6c3a <_vfiprintf_r+0xb2>
    6c38:	e091      	b.n	6d5e <_vfiprintf_r+0x1d6>
    6c3a:	4b58      	ldr	r3, [pc, #352]	; (6d9c <_vfiprintf_r+0x214>)
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d000      	beq.n	6c42 <_vfiprintf_r+0xba>
    6c40:	e084      	b.n	6d4c <_vfiprintf_r+0x1c4>
    6c42:	2207      	movs	r2, #7
    6c44:	9b05      	ldr	r3, [sp, #20]
    6c46:	3307      	adds	r3, #7
    6c48:	4393      	bics	r3, r2
    6c4a:	3308      	adds	r3, #8
    6c4c:	9305      	str	r3, [sp, #20]
    6c4e:	696b      	ldr	r3, [r5, #20]
    6c50:	9a03      	ldr	r2, [sp, #12]
    6c52:	189b      	adds	r3, r3, r2
    6c54:	616b      	str	r3, [r5, #20]
    6c56:	9c02      	ldr	r4, [sp, #8]
    6c58:	7823      	ldrb	r3, [r4, #0]
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d104      	bne.n	6c68 <_vfiprintf_r+0xe0>
    6c5e:	9b02      	ldr	r3, [sp, #8]
    6c60:	1ae3      	subs	r3, r4, r3
    6c62:	9304      	str	r3, [sp, #16]
    6c64:	d011      	beq.n	6c8a <_vfiprintf_r+0x102>
    6c66:	e003      	b.n	6c70 <_vfiprintf_r+0xe8>
    6c68:	2b25      	cmp	r3, #37	; 0x25
    6c6a:	d0f8      	beq.n	6c5e <_vfiprintf_r+0xd6>
    6c6c:	3401      	adds	r4, #1
    6c6e:	e7f3      	b.n	6c58 <_vfiprintf_r+0xd0>
    6c70:	9b04      	ldr	r3, [sp, #16]
    6c72:	1c30      	adds	r0, r6, #0
    6c74:	1c39      	adds	r1, r7, #0
    6c76:	9a02      	ldr	r2, [sp, #8]
    6c78:	f7ff ff73 	bl	6b62 <__sfputs_r>
    6c7c:	1c43      	adds	r3, r0, #1
    6c7e:	d07b      	beq.n	6d78 <_vfiprintf_r+0x1f0>
    6c80:	696a      	ldr	r2, [r5, #20]
    6c82:	9b04      	ldr	r3, [sp, #16]
    6c84:	4694      	mov	ip, r2
    6c86:	4463      	add	r3, ip
    6c88:	616b      	str	r3, [r5, #20]
    6c8a:	7823      	ldrb	r3, [r4, #0]
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d073      	beq.n	6d78 <_vfiprintf_r+0x1f0>
    6c90:	2201      	movs	r2, #1
    6c92:	2300      	movs	r3, #0
    6c94:	4252      	negs	r2, r2
    6c96:	606a      	str	r2, [r5, #4]
    6c98:	a902      	add	r1, sp, #8
    6c9a:	3254      	adds	r2, #84	; 0x54
    6c9c:	1852      	adds	r2, r2, r1
    6c9e:	3401      	adds	r4, #1
    6ca0:	602b      	str	r3, [r5, #0]
    6ca2:	60eb      	str	r3, [r5, #12]
    6ca4:	60ab      	str	r3, [r5, #8]
    6ca6:	7013      	strb	r3, [r2, #0]
    6ca8:	65ab      	str	r3, [r5, #88]	; 0x58
    6caa:	7821      	ldrb	r1, [r4, #0]
    6cac:	483c      	ldr	r0, [pc, #240]	; (6da0 <_vfiprintf_r+0x218>)
    6cae:	2205      	movs	r2, #5
    6cb0:	f000 fabc 	bl	722c <memchr>
    6cb4:	2800      	cmp	r0, #0
    6cb6:	d009      	beq.n	6ccc <_vfiprintf_r+0x144>
    6cb8:	4b39      	ldr	r3, [pc, #228]	; (6da0 <_vfiprintf_r+0x218>)
    6cba:	3401      	adds	r4, #1
    6cbc:	1ac0      	subs	r0, r0, r3
    6cbe:	2301      	movs	r3, #1
    6cc0:	4083      	lsls	r3, r0
    6cc2:	1c18      	adds	r0, r3, #0
    6cc4:	682b      	ldr	r3, [r5, #0]
    6cc6:	4318      	orrs	r0, r3
    6cc8:	6028      	str	r0, [r5, #0]
    6cca:	e7ee      	b.n	6caa <_vfiprintf_r+0x122>
    6ccc:	682b      	ldr	r3, [r5, #0]
    6cce:	06da      	lsls	r2, r3, #27
    6cd0:	d504      	bpl.n	6cdc <_vfiprintf_r+0x154>
    6cd2:	2253      	movs	r2, #83	; 0x53
    6cd4:	2120      	movs	r1, #32
    6cd6:	a802      	add	r0, sp, #8
    6cd8:	1812      	adds	r2, r2, r0
    6cda:	7011      	strb	r1, [r2, #0]
    6cdc:	071a      	lsls	r2, r3, #28
    6cde:	d504      	bpl.n	6cea <_vfiprintf_r+0x162>
    6ce0:	2253      	movs	r2, #83	; 0x53
    6ce2:	212b      	movs	r1, #43	; 0x2b
    6ce4:	a802      	add	r0, sp, #8
    6ce6:	1812      	adds	r2, r2, r0
    6ce8:	7011      	strb	r1, [r2, #0]
    6cea:	7822      	ldrb	r2, [r4, #0]
    6cec:	2a2a      	cmp	r2, #42	; 0x2a
    6cee:	d100      	bne.n	6cf2 <_vfiprintf_r+0x16a>
    6cf0:	e77c      	b.n	6bec <_vfiprintf_r+0x64>
    6cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6cf4:	e005      	b.n	6d02 <_vfiprintf_r+0x17a>
    6cf6:	4252      	negs	r2, r2
    6cf8:	60ea      	str	r2, [r5, #12]
    6cfa:	2202      	movs	r2, #2
    6cfc:	4313      	orrs	r3, r2
    6cfe:	602b      	str	r3, [r5, #0]
    6d00:	e77b      	b.n	6bfa <_vfiprintf_r+0x72>
    6d02:	7822      	ldrb	r2, [r4, #0]
    6d04:	3a30      	subs	r2, #48	; 0x30
    6d06:	2a09      	cmp	r2, #9
    6d08:	d804      	bhi.n	6d14 <_vfiprintf_r+0x18c>
    6d0a:	210a      	movs	r1, #10
    6d0c:	434b      	muls	r3, r1
    6d0e:	3401      	adds	r4, #1
    6d10:	189b      	adds	r3, r3, r2
    6d12:	e7f6      	b.n	6d02 <_vfiprintf_r+0x17a>
    6d14:	9309      	str	r3, [sp, #36]	; 0x24
    6d16:	e771      	b.n	6bfc <_vfiprintf_r+0x74>
    6d18:	7863      	ldrb	r3, [r4, #1]
    6d1a:	2b2a      	cmp	r3, #42	; 0x2a
    6d1c:	d109      	bne.n	6d32 <_vfiprintf_r+0x1aa>
    6d1e:	9b05      	ldr	r3, [sp, #20]
    6d20:	3402      	adds	r4, #2
    6d22:	1d1a      	adds	r2, r3, #4
    6d24:	681b      	ldr	r3, [r3, #0]
    6d26:	9205      	str	r2, [sp, #20]
    6d28:	2b00      	cmp	r3, #0
    6d2a:	da0d      	bge.n	6d48 <_vfiprintf_r+0x1c0>
    6d2c:	2301      	movs	r3, #1
    6d2e:	425b      	negs	r3, r3
    6d30:	e00a      	b.n	6d48 <_vfiprintf_r+0x1c0>
    6d32:	2300      	movs	r3, #0
    6d34:	3401      	adds	r4, #1
    6d36:	7822      	ldrb	r2, [r4, #0]
    6d38:	3a30      	subs	r2, #48	; 0x30
    6d3a:	2a09      	cmp	r2, #9
    6d3c:	d804      	bhi.n	6d48 <_vfiprintf_r+0x1c0>
    6d3e:	210a      	movs	r1, #10
    6d40:	434b      	muls	r3, r1
    6d42:	3401      	adds	r4, #1
    6d44:	189b      	adds	r3, r3, r2
    6d46:	e7f6      	b.n	6d36 <_vfiprintf_r+0x1ae>
    6d48:	9307      	str	r3, [sp, #28]
    6d4a:	e75b      	b.n	6c04 <_vfiprintf_r+0x7c>
    6d4c:	ab05      	add	r3, sp, #20
    6d4e:	9300      	str	r3, [sp, #0]
    6d50:	1c30      	adds	r0, r6, #0
    6d52:	1c29      	adds	r1, r5, #0
    6d54:	1c3a      	adds	r2, r7, #0
    6d56:	4b13      	ldr	r3, [pc, #76]	; (6da4 <_vfiprintf_r+0x21c>)
    6d58:	e000      	b.n	6d5c <_vfiprintf_r+0x1d4>
    6d5a:	bf00      	nop
    6d5c:	e007      	b.n	6d6e <_vfiprintf_r+0x1e6>
    6d5e:	ab05      	add	r3, sp, #20
    6d60:	9300      	str	r3, [sp, #0]
    6d62:	1c30      	adds	r0, r6, #0
    6d64:	1c29      	adds	r1, r5, #0
    6d66:	1c3a      	adds	r2, r7, #0
    6d68:	4b0e      	ldr	r3, [pc, #56]	; (6da4 <_vfiprintf_r+0x21c>)
    6d6a:	f000 f88b 	bl	6e84 <_printf_i>
    6d6e:	9003      	str	r0, [sp, #12]
    6d70:	9b03      	ldr	r3, [sp, #12]
    6d72:	3301      	adds	r3, #1
    6d74:	d000      	beq.n	6d78 <_vfiprintf_r+0x1f0>
    6d76:	e76a      	b.n	6c4e <_vfiprintf_r+0xc6>
    6d78:	89bb      	ldrh	r3, [r7, #12]
    6d7a:	065b      	lsls	r3, r3, #25
    6d7c:	d500      	bpl.n	6d80 <_vfiprintf_r+0x1f8>
    6d7e:	e732      	b.n	6be6 <_vfiprintf_r+0x5e>
    6d80:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6d82:	b01f      	add	sp, #124	; 0x7c
    6d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d86:	46c0      	nop			; (mov r8, r8)
    6d88:	00007508 	.word	0x00007508
    6d8c:	00007528 	.word	0x00007528
    6d90:	00007548 	.word	0x00007548
    6d94:	0000756e 	.word	0x0000756e
    6d98:	00007572 	.word	0x00007572
    6d9c:	00000000 	.word	0x00000000
    6da0:	00007568 	.word	0x00007568
    6da4:	00006b63 	.word	0x00006b63

00006da8 <_printf_common>:
    6da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6daa:	1c17      	adds	r7, r2, #0
    6dac:	9301      	str	r3, [sp, #4]
    6dae:	690a      	ldr	r2, [r1, #16]
    6db0:	688b      	ldr	r3, [r1, #8]
    6db2:	9000      	str	r0, [sp, #0]
    6db4:	1c0c      	adds	r4, r1, #0
    6db6:	4293      	cmp	r3, r2
    6db8:	da00      	bge.n	6dbc <_printf_common+0x14>
    6dba:	1c13      	adds	r3, r2, #0
    6dbc:	1c22      	adds	r2, r4, #0
    6dbe:	603b      	str	r3, [r7, #0]
    6dc0:	3243      	adds	r2, #67	; 0x43
    6dc2:	7812      	ldrb	r2, [r2, #0]
    6dc4:	2a00      	cmp	r2, #0
    6dc6:	d001      	beq.n	6dcc <_printf_common+0x24>
    6dc8:	3301      	adds	r3, #1
    6dca:	603b      	str	r3, [r7, #0]
    6dcc:	6823      	ldr	r3, [r4, #0]
    6dce:	069b      	lsls	r3, r3, #26
    6dd0:	d502      	bpl.n	6dd8 <_printf_common+0x30>
    6dd2:	683b      	ldr	r3, [r7, #0]
    6dd4:	3302      	adds	r3, #2
    6dd6:	603b      	str	r3, [r7, #0]
    6dd8:	2506      	movs	r5, #6
    6dda:	6823      	ldr	r3, [r4, #0]
    6ddc:	401d      	ands	r5, r3
    6dde:	d01e      	beq.n	6e1e <_printf_common+0x76>
    6de0:	1c23      	adds	r3, r4, #0
    6de2:	3343      	adds	r3, #67	; 0x43
    6de4:	781b      	ldrb	r3, [r3, #0]
    6de6:	1e5a      	subs	r2, r3, #1
    6de8:	4193      	sbcs	r3, r2
    6dea:	6822      	ldr	r2, [r4, #0]
    6dec:	0692      	lsls	r2, r2, #26
    6dee:	d51c      	bpl.n	6e2a <_printf_common+0x82>
    6df0:	2030      	movs	r0, #48	; 0x30
    6df2:	18e1      	adds	r1, r4, r3
    6df4:	3140      	adds	r1, #64	; 0x40
    6df6:	70c8      	strb	r0, [r1, #3]
    6df8:	1c21      	adds	r1, r4, #0
    6dfa:	1c5a      	adds	r2, r3, #1
    6dfc:	3145      	adds	r1, #69	; 0x45
    6dfe:	7809      	ldrb	r1, [r1, #0]
    6e00:	18a2      	adds	r2, r4, r2
    6e02:	3240      	adds	r2, #64	; 0x40
    6e04:	3302      	adds	r3, #2
    6e06:	70d1      	strb	r1, [r2, #3]
    6e08:	e00f      	b.n	6e2a <_printf_common+0x82>
    6e0a:	1c22      	adds	r2, r4, #0
    6e0c:	2301      	movs	r3, #1
    6e0e:	9800      	ldr	r0, [sp, #0]
    6e10:	9901      	ldr	r1, [sp, #4]
    6e12:	3219      	adds	r2, #25
    6e14:	9e08      	ldr	r6, [sp, #32]
    6e16:	47b0      	blx	r6
    6e18:	1c43      	adds	r3, r0, #1
    6e1a:	d00e      	beq.n	6e3a <_printf_common+0x92>
    6e1c:	3501      	adds	r5, #1
    6e1e:	68e3      	ldr	r3, [r4, #12]
    6e20:	683a      	ldr	r2, [r7, #0]
    6e22:	1a9b      	subs	r3, r3, r2
    6e24:	429d      	cmp	r5, r3
    6e26:	dbf0      	blt.n	6e0a <_printf_common+0x62>
    6e28:	e7da      	b.n	6de0 <_printf_common+0x38>
    6e2a:	1c22      	adds	r2, r4, #0
    6e2c:	9800      	ldr	r0, [sp, #0]
    6e2e:	9901      	ldr	r1, [sp, #4]
    6e30:	3243      	adds	r2, #67	; 0x43
    6e32:	9d08      	ldr	r5, [sp, #32]
    6e34:	47a8      	blx	r5
    6e36:	1c43      	adds	r3, r0, #1
    6e38:	d102      	bne.n	6e40 <_printf_common+0x98>
    6e3a:	2001      	movs	r0, #1
    6e3c:	4240      	negs	r0, r0
    6e3e:	e020      	b.n	6e82 <_printf_common+0xda>
    6e40:	2306      	movs	r3, #6
    6e42:	6820      	ldr	r0, [r4, #0]
    6e44:	68e1      	ldr	r1, [r4, #12]
    6e46:	683a      	ldr	r2, [r7, #0]
    6e48:	4003      	ands	r3, r0
    6e4a:	2500      	movs	r5, #0
    6e4c:	2b04      	cmp	r3, #4
    6e4e:	d103      	bne.n	6e58 <_printf_common+0xb0>
    6e50:	1a8d      	subs	r5, r1, r2
    6e52:	43eb      	mvns	r3, r5
    6e54:	17db      	asrs	r3, r3, #31
    6e56:	401d      	ands	r5, r3
    6e58:	68a3      	ldr	r3, [r4, #8]
    6e5a:	6922      	ldr	r2, [r4, #16]
    6e5c:	4293      	cmp	r3, r2
    6e5e:	dd01      	ble.n	6e64 <_printf_common+0xbc>
    6e60:	1a9b      	subs	r3, r3, r2
    6e62:	18ed      	adds	r5, r5, r3
    6e64:	2700      	movs	r7, #0
    6e66:	42af      	cmp	r7, r5
    6e68:	da0a      	bge.n	6e80 <_printf_common+0xd8>
    6e6a:	1c22      	adds	r2, r4, #0
    6e6c:	2301      	movs	r3, #1
    6e6e:	9800      	ldr	r0, [sp, #0]
    6e70:	9901      	ldr	r1, [sp, #4]
    6e72:	321a      	adds	r2, #26
    6e74:	9e08      	ldr	r6, [sp, #32]
    6e76:	47b0      	blx	r6
    6e78:	1c43      	adds	r3, r0, #1
    6e7a:	d0de      	beq.n	6e3a <_printf_common+0x92>
    6e7c:	3701      	adds	r7, #1
    6e7e:	e7f2      	b.n	6e66 <_printf_common+0xbe>
    6e80:	2000      	movs	r0, #0
    6e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006e84 <_printf_i>:
    6e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e86:	b08b      	sub	sp, #44	; 0x2c
    6e88:	9206      	str	r2, [sp, #24]
    6e8a:	1c0a      	adds	r2, r1, #0
    6e8c:	3243      	adds	r2, #67	; 0x43
    6e8e:	9307      	str	r3, [sp, #28]
    6e90:	9005      	str	r0, [sp, #20]
    6e92:	9204      	str	r2, [sp, #16]
    6e94:	7e0a      	ldrb	r2, [r1, #24]
    6e96:	1c0c      	adds	r4, r1, #0
    6e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6e9a:	2a6e      	cmp	r2, #110	; 0x6e
    6e9c:	d100      	bne.n	6ea0 <_printf_i+0x1c>
    6e9e:	e0a8      	b.n	6ff2 <_printf_i+0x16e>
    6ea0:	d811      	bhi.n	6ec6 <_printf_i+0x42>
    6ea2:	2a63      	cmp	r2, #99	; 0x63
    6ea4:	d022      	beq.n	6eec <_printf_i+0x68>
    6ea6:	d809      	bhi.n	6ebc <_printf_i+0x38>
    6ea8:	2a00      	cmp	r2, #0
    6eaa:	d100      	bne.n	6eae <_printf_i+0x2a>
    6eac:	e0b2      	b.n	7014 <_printf_i+0x190>
    6eae:	2a58      	cmp	r2, #88	; 0x58
    6eb0:	d000      	beq.n	6eb4 <_printf_i+0x30>
    6eb2:	e0c2      	b.n	703a <_printf_i+0x1b6>
    6eb4:	3145      	adds	r1, #69	; 0x45
    6eb6:	700a      	strb	r2, [r1, #0]
    6eb8:	4a7c      	ldr	r2, [pc, #496]	; (70ac <_printf_i+0x228>)
    6eba:	e04f      	b.n	6f5c <_printf_i+0xd8>
    6ebc:	2a64      	cmp	r2, #100	; 0x64
    6ebe:	d01d      	beq.n	6efc <_printf_i+0x78>
    6ec0:	2a69      	cmp	r2, #105	; 0x69
    6ec2:	d01b      	beq.n	6efc <_printf_i+0x78>
    6ec4:	e0b9      	b.n	703a <_printf_i+0x1b6>
    6ec6:	2a73      	cmp	r2, #115	; 0x73
    6ec8:	d100      	bne.n	6ecc <_printf_i+0x48>
    6eca:	e0a7      	b.n	701c <_printf_i+0x198>
    6ecc:	d809      	bhi.n	6ee2 <_printf_i+0x5e>
    6ece:	2a6f      	cmp	r2, #111	; 0x6f
    6ed0:	d029      	beq.n	6f26 <_printf_i+0xa2>
    6ed2:	2a70      	cmp	r2, #112	; 0x70
    6ed4:	d000      	beq.n	6ed8 <_printf_i+0x54>
    6ed6:	e0b0      	b.n	703a <_printf_i+0x1b6>
    6ed8:	2220      	movs	r2, #32
    6eda:	6809      	ldr	r1, [r1, #0]
    6edc:	430a      	orrs	r2, r1
    6ede:	6022      	str	r2, [r4, #0]
    6ee0:	e037      	b.n	6f52 <_printf_i+0xce>
    6ee2:	2a75      	cmp	r2, #117	; 0x75
    6ee4:	d01f      	beq.n	6f26 <_printf_i+0xa2>
    6ee6:	2a78      	cmp	r2, #120	; 0x78
    6ee8:	d033      	beq.n	6f52 <_printf_i+0xce>
    6eea:	e0a6      	b.n	703a <_printf_i+0x1b6>
    6eec:	1c0e      	adds	r6, r1, #0
    6eee:	681a      	ldr	r2, [r3, #0]
    6ef0:	3642      	adds	r6, #66	; 0x42
    6ef2:	1d11      	adds	r1, r2, #4
    6ef4:	6019      	str	r1, [r3, #0]
    6ef6:	6813      	ldr	r3, [r2, #0]
    6ef8:	7033      	strb	r3, [r6, #0]
    6efa:	e0a1      	b.n	7040 <_printf_i+0x1bc>
    6efc:	6821      	ldr	r1, [r4, #0]
    6efe:	681a      	ldr	r2, [r3, #0]
    6f00:	0608      	lsls	r0, r1, #24
    6f02:	d406      	bmi.n	6f12 <_printf_i+0x8e>
    6f04:	0649      	lsls	r1, r1, #25
    6f06:	d504      	bpl.n	6f12 <_printf_i+0x8e>
    6f08:	1d11      	adds	r1, r2, #4
    6f0a:	6019      	str	r1, [r3, #0]
    6f0c:	2300      	movs	r3, #0
    6f0e:	5ed5      	ldrsh	r5, [r2, r3]
    6f10:	e002      	b.n	6f18 <_printf_i+0x94>
    6f12:	1d11      	adds	r1, r2, #4
    6f14:	6019      	str	r1, [r3, #0]
    6f16:	6815      	ldr	r5, [r2, #0]
    6f18:	2d00      	cmp	r5, #0
    6f1a:	da3b      	bge.n	6f94 <_printf_i+0x110>
    6f1c:	232d      	movs	r3, #45	; 0x2d
    6f1e:	9a04      	ldr	r2, [sp, #16]
    6f20:	426d      	negs	r5, r5
    6f22:	7013      	strb	r3, [r2, #0]
    6f24:	e036      	b.n	6f94 <_printf_i+0x110>
    6f26:	6821      	ldr	r1, [r4, #0]
    6f28:	681a      	ldr	r2, [r3, #0]
    6f2a:	0608      	lsls	r0, r1, #24
    6f2c:	d406      	bmi.n	6f3c <_printf_i+0xb8>
    6f2e:	0649      	lsls	r1, r1, #25
    6f30:	d504      	bpl.n	6f3c <_printf_i+0xb8>
    6f32:	6815      	ldr	r5, [r2, #0]
    6f34:	1d11      	adds	r1, r2, #4
    6f36:	6019      	str	r1, [r3, #0]
    6f38:	b2ad      	uxth	r5, r5
    6f3a:	e002      	b.n	6f42 <_printf_i+0xbe>
    6f3c:	1d11      	adds	r1, r2, #4
    6f3e:	6019      	str	r1, [r3, #0]
    6f40:	6815      	ldr	r5, [r2, #0]
    6f42:	4b5a      	ldr	r3, [pc, #360]	; (70ac <_printf_i+0x228>)
    6f44:	7e22      	ldrb	r2, [r4, #24]
    6f46:	9303      	str	r3, [sp, #12]
    6f48:	270a      	movs	r7, #10
    6f4a:	2a6f      	cmp	r2, #111	; 0x6f
    6f4c:	d11d      	bne.n	6f8a <_printf_i+0x106>
    6f4e:	2708      	movs	r7, #8
    6f50:	e01b      	b.n	6f8a <_printf_i+0x106>
    6f52:	1c22      	adds	r2, r4, #0
    6f54:	2178      	movs	r1, #120	; 0x78
    6f56:	3245      	adds	r2, #69	; 0x45
    6f58:	7011      	strb	r1, [r2, #0]
    6f5a:	4a55      	ldr	r2, [pc, #340]	; (70b0 <_printf_i+0x22c>)
    6f5c:	6819      	ldr	r1, [r3, #0]
    6f5e:	9203      	str	r2, [sp, #12]
    6f60:	1d08      	adds	r0, r1, #4
    6f62:	6822      	ldr	r2, [r4, #0]
    6f64:	6018      	str	r0, [r3, #0]
    6f66:	680d      	ldr	r5, [r1, #0]
    6f68:	0610      	lsls	r0, r2, #24
    6f6a:	d402      	bmi.n	6f72 <_printf_i+0xee>
    6f6c:	0650      	lsls	r0, r2, #25
    6f6e:	d500      	bpl.n	6f72 <_printf_i+0xee>
    6f70:	b2ad      	uxth	r5, r5
    6f72:	07d3      	lsls	r3, r2, #31
    6f74:	d502      	bpl.n	6f7c <_printf_i+0xf8>
    6f76:	2320      	movs	r3, #32
    6f78:	431a      	orrs	r2, r3
    6f7a:	6022      	str	r2, [r4, #0]
    6f7c:	2710      	movs	r7, #16
    6f7e:	2d00      	cmp	r5, #0
    6f80:	d103      	bne.n	6f8a <_printf_i+0x106>
    6f82:	2320      	movs	r3, #32
    6f84:	6822      	ldr	r2, [r4, #0]
    6f86:	439a      	bics	r2, r3
    6f88:	6022      	str	r2, [r4, #0]
    6f8a:	1c23      	adds	r3, r4, #0
    6f8c:	2200      	movs	r2, #0
    6f8e:	3343      	adds	r3, #67	; 0x43
    6f90:	701a      	strb	r2, [r3, #0]
    6f92:	e002      	b.n	6f9a <_printf_i+0x116>
    6f94:	270a      	movs	r7, #10
    6f96:	4b45      	ldr	r3, [pc, #276]	; (70ac <_printf_i+0x228>)
    6f98:	9303      	str	r3, [sp, #12]
    6f9a:	6863      	ldr	r3, [r4, #4]
    6f9c:	60a3      	str	r3, [r4, #8]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	db03      	blt.n	6faa <_printf_i+0x126>
    6fa2:	2204      	movs	r2, #4
    6fa4:	6821      	ldr	r1, [r4, #0]
    6fa6:	4391      	bics	r1, r2
    6fa8:	6021      	str	r1, [r4, #0]
    6faa:	2d00      	cmp	r5, #0
    6fac:	d102      	bne.n	6fb4 <_printf_i+0x130>
    6fae:	9e04      	ldr	r6, [sp, #16]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d00e      	beq.n	6fd2 <_printf_i+0x14e>
    6fb4:	9e04      	ldr	r6, [sp, #16]
    6fb6:	1c28      	adds	r0, r5, #0
    6fb8:	1c39      	adds	r1, r7, #0
    6fba:	f7fe fa23 	bl	5404 <__aeabi_uidivmod>
    6fbe:	9b03      	ldr	r3, [sp, #12]
    6fc0:	3e01      	subs	r6, #1
    6fc2:	5c5b      	ldrb	r3, [r3, r1]
    6fc4:	1c28      	adds	r0, r5, #0
    6fc6:	7033      	strb	r3, [r6, #0]
    6fc8:	1c39      	adds	r1, r7, #0
    6fca:	f7fe f995 	bl	52f8 <__aeabi_uidiv>
    6fce:	1e05      	subs	r5, r0, #0
    6fd0:	d1f1      	bne.n	6fb6 <_printf_i+0x132>
    6fd2:	2f08      	cmp	r7, #8
    6fd4:	d109      	bne.n	6fea <_printf_i+0x166>
    6fd6:	6823      	ldr	r3, [r4, #0]
    6fd8:	07db      	lsls	r3, r3, #31
    6fda:	d506      	bpl.n	6fea <_printf_i+0x166>
    6fdc:	6863      	ldr	r3, [r4, #4]
    6fde:	6922      	ldr	r2, [r4, #16]
    6fe0:	4293      	cmp	r3, r2
    6fe2:	dc02      	bgt.n	6fea <_printf_i+0x166>
    6fe4:	2330      	movs	r3, #48	; 0x30
    6fe6:	3e01      	subs	r6, #1
    6fe8:	7033      	strb	r3, [r6, #0]
    6fea:	9b04      	ldr	r3, [sp, #16]
    6fec:	1b9b      	subs	r3, r3, r6
    6fee:	6123      	str	r3, [r4, #16]
    6ff0:	e02b      	b.n	704a <_printf_i+0x1c6>
    6ff2:	6809      	ldr	r1, [r1, #0]
    6ff4:	681a      	ldr	r2, [r3, #0]
    6ff6:	0608      	lsls	r0, r1, #24
    6ff8:	d407      	bmi.n	700a <_printf_i+0x186>
    6ffa:	0649      	lsls	r1, r1, #25
    6ffc:	d505      	bpl.n	700a <_printf_i+0x186>
    6ffe:	1d11      	adds	r1, r2, #4
    7000:	6019      	str	r1, [r3, #0]
    7002:	6813      	ldr	r3, [r2, #0]
    7004:	8aa2      	ldrh	r2, [r4, #20]
    7006:	801a      	strh	r2, [r3, #0]
    7008:	e004      	b.n	7014 <_printf_i+0x190>
    700a:	1d11      	adds	r1, r2, #4
    700c:	6019      	str	r1, [r3, #0]
    700e:	6813      	ldr	r3, [r2, #0]
    7010:	6962      	ldr	r2, [r4, #20]
    7012:	601a      	str	r2, [r3, #0]
    7014:	2300      	movs	r3, #0
    7016:	9e04      	ldr	r6, [sp, #16]
    7018:	6123      	str	r3, [r4, #16]
    701a:	e016      	b.n	704a <_printf_i+0x1c6>
    701c:	681a      	ldr	r2, [r3, #0]
    701e:	1d11      	adds	r1, r2, #4
    7020:	6019      	str	r1, [r3, #0]
    7022:	6816      	ldr	r6, [r2, #0]
    7024:	2100      	movs	r1, #0
    7026:	1c30      	adds	r0, r6, #0
    7028:	6862      	ldr	r2, [r4, #4]
    702a:	f000 f8ff 	bl	722c <memchr>
    702e:	2800      	cmp	r0, #0
    7030:	d001      	beq.n	7036 <_printf_i+0x1b2>
    7032:	1b80      	subs	r0, r0, r6
    7034:	6060      	str	r0, [r4, #4]
    7036:	6863      	ldr	r3, [r4, #4]
    7038:	e003      	b.n	7042 <_printf_i+0x1be>
    703a:	1c26      	adds	r6, r4, #0
    703c:	3642      	adds	r6, #66	; 0x42
    703e:	7032      	strb	r2, [r6, #0]
    7040:	2301      	movs	r3, #1
    7042:	6123      	str	r3, [r4, #16]
    7044:	2300      	movs	r3, #0
    7046:	9a04      	ldr	r2, [sp, #16]
    7048:	7013      	strb	r3, [r2, #0]
    704a:	9b07      	ldr	r3, [sp, #28]
    704c:	9805      	ldr	r0, [sp, #20]
    704e:	9300      	str	r3, [sp, #0]
    7050:	1c21      	adds	r1, r4, #0
    7052:	9b06      	ldr	r3, [sp, #24]
    7054:	aa09      	add	r2, sp, #36	; 0x24
    7056:	f7ff fea7 	bl	6da8 <_printf_common>
    705a:	1c43      	adds	r3, r0, #1
    705c:	d102      	bne.n	7064 <_printf_i+0x1e0>
    705e:	2001      	movs	r0, #1
    7060:	4240      	negs	r0, r0
    7062:	e021      	b.n	70a8 <_printf_i+0x224>
    7064:	6923      	ldr	r3, [r4, #16]
    7066:	9805      	ldr	r0, [sp, #20]
    7068:	9906      	ldr	r1, [sp, #24]
    706a:	1c32      	adds	r2, r6, #0
    706c:	9d07      	ldr	r5, [sp, #28]
    706e:	47a8      	blx	r5
    7070:	1c43      	adds	r3, r0, #1
    7072:	d0f4      	beq.n	705e <_printf_i+0x1da>
    7074:	6823      	ldr	r3, [r4, #0]
    7076:	079b      	lsls	r3, r3, #30
    7078:	d405      	bmi.n	7086 <_printf_i+0x202>
    707a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    707c:	68e0      	ldr	r0, [r4, #12]
    707e:	4298      	cmp	r0, r3
    7080:	da12      	bge.n	70a8 <_printf_i+0x224>
    7082:	1c18      	adds	r0, r3, #0
    7084:	e010      	b.n	70a8 <_printf_i+0x224>
    7086:	2500      	movs	r5, #0
    7088:	68e3      	ldr	r3, [r4, #12]
    708a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    708c:	1a9b      	subs	r3, r3, r2
    708e:	429d      	cmp	r5, r3
    7090:	daf3      	bge.n	707a <_printf_i+0x1f6>
    7092:	1c22      	adds	r2, r4, #0
    7094:	2301      	movs	r3, #1
    7096:	9805      	ldr	r0, [sp, #20]
    7098:	9906      	ldr	r1, [sp, #24]
    709a:	3219      	adds	r2, #25
    709c:	9e07      	ldr	r6, [sp, #28]
    709e:	47b0      	blx	r6
    70a0:	1c43      	adds	r3, r0, #1
    70a2:	d0dc      	beq.n	705e <_printf_i+0x1da>
    70a4:	3501      	adds	r5, #1
    70a6:	e7ef      	b.n	7088 <_printf_i+0x204>
    70a8:	b00b      	add	sp, #44	; 0x2c
    70aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ac:	00007579 	.word	0x00007579
    70b0:	0000758a 	.word	0x0000758a

000070b4 <_sbrk_r>:
    70b4:	b538      	push	{r3, r4, r5, lr}
    70b6:	2300      	movs	r3, #0
    70b8:	4c06      	ldr	r4, [pc, #24]	; (70d4 <_sbrk_r+0x20>)
    70ba:	1c05      	adds	r5, r0, #0
    70bc:	1c08      	adds	r0, r1, #0
    70be:	6023      	str	r3, [r4, #0]
    70c0:	f7fd fe26 	bl	4d10 <_sbrk>
    70c4:	1c43      	adds	r3, r0, #1
    70c6:	d103      	bne.n	70d0 <_sbrk_r+0x1c>
    70c8:	6823      	ldr	r3, [r4, #0]
    70ca:	2b00      	cmp	r3, #0
    70cc:	d000      	beq.n	70d0 <_sbrk_r+0x1c>
    70ce:	602b      	str	r3, [r5, #0]
    70d0:	bd38      	pop	{r3, r4, r5, pc}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	20003d00 	.word	0x20003d00

000070d8 <__sread>:
    70d8:	b538      	push	{r3, r4, r5, lr}
    70da:	1c0c      	adds	r4, r1, #0
    70dc:	250e      	movs	r5, #14
    70de:	5f49      	ldrsh	r1, [r1, r5]
    70e0:	f000 f8b0 	bl	7244 <_read_r>
    70e4:	2800      	cmp	r0, #0
    70e6:	db03      	blt.n	70f0 <__sread+0x18>
    70e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    70ea:	181b      	adds	r3, r3, r0
    70ec:	6563      	str	r3, [r4, #84]	; 0x54
    70ee:	e003      	b.n	70f8 <__sread+0x20>
    70f0:	89a2      	ldrh	r2, [r4, #12]
    70f2:	4b02      	ldr	r3, [pc, #8]	; (70fc <__sread+0x24>)
    70f4:	4013      	ands	r3, r2
    70f6:	81a3      	strh	r3, [r4, #12]
    70f8:	bd38      	pop	{r3, r4, r5, pc}
    70fa:	46c0      	nop			; (mov r8, r8)
    70fc:	ffffefff 	.word	0xffffefff

00007100 <__swrite>:
    7100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7102:	1c1e      	adds	r6, r3, #0
    7104:	898b      	ldrh	r3, [r1, #12]
    7106:	1c05      	adds	r5, r0, #0
    7108:	1c0c      	adds	r4, r1, #0
    710a:	1c17      	adds	r7, r2, #0
    710c:	05db      	lsls	r3, r3, #23
    710e:	d505      	bpl.n	711c <__swrite+0x1c>
    7110:	230e      	movs	r3, #14
    7112:	5ec9      	ldrsh	r1, [r1, r3]
    7114:	2200      	movs	r2, #0
    7116:	2302      	movs	r3, #2
    7118:	f000 f874 	bl	7204 <_lseek_r>
    711c:	89a2      	ldrh	r2, [r4, #12]
    711e:	4b05      	ldr	r3, [pc, #20]	; (7134 <__swrite+0x34>)
    7120:	1c28      	adds	r0, r5, #0
    7122:	4013      	ands	r3, r2
    7124:	81a3      	strh	r3, [r4, #12]
    7126:	1c3a      	adds	r2, r7, #0
    7128:	230e      	movs	r3, #14
    712a:	5ee1      	ldrsh	r1, [r4, r3]
    712c:	1c33      	adds	r3, r6, #0
    712e:	f000 f81f 	bl	7170 <_write_r>
    7132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7134:	ffffefff 	.word	0xffffefff

00007138 <__sseek>:
    7138:	b538      	push	{r3, r4, r5, lr}
    713a:	1c0c      	adds	r4, r1, #0
    713c:	250e      	movs	r5, #14
    713e:	5f49      	ldrsh	r1, [r1, r5]
    7140:	f000 f860 	bl	7204 <_lseek_r>
    7144:	89a3      	ldrh	r3, [r4, #12]
    7146:	1c42      	adds	r2, r0, #1
    7148:	d103      	bne.n	7152 <__sseek+0x1a>
    714a:	4a05      	ldr	r2, [pc, #20]	; (7160 <__sseek+0x28>)
    714c:	4013      	ands	r3, r2
    714e:	81a3      	strh	r3, [r4, #12]
    7150:	e004      	b.n	715c <__sseek+0x24>
    7152:	2280      	movs	r2, #128	; 0x80
    7154:	0152      	lsls	r2, r2, #5
    7156:	4313      	orrs	r3, r2
    7158:	81a3      	strh	r3, [r4, #12]
    715a:	6560      	str	r0, [r4, #84]	; 0x54
    715c:	bd38      	pop	{r3, r4, r5, pc}
    715e:	46c0      	nop			; (mov r8, r8)
    7160:	ffffefff 	.word	0xffffefff

00007164 <__sclose>:
    7164:	b508      	push	{r3, lr}
    7166:	230e      	movs	r3, #14
    7168:	5ec9      	ldrsh	r1, [r1, r3]
    716a:	f000 f815 	bl	7198 <_close_r>
    716e:	bd08      	pop	{r3, pc}

00007170 <_write_r>:
    7170:	b538      	push	{r3, r4, r5, lr}
    7172:	1c05      	adds	r5, r0, #0
    7174:	2000      	movs	r0, #0
    7176:	4c07      	ldr	r4, [pc, #28]	; (7194 <_write_r+0x24>)
    7178:	6020      	str	r0, [r4, #0]
    717a:	1c08      	adds	r0, r1, #0
    717c:	1c11      	adds	r1, r2, #0
    717e:	1c1a      	adds	r2, r3, #0
    7180:	f7fa fef2 	bl	1f68 <_write>
    7184:	1c43      	adds	r3, r0, #1
    7186:	d103      	bne.n	7190 <_write_r+0x20>
    7188:	6823      	ldr	r3, [r4, #0]
    718a:	2b00      	cmp	r3, #0
    718c:	d000      	beq.n	7190 <_write_r+0x20>
    718e:	602b      	str	r3, [r5, #0]
    7190:	bd38      	pop	{r3, r4, r5, pc}
    7192:	46c0      	nop			; (mov r8, r8)
    7194:	20003d00 	.word	0x20003d00

00007198 <_close_r>:
    7198:	b538      	push	{r3, r4, r5, lr}
    719a:	2300      	movs	r3, #0
    719c:	4c06      	ldr	r4, [pc, #24]	; (71b8 <_close_r+0x20>)
    719e:	1c05      	adds	r5, r0, #0
    71a0:	1c08      	adds	r0, r1, #0
    71a2:	6023      	str	r3, [r4, #0]
    71a4:	f7fd fdd2 	bl	4d4c <_close>
    71a8:	1c43      	adds	r3, r0, #1
    71aa:	d103      	bne.n	71b4 <_close_r+0x1c>
    71ac:	6823      	ldr	r3, [r4, #0]
    71ae:	2b00      	cmp	r3, #0
    71b0:	d000      	beq.n	71b4 <_close_r+0x1c>
    71b2:	602b      	str	r3, [r5, #0]
    71b4:	bd38      	pop	{r3, r4, r5, pc}
    71b6:	46c0      	nop			; (mov r8, r8)
    71b8:	20003d00 	.word	0x20003d00

000071bc <_fstat_r>:
    71bc:	b538      	push	{r3, r4, r5, lr}
    71be:	2300      	movs	r3, #0
    71c0:	4c06      	ldr	r4, [pc, #24]	; (71dc <_fstat_r+0x20>)
    71c2:	1c05      	adds	r5, r0, #0
    71c4:	1c08      	adds	r0, r1, #0
    71c6:	1c11      	adds	r1, r2, #0
    71c8:	6023      	str	r3, [r4, #0]
    71ca:	f7fd fdc9 	bl	4d60 <_fstat>
    71ce:	1c43      	adds	r3, r0, #1
    71d0:	d103      	bne.n	71da <_fstat_r+0x1e>
    71d2:	6823      	ldr	r3, [r4, #0]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d000      	beq.n	71da <_fstat_r+0x1e>
    71d8:	602b      	str	r3, [r5, #0]
    71da:	bd38      	pop	{r3, r4, r5, pc}
    71dc:	20003d00 	.word	0x20003d00

000071e0 <_isatty_r>:
    71e0:	b538      	push	{r3, r4, r5, lr}
    71e2:	2300      	movs	r3, #0
    71e4:	4c06      	ldr	r4, [pc, #24]	; (7200 <_isatty_r+0x20>)
    71e6:	1c05      	adds	r5, r0, #0
    71e8:	1c08      	adds	r0, r1, #0
    71ea:	6023      	str	r3, [r4, #0]
    71ec:	f7fd fdc6 	bl	4d7c <_isatty>
    71f0:	1c43      	adds	r3, r0, #1
    71f2:	d103      	bne.n	71fc <_isatty_r+0x1c>
    71f4:	6823      	ldr	r3, [r4, #0]
    71f6:	2b00      	cmp	r3, #0
    71f8:	d000      	beq.n	71fc <_isatty_r+0x1c>
    71fa:	602b      	str	r3, [r5, #0]
    71fc:	bd38      	pop	{r3, r4, r5, pc}
    71fe:	46c0      	nop			; (mov r8, r8)
    7200:	20003d00 	.word	0x20003d00

00007204 <_lseek_r>:
    7204:	b538      	push	{r3, r4, r5, lr}
    7206:	1c05      	adds	r5, r0, #0
    7208:	2000      	movs	r0, #0
    720a:	4c07      	ldr	r4, [pc, #28]	; (7228 <_lseek_r+0x24>)
    720c:	6020      	str	r0, [r4, #0]
    720e:	1c08      	adds	r0, r1, #0
    7210:	1c11      	adds	r1, r2, #0
    7212:	1c1a      	adds	r2, r3, #0
    7214:	f7fd fdbc 	bl	4d90 <_lseek>
    7218:	1c43      	adds	r3, r0, #1
    721a:	d103      	bne.n	7224 <_lseek_r+0x20>
    721c:	6823      	ldr	r3, [r4, #0]
    721e:	2b00      	cmp	r3, #0
    7220:	d000      	beq.n	7224 <_lseek_r+0x20>
    7222:	602b      	str	r3, [r5, #0]
    7224:	bd38      	pop	{r3, r4, r5, pc}
    7226:	46c0      	nop			; (mov r8, r8)
    7228:	20003d00 	.word	0x20003d00

0000722c <memchr>:
    722c:	b2c9      	uxtb	r1, r1
    722e:	1882      	adds	r2, r0, r2
    7230:	4290      	cmp	r0, r2
    7232:	d004      	beq.n	723e <memchr+0x12>
    7234:	7803      	ldrb	r3, [r0, #0]
    7236:	428b      	cmp	r3, r1
    7238:	d002      	beq.n	7240 <memchr+0x14>
    723a:	3001      	adds	r0, #1
    723c:	e7f8      	b.n	7230 <memchr+0x4>
    723e:	2000      	movs	r0, #0
    7240:	4770      	bx	lr
	...

00007244 <_read_r>:
    7244:	b538      	push	{r3, r4, r5, lr}
    7246:	1c05      	adds	r5, r0, #0
    7248:	2000      	movs	r0, #0
    724a:	4c07      	ldr	r4, [pc, #28]	; (7268 <_read_r+0x24>)
    724c:	6020      	str	r0, [r4, #0]
    724e:	1c08      	adds	r0, r1, #0
    7250:	1c11      	adds	r1, r2, #0
    7252:	1c1a      	adds	r2, r3, #0
    7254:	f7fa fe5c 	bl	1f10 <_read>
    7258:	1c43      	adds	r3, r0, #1
    725a:	d103      	bne.n	7264 <_read_r+0x20>
    725c:	6823      	ldr	r3, [r4, #0]
    725e:	2b00      	cmp	r3, #0
    7260:	d000      	beq.n	7264 <_read_r+0x20>
    7262:	602b      	str	r3, [r5, #0]
    7264:	bd38      	pop	{r3, r4, r5, pc}
    7266:	46c0      	nop			; (mov r8, r8)
    7268:	20003d00 	.word	0x20003d00
    726c:	00000002 	.word	0x00000002
    7270:	00000003 	.word	0x00000003
    7274:	00000028 	.word	0x00000028
    7278:	00000029 	.word	0x00000029
    727c:	00000004 	.word	0x00000004
    7280:	00000005 	.word	0x00000005
    7284:	00000006 	.word	0x00000006
    7288:	00000007 	.word	0x00000007
    728c:	00000020 	.word	0x00000020
    7290:	00000021 	.word	0x00000021
    7294:	00000022 	.word	0x00000022
    7298:	00000023 	.word	0x00000023
    729c:	00000024 	.word	0x00000024
    72a0:	00000025 	.word	0x00000025
    72a4:	00000026 	.word	0x00000026
    72a8:	00000027 	.word	0x00000027
    72ac:	00000008 	.word	0x00000008
    72b0:	00000009 	.word	0x00000009
    72b4:	0000000a 	.word	0x0000000a
    72b8:	0000000b 	.word	0x0000000b
    72bc:	0000087e 	.word	0x0000087e
    72c0:	00000884 	.word	0x00000884
    72c4:	00000884 	.word	0x00000884
    72c8:	00000884 	.word	0x00000884
    72cc:	00000884 	.word	0x00000884
    72d0:	00000884 	.word	0x00000884
    72d4:	00000884 	.word	0x00000884
    72d8:	00000884 	.word	0x00000884
    72dc:	00000884 	.word	0x00000884
    72e0:	00000884 	.word	0x00000884
    72e4:	00000884 	.word	0x00000884
    72e8:	00000884 	.word	0x00000884
    72ec:	00000884 	.word	0x00000884
    72f0:	00000884 	.word	0x00000884
    72f4:	00000884 	.word	0x00000884
    72f8:	00000884 	.word	0x00000884
    72fc:	0000085c 	.word	0x0000085c
    7300:	00000884 	.word	0x00000884
    7304:	00000884 	.word	0x00000884
    7308:	00000884 	.word	0x00000884
    730c:	00000884 	.word	0x00000884
    7310:	00000884 	.word	0x00000884
    7314:	00000884 	.word	0x00000884
    7318:	00000884 	.word	0x00000884
    731c:	00000884 	.word	0x00000884
    7320:	00000884 	.word	0x00000884
    7324:	00000884 	.word	0x00000884
    7328:	00000884 	.word	0x00000884
    732c:	00000884 	.word	0x00000884
    7330:	00000884 	.word	0x00000884
    7334:	00000884 	.word	0x00000884
    7338:	00000884 	.word	0x00000884
    733c:	00000878 	.word	0x00000878
    7340:	00000884 	.word	0x00000884
    7344:	00000884 	.word	0x00000884
    7348:	00000884 	.word	0x00000884
    734c:	00000884 	.word	0x00000884
    7350:	00000884 	.word	0x00000884
    7354:	00000884 	.word	0x00000884
    7358:	00000884 	.word	0x00000884
    735c:	00000884 	.word	0x00000884
    7360:	00000884 	.word	0x00000884
    7364:	00000884 	.word	0x00000884
    7368:	00000884 	.word	0x00000884
    736c:	00000884 	.word	0x00000884
    7370:	00000884 	.word	0x00000884
    7374:	00000884 	.word	0x00000884
    7378:	00000884 	.word	0x00000884
    737c:	00000872 	.word	0x00000872
    7380:	0000081a 	.word	0x0000081a
    7384:	00000830 	.word	0x00000830
    7388:	00000846 	.word	0x00000846
    738c:	00000800 	.word	0x00000800
    7390:	42000800 	.word	0x42000800
    7394:	42000c00 	.word	0x42000c00
    7398:	42001000 	.word	0x42001000
    739c:	42001400 	.word	0x42001400
    73a0:	42001800 	.word	0x42001800
    73a4:	42001c00 	.word	0x42001c00
    73a8:	0c0b0a09 	.word	0x0c0b0a09
    73ac:	00000e0d 	.word	0x00000e0d
    73b0:	454c4449 	.word	0x454c4449
    73b4:	00000000 	.word	0x00000000
    73b8:	20726d54 	.word	0x20726d54
    73bc:	00637653 	.word	0x00637653
    73c0:	00003e20 	.word	0x00003e20
    73c4:	00003e20 	.word	0x00003e20
    73c8:	00003e20 	.word	0x00003e20
    73cc:	00003eb4 	.word	0x00003eb4
    73d0:	00003e7e 	.word	0x00003e7e
    73d4:	00003ea8 	.word	0x00003ea8
    73d8:	00003e20 	.word	0x00003e20
    73dc:	00003e20 	.word	0x00003e20
    73e0:	00003eb4 	.word	0x00003eb4
    73e4:	00003e7e 	.word	0x00003e7e
    73e8:	0000435e 	.word	0x0000435e
    73ec:	000043da 	.word	0x000043da
    73f0:	000043da 	.word	0x000043da
    73f4:	00004380 	.word	0x00004380
    73f8:	0000437a 	.word	0x0000437a
    73fc:	00004386 	.word	0x00004386
    7400:	00004364 	.word	0x00004364
    7404:	0000438c 	.word	0x0000438c
    7408:	000043c0 	.word	0x000043c0
    740c:	000044b4 	.word	0x000044b4
    7410:	00004504 	.word	0x00004504
    7414:	00004504 	.word	0x00004504
    7418:	00004500 	.word	0x00004500
    741c:	000044a6 	.word	0x000044a6
    7420:	000044c6 	.word	0x000044c6
    7424:	00004496 	.word	0x00004496
    7428:	000044d8 	.word	0x000044d8
    742c:	000044ea 	.word	0x000044ea
    7430:	00006968 	.word	0x00006968
    7434:	46202d2d 	.word	0x46202d2d
    7438:	72656572 	.word	0x72656572
    743c:	20736f74 	.word	0x20736f74
    7440:	6d617845 	.word	0x6d617845
    7444:	20656c70 	.word	0x20656c70
    7448:	0d0a2d2d 	.word	0x0d0a2d2d
    744c:	00000000 	.word	0x00000000
    7450:	25202d2d 	.word	0x25202d2d
    7454:	000d0a73 	.word	0x000d0a73
    7458:	444d4153 	.word	0x444d4153
    745c:	585f3132 	.word	0x585f3132
    7460:	49414c50 	.word	0x49414c50
    7464:	5f44454e 	.word	0x5f44454e
    7468:	004f5250 	.word	0x004f5250
    746c:	43202d2d 	.word	0x43202d2d
    7470:	69706d6f 	.word	0x69706d6f
    7474:	3a64656c 	.word	0x3a64656c
    7478:	20732520 	.word	0x20732520
    747c:	2d207325 	.word	0x2d207325
    7480:	000d0a2d 	.word	0x000d0a2d
    7484:	2074634f 	.word	0x2074634f
    7488:	32203720 	.word	0x32203720
    748c:	00353130 	.word	0x00353130
    7490:	333a3132 	.word	0x333a3132
    7494:	34303a30 	.word	0x34303a30
    7498:	00000000 	.word	0x00000000
    749c:	0d0a6425 	.word	0x0d0a6425
    74a0:	00000000 	.word	0x00000000
    74a4:	73756170 	.word	0x73756170
    74a8:	6f702065 	.word	0x6f702065
    74ac:	00746e69 	.word	0x00746e69
    74b0:	696e6f4d 	.word	0x696e6f4d
    74b4:	00726f74 	.word	0x00726f74
    74b8:	0064654c 	.word	0x0064654c
    74bc:	00434441 	.word	0x00434441
    74c0:	00005d7c 	.word	0x00005d7c
    74c4:	00005d5a 	.word	0x00005d5a
    74c8:	00005d5a 	.word	0x00005d5a
    74cc:	00005d4e 	.word	0x00005d4e
    74d0:	00005c42 	.word	0x00005c42
    74d4:	00005c42 	.word	0x00005c42
    74d8:	00005d42 	.word	0x00005d42
    74dc:	00005d4e 	.word	0x00005d4e
    74e0:	00005c42 	.word	0x00005c42
    74e4:	00005d42 	.word	0x00005d42
    74e8:	00005c42 	.word	0x00005c42
    74ec:	00005d4e 	.word	0x00005d4e
    74f0:	00005c46 	.word	0x00005c46
    74f4:	00005c46 	.word	0x00005c46
    74f8:	00005c46 	.word	0x00005c46
    74fc:	00005f5c 	.word	0x00005f5c
    7500:	00000043 	.word	0x00000043

00007504 <_global_impure_ptr>:
    7504:	2000000c                                ... 

00007508 <__sf_fake_stdin>:
	...

00007528 <__sf_fake_stdout>:
	...

00007548 <__sf_fake_stderr>:
	...
    7568:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7578:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7588:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7598:	00006665                                ef..

0000759c <_init>:
    759c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    759e:	46c0      	nop			; (mov r8, r8)
    75a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    75a2:	bc08      	pop	{r3}
    75a4:	469e      	mov	lr, r3
    75a6:	4770      	bx	lr

000075a8 <__init_array_start>:
    75a8:	000000d9 	.word	0x000000d9

000075ac <_fini>:
    75ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75ae:	46c0      	nop			; (mov r8, r8)
    75b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    75b2:	bc08      	pop	{r3}
    75b4:	469e      	mov	lr, r3
    75b6:	4770      	bx	lr

000075b8 <__fini_array_start>:
    75b8:	000000b1 	.word	0x000000b1
