
SPI_QUICK_START_MASTER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000021e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000014  000021f8  00010014  2**2
                  ALLOC
  3 .stack        00002004  20000064  00002248  00010014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012cee  00000000  00000000  00010097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000175f  00000000  00000000  00022d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001588  00000000  00000000  000244e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000430  00000000  00000000  00025a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000380  00000000  00000000  00025e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017a20  00000000  00000000  0002621c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007288  00000000  00000000  0003dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000888f7  00000000  00000000  00044ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d94  00000000  00000000  000cd7bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002068 	.word	0x20002068
       4:	00001c21 	.word	0x00001c21
       8:	00001d05 	.word	0x00001d05
       c:	00001d05 	.word	0x00001d05
	...
      2c:	00001d05 	.word	0x00001d05
	...
      38:	00001d05 	.word	0x00001d05
      3c:	00001d05 	.word	0x00001d05
      40:	00001d05 	.word	0x00001d05
      44:	00001d05 	.word	0x00001d05
      48:	00001d05 	.word	0x00001d05
      4c:	00001d05 	.word	0x00001d05
      50:	00001d05 	.word	0x00001d05
      54:	00001d05 	.word	0x00001d05
      58:	00001d05 	.word	0x00001d05
      5c:	00001d05 	.word	0x00001d05
      60:	00001d05 	.word	0x00001d05
      64:	00001d05 	.word	0x00001d05
      68:	00001d05 	.word	0x00001d05
      6c:	00001d05 	.word	0x00001d05
      70:	00001d05 	.word	0x00001d05
      74:	00001d05 	.word	0x00001d05
      78:	00001d05 	.word	0x00001d05
      7c:	00001d05 	.word	0x00001d05
      80:	00001d05 	.word	0x00001d05
      84:	00001d05 	.word	0x00001d05
      88:	00001d05 	.word	0x00001d05
      8c:	00001d05 	.word	0x00001d05
      90:	00001d05 	.word	0x00001d05
      94:	00001d05 	.word	0x00001d05
      98:	00001d05 	.word	0x00001d05
      9c:	00001d05 	.word	0x00001d05
      a0:	00001d05 	.word	0x00001d05
      a4:	00001d05 	.word	0x00001d05
      a8:	00001d05 	.word	0x00001d05
      ac:	00001d05 	.word	0x00001d05

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000014 	.word	0x20000014
      d0:	00000000 	.word	0x00000000
      d4:	000021e4 	.word	0x000021e4

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	000021e4 	.word	0x000021e4
     104:	20000018 	.word	0x20000018
     108:	000021e4 	.word	0x000021e4
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <cpu_irq_enter_critical+0x44>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d112      	bne.n	144 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11e:	f3ef 8310 	mrs	r3, PRIMASK
     122:	607b      	str	r3, [r7, #4]
  return(result);
     124:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     126:	2b00      	cmp	r3, #0
     128:	d109      	bne.n	13e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     12a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     12c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <cpu_irq_enter_critical+0x48>)
     132:	2200      	movs	r2, #0
     134:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <cpu_irq_enter_critical+0x4c>)
     138:	2201      	movs	r2, #1
     13a:	701a      	strb	r2, [r3, #0]
     13c:	e002      	b.n	144 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     13e:	4b07      	ldr	r3, [pc, #28]	; (15c <cpu_irq_enter_critical+0x4c>)
     140:	2200      	movs	r2, #0
     142:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <cpu_irq_enter_critical+0x44>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1c5a      	adds	r2, r3, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x44>)
     14c:	601a      	str	r2, [r3, #0]
}
     14e:	46bd      	mov	sp, r7
     150:	b002      	add	sp, #8
     152:	bd80      	pop	{r7, pc}
     154:	20000030 	.word	0x20000030
     158:	20000000 	.word	0x20000000
     15c:	20000034 	.word	0x20000034

00000160 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <cpu_irq_leave_critical+0x30>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	1e5a      	subs	r2, r3, #1
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <cpu_irq_leave_critical+0x30>)
     16c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <cpu_irq_leave_critical+0x30>)
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d10a      	bne.n	18c <cpu_irq_leave_critical+0x2c>
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <cpu_irq_leave_critical+0x34>)
     178:	781b      	ldrb	r3, [r3, #0]
     17a:	b2db      	uxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	d005      	beq.n	18c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     180:	4b05      	ldr	r3, [pc, #20]	; (198 <cpu_irq_leave_critical+0x38>)
     182:	2201      	movs	r2, #1
     184:	701a      	strb	r2, [r3, #0]
     186:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     18a:	b662      	cpsie	i
	}
}
     18c:	46bd      	mov	sp, r7
     18e:	bd80      	pop	{r7, pc}
     190:	20000030 	.word	0x20000030
     194:	20000034 	.word	0x20000034
     198:	20000000 	.word	0x20000000

0000019c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     19c:	b580      	push	{r7, lr}
     19e:	b084      	sub	sp, #16
     1a0:	af00      	add	r7, sp, #0
     1a2:	1c02      	adds	r2, r0, #0
     1a4:	1dfb      	adds	r3, r7, #7
     1a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1a8:	1c3b      	adds	r3, r7, #0
     1aa:	330f      	adds	r3, #15
     1ac:	1dfa      	adds	r2, r7, #7
     1ae:	7812      	ldrb	r2, [r2, #0]
     1b0:	09d2      	lsrs	r2, r2, #7
     1b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1b4:	1c3b      	adds	r3, r7, #0
     1b6:	330e      	adds	r3, #14
     1b8:	1dfa      	adds	r2, r7, #7
     1ba:	7812      	ldrb	r2, [r2, #0]
     1bc:	0952      	lsrs	r2, r2, #5
     1be:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1c0:	4b0d      	ldr	r3, [pc, #52]	; (1f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1c2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1c4:	1c3b      	adds	r3, r7, #0
     1c6:	330f      	adds	r3, #15
     1c8:	781b      	ldrb	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d10e      	bne.n	1ec <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     1ce:	1c3b      	adds	r3, r7, #0
     1d0:	330f      	adds	r3, #15
     1d2:	781b      	ldrb	r3, [r3, #0]
     1d4:	009b      	lsls	r3, r3, #2
     1d6:	2210      	movs	r2, #16
     1d8:	19d2      	adds	r2, r2, r7
     1da:	18d3      	adds	r3, r2, r3
     1dc:	3b08      	subs	r3, #8
     1de:	681a      	ldr	r2, [r3, #0]
     1e0:	1c3b      	adds	r3, r7, #0
     1e2:	330e      	adds	r3, #14
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	01db      	lsls	r3, r3, #7
     1e8:	18d3      	adds	r3, r2, r3
     1ea:	e000      	b.n	1ee <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
     1ec:	2300      	movs	r3, #0
	}
}
     1ee:	1c18      	adds	r0, r3, #0
     1f0:	46bd      	mov	sp, r7
     1f2:	b004      	add	sp, #16
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	41004400 	.word	0x41004400

000001fc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b082      	sub	sp, #8
     200:	af00      	add	r7, sp, #0
     202:	1c02      	adds	r2, r0, #0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     208:	1dfb      	adds	r3, r7, #7
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	1c18      	adds	r0, r3, #0
     20e:	4b03      	ldr	r3, [pc, #12]	; (21c <port_get_group_from_gpio_pin+0x20>)
     210:	4798      	blx	r3
     212:	1c03      	adds	r3, r0, #0
}
     214:	1c18      	adds	r0, r3, #0
     216:	46bd      	mov	sp, r7
     218:	b002      	add	sp, #8
     21a:	bd80      	pop	{r7, pc}
     21c:	0000019d 	.word	0x0000019d

00000220 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	2201      	movs	r2, #1
     232:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	709a      	strb	r2, [r3, #2]
}
     23a:	46bd      	mov	sp, r7
     23c:	b002      	add	sp, #8
     23e:	bd80      	pop	{r7, pc}

00000240 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     240:	b580      	push	{r7, lr}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	1c0a      	adds	r2, r1, #0
     248:	1dfb      	adds	r3, r7, #7
     24a:	1c01      	adds	r1, r0, #0
     24c:	7019      	strb	r1, [r3, #0]
     24e:	1dbb      	adds	r3, r7, #6
     250:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     252:	1dfb      	adds	r3, r7, #7
     254:	781b      	ldrb	r3, [r3, #0]
     256:	1c18      	adds	r0, r3, #0
     258:	4b0d      	ldr	r3, [pc, #52]	; (290 <port_pin_set_output_level+0x50>)
     25a:	4798      	blx	r3
     25c:	1c03      	adds	r3, r0, #0
     25e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     260:	1dfb      	adds	r3, r7, #7
     262:	781a      	ldrb	r2, [r3, #0]
     264:	231f      	movs	r3, #31
     266:	4013      	ands	r3, r2
     268:	2201      	movs	r2, #1
     26a:	1c11      	adds	r1, r2, #0
     26c:	4099      	lsls	r1, r3
     26e:	1c0b      	adds	r3, r1, #0
     270:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     272:	1dbb      	adds	r3, r7, #6
     274:	781b      	ldrb	r3, [r3, #0]
     276:	2b00      	cmp	r3, #0
     278:	d003      	beq.n	282 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     27a:	68fb      	ldr	r3, [r7, #12]
     27c:	68ba      	ldr	r2, [r7, #8]
     27e:	619a      	str	r2, [r3, #24]
     280:	e002      	b.n	288 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     282:	68fb      	ldr	r3, [r7, #12]
     284:	68ba      	ldr	r2, [r7, #8]
     286:	615a      	str	r2, [r3, #20]
	}
}
     288:	46bd      	mov	sp, r7
     28a:	b004      	add	sp, #16
     28c:	bd80      	pop	{r7, pc}
     28e:	46c0      	nop			; (mov r8, r8)
     290:	000001fd 	.word	0x000001fd

00000294 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     294:	b580      	push	{r7, lr}
     296:	b082      	sub	sp, #8
     298:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     29a:	1d3b      	adds	r3, r7, #4
     29c:	1c18      	adds	r0, r3, #0
     29e:	4b0e      	ldr	r3, [pc, #56]	; (2d8 <system_board_init+0x44>)
     2a0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2a2:	1d3b      	adds	r3, r7, #4
     2a4:	2201      	movs	r2, #1
     2a6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2a8:	1d3b      	adds	r3, r7, #4
     2aa:	203e      	movs	r0, #62	; 0x3e
     2ac:	1c19      	adds	r1, r3, #0
     2ae:	4b0b      	ldr	r3, [pc, #44]	; (2dc <system_board_init+0x48>)
     2b0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     2b2:	203e      	movs	r0, #62	; 0x3e
     2b4:	2101      	movs	r1, #1
     2b6:	4b0a      	ldr	r3, [pc, #40]	; (2e0 <system_board_init+0x4c>)
     2b8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2ba:	1d3b      	adds	r3, r7, #4
     2bc:	2200      	movs	r2, #0
     2be:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2c0:	1d3b      	adds	r3, r7, #4
     2c2:	2201      	movs	r2, #1
     2c4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2c6:	1d3b      	adds	r3, r7, #4
     2c8:	200f      	movs	r0, #15
     2ca:	1c19      	adds	r1, r3, #0
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <system_board_init+0x48>)
     2ce:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     2d0:	46bd      	mov	sp, r7
     2d2:	b002      	add	sp, #8
     2d4:	bd80      	pop	{r7, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	00000221 	.word	0x00000221
     2dc:	0000030d 	.word	0x0000030d
     2e0:	00000241 	.word	0x00000241

000002e4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     2e4:	b580      	push	{r7, lr}
     2e6:	b082      	sub	sp, #8
     2e8:	af00      	add	r7, sp, #0
     2ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2280      	movs	r2, #128	; 0x80
     2f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2f2:	687b      	ldr	r3, [r7, #4]
     2f4:	2200      	movs	r2, #0
     2f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	2201      	movs	r2, #1
     2fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2fe:	687b      	ldr	r3, [r7, #4]
     300:	2200      	movs	r2, #0
     302:	70da      	strb	r2, [r3, #3]
}
     304:	46bd      	mov	sp, r7
     306:	b002      	add	sp, #8
     308:	bd80      	pop	{r7, pc}
     30a:	46c0      	nop			; (mov r8, r8)

0000030c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	1c02      	adds	r2, r0, #0
     314:	6039      	str	r1, [r7, #0]
     316:	1dfb      	adds	r3, r7, #7
     318:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     31a:	1c3b      	adds	r3, r7, #0
     31c:	330c      	adds	r3, #12
     31e:	1c18      	adds	r0, r3, #0
     320:	4b0f      	ldr	r3, [pc, #60]	; (360 <port_pin_set_config+0x54>)
     322:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     324:	1c3b      	adds	r3, r7, #0
     326:	330c      	adds	r3, #12
     328:	2280      	movs	r2, #128	; 0x80
     32a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     32c:	683b      	ldr	r3, [r7, #0]
     32e:	781a      	ldrb	r2, [r3, #0]
     330:	1c3b      	adds	r3, r7, #0
     332:	330c      	adds	r3, #12
     334:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     336:	683b      	ldr	r3, [r7, #0]
     338:	785a      	ldrb	r2, [r3, #1]
     33a:	1c3b      	adds	r3, r7, #0
     33c:	330c      	adds	r3, #12
     33e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     340:	683b      	ldr	r3, [r7, #0]
     342:	789a      	ldrb	r2, [r3, #2]
     344:	1c3b      	adds	r3, r7, #0
     346:	330c      	adds	r3, #12
     348:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     34a:	1dfb      	adds	r3, r7, #7
     34c:	781a      	ldrb	r2, [r3, #0]
     34e:	1c3b      	adds	r3, r7, #0
     350:	330c      	adds	r3, #12
     352:	1c10      	adds	r0, r2, #0
     354:	1c19      	adds	r1, r3, #0
     356:	4b03      	ldr	r3, [pc, #12]	; (364 <port_pin_set_config+0x58>)
     358:	4798      	blx	r3
}
     35a:	46bd      	mov	sp, r7
     35c:	b004      	add	sp, #16
     35e:	bd80      	pop	{r7, pc}
     360:	000002e5 	.word	0x000002e5
     364:	00001ba1 	.word	0x00001ba1

00000368 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     368:	b580      	push	{r7, lr}
     36a:	b082      	sub	sp, #8
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     370:	687b      	ldr	r3, [r7, #4]
     372:	2200      	movs	r2, #0
     374:	701a      	strb	r2, [r3, #0]
}
     376:	46bd      	mov	sp, r7
     378:	b002      	add	sp, #8
     37a:	bd80      	pop	{r7, pc}

0000037c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     37c:	b580      	push	{r7, lr}
     37e:	b086      	sub	sp, #24
     380:	af00      	add	r7, sp, #0
     382:	60f8      	str	r0, [r7, #12]
     384:	60b9      	str	r1, [r7, #8]
     386:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     388:	1c3b      	adds	r3, r7, #0
     38a:	3316      	adds	r3, #22
     38c:	2200      	movs	r2, #0
     38e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     390:	68bb      	ldr	r3, [r7, #8]
     392:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     394:	68bb      	ldr	r3, [r7, #8]
     396:	085a      	lsrs	r2, r3, #1
     398:	68fb      	ldr	r3, [r7, #12]
     39a:	429a      	cmp	r2, r3
     39c:	d201      	bcs.n	3a2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     39e:	2340      	movs	r3, #64	; 0x40
     3a0:	e026      	b.n	3f0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     3a2:	68bb      	ldr	r3, [r7, #8]
     3a4:	085b      	lsrs	r3, r3, #1
     3a6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     3a8:	e00a      	b.n	3c0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     3aa:	693a      	ldr	r2, [r7, #16]
     3ac:	68fb      	ldr	r3, [r7, #12]
     3ae:	1ad3      	subs	r3, r2, r3
     3b0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3b2:	1c3b      	adds	r3, r7, #0
     3b4:	3316      	adds	r3, #22
     3b6:	881a      	ldrh	r2, [r3, #0]
     3b8:	1c3b      	adds	r3, r7, #0
     3ba:	3316      	adds	r3, #22
     3bc:	3201      	adds	r2, #1
     3be:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3c0:	693a      	ldr	r2, [r7, #16]
     3c2:	68fb      	ldr	r3, [r7, #12]
     3c4:	429a      	cmp	r2, r3
     3c6:	d2f0      	bcs.n	3aa <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     3c8:	1c3b      	adds	r3, r7, #0
     3ca:	3316      	adds	r3, #22
     3cc:	1c3a      	adds	r2, r7, #0
     3ce:	3216      	adds	r2, #22
     3d0:	8812      	ldrh	r2, [r2, #0]
     3d2:	3a01      	subs	r2, #1
     3d4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3d6:	1c3b      	adds	r3, r7, #0
     3d8:	3316      	adds	r3, #22
     3da:	881b      	ldrh	r3, [r3, #0]
     3dc:	2bff      	cmp	r3, #255	; 0xff
     3de:	d901      	bls.n	3e4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3e0:	2340      	movs	r3, #64	; 0x40
     3e2:	e005      	b.n	3f0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	1c3a      	adds	r2, r7, #0
     3e8:	3216      	adds	r2, #22
     3ea:	8812      	ldrh	r2, [r2, #0]
     3ec:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     3ee:	2300      	movs	r3, #0
	}
}
     3f0:	1c18      	adds	r0, r3, #0
     3f2:	46bd      	mov	sp, r7
     3f4:	b006      	add	sp, #24
     3f6:	bd80      	pop	{r7, pc}

000003f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3f8:	b580      	push	{r7, lr}
     3fa:	b084      	sub	sp, #16
     3fc:	af00      	add	r7, sp, #0
     3fe:	1c0a      	adds	r2, r1, #0
     400:	1dfb      	adds	r3, r7, #7
     402:	1c01      	adds	r1, r0, #0
     404:	7019      	strb	r1, [r3, #0]
     406:	1dbb      	adds	r3, r7, #6
     408:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     40a:	4b1a      	ldr	r3, [pc, #104]	; (474 <sercom_set_gclk_generator+0x7c>)
     40c:	781b      	ldrb	r3, [r3, #0]
     40e:	2201      	movs	r2, #1
     410:	4053      	eors	r3, r2
     412:	b2db      	uxtb	r3, r3
     414:	2b00      	cmp	r3, #0
     416:	d103      	bne.n	420 <sercom_set_gclk_generator+0x28>
     418:	1dbb      	adds	r3, r7, #6
     41a:	781b      	ldrb	r3, [r3, #0]
     41c:	2b00      	cmp	r3, #0
     41e:	d01b      	beq.n	458 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     420:	1c3b      	adds	r3, r7, #0
     422:	330c      	adds	r3, #12
     424:	1c18      	adds	r0, r3, #0
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <sercom_set_gclk_generator+0x80>)
     428:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     42a:	1c3b      	adds	r3, r7, #0
     42c:	330c      	adds	r3, #12
     42e:	1dfa      	adds	r2, r7, #7
     430:	7812      	ldrb	r2, [r2, #0]
     432:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     434:	1c3b      	adds	r3, r7, #0
     436:	330c      	adds	r3, #12
     438:	2013      	movs	r0, #19
     43a:	1c19      	adds	r1, r3, #0
     43c:	4b0f      	ldr	r3, [pc, #60]	; (47c <sercom_set_gclk_generator+0x84>)
     43e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     440:	2013      	movs	r0, #19
     442:	4b0f      	ldr	r3, [pc, #60]	; (480 <sercom_set_gclk_generator+0x88>)
     444:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     446:	4b0b      	ldr	r3, [pc, #44]	; (474 <sercom_set_gclk_generator+0x7c>)
     448:	1dfa      	adds	r2, r7, #7
     44a:	7812      	ldrb	r2, [r2, #0]
     44c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     44e:	4b09      	ldr	r3, [pc, #36]	; (474 <sercom_set_gclk_generator+0x7c>)
     450:	2201      	movs	r2, #1
     452:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     454:	2300      	movs	r3, #0
     456:	e008      	b.n	46a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <sercom_set_gclk_generator+0x7c>)
     45a:	785b      	ldrb	r3, [r3, #1]
     45c:	1dfa      	adds	r2, r7, #7
     45e:	7812      	ldrb	r2, [r2, #0]
     460:	429a      	cmp	r2, r3
     462:	d101      	bne.n	468 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     464:	2300      	movs	r3, #0
     466:	e000      	b.n	46a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     468:	231d      	movs	r3, #29
}
     46a:	1c18      	adds	r0, r3, #0
     46c:	46bd      	mov	sp, r7
     46e:	b004      	add	sp, #16
     470:	bd80      	pop	{r7, pc}
     472:	46c0      	nop			; (mov r8, r8)
     474:	20000038 	.word	0x20000038
     478:	00000369 	.word	0x00000369
     47c:	000018bd 	.word	0x000018bd
     480:	000018fd 	.word	0x000018fd

00000484 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     484:	b580      	push	{r7, lr}
     486:	b082      	sub	sp, #8
     488:	af00      	add	r7, sp, #0
     48a:	6078      	str	r0, [r7, #4]
     48c:	1c0a      	adds	r2, r1, #0
     48e:	1cfb      	adds	r3, r7, #3
     490:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     492:	687b      	ldr	r3, [r7, #4]
     494:	4a4d      	ldr	r2, [pc, #308]	; (5cc <_sercom_get_default_pad+0x148>)
     496:	4293      	cmp	r3, r2
     498:	d03f      	beq.n	51a <_sercom_get_default_pad+0x96>
     49a:	4a4c      	ldr	r2, [pc, #304]	; (5cc <_sercom_get_default_pad+0x148>)
     49c:	4293      	cmp	r3, r2
     49e:	d806      	bhi.n	4ae <_sercom_get_default_pad+0x2a>
     4a0:	4a4b      	ldr	r2, [pc, #300]	; (5d0 <_sercom_get_default_pad+0x14c>)
     4a2:	4293      	cmp	r3, r2
     4a4:	d00f      	beq.n	4c6 <_sercom_get_default_pad+0x42>
     4a6:	4a4b      	ldr	r2, [pc, #300]	; (5d4 <_sercom_get_default_pad+0x150>)
     4a8:	4293      	cmp	r3, r2
     4aa:	d021      	beq.n	4f0 <_sercom_get_default_pad+0x6c>
     4ac:	e089      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     4ae:	4a4a      	ldr	r2, [pc, #296]	; (5d8 <_sercom_get_default_pad+0x154>)
     4b0:	4293      	cmp	r3, r2
     4b2:	d100      	bne.n	4b6 <_sercom_get_default_pad+0x32>
     4b4:	e05b      	b.n	56e <_sercom_get_default_pad+0xea>
     4b6:	4a49      	ldr	r2, [pc, #292]	; (5dc <_sercom_get_default_pad+0x158>)
     4b8:	4293      	cmp	r3, r2
     4ba:	d100      	bne.n	4be <_sercom_get_default_pad+0x3a>
     4bc:	e06c      	b.n	598 <_sercom_get_default_pad+0x114>
     4be:	4a48      	ldr	r2, [pc, #288]	; (5e0 <_sercom_get_default_pad+0x15c>)
     4c0:	4293      	cmp	r3, r2
     4c2:	d03f      	beq.n	544 <_sercom_get_default_pad+0xc0>
     4c4:	e07d      	b.n	5c2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4c6:	1cfb      	adds	r3, r7, #3
     4c8:	781b      	ldrb	r3, [r3, #0]
     4ca:	2b01      	cmp	r3, #1
     4cc:	d00a      	beq.n	4e4 <_sercom_get_default_pad+0x60>
     4ce:	dc02      	bgt.n	4d6 <_sercom_get_default_pad+0x52>
     4d0:	2b00      	cmp	r3, #0
     4d2:	d005      	beq.n	4e0 <_sercom_get_default_pad+0x5c>
     4d4:	e075      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     4d6:	2b02      	cmp	r3, #2
     4d8:	d006      	beq.n	4e8 <_sercom_get_default_pad+0x64>
     4da:	2b03      	cmp	r3, #3
     4dc:	d006      	beq.n	4ec <_sercom_get_default_pad+0x68>
     4de:	e070      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     4e0:	4b40      	ldr	r3, [pc, #256]	; (5e4 <_sercom_get_default_pad+0x160>)
     4e2:	e06f      	b.n	5c4 <_sercom_get_default_pad+0x140>
     4e4:	4b40      	ldr	r3, [pc, #256]	; (5e8 <_sercom_get_default_pad+0x164>)
     4e6:	e06d      	b.n	5c4 <_sercom_get_default_pad+0x140>
     4e8:	4b40      	ldr	r3, [pc, #256]	; (5ec <_sercom_get_default_pad+0x168>)
     4ea:	e06b      	b.n	5c4 <_sercom_get_default_pad+0x140>
     4ec:	4b40      	ldr	r3, [pc, #256]	; (5f0 <_sercom_get_default_pad+0x16c>)
     4ee:	e069      	b.n	5c4 <_sercom_get_default_pad+0x140>
     4f0:	1cfb      	adds	r3, r7, #3
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	2b01      	cmp	r3, #1
     4f6:	d00a      	beq.n	50e <_sercom_get_default_pad+0x8a>
     4f8:	dc02      	bgt.n	500 <_sercom_get_default_pad+0x7c>
     4fa:	2b00      	cmp	r3, #0
     4fc:	d005      	beq.n	50a <_sercom_get_default_pad+0x86>
     4fe:	e060      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     500:	2b02      	cmp	r3, #2
     502:	d006      	beq.n	512 <_sercom_get_default_pad+0x8e>
     504:	2b03      	cmp	r3, #3
     506:	d006      	beq.n	516 <_sercom_get_default_pad+0x92>
     508:	e05b      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     50a:	2303      	movs	r3, #3
     50c:	e05a      	b.n	5c4 <_sercom_get_default_pad+0x140>
     50e:	4b39      	ldr	r3, [pc, #228]	; (5f4 <_sercom_get_default_pad+0x170>)
     510:	e058      	b.n	5c4 <_sercom_get_default_pad+0x140>
     512:	4b39      	ldr	r3, [pc, #228]	; (5f8 <_sercom_get_default_pad+0x174>)
     514:	e056      	b.n	5c4 <_sercom_get_default_pad+0x140>
     516:	4b39      	ldr	r3, [pc, #228]	; (5fc <_sercom_get_default_pad+0x178>)
     518:	e054      	b.n	5c4 <_sercom_get_default_pad+0x140>
     51a:	1cfb      	adds	r3, r7, #3
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2b01      	cmp	r3, #1
     520:	d00a      	beq.n	538 <_sercom_get_default_pad+0xb4>
     522:	dc02      	bgt.n	52a <_sercom_get_default_pad+0xa6>
     524:	2b00      	cmp	r3, #0
     526:	d005      	beq.n	534 <_sercom_get_default_pad+0xb0>
     528:	e04b      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     52a:	2b02      	cmp	r3, #2
     52c:	d006      	beq.n	53c <_sercom_get_default_pad+0xb8>
     52e:	2b03      	cmp	r3, #3
     530:	d006      	beq.n	540 <_sercom_get_default_pad+0xbc>
     532:	e046      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     534:	4b32      	ldr	r3, [pc, #200]	; (600 <_sercom_get_default_pad+0x17c>)
     536:	e045      	b.n	5c4 <_sercom_get_default_pad+0x140>
     538:	4b32      	ldr	r3, [pc, #200]	; (604 <_sercom_get_default_pad+0x180>)
     53a:	e043      	b.n	5c4 <_sercom_get_default_pad+0x140>
     53c:	4b32      	ldr	r3, [pc, #200]	; (608 <_sercom_get_default_pad+0x184>)
     53e:	e041      	b.n	5c4 <_sercom_get_default_pad+0x140>
     540:	4b32      	ldr	r3, [pc, #200]	; (60c <_sercom_get_default_pad+0x188>)
     542:	e03f      	b.n	5c4 <_sercom_get_default_pad+0x140>
     544:	1cfb      	adds	r3, r7, #3
     546:	781b      	ldrb	r3, [r3, #0]
     548:	2b01      	cmp	r3, #1
     54a:	d00a      	beq.n	562 <_sercom_get_default_pad+0xde>
     54c:	dc02      	bgt.n	554 <_sercom_get_default_pad+0xd0>
     54e:	2b00      	cmp	r3, #0
     550:	d005      	beq.n	55e <_sercom_get_default_pad+0xda>
     552:	e036      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     554:	2b02      	cmp	r3, #2
     556:	d006      	beq.n	566 <_sercom_get_default_pad+0xe2>
     558:	2b03      	cmp	r3, #3
     55a:	d006      	beq.n	56a <_sercom_get_default_pad+0xe6>
     55c:	e031      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     55e:	4b2c      	ldr	r3, [pc, #176]	; (610 <_sercom_get_default_pad+0x18c>)
     560:	e030      	b.n	5c4 <_sercom_get_default_pad+0x140>
     562:	4b2c      	ldr	r3, [pc, #176]	; (614 <_sercom_get_default_pad+0x190>)
     564:	e02e      	b.n	5c4 <_sercom_get_default_pad+0x140>
     566:	4b2c      	ldr	r3, [pc, #176]	; (618 <_sercom_get_default_pad+0x194>)
     568:	e02c      	b.n	5c4 <_sercom_get_default_pad+0x140>
     56a:	4b2c      	ldr	r3, [pc, #176]	; (61c <_sercom_get_default_pad+0x198>)
     56c:	e02a      	b.n	5c4 <_sercom_get_default_pad+0x140>
     56e:	1cfb      	adds	r3, r7, #3
     570:	781b      	ldrb	r3, [r3, #0]
     572:	2b01      	cmp	r3, #1
     574:	d00a      	beq.n	58c <_sercom_get_default_pad+0x108>
     576:	dc02      	bgt.n	57e <_sercom_get_default_pad+0xfa>
     578:	2b00      	cmp	r3, #0
     57a:	d005      	beq.n	588 <_sercom_get_default_pad+0x104>
     57c:	e021      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     57e:	2b02      	cmp	r3, #2
     580:	d006      	beq.n	590 <_sercom_get_default_pad+0x10c>
     582:	2b03      	cmp	r3, #3
     584:	d006      	beq.n	594 <_sercom_get_default_pad+0x110>
     586:	e01c      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     588:	4b25      	ldr	r3, [pc, #148]	; (620 <_sercom_get_default_pad+0x19c>)
     58a:	e01b      	b.n	5c4 <_sercom_get_default_pad+0x140>
     58c:	4b25      	ldr	r3, [pc, #148]	; (624 <_sercom_get_default_pad+0x1a0>)
     58e:	e019      	b.n	5c4 <_sercom_get_default_pad+0x140>
     590:	4b25      	ldr	r3, [pc, #148]	; (628 <_sercom_get_default_pad+0x1a4>)
     592:	e017      	b.n	5c4 <_sercom_get_default_pad+0x140>
     594:	4b25      	ldr	r3, [pc, #148]	; (62c <_sercom_get_default_pad+0x1a8>)
     596:	e015      	b.n	5c4 <_sercom_get_default_pad+0x140>
     598:	1cfb      	adds	r3, r7, #3
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2b01      	cmp	r3, #1
     59e:	d00a      	beq.n	5b6 <_sercom_get_default_pad+0x132>
     5a0:	dc02      	bgt.n	5a8 <_sercom_get_default_pad+0x124>
     5a2:	2b00      	cmp	r3, #0
     5a4:	d005      	beq.n	5b2 <_sercom_get_default_pad+0x12e>
     5a6:	e00c      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     5a8:	2b02      	cmp	r3, #2
     5aa:	d006      	beq.n	5ba <_sercom_get_default_pad+0x136>
     5ac:	2b03      	cmp	r3, #3
     5ae:	d006      	beq.n	5be <_sercom_get_default_pad+0x13a>
     5b0:	e007      	b.n	5c2 <_sercom_get_default_pad+0x13e>
     5b2:	4b1f      	ldr	r3, [pc, #124]	; (630 <_sercom_get_default_pad+0x1ac>)
     5b4:	e006      	b.n	5c4 <_sercom_get_default_pad+0x140>
     5b6:	4b1f      	ldr	r3, [pc, #124]	; (634 <_sercom_get_default_pad+0x1b0>)
     5b8:	e004      	b.n	5c4 <_sercom_get_default_pad+0x140>
     5ba:	4b1f      	ldr	r3, [pc, #124]	; (638 <_sercom_get_default_pad+0x1b4>)
     5bc:	e002      	b.n	5c4 <_sercom_get_default_pad+0x140>
     5be:	4b1f      	ldr	r3, [pc, #124]	; (63c <_sercom_get_default_pad+0x1b8>)
     5c0:	e000      	b.n	5c4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     5c2:	2300      	movs	r3, #0
}
     5c4:	1c18      	adds	r0, r3, #0
     5c6:	46bd      	mov	sp, r7
     5c8:	b002      	add	sp, #8
     5ca:	bd80      	pop	{r7, pc}
     5cc:	42001000 	.word	0x42001000
     5d0:	42000800 	.word	0x42000800
     5d4:	42000c00 	.word	0x42000c00
     5d8:	42001800 	.word	0x42001800
     5dc:	42001c00 	.word	0x42001c00
     5e0:	42001400 	.word	0x42001400
     5e4:	00040003 	.word	0x00040003
     5e8:	00050003 	.word	0x00050003
     5ec:	00060003 	.word	0x00060003
     5f0:	00070003 	.word	0x00070003
     5f4:	00010003 	.word	0x00010003
     5f8:	001e0003 	.word	0x001e0003
     5fc:	001f0003 	.word	0x001f0003
     600:	00080003 	.word	0x00080003
     604:	00090003 	.word	0x00090003
     608:	000a0003 	.word	0x000a0003
     60c:	000b0003 	.word	0x000b0003
     610:	00100003 	.word	0x00100003
     614:	00110003 	.word	0x00110003
     618:	00120003 	.word	0x00120003
     61c:	00130003 	.word	0x00130003
     620:	000c0003 	.word	0x000c0003
     624:	000d0003 	.word	0x000d0003
     628:	000e0003 	.word	0x000e0003
     62c:	000f0003 	.word	0x000f0003
     630:	00160003 	.word	0x00160003
     634:	00170003 	.word	0x00170003
     638:	00180003 	.word	0x00180003
     63c:	00190003 	.word	0x00190003

00000640 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     640:	b590      	push	{r4, r7, lr}
     642:	b08b      	sub	sp, #44	; 0x2c
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     648:	1c3b      	adds	r3, r7, #0
     64a:	330c      	adds	r3, #12
     64c:	4a0e      	ldr	r2, [pc, #56]	; (688 <_sercom_get_sercom_inst_index+0x48>)
     64e:	ca13      	ldmia	r2!, {r0, r1, r4}
     650:	c313      	stmia	r3!, {r0, r1, r4}
     652:	ca13      	ldmia	r2!, {r0, r1, r4}
     654:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     656:	2300      	movs	r3, #0
     658:	627b      	str	r3, [r7, #36]	; 0x24
     65a:	e00d      	b.n	678 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     65c:	687a      	ldr	r2, [r7, #4]
     65e:	1c3b      	adds	r3, r7, #0
     660:	330c      	adds	r3, #12
     662:	6a79      	ldr	r1, [r7, #36]	; 0x24
     664:	0089      	lsls	r1, r1, #2
     666:	58cb      	ldr	r3, [r1, r3]
     668:	429a      	cmp	r2, r3
     66a:	d102      	bne.n	672 <_sercom_get_sercom_inst_index+0x32>
			return i;
     66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     66e:	b2db      	uxtb	r3, r3
     670:	e006      	b.n	680 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     674:	3301      	adds	r3, #1
     676:	627b      	str	r3, [r7, #36]	; 0x24
     678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     67a:	2b05      	cmp	r3, #5
     67c:	d9ee      	bls.n	65c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     67e:	2300      	movs	r3, #0
}
     680:	1c18      	adds	r0, r3, #0
     682:	46bd      	mov	sp, r7
     684:	b00b      	add	sp, #44	; 0x2c
     686:	bd90      	pop	{r4, r7, pc}
     688:	00002164 	.word	0x00002164

0000068c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     694:	687b      	ldr	r3, [r7, #4]
     696:	2280      	movs	r2, #128	; 0x80
     698:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	2200      	movs	r2, #0
     69e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6a0:	687b      	ldr	r3, [r7, #4]
     6a2:	2201      	movs	r2, #1
     6a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	2200      	movs	r2, #0
     6aa:	70da      	strb	r2, [r3, #3]
}
     6ac:	46bd      	mov	sp, r7
     6ae:	b002      	add	sp, #8
     6b0:	bd80      	pop	{r7, pc}
     6b2:	46c0      	nop			; (mov r8, r8)

000006b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     6b4:	b580      	push	{r7, lr}
     6b6:	b084      	sub	sp, #16
     6b8:	af00      	add	r7, sp, #0
     6ba:	1c02      	adds	r2, r0, #0
     6bc:	1dfb      	adds	r3, r7, #7
     6be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     6c0:	1c3b      	adds	r3, r7, #0
     6c2:	330f      	adds	r3, #15
     6c4:	1dfa      	adds	r2, r7, #7
     6c6:	7812      	ldrb	r2, [r2, #0]
     6c8:	09d2      	lsrs	r2, r2, #7
     6ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     6cc:	1c3b      	adds	r3, r7, #0
     6ce:	330e      	adds	r3, #14
     6d0:	1dfa      	adds	r2, r7, #7
     6d2:	7812      	ldrb	r2, [r2, #0]
     6d4:	0952      	lsrs	r2, r2, #5
     6d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     6d8:	4b0d      	ldr	r3, [pc, #52]	; (710 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     6da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     6dc:	1c3b      	adds	r3, r7, #0
     6de:	330f      	adds	r3, #15
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d10e      	bne.n	704 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
     6e6:	1c3b      	adds	r3, r7, #0
     6e8:	330f      	adds	r3, #15
     6ea:	781b      	ldrb	r3, [r3, #0]
     6ec:	009b      	lsls	r3, r3, #2
     6ee:	2210      	movs	r2, #16
     6f0:	19d2      	adds	r2, r2, r7
     6f2:	18d3      	adds	r3, r2, r3
     6f4:	3b08      	subs	r3, #8
     6f6:	681a      	ldr	r2, [r3, #0]
     6f8:	1c3b      	adds	r3, r7, #0
     6fa:	330e      	adds	r3, #14
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	01db      	lsls	r3, r3, #7
     700:	18d3      	adds	r3, r2, r3
     702:	e000      	b.n	706 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
     704:	2300      	movs	r3, #0
	}
}
     706:	1c18      	adds	r0, r3, #0
     708:	46bd      	mov	sp, r7
     70a:	b004      	add	sp, #16
     70c:	bd80      	pop	{r7, pc}
     70e:	46c0      	nop			; (mov r8, r8)
     710:	41004400 	.word	0x41004400

00000714 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     714:	b580      	push	{r7, lr}
     716:	b086      	sub	sp, #24
     718:	af00      	add	r7, sp, #0
     71a:	1c02      	adds	r2, r0, #0
     71c:	1dfb      	adds	r3, r7, #7
     71e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     720:	1dfb      	adds	r3, r7, #7
     722:	781b      	ldrb	r3, [r3, #0]
     724:	1c18      	adds	r0, r3, #0
     726:	4b19      	ldr	r3, [pc, #100]	; (78c <system_pinmux_pin_get_mux_position+0x78>)
     728:	4798      	blx	r3
     72a:	1c03      	adds	r3, r0, #0
     72c:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     72e:	1dfb      	adds	r3, r7, #7
     730:	781a      	ldrb	r2, [r3, #0]
     732:	231f      	movs	r3, #31
     734:	4013      	ands	r3, r2
     736:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     738:	6979      	ldr	r1, [r7, #20]
     73a:	2340      	movs	r3, #64	; 0x40
     73c:	693a      	ldr	r2, [r7, #16]
     73e:	188a      	adds	r2, r1, r2
     740:	18d3      	adds	r3, r2, r3
     742:	781b      	ldrb	r3, [r3, #0]
     744:	b2db      	uxtb	r3, r3
     746:	1c1a      	adds	r2, r3, #0
     748:	2301      	movs	r3, #1
     74a:	4013      	ands	r3, r2
     74c:	d101      	bne.n	752 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     74e:	2380      	movs	r3, #128	; 0x80
     750:	e017      	b.n	782 <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     752:	693b      	ldr	r3, [r7, #16]
     754:	085a      	lsrs	r2, r3, #1
     756:	6979      	ldr	r1, [r7, #20]
     758:	2330      	movs	r3, #48	; 0x30
     75a:	188a      	adds	r2, r1, r2
     75c:	18d3      	adds	r3, r2, r3
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	b2db      	uxtb	r3, r3
     762:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     764:	693a      	ldr	r2, [r7, #16]
     766:	2301      	movs	r3, #1
     768:	4013      	ands	r3, r2
     76a:	d005      	beq.n	778 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     76c:	68fa      	ldr	r2, [r7, #12]
     76e:	23f0      	movs	r3, #240	; 0xf0
     770:	4013      	ands	r3, r2
     772:	091b      	lsrs	r3, r3, #4
     774:	b2db      	uxtb	r3, r3
     776:	e004      	b.n	782 <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     778:	68fb      	ldr	r3, [r7, #12]
     77a:	b2da      	uxtb	r2, r3
     77c:	230f      	movs	r3, #15
     77e:	4013      	ands	r3, r2
     780:	b2db      	uxtb	r3, r3
	}
}
     782:	1c18      	adds	r0, r3, #0
     784:	46bd      	mov	sp, r7
     786:	b006      	add	sp, #24
     788:	bd80      	pop	{r7, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	000006b5 	.word	0x000006b5

00000790 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     790:	b580      	push	{r7, lr}
     792:	b082      	sub	sp, #8
     794:	af00      	add	r7, sp, #0
     796:	1c02      	adds	r2, r0, #0
     798:	1dfb      	adds	r3, r7, #7
     79a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     79c:	1dfb      	adds	r3, r7, #7
     79e:	781b      	ldrb	r3, [r3, #0]
     7a0:	1c18      	adds	r0, r3, #0
     7a2:	4b03      	ldr	r3, [pc, #12]	; (7b0 <port_get_group_from_gpio_pin+0x20>)
     7a4:	4798      	blx	r3
     7a6:	1c03      	adds	r3, r0, #0
}
     7a8:	1c18      	adds	r0, r3, #0
     7aa:	46bd      	mov	sp, r7
     7ac:	b002      	add	sp, #8
     7ae:	bd80      	pop	{r7, pc}
     7b0:	000006b5 	.word	0x000006b5

000007b4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     7b4:	b580      	push	{r7, lr}
     7b6:	b084      	sub	sp, #16
     7b8:	af00      	add	r7, sp, #0
     7ba:	1c0a      	adds	r2, r1, #0
     7bc:	1dfb      	adds	r3, r7, #7
     7be:	1c01      	adds	r1, r0, #0
     7c0:	7019      	strb	r1, [r3, #0]
     7c2:	1dbb      	adds	r3, r7, #6
     7c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     7c6:	1dfb      	adds	r3, r7, #7
     7c8:	781b      	ldrb	r3, [r3, #0]
     7ca:	1c18      	adds	r0, r3, #0
     7cc:	4b0d      	ldr	r3, [pc, #52]	; (804 <port_pin_set_output_level+0x50>)
     7ce:	4798      	blx	r3
     7d0:	1c03      	adds	r3, r0, #0
     7d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d4:	1dfb      	adds	r3, r7, #7
     7d6:	781a      	ldrb	r2, [r3, #0]
     7d8:	231f      	movs	r3, #31
     7da:	4013      	ands	r3, r2
     7dc:	2201      	movs	r2, #1
     7de:	1c11      	adds	r1, r2, #0
     7e0:	4099      	lsls	r1, r3
     7e2:	1c0b      	adds	r3, r1, #0
     7e4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     7e6:	1dbb      	adds	r3, r7, #6
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	2b00      	cmp	r3, #0
     7ec:	d003      	beq.n	7f6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     7ee:	68fb      	ldr	r3, [r7, #12]
     7f0:	68ba      	ldr	r2, [r7, #8]
     7f2:	619a      	str	r2, [r3, #24]
     7f4:	e002      	b.n	7fc <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	68ba      	ldr	r2, [r7, #8]
     7fa:	615a      	str	r2, [r3, #20]
	}
}
     7fc:	46bd      	mov	sp, r7
     7fe:	b004      	add	sp, #16
     800:	bd80      	pop	{r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00000791 	.word	0x00000791

00000808 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     808:	b580      	push	{r7, lr}
     80a:	b082      	sub	sp, #8
     80c:	af00      	add	r7, sp, #0
     80e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     810:	687b      	ldr	r3, [r7, #4]
     812:	2200      	movs	r2, #0
     814:	701a      	strb	r2, [r3, #0]
}
     816:	46bd      	mov	sp, r7
     818:	b002      	add	sp, #8
     81a:	bd80      	pop	{r7, pc}

0000081c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	1c02      	adds	r2, r0, #0
     824:	6039      	str	r1, [r7, #0]
     826:	1dfb      	adds	r3, r7, #7
     828:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     82a:	1dfb      	adds	r3, r7, #7
     82c:	781b      	ldrb	r3, [r3, #0]
     82e:	2b01      	cmp	r3, #1
     830:	d00a      	beq.n	848 <system_apb_clock_set_mask+0x2c>
     832:	2b02      	cmp	r3, #2
     834:	d00f      	beq.n	856 <system_apb_clock_set_mask+0x3a>
     836:	2b00      	cmp	r3, #0
     838:	d114      	bne.n	864 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     83a:	4b0e      	ldr	r3, [pc, #56]	; (874 <system_apb_clock_set_mask+0x58>)
     83c:	4a0d      	ldr	r2, [pc, #52]	; (874 <system_apb_clock_set_mask+0x58>)
     83e:	6991      	ldr	r1, [r2, #24]
     840:	683a      	ldr	r2, [r7, #0]
     842:	430a      	orrs	r2, r1
     844:	619a      	str	r2, [r3, #24]
			break;
     846:	e00f      	b.n	868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     848:	4b0a      	ldr	r3, [pc, #40]	; (874 <system_apb_clock_set_mask+0x58>)
     84a:	4a0a      	ldr	r2, [pc, #40]	; (874 <system_apb_clock_set_mask+0x58>)
     84c:	69d1      	ldr	r1, [r2, #28]
     84e:	683a      	ldr	r2, [r7, #0]
     850:	430a      	orrs	r2, r1
     852:	61da      	str	r2, [r3, #28]
			break;
     854:	e008      	b.n	868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <system_apb_clock_set_mask+0x58>)
     858:	4a06      	ldr	r2, [pc, #24]	; (874 <system_apb_clock_set_mask+0x58>)
     85a:	6a11      	ldr	r1, [r2, #32]
     85c:	683a      	ldr	r2, [r7, #0]
     85e:	430a      	orrs	r2, r1
     860:	621a      	str	r2, [r3, #32]
			break;
     862:	e001      	b.n	868 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     864:	2317      	movs	r3, #23
     866:	e000      	b.n	86a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     868:	2300      	movs	r3, #0
}
     86a:	1c18      	adds	r0, r3, #0
     86c:	46bd      	mov	sp, r7
     86e:	b002      	add	sp, #8
     870:	bd80      	pop	{r7, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	40000400 	.word	0x40000400

00000878 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     878:	b580      	push	{r7, lr}
     87a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     87c:	4b05      	ldr	r3, [pc, #20]	; (894 <system_is_debugger_present+0x1c>)
     87e:	789b      	ldrb	r3, [r3, #2]
     880:	b2db      	uxtb	r3, r3
     882:	1c1a      	adds	r2, r3, #0
     884:	2302      	movs	r3, #2
     886:	4013      	ands	r3, r2
     888:	1e5a      	subs	r2, r3, #1
     88a:	4193      	sbcs	r3, r2
     88c:	b2db      	uxtb	r3, r3
}
     88e:	1c18      	adds	r0, r3, #0
     890:	46bd      	mov	sp, r7
     892:	bd80      	pop	{r7, pc}
     894:	41002000 	.word	0x41002000

00000898 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     898:	b580      	push	{r7, lr}
     89a:	b084      	sub	sp, #16
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	681b      	ldr	r3, [r3, #0]
     8a4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	7e1b      	ldrb	r3, [r3, #24]
     8aa:	b2db      	uxtb	r3, r3
     8ac:	1c1a      	adds	r2, r3, #0
     8ae:	2302      	movs	r3, #2
     8b0:	4013      	ands	r3, r2
     8b2:	1e5a      	subs	r2, r3, #1
     8b4:	4193      	sbcs	r3, r2
     8b6:	b2db      	uxtb	r3, r3
}
     8b8:	1c18      	adds	r0, r3, #0
     8ba:	46bd      	mov	sp, r7
     8bc:	b004      	add	sp, #16
     8be:	bd80      	pop	{r7, pc}

000008c0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b084      	sub	sp, #16
     8c4:	af00      	add	r7, sp, #0
     8c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8ce:	68fb      	ldr	r3, [r7, #12]
     8d0:	7e1b      	ldrb	r3, [r3, #24]
     8d2:	b2db      	uxtb	r3, r3
     8d4:	1c1a      	adds	r2, r3, #0
     8d6:	2301      	movs	r3, #1
     8d8:	4013      	ands	r3, r2
     8da:	1e5a      	subs	r2, r3, #1
     8dc:	4193      	sbcs	r3, r2
     8de:	b2db      	uxtb	r3, r3
}
     8e0:	1c18      	adds	r0, r3, #0
     8e2:	46bd      	mov	sp, r7
     8e4:	b004      	add	sp, #16
     8e6:	bd80      	pop	{r7, pc}

000008e8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b084      	sub	sp, #16
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	681b      	ldr	r3, [r3, #0]
     8f4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	7e1b      	ldrb	r3, [r3, #24]
     8fa:	b2db      	uxtb	r3, r3
     8fc:	1c1a      	adds	r2, r3, #0
     8fe:	2304      	movs	r3, #4
     900:	4013      	ands	r3, r2
     902:	1e5a      	subs	r2, r3, #1
     904:	4193      	sbcs	r3, r2
     906:	b2db      	uxtb	r3, r3
}
     908:	1c18      	adds	r0, r3, #0
     90a:	46bd      	mov	sp, r7
     90c:	b004      	add	sp, #16
     90e:	bd80      	pop	{r7, pc}

00000910 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     910:	b580      	push	{r7, lr}
     912:	b084      	sub	sp, #16
     914:	af00      	add	r7, sp, #0
     916:	6078      	str	r0, [r7, #4]
     918:	1c0a      	adds	r2, r1, #0
     91a:	1cbb      	adds	r3, r7, #2
     91c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     91e:	687b      	ldr	r3, [r7, #4]
     920:	681b      	ldr	r3, [r3, #0]
     922:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     924:	687b      	ldr	r3, [r7, #4]
     926:	1c18      	adds	r0, r3, #0
     928:	4b0a      	ldr	r3, [pc, #40]	; (954 <spi_write+0x44>)
     92a:	4798      	blx	r3
     92c:	1c03      	adds	r3, r0, #0
     92e:	2201      	movs	r2, #1
     930:	4053      	eors	r3, r2
     932:	b2db      	uxtb	r3, r3
     934:	2b00      	cmp	r3, #0
     936:	d001      	beq.n	93c <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     938:	2305      	movs	r3, #5
     93a:	e006      	b.n	94a <spi_write+0x3a>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     93c:	1cbb      	adds	r3, r7, #2
     93e:	881b      	ldrh	r3, [r3, #0]
     940:	05db      	lsls	r3, r3, #23
     942:	0dda      	lsrs	r2, r3, #23
     944:	68fb      	ldr	r3, [r7, #12]
     946:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     948:	2300      	movs	r3, #0
}
     94a:	1c18      	adds	r0, r3, #0
     94c:	46bd      	mov	sp, r7
     94e:	b004      	add	sp, #16
     950:	bd80      	pop	{r7, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	000008c1 	.word	0x000008c1

00000958 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     958:	b580      	push	{r7, lr}
     95a:	b084      	sub	sp, #16
     95c:	af00      	add	r7, sp, #0
     95e:	6078      	str	r0, [r7, #4]
     960:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     962:	687b      	ldr	r3, [r7, #4]
     964:	681b      	ldr	r3, [r3, #0]
     966:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     968:	687b      	ldr	r3, [r7, #4]
     96a:	1c18      	adds	r0, r3, #0
     96c:	4b1d      	ldr	r3, [pc, #116]	; (9e4 <spi_read+0x8c>)
     96e:	4798      	blx	r3
     970:	1c03      	adds	r3, r0, #0
     972:	2201      	movs	r2, #1
     974:	4053      	eors	r3, r2
     976:	b2db      	uxtb	r3, r3
     978:	2b00      	cmp	r3, #0
     97a:	d001      	beq.n	980 <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     97c:	2310      	movs	r3, #16
     97e:	e02c      	b.n	9da <spi_read+0x82>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     980:	1c3b      	adds	r3, r7, #0
     982:	330f      	adds	r3, #15
     984:	2200      	movs	r2, #0
     986:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     988:	68bb      	ldr	r3, [r7, #8]
     98a:	8b5b      	ldrh	r3, [r3, #26]
     98c:	b29b      	uxth	r3, r3
     98e:	1c1a      	adds	r2, r3, #0
     990:	2304      	movs	r3, #4
     992:	4013      	ands	r3, r2
     994:	d00b      	beq.n	9ae <spi_read+0x56>
		retval = STATUS_ERR_OVERFLOW;
     996:	1c3b      	adds	r3, r7, #0
     998:	330f      	adds	r3, #15
     99a:	221e      	movs	r2, #30
     99c:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     99e:	68bb      	ldr	r3, [r7, #8]
     9a0:	8b5b      	ldrh	r3, [r3, #26]
     9a2:	b29b      	uxth	r3, r3
     9a4:	2204      	movs	r2, #4
     9a6:	4313      	orrs	r3, r2
     9a8:	b29a      	uxth	r2, r3
     9aa:	68bb      	ldr	r3, [r7, #8]
     9ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9ae:	687b      	ldr	r3, [r7, #4]
     9b0:	799b      	ldrb	r3, [r3, #6]
     9b2:	2b01      	cmp	r3, #1
     9b4:	d108      	bne.n	9c8 <spi_read+0x70>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9b6:	68bb      	ldr	r3, [r7, #8]
     9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9ba:	b29b      	uxth	r3, r3
     9bc:	05db      	lsls	r3, r3, #23
     9be:	0ddb      	lsrs	r3, r3, #23
     9c0:	b29a      	uxth	r2, r3
     9c2:	683b      	ldr	r3, [r7, #0]
     9c4:	801a      	strh	r2, [r3, #0]
     9c6:	e005      	b.n	9d4 <spi_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     9c8:	68bb      	ldr	r3, [r7, #8]
     9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9cc:	b2db      	uxtb	r3, r3
     9ce:	1c1a      	adds	r2, r3, #0
     9d0:	683b      	ldr	r3, [r7, #0]
     9d2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     9d4:	1c3b      	adds	r3, r7, #0
     9d6:	330f      	adds	r3, #15
     9d8:	781b      	ldrb	r3, [r3, #0]
}
     9da:	1c18      	adds	r0, r3, #0
     9dc:	46bd      	mov	sp, r7
     9de:	b004      	add	sp, #16
     9e0:	bd80      	pop	{r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	000008e9 	.word	0x000008e9

000009e8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     9e8:	b590      	push	{r4, r7, lr}
     9ea:	b093      	sub	sp, #76	; 0x4c
     9ec:	af00      	add	r7, sp, #0
     9ee:	6078      	str	r0, [r7, #4]
     9f0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9f2:	687b      	ldr	r3, [r7, #4]
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     9f8:	687b      	ldr	r3, [r7, #4]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     9fe:	1c3b      	adds	r3, r7, #0
     a00:	331c      	adds	r3, #28
     a02:	1c18      	adds	r0, r3, #0
     a04:	4b76      	ldr	r3, [pc, #472]	; (be0 <_spi_set_config+0x1f8>)
     a06:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a08:	1c3b      	adds	r3, r7, #0
     a0a:	331c      	adds	r3, #28
     a0c:	2200      	movs	r2, #0
     a0e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     a10:	683b      	ldr	r3, [r7, #0]
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	2b00      	cmp	r3, #0
     a16:	d103      	bne.n	a20 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a18:	1c3b      	adds	r3, r7, #0
     a1a:	331c      	adds	r3, #28
     a1c:	2200      	movs	r2, #0
     a1e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     a20:	683b      	ldr	r3, [r7, #0]
     a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     a24:	1c3b      	adds	r3, r7, #0
     a26:	330c      	adds	r3, #12
     a28:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     a2a:	683b      	ldr	r3, [r7, #0]
     a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     a2e:	1c3b      	adds	r3, r7, #0
     a30:	330c      	adds	r3, #12
     a32:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     a34:	683b      	ldr	r3, [r7, #0]
     a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     a38:	1c3b      	adds	r3, r7, #0
     a3a:	330c      	adds	r3, #12
     a3c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     a3e:	683b      	ldr	r3, [r7, #0]
     a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     a42:	1c3b      	adds	r3, r7, #0
     a44:	330c      	adds	r3, #12
     a46:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a48:	1c3b      	adds	r3, r7, #0
     a4a:	3347      	adds	r3, #71	; 0x47
     a4c:	2200      	movs	r2, #0
     a4e:	701a      	strb	r2, [r3, #0]
     a50:	e02c      	b.n	aac <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a52:	1c3b      	adds	r3, r7, #0
     a54:	3347      	adds	r3, #71	; 0x47
     a56:	781a      	ldrb	r2, [r3, #0]
     a58:	1c3b      	adds	r3, r7, #0
     a5a:	330c      	adds	r3, #12
     a5c:	0092      	lsls	r2, r2, #2
     a5e:	58d3      	ldr	r3, [r2, r3]
     a60:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a64:	2b00      	cmp	r3, #0
     a66:	d109      	bne.n	a7c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     a6a:	1c3b      	adds	r3, r7, #0
     a6c:	3347      	adds	r3, #71	; 0x47
     a6e:	781b      	ldrb	r3, [r3, #0]
     a70:	1c10      	adds	r0, r2, #0
     a72:	1c19      	adds	r1, r3, #0
     a74:	4b5b      	ldr	r3, [pc, #364]	; (be4 <_spi_set_config+0x1fc>)
     a76:	4798      	blx	r3
     a78:	1c03      	adds	r3, r0, #0
     a7a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a7e:	3301      	adds	r3, #1
     a80:	d00d      	beq.n	a9e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a84:	b2da      	uxtb	r2, r3
     a86:	1c3b      	adds	r3, r7, #0
     a88:	331c      	adds	r3, #28
     a8a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     a8e:	0c1b      	lsrs	r3, r3, #16
     a90:	b2da      	uxtb	r2, r3
     a92:	1c3b      	adds	r3, r7, #0
     a94:	331c      	adds	r3, #28
     a96:	1c10      	adds	r0, r2, #0
     a98:	1c19      	adds	r1, r3, #0
     a9a:	4b53      	ldr	r3, [pc, #332]	; (be8 <_spi_set_config+0x200>)
     a9c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9e:	1c3b      	adds	r3, r7, #0
     aa0:	3347      	adds	r3, #71	; 0x47
     aa2:	781a      	ldrb	r2, [r3, #0]
     aa4:	1c3b      	adds	r3, r7, #0
     aa6:	3347      	adds	r3, #71	; 0x47
     aa8:	3201      	adds	r2, #1
     aaa:	701a      	strb	r2, [r3, #0]
     aac:	1c3b      	adds	r3, r7, #0
     aae:	3347      	adds	r3, #71	; 0x47
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	2b03      	cmp	r3, #3
     ab4:	d9cd      	bls.n	a52 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     ab6:	683b      	ldr	r3, [r7, #0]
     ab8:	781a      	ldrb	r2, [r3, #0]
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     abe:	683b      	ldr	r3, [r7, #0]
     ac0:	7c1a      	ldrb	r2, [r3, #16]
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     ac6:	683b      	ldr	r3, [r7, #0]
     ac8:	7c9a      	ldrb	r2, [r3, #18]
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ace:	683b      	ldr	r3, [r7, #0]
     ad0:	7d1a      	ldrb	r2, [r3, #20]
     ad2:	687b      	ldr	r3, [r7, #4]
     ad4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ad6:	1c3b      	adds	r3, r7, #0
     ad8:	330a      	adds	r3, #10
     ada:	2200      	movs	r2, #0
     adc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     ade:	2300      	movs	r3, #0
     ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     ae2:	2300      	movs	r3, #0
     ae4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     ae6:	683b      	ldr	r3, [r7, #0]
     ae8:	781b      	ldrb	r3, [r3, #0]
     aea:	2b01      	cmp	r3, #1
     aec:	d12b      	bne.n	b46 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	681b      	ldr	r3, [r3, #0]
     af2:	1c18      	adds	r0, r3, #0
     af4:	4b3d      	ldr	r3, [pc, #244]	; (bec <_spi_set_config+0x204>)
     af6:	4798      	blx	r3
     af8:	1c03      	adds	r3, r0, #0
     afa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     afe:	3314      	adds	r3, #20
     b00:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b04:	b2db      	uxtb	r3, r3
     b06:	1c18      	adds	r0, r3, #0
     b08:	4b39      	ldr	r3, [pc, #228]	; (bf0 <_spi_set_config+0x208>)
     b0a:	4798      	blx	r3
     b0c:	1c03      	adds	r3, r0, #0
     b0e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     b10:	683b      	ldr	r3, [r7, #0]
     b12:	6999      	ldr	r1, [r3, #24]
     b14:	1c3c      	adds	r4, r7, #0
     b16:	3423      	adds	r4, #35	; 0x23
     b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b1a:	1c3b      	adds	r3, r7, #0
     b1c:	330a      	adds	r3, #10
     b1e:	1c08      	adds	r0, r1, #0
     b20:	1c11      	adds	r1, r2, #0
     b22:	1c1a      	adds	r2, r3, #0
     b24:	4b33      	ldr	r3, [pc, #204]	; (bf4 <_spi_set_config+0x20c>)
     b26:	4798      	blx	r3
     b28:	1c03      	adds	r3, r0, #0
     b2a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     b2c:	1c3b      	adds	r3, r7, #0
     b2e:	3323      	adds	r3, #35	; 0x23
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	2b00      	cmp	r3, #0
     b34:	d001      	beq.n	b3a <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     b36:	2317      	movs	r3, #23
     b38:	e04e      	b.n	bd8 <_spi_set_config+0x1f0>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     b3a:	1c3b      	adds	r3, r7, #0
     b3c:	330a      	adds	r3, #10
     b3e:	881b      	ldrh	r3, [r3, #0]
     b40:	b2da      	uxtb	r2, r3
     b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b44:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     b46:	683b      	ldr	r3, [r7, #0]
     b48:	685b      	ldr	r3, [r3, #4]
     b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b4c:	4313      	orrs	r3, r2
     b4e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     b50:	683b      	ldr	r3, [r7, #0]
     b52:	689b      	ldr	r3, [r3, #8]
     b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b56:	4313      	orrs	r3, r2
     b58:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     b5a:	683b      	ldr	r3, [r7, #0]
     b5c:	68db      	ldr	r3, [r3, #12]
     b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     b60:	4313      	orrs	r3, r2
     b62:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     b64:	683b      	ldr	r3, [r7, #0]
     b66:	7c1b      	ldrb	r3, [r3, #16]
     b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
     b6a:	4313      	orrs	r3, r2
     b6c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     b6e:	683b      	ldr	r3, [r7, #0]
     b70:	7c5b      	ldrb	r3, [r3, #17]
     b72:	2b00      	cmp	r3, #0
     b74:	d104      	bne.n	b80 <_spi_set_config+0x198>
     b76:	4b20      	ldr	r3, [pc, #128]	; (bf8 <_spi_set_config+0x210>)
     b78:	4798      	blx	r3
     b7a:	1c03      	adds	r3, r0, #0
     b7c:	2b00      	cmp	r3, #0
     b7e:	d003      	beq.n	b88 <_spi_set_config+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     b82:	2280      	movs	r2, #128	; 0x80
     b84:	4313      	orrs	r3, r2
     b86:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     b88:	683b      	ldr	r3, [r7, #0]
     b8a:	7c9b      	ldrb	r3, [r3, #18]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d004      	beq.n	b9a <_spi_set_config+0x1b2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     b92:	2280      	movs	r2, #128	; 0x80
     b94:	0292      	lsls	r2, r2, #10
     b96:	4313      	orrs	r3, r2
     b98:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	7cdb      	ldrb	r3, [r3, #19]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d004      	beq.n	bac <_spi_set_config+0x1c4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ba4:	2280      	movs	r2, #128	; 0x80
     ba6:	0092      	lsls	r2, r2, #2
     ba8:	4313      	orrs	r3, r2
     baa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     bac:	683b      	ldr	r3, [r7, #0]
     bae:	7d1b      	ldrb	r3, [r3, #20]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d004      	beq.n	bbe <_spi_set_config+0x1d6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bb6:	2280      	movs	r2, #128	; 0x80
     bb8:	0192      	lsls	r2, r2, #6
     bba:	4313      	orrs	r3, r2
     bbc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     bc4:	431a      	orrs	r2, r3
     bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bc8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bcc:	685a      	ldr	r2, [r3, #4]
     bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bd0:	431a      	orrs	r2, r3
     bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bd4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     bd6:	2300      	movs	r3, #0
}
     bd8:	1c18      	adds	r0, r3, #0
     bda:	46bd      	mov	sp, r7
     bdc:	b013      	add	sp, #76	; 0x4c
     bde:	bd90      	pop	{r4, r7, pc}
     be0:	0000068d 	.word	0x0000068d
     be4:	00000485 	.word	0x00000485
     be8:	00001ba1 	.word	0x00001ba1
     bec:	00000641 	.word	0x00000641
     bf0:	000019d9 	.word	0x000019d9
     bf4:	0000037d 	.word	0x0000037d
     bf8:	00000879 	.word	0x00000879

00000bfc <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     bfc:	b590      	push	{r4, r7, lr}
     bfe:	b091      	sub	sp, #68	; 0x44
     c00:	af00      	add	r7, sp, #0
     c02:	6078      	str	r0, [r7, #4]
     c04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     c16:	1c3b      	adds	r3, r7, #0
     c18:	3310      	adds	r3, #16
     c1a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     c1c:	683b      	ldr	r3, [r7, #0]
     c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     c20:	1c3b      	adds	r3, r7, #0
     c22:	3310      	adds	r3, #16
     c24:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     c26:	683b      	ldr	r3, [r7, #0]
     c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     c2a:	1c3b      	adds	r3, r7, #0
     c2c:	3310      	adds	r3, #16
     c2e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     c30:	683b      	ldr	r3, [r7, #0]
     c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     c34:	1c3b      	adds	r3, r7, #0
     c36:	3310      	adds	r3, #16
     c38:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c3a:	1c3b      	adds	r3, r7, #0
     c3c:	333f      	adds	r3, #63	; 0x3f
     c3e:	2200      	movs	r2, #0
     c40:	701a      	strb	r2, [r3, #0]
     c42:	e030      	b.n	ca6 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c44:	1c3b      	adds	r3, r7, #0
     c46:	333f      	adds	r3, #63	; 0x3f
     c48:	781a      	ldrb	r2, [r3, #0]
     c4a:	1c3b      	adds	r3, r7, #0
     c4c:	3310      	adds	r3, #16
     c4e:	0092      	lsls	r2, r2, #2
     c50:	58d3      	ldr	r3, [r2, r3]
     c52:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c56:	2b00      	cmp	r3, #0
     c58:	d109      	bne.n	c6e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
     c5c:	1c3b      	adds	r3, r7, #0
     c5e:	333f      	adds	r3, #63	; 0x3f
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	1c10      	adds	r0, r2, #0
     c64:	1c19      	adds	r1, r3, #0
     c66:	4b56      	ldr	r3, [pc, #344]	; (dc0 <_spi_check_config+0x1c4>)
     c68:	4798      	blx	r3
     c6a:	1c03      	adds	r3, r0, #0
     c6c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c70:	3301      	adds	r3, #1
     c72:	d100      	bne.n	c76 <_spi_check_config+0x7a>
			continue;
     c74:	e010      	b.n	c98 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
     c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c78:	041b      	lsls	r3, r3, #16
     c7a:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c7e:	0c1b      	lsrs	r3, r3, #16
     c80:	b2db      	uxtb	r3, r3
     c82:	1c18      	adds	r0, r3, #0
     c84:	4b4f      	ldr	r3, [pc, #316]	; (dc4 <_spi_check_config+0x1c8>)
     c86:	4798      	blx	r3
     c88:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     c8a:	429c      	cmp	r4, r3
     c8c:	d004      	beq.n	c98 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	2200      	movs	r2, #0
     c92:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     c94:	231c      	movs	r3, #28
     c96:	e08f      	b.n	db8 <_spi_check_config+0x1bc>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c98:	1c3b      	adds	r3, r7, #0
     c9a:	333f      	adds	r3, #63	; 0x3f
     c9c:	781a      	ldrb	r2, [r3, #0]
     c9e:	1c3b      	adds	r3, r7, #0
     ca0:	333f      	adds	r3, #63	; 0x3f
     ca2:	3201      	adds	r2, #1
     ca4:	701a      	strb	r2, [r3, #0]
     ca6:	1c3b      	adds	r3, r7, #0
     ca8:	333f      	adds	r3, #63	; 0x3f
     caa:	781b      	ldrb	r3, [r3, #0]
     cac:	2b03      	cmp	r3, #3
     cae:	d9c9      	bls.n	c44 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     cb0:	2013      	movs	r0, #19
     cb2:	4b45      	ldr	r3, [pc, #276]	; (dc8 <_spi_check_config+0x1cc>)
     cb4:	4798      	blx	r3
     cb6:	1c03      	adds	r3, r0, #0
     cb8:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     cba:	2300      	movs	r3, #0
     cbc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     cbe:	2300      	movs	r3, #0
     cc0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     cc2:	683b      	ldr	r3, [r7, #0]
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b01      	cmp	r3, #1
     cc8:	d123      	bne.n	d12 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     cca:	683b      	ldr	r3, [r7, #0]
     ccc:	6999      	ldr	r1, [r3, #24]
     cce:	1c3c      	adds	r4, r7, #0
     cd0:	3423      	adds	r4, #35	; 0x23
     cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     cd4:	1c3b      	adds	r3, r7, #0
     cd6:	330e      	adds	r3, #14
     cd8:	1c08      	adds	r0, r1, #0
     cda:	1c11      	adds	r1, r2, #0
     cdc:	1c1a      	adds	r2, r3, #0
     cde:	4b3b      	ldr	r3, [pc, #236]	; (dcc <_spi_check_config+0x1d0>)
     ce0:	4798      	blx	r3
     ce2:	1c03      	adds	r3, r0, #0
     ce4:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     ce6:	1c3b      	adds	r3, r7, #0
     ce8:	3323      	adds	r3, #35	; 0x23
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	2b00      	cmp	r3, #0
     cee:	d001      	beq.n	cf4 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     cf0:	2317      	movs	r3, #23
     cf2:	e061      	b.n	db8 <_spi_check_config+0x1bc>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cf6:	7b1b      	ldrb	r3, [r3, #12]
     cf8:	b2da      	uxtb	r2, r3
     cfa:	1c3b      	adds	r3, r7, #0
     cfc:	330e      	adds	r3, #14
     cfe:	881b      	ldrh	r3, [r3, #0]
     d00:	b2db      	uxtb	r3, r3
     d02:	429a      	cmp	r2, r3
     d04:	d001      	beq.n	d0a <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     d06:	231c      	movs	r3, #28
     d08:	e056      	b.n	db8 <_spi_check_config+0x1bc>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d0c:	220c      	movs	r2, #12
     d0e:	4313      	orrs	r3, r2
     d10:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	685b      	ldr	r3, [r3, #4]
     d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     d18:	4313      	orrs	r3, r2
     d1a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	689b      	ldr	r3, [r3, #8]
     d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     d22:	4313      	orrs	r3, r2
     d24:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     d26:	683b      	ldr	r3, [r7, #0]
     d28:	68db      	ldr	r3, [r3, #12]
     d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     d2c:	4313      	orrs	r3, r2
     d2e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
     d30:	683b      	ldr	r3, [r7, #0]
     d32:	7c1b      	ldrb	r3, [r3, #16]
     d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     d36:	4313      	orrs	r3, r2
     d38:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
     d3a:	683b      	ldr	r3, [r7, #0]
     d3c:	7c5b      	ldrb	r3, [r3, #17]
     d3e:	2b00      	cmp	r3, #0
     d40:	d003      	beq.n	d4a <_spi_check_config+0x14e>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d44:	2280      	movs	r2, #128	; 0x80
     d46:	4313      	orrs	r3, r2
     d48:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
     d4a:	683b      	ldr	r3, [r7, #0]
     d4c:	7c9b      	ldrb	r3, [r3, #18]
     d4e:	2b00      	cmp	r3, #0
     d50:	d004      	beq.n	d5c <_spi_check_config+0x160>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d54:	2280      	movs	r2, #128	; 0x80
     d56:	0292      	lsls	r2, r2, #10
     d58:	4313      	orrs	r3, r2
     d5a:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     d5c:	683b      	ldr	r3, [r7, #0]
     d5e:	7cdb      	ldrb	r3, [r3, #19]
     d60:	2b00      	cmp	r3, #0
     d62:	d004      	beq.n	d6e <_spi_check_config+0x172>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d66:	2280      	movs	r2, #128	; 0x80
     d68:	0092      	lsls	r2, r2, #2
     d6a:	4313      	orrs	r3, r2
     d6c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     d6e:	683b      	ldr	r3, [r7, #0]
     d70:	7d1b      	ldrb	r3, [r3, #20]
     d72:	2b00      	cmp	r3, #0
     d74:	d004      	beq.n	d80 <_spi_check_config+0x184>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d78:	2280      	movs	r2, #128	; 0x80
     d7a:	0192      	lsls	r2, r2, #6
     d7c:	4313      	orrs	r3, r2
     d7e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d82:	2202      	movs	r2, #2
     d84:	4313      	orrs	r3, r2
     d86:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d8a:	681a      	ldr	r2, [r3, #0]
     d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d8e:	429a      	cmp	r2, r3
     d90:	d10e      	bne.n	db0 <_spi_check_config+0x1b4>
			spi_module->CTRLB.reg == ctrlb) {
     d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d94:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     d98:	429a      	cmp	r2, r3
     d9a:	d109      	bne.n	db0 <_spi_check_config+0x1b4>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     d9c:	683b      	ldr	r3, [r7, #0]
     d9e:	781a      	ldrb	r2, [r3, #0]
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
     da4:	683b      	ldr	r3, [r7, #0]
     da6:	7c1a      	ldrb	r2, [r3, #16]
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
     dac:	2300      	movs	r3, #0
     dae:	e003      	b.n	db8 <_spi_check_config+0x1bc>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	2200      	movs	r2, #0
     db4:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
     db6:	231c      	movs	r3, #28
}
     db8:	1c18      	adds	r0, r3, #0
     dba:	46bd      	mov	sp, r7
     dbc:	b011      	add	sp, #68	; 0x44
     dbe:	bd90      	pop	{r4, r7, pc}
     dc0:	00000485 	.word	0x00000485
     dc4:	00000715 	.word	0x00000715
     dc8:	000019d9 	.word	0x000019d9
     dcc:	0000037d 	.word	0x0000037d

00000dd0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	b08a      	sub	sp, #40	; 0x28
     dd4:	af00      	add	r7, sp, #0
     dd6:	60f8      	str	r0, [r7, #12]
     dd8:	60b9      	str	r1, [r7, #8]
     dda:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     ddc:	68fb      	ldr	r3, [r7, #12]
     dde:	68ba      	ldr	r2, [r7, #8]
     de0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dea:	681a      	ldr	r2, [r3, #0]
     dec:	2302      	movs	r3, #2
     dee:	4013      	ands	r3, r2
     df0:	d007      	beq.n	e02 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
     df2:	68fa      	ldr	r2, [r7, #12]
     df4:	687b      	ldr	r3, [r7, #4]
     df6:	1c10      	adds	r0, r2, #0
     df8:	1c19      	adds	r1, r3, #0
     dfa:	4b2a      	ldr	r3, [pc, #168]	; (ea4 <spi_init+0xd4>)
     dfc:	4798      	blx	r3
     dfe:	1c03      	adds	r3, r0, #0
     e00:	e04c      	b.n	e9c <spi_init+0xcc>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e04:	681a      	ldr	r2, [r3, #0]
     e06:	2301      	movs	r3, #1
     e08:	4013      	ands	r3, r2
     e0a:	d001      	beq.n	e10 <spi_init+0x40>
		return STATUS_BUSY;
     e0c:	2305      	movs	r3, #5
     e0e:	e045      	b.n	e9c <spi_init+0xcc>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e10:	68fb      	ldr	r3, [r7, #12]
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	1c18      	adds	r0, r3, #0
     e16:	4b24      	ldr	r3, [pc, #144]	; (ea8 <spi_init+0xd8>)
     e18:	4798      	blx	r3
     e1a:	1c03      	adds	r3, r0, #0
     e1c:	623b      	str	r3, [r7, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e1e:	6a3b      	ldr	r3, [r7, #32]
     e20:	3302      	adds	r3, #2
     e22:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e24:	6a3b      	ldr	r3, [r7, #32]
     e26:	3314      	adds	r3, #20
     e28:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e2a:	69fb      	ldr	r3, [r7, #28]
     e2c:	2201      	movs	r2, #1
     e2e:	1c11      	adds	r1, r2, #0
     e30:	4099      	lsls	r1, r3
     e32:	1c0b      	adds	r3, r1, #0
     e34:	2002      	movs	r0, #2
     e36:	1c19      	adds	r1, r3, #0
     e38:	4b1c      	ldr	r3, [pc, #112]	; (eac <spi_init+0xdc>)
     e3a:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     e3c:	1c3b      	adds	r3, r7, #0
     e3e:	3314      	adds	r3, #20
     e40:	1c18      	adds	r0, r3, #0
     e42:	4b1b      	ldr	r3, [pc, #108]	; (eb0 <spi_init+0xe0>)
     e44:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     e46:	687a      	ldr	r2, [r7, #4]
     e48:	2324      	movs	r3, #36	; 0x24
     e4a:	5cd2      	ldrb	r2, [r2, r3]
     e4c:	1c3b      	adds	r3, r7, #0
     e4e:	3314      	adds	r3, #20
     e50:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e52:	69bb      	ldr	r3, [r7, #24]
     e54:	b2da      	uxtb	r2, r3
     e56:	1c3b      	adds	r3, r7, #0
     e58:	3314      	adds	r3, #20
     e5a:	1c10      	adds	r0, r2, #0
     e5c:	1c19      	adds	r1, r3, #0
     e5e:	4b15      	ldr	r3, [pc, #84]	; (eb4 <spi_init+0xe4>)
     e60:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e62:	69bb      	ldr	r3, [r7, #24]
     e64:	b2db      	uxtb	r3, r3
     e66:	1c18      	adds	r0, r3, #0
     e68:	4b13      	ldr	r3, [pc, #76]	; (eb8 <spi_init+0xe8>)
     e6a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e6c:	687a      	ldr	r2, [r7, #4]
     e6e:	2324      	movs	r3, #36	; 0x24
     e70:	5cd3      	ldrb	r3, [r2, r3]
     e72:	1c18      	adds	r0, r3, #0
     e74:	2100      	movs	r1, #0
     e76:	4b11      	ldr	r3, [pc, #68]	; (ebc <spi_init+0xec>)
     e78:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	2b01      	cmp	r3, #1
     e80:	d105      	bne.n	e8e <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	220c      	movs	r2, #12
     e88:	431a      	orrs	r2, r3
     e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e8c:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     e8e:	68fa      	ldr	r2, [r7, #12]
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	1c10      	adds	r0, r2, #0
     e94:	1c19      	adds	r1, r3, #0
     e96:	4b0a      	ldr	r3, [pc, #40]	; (ec0 <spi_init+0xf0>)
     e98:	4798      	blx	r3
     e9a:	1c03      	adds	r3, r0, #0
}
     e9c:	1c18      	adds	r0, r3, #0
     e9e:	46bd      	mov	sp, r7
     ea0:	b00a      	add	sp, #40	; 0x28
     ea2:	bd80      	pop	{r7, pc}
     ea4:	00000bfd 	.word	0x00000bfd
     ea8:	00000641 	.word	0x00000641
     eac:	0000081d 	.word	0x0000081d
     eb0:	00000809 	.word	0x00000809
     eb4:	000018bd 	.word	0x000018bd
     eb8:	000018fd 	.word	0x000018fd
     ebc:	000003f9 	.word	0x000003f9
     ec0:	000009e9 	.word	0x000009e9

00000ec4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b086      	sub	sp, #24
     ec8:	af00      	add	r7, sp, #0
     eca:	60f8      	str	r0, [r7, #12]
     ecc:	60b9      	str	r1, [r7, #8]
     ece:	1dfb      	adds	r3, r7, #7
     ed0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     ed2:	68fb      	ldr	r3, [r7, #12]
     ed4:	795b      	ldrb	r3, [r3, #5]
     ed6:	2b01      	cmp	r3, #1
     ed8:	d001      	beq.n	ede <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
     eda:	2315      	movs	r3, #21
     edc:	e059      	b.n	f92 <spi_select_slave+0xce>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	7a1b      	ldrb	r3, [r3, #8]
     ee2:	2201      	movs	r2, #1
     ee4:	4053      	eors	r3, r2
     ee6:	b2db      	uxtb	r3, r3
     ee8:	2b00      	cmp	r3, #0
     eea:	d051      	beq.n	f90 <spi_select_slave+0xcc>
#  endif
	{
		if (select) {
     eec:	1dfb      	adds	r3, r7, #7
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d047      	beq.n	f84 <spi_select_slave+0xc0>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     ef4:	68bb      	ldr	r3, [r7, #8]
     ef6:	785b      	ldrb	r3, [r3, #1]
     ef8:	2b00      	cmp	r3, #0
     efa:	d03c      	beq.n	f76 <spi_select_slave+0xb2>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	1c18      	adds	r0, r3, #0
     f00:	4b26      	ldr	r3, [pc, #152]	; (f9c <spi_select_slave+0xd8>)
     f02:	4798      	blx	r3
     f04:	1c03      	adds	r3, r0, #0
     f06:	2201      	movs	r2, #1
     f08:	4053      	eors	r3, r2
     f0a:	b2db      	uxtb	r3, r3
     f0c:	2b00      	cmp	r3, #0
     f0e:	d007      	beq.n	f20 <spi_select_slave+0x5c>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     f10:	68bb      	ldr	r3, [r7, #8]
     f12:	781b      	ldrb	r3, [r3, #0]
     f14:	1c18      	adds	r0, r3, #0
     f16:	2101      	movs	r1, #1
     f18:	4b21      	ldr	r3, [pc, #132]	; (fa0 <spi_select_slave+0xdc>)
     f1a:	4798      	blx	r3
					return STATUS_BUSY;
     f1c:	2305      	movs	r3, #5
     f1e:	e038      	b.n	f92 <spi_select_slave+0xce>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     f20:	68bb      	ldr	r3, [r7, #8]
     f22:	781b      	ldrb	r3, [r3, #0]
     f24:	1c18      	adds	r0, r3, #0
     f26:	2100      	movs	r1, #0
     f28:	4b1d      	ldr	r3, [pc, #116]	; (fa0 <spi_select_slave+0xdc>)
     f2a:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
     f2c:	68bb      	ldr	r3, [r7, #8]
     f2e:	789b      	ldrb	r3, [r3, #2]
     f30:	68fa      	ldr	r2, [r7, #12]
     f32:	1c10      	adds	r0, r2, #0
     f34:	1c19      	adds	r1, r3, #0
     f36:	4b1b      	ldr	r3, [pc, #108]	; (fa4 <spi_select_slave+0xe0>)
     f38:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
     f3a:	68fb      	ldr	r3, [r7, #12]
     f3c:	79db      	ldrb	r3, [r3, #7]
     f3e:	2201      	movs	r2, #1
     f40:	4053      	eors	r3, r2
     f42:	b2db      	uxtb	r3, r3
     f44:	2b00      	cmp	r3, #0
     f46:	d023      	beq.n	f90 <spi_select_slave+0xcc>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     f48:	46c0      	nop			; (mov r8, r8)
     f4a:	68fb      	ldr	r3, [r7, #12]
     f4c:	1c18      	adds	r0, r3, #0
     f4e:	4b16      	ldr	r3, [pc, #88]	; (fa8 <spi_select_slave+0xe4>)
     f50:	4798      	blx	r3
     f52:	1c03      	adds	r3, r0, #0
     f54:	2201      	movs	r2, #1
     f56:	4053      	eors	r3, r2
     f58:	b2db      	uxtb	r3, r3
     f5a:	2b00      	cmp	r3, #0
     f5c:	d1f5      	bne.n	f4a <spi_select_slave+0x86>
					}
					uint16_t flush = 0;
     f5e:	1c3b      	adds	r3, r7, #0
     f60:	3316      	adds	r3, #22
     f62:	2200      	movs	r2, #0
     f64:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
     f66:	68fa      	ldr	r2, [r7, #12]
     f68:	1c3b      	adds	r3, r7, #0
     f6a:	3316      	adds	r3, #22
     f6c:	1c10      	adds	r0, r2, #0
     f6e:	1c19      	adds	r1, r3, #0
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <spi_select_slave+0xe8>)
     f72:	4798      	blx	r3
     f74:	e00c      	b.n	f90 <spi_select_slave+0xcc>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     f76:	68bb      	ldr	r3, [r7, #8]
     f78:	781b      	ldrb	r3, [r3, #0]
     f7a:	1c18      	adds	r0, r3, #0
     f7c:	2100      	movs	r1, #0
     f7e:	4b08      	ldr	r3, [pc, #32]	; (fa0 <spi_select_slave+0xdc>)
     f80:	4798      	blx	r3
     f82:	e005      	b.n	f90 <spi_select_slave+0xcc>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     f84:	68bb      	ldr	r3, [r7, #8]
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	1c18      	adds	r0, r3, #0
     f8a:	2101      	movs	r1, #1
     f8c:	4b04      	ldr	r3, [pc, #16]	; (fa0 <spi_select_slave+0xdc>)
     f8e:	4798      	blx	r3
		}
	}
	return STATUS_OK;
     f90:	2300      	movs	r3, #0
}
     f92:	1c18      	adds	r0, r3, #0
     f94:	46bd      	mov	sp, r7
     f96:	b006      	add	sp, #24
     f98:	bd80      	pop	{r7, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	000008c1 	.word	0x000008c1
     fa0:	000007b5 	.word	0x000007b5
     fa4:	00000911 	.word	0x00000911
     fa8:	000008e9 	.word	0x000008e9
     fac:	00000959 	.word	0x00000959

00000fb0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     fb0:	b590      	push	{r4, r7, lr}
     fb2:	b089      	sub	sp, #36	; 0x24
     fb4:	af00      	add	r7, sp, #0
     fb6:	60f8      	str	r0, [r7, #12]
     fb8:	60b9      	str	r1, [r7, #8]
     fba:	607a      	str	r2, [r7, #4]
     fbc:	1c1a      	adds	r2, r3, #0
     fbe:	1cbb      	adds	r3, r7, #2
     fc0:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     fc2:	1cbb      	adds	r3, r7, #2
     fc4:	881b      	ldrh	r3, [r3, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d101      	bne.n	fce <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
     fca:	2317      	movs	r3, #23
     fcc:	e0b2      	b.n	1134 <spi_transceive_buffer_wait+0x184>
	}

	if (!(module->receiver_enabled)) {
     fce:	68fb      	ldr	r3, [r7, #12]
     fd0:	79db      	ldrb	r3, [r3, #7]
     fd2:	2201      	movs	r2, #1
     fd4:	4053      	eors	r3, r2
     fd6:	b2db      	uxtb	r3, r3
     fd8:	2b00      	cmp	r3, #0
     fda:	d001      	beq.n	fe0 <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
     fdc:	231c      	movs	r3, #28
     fde:	e0a9      	b.n	1134 <spi_transceive_buffer_wait+0x184>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
     fe0:	1c3b      	adds	r3, r7, #0
     fe2:	331e      	adds	r3, #30
     fe4:	2200      	movs	r2, #0
     fe6:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
     fe8:	1c3b      	adds	r3, r7, #0
     fea:	331c      	adds	r3, #28
     fec:	2200      	movs	r2, #0
     fee:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
     ff0:	1c3b      	adds	r3, r7, #0
     ff2:	331a      	adds	r3, #26
     ff4:	1cba      	adds	r2, r7, #2
     ff6:	8812      	ldrh	r2, [r2, #0]
     ff8:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
     ffa:	e083      	b.n	1104 <spi_transceive_buffer_wait+0x154>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     ffc:	46c0      	nop			; (mov r8, r8)
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	1c18      	adds	r0, r3, #0
    1002:	4b4e      	ldr	r3, [pc, #312]	; (113c <spi_transceive_buffer_wait+0x18c>)
    1004:	4798      	blx	r3
    1006:	1c03      	adds	r3, r0, #0
    1008:	2201      	movs	r2, #1
    100a:	4053      	eors	r3, r2
    100c:	b2db      	uxtb	r3, r3
    100e:	2b00      	cmp	r3, #0
    1010:	d1f5      	bne.n	ffe <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1012:	1c3b      	adds	r3, r7, #0
    1014:	331e      	adds	r3, #30
    1016:	881b      	ldrh	r3, [r3, #0]
    1018:	1c3a      	adds	r2, r7, #0
    101a:	321e      	adds	r2, #30
    101c:	1c59      	adds	r1, r3, #1
    101e:	8011      	strh	r1, [r2, #0]
    1020:	68ba      	ldr	r2, [r7, #8]
    1022:	18d3      	adds	r3, r2, r3
    1024:	781a      	ldrb	r2, [r3, #0]
    1026:	1c3b      	adds	r3, r7, #0
    1028:	3318      	adds	r3, #24
    102a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    102c:	68fb      	ldr	r3, [r7, #12]
    102e:	799b      	ldrb	r3, [r3, #6]
    1030:	2b01      	cmp	r3, #1
    1032:	d113      	bne.n	105c <spi_transceive_buffer_wait+0xac>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1034:	1c3b      	adds	r3, r7, #0
    1036:	331e      	adds	r3, #30
    1038:	881b      	ldrh	r3, [r3, #0]
    103a:	1c3a      	adds	r2, r7, #0
    103c:	321e      	adds	r2, #30
    103e:	1c59      	adds	r1, r3, #1
    1040:	8011      	strh	r1, [r2, #0]
    1042:	68ba      	ldr	r2, [r7, #8]
    1044:	18d3      	adds	r3, r2, r3
    1046:	781b      	ldrb	r3, [r3, #0]
    1048:	021b      	lsls	r3, r3, #8
    104a:	b29a      	uxth	r2, r3
    104c:	1c3b      	adds	r3, r7, #0
    104e:	3318      	adds	r3, #24
    1050:	881b      	ldrh	r3, [r3, #0]
    1052:	4313      	orrs	r3, r2
    1054:	b29a      	uxth	r2, r3
    1056:	1c3b      	adds	r3, r7, #0
    1058:	3318      	adds	r3, #24
    105a:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    105c:	68fa      	ldr	r2, [r7, #12]
    105e:	1c3b      	adds	r3, r7, #0
    1060:	3318      	adds	r3, #24
    1062:	881b      	ldrh	r3, [r3, #0]
    1064:	1c10      	adds	r0, r2, #0
    1066:	1c19      	adds	r1, r3, #0
    1068:	4b35      	ldr	r3, [pc, #212]	; (1140 <spi_transceive_buffer_wait+0x190>)
    106a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    106c:	46c0      	nop			; (mov r8, r8)
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	1c18      	adds	r0, r3, #0
    1072:	4b34      	ldr	r3, [pc, #208]	; (1144 <spi_transceive_buffer_wait+0x194>)
    1074:	4798      	blx	r3
    1076:	1c03      	adds	r3, r0, #0
    1078:	2201      	movs	r2, #1
    107a:	4053      	eors	r3, r2
    107c:	b2db      	uxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	d1f5      	bne.n	106e <spi_transceive_buffer_wait+0xbe>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1082:	1c3b      	adds	r3, r7, #0
    1084:	3314      	adds	r3, #20
    1086:	2200      	movs	r2, #0
    1088:	801a      	strh	r2, [r3, #0]
		rx_length--;
    108a:	1c3b      	adds	r3, r7, #0
    108c:	331a      	adds	r3, #26
    108e:	881a      	ldrh	r2, [r3, #0]
    1090:	1c3b      	adds	r3, r7, #0
    1092:	331a      	adds	r3, #26
    1094:	3a01      	subs	r2, #1
    1096:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    1098:	1c3c      	adds	r4, r7, #0
    109a:	3417      	adds	r4, #23
    109c:	68fa      	ldr	r2, [r7, #12]
    109e:	1c3b      	adds	r3, r7, #0
    10a0:	3314      	adds	r3, #20
    10a2:	1c10      	adds	r0, r2, #0
    10a4:	1c19      	adds	r1, r3, #0
    10a6:	4b28      	ldr	r3, [pc, #160]	; (1148 <spi_transceive_buffer_wait+0x198>)
    10a8:	4798      	blx	r3
    10aa:	1c03      	adds	r3, r0, #0
    10ac:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    10ae:	1c3b      	adds	r3, r7, #0
    10b0:	3317      	adds	r3, #23
    10b2:	781b      	ldrb	r3, [r3, #0]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d003      	beq.n	10c0 <spi_transceive_buffer_wait+0x110>
			/* Overflow, abort */
			return retval;
    10b8:	1c3b      	adds	r3, r7, #0
    10ba:	3317      	adds	r3, #23
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	e039      	b.n	1134 <spi_transceive_buffer_wait+0x184>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    10c0:	1c3b      	adds	r3, r7, #0
    10c2:	331c      	adds	r3, #28
    10c4:	881b      	ldrh	r3, [r3, #0]
    10c6:	1c3a      	adds	r2, r7, #0
    10c8:	321c      	adds	r2, #28
    10ca:	1c59      	adds	r1, r3, #1
    10cc:	8011      	strh	r1, [r2, #0]
    10ce:	687a      	ldr	r2, [r7, #4]
    10d0:	18d3      	adds	r3, r2, r3
    10d2:	1c3a      	adds	r2, r7, #0
    10d4:	3214      	adds	r2, #20
    10d6:	8812      	ldrh	r2, [r2, #0]
    10d8:	b2d2      	uxtb	r2, r2
    10da:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10dc:	68fb      	ldr	r3, [r7, #12]
    10de:	799b      	ldrb	r3, [r3, #6]
    10e0:	2b01      	cmp	r3, #1
    10e2:	d10f      	bne.n	1104 <spi_transceive_buffer_wait+0x154>
			rx_data[rx_pos++] = (received_data >> 8);
    10e4:	1c3b      	adds	r3, r7, #0
    10e6:	331c      	adds	r3, #28
    10e8:	881b      	ldrh	r3, [r3, #0]
    10ea:	1c3a      	adds	r2, r7, #0
    10ec:	321c      	adds	r2, #28
    10ee:	1c59      	adds	r1, r3, #1
    10f0:	8011      	strh	r1, [r2, #0]
    10f2:	687a      	ldr	r2, [r7, #4]
    10f4:	18d3      	adds	r3, r2, r3
    10f6:	1c3a      	adds	r2, r7, #0
    10f8:	3214      	adds	r2, #20
    10fa:	8812      	ldrh	r2, [r2, #0]
    10fc:	0a12      	lsrs	r2, r2, #8
    10fe:	b292      	uxth	r2, r2
    1100:	b2d2      	uxtb	r2, r2
    1102:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
    1104:	1cbb      	adds	r3, r7, #2
    1106:	881b      	ldrh	r3, [r3, #0]
    1108:	1cba      	adds	r2, r7, #2
    110a:	1e59      	subs	r1, r3, #1
    110c:	8011      	strh	r1, [r2, #0]
    110e:	2b00      	cmp	r3, #0
    1110:	d000      	beq.n	1114 <spi_transceive_buffer_wait+0x164>
    1112:	e773      	b.n	ffc <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	795b      	ldrb	r3, [r3, #5]
    1118:	2b01      	cmp	r3, #1
    111a:	d10a      	bne.n	1132 <spi_transceive_buffer_wait+0x182>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    111c:	46c0      	nop			; (mov r8, r8)
    111e:	68fb      	ldr	r3, [r7, #12]
    1120:	1c18      	adds	r0, r3, #0
    1122:	4b0a      	ldr	r3, [pc, #40]	; (114c <spi_transceive_buffer_wait+0x19c>)
    1124:	4798      	blx	r3
    1126:	1c03      	adds	r3, r0, #0
    1128:	2201      	movs	r2, #1
    112a:	4053      	eors	r3, r2
    112c:	b2db      	uxtb	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	d1f5      	bne.n	111e <spi_transceive_buffer_wait+0x16e>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1132:	2300      	movs	r3, #0
}
    1134:	1c18      	adds	r0, r3, #0
    1136:	46bd      	mov	sp, r7
    1138:	b009      	add	sp, #36	; 0x24
    113a:	bd90      	pop	{r4, r7, pc}
    113c:	000008c1 	.word	0x000008c1
    1140:	00000911 	.word	0x00000911
    1144:	000008e9 	.word	0x000008e9
    1148:	00000959 	.word	0x00000959
    114c:	00000899 	.word	0x00000899

00001150 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1150:	b580      	push	{r7, lr}
    1152:	b082      	sub	sp, #8
    1154:	af00      	add	r7, sp, #0
    1156:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1158:	687b      	ldr	r3, [r7, #4]
    115a:	2201      	movs	r2, #1
    115c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    115e:	687b      	ldr	r3, [r7, #4]
    1160:	2200      	movs	r2, #0
    1162:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	2206      	movs	r2, #6
    1168:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	2200      	movs	r2, #0
    116e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	2200      	movs	r2, #0
    1174:	725a      	strb	r2, [r3, #9]
}
    1176:	46bd      	mov	sp, r7
    1178:	b002      	add	sp, #8
    117a:	bd80      	pop	{r7, pc}

0000117c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    117c:	b580      	push	{r7, lr}
    117e:	b082      	sub	sp, #8
    1180:	af00      	add	r7, sp, #0
    1182:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1184:	687b      	ldr	r3, [r7, #4]
    1186:	2203      	movs	r2, #3
    1188:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    118a:	687b      	ldr	r3, [r7, #4]
    118c:	2200      	movs	r2, #0
    118e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	2201      	movs	r2, #1
    1194:	709a      	strb	r2, [r3, #2]
}
    1196:	46bd      	mov	sp, r7
    1198:	b002      	add	sp, #8
    119a:	bd80      	pop	{r7, pc}

0000119c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	1c02      	adds	r2, r0, #0
    11a4:	1dfb      	adds	r3, r7, #7
    11a6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    11a8:	4b03      	ldr	r3, [pc, #12]	; (11b8 <system_cpu_clock_set_divider+0x1c>)
    11aa:	1dfa      	adds	r2, r7, #7
    11ac:	7812      	ldrb	r2, [r2, #0]
    11ae:	721a      	strb	r2, [r3, #8]
}
    11b0:	46bd      	mov	sp, r7
    11b2:	b002      	add	sp, #8
    11b4:	bd80      	pop	{r7, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	40000400 	.word	0x40000400

000011bc <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    11bc:	b580      	push	{r7, lr}
    11be:	b082      	sub	sp, #8
    11c0:	af00      	add	r7, sp, #0
    11c2:	1c0a      	adds	r2, r1, #0
    11c4:	1dfb      	adds	r3, r7, #7
    11c6:	1c01      	adds	r1, r0, #0
    11c8:	7019      	strb	r1, [r3, #0]
    11ca:	1dbb      	adds	r3, r7, #6
    11cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    11ce:	1dfb      	adds	r3, r7, #7
    11d0:	781b      	ldrb	r3, [r3, #0]
    11d2:	2b01      	cmp	r3, #1
    11d4:	d008      	beq.n	11e8 <system_apb_clock_set_divider+0x2c>
    11d6:	2b02      	cmp	r3, #2
    11d8:	d00b      	beq.n	11f2 <system_apb_clock_set_divider+0x36>
    11da:	2b00      	cmp	r3, #0
    11dc:	d10e      	bne.n	11fc <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    11de:	4b0b      	ldr	r3, [pc, #44]	; (120c <system_apb_clock_set_divider+0x50>)
    11e0:	1dba      	adds	r2, r7, #6
    11e2:	7812      	ldrb	r2, [r2, #0]
    11e4:	725a      	strb	r2, [r3, #9]
			break;
    11e6:	e00b      	b.n	1200 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    11e8:	4b08      	ldr	r3, [pc, #32]	; (120c <system_apb_clock_set_divider+0x50>)
    11ea:	1dba      	adds	r2, r7, #6
    11ec:	7812      	ldrb	r2, [r2, #0]
    11ee:	729a      	strb	r2, [r3, #10]
			break;
    11f0:	e006      	b.n	1200 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <system_apb_clock_set_divider+0x50>)
    11f4:	1dba      	adds	r2, r7, #6
    11f6:	7812      	ldrb	r2, [r2, #0]
    11f8:	72da      	strb	r2, [r3, #11]
			break;
    11fa:	e001      	b.n	1200 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    11fc:	2317      	movs	r3, #23
    11fe:	e000      	b.n	1202 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1200:	2300      	movs	r3, #0
}
    1202:	1c18      	adds	r0, r3, #0
    1204:	46bd      	mov	sp, r7
    1206:	b002      	add	sp, #8
    1208:	bd80      	pop	{r7, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	40000400 	.word	0x40000400

00001210 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1210:	b580      	push	{r7, lr}
    1212:	b082      	sub	sp, #8
    1214:	af00      	add	r7, sp, #0
    1216:	1c02      	adds	r2, r0, #0
    1218:	1dfb      	adds	r3, r7, #7
    121a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    121c:	4b08      	ldr	r3, [pc, #32]	; (1240 <system_flash_set_waitstates+0x30>)
    121e:	1dfa      	adds	r2, r7, #7
    1220:	7811      	ldrb	r1, [r2, #0]
    1222:	220f      	movs	r2, #15
    1224:	400a      	ands	r2, r1
    1226:	b2d1      	uxtb	r1, r2
    1228:	220f      	movs	r2, #15
    122a:	400a      	ands	r2, r1
    122c:	0052      	lsls	r2, r2, #1
    122e:	6859      	ldr	r1, [r3, #4]
    1230:	201e      	movs	r0, #30
    1232:	4381      	bics	r1, r0
    1234:	430a      	orrs	r2, r1
    1236:	605a      	str	r2, [r3, #4]
}
    1238:	46bd      	mov	sp, r7
    123a:	b002      	add	sp, #8
    123c:	bd80      	pop	{r7, pc}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	41004000 	.word	0x41004000

00001244 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1244:	b580      	push	{r7, lr}
    1246:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1248:	46c0      	nop			; (mov r8, r8)
    124a:	4b03      	ldr	r3, [pc, #12]	; (1258 <_system_dfll_wait_for_sync+0x14>)
    124c:	68da      	ldr	r2, [r3, #12]
    124e:	2310      	movs	r3, #16
    1250:	4013      	ands	r3, r2
    1252:	d0fa      	beq.n	124a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1254:	46bd      	mov	sp, r7
    1256:	bd80      	pop	{r7, pc}
    1258:	40000800 	.word	0x40000800

0000125c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    125c:	b580      	push	{r7, lr}
    125e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1260:	4a0c      	ldr	r2, [pc, #48]	; (1294 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1262:	4b0d      	ldr	r3, [pc, #52]	; (1298 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1264:	681b      	ldr	r3, [r3, #0]
    1266:	b29b      	uxth	r3, r3
    1268:	2180      	movs	r1, #128	; 0x80
    126a:	438b      	bics	r3, r1
    126c:	b29b      	uxth	r3, r3
    126e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1270:	4b0a      	ldr	r3, [pc, #40]	; (129c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1272:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1274:	4b07      	ldr	r3, [pc, #28]	; (1294 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1276:	4a08      	ldr	r2, [pc, #32]	; (1298 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1278:	6892      	ldr	r2, [r2, #8]
    127a:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    127c:	4b05      	ldr	r3, [pc, #20]	; (1294 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    127e:	4a06      	ldr	r2, [pc, #24]	; (1298 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1280:	6852      	ldr	r2, [r2, #4]
    1282:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1284:	4a03      	ldr	r2, [pc, #12]	; (1294 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1286:	4b04      	ldr	r3, [pc, #16]	; (1298 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	b29b      	uxth	r3, r3
    128c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    128e:	46bd      	mov	sp, r7
    1290:	bd80      	pop	{r7, pc}
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	40000800 	.word	0x40000800
    1298:	2000003c 	.word	0x2000003c
    129c:	00001245 	.word	0x00001245

000012a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    12a0:	b580      	push	{r7, lr}
    12a2:	b082      	sub	sp, #8
    12a4:	af00      	add	r7, sp, #0
    12a6:	1c02      	adds	r2, r0, #0
    12a8:	1dfb      	adds	r3, r7, #7
    12aa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    12ac:	1dfb      	adds	r3, r7, #7
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	2b08      	cmp	r3, #8
    12b2:	d843      	bhi.n	133c <system_clock_source_get_hz+0x9c>
    12b4:	009a      	lsls	r2, r3, #2
    12b6:	4b24      	ldr	r3, [pc, #144]	; (1348 <system_clock_source_get_hz+0xa8>)
    12b8:	18d3      	adds	r3, r2, r3
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    12be:	4b23      	ldr	r3, [pc, #140]	; (134c <system_clock_source_get_hz+0xac>)
    12c0:	691b      	ldr	r3, [r3, #16]
    12c2:	e03c      	b.n	133e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12c4:	4b22      	ldr	r3, [pc, #136]	; (1350 <system_clock_source_get_hz+0xb0>)
    12c6:	6a1b      	ldr	r3, [r3, #32]
    12c8:	0a1b      	lsrs	r3, r3, #8
    12ca:	1c1a      	adds	r2, r3, #0
    12cc:	2303      	movs	r3, #3
    12ce:	4013      	ands	r3, r2
    12d0:	b2db      	uxtb	r3, r3
    12d2:	4a20      	ldr	r2, [pc, #128]	; (1354 <system_clock_source_get_hz+0xb4>)
    12d4:	1c11      	adds	r1, r2, #0
    12d6:	40d9      	lsrs	r1, r3
    12d8:	1c0b      	adds	r3, r1, #0
    12da:	e030      	b.n	133e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    12dc:	2380      	movs	r3, #128	; 0x80
    12de:	021b      	lsls	r3, r3, #8
    12e0:	e02d      	b.n	133e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    12e2:	2380      	movs	r3, #128	; 0x80
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	e02a      	b.n	133e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    12e8:	4b18      	ldr	r3, [pc, #96]	; (134c <system_clock_source_get_hz+0xac>)
    12ea:	695b      	ldr	r3, [r3, #20]
    12ec:	e027      	b.n	133e <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12ee:	4b17      	ldr	r3, [pc, #92]	; (134c <system_clock_source_get_hz+0xac>)
    12f0:	681a      	ldr	r2, [r3, #0]
    12f2:	2302      	movs	r3, #2
    12f4:	4013      	ands	r3, r2
    12f6:	d101      	bne.n	12fc <system_clock_source_get_hz+0x5c>
			return 0;
    12f8:	2300      	movs	r3, #0
    12fa:	e020      	b.n	133e <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    12fc:	4b16      	ldr	r3, [pc, #88]	; (1358 <system_clock_source_get_hz+0xb8>)
    12fe:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1300:	4b12      	ldr	r3, [pc, #72]	; (134c <system_clock_source_get_hz+0xac>)
    1302:	681a      	ldr	r2, [r3, #0]
    1304:	2304      	movs	r3, #4
    1306:	4013      	ands	r3, r2
    1308:	d009      	beq.n	131e <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    130a:	2000      	movs	r0, #0
    130c:	4b13      	ldr	r3, [pc, #76]	; (135c <system_clock_source_get_hz+0xbc>)
    130e:	4798      	blx	r3
    1310:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    1312:	4b0e      	ldr	r3, [pc, #56]	; (134c <system_clock_source_get_hz+0xac>)
    1314:	689b      	ldr	r3, [r3, #8]
    1316:	041b      	lsls	r3, r3, #16
    1318:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    131a:	4353      	muls	r3, r2
    131c:	e00f      	b.n	133e <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    131e:	4b10      	ldr	r3, [pc, #64]	; (1360 <system_clock_source_get_hz+0xc0>)
    1320:	e00d      	b.n	133e <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1322:	4a0b      	ldr	r2, [pc, #44]	; (1350 <system_clock_source_get_hz+0xb0>)
    1324:	2350      	movs	r3, #80	; 0x50
    1326:	5cd3      	ldrb	r3, [r2, r3]
    1328:	b2db      	uxtb	r3, r3
    132a:	1c1a      	adds	r2, r3, #0
    132c:	2304      	movs	r3, #4
    132e:	4013      	ands	r3, r2
    1330:	d101      	bne.n	1336 <system_clock_source_get_hz+0x96>
			return 0;
    1332:	2300      	movs	r3, #0
    1334:	e003      	b.n	133e <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    1336:	4b05      	ldr	r3, [pc, #20]	; (134c <system_clock_source_get_hz+0xac>)
    1338:	68db      	ldr	r3, [r3, #12]
    133a:	e000      	b.n	133e <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    133c:	2300      	movs	r3, #0
	}
}
    133e:	1c18      	adds	r0, r3, #0
    1340:	46bd      	mov	sp, r7
    1342:	b002      	add	sp, #8
    1344:	bd80      	pop	{r7, pc}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	0000217c 	.word	0x0000217c
    134c:	2000003c 	.word	0x2000003c
    1350:	40000800 	.word	0x40000800
    1354:	007a1200 	.word	0x007a1200
    1358:	00001245 	.word	0x00001245
    135c:	000019d9 	.word	0x000019d9
    1360:	02dc6c00 	.word	0x02dc6c00

00001364 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1364:	b580      	push	{r7, lr}
    1366:	b084      	sub	sp, #16
    1368:	af00      	add	r7, sp, #0
    136a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    136c:	4b16      	ldr	r3, [pc, #88]	; (13c8 <system_clock_source_osc8m_set_config+0x64>)
    136e:	6a1b      	ldr	r3, [r3, #32]
    1370:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	1c1a      	adds	r2, r3, #0
    1378:	2303      	movs	r3, #3
    137a:	4013      	ands	r3, r2
    137c:	b2d9      	uxtb	r1, r3
    137e:	1c3b      	adds	r3, r7, #0
    1380:	330d      	adds	r3, #13
    1382:	2203      	movs	r2, #3
    1384:	400a      	ands	r2, r1
    1386:	7819      	ldrb	r1, [r3, #0]
    1388:	2003      	movs	r0, #3
    138a:	4381      	bics	r1, r0
    138c:	430a      	orrs	r2, r1
    138e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1390:	687b      	ldr	r3, [r7, #4]
    1392:	789a      	ldrb	r2, [r3, #2]
    1394:	1c3b      	adds	r3, r7, #0
    1396:	330c      	adds	r3, #12
    1398:	01d2      	lsls	r2, r2, #7
    139a:	7818      	ldrb	r0, [r3, #0]
    139c:	217f      	movs	r1, #127	; 0x7f
    139e:	4001      	ands	r1, r0
    13a0:	430a      	orrs	r2, r1
    13a2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	7859      	ldrb	r1, [r3, #1]
    13a8:	1c3b      	adds	r3, r7, #0
    13aa:	330c      	adds	r3, #12
    13ac:	2201      	movs	r2, #1
    13ae:	400a      	ands	r2, r1
    13b0:	0192      	lsls	r2, r2, #6
    13b2:	7819      	ldrb	r1, [r3, #0]
    13b4:	2040      	movs	r0, #64	; 0x40
    13b6:	4381      	bics	r1, r0
    13b8:	430a      	orrs	r2, r1
    13ba:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    13bc:	4b02      	ldr	r3, [pc, #8]	; (13c8 <system_clock_source_osc8m_set_config+0x64>)
    13be:	68fa      	ldr	r2, [r7, #12]
    13c0:	621a      	str	r2, [r3, #32]
}
    13c2:	46bd      	mov	sp, r7
    13c4:	b004      	add	sp, #16
    13c6:	bd80      	pop	{r7, pc}
    13c8:	40000800 	.word	0x40000800

000013cc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b082      	sub	sp, #8
    13d0:	af00      	add	r7, sp, #0
    13d2:	1c02      	adds	r2, r0, #0
    13d4:	1dfb      	adds	r3, r7, #7
    13d6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    13d8:	1dfb      	adds	r3, r7, #7
    13da:	781b      	ldrb	r3, [r3, #0]
    13dc:	2b08      	cmp	r3, #8
    13de:	d83b      	bhi.n	1458 <system_clock_source_enable+0x8c>
    13e0:	009a      	lsls	r2, r3, #2
    13e2:	4b21      	ldr	r3, [pc, #132]	; (1468 <system_clock_source_enable+0x9c>)
    13e4:	18d3      	adds	r3, r2, r3
    13e6:	681b      	ldr	r3, [r3, #0]
    13e8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    13ea:	4b20      	ldr	r3, [pc, #128]	; (146c <system_clock_source_enable+0xa0>)
    13ec:	4a1f      	ldr	r2, [pc, #124]	; (146c <system_clock_source_enable+0xa0>)
    13ee:	6a12      	ldr	r2, [r2, #32]
    13f0:	2102      	movs	r1, #2
    13f2:	430a      	orrs	r2, r1
    13f4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    13f6:	2300      	movs	r3, #0
    13f8:	e031      	b.n	145e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    13fa:	4b1c      	ldr	r3, [pc, #112]	; (146c <system_clock_source_enable+0xa0>)
    13fc:	4a1b      	ldr	r2, [pc, #108]	; (146c <system_clock_source_enable+0xa0>)
    13fe:	6992      	ldr	r2, [r2, #24]
    1400:	2102      	movs	r1, #2
    1402:	430a      	orrs	r2, r1
    1404:	619a      	str	r2, [r3, #24]
		break;
    1406:	e029      	b.n	145c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1408:	4b18      	ldr	r3, [pc, #96]	; (146c <system_clock_source_enable+0xa0>)
    140a:	4a18      	ldr	r2, [pc, #96]	; (146c <system_clock_source_enable+0xa0>)
    140c:	8a12      	ldrh	r2, [r2, #16]
    140e:	b292      	uxth	r2, r2
    1410:	2102      	movs	r1, #2
    1412:	430a      	orrs	r2, r1
    1414:	b292      	uxth	r2, r2
    1416:	821a      	strh	r2, [r3, #16]
		break;
    1418:	e020      	b.n	145c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    141a:	4b14      	ldr	r3, [pc, #80]	; (146c <system_clock_source_enable+0xa0>)
    141c:	4a13      	ldr	r2, [pc, #76]	; (146c <system_clock_source_enable+0xa0>)
    141e:	8a92      	ldrh	r2, [r2, #20]
    1420:	b292      	uxth	r2, r2
    1422:	2102      	movs	r1, #2
    1424:	430a      	orrs	r2, r1
    1426:	b292      	uxth	r2, r2
    1428:	829a      	strh	r2, [r3, #20]
		break;
    142a:	e017      	b.n	145c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    142c:	4b10      	ldr	r3, [pc, #64]	; (1470 <system_clock_source_enable+0xa4>)
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	2202      	movs	r2, #2
    1432:	431a      	orrs	r2, r3
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <system_clock_source_enable+0xa4>)
    1436:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1438:	4b0e      	ldr	r3, [pc, #56]	; (1474 <system_clock_source_enable+0xa8>)
    143a:	4798      	blx	r3
		break;
    143c:	e00e      	b.n	145c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    143e:	4a0b      	ldr	r2, [pc, #44]	; (146c <system_clock_source_enable+0xa0>)
    1440:	490a      	ldr	r1, [pc, #40]	; (146c <system_clock_source_enable+0xa0>)
    1442:	2344      	movs	r3, #68	; 0x44
    1444:	5ccb      	ldrb	r3, [r1, r3]
    1446:	b2db      	uxtb	r3, r3
    1448:	2102      	movs	r1, #2
    144a:	430b      	orrs	r3, r1
    144c:	b2d9      	uxtb	r1, r3
    144e:	2344      	movs	r3, #68	; 0x44
    1450:	54d1      	strb	r1, [r2, r3]
		break;
    1452:	e003      	b.n	145c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1454:	2300      	movs	r3, #0
    1456:	e002      	b.n	145e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1458:	2317      	movs	r3, #23
    145a:	e000      	b.n	145e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    145c:	2300      	movs	r3, #0
}
    145e:	1c18      	adds	r0, r3, #0
    1460:	46bd      	mov	sp, r7
    1462:	b002      	add	sp, #8
    1464:	bd80      	pop	{r7, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	000021a0 	.word	0x000021a0
    146c:	40000800 	.word	0x40000800
    1470:	2000003c 	.word	0x2000003c
    1474:	0000125d 	.word	0x0000125d

00001478 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    147e:	1c3b      	adds	r3, r7, #0
    1480:	2201      	movs	r2, #1
    1482:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1484:	2300      	movs	r3, #0
    1486:	607b      	str	r3, [r7, #4]
    1488:	e009      	b.n	149e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    148a:	687b      	ldr	r3, [r7, #4]
    148c:	b2da      	uxtb	r2, r3
    148e:	1c3b      	adds	r3, r7, #0
    1490:	1c10      	adds	r0, r2, #0
    1492:	1c19      	adds	r1, r3, #0
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <_switch_peripheral_gclk+0x34>)
    1496:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1498:	687b      	ldr	r3, [r7, #4]
    149a:	3301      	adds	r3, #1
    149c:	607b      	str	r3, [r7, #4]
    149e:	687b      	ldr	r3, [r7, #4]
    14a0:	2b24      	cmp	r3, #36	; 0x24
    14a2:	d9f2      	bls.n	148a <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    14a4:	46bd      	mov	sp, r7
    14a6:	b002      	add	sp, #8
    14a8:	bd80      	pop	{r7, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	000018bd 	.word	0x000018bd

000014b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b09c      	sub	sp, #112	; 0x70
    14b4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14b6:	4b25      	ldr	r3, [pc, #148]	; (154c <system_clock_init+0x9c>)
    14b8:	22c2      	movs	r2, #194	; 0xc2
    14ba:	00d2      	lsls	r2, r2, #3
    14bc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    14be:	2000      	movs	r0, #0
    14c0:	4b23      	ldr	r3, [pc, #140]	; (1550 <system_clock_init+0xa0>)
    14c2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    14c4:	4b23      	ldr	r3, [pc, #140]	; (1554 <system_clock_init+0xa4>)
    14c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    14c8:	1c3b      	adds	r3, r7, #0
    14ca:	336c      	adds	r3, #108	; 0x6c
    14cc:	1c18      	adds	r0, r3, #0
    14ce:	4b22      	ldr	r3, [pc, #136]	; (1558 <system_clock_init+0xa8>)
    14d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14d2:	1c3b      	adds	r3, r7, #0
    14d4:	336c      	adds	r3, #108	; 0x6c
    14d6:	2200      	movs	r2, #0
    14d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    14da:	1c3b      	adds	r3, r7, #0
    14dc:	336c      	adds	r3, #108	; 0x6c
    14de:	2201      	movs	r2, #1
    14e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    14e2:	1c3b      	adds	r3, r7, #0
    14e4:	336c      	adds	r3, #108	; 0x6c
    14e6:	2200      	movs	r2, #0
    14e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14ea:	1c3b      	adds	r3, r7, #0
    14ec:	336c      	adds	r3, #108	; 0x6c
    14ee:	1c18      	adds	r0, r3, #0
    14f0:	4b1a      	ldr	r3, [pc, #104]	; (155c <system_clock_init+0xac>)
    14f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14f4:	2006      	movs	r0, #6
    14f6:	4b1a      	ldr	r3, [pc, #104]	; (1560 <system_clock_init+0xb0>)
    14f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14fa:	4b1a      	ldr	r3, [pc, #104]	; (1564 <system_clock_init+0xb4>)
    14fc:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    14fe:	2000      	movs	r0, #0
    1500:	4b19      	ldr	r3, [pc, #100]	; (1568 <system_clock_init+0xb8>)
    1502:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1504:	2000      	movs	r0, #0
    1506:	2100      	movs	r1, #0
    1508:	4b18      	ldr	r3, [pc, #96]	; (156c <system_clock_init+0xbc>)
    150a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    150c:	2001      	movs	r0, #1
    150e:	2100      	movs	r1, #0
    1510:	4b16      	ldr	r3, [pc, #88]	; (156c <system_clock_init+0xbc>)
    1512:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1514:	1c3b      	adds	r3, r7, #0
    1516:	1c18      	adds	r0, r3, #0
    1518:	4b15      	ldr	r3, [pc, #84]	; (1570 <system_clock_init+0xc0>)
    151a:	4798      	blx	r3
    151c:	1c3b      	adds	r3, r7, #0
    151e:	2206      	movs	r2, #6
    1520:	701a      	strb	r2, [r3, #0]
    1522:	1c3b      	adds	r3, r7, #0
    1524:	2201      	movs	r2, #1
    1526:	605a      	str	r2, [r3, #4]
    1528:	1c3b      	adds	r3, r7, #0
    152a:	2200      	movs	r2, #0
    152c:	721a      	strb	r2, [r3, #8]
    152e:	1c3b      	adds	r3, r7, #0
    1530:	2200      	movs	r2, #0
    1532:	725a      	strb	r2, [r3, #9]
    1534:	1c3b      	adds	r3, r7, #0
    1536:	2000      	movs	r0, #0
    1538:	1c19      	adds	r1, r3, #0
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <system_clock_init+0xc4>)
    153c:	4798      	blx	r3
    153e:	2000      	movs	r0, #0
    1540:	4b0d      	ldr	r3, [pc, #52]	; (1578 <system_clock_init+0xc8>)
    1542:	4798      	blx	r3
#endif
}
    1544:	46bd      	mov	sp, r7
    1546:	b01c      	add	sp, #112	; 0x70
    1548:	bd80      	pop	{r7, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	40000800 	.word	0x40000800
    1550:	00001211 	.word	0x00001211
    1554:	00001479 	.word	0x00001479
    1558:	0000117d 	.word	0x0000117d
    155c:	00001365 	.word	0x00001365
    1560:	000013cd 	.word	0x000013cd
    1564:	0000161d 	.word	0x0000161d
    1568:	0000119d 	.word	0x0000119d
    156c:	000011bd 	.word	0x000011bd
    1570:	00001151 	.word	0x00001151
    1574:	0000164d 	.word	0x0000164d
    1578:	00001775 	.word	0x00001775

0000157c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
    1582:	1c02      	adds	r2, r0, #0
    1584:	6039      	str	r1, [r7, #0]
    1586:	1dfb      	adds	r3, r7, #7
    1588:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    158a:	1dfb      	adds	r3, r7, #7
    158c:	781b      	ldrb	r3, [r3, #0]
    158e:	2b01      	cmp	r3, #1
    1590:	d00a      	beq.n	15a8 <system_apb_clock_set_mask+0x2c>
    1592:	2b02      	cmp	r3, #2
    1594:	d00f      	beq.n	15b6 <system_apb_clock_set_mask+0x3a>
    1596:	2b00      	cmp	r3, #0
    1598:	d114      	bne.n	15c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    159a:	4b0e      	ldr	r3, [pc, #56]	; (15d4 <system_apb_clock_set_mask+0x58>)
    159c:	4a0d      	ldr	r2, [pc, #52]	; (15d4 <system_apb_clock_set_mask+0x58>)
    159e:	6991      	ldr	r1, [r2, #24]
    15a0:	683a      	ldr	r2, [r7, #0]
    15a2:	430a      	orrs	r2, r1
    15a4:	619a      	str	r2, [r3, #24]
			break;
    15a6:	e00f      	b.n	15c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    15a8:	4b0a      	ldr	r3, [pc, #40]	; (15d4 <system_apb_clock_set_mask+0x58>)
    15aa:	4a0a      	ldr	r2, [pc, #40]	; (15d4 <system_apb_clock_set_mask+0x58>)
    15ac:	69d1      	ldr	r1, [r2, #28]
    15ae:	683a      	ldr	r2, [r7, #0]
    15b0:	430a      	orrs	r2, r1
    15b2:	61da      	str	r2, [r3, #28]
			break;
    15b4:	e008      	b.n	15c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <system_apb_clock_set_mask+0x58>)
    15b8:	4a06      	ldr	r2, [pc, #24]	; (15d4 <system_apb_clock_set_mask+0x58>)
    15ba:	6a11      	ldr	r1, [r2, #32]
    15bc:	683a      	ldr	r2, [r7, #0]
    15be:	430a      	orrs	r2, r1
    15c0:	621a      	str	r2, [r3, #32]
			break;
    15c2:	e001      	b.n	15c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    15c4:	2317      	movs	r3, #23
    15c6:	e000      	b.n	15ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    15c8:	2300      	movs	r3, #0
}
    15ca:	1c18      	adds	r0, r3, #0
    15cc:	46bd      	mov	sp, r7
    15ce:	b002      	add	sp, #8
    15d0:	bd80      	pop	{r7, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	40000400 	.word	0x40000400

000015d8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    15d8:	b580      	push	{r7, lr}
    15da:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    15dc:	4b01      	ldr	r3, [pc, #4]	; (15e4 <system_interrupt_enter_critical_section+0xc>)
    15de:	4798      	blx	r3
}
    15e0:	46bd      	mov	sp, r7
    15e2:	bd80      	pop	{r7, pc}
    15e4:	00000111 	.word	0x00000111

000015e8 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    15ec:	4b01      	ldr	r3, [pc, #4]	; (15f4 <system_interrupt_leave_critical_section+0xc>)
    15ee:	4798      	blx	r3
}
    15f0:	46bd      	mov	sp, r7
    15f2:	bd80      	pop	{r7, pc}
    15f4:	00000161 	.word	0x00000161

000015f8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fc:	4b06      	ldr	r3, [pc, #24]	; (1618 <system_gclk_is_syncing+0x20>)
    15fe:	785b      	ldrb	r3, [r3, #1]
    1600:	b2db      	uxtb	r3, r3
    1602:	b2db      	uxtb	r3, r3
    1604:	b25b      	sxtb	r3, r3
    1606:	2b00      	cmp	r3, #0
    1608:	da01      	bge.n	160e <system_gclk_is_syncing+0x16>
		return true;
    160a:	2301      	movs	r3, #1
    160c:	e000      	b.n	1610 <system_gclk_is_syncing+0x18>
	}

	return false;
    160e:	2300      	movs	r3, #0
}
    1610:	1c18      	adds	r0, r3, #0
    1612:	46bd      	mov	sp, r7
    1614:	bd80      	pop	{r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	40000c00 	.word	0x40000c00

0000161c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    161c:	b580      	push	{r7, lr}
    161e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1620:	2000      	movs	r0, #0
    1622:	2108      	movs	r1, #8
    1624:	4b07      	ldr	r3, [pc, #28]	; (1644 <system_gclk_init+0x28>)
    1626:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1628:	4b07      	ldr	r3, [pc, #28]	; (1648 <system_gclk_init+0x2c>)
    162a:	2201      	movs	r2, #1
    162c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	4b05      	ldr	r3, [pc, #20]	; (1648 <system_gclk_init+0x2c>)
    1632:	781b      	ldrb	r3, [r3, #0]
    1634:	b2db      	uxtb	r3, r3
    1636:	1c1a      	adds	r2, r3, #0
    1638:	2301      	movs	r3, #1
    163a:	4013      	ands	r3, r2
    163c:	d1f8      	bne.n	1630 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    163e:	46bd      	mov	sp, r7
    1640:	bd80      	pop	{r7, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	0000157d 	.word	0x0000157d
    1648:	40000c00 	.word	0x40000c00

0000164c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    164c:	b580      	push	{r7, lr}
    164e:	b086      	sub	sp, #24
    1650:	af00      	add	r7, sp, #0
    1652:	1c02      	adds	r2, r0, #0
    1654:	6039      	str	r1, [r7, #0]
    1656:	1dfb      	adds	r3, r7, #7
    1658:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    165a:	1dfb      	adds	r3, r7, #7
    165c:	781b      	ldrb	r3, [r3, #0]
    165e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1660:	1dfb      	adds	r3, r7, #7
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1666:	683b      	ldr	r3, [r7, #0]
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	021b      	lsls	r3, r3, #8
    166c:	697a      	ldr	r2, [r7, #20]
    166e:	4313      	orrs	r3, r2
    1670:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1672:	683b      	ldr	r3, [r7, #0]
    1674:	785b      	ldrb	r3, [r3, #1]
    1676:	2b00      	cmp	r3, #0
    1678:	d004      	beq.n	1684 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    167a:	697b      	ldr	r3, [r7, #20]
    167c:	2280      	movs	r2, #128	; 0x80
    167e:	02d2      	lsls	r2, r2, #11
    1680:	4313      	orrs	r3, r2
    1682:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1684:	683b      	ldr	r3, [r7, #0]
    1686:	7a5b      	ldrb	r3, [r3, #9]
    1688:	2b00      	cmp	r3, #0
    168a:	d004      	beq.n	1696 <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    168c:	697b      	ldr	r3, [r7, #20]
    168e:	2280      	movs	r2, #128	; 0x80
    1690:	0312      	lsls	r2, r2, #12
    1692:	4313      	orrs	r3, r2
    1694:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1696:	683b      	ldr	r3, [r7, #0]
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	2b01      	cmp	r3, #1
    169c:	d92c      	bls.n	16f8 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    169e:	683b      	ldr	r3, [r7, #0]
    16a0:	685a      	ldr	r2, [r3, #4]
    16a2:	683b      	ldr	r3, [r7, #0]
    16a4:	685b      	ldr	r3, [r3, #4]
    16a6:	3b01      	subs	r3, #1
    16a8:	4013      	ands	r3, r2
    16aa:	d11a      	bne.n	16e2 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    16ac:	2300      	movs	r3, #0
    16ae:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16b0:	2302      	movs	r3, #2
    16b2:	60bb      	str	r3, [r7, #8]
    16b4:	e005      	b.n	16c2 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    16b6:	68fb      	ldr	r3, [r7, #12]
    16b8:	3301      	adds	r3, #1
    16ba:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    16bc:	68bb      	ldr	r3, [r7, #8]
    16be:	005b      	lsls	r3, r3, #1
    16c0:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16c2:	683b      	ldr	r3, [r7, #0]
    16c4:	685a      	ldr	r2, [r3, #4]
    16c6:	68bb      	ldr	r3, [r7, #8]
    16c8:	429a      	cmp	r2, r3
    16ca:	d8f4      	bhi.n	16b6 <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16cc:	68fb      	ldr	r3, [r7, #12]
    16ce:	021b      	lsls	r3, r3, #8
    16d0:	693a      	ldr	r2, [r7, #16]
    16d2:	4313      	orrs	r3, r2
    16d4:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16d6:	697b      	ldr	r3, [r7, #20]
    16d8:	2280      	movs	r2, #128	; 0x80
    16da:	0352      	lsls	r2, r2, #13
    16dc:	4313      	orrs	r3, r2
    16de:	617b      	str	r3, [r7, #20]
    16e0:	e00a      	b.n	16f8 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    16e2:	683b      	ldr	r3, [r7, #0]
    16e4:	685b      	ldr	r3, [r3, #4]
    16e6:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    16e8:	693a      	ldr	r2, [r7, #16]
    16ea:	4313      	orrs	r3, r2
    16ec:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    16ee:	697b      	ldr	r3, [r7, #20]
    16f0:	2280      	movs	r2, #128	; 0x80
    16f2:	0292      	lsls	r2, r2, #10
    16f4:	4313      	orrs	r3, r2
    16f6:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16f8:	683b      	ldr	r3, [r7, #0]
    16fa:	7a1b      	ldrb	r3, [r3, #8]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d005      	beq.n	170c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1700:	697b      	ldr	r3, [r7, #20]
    1702:	2280      	movs	r2, #128	; 0x80
    1704:	0392      	lsls	r2, r2, #14
    1706:	4313      	orrs	r3, r2
    1708:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    170a:	e7ff      	b.n	170c <system_gclk_gen_set_config+0xc0>
    170c:	46c0      	nop			; (mov r8, r8)
    170e:	4b14      	ldr	r3, [pc, #80]	; (1760 <system_gclk_gen_set_config+0x114>)
    1710:	4798      	blx	r3
    1712:	1c03      	adds	r3, r0, #0
    1714:	2b00      	cmp	r3, #0
    1716:	d1fa      	bne.n	170e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1718:	4b12      	ldr	r3, [pc, #72]	; (1764 <system_gclk_gen_set_config+0x118>)
    171a:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    171c:	4b12      	ldr	r3, [pc, #72]	; (1768 <system_gclk_gen_set_config+0x11c>)
    171e:	1dfa      	adds	r2, r7, #7
    1720:	7812      	ldrb	r2, [r2, #0]
    1722:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1724:	46c0      	nop			; (mov r8, r8)
    1726:	4b0e      	ldr	r3, [pc, #56]	; (1760 <system_gclk_gen_set_config+0x114>)
    1728:	4798      	blx	r3
    172a:	1c03      	adds	r3, r0, #0
    172c:	2b00      	cmp	r3, #0
    172e:	d1fa      	bne.n	1726 <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1730:	4b0e      	ldr	r3, [pc, #56]	; (176c <system_gclk_gen_set_config+0x120>)
    1732:	693a      	ldr	r2, [r7, #16]
    1734:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	4b09      	ldr	r3, [pc, #36]	; (1760 <system_gclk_gen_set_config+0x114>)
    173a:	4798      	blx	r3
    173c:	1c03      	adds	r3, r0, #0
    173e:	2b00      	cmp	r3, #0
    1740:	d1fa      	bne.n	1738 <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1742:	4b0a      	ldr	r3, [pc, #40]	; (176c <system_gclk_gen_set_config+0x120>)
    1744:	4a09      	ldr	r2, [pc, #36]	; (176c <system_gclk_gen_set_config+0x120>)
    1746:	6851      	ldr	r1, [r2, #4]
    1748:	2280      	movs	r2, #128	; 0x80
    174a:	0252      	lsls	r2, r2, #9
    174c:	4011      	ands	r1, r2
    174e:	697a      	ldr	r2, [r7, #20]
    1750:	430a      	orrs	r2, r1
    1752:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1754:	4b06      	ldr	r3, [pc, #24]	; (1770 <system_gclk_gen_set_config+0x124>)
    1756:	4798      	blx	r3
}
    1758:	46bd      	mov	sp, r7
    175a:	b006      	add	sp, #24
    175c:	bd80      	pop	{r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	000015f9 	.word	0x000015f9
    1764:	000015d9 	.word	0x000015d9
    1768:	40000c08 	.word	0x40000c08
    176c:	40000c00 	.word	0x40000c00
    1770:	000015e9 	.word	0x000015e9

00001774 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1774:	b580      	push	{r7, lr}
    1776:	b082      	sub	sp, #8
    1778:	af00      	add	r7, sp, #0
    177a:	1c02      	adds	r2, r0, #0
    177c:	1dfb      	adds	r3, r7, #7
    177e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1780:	46c0      	nop			; (mov r8, r8)
    1782:	4b0e      	ldr	r3, [pc, #56]	; (17bc <system_gclk_gen_enable+0x48>)
    1784:	4798      	blx	r3
    1786:	1c03      	adds	r3, r0, #0
    1788:	2b00      	cmp	r3, #0
    178a:	d1fa      	bne.n	1782 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    178c:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <system_gclk_gen_enable+0x4c>)
    178e:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1790:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <system_gclk_gen_enable+0x50>)
    1792:	1dfa      	adds	r2, r7, #7
    1794:	7812      	ldrb	r2, [r2, #0]
    1796:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1798:	46c0      	nop			; (mov r8, r8)
    179a:	4b08      	ldr	r3, [pc, #32]	; (17bc <system_gclk_gen_enable+0x48>)
    179c:	4798      	blx	r3
    179e:	1c03      	adds	r3, r0, #0
    17a0:	2b00      	cmp	r3, #0
    17a2:	d1fa      	bne.n	179a <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    17a4:	4b08      	ldr	r3, [pc, #32]	; (17c8 <system_gclk_gen_enable+0x54>)
    17a6:	4a08      	ldr	r2, [pc, #32]	; (17c8 <system_gclk_gen_enable+0x54>)
    17a8:	6852      	ldr	r2, [r2, #4]
    17aa:	2180      	movs	r1, #128	; 0x80
    17ac:	0249      	lsls	r1, r1, #9
    17ae:	430a      	orrs	r2, r1
    17b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    17b2:	4b06      	ldr	r3, [pc, #24]	; (17cc <system_gclk_gen_enable+0x58>)
    17b4:	4798      	blx	r3
}
    17b6:	46bd      	mov	sp, r7
    17b8:	b002      	add	sp, #8
    17ba:	bd80      	pop	{r7, pc}
    17bc:	000015f9 	.word	0x000015f9
    17c0:	000015d9 	.word	0x000015d9
    17c4:	40000c04 	.word	0x40000c04
    17c8:	40000c00 	.word	0x40000c00
    17cc:	000015e9 	.word	0x000015e9

000017d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b086      	sub	sp, #24
    17d4:	af00      	add	r7, sp, #0
    17d6:	1c02      	adds	r2, r0, #0
    17d8:	1dfb      	adds	r3, r7, #7
    17da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    17dc:	46c0      	nop			; (mov r8, r8)
    17de:	4b2f      	ldr	r3, [pc, #188]	; (189c <system_gclk_gen_get_hz+0xcc>)
    17e0:	4798      	blx	r3
    17e2:	1c03      	adds	r3, r0, #0
    17e4:	2b00      	cmp	r3, #0
    17e6:	d1fa      	bne.n	17de <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    17e8:	4b2d      	ldr	r3, [pc, #180]	; (18a0 <system_gclk_gen_get_hz+0xd0>)
    17ea:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    17ec:	4b2d      	ldr	r3, [pc, #180]	; (18a4 <system_gclk_gen_get_hz+0xd4>)
    17ee:	1dfa      	adds	r2, r7, #7
    17f0:	7812      	ldrb	r2, [r2, #0]
    17f2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    17f4:	46c0      	nop			; (mov r8, r8)
    17f6:	4b29      	ldr	r3, [pc, #164]	; (189c <system_gclk_gen_get_hz+0xcc>)
    17f8:	4798      	blx	r3
    17fa:	1c03      	adds	r3, r0, #0
    17fc:	2b00      	cmp	r3, #0
    17fe:	d1fa      	bne.n	17f6 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1800:	4b29      	ldr	r3, [pc, #164]	; (18a8 <system_gclk_gen_get_hz+0xd8>)
    1802:	685b      	ldr	r3, [r3, #4]
    1804:	0a1b      	lsrs	r3, r3, #8
    1806:	1c1a      	adds	r2, r3, #0
    1808:	231f      	movs	r3, #31
    180a:	4013      	ands	r3, r2
    180c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    180e:	1c18      	adds	r0, r3, #0
    1810:	4b26      	ldr	r3, [pc, #152]	; (18ac <system_gclk_gen_get_hz+0xdc>)
    1812:	4798      	blx	r3
    1814:	1c03      	adds	r3, r0, #0
    1816:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1818:	4b22      	ldr	r3, [pc, #136]	; (18a4 <system_gclk_gen_get_hz+0xd4>)
    181a:	1dfa      	adds	r2, r7, #7
    181c:	7812      	ldrb	r2, [r2, #0]
    181e:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1820:	4b21      	ldr	r3, [pc, #132]	; (18a8 <system_gclk_gen_get_hz+0xd8>)
    1822:	685b      	ldr	r3, [r3, #4]
    1824:	0d1b      	lsrs	r3, r3, #20
    1826:	1c1a      	adds	r2, r3, #0
    1828:	2301      	movs	r3, #1
    182a:	4013      	ands	r3, r2
    182c:	b2da      	uxtb	r2, r3
    182e:	1c3b      	adds	r3, r7, #0
    1830:	3313      	adds	r3, #19
    1832:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1834:	4b1e      	ldr	r3, [pc, #120]	; (18b0 <system_gclk_gen_get_hz+0xe0>)
    1836:	1dfa      	adds	r2, r7, #7
    1838:	7812      	ldrb	r2, [r2, #0]
    183a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    183c:	46c0      	nop			; (mov r8, r8)
    183e:	4b17      	ldr	r3, [pc, #92]	; (189c <system_gclk_gen_get_hz+0xcc>)
    1840:	4798      	blx	r3
    1842:	1c03      	adds	r3, r0, #0
    1844:	2b00      	cmp	r3, #0
    1846:	d1fa      	bne.n	183e <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1848:	4b17      	ldr	r3, [pc, #92]	; (18a8 <system_gclk_gen_get_hz+0xd8>)
    184a:	689b      	ldr	r3, [r3, #8]
    184c:	0a1b      	lsrs	r3, r3, #8
    184e:	2200      	movs	r2, #0
    1850:	4393      	bics	r3, r2
    1852:	b29b      	uxth	r3, r3
    1854:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1856:	4b17      	ldr	r3, [pc, #92]	; (18b4 <system_gclk_gen_get_hz+0xe4>)
    1858:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    185a:	1c3b      	adds	r3, r7, #0
    185c:	3313      	adds	r3, #19
    185e:	781b      	ldrb	r3, [r3, #0]
    1860:	2b00      	cmp	r3, #0
    1862:	d109      	bne.n	1878 <system_gclk_gen_get_hz+0xa8>
    1864:	68fb      	ldr	r3, [r7, #12]
    1866:	2b01      	cmp	r3, #1
    1868:	d906      	bls.n	1878 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    186a:	4b13      	ldr	r3, [pc, #76]	; (18b8 <system_gclk_gen_get_hz+0xe8>)
    186c:	6978      	ldr	r0, [r7, #20]
    186e:	68f9      	ldr	r1, [r7, #12]
    1870:	4798      	blx	r3
    1872:	1c03      	adds	r3, r0, #0
    1874:	617b      	str	r3, [r7, #20]
    1876:	e00b      	b.n	1890 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    1878:	1c3b      	adds	r3, r7, #0
    187a:	3313      	adds	r3, #19
    187c:	781b      	ldrb	r3, [r3, #0]
    187e:	2b00      	cmp	r3, #0
    1880:	d006      	beq.n	1890 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	3301      	adds	r3, #1
    1886:	697a      	ldr	r2, [r7, #20]
    1888:	1c11      	adds	r1, r2, #0
    188a:	40d9      	lsrs	r1, r3
    188c:	1c0b      	adds	r3, r1, #0
    188e:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1890:	697b      	ldr	r3, [r7, #20]
}
    1892:	1c18      	adds	r0, r3, #0
    1894:	46bd      	mov	sp, r7
    1896:	b006      	add	sp, #24
    1898:	bd80      	pop	{r7, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	000015f9 	.word	0x000015f9
    18a0:	000015d9 	.word	0x000015d9
    18a4:	40000c04 	.word	0x40000c04
    18a8:	40000c00 	.word	0x40000c00
    18ac:	000012a1 	.word	0x000012a1
    18b0:	40000c08 	.word	0x40000c08
    18b4:	000015e9 	.word	0x000015e9
    18b8:	00002069 	.word	0x00002069

000018bc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    18bc:	b580      	push	{r7, lr}
    18be:	b084      	sub	sp, #16
    18c0:	af00      	add	r7, sp, #0
    18c2:	1c02      	adds	r2, r0, #0
    18c4:	6039      	str	r1, [r7, #0]
    18c6:	1dfb      	adds	r3, r7, #7
    18c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    18ca:	1dfb      	adds	r3, r7, #7
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    18d0:	683b      	ldr	r3, [r7, #0]
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	021b      	lsls	r3, r3, #8
    18d6:	68fa      	ldr	r2, [r7, #12]
    18d8:	4313      	orrs	r3, r2
    18da:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    18dc:	1dfb      	adds	r3, r7, #7
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	1c18      	adds	r0, r3, #0
    18e2:	4b04      	ldr	r3, [pc, #16]	; (18f4 <system_gclk_chan_set_config+0x38>)
    18e4:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    18e6:	4b04      	ldr	r3, [pc, #16]	; (18f8 <system_gclk_chan_set_config+0x3c>)
    18e8:	68fa      	ldr	r2, [r7, #12]
    18ea:	b292      	uxth	r2, r2
    18ec:	805a      	strh	r2, [r3, #2]
}
    18ee:	46bd      	mov	sp, r7
    18f0:	b004      	add	sp, #16
    18f2:	bd80      	pop	{r7, pc}
    18f4:	00001941 	.word	0x00001941
    18f8:	40000c00 	.word	0x40000c00

000018fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	b082      	sub	sp, #8
    1900:	af00      	add	r7, sp, #0
    1902:	1c02      	adds	r2, r0, #0
    1904:	1dfb      	adds	r3, r7, #7
    1906:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1908:	4b09      	ldr	r3, [pc, #36]	; (1930 <system_gclk_chan_enable+0x34>)
    190a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    190c:	4b09      	ldr	r3, [pc, #36]	; (1934 <system_gclk_chan_enable+0x38>)
    190e:	1dfa      	adds	r2, r7, #7
    1910:	7812      	ldrb	r2, [r2, #0]
    1912:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1914:	4b08      	ldr	r3, [pc, #32]	; (1938 <system_gclk_chan_enable+0x3c>)
    1916:	4a08      	ldr	r2, [pc, #32]	; (1938 <system_gclk_chan_enable+0x3c>)
    1918:	8852      	ldrh	r2, [r2, #2]
    191a:	b292      	uxth	r2, r2
    191c:	2180      	movs	r1, #128	; 0x80
    191e:	01c9      	lsls	r1, r1, #7
    1920:	430a      	orrs	r2, r1
    1922:	b292      	uxth	r2, r2
    1924:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <system_gclk_chan_enable+0x40>)
    1928:	4798      	blx	r3
}
    192a:	46bd      	mov	sp, r7
    192c:	b002      	add	sp, #8
    192e:	bd80      	pop	{r7, pc}
    1930:	000015d9 	.word	0x000015d9
    1934:	40000c02 	.word	0x40000c02
    1938:	40000c00 	.word	0x40000c00
    193c:	000015e9 	.word	0x000015e9

00001940 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1940:	b580      	push	{r7, lr}
    1942:	b084      	sub	sp, #16
    1944:	af00      	add	r7, sp, #0
    1946:	1c02      	adds	r2, r0, #0
    1948:	1dfb      	adds	r3, r7, #7
    194a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    194c:	4b1c      	ldr	r3, [pc, #112]	; (19c0 <system_gclk_chan_disable+0x80>)
    194e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1950:	4b1c      	ldr	r3, [pc, #112]	; (19c4 <system_gclk_chan_disable+0x84>)
    1952:	1dfa      	adds	r2, r7, #7
    1954:	7812      	ldrb	r2, [r2, #0]
    1956:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1958:	4b1b      	ldr	r3, [pc, #108]	; (19c8 <system_gclk_chan_disable+0x88>)
    195a:	885b      	ldrh	r3, [r3, #2]
    195c:	b29b      	uxth	r3, r3
    195e:	0a1b      	lsrs	r3, r3, #8
    1960:	1c1a      	adds	r2, r3, #0
    1962:	230f      	movs	r3, #15
    1964:	4013      	ands	r3, r2
    1966:	b2db      	uxtb	r3, r3
    1968:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    196a:	4b17      	ldr	r3, [pc, #92]	; (19c8 <system_gclk_chan_disable+0x88>)
    196c:	8859      	ldrh	r1, [r3, #2]
    196e:	4a17      	ldr	r2, [pc, #92]	; (19cc <system_gclk_chan_disable+0x8c>)
    1970:	400a      	ands	r2, r1
    1972:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1974:	4b14      	ldr	r3, [pc, #80]	; (19c8 <system_gclk_chan_disable+0x88>)
    1976:	4a14      	ldr	r2, [pc, #80]	; (19c8 <system_gclk_chan_disable+0x88>)
    1978:	8852      	ldrh	r2, [r2, #2]
    197a:	b291      	uxth	r1, r2
    197c:	4a14      	ldr	r2, [pc, #80]	; (19d0 <system_gclk_chan_disable+0x90>)
    197e:	400a      	ands	r2, r1
    1980:	b292      	uxth	r2, r2
    1982:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1984:	46c0      	nop			; (mov r8, r8)
    1986:	4b10      	ldr	r3, [pc, #64]	; (19c8 <system_gclk_chan_disable+0x88>)
    1988:	885b      	ldrh	r3, [r3, #2]
    198a:	b29b      	uxth	r3, r3
    198c:	1c1a      	adds	r2, r3, #0
    198e:	2380      	movs	r3, #128	; 0x80
    1990:	01db      	lsls	r3, r3, #7
    1992:	4013      	ands	r3, r2
    1994:	d1f7      	bne.n	1986 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1996:	4b0c      	ldr	r3, [pc, #48]	; (19c8 <system_gclk_chan_disable+0x88>)
    1998:	68fa      	ldr	r2, [r7, #12]
    199a:	b2d2      	uxtb	r2, r2
    199c:	1c11      	adds	r1, r2, #0
    199e:	220f      	movs	r2, #15
    19a0:	400a      	ands	r2, r1
    19a2:	b2d1      	uxtb	r1, r2
    19a4:	220f      	movs	r2, #15
    19a6:	400a      	ands	r2, r1
    19a8:	0212      	lsls	r2, r2, #8
    19aa:	8858      	ldrh	r0, [r3, #2]
    19ac:	4907      	ldr	r1, [pc, #28]	; (19cc <system_gclk_chan_disable+0x8c>)
    19ae:	4001      	ands	r1, r0
    19b0:	430a      	orrs	r2, r1
    19b2:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    19b4:	4b07      	ldr	r3, [pc, #28]	; (19d4 <system_gclk_chan_disable+0x94>)
    19b6:	4798      	blx	r3
}
    19b8:	46bd      	mov	sp, r7
    19ba:	b004      	add	sp, #16
    19bc:	bd80      	pop	{r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	000015d9 	.word	0x000015d9
    19c4:	40000c02 	.word	0x40000c02
    19c8:	40000c00 	.word	0x40000c00
    19cc:	fffff0ff 	.word	0xfffff0ff
    19d0:	ffffbfff 	.word	0xffffbfff
    19d4:	000015e9 	.word	0x000015e9

000019d8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	1c02      	adds	r2, r0, #0
    19e0:	1dfb      	adds	r3, r7, #7
    19e2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    19e4:	4b0e      	ldr	r3, [pc, #56]	; (1a20 <system_gclk_chan_get_hz+0x48>)
    19e6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19e8:	4b0e      	ldr	r3, [pc, #56]	; (1a24 <system_gclk_chan_get_hz+0x4c>)
    19ea:	1dfa      	adds	r2, r7, #7
    19ec:	7812      	ldrb	r2, [r2, #0]
    19ee:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19f0:	4b0d      	ldr	r3, [pc, #52]	; (1a28 <system_gclk_chan_get_hz+0x50>)
    19f2:	885b      	ldrh	r3, [r3, #2]
    19f4:	b29b      	uxth	r3, r3
    19f6:	0a1b      	lsrs	r3, r3, #8
    19f8:	1c1a      	adds	r2, r3, #0
    19fa:	230f      	movs	r3, #15
    19fc:	4013      	ands	r3, r2
    19fe:	b2da      	uxtb	r2, r3
    1a00:	1c3b      	adds	r3, r7, #0
    1a02:	330f      	adds	r3, #15
    1a04:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1a06:	4b09      	ldr	r3, [pc, #36]	; (1a2c <system_gclk_chan_get_hz+0x54>)
    1a08:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a0a:	1c3b      	adds	r3, r7, #0
    1a0c:	330f      	adds	r3, #15
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	1c18      	adds	r0, r3, #0
    1a12:	4b07      	ldr	r3, [pc, #28]	; (1a30 <system_gclk_chan_get_hz+0x58>)
    1a14:	4798      	blx	r3
    1a16:	1c03      	adds	r3, r0, #0
}
    1a18:	1c18      	adds	r0, r3, #0
    1a1a:	46bd      	mov	sp, r7
    1a1c:	b004      	add	sp, #16
    1a1e:	bd80      	pop	{r7, pc}
    1a20:	000015d9 	.word	0x000015d9
    1a24:	40000c02 	.word	0x40000c02
    1a28:	40000c00 	.word	0x40000c00
    1a2c:	000015e9 	.word	0x000015e9
    1a30:	000017d1 	.word	0x000017d1

00001a34 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a34:	b580      	push	{r7, lr}
    1a36:	b084      	sub	sp, #16
    1a38:	af00      	add	r7, sp, #0
    1a3a:	1c02      	adds	r2, r0, #0
    1a3c:	1dfb      	adds	r3, r7, #7
    1a3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1a40:	1c3b      	adds	r3, r7, #0
    1a42:	330f      	adds	r3, #15
    1a44:	1dfa      	adds	r2, r7, #7
    1a46:	7812      	ldrb	r2, [r2, #0]
    1a48:	09d2      	lsrs	r2, r2, #7
    1a4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1a4c:	1c3b      	adds	r3, r7, #0
    1a4e:	330e      	adds	r3, #14
    1a50:	1dfa      	adds	r2, r7, #7
    1a52:	7812      	ldrb	r2, [r2, #0]
    1a54:	0952      	lsrs	r2, r2, #5
    1a56:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1a58:	4b0d      	ldr	r3, [pc, #52]	; (1a90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1a5a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1a5c:	1c3b      	adds	r3, r7, #0
    1a5e:	330f      	adds	r3, #15
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d10e      	bne.n	1a84 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    1a66:	1c3b      	adds	r3, r7, #0
    1a68:	330f      	adds	r3, #15
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	009b      	lsls	r3, r3, #2
    1a6e:	2210      	movs	r2, #16
    1a70:	19d2      	adds	r2, r2, r7
    1a72:	18d3      	adds	r3, r2, r3
    1a74:	3b08      	subs	r3, #8
    1a76:	681a      	ldr	r2, [r3, #0]
    1a78:	1c3b      	adds	r3, r7, #0
    1a7a:	330e      	adds	r3, #14
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	01db      	lsls	r3, r3, #7
    1a80:	18d3      	adds	r3, r2, r3
    1a82:	e000      	b.n	1a86 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    1a84:	2300      	movs	r3, #0
	}
}
    1a86:	1c18      	adds	r0, r3, #0
    1a88:	46bd      	mov	sp, r7
    1a8a:	b004      	add	sp, #16
    1a8c:	bd80      	pop	{r7, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	41004400 	.word	0x41004400

00001a94 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b088      	sub	sp, #32
    1a98:	af00      	add	r7, sp, #0
    1a9a:	60f8      	str	r0, [r7, #12]
    1a9c:	60b9      	str	r1, [r7, #8]
    1a9e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1aa0:	2300      	movs	r3, #0
    1aa2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	78db      	ldrb	r3, [r3, #3]
    1aa8:	2201      	movs	r2, #1
    1aaa:	4053      	eors	r3, r2
    1aac:	b2db      	uxtb	r3, r3
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d034      	beq.n	1b1c <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	781b      	ldrb	r3, [r3, #0]
    1ab6:	2b80      	cmp	r3, #128	; 0x80
    1ab8:	d00a      	beq.n	1ad0 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1aba:	69fb      	ldr	r3, [r7, #28]
    1abc:	2280      	movs	r2, #128	; 0x80
    1abe:	0252      	lsls	r2, r2, #9
    1ac0:	4313      	orrs	r3, r2
    1ac2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	781b      	ldrb	r3, [r3, #0]
    1ac8:	061b      	lsls	r3, r3, #24
    1aca:	69fa      	ldr	r2, [r7, #28]
    1acc:	4313      	orrs	r3, r2
    1ace:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	785b      	ldrb	r3, [r3, #1]
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d003      	beq.n	1ae0 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1adc:	2b02      	cmp	r3, #2
    1ade:	d110      	bne.n	1b02 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ae0:	69fb      	ldr	r3, [r7, #28]
    1ae2:	2280      	movs	r2, #128	; 0x80
    1ae4:	0292      	lsls	r2, r2, #10
    1ae6:	4313      	orrs	r3, r2
    1ae8:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	789b      	ldrb	r3, [r3, #2]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d004      	beq.n	1afc <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1af2:	69fb      	ldr	r3, [r7, #28]
    1af4:	2280      	movs	r2, #128	; 0x80
    1af6:	02d2      	lsls	r2, r2, #11
    1af8:	4313      	orrs	r3, r2
    1afa:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1afc:	68fb      	ldr	r3, [r7, #12]
    1afe:	68ba      	ldr	r2, [r7, #8]
    1b00:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	785b      	ldrb	r3, [r3, #1]
    1b06:	2b01      	cmp	r3, #1
    1b08:	d003      	beq.n	1b12 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b0e:	2b02      	cmp	r3, #2
    1b10:	d107      	bne.n	1b22 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b12:	69fa      	ldr	r2, [r7, #28]
    1b14:	4b21      	ldr	r3, [pc, #132]	; (1b9c <_system_pinmux_config+0x108>)
    1b16:	4013      	ands	r3, r2
    1b18:	61fb      	str	r3, [r7, #28]
    1b1a:	e002      	b.n	1b22 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1b1c:	68fb      	ldr	r3, [r7, #12]
    1b1e:	68ba      	ldr	r2, [r7, #8]
    1b20:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b22:	68bb      	ldr	r3, [r7, #8]
    1b24:	041b      	lsls	r3, r3, #16
    1b26:	0c1b      	lsrs	r3, r3, #16
    1b28:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b2a:	68bb      	ldr	r3, [r7, #8]
    1b2c:	0c1b      	lsrs	r3, r3, #16
    1b2e:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b30:	69ba      	ldr	r2, [r7, #24]
    1b32:	69fb      	ldr	r3, [r7, #28]
    1b34:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b36:	22a0      	movs	r2, #160	; 0xa0
    1b38:	05d2      	lsls	r2, r2, #23
    1b3a:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b40:	697a      	ldr	r2, [r7, #20]
    1b42:	69fb      	ldr	r3, [r7, #28]
    1b44:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b46:	22d0      	movs	r2, #208	; 0xd0
    1b48:	0612      	lsls	r2, r2, #24
    1b4a:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	78db      	ldrb	r3, [r3, #3]
    1b54:	2201      	movs	r2, #1
    1b56:	4053      	eors	r3, r2
    1b58:	b2db      	uxtb	r3, r3
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d01a      	beq.n	1b94 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b5e:	69fa      	ldr	r2, [r7, #28]
    1b60:	2380      	movs	r3, #128	; 0x80
    1b62:	02db      	lsls	r3, r3, #11
    1b64:	4013      	ands	r3, r2
    1b66:	d00a      	beq.n	1b7e <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	789b      	ldrb	r3, [r3, #2]
    1b6c:	2b01      	cmp	r3, #1
    1b6e:	d103      	bne.n	1b78 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	68ba      	ldr	r2, [r7, #8]
    1b74:	619a      	str	r2, [r3, #24]
    1b76:	e002      	b.n	1b7e <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    1b78:	68fb      	ldr	r3, [r7, #12]
    1b7a:	68ba      	ldr	r2, [r7, #8]
    1b7c:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	785b      	ldrb	r3, [r3, #1]
    1b82:	2b01      	cmp	r3, #1
    1b84:	d003      	beq.n	1b8e <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b8a:	2b02      	cmp	r3, #2
    1b8c:	d102      	bne.n	1b94 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	68ba      	ldr	r2, [r7, #8]
    1b92:	609a      	str	r2, [r3, #8]
		}
	}
}
    1b94:	46bd      	mov	sp, r7
    1b96:	b008      	add	sp, #32
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	fffbffff 	.word	0xfffbffff

00001ba0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b084      	sub	sp, #16
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	1c02      	adds	r2, r0, #0
    1ba8:	6039      	str	r1, [r7, #0]
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	781b      	ldrb	r3, [r3, #0]
    1bb2:	1c18      	adds	r0, r3, #0
    1bb4:	4b0b      	ldr	r3, [pc, #44]	; (1be4 <system_pinmux_pin_set_config+0x44>)
    1bb6:	4798      	blx	r3
    1bb8:	1c03      	adds	r3, r0, #0
    1bba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bbc:	1dfb      	adds	r3, r7, #7
    1bbe:	781a      	ldrb	r2, [r3, #0]
    1bc0:	231f      	movs	r3, #31
    1bc2:	4013      	ands	r3, r2
    1bc4:	2201      	movs	r2, #1
    1bc6:	1c11      	adds	r1, r2, #0
    1bc8:	4099      	lsls	r1, r3
    1bca:	1c0b      	adds	r3, r1, #0
    1bcc:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1bce:	68f9      	ldr	r1, [r7, #12]
    1bd0:	68ba      	ldr	r2, [r7, #8]
    1bd2:	683b      	ldr	r3, [r7, #0]
    1bd4:	1c08      	adds	r0, r1, #0
    1bd6:	1c11      	adds	r1, r2, #0
    1bd8:	1c1a      	adds	r2, r3, #0
    1bda:	4b03      	ldr	r3, [pc, #12]	; (1be8 <system_pinmux_pin_set_config+0x48>)
    1bdc:	4798      	blx	r3
}
    1bde:	46bd      	mov	sp, r7
    1be0:	b004      	add	sp, #16
    1be2:	bd80      	pop	{r7, pc}
    1be4:	00001a35 	.word	0x00001a35
    1be8:	00001a95 	.word	0x00001a95

00001bec <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1bec:	b580      	push	{r7, lr}
    1bee:	af00      	add	r7, sp, #0
	return;
    1bf0:	46c0      	nop			; (mov r8, r8)
}
    1bf2:	46bd      	mov	sp, r7
    1bf4:	bd80      	pop	{r7, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)

00001bf8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bf8:	b580      	push	{r7, lr}
    1bfa:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <system_init+0x18>)
    1bfe:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1c00:	4b04      	ldr	r3, [pc, #16]	; (1c14 <system_init+0x1c>)
    1c02:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c04:	4b04      	ldr	r3, [pc, #16]	; (1c18 <system_init+0x20>)
    1c06:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c08:	4b04      	ldr	r3, [pc, #16]	; (1c1c <system_init+0x24>)
    1c0a:	4798      	blx	r3
}
    1c0c:	46bd      	mov	sp, r7
    1c0e:	bd80      	pop	{r7, pc}
    1c10:	000014b1 	.word	0x000014b1
    1c14:	00000295 	.word	0x00000295
    1c18:	00001bed 	.word	0x00001bed
    1c1c:	00001bed 	.word	0x00001bed

00001c20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1c20:	b580      	push	{r7, lr}
    1c22:	b082      	sub	sp, #8
    1c24:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c26:	4a2b      	ldr	r2, [pc, #172]	; (1cd4 <Reset_Handler+0xb4>)
    1c28:	2390      	movs	r3, #144	; 0x90
    1c2a:	005b      	lsls	r3, r3, #1
    1c2c:	2102      	movs	r1, #2
    1c2e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c30:	4b29      	ldr	r3, [pc, #164]	; (1cd8 <Reset_Handler+0xb8>)
    1c32:	78da      	ldrb	r2, [r3, #3]
    1c34:	2103      	movs	r1, #3
    1c36:	438a      	bics	r2, r1
    1c38:	2102      	movs	r1, #2
    1c3a:	430a      	orrs	r2, r1
    1c3c:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c3e:	4b26      	ldr	r3, [pc, #152]	; (1cd8 <Reset_Handler+0xb8>)
    1c40:	78da      	ldrb	r2, [r3, #3]
    1c42:	210c      	movs	r1, #12
    1c44:	438a      	bics	r2, r1
    1c46:	2108      	movs	r1, #8
    1c48:	430a      	orrs	r2, r1
    1c4a:	70da      	strb	r2, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1c4c:	4b23      	ldr	r3, [pc, #140]	; (1cdc <Reset_Handler+0xbc>)
    1c4e:	7b9a      	ldrb	r2, [r3, #14]
    1c50:	2130      	movs	r1, #48	; 0x30
    1c52:	438a      	bics	r2, r1
    1c54:	2120      	movs	r1, #32
    1c56:	430a      	orrs	r2, r1
    1c58:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1c5a:	4b20      	ldr	r3, [pc, #128]	; (1cdc <Reset_Handler+0xbc>)
    1c5c:	7b9a      	ldrb	r2, [r3, #14]
    1c5e:	210c      	movs	r1, #12
    1c60:	438a      	bics	r2, r1
    1c62:	2108      	movs	r1, #8
    1c64:	430a      	orrs	r2, r1
    1c66:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c68:	4b1c      	ldr	r3, [pc, #112]	; (1cdc <Reset_Handler+0xbc>)
    1c6a:	7b9a      	ldrb	r2, [r3, #14]
    1c6c:	2103      	movs	r1, #3
    1c6e:	438a      	bics	r2, r1
    1c70:	2102      	movs	r1, #2
    1c72:	430a      	orrs	r2, r1
    1c74:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1c76:	4b1a      	ldr	r3, [pc, #104]	; (1ce0 <Reset_Handler+0xc0>)
    1c78:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1c7a:	4b1a      	ldr	r3, [pc, #104]	; (1ce4 <Reset_Handler+0xc4>)
    1c7c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1c7e:	687a      	ldr	r2, [r7, #4]
    1c80:	683b      	ldr	r3, [r7, #0]
    1c82:	429a      	cmp	r2, r3
    1c84:	d00c      	beq.n	1ca0 <Reset_Handler+0x80>
                for (; pDest < &_erelocate;) {
    1c86:	e007      	b.n	1c98 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1c88:	683b      	ldr	r3, [r7, #0]
    1c8a:	1d1a      	adds	r2, r3, #4
    1c8c:	603a      	str	r2, [r7, #0]
    1c8e:	687a      	ldr	r2, [r7, #4]
    1c90:	1d11      	adds	r1, r2, #4
    1c92:	6079      	str	r1, [r7, #4]
    1c94:	6812      	ldr	r2, [r2, #0]
    1c96:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1c98:	683a      	ldr	r2, [r7, #0]
    1c9a:	4b13      	ldr	r3, [pc, #76]	; (1ce8 <Reset_Handler+0xc8>)
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d3f3      	bcc.n	1c88 <Reset_Handler+0x68>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ca0:	4b12      	ldr	r3, [pc, #72]	; (1cec <Reset_Handler+0xcc>)
    1ca2:	603b      	str	r3, [r7, #0]
    1ca4:	e004      	b.n	1cb0 <Reset_Handler+0x90>
                *pDest++ = 0;
    1ca6:	683b      	ldr	r3, [r7, #0]
    1ca8:	1d1a      	adds	r2, r3, #4
    1caa:	603a      	str	r2, [r7, #0]
    1cac:	2200      	movs	r2, #0
    1cae:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1cb0:	683a      	ldr	r2, [r7, #0]
    1cb2:	4b0f      	ldr	r3, [pc, #60]	; (1cf0 <Reset_Handler+0xd0>)
    1cb4:	429a      	cmp	r2, r3
    1cb6:	d3f6      	bcc.n	1ca6 <Reset_Handler+0x86>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1cb8:	4b0e      	ldr	r3, [pc, #56]	; (1cf4 <Reset_Handler+0xd4>)
    1cba:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1cbc:	4b0e      	ldr	r3, [pc, #56]	; (1cf8 <Reset_Handler+0xd8>)
    1cbe:	687a      	ldr	r2, [r7, #4]
    1cc0:	217f      	movs	r1, #127	; 0x7f
    1cc2:	438a      	bics	r2, r1
    1cc4:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1cc6:	4b0d      	ldr	r3, [pc, #52]	; (1cfc <Reset_Handler+0xdc>)
    1cc8:	4798      	blx	r3

        /* Branch to main function */
        main();
    1cca:	4b0d      	ldr	r3, [pc, #52]	; (1d00 <Reset_Handler+0xe0>)
    1ccc:	4798      	blx	r3

        /* Infinite loop */
        //while (1);
}
    1cce:	46bd      	mov	sp, r7
    1cd0:	b002      	add	sp, #8
    1cd2:	bd80      	pop	{r7, pc}
    1cd4:	41007000 	.word	0x41007000
    1cd8:	41005000 	.word	0x41005000
    1cdc:	41004800 	.word	0x41004800
    1ce0:	000021e4 	.word	0x000021e4
    1ce4:	20000000 	.word	0x20000000
    1ce8:	20000014 	.word	0x20000014
    1cec:	20000014 	.word	0x20000014
    1cf0:	20000064 	.word	0x20000064
    1cf4:	00000000 	.word	0x00000000
    1cf8:	e000ed00 	.word	0xe000ed00
    1cfc:	00002109 	.word	0x00002109
    1d00:	00002005 	.word	0x00002005

00001d04 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	af00      	add	r7, sp, #0
        //while (1) {
        //}
}
    1d08:	46bd      	mov	sp, r7
    1d0a:	bd80      	pop	{r7, pc}

00001d0c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b084      	sub	sp, #16
    1d10:	af00      	add	r7, sp, #0
    1d12:	1c02      	adds	r2, r0, #0
    1d14:	1dfb      	adds	r3, r7, #7
    1d16:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d18:	1c3b      	adds	r3, r7, #0
    1d1a:	330f      	adds	r3, #15
    1d1c:	1dfa      	adds	r2, r7, #7
    1d1e:	7812      	ldrb	r2, [r2, #0]
    1d20:	09d2      	lsrs	r2, r2, #7
    1d22:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d24:	1c3b      	adds	r3, r7, #0
    1d26:	330e      	adds	r3, #14
    1d28:	1dfa      	adds	r2, r7, #7
    1d2a:	7812      	ldrb	r2, [r2, #0]
    1d2c:	0952      	lsrs	r2, r2, #5
    1d2e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d30:	4b0d      	ldr	r3, [pc, #52]	; (1d68 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d32:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1d34:	1c3b      	adds	r3, r7, #0
    1d36:	330f      	adds	r3, #15
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d10e      	bne.n	1d5c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    1d3e:	1c3b      	adds	r3, r7, #0
    1d40:	330f      	adds	r3, #15
    1d42:	781b      	ldrb	r3, [r3, #0]
    1d44:	009b      	lsls	r3, r3, #2
    1d46:	2210      	movs	r2, #16
    1d48:	19d2      	adds	r2, r2, r7
    1d4a:	18d3      	adds	r3, r2, r3
    1d4c:	3b08      	subs	r3, #8
    1d4e:	681a      	ldr	r2, [r3, #0]
    1d50:	1c3b      	adds	r3, r7, #0
    1d52:	330e      	adds	r3, #14
    1d54:	781b      	ldrb	r3, [r3, #0]
    1d56:	01db      	lsls	r3, r3, #7
    1d58:	18d3      	adds	r3, r2, r3
    1d5a:	e000      	b.n	1d5e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    1d5c:	2300      	movs	r3, #0
	}
}
    1d5e:	1c18      	adds	r0, r3, #0
    1d60:	46bd      	mov	sp, r7
    1d62:	b004      	add	sp, #16
    1d64:	bd80      	pop	{r7, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	41004400 	.word	0x41004400

00001d6c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d6c:	b580      	push	{r7, lr}
    1d6e:	b082      	sub	sp, #8
    1d70:	af00      	add	r7, sp, #0
    1d72:	1c02      	adds	r2, r0, #0
    1d74:	1dfb      	adds	r3, r7, #7
    1d76:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d78:	1dfb      	adds	r3, r7, #7
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	1c18      	adds	r0, r3, #0
    1d7e:	4b03      	ldr	r3, [pc, #12]	; (1d8c <port_get_group_from_gpio_pin+0x20>)
    1d80:	4798      	blx	r3
    1d82:	1c03      	adds	r3, r0, #0
}
    1d84:	1c18      	adds	r0, r3, #0
    1d86:	46bd      	mov	sp, r7
    1d88:	b002      	add	sp, #8
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	00001d0d 	.word	0x00001d0d

00001d90 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	2200      	movs	r2, #0
    1d9c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2201      	movs	r2, #1
    1da2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	2200      	movs	r2, #0
    1da8:	709a      	strb	r2, [r3, #2]
}
    1daa:	46bd      	mov	sp, r7
    1dac:	b002      	add	sp, #8
    1dae:	bd80      	pop	{r7, pc}

00001db0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1db0:	b580      	push	{r7, lr}
    1db2:	b084      	sub	sp, #16
    1db4:	af00      	add	r7, sp, #0
    1db6:	1c0a      	adds	r2, r1, #0
    1db8:	1dfb      	adds	r3, r7, #7
    1dba:	1c01      	adds	r1, r0, #0
    1dbc:	7019      	strb	r1, [r3, #0]
    1dbe:	1dbb      	adds	r3, r7, #6
    1dc0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dc2:	1dfb      	adds	r3, r7, #7
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	1c18      	adds	r0, r3, #0
    1dc8:	4b0d      	ldr	r3, [pc, #52]	; (1e00 <port_pin_set_output_level+0x50>)
    1dca:	4798      	blx	r3
    1dcc:	1c03      	adds	r3, r0, #0
    1dce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781a      	ldrb	r2, [r3, #0]
    1dd4:	231f      	movs	r3, #31
    1dd6:	4013      	ands	r3, r2
    1dd8:	2201      	movs	r2, #1
    1dda:	1c11      	adds	r1, r2, #0
    1ddc:	4099      	lsls	r1, r3
    1dde:	1c0b      	adds	r3, r1, #0
    1de0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1de2:	1dbb      	adds	r3, r7, #6
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2b00      	cmp	r3, #0
    1de8:	d003      	beq.n	1df2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    1dea:	68fb      	ldr	r3, [r7, #12]
    1dec:	68ba      	ldr	r2, [r7, #8]
    1dee:	619a      	str	r2, [r3, #24]
    1df0:	e002      	b.n	1df8 <port_pin_set_output_level+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1df2:	68fb      	ldr	r3, [r7, #12]
    1df4:	68ba      	ldr	r2, [r7, #8]
    1df6:	615a      	str	r2, [r3, #20]
	}
}
    1df8:	46bd      	mov	sp, r7
    1dfa:	b004      	add	sp, #16
    1dfc:	bd80      	pop	{r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00001d6d 	.word	0x00001d6d

00001e04 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b084      	sub	sp, #16
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e0c:	687b      	ldr	r3, [r7, #4]
    1e0e:	681b      	ldr	r3, [r3, #0]
    1e10:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1e12:	68fb      	ldr	r3, [r7, #12]
    1e14:	69db      	ldr	r3, [r3, #28]
    1e16:	1e5a      	subs	r2, r3, #1
    1e18:	4193      	sbcs	r3, r2
    1e1a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1e1c:	1c18      	adds	r0, r3, #0
    1e1e:	46bd      	mov	sp, r7
    1e20:	b004      	add	sp, #16
    1e22:	bd80      	pop	{r7, pc}

00001e24 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	b082      	sub	sp, #8
    1e28:	af00      	add	r7, sp, #0
    1e2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	2201      	movs	r2, #1
    1e30:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	2200      	movs	r2, #0
    1e36:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	22c0      	movs	r2, #192	; 0xc0
    1e42:	0392      	lsls	r2, r2, #14
    1e44:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2200      	movs	r2, #0
    1e4a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	2200      	movs	r2, #0
    1e50:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	2201      	movs	r2, #1
    1e56:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	2201      	movs	r2, #1
    1e5c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2200      	movs	r2, #0
    1e62:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1e64:	687a      	ldr	r2, [r7, #4]
    1e66:	2324      	movs	r3, #36	; 0x24
    1e68:	2100      	movs	r1, #0
    1e6a:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	3318      	adds	r3, #24
    1e70:	1c18      	adds	r0, r3, #0
    1e72:	2100      	movs	r1, #0
    1e74:	220c      	movs	r2, #12
    1e76:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <spi_get_config_defaults+0x7c>)
    1e78:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	4a09      	ldr	r2, [pc, #36]	; (1ea4 <spi_get_config_defaults+0x80>)
    1e7e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	2200      	movs	r2, #0
    1e84:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	2200      	movs	r2, #0
    1e8a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1e8c:	687b      	ldr	r3, [r7, #4]
    1e8e:	2200      	movs	r2, #0
    1e90:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	2200      	movs	r2, #0
    1e96:	635a      	str	r2, [r3, #52]	; 0x34

};
    1e98:	46bd      	mov	sp, r7
    1e9a:	b002      	add	sp, #8
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	00002155 	.word	0x00002155
    1ea4:	000186a0 	.word	0x000186a0

00001ea8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b082      	sub	sp, #8
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	220a      	movs	r2, #10
    1eb4:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1eb6:	687b      	ldr	r3, [r7, #4]
    1eb8:	2200      	movs	r2, #0
    1eba:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1ebc:	687b      	ldr	r3, [r7, #4]
    1ebe:	2200      	movs	r2, #0
    1ec0:	709a      	strb	r2, [r3, #2]
}
    1ec2:	46bd      	mov	sp, r7
    1ec4:	b002      	add	sp, #8
    1ec6:	bd80      	pop	{r7, pc}

00001ec8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b084      	sub	sp, #16
    1ecc:	af00      	add	r7, sp, #0
    1ece:	6078      	str	r0, [r7, #4]
    1ed0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1ed2:	683b      	ldr	r3, [r7, #0]
    1ed4:	781a      	ldrb	r2, [r3, #0]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1eda:	683b      	ldr	r3, [r7, #0]
    1edc:	785a      	ldrb	r2, [r3, #1]
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1ee2:	683b      	ldr	r3, [r7, #0]
    1ee4:	789a      	ldrb	r2, [r3, #2]
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1eea:	1c3b      	adds	r3, r7, #0
    1eec:	330c      	adds	r3, #12
    1eee:	1c18      	adds	r0, r3, #0
    1ef0:	4b0b      	ldr	r3, [pc, #44]	; (1f20 <spi_attach_slave+0x58>)
    1ef2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1ef4:	1c3b      	adds	r3, r7, #0
    1ef6:	330c      	adds	r3, #12
    1ef8:	2201      	movs	r2, #1
    1efa:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	781a      	ldrb	r2, [r3, #0]
    1f00:	1c3b      	adds	r3, r7, #0
    1f02:	330c      	adds	r3, #12
    1f04:	1c10      	adds	r0, r2, #0
    1f06:	1c19      	adds	r1, r3, #0
    1f08:	4b06      	ldr	r3, [pc, #24]	; (1f24 <spi_attach_slave+0x5c>)
    1f0a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1f0c:	687b      	ldr	r3, [r7, #4]
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	1c18      	adds	r0, r3, #0
    1f12:	2101      	movs	r1, #1
    1f14:	4b04      	ldr	r3, [pc, #16]	; (1f28 <spi_attach_slave+0x60>)
    1f16:	4798      	blx	r3
}
    1f18:	46bd      	mov	sp, r7
    1f1a:	b004      	add	sp, #16
    1f1c:	bd80      	pop	{r7, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	00001d91 	.word	0x00001d91
    1f24:	0000030d 	.word	0x0000030d
    1f28:	00001db1 	.word	0x00001db1

00001f2c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b084      	sub	sp, #16
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	681b      	ldr	r3, [r3, #0]
    1f38:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	1c18      	adds	r0, r3, #0
    1f40:	4b06      	ldr	r3, [pc, #24]	; (1f5c <spi_enable+0x30>)
    1f42:	4798      	blx	r3
    1f44:	1c03      	adds	r3, r0, #0
    1f46:	2b00      	cmp	r3, #0
    1f48:	d1f8      	bne.n	1f3c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f4a:	68fb      	ldr	r3, [r7, #12]
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	2202      	movs	r2, #2
    1f50:	431a      	orrs	r2, r3
    1f52:	68fb      	ldr	r3, [r7, #12]
    1f54:	601a      	str	r2, [r3, #0]
}
    1f56:	46bd      	mov	sp, r7
    1f58:	b004      	add	sp, #16
    1f5a:	bd80      	pop	{r7, pc}
    1f5c:	00001e05 	.word	0x00001e05

00001f60 <configure_spi_master>:

void configure_spi_master(void);

//! [configure_spi]
void configure_spi_master(void)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b090      	sub	sp, #64	; 0x40
    1f64:	af00      	add	r7, sp, #0
//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    1f66:	1d3b      	adds	r3, r7, #4
    1f68:	1c18      	adds	r0, r3, #0
    1f6a:	4b1b      	ldr	r3, [pc, #108]	; (1fd8 <configure_spi_master+0x78>)
    1f6c:	4798      	blx	r3
//! [slave_conf_defaults]
//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    1f6e:	1d3b      	adds	r3, r7, #4
    1f70:	2205      	movs	r2, #5
    1f72:	701a      	strb	r2, [r3, #0]
//! [ss_pin]
//! [slave_init]
	spi_attach_slave(&slave, &slave_dev_config);
    1f74:	4a19      	ldr	r2, [pc, #100]	; (1fdc <configure_spi_master+0x7c>)
    1f76:	1d3b      	adds	r3, r7, #4
    1f78:	1c10      	adds	r0, r2, #0
    1f7a:	1c19      	adds	r1, r3, #0
    1f7c:	4b18      	ldr	r3, [pc, #96]	; (1fe0 <configure_spi_master+0x80>)
    1f7e:	4798      	blx	r3
//! [slave_init]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
    1f80:	1c3b      	adds	r3, r7, #0
    1f82:	3308      	adds	r3, #8
    1f84:	1c18      	adds	r0, r3, #0
    1f86:	4b17      	ldr	r3, [pc, #92]	; (1fe4 <configure_spi_master+0x84>)
    1f88:	4798      	blx	r3
//! [conf_defaults]
//! [mux_setting]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    1f8a:	1c3b      	adds	r3, r7, #0
    1f8c:	3308      	adds	r3, #8
    1f8e:	2280      	movs	r2, #128	; 0x80
    1f90:	0252      	lsls	r2, r2, #9
    1f92:	60da      	str	r2, [r3, #12]
//! [mux_setting]
	/* Configure pad 0 for data in */
//! [di]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    1f94:	1c3b      	adds	r3, r7, #0
    1f96:	3308      	adds	r3, #8
    1f98:	4a13      	ldr	r2, [pc, #76]	; (1fe8 <configure_spi_master+0x88>)
    1f9a:	629a      	str	r2, [r3, #40]	; 0x28
//! [di]
	/* Configure pad 1 as unused */
//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    1f9c:	1c3b      	adds	r3, r7, #0
    1f9e:	3308      	adds	r3, #8
    1fa0:	2201      	movs	r2, #1
    1fa2:	4252      	negs	r2, r2
    1fa4:	62da      	str	r2, [r3, #44]	; 0x2c
//! [ss]
	/* Configure pad 2 for data out */
//! [do]
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    1fa6:	1c3b      	adds	r3, r7, #0
    1fa8:	3308      	adds	r3, #8
    1faa:	4a10      	ldr	r2, [pc, #64]	; (1fec <configure_spi_master+0x8c>)
    1fac:	631a      	str	r2, [r3, #48]	; 0x30
//! [do]
	/* Configure pad 3 for SCK */
//! [sck]
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    1fae:	1c3b      	adds	r3, r7, #0
    1fb0:	3308      	adds	r3, #8
    1fb2:	4a0f      	ldr	r2, [pc, #60]	; (1ff0 <configure_spi_master+0x90>)
    1fb4:	635a      	str	r2, [r3, #52]	; 0x34
//! [sck]
//! [init]
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    1fb6:	490f      	ldr	r1, [pc, #60]	; (1ff4 <configure_spi_master+0x94>)
    1fb8:	4a0f      	ldr	r2, [pc, #60]	; (1ff8 <configure_spi_master+0x98>)
    1fba:	1c3b      	adds	r3, r7, #0
    1fbc:	3308      	adds	r3, #8
    1fbe:	1c08      	adds	r0, r1, #0
    1fc0:	1c11      	adds	r1, r2, #0
    1fc2:	1c1a      	adds	r2, r3, #0
    1fc4:	4b0d      	ldr	r3, [pc, #52]	; (1ffc <configure_spi_master+0x9c>)
    1fc6:	4798      	blx	r3
//! [init]

//! [enable]
	spi_enable(&spi_master_instance);
    1fc8:	4b0a      	ldr	r3, [pc, #40]	; (1ff4 <configure_spi_master+0x94>)
    1fca:	1c18      	adds	r0, r3, #0
    1fcc:	4b0c      	ldr	r3, [pc, #48]	; (2000 <STACK_SIZE>)
    1fce:	4798      	blx	r3
//! [enable]

}
    1fd0:	46bd      	mov	sp, r7
    1fd2:	b010      	add	sp, #64	; 0x40
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	00001ea9 	.word	0x00001ea9
    1fdc:	20000060 	.word	0x20000060
    1fe0:	00001ec9 	.word	0x00001ec9
    1fe4:	00001e25 	.word	0x00001e25
    1fe8:	00040003 	.word	0x00040003
    1fec:	00060003 	.word	0x00060003
    1ff0:	00070003 	.word	0x00070003
    1ff4:	20000054 	.word	0x20000054
    1ff8:	42000800 	.word	0x42000800
    1ffc:	00000dd1 	.word	0x00000dd1
    2000:	00001f2d 	.word	0x00001f2d

00002004 <main>:
//! [configure_spi]

int main(void)
{
    2004:	b598      	push	{r3, r4, r7, lr}
    2006:	af00      	add	r7, sp, #0
//! [main_setup]
//! [system_init]
	system_init();
    2008:	4b0f      	ldr	r3, [pc, #60]	; (2048 <main+0x44>)
    200a:	4798      	blx	r3
//! [system_init]
//! [run_config]
	configure_spi_master();
    200c:	4b0f      	ldr	r3, [pc, #60]	; (204c <main+0x48>)
    200e:	4798      	blx	r3
//! [run_config]
//! [main_setup]

//! [main_use_case]
//! [select_slave]
	spi_select_slave(&spi_master_instance, &slave, true);
    2010:	4a0f      	ldr	r2, [pc, #60]	; (2050 <main+0x4c>)
    2012:	4b10      	ldr	r3, [pc, #64]	; (2054 <main+0x50>)
    2014:	1c10      	adds	r0, r2, #0
    2016:	1c19      	adds	r1, r3, #0
    2018:	2201      	movs	r2, #1
    201a:	4b0f      	ldr	r3, [pc, #60]	; (2058 <main+0x54>)
    201c:	4798      	blx	r3
//! [select_slave]
//! [write]
    //spi_write_buffer_wait(&spi_master_instance, write0, WRITE_LEN);
	spi_transceive_buffer_wait(&spi_master_instance,read0,rx, READ_LEN);
    201e:	490c      	ldr	r1, [pc, #48]	; (2050 <main+0x4c>)
    2020:	4a0e      	ldr	r2, [pc, #56]	; (205c <main+0x58>)
    2022:	4b0f      	ldr	r3, [pc, #60]	; (2060 <main+0x5c>)
    2024:	1c08      	adds	r0, r1, #0
    2026:	1c11      	adds	r1, r2, #0
    2028:	1c1a      	adds	r2, r3, #0
    202a:	2305      	movs	r3, #5
    202c:	4c0d      	ldr	r4, [pc, #52]	; (2064 <main+0x60>)
    202e:	47a0      	blx	r4
	//spi_write_buffer_wait(&spi_master_instance, writeModeReg, WRITE_MO_LEN);
	//spi_transceive_buffer_wait(&spi_master_instance,readModeReg,rx, READ_MO_LEN);
//! [write]
//! [deselect_slave]
	spi_select_slave(&spi_master_instance, &slave, false);
    2030:	4a07      	ldr	r2, [pc, #28]	; (2050 <main+0x4c>)
    2032:	4b08      	ldr	r3, [pc, #32]	; (2054 <main+0x50>)
    2034:	1c10      	adds	r0, r2, #0
    2036:	1c19      	adds	r1, r3, #0
    2038:	2200      	movs	r2, #0
    203a:	4b07      	ldr	r3, [pc, #28]	; (2058 <main+0x54>)
    203c:	4798      	blx	r3
    203e:	2300      	movs	r3, #0
	//while (true) {
		/* Infinite loop */
	//}
//! [inf_loop]
//! [main_use_case]
}
    2040:	1c18      	adds	r0, r3, #0
    2042:	46bd      	mov	sp, r7
    2044:	bd98      	pop	{r3, r4, r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	00001bf9 	.word	0x00001bf9
    204c:	00001f61 	.word	0x00001f61
    2050:	20000054 	.word	0x20000054
    2054:	20000060 	.word	0x20000060
    2058:	00000ec5 	.word	0x00000ec5
    205c:	20000004 	.word	0x20000004
    2060:	2000000c 	.word	0x2000000c
    2064:	00000fb1 	.word	0x00000fb1

00002068 <__aeabi_uidiv>:
    2068:	2900      	cmp	r1, #0
    206a:	d034      	beq.n	20d6 <.udivsi3_skip_div0_test+0x6a>

0000206c <.udivsi3_skip_div0_test>:
    206c:	2301      	movs	r3, #1
    206e:	2200      	movs	r2, #0
    2070:	b410      	push	{r4}
    2072:	4288      	cmp	r0, r1
    2074:	d32c      	bcc.n	20d0 <.udivsi3_skip_div0_test+0x64>
    2076:	2401      	movs	r4, #1
    2078:	0724      	lsls	r4, r4, #28
    207a:	42a1      	cmp	r1, r4
    207c:	d204      	bcs.n	2088 <.udivsi3_skip_div0_test+0x1c>
    207e:	4281      	cmp	r1, r0
    2080:	d202      	bcs.n	2088 <.udivsi3_skip_div0_test+0x1c>
    2082:	0109      	lsls	r1, r1, #4
    2084:	011b      	lsls	r3, r3, #4
    2086:	e7f8      	b.n	207a <.udivsi3_skip_div0_test+0xe>
    2088:	00e4      	lsls	r4, r4, #3
    208a:	42a1      	cmp	r1, r4
    208c:	d204      	bcs.n	2098 <.udivsi3_skip_div0_test+0x2c>
    208e:	4281      	cmp	r1, r0
    2090:	d202      	bcs.n	2098 <.udivsi3_skip_div0_test+0x2c>
    2092:	0049      	lsls	r1, r1, #1
    2094:	005b      	lsls	r3, r3, #1
    2096:	e7f8      	b.n	208a <.udivsi3_skip_div0_test+0x1e>
    2098:	4288      	cmp	r0, r1
    209a:	d301      	bcc.n	20a0 <.udivsi3_skip_div0_test+0x34>
    209c:	1a40      	subs	r0, r0, r1
    209e:	431a      	orrs	r2, r3
    20a0:	084c      	lsrs	r4, r1, #1
    20a2:	42a0      	cmp	r0, r4
    20a4:	d302      	bcc.n	20ac <.udivsi3_skip_div0_test+0x40>
    20a6:	1b00      	subs	r0, r0, r4
    20a8:	085c      	lsrs	r4, r3, #1
    20aa:	4322      	orrs	r2, r4
    20ac:	088c      	lsrs	r4, r1, #2
    20ae:	42a0      	cmp	r0, r4
    20b0:	d302      	bcc.n	20b8 <.udivsi3_skip_div0_test+0x4c>
    20b2:	1b00      	subs	r0, r0, r4
    20b4:	089c      	lsrs	r4, r3, #2
    20b6:	4322      	orrs	r2, r4
    20b8:	08cc      	lsrs	r4, r1, #3
    20ba:	42a0      	cmp	r0, r4
    20bc:	d302      	bcc.n	20c4 <.udivsi3_skip_div0_test+0x58>
    20be:	1b00      	subs	r0, r0, r4
    20c0:	08dc      	lsrs	r4, r3, #3
    20c2:	4322      	orrs	r2, r4
    20c4:	2800      	cmp	r0, #0
    20c6:	d003      	beq.n	20d0 <.udivsi3_skip_div0_test+0x64>
    20c8:	091b      	lsrs	r3, r3, #4
    20ca:	d001      	beq.n	20d0 <.udivsi3_skip_div0_test+0x64>
    20cc:	0909      	lsrs	r1, r1, #4
    20ce:	e7e3      	b.n	2098 <.udivsi3_skip_div0_test+0x2c>
    20d0:	1c10      	adds	r0, r2, #0
    20d2:	bc10      	pop	{r4}
    20d4:	4770      	bx	lr
    20d6:	2800      	cmp	r0, #0
    20d8:	d001      	beq.n	20de <.udivsi3_skip_div0_test+0x72>
    20da:	2000      	movs	r0, #0
    20dc:	43c0      	mvns	r0, r0
    20de:	b407      	push	{r0, r1, r2}
    20e0:	4802      	ldr	r0, [pc, #8]	; (20ec <.udivsi3_skip_div0_test+0x80>)
    20e2:	a102      	add	r1, pc, #8	; (adr r1, 20ec <.udivsi3_skip_div0_test+0x80>)
    20e4:	1840      	adds	r0, r0, r1
    20e6:	9002      	str	r0, [sp, #8]
    20e8:	bd03      	pop	{r0, r1, pc}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	00000019 	.word	0x00000019

000020f0 <__aeabi_uidivmod>:
    20f0:	2900      	cmp	r1, #0
    20f2:	d0f0      	beq.n	20d6 <.udivsi3_skip_div0_test+0x6a>
    20f4:	b503      	push	{r0, r1, lr}
    20f6:	f7ff ffb9 	bl	206c <.udivsi3_skip_div0_test>
    20fa:	bc0e      	pop	{r1, r2, r3}
    20fc:	4342      	muls	r2, r0
    20fe:	1a89      	subs	r1, r1, r2
    2100:	4718      	bx	r3
    2102:	46c0      	nop			; (mov r8, r8)

00002104 <__aeabi_idiv0>:
    2104:	4770      	bx	lr
    2106:	46c0      	nop			; (mov r8, r8)

00002108 <__libc_init_array>:
    2108:	b570      	push	{r4, r5, r6, lr}
    210a:	4b0e      	ldr	r3, [pc, #56]	; (2144 <__libc_init_array+0x3c>)
    210c:	4d0e      	ldr	r5, [pc, #56]	; (2148 <__libc_init_array+0x40>)
    210e:	2400      	movs	r4, #0
    2110:	1aed      	subs	r5, r5, r3
    2112:	10ad      	asrs	r5, r5, #2
    2114:	1c1e      	adds	r6, r3, #0
    2116:	42ac      	cmp	r4, r5
    2118:	d004      	beq.n	2124 <__libc_init_array+0x1c>
    211a:	00a3      	lsls	r3, r4, #2
    211c:	58f3      	ldr	r3, [r6, r3]
    211e:	4798      	blx	r3
    2120:	3401      	adds	r4, #1
    2122:	e7f8      	b.n	2116 <__libc_init_array+0xe>
    2124:	f000 f84e 	bl	21c4 <_init>
    2128:	4b08      	ldr	r3, [pc, #32]	; (214c <__libc_init_array+0x44>)
    212a:	4d09      	ldr	r5, [pc, #36]	; (2150 <__libc_init_array+0x48>)
    212c:	2400      	movs	r4, #0
    212e:	1aed      	subs	r5, r5, r3
    2130:	10ad      	asrs	r5, r5, #2
    2132:	1c1e      	adds	r6, r3, #0
    2134:	42ac      	cmp	r4, r5
    2136:	d004      	beq.n	2142 <__libc_init_array+0x3a>
    2138:	00a3      	lsls	r3, r4, #2
    213a:	58f3      	ldr	r3, [r6, r3]
    213c:	4798      	blx	r3
    213e:	3401      	adds	r4, #1
    2140:	e7f8      	b.n	2134 <__libc_init_array+0x2c>
    2142:	bd70      	pop	{r4, r5, r6, pc}
    2144:	000021d0 	.word	0x000021d0
    2148:	000021d0 	.word	0x000021d0
    214c:	000021d0 	.word	0x000021d0
    2150:	000021d4 	.word	0x000021d4

00002154 <memset>:
    2154:	1c03      	adds	r3, r0, #0
    2156:	1882      	adds	r2, r0, r2
    2158:	4293      	cmp	r3, r2
    215a:	d002      	beq.n	2162 <memset+0xe>
    215c:	7019      	strb	r1, [r3, #0]
    215e:	3301      	adds	r3, #1
    2160:	e7fa      	b.n	2158 <memset+0x4>
    2162:	4770      	bx	lr
    2164:	42000800 	.word	0x42000800
    2168:	42000c00 	.word	0x42000c00
    216c:	42001000 	.word	0x42001000
    2170:	42001400 	.word	0x42001400
    2174:	42001800 	.word	0x42001800
    2178:	42001c00 	.word	0x42001c00
    217c:	000012be 	.word	0x000012be
    2180:	0000133c 	.word	0x0000133c
    2184:	0000133c 	.word	0x0000133c
    2188:	000012e2 	.word	0x000012e2
    218c:	000012dc 	.word	0x000012dc
    2190:	000012e8 	.word	0x000012e8
    2194:	000012c4 	.word	0x000012c4
    2198:	000012ee 	.word	0x000012ee
    219c:	00001322 	.word	0x00001322
    21a0:	00001408 	.word	0x00001408
    21a4:	00001458 	.word	0x00001458
    21a8:	00001458 	.word	0x00001458
    21ac:	00001454 	.word	0x00001454
    21b0:	000013fa 	.word	0x000013fa
    21b4:	0000141a 	.word	0x0000141a
    21b8:	000013ea 	.word	0x000013ea
    21bc:	0000142c 	.word	0x0000142c
    21c0:	0000143e 	.word	0x0000143e

000021c4 <_init>:
    21c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ca:	bc08      	pop	{r3}
    21cc:	469e      	mov	lr, r3
    21ce:	4770      	bx	lr

000021d0 <__init_array_start>:
    21d0:	000000d9 	.word	0x000000d9

000021d4 <_fini>:
    21d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21da:	bc08      	pop	{r3}
    21dc:	469e      	mov	lr, r3
    21de:	4770      	bx	lr

000021e0 <__fini_array_start>:
    21e0:	000000b1 	.word	0x000000b1
