
SPI_QUICK_START_MASTER1_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002644  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00002644  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000014  00002658  00010014  2**2
                  ALLOC
  3 .stack        00002004  20000064  000026a8  00010014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00013091  00000000  00000000  00010097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000187d  00000000  00000000  00023128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001668  00000000  00000000  000249a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000468  00000000  00000000  0002600d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a8  00000000  00000000  00026475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001832f  00000000  00000000  0002681d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007a6a  00000000  00000000  0003eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089610  00000000  00000000  000465b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e24  00000000  00000000  000cfbc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002068 	.word	0x20002068
       4:	00001f7d 	.word	0x00001f7d
       8:	0000206d 	.word	0x0000206d
       c:	0000206d 	.word	0x0000206d
	...
      2c:	0000206d 	.word	0x0000206d
	...
      38:	0000206d 	.word	0x0000206d
      3c:	0000206d 	.word	0x0000206d
      40:	0000206d 	.word	0x0000206d
      44:	0000206d 	.word	0x0000206d
      48:	0000206d 	.word	0x0000206d
      4c:	0000206d 	.word	0x0000206d
      50:	0000206d 	.word	0x0000206d
      54:	0000206d 	.word	0x0000206d
      58:	0000206d 	.word	0x0000206d
      5c:	0000206d 	.word	0x0000206d
      60:	0000206d 	.word	0x0000206d
      64:	0000206d 	.word	0x0000206d
      68:	0000206d 	.word	0x0000206d
      6c:	0000206d 	.word	0x0000206d
      70:	0000206d 	.word	0x0000206d
      74:	0000206d 	.word	0x0000206d
      78:	0000206d 	.word	0x0000206d
      7c:	0000206d 	.word	0x0000206d
      80:	0000206d 	.word	0x0000206d
      84:	0000206d 	.word	0x0000206d
      88:	0000206d 	.word	0x0000206d
      8c:	0000206d 	.word	0x0000206d
      90:	0000206d 	.word	0x0000206d
      94:	0000206d 	.word	0x0000206d
      98:	0000206d 	.word	0x0000206d
      9c:	0000206d 	.word	0x0000206d
      a0:	0000206d 	.word	0x0000206d
      a4:	0000206d 	.word	0x0000206d
      a8:	0000206d 	.word	0x0000206d
      ac:	0000206d 	.word	0x0000206d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000014 	.word	0x20000014
      d0:	00000000 	.word	0x00000000
      d4:	00002644 	.word	0x00002644

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	00002644 	.word	0x00002644
     104:	20000018 	.word	0x20000018
     108:	00002644 	.word	0x00002644
     10c:	00000000 	.word	0x00000000

00000110 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
     116:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     118:	687b      	ldr	r3, [r7, #4]
     11a:	2b00      	cmp	r3, #0
     11c:	d00c      	beq.n	138 <delay_cycles+0x28>
		SysTick->LOAD = n;
     11e:	4b08      	ldr	r3, [pc, #32]	; (140 <delay_cycles+0x30>)
     120:	687a      	ldr	r2, [r7, #4]
     122:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     124:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_cycles+0x30>)
     126:	2200      	movs	r2, #0
     128:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	4b04      	ldr	r3, [pc, #16]	; (140 <delay_cycles+0x30>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	2380      	movs	r3, #128	; 0x80
     132:	025b      	lsls	r3, r3, #9
     134:	4013      	ands	r3, r2
     136:	d0f9      	beq.n	12c <delay_cycles+0x1c>
		};
	}
}
     138:	46bd      	mov	sp, r7
     13a:	b002      	add	sp, #8
     13c:	bd80      	pop	{r7, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	e000e010 	.word	0xe000e010

00000144 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     144:	b580      	push	{r7, lr}
     146:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     148:	2000      	movs	r0, #0
     14a:	4b10      	ldr	r3, [pc, #64]	; (18c <delay_init+0x48>)
     14c:	4798      	blx	r3
     14e:	1c02      	adds	r2, r0, #0
     150:	4b0f      	ldr	r3, [pc, #60]	; (190 <delay_init+0x4c>)
     152:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x4c>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	4b0e      	ldr	r3, [pc, #56]	; (194 <delay_init+0x50>)
     15a:	1c10      	adds	r0, r2, #0
     15c:	22fa      	movs	r2, #250	; 0xfa
     15e:	0091      	lsls	r1, r2, #2
     160:	4798      	blx	r3
     162:	1c03      	adds	r3, r0, #0
     164:	1c1a      	adds	r2, r3, #0
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <delay_init+0x4c>)
     168:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x4c>)
     16c:	681a      	ldr	r2, [r3, #0]
     16e:	4b09      	ldr	r3, [pc, #36]	; (194 <delay_init+0x50>)
     170:	1c10      	adds	r0, r2, #0
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	1c03      	adds	r3, r0, #0
     17a:	1c1a      	adds	r2, r3, #0
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x54>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x58>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00001b29 	.word	0x00001b29
     190:	20000000 	.word	0x20000000
     194:	00002445 	.word	0x00002445
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     1aa:	4b06      	ldr	r3, [pc, #24]	; (1c4 <delay_cycles_us+0x24>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	1c18      	adds	r0, r3, #0
     1b0:	4b05      	ldr	r3, [pc, #20]	; (1c8 <delay_cycles_us+0x28>)
     1b2:	4798      	blx	r3
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_us+0xa>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     1be:	46bd      	mov	sp, r7
     1c0:	b002      	add	sp, #8
     1c2:	bd80      	pop	{r7, pc}
     1c4:	20000004 	.word	0x20000004
     1c8:	00000111 	.word	0x00000111

000001cc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     1d2:	4b0f      	ldr	r3, [pc, #60]	; (210 <cpu_irq_enter_critical+0x44>)
     1d4:	681b      	ldr	r3, [r3, #0]
     1d6:	2b00      	cmp	r3, #0
     1d8:	d112      	bne.n	200 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1da:	f3ef 8310 	mrs	r3, PRIMASK
     1de:	607b      	str	r3, [r7, #4]
  return(result);
     1e0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     1e2:	2b00      	cmp	r3, #0
     1e4:	d109      	bne.n	1fa <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     1e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1e8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1ec:	4b09      	ldr	r3, [pc, #36]	; (214 <cpu_irq_enter_critical+0x48>)
     1ee:	2200      	movs	r2, #0
     1f0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1f2:	4b09      	ldr	r3, [pc, #36]	; (218 <cpu_irq_enter_critical+0x4c>)
     1f4:	2201      	movs	r2, #1
     1f6:	701a      	strb	r2, [r3, #0]
     1f8:	e002      	b.n	200 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1fa:	4b07      	ldr	r3, [pc, #28]	; (218 <cpu_irq_enter_critical+0x4c>)
     1fc:	2200      	movs	r2, #0
     1fe:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     200:	4b03      	ldr	r3, [pc, #12]	; (210 <cpu_irq_enter_critical+0x44>)
     202:	681b      	ldr	r3, [r3, #0]
     204:	1c5a      	adds	r2, r3, #1
     206:	4b02      	ldr	r3, [pc, #8]	; (210 <cpu_irq_enter_critical+0x44>)
     208:	601a      	str	r2, [r3, #0]
}
     20a:	46bd      	mov	sp, r7
     20c:	b002      	add	sp, #8
     20e:	bd80      	pop	{r7, pc}
     210:	20000030 	.word	0x20000030
     214:	20000008 	.word	0x20000008
     218:	20000034 	.word	0x20000034

0000021c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     21c:	b580      	push	{r7, lr}
     21e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     220:	4b0a      	ldr	r3, [pc, #40]	; (24c <cpu_irq_leave_critical+0x30>)
     222:	681b      	ldr	r3, [r3, #0]
     224:	1e5a      	subs	r2, r3, #1
     226:	4b09      	ldr	r3, [pc, #36]	; (24c <cpu_irq_leave_critical+0x30>)
     228:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     22a:	4b08      	ldr	r3, [pc, #32]	; (24c <cpu_irq_leave_critical+0x30>)
     22c:	681b      	ldr	r3, [r3, #0]
     22e:	2b00      	cmp	r3, #0
     230:	d10a      	bne.n	248 <cpu_irq_leave_critical+0x2c>
     232:	4b07      	ldr	r3, [pc, #28]	; (250 <cpu_irq_leave_critical+0x34>)
     234:	781b      	ldrb	r3, [r3, #0]
     236:	b2db      	uxtb	r3, r3
     238:	2b00      	cmp	r3, #0
     23a:	d005      	beq.n	248 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     23c:	4b05      	ldr	r3, [pc, #20]	; (254 <cpu_irq_leave_critical+0x38>)
     23e:	2201      	movs	r2, #1
     240:	701a      	strb	r2, [r3, #0]
     242:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     246:	b662      	cpsie	i
	}
}
     248:	46bd      	mov	sp, r7
     24a:	bd80      	pop	{r7, pc}
     24c:	20000030 	.word	0x20000030
     250:	20000034 	.word	0x20000034
     254:	20000008 	.word	0x20000008

00000258 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     258:	b580      	push	{r7, lr}
     25a:	b084      	sub	sp, #16
     25c:	af00      	add	r7, sp, #0
     25e:	1c02      	adds	r2, r0, #0
     260:	1dfb      	adds	r3, r7, #7
     262:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     264:	230f      	movs	r3, #15
     266:	18fb      	adds	r3, r7, r3
     268:	1dfa      	adds	r2, r7, #7
     26a:	7812      	ldrb	r2, [r2, #0]
     26c:	09d2      	lsrs	r2, r2, #7
     26e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     270:	230e      	movs	r3, #14
     272:	18fb      	adds	r3, r7, r3
     274:	1dfa      	adds	r2, r7, #7
     276:	7812      	ldrb	r2, [r2, #0]
     278:	0952      	lsrs	r2, r2, #5
     27a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     27c:	4b0d      	ldr	r3, [pc, #52]	; (2b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     27e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     280:	230f      	movs	r3, #15
     282:	18fb      	adds	r3, r7, r3
     284:	781b      	ldrb	r3, [r3, #0]
     286:	2b00      	cmp	r3, #0
     288:	d10f      	bne.n	2aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     28a:	230f      	movs	r3, #15
     28c:	18fb      	adds	r3, r7, r3
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	009b      	lsls	r3, r3, #2
     292:	2210      	movs	r2, #16
     294:	4694      	mov	ip, r2
     296:	44bc      	add	ip, r7
     298:	4463      	add	r3, ip
     29a:	3b08      	subs	r3, #8
     29c:	681a      	ldr	r2, [r3, #0]
     29e:	230e      	movs	r3, #14
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	01db      	lsls	r3, r3, #7
     2a6:	18d3      	adds	r3, r2, r3
     2a8:	e000      	b.n	2ac <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2aa:	2300      	movs	r3, #0
	}
}
     2ac:	1c18      	adds	r0, r3, #0
     2ae:	46bd      	mov	sp, r7
     2b0:	b004      	add	sp, #16
     2b2:	bd80      	pop	{r7, pc}
     2b4:	41004400 	.word	0x41004400

000002b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2b8:	b580      	push	{r7, lr}
     2ba:	b082      	sub	sp, #8
     2bc:	af00      	add	r7, sp, #0
     2be:	1c02      	adds	r2, r0, #0
     2c0:	1dfb      	adds	r3, r7, #7
     2c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	1c18      	adds	r0, r3, #0
     2ca:	4b03      	ldr	r3, [pc, #12]	; (2d8 <port_get_group_from_gpio_pin+0x20>)
     2cc:	4798      	blx	r3
     2ce:	1c03      	adds	r3, r0, #0
}
     2d0:	1c18      	adds	r0, r3, #0
     2d2:	46bd      	mov	sp, r7
     2d4:	b002      	add	sp, #8
     2d6:	bd80      	pop	{r7, pc}
     2d8:	00000259 	.word	0x00000259

000002dc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     2dc:	b580      	push	{r7, lr}
     2de:	b082      	sub	sp, #8
     2e0:	af00      	add	r7, sp, #0
     2e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2200      	movs	r2, #0
     2e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     2ea:	687b      	ldr	r3, [r7, #4]
     2ec:	2201      	movs	r2, #1
     2ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     2f0:	687b      	ldr	r3, [r7, #4]
     2f2:	2200      	movs	r2, #0
     2f4:	709a      	strb	r2, [r3, #2]
}
     2f6:	46bd      	mov	sp, r7
     2f8:	b002      	add	sp, #8
     2fa:	bd80      	pop	{r7, pc}

000002fc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	1c02      	adds	r2, r0, #0
     304:	1dfb      	adds	r3, r7, #7
     306:	701a      	strb	r2, [r3, #0]
     308:	1dbb      	adds	r3, r7, #6
     30a:	1c0a      	adds	r2, r1, #0
     30c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     30e:	1dfb      	adds	r3, r7, #7
     310:	781b      	ldrb	r3, [r3, #0]
     312:	1c18      	adds	r0, r3, #0
     314:	4b0c      	ldr	r3, [pc, #48]	; (348 <port_pin_set_output_level+0x4c>)
     316:	4798      	blx	r3
     318:	1c03      	adds	r3, r0, #0
     31a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     31c:	1dfb      	adds	r3, r7, #7
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	221f      	movs	r2, #31
     322:	4013      	ands	r3, r2
     324:	2201      	movs	r2, #1
     326:	409a      	lsls	r2, r3
     328:	1c13      	adds	r3, r2, #0
     32a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     32c:	1dbb      	adds	r3, r7, #6
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	2b00      	cmp	r3, #0
     332:	d003      	beq.n	33c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     334:	68fb      	ldr	r3, [r7, #12]
     336:	68ba      	ldr	r2, [r7, #8]
     338:	619a      	str	r2, [r3, #24]
     33a:	e002      	b.n	342 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     33c:	68fb      	ldr	r3, [r7, #12]
     33e:	68ba      	ldr	r2, [r7, #8]
     340:	615a      	str	r2, [r3, #20]
	}
}
     342:	46bd      	mov	sp, r7
     344:	b004      	add	sp, #16
     346:	bd80      	pop	{r7, pc}
     348:	000002b9 	.word	0x000002b9

0000034c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     34c:	b580      	push	{r7, lr}
     34e:	b082      	sub	sp, #8
     350:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     352:	1d3b      	adds	r3, r7, #4
     354:	1c18      	adds	r0, r3, #0
     356:	4b0e      	ldr	r3, [pc, #56]	; (390 <system_board_init+0x44>)
     358:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     35a:	1d3b      	adds	r3, r7, #4
     35c:	2201      	movs	r2, #1
     35e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     360:	1d3b      	adds	r3, r7, #4
     362:	203e      	movs	r0, #62	; 0x3e
     364:	1c19      	adds	r1, r3, #0
     366:	4b0b      	ldr	r3, [pc, #44]	; (394 <system_board_init+0x48>)
     368:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     36a:	203e      	movs	r0, #62	; 0x3e
     36c:	2101      	movs	r1, #1
     36e:	4b0a      	ldr	r3, [pc, #40]	; (398 <system_board_init+0x4c>)
     370:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     372:	1d3b      	adds	r3, r7, #4
     374:	2200      	movs	r2, #0
     376:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     378:	1d3b      	adds	r3, r7, #4
     37a:	2201      	movs	r2, #1
     37c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     37e:	1d3b      	adds	r3, r7, #4
     380:	200f      	movs	r0, #15
     382:	1c19      	adds	r1, r3, #0
     384:	4b03      	ldr	r3, [pc, #12]	; (394 <system_board_init+0x48>)
     386:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     388:	46bd      	mov	sp, r7
     38a:	b002      	add	sp, #8
     38c:	bd80      	pop	{r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	000002dd 	.word	0x000002dd
     394:	000003c5 	.word	0x000003c5
     398:	000002fd 	.word	0x000002fd

0000039c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     39c:	b580      	push	{r7, lr}
     39e:	b082      	sub	sp, #8
     3a0:	af00      	add	r7, sp, #0
     3a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3a4:	687b      	ldr	r3, [r7, #4]
     3a6:	2280      	movs	r2, #128	; 0x80
     3a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	2200      	movs	r2, #0
     3ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	2201      	movs	r2, #1
     3b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	2200      	movs	r2, #0
     3ba:	70da      	strb	r2, [r3, #3]
}
     3bc:	46bd      	mov	sp, r7
     3be:	b002      	add	sp, #8
     3c0:	bd80      	pop	{r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)

000003c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3c4:	b580      	push	{r7, lr}
     3c6:	b084      	sub	sp, #16
     3c8:	af00      	add	r7, sp, #0
     3ca:	1c02      	adds	r2, r0, #0
     3cc:	6039      	str	r1, [r7, #0]
     3ce:	1dfb      	adds	r3, r7, #7
     3d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     3d2:	230c      	movs	r3, #12
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	1c18      	adds	r0, r3, #0
     3d8:	4b0f      	ldr	r3, [pc, #60]	; (418 <port_pin_set_config+0x54>)
     3da:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     3dc:	230c      	movs	r3, #12
     3de:	18fb      	adds	r3, r7, r3
     3e0:	2280      	movs	r2, #128	; 0x80
     3e2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3e4:	683b      	ldr	r3, [r7, #0]
     3e6:	781a      	ldrb	r2, [r3, #0]
     3e8:	230c      	movs	r3, #12
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3ee:	683b      	ldr	r3, [r7, #0]
     3f0:	785a      	ldrb	r2, [r3, #1]
     3f2:	230c      	movs	r3, #12
     3f4:	18fb      	adds	r3, r7, r3
     3f6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3f8:	683b      	ldr	r3, [r7, #0]
     3fa:	789a      	ldrb	r2, [r3, #2]
     3fc:	230c      	movs	r3, #12
     3fe:	18fb      	adds	r3, r7, r3
     400:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     402:	1dfb      	adds	r3, r7, #7
     404:	781a      	ldrb	r2, [r3, #0]
     406:	230c      	movs	r3, #12
     408:	18fb      	adds	r3, r7, r3
     40a:	1c10      	adds	r0, r2, #0
     40c:	1c19      	adds	r1, r3, #0
     40e:	4b03      	ldr	r3, [pc, #12]	; (41c <port_pin_set_config+0x58>)
     410:	4798      	blx	r3
}
     412:	46bd      	mov	sp, r7
     414:	b004      	add	sp, #16
     416:	bd80      	pop	{r7, pc}
     418:	0000039d 	.word	0x0000039d
     41c:	00001efd 	.word	0x00001efd

00000420 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     420:	b580      	push	{r7, lr}
     422:	b082      	sub	sp, #8
     424:	af00      	add	r7, sp, #0
     426:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2200      	movs	r2, #0
     42c:	701a      	strb	r2, [r3, #0]
}
     42e:	46bd      	mov	sp, r7
     430:	b002      	add	sp, #8
     432:	bd80      	pop	{r7, pc}

00000434 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     434:	b580      	push	{r7, lr}
     436:	b086      	sub	sp, #24
     438:	af00      	add	r7, sp, #0
     43a:	60f8      	str	r0, [r7, #12]
     43c:	60b9      	str	r1, [r7, #8]
     43e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     440:	2316      	movs	r3, #22
     442:	18fb      	adds	r3, r7, r3
     444:	2200      	movs	r2, #0
     446:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     448:	68bb      	ldr	r3, [r7, #8]
     44a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     44c:	68bb      	ldr	r3, [r7, #8]
     44e:	085a      	lsrs	r2, r3, #1
     450:	68fb      	ldr	r3, [r7, #12]
     452:	429a      	cmp	r2, r3
     454:	d201      	bcs.n	45a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     456:	2340      	movs	r3, #64	; 0x40
     458:	e026      	b.n	4a8 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     45a:	68bb      	ldr	r3, [r7, #8]
     45c:	085b      	lsrs	r3, r3, #1
     45e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     460:	e00a      	b.n	478 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     462:	693a      	ldr	r2, [r7, #16]
     464:	68fb      	ldr	r3, [r7, #12]
     466:	1ad3      	subs	r3, r2, r3
     468:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     46a:	2316      	movs	r3, #22
     46c:	18fb      	adds	r3, r7, r3
     46e:	881a      	ldrh	r2, [r3, #0]
     470:	2316      	movs	r3, #22
     472:	18fb      	adds	r3, r7, r3
     474:	3201      	adds	r2, #1
     476:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     478:	693a      	ldr	r2, [r7, #16]
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	429a      	cmp	r2, r3
     47e:	d2f0      	bcs.n	462 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     480:	2316      	movs	r3, #22
     482:	18fb      	adds	r3, r7, r3
     484:	2216      	movs	r2, #22
     486:	18ba      	adds	r2, r7, r2
     488:	8812      	ldrh	r2, [r2, #0]
     48a:	3a01      	subs	r2, #1
     48c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     48e:	2316      	movs	r3, #22
     490:	18fb      	adds	r3, r7, r3
     492:	881b      	ldrh	r3, [r3, #0]
     494:	2bff      	cmp	r3, #255	; 0xff
     496:	d901      	bls.n	49c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     498:	2340      	movs	r3, #64	; 0x40
     49a:	e005      	b.n	4a8 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	2216      	movs	r2, #22
     4a0:	18ba      	adds	r2, r7, r2
     4a2:	8812      	ldrh	r2, [r2, #0]
     4a4:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     4a6:	2300      	movs	r3, #0
	}
}
     4a8:	1c18      	adds	r0, r3, #0
     4aa:	46bd      	mov	sp, r7
     4ac:	b006      	add	sp, #24
     4ae:	bd80      	pop	{r7, pc}

000004b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	1c02      	adds	r2, r0, #0
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	701a      	strb	r2, [r3, #0]
     4bc:	1dbb      	adds	r3, r7, #6
     4be:	1c0a      	adds	r2, r1, #0
     4c0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     4c2:	4b1a      	ldr	r3, [pc, #104]	; (52c <sercom_set_gclk_generator+0x7c>)
     4c4:	781b      	ldrb	r3, [r3, #0]
     4c6:	2201      	movs	r2, #1
     4c8:	4053      	eors	r3, r2
     4ca:	b2db      	uxtb	r3, r3
     4cc:	2b00      	cmp	r3, #0
     4ce:	d103      	bne.n	4d8 <sercom_set_gclk_generator+0x28>
     4d0:	1dbb      	adds	r3, r7, #6
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d01b      	beq.n	510 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     4d8:	230c      	movs	r3, #12
     4da:	18fb      	adds	r3, r7, r3
     4dc:	1c18      	adds	r0, r3, #0
     4de:	4b14      	ldr	r3, [pc, #80]	; (530 <sercom_set_gclk_generator+0x80>)
     4e0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     4e2:	230c      	movs	r3, #12
     4e4:	18fb      	adds	r3, r7, r3
     4e6:	1dfa      	adds	r2, r7, #7
     4e8:	7812      	ldrb	r2, [r2, #0]
     4ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4ec:	230c      	movs	r3, #12
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	2013      	movs	r0, #19
     4f2:	1c19      	adds	r1, r3, #0
     4f4:	4b0f      	ldr	r3, [pc, #60]	; (534 <sercom_set_gclk_generator+0x84>)
     4f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4f8:	2013      	movs	r0, #19
     4fa:	4b0f      	ldr	r3, [pc, #60]	; (538 <sercom_set_gclk_generator+0x88>)
     4fc:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <sercom_set_gclk_generator+0x7c>)
     500:	1dfa      	adds	r2, r7, #7
     502:	7812      	ldrb	r2, [r2, #0]
     504:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     506:	4b09      	ldr	r3, [pc, #36]	; (52c <sercom_set_gclk_generator+0x7c>)
     508:	2201      	movs	r2, #1
     50a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     50c:	2300      	movs	r3, #0
     50e:	e008      	b.n	522 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     510:	4b06      	ldr	r3, [pc, #24]	; (52c <sercom_set_gclk_generator+0x7c>)
     512:	785b      	ldrb	r3, [r3, #1]
     514:	1dfa      	adds	r2, r7, #7
     516:	7812      	ldrb	r2, [r2, #0]
     518:	429a      	cmp	r2, r3
     51a:	d101      	bne.n	520 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     51c:	2300      	movs	r3, #0
     51e:	e000      	b.n	522 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     520:	231d      	movs	r3, #29
}
     522:	1c18      	adds	r0, r3, #0
     524:	46bd      	mov	sp, r7
     526:	b004      	add	sp, #16
     528:	bd80      	pop	{r7, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	20000038 	.word	0x20000038
     530:	00000421 	.word	0x00000421
     534:	00001c11 	.word	0x00001c11
     538:	00001c55 	.word	0x00001c55

0000053c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     53c:	b580      	push	{r7, lr}
     53e:	b082      	sub	sp, #8
     540:	af00      	add	r7, sp, #0
     542:	6078      	str	r0, [r7, #4]
     544:	1c0a      	adds	r2, r1, #0
     546:	1cfb      	adds	r3, r7, #3
     548:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	4a4d      	ldr	r2, [pc, #308]	; (684 <_sercom_get_default_pad+0x148>)
     54e:	4293      	cmp	r3, r2
     550:	d03f      	beq.n	5d2 <_sercom_get_default_pad+0x96>
     552:	4a4c      	ldr	r2, [pc, #304]	; (684 <_sercom_get_default_pad+0x148>)
     554:	4293      	cmp	r3, r2
     556:	d806      	bhi.n	566 <_sercom_get_default_pad+0x2a>
     558:	4a4b      	ldr	r2, [pc, #300]	; (688 <_sercom_get_default_pad+0x14c>)
     55a:	4293      	cmp	r3, r2
     55c:	d00f      	beq.n	57e <_sercom_get_default_pad+0x42>
     55e:	4a4b      	ldr	r2, [pc, #300]	; (68c <_sercom_get_default_pad+0x150>)
     560:	4293      	cmp	r3, r2
     562:	d021      	beq.n	5a8 <_sercom_get_default_pad+0x6c>
     564:	e089      	b.n	67a <_sercom_get_default_pad+0x13e>
     566:	4a4a      	ldr	r2, [pc, #296]	; (690 <_sercom_get_default_pad+0x154>)
     568:	4293      	cmp	r3, r2
     56a:	d100      	bne.n	56e <_sercom_get_default_pad+0x32>
     56c:	e05b      	b.n	626 <_sercom_get_default_pad+0xea>
     56e:	4a49      	ldr	r2, [pc, #292]	; (694 <_sercom_get_default_pad+0x158>)
     570:	4293      	cmp	r3, r2
     572:	d100      	bne.n	576 <_sercom_get_default_pad+0x3a>
     574:	e06c      	b.n	650 <_sercom_get_default_pad+0x114>
     576:	4a48      	ldr	r2, [pc, #288]	; (698 <_sercom_get_default_pad+0x15c>)
     578:	4293      	cmp	r3, r2
     57a:	d03f      	beq.n	5fc <_sercom_get_default_pad+0xc0>
     57c:	e07d      	b.n	67a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     57e:	1cfb      	adds	r3, r7, #3
     580:	781b      	ldrb	r3, [r3, #0]
     582:	2b01      	cmp	r3, #1
     584:	d00a      	beq.n	59c <_sercom_get_default_pad+0x60>
     586:	dc02      	bgt.n	58e <_sercom_get_default_pad+0x52>
     588:	2b00      	cmp	r3, #0
     58a:	d005      	beq.n	598 <_sercom_get_default_pad+0x5c>
     58c:	e075      	b.n	67a <_sercom_get_default_pad+0x13e>
     58e:	2b02      	cmp	r3, #2
     590:	d006      	beq.n	5a0 <_sercom_get_default_pad+0x64>
     592:	2b03      	cmp	r3, #3
     594:	d006      	beq.n	5a4 <_sercom_get_default_pad+0x68>
     596:	e070      	b.n	67a <_sercom_get_default_pad+0x13e>
     598:	4b40      	ldr	r3, [pc, #256]	; (69c <_sercom_get_default_pad+0x160>)
     59a:	e06f      	b.n	67c <_sercom_get_default_pad+0x140>
     59c:	4b40      	ldr	r3, [pc, #256]	; (6a0 <_sercom_get_default_pad+0x164>)
     59e:	e06d      	b.n	67c <_sercom_get_default_pad+0x140>
     5a0:	4b40      	ldr	r3, [pc, #256]	; (6a4 <_sercom_get_default_pad+0x168>)
     5a2:	e06b      	b.n	67c <_sercom_get_default_pad+0x140>
     5a4:	4b40      	ldr	r3, [pc, #256]	; (6a8 <_sercom_get_default_pad+0x16c>)
     5a6:	e069      	b.n	67c <_sercom_get_default_pad+0x140>
     5a8:	1cfb      	adds	r3, r7, #3
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	2b01      	cmp	r3, #1
     5ae:	d00a      	beq.n	5c6 <_sercom_get_default_pad+0x8a>
     5b0:	dc02      	bgt.n	5b8 <_sercom_get_default_pad+0x7c>
     5b2:	2b00      	cmp	r3, #0
     5b4:	d005      	beq.n	5c2 <_sercom_get_default_pad+0x86>
     5b6:	e060      	b.n	67a <_sercom_get_default_pad+0x13e>
     5b8:	2b02      	cmp	r3, #2
     5ba:	d006      	beq.n	5ca <_sercom_get_default_pad+0x8e>
     5bc:	2b03      	cmp	r3, #3
     5be:	d006      	beq.n	5ce <_sercom_get_default_pad+0x92>
     5c0:	e05b      	b.n	67a <_sercom_get_default_pad+0x13e>
     5c2:	2303      	movs	r3, #3
     5c4:	e05a      	b.n	67c <_sercom_get_default_pad+0x140>
     5c6:	4b39      	ldr	r3, [pc, #228]	; (6ac <_sercom_get_default_pad+0x170>)
     5c8:	e058      	b.n	67c <_sercom_get_default_pad+0x140>
     5ca:	4b39      	ldr	r3, [pc, #228]	; (6b0 <_sercom_get_default_pad+0x174>)
     5cc:	e056      	b.n	67c <_sercom_get_default_pad+0x140>
     5ce:	4b39      	ldr	r3, [pc, #228]	; (6b4 <_sercom_get_default_pad+0x178>)
     5d0:	e054      	b.n	67c <_sercom_get_default_pad+0x140>
     5d2:	1cfb      	adds	r3, r7, #3
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2b01      	cmp	r3, #1
     5d8:	d00a      	beq.n	5f0 <_sercom_get_default_pad+0xb4>
     5da:	dc02      	bgt.n	5e2 <_sercom_get_default_pad+0xa6>
     5dc:	2b00      	cmp	r3, #0
     5de:	d005      	beq.n	5ec <_sercom_get_default_pad+0xb0>
     5e0:	e04b      	b.n	67a <_sercom_get_default_pad+0x13e>
     5e2:	2b02      	cmp	r3, #2
     5e4:	d006      	beq.n	5f4 <_sercom_get_default_pad+0xb8>
     5e6:	2b03      	cmp	r3, #3
     5e8:	d006      	beq.n	5f8 <_sercom_get_default_pad+0xbc>
     5ea:	e046      	b.n	67a <_sercom_get_default_pad+0x13e>
     5ec:	4b32      	ldr	r3, [pc, #200]	; (6b8 <_sercom_get_default_pad+0x17c>)
     5ee:	e045      	b.n	67c <_sercom_get_default_pad+0x140>
     5f0:	4b32      	ldr	r3, [pc, #200]	; (6bc <_sercom_get_default_pad+0x180>)
     5f2:	e043      	b.n	67c <_sercom_get_default_pad+0x140>
     5f4:	4b32      	ldr	r3, [pc, #200]	; (6c0 <_sercom_get_default_pad+0x184>)
     5f6:	e041      	b.n	67c <_sercom_get_default_pad+0x140>
     5f8:	4b32      	ldr	r3, [pc, #200]	; (6c4 <_sercom_get_default_pad+0x188>)
     5fa:	e03f      	b.n	67c <_sercom_get_default_pad+0x140>
     5fc:	1cfb      	adds	r3, r7, #3
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	2b01      	cmp	r3, #1
     602:	d00a      	beq.n	61a <_sercom_get_default_pad+0xde>
     604:	dc02      	bgt.n	60c <_sercom_get_default_pad+0xd0>
     606:	2b00      	cmp	r3, #0
     608:	d005      	beq.n	616 <_sercom_get_default_pad+0xda>
     60a:	e036      	b.n	67a <_sercom_get_default_pad+0x13e>
     60c:	2b02      	cmp	r3, #2
     60e:	d006      	beq.n	61e <_sercom_get_default_pad+0xe2>
     610:	2b03      	cmp	r3, #3
     612:	d006      	beq.n	622 <_sercom_get_default_pad+0xe6>
     614:	e031      	b.n	67a <_sercom_get_default_pad+0x13e>
     616:	4b2c      	ldr	r3, [pc, #176]	; (6c8 <_sercom_get_default_pad+0x18c>)
     618:	e030      	b.n	67c <_sercom_get_default_pad+0x140>
     61a:	4b2c      	ldr	r3, [pc, #176]	; (6cc <_sercom_get_default_pad+0x190>)
     61c:	e02e      	b.n	67c <_sercom_get_default_pad+0x140>
     61e:	4b2c      	ldr	r3, [pc, #176]	; (6d0 <_sercom_get_default_pad+0x194>)
     620:	e02c      	b.n	67c <_sercom_get_default_pad+0x140>
     622:	4b2c      	ldr	r3, [pc, #176]	; (6d4 <_sercom_get_default_pad+0x198>)
     624:	e02a      	b.n	67c <_sercom_get_default_pad+0x140>
     626:	1cfb      	adds	r3, r7, #3
     628:	781b      	ldrb	r3, [r3, #0]
     62a:	2b01      	cmp	r3, #1
     62c:	d00a      	beq.n	644 <_sercom_get_default_pad+0x108>
     62e:	dc02      	bgt.n	636 <_sercom_get_default_pad+0xfa>
     630:	2b00      	cmp	r3, #0
     632:	d005      	beq.n	640 <_sercom_get_default_pad+0x104>
     634:	e021      	b.n	67a <_sercom_get_default_pad+0x13e>
     636:	2b02      	cmp	r3, #2
     638:	d006      	beq.n	648 <_sercom_get_default_pad+0x10c>
     63a:	2b03      	cmp	r3, #3
     63c:	d006      	beq.n	64c <_sercom_get_default_pad+0x110>
     63e:	e01c      	b.n	67a <_sercom_get_default_pad+0x13e>
     640:	4b25      	ldr	r3, [pc, #148]	; (6d8 <_sercom_get_default_pad+0x19c>)
     642:	e01b      	b.n	67c <_sercom_get_default_pad+0x140>
     644:	4b25      	ldr	r3, [pc, #148]	; (6dc <_sercom_get_default_pad+0x1a0>)
     646:	e019      	b.n	67c <_sercom_get_default_pad+0x140>
     648:	4b25      	ldr	r3, [pc, #148]	; (6e0 <_sercom_get_default_pad+0x1a4>)
     64a:	e017      	b.n	67c <_sercom_get_default_pad+0x140>
     64c:	4b25      	ldr	r3, [pc, #148]	; (6e4 <_sercom_get_default_pad+0x1a8>)
     64e:	e015      	b.n	67c <_sercom_get_default_pad+0x140>
     650:	1cfb      	adds	r3, r7, #3
     652:	781b      	ldrb	r3, [r3, #0]
     654:	2b01      	cmp	r3, #1
     656:	d00a      	beq.n	66e <_sercom_get_default_pad+0x132>
     658:	dc02      	bgt.n	660 <_sercom_get_default_pad+0x124>
     65a:	2b00      	cmp	r3, #0
     65c:	d005      	beq.n	66a <_sercom_get_default_pad+0x12e>
     65e:	e00c      	b.n	67a <_sercom_get_default_pad+0x13e>
     660:	2b02      	cmp	r3, #2
     662:	d006      	beq.n	672 <_sercom_get_default_pad+0x136>
     664:	2b03      	cmp	r3, #3
     666:	d006      	beq.n	676 <_sercom_get_default_pad+0x13a>
     668:	e007      	b.n	67a <_sercom_get_default_pad+0x13e>
     66a:	4b1f      	ldr	r3, [pc, #124]	; (6e8 <_sercom_get_default_pad+0x1ac>)
     66c:	e006      	b.n	67c <_sercom_get_default_pad+0x140>
     66e:	4b1f      	ldr	r3, [pc, #124]	; (6ec <_sercom_get_default_pad+0x1b0>)
     670:	e004      	b.n	67c <_sercom_get_default_pad+0x140>
     672:	4b1f      	ldr	r3, [pc, #124]	; (6f0 <_sercom_get_default_pad+0x1b4>)
     674:	e002      	b.n	67c <_sercom_get_default_pad+0x140>
     676:	4b1f      	ldr	r3, [pc, #124]	; (6f4 <_sercom_get_default_pad+0x1b8>)
     678:	e000      	b.n	67c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     67a:	2300      	movs	r3, #0
}
     67c:	1c18      	adds	r0, r3, #0
     67e:	46bd      	mov	sp, r7
     680:	b002      	add	sp, #8
     682:	bd80      	pop	{r7, pc}
     684:	42001000 	.word	0x42001000
     688:	42000800 	.word	0x42000800
     68c:	42000c00 	.word	0x42000c00
     690:	42001800 	.word	0x42001800
     694:	42001c00 	.word	0x42001c00
     698:	42001400 	.word	0x42001400
     69c:	00040003 	.word	0x00040003
     6a0:	00050003 	.word	0x00050003
     6a4:	00060003 	.word	0x00060003
     6a8:	00070003 	.word	0x00070003
     6ac:	00010003 	.word	0x00010003
     6b0:	001e0003 	.word	0x001e0003
     6b4:	001f0003 	.word	0x001f0003
     6b8:	00080003 	.word	0x00080003
     6bc:	00090003 	.word	0x00090003
     6c0:	000a0003 	.word	0x000a0003
     6c4:	000b0003 	.word	0x000b0003
     6c8:	00100003 	.word	0x00100003
     6cc:	00110003 	.word	0x00110003
     6d0:	00120003 	.word	0x00120003
     6d4:	00130003 	.word	0x00130003
     6d8:	000c0003 	.word	0x000c0003
     6dc:	000d0003 	.word	0x000d0003
     6e0:	000e0003 	.word	0x000e0003
     6e4:	000f0003 	.word	0x000f0003
     6e8:	00160003 	.word	0x00160003
     6ec:	00170003 	.word	0x00170003
     6f0:	00180003 	.word	0x00180003
     6f4:	00190003 	.word	0x00190003

000006f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6f8:	b590      	push	{r4, r7, lr}
     6fa:	b08b      	sub	sp, #44	; 0x2c
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     700:	230c      	movs	r3, #12
     702:	18fb      	adds	r3, r7, r3
     704:	4a0e      	ldr	r2, [pc, #56]	; (740 <_sercom_get_sercom_inst_index+0x48>)
     706:	ca13      	ldmia	r2!, {r0, r1, r4}
     708:	c313      	stmia	r3!, {r0, r1, r4}
     70a:	ca13      	ldmia	r2!, {r0, r1, r4}
     70c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     70e:	2300      	movs	r3, #0
     710:	627b      	str	r3, [r7, #36]	; 0x24
     712:	e00d      	b.n	730 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     714:	687b      	ldr	r3, [r7, #4]
     716:	220c      	movs	r2, #12
     718:	18ba      	adds	r2, r7, r2
     71a:	6a79      	ldr	r1, [r7, #36]	; 0x24
     71c:	0089      	lsls	r1, r1, #2
     71e:	588a      	ldr	r2, [r1, r2]
     720:	4293      	cmp	r3, r2
     722:	d102      	bne.n	72a <_sercom_get_sercom_inst_index+0x32>
			return i;
     724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     726:	b2db      	uxtb	r3, r3
     728:	e006      	b.n	738 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     72c:	3301      	adds	r3, #1
     72e:	627b      	str	r3, [r7, #36]	; 0x24
     730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     732:	2b05      	cmp	r3, #5
     734:	d9ee      	bls.n	714 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     736:	2300      	movs	r3, #0
}
     738:	1c18      	adds	r0, r3, #0
     73a:	46bd      	mov	sp, r7
     73c:	b00b      	add	sp, #44	; 0x2c
     73e:	bd90      	pop	{r4, r7, pc}
     740:	000025c4 	.word	0x000025c4

00000744 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     744:	b580      	push	{r7, lr}
     746:	b082      	sub	sp, #8
     748:	af00      	add	r7, sp, #0
     74a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     74c:	687b      	ldr	r3, [r7, #4]
     74e:	2280      	movs	r2, #128	; 0x80
     750:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     752:	687b      	ldr	r3, [r7, #4]
     754:	2200      	movs	r2, #0
     756:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     758:	687b      	ldr	r3, [r7, #4]
     75a:	2201      	movs	r2, #1
     75c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     75e:	687b      	ldr	r3, [r7, #4]
     760:	2200      	movs	r2, #0
     762:	70da      	strb	r2, [r3, #3]
}
     764:	46bd      	mov	sp, r7
     766:	b002      	add	sp, #8
     768:	bd80      	pop	{r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)

0000076c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     76c:	b580      	push	{r7, lr}
     76e:	b084      	sub	sp, #16
     770:	af00      	add	r7, sp, #0
     772:	1c02      	adds	r2, r0, #0
     774:	1dfb      	adds	r3, r7, #7
     776:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     778:	230f      	movs	r3, #15
     77a:	18fb      	adds	r3, r7, r3
     77c:	1dfa      	adds	r2, r7, #7
     77e:	7812      	ldrb	r2, [r2, #0]
     780:	09d2      	lsrs	r2, r2, #7
     782:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     784:	230e      	movs	r3, #14
     786:	18fb      	adds	r3, r7, r3
     788:	1dfa      	adds	r2, r7, #7
     78a:	7812      	ldrb	r2, [r2, #0]
     78c:	0952      	lsrs	r2, r2, #5
     78e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     790:	4b0d      	ldr	r3, [pc, #52]	; (7c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     792:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     794:	230f      	movs	r3, #15
     796:	18fb      	adds	r3, r7, r3
     798:	781b      	ldrb	r3, [r3, #0]
     79a:	2b00      	cmp	r3, #0
     79c:	d10f      	bne.n	7be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     79e:	230f      	movs	r3, #15
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	009b      	lsls	r3, r3, #2
     7a6:	2210      	movs	r2, #16
     7a8:	4694      	mov	ip, r2
     7aa:	44bc      	add	ip, r7
     7ac:	4463      	add	r3, ip
     7ae:	3b08      	subs	r3, #8
     7b0:	681a      	ldr	r2, [r3, #0]
     7b2:	230e      	movs	r3, #14
     7b4:	18fb      	adds	r3, r7, r3
     7b6:	781b      	ldrb	r3, [r3, #0]
     7b8:	01db      	lsls	r3, r3, #7
     7ba:	18d3      	adds	r3, r2, r3
     7bc:	e000      	b.n	7c0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     7be:	2300      	movs	r3, #0
	}
}
     7c0:	1c18      	adds	r0, r3, #0
     7c2:	46bd      	mov	sp, r7
     7c4:	b004      	add	sp, #16
     7c6:	bd80      	pop	{r7, pc}
     7c8:	41004400 	.word	0x41004400

000007cc <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     7cc:	b580      	push	{r7, lr}
     7ce:	b086      	sub	sp, #24
     7d0:	af00      	add	r7, sp, #0
     7d2:	1c02      	adds	r2, r0, #0
     7d4:	1dfb      	adds	r3, r7, #7
     7d6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     7d8:	1dfb      	adds	r3, r7, #7
     7da:	781b      	ldrb	r3, [r3, #0]
     7dc:	1c18      	adds	r0, r3, #0
     7de:	4b19      	ldr	r3, [pc, #100]	; (844 <system_pinmux_pin_get_mux_position+0x78>)
     7e0:	4798      	blx	r3
     7e2:	1c03      	adds	r3, r0, #0
     7e4:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     7e6:	1dfb      	adds	r3, r7, #7
     7e8:	781b      	ldrb	r3, [r3, #0]
     7ea:	221f      	movs	r2, #31
     7ec:	4013      	ands	r3, r2
     7ee:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     7f0:	697a      	ldr	r2, [r7, #20]
     7f2:	2140      	movs	r1, #64	; 0x40
     7f4:	693b      	ldr	r3, [r7, #16]
     7f6:	18d3      	adds	r3, r2, r3
     7f8:	185b      	adds	r3, r3, r1
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	b2db      	uxtb	r3, r3
     7fe:	1c1a      	adds	r2, r3, #0
     800:	2301      	movs	r3, #1
     802:	4013      	ands	r3, r2
     804:	d101      	bne.n	80a <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     806:	2380      	movs	r3, #128	; 0x80
     808:	e017      	b.n	83a <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     80a:	693b      	ldr	r3, [r7, #16]
     80c:	085b      	lsrs	r3, r3, #1
     80e:	697a      	ldr	r2, [r7, #20]
     810:	2130      	movs	r1, #48	; 0x30
     812:	18d3      	adds	r3, r2, r3
     814:	185b      	adds	r3, r3, r1
     816:	781b      	ldrb	r3, [r3, #0]
     818:	b2db      	uxtb	r3, r3
     81a:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     81c:	693b      	ldr	r3, [r7, #16]
     81e:	2201      	movs	r2, #1
     820:	4013      	ands	r3, r2
     822:	d005      	beq.n	830 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     824:	68fb      	ldr	r3, [r7, #12]
     826:	22f0      	movs	r2, #240	; 0xf0
     828:	4013      	ands	r3, r2
     82a:	091b      	lsrs	r3, r3, #4
     82c:	b2db      	uxtb	r3, r3
     82e:	e004      	b.n	83a <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     830:	68fb      	ldr	r3, [r7, #12]
     832:	b2db      	uxtb	r3, r3
     834:	220f      	movs	r2, #15
     836:	4013      	ands	r3, r2
     838:	b2db      	uxtb	r3, r3
	}
}
     83a:	1c18      	adds	r0, r3, #0
     83c:	46bd      	mov	sp, r7
     83e:	b006      	add	sp, #24
     840:	bd80      	pop	{r7, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	0000076d 	.word	0x0000076d

00000848 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     848:	b580      	push	{r7, lr}
     84a:	b082      	sub	sp, #8
     84c:	af00      	add	r7, sp, #0
     84e:	1c02      	adds	r2, r0, #0
     850:	1dfb      	adds	r3, r7, #7
     852:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     854:	1dfb      	adds	r3, r7, #7
     856:	781b      	ldrb	r3, [r3, #0]
     858:	1c18      	adds	r0, r3, #0
     85a:	4b03      	ldr	r3, [pc, #12]	; (868 <port_get_group_from_gpio_pin+0x20>)
     85c:	4798      	blx	r3
     85e:	1c03      	adds	r3, r0, #0
}
     860:	1c18      	adds	r0, r3, #0
     862:	46bd      	mov	sp, r7
     864:	b002      	add	sp, #8
     866:	bd80      	pop	{r7, pc}
     868:	0000076d 	.word	0x0000076d

0000086c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	1c02      	adds	r2, r0, #0
     874:	1dfb      	adds	r3, r7, #7
     876:	701a      	strb	r2, [r3, #0]
     878:	1dbb      	adds	r3, r7, #6
     87a:	1c0a      	adds	r2, r1, #0
     87c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     87e:	1dfb      	adds	r3, r7, #7
     880:	781b      	ldrb	r3, [r3, #0]
     882:	1c18      	adds	r0, r3, #0
     884:	4b0c      	ldr	r3, [pc, #48]	; (8b8 <port_pin_set_output_level+0x4c>)
     886:	4798      	blx	r3
     888:	1c03      	adds	r3, r0, #0
     88a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     88c:	1dfb      	adds	r3, r7, #7
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	221f      	movs	r2, #31
     892:	4013      	ands	r3, r2
     894:	2201      	movs	r2, #1
     896:	409a      	lsls	r2, r3
     898:	1c13      	adds	r3, r2, #0
     89a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     89c:	1dbb      	adds	r3, r7, #6
     89e:	781b      	ldrb	r3, [r3, #0]
     8a0:	2b00      	cmp	r3, #0
     8a2:	d003      	beq.n	8ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     8a4:	68fb      	ldr	r3, [r7, #12]
     8a6:	68ba      	ldr	r2, [r7, #8]
     8a8:	619a      	str	r2, [r3, #24]
     8aa:	e002      	b.n	8b2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     8ac:	68fb      	ldr	r3, [r7, #12]
     8ae:	68ba      	ldr	r2, [r7, #8]
     8b0:	615a      	str	r2, [r3, #20]
	}
}
     8b2:	46bd      	mov	sp, r7
     8b4:	b004      	add	sp, #16
     8b6:	bd80      	pop	{r7, pc}
     8b8:	00000849 	.word	0x00000849

000008bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     8bc:	b580      	push	{r7, lr}
     8be:	b082      	sub	sp, #8
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	2200      	movs	r2, #0
     8c8:	701a      	strb	r2, [r3, #0]
}
     8ca:	46bd      	mov	sp, r7
     8cc:	b002      	add	sp, #8
     8ce:	bd80      	pop	{r7, pc}

000008d0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     8d0:	b580      	push	{r7, lr}
     8d2:	b082      	sub	sp, #8
     8d4:	af00      	add	r7, sp, #0
     8d6:	1c02      	adds	r2, r0, #0
     8d8:	6039      	str	r1, [r7, #0]
     8da:	1dfb      	adds	r3, r7, #7
     8dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     8de:	1dfb      	adds	r3, r7, #7
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b01      	cmp	r3, #1
     8e4:	d00a      	beq.n	8fc <system_apb_clock_set_mask+0x2c>
     8e6:	2b02      	cmp	r3, #2
     8e8:	d00f      	beq.n	90a <system_apb_clock_set_mask+0x3a>
     8ea:	2b00      	cmp	r3, #0
     8ec:	d114      	bne.n	918 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     8ee:	4b0e      	ldr	r3, [pc, #56]	; (928 <system_apb_clock_set_mask+0x58>)
     8f0:	4a0d      	ldr	r2, [pc, #52]	; (928 <system_apb_clock_set_mask+0x58>)
     8f2:	6991      	ldr	r1, [r2, #24]
     8f4:	683a      	ldr	r2, [r7, #0]
     8f6:	430a      	orrs	r2, r1
     8f8:	619a      	str	r2, [r3, #24]
			break;
     8fa:	e00f      	b.n	91c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     8fc:	4b0a      	ldr	r3, [pc, #40]	; (928 <system_apb_clock_set_mask+0x58>)
     8fe:	4a0a      	ldr	r2, [pc, #40]	; (928 <system_apb_clock_set_mask+0x58>)
     900:	69d1      	ldr	r1, [r2, #28]
     902:	683a      	ldr	r2, [r7, #0]
     904:	430a      	orrs	r2, r1
     906:	61da      	str	r2, [r3, #28]
			break;
     908:	e008      	b.n	91c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     90a:	4b07      	ldr	r3, [pc, #28]	; (928 <system_apb_clock_set_mask+0x58>)
     90c:	4a06      	ldr	r2, [pc, #24]	; (928 <system_apb_clock_set_mask+0x58>)
     90e:	6a11      	ldr	r1, [r2, #32]
     910:	683a      	ldr	r2, [r7, #0]
     912:	430a      	orrs	r2, r1
     914:	621a      	str	r2, [r3, #32]
			break;
     916:	e001      	b.n	91c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     918:	2317      	movs	r3, #23
     91a:	e000      	b.n	91e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     91c:	2300      	movs	r3, #0
}
     91e:	1c18      	adds	r0, r3, #0
     920:	46bd      	mov	sp, r7
     922:	b002      	add	sp, #8
     924:	bd80      	pop	{r7, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	40000400 	.word	0x40000400

0000092c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     92c:	b580      	push	{r7, lr}
     92e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     930:	4b05      	ldr	r3, [pc, #20]	; (948 <system_is_debugger_present+0x1c>)
     932:	789b      	ldrb	r3, [r3, #2]
     934:	b2db      	uxtb	r3, r3
     936:	1c1a      	adds	r2, r3, #0
     938:	2302      	movs	r3, #2
     93a:	4013      	ands	r3, r2
     93c:	1e5a      	subs	r2, r3, #1
     93e:	4193      	sbcs	r3, r2
     940:	b2db      	uxtb	r3, r3
}
     942:	1c18      	adds	r0, r3, #0
     944:	46bd      	mov	sp, r7
     946:	bd80      	pop	{r7, pc}
     948:	41002000 	.word	0x41002000

0000094c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     94c:	b580      	push	{r7, lr}
     94e:	b084      	sub	sp, #16
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     954:	687b      	ldr	r3, [r7, #4]
     956:	681b      	ldr	r3, [r3, #0]
     958:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	69db      	ldr	r3, [r3, #28]
     95e:	1e5a      	subs	r2, r3, #1
     960:	4193      	sbcs	r3, r2
     962:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     964:	1c18      	adds	r0, r3, #0
     966:	46bd      	mov	sp, r7
     968:	b004      	add	sp, #16
     96a:	bd80      	pop	{r7, pc}

0000096c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     96c:	b580      	push	{r7, lr}
     96e:	b084      	sub	sp, #16
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     974:	687b      	ldr	r3, [r7, #4]
     976:	681b      	ldr	r3, [r3, #0]
     978:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	1c18      	adds	r0, r3, #0
     980:	4b06      	ldr	r3, [pc, #24]	; (99c <spi_enable+0x30>)
     982:	4798      	blx	r3
     984:	1e03      	subs	r3, r0, #0
     986:	d1f9      	bne.n	97c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     988:	68fb      	ldr	r3, [r7, #12]
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	2202      	movs	r2, #2
     98e:	431a      	orrs	r2, r3
     990:	68fb      	ldr	r3, [r7, #12]
     992:	601a      	str	r2, [r3, #0]
}
     994:	46bd      	mov	sp, r7
     996:	b004      	add	sp, #16
     998:	bd80      	pop	{r7, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	0000094d 	.word	0x0000094d

000009a0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     9a0:	b580      	push	{r7, lr}
     9a2:	b084      	sub	sp, #16
     9a4:	af00      	add	r7, sp, #0
     9a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	681b      	ldr	r3, [r3, #0]
     9ac:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	1c18      	adds	r0, r3, #0
     9b4:	4b06      	ldr	r3, [pc, #24]	; (9d0 <spi_disable+0x30>)
     9b6:	4798      	blx	r3
     9b8:	1e03      	subs	r3, r0, #0
     9ba:	d1f9      	bne.n	9b0 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     9bc:	68fb      	ldr	r3, [r7, #12]
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	2202      	movs	r2, #2
     9c2:	4393      	bics	r3, r2
     9c4:	1c1a      	adds	r2, r3, #0
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	601a      	str	r2, [r3, #0]
}
     9ca:	46bd      	mov	sp, r7
     9cc:	b004      	add	sp, #16
     9ce:	bd80      	pop	{r7, pc}
     9d0:	0000094d 	.word	0x0000094d

000009d4 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     9d4:	b580      	push	{r7, lr}
     9d6:	b084      	sub	sp, #16
     9d8:	af00      	add	r7, sp, #0
     9da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9dc:	687b      	ldr	r3, [r7, #4]
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	7e1b      	ldrb	r3, [r3, #24]
     9e6:	b2db      	uxtb	r3, r3
     9e8:	1c1a      	adds	r2, r3, #0
     9ea:	2302      	movs	r3, #2
     9ec:	4013      	ands	r3, r2
     9ee:	1e5a      	subs	r2, r3, #1
     9f0:	4193      	sbcs	r3, r2
     9f2:	b2db      	uxtb	r3, r3
}
     9f4:	1c18      	adds	r0, r3, #0
     9f6:	46bd      	mov	sp, r7
     9f8:	b004      	add	sp, #16
     9fa:	bd80      	pop	{r7, pc}

000009fc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     9fc:	b580      	push	{r7, lr}
     9fe:	b084      	sub	sp, #16
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a04:	687b      	ldr	r3, [r7, #4]
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a0a:	68fb      	ldr	r3, [r7, #12]
     a0c:	7e1b      	ldrb	r3, [r3, #24]
     a0e:	b2db      	uxtb	r3, r3
     a10:	1c1a      	adds	r2, r3, #0
     a12:	2301      	movs	r3, #1
     a14:	4013      	ands	r3, r2
     a16:	1e5a      	subs	r2, r3, #1
     a18:	4193      	sbcs	r3, r2
     a1a:	b2db      	uxtb	r3, r3
}
     a1c:	1c18      	adds	r0, r3, #0
     a1e:	46bd      	mov	sp, r7
     a20:	b004      	add	sp, #16
     a22:	bd80      	pop	{r7, pc}

00000a24 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     a24:	b580      	push	{r7, lr}
     a26:	b084      	sub	sp, #16
     a28:	af00      	add	r7, sp, #0
     a2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	7e1b      	ldrb	r3, [r3, #24]
     a36:	b2db      	uxtb	r3, r3
     a38:	1c1a      	adds	r2, r3, #0
     a3a:	2304      	movs	r3, #4
     a3c:	4013      	ands	r3, r2
     a3e:	1e5a      	subs	r2, r3, #1
     a40:	4193      	sbcs	r3, r2
     a42:	b2db      	uxtb	r3, r3
}
     a44:	1c18      	adds	r0, r3, #0
     a46:	46bd      	mov	sp, r7
     a48:	b004      	add	sp, #16
     a4a:	bd80      	pop	{r7, pc}

00000a4c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     a4c:	b580      	push	{r7, lr}
     a4e:	b084      	sub	sp, #16
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
     a54:	1c0a      	adds	r2, r1, #0
     a56:	1cbb      	adds	r3, r7, #2
     a58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	1c18      	adds	r0, r3, #0
     a64:	4b0a      	ldr	r3, [pc, #40]	; (a90 <spi_write+0x44>)
     a66:	4798      	blx	r3
     a68:	1c03      	adds	r3, r0, #0
     a6a:	1c1a      	adds	r2, r3, #0
     a6c:	2301      	movs	r3, #1
     a6e:	4053      	eors	r3, r2
     a70:	b2db      	uxtb	r3, r3
     a72:	2b00      	cmp	r3, #0
     a74:	d001      	beq.n	a7a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     a76:	2305      	movs	r3, #5
     a78:	e006      	b.n	a88 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a7a:	1cbb      	adds	r3, r7, #2
     a7c:	881b      	ldrh	r3, [r3, #0]
     a7e:	05db      	lsls	r3, r3, #23
     a80:	0dda      	lsrs	r2, r3, #23
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     a86:	2300      	movs	r3, #0
}
     a88:	1c18      	adds	r0, r3, #0
     a8a:	46bd      	mov	sp, r7
     a8c:	b004      	add	sp, #16
     a8e:	bd80      	pop	{r7, pc}
     a90:	000009fd 	.word	0x000009fd

00000a94 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     a94:	b580      	push	{r7, lr}
     a96:	b084      	sub	sp, #16
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
     a9c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	1c18      	adds	r0, r3, #0
     aa8:	4b1d      	ldr	r3, [pc, #116]	; (b20 <spi_read+0x8c>)
     aaa:	4798      	blx	r3
     aac:	1c03      	adds	r3, r0, #0
     aae:	1c1a      	adds	r2, r3, #0
     ab0:	2301      	movs	r3, #1
     ab2:	4053      	eors	r3, r2
     ab4:	b2db      	uxtb	r3, r3
     ab6:	2b00      	cmp	r3, #0
     ab8:	d001      	beq.n	abe <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     aba:	2310      	movs	r3, #16
     abc:	e02c      	b.n	b18 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     abe:	230f      	movs	r3, #15
     ac0:	18fb      	adds	r3, r7, r3
     ac2:	2200      	movs	r2, #0
     ac4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ac6:	68bb      	ldr	r3, [r7, #8]
     ac8:	8b5b      	ldrh	r3, [r3, #26]
     aca:	b29b      	uxth	r3, r3
     acc:	1c1a      	adds	r2, r3, #0
     ace:	2304      	movs	r3, #4
     ad0:	4013      	ands	r3, r2
     ad2:	d00b      	beq.n	aec <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     ad4:	230f      	movs	r3, #15
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	221e      	movs	r2, #30
     ada:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     adc:	68bb      	ldr	r3, [r7, #8]
     ade:	8b5b      	ldrh	r3, [r3, #26]
     ae0:	b29b      	uxth	r3, r3
     ae2:	2204      	movs	r2, #4
     ae4:	4313      	orrs	r3, r2
     ae6:	b29a      	uxth	r2, r3
     ae8:	68bb      	ldr	r3, [r7, #8]
     aea:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     aec:	687b      	ldr	r3, [r7, #4]
     aee:	799b      	ldrb	r3, [r3, #6]
     af0:	2b01      	cmp	r3, #1
     af2:	d108      	bne.n	b06 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     af4:	68bb      	ldr	r3, [r7, #8]
     af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     af8:	b29b      	uxth	r3, r3
     afa:	05db      	lsls	r3, r3, #23
     afc:	0ddb      	lsrs	r3, r3, #23
     afe:	b29a      	uxth	r2, r3
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	801a      	strh	r2, [r3, #0]
     b04:	e005      	b.n	b12 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b06:	68bb      	ldr	r3, [r7, #8]
     b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b0a:	b2db      	uxtb	r3, r3
     b0c:	b29a      	uxth	r2, r3
     b0e:	683b      	ldr	r3, [r7, #0]
     b10:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     b12:	230f      	movs	r3, #15
     b14:	18fb      	adds	r3, r7, r3
     b16:	781b      	ldrb	r3, [r3, #0]
}
     b18:	1c18      	adds	r0, r3, #0
     b1a:	46bd      	mov	sp, r7
     b1c:	b004      	add	sp, #16
     b1e:	bd80      	pop	{r7, pc}
     b20:	00000a25 	.word	0x00000a25

00000b24 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
     b24:	b590      	push	{r4, r7, lr}
     b26:	b089      	sub	sp, #36	; 0x24
     b28:	af00      	add	r7, sp, #0
     b2a:	6078      	str	r0, [r7, #4]
     b2c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b2e:	230c      	movs	r3, #12
     b30:	18fb      	adds	r3, r7, r3
     b32:	2200      	movs	r2, #0
     b34:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	1c18      	adds	r0, r3, #0
     b40:	4b25      	ldr	r3, [pc, #148]	; (bd8 <spi_set_baudrate+0xb4>)
     b42:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     b44:	46c0      	nop			; (mov r8, r8)
     b46:	687b      	ldr	r3, [r7, #4]
     b48:	1c18      	adds	r0, r3, #0
     b4a:	4b24      	ldr	r3, [pc, #144]	; (bdc <spi_set_baudrate+0xb8>)
     b4c:	4798      	blx	r3
     b4e:	1e03      	subs	r3, r0, #0
     b50:	d1f9      	bne.n	b46 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	1c18      	adds	r0, r3, #0
     b58:	4b21      	ldr	r3, [pc, #132]	; (be0 <spi_set_baudrate+0xbc>)
     b5a:	4798      	blx	r3
     b5c:	1c03      	adds	r3, r0, #0
     b5e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b60:	69bb      	ldr	r3, [r7, #24]
     b62:	3314      	adds	r3, #20
     b64:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b66:	697b      	ldr	r3, [r7, #20]
     b68:	b2db      	uxtb	r3, r3
     b6a:	1c18      	adds	r0, r3, #0
     b6c:	4b1d      	ldr	r3, [pc, #116]	; (be4 <spi_set_baudrate+0xc0>)
     b6e:	4798      	blx	r3
     b70:	1c03      	adds	r3, r0, #0
     b72:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
     b74:	230f      	movs	r3, #15
     b76:	18fc      	adds	r4, r7, r3
     b78:	6839      	ldr	r1, [r7, #0]
     b7a:	693a      	ldr	r2, [r7, #16]
     b7c:	230c      	movs	r3, #12
     b7e:	18fb      	adds	r3, r7, r3
     b80:	1c08      	adds	r0, r1, #0
     b82:	1c11      	adds	r1, r2, #0
     b84:	1c1a      	adds	r2, r3, #0
     b86:	4b18      	ldr	r3, [pc, #96]	; (be8 <spi_set_baudrate+0xc4>)
     b88:	4798      	blx	r3
     b8a:	1c03      	adds	r3, r0, #0
     b8c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
     b8e:	230f      	movs	r3, #15
     b90:	18fb      	adds	r3, r7, r3
     b92:	781b      	ldrb	r3, [r3, #0]
     b94:	2b00      	cmp	r3, #0
     b96:	d001      	beq.n	b9c <spi_set_baudrate+0x78>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
     b98:	2317      	movs	r3, #23
     b9a:	e018      	b.n	bce <spi_set_baudrate+0xaa>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
     b9c:	230c      	movs	r3, #12
     b9e:	18fb      	adds	r3, r7, r3
     ba0:	881b      	ldrh	r3, [r3, #0]
     ba2:	b2da      	uxtb	r2, r3
     ba4:	69fb      	ldr	r3, [r7, #28]
     ba6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
     ba8:	46c0      	nop			; (mov r8, r8)
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	1c18      	adds	r0, r3, #0
     bae:	4b0b      	ldr	r3, [pc, #44]	; (bdc <spi_set_baudrate+0xb8>)
     bb0:	4798      	blx	r3
     bb2:	1e03      	subs	r3, r0, #0
     bb4:	d1f9      	bne.n	baa <spi_set_baudrate+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
     bb6:	687b      	ldr	r3, [r7, #4]
     bb8:	1c18      	adds	r0, r3, #0
     bba:	4b0c      	ldr	r3, [pc, #48]	; (bec <spi_set_baudrate+0xc8>)
     bbc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	1c18      	adds	r0, r3, #0
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <spi_set_baudrate+0xb8>)
     bc6:	4798      	blx	r3
     bc8:	1e03      	subs	r3, r0, #0
     bca:	d1f9      	bne.n	bc0 <spi_set_baudrate+0x9c>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
     bcc:	2300      	movs	r3, #0
}
     bce:	1c18      	adds	r0, r3, #0
     bd0:	46bd      	mov	sp, r7
     bd2:	b009      	add	sp, #36	; 0x24
     bd4:	bd90      	pop	{r4, r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	000009a1 	.word	0x000009a1
     bdc:	0000094d 	.word	0x0000094d
     be0:	000006f9 	.word	0x000006f9
     be4:	00001d35 	.word	0x00001d35
     be8:	00000435 	.word	0x00000435
     bec:	0000096d 	.word	0x0000096d

00000bf0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     bf0:	b590      	push	{r4, r7, lr}
     bf2:	b093      	sub	sp, #76	; 0x4c
     bf4:	af00      	add	r7, sp, #0
     bf6:	6078      	str	r0, [r7, #4]
     bf8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     c00:	687b      	ldr	r3, [r7, #4]
     c02:	681b      	ldr	r3, [r3, #0]
     c04:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     c06:	231c      	movs	r3, #28
     c08:	18fb      	adds	r3, r7, r3
     c0a:	1c18      	adds	r0, r3, #0
     c0c:	4b76      	ldr	r3, [pc, #472]	; (de8 <_spi_set_config+0x1f8>)
     c0e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c10:	231c      	movs	r3, #28
     c12:	18fb      	adds	r3, r7, r3
     c14:	2200      	movs	r2, #0
     c16:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     c18:	683b      	ldr	r3, [r7, #0]
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d103      	bne.n	c28 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c20:	231c      	movs	r3, #28
     c22:	18fb      	adds	r3, r7, r3
     c24:	2200      	movs	r2, #0
     c26:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     c28:	683b      	ldr	r3, [r7, #0]
     c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c2c:	230c      	movs	r3, #12
     c2e:	18fb      	adds	r3, r7, r3
     c30:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     c32:	683b      	ldr	r3, [r7, #0]
     c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c36:	230c      	movs	r3, #12
     c38:	18fb      	adds	r3, r7, r3
     c3a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c3c:	683b      	ldr	r3, [r7, #0]
     c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c40:	230c      	movs	r3, #12
     c42:	18fb      	adds	r3, r7, r3
     c44:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     c46:	683b      	ldr	r3, [r7, #0]
     c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     c4a:	230c      	movs	r3, #12
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c50:	2347      	movs	r3, #71	; 0x47
     c52:	18fb      	adds	r3, r7, r3
     c54:	2200      	movs	r2, #0
     c56:	701a      	strb	r2, [r3, #0]
     c58:	e02c      	b.n	cb4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c5a:	2347      	movs	r3, #71	; 0x47
     c5c:	18fb      	adds	r3, r7, r3
     c5e:	781a      	ldrb	r2, [r3, #0]
     c60:	230c      	movs	r3, #12
     c62:	18fb      	adds	r3, r7, r3
     c64:	0092      	lsls	r2, r2, #2
     c66:	58d3      	ldr	r3, [r2, r3]
     c68:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c6c:	2b00      	cmp	r3, #0
     c6e:	d109      	bne.n	c84 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c72:	2347      	movs	r3, #71	; 0x47
     c74:	18fb      	adds	r3, r7, r3
     c76:	781b      	ldrb	r3, [r3, #0]
     c78:	1c10      	adds	r0, r2, #0
     c7a:	1c19      	adds	r1, r3, #0
     c7c:	4b5b      	ldr	r3, [pc, #364]	; (dec <_spi_set_config+0x1fc>)
     c7e:	4798      	blx	r3
     c80:	1c03      	adds	r3, r0, #0
     c82:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c86:	3301      	adds	r3, #1
     c88:	d00d      	beq.n	ca6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c8c:	b2da      	uxtb	r2, r3
     c8e:	231c      	movs	r3, #28
     c90:	18fb      	adds	r3, r7, r3
     c92:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c96:	0c1b      	lsrs	r3, r3, #16
     c98:	b2da      	uxtb	r2, r3
     c9a:	231c      	movs	r3, #28
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	1c10      	adds	r0, r2, #0
     ca0:	1c19      	adds	r1, r3, #0
     ca2:	4b53      	ldr	r3, [pc, #332]	; (df0 <_spi_set_config+0x200>)
     ca4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     ca6:	2347      	movs	r3, #71	; 0x47
     ca8:	18fb      	adds	r3, r7, r3
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	2347      	movs	r3, #71	; 0x47
     cae:	18fb      	adds	r3, r7, r3
     cb0:	3201      	adds	r2, #1
     cb2:	701a      	strb	r2, [r3, #0]
     cb4:	2347      	movs	r3, #71	; 0x47
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	781b      	ldrb	r3, [r3, #0]
     cba:	2b03      	cmp	r3, #3
     cbc:	d9cd      	bls.n	c5a <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	781a      	ldrb	r2, [r3, #0]
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     cc6:	683b      	ldr	r3, [r7, #0]
     cc8:	7c1a      	ldrb	r2, [r3, #16]
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     cce:	683b      	ldr	r3, [r7, #0]
     cd0:	7c9a      	ldrb	r2, [r3, #18]
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	7d1a      	ldrb	r2, [r3, #20]
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     cde:	230a      	movs	r3, #10
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	2200      	movs	r2, #0
     ce4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     ce6:	2300      	movs	r3, #0
     ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     cea:	2300      	movs	r3, #0
     cec:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	2b01      	cmp	r3, #1
     cf4:	d12b      	bne.n	d4e <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	1c18      	adds	r0, r3, #0
     cfc:	4b3d      	ldr	r3, [pc, #244]	; (df4 <_spi_set_config+0x204>)
     cfe:	4798      	blx	r3
     d00:	1c03      	adds	r3, r0, #0
     d02:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d06:	3314      	adds	r3, #20
     d08:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     d0c:	b2db      	uxtb	r3, r3
     d0e:	1c18      	adds	r0, r3, #0
     d10:	4b39      	ldr	r3, [pc, #228]	; (df8 <_spi_set_config+0x208>)
     d12:	4798      	blx	r3
     d14:	1c03      	adds	r3, r0, #0
     d16:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     d18:	683b      	ldr	r3, [r7, #0]
     d1a:	6999      	ldr	r1, [r3, #24]
     d1c:	2323      	movs	r3, #35	; 0x23
     d1e:	18fc      	adds	r4, r7, r3
     d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d22:	230a      	movs	r3, #10
     d24:	18fb      	adds	r3, r7, r3
     d26:	1c08      	adds	r0, r1, #0
     d28:	1c11      	adds	r1, r2, #0
     d2a:	1c1a      	adds	r2, r3, #0
     d2c:	4b33      	ldr	r3, [pc, #204]	; (dfc <_spi_set_config+0x20c>)
     d2e:	4798      	blx	r3
     d30:	1c03      	adds	r3, r0, #0
     d32:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     d34:	2323      	movs	r3, #35	; 0x23
     d36:	18fb      	adds	r3, r7, r3
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d001      	beq.n	d42 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     d3e:	2317      	movs	r3, #23
     d40:	e04e      	b.n	de0 <_spi_set_config+0x1f0>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     d42:	230a      	movs	r3, #10
     d44:	18fb      	adds	r3, r7, r3
     d46:	881b      	ldrh	r3, [r3, #0]
     d48:	b2da      	uxtb	r2, r3
     d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d4c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     d4e:	683b      	ldr	r3, [r7, #0]
     d50:	685b      	ldr	r3, [r3, #4]
     d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d54:	4313      	orrs	r3, r2
     d56:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     d58:	683b      	ldr	r3, [r7, #0]
     d5a:	689b      	ldr	r3, [r3, #8]
     d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d5e:	4313      	orrs	r3, r2
     d60:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     d62:	683b      	ldr	r3, [r7, #0]
     d64:	68db      	ldr	r3, [r3, #12]
     d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d68:	4313      	orrs	r3, r2
     d6a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     d6c:	683b      	ldr	r3, [r7, #0]
     d6e:	7c1b      	ldrb	r3, [r3, #16]
     d70:	1c1a      	adds	r2, r3, #0
     d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d74:	4313      	orrs	r3, r2
     d76:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     d78:	683b      	ldr	r3, [r7, #0]
     d7a:	7c5b      	ldrb	r3, [r3, #17]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d103      	bne.n	d88 <_spi_set_config+0x198>
     d80:	4b1f      	ldr	r3, [pc, #124]	; (e00 <_spi_set_config+0x210>)
     d82:	4798      	blx	r3
     d84:	1e03      	subs	r3, r0, #0
     d86:	d003      	beq.n	d90 <_spi_set_config+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d8a:	2280      	movs	r2, #128	; 0x80
     d8c:	4313      	orrs	r3, r2
     d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     d90:	683b      	ldr	r3, [r7, #0]
     d92:	7c9b      	ldrb	r3, [r3, #18]
     d94:	2b00      	cmp	r3, #0
     d96:	d004      	beq.n	da2 <_spi_set_config+0x1b2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d9a:	2280      	movs	r2, #128	; 0x80
     d9c:	0292      	lsls	r2, r2, #10
     d9e:	4313      	orrs	r3, r2
     da0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     da2:	683b      	ldr	r3, [r7, #0]
     da4:	7cdb      	ldrb	r3, [r3, #19]
     da6:	2b00      	cmp	r3, #0
     da8:	d004      	beq.n	db4 <_spi_set_config+0x1c4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dac:	2280      	movs	r2, #128	; 0x80
     dae:	0092      	lsls	r2, r2, #2
     db0:	4313      	orrs	r3, r2
     db2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	7d1b      	ldrb	r3, [r3, #20]
     db8:	2b00      	cmp	r3, #0
     dba:	d004      	beq.n	dc6 <_spi_set_config+0x1d6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dbe:	2280      	movs	r2, #128	; 0x80
     dc0:	0192      	lsls	r2, r2, #6
     dc2:	4313      	orrs	r3, r2
     dc4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dc8:	681a      	ldr	r2, [r3, #0]
     dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dcc:	431a      	orrs	r2, r3
     dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd0:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd4:	685a      	ldr	r2, [r3, #4]
     dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dd8:	431a      	orrs	r2, r3
     dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ddc:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     dde:	2300      	movs	r3, #0
}
     de0:	1c18      	adds	r0, r3, #0
     de2:	46bd      	mov	sp, r7
     de4:	b013      	add	sp, #76	; 0x4c
     de6:	bd90      	pop	{r4, r7, pc}
     de8:	00000745 	.word	0x00000745
     dec:	0000053d 	.word	0x0000053d
     df0:	00001efd 	.word	0x00001efd
     df4:	000006f9 	.word	0x000006f9
     df8:	00001d35 	.word	0x00001d35
     dfc:	00000435 	.word	0x00000435
     e00:	0000092d 	.word	0x0000092d

00000e04 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     e04:	b590      	push	{r4, r7, lr}
     e06:	b091      	sub	sp, #68	; 0x44
     e08:	af00      	add	r7, sp, #0
     e0a:	6078      	str	r0, [r7, #4]
     e0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	681b      	ldr	r3, [r3, #0]
     e18:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     e1a:	683b      	ldr	r3, [r7, #0]
     e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e1e:	2310      	movs	r3, #16
     e20:	18fb      	adds	r3, r7, r3
     e22:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     e24:	683b      	ldr	r3, [r7, #0]
     e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e28:	2310      	movs	r3, #16
     e2a:	18fb      	adds	r3, r7, r3
     e2c:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     e2e:	683b      	ldr	r3, [r7, #0]
     e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e32:	2310      	movs	r3, #16
     e34:	18fb      	adds	r3, r7, r3
     e36:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     e38:	683b      	ldr	r3, [r7, #0]
     e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     e3c:	2310      	movs	r3, #16
     e3e:	18fb      	adds	r3, r7, r3
     e40:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e42:	233f      	movs	r3, #63	; 0x3f
     e44:	18fb      	adds	r3, r7, r3
     e46:	2200      	movs	r2, #0
     e48:	701a      	strb	r2, [r3, #0]
     e4a:	e030      	b.n	eae <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e4c:	233f      	movs	r3, #63	; 0x3f
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781a      	ldrb	r2, [r3, #0]
     e52:	2310      	movs	r3, #16
     e54:	18fb      	adds	r3, r7, r3
     e56:	0092      	lsls	r2, r2, #2
     e58:	58d3      	ldr	r3, [r2, r3]
     e5a:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e5e:	2b00      	cmp	r3, #0
     e60:	d109      	bne.n	e76 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e64:	233f      	movs	r3, #63	; 0x3f
     e66:	18fb      	adds	r3, r7, r3
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	1c10      	adds	r0, r2, #0
     e6c:	1c19      	adds	r1, r3, #0
     e6e:	4b57      	ldr	r3, [pc, #348]	; (fcc <_spi_check_config+0x1c8>)
     e70:	4798      	blx	r3
     e72:	1c03      	adds	r3, r0, #0
     e74:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e78:	3301      	adds	r3, #1
     e7a:	d100      	bne.n	e7e <_spi_check_config+0x7a>
			continue;
     e7c:	e010      	b.n	ea0 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
     e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e80:	041b      	lsls	r3, r3, #16
     e82:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e86:	0c1b      	lsrs	r3, r3, #16
     e88:	b2db      	uxtb	r3, r3
     e8a:	1c18      	adds	r0, r3, #0
     e8c:	4b50      	ldr	r3, [pc, #320]	; (fd0 <_spi_check_config+0x1cc>)
     e8e:	4798      	blx	r3
     e90:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     e92:	429c      	cmp	r4, r3
     e94:	d004      	beq.n	ea0 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	2200      	movs	r2, #0
     e9a:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     e9c:	231c      	movs	r3, #28
     e9e:	e090      	b.n	fc2 <_spi_check_config+0x1be>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     ea0:	233f      	movs	r3, #63	; 0x3f
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	781a      	ldrb	r2, [r3, #0]
     ea6:	233f      	movs	r3, #63	; 0x3f
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	3201      	adds	r2, #1
     eac:	701a      	strb	r2, [r3, #0]
     eae:	233f      	movs	r3, #63	; 0x3f
     eb0:	18fb      	adds	r3, r7, r3
     eb2:	781b      	ldrb	r3, [r3, #0]
     eb4:	2b03      	cmp	r3, #3
     eb6:	d9c9      	bls.n	e4c <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     eb8:	2013      	movs	r0, #19
     eba:	4b46      	ldr	r3, [pc, #280]	; (fd4 <_spi_check_config+0x1d0>)
     ebc:	4798      	blx	r3
     ebe:	1c03      	adds	r3, r0, #0
     ec0:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     ec2:	2300      	movs	r3, #0
     ec4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     ec6:	2300      	movs	r3, #0
     ec8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     eca:	683b      	ldr	r3, [r7, #0]
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	2b01      	cmp	r3, #1
     ed0:	d123      	bne.n	f1a <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     ed2:	683b      	ldr	r3, [r7, #0]
     ed4:	6999      	ldr	r1, [r3, #24]
     ed6:	2323      	movs	r3, #35	; 0x23
     ed8:	18fc      	adds	r4, r7, r3
     eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     edc:	230e      	movs	r3, #14
     ede:	18fb      	adds	r3, r7, r3
     ee0:	1c08      	adds	r0, r1, #0
     ee2:	1c11      	adds	r1, r2, #0
     ee4:	1c1a      	adds	r2, r3, #0
     ee6:	4b3c      	ldr	r3, [pc, #240]	; (fd8 <_spi_check_config+0x1d4>)
     ee8:	4798      	blx	r3
     eea:	1c03      	adds	r3, r0, #0
     eec:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     eee:	2323      	movs	r3, #35	; 0x23
     ef0:	18fb      	adds	r3, r7, r3
     ef2:	781b      	ldrb	r3, [r3, #0]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d001      	beq.n	efc <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     ef8:	2317      	movs	r3, #23
     efa:	e062      	b.n	fc2 <_spi_check_config+0x1be>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     efe:	7b1b      	ldrb	r3, [r3, #12]
     f00:	b2da      	uxtb	r2, r3
     f02:	230e      	movs	r3, #14
     f04:	18fb      	adds	r3, r7, r3
     f06:	881b      	ldrh	r3, [r3, #0]
     f08:	b2db      	uxtb	r3, r3
     f0a:	429a      	cmp	r2, r3
     f0c:	d001      	beq.n	f12 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     f0e:	231c      	movs	r3, #28
     f10:	e057      	b.n	fc2 <_spi_check_config+0x1be>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f14:	220c      	movs	r2, #12
     f16:	4313      	orrs	r3, r2
     f18:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	685b      	ldr	r3, [r3, #4]
     f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f20:	4313      	orrs	r3, r2
     f22:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     f24:	683b      	ldr	r3, [r7, #0]
     f26:	689b      	ldr	r3, [r3, #8]
     f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f2a:	4313      	orrs	r3, r2
     f2c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     f2e:	683b      	ldr	r3, [r7, #0]
     f30:	68db      	ldr	r3, [r3, #12]
     f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     f34:	4313      	orrs	r3, r2
     f36:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
     f38:	683b      	ldr	r3, [r7, #0]
     f3a:	7c1b      	ldrb	r3, [r3, #16]
     f3c:	1c1a      	adds	r2, r3, #0
     f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f40:	4313      	orrs	r3, r2
     f42:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
     f44:	683b      	ldr	r3, [r7, #0]
     f46:	7c5b      	ldrb	r3, [r3, #17]
     f48:	2b00      	cmp	r3, #0
     f4a:	d003      	beq.n	f54 <_spi_check_config+0x150>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f4e:	2280      	movs	r2, #128	; 0x80
     f50:	4313      	orrs	r3, r2
     f52:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
     f54:	683b      	ldr	r3, [r7, #0]
     f56:	7c9b      	ldrb	r3, [r3, #18]
     f58:	2b00      	cmp	r3, #0
     f5a:	d004      	beq.n	f66 <_spi_check_config+0x162>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f5e:	2280      	movs	r2, #128	; 0x80
     f60:	0292      	lsls	r2, r2, #10
     f62:	4313      	orrs	r3, r2
     f64:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     f66:	683b      	ldr	r3, [r7, #0]
     f68:	7cdb      	ldrb	r3, [r3, #19]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d004      	beq.n	f78 <_spi_check_config+0x174>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f70:	2280      	movs	r2, #128	; 0x80
     f72:	0092      	lsls	r2, r2, #2
     f74:	4313      	orrs	r3, r2
     f76:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     f78:	683b      	ldr	r3, [r7, #0]
     f7a:	7d1b      	ldrb	r3, [r3, #20]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d004      	beq.n	f8a <_spi_check_config+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f82:	2280      	movs	r2, #128	; 0x80
     f84:	0192      	lsls	r2, r2, #6
     f86:	4313      	orrs	r3, r2
     f88:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f8c:	2202      	movs	r2, #2
     f8e:	4313      	orrs	r3, r2
     f90:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f94:	681a      	ldr	r2, [r3, #0]
     f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f98:	429a      	cmp	r2, r3
     f9a:	d10e      	bne.n	fba <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
     f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f9e:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fa2:	429a      	cmp	r2, r3
     fa4:	d109      	bne.n	fba <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     fa6:	683b      	ldr	r3, [r7, #0]
     fa8:	781a      	ldrb	r2, [r3, #0]
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
     fae:	683b      	ldr	r3, [r7, #0]
     fb0:	7c1a      	ldrb	r2, [r3, #16]
     fb2:	687b      	ldr	r3, [r7, #4]
     fb4:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
     fb6:	2300      	movs	r3, #0
     fb8:	e003      	b.n	fc2 <_spi_check_config+0x1be>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	2200      	movs	r2, #0
     fbe:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
     fc0:	231c      	movs	r3, #28
}
     fc2:	1c18      	adds	r0, r3, #0
     fc4:	46bd      	mov	sp, r7
     fc6:	b011      	add	sp, #68	; 0x44
     fc8:	bd90      	pop	{r4, r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	0000053d 	.word	0x0000053d
     fd0:	000007cd 	.word	0x000007cd
     fd4:	00001d35 	.word	0x00001d35
     fd8:	00000435 	.word	0x00000435

00000fdc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     fdc:	b580      	push	{r7, lr}
     fde:	b08a      	sub	sp, #40	; 0x28
     fe0:	af00      	add	r7, sp, #0
     fe2:	60f8      	str	r0, [r7, #12]
     fe4:	60b9      	str	r1, [r7, #8]
     fe6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	68ba      	ldr	r2, [r7, #8]
     fec:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     fee:	68fb      	ldr	r3, [r7, #12]
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ff6:	681b      	ldr	r3, [r3, #0]
     ff8:	2202      	movs	r2, #2
     ffa:	4013      	ands	r3, r2
     ffc:	d007      	beq.n	100e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
     ffe:	68fa      	ldr	r2, [r7, #12]
    1000:	687b      	ldr	r3, [r7, #4]
    1002:	1c10      	adds	r0, r2, #0
    1004:	1c19      	adds	r1, r3, #0
    1006:	4b2a      	ldr	r3, [pc, #168]	; (10b0 <spi_init+0xd4>)
    1008:	4798      	blx	r3
    100a:	1c03      	adds	r3, r0, #0
    100c:	e04b      	b.n	10a6 <spi_init+0xca>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	2201      	movs	r2, #1
    1014:	4013      	ands	r3, r2
    1016:	d001      	beq.n	101c <spi_init+0x40>
		return STATUS_BUSY;
    1018:	2305      	movs	r3, #5
    101a:	e044      	b.n	10a6 <spi_init+0xca>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    101c:	68fb      	ldr	r3, [r7, #12]
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	1c18      	adds	r0, r3, #0
    1022:	4b24      	ldr	r3, [pc, #144]	; (10b4 <spi_init+0xd8>)
    1024:	4798      	blx	r3
    1026:	1c03      	adds	r3, r0, #0
    1028:	623b      	str	r3, [r7, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    102a:	6a3b      	ldr	r3, [r7, #32]
    102c:	3302      	adds	r3, #2
    102e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1030:	6a3b      	ldr	r3, [r7, #32]
    1032:	3314      	adds	r3, #20
    1034:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1036:	69fb      	ldr	r3, [r7, #28]
    1038:	2201      	movs	r2, #1
    103a:	409a      	lsls	r2, r3
    103c:	1c13      	adds	r3, r2, #0
    103e:	2002      	movs	r0, #2
    1040:	1c19      	adds	r1, r3, #0
    1042:	4b1d      	ldr	r3, [pc, #116]	; (10b8 <spi_init+0xdc>)
    1044:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1046:	2314      	movs	r3, #20
    1048:	18fb      	adds	r3, r7, r3
    104a:	1c18      	adds	r0, r3, #0
    104c:	4b1b      	ldr	r3, [pc, #108]	; (10bc <spi_init+0xe0>)
    104e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	2224      	movs	r2, #36	; 0x24
    1054:	5c9a      	ldrb	r2, [r3, r2]
    1056:	2314      	movs	r3, #20
    1058:	18fb      	adds	r3, r7, r3
    105a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    105c:	69bb      	ldr	r3, [r7, #24]
    105e:	b2da      	uxtb	r2, r3
    1060:	2314      	movs	r3, #20
    1062:	18fb      	adds	r3, r7, r3
    1064:	1c10      	adds	r0, r2, #0
    1066:	1c19      	adds	r1, r3, #0
    1068:	4b15      	ldr	r3, [pc, #84]	; (10c0 <spi_init+0xe4>)
    106a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    106c:	69bb      	ldr	r3, [r7, #24]
    106e:	b2db      	uxtb	r3, r3
    1070:	1c18      	adds	r0, r3, #0
    1072:	4b14      	ldr	r3, [pc, #80]	; (10c4 <spi_init+0xe8>)
    1074:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	2224      	movs	r2, #36	; 0x24
    107a:	5c9b      	ldrb	r3, [r3, r2]
    107c:	1c18      	adds	r0, r3, #0
    107e:	2100      	movs	r1, #0
    1080:	4b11      	ldr	r3, [pc, #68]	; (10c8 <spi_init+0xec>)
    1082:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	2b01      	cmp	r3, #1
    108a:	d105      	bne.n	1098 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	220c      	movs	r2, #12
    1092:	431a      	orrs	r2, r3
    1094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1096:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1098:	68fa      	ldr	r2, [r7, #12]
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	1c10      	adds	r0, r2, #0
    109e:	1c19      	adds	r1, r3, #0
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <spi_init+0xf0>)
    10a2:	4798      	blx	r3
    10a4:	1c03      	adds	r3, r0, #0
}
    10a6:	1c18      	adds	r0, r3, #0
    10a8:	46bd      	mov	sp, r7
    10aa:	b00a      	add	sp, #40	; 0x28
    10ac:	bd80      	pop	{r7, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00000e05 	.word	0x00000e05
    10b4:	000006f9 	.word	0x000006f9
    10b8:	000008d1 	.word	0x000008d1
    10bc:	000008bd 	.word	0x000008bd
    10c0:	00001c11 	.word	0x00001c11
    10c4:	00001c55 	.word	0x00001c55
    10c8:	000004b1 	.word	0x000004b1
    10cc:	00000bf1 	.word	0x00000bf1

000010d0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    10d0:	b580      	push	{r7, lr}
    10d2:	b086      	sub	sp, #24
    10d4:	af00      	add	r7, sp, #0
    10d6:	60f8      	str	r0, [r7, #12]
    10d8:	60b9      	str	r1, [r7, #8]
    10da:	1dfb      	adds	r3, r7, #7
    10dc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    10de:	68fb      	ldr	r3, [r7, #12]
    10e0:	795b      	ldrb	r3, [r3, #5]
    10e2:	2b01      	cmp	r3, #1
    10e4:	d001      	beq.n	10ea <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    10e6:	2315      	movs	r3, #21
    10e8:	e05c      	b.n	11a4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	7a1b      	ldrb	r3, [r3, #8]
    10ee:	2201      	movs	r2, #1
    10f0:	4053      	eors	r3, r2
    10f2:	b2db      	uxtb	r3, r3
    10f4:	2b00      	cmp	r3, #0
    10f6:	d054      	beq.n	11a2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    10f8:	1dfb      	adds	r3, r7, #7
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d04a      	beq.n	1196 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1100:	68bb      	ldr	r3, [r7, #8]
    1102:	785b      	ldrb	r3, [r3, #1]
    1104:	2b00      	cmp	r3, #0
    1106:	d03f      	beq.n	1188 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1108:	68fb      	ldr	r3, [r7, #12]
    110a:	1c18      	adds	r0, r3, #0
    110c:	4b27      	ldr	r3, [pc, #156]	; (11ac <spi_select_slave+0xdc>)
    110e:	4798      	blx	r3
    1110:	1c03      	adds	r3, r0, #0
    1112:	1c1a      	adds	r2, r3, #0
    1114:	2301      	movs	r3, #1
    1116:	4053      	eors	r3, r2
    1118:	b2db      	uxtb	r3, r3
    111a:	2b00      	cmp	r3, #0
    111c:	d007      	beq.n	112e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    111e:	68bb      	ldr	r3, [r7, #8]
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	1c18      	adds	r0, r3, #0
    1124:	2101      	movs	r1, #1
    1126:	4b22      	ldr	r3, [pc, #136]	; (11b0 <spi_select_slave+0xe0>)
    1128:	4798      	blx	r3
					return STATUS_BUSY;
    112a:	2305      	movs	r3, #5
    112c:	e03a      	b.n	11a4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    112e:	68bb      	ldr	r3, [r7, #8]
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	1c18      	adds	r0, r3, #0
    1134:	2100      	movs	r1, #0
    1136:	4b1e      	ldr	r3, [pc, #120]	; (11b0 <spi_select_slave+0xe0>)
    1138:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    113a:	68bb      	ldr	r3, [r7, #8]
    113c:	789b      	ldrb	r3, [r3, #2]
    113e:	b29b      	uxth	r3, r3
    1140:	68fa      	ldr	r2, [r7, #12]
    1142:	1c10      	adds	r0, r2, #0
    1144:	1c19      	adds	r1, r3, #0
    1146:	4b1b      	ldr	r3, [pc, #108]	; (11b4 <spi_select_slave+0xe4>)
    1148:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    114a:	68fb      	ldr	r3, [r7, #12]
    114c:	79db      	ldrb	r3, [r3, #7]
    114e:	2201      	movs	r2, #1
    1150:	4053      	eors	r3, r2
    1152:	b2db      	uxtb	r3, r3
    1154:	2b00      	cmp	r3, #0
    1156:	d024      	beq.n	11a2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    1158:	46c0      	nop			; (mov r8, r8)
    115a:	68fb      	ldr	r3, [r7, #12]
    115c:	1c18      	adds	r0, r3, #0
    115e:	4b16      	ldr	r3, [pc, #88]	; (11b8 <spi_select_slave+0xe8>)
    1160:	4798      	blx	r3
    1162:	1c03      	adds	r3, r0, #0
    1164:	1c1a      	adds	r2, r3, #0
    1166:	2301      	movs	r3, #1
    1168:	4053      	eors	r3, r2
    116a:	b2db      	uxtb	r3, r3
    116c:	2b00      	cmp	r3, #0
    116e:	d1f4      	bne.n	115a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1170:	2316      	movs	r3, #22
    1172:	18fb      	adds	r3, r7, r3
    1174:	2200      	movs	r2, #0
    1176:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1178:	68fa      	ldr	r2, [r7, #12]
    117a:	2316      	movs	r3, #22
    117c:	18fb      	adds	r3, r7, r3
    117e:	1c10      	adds	r0, r2, #0
    1180:	1c19      	adds	r1, r3, #0
    1182:	4b0e      	ldr	r3, [pc, #56]	; (11bc <spi_select_slave+0xec>)
    1184:	4798      	blx	r3
    1186:	e00c      	b.n	11a2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1188:	68bb      	ldr	r3, [r7, #8]
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	1c18      	adds	r0, r3, #0
    118e:	2100      	movs	r1, #0
    1190:	4b07      	ldr	r3, [pc, #28]	; (11b0 <spi_select_slave+0xe0>)
    1192:	4798      	blx	r3
    1194:	e005      	b.n	11a2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1196:	68bb      	ldr	r3, [r7, #8]
    1198:	781b      	ldrb	r3, [r3, #0]
    119a:	1c18      	adds	r0, r3, #0
    119c:	2101      	movs	r1, #1
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <spi_select_slave+0xe0>)
    11a0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    11a2:	2300      	movs	r3, #0
}
    11a4:	1c18      	adds	r0, r3, #0
    11a6:	46bd      	mov	sp, r7
    11a8:	b006      	add	sp, #24
    11aa:	bd80      	pop	{r7, pc}
    11ac:	000009fd 	.word	0x000009fd
    11b0:	0000086d 	.word	0x0000086d
    11b4:	00000a4d 	.word	0x00000a4d
    11b8:	00000a25 	.word	0x00000a25
    11bc:	00000a95 	.word	0x00000a95

000011c0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b086      	sub	sp, #24
    11c4:	af00      	add	r7, sp, #0
    11c6:	60f8      	str	r0, [r7, #12]
    11c8:	60b9      	str	r1, [r7, #8]
    11ca:	1dbb      	adds	r3, r7, #6
    11cc:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    11ce:	1dbb      	adds	r3, r7, #6
    11d0:	881b      	ldrh	r3, [r3, #0]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d101      	bne.n	11da <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    11d6:	2317      	movs	r3, #23
    11d8:	e080      	b.n	12dc <spi_write_buffer_wait+0x11c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    11da:	2316      	movs	r3, #22
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    11e2:	2314      	movs	r3, #20
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	1dba      	adds	r2, r7, #6
    11e8:	8812      	ldrh	r2, [r2, #0]
    11ea:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    11ec:	e05e      	b.n	12ac <spi_write_buffer_wait+0xec>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	68fb      	ldr	r3, [r7, #12]
    11f2:	1c18      	adds	r0, r3, #0
    11f4:	4b3b      	ldr	r3, [pc, #236]	; (12e4 <spi_write_buffer_wait+0x124>)
    11f6:	4798      	blx	r3
    11f8:	1c03      	adds	r3, r0, #0
    11fa:	1c1a      	adds	r2, r3, #0
    11fc:	2301      	movs	r3, #1
    11fe:	4053      	eors	r3, r2
    1200:	b2db      	uxtb	r3, r3
    1202:	2b00      	cmp	r3, #0
    1204:	d1f4      	bne.n	11f0 <spi_write_buffer_wait+0x30>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1206:	2316      	movs	r3, #22
    1208:	18fb      	adds	r3, r7, r3
    120a:	881b      	ldrh	r3, [r3, #0]
    120c:	2216      	movs	r2, #22
    120e:	18ba      	adds	r2, r7, r2
    1210:	1c59      	adds	r1, r3, #1
    1212:	8011      	strh	r1, [r2, #0]
    1214:	1c1a      	adds	r2, r3, #0
    1216:	68bb      	ldr	r3, [r7, #8]
    1218:	189b      	adds	r3, r3, r2
    121a:	781a      	ldrb	r2, [r3, #0]
    121c:	2312      	movs	r3, #18
    121e:	18fb      	adds	r3, r7, r3
    1220:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	799b      	ldrb	r3, [r3, #6]
    1226:	2b01      	cmp	r3, #1
    1228:	d114      	bne.n	1254 <spi_write_buffer_wait+0x94>
			data_to_send |= (tx_data[tx_pos++] << 8);
    122a:	2316      	movs	r3, #22
    122c:	18fb      	adds	r3, r7, r3
    122e:	881b      	ldrh	r3, [r3, #0]
    1230:	2216      	movs	r2, #22
    1232:	18ba      	adds	r2, r7, r2
    1234:	1c59      	adds	r1, r3, #1
    1236:	8011      	strh	r1, [r2, #0]
    1238:	1c1a      	adds	r2, r3, #0
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	189b      	adds	r3, r3, r2
    123e:	781b      	ldrb	r3, [r3, #0]
    1240:	021b      	lsls	r3, r3, #8
    1242:	b29a      	uxth	r2, r3
    1244:	2312      	movs	r3, #18
    1246:	18fb      	adds	r3, r7, r3
    1248:	881b      	ldrh	r3, [r3, #0]
    124a:	4313      	orrs	r3, r2
    124c:	b29a      	uxth	r2, r3
    124e:	2312      	movs	r3, #18
    1250:	18fb      	adds	r3, r7, r3
    1252:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1254:	68fa      	ldr	r2, [r7, #12]
    1256:	2312      	movs	r3, #18
    1258:	18fb      	adds	r3, r7, r3
    125a:	881b      	ldrh	r3, [r3, #0]
    125c:	1c10      	adds	r0, r2, #0
    125e:	1c19      	adds	r1, r3, #0
    1260:	4b21      	ldr	r3, [pc, #132]	; (12e8 <spi_write_buffer_wait+0x128>)
    1262:	4798      	blx	r3

		if (module->receiver_enabled) {
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	79db      	ldrb	r3, [r3, #7]
    1268:	2214      	movs	r2, #20
    126a:	18ba      	adds	r2, r7, r2
    126c:	2114      	movs	r1, #20
    126e:	1879      	adds	r1, r7, r1
    1270:	8809      	ldrh	r1, [r1, #0]
    1272:	8011      	strh	r1, [r2, #0]
    1274:	2b00      	cmp	r3, #0
    1276:	d019      	beq.n	12ac <spi_write_buffer_wait+0xec>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1278:	46c0      	nop			; (mov r8, r8)
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	1c18      	adds	r0, r3, #0
    127e:	4b1b      	ldr	r3, [pc, #108]	; (12ec <spi_write_buffer_wait+0x12c>)
    1280:	4798      	blx	r3
    1282:	1c03      	adds	r3, r0, #0
    1284:	1c1a      	adds	r2, r3, #0
    1286:	2301      	movs	r3, #1
    1288:	4053      	eors	r3, r2
    128a:	b2db      	uxtb	r3, r3
    128c:	2b00      	cmp	r3, #0
    128e:	d1f4      	bne.n	127a <spi_write_buffer_wait+0xba>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1290:	68fa      	ldr	r2, [r7, #12]
    1292:	2310      	movs	r3, #16
    1294:	18fb      	adds	r3, r7, r3
    1296:	1c10      	adds	r0, r2, #0
    1298:	1c19      	adds	r1, r3, #0
    129a:	4b15      	ldr	r3, [pc, #84]	; (12f0 <spi_write_buffer_wait+0x130>)
    129c:	4798      	blx	r3
			flush_length--;
    129e:	2314      	movs	r3, #20
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	881a      	ldrh	r2, [r3, #0]
    12a4:	2314      	movs	r3, #20
    12a6:	18fb      	adds	r3, r7, r3
    12a8:	3a01      	subs	r2, #1
    12aa:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    12ac:	1dbb      	adds	r3, r7, #6
    12ae:	881b      	ldrh	r3, [r3, #0]
    12b0:	1dba      	adds	r2, r7, #6
    12b2:	1e59      	subs	r1, r3, #1
    12b4:	8011      	strh	r1, [r2, #0]
    12b6:	2b00      	cmp	r3, #0
    12b8:	d199      	bne.n	11ee <spi_write_buffer_wait+0x2e>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    12ba:	68fb      	ldr	r3, [r7, #12]
    12bc:	795b      	ldrb	r3, [r3, #5]
    12be:	2b01      	cmp	r3, #1
    12c0:	d10b      	bne.n	12da <spi_write_buffer_wait+0x11a>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	68fb      	ldr	r3, [r7, #12]
    12c6:	1c18      	adds	r0, r3, #0
    12c8:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <spi_write_buffer_wait+0x134>)
    12ca:	4798      	blx	r3
    12cc:	1c03      	adds	r3, r0, #0
    12ce:	1c1a      	adds	r2, r3, #0
    12d0:	2301      	movs	r3, #1
    12d2:	4053      	eors	r3, r2
    12d4:	b2db      	uxtb	r3, r3
    12d6:	2b00      	cmp	r3, #0
    12d8:	d1f4      	bne.n	12c4 <spi_write_buffer_wait+0x104>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    12da:	2300      	movs	r3, #0
}
    12dc:	1c18      	adds	r0, r3, #0
    12de:	46bd      	mov	sp, r7
    12e0:	b006      	add	sp, #24
    12e2:	bd80      	pop	{r7, pc}
    12e4:	000009fd 	.word	0x000009fd
    12e8:	00000a4d 	.word	0x00000a4d
    12ec:	00000a25 	.word	0x00000a25
    12f0:	00000a95 	.word	0x00000a95
    12f4:	000009d5 	.word	0x000009d5

000012f8 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    12f8:	b590      	push	{r4, r7, lr}
    12fa:	b089      	sub	sp, #36	; 0x24
    12fc:	af00      	add	r7, sp, #0
    12fe:	60f8      	str	r0, [r7, #12]
    1300:	60b9      	str	r1, [r7, #8]
    1302:	607a      	str	r2, [r7, #4]
    1304:	1c1a      	adds	r2, r3, #0
    1306:	1cbb      	adds	r3, r7, #2
    1308:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    130a:	1cbb      	adds	r3, r7, #2
    130c:	881b      	ldrh	r3, [r3, #0]
    130e:	2b00      	cmp	r3, #0
    1310:	d101      	bne.n	1316 <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
    1312:	2317      	movs	r3, #23
    1314:	e0b9      	b.n	148a <spi_transceive_buffer_wait+0x192>
	}

	if (!(module->receiver_enabled)) {
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	79db      	ldrb	r3, [r3, #7]
    131a:	2201      	movs	r2, #1
    131c:	4053      	eors	r3, r2
    131e:	b2db      	uxtb	r3, r3
    1320:	2b00      	cmp	r3, #0
    1322:	d001      	beq.n	1328 <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
    1324:	231c      	movs	r3, #28
    1326:	e0b0      	b.n	148a <spi_transceive_buffer_wait+0x192>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    1328:	231e      	movs	r3, #30
    132a:	18fb      	adds	r3, r7, r3
    132c:	2200      	movs	r2, #0
    132e:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
    1330:	231c      	movs	r3, #28
    1332:	18fb      	adds	r3, r7, r3
    1334:	2200      	movs	r2, #0
    1336:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
    1338:	231a      	movs	r3, #26
    133a:	18fb      	adds	r3, r7, r3
    133c:	1cba      	adds	r2, r7, #2
    133e:	8812      	ldrh	r2, [r2, #0]
    1340:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
    1342:	e089      	b.n	1458 <spi_transceive_buffer_wait+0x160>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1344:	46c0      	nop			; (mov r8, r8)
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	1c18      	adds	r0, r3, #0
    134a:	4b52      	ldr	r3, [pc, #328]	; (1494 <spi_transceive_buffer_wait+0x19c>)
    134c:	4798      	blx	r3
    134e:	1c03      	adds	r3, r0, #0
    1350:	1c1a      	adds	r2, r3, #0
    1352:	2301      	movs	r3, #1
    1354:	4053      	eors	r3, r2
    1356:	b2db      	uxtb	r3, r3
    1358:	2b00      	cmp	r3, #0
    135a:	d1f4      	bne.n	1346 <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    135c:	231e      	movs	r3, #30
    135e:	18fb      	adds	r3, r7, r3
    1360:	881b      	ldrh	r3, [r3, #0]
    1362:	221e      	movs	r2, #30
    1364:	18ba      	adds	r2, r7, r2
    1366:	1c59      	adds	r1, r3, #1
    1368:	8011      	strh	r1, [r2, #0]
    136a:	1c1a      	adds	r2, r3, #0
    136c:	68bb      	ldr	r3, [r7, #8]
    136e:	189b      	adds	r3, r3, r2
    1370:	781a      	ldrb	r2, [r3, #0]
    1372:	2318      	movs	r3, #24
    1374:	18fb      	adds	r3, r7, r3
    1376:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1378:	68fb      	ldr	r3, [r7, #12]
    137a:	799b      	ldrb	r3, [r3, #6]
    137c:	2b01      	cmp	r3, #1
    137e:	d114      	bne.n	13aa <spi_transceive_buffer_wait+0xb2>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1380:	231e      	movs	r3, #30
    1382:	18fb      	adds	r3, r7, r3
    1384:	881b      	ldrh	r3, [r3, #0]
    1386:	221e      	movs	r2, #30
    1388:	18ba      	adds	r2, r7, r2
    138a:	1c59      	adds	r1, r3, #1
    138c:	8011      	strh	r1, [r2, #0]
    138e:	1c1a      	adds	r2, r3, #0
    1390:	68bb      	ldr	r3, [r7, #8]
    1392:	189b      	adds	r3, r3, r2
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	021b      	lsls	r3, r3, #8
    1398:	b29a      	uxth	r2, r3
    139a:	2318      	movs	r3, #24
    139c:	18fb      	adds	r3, r7, r3
    139e:	881b      	ldrh	r3, [r3, #0]
    13a0:	4313      	orrs	r3, r2
    13a2:	b29a      	uxth	r2, r3
    13a4:	2318      	movs	r3, #24
    13a6:	18fb      	adds	r3, r7, r3
    13a8:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    13aa:	68fa      	ldr	r2, [r7, #12]
    13ac:	2318      	movs	r3, #24
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	881b      	ldrh	r3, [r3, #0]
    13b2:	1c10      	adds	r0, r2, #0
    13b4:	1c19      	adds	r1, r3, #0
    13b6:	4b38      	ldr	r3, [pc, #224]	; (1498 <spi_transceive_buffer_wait+0x1a0>)
    13b8:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	1c18      	adds	r0, r3, #0
    13c0:	4b36      	ldr	r3, [pc, #216]	; (149c <spi_transceive_buffer_wait+0x1a4>)
    13c2:	4798      	blx	r3
    13c4:	1c03      	adds	r3, r0, #0
    13c6:	1c1a      	adds	r2, r3, #0
    13c8:	2301      	movs	r3, #1
    13ca:	4053      	eors	r3, r2
    13cc:	b2db      	uxtb	r3, r3
    13ce:	2b00      	cmp	r3, #0
    13d0:	d1f4      	bne.n	13bc <spi_transceive_buffer_wait+0xc4>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    13d2:	2314      	movs	r3, #20
    13d4:	18fb      	adds	r3, r7, r3
    13d6:	2200      	movs	r2, #0
    13d8:	801a      	strh	r2, [r3, #0]
		rx_length--;
    13da:	231a      	movs	r3, #26
    13dc:	18fb      	adds	r3, r7, r3
    13de:	881a      	ldrh	r2, [r3, #0]
    13e0:	231a      	movs	r3, #26
    13e2:	18fb      	adds	r3, r7, r3
    13e4:	3a01      	subs	r2, #1
    13e6:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    13e8:	2317      	movs	r3, #23
    13ea:	18fc      	adds	r4, r7, r3
    13ec:	68fa      	ldr	r2, [r7, #12]
    13ee:	2314      	movs	r3, #20
    13f0:	18fb      	adds	r3, r7, r3
    13f2:	1c10      	adds	r0, r2, #0
    13f4:	1c19      	adds	r1, r3, #0
    13f6:	4b2a      	ldr	r3, [pc, #168]	; (14a0 <spi_transceive_buffer_wait+0x1a8>)
    13f8:	4798      	blx	r3
    13fa:	1c03      	adds	r3, r0, #0
    13fc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    13fe:	2317      	movs	r3, #23
    1400:	18fb      	adds	r3, r7, r3
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	2b00      	cmp	r3, #0
    1406:	d003      	beq.n	1410 <spi_transceive_buffer_wait+0x118>
			/* Overflow, abort */
			return retval;
    1408:	2317      	movs	r3, #23
    140a:	18fb      	adds	r3, r7, r3
    140c:	781b      	ldrb	r3, [r3, #0]
    140e:	e03c      	b.n	148a <spi_transceive_buffer_wait+0x192>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    1410:	231c      	movs	r3, #28
    1412:	18fb      	adds	r3, r7, r3
    1414:	881b      	ldrh	r3, [r3, #0]
    1416:	221c      	movs	r2, #28
    1418:	18ba      	adds	r2, r7, r2
    141a:	1c59      	adds	r1, r3, #1
    141c:	8011      	strh	r1, [r2, #0]
    141e:	1c1a      	adds	r2, r3, #0
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	189b      	adds	r3, r3, r2
    1424:	2214      	movs	r2, #20
    1426:	18ba      	adds	r2, r7, r2
    1428:	8812      	ldrh	r2, [r2, #0]
    142a:	b2d2      	uxtb	r2, r2
    142c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    142e:	68fb      	ldr	r3, [r7, #12]
    1430:	799b      	ldrb	r3, [r3, #6]
    1432:	2b01      	cmp	r3, #1
    1434:	d110      	bne.n	1458 <spi_transceive_buffer_wait+0x160>
			rx_data[rx_pos++] = (received_data >> 8);
    1436:	231c      	movs	r3, #28
    1438:	18fb      	adds	r3, r7, r3
    143a:	881b      	ldrh	r3, [r3, #0]
    143c:	221c      	movs	r2, #28
    143e:	18ba      	adds	r2, r7, r2
    1440:	1c59      	adds	r1, r3, #1
    1442:	8011      	strh	r1, [r2, #0]
    1444:	1c1a      	adds	r2, r3, #0
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	189b      	adds	r3, r3, r2
    144a:	2214      	movs	r2, #20
    144c:	18ba      	adds	r2, r7, r2
    144e:	8812      	ldrh	r2, [r2, #0]
    1450:	0a12      	lsrs	r2, r2, #8
    1452:	b292      	uxth	r2, r2
    1454:	b2d2      	uxtb	r2, r2
    1456:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
    1458:	1cbb      	adds	r3, r7, #2
    145a:	881b      	ldrh	r3, [r3, #0]
    145c:	1cba      	adds	r2, r7, #2
    145e:	1e59      	subs	r1, r3, #1
    1460:	8011      	strh	r1, [r2, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d000      	beq.n	1468 <spi_transceive_buffer_wait+0x170>
    1466:	e76d      	b.n	1344 <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	795b      	ldrb	r3, [r3, #5]
    146c:	2b01      	cmp	r3, #1
    146e:	d10b      	bne.n	1488 <spi_transceive_buffer_wait+0x190>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1470:	46c0      	nop			; (mov r8, r8)
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	1c18      	adds	r0, r3, #0
    1476:	4b0b      	ldr	r3, [pc, #44]	; (14a4 <spi_transceive_buffer_wait+0x1ac>)
    1478:	4798      	blx	r3
    147a:	1c03      	adds	r3, r0, #0
    147c:	1c1a      	adds	r2, r3, #0
    147e:	2301      	movs	r3, #1
    1480:	4053      	eors	r3, r2
    1482:	b2db      	uxtb	r3, r3
    1484:	2b00      	cmp	r3, #0
    1486:	d1f4      	bne.n	1472 <spi_transceive_buffer_wait+0x17a>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1488:	2300      	movs	r3, #0
}
    148a:	1c18      	adds	r0, r3, #0
    148c:	46bd      	mov	sp, r7
    148e:	b009      	add	sp, #36	; 0x24
    1490:	bd90      	pop	{r4, r7, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	000009fd 	.word	0x000009fd
    1498:	00000a4d 	.word	0x00000a4d
    149c:	00000a25 	.word	0x00000a25
    14a0:	00000a95 	.word	0x00000a95
    14a4:	000009d5 	.word	0x000009d5

000014a8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    14a8:	b580      	push	{r7, lr}
    14aa:	b082      	sub	sp, #8
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	2201      	movs	r2, #1
    14b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    14b6:	687b      	ldr	r3, [r7, #4]
    14b8:	2200      	movs	r2, #0
    14ba:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	2206      	movs	r2, #6
    14c0:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	2200      	movs	r2, #0
    14c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    14c8:	687b      	ldr	r3, [r7, #4]
    14ca:	2200      	movs	r2, #0
    14cc:	725a      	strb	r2, [r3, #9]
}
    14ce:	46bd      	mov	sp, r7
    14d0:	b002      	add	sp, #8
    14d2:	bd80      	pop	{r7, pc}

000014d4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b082      	sub	sp, #8
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    14dc:	687b      	ldr	r3, [r7, #4]
    14de:	2203      	movs	r2, #3
    14e0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    14e2:	687b      	ldr	r3, [r7, #4]
    14e4:	2200      	movs	r2, #0
    14e6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	2201      	movs	r2, #1
    14ec:	709a      	strb	r2, [r3, #2]
}
    14ee:	46bd      	mov	sp, r7
    14f0:	b002      	add	sp, #8
    14f2:	bd80      	pop	{r7, pc}

000014f4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	b082      	sub	sp, #8
    14f8:	af00      	add	r7, sp, #0
    14fa:	1c02      	adds	r2, r0, #0
    14fc:	1dfb      	adds	r3, r7, #7
    14fe:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1500:	4a03      	ldr	r2, [pc, #12]	; (1510 <system_cpu_clock_set_divider+0x1c>)
    1502:	1dfb      	adds	r3, r7, #7
    1504:	781b      	ldrb	r3, [r3, #0]
    1506:	7213      	strb	r3, [r2, #8]
}
    1508:	46bd      	mov	sp, r7
    150a:	b002      	add	sp, #8
    150c:	bd80      	pop	{r7, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	40000400 	.word	0x40000400

00001514 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    1514:	b580      	push	{r7, lr}
    1516:	b082      	sub	sp, #8
    1518:	af00      	add	r7, sp, #0
    151a:	1c02      	adds	r2, r0, #0
    151c:	1dfb      	adds	r3, r7, #7
    151e:	701a      	strb	r2, [r3, #0]
    1520:	1dbb      	adds	r3, r7, #6
    1522:	1c0a      	adds	r2, r1, #0
    1524:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1526:	1dfb      	adds	r3, r7, #7
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b01      	cmp	r3, #1
    152c:	d008      	beq.n	1540 <system_apb_clock_set_divider+0x2c>
    152e:	2b02      	cmp	r3, #2
    1530:	d00b      	beq.n	154a <system_apb_clock_set_divider+0x36>
    1532:	2b00      	cmp	r3, #0
    1534:	d10e      	bne.n	1554 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1536:	4a0b      	ldr	r2, [pc, #44]	; (1564 <system_apb_clock_set_divider+0x50>)
    1538:	1dbb      	adds	r3, r7, #6
    153a:	781b      	ldrb	r3, [r3, #0]
    153c:	7253      	strb	r3, [r2, #9]
			break;
    153e:	e00b      	b.n	1558 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1540:	4a08      	ldr	r2, [pc, #32]	; (1564 <system_apb_clock_set_divider+0x50>)
    1542:	1dbb      	adds	r3, r7, #6
    1544:	781b      	ldrb	r3, [r3, #0]
    1546:	7293      	strb	r3, [r2, #10]
			break;
    1548:	e006      	b.n	1558 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    154a:	4a06      	ldr	r2, [pc, #24]	; (1564 <system_apb_clock_set_divider+0x50>)
    154c:	1dbb      	adds	r3, r7, #6
    154e:	781b      	ldrb	r3, [r3, #0]
    1550:	72d3      	strb	r3, [r2, #11]
			break;
    1552:	e001      	b.n	1558 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1554:	2317      	movs	r3, #23
    1556:	e000      	b.n	155a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1558:	2300      	movs	r3, #0
}
    155a:	1c18      	adds	r0, r3, #0
    155c:	46bd      	mov	sp, r7
    155e:	b002      	add	sp, #8
    1560:	bd80      	pop	{r7, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	40000400 	.word	0x40000400

00001568 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1568:	b580      	push	{r7, lr}
    156a:	b082      	sub	sp, #8
    156c:	af00      	add	r7, sp, #0
    156e:	1c02      	adds	r2, r0, #0
    1570:	1dfb      	adds	r3, r7, #7
    1572:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1574:	4b08      	ldr	r3, [pc, #32]	; (1598 <system_flash_set_waitstates+0x30>)
    1576:	1dfa      	adds	r2, r7, #7
    1578:	7812      	ldrb	r2, [r2, #0]
    157a:	210f      	movs	r1, #15
    157c:	400a      	ands	r2, r1
    157e:	b2d2      	uxtb	r2, r2
    1580:	210f      	movs	r1, #15
    1582:	400a      	ands	r2, r1
    1584:	0052      	lsls	r2, r2, #1
    1586:	6859      	ldr	r1, [r3, #4]
    1588:	201e      	movs	r0, #30
    158a:	4381      	bics	r1, r0
    158c:	430a      	orrs	r2, r1
    158e:	605a      	str	r2, [r3, #4]
}
    1590:	46bd      	mov	sp, r7
    1592:	b002      	add	sp, #8
    1594:	bd80      	pop	{r7, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	41004000 	.word	0x41004000

0000159c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    159c:	b580      	push	{r7, lr}
    159e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15a0:	46c0      	nop			; (mov r8, r8)
    15a2:	4b03      	ldr	r3, [pc, #12]	; (15b0 <_system_dfll_wait_for_sync+0x14>)
    15a4:	68db      	ldr	r3, [r3, #12]
    15a6:	2210      	movs	r2, #16
    15a8:	4013      	ands	r3, r2
    15aa:	d0fa      	beq.n	15a2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    15ac:	46bd      	mov	sp, r7
    15ae:	bd80      	pop	{r7, pc}
    15b0:	40000800 	.word	0x40000800

000015b4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    15b8:	4a0c      	ldr	r2, [pc, #48]	; (15ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    15ba:	4b0d      	ldr	r3, [pc, #52]	; (15f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	b29b      	uxth	r3, r3
    15c0:	2180      	movs	r1, #128	; 0x80
    15c2:	438b      	bics	r3, r1
    15c4:	b29b      	uxth	r3, r3
    15c6:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    15c8:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    15ca:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    15cc:	4a07      	ldr	r2, [pc, #28]	; (15ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    15ce:	4b08      	ldr	r3, [pc, #32]	; (15f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    15d0:	689b      	ldr	r3, [r3, #8]
    15d2:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    15d4:	4a05      	ldr	r2, [pc, #20]	; (15ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    15d6:	4b06      	ldr	r3, [pc, #24]	; (15f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    15d8:	685b      	ldr	r3, [r3, #4]
    15da:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    15dc:	4a03      	ldr	r2, [pc, #12]	; (15ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    15de:	4b04      	ldr	r3, [pc, #16]	; (15f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    15e0:	681b      	ldr	r3, [r3, #0]
    15e2:	b29b      	uxth	r3, r3
    15e4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    15e6:	46bd      	mov	sp, r7
    15e8:	bd80      	pop	{r7, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	40000800 	.word	0x40000800
    15f0:	2000003c 	.word	0x2000003c
    15f4:	0000159d 	.word	0x0000159d

000015f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	af00      	add	r7, sp, #0
    15fe:	1c02      	adds	r2, r0, #0
    1600:	1dfb      	adds	r3, r7, #7
    1602:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1604:	1dfb      	adds	r3, r7, #7
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	2b08      	cmp	r3, #8
    160a:	d842      	bhi.n	1692 <system_clock_source_get_hz+0x9a>
    160c:	009a      	lsls	r2, r3, #2
    160e:	4b23      	ldr	r3, [pc, #140]	; (169c <system_clock_source_get_hz+0xa4>)
    1610:	18d3      	adds	r3, r2, r3
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1616:	4b22      	ldr	r3, [pc, #136]	; (16a0 <system_clock_source_get_hz+0xa8>)
    1618:	691b      	ldr	r3, [r3, #16]
    161a:	e03b      	b.n	1694 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    161c:	4b21      	ldr	r3, [pc, #132]	; (16a4 <system_clock_source_get_hz+0xac>)
    161e:	6a1b      	ldr	r3, [r3, #32]
    1620:	0a1b      	lsrs	r3, r3, #8
    1622:	1c1a      	adds	r2, r3, #0
    1624:	2303      	movs	r3, #3
    1626:	4013      	ands	r3, r2
    1628:	b2db      	uxtb	r3, r3
    162a:	1c1a      	adds	r2, r3, #0
    162c:	4b1e      	ldr	r3, [pc, #120]	; (16a8 <system_clock_source_get_hz+0xb0>)
    162e:	40d3      	lsrs	r3, r2
    1630:	e030      	b.n	1694 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1632:	2380      	movs	r3, #128	; 0x80
    1634:	021b      	lsls	r3, r3, #8
    1636:	e02d      	b.n	1694 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1638:	2380      	movs	r3, #128	; 0x80
    163a:	021b      	lsls	r3, r3, #8
    163c:	e02a      	b.n	1694 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    163e:	4b18      	ldr	r3, [pc, #96]	; (16a0 <system_clock_source_get_hz+0xa8>)
    1640:	695b      	ldr	r3, [r3, #20]
    1642:	e027      	b.n	1694 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1644:	4b16      	ldr	r3, [pc, #88]	; (16a0 <system_clock_source_get_hz+0xa8>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	2202      	movs	r2, #2
    164a:	4013      	ands	r3, r2
    164c:	d101      	bne.n	1652 <system_clock_source_get_hz+0x5a>
			return 0;
    164e:	2300      	movs	r3, #0
    1650:	e020      	b.n	1694 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1652:	4b16      	ldr	r3, [pc, #88]	; (16ac <system_clock_source_get_hz+0xb4>)
    1654:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1656:	4b12      	ldr	r3, [pc, #72]	; (16a0 <system_clock_source_get_hz+0xa8>)
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	2204      	movs	r2, #4
    165c:	4013      	ands	r3, r2
    165e:	d009      	beq.n	1674 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1660:	2000      	movs	r0, #0
    1662:	4b13      	ldr	r3, [pc, #76]	; (16b0 <system_clock_source_get_hz+0xb8>)
    1664:	4798      	blx	r3
    1666:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    1668:	4b0d      	ldr	r3, [pc, #52]	; (16a0 <system_clock_source_get_hz+0xa8>)
    166a:	689b      	ldr	r3, [r3, #8]
    166c:	041b      	lsls	r3, r3, #16
    166e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1670:	4353      	muls	r3, r2
    1672:	e00f      	b.n	1694 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <system_clock_source_get_hz+0xbc>)
    1676:	e00d      	b.n	1694 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1678:	4a0a      	ldr	r2, [pc, #40]	; (16a4 <system_clock_source_get_hz+0xac>)
    167a:	2350      	movs	r3, #80	; 0x50
    167c:	5cd3      	ldrb	r3, [r2, r3]
    167e:	b2db      	uxtb	r3, r3
    1680:	1c1a      	adds	r2, r3, #0
    1682:	2304      	movs	r3, #4
    1684:	4013      	ands	r3, r2
    1686:	d101      	bne.n	168c <system_clock_source_get_hz+0x94>
			return 0;
    1688:	2300      	movs	r3, #0
    168a:	e003      	b.n	1694 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    168c:	4b04      	ldr	r3, [pc, #16]	; (16a0 <system_clock_source_get_hz+0xa8>)
    168e:	68db      	ldr	r3, [r3, #12]
    1690:	e000      	b.n	1694 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    1692:	2300      	movs	r3, #0
	}
}
    1694:	1c18      	adds	r0, r3, #0
    1696:	46bd      	mov	sp, r7
    1698:	b002      	add	sp, #8
    169a:	bd80      	pop	{r7, pc}
    169c:	000025dc 	.word	0x000025dc
    16a0:	2000003c 	.word	0x2000003c
    16a4:	40000800 	.word	0x40000800
    16a8:	007a1200 	.word	0x007a1200
    16ac:	0000159d 	.word	0x0000159d
    16b0:	00001d35 	.word	0x00001d35
    16b4:	02dc6c00 	.word	0x02dc6c00

000016b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    16c0:	4b1a      	ldr	r3, [pc, #104]	; (172c <system_clock_source_osc8m_set_config+0x74>)
    16c2:	6a1b      	ldr	r3, [r3, #32]
    16c4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	1c1a      	adds	r2, r3, #0
    16cc:	2303      	movs	r3, #3
    16ce:	4013      	ands	r3, r2
    16d0:	b2da      	uxtb	r2, r3
    16d2:	230d      	movs	r3, #13
    16d4:	18fb      	adds	r3, r7, r3
    16d6:	2103      	movs	r1, #3
    16d8:	400a      	ands	r2, r1
    16da:	1c10      	adds	r0, r2, #0
    16dc:	781a      	ldrb	r2, [r3, #0]
    16de:	2103      	movs	r1, #3
    16e0:	438a      	bics	r2, r1
    16e2:	1c11      	adds	r1, r2, #0
    16e4:	1c02      	adds	r2, r0, #0
    16e6:	430a      	orrs	r2, r1
    16e8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	789a      	ldrb	r2, [r3, #2]
    16ee:	230c      	movs	r3, #12
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	01d0      	lsls	r0, r2, #7
    16f4:	781a      	ldrb	r2, [r3, #0]
    16f6:	217f      	movs	r1, #127	; 0x7f
    16f8:	400a      	ands	r2, r1
    16fa:	1c11      	adds	r1, r2, #0
    16fc:	1c02      	adds	r2, r0, #0
    16fe:	430a      	orrs	r2, r1
    1700:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1702:	687b      	ldr	r3, [r7, #4]
    1704:	785a      	ldrb	r2, [r3, #1]
    1706:	230c      	movs	r3, #12
    1708:	18fb      	adds	r3, r7, r3
    170a:	2101      	movs	r1, #1
    170c:	400a      	ands	r2, r1
    170e:	0190      	lsls	r0, r2, #6
    1710:	781a      	ldrb	r2, [r3, #0]
    1712:	2140      	movs	r1, #64	; 0x40
    1714:	438a      	bics	r2, r1
    1716:	1c11      	adds	r1, r2, #0
    1718:	1c02      	adds	r2, r0, #0
    171a:	430a      	orrs	r2, r1
    171c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    171e:	4b03      	ldr	r3, [pc, #12]	; (172c <system_clock_source_osc8m_set_config+0x74>)
    1720:	68fa      	ldr	r2, [r7, #12]
    1722:	621a      	str	r2, [r3, #32]
}
    1724:	46bd      	mov	sp, r7
    1726:	b004      	add	sp, #16
    1728:	bd80      	pop	{r7, pc}
    172a:	46c0      	nop			; (mov r8, r8)
    172c:	40000800 	.word	0x40000800

00001730 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1730:	b580      	push	{r7, lr}
    1732:	b082      	sub	sp, #8
    1734:	af00      	add	r7, sp, #0
    1736:	1c02      	adds	r2, r0, #0
    1738:	1dfb      	adds	r3, r7, #7
    173a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    173c:	1dfb      	adds	r3, r7, #7
    173e:	781b      	ldrb	r3, [r3, #0]
    1740:	2b08      	cmp	r3, #8
    1742:	d83b      	bhi.n	17bc <system_clock_source_enable+0x8c>
    1744:	009a      	lsls	r2, r3, #2
    1746:	4b21      	ldr	r3, [pc, #132]	; (17cc <system_clock_source_enable+0x9c>)
    1748:	18d3      	adds	r3, r2, r3
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    174e:	4b20      	ldr	r3, [pc, #128]	; (17d0 <system_clock_source_enable+0xa0>)
    1750:	4a1f      	ldr	r2, [pc, #124]	; (17d0 <system_clock_source_enable+0xa0>)
    1752:	6a12      	ldr	r2, [r2, #32]
    1754:	2102      	movs	r1, #2
    1756:	430a      	orrs	r2, r1
    1758:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    175a:	2300      	movs	r3, #0
    175c:	e031      	b.n	17c2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    175e:	4b1c      	ldr	r3, [pc, #112]	; (17d0 <system_clock_source_enable+0xa0>)
    1760:	4a1b      	ldr	r2, [pc, #108]	; (17d0 <system_clock_source_enable+0xa0>)
    1762:	6992      	ldr	r2, [r2, #24]
    1764:	2102      	movs	r1, #2
    1766:	430a      	orrs	r2, r1
    1768:	619a      	str	r2, [r3, #24]
		break;
    176a:	e029      	b.n	17c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    176c:	4a18      	ldr	r2, [pc, #96]	; (17d0 <system_clock_source_enable+0xa0>)
    176e:	4b18      	ldr	r3, [pc, #96]	; (17d0 <system_clock_source_enable+0xa0>)
    1770:	8a1b      	ldrh	r3, [r3, #16]
    1772:	b29b      	uxth	r3, r3
    1774:	2102      	movs	r1, #2
    1776:	430b      	orrs	r3, r1
    1778:	b29b      	uxth	r3, r3
    177a:	8213      	strh	r3, [r2, #16]
		break;
    177c:	e020      	b.n	17c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    177e:	4a14      	ldr	r2, [pc, #80]	; (17d0 <system_clock_source_enable+0xa0>)
    1780:	4b13      	ldr	r3, [pc, #76]	; (17d0 <system_clock_source_enable+0xa0>)
    1782:	8a9b      	ldrh	r3, [r3, #20]
    1784:	b29b      	uxth	r3, r3
    1786:	2102      	movs	r1, #2
    1788:	430b      	orrs	r3, r1
    178a:	b29b      	uxth	r3, r3
    178c:	8293      	strh	r3, [r2, #20]
		break;
    178e:	e017      	b.n	17c0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1790:	4b10      	ldr	r3, [pc, #64]	; (17d4 <system_clock_source_enable+0xa4>)
    1792:	681b      	ldr	r3, [r3, #0]
    1794:	2202      	movs	r2, #2
    1796:	431a      	orrs	r2, r3
    1798:	4b0e      	ldr	r3, [pc, #56]	; (17d4 <system_clock_source_enable+0xa4>)
    179a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    179c:	4b0e      	ldr	r3, [pc, #56]	; (17d8 <system_clock_source_enable+0xa8>)
    179e:	4798      	blx	r3
		break;
    17a0:	e00e      	b.n	17c0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    17a2:	4a0b      	ldr	r2, [pc, #44]	; (17d0 <system_clock_source_enable+0xa0>)
    17a4:	490a      	ldr	r1, [pc, #40]	; (17d0 <system_clock_source_enable+0xa0>)
    17a6:	2344      	movs	r3, #68	; 0x44
    17a8:	5ccb      	ldrb	r3, [r1, r3]
    17aa:	b2db      	uxtb	r3, r3
    17ac:	2102      	movs	r1, #2
    17ae:	430b      	orrs	r3, r1
    17b0:	b2d9      	uxtb	r1, r3
    17b2:	2344      	movs	r3, #68	; 0x44
    17b4:	54d1      	strb	r1, [r2, r3]
		break;
    17b6:	e003      	b.n	17c0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    17b8:	2300      	movs	r3, #0
    17ba:	e002      	b.n	17c2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17bc:	2317      	movs	r3, #23
    17be:	e000      	b.n	17c2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    17c0:	2300      	movs	r3, #0
}
    17c2:	1c18      	adds	r0, r3, #0
    17c4:	46bd      	mov	sp, r7
    17c6:	b002      	add	sp, #8
    17c8:	bd80      	pop	{r7, pc}
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	00002600 	.word	0x00002600
    17d0:	40000800 	.word	0x40000800
    17d4:	2000003c 	.word	0x2000003c
    17d8:	000015b5 	.word	0x000015b5

000017dc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    17dc:	b580      	push	{r7, lr}
    17de:	b082      	sub	sp, #8
    17e0:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    17e2:	1c3b      	adds	r3, r7, #0
    17e4:	2201      	movs	r2, #1
    17e6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    17e8:	2300      	movs	r3, #0
    17ea:	607b      	str	r3, [r7, #4]
    17ec:	e009      	b.n	1802 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	b2da      	uxtb	r2, r3
    17f2:	1c3b      	adds	r3, r7, #0
    17f4:	1c10      	adds	r0, r2, #0
    17f6:	1c19      	adds	r1, r3, #0
    17f8:	4b05      	ldr	r3, [pc, #20]	; (1810 <_switch_peripheral_gclk+0x34>)
    17fa:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	3301      	adds	r3, #1
    1800:	607b      	str	r3, [r7, #4]
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2b24      	cmp	r3, #36	; 0x24
    1806:	d9f2      	bls.n	17ee <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    1808:	46bd      	mov	sp, r7
    180a:	b002      	add	sp, #8
    180c:	bd80      	pop	{r7, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	00001c11 	.word	0x00001c11

00001814 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	b09c      	sub	sp, #112	; 0x70
    1818:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    181a:	4b25      	ldr	r3, [pc, #148]	; (18b0 <system_clock_init+0x9c>)
    181c:	22c2      	movs	r2, #194	; 0xc2
    181e:	00d2      	lsls	r2, r2, #3
    1820:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1822:	2000      	movs	r0, #0
    1824:	4b23      	ldr	r3, [pc, #140]	; (18b4 <system_clock_init+0xa0>)
    1826:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1828:	4b23      	ldr	r3, [pc, #140]	; (18b8 <system_clock_init+0xa4>)
    182a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    182c:	236c      	movs	r3, #108	; 0x6c
    182e:	18fb      	adds	r3, r7, r3
    1830:	1c18      	adds	r0, r3, #0
    1832:	4b22      	ldr	r3, [pc, #136]	; (18bc <system_clock_init+0xa8>)
    1834:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1836:	236c      	movs	r3, #108	; 0x6c
    1838:	18fb      	adds	r3, r7, r3
    183a:	2200      	movs	r2, #0
    183c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    183e:	236c      	movs	r3, #108	; 0x6c
    1840:	18fb      	adds	r3, r7, r3
    1842:	2201      	movs	r2, #1
    1844:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1846:	236c      	movs	r3, #108	; 0x6c
    1848:	18fb      	adds	r3, r7, r3
    184a:	2200      	movs	r2, #0
    184c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    184e:	236c      	movs	r3, #108	; 0x6c
    1850:	18fb      	adds	r3, r7, r3
    1852:	1c18      	adds	r0, r3, #0
    1854:	4b1a      	ldr	r3, [pc, #104]	; (18c0 <system_clock_init+0xac>)
    1856:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1858:	2006      	movs	r0, #6
    185a:	4b1a      	ldr	r3, [pc, #104]	; (18c4 <system_clock_init+0xb0>)
    185c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    185e:	4b1a      	ldr	r3, [pc, #104]	; (18c8 <system_clock_init+0xb4>)
    1860:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1862:	2000      	movs	r0, #0
    1864:	4b19      	ldr	r3, [pc, #100]	; (18cc <system_clock_init+0xb8>)
    1866:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1868:	2000      	movs	r0, #0
    186a:	2100      	movs	r1, #0
    186c:	4b18      	ldr	r3, [pc, #96]	; (18d0 <system_clock_init+0xbc>)
    186e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1870:	2001      	movs	r0, #1
    1872:	2100      	movs	r1, #0
    1874:	4b16      	ldr	r3, [pc, #88]	; (18d0 <system_clock_init+0xbc>)
    1876:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1878:	1c3b      	adds	r3, r7, #0
    187a:	1c18      	adds	r0, r3, #0
    187c:	4b15      	ldr	r3, [pc, #84]	; (18d4 <system_clock_init+0xc0>)
    187e:	4798      	blx	r3
    1880:	1c3b      	adds	r3, r7, #0
    1882:	2206      	movs	r2, #6
    1884:	701a      	strb	r2, [r3, #0]
    1886:	1c3b      	adds	r3, r7, #0
    1888:	2201      	movs	r2, #1
    188a:	605a      	str	r2, [r3, #4]
    188c:	1c3b      	adds	r3, r7, #0
    188e:	2200      	movs	r2, #0
    1890:	721a      	strb	r2, [r3, #8]
    1892:	1c3b      	adds	r3, r7, #0
    1894:	2200      	movs	r2, #0
    1896:	725a      	strb	r2, [r3, #9]
    1898:	1c3b      	adds	r3, r7, #0
    189a:	2000      	movs	r0, #0
    189c:	1c19      	adds	r1, r3, #0
    189e:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <system_clock_init+0xc4>)
    18a0:	4798      	blx	r3
    18a2:	2000      	movs	r0, #0
    18a4:	4b0d      	ldr	r3, [pc, #52]	; (18dc <system_clock_init+0xc8>)
    18a6:	4798      	blx	r3
#endif
}
    18a8:	46bd      	mov	sp, r7
    18aa:	b01c      	add	sp, #112	; 0x70
    18ac:	bd80      	pop	{r7, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	40000800 	.word	0x40000800
    18b4:	00001569 	.word	0x00001569
    18b8:	000017dd 	.word	0x000017dd
    18bc:	000014d5 	.word	0x000014d5
    18c0:	000016b9 	.word	0x000016b9
    18c4:	00001731 	.word	0x00001731
    18c8:	00001981 	.word	0x00001981
    18cc:	000014f5 	.word	0x000014f5
    18d0:	00001515 	.word	0x00001515
    18d4:	000014a9 	.word	0x000014a9
    18d8:	000019b1 	.word	0x000019b1
    18dc:	00001ad1 	.word	0x00001ad1

000018e0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    18e6:	1c02      	adds	r2, r0, #0
    18e8:	6039      	str	r1, [r7, #0]
    18ea:	1dfb      	adds	r3, r7, #7
    18ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    18ee:	1dfb      	adds	r3, r7, #7
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b01      	cmp	r3, #1
    18f4:	d00a      	beq.n	190c <system_apb_clock_set_mask+0x2c>
    18f6:	2b02      	cmp	r3, #2
    18f8:	d00f      	beq.n	191a <system_apb_clock_set_mask+0x3a>
    18fa:	2b00      	cmp	r3, #0
    18fc:	d114      	bne.n	1928 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    18fe:	4b0e      	ldr	r3, [pc, #56]	; (1938 <system_apb_clock_set_mask+0x58>)
    1900:	4a0d      	ldr	r2, [pc, #52]	; (1938 <system_apb_clock_set_mask+0x58>)
    1902:	6991      	ldr	r1, [r2, #24]
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	430a      	orrs	r2, r1
    1908:	619a      	str	r2, [r3, #24]
			break;
    190a:	e00f      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    190c:	4b0a      	ldr	r3, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    190e:	4a0a      	ldr	r2, [pc, #40]	; (1938 <system_apb_clock_set_mask+0x58>)
    1910:	69d1      	ldr	r1, [r2, #28]
    1912:	683a      	ldr	r2, [r7, #0]
    1914:	430a      	orrs	r2, r1
    1916:	61da      	str	r2, [r3, #28]
			break;
    1918:	e008      	b.n	192c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <system_apb_clock_set_mask+0x58>)
    191c:	4a06      	ldr	r2, [pc, #24]	; (1938 <system_apb_clock_set_mask+0x58>)
    191e:	6a11      	ldr	r1, [r2, #32]
    1920:	683a      	ldr	r2, [r7, #0]
    1922:	430a      	orrs	r2, r1
    1924:	621a      	str	r2, [r3, #32]
			break;
    1926:	e001      	b.n	192c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1928:	2317      	movs	r3, #23
    192a:	e000      	b.n	192e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    192c:	2300      	movs	r3, #0
}
    192e:	1c18      	adds	r0, r3, #0
    1930:	46bd      	mov	sp, r7
    1932:	b002      	add	sp, #8
    1934:	bd80      	pop	{r7, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	40000400 	.word	0x40000400

0000193c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    193c:	b580      	push	{r7, lr}
    193e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1940:	4b01      	ldr	r3, [pc, #4]	; (1948 <system_interrupt_enter_critical_section+0xc>)
    1942:	4798      	blx	r3
}
    1944:	46bd      	mov	sp, r7
    1946:	bd80      	pop	{r7, pc}
    1948:	000001cd 	.word	0x000001cd

0000194c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    194c:	b580      	push	{r7, lr}
    194e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1950:	4b01      	ldr	r3, [pc, #4]	; (1958 <system_interrupt_leave_critical_section+0xc>)
    1952:	4798      	blx	r3
}
    1954:	46bd      	mov	sp, r7
    1956:	bd80      	pop	{r7, pc}
    1958:	0000021d 	.word	0x0000021d

0000195c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    195c:	b580      	push	{r7, lr}
    195e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1960:	4b06      	ldr	r3, [pc, #24]	; (197c <system_gclk_is_syncing+0x20>)
    1962:	785b      	ldrb	r3, [r3, #1]
    1964:	b2db      	uxtb	r3, r3
    1966:	b2db      	uxtb	r3, r3
    1968:	b25b      	sxtb	r3, r3
    196a:	2b00      	cmp	r3, #0
    196c:	da01      	bge.n	1972 <system_gclk_is_syncing+0x16>
		return true;
    196e:	2301      	movs	r3, #1
    1970:	e000      	b.n	1974 <system_gclk_is_syncing+0x18>
	}

	return false;
    1972:	2300      	movs	r3, #0
}
    1974:	1c18      	adds	r0, r3, #0
    1976:	46bd      	mov	sp, r7
    1978:	bd80      	pop	{r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	40000c00 	.word	0x40000c00

00001980 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1980:	b580      	push	{r7, lr}
    1982:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1984:	2000      	movs	r0, #0
    1986:	2108      	movs	r1, #8
    1988:	4b07      	ldr	r3, [pc, #28]	; (19a8 <system_gclk_init+0x28>)
    198a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    198c:	4b07      	ldr	r3, [pc, #28]	; (19ac <system_gclk_init+0x2c>)
    198e:	2201      	movs	r2, #1
    1990:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_gclk_init+0x2c>)
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	b2db      	uxtb	r3, r3
    199a:	1c1a      	adds	r2, r3, #0
    199c:	2301      	movs	r3, #1
    199e:	4013      	ands	r3, r2
    19a0:	d1f8      	bne.n	1994 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    19a2:	46bd      	mov	sp, r7
    19a4:	bd80      	pop	{r7, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	000018e1 	.word	0x000018e1
    19ac:	40000c00 	.word	0x40000c00

000019b0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b086      	sub	sp, #24
    19b4:	af00      	add	r7, sp, #0
    19b6:	1c02      	adds	r2, r0, #0
    19b8:	6039      	str	r1, [r7, #0]
    19ba:	1dfb      	adds	r3, r7, #7
    19bc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    19be:	1dfb      	adds	r3, r7, #7
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    19c4:	1dfb      	adds	r3, r7, #7
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    19ca:	683b      	ldr	r3, [r7, #0]
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	021b      	lsls	r3, r3, #8
    19d0:	1c1a      	adds	r2, r3, #0
    19d2:	697b      	ldr	r3, [r7, #20]
    19d4:	4313      	orrs	r3, r2
    19d6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    19d8:	683b      	ldr	r3, [r7, #0]
    19da:	785b      	ldrb	r3, [r3, #1]
    19dc:	2b00      	cmp	r3, #0
    19de:	d004      	beq.n	19ea <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	02d2      	lsls	r2, r2, #11
    19e6:	4313      	orrs	r3, r2
    19e8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    19ea:	683b      	ldr	r3, [r7, #0]
    19ec:	7a5b      	ldrb	r3, [r3, #9]
    19ee:	2b00      	cmp	r3, #0
    19f0:	d004      	beq.n	19fc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    19f2:	697b      	ldr	r3, [r7, #20]
    19f4:	2280      	movs	r2, #128	; 0x80
    19f6:	0312      	lsls	r2, r2, #12
    19f8:	4313      	orrs	r3, r2
    19fa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    19fc:	683b      	ldr	r3, [r7, #0]
    19fe:	685b      	ldr	r3, [r3, #4]
    1a00:	2b01      	cmp	r3, #1
    1a02:	d92c      	bls.n	1a5e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a04:	683b      	ldr	r3, [r7, #0]
    1a06:	685a      	ldr	r2, [r3, #4]
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	685b      	ldr	r3, [r3, #4]
    1a0c:	3b01      	subs	r3, #1
    1a0e:	4013      	ands	r3, r2
    1a10:	d11a      	bne.n	1a48 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1a12:	2300      	movs	r3, #0
    1a14:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a16:	2302      	movs	r3, #2
    1a18:	60bb      	str	r3, [r7, #8]
    1a1a:	e005      	b.n	1a28 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1a1c:	68fb      	ldr	r3, [r7, #12]
    1a1e:	3301      	adds	r3, #1
    1a20:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1a22:	68bb      	ldr	r3, [r7, #8]
    1a24:	005b      	lsls	r3, r3, #1
    1a26:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	685a      	ldr	r2, [r3, #4]
    1a2c:	68bb      	ldr	r3, [r7, #8]
    1a2e:	429a      	cmp	r2, r3
    1a30:	d8f4      	bhi.n	1a1c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a32:	68fb      	ldr	r3, [r7, #12]
    1a34:	021b      	lsls	r3, r3, #8
    1a36:	693a      	ldr	r2, [r7, #16]
    1a38:	4313      	orrs	r3, r2
    1a3a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a3c:	697b      	ldr	r3, [r7, #20]
    1a3e:	2280      	movs	r2, #128	; 0x80
    1a40:	0352      	lsls	r2, r2, #13
    1a42:	4313      	orrs	r3, r2
    1a44:	617b      	str	r3, [r7, #20]
    1a46:	e00a      	b.n	1a5e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1a48:	683b      	ldr	r3, [r7, #0]
    1a4a:	685b      	ldr	r3, [r3, #4]
    1a4c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1a4e:	693a      	ldr	r2, [r7, #16]
    1a50:	4313      	orrs	r3, r2
    1a52:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a54:	697b      	ldr	r3, [r7, #20]
    1a56:	2280      	movs	r2, #128	; 0x80
    1a58:	0292      	lsls	r2, r2, #10
    1a5a:	4313      	orrs	r3, r2
    1a5c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a5e:	683b      	ldr	r3, [r7, #0]
    1a60:	7a1b      	ldrb	r3, [r3, #8]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d004      	beq.n	1a70 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a66:	697b      	ldr	r3, [r7, #20]
    1a68:	2280      	movs	r2, #128	; 0x80
    1a6a:	0392      	lsls	r2, r2, #14
    1a6c:	4313      	orrs	r3, r2
    1a6e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1a70:	46c0      	nop			; (mov r8, r8)
    1a72:	4b12      	ldr	r3, [pc, #72]	; (1abc <system_gclk_gen_set_config+0x10c>)
    1a74:	4798      	blx	r3
    1a76:	1e03      	subs	r3, r0, #0
    1a78:	d1fb      	bne.n	1a72 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1a7a:	4b11      	ldr	r3, [pc, #68]	; (1ac0 <system_gclk_gen_set_config+0x110>)
    1a7c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a7e:	4a11      	ldr	r2, [pc, #68]	; (1ac4 <system_gclk_gen_set_config+0x114>)
    1a80:	1dfb      	adds	r3, r7, #7
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	4b0c      	ldr	r3, [pc, #48]	; (1abc <system_gclk_gen_set_config+0x10c>)
    1a8a:	4798      	blx	r3
    1a8c:	1e03      	subs	r3, r0, #0
    1a8e:	d1fb      	bne.n	1a88 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a90:	4b0d      	ldr	r3, [pc, #52]	; (1ac8 <system_gclk_gen_set_config+0x118>)
    1a92:	693a      	ldr	r2, [r7, #16]
    1a94:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	4b08      	ldr	r3, [pc, #32]	; (1abc <system_gclk_gen_set_config+0x10c>)
    1a9a:	4798      	blx	r3
    1a9c:	1e03      	subs	r3, r0, #0
    1a9e:	d1fb      	bne.n	1a98 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1aa0:	4b09      	ldr	r3, [pc, #36]	; (1ac8 <system_gclk_gen_set_config+0x118>)
    1aa2:	4a09      	ldr	r2, [pc, #36]	; (1ac8 <system_gclk_gen_set_config+0x118>)
    1aa4:	6851      	ldr	r1, [r2, #4]
    1aa6:	2280      	movs	r2, #128	; 0x80
    1aa8:	0252      	lsls	r2, r2, #9
    1aaa:	4011      	ands	r1, r2
    1aac:	697a      	ldr	r2, [r7, #20]
    1aae:	430a      	orrs	r2, r1
    1ab0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <system_gclk_gen_set_config+0x11c>)
    1ab4:	4798      	blx	r3
}
    1ab6:	46bd      	mov	sp, r7
    1ab8:	b006      	add	sp, #24
    1aba:	bd80      	pop	{r7, pc}
    1abc:	0000195d 	.word	0x0000195d
    1ac0:	0000193d 	.word	0x0000193d
    1ac4:	40000c08 	.word	0x40000c08
    1ac8:	40000c00 	.word	0x40000c00
    1acc:	0000194d 	.word	0x0000194d

00001ad0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b082      	sub	sp, #8
    1ad4:	af00      	add	r7, sp, #0
    1ad6:	1c02      	adds	r2, r0, #0
    1ad8:	1dfb      	adds	r3, r7, #7
    1ada:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <system_gclk_gen_enable+0x44>)
    1ae0:	4798      	blx	r3
    1ae2:	1e03      	subs	r3, r0, #0
    1ae4:	d1fb      	bne.n	1ade <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1ae6:	4b0c      	ldr	r3, [pc, #48]	; (1b18 <system_gclk_gen_enable+0x48>)
    1ae8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1aea:	4a0c      	ldr	r2, [pc, #48]	; (1b1c <system_gclk_gen_enable+0x4c>)
    1aec:	1dfb      	adds	r3, r7, #7
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	4b07      	ldr	r3, [pc, #28]	; (1b14 <system_gclk_gen_enable+0x44>)
    1af6:	4798      	blx	r3
    1af8:	1e03      	subs	r3, r0, #0
    1afa:	d1fb      	bne.n	1af4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1afc:	4b08      	ldr	r3, [pc, #32]	; (1b20 <system_gclk_gen_enable+0x50>)
    1afe:	4a08      	ldr	r2, [pc, #32]	; (1b20 <system_gclk_gen_enable+0x50>)
    1b00:	6852      	ldr	r2, [r2, #4]
    1b02:	2180      	movs	r1, #128	; 0x80
    1b04:	0249      	lsls	r1, r1, #9
    1b06:	430a      	orrs	r2, r1
    1b08:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1b0a:	4b06      	ldr	r3, [pc, #24]	; (1b24 <system_gclk_gen_enable+0x54>)
    1b0c:	4798      	blx	r3
}
    1b0e:	46bd      	mov	sp, r7
    1b10:	b002      	add	sp, #8
    1b12:	bd80      	pop	{r7, pc}
    1b14:	0000195d 	.word	0x0000195d
    1b18:	0000193d 	.word	0x0000193d
    1b1c:	40000c04 	.word	0x40000c04
    1b20:	40000c00 	.word	0x40000c00
    1b24:	0000194d 	.word	0x0000194d

00001b28 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b086      	sub	sp, #24
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	1c02      	adds	r2, r0, #0
    1b30:	1dfb      	adds	r3, r7, #7
    1b32:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1b34:	46c0      	nop			; (mov r8, r8)
    1b36:	4b2e      	ldr	r3, [pc, #184]	; (1bf0 <system_gclk_gen_get_hz+0xc8>)
    1b38:	4798      	blx	r3
    1b3a:	1e03      	subs	r3, r0, #0
    1b3c:	d1fb      	bne.n	1b36 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1b3e:	4b2d      	ldr	r3, [pc, #180]	; (1bf4 <system_gclk_gen_get_hz+0xcc>)
    1b40:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b42:	4a2d      	ldr	r2, [pc, #180]	; (1bf8 <system_gclk_gen_get_hz+0xd0>)
    1b44:	1dfb      	adds	r3, r7, #7
    1b46:	781b      	ldrb	r3, [r3, #0]
    1b48:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	4b28      	ldr	r3, [pc, #160]	; (1bf0 <system_gclk_gen_get_hz+0xc8>)
    1b4e:	4798      	blx	r3
    1b50:	1e03      	subs	r3, r0, #0
    1b52:	d1fb      	bne.n	1b4c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b54:	4b29      	ldr	r3, [pc, #164]	; (1bfc <system_gclk_gen_get_hz+0xd4>)
    1b56:	685b      	ldr	r3, [r3, #4]
    1b58:	0a1b      	lsrs	r3, r3, #8
    1b5a:	1c1a      	adds	r2, r3, #0
    1b5c:	231f      	movs	r3, #31
    1b5e:	4013      	ands	r3, r2
    1b60:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b62:	1c18      	adds	r0, r3, #0
    1b64:	4b26      	ldr	r3, [pc, #152]	; (1c00 <system_gclk_gen_get_hz+0xd8>)
    1b66:	4798      	blx	r3
    1b68:	1c03      	adds	r3, r0, #0
    1b6a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b6c:	4a22      	ldr	r2, [pc, #136]	; (1bf8 <system_gclk_gen_get_hz+0xd0>)
    1b6e:	1dfb      	adds	r3, r7, #7
    1b70:	781b      	ldrb	r3, [r3, #0]
    1b72:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b74:	4b21      	ldr	r3, [pc, #132]	; (1bfc <system_gclk_gen_get_hz+0xd4>)
    1b76:	685b      	ldr	r3, [r3, #4]
    1b78:	0d1b      	lsrs	r3, r3, #20
    1b7a:	1c1a      	adds	r2, r3, #0
    1b7c:	2301      	movs	r3, #1
    1b7e:	4013      	ands	r3, r2
    1b80:	b2da      	uxtb	r2, r3
    1b82:	2313      	movs	r3, #19
    1b84:	18fb      	adds	r3, r7, r3
    1b86:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b88:	4a1e      	ldr	r2, [pc, #120]	; (1c04 <system_gclk_gen_get_hz+0xdc>)
    1b8a:	1dfb      	adds	r3, r7, #7
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1b90:	46c0      	nop			; (mov r8, r8)
    1b92:	4b17      	ldr	r3, [pc, #92]	; (1bf0 <system_gclk_gen_get_hz+0xc8>)
    1b94:	4798      	blx	r3
    1b96:	1e03      	subs	r3, r0, #0
    1b98:	d1fb      	bne.n	1b92 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b9a:	4b18      	ldr	r3, [pc, #96]	; (1bfc <system_gclk_gen_get_hz+0xd4>)
    1b9c:	689b      	ldr	r3, [r3, #8]
    1b9e:	0a1b      	lsrs	r3, r3, #8
    1ba0:	1c1a      	adds	r2, r3, #0
    1ba2:	2300      	movs	r3, #0
    1ba4:	439a      	bics	r2, r3
    1ba6:	1c13      	adds	r3, r2, #0
    1ba8:	b29b      	uxth	r3, r3
    1baa:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1bac:	4b16      	ldr	r3, [pc, #88]	; (1c08 <system_gclk_gen_get_hz+0xe0>)
    1bae:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1bb0:	2313      	movs	r3, #19
    1bb2:	18fb      	adds	r3, r7, r3
    1bb4:	781b      	ldrb	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d109      	bne.n	1bce <system_gclk_gen_get_hz+0xa6>
    1bba:	68fb      	ldr	r3, [r7, #12]
    1bbc:	2b01      	cmp	r3, #1
    1bbe:	d906      	bls.n	1bce <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    1bc0:	4b12      	ldr	r3, [pc, #72]	; (1c0c <system_gclk_gen_get_hz+0xe4>)
    1bc2:	6978      	ldr	r0, [r7, #20]
    1bc4:	68f9      	ldr	r1, [r7, #12]
    1bc6:	4798      	blx	r3
    1bc8:	1c03      	adds	r3, r0, #0
    1bca:	617b      	str	r3, [r7, #20]
    1bcc:	e00a      	b.n	1be4 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    1bce:	2313      	movs	r3, #19
    1bd0:	18fb      	adds	r3, r7, r3
    1bd2:	781b      	ldrb	r3, [r3, #0]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d005      	beq.n	1be4 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	3301      	adds	r3, #1
    1bdc:	1c1a      	adds	r2, r3, #0
    1bde:	697b      	ldr	r3, [r7, #20]
    1be0:	40d3      	lsrs	r3, r2
    1be2:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1be4:	697b      	ldr	r3, [r7, #20]
}
    1be6:	1c18      	adds	r0, r3, #0
    1be8:	46bd      	mov	sp, r7
    1bea:	b006      	add	sp, #24
    1bec:	bd80      	pop	{r7, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	0000195d 	.word	0x0000195d
    1bf4:	0000193d 	.word	0x0000193d
    1bf8:	40000c04 	.word	0x40000c04
    1bfc:	40000c00 	.word	0x40000c00
    1c00:	000015f9 	.word	0x000015f9
    1c04:	40000c08 	.word	0x40000c08
    1c08:	0000194d 	.word	0x0000194d
    1c0c:	00002445 	.word	0x00002445

00001c10 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b084      	sub	sp, #16
    1c14:	af00      	add	r7, sp, #0
    1c16:	1c02      	adds	r2, r0, #0
    1c18:	6039      	str	r1, [r7, #0]
    1c1a:	1dfb      	adds	r3, r7, #7
    1c1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1c1e:	1dfb      	adds	r3, r7, #7
    1c20:	781b      	ldrb	r3, [r3, #0]
    1c22:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c24:	683b      	ldr	r3, [r7, #0]
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	021b      	lsls	r3, r3, #8
    1c2a:	1c1a      	adds	r2, r3, #0
    1c2c:	68fb      	ldr	r3, [r7, #12]
    1c2e:	4313      	orrs	r3, r2
    1c30:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1c32:	1dfb      	adds	r3, r7, #7
    1c34:	781b      	ldrb	r3, [r3, #0]
    1c36:	1c18      	adds	r0, r3, #0
    1c38:	4b04      	ldr	r3, [pc, #16]	; (1c4c <system_gclk_chan_set_config+0x3c>)
    1c3a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c3c:	4b04      	ldr	r3, [pc, #16]	; (1c50 <system_gclk_chan_set_config+0x40>)
    1c3e:	68fa      	ldr	r2, [r7, #12]
    1c40:	b292      	uxth	r2, r2
    1c42:	805a      	strh	r2, [r3, #2]
}
    1c44:	46bd      	mov	sp, r7
    1c46:	b004      	add	sp, #16
    1c48:	bd80      	pop	{r7, pc}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	00001c99 	.word	0x00001c99
    1c50:	40000c00 	.word	0x40000c00

00001c54 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c54:	b580      	push	{r7, lr}
    1c56:	b082      	sub	sp, #8
    1c58:	af00      	add	r7, sp, #0
    1c5a:	1c02      	adds	r2, r0, #0
    1c5c:	1dfb      	adds	r3, r7, #7
    1c5e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1c60:	4b09      	ldr	r3, [pc, #36]	; (1c88 <system_gclk_chan_enable+0x34>)
    1c62:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c64:	4a09      	ldr	r2, [pc, #36]	; (1c8c <system_gclk_chan_enable+0x38>)
    1c66:	1dfb      	adds	r3, r7, #7
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c6c:	4908      	ldr	r1, [pc, #32]	; (1c90 <system_gclk_chan_enable+0x3c>)
    1c6e:	4b08      	ldr	r3, [pc, #32]	; (1c90 <system_gclk_chan_enable+0x3c>)
    1c70:	885b      	ldrh	r3, [r3, #2]
    1c72:	b29b      	uxth	r3, r3
    1c74:	2280      	movs	r2, #128	; 0x80
    1c76:	01d2      	lsls	r2, r2, #7
    1c78:	4313      	orrs	r3, r2
    1c7a:	b29b      	uxth	r3, r3
    1c7c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <system_gclk_chan_enable+0x40>)
    1c80:	4798      	blx	r3
}
    1c82:	46bd      	mov	sp, r7
    1c84:	b002      	add	sp, #8
    1c86:	bd80      	pop	{r7, pc}
    1c88:	0000193d 	.word	0x0000193d
    1c8c:	40000c02 	.word	0x40000c02
    1c90:	40000c00 	.word	0x40000c00
    1c94:	0000194d 	.word	0x0000194d

00001c98 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b084      	sub	sp, #16
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	1c02      	adds	r2, r0, #0
    1ca0:	1dfb      	adds	r3, r7, #7
    1ca2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1ca4:	4b1d      	ldr	r3, [pc, #116]	; (1d1c <system_gclk_chan_disable+0x84>)
    1ca6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ca8:	4a1d      	ldr	r2, [pc, #116]	; (1d20 <system_gclk_chan_disable+0x88>)
    1caa:	1dfb      	adds	r3, r7, #7
    1cac:	781b      	ldrb	r3, [r3, #0]
    1cae:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1cb0:	4b1c      	ldr	r3, [pc, #112]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1cb2:	885b      	ldrh	r3, [r3, #2]
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	0a1b      	lsrs	r3, r3, #8
    1cb8:	1c1a      	adds	r2, r3, #0
    1cba:	230f      	movs	r3, #15
    1cbc:	4013      	ands	r3, r2
    1cbe:	b2db      	uxtb	r3, r3
    1cc0:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1cc2:	4b18      	ldr	r3, [pc, #96]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1cc4:	885a      	ldrh	r2, [r3, #2]
    1cc6:	4918      	ldr	r1, [pc, #96]	; (1d28 <system_gclk_chan_disable+0x90>)
    1cc8:	400a      	ands	r2, r1
    1cca:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ccc:	4a15      	ldr	r2, [pc, #84]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1cce:	4b15      	ldr	r3, [pc, #84]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1cd0:	885b      	ldrh	r3, [r3, #2]
    1cd2:	b29b      	uxth	r3, r3
    1cd4:	4915      	ldr	r1, [pc, #84]	; (1d2c <system_gclk_chan_disable+0x94>)
    1cd6:	400b      	ands	r3, r1
    1cd8:	b29b      	uxth	r3, r3
    1cda:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cdc:	46c0      	nop			; (mov r8, r8)
    1cde:	4b11      	ldr	r3, [pc, #68]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1ce0:	885b      	ldrh	r3, [r3, #2]
    1ce2:	b29b      	uxth	r3, r3
    1ce4:	1c1a      	adds	r2, r3, #0
    1ce6:	2380      	movs	r3, #128	; 0x80
    1ce8:	01db      	lsls	r3, r3, #7
    1cea:	4013      	ands	r3, r2
    1cec:	d1f7      	bne.n	1cde <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1cee:	4b0d      	ldr	r3, [pc, #52]	; (1d24 <system_gclk_chan_disable+0x8c>)
    1cf0:	68fa      	ldr	r2, [r7, #12]
    1cf2:	b2d2      	uxtb	r2, r2
    1cf4:	1c11      	adds	r1, r2, #0
    1cf6:	220f      	movs	r2, #15
    1cf8:	400a      	ands	r2, r1
    1cfa:	b2d2      	uxtb	r2, r2
    1cfc:	1c11      	adds	r1, r2, #0
    1cfe:	220f      	movs	r2, #15
    1d00:	400a      	ands	r2, r1
    1d02:	0210      	lsls	r0, r2, #8
    1d04:	885a      	ldrh	r2, [r3, #2]
    1d06:	4908      	ldr	r1, [pc, #32]	; (1d28 <system_gclk_chan_disable+0x90>)
    1d08:	400a      	ands	r2, r1
    1d0a:	1c11      	adds	r1, r2, #0
    1d0c:	1c02      	adds	r2, r0, #0
    1d0e:	430a      	orrs	r2, r1
    1d10:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1d12:	4b07      	ldr	r3, [pc, #28]	; (1d30 <system_gclk_chan_disable+0x98>)
    1d14:	4798      	blx	r3
}
    1d16:	46bd      	mov	sp, r7
    1d18:	b004      	add	sp, #16
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	0000193d 	.word	0x0000193d
    1d20:	40000c02 	.word	0x40000c02
    1d24:	40000c00 	.word	0x40000c00
    1d28:	fffff0ff 	.word	0xfffff0ff
    1d2c:	ffffbfff 	.word	0xffffbfff
    1d30:	0000194d 	.word	0x0000194d

00001d34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	b084      	sub	sp, #16
    1d38:	af00      	add	r7, sp, #0
    1d3a:	1c02      	adds	r2, r0, #0
    1d3c:	1dfb      	adds	r3, r7, #7
    1d3e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1d40:	4b0e      	ldr	r3, [pc, #56]	; (1d7c <system_gclk_chan_get_hz+0x48>)
    1d42:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d44:	4a0e      	ldr	r2, [pc, #56]	; (1d80 <system_gclk_chan_get_hz+0x4c>)
    1d46:	1dfb      	adds	r3, r7, #7
    1d48:	781b      	ldrb	r3, [r3, #0]
    1d4a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d4c:	4b0d      	ldr	r3, [pc, #52]	; (1d84 <system_gclk_chan_get_hz+0x50>)
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	b29b      	uxth	r3, r3
    1d52:	0a1b      	lsrs	r3, r3, #8
    1d54:	1c1a      	adds	r2, r3, #0
    1d56:	230f      	movs	r3, #15
    1d58:	4013      	ands	r3, r2
    1d5a:	b2da      	uxtb	r2, r3
    1d5c:	230f      	movs	r3, #15
    1d5e:	18fb      	adds	r3, r7, r3
    1d60:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1d62:	4b09      	ldr	r3, [pc, #36]	; (1d88 <system_gclk_chan_get_hz+0x54>)
    1d64:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d66:	230f      	movs	r3, #15
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	1c18      	adds	r0, r3, #0
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <system_gclk_chan_get_hz+0x58>)
    1d70:	4798      	blx	r3
    1d72:	1c03      	adds	r3, r0, #0
}
    1d74:	1c18      	adds	r0, r3, #0
    1d76:	46bd      	mov	sp, r7
    1d78:	b004      	add	sp, #16
    1d7a:	bd80      	pop	{r7, pc}
    1d7c:	0000193d 	.word	0x0000193d
    1d80:	40000c02 	.word	0x40000c02
    1d84:	40000c00 	.word	0x40000c00
    1d88:	0000194d 	.word	0x0000194d
    1d8c:	00001b29 	.word	0x00001b29

00001d90 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b084      	sub	sp, #16
    1d94:	af00      	add	r7, sp, #0
    1d96:	1c02      	adds	r2, r0, #0
    1d98:	1dfb      	adds	r3, r7, #7
    1d9a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d9c:	230f      	movs	r3, #15
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	1dfa      	adds	r2, r7, #7
    1da2:	7812      	ldrb	r2, [r2, #0]
    1da4:	09d2      	lsrs	r2, r2, #7
    1da6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1da8:	230e      	movs	r3, #14
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	1dfa      	adds	r2, r7, #7
    1dae:	7812      	ldrb	r2, [r2, #0]
    1db0:	0952      	lsrs	r2, r2, #5
    1db2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1db6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1db8:	230f      	movs	r3, #15
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	781b      	ldrb	r3, [r3, #0]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d10f      	bne.n	1de2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1dc2:	230f      	movs	r3, #15
    1dc4:	18fb      	adds	r3, r7, r3
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	009b      	lsls	r3, r3, #2
    1dca:	2210      	movs	r2, #16
    1dcc:	4694      	mov	ip, r2
    1dce:	44bc      	add	ip, r7
    1dd0:	4463      	add	r3, ip
    1dd2:	3b08      	subs	r3, #8
    1dd4:	681a      	ldr	r2, [r3, #0]
    1dd6:	230e      	movs	r3, #14
    1dd8:	18fb      	adds	r3, r7, r3
    1dda:	781b      	ldrb	r3, [r3, #0]
    1ddc:	01db      	lsls	r3, r3, #7
    1dde:	18d3      	adds	r3, r2, r3
    1de0:	e000      	b.n	1de4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1de2:	2300      	movs	r3, #0
	}
}
    1de4:	1c18      	adds	r0, r3, #0
    1de6:	46bd      	mov	sp, r7
    1de8:	b004      	add	sp, #16
    1dea:	bd80      	pop	{r7, pc}
    1dec:	41004400 	.word	0x41004400

00001df0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b088      	sub	sp, #32
    1df4:	af00      	add	r7, sp, #0
    1df6:	60f8      	str	r0, [r7, #12]
    1df8:	60b9      	str	r1, [r7, #8]
    1dfa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1dfc:	2300      	movs	r3, #0
    1dfe:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	78db      	ldrb	r3, [r3, #3]
    1e04:	2201      	movs	r2, #1
    1e06:	4053      	eors	r3, r2
    1e08:	b2db      	uxtb	r3, r3
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d035      	beq.n	1e7a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e0e:	687b      	ldr	r3, [r7, #4]
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	2b80      	cmp	r3, #128	; 0x80
    1e14:	d00b      	beq.n	1e2e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1e16:	69fb      	ldr	r3, [r7, #28]
    1e18:	2280      	movs	r2, #128	; 0x80
    1e1a:	0252      	lsls	r2, r2, #9
    1e1c:	4313      	orrs	r3, r2
    1e1e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	061b      	lsls	r3, r3, #24
    1e26:	1c1a      	adds	r2, r3, #0
    1e28:	69fb      	ldr	r3, [r7, #28]
    1e2a:	4313      	orrs	r3, r2
    1e2c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	785b      	ldrb	r3, [r3, #1]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d003      	beq.n	1e3e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e36:	687b      	ldr	r3, [r7, #4]
    1e38:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e3a:	2b02      	cmp	r3, #2
    1e3c:	d110      	bne.n	1e60 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1e3e:	69fb      	ldr	r3, [r7, #28]
    1e40:	2280      	movs	r2, #128	; 0x80
    1e42:	0292      	lsls	r2, r2, #10
    1e44:	4313      	orrs	r3, r2
    1e46:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	789b      	ldrb	r3, [r3, #2]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d004      	beq.n	1e5a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e50:	69fb      	ldr	r3, [r7, #28]
    1e52:	2280      	movs	r2, #128	; 0x80
    1e54:	02d2      	lsls	r2, r2, #11
    1e56:	4313      	orrs	r3, r2
    1e58:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1e5a:	68fb      	ldr	r3, [r7, #12]
    1e5c:	68ba      	ldr	r2, [r7, #8]
    1e5e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e60:	687b      	ldr	r3, [r7, #4]
    1e62:	785b      	ldrb	r3, [r3, #1]
    1e64:	2b01      	cmp	r3, #1
    1e66:	d003      	beq.n	1e70 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e6c:	2b02      	cmp	r3, #2
    1e6e:	d107      	bne.n	1e80 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1e70:	69fb      	ldr	r3, [r7, #28]
    1e72:	4a21      	ldr	r2, [pc, #132]	; (1ef8 <_system_pinmux_config+0x108>)
    1e74:	4013      	ands	r3, r2
    1e76:	61fb      	str	r3, [r7, #28]
    1e78:	e002      	b.n	1e80 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1e7a:	68fb      	ldr	r3, [r7, #12]
    1e7c:	68ba      	ldr	r2, [r7, #8]
    1e7e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1e80:	68bb      	ldr	r3, [r7, #8]
    1e82:	041b      	lsls	r3, r3, #16
    1e84:	0c1b      	lsrs	r3, r3, #16
    1e86:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1e88:	68bb      	ldr	r3, [r7, #8]
    1e8a:	0c1b      	lsrs	r3, r3, #16
    1e8c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e8e:	69ba      	ldr	r2, [r7, #24]
    1e90:	69fb      	ldr	r3, [r7, #28]
    1e92:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e94:	22a0      	movs	r2, #160	; 0xa0
    1e96:	05d2      	lsls	r2, r2, #23
    1e98:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e9a:	68fb      	ldr	r3, [r7, #12]
    1e9c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e9e:	697a      	ldr	r2, [r7, #20]
    1ea0:	69fb      	ldr	r3, [r7, #28]
    1ea2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ea4:	22d0      	movs	r2, #208	; 0xd0
    1ea6:	0612      	lsls	r2, r2, #24
    1ea8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	78db      	ldrb	r3, [r3, #3]
    1eb2:	2201      	movs	r2, #1
    1eb4:	4053      	eors	r3, r2
    1eb6:	b2db      	uxtb	r3, r3
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d01a      	beq.n	1ef2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ebc:	69fa      	ldr	r2, [r7, #28]
    1ebe:	2380      	movs	r3, #128	; 0x80
    1ec0:	02db      	lsls	r3, r3, #11
    1ec2:	4013      	ands	r3, r2
    1ec4:	d00a      	beq.n	1edc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	789b      	ldrb	r3, [r3, #2]
    1eca:	2b01      	cmp	r3, #1
    1ecc:	d103      	bne.n	1ed6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	68ba      	ldr	r2, [r7, #8]
    1ed2:	619a      	str	r2, [r3, #24]
    1ed4:	e002      	b.n	1edc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1ed6:	68fb      	ldr	r3, [r7, #12]
    1ed8:	68ba      	ldr	r2, [r7, #8]
    1eda:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	785b      	ldrb	r3, [r3, #1]
    1ee0:	2b01      	cmp	r3, #1
    1ee2:	d003      	beq.n	1eec <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ee8:	2b02      	cmp	r3, #2
    1eea:	d102      	bne.n	1ef2 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1eec:	68fb      	ldr	r3, [r7, #12]
    1eee:	68ba      	ldr	r2, [r7, #8]
    1ef0:	609a      	str	r2, [r3, #8]
		}
	}
}
    1ef2:	46bd      	mov	sp, r7
    1ef4:	b008      	add	sp, #32
    1ef6:	bd80      	pop	{r7, pc}
    1ef8:	fffbffff 	.word	0xfffbffff

00001efc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b084      	sub	sp, #16
    1f00:	af00      	add	r7, sp, #0
    1f02:	1c02      	adds	r2, r0, #0
    1f04:	6039      	str	r1, [r7, #0]
    1f06:	1dfb      	adds	r3, r7, #7
    1f08:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1f0a:	1dfb      	adds	r3, r7, #7
    1f0c:	781b      	ldrb	r3, [r3, #0]
    1f0e:	1c18      	adds	r0, r3, #0
    1f10:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <system_pinmux_pin_set_config+0x44>)
    1f12:	4798      	blx	r3
    1f14:	1c03      	adds	r3, r0, #0
    1f16:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f18:	1dfb      	adds	r3, r7, #7
    1f1a:	781b      	ldrb	r3, [r3, #0]
    1f1c:	221f      	movs	r2, #31
    1f1e:	4013      	ands	r3, r2
    1f20:	2201      	movs	r2, #1
    1f22:	409a      	lsls	r2, r3
    1f24:	1c13      	adds	r3, r2, #0
    1f26:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1f28:	68f9      	ldr	r1, [r7, #12]
    1f2a:	68ba      	ldr	r2, [r7, #8]
    1f2c:	683b      	ldr	r3, [r7, #0]
    1f2e:	1c08      	adds	r0, r1, #0
    1f30:	1c11      	adds	r1, r2, #0
    1f32:	1c1a      	adds	r2, r3, #0
    1f34:	4b03      	ldr	r3, [pc, #12]	; (1f44 <system_pinmux_pin_set_config+0x48>)
    1f36:	4798      	blx	r3
}
    1f38:	46bd      	mov	sp, r7
    1f3a:	b004      	add	sp, #16
    1f3c:	bd80      	pop	{r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001d91 	.word	0x00001d91
    1f44:	00001df1 	.word	0x00001df1

00001f48 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1f48:	b580      	push	{r7, lr}
    1f4a:	af00      	add	r7, sp, #0
	return;
    1f4c:	46c0      	nop			; (mov r8, r8)
}
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd80      	pop	{r7, pc}
    1f52:	46c0      	nop			; (mov r8, r8)

00001f54 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f54:	b580      	push	{r7, lr}
    1f56:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f58:	4b04      	ldr	r3, [pc, #16]	; (1f6c <system_init+0x18>)
    1f5a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <system_init+0x1c>)
    1f5e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f60:	4b04      	ldr	r3, [pc, #16]	; (1f74 <system_init+0x20>)
    1f62:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f64:	4b04      	ldr	r3, [pc, #16]	; (1f78 <system_init+0x24>)
    1f66:	4798      	blx	r3
}
    1f68:	46bd      	mov	sp, r7
    1f6a:	bd80      	pop	{r7, pc}
    1f6c:	00001815 	.word	0x00001815
    1f70:	0000034d 	.word	0x0000034d
    1f74:	00001f49 	.word	0x00001f49
    1f78:	00001f49 	.word	0x00001f49

00001f7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f7c:	b580      	push	{r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f82:	4a2e      	ldr	r2, [pc, #184]	; (203c <STACK_SIZE+0x3c>)
    1f84:	2390      	movs	r3, #144	; 0x90
    1f86:	005b      	lsls	r3, r3, #1
    1f88:	2102      	movs	r1, #2
    1f8a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f8c:	4b2c      	ldr	r3, [pc, #176]	; (2040 <STACK_SIZE+0x40>)
    1f8e:	78da      	ldrb	r2, [r3, #3]
    1f90:	2103      	movs	r1, #3
    1f92:	438a      	bics	r2, r1
    1f94:	1c11      	adds	r1, r2, #0
    1f96:	2202      	movs	r2, #2
    1f98:	430a      	orrs	r2, r1
    1f9a:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f9c:	4b28      	ldr	r3, [pc, #160]	; (2040 <STACK_SIZE+0x40>)
    1f9e:	78da      	ldrb	r2, [r3, #3]
    1fa0:	210c      	movs	r1, #12
    1fa2:	438a      	bics	r2, r1
    1fa4:	1c11      	adds	r1, r2, #0
    1fa6:	2208      	movs	r2, #8
    1fa8:	430a      	orrs	r2, r1
    1faa:	70da      	strb	r2, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1fac:	4b25      	ldr	r3, [pc, #148]	; (2044 <STACK_SIZE+0x44>)
    1fae:	7b9a      	ldrb	r2, [r3, #14]
    1fb0:	2130      	movs	r1, #48	; 0x30
    1fb2:	438a      	bics	r2, r1
    1fb4:	1c11      	adds	r1, r2, #0
    1fb6:	2220      	movs	r2, #32
    1fb8:	430a      	orrs	r2, r1
    1fba:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1fbc:	4b21      	ldr	r3, [pc, #132]	; (2044 <STACK_SIZE+0x44>)
    1fbe:	7b9a      	ldrb	r2, [r3, #14]
    1fc0:	210c      	movs	r1, #12
    1fc2:	438a      	bics	r2, r1
    1fc4:	1c11      	adds	r1, r2, #0
    1fc6:	2208      	movs	r2, #8
    1fc8:	430a      	orrs	r2, r1
    1fca:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1fcc:	4b1d      	ldr	r3, [pc, #116]	; (2044 <STACK_SIZE+0x44>)
    1fce:	7b9a      	ldrb	r2, [r3, #14]
    1fd0:	2103      	movs	r1, #3
    1fd2:	438a      	bics	r2, r1
    1fd4:	1c11      	adds	r1, r2, #0
    1fd6:	2202      	movs	r2, #2
    1fd8:	430a      	orrs	r2, r1
    1fda:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1fdc:	4b1a      	ldr	r3, [pc, #104]	; (2048 <STACK_SIZE+0x48>)
    1fde:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1fe0:	4b1a      	ldr	r3, [pc, #104]	; (204c <STACK_SIZE+0x4c>)
    1fe2:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1fe4:	687a      	ldr	r2, [r7, #4]
    1fe6:	683b      	ldr	r3, [r7, #0]
    1fe8:	429a      	cmp	r2, r3
    1fea:	d00c      	beq.n	2006 <STACK_SIZE+0x6>
                for (; pDest < &_erelocate;) {
    1fec:	e007      	b.n	1ffe <Reset_Handler+0x82>
                        *pDest++ = *pSrc++;
    1fee:	683b      	ldr	r3, [r7, #0]
    1ff0:	1d1a      	adds	r2, r3, #4
    1ff2:	603a      	str	r2, [r7, #0]
    1ff4:	687a      	ldr	r2, [r7, #4]
    1ff6:	1d11      	adds	r1, r2, #4
    1ff8:	6079      	str	r1, [r7, #4]
    1ffa:	6812      	ldr	r2, [r2, #0]
    1ffc:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1ffe:	683a      	ldr	r2, [r7, #0]
    2000:	4b13      	ldr	r3, [pc, #76]	; (2050 <STACK_SIZE+0x50>)
    2002:	429a      	cmp	r2, r3
    2004:	d3f3      	bcc.n	1fee <Reset_Handler+0x72>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2006:	4b13      	ldr	r3, [pc, #76]	; (2054 <STACK_SIZE+0x54>)
    2008:	603b      	str	r3, [r7, #0]
    200a:	e004      	b.n	2016 <STACK_SIZE+0x16>
                *pDest++ = 0;
    200c:	683b      	ldr	r3, [r7, #0]
    200e:	1d1a      	adds	r2, r3, #4
    2010:	603a      	str	r2, [r7, #0]
    2012:	2200      	movs	r2, #0
    2014:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2016:	683a      	ldr	r2, [r7, #0]
    2018:	4b0f      	ldr	r3, [pc, #60]	; (2058 <STACK_SIZE+0x58>)
    201a:	429a      	cmp	r2, r3
    201c:	d3f6      	bcc.n	200c <STACK_SIZE+0xc>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    201e:	4b0f      	ldr	r3, [pc, #60]	; (205c <STACK_SIZE+0x5c>)
    2020:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2022:	4b0f      	ldr	r3, [pc, #60]	; (2060 <STACK_SIZE+0x60>)
    2024:	687a      	ldr	r2, [r7, #4]
    2026:	217f      	movs	r1, #127	; 0x7f
    2028:	438a      	bics	r2, r1
    202a:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    202c:	4b0d      	ldr	r3, [pc, #52]	; (2064 <STACK_SIZE+0x64>)
    202e:	4798      	blx	r3

        /* Branch to main function */
        main();
    2030:	4b0d      	ldr	r3, [pc, #52]	; (2068 <STACK_SIZE+0x68>)
    2032:	4798      	blx	r3

        /* Infinite loop */
        //while (1);
}
    2034:	46bd      	mov	sp, r7
    2036:	b002      	add	sp, #8
    2038:	bd80      	pop	{r7, pc}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	41007000 	.word	0x41007000
    2040:	41005000 	.word	0x41005000
    2044:	41004800 	.word	0x41004800
    2048:	00002644 	.word	0x00002644
    204c:	20000000 	.word	0x20000000
    2050:	20000014 	.word	0x20000014
    2054:	20000014 	.word	0x20000014
    2058:	20000064 	.word	0x20000064
    205c:	00000000 	.word	0x00000000
    2060:	e000ed00 	.word	0xe000ed00
    2064:	00002569 	.word	0x00002569
    2068:	00002369 	.word	0x00002369

0000206c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    206c:	b580      	push	{r7, lr}
    206e:	af00      	add	r7, sp, #0
        //while (1) {
        //}
}
    2070:	46bd      	mov	sp, r7
    2072:	bd80      	pop	{r7, pc}

00002074 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	1c02      	adds	r2, r0, #0
    207c:	1dfb      	adds	r3, r7, #7
    207e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2080:	230f      	movs	r3, #15
    2082:	18fb      	adds	r3, r7, r3
    2084:	1dfa      	adds	r2, r7, #7
    2086:	7812      	ldrb	r2, [r2, #0]
    2088:	09d2      	lsrs	r2, r2, #7
    208a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    208c:	230e      	movs	r3, #14
    208e:	18fb      	adds	r3, r7, r3
    2090:	1dfa      	adds	r2, r7, #7
    2092:	7812      	ldrb	r2, [r2, #0]
    2094:	0952      	lsrs	r2, r2, #5
    2096:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2098:	4b0d      	ldr	r3, [pc, #52]	; (20d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    209a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    209c:	230f      	movs	r3, #15
    209e:	18fb      	adds	r3, r7, r3
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	2b00      	cmp	r3, #0
    20a4:	d10f      	bne.n	20c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    20a6:	230f      	movs	r3, #15
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	2210      	movs	r2, #16
    20b0:	4694      	mov	ip, r2
    20b2:	44bc      	add	ip, r7
    20b4:	4463      	add	r3, ip
    20b6:	3b08      	subs	r3, #8
    20b8:	681a      	ldr	r2, [r3, #0]
    20ba:	230e      	movs	r3, #14
    20bc:	18fb      	adds	r3, r7, r3
    20be:	781b      	ldrb	r3, [r3, #0]
    20c0:	01db      	lsls	r3, r3, #7
    20c2:	18d3      	adds	r3, r2, r3
    20c4:	e000      	b.n	20c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    20c6:	2300      	movs	r3, #0
	}
}
    20c8:	1c18      	adds	r0, r3, #0
    20ca:	46bd      	mov	sp, r7
    20cc:	b004      	add	sp, #16
    20ce:	bd80      	pop	{r7, pc}
    20d0:	41004400 	.word	0x41004400

000020d4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b082      	sub	sp, #8
    20d8:	af00      	add	r7, sp, #0
    20da:	1c02      	adds	r2, r0, #0
    20dc:	1dfb      	adds	r3, r7, #7
    20de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    20e0:	1dfb      	adds	r3, r7, #7
    20e2:	781b      	ldrb	r3, [r3, #0]
    20e4:	1c18      	adds	r0, r3, #0
    20e6:	4b03      	ldr	r3, [pc, #12]	; (20f4 <port_get_group_from_gpio_pin+0x20>)
    20e8:	4798      	blx	r3
    20ea:	1c03      	adds	r3, r0, #0
}
    20ec:	1c18      	adds	r0, r3, #0
    20ee:	46bd      	mov	sp, r7
    20f0:	b002      	add	sp, #8
    20f2:	bd80      	pop	{r7, pc}
    20f4:	00002075 	.word	0x00002075

000020f8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	2200      	movs	r2, #0
    2104:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	2201      	movs	r2, #1
    210a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	2200      	movs	r2, #0
    2110:	709a      	strb	r2, [r3, #2]
}
    2112:	46bd      	mov	sp, r7
    2114:	b002      	add	sp, #8
    2116:	bd80      	pop	{r7, pc}

00002118 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2118:	b580      	push	{r7, lr}
    211a:	b084      	sub	sp, #16
    211c:	af00      	add	r7, sp, #0
    211e:	1c02      	adds	r2, r0, #0
    2120:	1dfb      	adds	r3, r7, #7
    2122:	701a      	strb	r2, [r3, #0]
    2124:	1dbb      	adds	r3, r7, #6
    2126:	1c0a      	adds	r2, r1, #0
    2128:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    212a:	1dfb      	adds	r3, r7, #7
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	1c18      	adds	r0, r3, #0
    2130:	4b0c      	ldr	r3, [pc, #48]	; (2164 <port_pin_set_output_level+0x4c>)
    2132:	4798      	blx	r3
    2134:	1c03      	adds	r3, r0, #0
    2136:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2138:	1dfb      	adds	r3, r7, #7
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	221f      	movs	r2, #31
    213e:	4013      	ands	r3, r2
    2140:	2201      	movs	r2, #1
    2142:	409a      	lsls	r2, r3
    2144:	1c13      	adds	r3, r2, #0
    2146:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2148:	1dbb      	adds	r3, r7, #6
    214a:	781b      	ldrb	r3, [r3, #0]
    214c:	2b00      	cmp	r3, #0
    214e:	d003      	beq.n	2158 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2150:	68fb      	ldr	r3, [r7, #12]
    2152:	68ba      	ldr	r2, [r7, #8]
    2154:	619a      	str	r2, [r3, #24]
    2156:	e002      	b.n	215e <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2158:	68fb      	ldr	r3, [r7, #12]
    215a:	68ba      	ldr	r2, [r7, #8]
    215c:	615a      	str	r2, [r3, #20]
	}
}
    215e:	46bd      	mov	sp, r7
    2160:	b004      	add	sp, #16
    2162:	bd80      	pop	{r7, pc}
    2164:	000020d5 	.word	0x000020d5

00002168 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2168:	b580      	push	{r7, lr}
    216a:	b084      	sub	sp, #16
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	69db      	ldr	r3, [r3, #28]
    217a:	1e5a      	subs	r2, r3, #1
    217c:	4193      	sbcs	r3, r2
    217e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2180:	1c18      	adds	r0, r3, #0
    2182:	46bd      	mov	sp, r7
    2184:	b004      	add	sp, #16
    2186:	bd80      	pop	{r7, pc}

00002188 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2201      	movs	r2, #1
    2194:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2200      	movs	r2, #0
    21a0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	22c0      	movs	r2, #192	; 0xc0
    21a6:	0392      	lsls	r2, r2, #14
    21a8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2200      	movs	r2, #0
    21ae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2200      	movs	r2, #0
    21b4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	2201      	movs	r2, #1
    21ba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2201      	movs	r2, #1
    21c0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	2200      	movs	r2, #0
    21c6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2224      	movs	r2, #36	; 0x24
    21cc:	2100      	movs	r1, #0
    21ce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	3318      	adds	r3, #24
    21d4:	1c18      	adds	r0, r3, #0
    21d6:	2100      	movs	r1, #0
    21d8:	220c      	movs	r2, #12
    21da:	4b0a      	ldr	r3, [pc, #40]	; (2204 <spi_get_config_defaults+0x7c>)
    21dc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	4a09      	ldr	r2, [pc, #36]	; (2208 <spi_get_config_defaults+0x80>)
    21e2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	2200      	movs	r2, #0
    21e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	2200      	movs	r2, #0
    21ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	2200      	movs	r2, #0
    21f4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	2200      	movs	r2, #0
    21fa:	635a      	str	r2, [r3, #52]	; 0x34

};
    21fc:	46bd      	mov	sp, r7
    21fe:	b002      	add	sp, #8
    2200:	bd80      	pop	{r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	000025b5 	.word	0x000025b5
    2208:	000186a0 	.word	0x000186a0

0000220c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	220a      	movs	r2, #10
    2218:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2200      	movs	r2, #0
    221e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	709a      	strb	r2, [r3, #2]
}
    2226:	46bd      	mov	sp, r7
    2228:	b002      	add	sp, #8
    222a:	bd80      	pop	{r7, pc}

0000222c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    222c:	b580      	push	{r7, lr}
    222e:	b084      	sub	sp, #16
    2230:	af00      	add	r7, sp, #0
    2232:	6078      	str	r0, [r7, #4]
    2234:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2236:	683b      	ldr	r3, [r7, #0]
    2238:	781a      	ldrb	r2, [r3, #0]
    223a:	687b      	ldr	r3, [r7, #4]
    223c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    223e:	683b      	ldr	r3, [r7, #0]
    2240:	785a      	ldrb	r2, [r3, #1]
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2246:	683b      	ldr	r3, [r7, #0]
    2248:	789a      	ldrb	r2, [r3, #2]
    224a:	687b      	ldr	r3, [r7, #4]
    224c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    224e:	230c      	movs	r3, #12
    2250:	18fb      	adds	r3, r7, r3
    2252:	1c18      	adds	r0, r3, #0
    2254:	4b0b      	ldr	r3, [pc, #44]	; (2284 <spi_attach_slave+0x58>)
    2256:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2258:	230c      	movs	r3, #12
    225a:	18fb      	adds	r3, r7, r3
    225c:	2201      	movs	r2, #1
    225e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2260:	687b      	ldr	r3, [r7, #4]
    2262:	781a      	ldrb	r2, [r3, #0]
    2264:	230c      	movs	r3, #12
    2266:	18fb      	adds	r3, r7, r3
    2268:	1c10      	adds	r0, r2, #0
    226a:	1c19      	adds	r1, r3, #0
    226c:	4b06      	ldr	r3, [pc, #24]	; (2288 <spi_attach_slave+0x5c>)
    226e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2270:	687b      	ldr	r3, [r7, #4]
    2272:	781b      	ldrb	r3, [r3, #0]
    2274:	1c18      	adds	r0, r3, #0
    2276:	2101      	movs	r1, #1
    2278:	4b04      	ldr	r3, [pc, #16]	; (228c <spi_attach_slave+0x60>)
    227a:	4798      	blx	r3
}
    227c:	46bd      	mov	sp, r7
    227e:	b004      	add	sp, #16
    2280:	bd80      	pop	{r7, pc}
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	000020f9 	.word	0x000020f9
    2288:	000003c5 	.word	0x000003c5
    228c:	00002119 	.word	0x00002119

00002290 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2290:	b580      	push	{r7, lr}
    2292:	b084      	sub	sp, #16
    2294:	af00      	add	r7, sp, #0
    2296:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2298:	687b      	ldr	r3, [r7, #4]
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	1c18      	adds	r0, r3, #0
    22a4:	4b06      	ldr	r3, [pc, #24]	; (22c0 <spi_enable+0x30>)
    22a6:	4798      	blx	r3
    22a8:	1e03      	subs	r3, r0, #0
    22aa:	d1f9      	bne.n	22a0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22ac:	68fb      	ldr	r3, [r7, #12]
    22ae:	681b      	ldr	r3, [r3, #0]
    22b0:	2202      	movs	r2, #2
    22b2:	431a      	orrs	r2, r3
    22b4:	68fb      	ldr	r3, [r7, #12]
    22b6:	601a      	str	r2, [r3, #0]
}
    22b8:	46bd      	mov	sp, r7
    22ba:	b004      	add	sp, #16
    22bc:	bd80      	pop	{r7, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	00002169 	.word	0x00002169

000022c4 <configure_spi_master>:

void configure_spi_master(void);

//! [configure_spi]
void configure_spi_master(void)
{
    22c4:	b590      	push	{r4, r7, lr}
    22c6:	b091      	sub	sp, #68	; 0x44
    22c8:	af00      	add	r7, sp, #0
//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    22ca:	1c3b      	adds	r3, r7, #0
    22cc:	1c18      	adds	r0, r3, #0
    22ce:	4b1c      	ldr	r3, [pc, #112]	; (2340 <configure_spi_master+0x7c>)
    22d0:	4798      	blx	r3
//! [slave_conf_defaults]
//! [ss_pin]
	//slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	slave_dev_config.ss_pin = PIN_PA20;
    22d2:	1c3b      	adds	r3, r7, #0
    22d4:	2214      	movs	r2, #20
    22d6:	701a      	strb	r2, [r3, #0]
//! [ss_pin]
//! [slave_init]
	spi_attach_slave(&slave, &slave_dev_config);
    22d8:	4a1a      	ldr	r2, [pc, #104]	; (2344 <configure_spi_master+0x80>)
    22da:	1c3b      	adds	r3, r7, #0
    22dc:	1c10      	adds	r0, r2, #0
    22de:	1c19      	adds	r1, r3, #0
    22e0:	4b19      	ldr	r3, [pc, #100]	; (2348 <configure_spi_master+0x84>)
    22e2:	4798      	blx	r3
//! [slave_init]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
    22e4:	1d3b      	adds	r3, r7, #4
    22e6:	1c18      	adds	r0, r3, #0
    22e8:	4b18      	ldr	r3, [pc, #96]	; (234c <configure_spi_master+0x88>)
    22ea:	4798      	blx	r3

//! [conf_defaults]
//! [mux_setting]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    22ec:	1d3b      	adds	r3, r7, #4
    22ee:	2280      	movs	r2, #128	; 0x80
    22f0:	0252      	lsls	r2, r2, #9
    22f2:	60da      	str	r2, [r3, #12]
//! [mux_setting]
	/* Configure pad 0 for data in */
//! [di]
	config_spi_master.pinmux_pad0 = PIN_PA21;//EXT1_SPI_SERCOM_PINMUX_PAD0;
    22f4:	1d3b      	adds	r3, r7, #4
    22f6:	2215      	movs	r2, #21
    22f8:	629a      	str	r2, [r3, #40]	; 0x28
//! [di]
	/* Configure pad 1 as unused */
//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    22fa:	1d3b      	adds	r3, r7, #4
    22fc:	2201      	movs	r2, #1
    22fe:	4252      	negs	r2, r2
    2300:	62da      	str	r2, [r3, #44]	; 0x2c
//! [ss]
	/* Configure pad 2 for data out */
//! [do]
	config_spi_master.pinmux_pad2 = PIN_PB16;//EXT1_SPI_SERCOM_PINMUX_PAD2;
    2302:	1d3b      	adds	r3, r7, #4
    2304:	2230      	movs	r2, #48	; 0x30
    2306:	631a      	str	r2, [r3, #48]	; 0x30
//! [do]
	/* Configure pad 3 for SCK */
//! [sck]
	config_spi_master.pinmux_pad3 = PIN_PB17;//EXT1_SPI_SERCOM_PINMUX_PAD3;
    2308:	1d3b      	adds	r3, r7, #4
    230a:	2231      	movs	r2, #49	; 0x31
    230c:	635a      	str	r2, [r3, #52]	; 0x34
//! [sck]
//! [init]
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    230e:	4a10      	ldr	r2, [pc, #64]	; (2350 <configure_spi_master+0x8c>)
    2310:	4910      	ldr	r1, [pc, #64]	; (2354 <configure_spi_master+0x90>)
    2312:	1d3b      	adds	r3, r7, #4
    2314:	1c10      	adds	r0, r2, #0
    2316:	1c1a      	adds	r2, r3, #0
    2318:	4b0f      	ldr	r3, [pc, #60]	; (2358 <configure_spi_master+0x94>)
    231a:	4798      	blx	r3
//! [init]

//! [enable]
	enum status_code code = spi_set_baudrate(&spi_master_instance, 100000);
    231c:	233f      	movs	r3, #63	; 0x3f
    231e:	18fc      	adds	r4, r7, r3
    2320:	4b0b      	ldr	r3, [pc, #44]	; (2350 <configure_spi_master+0x8c>)
    2322:	4a0e      	ldr	r2, [pc, #56]	; (235c <configure_spi_master+0x98>)
    2324:	1c18      	adds	r0, r3, #0
    2326:	1c11      	adds	r1, r2, #0
    2328:	4b0d      	ldr	r3, [pc, #52]	; (2360 <configure_spi_master+0x9c>)
    232a:	4798      	blx	r3
    232c:	1c03      	adds	r3, r0, #0
    232e:	7023      	strb	r3, [r4, #0]

	spi_enable(&spi_master_instance);
    2330:	4b07      	ldr	r3, [pc, #28]	; (2350 <configure_spi_master+0x8c>)
    2332:	1c18      	adds	r0, r3, #0
    2334:	4b0b      	ldr	r3, [pc, #44]	; (2364 <configure_spi_master+0xa0>)
    2336:	4798      	blx	r3
//! [enable]

}
    2338:	46bd      	mov	sp, r7
    233a:	b011      	add	sp, #68	; 0x44
    233c:	bd90      	pop	{r4, r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	0000220d 	.word	0x0000220d
    2344:	20000060 	.word	0x20000060
    2348:	0000222d 	.word	0x0000222d
    234c:	00002189 	.word	0x00002189
    2350:	20000054 	.word	0x20000054
    2354:	42000800 	.word	0x42000800
    2358:	00000fdd 	.word	0x00000fdd
    235c:	000186a0 	.word	0x000186a0
    2360:	00000b25 	.word	0x00000b25
    2364:	00002291 	.word	0x00002291

00002368 <main>:
//! [configure_spi]

int main(void)
{
    2368:	b5b0      	push	{r4, r5, r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
//! [main_setup]
//! [system_init]
	system_init();
    236e:	4b29      	ldr	r3, [pc, #164]	; (2414 <main+0xac>)
    2370:	4798      	blx	r3
//! [system_init]
//! [run_config]
	configure_spi_master();
    2372:	4b29      	ldr	r3, [pc, #164]	; (2418 <main+0xb0>)
    2374:	4798      	blx	r3
	//spi_select_slave(&spi_master_instance, &slave, true);
//! [select_slave]
//! [write]
    //enum status_code code_0 = spi_write_buffer_wait(&spi_master_instance, write0, WRITE_LEN);
	//enum status_code code_1 = spi_transceive_buffer_wait(&spi_master_instance,read0,rx, READ_LEN);
	port_pin_set_output_level(PIN_PA18, true);
    2376:	2012      	movs	r0, #18
    2378:	2101      	movs	r1, #1
    237a:	4b28      	ldr	r3, [pc, #160]	; (241c <main+0xb4>)
    237c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA19, true);
    237e:	2013      	movs	r0, #19
    2380:	2101      	movs	r1, #1
    2382:	4b26      	ldr	r3, [pc, #152]	; (241c <main+0xb4>)
    2384:	4798      	blx	r3
	static uint8_t read1[4] = {
		0x03, 0x00, 0x00, 0x00
	};
	static uint8_t enable = 0x06;
	static uint8_t status[6] = {0x05, 0x06, 0x00, 0x00, 0x01, 0x06, 0x06, 0x06, 0x06, 0x06};
	spi_select_slave(&spi_master_instance, &slave, false);
    2386:	4a26      	ldr	r2, [pc, #152]	; (2420 <main+0xb8>)
    2388:	4b26      	ldr	r3, [pc, #152]	; (2424 <main+0xbc>)
    238a:	1c10      	adds	r0, r2, #0
    238c:	1c19      	adds	r1, r3, #0
    238e:	2200      	movs	r2, #0
    2390:	4b25      	ldr	r3, [pc, #148]	; (2428 <main+0xc0>)
    2392:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
    2394:	4a22      	ldr	r2, [pc, #136]	; (2420 <main+0xb8>)
    2396:	4b23      	ldr	r3, [pc, #140]	; (2424 <main+0xbc>)
    2398:	1c10      	adds	r0, r2, #0
    239a:	1c19      	adds	r1, r3, #0
    239c:	2201      	movs	r2, #1
    239e:	4b22      	ldr	r3, [pc, #136]	; (2428 <main+0xc0>)
    23a0:	4798      	blx	r3
	enum status_code code_1 = spi_write_buffer_wait(&spi_master_instance, &enable, 1);
    23a2:	230f      	movs	r3, #15
    23a4:	18fc      	adds	r4, r7, r3
    23a6:	4a1e      	ldr	r2, [pc, #120]	; (2420 <main+0xb8>)
    23a8:	4b20      	ldr	r3, [pc, #128]	; (242c <main+0xc4>)
    23aa:	1c10      	adds	r0, r2, #0
    23ac:	1c19      	adds	r1, r3, #0
    23ae:	2201      	movs	r2, #1
    23b0:	4b1f      	ldr	r3, [pc, #124]	; (2430 <main+0xc8>)
    23b2:	4798      	blx	r3
    23b4:	1c03      	adds	r3, r0, #0
    23b6:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&spi_master_instance, &slave, false);
    23b8:	4a19      	ldr	r2, [pc, #100]	; (2420 <main+0xb8>)
    23ba:	4b1a      	ldr	r3, [pc, #104]	; (2424 <main+0xbc>)
    23bc:	1c10      	adds	r0, r2, #0
    23be:	1c19      	adds	r1, r3, #0
    23c0:	2200      	movs	r2, #0
    23c2:	4b19      	ldr	r3, [pc, #100]	; (2428 <main+0xc0>)
    23c4:	4798      	blx	r3
	
	int temp[2];
//! [inf_loop]
	delay_init();
    23c6:	4b1b      	ldr	r3, [pc, #108]	; (2434 <main+0xcc>)
    23c8:	4798      	blx	r3
	while (true) {
		spi_select_slave(&spi_master_instance, &slave, true);
    23ca:	4a15      	ldr	r2, [pc, #84]	; (2420 <main+0xb8>)
    23cc:	4b15      	ldr	r3, [pc, #84]	; (2424 <main+0xbc>)
    23ce:	1c10      	adds	r0, r2, #0
    23d0:	1c19      	adds	r1, r3, #0
    23d2:	2201      	movs	r2, #1
    23d4:	4b14      	ldr	r3, [pc, #80]	; (2428 <main+0xc0>)
    23d6:	4798      	blx	r3
		//status[0] = (uint8_t)rand();
		enum status_code code_2 = spi_transceive_buffer_wait(&spi_master_instance, status, &temp, 2);
    23d8:	230e      	movs	r3, #14
    23da:	18fc      	adds	r4, r7, r3
    23dc:	4910      	ldr	r1, [pc, #64]	; (2420 <main+0xb8>)
    23de:	4a16      	ldr	r2, [pc, #88]	; (2438 <main+0xd0>)
    23e0:	1c3b      	adds	r3, r7, #0
    23e2:	1c08      	adds	r0, r1, #0
    23e4:	1c11      	adds	r1, r2, #0
    23e6:	1c1a      	adds	r2, r3, #0
    23e8:	2302      	movs	r3, #2
    23ea:	4d14      	ldr	r5, [pc, #80]	; (243c <main+0xd4>)
    23ec:	47a8      	blx	r5
    23ee:	1c03      	adds	r3, r0, #0
    23f0:	7023      	strb	r3, [r4, #0]
		delay_us(100);
    23f2:	2064      	movs	r0, #100	; 0x64
    23f4:	4b12      	ldr	r3, [pc, #72]	; (2440 <main+0xd8>)
    23f6:	4798      	blx	r3
		spi_select_slave(&spi_master_instance, &slave, false);
    23f8:	4a09      	ldr	r2, [pc, #36]	; (2420 <main+0xb8>)
    23fa:	4b0a      	ldr	r3, [pc, #40]	; (2424 <main+0xbc>)
    23fc:	1c10      	adds	r0, r2, #0
    23fe:	1c19      	adds	r1, r3, #0
    2400:	2200      	movs	r2, #0
    2402:	4b09      	ldr	r3, [pc, #36]	; (2428 <main+0xc0>)
    2404:	4798      	blx	r3
		delay_us(100);
    2406:	2064      	movs	r0, #100	; 0x64
    2408:	4b0d      	ldr	r3, [pc, #52]	; (2440 <main+0xd8>)
    240a:	4798      	blx	r3
		int a = 9 ;
    240c:	2309      	movs	r3, #9
    240e:	60bb      	str	r3, [r7, #8]
	}
    2410:	e7db      	b.n	23ca <main+0x62>
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	00001f55 	.word	0x00001f55
    2418:	000022c5 	.word	0x000022c5
    241c:	00002119 	.word	0x00002119
    2420:	20000054 	.word	0x20000054
    2424:	20000060 	.word	0x20000060
    2428:	000010d1 	.word	0x000010d1
    242c:	20000009 	.word	0x20000009
    2430:	000011c1 	.word	0x000011c1
    2434:	00000145 	.word	0x00000145
    2438:	2000000c 	.word	0x2000000c
    243c:	000012f9 	.word	0x000012f9
    2440:	000001a1 	.word	0x000001a1

00002444 <__aeabi_uidiv>:
    2444:	2200      	movs	r2, #0
    2446:	0843      	lsrs	r3, r0, #1
    2448:	428b      	cmp	r3, r1
    244a:	d374      	bcc.n	2536 <__aeabi_uidiv+0xf2>
    244c:	0903      	lsrs	r3, r0, #4
    244e:	428b      	cmp	r3, r1
    2450:	d35f      	bcc.n	2512 <__aeabi_uidiv+0xce>
    2452:	0a03      	lsrs	r3, r0, #8
    2454:	428b      	cmp	r3, r1
    2456:	d344      	bcc.n	24e2 <__aeabi_uidiv+0x9e>
    2458:	0b03      	lsrs	r3, r0, #12
    245a:	428b      	cmp	r3, r1
    245c:	d328      	bcc.n	24b0 <__aeabi_uidiv+0x6c>
    245e:	0c03      	lsrs	r3, r0, #16
    2460:	428b      	cmp	r3, r1
    2462:	d30d      	bcc.n	2480 <__aeabi_uidiv+0x3c>
    2464:	22ff      	movs	r2, #255	; 0xff
    2466:	0209      	lsls	r1, r1, #8
    2468:	ba12      	rev	r2, r2
    246a:	0c03      	lsrs	r3, r0, #16
    246c:	428b      	cmp	r3, r1
    246e:	d302      	bcc.n	2476 <__aeabi_uidiv+0x32>
    2470:	1212      	asrs	r2, r2, #8
    2472:	0209      	lsls	r1, r1, #8
    2474:	d065      	beq.n	2542 <__aeabi_uidiv+0xfe>
    2476:	0b03      	lsrs	r3, r0, #12
    2478:	428b      	cmp	r3, r1
    247a:	d319      	bcc.n	24b0 <__aeabi_uidiv+0x6c>
    247c:	e000      	b.n	2480 <__aeabi_uidiv+0x3c>
    247e:	0a09      	lsrs	r1, r1, #8
    2480:	0bc3      	lsrs	r3, r0, #15
    2482:	428b      	cmp	r3, r1
    2484:	d301      	bcc.n	248a <__aeabi_uidiv+0x46>
    2486:	03cb      	lsls	r3, r1, #15
    2488:	1ac0      	subs	r0, r0, r3
    248a:	4152      	adcs	r2, r2
    248c:	0b83      	lsrs	r3, r0, #14
    248e:	428b      	cmp	r3, r1
    2490:	d301      	bcc.n	2496 <__aeabi_uidiv+0x52>
    2492:	038b      	lsls	r3, r1, #14
    2494:	1ac0      	subs	r0, r0, r3
    2496:	4152      	adcs	r2, r2
    2498:	0b43      	lsrs	r3, r0, #13
    249a:	428b      	cmp	r3, r1
    249c:	d301      	bcc.n	24a2 <__aeabi_uidiv+0x5e>
    249e:	034b      	lsls	r3, r1, #13
    24a0:	1ac0      	subs	r0, r0, r3
    24a2:	4152      	adcs	r2, r2
    24a4:	0b03      	lsrs	r3, r0, #12
    24a6:	428b      	cmp	r3, r1
    24a8:	d301      	bcc.n	24ae <__aeabi_uidiv+0x6a>
    24aa:	030b      	lsls	r3, r1, #12
    24ac:	1ac0      	subs	r0, r0, r3
    24ae:	4152      	adcs	r2, r2
    24b0:	0ac3      	lsrs	r3, r0, #11
    24b2:	428b      	cmp	r3, r1
    24b4:	d301      	bcc.n	24ba <__aeabi_uidiv+0x76>
    24b6:	02cb      	lsls	r3, r1, #11
    24b8:	1ac0      	subs	r0, r0, r3
    24ba:	4152      	adcs	r2, r2
    24bc:	0a83      	lsrs	r3, r0, #10
    24be:	428b      	cmp	r3, r1
    24c0:	d301      	bcc.n	24c6 <__aeabi_uidiv+0x82>
    24c2:	028b      	lsls	r3, r1, #10
    24c4:	1ac0      	subs	r0, r0, r3
    24c6:	4152      	adcs	r2, r2
    24c8:	0a43      	lsrs	r3, r0, #9
    24ca:	428b      	cmp	r3, r1
    24cc:	d301      	bcc.n	24d2 <__aeabi_uidiv+0x8e>
    24ce:	024b      	lsls	r3, r1, #9
    24d0:	1ac0      	subs	r0, r0, r3
    24d2:	4152      	adcs	r2, r2
    24d4:	0a03      	lsrs	r3, r0, #8
    24d6:	428b      	cmp	r3, r1
    24d8:	d301      	bcc.n	24de <__aeabi_uidiv+0x9a>
    24da:	020b      	lsls	r3, r1, #8
    24dc:	1ac0      	subs	r0, r0, r3
    24de:	4152      	adcs	r2, r2
    24e0:	d2cd      	bcs.n	247e <__aeabi_uidiv+0x3a>
    24e2:	09c3      	lsrs	r3, r0, #7
    24e4:	428b      	cmp	r3, r1
    24e6:	d301      	bcc.n	24ec <__aeabi_uidiv+0xa8>
    24e8:	01cb      	lsls	r3, r1, #7
    24ea:	1ac0      	subs	r0, r0, r3
    24ec:	4152      	adcs	r2, r2
    24ee:	0983      	lsrs	r3, r0, #6
    24f0:	428b      	cmp	r3, r1
    24f2:	d301      	bcc.n	24f8 <__aeabi_uidiv+0xb4>
    24f4:	018b      	lsls	r3, r1, #6
    24f6:	1ac0      	subs	r0, r0, r3
    24f8:	4152      	adcs	r2, r2
    24fa:	0943      	lsrs	r3, r0, #5
    24fc:	428b      	cmp	r3, r1
    24fe:	d301      	bcc.n	2504 <__aeabi_uidiv+0xc0>
    2500:	014b      	lsls	r3, r1, #5
    2502:	1ac0      	subs	r0, r0, r3
    2504:	4152      	adcs	r2, r2
    2506:	0903      	lsrs	r3, r0, #4
    2508:	428b      	cmp	r3, r1
    250a:	d301      	bcc.n	2510 <__aeabi_uidiv+0xcc>
    250c:	010b      	lsls	r3, r1, #4
    250e:	1ac0      	subs	r0, r0, r3
    2510:	4152      	adcs	r2, r2
    2512:	08c3      	lsrs	r3, r0, #3
    2514:	428b      	cmp	r3, r1
    2516:	d301      	bcc.n	251c <__aeabi_uidiv+0xd8>
    2518:	00cb      	lsls	r3, r1, #3
    251a:	1ac0      	subs	r0, r0, r3
    251c:	4152      	adcs	r2, r2
    251e:	0883      	lsrs	r3, r0, #2
    2520:	428b      	cmp	r3, r1
    2522:	d301      	bcc.n	2528 <__aeabi_uidiv+0xe4>
    2524:	008b      	lsls	r3, r1, #2
    2526:	1ac0      	subs	r0, r0, r3
    2528:	4152      	adcs	r2, r2
    252a:	0843      	lsrs	r3, r0, #1
    252c:	428b      	cmp	r3, r1
    252e:	d301      	bcc.n	2534 <__aeabi_uidiv+0xf0>
    2530:	004b      	lsls	r3, r1, #1
    2532:	1ac0      	subs	r0, r0, r3
    2534:	4152      	adcs	r2, r2
    2536:	1a41      	subs	r1, r0, r1
    2538:	d200      	bcs.n	253c <__aeabi_uidiv+0xf8>
    253a:	4601      	mov	r1, r0
    253c:	4152      	adcs	r2, r2
    253e:	4610      	mov	r0, r2
    2540:	4770      	bx	lr
    2542:	e7ff      	b.n	2544 <__aeabi_uidiv+0x100>
    2544:	b501      	push	{r0, lr}
    2546:	2000      	movs	r0, #0
    2548:	f000 f80c 	bl	2564 <__aeabi_idiv0>
    254c:	bd02      	pop	{r1, pc}
    254e:	46c0      	nop			; (mov r8, r8)

00002550 <__aeabi_uidivmod>:
    2550:	2900      	cmp	r1, #0
    2552:	d0f7      	beq.n	2544 <__aeabi_uidiv+0x100>
    2554:	b503      	push	{r0, r1, lr}
    2556:	f7ff ff75 	bl	2444 <__aeabi_uidiv>
    255a:	bc0e      	pop	{r1, r2, r3}
    255c:	4342      	muls	r2, r0
    255e:	1a89      	subs	r1, r1, r2
    2560:	4718      	bx	r3
    2562:	46c0      	nop			; (mov r8, r8)

00002564 <__aeabi_idiv0>:
    2564:	4770      	bx	lr
    2566:	46c0      	nop			; (mov r8, r8)

00002568 <__libc_init_array>:
    2568:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <__libc_init_array+0x3c>)
    256a:	b570      	push	{r4, r5, r6, lr}
    256c:	2500      	movs	r5, #0
    256e:	1c1e      	adds	r6, r3, #0
    2570:	4c0d      	ldr	r4, [pc, #52]	; (25a8 <__libc_init_array+0x40>)
    2572:	1ae4      	subs	r4, r4, r3
    2574:	10a4      	asrs	r4, r4, #2
    2576:	42a5      	cmp	r5, r4
    2578:	d004      	beq.n	2584 <__libc_init_array+0x1c>
    257a:	00ab      	lsls	r3, r5, #2
    257c:	58f3      	ldr	r3, [r6, r3]
    257e:	4798      	blx	r3
    2580:	3501      	adds	r5, #1
    2582:	e7f8      	b.n	2576 <__libc_init_array+0xe>
    2584:	f000 f84e 	bl	2624 <_init>
    2588:	4b08      	ldr	r3, [pc, #32]	; (25ac <__libc_init_array+0x44>)
    258a:	2500      	movs	r5, #0
    258c:	1c1e      	adds	r6, r3, #0
    258e:	4c08      	ldr	r4, [pc, #32]	; (25b0 <__libc_init_array+0x48>)
    2590:	1ae4      	subs	r4, r4, r3
    2592:	10a4      	asrs	r4, r4, #2
    2594:	42a5      	cmp	r5, r4
    2596:	d004      	beq.n	25a2 <__libc_init_array+0x3a>
    2598:	00ab      	lsls	r3, r5, #2
    259a:	58f3      	ldr	r3, [r6, r3]
    259c:	4798      	blx	r3
    259e:	3501      	adds	r5, #1
    25a0:	e7f8      	b.n	2594 <__libc_init_array+0x2c>
    25a2:	bd70      	pop	{r4, r5, r6, pc}
    25a4:	00002630 	.word	0x00002630
    25a8:	00002630 	.word	0x00002630
    25ac:	00002630 	.word	0x00002630
    25b0:	00002634 	.word	0x00002634

000025b4 <memset>:
    25b4:	1c03      	adds	r3, r0, #0
    25b6:	1882      	adds	r2, r0, r2
    25b8:	4293      	cmp	r3, r2
    25ba:	d002      	beq.n	25c2 <memset+0xe>
    25bc:	7019      	strb	r1, [r3, #0]
    25be:	3301      	adds	r3, #1
    25c0:	e7fa      	b.n	25b8 <memset+0x4>
    25c2:	4770      	bx	lr
    25c4:	42000800 	.word	0x42000800
    25c8:	42000c00 	.word	0x42000c00
    25cc:	42001000 	.word	0x42001000
    25d0:	42001400 	.word	0x42001400
    25d4:	42001800 	.word	0x42001800
    25d8:	42001c00 	.word	0x42001c00
    25dc:	00001616 	.word	0x00001616
    25e0:	00001692 	.word	0x00001692
    25e4:	00001692 	.word	0x00001692
    25e8:	00001638 	.word	0x00001638
    25ec:	00001632 	.word	0x00001632
    25f0:	0000163e 	.word	0x0000163e
    25f4:	0000161c 	.word	0x0000161c
    25f8:	00001644 	.word	0x00001644
    25fc:	00001678 	.word	0x00001678
    2600:	0000176c 	.word	0x0000176c
    2604:	000017bc 	.word	0x000017bc
    2608:	000017bc 	.word	0x000017bc
    260c:	000017b8 	.word	0x000017b8
    2610:	0000175e 	.word	0x0000175e
    2614:	0000177e 	.word	0x0000177e
    2618:	0000174e 	.word	0x0000174e
    261c:	00001790 	.word	0x00001790
    2620:	000017a2 	.word	0x000017a2

00002624 <_init>:
    2624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	bcf8      	pop	{r3, r4, r5, r6, r7}
    262a:	bc08      	pop	{r3}
    262c:	469e      	mov	lr, r3
    262e:	4770      	bx	lr

00002630 <__init_array_start>:
    2630:	000000d9 	.word	0x000000d9

00002634 <_fini>:
    2634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	bcf8      	pop	{r3, r4, r5, r6, r7}
    263a:	bc08      	pop	{r3}
    263c:	469e      	mov	lr, r3
    263e:	4770      	bx	lr

00002640 <__fini_array_start>:
    2640:	000000b1 	.word	0x000000b1
