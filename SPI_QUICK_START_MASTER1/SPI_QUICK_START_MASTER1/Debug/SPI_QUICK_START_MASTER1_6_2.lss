
SPI_QUICK_START_MASTER1_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024e8  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000024e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  2000000c  000024f4  0001000c  2**2
                  ALLOC
  3 .stack        00002004  2000005c  00002544  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012e07  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001761  00000000  00000000  00022e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001594  00000000  00000000  000245f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000430  00000000  00000000  00025b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000380  00000000  00000000  00025fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017c1b  00000000  00000000  0002633b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000709c  00000000  00000000  0003df56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088a43  00000000  00000000  00044ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d98  00000000  00000000  000cda38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002060 	.word	0x20002060
       4:	00001e35 	.word	0x00001e35
       8:	00001f25 	.word	0x00001f25
       c:	00001f25 	.word	0x00001f25
	...
      2c:	00001f25 	.word	0x00001f25
	...
      38:	00001f25 	.word	0x00001f25
      3c:	00001f25 	.word	0x00001f25
      40:	00001f25 	.word	0x00001f25
      44:	00001f25 	.word	0x00001f25
      48:	00001f25 	.word	0x00001f25
      4c:	00001f25 	.word	0x00001f25
      50:	00001f25 	.word	0x00001f25
      54:	00001f25 	.word	0x00001f25
      58:	00001f25 	.word	0x00001f25
      5c:	00001f25 	.word	0x00001f25
      60:	00001f25 	.word	0x00001f25
      64:	00001f25 	.word	0x00001f25
      68:	00001f25 	.word	0x00001f25
      6c:	00001f25 	.word	0x00001f25
      70:	00001f25 	.word	0x00001f25
      74:	00001f25 	.word	0x00001f25
      78:	00001f25 	.word	0x00001f25
      7c:	00001f25 	.word	0x00001f25
      80:	00001f25 	.word	0x00001f25
      84:	00001f25 	.word	0x00001f25
      88:	00001f25 	.word	0x00001f25
      8c:	00001f25 	.word	0x00001f25
      90:	00001f25 	.word	0x00001f25
      94:	00001f25 	.word	0x00001f25
      98:	00001f25 	.word	0x00001f25
      9c:	00001f25 	.word	0x00001f25
      a0:	00001f25 	.word	0x00001f25
      a4:	00001f25 	.word	0x00001f25
      a8:	00001f25 	.word	0x00001f25
      ac:	00001f25 	.word	0x00001f25

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	2000000c 	.word	0x2000000c
      d0:	00000000 	.word	0x00000000
      d4:	000024e8 	.word	0x000024e8

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	000024e8 	.word	0x000024e8
     104:	20000010 	.word	0x20000010
     108:	000024e8 	.word	0x000024e8
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     116:	4b0f      	ldr	r3, [pc, #60]	; (154 <cpu_irq_enter_critical+0x44>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d112      	bne.n	144 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     11e:	f3ef 8310 	mrs	r3, PRIMASK
     122:	607b      	str	r3, [r7, #4]
  return(result);
     124:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     126:	2b00      	cmp	r3, #0
     128:	d109      	bne.n	13e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     12a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     12c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     130:	4b09      	ldr	r3, [pc, #36]	; (158 <cpu_irq_enter_critical+0x48>)
     132:	2200      	movs	r2, #0
     134:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <cpu_irq_enter_critical+0x4c>)
     138:	2201      	movs	r2, #1
     13a:	701a      	strb	r2, [r3, #0]
     13c:	e002      	b.n	144 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     13e:	4b07      	ldr	r3, [pc, #28]	; (15c <cpu_irq_enter_critical+0x4c>)
     140:	2200      	movs	r2, #0
     142:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     144:	4b03      	ldr	r3, [pc, #12]	; (154 <cpu_irq_enter_critical+0x44>)
     146:	681b      	ldr	r3, [r3, #0]
     148:	1c5a      	adds	r2, r3, #1
     14a:	4b02      	ldr	r3, [pc, #8]	; (154 <cpu_irq_enter_critical+0x44>)
     14c:	601a      	str	r2, [r3, #0]
}
     14e:	46bd      	mov	sp, r7
     150:	b002      	add	sp, #8
     152:	bd80      	pop	{r7, pc}
     154:	20000028 	.word	0x20000028
     158:	20000000 	.word	0x20000000
     15c:	2000002c 	.word	0x2000002c

00000160 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     160:	b580      	push	{r7, lr}
     162:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <cpu_irq_leave_critical+0x30>)
     166:	681b      	ldr	r3, [r3, #0]
     168:	1e5a      	subs	r2, r3, #1
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <cpu_irq_leave_critical+0x30>)
     16c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <cpu_irq_leave_critical+0x30>)
     170:	681b      	ldr	r3, [r3, #0]
     172:	2b00      	cmp	r3, #0
     174:	d10a      	bne.n	18c <cpu_irq_leave_critical+0x2c>
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <cpu_irq_leave_critical+0x34>)
     178:	781b      	ldrb	r3, [r3, #0]
     17a:	b2db      	uxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	d005      	beq.n	18c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     180:	4b05      	ldr	r3, [pc, #20]	; (198 <cpu_irq_leave_critical+0x38>)
     182:	2201      	movs	r2, #1
     184:	701a      	strb	r2, [r3, #0]
     186:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     18a:	b662      	cpsie	i
	}
}
     18c:	46bd      	mov	sp, r7
     18e:	bd80      	pop	{r7, pc}
     190:	20000028 	.word	0x20000028
     194:	2000002c 	.word	0x2000002c
     198:	20000000 	.word	0x20000000

0000019c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     19c:	b580      	push	{r7, lr}
     19e:	b084      	sub	sp, #16
     1a0:	af00      	add	r7, sp, #0
     1a2:	1c02      	adds	r2, r0, #0
     1a4:	1dfb      	adds	r3, r7, #7
     1a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1a8:	230f      	movs	r3, #15
     1aa:	18fb      	adds	r3, r7, r3
     1ac:	1dfa      	adds	r2, r7, #7
     1ae:	7812      	ldrb	r2, [r2, #0]
     1b0:	09d2      	lsrs	r2, r2, #7
     1b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1b4:	230e      	movs	r3, #14
     1b6:	18fb      	adds	r3, r7, r3
     1b8:	1dfa      	adds	r2, r7, #7
     1ba:	7812      	ldrb	r2, [r2, #0]
     1bc:	0952      	lsrs	r2, r2, #5
     1be:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1c0:	4b0d      	ldr	r3, [pc, #52]	; (1f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1c2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1c4:	230f      	movs	r3, #15
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	781b      	ldrb	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d10f      	bne.n	1ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     1ce:	230f      	movs	r3, #15
     1d0:	18fb      	adds	r3, r7, r3
     1d2:	781b      	ldrb	r3, [r3, #0]
     1d4:	009b      	lsls	r3, r3, #2
     1d6:	2210      	movs	r2, #16
     1d8:	4694      	mov	ip, r2
     1da:	44bc      	add	ip, r7
     1dc:	4463      	add	r3, ip
     1de:	3b08      	subs	r3, #8
     1e0:	681a      	ldr	r2, [r3, #0]
     1e2:	230e      	movs	r3, #14
     1e4:	18fb      	adds	r3, r7, r3
     1e6:	781b      	ldrb	r3, [r3, #0]
     1e8:	01db      	lsls	r3, r3, #7
     1ea:	18d3      	adds	r3, r2, r3
     1ec:	e000      	b.n	1f0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     1ee:	2300      	movs	r3, #0
	}
}
     1f0:	1c18      	adds	r0, r3, #0
     1f2:	46bd      	mov	sp, r7
     1f4:	b004      	add	sp, #16
     1f6:	bd80      	pop	{r7, pc}
     1f8:	41004400 	.word	0x41004400

000001fc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b082      	sub	sp, #8
     200:	af00      	add	r7, sp, #0
     202:	1c02      	adds	r2, r0, #0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     208:	1dfb      	adds	r3, r7, #7
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	1c18      	adds	r0, r3, #0
     20e:	4b03      	ldr	r3, [pc, #12]	; (21c <port_get_group_from_gpio_pin+0x20>)
     210:	4798      	blx	r3
     212:	1c03      	adds	r3, r0, #0
}
     214:	1c18      	adds	r0, r3, #0
     216:	46bd      	mov	sp, r7
     218:	b002      	add	sp, #8
     21a:	bd80      	pop	{r7, pc}
     21c:	0000019d 	.word	0x0000019d

00000220 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	2200      	movs	r2, #0
     22c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     22e:	687b      	ldr	r3, [r7, #4]
     230:	2201      	movs	r2, #1
     232:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2200      	movs	r2, #0
     238:	709a      	strb	r2, [r3, #2]
}
     23a:	46bd      	mov	sp, r7
     23c:	b002      	add	sp, #8
     23e:	bd80      	pop	{r7, pc}

00000240 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     240:	b580      	push	{r7, lr}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	1c02      	adds	r2, r0, #0
     248:	1dfb      	adds	r3, r7, #7
     24a:	701a      	strb	r2, [r3, #0]
     24c:	1dbb      	adds	r3, r7, #6
     24e:	1c0a      	adds	r2, r1, #0
     250:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     252:	1dfb      	adds	r3, r7, #7
     254:	781b      	ldrb	r3, [r3, #0]
     256:	1c18      	adds	r0, r3, #0
     258:	4b0c      	ldr	r3, [pc, #48]	; (28c <port_pin_set_output_level+0x4c>)
     25a:	4798      	blx	r3
     25c:	1c03      	adds	r3, r0, #0
     25e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     260:	1dfb      	adds	r3, r7, #7
     262:	781b      	ldrb	r3, [r3, #0]
     264:	221f      	movs	r2, #31
     266:	4013      	ands	r3, r2
     268:	2201      	movs	r2, #1
     26a:	409a      	lsls	r2, r3
     26c:	1c13      	adds	r3, r2, #0
     26e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     270:	1dbb      	adds	r3, r7, #6
     272:	781b      	ldrb	r3, [r3, #0]
     274:	2b00      	cmp	r3, #0
     276:	d003      	beq.n	280 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     278:	68fb      	ldr	r3, [r7, #12]
     27a:	68ba      	ldr	r2, [r7, #8]
     27c:	619a      	str	r2, [r3, #24]
     27e:	e002      	b.n	286 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     280:	68fb      	ldr	r3, [r7, #12]
     282:	68ba      	ldr	r2, [r7, #8]
     284:	615a      	str	r2, [r3, #20]
	}
}
     286:	46bd      	mov	sp, r7
     288:	b004      	add	sp, #16
     28a:	bd80      	pop	{r7, pc}
     28c:	000001fd 	.word	0x000001fd

00000290 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     290:	b580      	push	{r7, lr}
     292:	b082      	sub	sp, #8
     294:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     296:	1d3b      	adds	r3, r7, #4
     298:	1c18      	adds	r0, r3, #0
     29a:	4b0e      	ldr	r3, [pc, #56]	; (2d4 <system_board_init+0x44>)
     29c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     29e:	1d3b      	adds	r3, r7, #4
     2a0:	2201      	movs	r2, #1
     2a2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2a4:	1d3b      	adds	r3, r7, #4
     2a6:	203e      	movs	r0, #62	; 0x3e
     2a8:	1c19      	adds	r1, r3, #0
     2aa:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <system_board_init+0x48>)
     2ac:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     2ae:	203e      	movs	r0, #62	; 0x3e
     2b0:	2101      	movs	r1, #1
     2b2:	4b0a      	ldr	r3, [pc, #40]	; (2dc <system_board_init+0x4c>)
     2b4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2b6:	1d3b      	adds	r3, r7, #4
     2b8:	2200      	movs	r2, #0
     2ba:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2bc:	1d3b      	adds	r3, r7, #4
     2be:	2201      	movs	r2, #1
     2c0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2c2:	1d3b      	adds	r3, r7, #4
     2c4:	200f      	movs	r0, #15
     2c6:	1c19      	adds	r1, r3, #0
     2c8:	4b03      	ldr	r3, [pc, #12]	; (2d8 <system_board_init+0x48>)
     2ca:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     2cc:	46bd      	mov	sp, r7
     2ce:	b002      	add	sp, #8
     2d0:	bd80      	pop	{r7, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	00000221 	.word	0x00000221
     2d8:	00000309 	.word	0x00000309
     2dc:	00000241 	.word	0x00000241

000002e0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
     2e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	2280      	movs	r2, #128	; 0x80
     2ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	2200      	movs	r2, #0
     2f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	2201      	movs	r2, #1
     2f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	2200      	movs	r2, #0
     2fe:	70da      	strb	r2, [r3, #3]
}
     300:	46bd      	mov	sp, r7
     302:	b002      	add	sp, #8
     304:	bd80      	pop	{r7, pc}
     306:	46c0      	nop			; (mov r8, r8)

00000308 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     308:	b580      	push	{r7, lr}
     30a:	b084      	sub	sp, #16
     30c:	af00      	add	r7, sp, #0
     30e:	1c02      	adds	r2, r0, #0
     310:	6039      	str	r1, [r7, #0]
     312:	1dfb      	adds	r3, r7, #7
     314:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     316:	230c      	movs	r3, #12
     318:	18fb      	adds	r3, r7, r3
     31a:	1c18      	adds	r0, r3, #0
     31c:	4b0f      	ldr	r3, [pc, #60]	; (35c <port_pin_set_config+0x54>)
     31e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     320:	230c      	movs	r3, #12
     322:	18fb      	adds	r3, r7, r3
     324:	2280      	movs	r2, #128	; 0x80
     326:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     328:	683b      	ldr	r3, [r7, #0]
     32a:	781a      	ldrb	r2, [r3, #0]
     32c:	230c      	movs	r3, #12
     32e:	18fb      	adds	r3, r7, r3
     330:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     332:	683b      	ldr	r3, [r7, #0]
     334:	785a      	ldrb	r2, [r3, #1]
     336:	230c      	movs	r3, #12
     338:	18fb      	adds	r3, r7, r3
     33a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     33c:	683b      	ldr	r3, [r7, #0]
     33e:	789a      	ldrb	r2, [r3, #2]
     340:	230c      	movs	r3, #12
     342:	18fb      	adds	r3, r7, r3
     344:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     346:	1dfb      	adds	r3, r7, #7
     348:	781a      	ldrb	r2, [r3, #0]
     34a:	230c      	movs	r3, #12
     34c:	18fb      	adds	r3, r7, r3
     34e:	1c10      	adds	r0, r2, #0
     350:	1c19      	adds	r1, r3, #0
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <port_pin_set_config+0x58>)
     354:	4798      	blx	r3
}
     356:	46bd      	mov	sp, r7
     358:	b004      	add	sp, #16
     35a:	bd80      	pop	{r7, pc}
     35c:	000002e1 	.word	0x000002e1
     360:	00001db5 	.word	0x00001db5

00000364 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     36c:	687b      	ldr	r3, [r7, #4]
     36e:	2200      	movs	r2, #0
     370:	701a      	strb	r2, [r3, #0]
}
     372:	46bd      	mov	sp, r7
     374:	b002      	add	sp, #8
     376:	bd80      	pop	{r7, pc}

00000378 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     378:	b580      	push	{r7, lr}
     37a:	b086      	sub	sp, #24
     37c:	af00      	add	r7, sp, #0
     37e:	60f8      	str	r0, [r7, #12]
     380:	60b9      	str	r1, [r7, #8]
     382:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     384:	2316      	movs	r3, #22
     386:	18fb      	adds	r3, r7, r3
     388:	2200      	movs	r2, #0
     38a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     38c:	68bb      	ldr	r3, [r7, #8]
     38e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     390:	68bb      	ldr	r3, [r7, #8]
     392:	085a      	lsrs	r2, r3, #1
     394:	68fb      	ldr	r3, [r7, #12]
     396:	429a      	cmp	r2, r3
     398:	d201      	bcs.n	39e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     39a:	2340      	movs	r3, #64	; 0x40
     39c:	e026      	b.n	3ec <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     39e:	68bb      	ldr	r3, [r7, #8]
     3a0:	085b      	lsrs	r3, r3, #1
     3a2:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     3a4:	e00a      	b.n	3bc <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     3a6:	693a      	ldr	r2, [r7, #16]
     3a8:	68fb      	ldr	r3, [r7, #12]
     3aa:	1ad3      	subs	r3, r2, r3
     3ac:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3ae:	2316      	movs	r3, #22
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	881a      	ldrh	r2, [r3, #0]
     3b4:	2316      	movs	r3, #22
     3b6:	18fb      	adds	r3, r7, r3
     3b8:	3201      	adds	r2, #1
     3ba:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3bc:	693a      	ldr	r2, [r7, #16]
     3be:	68fb      	ldr	r3, [r7, #12]
     3c0:	429a      	cmp	r2, r3
     3c2:	d2f0      	bcs.n	3a6 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     3c4:	2316      	movs	r3, #22
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	2216      	movs	r2, #22
     3ca:	18ba      	adds	r2, r7, r2
     3cc:	8812      	ldrh	r2, [r2, #0]
     3ce:	3a01      	subs	r2, #1
     3d0:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3d2:	2316      	movs	r3, #22
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	881b      	ldrh	r3, [r3, #0]
     3d8:	2bff      	cmp	r3, #255	; 0xff
     3da:	d901      	bls.n	3e0 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3dc:	2340      	movs	r3, #64	; 0x40
     3de:	e005      	b.n	3ec <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	2216      	movs	r2, #22
     3e4:	18ba      	adds	r2, r7, r2
     3e6:	8812      	ldrh	r2, [r2, #0]
     3e8:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     3ea:	2300      	movs	r3, #0
	}
}
     3ec:	1c18      	adds	r0, r3, #0
     3ee:	46bd      	mov	sp, r7
     3f0:	b006      	add	sp, #24
     3f2:	bd80      	pop	{r7, pc}

000003f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3f4:	b580      	push	{r7, lr}
     3f6:	b084      	sub	sp, #16
     3f8:	af00      	add	r7, sp, #0
     3fa:	1c02      	adds	r2, r0, #0
     3fc:	1dfb      	adds	r3, r7, #7
     3fe:	701a      	strb	r2, [r3, #0]
     400:	1dbb      	adds	r3, r7, #6
     402:	1c0a      	adds	r2, r1, #0
     404:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     406:	4b1a      	ldr	r3, [pc, #104]	; (470 <sercom_set_gclk_generator+0x7c>)
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	2201      	movs	r2, #1
     40c:	4053      	eors	r3, r2
     40e:	b2db      	uxtb	r3, r3
     410:	2b00      	cmp	r3, #0
     412:	d103      	bne.n	41c <sercom_set_gclk_generator+0x28>
     414:	1dbb      	adds	r3, r7, #6
     416:	781b      	ldrb	r3, [r3, #0]
     418:	2b00      	cmp	r3, #0
     41a:	d01b      	beq.n	454 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     41c:	230c      	movs	r3, #12
     41e:	18fb      	adds	r3, r7, r3
     420:	1c18      	adds	r0, r3, #0
     422:	4b14      	ldr	r3, [pc, #80]	; (474 <sercom_set_gclk_generator+0x80>)
     424:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     426:	230c      	movs	r3, #12
     428:	18fb      	adds	r3, r7, r3
     42a:	1dfa      	adds	r2, r7, #7
     42c:	7812      	ldrb	r2, [r2, #0]
     42e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     430:	230c      	movs	r3, #12
     432:	18fb      	adds	r3, r7, r3
     434:	2013      	movs	r0, #19
     436:	1c19      	adds	r1, r3, #0
     438:	4b0f      	ldr	r3, [pc, #60]	; (478 <sercom_set_gclk_generator+0x84>)
     43a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     43c:	2013      	movs	r0, #19
     43e:	4b0f      	ldr	r3, [pc, #60]	; (47c <sercom_set_gclk_generator+0x88>)
     440:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     442:	4b0b      	ldr	r3, [pc, #44]	; (470 <sercom_set_gclk_generator+0x7c>)
     444:	1dfa      	adds	r2, r7, #7
     446:	7812      	ldrb	r2, [r2, #0]
     448:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     44a:	4b09      	ldr	r3, [pc, #36]	; (470 <sercom_set_gclk_generator+0x7c>)
     44c:	2201      	movs	r2, #1
     44e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     450:	2300      	movs	r3, #0
     452:	e008      	b.n	466 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     454:	4b06      	ldr	r3, [pc, #24]	; (470 <sercom_set_gclk_generator+0x7c>)
     456:	785b      	ldrb	r3, [r3, #1]
     458:	1dfa      	adds	r2, r7, #7
     45a:	7812      	ldrb	r2, [r2, #0]
     45c:	429a      	cmp	r2, r3
     45e:	d101      	bne.n	464 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     460:	2300      	movs	r3, #0
     462:	e000      	b.n	466 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     464:	231d      	movs	r3, #29
}
     466:	1c18      	adds	r0, r3, #0
     468:	46bd      	mov	sp, r7
     46a:	b004      	add	sp, #16
     46c:	bd80      	pop	{r7, pc}
     46e:	46c0      	nop			; (mov r8, r8)
     470:	20000030 	.word	0x20000030
     474:	00000365 	.word	0x00000365
     478:	00001ac9 	.word	0x00001ac9
     47c:	00001b0d 	.word	0x00001b0d

00000480 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     480:	b580      	push	{r7, lr}
     482:	b082      	sub	sp, #8
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	1c0a      	adds	r2, r1, #0
     48a:	1cfb      	adds	r3, r7, #3
     48c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     48e:	687b      	ldr	r3, [r7, #4]
     490:	4a4d      	ldr	r2, [pc, #308]	; (5c8 <_sercom_get_default_pad+0x148>)
     492:	4293      	cmp	r3, r2
     494:	d03f      	beq.n	516 <_sercom_get_default_pad+0x96>
     496:	4a4c      	ldr	r2, [pc, #304]	; (5c8 <_sercom_get_default_pad+0x148>)
     498:	4293      	cmp	r3, r2
     49a:	d806      	bhi.n	4aa <_sercom_get_default_pad+0x2a>
     49c:	4a4b      	ldr	r2, [pc, #300]	; (5cc <_sercom_get_default_pad+0x14c>)
     49e:	4293      	cmp	r3, r2
     4a0:	d00f      	beq.n	4c2 <_sercom_get_default_pad+0x42>
     4a2:	4a4b      	ldr	r2, [pc, #300]	; (5d0 <_sercom_get_default_pad+0x150>)
     4a4:	4293      	cmp	r3, r2
     4a6:	d021      	beq.n	4ec <_sercom_get_default_pad+0x6c>
     4a8:	e089      	b.n	5be <_sercom_get_default_pad+0x13e>
     4aa:	4a4a      	ldr	r2, [pc, #296]	; (5d4 <_sercom_get_default_pad+0x154>)
     4ac:	4293      	cmp	r3, r2
     4ae:	d100      	bne.n	4b2 <_sercom_get_default_pad+0x32>
     4b0:	e05b      	b.n	56a <_sercom_get_default_pad+0xea>
     4b2:	4a49      	ldr	r2, [pc, #292]	; (5d8 <_sercom_get_default_pad+0x158>)
     4b4:	4293      	cmp	r3, r2
     4b6:	d100      	bne.n	4ba <_sercom_get_default_pad+0x3a>
     4b8:	e06c      	b.n	594 <_sercom_get_default_pad+0x114>
     4ba:	4a48      	ldr	r2, [pc, #288]	; (5dc <_sercom_get_default_pad+0x15c>)
     4bc:	4293      	cmp	r3, r2
     4be:	d03f      	beq.n	540 <_sercom_get_default_pad+0xc0>
     4c0:	e07d      	b.n	5be <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4c2:	1cfb      	adds	r3, r7, #3
     4c4:	781b      	ldrb	r3, [r3, #0]
     4c6:	2b01      	cmp	r3, #1
     4c8:	d00a      	beq.n	4e0 <_sercom_get_default_pad+0x60>
     4ca:	dc02      	bgt.n	4d2 <_sercom_get_default_pad+0x52>
     4cc:	2b00      	cmp	r3, #0
     4ce:	d005      	beq.n	4dc <_sercom_get_default_pad+0x5c>
     4d0:	e075      	b.n	5be <_sercom_get_default_pad+0x13e>
     4d2:	2b02      	cmp	r3, #2
     4d4:	d006      	beq.n	4e4 <_sercom_get_default_pad+0x64>
     4d6:	2b03      	cmp	r3, #3
     4d8:	d006      	beq.n	4e8 <_sercom_get_default_pad+0x68>
     4da:	e070      	b.n	5be <_sercom_get_default_pad+0x13e>
     4dc:	4b40      	ldr	r3, [pc, #256]	; (5e0 <_sercom_get_default_pad+0x160>)
     4de:	e06f      	b.n	5c0 <_sercom_get_default_pad+0x140>
     4e0:	4b40      	ldr	r3, [pc, #256]	; (5e4 <_sercom_get_default_pad+0x164>)
     4e2:	e06d      	b.n	5c0 <_sercom_get_default_pad+0x140>
     4e4:	4b40      	ldr	r3, [pc, #256]	; (5e8 <_sercom_get_default_pad+0x168>)
     4e6:	e06b      	b.n	5c0 <_sercom_get_default_pad+0x140>
     4e8:	4b40      	ldr	r3, [pc, #256]	; (5ec <_sercom_get_default_pad+0x16c>)
     4ea:	e069      	b.n	5c0 <_sercom_get_default_pad+0x140>
     4ec:	1cfb      	adds	r3, r7, #3
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	2b01      	cmp	r3, #1
     4f2:	d00a      	beq.n	50a <_sercom_get_default_pad+0x8a>
     4f4:	dc02      	bgt.n	4fc <_sercom_get_default_pad+0x7c>
     4f6:	2b00      	cmp	r3, #0
     4f8:	d005      	beq.n	506 <_sercom_get_default_pad+0x86>
     4fa:	e060      	b.n	5be <_sercom_get_default_pad+0x13e>
     4fc:	2b02      	cmp	r3, #2
     4fe:	d006      	beq.n	50e <_sercom_get_default_pad+0x8e>
     500:	2b03      	cmp	r3, #3
     502:	d006      	beq.n	512 <_sercom_get_default_pad+0x92>
     504:	e05b      	b.n	5be <_sercom_get_default_pad+0x13e>
     506:	2303      	movs	r3, #3
     508:	e05a      	b.n	5c0 <_sercom_get_default_pad+0x140>
     50a:	4b39      	ldr	r3, [pc, #228]	; (5f0 <_sercom_get_default_pad+0x170>)
     50c:	e058      	b.n	5c0 <_sercom_get_default_pad+0x140>
     50e:	4b39      	ldr	r3, [pc, #228]	; (5f4 <_sercom_get_default_pad+0x174>)
     510:	e056      	b.n	5c0 <_sercom_get_default_pad+0x140>
     512:	4b39      	ldr	r3, [pc, #228]	; (5f8 <_sercom_get_default_pad+0x178>)
     514:	e054      	b.n	5c0 <_sercom_get_default_pad+0x140>
     516:	1cfb      	adds	r3, r7, #3
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	2b01      	cmp	r3, #1
     51c:	d00a      	beq.n	534 <_sercom_get_default_pad+0xb4>
     51e:	dc02      	bgt.n	526 <_sercom_get_default_pad+0xa6>
     520:	2b00      	cmp	r3, #0
     522:	d005      	beq.n	530 <_sercom_get_default_pad+0xb0>
     524:	e04b      	b.n	5be <_sercom_get_default_pad+0x13e>
     526:	2b02      	cmp	r3, #2
     528:	d006      	beq.n	538 <_sercom_get_default_pad+0xb8>
     52a:	2b03      	cmp	r3, #3
     52c:	d006      	beq.n	53c <_sercom_get_default_pad+0xbc>
     52e:	e046      	b.n	5be <_sercom_get_default_pad+0x13e>
     530:	4b32      	ldr	r3, [pc, #200]	; (5fc <_sercom_get_default_pad+0x17c>)
     532:	e045      	b.n	5c0 <_sercom_get_default_pad+0x140>
     534:	4b32      	ldr	r3, [pc, #200]	; (600 <_sercom_get_default_pad+0x180>)
     536:	e043      	b.n	5c0 <_sercom_get_default_pad+0x140>
     538:	4b32      	ldr	r3, [pc, #200]	; (604 <_sercom_get_default_pad+0x184>)
     53a:	e041      	b.n	5c0 <_sercom_get_default_pad+0x140>
     53c:	4b32      	ldr	r3, [pc, #200]	; (608 <_sercom_get_default_pad+0x188>)
     53e:	e03f      	b.n	5c0 <_sercom_get_default_pad+0x140>
     540:	1cfb      	adds	r3, r7, #3
     542:	781b      	ldrb	r3, [r3, #0]
     544:	2b01      	cmp	r3, #1
     546:	d00a      	beq.n	55e <_sercom_get_default_pad+0xde>
     548:	dc02      	bgt.n	550 <_sercom_get_default_pad+0xd0>
     54a:	2b00      	cmp	r3, #0
     54c:	d005      	beq.n	55a <_sercom_get_default_pad+0xda>
     54e:	e036      	b.n	5be <_sercom_get_default_pad+0x13e>
     550:	2b02      	cmp	r3, #2
     552:	d006      	beq.n	562 <_sercom_get_default_pad+0xe2>
     554:	2b03      	cmp	r3, #3
     556:	d006      	beq.n	566 <_sercom_get_default_pad+0xe6>
     558:	e031      	b.n	5be <_sercom_get_default_pad+0x13e>
     55a:	4b2c      	ldr	r3, [pc, #176]	; (60c <_sercom_get_default_pad+0x18c>)
     55c:	e030      	b.n	5c0 <_sercom_get_default_pad+0x140>
     55e:	4b2c      	ldr	r3, [pc, #176]	; (610 <_sercom_get_default_pad+0x190>)
     560:	e02e      	b.n	5c0 <_sercom_get_default_pad+0x140>
     562:	4b2c      	ldr	r3, [pc, #176]	; (614 <_sercom_get_default_pad+0x194>)
     564:	e02c      	b.n	5c0 <_sercom_get_default_pad+0x140>
     566:	4b2c      	ldr	r3, [pc, #176]	; (618 <_sercom_get_default_pad+0x198>)
     568:	e02a      	b.n	5c0 <_sercom_get_default_pad+0x140>
     56a:	1cfb      	adds	r3, r7, #3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	2b01      	cmp	r3, #1
     570:	d00a      	beq.n	588 <_sercom_get_default_pad+0x108>
     572:	dc02      	bgt.n	57a <_sercom_get_default_pad+0xfa>
     574:	2b00      	cmp	r3, #0
     576:	d005      	beq.n	584 <_sercom_get_default_pad+0x104>
     578:	e021      	b.n	5be <_sercom_get_default_pad+0x13e>
     57a:	2b02      	cmp	r3, #2
     57c:	d006      	beq.n	58c <_sercom_get_default_pad+0x10c>
     57e:	2b03      	cmp	r3, #3
     580:	d006      	beq.n	590 <_sercom_get_default_pad+0x110>
     582:	e01c      	b.n	5be <_sercom_get_default_pad+0x13e>
     584:	4b25      	ldr	r3, [pc, #148]	; (61c <_sercom_get_default_pad+0x19c>)
     586:	e01b      	b.n	5c0 <_sercom_get_default_pad+0x140>
     588:	4b25      	ldr	r3, [pc, #148]	; (620 <_sercom_get_default_pad+0x1a0>)
     58a:	e019      	b.n	5c0 <_sercom_get_default_pad+0x140>
     58c:	4b25      	ldr	r3, [pc, #148]	; (624 <_sercom_get_default_pad+0x1a4>)
     58e:	e017      	b.n	5c0 <_sercom_get_default_pad+0x140>
     590:	4b25      	ldr	r3, [pc, #148]	; (628 <_sercom_get_default_pad+0x1a8>)
     592:	e015      	b.n	5c0 <_sercom_get_default_pad+0x140>
     594:	1cfb      	adds	r3, r7, #3
     596:	781b      	ldrb	r3, [r3, #0]
     598:	2b01      	cmp	r3, #1
     59a:	d00a      	beq.n	5b2 <_sercom_get_default_pad+0x132>
     59c:	dc02      	bgt.n	5a4 <_sercom_get_default_pad+0x124>
     59e:	2b00      	cmp	r3, #0
     5a0:	d005      	beq.n	5ae <_sercom_get_default_pad+0x12e>
     5a2:	e00c      	b.n	5be <_sercom_get_default_pad+0x13e>
     5a4:	2b02      	cmp	r3, #2
     5a6:	d006      	beq.n	5b6 <_sercom_get_default_pad+0x136>
     5a8:	2b03      	cmp	r3, #3
     5aa:	d006      	beq.n	5ba <_sercom_get_default_pad+0x13a>
     5ac:	e007      	b.n	5be <_sercom_get_default_pad+0x13e>
     5ae:	4b1f      	ldr	r3, [pc, #124]	; (62c <_sercom_get_default_pad+0x1ac>)
     5b0:	e006      	b.n	5c0 <_sercom_get_default_pad+0x140>
     5b2:	4b1f      	ldr	r3, [pc, #124]	; (630 <_sercom_get_default_pad+0x1b0>)
     5b4:	e004      	b.n	5c0 <_sercom_get_default_pad+0x140>
     5b6:	4b1f      	ldr	r3, [pc, #124]	; (634 <_sercom_get_default_pad+0x1b4>)
     5b8:	e002      	b.n	5c0 <_sercom_get_default_pad+0x140>
     5ba:	4b1f      	ldr	r3, [pc, #124]	; (638 <_sercom_get_default_pad+0x1b8>)
     5bc:	e000      	b.n	5c0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     5be:	2300      	movs	r3, #0
}
     5c0:	1c18      	adds	r0, r3, #0
     5c2:	46bd      	mov	sp, r7
     5c4:	b002      	add	sp, #8
     5c6:	bd80      	pop	{r7, pc}
     5c8:	42001000 	.word	0x42001000
     5cc:	42000800 	.word	0x42000800
     5d0:	42000c00 	.word	0x42000c00
     5d4:	42001800 	.word	0x42001800
     5d8:	42001c00 	.word	0x42001c00
     5dc:	42001400 	.word	0x42001400
     5e0:	00040003 	.word	0x00040003
     5e4:	00050003 	.word	0x00050003
     5e8:	00060003 	.word	0x00060003
     5ec:	00070003 	.word	0x00070003
     5f0:	00010003 	.word	0x00010003
     5f4:	001e0003 	.word	0x001e0003
     5f8:	001f0003 	.word	0x001f0003
     5fc:	00080003 	.word	0x00080003
     600:	00090003 	.word	0x00090003
     604:	000a0003 	.word	0x000a0003
     608:	000b0003 	.word	0x000b0003
     60c:	00100003 	.word	0x00100003
     610:	00110003 	.word	0x00110003
     614:	00120003 	.word	0x00120003
     618:	00130003 	.word	0x00130003
     61c:	000c0003 	.word	0x000c0003
     620:	000d0003 	.word	0x000d0003
     624:	000e0003 	.word	0x000e0003
     628:	000f0003 	.word	0x000f0003
     62c:	00160003 	.word	0x00160003
     630:	00170003 	.word	0x00170003
     634:	00180003 	.word	0x00180003
     638:	00190003 	.word	0x00190003

0000063c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     63c:	b590      	push	{r4, r7, lr}
     63e:	b08b      	sub	sp, #44	; 0x2c
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     644:	230c      	movs	r3, #12
     646:	18fb      	adds	r3, r7, r3
     648:	4a0e      	ldr	r2, [pc, #56]	; (684 <_sercom_get_sercom_inst_index+0x48>)
     64a:	ca13      	ldmia	r2!, {r0, r1, r4}
     64c:	c313      	stmia	r3!, {r0, r1, r4}
     64e:	ca13      	ldmia	r2!, {r0, r1, r4}
     650:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     652:	2300      	movs	r3, #0
     654:	627b      	str	r3, [r7, #36]	; 0x24
     656:	e00d      	b.n	674 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     658:	687b      	ldr	r3, [r7, #4]
     65a:	220c      	movs	r2, #12
     65c:	18ba      	adds	r2, r7, r2
     65e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     660:	0089      	lsls	r1, r1, #2
     662:	588a      	ldr	r2, [r1, r2]
     664:	4293      	cmp	r3, r2
     666:	d102      	bne.n	66e <_sercom_get_sercom_inst_index+0x32>
			return i;
     668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     66a:	b2db      	uxtb	r3, r3
     66c:	e006      	b.n	67c <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     670:	3301      	adds	r3, #1
     672:	627b      	str	r3, [r7, #36]	; 0x24
     674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     676:	2b05      	cmp	r3, #5
     678:	d9ee      	bls.n	658 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     67a:	2300      	movs	r3, #0
}
     67c:	1c18      	adds	r0, r3, #0
     67e:	46bd      	mov	sp, r7
     680:	b00b      	add	sp, #44	; 0x2c
     682:	bd90      	pop	{r4, r7, pc}
     684:	00002468 	.word	0x00002468

00000688 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     688:	b580      	push	{r7, lr}
     68a:	b082      	sub	sp, #8
     68c:	af00      	add	r7, sp, #0
     68e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     690:	687b      	ldr	r3, [r7, #4]
     692:	2280      	movs	r2, #128	; 0x80
     694:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     696:	687b      	ldr	r3, [r7, #4]
     698:	2200      	movs	r2, #0
     69a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	2201      	movs	r2, #1
     6a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2200      	movs	r2, #0
     6a6:	70da      	strb	r2, [r3, #3]
}
     6a8:	46bd      	mov	sp, r7
     6aa:	b002      	add	sp, #8
     6ac:	bd80      	pop	{r7, pc}
     6ae:	46c0      	nop			; (mov r8, r8)

000006b0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b084      	sub	sp, #16
     6b4:	af00      	add	r7, sp, #0
     6b6:	1c02      	adds	r2, r0, #0
     6b8:	1dfb      	adds	r3, r7, #7
     6ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     6bc:	230f      	movs	r3, #15
     6be:	18fb      	adds	r3, r7, r3
     6c0:	1dfa      	adds	r2, r7, #7
     6c2:	7812      	ldrb	r2, [r2, #0]
     6c4:	09d2      	lsrs	r2, r2, #7
     6c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     6c8:	230e      	movs	r3, #14
     6ca:	18fb      	adds	r3, r7, r3
     6cc:	1dfa      	adds	r2, r7, #7
     6ce:	7812      	ldrb	r2, [r2, #0]
     6d0:	0952      	lsrs	r2, r2, #5
     6d2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     6d4:	4b0d      	ldr	r3, [pc, #52]	; (70c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     6d6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     6d8:	230f      	movs	r3, #15
     6da:	18fb      	adds	r3, r7, r3
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	2b00      	cmp	r3, #0
     6e0:	d10f      	bne.n	702 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     6e2:	230f      	movs	r3, #15
     6e4:	18fb      	adds	r3, r7, r3
     6e6:	781b      	ldrb	r3, [r3, #0]
     6e8:	009b      	lsls	r3, r3, #2
     6ea:	2210      	movs	r2, #16
     6ec:	4694      	mov	ip, r2
     6ee:	44bc      	add	ip, r7
     6f0:	4463      	add	r3, ip
     6f2:	3b08      	subs	r3, #8
     6f4:	681a      	ldr	r2, [r3, #0]
     6f6:	230e      	movs	r3, #14
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	781b      	ldrb	r3, [r3, #0]
     6fc:	01db      	lsls	r3, r3, #7
     6fe:	18d3      	adds	r3, r2, r3
     700:	e000      	b.n	704 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     702:	2300      	movs	r3, #0
	}
}
     704:	1c18      	adds	r0, r3, #0
     706:	46bd      	mov	sp, r7
     708:	b004      	add	sp, #16
     70a:	bd80      	pop	{r7, pc}
     70c:	41004400 	.word	0x41004400

00000710 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     710:	b580      	push	{r7, lr}
     712:	b086      	sub	sp, #24
     714:	af00      	add	r7, sp, #0
     716:	1c02      	adds	r2, r0, #0
     718:	1dfb      	adds	r3, r7, #7
     71a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     71c:	1dfb      	adds	r3, r7, #7
     71e:	781b      	ldrb	r3, [r3, #0]
     720:	1c18      	adds	r0, r3, #0
     722:	4b19      	ldr	r3, [pc, #100]	; (788 <system_pinmux_pin_get_mux_position+0x78>)
     724:	4798      	blx	r3
     726:	1c03      	adds	r3, r0, #0
     728:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     72a:	1dfb      	adds	r3, r7, #7
     72c:	781b      	ldrb	r3, [r3, #0]
     72e:	221f      	movs	r2, #31
     730:	4013      	ands	r3, r2
     732:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     734:	697a      	ldr	r2, [r7, #20]
     736:	2140      	movs	r1, #64	; 0x40
     738:	693b      	ldr	r3, [r7, #16]
     73a:	18d3      	adds	r3, r2, r3
     73c:	185b      	adds	r3, r3, r1
     73e:	781b      	ldrb	r3, [r3, #0]
     740:	b2db      	uxtb	r3, r3
     742:	1c1a      	adds	r2, r3, #0
     744:	2301      	movs	r3, #1
     746:	4013      	ands	r3, r2
     748:	d101      	bne.n	74e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     74a:	2380      	movs	r3, #128	; 0x80
     74c:	e017      	b.n	77e <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     74e:	693b      	ldr	r3, [r7, #16]
     750:	085b      	lsrs	r3, r3, #1
     752:	697a      	ldr	r2, [r7, #20]
     754:	2130      	movs	r1, #48	; 0x30
     756:	18d3      	adds	r3, r2, r3
     758:	185b      	adds	r3, r3, r1
     75a:	781b      	ldrb	r3, [r3, #0]
     75c:	b2db      	uxtb	r3, r3
     75e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     760:	693b      	ldr	r3, [r7, #16]
     762:	2201      	movs	r2, #1
     764:	4013      	ands	r3, r2
     766:	d005      	beq.n	774 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     768:	68fb      	ldr	r3, [r7, #12]
     76a:	22f0      	movs	r2, #240	; 0xf0
     76c:	4013      	ands	r3, r2
     76e:	091b      	lsrs	r3, r3, #4
     770:	b2db      	uxtb	r3, r3
     772:	e004      	b.n	77e <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     774:	68fb      	ldr	r3, [r7, #12]
     776:	b2db      	uxtb	r3, r3
     778:	220f      	movs	r2, #15
     77a:	4013      	ands	r3, r2
     77c:	b2db      	uxtb	r3, r3
	}
}
     77e:	1c18      	adds	r0, r3, #0
     780:	46bd      	mov	sp, r7
     782:	b006      	add	sp, #24
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	000006b1 	.word	0x000006b1

0000078c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	1c02      	adds	r2, r0, #0
     794:	1dfb      	adds	r3, r7, #7
     796:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     798:	1dfb      	adds	r3, r7, #7
     79a:	781b      	ldrb	r3, [r3, #0]
     79c:	1c18      	adds	r0, r3, #0
     79e:	4b03      	ldr	r3, [pc, #12]	; (7ac <port_get_group_from_gpio_pin+0x20>)
     7a0:	4798      	blx	r3
     7a2:	1c03      	adds	r3, r0, #0
}
     7a4:	1c18      	adds	r0, r3, #0
     7a6:	46bd      	mov	sp, r7
     7a8:	b002      	add	sp, #8
     7aa:	bd80      	pop	{r7, pc}
     7ac:	000006b1 	.word	0x000006b1

000007b0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b084      	sub	sp, #16
     7b4:	af00      	add	r7, sp, #0
     7b6:	1c02      	adds	r2, r0, #0
     7b8:	1dfb      	adds	r3, r7, #7
     7ba:	701a      	strb	r2, [r3, #0]
     7bc:	1dbb      	adds	r3, r7, #6
     7be:	1c0a      	adds	r2, r1, #0
     7c0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     7c2:	1dfb      	adds	r3, r7, #7
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	1c18      	adds	r0, r3, #0
     7c8:	4b0c      	ldr	r3, [pc, #48]	; (7fc <port_pin_set_output_level+0x4c>)
     7ca:	4798      	blx	r3
     7cc:	1c03      	adds	r3, r0, #0
     7ce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d0:	1dfb      	adds	r3, r7, #7
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	221f      	movs	r2, #31
     7d6:	4013      	ands	r3, r2
     7d8:	2201      	movs	r2, #1
     7da:	409a      	lsls	r2, r3
     7dc:	1c13      	adds	r3, r2, #0
     7de:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     7e0:	1dbb      	adds	r3, r7, #6
     7e2:	781b      	ldrb	r3, [r3, #0]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d003      	beq.n	7f0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     7e8:	68fb      	ldr	r3, [r7, #12]
     7ea:	68ba      	ldr	r2, [r7, #8]
     7ec:	619a      	str	r2, [r3, #24]
     7ee:	e002      	b.n	7f6 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     7f0:	68fb      	ldr	r3, [r7, #12]
     7f2:	68ba      	ldr	r2, [r7, #8]
     7f4:	615a      	str	r2, [r3, #20]
	}
}
     7f6:	46bd      	mov	sp, r7
     7f8:	b004      	add	sp, #16
     7fa:	bd80      	pop	{r7, pc}
     7fc:	0000078d 	.word	0x0000078d

00000800 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     800:	b580      	push	{r7, lr}
     802:	b082      	sub	sp, #8
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	2200      	movs	r2, #0
     80c:	701a      	strb	r2, [r3, #0]
}
     80e:	46bd      	mov	sp, r7
     810:	b002      	add	sp, #8
     812:	bd80      	pop	{r7, pc}

00000814 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     814:	b580      	push	{r7, lr}
     816:	b082      	sub	sp, #8
     818:	af00      	add	r7, sp, #0
     81a:	1c02      	adds	r2, r0, #0
     81c:	6039      	str	r1, [r7, #0]
     81e:	1dfb      	adds	r3, r7, #7
     820:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     822:	1dfb      	adds	r3, r7, #7
     824:	781b      	ldrb	r3, [r3, #0]
     826:	2b01      	cmp	r3, #1
     828:	d00a      	beq.n	840 <system_apb_clock_set_mask+0x2c>
     82a:	2b02      	cmp	r3, #2
     82c:	d00f      	beq.n	84e <system_apb_clock_set_mask+0x3a>
     82e:	2b00      	cmp	r3, #0
     830:	d114      	bne.n	85c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     832:	4b0e      	ldr	r3, [pc, #56]	; (86c <system_apb_clock_set_mask+0x58>)
     834:	4a0d      	ldr	r2, [pc, #52]	; (86c <system_apb_clock_set_mask+0x58>)
     836:	6991      	ldr	r1, [r2, #24]
     838:	683a      	ldr	r2, [r7, #0]
     83a:	430a      	orrs	r2, r1
     83c:	619a      	str	r2, [r3, #24]
			break;
     83e:	e00f      	b.n	860 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     840:	4b0a      	ldr	r3, [pc, #40]	; (86c <system_apb_clock_set_mask+0x58>)
     842:	4a0a      	ldr	r2, [pc, #40]	; (86c <system_apb_clock_set_mask+0x58>)
     844:	69d1      	ldr	r1, [r2, #28]
     846:	683a      	ldr	r2, [r7, #0]
     848:	430a      	orrs	r2, r1
     84a:	61da      	str	r2, [r3, #28]
			break;
     84c:	e008      	b.n	860 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <system_apb_clock_set_mask+0x58>)
     850:	4a06      	ldr	r2, [pc, #24]	; (86c <system_apb_clock_set_mask+0x58>)
     852:	6a11      	ldr	r1, [r2, #32]
     854:	683a      	ldr	r2, [r7, #0]
     856:	430a      	orrs	r2, r1
     858:	621a      	str	r2, [r3, #32]
			break;
     85a:	e001      	b.n	860 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     85c:	2317      	movs	r3, #23
     85e:	e000      	b.n	862 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     860:	2300      	movs	r3, #0
}
     862:	1c18      	adds	r0, r3, #0
     864:	46bd      	mov	sp, r7
     866:	b002      	add	sp, #8
     868:	bd80      	pop	{r7, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	40000400 	.word	0x40000400

00000870 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     870:	b580      	push	{r7, lr}
     872:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     874:	4b05      	ldr	r3, [pc, #20]	; (88c <system_is_debugger_present+0x1c>)
     876:	789b      	ldrb	r3, [r3, #2]
     878:	b2db      	uxtb	r3, r3
     87a:	1c1a      	adds	r2, r3, #0
     87c:	2302      	movs	r3, #2
     87e:	4013      	ands	r3, r2
     880:	1e5a      	subs	r2, r3, #1
     882:	4193      	sbcs	r3, r2
     884:	b2db      	uxtb	r3, r3
}
     886:	1c18      	adds	r0, r3, #0
     888:	46bd      	mov	sp, r7
     88a:	bd80      	pop	{r7, pc}
     88c:	41002000 	.word	0x41002000

00000890 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     890:	b580      	push	{r7, lr}
     892:	b084      	sub	sp, #16
     894:	af00      	add	r7, sp, #0
     896:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     898:	687b      	ldr	r3, [r7, #4]
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	69db      	ldr	r3, [r3, #28]
     8a2:	1e5a      	subs	r2, r3, #1
     8a4:	4193      	sbcs	r3, r2
     8a6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     8a8:	1c18      	adds	r0, r3, #0
     8aa:	46bd      	mov	sp, r7
     8ac:	b004      	add	sp, #16
     8ae:	bd80      	pop	{r7, pc}

000008b0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b084      	sub	sp, #16
     8b4:	af00      	add	r7, sp, #0
     8b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	1c18      	adds	r0, r3, #0
     8c4:	4b06      	ldr	r3, [pc, #24]	; (8e0 <spi_enable+0x30>)
     8c6:	4798      	blx	r3
     8c8:	1e03      	subs	r3, r0, #0
     8ca:	d1f9      	bne.n	8c0 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     8cc:	68fb      	ldr	r3, [r7, #12]
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	2202      	movs	r2, #2
     8d2:	431a      	orrs	r2, r3
     8d4:	68fb      	ldr	r3, [r7, #12]
     8d6:	601a      	str	r2, [r3, #0]
}
     8d8:	46bd      	mov	sp, r7
     8da:	b004      	add	sp, #16
     8dc:	bd80      	pop	{r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000891 	.word	0x00000891

000008e4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     8e4:	b580      	push	{r7, lr}
     8e6:	b084      	sub	sp, #16
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8ec:	687b      	ldr	r3, [r7, #4]
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	1c18      	adds	r0, r3, #0
     8f8:	4b06      	ldr	r3, [pc, #24]	; (914 <spi_disable+0x30>)
     8fa:	4798      	blx	r3
     8fc:	1e03      	subs	r3, r0, #0
     8fe:	d1f9      	bne.n	8f4 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     900:	68fb      	ldr	r3, [r7, #12]
     902:	681b      	ldr	r3, [r3, #0]
     904:	2202      	movs	r2, #2
     906:	4393      	bics	r3, r2
     908:	1c1a      	adds	r2, r3, #0
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	601a      	str	r2, [r3, #0]
}
     90e:	46bd      	mov	sp, r7
     910:	b004      	add	sp, #16
     912:	bd80      	pop	{r7, pc}
     914:	00000891 	.word	0x00000891

00000918 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     918:	b580      	push	{r7, lr}
     91a:	b084      	sub	sp, #16
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     920:	687b      	ldr	r3, [r7, #4]
     922:	681b      	ldr	r3, [r3, #0]
     924:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     926:	68fb      	ldr	r3, [r7, #12]
     928:	7e1b      	ldrb	r3, [r3, #24]
     92a:	b2db      	uxtb	r3, r3
     92c:	1c1a      	adds	r2, r3, #0
     92e:	2302      	movs	r3, #2
     930:	4013      	ands	r3, r2
     932:	1e5a      	subs	r2, r3, #1
     934:	4193      	sbcs	r3, r2
     936:	b2db      	uxtb	r3, r3
}
     938:	1c18      	adds	r0, r3, #0
     93a:	46bd      	mov	sp, r7
     93c:	b004      	add	sp, #16
     93e:	bd80      	pop	{r7, pc}

00000940 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     940:	b580      	push	{r7, lr}
     942:	b084      	sub	sp, #16
     944:	af00      	add	r7, sp, #0
     946:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     948:	687b      	ldr	r3, [r7, #4]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     94e:	68fb      	ldr	r3, [r7, #12]
     950:	7e1b      	ldrb	r3, [r3, #24]
     952:	b2db      	uxtb	r3, r3
     954:	1c1a      	adds	r2, r3, #0
     956:	2301      	movs	r3, #1
     958:	4013      	ands	r3, r2
     95a:	1e5a      	subs	r2, r3, #1
     95c:	4193      	sbcs	r3, r2
     95e:	b2db      	uxtb	r3, r3
}
     960:	1c18      	adds	r0, r3, #0
     962:	46bd      	mov	sp, r7
     964:	b004      	add	sp, #16
     966:	bd80      	pop	{r7, pc}

00000968 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     968:	b580      	push	{r7, lr}
     96a:	b084      	sub	sp, #16
     96c:	af00      	add	r7, sp, #0
     96e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     970:	687b      	ldr	r3, [r7, #4]
     972:	681b      	ldr	r3, [r3, #0]
     974:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     976:	68fb      	ldr	r3, [r7, #12]
     978:	7e1b      	ldrb	r3, [r3, #24]
     97a:	b2db      	uxtb	r3, r3
     97c:	1c1a      	adds	r2, r3, #0
     97e:	2304      	movs	r3, #4
     980:	4013      	ands	r3, r2
     982:	1e5a      	subs	r2, r3, #1
     984:	4193      	sbcs	r3, r2
     986:	b2db      	uxtb	r3, r3
}
     988:	1c18      	adds	r0, r3, #0
     98a:	46bd      	mov	sp, r7
     98c:	b004      	add	sp, #16
     98e:	bd80      	pop	{r7, pc}

00000990 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     990:	b580      	push	{r7, lr}
     992:	b084      	sub	sp, #16
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
     998:	1c0a      	adds	r2, r1, #0
     99a:	1cbb      	adds	r3, r7, #2
     99c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	1c18      	adds	r0, r3, #0
     9a8:	4b0a      	ldr	r3, [pc, #40]	; (9d4 <spi_write+0x44>)
     9aa:	4798      	blx	r3
     9ac:	1c03      	adds	r3, r0, #0
     9ae:	1c1a      	adds	r2, r3, #0
     9b0:	2301      	movs	r3, #1
     9b2:	4053      	eors	r3, r2
     9b4:	b2db      	uxtb	r3, r3
     9b6:	2b00      	cmp	r3, #0
     9b8:	d001      	beq.n	9be <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     9ba:	2305      	movs	r3, #5
     9bc:	e006      	b.n	9cc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     9be:	1cbb      	adds	r3, r7, #2
     9c0:	881b      	ldrh	r3, [r3, #0]
     9c2:	05db      	lsls	r3, r3, #23
     9c4:	0dda      	lsrs	r2, r3, #23
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     9ca:	2300      	movs	r3, #0
}
     9cc:	1c18      	adds	r0, r3, #0
     9ce:	46bd      	mov	sp, r7
     9d0:	b004      	add	sp, #16
     9d2:	bd80      	pop	{r7, pc}
     9d4:	00000941 	.word	0x00000941

000009d8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     9d8:	b580      	push	{r7, lr}
     9da:	b084      	sub	sp, #16
     9dc:	af00      	add	r7, sp, #0
     9de:	6078      	str	r0, [r7, #4]
     9e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9e2:	687b      	ldr	r3, [r7, #4]
     9e4:	681b      	ldr	r3, [r3, #0]
     9e6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	1c18      	adds	r0, r3, #0
     9ec:	4b1d      	ldr	r3, [pc, #116]	; (a64 <spi_read+0x8c>)
     9ee:	4798      	blx	r3
     9f0:	1c03      	adds	r3, r0, #0
     9f2:	1c1a      	adds	r2, r3, #0
     9f4:	2301      	movs	r3, #1
     9f6:	4053      	eors	r3, r2
     9f8:	b2db      	uxtb	r3, r3
     9fa:	2b00      	cmp	r3, #0
     9fc:	d001      	beq.n	a02 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     9fe:	2310      	movs	r3, #16
     a00:	e02c      	b.n	a5c <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     a02:	230f      	movs	r3, #15
     a04:	18fb      	adds	r3, r7, r3
     a06:	2200      	movs	r2, #0
     a08:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	8b5b      	ldrh	r3, [r3, #26]
     a0e:	b29b      	uxth	r3, r3
     a10:	1c1a      	adds	r2, r3, #0
     a12:	2304      	movs	r3, #4
     a14:	4013      	ands	r3, r2
     a16:	d00b      	beq.n	a30 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     a18:	230f      	movs	r3, #15
     a1a:	18fb      	adds	r3, r7, r3
     a1c:	221e      	movs	r2, #30
     a1e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     a20:	68bb      	ldr	r3, [r7, #8]
     a22:	8b5b      	ldrh	r3, [r3, #26]
     a24:	b29b      	uxth	r3, r3
     a26:	2204      	movs	r2, #4
     a28:	4313      	orrs	r3, r2
     a2a:	b29a      	uxth	r2, r3
     a2c:	68bb      	ldr	r3, [r7, #8]
     a2e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	799b      	ldrb	r3, [r3, #6]
     a34:	2b01      	cmp	r3, #1
     a36:	d108      	bne.n	a4a <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a38:	68bb      	ldr	r3, [r7, #8]
     a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a3c:	b29b      	uxth	r3, r3
     a3e:	05db      	lsls	r3, r3, #23
     a40:	0ddb      	lsrs	r3, r3, #23
     a42:	b29a      	uxth	r2, r3
     a44:	683b      	ldr	r3, [r7, #0]
     a46:	801a      	strh	r2, [r3, #0]
     a48:	e005      	b.n	a56 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a4a:	68bb      	ldr	r3, [r7, #8]
     a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a4e:	b2db      	uxtb	r3, r3
     a50:	b29a      	uxth	r2, r3
     a52:	683b      	ldr	r3, [r7, #0]
     a54:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     a56:	230f      	movs	r3, #15
     a58:	18fb      	adds	r3, r7, r3
     a5a:	781b      	ldrb	r3, [r3, #0]
}
     a5c:	1c18      	adds	r0, r3, #0
     a5e:	46bd      	mov	sp, r7
     a60:	b004      	add	sp, #16
     a62:	bd80      	pop	{r7, pc}
     a64:	00000969 	.word	0x00000969

00000a68 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
     a68:	b590      	push	{r4, r7, lr}
     a6a:	b089      	sub	sp, #36	; 0x24
     a6c:	af00      	add	r7, sp, #0
     a6e:	6078      	str	r0, [r7, #4]
     a70:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
     a72:	230c      	movs	r3, #12
     a74:	18fb      	adds	r3, r7, r3
     a76:	2200      	movs	r2, #0
     a78:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     a7a:	687b      	ldr	r3, [r7, #4]
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	1c18      	adds	r0, r3, #0
     a84:	4b25      	ldr	r3, [pc, #148]	; (b1c <spi_set_baudrate+0xb4>)
     a86:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     a88:	46c0      	nop			; (mov r8, r8)
     a8a:	687b      	ldr	r3, [r7, #4]
     a8c:	1c18      	adds	r0, r3, #0
     a8e:	4b24      	ldr	r3, [pc, #144]	; (b20 <spi_set_baudrate+0xb8>)
     a90:	4798      	blx	r3
     a92:	1e03      	subs	r3, r0, #0
     a94:	d1f9      	bne.n	a8a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a96:	687b      	ldr	r3, [r7, #4]
     a98:	681b      	ldr	r3, [r3, #0]
     a9a:	1c18      	adds	r0, r3, #0
     a9c:	4b21      	ldr	r3, [pc, #132]	; (b24 <spi_set_baudrate+0xbc>)
     a9e:	4798      	blx	r3
     aa0:	1c03      	adds	r3, r0, #0
     aa2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aa4:	69bb      	ldr	r3, [r7, #24]
     aa6:	3314      	adds	r3, #20
     aa8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     aaa:	697b      	ldr	r3, [r7, #20]
     aac:	b2db      	uxtb	r3, r3
     aae:	1c18      	adds	r0, r3, #0
     ab0:	4b1d      	ldr	r3, [pc, #116]	; (b28 <spi_set_baudrate+0xc0>)
     ab2:	4798      	blx	r3
     ab4:	1c03      	adds	r3, r0, #0
     ab6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
     ab8:	230f      	movs	r3, #15
     aba:	18fc      	adds	r4, r7, r3
     abc:	6839      	ldr	r1, [r7, #0]
     abe:	693a      	ldr	r2, [r7, #16]
     ac0:	230c      	movs	r3, #12
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	1c08      	adds	r0, r1, #0
     ac6:	1c11      	adds	r1, r2, #0
     ac8:	1c1a      	adds	r2, r3, #0
     aca:	4b18      	ldr	r3, [pc, #96]	; (b2c <spi_set_baudrate+0xc4>)
     acc:	4798      	blx	r3
     ace:	1c03      	adds	r3, r0, #0
     ad0:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
     ad2:	230f      	movs	r3, #15
     ad4:	18fb      	adds	r3, r7, r3
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	2b00      	cmp	r3, #0
     ada:	d001      	beq.n	ae0 <spi_set_baudrate+0x78>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
     adc:	2317      	movs	r3, #23
     ade:	e018      	b.n	b12 <spi_set_baudrate+0xaa>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
     ae0:	230c      	movs	r3, #12
     ae2:	18fb      	adds	r3, r7, r3
     ae4:	881b      	ldrh	r3, [r3, #0]
     ae6:	b2da      	uxtb	r2, r3
     ae8:	69fb      	ldr	r3, [r7, #28]
     aea:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
     aec:	46c0      	nop			; (mov r8, r8)
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	1c18      	adds	r0, r3, #0
     af2:	4b0b      	ldr	r3, [pc, #44]	; (b20 <spi_set_baudrate+0xb8>)
     af4:	4798      	blx	r3
     af6:	1e03      	subs	r3, r0, #0
     af8:	d1f9      	bne.n	aee <spi_set_baudrate+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
     afa:	687b      	ldr	r3, [r7, #4]
     afc:	1c18      	adds	r0, r3, #0
     afe:	4b0c      	ldr	r3, [pc, #48]	; (b30 <spi_set_baudrate+0xc8>)
     b00:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	687b      	ldr	r3, [r7, #4]
     b06:	1c18      	adds	r0, r3, #0
     b08:	4b05      	ldr	r3, [pc, #20]	; (b20 <spi_set_baudrate+0xb8>)
     b0a:	4798      	blx	r3
     b0c:	1e03      	subs	r3, r0, #0
     b0e:	d1f9      	bne.n	b04 <spi_set_baudrate+0x9c>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
     b10:	2300      	movs	r3, #0
}
     b12:	1c18      	adds	r0, r3, #0
     b14:	46bd      	mov	sp, r7
     b16:	b009      	add	sp, #36	; 0x24
     b18:	bd90      	pop	{r4, r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	000008e5 	.word	0x000008e5
     b20:	00000891 	.word	0x00000891
     b24:	0000063d 	.word	0x0000063d
     b28:	00001bed 	.word	0x00001bed
     b2c:	00000379 	.word	0x00000379
     b30:	000008b1 	.word	0x000008b1

00000b34 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     b34:	b590      	push	{r4, r7, lr}
     b36:	b093      	sub	sp, #76	; 0x4c
     b38:	af00      	add	r7, sp, #0
     b3a:	6078      	str	r0, [r7, #4]
     b3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b3e:	687b      	ldr	r3, [r7, #4]
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     b44:	687b      	ldr	r3, [r7, #4]
     b46:	681b      	ldr	r3, [r3, #0]
     b48:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     b4a:	231c      	movs	r3, #28
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	1c18      	adds	r0, r3, #0
     b50:	4b76      	ldr	r3, [pc, #472]	; (d2c <_spi_set_config+0x1f8>)
     b52:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b54:	231c      	movs	r3, #28
     b56:	18fb      	adds	r3, r7, r3
     b58:	2200      	movs	r2, #0
     b5a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     b5c:	683b      	ldr	r3, [r7, #0]
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b00      	cmp	r3, #0
     b62:	d103      	bne.n	b6c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b64:	231c      	movs	r3, #28
     b66:	18fb      	adds	r3, r7, r3
     b68:	2200      	movs	r2, #0
     b6a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     b6c:	683b      	ldr	r3, [r7, #0]
     b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     b70:	230c      	movs	r3, #12
     b72:	18fb      	adds	r3, r7, r3
     b74:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     b76:	683b      	ldr	r3, [r7, #0]
     b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     b7a:	230c      	movs	r3, #12
     b7c:	18fb      	adds	r3, r7, r3
     b7e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     b80:	683b      	ldr	r3, [r7, #0]
     b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     b84:	230c      	movs	r3, #12
     b86:	18fb      	adds	r3, r7, r3
     b88:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     b8a:	683b      	ldr	r3, [r7, #0]
     b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     b8e:	230c      	movs	r3, #12
     b90:	18fb      	adds	r3, r7, r3
     b92:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b94:	2347      	movs	r3, #71	; 0x47
     b96:	18fb      	adds	r3, r7, r3
     b98:	2200      	movs	r2, #0
     b9a:	701a      	strb	r2, [r3, #0]
     b9c:	e02c      	b.n	bf8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b9e:	2347      	movs	r3, #71	; 0x47
     ba0:	18fb      	adds	r3, r7, r3
     ba2:	781a      	ldrb	r2, [r3, #0]
     ba4:	230c      	movs	r3, #12
     ba6:	18fb      	adds	r3, r7, r3
     ba8:	0092      	lsls	r2, r2, #2
     baa:	58d3      	ldr	r3, [r2, r3]
     bac:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bb0:	2b00      	cmp	r3, #0
     bb2:	d109      	bne.n	bc8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     bb6:	2347      	movs	r3, #71	; 0x47
     bb8:	18fb      	adds	r3, r7, r3
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	1c10      	adds	r0, r2, #0
     bbe:	1c19      	adds	r1, r3, #0
     bc0:	4b5b      	ldr	r3, [pc, #364]	; (d30 <_spi_set_config+0x1fc>)
     bc2:	4798      	blx	r3
     bc4:	1c03      	adds	r3, r0, #0
     bc6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bca:	3301      	adds	r3, #1
     bcc:	d00d      	beq.n	bea <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bd0:	b2da      	uxtb	r2, r3
     bd2:	231c      	movs	r3, #28
     bd4:	18fb      	adds	r3, r7, r3
     bd6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     bda:	0c1b      	lsrs	r3, r3, #16
     bdc:	b2da      	uxtb	r2, r3
     bde:	231c      	movs	r3, #28
     be0:	18fb      	adds	r3, r7, r3
     be2:	1c10      	adds	r0, r2, #0
     be4:	1c19      	adds	r1, r3, #0
     be6:	4b53      	ldr	r3, [pc, #332]	; (d34 <_spi_set_config+0x200>)
     be8:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bea:	2347      	movs	r3, #71	; 0x47
     bec:	18fb      	adds	r3, r7, r3
     bee:	781a      	ldrb	r2, [r3, #0]
     bf0:	2347      	movs	r3, #71	; 0x47
     bf2:	18fb      	adds	r3, r7, r3
     bf4:	3201      	adds	r2, #1
     bf6:	701a      	strb	r2, [r3, #0]
     bf8:	2347      	movs	r3, #71	; 0x47
     bfa:	18fb      	adds	r3, r7, r3
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	2b03      	cmp	r3, #3
     c00:	d9cd      	bls.n	b9e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     c02:	683b      	ldr	r3, [r7, #0]
     c04:	781a      	ldrb	r2, [r3, #0]
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	7c1a      	ldrb	r2, [r3, #16]
     c0e:	687b      	ldr	r3, [r7, #4]
     c10:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	7c9a      	ldrb	r2, [r3, #18]
     c16:	687b      	ldr	r3, [r7, #4]
     c18:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     c1a:	683b      	ldr	r3, [r7, #0]
     c1c:	7d1a      	ldrb	r2, [r3, #20]
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     c22:	230a      	movs	r3, #10
     c24:	18fb      	adds	r3, r7, r3
     c26:	2200      	movs	r2, #0
     c28:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     c2a:	2300      	movs	r3, #0
     c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     c2e:	2300      	movs	r3, #0
     c30:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     c32:	683b      	ldr	r3, [r7, #0]
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b01      	cmp	r3, #1
     c38:	d12b      	bne.n	c92 <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c3a:	687b      	ldr	r3, [r7, #4]
     c3c:	681b      	ldr	r3, [r3, #0]
     c3e:	1c18      	adds	r0, r3, #0
     c40:	4b3d      	ldr	r3, [pc, #244]	; (d38 <_spi_set_config+0x204>)
     c42:	4798      	blx	r3
     c44:	1c03      	adds	r3, r0, #0
     c46:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c4a:	3314      	adds	r3, #20
     c4c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     c50:	b2db      	uxtb	r3, r3
     c52:	1c18      	adds	r0, r3, #0
     c54:	4b39      	ldr	r3, [pc, #228]	; (d3c <_spi_set_config+0x208>)
     c56:	4798      	blx	r3
     c58:	1c03      	adds	r3, r0, #0
     c5a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     c5c:	683b      	ldr	r3, [r7, #0]
     c5e:	6999      	ldr	r1, [r3, #24]
     c60:	2323      	movs	r3, #35	; 0x23
     c62:	18fc      	adds	r4, r7, r3
     c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c66:	230a      	movs	r3, #10
     c68:	18fb      	adds	r3, r7, r3
     c6a:	1c08      	adds	r0, r1, #0
     c6c:	1c11      	adds	r1, r2, #0
     c6e:	1c1a      	adds	r2, r3, #0
     c70:	4b33      	ldr	r3, [pc, #204]	; (d40 <_spi_set_config+0x20c>)
     c72:	4798      	blx	r3
     c74:	1c03      	adds	r3, r0, #0
     c76:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     c78:	2323      	movs	r3, #35	; 0x23
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	781b      	ldrb	r3, [r3, #0]
     c7e:	2b00      	cmp	r3, #0
     c80:	d001      	beq.n	c86 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     c82:	2317      	movs	r3, #23
     c84:	e04e      	b.n	d24 <_spi_set_config+0x1f0>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     c86:	230a      	movs	r3, #10
     c88:	18fb      	adds	r3, r7, r3
     c8a:	881b      	ldrh	r3, [r3, #0]
     c8c:	b2da      	uxtb	r2, r3
     c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c90:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     c92:	683b      	ldr	r3, [r7, #0]
     c94:	685b      	ldr	r3, [r3, #4]
     c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     c98:	4313      	orrs	r3, r2
     c9a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     c9c:	683b      	ldr	r3, [r7, #0]
     c9e:	689b      	ldr	r3, [r3, #8]
     ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     ca2:	4313      	orrs	r3, r2
     ca4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ca6:	683b      	ldr	r3, [r7, #0]
     ca8:	68db      	ldr	r3, [r3, #12]
     caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     cac:	4313      	orrs	r3, r2
     cae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	7c1b      	ldrb	r3, [r3, #16]
     cb4:	1c1a      	adds	r2, r3, #0
     cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cb8:	4313      	orrs	r3, r2
     cba:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     cbc:	683b      	ldr	r3, [r7, #0]
     cbe:	7c5b      	ldrb	r3, [r3, #17]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d103      	bne.n	ccc <_spi_set_config+0x198>
     cc4:	4b1f      	ldr	r3, [pc, #124]	; (d44 <_spi_set_config+0x210>)
     cc6:	4798      	blx	r3
     cc8:	1e03      	subs	r3, r0, #0
     cca:	d003      	beq.n	cd4 <_spi_set_config+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     cce:	2280      	movs	r2, #128	; 0x80
     cd0:	4313      	orrs	r3, r2
     cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     cd4:	683b      	ldr	r3, [r7, #0]
     cd6:	7c9b      	ldrb	r3, [r3, #18]
     cd8:	2b00      	cmp	r3, #0
     cda:	d004      	beq.n	ce6 <_spi_set_config+0x1b2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cde:	2280      	movs	r2, #128	; 0x80
     ce0:	0292      	lsls	r2, r2, #10
     ce2:	4313      	orrs	r3, r2
     ce4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     ce6:	683b      	ldr	r3, [r7, #0]
     ce8:	7cdb      	ldrb	r3, [r3, #19]
     cea:	2b00      	cmp	r3, #0
     cec:	d004      	beq.n	cf8 <_spi_set_config+0x1c4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     cf0:	2280      	movs	r2, #128	; 0x80
     cf2:	0092      	lsls	r2, r2, #2
     cf4:	4313      	orrs	r3, r2
     cf6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     cf8:	683b      	ldr	r3, [r7, #0]
     cfa:	7d1b      	ldrb	r3, [r3, #20]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d004      	beq.n	d0a <_spi_set_config+0x1d6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d02:	2280      	movs	r2, #128	; 0x80
     d04:	0192      	lsls	r2, r2, #6
     d06:	4313      	orrs	r3, r2
     d08:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d10:	431a      	orrs	r2, r3
     d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d14:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d18:	685a      	ldr	r2, [r3, #4]
     d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d1c:	431a      	orrs	r2, r3
     d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d20:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     d22:	2300      	movs	r3, #0
}
     d24:	1c18      	adds	r0, r3, #0
     d26:	46bd      	mov	sp, r7
     d28:	b013      	add	sp, #76	; 0x4c
     d2a:	bd90      	pop	{r4, r7, pc}
     d2c:	00000689 	.word	0x00000689
     d30:	00000481 	.word	0x00000481
     d34:	00001db5 	.word	0x00001db5
     d38:	0000063d 	.word	0x0000063d
     d3c:	00001bed 	.word	0x00001bed
     d40:	00000379 	.word	0x00000379
     d44:	00000871 	.word	0x00000871

00000d48 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     d48:	b590      	push	{r4, r7, lr}
     d4a:	b091      	sub	sp, #68	; 0x44
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
     d50:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	681b      	ldr	r3, [r3, #0]
     d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     d5e:	683b      	ldr	r3, [r7, #0]
     d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     d62:	2310      	movs	r3, #16
     d64:	18fb      	adds	r3, r7, r3
     d66:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     d68:	683b      	ldr	r3, [r7, #0]
     d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     d6c:	2310      	movs	r3, #16
     d6e:	18fb      	adds	r3, r7, r3
     d70:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     d72:	683b      	ldr	r3, [r7, #0]
     d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     d76:	2310      	movs	r3, #16
     d78:	18fb      	adds	r3, r7, r3
     d7a:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     d7c:	683b      	ldr	r3, [r7, #0]
     d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     d80:	2310      	movs	r3, #16
     d82:	18fb      	adds	r3, r7, r3
     d84:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     d86:	233f      	movs	r3, #63	; 0x3f
     d88:	18fb      	adds	r3, r7, r3
     d8a:	2200      	movs	r2, #0
     d8c:	701a      	strb	r2, [r3, #0]
     d8e:	e030      	b.n	df2 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d90:	233f      	movs	r3, #63	; 0x3f
     d92:	18fb      	adds	r3, r7, r3
     d94:	781a      	ldrb	r2, [r3, #0]
     d96:	2310      	movs	r3, #16
     d98:	18fb      	adds	r3, r7, r3
     d9a:	0092      	lsls	r2, r2, #2
     d9c:	58d3      	ldr	r3, [r2, r3]
     d9e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     da2:	2b00      	cmp	r3, #0
     da4:	d109      	bne.n	dba <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
     da8:	233f      	movs	r3, #63	; 0x3f
     daa:	18fb      	adds	r3, r7, r3
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	1c10      	adds	r0, r2, #0
     db0:	1c19      	adds	r1, r3, #0
     db2:	4b57      	ldr	r3, [pc, #348]	; (f10 <_spi_check_config+0x1c8>)
     db4:	4798      	blx	r3
     db6:	1c03      	adds	r3, r0, #0
     db8:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dbc:	3301      	adds	r3, #1
     dbe:	d100      	bne.n	dc2 <_spi_check_config+0x7a>
			continue;
     dc0:	e010      	b.n	de4 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
     dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dc4:	041b      	lsls	r3, r3, #16
     dc6:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dca:	0c1b      	lsrs	r3, r3, #16
     dcc:	b2db      	uxtb	r3, r3
     dce:	1c18      	adds	r0, r3, #0
     dd0:	4b50      	ldr	r3, [pc, #320]	; (f14 <_spi_check_config+0x1cc>)
     dd2:	4798      	blx	r3
     dd4:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     dd6:	429c      	cmp	r4, r3
     dd8:	d004      	beq.n	de4 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	2200      	movs	r2, #0
     dde:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     de0:	231c      	movs	r3, #28
     de2:	e090      	b.n	f06 <_spi_check_config+0x1be>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     de4:	233f      	movs	r3, #63	; 0x3f
     de6:	18fb      	adds	r3, r7, r3
     de8:	781a      	ldrb	r2, [r3, #0]
     dea:	233f      	movs	r3, #63	; 0x3f
     dec:	18fb      	adds	r3, r7, r3
     dee:	3201      	adds	r2, #1
     df0:	701a      	strb	r2, [r3, #0]
     df2:	233f      	movs	r3, #63	; 0x3f
     df4:	18fb      	adds	r3, r7, r3
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	2b03      	cmp	r3, #3
     dfa:	d9c9      	bls.n	d90 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     dfc:	2013      	movs	r0, #19
     dfe:	4b46      	ldr	r3, [pc, #280]	; (f18 <_spi_check_config+0x1d0>)
     e00:	4798      	blx	r3
     e02:	1c03      	adds	r3, r0, #0
     e04:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     e06:	2300      	movs	r3, #0
     e08:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     e0a:	2300      	movs	r3, #0
     e0c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     e0e:	683b      	ldr	r3, [r7, #0]
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	2b01      	cmp	r3, #1
     e14:	d123      	bne.n	e5e <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     e16:	683b      	ldr	r3, [r7, #0]
     e18:	6999      	ldr	r1, [r3, #24]
     e1a:	2323      	movs	r3, #35	; 0x23
     e1c:	18fc      	adds	r4, r7, r3
     e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e20:	230e      	movs	r3, #14
     e22:	18fb      	adds	r3, r7, r3
     e24:	1c08      	adds	r0, r1, #0
     e26:	1c11      	adds	r1, r2, #0
     e28:	1c1a      	adds	r2, r3, #0
     e2a:	4b3c      	ldr	r3, [pc, #240]	; (f1c <_spi_check_config+0x1d4>)
     e2c:	4798      	blx	r3
     e2e:	1c03      	adds	r3, r0, #0
     e30:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     e32:	2323      	movs	r3, #35	; 0x23
     e34:	18fb      	adds	r3, r7, r3
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d001      	beq.n	e40 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     e3c:	2317      	movs	r3, #23
     e3e:	e062      	b.n	f06 <_spi_check_config+0x1be>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e42:	7b1b      	ldrb	r3, [r3, #12]
     e44:	b2da      	uxtb	r2, r3
     e46:	230e      	movs	r3, #14
     e48:	18fb      	adds	r3, r7, r3
     e4a:	881b      	ldrh	r3, [r3, #0]
     e4c:	b2db      	uxtb	r3, r3
     e4e:	429a      	cmp	r2, r3
     e50:	d001      	beq.n	e56 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     e52:	231c      	movs	r3, #28
     e54:	e057      	b.n	f06 <_spi_check_config+0x1be>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e58:	220c      	movs	r2, #12
     e5a:	4313      	orrs	r3, r2
     e5c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     e5e:	683b      	ldr	r3, [r7, #0]
     e60:	685b      	ldr	r3, [r3, #4]
     e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e64:	4313      	orrs	r3, r2
     e66:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     e68:	683b      	ldr	r3, [r7, #0]
     e6a:	689b      	ldr	r3, [r3, #8]
     e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e6e:	4313      	orrs	r3, r2
     e70:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     e72:	683b      	ldr	r3, [r7, #0]
     e74:	68db      	ldr	r3, [r3, #12]
     e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e78:	4313      	orrs	r3, r2
     e7a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
     e7c:	683b      	ldr	r3, [r7, #0]
     e7e:	7c1b      	ldrb	r3, [r3, #16]
     e80:	1c1a      	adds	r2, r3, #0
     e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e84:	4313      	orrs	r3, r2
     e86:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
     e88:	683b      	ldr	r3, [r7, #0]
     e8a:	7c5b      	ldrb	r3, [r3, #17]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d003      	beq.n	e98 <_spi_check_config+0x150>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e92:	2280      	movs	r2, #128	; 0x80
     e94:	4313      	orrs	r3, r2
     e96:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	7c9b      	ldrb	r3, [r3, #18]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d004      	beq.n	eaa <_spi_check_config+0x162>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ea2:	2280      	movs	r2, #128	; 0x80
     ea4:	0292      	lsls	r2, r2, #10
     ea6:	4313      	orrs	r3, r2
     ea8:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     eaa:	683b      	ldr	r3, [r7, #0]
     eac:	7cdb      	ldrb	r3, [r3, #19]
     eae:	2b00      	cmp	r3, #0
     eb0:	d004      	beq.n	ebc <_spi_check_config+0x174>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     eb4:	2280      	movs	r2, #128	; 0x80
     eb6:	0092      	lsls	r2, r2, #2
     eb8:	4313      	orrs	r3, r2
     eba:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ebc:	683b      	ldr	r3, [r7, #0]
     ebe:	7d1b      	ldrb	r3, [r3, #20]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d004      	beq.n	ece <_spi_check_config+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	0192      	lsls	r2, r2, #6
     eca:	4313      	orrs	r3, r2
     ecc:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ed0:	2202      	movs	r2, #2
     ed2:	4313      	orrs	r3, r2
     ed4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ed8:	681a      	ldr	r2, [r3, #0]
     eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     edc:	429a      	cmp	r2, r3
     ede:	d10e      	bne.n	efe <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
     ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ee2:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ee6:	429a      	cmp	r2, r3
     ee8:	d109      	bne.n	efe <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     eea:	683b      	ldr	r3, [r7, #0]
     eec:	781a      	ldrb	r2, [r3, #0]
     eee:	687b      	ldr	r3, [r7, #4]
     ef0:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
     ef2:	683b      	ldr	r3, [r7, #0]
     ef4:	7c1a      	ldrb	r2, [r3, #16]
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
     efa:	2300      	movs	r3, #0
     efc:	e003      	b.n	f06 <_spi_check_config+0x1be>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     efe:	687b      	ldr	r3, [r7, #4]
     f00:	2200      	movs	r2, #0
     f02:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
     f04:	231c      	movs	r3, #28
}
     f06:	1c18      	adds	r0, r3, #0
     f08:	46bd      	mov	sp, r7
     f0a:	b011      	add	sp, #68	; 0x44
     f0c:	bd90      	pop	{r4, r7, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00000481 	.word	0x00000481
     f14:	00000711 	.word	0x00000711
     f18:	00001bed 	.word	0x00001bed
     f1c:	00000379 	.word	0x00000379

00000f20 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f20:	b580      	push	{r7, lr}
     f22:	b08a      	sub	sp, #40	; 0x28
     f24:	af00      	add	r7, sp, #0
     f26:	60f8      	str	r0, [r7, #12]
     f28:	60b9      	str	r1, [r7, #8]
     f2a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	68ba      	ldr	r2, [r7, #8]
     f30:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     f32:	68fb      	ldr	r3, [r7, #12]
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	2202      	movs	r2, #2
     f3e:	4013      	ands	r3, r2
     f40:	d007      	beq.n	f52 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
     f42:	68fa      	ldr	r2, [r7, #12]
     f44:	687b      	ldr	r3, [r7, #4]
     f46:	1c10      	adds	r0, r2, #0
     f48:	1c19      	adds	r1, r3, #0
     f4a:	4b2a      	ldr	r3, [pc, #168]	; (ff4 <spi_init+0xd4>)
     f4c:	4798      	blx	r3
     f4e:	1c03      	adds	r3, r0, #0
     f50:	e04b      	b.n	fea <spi_init+0xca>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	2201      	movs	r2, #1
     f58:	4013      	ands	r3, r2
     f5a:	d001      	beq.n	f60 <spi_init+0x40>
		return STATUS_BUSY;
     f5c:	2305      	movs	r3, #5
     f5e:	e044      	b.n	fea <spi_init+0xca>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	1c18      	adds	r0, r3, #0
     f66:	4b24      	ldr	r3, [pc, #144]	; (ff8 <spi_init+0xd8>)
     f68:	4798      	blx	r3
     f6a:	1c03      	adds	r3, r0, #0
     f6c:	623b      	str	r3, [r7, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f6e:	6a3b      	ldr	r3, [r7, #32]
     f70:	3302      	adds	r3, #2
     f72:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f74:	6a3b      	ldr	r3, [r7, #32]
     f76:	3314      	adds	r3, #20
     f78:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f7a:	69fb      	ldr	r3, [r7, #28]
     f7c:	2201      	movs	r2, #1
     f7e:	409a      	lsls	r2, r3
     f80:	1c13      	adds	r3, r2, #0
     f82:	2002      	movs	r0, #2
     f84:	1c19      	adds	r1, r3, #0
     f86:	4b1d      	ldr	r3, [pc, #116]	; (ffc <spi_init+0xdc>)
     f88:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     f8a:	2314      	movs	r3, #20
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	1c18      	adds	r0, r3, #0
     f90:	4b1b      	ldr	r3, [pc, #108]	; (1000 <spi_init+0xe0>)
     f92:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	2224      	movs	r2, #36	; 0x24
     f98:	5c9a      	ldrb	r2, [r3, r2]
     f9a:	2314      	movs	r3, #20
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     fa0:	69bb      	ldr	r3, [r7, #24]
     fa2:	b2da      	uxtb	r2, r3
     fa4:	2314      	movs	r3, #20
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	1c10      	adds	r0, r2, #0
     faa:	1c19      	adds	r1, r3, #0
     fac:	4b15      	ldr	r3, [pc, #84]	; (1004 <spi_init+0xe4>)
     fae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     fb0:	69bb      	ldr	r3, [r7, #24]
     fb2:	b2db      	uxtb	r3, r3
     fb4:	1c18      	adds	r0, r3, #0
     fb6:	4b14      	ldr	r3, [pc, #80]	; (1008 <spi_init+0xe8>)
     fb8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fba:	687b      	ldr	r3, [r7, #4]
     fbc:	2224      	movs	r2, #36	; 0x24
     fbe:	5c9b      	ldrb	r3, [r3, r2]
     fc0:	1c18      	adds	r0, r3, #0
     fc2:	2100      	movs	r1, #0
     fc4:	4b11      	ldr	r3, [pc, #68]	; (100c <spi_init+0xec>)
     fc6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2b01      	cmp	r3, #1
     fce:	d105      	bne.n	fdc <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	220c      	movs	r2, #12
     fd6:	431a      	orrs	r2, r3
     fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fda:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     fdc:	68fa      	ldr	r2, [r7, #12]
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	1c10      	adds	r0, r2, #0
     fe2:	1c19      	adds	r1, r3, #0
     fe4:	4b0a      	ldr	r3, [pc, #40]	; (1010 <spi_init+0xf0>)
     fe6:	4798      	blx	r3
     fe8:	1c03      	adds	r3, r0, #0
}
     fea:	1c18      	adds	r0, r3, #0
     fec:	46bd      	mov	sp, r7
     fee:	b00a      	add	sp, #40	; 0x28
     ff0:	bd80      	pop	{r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	00000d49 	.word	0x00000d49
     ff8:	0000063d 	.word	0x0000063d
     ffc:	00000815 	.word	0x00000815
    1000:	00000801 	.word	0x00000801
    1004:	00001ac9 	.word	0x00001ac9
    1008:	00001b0d 	.word	0x00001b0d
    100c:	000003f5 	.word	0x000003f5
    1010:	00000b35 	.word	0x00000b35

00001014 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1014:	b590      	push	{r4, r7, lr}
    1016:	b087      	sub	sp, #28
    1018:	af00      	add	r7, sp, #0
    101a:	60f8      	str	r0, [r7, #12]
    101c:	60b9      	str	r1, [r7, #8]
    101e:	1c19      	adds	r1, r3, #0
    1020:	1dbb      	adds	r3, r7, #6
    1022:	801a      	strh	r2, [r3, #0]
    1024:	1d3b      	adds	r3, r7, #4
    1026:	1c0a      	adds	r2, r1, #0
    1028:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    102a:	1dbb      	adds	r3, r7, #6
    102c:	881b      	ldrh	r3, [r3, #0]
    102e:	2b00      	cmp	r3, #0
    1030:	d101      	bne.n	1036 <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
    1032:	2317      	movs	r3, #23
    1034:	e074      	b.n	1120 <spi_read_buffer_wait+0x10c>
	}

	if (!(module->receiver_enabled)) {
    1036:	68fb      	ldr	r3, [r7, #12]
    1038:	79db      	ldrb	r3, [r3, #7]
    103a:	2201      	movs	r2, #1
    103c:	4053      	eors	r3, r2
    103e:	b2db      	uxtb	r3, r3
    1040:	2b00      	cmp	r3, #0
    1042:	d001      	beq.n	1048 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
    1044:	231c      	movs	r3, #28
    1046:	e06b      	b.n	1120 <spi_read_buffer_wait+0x10c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    1048:	2316      	movs	r3, #22
    104a:	18fb      	adds	r3, r7, r3
    104c:	2200      	movs	r2, #0
    104e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    1050:	e05e      	b.n	1110 <spi_read_buffer_wait+0xfc>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	795b      	ldrb	r3, [r3, #5]
    1056:	2b01      	cmp	r3, #1
    1058:	d112      	bne.n	1080 <spi_read_buffer_wait+0x6c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	68fb      	ldr	r3, [r7, #12]
    105e:	1c18      	adds	r0, r3, #0
    1060:	4b31      	ldr	r3, [pc, #196]	; (1128 <spi_read_buffer_wait+0x114>)
    1062:	4798      	blx	r3
    1064:	1c03      	adds	r3, r0, #0
    1066:	1c1a      	adds	r2, r3, #0
    1068:	2301      	movs	r3, #1
    106a:	4053      	eors	r3, r2
    106c:	b2db      	uxtb	r3, r3
    106e:	2b00      	cmp	r3, #0
    1070:	d1f4      	bne.n	105c <spi_read_buffer_wait+0x48>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    1072:	68fa      	ldr	r2, [r7, #12]
    1074:	1d3b      	adds	r3, r7, #4
    1076:	881b      	ldrh	r3, [r3, #0]
    1078:	1c10      	adds	r0, r2, #0
    107a:	1c19      	adds	r1, r3, #0
    107c:	4b2b      	ldr	r3, [pc, #172]	; (112c <spi_read_buffer_wait+0x118>)
    107e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    1080:	46c0      	nop			; (mov r8, r8)
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	1c18      	adds	r0, r3, #0
    1086:	4b2a      	ldr	r3, [pc, #168]	; (1130 <spi_read_buffer_wait+0x11c>)
    1088:	4798      	blx	r3
    108a:	1c03      	adds	r3, r0, #0
    108c:	1c1a      	adds	r2, r3, #0
    108e:	2301      	movs	r3, #1
    1090:	4053      	eors	r3, r2
    1092:	b2db      	uxtb	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	d1f4      	bne.n	1082 <spi_read_buffer_wait+0x6e>
		}

		uint16_t received_data = 0;
    1098:	2312      	movs	r3, #18
    109a:	18fb      	adds	r3, r7, r3
    109c:	2200      	movs	r2, #0
    109e:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    10a0:	2315      	movs	r3, #21
    10a2:	18fc      	adds	r4, r7, r3
    10a4:	68fa      	ldr	r2, [r7, #12]
    10a6:	2312      	movs	r3, #18
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	1c10      	adds	r0, r2, #0
    10ac:	1c19      	adds	r1, r3, #0
    10ae:	4b21      	ldr	r3, [pc, #132]	; (1134 <spi_read_buffer_wait+0x120>)
    10b0:	4798      	blx	r3
    10b2:	1c03      	adds	r3, r0, #0
    10b4:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    10b6:	2315      	movs	r3, #21
    10b8:	18fb      	adds	r3, r7, r3
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	2b00      	cmp	r3, #0
    10be:	d003      	beq.n	10c8 <spi_read_buffer_wait+0xb4>
			/* Overflow, abort */
			return retval;
    10c0:	2315      	movs	r3, #21
    10c2:	18fb      	adds	r3, r7, r3
    10c4:	781b      	ldrb	r3, [r3, #0]
    10c6:	e02b      	b.n	1120 <spi_read_buffer_wait+0x10c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    10c8:	2316      	movs	r3, #22
    10ca:	18fb      	adds	r3, r7, r3
    10cc:	881b      	ldrh	r3, [r3, #0]
    10ce:	2216      	movs	r2, #22
    10d0:	18ba      	adds	r2, r7, r2
    10d2:	1c59      	adds	r1, r3, #1
    10d4:	8011      	strh	r1, [r2, #0]
    10d6:	1c1a      	adds	r2, r3, #0
    10d8:	68bb      	ldr	r3, [r7, #8]
    10da:	189b      	adds	r3, r3, r2
    10dc:	2212      	movs	r2, #18
    10de:	18ba      	adds	r2, r7, r2
    10e0:	8812      	ldrh	r2, [r2, #0]
    10e2:	b2d2      	uxtb	r2, r2
    10e4:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	799b      	ldrb	r3, [r3, #6]
    10ea:	2b01      	cmp	r3, #1
    10ec:	d110      	bne.n	1110 <spi_read_buffer_wait+0xfc>
			rx_data[rx_pos++] = (received_data >> 8);
    10ee:	2316      	movs	r3, #22
    10f0:	18fb      	adds	r3, r7, r3
    10f2:	881b      	ldrh	r3, [r3, #0]
    10f4:	2216      	movs	r2, #22
    10f6:	18ba      	adds	r2, r7, r2
    10f8:	1c59      	adds	r1, r3, #1
    10fa:	8011      	strh	r1, [r2, #0]
    10fc:	1c1a      	adds	r2, r3, #0
    10fe:	68bb      	ldr	r3, [r7, #8]
    1100:	189b      	adds	r3, r3, r2
    1102:	2212      	movs	r2, #18
    1104:	18ba      	adds	r2, r7, r2
    1106:	8812      	ldrh	r2, [r2, #0]
    1108:	0a12      	lsrs	r2, r2, #8
    110a:	b292      	uxth	r2, r2
    110c:	b2d2      	uxtb	r2, r2
    110e:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    1110:	1dbb      	adds	r3, r7, #6
    1112:	881b      	ldrh	r3, [r3, #0]
    1114:	1dba      	adds	r2, r7, #6
    1116:	1e59      	subs	r1, r3, #1
    1118:	8011      	strh	r1, [r2, #0]
    111a:	2b00      	cmp	r3, #0
    111c:	d199      	bne.n	1052 <spi_read_buffer_wait+0x3e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    111e:	2300      	movs	r3, #0
}
    1120:	1c18      	adds	r0, r3, #0
    1122:	46bd      	mov	sp, r7
    1124:	b007      	add	sp, #28
    1126:	bd90      	pop	{r4, r7, pc}
    1128:	00000941 	.word	0x00000941
    112c:	00000991 	.word	0x00000991
    1130:	00000969 	.word	0x00000969
    1134:	000009d9 	.word	0x000009d9

00001138 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1138:	b580      	push	{r7, lr}
    113a:	b086      	sub	sp, #24
    113c:	af00      	add	r7, sp, #0
    113e:	60f8      	str	r0, [r7, #12]
    1140:	60b9      	str	r1, [r7, #8]
    1142:	1dfb      	adds	r3, r7, #7
    1144:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1146:	68fb      	ldr	r3, [r7, #12]
    1148:	795b      	ldrb	r3, [r3, #5]
    114a:	2b01      	cmp	r3, #1
    114c:	d001      	beq.n	1152 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    114e:	2315      	movs	r3, #21
    1150:	e05c      	b.n	120c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	7a1b      	ldrb	r3, [r3, #8]
    1156:	2201      	movs	r2, #1
    1158:	4053      	eors	r3, r2
    115a:	b2db      	uxtb	r3, r3
    115c:	2b00      	cmp	r3, #0
    115e:	d054      	beq.n	120a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1160:	1dfb      	adds	r3, r7, #7
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	2b00      	cmp	r3, #0
    1166:	d04a      	beq.n	11fe <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	785b      	ldrb	r3, [r3, #1]
    116c:	2b00      	cmp	r3, #0
    116e:	d03f      	beq.n	11f0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    1170:	68fb      	ldr	r3, [r7, #12]
    1172:	1c18      	adds	r0, r3, #0
    1174:	4b27      	ldr	r3, [pc, #156]	; (1214 <spi_select_slave+0xdc>)
    1176:	4798      	blx	r3
    1178:	1c03      	adds	r3, r0, #0
    117a:	1c1a      	adds	r2, r3, #0
    117c:	2301      	movs	r3, #1
    117e:	4053      	eors	r3, r2
    1180:	b2db      	uxtb	r3, r3
    1182:	2b00      	cmp	r3, #0
    1184:	d007      	beq.n	1196 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    1186:	68bb      	ldr	r3, [r7, #8]
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	1c18      	adds	r0, r3, #0
    118c:	2101      	movs	r1, #1
    118e:	4b22      	ldr	r3, [pc, #136]	; (1218 <spi_select_slave+0xe0>)
    1190:	4798      	blx	r3
					return STATUS_BUSY;
    1192:	2305      	movs	r3, #5
    1194:	e03a      	b.n	120c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1196:	68bb      	ldr	r3, [r7, #8]
    1198:	781b      	ldrb	r3, [r3, #0]
    119a:	1c18      	adds	r0, r3, #0
    119c:	2100      	movs	r1, #0
    119e:	4b1e      	ldr	r3, [pc, #120]	; (1218 <spi_select_slave+0xe0>)
    11a0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    11a2:	68bb      	ldr	r3, [r7, #8]
    11a4:	789b      	ldrb	r3, [r3, #2]
    11a6:	b29b      	uxth	r3, r3
    11a8:	68fa      	ldr	r2, [r7, #12]
    11aa:	1c10      	adds	r0, r2, #0
    11ac:	1c19      	adds	r1, r3, #0
    11ae:	4b1b      	ldr	r3, [pc, #108]	; (121c <spi_select_slave+0xe4>)
    11b0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    11b2:	68fb      	ldr	r3, [r7, #12]
    11b4:	79db      	ldrb	r3, [r3, #7]
    11b6:	2201      	movs	r2, #1
    11b8:	4053      	eors	r3, r2
    11ba:	b2db      	uxtb	r3, r3
    11bc:	2b00      	cmp	r3, #0
    11be:	d024      	beq.n	120a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    11c0:	46c0      	nop			; (mov r8, r8)
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	1c18      	adds	r0, r3, #0
    11c6:	4b16      	ldr	r3, [pc, #88]	; (1220 <spi_select_slave+0xe8>)
    11c8:	4798      	blx	r3
    11ca:	1c03      	adds	r3, r0, #0
    11cc:	1c1a      	adds	r2, r3, #0
    11ce:	2301      	movs	r3, #1
    11d0:	4053      	eors	r3, r2
    11d2:	b2db      	uxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	d1f4      	bne.n	11c2 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    11d8:	2316      	movs	r3, #22
    11da:	18fb      	adds	r3, r7, r3
    11dc:	2200      	movs	r2, #0
    11de:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    11e0:	68fa      	ldr	r2, [r7, #12]
    11e2:	2316      	movs	r3, #22
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	1c10      	adds	r0, r2, #0
    11e8:	1c19      	adds	r1, r3, #0
    11ea:	4b0e      	ldr	r3, [pc, #56]	; (1224 <spi_select_slave+0xec>)
    11ec:	4798      	blx	r3
    11ee:	e00c      	b.n	120a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    11f0:	68bb      	ldr	r3, [r7, #8]
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	1c18      	adds	r0, r3, #0
    11f6:	2100      	movs	r1, #0
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <spi_select_slave+0xe0>)
    11fa:	4798      	blx	r3
    11fc:	e005      	b.n	120a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    11fe:	68bb      	ldr	r3, [r7, #8]
    1200:	781b      	ldrb	r3, [r3, #0]
    1202:	1c18      	adds	r0, r3, #0
    1204:	2101      	movs	r1, #1
    1206:	4b04      	ldr	r3, [pc, #16]	; (1218 <spi_select_slave+0xe0>)
    1208:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    120a:	2300      	movs	r3, #0
}
    120c:	1c18      	adds	r0, r3, #0
    120e:	46bd      	mov	sp, r7
    1210:	b006      	add	sp, #24
    1212:	bd80      	pop	{r7, pc}
    1214:	00000941 	.word	0x00000941
    1218:	000007b1 	.word	0x000007b1
    121c:	00000991 	.word	0x00000991
    1220:	00000969 	.word	0x00000969
    1224:	000009d9 	.word	0x000009d9

00001228 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1228:	b580      	push	{r7, lr}
    122a:	b086      	sub	sp, #24
    122c:	af00      	add	r7, sp, #0
    122e:	60f8      	str	r0, [r7, #12]
    1230:	60b9      	str	r1, [r7, #8]
    1232:	1dbb      	adds	r3, r7, #6
    1234:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    1236:	1dbb      	adds	r3, r7, #6
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	2b00      	cmp	r3, #0
    123c:	d101      	bne.n	1242 <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    123e:	2317      	movs	r3, #23
    1240:	e080      	b.n	1344 <spi_write_buffer_wait+0x11c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    1242:	2316      	movs	r3, #22
    1244:	18fb      	adds	r3, r7, r3
    1246:	2200      	movs	r2, #0
    1248:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    124a:	2314      	movs	r3, #20
    124c:	18fb      	adds	r3, r7, r3
    124e:	1dba      	adds	r2, r7, #6
    1250:	8812      	ldrh	r2, [r2, #0]
    1252:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1254:	e05e      	b.n	1314 <spi_write_buffer_wait+0xec>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	68fb      	ldr	r3, [r7, #12]
    125a:	1c18      	adds	r0, r3, #0
    125c:	4b3b      	ldr	r3, [pc, #236]	; (134c <spi_write_buffer_wait+0x124>)
    125e:	4798      	blx	r3
    1260:	1c03      	adds	r3, r0, #0
    1262:	1c1a      	adds	r2, r3, #0
    1264:	2301      	movs	r3, #1
    1266:	4053      	eors	r3, r2
    1268:	b2db      	uxtb	r3, r3
    126a:	2b00      	cmp	r3, #0
    126c:	d1f4      	bne.n	1258 <spi_write_buffer_wait+0x30>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    126e:	2316      	movs	r3, #22
    1270:	18fb      	adds	r3, r7, r3
    1272:	881b      	ldrh	r3, [r3, #0]
    1274:	2216      	movs	r2, #22
    1276:	18ba      	adds	r2, r7, r2
    1278:	1c59      	adds	r1, r3, #1
    127a:	8011      	strh	r1, [r2, #0]
    127c:	1c1a      	adds	r2, r3, #0
    127e:	68bb      	ldr	r3, [r7, #8]
    1280:	189b      	adds	r3, r3, r2
    1282:	781a      	ldrb	r2, [r3, #0]
    1284:	2312      	movs	r3, #18
    1286:	18fb      	adds	r3, r7, r3
    1288:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    128a:	68fb      	ldr	r3, [r7, #12]
    128c:	799b      	ldrb	r3, [r3, #6]
    128e:	2b01      	cmp	r3, #1
    1290:	d114      	bne.n	12bc <spi_write_buffer_wait+0x94>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1292:	2316      	movs	r3, #22
    1294:	18fb      	adds	r3, r7, r3
    1296:	881b      	ldrh	r3, [r3, #0]
    1298:	2216      	movs	r2, #22
    129a:	18ba      	adds	r2, r7, r2
    129c:	1c59      	adds	r1, r3, #1
    129e:	8011      	strh	r1, [r2, #0]
    12a0:	1c1a      	adds	r2, r3, #0
    12a2:	68bb      	ldr	r3, [r7, #8]
    12a4:	189b      	adds	r3, r3, r2
    12a6:	781b      	ldrb	r3, [r3, #0]
    12a8:	021b      	lsls	r3, r3, #8
    12aa:	b29a      	uxth	r2, r3
    12ac:	2312      	movs	r3, #18
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	4313      	orrs	r3, r2
    12b4:	b29a      	uxth	r2, r3
    12b6:	2312      	movs	r3, #18
    12b8:	18fb      	adds	r3, r7, r3
    12ba:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    12bc:	68fa      	ldr	r2, [r7, #12]
    12be:	2312      	movs	r3, #18
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	881b      	ldrh	r3, [r3, #0]
    12c4:	1c10      	adds	r0, r2, #0
    12c6:	1c19      	adds	r1, r3, #0
    12c8:	4b21      	ldr	r3, [pc, #132]	; (1350 <spi_write_buffer_wait+0x128>)
    12ca:	4798      	blx	r3

		if (module->receiver_enabled) {
    12cc:	68fb      	ldr	r3, [r7, #12]
    12ce:	79db      	ldrb	r3, [r3, #7]
    12d0:	2214      	movs	r2, #20
    12d2:	18ba      	adds	r2, r7, r2
    12d4:	2114      	movs	r1, #20
    12d6:	1879      	adds	r1, r7, r1
    12d8:	8809      	ldrh	r1, [r1, #0]
    12da:	8011      	strh	r1, [r2, #0]
    12dc:	2b00      	cmp	r3, #0
    12de:	d019      	beq.n	1314 <spi_write_buffer_wait+0xec>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    12e0:	46c0      	nop			; (mov r8, r8)
    12e2:	68fb      	ldr	r3, [r7, #12]
    12e4:	1c18      	adds	r0, r3, #0
    12e6:	4b1b      	ldr	r3, [pc, #108]	; (1354 <spi_write_buffer_wait+0x12c>)
    12e8:	4798      	blx	r3
    12ea:	1c03      	adds	r3, r0, #0
    12ec:	1c1a      	adds	r2, r3, #0
    12ee:	2301      	movs	r3, #1
    12f0:	4053      	eors	r3, r2
    12f2:	b2db      	uxtb	r3, r3
    12f4:	2b00      	cmp	r3, #0
    12f6:	d1f4      	bne.n	12e2 <spi_write_buffer_wait+0xba>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    12f8:	68fa      	ldr	r2, [r7, #12]
    12fa:	2310      	movs	r3, #16
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	1c10      	adds	r0, r2, #0
    1300:	1c19      	adds	r1, r3, #0
    1302:	4b15      	ldr	r3, [pc, #84]	; (1358 <spi_write_buffer_wait+0x130>)
    1304:	4798      	blx	r3
			flush_length--;
    1306:	2314      	movs	r3, #20
    1308:	18fb      	adds	r3, r7, r3
    130a:	881a      	ldrh	r2, [r3, #0]
    130c:	2314      	movs	r3, #20
    130e:	18fb      	adds	r3, r7, r3
    1310:	3a01      	subs	r2, #1
    1312:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    1314:	1dbb      	adds	r3, r7, #6
    1316:	881b      	ldrh	r3, [r3, #0]
    1318:	1dba      	adds	r2, r7, #6
    131a:	1e59      	subs	r1, r3, #1
    131c:	8011      	strh	r1, [r2, #0]
    131e:	2b00      	cmp	r3, #0
    1320:	d199      	bne.n	1256 <spi_write_buffer_wait+0x2e>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1322:	68fb      	ldr	r3, [r7, #12]
    1324:	795b      	ldrb	r3, [r3, #5]
    1326:	2b01      	cmp	r3, #1
    1328:	d10b      	bne.n	1342 <spi_write_buffer_wait+0x11a>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	1c18      	adds	r0, r3, #0
    1330:	4b0a      	ldr	r3, [pc, #40]	; (135c <spi_write_buffer_wait+0x134>)
    1332:	4798      	blx	r3
    1334:	1c03      	adds	r3, r0, #0
    1336:	1c1a      	adds	r2, r3, #0
    1338:	2301      	movs	r3, #1
    133a:	4053      	eors	r3, r2
    133c:	b2db      	uxtb	r3, r3
    133e:	2b00      	cmp	r3, #0
    1340:	d1f4      	bne.n	132c <spi_write_buffer_wait+0x104>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1342:	2300      	movs	r3, #0
}
    1344:	1c18      	adds	r0, r3, #0
    1346:	46bd      	mov	sp, r7
    1348:	b006      	add	sp, #24
    134a:	bd80      	pop	{r7, pc}
    134c:	00000941 	.word	0x00000941
    1350:	00000991 	.word	0x00000991
    1354:	00000969 	.word	0x00000969
    1358:	000009d9 	.word	0x000009d9
    135c:	00000919 	.word	0x00000919

00001360 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1360:	b580      	push	{r7, lr}
    1362:	b082      	sub	sp, #8
    1364:	af00      	add	r7, sp, #0
    1366:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	2201      	movs	r2, #1
    136c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	2200      	movs	r2, #0
    1372:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	2206      	movs	r2, #6
    1378:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    137a:	687b      	ldr	r3, [r7, #4]
    137c:	2200      	movs	r2, #0
    137e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	2200      	movs	r2, #0
    1384:	725a      	strb	r2, [r3, #9]
}
    1386:	46bd      	mov	sp, r7
    1388:	b002      	add	sp, #8
    138a:	bd80      	pop	{r7, pc}

0000138c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    138c:	b580      	push	{r7, lr}
    138e:	b082      	sub	sp, #8
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	2203      	movs	r2, #3
    1398:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	2200      	movs	r2, #0
    139e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    13a0:	687b      	ldr	r3, [r7, #4]
    13a2:	2201      	movs	r2, #1
    13a4:	709a      	strb	r2, [r3, #2]
}
    13a6:	46bd      	mov	sp, r7
    13a8:	b002      	add	sp, #8
    13aa:	bd80      	pop	{r7, pc}

000013ac <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b082      	sub	sp, #8
    13b0:	af00      	add	r7, sp, #0
    13b2:	1c02      	adds	r2, r0, #0
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    13b8:	4a03      	ldr	r2, [pc, #12]	; (13c8 <system_cpu_clock_set_divider+0x1c>)
    13ba:	1dfb      	adds	r3, r7, #7
    13bc:	781b      	ldrb	r3, [r3, #0]
    13be:	7213      	strb	r3, [r2, #8]
}
    13c0:	46bd      	mov	sp, r7
    13c2:	b002      	add	sp, #8
    13c4:	bd80      	pop	{r7, pc}
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	40000400 	.word	0x40000400

000013cc <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    13cc:	b580      	push	{r7, lr}
    13ce:	b082      	sub	sp, #8
    13d0:	af00      	add	r7, sp, #0
    13d2:	1c02      	adds	r2, r0, #0
    13d4:	1dfb      	adds	r3, r7, #7
    13d6:	701a      	strb	r2, [r3, #0]
    13d8:	1dbb      	adds	r3, r7, #6
    13da:	1c0a      	adds	r2, r1, #0
    13dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    13de:	1dfb      	adds	r3, r7, #7
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	2b01      	cmp	r3, #1
    13e4:	d008      	beq.n	13f8 <system_apb_clock_set_divider+0x2c>
    13e6:	2b02      	cmp	r3, #2
    13e8:	d00b      	beq.n	1402 <system_apb_clock_set_divider+0x36>
    13ea:	2b00      	cmp	r3, #0
    13ec:	d10e      	bne.n	140c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    13ee:	4a0b      	ldr	r2, [pc, #44]	; (141c <system_apb_clock_set_divider+0x50>)
    13f0:	1dbb      	adds	r3, r7, #6
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	7253      	strb	r3, [r2, #9]
			break;
    13f6:	e00b      	b.n	1410 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    13f8:	4a08      	ldr	r2, [pc, #32]	; (141c <system_apb_clock_set_divider+0x50>)
    13fa:	1dbb      	adds	r3, r7, #6
    13fc:	781b      	ldrb	r3, [r3, #0]
    13fe:	7293      	strb	r3, [r2, #10]
			break;
    1400:	e006      	b.n	1410 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1402:	4a06      	ldr	r2, [pc, #24]	; (141c <system_apb_clock_set_divider+0x50>)
    1404:	1dbb      	adds	r3, r7, #6
    1406:	781b      	ldrb	r3, [r3, #0]
    1408:	72d3      	strb	r3, [r2, #11]
			break;
    140a:	e001      	b.n	1410 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    140c:	2317      	movs	r3, #23
    140e:	e000      	b.n	1412 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1410:	2300      	movs	r3, #0
}
    1412:	1c18      	adds	r0, r3, #0
    1414:	46bd      	mov	sp, r7
    1416:	b002      	add	sp, #8
    1418:	bd80      	pop	{r7, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	40000400 	.word	0x40000400

00001420 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1420:	b580      	push	{r7, lr}
    1422:	b082      	sub	sp, #8
    1424:	af00      	add	r7, sp, #0
    1426:	1c02      	adds	r2, r0, #0
    1428:	1dfb      	adds	r3, r7, #7
    142a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    142c:	4b08      	ldr	r3, [pc, #32]	; (1450 <system_flash_set_waitstates+0x30>)
    142e:	1dfa      	adds	r2, r7, #7
    1430:	7812      	ldrb	r2, [r2, #0]
    1432:	210f      	movs	r1, #15
    1434:	400a      	ands	r2, r1
    1436:	b2d2      	uxtb	r2, r2
    1438:	210f      	movs	r1, #15
    143a:	400a      	ands	r2, r1
    143c:	0052      	lsls	r2, r2, #1
    143e:	6859      	ldr	r1, [r3, #4]
    1440:	201e      	movs	r0, #30
    1442:	4381      	bics	r1, r0
    1444:	430a      	orrs	r2, r1
    1446:	605a      	str	r2, [r3, #4]
}
    1448:	46bd      	mov	sp, r7
    144a:	b002      	add	sp, #8
    144c:	bd80      	pop	{r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	41004000 	.word	0x41004000

00001454 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1454:	b580      	push	{r7, lr}
    1456:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1458:	46c0      	nop			; (mov r8, r8)
    145a:	4b03      	ldr	r3, [pc, #12]	; (1468 <_system_dfll_wait_for_sync+0x14>)
    145c:	68db      	ldr	r3, [r3, #12]
    145e:	2210      	movs	r2, #16
    1460:	4013      	ands	r3, r2
    1462:	d0fa      	beq.n	145a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1464:	46bd      	mov	sp, r7
    1466:	bd80      	pop	{r7, pc}
    1468:	40000800 	.word	0x40000800

0000146c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    146c:	b580      	push	{r7, lr}
    146e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1470:	4a0c      	ldr	r2, [pc, #48]	; (14a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1472:	4b0d      	ldr	r3, [pc, #52]	; (14a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1474:	681b      	ldr	r3, [r3, #0]
    1476:	b29b      	uxth	r3, r3
    1478:	2180      	movs	r1, #128	; 0x80
    147a:	438b      	bics	r3, r1
    147c:	b29b      	uxth	r3, r3
    147e:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1480:	4b0a      	ldr	r3, [pc, #40]	; (14ac <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1482:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1484:	4a07      	ldr	r2, [pc, #28]	; (14a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1486:	4b08      	ldr	r3, [pc, #32]	; (14a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1488:	689b      	ldr	r3, [r3, #8]
    148a:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    148c:	4a05      	ldr	r2, [pc, #20]	; (14a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    148e:	4b06      	ldr	r3, [pc, #24]	; (14a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1490:	685b      	ldr	r3, [r3, #4]
    1492:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1494:	4a03      	ldr	r2, [pc, #12]	; (14a4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1496:	4b04      	ldr	r3, [pc, #16]	; (14a8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	b29b      	uxth	r3, r3
    149c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    149e:	46bd      	mov	sp, r7
    14a0:	bd80      	pop	{r7, pc}
    14a2:	46c0      	nop			; (mov r8, r8)
    14a4:	40000800 	.word	0x40000800
    14a8:	20000034 	.word	0x20000034
    14ac:	00001455 	.word	0x00001455

000014b0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    14b0:	b580      	push	{r7, lr}
    14b2:	b082      	sub	sp, #8
    14b4:	af00      	add	r7, sp, #0
    14b6:	1c02      	adds	r2, r0, #0
    14b8:	1dfb      	adds	r3, r7, #7
    14ba:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	781b      	ldrb	r3, [r3, #0]
    14c0:	2b08      	cmp	r3, #8
    14c2:	d842      	bhi.n	154a <system_clock_source_get_hz+0x9a>
    14c4:	009a      	lsls	r2, r3, #2
    14c6:	4b23      	ldr	r3, [pc, #140]	; (1554 <system_clock_source_get_hz+0xa4>)
    14c8:	18d3      	adds	r3, r2, r3
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    14ce:	4b22      	ldr	r3, [pc, #136]	; (1558 <system_clock_source_get_hz+0xa8>)
    14d0:	691b      	ldr	r3, [r3, #16]
    14d2:	e03b      	b.n	154c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    14d4:	4b21      	ldr	r3, [pc, #132]	; (155c <system_clock_source_get_hz+0xac>)
    14d6:	6a1b      	ldr	r3, [r3, #32]
    14d8:	0a1b      	lsrs	r3, r3, #8
    14da:	1c1a      	adds	r2, r3, #0
    14dc:	2303      	movs	r3, #3
    14de:	4013      	ands	r3, r2
    14e0:	b2db      	uxtb	r3, r3
    14e2:	1c1a      	adds	r2, r3, #0
    14e4:	4b1e      	ldr	r3, [pc, #120]	; (1560 <system_clock_source_get_hz+0xb0>)
    14e6:	40d3      	lsrs	r3, r2
    14e8:	e030      	b.n	154c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    14ea:	2380      	movs	r3, #128	; 0x80
    14ec:	021b      	lsls	r3, r3, #8
    14ee:	e02d      	b.n	154c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    14f0:	2380      	movs	r3, #128	; 0x80
    14f2:	021b      	lsls	r3, r3, #8
    14f4:	e02a      	b.n	154c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    14f6:	4b18      	ldr	r3, [pc, #96]	; (1558 <system_clock_source_get_hz+0xa8>)
    14f8:	695b      	ldr	r3, [r3, #20]
    14fa:	e027      	b.n	154c <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    14fc:	4b16      	ldr	r3, [pc, #88]	; (1558 <system_clock_source_get_hz+0xa8>)
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	2202      	movs	r2, #2
    1502:	4013      	ands	r3, r2
    1504:	d101      	bne.n	150a <system_clock_source_get_hz+0x5a>
			return 0;
    1506:	2300      	movs	r3, #0
    1508:	e020      	b.n	154c <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    150a:	4b16      	ldr	r3, [pc, #88]	; (1564 <system_clock_source_get_hz+0xb4>)
    150c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    150e:	4b12      	ldr	r3, [pc, #72]	; (1558 <system_clock_source_get_hz+0xa8>)
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	2204      	movs	r2, #4
    1514:	4013      	ands	r3, r2
    1516:	d009      	beq.n	152c <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1518:	2000      	movs	r0, #0
    151a:	4b13      	ldr	r3, [pc, #76]	; (1568 <system_clock_source_get_hz+0xb8>)
    151c:	4798      	blx	r3
    151e:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    1520:	4b0d      	ldr	r3, [pc, #52]	; (1558 <system_clock_source_get_hz+0xa8>)
    1522:	689b      	ldr	r3, [r3, #8]
    1524:	041b      	lsls	r3, r3, #16
    1526:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1528:	4353      	muls	r3, r2
    152a:	e00f      	b.n	154c <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    152c:	4b0f      	ldr	r3, [pc, #60]	; (156c <system_clock_source_get_hz+0xbc>)
    152e:	e00d      	b.n	154c <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1530:	4a0a      	ldr	r2, [pc, #40]	; (155c <system_clock_source_get_hz+0xac>)
    1532:	2350      	movs	r3, #80	; 0x50
    1534:	5cd3      	ldrb	r3, [r2, r3]
    1536:	b2db      	uxtb	r3, r3
    1538:	1c1a      	adds	r2, r3, #0
    153a:	2304      	movs	r3, #4
    153c:	4013      	ands	r3, r2
    153e:	d101      	bne.n	1544 <system_clock_source_get_hz+0x94>
			return 0;
    1540:	2300      	movs	r3, #0
    1542:	e003      	b.n	154c <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    1544:	4b04      	ldr	r3, [pc, #16]	; (1558 <system_clock_source_get_hz+0xa8>)
    1546:	68db      	ldr	r3, [r3, #12]
    1548:	e000      	b.n	154c <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    154a:	2300      	movs	r3, #0
	}
}
    154c:	1c18      	adds	r0, r3, #0
    154e:	46bd      	mov	sp, r7
    1550:	b002      	add	sp, #8
    1552:	bd80      	pop	{r7, pc}
    1554:	00002480 	.word	0x00002480
    1558:	20000034 	.word	0x20000034
    155c:	40000800 	.word	0x40000800
    1560:	007a1200 	.word	0x007a1200
    1564:	00001455 	.word	0x00001455
    1568:	00001bed 	.word	0x00001bed
    156c:	02dc6c00 	.word	0x02dc6c00

00001570 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1570:	b580      	push	{r7, lr}
    1572:	b084      	sub	sp, #16
    1574:	af00      	add	r7, sp, #0
    1576:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1578:	4b1a      	ldr	r3, [pc, #104]	; (15e4 <system_clock_source_osc8m_set_config+0x74>)
    157a:	6a1b      	ldr	r3, [r3, #32]
    157c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    157e:	687b      	ldr	r3, [r7, #4]
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	1c1a      	adds	r2, r3, #0
    1584:	2303      	movs	r3, #3
    1586:	4013      	ands	r3, r2
    1588:	b2da      	uxtb	r2, r3
    158a:	230d      	movs	r3, #13
    158c:	18fb      	adds	r3, r7, r3
    158e:	2103      	movs	r1, #3
    1590:	400a      	ands	r2, r1
    1592:	1c10      	adds	r0, r2, #0
    1594:	781a      	ldrb	r2, [r3, #0]
    1596:	2103      	movs	r1, #3
    1598:	438a      	bics	r2, r1
    159a:	1c11      	adds	r1, r2, #0
    159c:	1c02      	adds	r2, r0, #0
    159e:	430a      	orrs	r2, r1
    15a0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	789a      	ldrb	r2, [r3, #2]
    15a6:	230c      	movs	r3, #12
    15a8:	18fb      	adds	r3, r7, r3
    15aa:	01d0      	lsls	r0, r2, #7
    15ac:	781a      	ldrb	r2, [r3, #0]
    15ae:	217f      	movs	r1, #127	; 0x7f
    15b0:	400a      	ands	r2, r1
    15b2:	1c11      	adds	r1, r2, #0
    15b4:	1c02      	adds	r2, r0, #0
    15b6:	430a      	orrs	r2, r1
    15b8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	785a      	ldrb	r2, [r3, #1]
    15be:	230c      	movs	r3, #12
    15c0:	18fb      	adds	r3, r7, r3
    15c2:	2101      	movs	r1, #1
    15c4:	400a      	ands	r2, r1
    15c6:	0190      	lsls	r0, r2, #6
    15c8:	781a      	ldrb	r2, [r3, #0]
    15ca:	2140      	movs	r1, #64	; 0x40
    15cc:	438a      	bics	r2, r1
    15ce:	1c11      	adds	r1, r2, #0
    15d0:	1c02      	adds	r2, r0, #0
    15d2:	430a      	orrs	r2, r1
    15d4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    15d6:	4b03      	ldr	r3, [pc, #12]	; (15e4 <system_clock_source_osc8m_set_config+0x74>)
    15d8:	68fa      	ldr	r2, [r7, #12]
    15da:	621a      	str	r2, [r3, #32]
}
    15dc:	46bd      	mov	sp, r7
    15de:	b004      	add	sp, #16
    15e0:	bd80      	pop	{r7, pc}
    15e2:	46c0      	nop			; (mov r8, r8)
    15e4:	40000800 	.word	0x40000800

000015e8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	b082      	sub	sp, #8
    15ec:	af00      	add	r7, sp, #0
    15ee:	1c02      	adds	r2, r0, #0
    15f0:	1dfb      	adds	r3, r7, #7
    15f2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    15f4:	1dfb      	adds	r3, r7, #7
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	2b08      	cmp	r3, #8
    15fa:	d83b      	bhi.n	1674 <system_clock_source_enable+0x8c>
    15fc:	009a      	lsls	r2, r3, #2
    15fe:	4b21      	ldr	r3, [pc, #132]	; (1684 <system_clock_source_enable+0x9c>)
    1600:	18d3      	adds	r3, r2, r3
    1602:	681b      	ldr	r3, [r3, #0]
    1604:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1606:	4b20      	ldr	r3, [pc, #128]	; (1688 <system_clock_source_enable+0xa0>)
    1608:	4a1f      	ldr	r2, [pc, #124]	; (1688 <system_clock_source_enable+0xa0>)
    160a:	6a12      	ldr	r2, [r2, #32]
    160c:	2102      	movs	r1, #2
    160e:	430a      	orrs	r2, r1
    1610:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1612:	2300      	movs	r3, #0
    1614:	e031      	b.n	167a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1616:	4b1c      	ldr	r3, [pc, #112]	; (1688 <system_clock_source_enable+0xa0>)
    1618:	4a1b      	ldr	r2, [pc, #108]	; (1688 <system_clock_source_enable+0xa0>)
    161a:	6992      	ldr	r2, [r2, #24]
    161c:	2102      	movs	r1, #2
    161e:	430a      	orrs	r2, r1
    1620:	619a      	str	r2, [r3, #24]
		break;
    1622:	e029      	b.n	1678 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1624:	4a18      	ldr	r2, [pc, #96]	; (1688 <system_clock_source_enable+0xa0>)
    1626:	4b18      	ldr	r3, [pc, #96]	; (1688 <system_clock_source_enable+0xa0>)
    1628:	8a1b      	ldrh	r3, [r3, #16]
    162a:	b29b      	uxth	r3, r3
    162c:	2102      	movs	r1, #2
    162e:	430b      	orrs	r3, r1
    1630:	b29b      	uxth	r3, r3
    1632:	8213      	strh	r3, [r2, #16]
		break;
    1634:	e020      	b.n	1678 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1636:	4a14      	ldr	r2, [pc, #80]	; (1688 <system_clock_source_enable+0xa0>)
    1638:	4b13      	ldr	r3, [pc, #76]	; (1688 <system_clock_source_enable+0xa0>)
    163a:	8a9b      	ldrh	r3, [r3, #20]
    163c:	b29b      	uxth	r3, r3
    163e:	2102      	movs	r1, #2
    1640:	430b      	orrs	r3, r1
    1642:	b29b      	uxth	r3, r3
    1644:	8293      	strh	r3, [r2, #20]
		break;
    1646:	e017      	b.n	1678 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1648:	4b10      	ldr	r3, [pc, #64]	; (168c <system_clock_source_enable+0xa4>)
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	2202      	movs	r2, #2
    164e:	431a      	orrs	r2, r3
    1650:	4b0e      	ldr	r3, [pc, #56]	; (168c <system_clock_source_enable+0xa4>)
    1652:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1654:	4b0e      	ldr	r3, [pc, #56]	; (1690 <system_clock_source_enable+0xa8>)
    1656:	4798      	blx	r3
		break;
    1658:	e00e      	b.n	1678 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    165a:	4a0b      	ldr	r2, [pc, #44]	; (1688 <system_clock_source_enable+0xa0>)
    165c:	490a      	ldr	r1, [pc, #40]	; (1688 <system_clock_source_enable+0xa0>)
    165e:	2344      	movs	r3, #68	; 0x44
    1660:	5ccb      	ldrb	r3, [r1, r3]
    1662:	b2db      	uxtb	r3, r3
    1664:	2102      	movs	r1, #2
    1666:	430b      	orrs	r3, r1
    1668:	b2d9      	uxtb	r1, r3
    166a:	2344      	movs	r3, #68	; 0x44
    166c:	54d1      	strb	r1, [r2, r3]
		break;
    166e:	e003      	b.n	1678 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1670:	2300      	movs	r3, #0
    1672:	e002      	b.n	167a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1674:	2317      	movs	r3, #23
    1676:	e000      	b.n	167a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1678:	2300      	movs	r3, #0
}
    167a:	1c18      	adds	r0, r3, #0
    167c:	46bd      	mov	sp, r7
    167e:	b002      	add	sp, #8
    1680:	bd80      	pop	{r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	000024a4 	.word	0x000024a4
    1688:	40000800 	.word	0x40000800
    168c:	20000034 	.word	0x20000034
    1690:	0000146d 	.word	0x0000146d

00001694 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    169a:	1c3b      	adds	r3, r7, #0
    169c:	2201      	movs	r2, #1
    169e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a0:	2300      	movs	r3, #0
    16a2:	607b      	str	r3, [r7, #4]
    16a4:	e009      	b.n	16ba <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16a6:	687b      	ldr	r3, [r7, #4]
    16a8:	b2da      	uxtb	r2, r3
    16aa:	1c3b      	adds	r3, r7, #0
    16ac:	1c10      	adds	r0, r2, #0
    16ae:	1c19      	adds	r1, r3, #0
    16b0:	4b05      	ldr	r3, [pc, #20]	; (16c8 <_switch_peripheral_gclk+0x34>)
    16b2:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	3301      	adds	r3, #1
    16b8:	607b      	str	r3, [r7, #4]
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	2b24      	cmp	r3, #36	; 0x24
    16be:	d9f2      	bls.n	16a6 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    16c0:	46bd      	mov	sp, r7
    16c2:	b002      	add	sp, #8
    16c4:	bd80      	pop	{r7, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	00001ac9 	.word	0x00001ac9

000016cc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    16cc:	b580      	push	{r7, lr}
    16ce:	b09c      	sub	sp, #112	; 0x70
    16d0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    16d2:	4b25      	ldr	r3, [pc, #148]	; (1768 <system_clock_init+0x9c>)
    16d4:	22c2      	movs	r2, #194	; 0xc2
    16d6:	00d2      	lsls	r2, r2, #3
    16d8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    16da:	2000      	movs	r0, #0
    16dc:	4b23      	ldr	r3, [pc, #140]	; (176c <system_clock_init+0xa0>)
    16de:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    16e0:	4b23      	ldr	r3, [pc, #140]	; (1770 <system_clock_init+0xa4>)
    16e2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    16e4:	236c      	movs	r3, #108	; 0x6c
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	1c18      	adds	r0, r3, #0
    16ea:	4b22      	ldr	r3, [pc, #136]	; (1774 <system_clock_init+0xa8>)
    16ec:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16ee:	236c      	movs	r3, #108	; 0x6c
    16f0:	18fb      	adds	r3, r7, r3
    16f2:	2200      	movs	r2, #0
    16f4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    16f6:	236c      	movs	r3, #108	; 0x6c
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	2201      	movs	r2, #1
    16fc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    16fe:	236c      	movs	r3, #108	; 0x6c
    1700:	18fb      	adds	r3, r7, r3
    1702:	2200      	movs	r2, #0
    1704:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1706:	236c      	movs	r3, #108	; 0x6c
    1708:	18fb      	adds	r3, r7, r3
    170a:	1c18      	adds	r0, r3, #0
    170c:	4b1a      	ldr	r3, [pc, #104]	; (1778 <system_clock_init+0xac>)
    170e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1710:	2006      	movs	r0, #6
    1712:	4b1a      	ldr	r3, [pc, #104]	; (177c <system_clock_init+0xb0>)
    1714:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1716:	4b1a      	ldr	r3, [pc, #104]	; (1780 <system_clock_init+0xb4>)
    1718:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    171a:	2000      	movs	r0, #0
    171c:	4b19      	ldr	r3, [pc, #100]	; (1784 <system_clock_init+0xb8>)
    171e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1720:	2000      	movs	r0, #0
    1722:	2100      	movs	r1, #0
    1724:	4b18      	ldr	r3, [pc, #96]	; (1788 <system_clock_init+0xbc>)
    1726:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1728:	2001      	movs	r0, #1
    172a:	2100      	movs	r1, #0
    172c:	4b16      	ldr	r3, [pc, #88]	; (1788 <system_clock_init+0xbc>)
    172e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1730:	1c3b      	adds	r3, r7, #0
    1732:	1c18      	adds	r0, r3, #0
    1734:	4b15      	ldr	r3, [pc, #84]	; (178c <system_clock_init+0xc0>)
    1736:	4798      	blx	r3
    1738:	1c3b      	adds	r3, r7, #0
    173a:	2206      	movs	r2, #6
    173c:	701a      	strb	r2, [r3, #0]
    173e:	1c3b      	adds	r3, r7, #0
    1740:	2201      	movs	r2, #1
    1742:	605a      	str	r2, [r3, #4]
    1744:	1c3b      	adds	r3, r7, #0
    1746:	2200      	movs	r2, #0
    1748:	721a      	strb	r2, [r3, #8]
    174a:	1c3b      	adds	r3, r7, #0
    174c:	2200      	movs	r2, #0
    174e:	725a      	strb	r2, [r3, #9]
    1750:	1c3b      	adds	r3, r7, #0
    1752:	2000      	movs	r0, #0
    1754:	1c19      	adds	r1, r3, #0
    1756:	4b0e      	ldr	r3, [pc, #56]	; (1790 <system_clock_init+0xc4>)
    1758:	4798      	blx	r3
    175a:	2000      	movs	r0, #0
    175c:	4b0d      	ldr	r3, [pc, #52]	; (1794 <system_clock_init+0xc8>)
    175e:	4798      	blx	r3
#endif
}
    1760:	46bd      	mov	sp, r7
    1762:	b01c      	add	sp, #112	; 0x70
    1764:	bd80      	pop	{r7, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	40000800 	.word	0x40000800
    176c:	00001421 	.word	0x00001421
    1770:	00001695 	.word	0x00001695
    1774:	0000138d 	.word	0x0000138d
    1778:	00001571 	.word	0x00001571
    177c:	000015e9 	.word	0x000015e9
    1780:	00001839 	.word	0x00001839
    1784:	000013ad 	.word	0x000013ad
    1788:	000013cd 	.word	0x000013cd
    178c:	00001361 	.word	0x00001361
    1790:	00001869 	.word	0x00001869
    1794:	00001989 	.word	0x00001989

00001798 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1798:	b580      	push	{r7, lr}
    179a:	b082      	sub	sp, #8
    179c:	af00      	add	r7, sp, #0
    179e:	1c02      	adds	r2, r0, #0
    17a0:	6039      	str	r1, [r7, #0]
    17a2:	1dfb      	adds	r3, r7, #7
    17a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    17a6:	1dfb      	adds	r3, r7, #7
    17a8:	781b      	ldrb	r3, [r3, #0]
    17aa:	2b01      	cmp	r3, #1
    17ac:	d00a      	beq.n	17c4 <system_apb_clock_set_mask+0x2c>
    17ae:	2b02      	cmp	r3, #2
    17b0:	d00f      	beq.n	17d2 <system_apb_clock_set_mask+0x3a>
    17b2:	2b00      	cmp	r3, #0
    17b4:	d114      	bne.n	17e0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    17b6:	4b0e      	ldr	r3, [pc, #56]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17b8:	4a0d      	ldr	r2, [pc, #52]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17ba:	6991      	ldr	r1, [r2, #24]
    17bc:	683a      	ldr	r2, [r7, #0]
    17be:	430a      	orrs	r2, r1
    17c0:	619a      	str	r2, [r3, #24]
			break;
    17c2:	e00f      	b.n	17e4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    17c4:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17c6:	4a0a      	ldr	r2, [pc, #40]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17c8:	69d1      	ldr	r1, [r2, #28]
    17ca:	683a      	ldr	r2, [r7, #0]
    17cc:	430a      	orrs	r2, r1
    17ce:	61da      	str	r2, [r3, #28]
			break;
    17d0:	e008      	b.n	17e4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    17d2:	4b07      	ldr	r3, [pc, #28]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17d4:	4a06      	ldr	r2, [pc, #24]	; (17f0 <system_apb_clock_set_mask+0x58>)
    17d6:	6a11      	ldr	r1, [r2, #32]
    17d8:	683a      	ldr	r2, [r7, #0]
    17da:	430a      	orrs	r2, r1
    17dc:	621a      	str	r2, [r3, #32]
			break;
    17de:	e001      	b.n	17e4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    17e0:	2317      	movs	r3, #23
    17e2:	e000      	b.n	17e6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    17e4:	2300      	movs	r3, #0
}
    17e6:	1c18      	adds	r0, r3, #0
    17e8:	46bd      	mov	sp, r7
    17ea:	b002      	add	sp, #8
    17ec:	bd80      	pop	{r7, pc}
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	40000400 	.word	0x40000400

000017f4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    17f4:	b580      	push	{r7, lr}
    17f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    17f8:	4b01      	ldr	r3, [pc, #4]	; (1800 <system_interrupt_enter_critical_section+0xc>)
    17fa:	4798      	blx	r3
}
    17fc:	46bd      	mov	sp, r7
    17fe:	bd80      	pop	{r7, pc}
    1800:	00000111 	.word	0x00000111

00001804 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1804:	b580      	push	{r7, lr}
    1806:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1808:	4b01      	ldr	r3, [pc, #4]	; (1810 <system_interrupt_leave_critical_section+0xc>)
    180a:	4798      	blx	r3
}
    180c:	46bd      	mov	sp, r7
    180e:	bd80      	pop	{r7, pc}
    1810:	00000161 	.word	0x00000161

00001814 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1814:	b580      	push	{r7, lr}
    1816:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1818:	4b06      	ldr	r3, [pc, #24]	; (1834 <system_gclk_is_syncing+0x20>)
    181a:	785b      	ldrb	r3, [r3, #1]
    181c:	b2db      	uxtb	r3, r3
    181e:	b2db      	uxtb	r3, r3
    1820:	b25b      	sxtb	r3, r3
    1822:	2b00      	cmp	r3, #0
    1824:	da01      	bge.n	182a <system_gclk_is_syncing+0x16>
		return true;
    1826:	2301      	movs	r3, #1
    1828:	e000      	b.n	182c <system_gclk_is_syncing+0x18>
	}

	return false;
    182a:	2300      	movs	r3, #0
}
    182c:	1c18      	adds	r0, r3, #0
    182e:	46bd      	mov	sp, r7
    1830:	bd80      	pop	{r7, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	40000c00 	.word	0x40000c00

00001838 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1838:	b580      	push	{r7, lr}
    183a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    183c:	2000      	movs	r0, #0
    183e:	2108      	movs	r1, #8
    1840:	4b07      	ldr	r3, [pc, #28]	; (1860 <system_gclk_init+0x28>)
    1842:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1844:	4b07      	ldr	r3, [pc, #28]	; (1864 <system_gclk_init+0x2c>)
    1846:	2201      	movs	r2, #1
    1848:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	4b05      	ldr	r3, [pc, #20]	; (1864 <system_gclk_init+0x2c>)
    184e:	781b      	ldrb	r3, [r3, #0]
    1850:	b2db      	uxtb	r3, r3
    1852:	1c1a      	adds	r2, r3, #0
    1854:	2301      	movs	r3, #1
    1856:	4013      	ands	r3, r2
    1858:	d1f8      	bne.n	184c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    185a:	46bd      	mov	sp, r7
    185c:	bd80      	pop	{r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	00001799 	.word	0x00001799
    1864:	40000c00 	.word	0x40000c00

00001868 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1868:	b580      	push	{r7, lr}
    186a:	b086      	sub	sp, #24
    186c:	af00      	add	r7, sp, #0
    186e:	1c02      	adds	r2, r0, #0
    1870:	6039      	str	r1, [r7, #0]
    1872:	1dfb      	adds	r3, r7, #7
    1874:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1876:	1dfb      	adds	r3, r7, #7
    1878:	781b      	ldrb	r3, [r3, #0]
    187a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    187c:	1dfb      	adds	r3, r7, #7
    187e:	781b      	ldrb	r3, [r3, #0]
    1880:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1882:	683b      	ldr	r3, [r7, #0]
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	021b      	lsls	r3, r3, #8
    1888:	1c1a      	adds	r2, r3, #0
    188a:	697b      	ldr	r3, [r7, #20]
    188c:	4313      	orrs	r3, r2
    188e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1890:	683b      	ldr	r3, [r7, #0]
    1892:	785b      	ldrb	r3, [r3, #1]
    1894:	2b00      	cmp	r3, #0
    1896:	d004      	beq.n	18a2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1898:	697b      	ldr	r3, [r7, #20]
    189a:	2280      	movs	r2, #128	; 0x80
    189c:	02d2      	lsls	r2, r2, #11
    189e:	4313      	orrs	r3, r2
    18a0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18a2:	683b      	ldr	r3, [r7, #0]
    18a4:	7a5b      	ldrb	r3, [r3, #9]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d004      	beq.n	18b4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    18aa:	697b      	ldr	r3, [r7, #20]
    18ac:	2280      	movs	r2, #128	; 0x80
    18ae:	0312      	lsls	r2, r2, #12
    18b0:	4313      	orrs	r3, r2
    18b2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    18b4:	683b      	ldr	r3, [r7, #0]
    18b6:	685b      	ldr	r3, [r3, #4]
    18b8:	2b01      	cmp	r3, #1
    18ba:	d92c      	bls.n	1916 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    18bc:	683b      	ldr	r3, [r7, #0]
    18be:	685a      	ldr	r2, [r3, #4]
    18c0:	683b      	ldr	r3, [r7, #0]
    18c2:	685b      	ldr	r3, [r3, #4]
    18c4:	3b01      	subs	r3, #1
    18c6:	4013      	ands	r3, r2
    18c8:	d11a      	bne.n	1900 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18ce:	2302      	movs	r3, #2
    18d0:	60bb      	str	r3, [r7, #8]
    18d2:	e005      	b.n	18e0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    18d4:	68fb      	ldr	r3, [r7, #12]
    18d6:	3301      	adds	r3, #1
    18d8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    18da:	68bb      	ldr	r3, [r7, #8]
    18dc:	005b      	lsls	r3, r3, #1
    18de:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18e0:	683b      	ldr	r3, [r7, #0]
    18e2:	685a      	ldr	r2, [r3, #4]
    18e4:	68bb      	ldr	r3, [r7, #8]
    18e6:	429a      	cmp	r2, r3
    18e8:	d8f4      	bhi.n	18d4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18ea:	68fb      	ldr	r3, [r7, #12]
    18ec:	021b      	lsls	r3, r3, #8
    18ee:	693a      	ldr	r2, [r7, #16]
    18f0:	4313      	orrs	r3, r2
    18f2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18f4:	697b      	ldr	r3, [r7, #20]
    18f6:	2280      	movs	r2, #128	; 0x80
    18f8:	0352      	lsls	r2, r2, #13
    18fa:	4313      	orrs	r3, r2
    18fc:	617b      	str	r3, [r7, #20]
    18fe:	e00a      	b.n	1916 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1900:	683b      	ldr	r3, [r7, #0]
    1902:	685b      	ldr	r3, [r3, #4]
    1904:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1906:	693a      	ldr	r2, [r7, #16]
    1908:	4313      	orrs	r3, r2
    190a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    190c:	697b      	ldr	r3, [r7, #20]
    190e:	2280      	movs	r2, #128	; 0x80
    1910:	0292      	lsls	r2, r2, #10
    1912:	4313      	orrs	r3, r2
    1914:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1916:	683b      	ldr	r3, [r7, #0]
    1918:	7a1b      	ldrb	r3, [r3, #8]
    191a:	2b00      	cmp	r3, #0
    191c:	d004      	beq.n	1928 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    191e:	697b      	ldr	r3, [r7, #20]
    1920:	2280      	movs	r2, #128	; 0x80
    1922:	0392      	lsls	r2, r2, #14
    1924:	4313      	orrs	r3, r2
    1926:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1928:	46c0      	nop			; (mov r8, r8)
    192a:	4b12      	ldr	r3, [pc, #72]	; (1974 <system_gclk_gen_set_config+0x10c>)
    192c:	4798      	blx	r3
    192e:	1e03      	subs	r3, r0, #0
    1930:	d1fb      	bne.n	192a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1932:	4b11      	ldr	r3, [pc, #68]	; (1978 <system_gclk_gen_set_config+0x110>)
    1934:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1936:	4a11      	ldr	r2, [pc, #68]	; (197c <system_gclk_gen_set_config+0x114>)
    1938:	1dfb      	adds	r3, r7, #7
    193a:	781b      	ldrb	r3, [r3, #0]
    193c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	4b0c      	ldr	r3, [pc, #48]	; (1974 <system_gclk_gen_set_config+0x10c>)
    1942:	4798      	blx	r3
    1944:	1e03      	subs	r3, r0, #0
    1946:	d1fb      	bne.n	1940 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1948:	4b0d      	ldr	r3, [pc, #52]	; (1980 <system_gclk_gen_set_config+0x118>)
    194a:	693a      	ldr	r2, [r7, #16]
    194c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	4b08      	ldr	r3, [pc, #32]	; (1974 <system_gclk_gen_set_config+0x10c>)
    1952:	4798      	blx	r3
    1954:	1e03      	subs	r3, r0, #0
    1956:	d1fb      	bne.n	1950 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1958:	4b09      	ldr	r3, [pc, #36]	; (1980 <system_gclk_gen_set_config+0x118>)
    195a:	4a09      	ldr	r2, [pc, #36]	; (1980 <system_gclk_gen_set_config+0x118>)
    195c:	6851      	ldr	r1, [r2, #4]
    195e:	2280      	movs	r2, #128	; 0x80
    1960:	0252      	lsls	r2, r2, #9
    1962:	4011      	ands	r1, r2
    1964:	697a      	ldr	r2, [r7, #20]
    1966:	430a      	orrs	r2, r1
    1968:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    196a:	4b06      	ldr	r3, [pc, #24]	; (1984 <system_gclk_gen_set_config+0x11c>)
    196c:	4798      	blx	r3
}
    196e:	46bd      	mov	sp, r7
    1970:	b006      	add	sp, #24
    1972:	bd80      	pop	{r7, pc}
    1974:	00001815 	.word	0x00001815
    1978:	000017f5 	.word	0x000017f5
    197c:	40000c08 	.word	0x40000c08
    1980:	40000c00 	.word	0x40000c00
    1984:	00001805 	.word	0x00001805

00001988 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1988:	b580      	push	{r7, lr}
    198a:	b082      	sub	sp, #8
    198c:	af00      	add	r7, sp, #0
    198e:	1c02      	adds	r2, r0, #0
    1990:	1dfb      	adds	r3, r7, #7
    1992:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1994:	46c0      	nop			; (mov r8, r8)
    1996:	4b0d      	ldr	r3, [pc, #52]	; (19cc <system_gclk_gen_enable+0x44>)
    1998:	4798      	blx	r3
    199a:	1e03      	subs	r3, r0, #0
    199c:	d1fb      	bne.n	1996 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    199e:	4b0c      	ldr	r3, [pc, #48]	; (19d0 <system_gclk_gen_enable+0x48>)
    19a0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19a2:	4a0c      	ldr	r2, [pc, #48]	; (19d4 <system_gclk_gen_enable+0x4c>)
    19a4:	1dfb      	adds	r3, r7, #7
    19a6:	781b      	ldrb	r3, [r3, #0]
    19a8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	4b07      	ldr	r3, [pc, #28]	; (19cc <system_gclk_gen_enable+0x44>)
    19ae:	4798      	blx	r3
    19b0:	1e03      	subs	r3, r0, #0
    19b2:	d1fb      	bne.n	19ac <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19b4:	4b08      	ldr	r3, [pc, #32]	; (19d8 <system_gclk_gen_enable+0x50>)
    19b6:	4a08      	ldr	r2, [pc, #32]	; (19d8 <system_gclk_gen_enable+0x50>)
    19b8:	6852      	ldr	r2, [r2, #4]
    19ba:	2180      	movs	r1, #128	; 0x80
    19bc:	0249      	lsls	r1, r1, #9
    19be:	430a      	orrs	r2, r1
    19c0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    19c2:	4b06      	ldr	r3, [pc, #24]	; (19dc <system_gclk_gen_enable+0x54>)
    19c4:	4798      	blx	r3
}
    19c6:	46bd      	mov	sp, r7
    19c8:	b002      	add	sp, #8
    19ca:	bd80      	pop	{r7, pc}
    19cc:	00001815 	.word	0x00001815
    19d0:	000017f5 	.word	0x000017f5
    19d4:	40000c04 	.word	0x40000c04
    19d8:	40000c00 	.word	0x40000c00
    19dc:	00001805 	.word	0x00001805

000019e0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19e0:	b580      	push	{r7, lr}
    19e2:	b086      	sub	sp, #24
    19e4:	af00      	add	r7, sp, #0
    19e6:	1c02      	adds	r2, r0, #0
    19e8:	1dfb      	adds	r3, r7, #7
    19ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    19ec:	46c0      	nop			; (mov r8, r8)
    19ee:	4b2e      	ldr	r3, [pc, #184]	; (1aa8 <system_gclk_gen_get_hz+0xc8>)
    19f0:	4798      	blx	r3
    19f2:	1e03      	subs	r3, r0, #0
    19f4:	d1fb      	bne.n	19ee <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    19f6:	4b2d      	ldr	r3, [pc, #180]	; (1aac <system_gclk_gen_get_hz+0xcc>)
    19f8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19fa:	4a2d      	ldr	r2, [pc, #180]	; (1ab0 <system_gclk_gen_get_hz+0xd0>)
    19fc:	1dfb      	adds	r3, r7, #7
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	4b28      	ldr	r3, [pc, #160]	; (1aa8 <system_gclk_gen_get_hz+0xc8>)
    1a06:	4798      	blx	r3
    1a08:	1e03      	subs	r3, r0, #0
    1a0a:	d1fb      	bne.n	1a04 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a0c:	4b29      	ldr	r3, [pc, #164]	; (1ab4 <system_gclk_gen_get_hz+0xd4>)
    1a0e:	685b      	ldr	r3, [r3, #4]
    1a10:	0a1b      	lsrs	r3, r3, #8
    1a12:	1c1a      	adds	r2, r3, #0
    1a14:	231f      	movs	r3, #31
    1a16:	4013      	ands	r3, r2
    1a18:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a1a:	1c18      	adds	r0, r3, #0
    1a1c:	4b26      	ldr	r3, [pc, #152]	; (1ab8 <system_gclk_gen_get_hz+0xd8>)
    1a1e:	4798      	blx	r3
    1a20:	1c03      	adds	r3, r0, #0
    1a22:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a24:	4a22      	ldr	r2, [pc, #136]	; (1ab0 <system_gclk_gen_get_hz+0xd0>)
    1a26:	1dfb      	adds	r3, r7, #7
    1a28:	781b      	ldrb	r3, [r3, #0]
    1a2a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a2c:	4b21      	ldr	r3, [pc, #132]	; (1ab4 <system_gclk_gen_get_hz+0xd4>)
    1a2e:	685b      	ldr	r3, [r3, #4]
    1a30:	0d1b      	lsrs	r3, r3, #20
    1a32:	1c1a      	adds	r2, r3, #0
    1a34:	2301      	movs	r3, #1
    1a36:	4013      	ands	r3, r2
    1a38:	b2da      	uxtb	r2, r3
    1a3a:	2313      	movs	r3, #19
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a40:	4a1e      	ldr	r2, [pc, #120]	; (1abc <system_gclk_gen_get_hz+0xdc>)
    1a42:	1dfb      	adds	r3, r7, #7
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	4b17      	ldr	r3, [pc, #92]	; (1aa8 <system_gclk_gen_get_hz+0xc8>)
    1a4c:	4798      	blx	r3
    1a4e:	1e03      	subs	r3, r0, #0
    1a50:	d1fb      	bne.n	1a4a <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a52:	4b18      	ldr	r3, [pc, #96]	; (1ab4 <system_gclk_gen_get_hz+0xd4>)
    1a54:	689b      	ldr	r3, [r3, #8]
    1a56:	0a1b      	lsrs	r3, r3, #8
    1a58:	1c1a      	adds	r2, r3, #0
    1a5a:	2300      	movs	r3, #0
    1a5c:	439a      	bics	r2, r3
    1a5e:	1c13      	adds	r3, r2, #0
    1a60:	b29b      	uxth	r3, r3
    1a62:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1a64:	4b16      	ldr	r3, [pc, #88]	; (1ac0 <system_gclk_gen_get_hz+0xe0>)
    1a66:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a68:	2313      	movs	r3, #19
    1a6a:	18fb      	adds	r3, r7, r3
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d109      	bne.n	1a86 <system_gclk_gen_get_hz+0xa6>
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	2b01      	cmp	r3, #1
    1a76:	d906      	bls.n	1a86 <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    1a78:	4b12      	ldr	r3, [pc, #72]	; (1ac4 <system_gclk_gen_get_hz+0xe4>)
    1a7a:	6978      	ldr	r0, [r7, #20]
    1a7c:	68f9      	ldr	r1, [r7, #12]
    1a7e:	4798      	blx	r3
    1a80:	1c03      	adds	r3, r0, #0
    1a82:	617b      	str	r3, [r7, #20]
    1a84:	e00a      	b.n	1a9c <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    1a86:	2313      	movs	r3, #19
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d005      	beq.n	1a9c <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	3301      	adds	r3, #1
    1a94:	1c1a      	adds	r2, r3, #0
    1a96:	697b      	ldr	r3, [r7, #20]
    1a98:	40d3      	lsrs	r3, r2
    1a9a:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1a9c:	697b      	ldr	r3, [r7, #20]
}
    1a9e:	1c18      	adds	r0, r3, #0
    1aa0:	46bd      	mov	sp, r7
    1aa2:	b006      	add	sp, #24
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	00001815 	.word	0x00001815
    1aac:	000017f5 	.word	0x000017f5
    1ab0:	40000c04 	.word	0x40000c04
    1ab4:	40000c00 	.word	0x40000c00
    1ab8:	000014b1 	.word	0x000014b1
    1abc:	40000c08 	.word	0x40000c08
    1ac0:	00001805 	.word	0x00001805
    1ac4:	000022e9 	.word	0x000022e9

00001ac8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b084      	sub	sp, #16
    1acc:	af00      	add	r7, sp, #0
    1ace:	1c02      	adds	r2, r0, #0
    1ad0:	6039      	str	r1, [r7, #0]
    1ad2:	1dfb      	adds	r3, r7, #7
    1ad4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1ad6:	1dfb      	adds	r3, r7, #7
    1ad8:	781b      	ldrb	r3, [r3, #0]
    1ada:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1adc:	683b      	ldr	r3, [r7, #0]
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	021b      	lsls	r3, r3, #8
    1ae2:	1c1a      	adds	r2, r3, #0
    1ae4:	68fb      	ldr	r3, [r7, #12]
    1ae6:	4313      	orrs	r3, r2
    1ae8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1aea:	1dfb      	adds	r3, r7, #7
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	1c18      	adds	r0, r3, #0
    1af0:	4b04      	ldr	r3, [pc, #16]	; (1b04 <system_gclk_chan_set_config+0x3c>)
    1af2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1af4:	4b04      	ldr	r3, [pc, #16]	; (1b08 <system_gclk_chan_set_config+0x40>)
    1af6:	68fa      	ldr	r2, [r7, #12]
    1af8:	b292      	uxth	r2, r2
    1afa:	805a      	strh	r2, [r3, #2]
}
    1afc:	46bd      	mov	sp, r7
    1afe:	b004      	add	sp, #16
    1b00:	bd80      	pop	{r7, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00001b51 	.word	0x00001b51
    1b08:	40000c00 	.word	0x40000c00

00001b0c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	af00      	add	r7, sp, #0
    1b12:	1c02      	adds	r2, r0, #0
    1b14:	1dfb      	adds	r3, r7, #7
    1b16:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1b18:	4b09      	ldr	r3, [pc, #36]	; (1b40 <system_gclk_chan_enable+0x34>)
    1b1a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b1c:	4a09      	ldr	r2, [pc, #36]	; (1b44 <system_gclk_chan_enable+0x38>)
    1b1e:	1dfb      	adds	r3, r7, #7
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1b24:	4908      	ldr	r1, [pc, #32]	; (1b48 <system_gclk_chan_enable+0x3c>)
    1b26:	4b08      	ldr	r3, [pc, #32]	; (1b48 <system_gclk_chan_enable+0x3c>)
    1b28:	885b      	ldrh	r3, [r3, #2]
    1b2a:	b29b      	uxth	r3, r3
    1b2c:	2280      	movs	r2, #128	; 0x80
    1b2e:	01d2      	lsls	r2, r2, #7
    1b30:	4313      	orrs	r3, r2
    1b32:	b29b      	uxth	r3, r3
    1b34:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1b36:	4b05      	ldr	r3, [pc, #20]	; (1b4c <system_gclk_chan_enable+0x40>)
    1b38:	4798      	blx	r3
}
    1b3a:	46bd      	mov	sp, r7
    1b3c:	b002      	add	sp, #8
    1b3e:	bd80      	pop	{r7, pc}
    1b40:	000017f5 	.word	0x000017f5
    1b44:	40000c02 	.word	0x40000c02
    1b48:	40000c00 	.word	0x40000c00
    1b4c:	00001805 	.word	0x00001805

00001b50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1b50:	b580      	push	{r7, lr}
    1b52:	b084      	sub	sp, #16
    1b54:	af00      	add	r7, sp, #0
    1b56:	1c02      	adds	r2, r0, #0
    1b58:	1dfb      	adds	r3, r7, #7
    1b5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1b5c:	4b1d      	ldr	r3, [pc, #116]	; (1bd4 <system_gclk_chan_disable+0x84>)
    1b5e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b60:	4a1d      	ldr	r2, [pc, #116]	; (1bd8 <system_gclk_chan_disable+0x88>)
    1b62:	1dfb      	adds	r3, r7, #7
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1b68:	4b1c      	ldr	r3, [pc, #112]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1b6a:	885b      	ldrh	r3, [r3, #2]
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	0a1b      	lsrs	r3, r3, #8
    1b70:	1c1a      	adds	r2, r3, #0
    1b72:	230f      	movs	r3, #15
    1b74:	4013      	ands	r3, r2
    1b76:	b2db      	uxtb	r3, r3
    1b78:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1b7a:	4b18      	ldr	r3, [pc, #96]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1b7c:	885a      	ldrh	r2, [r3, #2]
    1b7e:	4918      	ldr	r1, [pc, #96]	; (1be0 <system_gclk_chan_disable+0x90>)
    1b80:	400a      	ands	r2, r1
    1b82:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1b84:	4a15      	ldr	r2, [pc, #84]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1b86:	4b15      	ldr	r3, [pc, #84]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1b88:	885b      	ldrh	r3, [r3, #2]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	4915      	ldr	r1, [pc, #84]	; (1be4 <system_gclk_chan_disable+0x94>)
    1b8e:	400b      	ands	r3, r1
    1b90:	b29b      	uxth	r3, r3
    1b92:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1b94:	46c0      	nop			; (mov r8, r8)
    1b96:	4b11      	ldr	r3, [pc, #68]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1b98:	885b      	ldrh	r3, [r3, #2]
    1b9a:	b29b      	uxth	r3, r3
    1b9c:	1c1a      	adds	r2, r3, #0
    1b9e:	2380      	movs	r3, #128	; 0x80
    1ba0:	01db      	lsls	r3, r3, #7
    1ba2:	4013      	ands	r3, r2
    1ba4:	d1f7      	bne.n	1b96 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ba6:	4b0d      	ldr	r3, [pc, #52]	; (1bdc <system_gclk_chan_disable+0x8c>)
    1ba8:	68fa      	ldr	r2, [r7, #12]
    1baa:	b2d2      	uxtb	r2, r2
    1bac:	1c11      	adds	r1, r2, #0
    1bae:	220f      	movs	r2, #15
    1bb0:	400a      	ands	r2, r1
    1bb2:	b2d2      	uxtb	r2, r2
    1bb4:	1c11      	adds	r1, r2, #0
    1bb6:	220f      	movs	r2, #15
    1bb8:	400a      	ands	r2, r1
    1bba:	0210      	lsls	r0, r2, #8
    1bbc:	885a      	ldrh	r2, [r3, #2]
    1bbe:	4908      	ldr	r1, [pc, #32]	; (1be0 <system_gclk_chan_disable+0x90>)
    1bc0:	400a      	ands	r2, r1
    1bc2:	1c11      	adds	r1, r2, #0
    1bc4:	1c02      	adds	r2, r0, #0
    1bc6:	430a      	orrs	r2, r1
    1bc8:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1bca:	4b07      	ldr	r3, [pc, #28]	; (1be8 <system_gclk_chan_disable+0x98>)
    1bcc:	4798      	blx	r3
}
    1bce:	46bd      	mov	sp, r7
    1bd0:	b004      	add	sp, #16
    1bd2:	bd80      	pop	{r7, pc}
    1bd4:	000017f5 	.word	0x000017f5
    1bd8:	40000c02 	.word	0x40000c02
    1bdc:	40000c00 	.word	0x40000c00
    1be0:	fffff0ff 	.word	0xfffff0ff
    1be4:	ffffbfff 	.word	0xffffbfff
    1be8:	00001805 	.word	0x00001805

00001bec <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1bec:	b580      	push	{r7, lr}
    1bee:	b084      	sub	sp, #16
    1bf0:	af00      	add	r7, sp, #0
    1bf2:	1c02      	adds	r2, r0, #0
    1bf4:	1dfb      	adds	r3, r7, #7
    1bf6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1bf8:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <system_gclk_chan_get_hz+0x48>)
    1bfa:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bfc:	4a0e      	ldr	r2, [pc, #56]	; (1c38 <system_gclk_chan_get_hz+0x4c>)
    1bfe:	1dfb      	adds	r3, r7, #7
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c04:	4b0d      	ldr	r3, [pc, #52]	; (1c3c <system_gclk_chan_get_hz+0x50>)
    1c06:	885b      	ldrh	r3, [r3, #2]
    1c08:	b29b      	uxth	r3, r3
    1c0a:	0a1b      	lsrs	r3, r3, #8
    1c0c:	1c1a      	adds	r2, r3, #0
    1c0e:	230f      	movs	r3, #15
    1c10:	4013      	ands	r3, r2
    1c12:	b2da      	uxtb	r2, r3
    1c14:	230f      	movs	r3, #15
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1c1a:	4b09      	ldr	r3, [pc, #36]	; (1c40 <system_gclk_chan_get_hz+0x54>)
    1c1c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c1e:	230f      	movs	r3, #15
    1c20:	18fb      	adds	r3, r7, r3
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	1c18      	adds	r0, r3, #0
    1c26:	4b07      	ldr	r3, [pc, #28]	; (1c44 <system_gclk_chan_get_hz+0x58>)
    1c28:	4798      	blx	r3
    1c2a:	1c03      	adds	r3, r0, #0
}
    1c2c:	1c18      	adds	r0, r3, #0
    1c2e:	46bd      	mov	sp, r7
    1c30:	b004      	add	sp, #16
    1c32:	bd80      	pop	{r7, pc}
    1c34:	000017f5 	.word	0x000017f5
    1c38:	40000c02 	.word	0x40000c02
    1c3c:	40000c00 	.word	0x40000c00
    1c40:	00001805 	.word	0x00001805
    1c44:	000019e1 	.word	0x000019e1

00001c48 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c48:	b580      	push	{r7, lr}
    1c4a:	b084      	sub	sp, #16
    1c4c:	af00      	add	r7, sp, #0
    1c4e:	1c02      	adds	r2, r0, #0
    1c50:	1dfb      	adds	r3, r7, #7
    1c52:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c54:	230f      	movs	r3, #15
    1c56:	18fb      	adds	r3, r7, r3
    1c58:	1dfa      	adds	r2, r7, #7
    1c5a:	7812      	ldrb	r2, [r2, #0]
    1c5c:	09d2      	lsrs	r2, r2, #7
    1c5e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c60:	230e      	movs	r3, #14
    1c62:	18fb      	adds	r3, r7, r3
    1c64:	1dfa      	adds	r2, r7, #7
    1c66:	7812      	ldrb	r2, [r2, #0]
    1c68:	0952      	lsrs	r2, r2, #5
    1c6a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c6c:	4b0d      	ldr	r3, [pc, #52]	; (1ca4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c6e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c70:	230f      	movs	r3, #15
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	781b      	ldrb	r3, [r3, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d10f      	bne.n	1c9a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c7a:	230f      	movs	r3, #15
    1c7c:	18fb      	adds	r3, r7, r3
    1c7e:	781b      	ldrb	r3, [r3, #0]
    1c80:	009b      	lsls	r3, r3, #2
    1c82:	2210      	movs	r2, #16
    1c84:	4694      	mov	ip, r2
    1c86:	44bc      	add	ip, r7
    1c88:	4463      	add	r3, ip
    1c8a:	3b08      	subs	r3, #8
    1c8c:	681a      	ldr	r2, [r3, #0]
    1c8e:	230e      	movs	r3, #14
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	01db      	lsls	r3, r3, #7
    1c96:	18d3      	adds	r3, r2, r3
    1c98:	e000      	b.n	1c9c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1c9a:	2300      	movs	r3, #0
	}
}
    1c9c:	1c18      	adds	r0, r3, #0
    1c9e:	46bd      	mov	sp, r7
    1ca0:	b004      	add	sp, #16
    1ca2:	bd80      	pop	{r7, pc}
    1ca4:	41004400 	.word	0x41004400

00001ca8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ca8:	b580      	push	{r7, lr}
    1caa:	b088      	sub	sp, #32
    1cac:	af00      	add	r7, sp, #0
    1cae:	60f8      	str	r0, [r7, #12]
    1cb0:	60b9      	str	r1, [r7, #8]
    1cb2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1cb4:	2300      	movs	r3, #0
    1cb6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cb8:	687b      	ldr	r3, [r7, #4]
    1cba:	78db      	ldrb	r3, [r3, #3]
    1cbc:	2201      	movs	r2, #1
    1cbe:	4053      	eors	r3, r2
    1cc0:	b2db      	uxtb	r3, r3
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d035      	beq.n	1d32 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1cc6:	687b      	ldr	r3, [r7, #4]
    1cc8:	781b      	ldrb	r3, [r3, #0]
    1cca:	2b80      	cmp	r3, #128	; 0x80
    1ccc:	d00b      	beq.n	1ce6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1cce:	69fb      	ldr	r3, [r7, #28]
    1cd0:	2280      	movs	r2, #128	; 0x80
    1cd2:	0252      	lsls	r2, r2, #9
    1cd4:	4313      	orrs	r3, r2
    1cd6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1cd8:	687b      	ldr	r3, [r7, #4]
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	061b      	lsls	r3, r3, #24
    1cde:	1c1a      	adds	r2, r3, #0
    1ce0:	69fb      	ldr	r3, [r7, #28]
    1ce2:	4313      	orrs	r3, r2
    1ce4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ce6:	687b      	ldr	r3, [r7, #4]
    1ce8:	785b      	ldrb	r3, [r3, #1]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d003      	beq.n	1cf6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cf2:	2b02      	cmp	r3, #2
    1cf4:	d110      	bne.n	1d18 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cf6:	69fb      	ldr	r3, [r7, #28]
    1cf8:	2280      	movs	r2, #128	; 0x80
    1cfa:	0292      	lsls	r2, r2, #10
    1cfc:	4313      	orrs	r3, r2
    1cfe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	789b      	ldrb	r3, [r3, #2]
    1d04:	2b00      	cmp	r3, #0
    1d06:	d004      	beq.n	1d12 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d08:	69fb      	ldr	r3, [r7, #28]
    1d0a:	2280      	movs	r2, #128	; 0x80
    1d0c:	02d2      	lsls	r2, r2, #11
    1d0e:	4313      	orrs	r3, r2
    1d10:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d12:	68fb      	ldr	r3, [r7, #12]
    1d14:	68ba      	ldr	r2, [r7, #8]
    1d16:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	785b      	ldrb	r3, [r3, #1]
    1d1c:	2b01      	cmp	r3, #1
    1d1e:	d003      	beq.n	1d28 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d24:	2b02      	cmp	r3, #2
    1d26:	d107      	bne.n	1d38 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d28:	69fb      	ldr	r3, [r7, #28]
    1d2a:	4a21      	ldr	r2, [pc, #132]	; (1db0 <_system_pinmux_config+0x108>)
    1d2c:	4013      	ands	r3, r2
    1d2e:	61fb      	str	r3, [r7, #28]
    1d30:	e002      	b.n	1d38 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1d32:	68fb      	ldr	r3, [r7, #12]
    1d34:	68ba      	ldr	r2, [r7, #8]
    1d36:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d38:	68bb      	ldr	r3, [r7, #8]
    1d3a:	041b      	lsls	r3, r3, #16
    1d3c:	0c1b      	lsrs	r3, r3, #16
    1d3e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d40:	68bb      	ldr	r3, [r7, #8]
    1d42:	0c1b      	lsrs	r3, r3, #16
    1d44:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d46:	69ba      	ldr	r2, [r7, #24]
    1d48:	69fb      	ldr	r3, [r7, #28]
    1d4a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d4c:	22a0      	movs	r2, #160	; 0xa0
    1d4e:	05d2      	lsls	r2, r2, #23
    1d50:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d56:	697a      	ldr	r2, [r7, #20]
    1d58:	69fb      	ldr	r3, [r7, #28]
    1d5a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d5c:	22d0      	movs	r2, #208	; 0xd0
    1d5e:	0612      	lsls	r2, r2, #24
    1d60:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d62:	68fb      	ldr	r3, [r7, #12]
    1d64:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	78db      	ldrb	r3, [r3, #3]
    1d6a:	2201      	movs	r2, #1
    1d6c:	4053      	eors	r3, r2
    1d6e:	b2db      	uxtb	r3, r3
    1d70:	2b00      	cmp	r3, #0
    1d72:	d01a      	beq.n	1daa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d74:	69fa      	ldr	r2, [r7, #28]
    1d76:	2380      	movs	r3, #128	; 0x80
    1d78:	02db      	lsls	r3, r3, #11
    1d7a:	4013      	ands	r3, r2
    1d7c:	d00a      	beq.n	1d94 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	789b      	ldrb	r3, [r3, #2]
    1d82:	2b01      	cmp	r3, #1
    1d84:	d103      	bne.n	1d8e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	68ba      	ldr	r2, [r7, #8]
    1d8a:	619a      	str	r2, [r3, #24]
    1d8c:	e002      	b.n	1d94 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1d8e:	68fb      	ldr	r3, [r7, #12]
    1d90:	68ba      	ldr	r2, [r7, #8]
    1d92:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	785b      	ldrb	r3, [r3, #1]
    1d98:	2b01      	cmp	r3, #1
    1d9a:	d003      	beq.n	1da4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1d9c:	687b      	ldr	r3, [r7, #4]
    1d9e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1da0:	2b02      	cmp	r3, #2
    1da2:	d102      	bne.n	1daa <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1da4:	68fb      	ldr	r3, [r7, #12]
    1da6:	68ba      	ldr	r2, [r7, #8]
    1da8:	609a      	str	r2, [r3, #8]
		}
	}
}
    1daa:	46bd      	mov	sp, r7
    1dac:	b008      	add	sp, #32
    1dae:	bd80      	pop	{r7, pc}
    1db0:	fffbffff 	.word	0xfffbffff

00001db4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1db4:	b580      	push	{r7, lr}
    1db6:	b084      	sub	sp, #16
    1db8:	af00      	add	r7, sp, #0
    1dba:	1c02      	adds	r2, r0, #0
    1dbc:	6039      	str	r1, [r7, #0]
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1dc2:	1dfb      	adds	r3, r7, #7
    1dc4:	781b      	ldrb	r3, [r3, #0]
    1dc6:	1c18      	adds	r0, r3, #0
    1dc8:	4b0b      	ldr	r3, [pc, #44]	; (1df8 <system_pinmux_pin_set_config+0x44>)
    1dca:	4798      	blx	r3
    1dcc:	1c03      	adds	r3, r0, #0
    1dce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	221f      	movs	r2, #31
    1dd6:	4013      	ands	r3, r2
    1dd8:	2201      	movs	r2, #1
    1dda:	409a      	lsls	r2, r3
    1ddc:	1c13      	adds	r3, r2, #0
    1dde:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1de0:	68f9      	ldr	r1, [r7, #12]
    1de2:	68ba      	ldr	r2, [r7, #8]
    1de4:	683b      	ldr	r3, [r7, #0]
    1de6:	1c08      	adds	r0, r1, #0
    1de8:	1c11      	adds	r1, r2, #0
    1dea:	1c1a      	adds	r2, r3, #0
    1dec:	4b03      	ldr	r3, [pc, #12]	; (1dfc <system_pinmux_pin_set_config+0x48>)
    1dee:	4798      	blx	r3
}
    1df0:	46bd      	mov	sp, r7
    1df2:	b004      	add	sp, #16
    1df4:	bd80      	pop	{r7, pc}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	00001c49 	.word	0x00001c49
    1dfc:	00001ca9 	.word	0x00001ca9

00001e00 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1e00:	b580      	push	{r7, lr}
    1e02:	af00      	add	r7, sp, #0
	return;
    1e04:	46c0      	nop			; (mov r8, r8)
}
    1e06:	46bd      	mov	sp, r7
    1e08:	bd80      	pop	{r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)

00001e0c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e10:	4b04      	ldr	r3, [pc, #16]	; (1e24 <system_init+0x18>)
    1e12:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e14:	4b04      	ldr	r3, [pc, #16]	; (1e28 <system_init+0x1c>)
    1e16:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e18:	4b04      	ldr	r3, [pc, #16]	; (1e2c <system_init+0x20>)
    1e1a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <system_init+0x24>)
    1e1e:	4798      	blx	r3
}
    1e20:	46bd      	mov	sp, r7
    1e22:	bd80      	pop	{r7, pc}
    1e24:	000016cd 	.word	0x000016cd
    1e28:	00000291 	.word	0x00000291
    1e2c:	00001e01 	.word	0x00001e01
    1e30:	00001e01 	.word	0x00001e01

00001e34 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1e34:	b580      	push	{r7, lr}
    1e36:	b082      	sub	sp, #8
    1e38:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e3a:	4a2e      	ldr	r2, [pc, #184]	; (1ef4 <Reset_Handler+0xc0>)
    1e3c:	2390      	movs	r3, #144	; 0x90
    1e3e:	005b      	lsls	r3, r3, #1
    1e40:	2102      	movs	r1, #2
    1e42:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e44:	4b2c      	ldr	r3, [pc, #176]	; (1ef8 <Reset_Handler+0xc4>)
    1e46:	78da      	ldrb	r2, [r3, #3]
    1e48:	2103      	movs	r1, #3
    1e4a:	438a      	bics	r2, r1
    1e4c:	1c11      	adds	r1, r2, #0
    1e4e:	2202      	movs	r2, #2
    1e50:	430a      	orrs	r2, r1
    1e52:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e54:	4b28      	ldr	r3, [pc, #160]	; (1ef8 <Reset_Handler+0xc4>)
    1e56:	78da      	ldrb	r2, [r3, #3]
    1e58:	210c      	movs	r1, #12
    1e5a:	438a      	bics	r2, r1
    1e5c:	1c11      	adds	r1, r2, #0
    1e5e:	2208      	movs	r2, #8
    1e60:	430a      	orrs	r2, r1
    1e62:	70da      	strb	r2, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e64:	4b25      	ldr	r3, [pc, #148]	; (1efc <Reset_Handler+0xc8>)
    1e66:	7b9a      	ldrb	r2, [r3, #14]
    1e68:	2130      	movs	r1, #48	; 0x30
    1e6a:	438a      	bics	r2, r1
    1e6c:	1c11      	adds	r1, r2, #0
    1e6e:	2220      	movs	r2, #32
    1e70:	430a      	orrs	r2, r1
    1e72:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e74:	4b21      	ldr	r3, [pc, #132]	; (1efc <Reset_Handler+0xc8>)
    1e76:	7b9a      	ldrb	r2, [r3, #14]
    1e78:	210c      	movs	r1, #12
    1e7a:	438a      	bics	r2, r1
    1e7c:	1c11      	adds	r1, r2, #0
    1e7e:	2208      	movs	r2, #8
    1e80:	430a      	orrs	r2, r1
    1e82:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e84:	4b1d      	ldr	r3, [pc, #116]	; (1efc <Reset_Handler+0xc8>)
    1e86:	7b9a      	ldrb	r2, [r3, #14]
    1e88:	2103      	movs	r1, #3
    1e8a:	438a      	bics	r2, r1
    1e8c:	1c11      	adds	r1, r2, #0
    1e8e:	2202      	movs	r2, #2
    1e90:	430a      	orrs	r2, r1
    1e92:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1e94:	4b1a      	ldr	r3, [pc, #104]	; (1f00 <Reset_Handler+0xcc>)
    1e96:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1e98:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <Reset_Handler+0xd0>)
    1e9a:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1e9c:	687a      	ldr	r2, [r7, #4]
    1e9e:	683b      	ldr	r3, [r7, #0]
    1ea0:	429a      	cmp	r2, r3
    1ea2:	d00c      	beq.n	1ebe <Reset_Handler+0x8a>
                for (; pDest < &_erelocate;) {
    1ea4:	e007      	b.n	1eb6 <Reset_Handler+0x82>
                        *pDest++ = *pSrc++;
    1ea6:	683b      	ldr	r3, [r7, #0]
    1ea8:	1d1a      	adds	r2, r3, #4
    1eaa:	603a      	str	r2, [r7, #0]
    1eac:	687a      	ldr	r2, [r7, #4]
    1eae:	1d11      	adds	r1, r2, #4
    1eb0:	6079      	str	r1, [r7, #4]
    1eb2:	6812      	ldr	r2, [r2, #0]
    1eb4:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1eb6:	683a      	ldr	r2, [r7, #0]
    1eb8:	4b13      	ldr	r3, [pc, #76]	; (1f08 <Reset_Handler+0xd4>)
    1eba:	429a      	cmp	r2, r3
    1ebc:	d3f3      	bcc.n	1ea6 <Reset_Handler+0x72>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ebe:	4b13      	ldr	r3, [pc, #76]	; (1f0c <Reset_Handler+0xd8>)
    1ec0:	603b      	str	r3, [r7, #0]
    1ec2:	e004      	b.n	1ece <Reset_Handler+0x9a>
                *pDest++ = 0;
    1ec4:	683b      	ldr	r3, [r7, #0]
    1ec6:	1d1a      	adds	r2, r3, #4
    1ec8:	603a      	str	r2, [r7, #0]
    1eca:	2200      	movs	r2, #0
    1ecc:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ece:	683a      	ldr	r2, [r7, #0]
    1ed0:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <Reset_Handler+0xdc>)
    1ed2:	429a      	cmp	r2, r3
    1ed4:	d3f6      	bcc.n	1ec4 <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1ed6:	4b0f      	ldr	r3, [pc, #60]	; (1f14 <Reset_Handler+0xe0>)
    1ed8:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1eda:	4b0f      	ldr	r3, [pc, #60]	; (1f18 <Reset_Handler+0xe4>)
    1edc:	687a      	ldr	r2, [r7, #4]
    1ede:	217f      	movs	r1, #127	; 0x7f
    1ee0:	438a      	bics	r2, r1
    1ee2:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1ee4:	4b0d      	ldr	r3, [pc, #52]	; (1f1c <Reset_Handler+0xe8>)
    1ee6:	4798      	blx	r3

        /* Branch to main function */
        main();
    1ee8:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <Reset_Handler+0xec>)
    1eea:	4798      	blx	r3

        /* Infinite loop */
        //while (1);
}
    1eec:	46bd      	mov	sp, r7
    1eee:	b002      	add	sp, #8
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	41007000 	.word	0x41007000
    1ef8:	41005000 	.word	0x41005000
    1efc:	41004800 	.word	0x41004800
    1f00:	000024e8 	.word	0x000024e8
    1f04:	20000000 	.word	0x20000000
    1f08:	2000000c 	.word	0x2000000c
    1f0c:	2000000c 	.word	0x2000000c
    1f10:	2000005c 	.word	0x2000005c
    1f14:	00000000 	.word	0x00000000
    1f18:	e000ed00 	.word	0xe000ed00
    1f1c:	0000240d 	.word	0x0000240d
    1f20:	00002235 	.word	0x00002235

00001f24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f24:	b580      	push	{r7, lr}
    1f26:	af00      	add	r7, sp, #0
        //while (1) {
        //}
}
    1f28:	46bd      	mov	sp, r7
    1f2a:	bd80      	pop	{r7, pc}

00001f2c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b084      	sub	sp, #16
    1f30:	af00      	add	r7, sp, #0
    1f32:	1c02      	adds	r2, r0, #0
    1f34:	1dfb      	adds	r3, r7, #7
    1f36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1f38:	230f      	movs	r3, #15
    1f3a:	18fb      	adds	r3, r7, r3
    1f3c:	1dfa      	adds	r2, r7, #7
    1f3e:	7812      	ldrb	r2, [r2, #0]
    1f40:	09d2      	lsrs	r2, r2, #7
    1f42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1f44:	230e      	movs	r3, #14
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	1dfa      	adds	r2, r7, #7
    1f4a:	7812      	ldrb	r2, [r2, #0]
    1f4c:	0952      	lsrs	r2, r2, #5
    1f4e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1f50:	4b0d      	ldr	r3, [pc, #52]	; (1f88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1f52:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1f54:	230f      	movs	r3, #15
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d10f      	bne.n	1f7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1f5e:	230f      	movs	r3, #15
    1f60:	18fb      	adds	r3, r7, r3
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	009b      	lsls	r3, r3, #2
    1f66:	2210      	movs	r2, #16
    1f68:	4694      	mov	ip, r2
    1f6a:	44bc      	add	ip, r7
    1f6c:	4463      	add	r3, ip
    1f6e:	3b08      	subs	r3, #8
    1f70:	681a      	ldr	r2, [r3, #0]
    1f72:	230e      	movs	r3, #14
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	01db      	lsls	r3, r3, #7
    1f7a:	18d3      	adds	r3, r2, r3
    1f7c:	e000      	b.n	1f80 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1f7e:	2300      	movs	r3, #0
	}
}
    1f80:	1c18      	adds	r0, r3, #0
    1f82:	46bd      	mov	sp, r7
    1f84:	b004      	add	sp, #16
    1f86:	bd80      	pop	{r7, pc}
    1f88:	41004400 	.word	0x41004400

00001f8c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f8c:	b580      	push	{r7, lr}
    1f8e:	b082      	sub	sp, #8
    1f90:	af00      	add	r7, sp, #0
    1f92:	1c02      	adds	r2, r0, #0
    1f94:	1dfb      	adds	r3, r7, #7
    1f96:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1f98:	1dfb      	adds	r3, r7, #7
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	1c18      	adds	r0, r3, #0
    1f9e:	4b03      	ldr	r3, [pc, #12]	; (1fac <port_get_group_from_gpio_pin+0x20>)
    1fa0:	4798      	blx	r3
    1fa2:	1c03      	adds	r3, r0, #0
}
    1fa4:	1c18      	adds	r0, r3, #0
    1fa6:	46bd      	mov	sp, r7
    1fa8:	b002      	add	sp, #8
    1faa:	bd80      	pop	{r7, pc}
    1fac:	00001f2d 	.word	0x00001f2d

00001fb0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2200      	movs	r2, #0
    1fbc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	2201      	movs	r2, #1
    1fc2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1fc4:	687b      	ldr	r3, [r7, #4]
    1fc6:	2200      	movs	r2, #0
    1fc8:	709a      	strb	r2, [r3, #2]
}
    1fca:	46bd      	mov	sp, r7
    1fcc:	b002      	add	sp, #8
    1fce:	bd80      	pop	{r7, pc}

00001fd0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1fd0:	b580      	push	{r7, lr}
    1fd2:	b084      	sub	sp, #16
    1fd4:	af00      	add	r7, sp, #0
    1fd6:	1c02      	adds	r2, r0, #0
    1fd8:	1dfb      	adds	r3, r7, #7
    1fda:	701a      	strb	r2, [r3, #0]
    1fdc:	1dbb      	adds	r3, r7, #6
    1fde:	1c0a      	adds	r2, r1, #0
    1fe0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1fe2:	1dfb      	adds	r3, r7, #7
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	1c18      	adds	r0, r3, #0
    1fe8:	4b0c      	ldr	r3, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fea:	4798      	blx	r3
    1fec:	1c03      	adds	r3, r0, #0
    1fee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ff0:	1dfb      	adds	r3, r7, #7
    1ff2:	781b      	ldrb	r3, [r3, #0]
    1ff4:	221f      	movs	r2, #31
    1ff6:	4013      	ands	r3, r2
    1ff8:	2201      	movs	r2, #1
    1ffa:	409a      	lsls	r2, r3
    1ffc:	1c13      	adds	r3, r2, #0
    1ffe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2000:	1dbb      	adds	r3, r7, #6
    2002:	781b      	ldrb	r3, [r3, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d003      	beq.n	2010 <STACK_SIZE+0x10>
		port_base->OUTSET.reg = pin_mask;
    2008:	68fb      	ldr	r3, [r7, #12]
    200a:	68ba      	ldr	r2, [r7, #8]
    200c:	619a      	str	r2, [r3, #24]
    200e:	e002      	b.n	2016 <STACK_SIZE+0x16>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2010:	68fb      	ldr	r3, [r7, #12]
    2012:	68ba      	ldr	r2, [r7, #8]
    2014:	615a      	str	r2, [r3, #20]
	}
}
    2016:	46bd      	mov	sp, r7
    2018:	b004      	add	sp, #16
    201a:	bd80      	pop	{r7, pc}
    201c:	00001f8d 	.word	0x00001f8d

00002020 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2020:	b580      	push	{r7, lr}
    2022:	b084      	sub	sp, #16
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    202e:	68fb      	ldr	r3, [r7, #12]
    2030:	69db      	ldr	r3, [r3, #28]
    2032:	1e5a      	subs	r2, r3, #1
    2034:	4193      	sbcs	r3, r2
    2036:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2038:	1c18      	adds	r0, r3, #0
    203a:	46bd      	mov	sp, r7
    203c:	b004      	add	sp, #16
    203e:	bd80      	pop	{r7, pc}

00002040 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2040:	b580      	push	{r7, lr}
    2042:	b082      	sub	sp, #8
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	2201      	movs	r2, #1
    204c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    204e:	687b      	ldr	r3, [r7, #4]
    2050:	2200      	movs	r2, #0
    2052:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2054:	687b      	ldr	r3, [r7, #4]
    2056:	2200      	movs	r2, #0
    2058:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	22c0      	movs	r2, #192	; 0xc0
    205e:	0392      	lsls	r2, r2, #14
    2060:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2062:	687b      	ldr	r3, [r7, #4]
    2064:	2200      	movs	r2, #0
    2066:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2068:	687b      	ldr	r3, [r7, #4]
    206a:	2200      	movs	r2, #0
    206c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	2201      	movs	r2, #1
    2072:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2074:	687b      	ldr	r3, [r7, #4]
    2076:	2201      	movs	r2, #1
    2078:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    207a:	687b      	ldr	r3, [r7, #4]
    207c:	2200      	movs	r2, #0
    207e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	2224      	movs	r2, #36	; 0x24
    2084:	2100      	movs	r1, #0
    2086:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	3318      	adds	r3, #24
    208c:	1c18      	adds	r0, r3, #0
    208e:	2100      	movs	r1, #0
    2090:	220c      	movs	r2, #12
    2092:	4b0a      	ldr	r3, [pc, #40]	; (20bc <spi_get_config_defaults+0x7c>)
    2094:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	4a09      	ldr	r2, [pc, #36]	; (20c0 <spi_get_config_defaults+0x80>)
    209a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    209c:	687b      	ldr	r3, [r7, #4]
    209e:	2200      	movs	r2, #0
    20a0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	2200      	movs	r2, #0
    20a6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    20a8:	687b      	ldr	r3, [r7, #4]
    20aa:	2200      	movs	r2, #0
    20ac:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    20ae:	687b      	ldr	r3, [r7, #4]
    20b0:	2200      	movs	r2, #0
    20b2:	635a      	str	r2, [r3, #52]	; 0x34

};
    20b4:	46bd      	mov	sp, r7
    20b6:	b002      	add	sp, #8
    20b8:	bd80      	pop	{r7, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	00002459 	.word	0x00002459
    20c0:	000186a0 	.word	0x000186a0

000020c4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    20c4:	b580      	push	{r7, lr}
    20c6:	b082      	sub	sp, #8
    20c8:	af00      	add	r7, sp, #0
    20ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    20cc:	687b      	ldr	r3, [r7, #4]
    20ce:	220a      	movs	r2, #10
    20d0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	2200      	movs	r2, #0
    20d6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	2200      	movs	r2, #0
    20dc:	709a      	strb	r2, [r3, #2]
}
    20de:	46bd      	mov	sp, r7
    20e0:	b002      	add	sp, #8
    20e2:	bd80      	pop	{r7, pc}

000020e4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    20e4:	b580      	push	{r7, lr}
    20e6:	b084      	sub	sp, #16
    20e8:	af00      	add	r7, sp, #0
    20ea:	6078      	str	r0, [r7, #4]
    20ec:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    20ee:	683b      	ldr	r3, [r7, #0]
    20f0:	781a      	ldrb	r2, [r3, #0]
    20f2:	687b      	ldr	r3, [r7, #4]
    20f4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    20f6:	683b      	ldr	r3, [r7, #0]
    20f8:	785a      	ldrb	r2, [r3, #1]
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    20fe:	683b      	ldr	r3, [r7, #0]
    2100:	789a      	ldrb	r2, [r3, #2]
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2106:	230c      	movs	r3, #12
    2108:	18fb      	adds	r3, r7, r3
    210a:	1c18      	adds	r0, r3, #0
    210c:	4b0b      	ldr	r3, [pc, #44]	; (213c <spi_attach_slave+0x58>)
    210e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2110:	230c      	movs	r3, #12
    2112:	18fb      	adds	r3, r7, r3
    2114:	2201      	movs	r2, #1
    2116:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2118:	687b      	ldr	r3, [r7, #4]
    211a:	781a      	ldrb	r2, [r3, #0]
    211c:	230c      	movs	r3, #12
    211e:	18fb      	adds	r3, r7, r3
    2120:	1c10      	adds	r0, r2, #0
    2122:	1c19      	adds	r1, r3, #0
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <spi_attach_slave+0x5c>)
    2126:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	1c18      	adds	r0, r3, #0
    212e:	2101      	movs	r1, #1
    2130:	4b04      	ldr	r3, [pc, #16]	; (2144 <spi_attach_slave+0x60>)
    2132:	4798      	blx	r3
}
    2134:	46bd      	mov	sp, r7
    2136:	b004      	add	sp, #16
    2138:	bd80      	pop	{r7, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00001fb1 	.word	0x00001fb1
    2140:	00000309 	.word	0x00000309
    2144:	00001fd1 	.word	0x00001fd1

00002148 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2148:	b580      	push	{r7, lr}
    214a:	b084      	sub	sp, #16
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	681b      	ldr	r3, [r3, #0]
    2154:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	1c18      	adds	r0, r3, #0
    215c:	4b06      	ldr	r3, [pc, #24]	; (2178 <spi_enable+0x30>)
    215e:	4798      	blx	r3
    2160:	1e03      	subs	r3, r0, #0
    2162:	d1f9      	bne.n	2158 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2164:	68fb      	ldr	r3, [r7, #12]
    2166:	681b      	ldr	r3, [r3, #0]
    2168:	2202      	movs	r2, #2
    216a:	431a      	orrs	r2, r3
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	601a      	str	r2, [r3, #0]
}
    2170:	46bd      	mov	sp, r7
    2172:	b004      	add	sp, #16
    2174:	bd80      	pop	{r7, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	00002021 	.word	0x00002021

0000217c <configure_spi_master>:

void configure_spi_master(void);

//! [configure_spi]
void configure_spi_master(void)
{
    217c:	b580      	push	{r7, lr}
    217e:	b090      	sub	sp, #64	; 0x40
    2180:	af00      	add	r7, sp, #0
//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    2182:	1d3b      	adds	r3, r7, #4
    2184:	1c18      	adds	r0, r3, #0
    2186:	4b1e      	ldr	r3, [pc, #120]	; (2200 <configure_spi_master+0x84>)
    2188:	4798      	blx	r3
//! [slave_conf_defaults]
//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    218a:	1d3b      	adds	r3, r7, #4
    218c:	2205      	movs	r2, #5
    218e:	701a      	strb	r2, [r3, #0]
//! [ss_pin]
//! [slave_init]
	spi_attach_slave(&slave, &slave_dev_config);
    2190:	4a1c      	ldr	r2, [pc, #112]	; (2204 <configure_spi_master+0x88>)
    2192:	1d3b      	adds	r3, r7, #4
    2194:	1c10      	adds	r0, r2, #0
    2196:	1c19      	adds	r1, r3, #0
    2198:	4b1b      	ldr	r3, [pc, #108]	; (2208 <configure_spi_master+0x8c>)
    219a:	4798      	blx	r3
//! [slave_init]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
    219c:	2308      	movs	r3, #8
    219e:	18fb      	adds	r3, r7, r3
    21a0:	1c18      	adds	r0, r3, #0
    21a2:	4b1a      	ldr	r3, [pc, #104]	; (220c <configure_spi_master+0x90>)
    21a4:	4798      	blx	r3
	spi_set_baudrate(&spi_master_instance.hw->SPI, 2000000);
    21a6:	4b1a      	ldr	r3, [pc, #104]	; (2210 <configure_spi_master+0x94>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	1c1a      	adds	r2, r3, #0
    21ac:	4b19      	ldr	r3, [pc, #100]	; (2214 <configure_spi_master+0x98>)
    21ae:	1c10      	adds	r0, r2, #0
    21b0:	1c19      	adds	r1, r3, #0
    21b2:	4b19      	ldr	r3, [pc, #100]	; (2218 <configure_spi_master+0x9c>)
    21b4:	4798      	blx	r3

//! [conf_defaults]
//! [mux_setting]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    21b6:	2308      	movs	r3, #8
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	2280      	movs	r2, #128	; 0x80
    21bc:	0252      	lsls	r2, r2, #9
    21be:	60da      	str	r2, [r3, #12]
//! [mux_setting]
	/* Configure pad 0 for data in */
//! [di]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    21c0:	2308      	movs	r3, #8
    21c2:	18fb      	adds	r3, r7, r3
    21c4:	4a15      	ldr	r2, [pc, #84]	; (221c <configure_spi_master+0xa0>)
    21c6:	629a      	str	r2, [r3, #40]	; 0x28
//! [di]
	/* Configure pad 1 as unused */
//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    21c8:	2308      	movs	r3, #8
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	2201      	movs	r2, #1
    21ce:	4252      	negs	r2, r2
    21d0:	62da      	str	r2, [r3, #44]	; 0x2c
//! [ss]
	/* Configure pad 2 for data out */
//! [do]
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    21d2:	2308      	movs	r3, #8
    21d4:	18fb      	adds	r3, r7, r3
    21d6:	4a12      	ldr	r2, [pc, #72]	; (2220 <configure_spi_master+0xa4>)
    21d8:	631a      	str	r2, [r3, #48]	; 0x30
//! [do]
	/* Configure pad 3 for SCK */
//! [sck]
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    21da:	2308      	movs	r3, #8
    21dc:	18fb      	adds	r3, r7, r3
    21de:	4a11      	ldr	r2, [pc, #68]	; (2224 <configure_spi_master+0xa8>)
    21e0:	635a      	str	r2, [r3, #52]	; 0x34
//! [sck]
//! [init]
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    21e2:	4a0b      	ldr	r2, [pc, #44]	; (2210 <configure_spi_master+0x94>)
    21e4:	4910      	ldr	r1, [pc, #64]	; (2228 <configure_spi_master+0xac>)
    21e6:	2308      	movs	r3, #8
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	1c10      	adds	r0, r2, #0
    21ec:	1c1a      	adds	r2, r3, #0
    21ee:	4b0f      	ldr	r3, [pc, #60]	; (222c <configure_spi_master+0xb0>)
    21f0:	4798      	blx	r3
//! [init]

//! [enable]
	spi_enable(&spi_master_instance);
    21f2:	4b07      	ldr	r3, [pc, #28]	; (2210 <configure_spi_master+0x94>)
    21f4:	1c18      	adds	r0, r3, #0
    21f6:	4b0e      	ldr	r3, [pc, #56]	; (2230 <configure_spi_master+0xb4>)
    21f8:	4798      	blx	r3
//! [enable]

}
    21fa:	46bd      	mov	sp, r7
    21fc:	b010      	add	sp, #64	; 0x40
    21fe:	bd80      	pop	{r7, pc}
    2200:	000020c5 	.word	0x000020c5
    2204:	20000058 	.word	0x20000058
    2208:	000020e5 	.word	0x000020e5
    220c:	00002041 	.word	0x00002041
    2210:	2000004c 	.word	0x2000004c
    2214:	001e8480 	.word	0x001e8480
    2218:	00000a69 	.word	0x00000a69
    221c:	00040003 	.word	0x00040003
    2220:	00060003 	.word	0x00060003
    2224:	00070003 	.word	0x00070003
    2228:	42000800 	.word	0x42000800
    222c:	00000f21 	.word	0x00000f21
    2230:	00002149 	.word	0x00002149

00002234 <main>:
//! [configure_spi]

int main(void)
{
    2234:	b5b0      	push	{r4, r5, r7, lr}
    2236:	b082      	sub	sp, #8
    2238:	af00      	add	r7, sp, #0
//! [main_setup]
//! [system_init]
	system_init();
    223a:	4b22      	ldr	r3, [pc, #136]	; (22c4 <main+0x90>)
    223c:	4798      	blx	r3
//! [system_init]
//! [run_config]
	configure_spi_master();
    223e:	4b22      	ldr	r3, [pc, #136]	; (22c8 <main+0x94>)
    2240:	4798      	blx	r3
//! [run_config]
//! [main_setup]

//! [main_use_case]
//! [select_slave]
	spi_select_slave(&spi_master_instance, &slave, true);
    2242:	4a22      	ldr	r2, [pc, #136]	; (22cc <main+0x98>)
    2244:	4b22      	ldr	r3, [pc, #136]	; (22d0 <main+0x9c>)
    2246:	1c10      	adds	r0, r2, #0
    2248:	1c19      	adds	r1, r3, #0
    224a:	2201      	movs	r2, #1
    224c:	4b21      	ldr	r3, [pc, #132]	; (22d4 <main+0xa0>)
    224e:	4798      	blx	r3
	static uint8_t read1[4] = {
		0x03, 0x00, 0x00, 0x00
	};
	static uint8_t enable = 0x06;
	static uint8_t status = 0x05;
	spi_select_slave(&spi_master_instance, &slave, false);
    2250:	4a1e      	ldr	r2, [pc, #120]	; (22cc <main+0x98>)
    2252:	4b1f      	ldr	r3, [pc, #124]	; (22d0 <main+0x9c>)
    2254:	1c10      	adds	r0, r2, #0
    2256:	1c19      	adds	r1, r3, #0
    2258:	2200      	movs	r2, #0
    225a:	4b1e      	ldr	r3, [pc, #120]	; (22d4 <main+0xa0>)
    225c:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
    225e:	4a1b      	ldr	r2, [pc, #108]	; (22cc <main+0x98>)
    2260:	4b1b      	ldr	r3, [pc, #108]	; (22d0 <main+0x9c>)
    2262:	1c10      	adds	r0, r2, #0
    2264:	1c19      	adds	r1, r3, #0
    2266:	2201      	movs	r2, #1
    2268:	4b1a      	ldr	r3, [pc, #104]	; (22d4 <main+0xa0>)
    226a:	4798      	blx	r3
	//enum status_code code_1 = spi_write_buffer_wait(&spi_master_instance, &enable, 1);
	spi_select_slave(&spi_master_instance, &slave, false);
    226c:	4a17      	ldr	r2, [pc, #92]	; (22cc <main+0x98>)
    226e:	4b18      	ldr	r3, [pc, #96]	; (22d0 <main+0x9c>)
    2270:	1c10      	adds	r0, r2, #0
    2272:	1c19      	adds	r1, r3, #0
    2274:	2200      	movs	r2, #0
    2276:	4b17      	ldr	r3, [pc, #92]	; (22d4 <main+0xa0>)
    2278:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
    227a:	4a14      	ldr	r2, [pc, #80]	; (22cc <main+0x98>)
    227c:	4b14      	ldr	r3, [pc, #80]	; (22d0 <main+0x9c>)
    227e:	1c10      	adds	r0, r2, #0
    2280:	1c19      	adds	r1, r3, #0
    2282:	2201      	movs	r2, #1
    2284:	4b13      	ldr	r3, [pc, #76]	; (22d4 <main+0xa0>)
    2286:	4798      	blx	r3
	enum status_code code_2 = spi_write_buffer_wait(&spi_master_instance, &status, 1);
    2288:	1dfc      	adds	r4, r7, #7
    228a:	4a10      	ldr	r2, [pc, #64]	; (22cc <main+0x98>)
    228c:	4b12      	ldr	r3, [pc, #72]	; (22d8 <main+0xa4>)
    228e:	1c10      	adds	r0, r2, #0
    2290:	1c19      	adds	r1, r3, #0
    2292:	2201      	movs	r2, #1
    2294:	4b11      	ldr	r3, [pc, #68]	; (22dc <main+0xa8>)
    2296:	4798      	blx	r3
    2298:	1c03      	adds	r3, r0, #0
    229a:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&spi_master_instance, &slave, false);
	spi_select_slave(&spi_master_instance, &slave, true);
	enum status_code code_3 = spi_write_buffer_wait(&spi_master_instance, read1, 4);
	//spi_select_slave(&spi_master_instance, &slave, false);
	//spi_select_slave(&spi_master_instance, &slave, true);*/
	enum status_code code_4 = spi_read_buffer_wait(&spi_master_instance, rx, 1, 0xee);
    229c:	1dbc      	adds	r4, r7, #6
    229e:	4a0b      	ldr	r2, [pc, #44]	; (22cc <main+0x98>)
    22a0:	4b0f      	ldr	r3, [pc, #60]	; (22e0 <main+0xac>)
    22a2:	1c10      	adds	r0, r2, #0
    22a4:	1c19      	adds	r1, r3, #0
    22a6:	2201      	movs	r2, #1
    22a8:	23ee      	movs	r3, #238	; 0xee
    22aa:	4d0e      	ldr	r5, [pc, #56]	; (22e4 <main+0xb0>)
    22ac:	47a8      	blx	r5
    22ae:	1c03      	adds	r3, r0, #0
    22b0:	7023      	strb	r3, [r4, #0]
	//enum status_code code_2 = spi_write_buffer_wait(&spi_master_instance, writeModeReg, WRITE_MO_LEN);
	//enum status_code code_3 = spi_transceive_buffer_wait(&spi_master_instance,readModeReg,rx, READ_MO_LEN);
//! [write]
//! [deselect_slave]
	spi_select_slave(&spi_master_instance, &slave, false);
    22b2:	4a06      	ldr	r2, [pc, #24]	; (22cc <main+0x98>)
    22b4:	4b06      	ldr	r3, [pc, #24]	; (22d0 <main+0x9c>)
    22b6:	1c10      	adds	r0, r2, #0
    22b8:	1c19      	adds	r1, r3, #0
    22ba:	2200      	movs	r2, #0
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <main+0xa0>)
    22be:	4798      	blx	r3
//! [deselect_slave]

//! [inf_loop]
	while (true) {
		/* Infinite loop */	}
    22c0:	e7fe      	b.n	22c0 <main+0x8c>
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	00001e0d 	.word	0x00001e0d
    22c8:	0000217d 	.word	0x0000217d
    22cc:	2000004c 	.word	0x2000004c
    22d0:	20000058 	.word	0x20000058
    22d4:	00001139 	.word	0x00001139
    22d8:	20000009 	.word	0x20000009
    22dc:	00001229 	.word	0x00001229
    22e0:	20000004 	.word	0x20000004
    22e4:	00001015 	.word	0x00001015

000022e8 <__aeabi_uidiv>:
    22e8:	2200      	movs	r2, #0
    22ea:	0843      	lsrs	r3, r0, #1
    22ec:	428b      	cmp	r3, r1
    22ee:	d374      	bcc.n	23da <__aeabi_uidiv+0xf2>
    22f0:	0903      	lsrs	r3, r0, #4
    22f2:	428b      	cmp	r3, r1
    22f4:	d35f      	bcc.n	23b6 <__aeabi_uidiv+0xce>
    22f6:	0a03      	lsrs	r3, r0, #8
    22f8:	428b      	cmp	r3, r1
    22fa:	d344      	bcc.n	2386 <__aeabi_uidiv+0x9e>
    22fc:	0b03      	lsrs	r3, r0, #12
    22fe:	428b      	cmp	r3, r1
    2300:	d328      	bcc.n	2354 <__aeabi_uidiv+0x6c>
    2302:	0c03      	lsrs	r3, r0, #16
    2304:	428b      	cmp	r3, r1
    2306:	d30d      	bcc.n	2324 <__aeabi_uidiv+0x3c>
    2308:	22ff      	movs	r2, #255	; 0xff
    230a:	0209      	lsls	r1, r1, #8
    230c:	ba12      	rev	r2, r2
    230e:	0c03      	lsrs	r3, r0, #16
    2310:	428b      	cmp	r3, r1
    2312:	d302      	bcc.n	231a <__aeabi_uidiv+0x32>
    2314:	1212      	asrs	r2, r2, #8
    2316:	0209      	lsls	r1, r1, #8
    2318:	d065      	beq.n	23e6 <__aeabi_uidiv+0xfe>
    231a:	0b03      	lsrs	r3, r0, #12
    231c:	428b      	cmp	r3, r1
    231e:	d319      	bcc.n	2354 <__aeabi_uidiv+0x6c>
    2320:	e000      	b.n	2324 <__aeabi_uidiv+0x3c>
    2322:	0a09      	lsrs	r1, r1, #8
    2324:	0bc3      	lsrs	r3, r0, #15
    2326:	428b      	cmp	r3, r1
    2328:	d301      	bcc.n	232e <__aeabi_uidiv+0x46>
    232a:	03cb      	lsls	r3, r1, #15
    232c:	1ac0      	subs	r0, r0, r3
    232e:	4152      	adcs	r2, r2
    2330:	0b83      	lsrs	r3, r0, #14
    2332:	428b      	cmp	r3, r1
    2334:	d301      	bcc.n	233a <__aeabi_uidiv+0x52>
    2336:	038b      	lsls	r3, r1, #14
    2338:	1ac0      	subs	r0, r0, r3
    233a:	4152      	adcs	r2, r2
    233c:	0b43      	lsrs	r3, r0, #13
    233e:	428b      	cmp	r3, r1
    2340:	d301      	bcc.n	2346 <__aeabi_uidiv+0x5e>
    2342:	034b      	lsls	r3, r1, #13
    2344:	1ac0      	subs	r0, r0, r3
    2346:	4152      	adcs	r2, r2
    2348:	0b03      	lsrs	r3, r0, #12
    234a:	428b      	cmp	r3, r1
    234c:	d301      	bcc.n	2352 <__aeabi_uidiv+0x6a>
    234e:	030b      	lsls	r3, r1, #12
    2350:	1ac0      	subs	r0, r0, r3
    2352:	4152      	adcs	r2, r2
    2354:	0ac3      	lsrs	r3, r0, #11
    2356:	428b      	cmp	r3, r1
    2358:	d301      	bcc.n	235e <__aeabi_uidiv+0x76>
    235a:	02cb      	lsls	r3, r1, #11
    235c:	1ac0      	subs	r0, r0, r3
    235e:	4152      	adcs	r2, r2
    2360:	0a83      	lsrs	r3, r0, #10
    2362:	428b      	cmp	r3, r1
    2364:	d301      	bcc.n	236a <__aeabi_uidiv+0x82>
    2366:	028b      	lsls	r3, r1, #10
    2368:	1ac0      	subs	r0, r0, r3
    236a:	4152      	adcs	r2, r2
    236c:	0a43      	lsrs	r3, r0, #9
    236e:	428b      	cmp	r3, r1
    2370:	d301      	bcc.n	2376 <__aeabi_uidiv+0x8e>
    2372:	024b      	lsls	r3, r1, #9
    2374:	1ac0      	subs	r0, r0, r3
    2376:	4152      	adcs	r2, r2
    2378:	0a03      	lsrs	r3, r0, #8
    237a:	428b      	cmp	r3, r1
    237c:	d301      	bcc.n	2382 <__aeabi_uidiv+0x9a>
    237e:	020b      	lsls	r3, r1, #8
    2380:	1ac0      	subs	r0, r0, r3
    2382:	4152      	adcs	r2, r2
    2384:	d2cd      	bcs.n	2322 <__aeabi_uidiv+0x3a>
    2386:	09c3      	lsrs	r3, r0, #7
    2388:	428b      	cmp	r3, r1
    238a:	d301      	bcc.n	2390 <__aeabi_uidiv+0xa8>
    238c:	01cb      	lsls	r3, r1, #7
    238e:	1ac0      	subs	r0, r0, r3
    2390:	4152      	adcs	r2, r2
    2392:	0983      	lsrs	r3, r0, #6
    2394:	428b      	cmp	r3, r1
    2396:	d301      	bcc.n	239c <__aeabi_uidiv+0xb4>
    2398:	018b      	lsls	r3, r1, #6
    239a:	1ac0      	subs	r0, r0, r3
    239c:	4152      	adcs	r2, r2
    239e:	0943      	lsrs	r3, r0, #5
    23a0:	428b      	cmp	r3, r1
    23a2:	d301      	bcc.n	23a8 <__aeabi_uidiv+0xc0>
    23a4:	014b      	lsls	r3, r1, #5
    23a6:	1ac0      	subs	r0, r0, r3
    23a8:	4152      	adcs	r2, r2
    23aa:	0903      	lsrs	r3, r0, #4
    23ac:	428b      	cmp	r3, r1
    23ae:	d301      	bcc.n	23b4 <__aeabi_uidiv+0xcc>
    23b0:	010b      	lsls	r3, r1, #4
    23b2:	1ac0      	subs	r0, r0, r3
    23b4:	4152      	adcs	r2, r2
    23b6:	08c3      	lsrs	r3, r0, #3
    23b8:	428b      	cmp	r3, r1
    23ba:	d301      	bcc.n	23c0 <__aeabi_uidiv+0xd8>
    23bc:	00cb      	lsls	r3, r1, #3
    23be:	1ac0      	subs	r0, r0, r3
    23c0:	4152      	adcs	r2, r2
    23c2:	0883      	lsrs	r3, r0, #2
    23c4:	428b      	cmp	r3, r1
    23c6:	d301      	bcc.n	23cc <__aeabi_uidiv+0xe4>
    23c8:	008b      	lsls	r3, r1, #2
    23ca:	1ac0      	subs	r0, r0, r3
    23cc:	4152      	adcs	r2, r2
    23ce:	0843      	lsrs	r3, r0, #1
    23d0:	428b      	cmp	r3, r1
    23d2:	d301      	bcc.n	23d8 <__aeabi_uidiv+0xf0>
    23d4:	004b      	lsls	r3, r1, #1
    23d6:	1ac0      	subs	r0, r0, r3
    23d8:	4152      	adcs	r2, r2
    23da:	1a41      	subs	r1, r0, r1
    23dc:	d200      	bcs.n	23e0 <__aeabi_uidiv+0xf8>
    23de:	4601      	mov	r1, r0
    23e0:	4152      	adcs	r2, r2
    23e2:	4610      	mov	r0, r2
    23e4:	4770      	bx	lr
    23e6:	e7ff      	b.n	23e8 <__aeabi_uidiv+0x100>
    23e8:	b501      	push	{r0, lr}
    23ea:	2000      	movs	r0, #0
    23ec:	f000 f80c 	bl	2408 <__aeabi_idiv0>
    23f0:	bd02      	pop	{r1, pc}
    23f2:	46c0      	nop			; (mov r8, r8)

000023f4 <__aeabi_uidivmod>:
    23f4:	2900      	cmp	r1, #0
    23f6:	d0f7      	beq.n	23e8 <__aeabi_uidiv+0x100>
    23f8:	b503      	push	{r0, r1, lr}
    23fa:	f7ff ff75 	bl	22e8 <__aeabi_uidiv>
    23fe:	bc0e      	pop	{r1, r2, r3}
    2400:	4342      	muls	r2, r0
    2402:	1a89      	subs	r1, r1, r2
    2404:	4718      	bx	r3
    2406:	46c0      	nop			; (mov r8, r8)

00002408 <__aeabi_idiv0>:
    2408:	4770      	bx	lr
    240a:	46c0      	nop			; (mov r8, r8)

0000240c <__libc_init_array>:
    240c:	4b0e      	ldr	r3, [pc, #56]	; (2448 <__libc_init_array+0x3c>)
    240e:	b570      	push	{r4, r5, r6, lr}
    2410:	2500      	movs	r5, #0
    2412:	1c1e      	adds	r6, r3, #0
    2414:	4c0d      	ldr	r4, [pc, #52]	; (244c <__libc_init_array+0x40>)
    2416:	1ae4      	subs	r4, r4, r3
    2418:	10a4      	asrs	r4, r4, #2
    241a:	42a5      	cmp	r5, r4
    241c:	d004      	beq.n	2428 <__libc_init_array+0x1c>
    241e:	00ab      	lsls	r3, r5, #2
    2420:	58f3      	ldr	r3, [r6, r3]
    2422:	4798      	blx	r3
    2424:	3501      	adds	r5, #1
    2426:	e7f8      	b.n	241a <__libc_init_array+0xe>
    2428:	f000 f84e 	bl	24c8 <_init>
    242c:	4b08      	ldr	r3, [pc, #32]	; (2450 <__libc_init_array+0x44>)
    242e:	2500      	movs	r5, #0
    2430:	1c1e      	adds	r6, r3, #0
    2432:	4c08      	ldr	r4, [pc, #32]	; (2454 <__libc_init_array+0x48>)
    2434:	1ae4      	subs	r4, r4, r3
    2436:	10a4      	asrs	r4, r4, #2
    2438:	42a5      	cmp	r5, r4
    243a:	d004      	beq.n	2446 <__libc_init_array+0x3a>
    243c:	00ab      	lsls	r3, r5, #2
    243e:	58f3      	ldr	r3, [r6, r3]
    2440:	4798      	blx	r3
    2442:	3501      	adds	r5, #1
    2444:	e7f8      	b.n	2438 <__libc_init_array+0x2c>
    2446:	bd70      	pop	{r4, r5, r6, pc}
    2448:	000024d4 	.word	0x000024d4
    244c:	000024d4 	.word	0x000024d4
    2450:	000024d4 	.word	0x000024d4
    2454:	000024d8 	.word	0x000024d8

00002458 <memset>:
    2458:	1c03      	adds	r3, r0, #0
    245a:	1882      	adds	r2, r0, r2
    245c:	4293      	cmp	r3, r2
    245e:	d002      	beq.n	2466 <memset+0xe>
    2460:	7019      	strb	r1, [r3, #0]
    2462:	3301      	adds	r3, #1
    2464:	e7fa      	b.n	245c <memset+0x4>
    2466:	4770      	bx	lr
    2468:	42000800 	.word	0x42000800
    246c:	42000c00 	.word	0x42000c00
    2470:	42001000 	.word	0x42001000
    2474:	42001400 	.word	0x42001400
    2478:	42001800 	.word	0x42001800
    247c:	42001c00 	.word	0x42001c00
    2480:	000014ce 	.word	0x000014ce
    2484:	0000154a 	.word	0x0000154a
    2488:	0000154a 	.word	0x0000154a
    248c:	000014f0 	.word	0x000014f0
    2490:	000014ea 	.word	0x000014ea
    2494:	000014f6 	.word	0x000014f6
    2498:	000014d4 	.word	0x000014d4
    249c:	000014fc 	.word	0x000014fc
    24a0:	00001530 	.word	0x00001530
    24a4:	00001624 	.word	0x00001624
    24a8:	00001674 	.word	0x00001674
    24ac:	00001674 	.word	0x00001674
    24b0:	00001670 	.word	0x00001670
    24b4:	00001616 	.word	0x00001616
    24b8:	00001636 	.word	0x00001636
    24bc:	00001606 	.word	0x00001606
    24c0:	00001648 	.word	0x00001648
    24c4:	0000165a 	.word	0x0000165a

000024c8 <_init>:
    24c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24ce:	bc08      	pop	{r3}
    24d0:	469e      	mov	lr, r3
    24d2:	4770      	bx	lr

000024d4 <__init_array_start>:
    24d4:	000000d9 	.word	0x000000d9

000024d8 <_fini>:
    24d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    24de:	bc08      	pop	{r3}
    24e0:	469e      	mov	lr, r3
    24e2:	4770      	bx	lr

000024e4 <__fini_array_start>:
    24e4:	000000b1 	.word	0x000000b1
