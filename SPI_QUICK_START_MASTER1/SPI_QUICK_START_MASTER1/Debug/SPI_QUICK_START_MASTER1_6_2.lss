
SPI_QUICK_START_MASTER1_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  000025cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  20000014  000025e0  00010014  2**2
                  ALLOC
  3 .stack        00002004  20000064  00002630  00010014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001308a  00000000  00000000  00010097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000187d  00000000  00000000  00023121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001668  00000000  00000000  0002499e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000468  00000000  00000000  00026006  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a8  00000000  00000000  0002646e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001813b  00000000  00000000  00026816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007a58  00000000  00000000  0003e951  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088c09  00000000  00000000  000463a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e24  00000000  00000000  000cefb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002068 	.word	0x20002068
       4:	00001f1d 	.word	0x00001f1d
       8:	0000200d 	.word	0x0000200d
       c:	0000200d 	.word	0x0000200d
	...
      2c:	0000200d 	.word	0x0000200d
	...
      38:	0000200d 	.word	0x0000200d
      3c:	0000200d 	.word	0x0000200d
      40:	0000200d 	.word	0x0000200d
      44:	0000200d 	.word	0x0000200d
      48:	0000200d 	.word	0x0000200d
      4c:	0000200d 	.word	0x0000200d
      50:	0000200d 	.word	0x0000200d
      54:	0000200d 	.word	0x0000200d
      58:	0000200d 	.word	0x0000200d
      5c:	0000200d 	.word	0x0000200d
      60:	0000200d 	.word	0x0000200d
      64:	0000200d 	.word	0x0000200d
      68:	0000200d 	.word	0x0000200d
      6c:	0000200d 	.word	0x0000200d
      70:	0000200d 	.word	0x0000200d
      74:	0000200d 	.word	0x0000200d
      78:	0000200d 	.word	0x0000200d
      7c:	0000200d 	.word	0x0000200d
      80:	0000200d 	.word	0x0000200d
      84:	0000200d 	.word	0x0000200d
      88:	0000200d 	.word	0x0000200d
      8c:	0000200d 	.word	0x0000200d
      90:	0000200d 	.word	0x0000200d
      94:	0000200d 	.word	0x0000200d
      98:	0000200d 	.word	0x0000200d
      9c:	0000200d 	.word	0x0000200d
      a0:	0000200d 	.word	0x0000200d
      a4:	0000200d 	.word	0x0000200d
      a8:	0000200d 	.word	0x0000200d
      ac:	0000200d 	.word	0x0000200d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000014 	.word	0x20000014
      d0:	00000000 	.word	0x00000000
      d4:	000025cc 	.word	0x000025cc

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	000025cc 	.word	0x000025cc
     104:	20000018 	.word	0x20000018
     108:	000025cc 	.word	0x000025cc
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b580      	push	{r7, lr}
     112:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     114:	2000      	movs	r0, #0
     116:	4b10      	ldr	r3, [pc, #64]	; (158 <delay_init+0x48>)
     118:	4798      	blx	r3
     11a:	1c02      	adds	r2, r0, #0
     11c:	4b0f      	ldr	r3, [pc, #60]	; (15c <delay_init+0x4c>)
     11e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     120:	4b0e      	ldr	r3, [pc, #56]	; (15c <delay_init+0x4c>)
     122:	681a      	ldr	r2, [r3, #0]
     124:	4b0e      	ldr	r3, [pc, #56]	; (160 <delay_init+0x50>)
     126:	1c10      	adds	r0, r2, #0
     128:	22fa      	movs	r2, #250	; 0xfa
     12a:	0091      	lsls	r1, r2, #2
     12c:	4798      	blx	r3
     12e:	1c03      	adds	r3, r0, #0
     130:	1c1a      	adds	r2, r3, #0
     132:	4b0a      	ldr	r3, [pc, #40]	; (15c <delay_init+0x4c>)
     134:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     136:	4b09      	ldr	r3, [pc, #36]	; (15c <delay_init+0x4c>)
     138:	681a      	ldr	r2, [r3, #0]
     13a:	4b09      	ldr	r3, [pc, #36]	; (160 <delay_init+0x50>)
     13c:	1c10      	adds	r0, r2, #0
     13e:	22fa      	movs	r2, #250	; 0xfa
     140:	0091      	lsls	r1, r2, #2
     142:	4798      	blx	r3
     144:	1c03      	adds	r3, r0, #0
     146:	1c1a      	adds	r2, r3, #0
     148:	4b06      	ldr	r3, [pc, #24]	; (164 <delay_init+0x54>)
     14a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     14c:	4b06      	ldr	r3, [pc, #24]	; (168 <delay_init+0x58>)
     14e:	2205      	movs	r2, #5
     150:	601a      	str	r2, [r3, #0]
}
     152:	46bd      	mov	sp, r7
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00001ac9 	.word	0x00001ac9
     15c:	20000000 	.word	0x20000000
     160:	000023cd 	.word	0x000023cd
     164:	20000004 	.word	0x20000004
     168:	e000e010 	.word	0xe000e010

0000016c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     16c:	b580      	push	{r7, lr}
     16e:	b082      	sub	sp, #8
     170:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     172:	4b0f      	ldr	r3, [pc, #60]	; (1b0 <cpu_irq_enter_critical+0x44>)
     174:	681b      	ldr	r3, [r3, #0]
     176:	2b00      	cmp	r3, #0
     178:	d112      	bne.n	1a0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17a:	f3ef 8310 	mrs	r3, PRIMASK
     17e:	607b      	str	r3, [r7, #4]
  return(result);
     180:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     182:	2b00      	cmp	r3, #0
     184:	d109      	bne.n	19a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     186:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     188:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     18c:	4b09      	ldr	r3, [pc, #36]	; (1b4 <cpu_irq_enter_critical+0x48>)
     18e:	2200      	movs	r2, #0
     190:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x4c>)
     194:	2201      	movs	r2, #1
     196:	701a      	strb	r2, [r3, #0]
     198:	e002      	b.n	1a0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x4c>)
     19c:	2200      	movs	r2, #0
     19e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a0:	4b03      	ldr	r3, [pc, #12]	; (1b0 <cpu_irq_enter_critical+0x44>)
     1a2:	681b      	ldr	r3, [r3, #0]
     1a4:	1c5a      	adds	r2, r3, #1
     1a6:	4b02      	ldr	r3, [pc, #8]	; (1b0 <cpu_irq_enter_critical+0x44>)
     1a8:	601a      	str	r2, [r3, #0]
}
     1aa:	46bd      	mov	sp, r7
     1ac:	b002      	add	sp, #8
     1ae:	bd80      	pop	{r7, pc}
     1b0:	20000030 	.word	0x20000030
     1b4:	20000008 	.word	0x20000008
     1b8:	20000034 	.word	0x20000034

000001bc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     1bc:	b580      	push	{r7, lr}
     1be:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b0a      	ldr	r3, [pc, #40]	; (1ec <cpu_irq_leave_critical+0x30>)
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	1e5a      	subs	r2, r3, #1
     1c6:	4b09      	ldr	r3, [pc, #36]	; (1ec <cpu_irq_leave_critical+0x30>)
     1c8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1ca:	4b08      	ldr	r3, [pc, #32]	; (1ec <cpu_irq_leave_critical+0x30>)
     1cc:	681b      	ldr	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d10a      	bne.n	1e8 <cpu_irq_leave_critical+0x2c>
     1d2:	4b07      	ldr	r3, [pc, #28]	; (1f0 <cpu_irq_leave_critical+0x34>)
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	b2db      	uxtb	r3, r3
     1d8:	2b00      	cmp	r3, #0
     1da:	d005      	beq.n	1e8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     1dc:	4b05      	ldr	r3, [pc, #20]	; (1f4 <cpu_irq_leave_critical+0x38>)
     1de:	2201      	movs	r2, #1
     1e0:	701a      	strb	r2, [r3, #0]
     1e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1e6:	b662      	cpsie	i
	}
}
     1e8:	46bd      	mov	sp, r7
     1ea:	bd80      	pop	{r7, pc}
     1ec:	20000030 	.word	0x20000030
     1f0:	20000034 	.word	0x20000034
     1f4:	20000008 	.word	0x20000008

000001f8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1f8:	b580      	push	{r7, lr}
     1fa:	b084      	sub	sp, #16
     1fc:	af00      	add	r7, sp, #0
     1fe:	1c02      	adds	r2, r0, #0
     200:	1dfb      	adds	r3, r7, #7
     202:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     204:	230f      	movs	r3, #15
     206:	18fb      	adds	r3, r7, r3
     208:	1dfa      	adds	r2, r7, #7
     20a:	7812      	ldrb	r2, [r2, #0]
     20c:	09d2      	lsrs	r2, r2, #7
     20e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     210:	230e      	movs	r3, #14
     212:	18fb      	adds	r3, r7, r3
     214:	1dfa      	adds	r2, r7, #7
     216:	7812      	ldrb	r2, [r2, #0]
     218:	0952      	lsrs	r2, r2, #5
     21a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     21e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     220:	230f      	movs	r3, #15
     222:	18fb      	adds	r3, r7, r3
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2b00      	cmp	r3, #0
     228:	d10f      	bne.n	24a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	781b      	ldrb	r3, [r3, #0]
     230:	009b      	lsls	r3, r3, #2
     232:	2210      	movs	r2, #16
     234:	4694      	mov	ip, r2
     236:	44bc      	add	ip, r7
     238:	4463      	add	r3, ip
     23a:	3b08      	subs	r3, #8
     23c:	681a      	ldr	r2, [r3, #0]
     23e:	230e      	movs	r3, #14
     240:	18fb      	adds	r3, r7, r3
     242:	781b      	ldrb	r3, [r3, #0]
     244:	01db      	lsls	r3, r3, #7
     246:	18d3      	adds	r3, r2, r3
     248:	e000      	b.n	24c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24a:	2300      	movs	r3, #0
	}
}
     24c:	1c18      	adds	r0, r3, #0
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	41004400 	.word	0x41004400

00000258 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     258:	b580      	push	{r7, lr}
     25a:	b082      	sub	sp, #8
     25c:	af00      	add	r7, sp, #0
     25e:	1c02      	adds	r2, r0, #0
     260:	1dfb      	adds	r3, r7, #7
     262:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     264:	1dfb      	adds	r3, r7, #7
     266:	781b      	ldrb	r3, [r3, #0]
     268:	1c18      	adds	r0, r3, #0
     26a:	4b03      	ldr	r3, [pc, #12]	; (278 <port_get_group_from_gpio_pin+0x20>)
     26c:	4798      	blx	r3
     26e:	1c03      	adds	r3, r0, #0
}
     270:	1c18      	adds	r0, r3, #0
     272:	46bd      	mov	sp, r7
     274:	b002      	add	sp, #8
     276:	bd80      	pop	{r7, pc}
     278:	000001f9 	.word	0x000001f9

0000027c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2201      	movs	r2, #1
     28e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2200      	movs	r2, #0
     294:	709a      	strb	r2, [r3, #2]
}
     296:	46bd      	mov	sp, r7
     298:	b002      	add	sp, #8
     29a:	bd80      	pop	{r7, pc}

0000029c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     29c:	b580      	push	{r7, lr}
     29e:	b084      	sub	sp, #16
     2a0:	af00      	add	r7, sp, #0
     2a2:	1c02      	adds	r2, r0, #0
     2a4:	1dfb      	adds	r3, r7, #7
     2a6:	701a      	strb	r2, [r3, #0]
     2a8:	1dbb      	adds	r3, r7, #6
     2aa:	1c0a      	adds	r2, r1, #0
     2ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2ae:	1dfb      	adds	r3, r7, #7
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	1c18      	adds	r0, r3, #0
     2b4:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <port_pin_set_output_level+0x4c>)
     2b6:	4798      	blx	r3
     2b8:	1c03      	adds	r3, r0, #0
     2ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2bc:	1dfb      	adds	r3, r7, #7
     2be:	781b      	ldrb	r3, [r3, #0]
     2c0:	221f      	movs	r2, #31
     2c2:	4013      	ands	r3, r2
     2c4:	2201      	movs	r2, #1
     2c6:	409a      	lsls	r2, r3
     2c8:	1c13      	adds	r3, r2, #0
     2ca:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2cc:	1dbb      	adds	r3, r7, #6
     2ce:	781b      	ldrb	r3, [r3, #0]
     2d0:	2b00      	cmp	r3, #0
     2d2:	d003      	beq.n	2dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2d4:	68fb      	ldr	r3, [r7, #12]
     2d6:	68ba      	ldr	r2, [r7, #8]
     2d8:	619a      	str	r2, [r3, #24]
     2da:	e002      	b.n	2e2 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	615a      	str	r2, [r3, #20]
	}
}
     2e2:	46bd      	mov	sp, r7
     2e4:	b004      	add	sp, #16
     2e6:	bd80      	pop	{r7, pc}
     2e8:	00000259 	.word	0x00000259

000002ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2ec:	b580      	push	{r7, lr}
     2ee:	b082      	sub	sp, #8
     2f0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2f2:	1d3b      	adds	r3, r7, #4
     2f4:	1c18      	adds	r0, r3, #0
     2f6:	4b0e      	ldr	r3, [pc, #56]	; (330 <system_board_init+0x44>)
     2f8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2fa:	1d3b      	adds	r3, r7, #4
     2fc:	2201      	movs	r2, #1
     2fe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     300:	1d3b      	adds	r3, r7, #4
     302:	203e      	movs	r0, #62	; 0x3e
     304:	1c19      	adds	r1, r3, #0
     306:	4b0b      	ldr	r3, [pc, #44]	; (334 <system_board_init+0x48>)
     308:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     30a:	203e      	movs	r0, #62	; 0x3e
     30c:	2101      	movs	r1, #1
     30e:	4b0a      	ldr	r3, [pc, #40]	; (338 <system_board_init+0x4c>)
     310:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     312:	1d3b      	adds	r3, r7, #4
     314:	2200      	movs	r2, #0
     316:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     318:	1d3b      	adds	r3, r7, #4
     31a:	2201      	movs	r2, #1
     31c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     31e:	1d3b      	adds	r3, r7, #4
     320:	200f      	movs	r0, #15
     322:	1c19      	adds	r1, r3, #0
     324:	4b03      	ldr	r3, [pc, #12]	; (334 <system_board_init+0x48>)
     326:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     328:	46bd      	mov	sp, r7
     32a:	b002      	add	sp, #8
     32c:	bd80      	pop	{r7, pc}
     32e:	46c0      	nop			; (mov r8, r8)
     330:	0000027d 	.word	0x0000027d
     334:	00000365 	.word	0x00000365
     338:	0000029d 	.word	0x0000029d

0000033c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     33c:	b580      	push	{r7, lr}
     33e:	b082      	sub	sp, #8
     340:	af00      	add	r7, sp, #0
     342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     344:	687b      	ldr	r3, [r7, #4]
     346:	2280      	movs	r2, #128	; 0x80
     348:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	2200      	movs	r2, #0
     34e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     350:	687b      	ldr	r3, [r7, #4]
     352:	2201      	movs	r2, #1
     354:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     356:	687b      	ldr	r3, [r7, #4]
     358:	2200      	movs	r2, #0
     35a:	70da      	strb	r2, [r3, #3]
}
     35c:	46bd      	mov	sp, r7
     35e:	b002      	add	sp, #8
     360:	bd80      	pop	{r7, pc}
     362:	46c0      	nop			; (mov r8, r8)

00000364 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     364:	b580      	push	{r7, lr}
     366:	b084      	sub	sp, #16
     368:	af00      	add	r7, sp, #0
     36a:	1c02      	adds	r2, r0, #0
     36c:	6039      	str	r1, [r7, #0]
     36e:	1dfb      	adds	r3, r7, #7
     370:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     372:	230c      	movs	r3, #12
     374:	18fb      	adds	r3, r7, r3
     376:	1c18      	adds	r0, r3, #0
     378:	4b0f      	ldr	r3, [pc, #60]	; (3b8 <port_pin_set_config+0x54>)
     37a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     37c:	230c      	movs	r3, #12
     37e:	18fb      	adds	r3, r7, r3
     380:	2280      	movs	r2, #128	; 0x80
     382:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     384:	683b      	ldr	r3, [r7, #0]
     386:	781a      	ldrb	r2, [r3, #0]
     388:	230c      	movs	r3, #12
     38a:	18fb      	adds	r3, r7, r3
     38c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     38e:	683b      	ldr	r3, [r7, #0]
     390:	785a      	ldrb	r2, [r3, #1]
     392:	230c      	movs	r3, #12
     394:	18fb      	adds	r3, r7, r3
     396:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     398:	683b      	ldr	r3, [r7, #0]
     39a:	789a      	ldrb	r2, [r3, #2]
     39c:	230c      	movs	r3, #12
     39e:	18fb      	adds	r3, r7, r3
     3a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3a2:	1dfb      	adds	r3, r7, #7
     3a4:	781a      	ldrb	r2, [r3, #0]
     3a6:	230c      	movs	r3, #12
     3a8:	18fb      	adds	r3, r7, r3
     3aa:	1c10      	adds	r0, r2, #0
     3ac:	1c19      	adds	r1, r3, #0
     3ae:	4b03      	ldr	r3, [pc, #12]	; (3bc <port_pin_set_config+0x58>)
     3b0:	4798      	blx	r3
}
     3b2:	46bd      	mov	sp, r7
     3b4:	b004      	add	sp, #16
     3b6:	bd80      	pop	{r7, pc}
     3b8:	0000033d 	.word	0x0000033d
     3bc:	00001e9d 	.word	0x00001e9d

000003c0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     3c0:	b580      	push	{r7, lr}
     3c2:	b082      	sub	sp, #8
     3c4:	af00      	add	r7, sp, #0
     3c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3c8:	687b      	ldr	r3, [r7, #4]
     3ca:	2200      	movs	r2, #0
     3cc:	701a      	strb	r2, [r3, #0]
}
     3ce:	46bd      	mov	sp, r7
     3d0:	b002      	add	sp, #8
     3d2:	bd80      	pop	{r7, pc}

000003d4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3d4:	b580      	push	{r7, lr}
     3d6:	b086      	sub	sp, #24
     3d8:	af00      	add	r7, sp, #0
     3da:	60f8      	str	r0, [r7, #12]
     3dc:	60b9      	str	r1, [r7, #8]
     3de:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     3e0:	2316      	movs	r3, #22
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	2200      	movs	r2, #0
     3e6:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     3e8:	68bb      	ldr	r3, [r7, #8]
     3ea:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     3ec:	68bb      	ldr	r3, [r7, #8]
     3ee:	085a      	lsrs	r2, r3, #1
     3f0:	68fb      	ldr	r3, [r7, #12]
     3f2:	429a      	cmp	r2, r3
     3f4:	d201      	bcs.n	3fa <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3f6:	2340      	movs	r3, #64	; 0x40
     3f8:	e026      	b.n	448 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     3fa:	68bb      	ldr	r3, [r7, #8]
     3fc:	085b      	lsrs	r3, r3, #1
     3fe:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     400:	e00a      	b.n	418 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     402:	693a      	ldr	r2, [r7, #16]
     404:	68fb      	ldr	r3, [r7, #12]
     406:	1ad3      	subs	r3, r2, r3
     408:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     40a:	2316      	movs	r3, #22
     40c:	18fb      	adds	r3, r7, r3
     40e:	881a      	ldrh	r2, [r3, #0]
     410:	2316      	movs	r3, #22
     412:	18fb      	adds	r3, r7, r3
     414:	3201      	adds	r2, #1
     416:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     418:	693a      	ldr	r2, [r7, #16]
     41a:	68fb      	ldr	r3, [r7, #12]
     41c:	429a      	cmp	r2, r3
     41e:	d2f0      	bcs.n	402 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     420:	2316      	movs	r3, #22
     422:	18fb      	adds	r3, r7, r3
     424:	2216      	movs	r2, #22
     426:	18ba      	adds	r2, r7, r2
     428:	8812      	ldrh	r2, [r2, #0]
     42a:	3a01      	subs	r2, #1
     42c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     42e:	2316      	movs	r3, #22
     430:	18fb      	adds	r3, r7, r3
     432:	881b      	ldrh	r3, [r3, #0]
     434:	2bff      	cmp	r3, #255	; 0xff
     436:	d901      	bls.n	43c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     438:	2340      	movs	r3, #64	; 0x40
     43a:	e005      	b.n	448 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	2216      	movs	r2, #22
     440:	18ba      	adds	r2, r7, r2
     442:	8812      	ldrh	r2, [r2, #0]
     444:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     446:	2300      	movs	r3, #0
	}
}
     448:	1c18      	adds	r0, r3, #0
     44a:	46bd      	mov	sp, r7
     44c:	b006      	add	sp, #24
     44e:	bd80      	pop	{r7, pc}

00000450 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     450:	b580      	push	{r7, lr}
     452:	b084      	sub	sp, #16
     454:	af00      	add	r7, sp, #0
     456:	1c02      	adds	r2, r0, #0
     458:	1dfb      	adds	r3, r7, #7
     45a:	701a      	strb	r2, [r3, #0]
     45c:	1dbb      	adds	r3, r7, #6
     45e:	1c0a      	adds	r2, r1, #0
     460:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     462:	4b1a      	ldr	r3, [pc, #104]	; (4cc <sercom_set_gclk_generator+0x7c>)
     464:	781b      	ldrb	r3, [r3, #0]
     466:	2201      	movs	r2, #1
     468:	4053      	eors	r3, r2
     46a:	b2db      	uxtb	r3, r3
     46c:	2b00      	cmp	r3, #0
     46e:	d103      	bne.n	478 <sercom_set_gclk_generator+0x28>
     470:	1dbb      	adds	r3, r7, #6
     472:	781b      	ldrb	r3, [r3, #0]
     474:	2b00      	cmp	r3, #0
     476:	d01b      	beq.n	4b0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     478:	230c      	movs	r3, #12
     47a:	18fb      	adds	r3, r7, r3
     47c:	1c18      	adds	r0, r3, #0
     47e:	4b14      	ldr	r3, [pc, #80]	; (4d0 <sercom_set_gclk_generator+0x80>)
     480:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     482:	230c      	movs	r3, #12
     484:	18fb      	adds	r3, r7, r3
     486:	1dfa      	adds	r2, r7, #7
     488:	7812      	ldrb	r2, [r2, #0]
     48a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     48c:	230c      	movs	r3, #12
     48e:	18fb      	adds	r3, r7, r3
     490:	2013      	movs	r0, #19
     492:	1c19      	adds	r1, r3, #0
     494:	4b0f      	ldr	r3, [pc, #60]	; (4d4 <sercom_set_gclk_generator+0x84>)
     496:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     498:	2013      	movs	r0, #19
     49a:	4b0f      	ldr	r3, [pc, #60]	; (4d8 <sercom_set_gclk_generator+0x88>)
     49c:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     49e:	4b0b      	ldr	r3, [pc, #44]	; (4cc <sercom_set_gclk_generator+0x7c>)
     4a0:	1dfa      	adds	r2, r7, #7
     4a2:	7812      	ldrb	r2, [r2, #0]
     4a4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     4a6:	4b09      	ldr	r3, [pc, #36]	; (4cc <sercom_set_gclk_generator+0x7c>)
     4a8:	2201      	movs	r2, #1
     4aa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     4ac:	2300      	movs	r3, #0
     4ae:	e008      	b.n	4c2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     4b0:	4b06      	ldr	r3, [pc, #24]	; (4cc <sercom_set_gclk_generator+0x7c>)
     4b2:	785b      	ldrb	r3, [r3, #1]
     4b4:	1dfa      	adds	r2, r7, #7
     4b6:	7812      	ldrb	r2, [r2, #0]
     4b8:	429a      	cmp	r2, r3
     4ba:	d101      	bne.n	4c0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
     4bc:	2300      	movs	r3, #0
     4be:	e000      	b.n	4c2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     4c0:	231d      	movs	r3, #29
}
     4c2:	1c18      	adds	r0, r3, #0
     4c4:	46bd      	mov	sp, r7
     4c6:	b004      	add	sp, #16
     4c8:	bd80      	pop	{r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	20000038 	.word	0x20000038
     4d0:	000003c1 	.word	0x000003c1
     4d4:	00001bb1 	.word	0x00001bb1
     4d8:	00001bf5 	.word	0x00001bf5

000004dc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
     4e4:	1c0a      	adds	r2, r1, #0
     4e6:	1cfb      	adds	r3, r7, #3
     4e8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     4ea:	687b      	ldr	r3, [r7, #4]
     4ec:	4a4d      	ldr	r2, [pc, #308]	; (624 <_sercom_get_default_pad+0x148>)
     4ee:	4293      	cmp	r3, r2
     4f0:	d03f      	beq.n	572 <_sercom_get_default_pad+0x96>
     4f2:	4a4c      	ldr	r2, [pc, #304]	; (624 <_sercom_get_default_pad+0x148>)
     4f4:	4293      	cmp	r3, r2
     4f6:	d806      	bhi.n	506 <_sercom_get_default_pad+0x2a>
     4f8:	4a4b      	ldr	r2, [pc, #300]	; (628 <_sercom_get_default_pad+0x14c>)
     4fa:	4293      	cmp	r3, r2
     4fc:	d00f      	beq.n	51e <_sercom_get_default_pad+0x42>
     4fe:	4a4b      	ldr	r2, [pc, #300]	; (62c <_sercom_get_default_pad+0x150>)
     500:	4293      	cmp	r3, r2
     502:	d021      	beq.n	548 <_sercom_get_default_pad+0x6c>
     504:	e089      	b.n	61a <_sercom_get_default_pad+0x13e>
     506:	4a4a      	ldr	r2, [pc, #296]	; (630 <_sercom_get_default_pad+0x154>)
     508:	4293      	cmp	r3, r2
     50a:	d100      	bne.n	50e <_sercom_get_default_pad+0x32>
     50c:	e05b      	b.n	5c6 <_sercom_get_default_pad+0xea>
     50e:	4a49      	ldr	r2, [pc, #292]	; (634 <_sercom_get_default_pad+0x158>)
     510:	4293      	cmp	r3, r2
     512:	d100      	bne.n	516 <_sercom_get_default_pad+0x3a>
     514:	e06c      	b.n	5f0 <_sercom_get_default_pad+0x114>
     516:	4a48      	ldr	r2, [pc, #288]	; (638 <_sercom_get_default_pad+0x15c>)
     518:	4293      	cmp	r3, r2
     51a:	d03f      	beq.n	59c <_sercom_get_default_pad+0xc0>
     51c:	e07d      	b.n	61a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51e:	1cfb      	adds	r3, r7, #3
     520:	781b      	ldrb	r3, [r3, #0]
     522:	2b01      	cmp	r3, #1
     524:	d00a      	beq.n	53c <_sercom_get_default_pad+0x60>
     526:	dc02      	bgt.n	52e <_sercom_get_default_pad+0x52>
     528:	2b00      	cmp	r3, #0
     52a:	d005      	beq.n	538 <_sercom_get_default_pad+0x5c>
     52c:	e075      	b.n	61a <_sercom_get_default_pad+0x13e>
     52e:	2b02      	cmp	r3, #2
     530:	d006      	beq.n	540 <_sercom_get_default_pad+0x64>
     532:	2b03      	cmp	r3, #3
     534:	d006      	beq.n	544 <_sercom_get_default_pad+0x68>
     536:	e070      	b.n	61a <_sercom_get_default_pad+0x13e>
     538:	4b40      	ldr	r3, [pc, #256]	; (63c <_sercom_get_default_pad+0x160>)
     53a:	e06f      	b.n	61c <_sercom_get_default_pad+0x140>
     53c:	4b40      	ldr	r3, [pc, #256]	; (640 <_sercom_get_default_pad+0x164>)
     53e:	e06d      	b.n	61c <_sercom_get_default_pad+0x140>
     540:	4b40      	ldr	r3, [pc, #256]	; (644 <_sercom_get_default_pad+0x168>)
     542:	e06b      	b.n	61c <_sercom_get_default_pad+0x140>
     544:	4b40      	ldr	r3, [pc, #256]	; (648 <_sercom_get_default_pad+0x16c>)
     546:	e069      	b.n	61c <_sercom_get_default_pad+0x140>
     548:	1cfb      	adds	r3, r7, #3
     54a:	781b      	ldrb	r3, [r3, #0]
     54c:	2b01      	cmp	r3, #1
     54e:	d00a      	beq.n	566 <_sercom_get_default_pad+0x8a>
     550:	dc02      	bgt.n	558 <_sercom_get_default_pad+0x7c>
     552:	2b00      	cmp	r3, #0
     554:	d005      	beq.n	562 <_sercom_get_default_pad+0x86>
     556:	e060      	b.n	61a <_sercom_get_default_pad+0x13e>
     558:	2b02      	cmp	r3, #2
     55a:	d006      	beq.n	56a <_sercom_get_default_pad+0x8e>
     55c:	2b03      	cmp	r3, #3
     55e:	d006      	beq.n	56e <_sercom_get_default_pad+0x92>
     560:	e05b      	b.n	61a <_sercom_get_default_pad+0x13e>
     562:	2303      	movs	r3, #3
     564:	e05a      	b.n	61c <_sercom_get_default_pad+0x140>
     566:	4b39      	ldr	r3, [pc, #228]	; (64c <_sercom_get_default_pad+0x170>)
     568:	e058      	b.n	61c <_sercom_get_default_pad+0x140>
     56a:	4b39      	ldr	r3, [pc, #228]	; (650 <_sercom_get_default_pad+0x174>)
     56c:	e056      	b.n	61c <_sercom_get_default_pad+0x140>
     56e:	4b39      	ldr	r3, [pc, #228]	; (654 <_sercom_get_default_pad+0x178>)
     570:	e054      	b.n	61c <_sercom_get_default_pad+0x140>
     572:	1cfb      	adds	r3, r7, #3
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b01      	cmp	r3, #1
     578:	d00a      	beq.n	590 <_sercom_get_default_pad+0xb4>
     57a:	dc02      	bgt.n	582 <_sercom_get_default_pad+0xa6>
     57c:	2b00      	cmp	r3, #0
     57e:	d005      	beq.n	58c <_sercom_get_default_pad+0xb0>
     580:	e04b      	b.n	61a <_sercom_get_default_pad+0x13e>
     582:	2b02      	cmp	r3, #2
     584:	d006      	beq.n	594 <_sercom_get_default_pad+0xb8>
     586:	2b03      	cmp	r3, #3
     588:	d006      	beq.n	598 <_sercom_get_default_pad+0xbc>
     58a:	e046      	b.n	61a <_sercom_get_default_pad+0x13e>
     58c:	4b32      	ldr	r3, [pc, #200]	; (658 <_sercom_get_default_pad+0x17c>)
     58e:	e045      	b.n	61c <_sercom_get_default_pad+0x140>
     590:	4b32      	ldr	r3, [pc, #200]	; (65c <_sercom_get_default_pad+0x180>)
     592:	e043      	b.n	61c <_sercom_get_default_pad+0x140>
     594:	4b32      	ldr	r3, [pc, #200]	; (660 <_sercom_get_default_pad+0x184>)
     596:	e041      	b.n	61c <_sercom_get_default_pad+0x140>
     598:	4b32      	ldr	r3, [pc, #200]	; (664 <_sercom_get_default_pad+0x188>)
     59a:	e03f      	b.n	61c <_sercom_get_default_pad+0x140>
     59c:	1cfb      	adds	r3, r7, #3
     59e:	781b      	ldrb	r3, [r3, #0]
     5a0:	2b01      	cmp	r3, #1
     5a2:	d00a      	beq.n	5ba <_sercom_get_default_pad+0xde>
     5a4:	dc02      	bgt.n	5ac <_sercom_get_default_pad+0xd0>
     5a6:	2b00      	cmp	r3, #0
     5a8:	d005      	beq.n	5b6 <_sercom_get_default_pad+0xda>
     5aa:	e036      	b.n	61a <_sercom_get_default_pad+0x13e>
     5ac:	2b02      	cmp	r3, #2
     5ae:	d006      	beq.n	5be <_sercom_get_default_pad+0xe2>
     5b0:	2b03      	cmp	r3, #3
     5b2:	d006      	beq.n	5c2 <_sercom_get_default_pad+0xe6>
     5b4:	e031      	b.n	61a <_sercom_get_default_pad+0x13e>
     5b6:	4b2c      	ldr	r3, [pc, #176]	; (668 <_sercom_get_default_pad+0x18c>)
     5b8:	e030      	b.n	61c <_sercom_get_default_pad+0x140>
     5ba:	4b2c      	ldr	r3, [pc, #176]	; (66c <_sercom_get_default_pad+0x190>)
     5bc:	e02e      	b.n	61c <_sercom_get_default_pad+0x140>
     5be:	4b2c      	ldr	r3, [pc, #176]	; (670 <_sercom_get_default_pad+0x194>)
     5c0:	e02c      	b.n	61c <_sercom_get_default_pad+0x140>
     5c2:	4b2c      	ldr	r3, [pc, #176]	; (674 <_sercom_get_default_pad+0x198>)
     5c4:	e02a      	b.n	61c <_sercom_get_default_pad+0x140>
     5c6:	1cfb      	adds	r3, r7, #3
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b01      	cmp	r3, #1
     5cc:	d00a      	beq.n	5e4 <_sercom_get_default_pad+0x108>
     5ce:	dc02      	bgt.n	5d6 <_sercom_get_default_pad+0xfa>
     5d0:	2b00      	cmp	r3, #0
     5d2:	d005      	beq.n	5e0 <_sercom_get_default_pad+0x104>
     5d4:	e021      	b.n	61a <_sercom_get_default_pad+0x13e>
     5d6:	2b02      	cmp	r3, #2
     5d8:	d006      	beq.n	5e8 <_sercom_get_default_pad+0x10c>
     5da:	2b03      	cmp	r3, #3
     5dc:	d006      	beq.n	5ec <_sercom_get_default_pad+0x110>
     5de:	e01c      	b.n	61a <_sercom_get_default_pad+0x13e>
     5e0:	4b25      	ldr	r3, [pc, #148]	; (678 <_sercom_get_default_pad+0x19c>)
     5e2:	e01b      	b.n	61c <_sercom_get_default_pad+0x140>
     5e4:	4b25      	ldr	r3, [pc, #148]	; (67c <_sercom_get_default_pad+0x1a0>)
     5e6:	e019      	b.n	61c <_sercom_get_default_pad+0x140>
     5e8:	4b25      	ldr	r3, [pc, #148]	; (680 <_sercom_get_default_pad+0x1a4>)
     5ea:	e017      	b.n	61c <_sercom_get_default_pad+0x140>
     5ec:	4b25      	ldr	r3, [pc, #148]	; (684 <_sercom_get_default_pad+0x1a8>)
     5ee:	e015      	b.n	61c <_sercom_get_default_pad+0x140>
     5f0:	1cfb      	adds	r3, r7, #3
     5f2:	781b      	ldrb	r3, [r3, #0]
     5f4:	2b01      	cmp	r3, #1
     5f6:	d00a      	beq.n	60e <_sercom_get_default_pad+0x132>
     5f8:	dc02      	bgt.n	600 <_sercom_get_default_pad+0x124>
     5fa:	2b00      	cmp	r3, #0
     5fc:	d005      	beq.n	60a <_sercom_get_default_pad+0x12e>
     5fe:	e00c      	b.n	61a <_sercom_get_default_pad+0x13e>
     600:	2b02      	cmp	r3, #2
     602:	d006      	beq.n	612 <_sercom_get_default_pad+0x136>
     604:	2b03      	cmp	r3, #3
     606:	d006      	beq.n	616 <_sercom_get_default_pad+0x13a>
     608:	e007      	b.n	61a <_sercom_get_default_pad+0x13e>
     60a:	4b1f      	ldr	r3, [pc, #124]	; (688 <_sercom_get_default_pad+0x1ac>)
     60c:	e006      	b.n	61c <_sercom_get_default_pad+0x140>
     60e:	4b1f      	ldr	r3, [pc, #124]	; (68c <_sercom_get_default_pad+0x1b0>)
     610:	e004      	b.n	61c <_sercom_get_default_pad+0x140>
     612:	4b1f      	ldr	r3, [pc, #124]	; (690 <_sercom_get_default_pad+0x1b4>)
     614:	e002      	b.n	61c <_sercom_get_default_pad+0x140>
     616:	4b1f      	ldr	r3, [pc, #124]	; (694 <_sercom_get_default_pad+0x1b8>)
     618:	e000      	b.n	61c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     61a:	2300      	movs	r3, #0
}
     61c:	1c18      	adds	r0, r3, #0
     61e:	46bd      	mov	sp, r7
     620:	b002      	add	sp, #8
     622:	bd80      	pop	{r7, pc}
     624:	42001000 	.word	0x42001000
     628:	42000800 	.word	0x42000800
     62c:	42000c00 	.word	0x42000c00
     630:	42001800 	.word	0x42001800
     634:	42001c00 	.word	0x42001c00
     638:	42001400 	.word	0x42001400
     63c:	00040003 	.word	0x00040003
     640:	00050003 	.word	0x00050003
     644:	00060003 	.word	0x00060003
     648:	00070003 	.word	0x00070003
     64c:	00010003 	.word	0x00010003
     650:	001e0003 	.word	0x001e0003
     654:	001f0003 	.word	0x001f0003
     658:	00080003 	.word	0x00080003
     65c:	00090003 	.word	0x00090003
     660:	000a0003 	.word	0x000a0003
     664:	000b0003 	.word	0x000b0003
     668:	00100003 	.word	0x00100003
     66c:	00110003 	.word	0x00110003
     670:	00120003 	.word	0x00120003
     674:	00130003 	.word	0x00130003
     678:	000c0003 	.word	0x000c0003
     67c:	000d0003 	.word	0x000d0003
     680:	000e0003 	.word	0x000e0003
     684:	000f0003 	.word	0x000f0003
     688:	00160003 	.word	0x00160003
     68c:	00170003 	.word	0x00170003
     690:	00180003 	.word	0x00180003
     694:	00190003 	.word	0x00190003

00000698 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     698:	b590      	push	{r4, r7, lr}
     69a:	b08b      	sub	sp, #44	; 0x2c
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6a0:	230c      	movs	r3, #12
     6a2:	18fb      	adds	r3, r7, r3
     6a4:	4a0e      	ldr	r2, [pc, #56]	; (6e0 <_sercom_get_sercom_inst_index+0x48>)
     6a6:	ca13      	ldmia	r2!, {r0, r1, r4}
     6a8:	c313      	stmia	r3!, {r0, r1, r4}
     6aa:	ca13      	ldmia	r2!, {r0, r1, r4}
     6ac:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ae:	2300      	movs	r3, #0
     6b0:	627b      	str	r3, [r7, #36]	; 0x24
     6b2:	e00d      	b.n	6d0 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6b4:	687b      	ldr	r3, [r7, #4]
     6b6:	220c      	movs	r2, #12
     6b8:	18ba      	adds	r2, r7, r2
     6ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
     6bc:	0089      	lsls	r1, r1, #2
     6be:	588a      	ldr	r2, [r1, r2]
     6c0:	4293      	cmp	r3, r2
     6c2:	d102      	bne.n	6ca <_sercom_get_sercom_inst_index+0x32>
			return i;
     6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6c6:	b2db      	uxtb	r3, r3
     6c8:	e006      	b.n	6d8 <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6cc:	3301      	adds	r3, #1
     6ce:	627b      	str	r3, [r7, #36]	; 0x24
     6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6d2:	2b05      	cmp	r3, #5
     6d4:	d9ee      	bls.n	6b4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     6d6:	2300      	movs	r3, #0
}
     6d8:	1c18      	adds	r0, r3, #0
     6da:	46bd      	mov	sp, r7
     6dc:	b00b      	add	sp, #44	; 0x2c
     6de:	bd90      	pop	{r4, r7, pc}
     6e0:	0000254c 	.word	0x0000254c

000006e4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2280      	movs	r2, #128	; 0x80
     6f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	2200      	movs	r2, #0
     6f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	2201      	movs	r2, #1
     6fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	2200      	movs	r2, #0
     702:	70da      	strb	r2, [r3, #3]
}
     704:	46bd      	mov	sp, r7
     706:	b002      	add	sp, #8
     708:	bd80      	pop	{r7, pc}
     70a:	46c0      	nop			; (mov r8, r8)

0000070c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     70c:	b580      	push	{r7, lr}
     70e:	b084      	sub	sp, #16
     710:	af00      	add	r7, sp, #0
     712:	1c02      	adds	r2, r0, #0
     714:	1dfb      	adds	r3, r7, #7
     716:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     718:	230f      	movs	r3, #15
     71a:	18fb      	adds	r3, r7, r3
     71c:	1dfa      	adds	r2, r7, #7
     71e:	7812      	ldrb	r2, [r2, #0]
     720:	09d2      	lsrs	r2, r2, #7
     722:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     724:	230e      	movs	r3, #14
     726:	18fb      	adds	r3, r7, r3
     728:	1dfa      	adds	r2, r7, #7
     72a:	7812      	ldrb	r2, [r2, #0]
     72c:	0952      	lsrs	r2, r2, #5
     72e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     730:	4b0d      	ldr	r3, [pc, #52]	; (768 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     732:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     734:	230f      	movs	r3, #15
     736:	18fb      	adds	r3, r7, r3
     738:	781b      	ldrb	r3, [r3, #0]
     73a:	2b00      	cmp	r3, #0
     73c:	d10f      	bne.n	75e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     73e:	230f      	movs	r3, #15
     740:	18fb      	adds	r3, r7, r3
     742:	781b      	ldrb	r3, [r3, #0]
     744:	009b      	lsls	r3, r3, #2
     746:	2210      	movs	r2, #16
     748:	4694      	mov	ip, r2
     74a:	44bc      	add	ip, r7
     74c:	4463      	add	r3, ip
     74e:	3b08      	subs	r3, #8
     750:	681a      	ldr	r2, [r3, #0]
     752:	230e      	movs	r3, #14
     754:	18fb      	adds	r3, r7, r3
     756:	781b      	ldrb	r3, [r3, #0]
     758:	01db      	lsls	r3, r3, #7
     75a:	18d3      	adds	r3, r2, r3
     75c:	e000      	b.n	760 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     75e:	2300      	movs	r3, #0
	}
}
     760:	1c18      	adds	r0, r3, #0
     762:	46bd      	mov	sp, r7
     764:	b004      	add	sp, #16
     766:	bd80      	pop	{r7, pc}
     768:	41004400 	.word	0x41004400

0000076c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     76c:	b580      	push	{r7, lr}
     76e:	b086      	sub	sp, #24
     770:	af00      	add	r7, sp, #0
     772:	1c02      	adds	r2, r0, #0
     774:	1dfb      	adds	r3, r7, #7
     776:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     778:	1dfb      	adds	r3, r7, #7
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	1c18      	adds	r0, r3, #0
     77e:	4b19      	ldr	r3, [pc, #100]	; (7e4 <system_pinmux_pin_get_mux_position+0x78>)
     780:	4798      	blx	r3
     782:	1c03      	adds	r3, r0, #0
     784:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     786:	1dfb      	adds	r3, r7, #7
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	221f      	movs	r2, #31
     78c:	4013      	ands	r3, r2
     78e:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     790:	697a      	ldr	r2, [r7, #20]
     792:	2140      	movs	r1, #64	; 0x40
     794:	693b      	ldr	r3, [r7, #16]
     796:	18d3      	adds	r3, r2, r3
     798:	185b      	adds	r3, r3, r1
     79a:	781b      	ldrb	r3, [r3, #0]
     79c:	b2db      	uxtb	r3, r3
     79e:	1c1a      	adds	r2, r3, #0
     7a0:	2301      	movs	r3, #1
     7a2:	4013      	ands	r3, r2
     7a4:	d101      	bne.n	7aa <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     7a6:	2380      	movs	r3, #128	; 0x80
     7a8:	e017      	b.n	7da <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     7aa:	693b      	ldr	r3, [r7, #16]
     7ac:	085b      	lsrs	r3, r3, #1
     7ae:	697a      	ldr	r2, [r7, #20]
     7b0:	2130      	movs	r1, #48	; 0x30
     7b2:	18d3      	adds	r3, r2, r3
     7b4:	185b      	adds	r3, r3, r1
     7b6:	781b      	ldrb	r3, [r3, #0]
     7b8:	b2db      	uxtb	r3, r3
     7ba:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     7bc:	693b      	ldr	r3, [r7, #16]
     7be:	2201      	movs	r2, #1
     7c0:	4013      	ands	r3, r2
     7c2:	d005      	beq.n	7d0 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	22f0      	movs	r2, #240	; 0xf0
     7c8:	4013      	ands	r3, r2
     7ca:	091b      	lsrs	r3, r3, #4
     7cc:	b2db      	uxtb	r3, r3
     7ce:	e004      	b.n	7da <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	b2db      	uxtb	r3, r3
     7d4:	220f      	movs	r2, #15
     7d6:	4013      	ands	r3, r2
     7d8:	b2db      	uxtb	r3, r3
	}
}
     7da:	1c18      	adds	r0, r3, #0
     7dc:	46bd      	mov	sp, r7
     7de:	b006      	add	sp, #24
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	0000070d 	.word	0x0000070d

000007e8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     7e8:	b580      	push	{r7, lr}
     7ea:	b082      	sub	sp, #8
     7ec:	af00      	add	r7, sp, #0
     7ee:	1c02      	adds	r2, r0, #0
     7f0:	1dfb      	adds	r3, r7, #7
     7f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     7f4:	1dfb      	adds	r3, r7, #7
     7f6:	781b      	ldrb	r3, [r3, #0]
     7f8:	1c18      	adds	r0, r3, #0
     7fa:	4b03      	ldr	r3, [pc, #12]	; (808 <port_get_group_from_gpio_pin+0x20>)
     7fc:	4798      	blx	r3
     7fe:	1c03      	adds	r3, r0, #0
}
     800:	1c18      	adds	r0, r3, #0
     802:	46bd      	mov	sp, r7
     804:	b002      	add	sp, #8
     806:	bd80      	pop	{r7, pc}
     808:	0000070d 	.word	0x0000070d

0000080c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     80c:	b580      	push	{r7, lr}
     80e:	b084      	sub	sp, #16
     810:	af00      	add	r7, sp, #0
     812:	1c02      	adds	r2, r0, #0
     814:	1dfb      	adds	r3, r7, #7
     816:	701a      	strb	r2, [r3, #0]
     818:	1dbb      	adds	r3, r7, #6
     81a:	1c0a      	adds	r2, r1, #0
     81c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     81e:	1dfb      	adds	r3, r7, #7
     820:	781b      	ldrb	r3, [r3, #0]
     822:	1c18      	adds	r0, r3, #0
     824:	4b0c      	ldr	r3, [pc, #48]	; (858 <port_pin_set_output_level+0x4c>)
     826:	4798      	blx	r3
     828:	1c03      	adds	r3, r0, #0
     82a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     82c:	1dfb      	adds	r3, r7, #7
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	221f      	movs	r2, #31
     832:	4013      	ands	r3, r2
     834:	2201      	movs	r2, #1
     836:	409a      	lsls	r2, r3
     838:	1c13      	adds	r3, r2, #0
     83a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     83c:	1dbb      	adds	r3, r7, #6
     83e:	781b      	ldrb	r3, [r3, #0]
     840:	2b00      	cmp	r3, #0
     842:	d003      	beq.n	84c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     844:	68fb      	ldr	r3, [r7, #12]
     846:	68ba      	ldr	r2, [r7, #8]
     848:	619a      	str	r2, [r3, #24]
     84a:	e002      	b.n	852 <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     84c:	68fb      	ldr	r3, [r7, #12]
     84e:	68ba      	ldr	r2, [r7, #8]
     850:	615a      	str	r2, [r3, #20]
	}
}
     852:	46bd      	mov	sp, r7
     854:	b004      	add	sp, #16
     856:	bd80      	pop	{r7, pc}
     858:	000007e9 	.word	0x000007e9

0000085c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     864:	687b      	ldr	r3, [r7, #4]
     866:	2200      	movs	r2, #0
     868:	701a      	strb	r2, [r3, #0]
}
     86a:	46bd      	mov	sp, r7
     86c:	b002      	add	sp, #8
     86e:	bd80      	pop	{r7, pc}

00000870 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     870:	b580      	push	{r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	1c02      	adds	r2, r0, #0
     878:	6039      	str	r1, [r7, #0]
     87a:	1dfb      	adds	r3, r7, #7
     87c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     87e:	1dfb      	adds	r3, r7, #7
     880:	781b      	ldrb	r3, [r3, #0]
     882:	2b01      	cmp	r3, #1
     884:	d00a      	beq.n	89c <system_apb_clock_set_mask+0x2c>
     886:	2b02      	cmp	r3, #2
     888:	d00f      	beq.n	8aa <system_apb_clock_set_mask+0x3a>
     88a:	2b00      	cmp	r3, #0
     88c:	d114      	bne.n	8b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     88e:	4b0e      	ldr	r3, [pc, #56]	; (8c8 <system_apb_clock_set_mask+0x58>)
     890:	4a0d      	ldr	r2, [pc, #52]	; (8c8 <system_apb_clock_set_mask+0x58>)
     892:	6991      	ldr	r1, [r2, #24]
     894:	683a      	ldr	r2, [r7, #0]
     896:	430a      	orrs	r2, r1
     898:	619a      	str	r2, [r3, #24]
			break;
     89a:	e00f      	b.n	8bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     89c:	4b0a      	ldr	r3, [pc, #40]	; (8c8 <system_apb_clock_set_mask+0x58>)
     89e:	4a0a      	ldr	r2, [pc, #40]	; (8c8 <system_apb_clock_set_mask+0x58>)
     8a0:	69d1      	ldr	r1, [r2, #28]
     8a2:	683a      	ldr	r2, [r7, #0]
     8a4:	430a      	orrs	r2, r1
     8a6:	61da      	str	r2, [r3, #28]
			break;
     8a8:	e008      	b.n	8bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8aa:	4b07      	ldr	r3, [pc, #28]	; (8c8 <system_apb_clock_set_mask+0x58>)
     8ac:	4a06      	ldr	r2, [pc, #24]	; (8c8 <system_apb_clock_set_mask+0x58>)
     8ae:	6a11      	ldr	r1, [r2, #32]
     8b0:	683a      	ldr	r2, [r7, #0]
     8b2:	430a      	orrs	r2, r1
     8b4:	621a      	str	r2, [r3, #32]
			break;
     8b6:	e001      	b.n	8bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8b8:	2317      	movs	r3, #23
     8ba:	e000      	b.n	8be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     8bc:	2300      	movs	r3, #0
}
     8be:	1c18      	adds	r0, r3, #0
     8c0:	46bd      	mov	sp, r7
     8c2:	b002      	add	sp, #8
     8c4:	bd80      	pop	{r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	40000400 	.word	0x40000400

000008cc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8d0:	4b05      	ldr	r3, [pc, #20]	; (8e8 <system_is_debugger_present+0x1c>)
     8d2:	789b      	ldrb	r3, [r3, #2]
     8d4:	b2db      	uxtb	r3, r3
     8d6:	1c1a      	adds	r2, r3, #0
     8d8:	2302      	movs	r3, #2
     8da:	4013      	ands	r3, r2
     8dc:	1e5a      	subs	r2, r3, #1
     8de:	4193      	sbcs	r3, r2
     8e0:	b2db      	uxtb	r3, r3
}
     8e2:	1c18      	adds	r0, r3, #0
     8e4:	46bd      	mov	sp, r7
     8e6:	bd80      	pop	{r7, pc}
     8e8:	41002000 	.word	0x41002000

000008ec <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b084      	sub	sp, #16
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	681b      	ldr	r3, [r3, #0]
     8f8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     8fa:	68fb      	ldr	r3, [r7, #12]
     8fc:	69db      	ldr	r3, [r3, #28]
     8fe:	1e5a      	subs	r2, r3, #1
     900:	4193      	sbcs	r3, r2
     902:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     904:	1c18      	adds	r0, r3, #0
     906:	46bd      	mov	sp, r7
     908:	b004      	add	sp, #16
     90a:	bd80      	pop	{r7, pc}

0000090c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     90c:	b580      	push	{r7, lr}
     90e:	b084      	sub	sp, #16
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     914:	687b      	ldr	r3, [r7, #4]
     916:	681b      	ldr	r3, [r3, #0]
     918:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	1c18      	adds	r0, r3, #0
     920:	4b06      	ldr	r3, [pc, #24]	; (93c <spi_enable+0x30>)
     922:	4798      	blx	r3
     924:	1e03      	subs	r3, r0, #0
     926:	d1f9      	bne.n	91c <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	2202      	movs	r2, #2
     92e:	431a      	orrs	r2, r3
     930:	68fb      	ldr	r3, [r7, #12]
     932:	601a      	str	r2, [r3, #0]
}
     934:	46bd      	mov	sp, r7
     936:	b004      	add	sp, #16
     938:	bd80      	pop	{r7, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	000008ed 	.word	0x000008ed

00000940 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     940:	b580      	push	{r7, lr}
     942:	b084      	sub	sp, #16
     944:	af00      	add	r7, sp, #0
     946:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     948:	687b      	ldr	r3, [r7, #4]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     94e:	46c0      	nop			; (mov r8, r8)
     950:	687b      	ldr	r3, [r7, #4]
     952:	1c18      	adds	r0, r3, #0
     954:	4b06      	ldr	r3, [pc, #24]	; (970 <spi_disable+0x30>)
     956:	4798      	blx	r3
     958:	1e03      	subs	r3, r0, #0
     95a:	d1f9      	bne.n	950 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     95c:	68fb      	ldr	r3, [r7, #12]
     95e:	681b      	ldr	r3, [r3, #0]
     960:	2202      	movs	r2, #2
     962:	4393      	bics	r3, r2
     964:	1c1a      	adds	r2, r3, #0
     966:	68fb      	ldr	r3, [r7, #12]
     968:	601a      	str	r2, [r3, #0]
}
     96a:	46bd      	mov	sp, r7
     96c:	b004      	add	sp, #16
     96e:	bd80      	pop	{r7, pc}
     970:	000008ed 	.word	0x000008ed

00000974 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     974:	b580      	push	{r7, lr}
     976:	b084      	sub	sp, #16
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	681b      	ldr	r3, [r3, #0]
     980:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     982:	68fb      	ldr	r3, [r7, #12]
     984:	7e1b      	ldrb	r3, [r3, #24]
     986:	b2db      	uxtb	r3, r3
     988:	1c1a      	adds	r2, r3, #0
     98a:	2302      	movs	r3, #2
     98c:	4013      	ands	r3, r2
     98e:	1e5a      	subs	r2, r3, #1
     990:	4193      	sbcs	r3, r2
     992:	b2db      	uxtb	r3, r3
}
     994:	1c18      	adds	r0, r3, #0
     996:	46bd      	mov	sp, r7
     998:	b004      	add	sp, #16
     99a:	bd80      	pop	{r7, pc}

0000099c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     99c:	b580      	push	{r7, lr}
     99e:	b084      	sub	sp, #16
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	681b      	ldr	r3, [r3, #0]
     9a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	7e1b      	ldrb	r3, [r3, #24]
     9ae:	b2db      	uxtb	r3, r3
     9b0:	1c1a      	adds	r2, r3, #0
     9b2:	2301      	movs	r3, #1
     9b4:	4013      	ands	r3, r2
     9b6:	1e5a      	subs	r2, r3, #1
     9b8:	4193      	sbcs	r3, r2
     9ba:	b2db      	uxtb	r3, r3
}
     9bc:	1c18      	adds	r0, r3, #0
     9be:	46bd      	mov	sp, r7
     9c0:	b004      	add	sp, #16
     9c2:	bd80      	pop	{r7, pc}

000009c4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	b084      	sub	sp, #16
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	7e1b      	ldrb	r3, [r3, #24]
     9d6:	b2db      	uxtb	r3, r3
     9d8:	1c1a      	adds	r2, r3, #0
     9da:	2304      	movs	r3, #4
     9dc:	4013      	ands	r3, r2
     9de:	1e5a      	subs	r2, r3, #1
     9e0:	4193      	sbcs	r3, r2
     9e2:	b2db      	uxtb	r3, r3
}
     9e4:	1c18      	adds	r0, r3, #0
     9e6:	46bd      	mov	sp, r7
     9e8:	b004      	add	sp, #16
     9ea:	bd80      	pop	{r7, pc}

000009ec <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     9ec:	b580      	push	{r7, lr}
     9ee:	b084      	sub	sp, #16
     9f0:	af00      	add	r7, sp, #0
     9f2:	6078      	str	r0, [r7, #4]
     9f4:	1c0a      	adds	r2, r1, #0
     9f6:	1cbb      	adds	r3, r7, #2
     9f8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9fa:	687b      	ldr	r3, [r7, #4]
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	1c18      	adds	r0, r3, #0
     a04:	4b0a      	ldr	r3, [pc, #40]	; (a30 <spi_write+0x44>)
     a06:	4798      	blx	r3
     a08:	1c03      	adds	r3, r0, #0
     a0a:	1c1a      	adds	r2, r3, #0
     a0c:	2301      	movs	r3, #1
     a0e:	4053      	eors	r3, r2
     a10:	b2db      	uxtb	r3, r3
     a12:	2b00      	cmp	r3, #0
     a14:	d001      	beq.n	a1a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     a16:	2305      	movs	r3, #5
     a18:	e006      	b.n	a28 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a1a:	1cbb      	adds	r3, r7, #2
     a1c:	881b      	ldrh	r3, [r3, #0]
     a1e:	05db      	lsls	r3, r3, #23
     a20:	0dda      	lsrs	r2, r3, #23
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     a26:	2300      	movs	r3, #0
}
     a28:	1c18      	adds	r0, r3, #0
     a2a:	46bd      	mov	sp, r7
     a2c:	b004      	add	sp, #16
     a2e:	bd80      	pop	{r7, pc}
     a30:	0000099d 	.word	0x0000099d

00000a34 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     a34:	b580      	push	{r7, lr}
     a36:	b084      	sub	sp, #16
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
     a3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	681b      	ldr	r3, [r3, #0]
     a42:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	1c18      	adds	r0, r3, #0
     a48:	4b1d      	ldr	r3, [pc, #116]	; (ac0 <spi_read+0x8c>)
     a4a:	4798      	blx	r3
     a4c:	1c03      	adds	r3, r0, #0
     a4e:	1c1a      	adds	r2, r3, #0
     a50:	2301      	movs	r3, #1
     a52:	4053      	eors	r3, r2
     a54:	b2db      	uxtb	r3, r3
     a56:	2b00      	cmp	r3, #0
     a58:	d001      	beq.n	a5e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     a5a:	2310      	movs	r3, #16
     a5c:	e02c      	b.n	ab8 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     a5e:	230f      	movs	r3, #15
     a60:	18fb      	adds	r3, r7, r3
     a62:	2200      	movs	r2, #0
     a64:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a66:	68bb      	ldr	r3, [r7, #8]
     a68:	8b5b      	ldrh	r3, [r3, #26]
     a6a:	b29b      	uxth	r3, r3
     a6c:	1c1a      	adds	r2, r3, #0
     a6e:	2304      	movs	r3, #4
     a70:	4013      	ands	r3, r2
     a72:	d00b      	beq.n	a8c <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
     a74:	230f      	movs	r3, #15
     a76:	18fb      	adds	r3, r7, r3
     a78:	221e      	movs	r2, #30
     a7a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     a7c:	68bb      	ldr	r3, [r7, #8]
     a7e:	8b5b      	ldrh	r3, [r3, #26]
     a80:	b29b      	uxth	r3, r3
     a82:	2204      	movs	r2, #4
     a84:	4313      	orrs	r3, r2
     a86:	b29a      	uxth	r2, r3
     a88:	68bb      	ldr	r3, [r7, #8]
     a8a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	799b      	ldrb	r3, [r3, #6]
     a90:	2b01      	cmp	r3, #1
     a92:	d108      	bne.n	aa6 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a94:	68bb      	ldr	r3, [r7, #8]
     a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a98:	b29b      	uxth	r3, r3
     a9a:	05db      	lsls	r3, r3, #23
     a9c:	0ddb      	lsrs	r3, r3, #23
     a9e:	b29a      	uxth	r2, r3
     aa0:	683b      	ldr	r3, [r7, #0]
     aa2:	801a      	strh	r2, [r3, #0]
     aa4:	e005      	b.n	ab2 <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     aa6:	68bb      	ldr	r3, [r7, #8]
     aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     aaa:	b2db      	uxtb	r3, r3
     aac:	b29a      	uxth	r2, r3
     aae:	683b      	ldr	r3, [r7, #0]
     ab0:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     ab2:	230f      	movs	r3, #15
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	781b      	ldrb	r3, [r3, #0]
}
     ab8:	1c18      	adds	r0, r3, #0
     aba:	46bd      	mov	sp, r7
     abc:	b004      	add	sp, #16
     abe:	bd80      	pop	{r7, pc}
     ac0:	000009c5 	.word	0x000009c5

00000ac4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
     ac4:	b590      	push	{r4, r7, lr}
     ac6:	b089      	sub	sp, #36	; 0x24
     ac8:	af00      	add	r7, sp, #0
     aca:	6078      	str	r0, [r7, #4]
     acc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ace:	230c      	movs	r3, #12
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	2200      	movs	r2, #0
     ad4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	1c18      	adds	r0, r3, #0
     ae0:	4b25      	ldr	r3, [pc, #148]	; (b78 <spi_set_baudrate+0xb4>)
     ae2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     ae4:	46c0      	nop			; (mov r8, r8)
     ae6:	687b      	ldr	r3, [r7, #4]
     ae8:	1c18      	adds	r0, r3, #0
     aea:	4b24      	ldr	r3, [pc, #144]	; (b7c <spi_set_baudrate+0xb8>)
     aec:	4798      	blx	r3
     aee:	1e03      	subs	r3, r0, #0
     af0:	d1f9      	bne.n	ae6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	1c18      	adds	r0, r3, #0
     af8:	4b21      	ldr	r3, [pc, #132]	; (b80 <spi_set_baudrate+0xbc>)
     afa:	4798      	blx	r3
     afc:	1c03      	adds	r3, r0, #0
     afe:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b00:	69bb      	ldr	r3, [r7, #24]
     b02:	3314      	adds	r3, #20
     b04:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b06:	697b      	ldr	r3, [r7, #20]
     b08:	b2db      	uxtb	r3, r3
     b0a:	1c18      	adds	r0, r3, #0
     b0c:	4b1d      	ldr	r3, [pc, #116]	; (b84 <spi_set_baudrate+0xc0>)
     b0e:	4798      	blx	r3
     b10:	1c03      	adds	r3, r0, #0
     b12:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
     b14:	230f      	movs	r3, #15
     b16:	18fc      	adds	r4, r7, r3
     b18:	6839      	ldr	r1, [r7, #0]
     b1a:	693a      	ldr	r2, [r7, #16]
     b1c:	230c      	movs	r3, #12
     b1e:	18fb      	adds	r3, r7, r3
     b20:	1c08      	adds	r0, r1, #0
     b22:	1c11      	adds	r1, r2, #0
     b24:	1c1a      	adds	r2, r3, #0
     b26:	4b18      	ldr	r3, [pc, #96]	; (b88 <spi_set_baudrate+0xc4>)
     b28:	4798      	blx	r3
     b2a:	1c03      	adds	r3, r0, #0
     b2c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
     b2e:	230f      	movs	r3, #15
     b30:	18fb      	adds	r3, r7, r3
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d001      	beq.n	b3c <spi_set_baudrate+0x78>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
     b38:	2317      	movs	r3, #23
     b3a:	e018      	b.n	b6e <spi_set_baudrate+0xaa>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
     b3c:	230c      	movs	r3, #12
     b3e:	18fb      	adds	r3, r7, r3
     b40:	881b      	ldrh	r3, [r3, #0]
     b42:	b2da      	uxtb	r2, r3
     b44:	69fb      	ldr	r3, [r7, #28]
     b46:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
     b48:	46c0      	nop			; (mov r8, r8)
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	1c18      	adds	r0, r3, #0
     b4e:	4b0b      	ldr	r3, [pc, #44]	; (b7c <spi_set_baudrate+0xb8>)
     b50:	4798      	blx	r3
     b52:	1e03      	subs	r3, r0, #0
     b54:	d1f9      	bne.n	b4a <spi_set_baudrate+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	1c18      	adds	r0, r3, #0
     b5a:	4b0c      	ldr	r3, [pc, #48]	; (b8c <spi_set_baudrate+0xc8>)
     b5c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	687b      	ldr	r3, [r7, #4]
     b62:	1c18      	adds	r0, r3, #0
     b64:	4b05      	ldr	r3, [pc, #20]	; (b7c <spi_set_baudrate+0xb8>)
     b66:	4798      	blx	r3
     b68:	1e03      	subs	r3, r0, #0
     b6a:	d1f9      	bne.n	b60 <spi_set_baudrate+0x9c>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
     b6c:	2300      	movs	r3, #0
}
     b6e:	1c18      	adds	r0, r3, #0
     b70:	46bd      	mov	sp, r7
     b72:	b009      	add	sp, #36	; 0x24
     b74:	bd90      	pop	{r4, r7, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00000941 	.word	0x00000941
     b7c:	000008ed 	.word	0x000008ed
     b80:	00000699 	.word	0x00000699
     b84:	00001cd5 	.word	0x00001cd5
     b88:	000003d5 	.word	0x000003d5
     b8c:	0000090d 	.word	0x0000090d

00000b90 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     b90:	b590      	push	{r4, r7, lr}
     b92:	b093      	sub	sp, #76	; 0x4c
     b94:	af00      	add	r7, sp, #0
     b96:	6078      	str	r0, [r7, #4]
     b98:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     ba6:	231c      	movs	r3, #28
     ba8:	18fb      	adds	r3, r7, r3
     baa:	1c18      	adds	r0, r3, #0
     bac:	4b76      	ldr	r3, [pc, #472]	; (d88 <_spi_set_config+0x1f8>)
     bae:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bb0:	231c      	movs	r3, #28
     bb2:	18fb      	adds	r3, r7, r3
     bb4:	2200      	movs	r2, #0
     bb6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     bb8:	683b      	ldr	r3, [r7, #0]
     bba:	781b      	ldrb	r3, [r3, #0]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d103      	bne.n	bc8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bc0:	231c      	movs	r3, #28
     bc2:	18fb      	adds	r3, r7, r3
     bc4:	2200      	movs	r2, #0
     bc6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     bc8:	683b      	ldr	r3, [r7, #0]
     bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     bcc:	230c      	movs	r3, #12
     bce:	18fb      	adds	r3, r7, r3
     bd0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     bd2:	683b      	ldr	r3, [r7, #0]
     bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     bd6:	230c      	movs	r3, #12
     bd8:	18fb      	adds	r3, r7, r3
     bda:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     bdc:	683b      	ldr	r3, [r7, #0]
     bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     be0:	230c      	movs	r3, #12
     be2:	18fb      	adds	r3, r7, r3
     be4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
     bea:	230c      	movs	r3, #12
     bec:	18fb      	adds	r3, r7, r3
     bee:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     bf0:	2347      	movs	r3, #71	; 0x47
     bf2:	18fb      	adds	r3, r7, r3
     bf4:	2200      	movs	r2, #0
     bf6:	701a      	strb	r2, [r3, #0]
     bf8:	e02c      	b.n	c54 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bfa:	2347      	movs	r3, #71	; 0x47
     bfc:	18fb      	adds	r3, r7, r3
     bfe:	781a      	ldrb	r2, [r3, #0]
     c00:	230c      	movs	r3, #12
     c02:	18fb      	adds	r3, r7, r3
     c04:	0092      	lsls	r2, r2, #2
     c06:	58d3      	ldr	r3, [r2, r3]
     c08:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c0c:	2b00      	cmp	r3, #0
     c0e:	d109      	bne.n	c24 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     c12:	2347      	movs	r3, #71	; 0x47
     c14:	18fb      	adds	r3, r7, r3
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	1c10      	adds	r0, r2, #0
     c1a:	1c19      	adds	r1, r3, #0
     c1c:	4b5b      	ldr	r3, [pc, #364]	; (d8c <_spi_set_config+0x1fc>)
     c1e:	4798      	blx	r3
     c20:	1c03      	adds	r3, r0, #0
     c22:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c26:	3301      	adds	r3, #1
     c28:	d00d      	beq.n	c46 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c2c:	b2da      	uxtb	r2, r3
     c2e:	231c      	movs	r3, #28
     c30:	18fb      	adds	r3, r7, r3
     c32:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     c36:	0c1b      	lsrs	r3, r3, #16
     c38:	b2da      	uxtb	r2, r3
     c3a:	231c      	movs	r3, #28
     c3c:	18fb      	adds	r3, r7, r3
     c3e:	1c10      	adds	r0, r2, #0
     c40:	1c19      	adds	r1, r3, #0
     c42:	4b53      	ldr	r3, [pc, #332]	; (d90 <_spi_set_config+0x200>)
     c44:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c46:	2347      	movs	r3, #71	; 0x47
     c48:	18fb      	adds	r3, r7, r3
     c4a:	781a      	ldrb	r2, [r3, #0]
     c4c:	2347      	movs	r3, #71	; 0x47
     c4e:	18fb      	adds	r3, r7, r3
     c50:	3201      	adds	r2, #1
     c52:	701a      	strb	r2, [r3, #0]
     c54:	2347      	movs	r3, #71	; 0x47
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b03      	cmp	r3, #3
     c5c:	d9cd      	bls.n	bfa <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     c5e:	683b      	ldr	r3, [r7, #0]
     c60:	781a      	ldrb	r2, [r3, #0]
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     c66:	683b      	ldr	r3, [r7, #0]
     c68:	7c1a      	ldrb	r2, [r3, #16]
     c6a:	687b      	ldr	r3, [r7, #4]
     c6c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     c6e:	683b      	ldr	r3, [r7, #0]
     c70:	7c9a      	ldrb	r2, [r3, #18]
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     c76:	683b      	ldr	r3, [r7, #0]
     c78:	7d1a      	ldrb	r2, [r3, #20]
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     c7e:	230a      	movs	r3, #10
     c80:	18fb      	adds	r3, r7, r3
     c82:	2200      	movs	r2, #0
     c84:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     c86:	2300      	movs	r3, #0
     c88:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     c8a:	2300      	movs	r3, #0
     c8c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     c8e:	683b      	ldr	r3, [r7, #0]
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b01      	cmp	r3, #1
     c94:	d12b      	bne.n	cee <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	681b      	ldr	r3, [r3, #0]
     c9a:	1c18      	adds	r0, r3, #0
     c9c:	4b3d      	ldr	r3, [pc, #244]	; (d94 <_spi_set_config+0x204>)
     c9e:	4798      	blx	r3
     ca0:	1c03      	adds	r3, r0, #0
     ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     ca6:	3314      	adds	r3, #20
     ca8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
     cac:	b2db      	uxtb	r3, r3
     cae:	1c18      	adds	r0, r3, #0
     cb0:	4b39      	ldr	r3, [pc, #228]	; (d98 <_spi_set_config+0x208>)
     cb2:	4798      	blx	r3
     cb4:	1c03      	adds	r3, r0, #0
     cb6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     cb8:	683b      	ldr	r3, [r7, #0]
     cba:	6999      	ldr	r1, [r3, #24]
     cbc:	2323      	movs	r3, #35	; 0x23
     cbe:	18fc      	adds	r4, r7, r3
     cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     cc2:	230a      	movs	r3, #10
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	1c08      	adds	r0, r1, #0
     cc8:	1c11      	adds	r1, r2, #0
     cca:	1c1a      	adds	r2, r3, #0
     ccc:	4b33      	ldr	r3, [pc, #204]	; (d9c <_spi_set_config+0x20c>)
     cce:	4798      	blx	r3
     cd0:	1c03      	adds	r3, r0, #0
     cd2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     cd4:	2323      	movs	r3, #35	; 0x23
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	2b00      	cmp	r3, #0
     cdc:	d001      	beq.n	ce2 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     cde:	2317      	movs	r3, #23
     ce0:	e04e      	b.n	d80 <_spi_set_config+0x1f0>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     ce2:	230a      	movs	r3, #10
     ce4:	18fb      	adds	r3, r7, r3
     ce6:	881b      	ldrh	r3, [r3, #0]
     ce8:	b2da      	uxtb	r2, r3
     cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     cec:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     cee:	683b      	ldr	r3, [r7, #0]
     cf0:	685b      	ldr	r3, [r3, #4]
     cf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     cf4:	4313      	orrs	r3, r2
     cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     cf8:	683b      	ldr	r3, [r7, #0]
     cfa:	689b      	ldr	r3, [r3, #8]
     cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     cfe:	4313      	orrs	r3, r2
     d00:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     d02:	683b      	ldr	r3, [r7, #0]
     d04:	68db      	ldr	r3, [r3, #12]
     d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     d08:	4313      	orrs	r3, r2
     d0a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     d0c:	683b      	ldr	r3, [r7, #0]
     d0e:	7c1b      	ldrb	r3, [r3, #16]
     d10:	1c1a      	adds	r2, r3, #0
     d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d14:	4313      	orrs	r3, r2
     d16:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     d18:	683b      	ldr	r3, [r7, #0]
     d1a:	7c5b      	ldrb	r3, [r3, #17]
     d1c:	2b00      	cmp	r3, #0
     d1e:	d103      	bne.n	d28 <_spi_set_config+0x198>
     d20:	4b1f      	ldr	r3, [pc, #124]	; (da0 <_spi_set_config+0x210>)
     d22:	4798      	blx	r3
     d24:	1e03      	subs	r3, r0, #0
     d26:	d003      	beq.n	d30 <_spi_set_config+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d2a:	2280      	movs	r2, #128	; 0x80
     d2c:	4313      	orrs	r3, r2
     d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     d30:	683b      	ldr	r3, [r7, #0]
     d32:	7c9b      	ldrb	r3, [r3, #18]
     d34:	2b00      	cmp	r3, #0
     d36:	d004      	beq.n	d42 <_spi_set_config+0x1b2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d3a:	2280      	movs	r2, #128	; 0x80
     d3c:	0292      	lsls	r2, r2, #10
     d3e:	4313      	orrs	r3, r2
     d40:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     d42:	683b      	ldr	r3, [r7, #0]
     d44:	7cdb      	ldrb	r3, [r3, #19]
     d46:	2b00      	cmp	r3, #0
     d48:	d004      	beq.n	d54 <_spi_set_config+0x1c4>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d4c:	2280      	movs	r2, #128	; 0x80
     d4e:	0092      	lsls	r2, r2, #2
     d50:	4313      	orrs	r3, r2
     d52:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     d54:	683b      	ldr	r3, [r7, #0]
     d56:	7d1b      	ldrb	r3, [r3, #20]
     d58:	2b00      	cmp	r3, #0
     d5a:	d004      	beq.n	d66 <_spi_set_config+0x1d6>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	0192      	lsls	r2, r2, #6
     d62:	4313      	orrs	r3, r2
     d64:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d6c:	431a      	orrs	r2, r3
     d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d70:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d74:	685a      	ldr	r2, [r3, #4]
     d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d78:	431a      	orrs	r2, r3
     d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     d7c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     d7e:	2300      	movs	r3, #0
}
     d80:	1c18      	adds	r0, r3, #0
     d82:	46bd      	mov	sp, r7
     d84:	b013      	add	sp, #76	; 0x4c
     d86:	bd90      	pop	{r4, r7, pc}
     d88:	000006e5 	.word	0x000006e5
     d8c:	000004dd 	.word	0x000004dd
     d90:	00001e9d 	.word	0x00001e9d
     d94:	00000699 	.word	0x00000699
     d98:	00001cd5 	.word	0x00001cd5
     d9c:	000003d5 	.word	0x000003d5
     da0:	000008cd 	.word	0x000008cd

00000da4 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     da4:	b590      	push	{r4, r7, lr}
     da6:	b091      	sub	sp, #68	; 0x44
     da8:	af00      	add	r7, sp, #0
     daa:	6078      	str	r0, [r7, #4]
     dac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     dba:	683b      	ldr	r3, [r7, #0]
     dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     dbe:	2310      	movs	r3, #16
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     dc4:	683b      	ldr	r3, [r7, #0]
     dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     dc8:	2310      	movs	r3, #16
     dca:	18fb      	adds	r3, r7, r3
     dcc:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     dce:	683b      	ldr	r3, [r7, #0]
     dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     dd2:	2310      	movs	r3, #16
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
     dd8:	683b      	ldr	r3, [r7, #0]
     dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     ddc:	2310      	movs	r3, #16
     dde:	18fb      	adds	r3, r7, r3
     de0:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     de2:	233f      	movs	r3, #63	; 0x3f
     de4:	18fb      	adds	r3, r7, r3
     de6:	2200      	movs	r2, #0
     de8:	701a      	strb	r2, [r3, #0]
     dea:	e030      	b.n	e4e <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dec:	233f      	movs	r3, #63	; 0x3f
     dee:	18fb      	adds	r3, r7, r3
     df0:	781a      	ldrb	r2, [r3, #0]
     df2:	2310      	movs	r3, #16
     df4:	18fb      	adds	r3, r7, r3
     df6:	0092      	lsls	r2, r2, #2
     df8:	58d3      	ldr	r3, [r2, r3]
     dfa:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     dfe:	2b00      	cmp	r3, #0
     e00:	d109      	bne.n	e16 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
     e04:	233f      	movs	r3, #63	; 0x3f
     e06:	18fb      	adds	r3, r7, r3
     e08:	781b      	ldrb	r3, [r3, #0]
     e0a:	1c10      	adds	r0, r2, #0
     e0c:	1c19      	adds	r1, r3, #0
     e0e:	4b57      	ldr	r3, [pc, #348]	; (f6c <_spi_check_config+0x1c8>)
     e10:	4798      	blx	r3
     e12:	1c03      	adds	r3, r0, #0
     e14:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e18:	3301      	adds	r3, #1
     e1a:	d100      	bne.n	e1e <_spi_check_config+0x7a>
			continue;
     e1c:	e010      	b.n	e40 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
     e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e20:	041b      	lsls	r3, r3, #16
     e22:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e26:	0c1b      	lsrs	r3, r3, #16
     e28:	b2db      	uxtb	r3, r3
     e2a:	1c18      	adds	r0, r3, #0
     e2c:	4b50      	ldr	r3, [pc, #320]	; (f70 <_spi_check_config+0x1cc>)
     e2e:	4798      	blx	r3
     e30:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     e32:	429c      	cmp	r4, r3
     e34:	d004      	beq.n	e40 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     e36:	687b      	ldr	r3, [r7, #4]
     e38:	2200      	movs	r2, #0
     e3a:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     e3c:	231c      	movs	r3, #28
     e3e:	e090      	b.n	f62 <_spi_check_config+0x1be>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     e40:	233f      	movs	r3, #63	; 0x3f
     e42:	18fb      	adds	r3, r7, r3
     e44:	781a      	ldrb	r2, [r3, #0]
     e46:	233f      	movs	r3, #63	; 0x3f
     e48:	18fb      	adds	r3, r7, r3
     e4a:	3201      	adds	r2, #1
     e4c:	701a      	strb	r2, [r3, #0]
     e4e:	233f      	movs	r3, #63	; 0x3f
     e50:	18fb      	adds	r3, r7, r3
     e52:	781b      	ldrb	r3, [r3, #0]
     e54:	2b03      	cmp	r3, #3
     e56:	d9c9      	bls.n	dec <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     e58:	2013      	movs	r0, #19
     e5a:	4b46      	ldr	r3, [pc, #280]	; (f74 <_spi_check_config+0x1d0>)
     e5c:	4798      	blx	r3
     e5e:	1c03      	adds	r3, r0, #0
     e60:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     e62:	2300      	movs	r3, #0
     e64:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     e66:	2300      	movs	r3, #0
     e68:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     e6a:	683b      	ldr	r3, [r7, #0]
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	2b01      	cmp	r3, #1
     e70:	d123      	bne.n	eba <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     e72:	683b      	ldr	r3, [r7, #0]
     e74:	6999      	ldr	r1, [r3, #24]
     e76:	2323      	movs	r3, #35	; 0x23
     e78:	18fc      	adds	r4, r7, r3
     e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     e7c:	230e      	movs	r3, #14
     e7e:	18fb      	adds	r3, r7, r3
     e80:	1c08      	adds	r0, r1, #0
     e82:	1c11      	adds	r1, r2, #0
     e84:	1c1a      	adds	r2, r3, #0
     e86:	4b3c      	ldr	r3, [pc, #240]	; (f78 <_spi_check_config+0x1d4>)
     e88:	4798      	blx	r3
     e8a:	1c03      	adds	r3, r0, #0
     e8c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     e8e:	2323      	movs	r3, #35	; 0x23
     e90:	18fb      	adds	r3, r7, r3
     e92:	781b      	ldrb	r3, [r3, #0]
     e94:	2b00      	cmp	r3, #0
     e96:	d001      	beq.n	e9c <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     e98:	2317      	movs	r3, #23
     e9a:	e062      	b.n	f62 <_spi_check_config+0x1be>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     e9e:	7b1b      	ldrb	r3, [r3, #12]
     ea0:	b2da      	uxtb	r2, r3
     ea2:	230e      	movs	r3, #14
     ea4:	18fb      	adds	r3, r7, r3
     ea6:	881b      	ldrh	r3, [r3, #0]
     ea8:	b2db      	uxtb	r3, r3
     eaa:	429a      	cmp	r2, r3
     eac:	d001      	beq.n	eb2 <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     eae:	231c      	movs	r3, #28
     eb0:	e057      	b.n	f62 <_spi_check_config+0x1be>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eb4:	220c      	movs	r2, #12
     eb6:	4313      	orrs	r3, r2
     eb8:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     eba:	683b      	ldr	r3, [r7, #0]
     ebc:	685b      	ldr	r3, [r3, #4]
     ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ec0:	4313      	orrs	r3, r2
     ec2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     ec4:	683b      	ldr	r3, [r7, #0]
     ec6:	689b      	ldr	r3, [r3, #8]
     ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     eca:	4313      	orrs	r3, r2
     ecc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     ece:	683b      	ldr	r3, [r7, #0]
     ed0:	68db      	ldr	r3, [r3, #12]
     ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     ed4:	4313      	orrs	r3, r2
     ed6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
     ed8:	683b      	ldr	r3, [r7, #0]
     eda:	7c1b      	ldrb	r3, [r3, #16]
     edc:	1c1a      	adds	r2, r3, #0
     ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ee0:	4313      	orrs	r3, r2
     ee2:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
     ee4:	683b      	ldr	r3, [r7, #0]
     ee6:	7c5b      	ldrb	r3, [r3, #17]
     ee8:	2b00      	cmp	r3, #0
     eea:	d003      	beq.n	ef4 <_spi_check_config+0x150>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     eee:	2280      	movs	r2, #128	; 0x80
     ef0:	4313      	orrs	r3, r2
     ef2:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
     ef4:	683b      	ldr	r3, [r7, #0]
     ef6:	7c9b      	ldrb	r3, [r3, #18]
     ef8:	2b00      	cmp	r3, #0
     efa:	d004      	beq.n	f06 <_spi_check_config+0x162>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     efe:	2280      	movs	r2, #128	; 0x80
     f00:	0292      	lsls	r2, r2, #10
     f02:	4313      	orrs	r3, r2
     f04:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     f06:	683b      	ldr	r3, [r7, #0]
     f08:	7cdb      	ldrb	r3, [r3, #19]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d004      	beq.n	f18 <_spi_check_config+0x174>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f10:	2280      	movs	r2, #128	; 0x80
     f12:	0092      	lsls	r2, r2, #2
     f14:	4313      	orrs	r3, r2
     f16:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     f18:	683b      	ldr	r3, [r7, #0]
     f1a:	7d1b      	ldrb	r3, [r3, #20]
     f1c:	2b00      	cmp	r3, #0
     f1e:	d004      	beq.n	f2a <_spi_check_config+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f22:	2280      	movs	r2, #128	; 0x80
     f24:	0192      	lsls	r2, r2, #6
     f26:	4313      	orrs	r3, r2
     f28:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f2c:	2202      	movs	r2, #2
     f2e:	4313      	orrs	r3, r2
     f30:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f34:	681a      	ldr	r2, [r3, #0]
     f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f38:	429a      	cmp	r2, r3
     f3a:	d10e      	bne.n	f5a <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
     f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     f3e:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f42:	429a      	cmp	r2, r3
     f44:	d109      	bne.n	f5a <_spi_check_config+0x1b6>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     f46:	683b      	ldr	r3, [r7, #0]
     f48:	781a      	ldrb	r2, [r3, #0]
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
     f4e:	683b      	ldr	r3, [r7, #0]
     f50:	7c1a      	ldrb	r2, [r3, #16]
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
     f56:	2300      	movs	r3, #0
     f58:	e003      	b.n	f62 <_spi_check_config+0x1be>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	2200      	movs	r2, #0
     f5e:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
     f60:	231c      	movs	r3, #28
}
     f62:	1c18      	adds	r0, r3, #0
     f64:	46bd      	mov	sp, r7
     f66:	b011      	add	sp, #68	; 0x44
     f68:	bd90      	pop	{r4, r7, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	000004dd 	.word	0x000004dd
     f70:	0000076d 	.word	0x0000076d
     f74:	00001cd5 	.word	0x00001cd5
     f78:	000003d5 	.word	0x000003d5

00000f7c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f7c:	b580      	push	{r7, lr}
     f7e:	b08a      	sub	sp, #40	; 0x28
     f80:	af00      	add	r7, sp, #0
     f82:	60f8      	str	r0, [r7, #12]
     f84:	60b9      	str	r1, [r7, #8]
     f86:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	68ba      	ldr	r2, [r7, #8]
     f8c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     f8e:	68fb      	ldr	r3, [r7, #12]
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f96:	681b      	ldr	r3, [r3, #0]
     f98:	2202      	movs	r2, #2
     f9a:	4013      	ands	r3, r2
     f9c:	d007      	beq.n	fae <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
     f9e:	68fa      	ldr	r2, [r7, #12]
     fa0:	687b      	ldr	r3, [r7, #4]
     fa2:	1c10      	adds	r0, r2, #0
     fa4:	1c19      	adds	r1, r3, #0
     fa6:	4b2a      	ldr	r3, [pc, #168]	; (1050 <spi_init+0xd4>)
     fa8:	4798      	blx	r3
     faa:	1c03      	adds	r3, r0, #0
     fac:	e04b      	b.n	1046 <spi_init+0xca>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	2201      	movs	r2, #1
     fb4:	4013      	ands	r3, r2
     fb6:	d001      	beq.n	fbc <spi_init+0x40>
		return STATUS_BUSY;
     fb8:	2305      	movs	r3, #5
     fba:	e044      	b.n	1046 <spi_init+0xca>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fbc:	68fb      	ldr	r3, [r7, #12]
     fbe:	681b      	ldr	r3, [r3, #0]
     fc0:	1c18      	adds	r0, r3, #0
     fc2:	4b24      	ldr	r3, [pc, #144]	; (1054 <spi_init+0xd8>)
     fc4:	4798      	blx	r3
     fc6:	1c03      	adds	r3, r0, #0
     fc8:	623b      	str	r3, [r7, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     fca:	6a3b      	ldr	r3, [r7, #32]
     fcc:	3302      	adds	r3, #2
     fce:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     fd0:	6a3b      	ldr	r3, [r7, #32]
     fd2:	3314      	adds	r3, #20
     fd4:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     fd6:	69fb      	ldr	r3, [r7, #28]
     fd8:	2201      	movs	r2, #1
     fda:	409a      	lsls	r2, r3
     fdc:	1c13      	adds	r3, r2, #0
     fde:	2002      	movs	r0, #2
     fe0:	1c19      	adds	r1, r3, #0
     fe2:	4b1d      	ldr	r3, [pc, #116]	; (1058 <spi_init+0xdc>)
     fe4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     fe6:	2314      	movs	r3, #20
     fe8:	18fb      	adds	r3, r7, r3
     fea:	1c18      	adds	r0, r3, #0
     fec:	4b1b      	ldr	r3, [pc, #108]	; (105c <spi_init+0xe0>)
     fee:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2224      	movs	r2, #36	; 0x24
     ff4:	5c9a      	ldrb	r2, [r3, r2]
     ff6:	2314      	movs	r3, #20
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ffc:	69bb      	ldr	r3, [r7, #24]
     ffe:	b2da      	uxtb	r2, r3
    1000:	2314      	movs	r3, #20
    1002:	18fb      	adds	r3, r7, r3
    1004:	1c10      	adds	r0, r2, #0
    1006:	1c19      	adds	r1, r3, #0
    1008:	4b15      	ldr	r3, [pc, #84]	; (1060 <spi_init+0xe4>)
    100a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    100c:	69bb      	ldr	r3, [r7, #24]
    100e:	b2db      	uxtb	r3, r3
    1010:	1c18      	adds	r0, r3, #0
    1012:	4b14      	ldr	r3, [pc, #80]	; (1064 <spi_init+0xe8>)
    1014:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1016:	687b      	ldr	r3, [r7, #4]
    1018:	2224      	movs	r2, #36	; 0x24
    101a:	5c9b      	ldrb	r3, [r3, r2]
    101c:	1c18      	adds	r0, r3, #0
    101e:	2100      	movs	r1, #0
    1020:	4b11      	ldr	r3, [pc, #68]	; (1068 <spi_init+0xec>)
    1022:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	2b01      	cmp	r3, #1
    102a:	d105      	bne.n	1038 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    102e:	681b      	ldr	r3, [r3, #0]
    1030:	220c      	movs	r2, #12
    1032:	431a      	orrs	r2, r3
    1034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1036:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1038:	68fa      	ldr	r2, [r7, #12]
    103a:	687b      	ldr	r3, [r7, #4]
    103c:	1c10      	adds	r0, r2, #0
    103e:	1c19      	adds	r1, r3, #0
    1040:	4b0a      	ldr	r3, [pc, #40]	; (106c <spi_init+0xf0>)
    1042:	4798      	blx	r3
    1044:	1c03      	adds	r3, r0, #0
}
    1046:	1c18      	adds	r0, r3, #0
    1048:	46bd      	mov	sp, r7
    104a:	b00a      	add	sp, #40	; 0x28
    104c:	bd80      	pop	{r7, pc}
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	00000da5 	.word	0x00000da5
    1054:	00000699 	.word	0x00000699
    1058:	00000871 	.word	0x00000871
    105c:	0000085d 	.word	0x0000085d
    1060:	00001bb1 	.word	0x00001bb1
    1064:	00001bf5 	.word	0x00001bf5
    1068:	00000451 	.word	0x00000451
    106c:	00000b91 	.word	0x00000b91

00001070 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1070:	b580      	push	{r7, lr}
    1072:	b086      	sub	sp, #24
    1074:	af00      	add	r7, sp, #0
    1076:	60f8      	str	r0, [r7, #12]
    1078:	60b9      	str	r1, [r7, #8]
    107a:	1dfb      	adds	r3, r7, #7
    107c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	795b      	ldrb	r3, [r3, #5]
    1082:	2b01      	cmp	r3, #1
    1084:	d001      	beq.n	108a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    1086:	2315      	movs	r3, #21
    1088:	e05c      	b.n	1144 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    108a:	68fb      	ldr	r3, [r7, #12]
    108c:	7a1b      	ldrb	r3, [r3, #8]
    108e:	2201      	movs	r2, #1
    1090:	4053      	eors	r3, r2
    1092:	b2db      	uxtb	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	d054      	beq.n	1142 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    1098:	1dfb      	adds	r3, r7, #7
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b00      	cmp	r3, #0
    109e:	d04a      	beq.n	1136 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    10a0:	68bb      	ldr	r3, [r7, #8]
    10a2:	785b      	ldrb	r3, [r3, #1]
    10a4:	2b00      	cmp	r3, #0
    10a6:	d03f      	beq.n	1128 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    10a8:	68fb      	ldr	r3, [r7, #12]
    10aa:	1c18      	adds	r0, r3, #0
    10ac:	4b27      	ldr	r3, [pc, #156]	; (114c <spi_select_slave+0xdc>)
    10ae:	4798      	blx	r3
    10b0:	1c03      	adds	r3, r0, #0
    10b2:	1c1a      	adds	r2, r3, #0
    10b4:	2301      	movs	r3, #1
    10b6:	4053      	eors	r3, r2
    10b8:	b2db      	uxtb	r3, r3
    10ba:	2b00      	cmp	r3, #0
    10bc:	d007      	beq.n	10ce <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    10be:	68bb      	ldr	r3, [r7, #8]
    10c0:	781b      	ldrb	r3, [r3, #0]
    10c2:	1c18      	adds	r0, r3, #0
    10c4:	2101      	movs	r1, #1
    10c6:	4b22      	ldr	r3, [pc, #136]	; (1150 <spi_select_slave+0xe0>)
    10c8:	4798      	blx	r3
					return STATUS_BUSY;
    10ca:	2305      	movs	r3, #5
    10cc:	e03a      	b.n	1144 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    10ce:	68bb      	ldr	r3, [r7, #8]
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	1c18      	adds	r0, r3, #0
    10d4:	2100      	movs	r1, #0
    10d6:	4b1e      	ldr	r3, [pc, #120]	; (1150 <spi_select_slave+0xe0>)
    10d8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    10da:	68bb      	ldr	r3, [r7, #8]
    10dc:	789b      	ldrb	r3, [r3, #2]
    10de:	b29b      	uxth	r3, r3
    10e0:	68fa      	ldr	r2, [r7, #12]
    10e2:	1c10      	adds	r0, r2, #0
    10e4:	1c19      	adds	r1, r3, #0
    10e6:	4b1b      	ldr	r3, [pc, #108]	; (1154 <spi_select_slave+0xe4>)
    10e8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    10ea:	68fb      	ldr	r3, [r7, #12]
    10ec:	79db      	ldrb	r3, [r3, #7]
    10ee:	2201      	movs	r2, #1
    10f0:	4053      	eors	r3, r2
    10f2:	b2db      	uxtb	r3, r3
    10f4:	2b00      	cmp	r3, #0
    10f6:	d024      	beq.n	1142 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    10f8:	46c0      	nop			; (mov r8, r8)
    10fa:	68fb      	ldr	r3, [r7, #12]
    10fc:	1c18      	adds	r0, r3, #0
    10fe:	4b16      	ldr	r3, [pc, #88]	; (1158 <spi_select_slave+0xe8>)
    1100:	4798      	blx	r3
    1102:	1c03      	adds	r3, r0, #0
    1104:	1c1a      	adds	r2, r3, #0
    1106:	2301      	movs	r3, #1
    1108:	4053      	eors	r3, r2
    110a:	b2db      	uxtb	r3, r3
    110c:	2b00      	cmp	r3, #0
    110e:	d1f4      	bne.n	10fa <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    1110:	2316      	movs	r3, #22
    1112:	18fb      	adds	r3, r7, r3
    1114:	2200      	movs	r2, #0
    1116:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    1118:	68fa      	ldr	r2, [r7, #12]
    111a:	2316      	movs	r3, #22
    111c:	18fb      	adds	r3, r7, r3
    111e:	1c10      	adds	r0, r2, #0
    1120:	1c19      	adds	r1, r3, #0
    1122:	4b0e      	ldr	r3, [pc, #56]	; (115c <spi_select_slave+0xec>)
    1124:	4798      	blx	r3
    1126:	e00c      	b.n	1142 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1128:	68bb      	ldr	r3, [r7, #8]
    112a:	781b      	ldrb	r3, [r3, #0]
    112c:	1c18      	adds	r0, r3, #0
    112e:	2100      	movs	r1, #0
    1130:	4b07      	ldr	r3, [pc, #28]	; (1150 <spi_select_slave+0xe0>)
    1132:	4798      	blx	r3
    1134:	e005      	b.n	1142 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1136:	68bb      	ldr	r3, [r7, #8]
    1138:	781b      	ldrb	r3, [r3, #0]
    113a:	1c18      	adds	r0, r3, #0
    113c:	2101      	movs	r1, #1
    113e:	4b04      	ldr	r3, [pc, #16]	; (1150 <spi_select_slave+0xe0>)
    1140:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    1142:	2300      	movs	r3, #0
}
    1144:	1c18      	adds	r0, r3, #0
    1146:	46bd      	mov	sp, r7
    1148:	b006      	add	sp, #24
    114a:	bd80      	pop	{r7, pc}
    114c:	0000099d 	.word	0x0000099d
    1150:	0000080d 	.word	0x0000080d
    1154:	000009ed 	.word	0x000009ed
    1158:	000009c5 	.word	0x000009c5
    115c:	00000a35 	.word	0x00000a35

00001160 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1160:	b580      	push	{r7, lr}
    1162:	b086      	sub	sp, #24
    1164:	af00      	add	r7, sp, #0
    1166:	60f8      	str	r0, [r7, #12]
    1168:	60b9      	str	r1, [r7, #8]
    116a:	1dbb      	adds	r3, r7, #6
    116c:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    116e:	1dbb      	adds	r3, r7, #6
    1170:	881b      	ldrh	r3, [r3, #0]
    1172:	2b00      	cmp	r3, #0
    1174:	d101      	bne.n	117a <spi_write_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    1176:	2317      	movs	r3, #23
    1178:	e080      	b.n	127c <spi_write_buffer_wait+0x11c>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    117a:	2316      	movs	r3, #22
    117c:	18fb      	adds	r3, r7, r3
    117e:	2200      	movs	r2, #0
    1180:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    1182:	2314      	movs	r3, #20
    1184:	18fb      	adds	r3, r7, r3
    1186:	1dba      	adds	r2, r7, #6
    1188:	8812      	ldrh	r2, [r2, #0]
    118a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    118c:	e05e      	b.n	124c <spi_write_buffer_wait+0xec>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	68fb      	ldr	r3, [r7, #12]
    1192:	1c18      	adds	r0, r3, #0
    1194:	4b3b      	ldr	r3, [pc, #236]	; (1284 <spi_write_buffer_wait+0x124>)
    1196:	4798      	blx	r3
    1198:	1c03      	adds	r3, r0, #0
    119a:	1c1a      	adds	r2, r3, #0
    119c:	2301      	movs	r3, #1
    119e:	4053      	eors	r3, r2
    11a0:	b2db      	uxtb	r3, r3
    11a2:	2b00      	cmp	r3, #0
    11a4:	d1f4      	bne.n	1190 <spi_write_buffer_wait+0x30>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11a6:	2316      	movs	r3, #22
    11a8:	18fb      	adds	r3, r7, r3
    11aa:	881b      	ldrh	r3, [r3, #0]
    11ac:	2216      	movs	r2, #22
    11ae:	18ba      	adds	r2, r7, r2
    11b0:	1c59      	adds	r1, r3, #1
    11b2:	8011      	strh	r1, [r2, #0]
    11b4:	1c1a      	adds	r2, r3, #0
    11b6:	68bb      	ldr	r3, [r7, #8]
    11b8:	189b      	adds	r3, r3, r2
    11ba:	781a      	ldrb	r2, [r3, #0]
    11bc:	2312      	movs	r3, #18
    11be:	18fb      	adds	r3, r7, r3
    11c0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	799b      	ldrb	r3, [r3, #6]
    11c6:	2b01      	cmp	r3, #1
    11c8:	d114      	bne.n	11f4 <spi_write_buffer_wait+0x94>
			data_to_send |= (tx_data[tx_pos++] << 8);
    11ca:	2316      	movs	r3, #22
    11cc:	18fb      	adds	r3, r7, r3
    11ce:	881b      	ldrh	r3, [r3, #0]
    11d0:	2216      	movs	r2, #22
    11d2:	18ba      	adds	r2, r7, r2
    11d4:	1c59      	adds	r1, r3, #1
    11d6:	8011      	strh	r1, [r2, #0]
    11d8:	1c1a      	adds	r2, r3, #0
    11da:	68bb      	ldr	r3, [r7, #8]
    11dc:	189b      	adds	r3, r3, r2
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	021b      	lsls	r3, r3, #8
    11e2:	b29a      	uxth	r2, r3
    11e4:	2312      	movs	r3, #18
    11e6:	18fb      	adds	r3, r7, r3
    11e8:	881b      	ldrh	r3, [r3, #0]
    11ea:	4313      	orrs	r3, r2
    11ec:	b29a      	uxth	r2, r3
    11ee:	2312      	movs	r3, #18
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    11f4:	68fa      	ldr	r2, [r7, #12]
    11f6:	2312      	movs	r3, #18
    11f8:	18fb      	adds	r3, r7, r3
    11fa:	881b      	ldrh	r3, [r3, #0]
    11fc:	1c10      	adds	r0, r2, #0
    11fe:	1c19      	adds	r1, r3, #0
    1200:	4b21      	ldr	r3, [pc, #132]	; (1288 <spi_write_buffer_wait+0x128>)
    1202:	4798      	blx	r3

		if (module->receiver_enabled) {
    1204:	68fb      	ldr	r3, [r7, #12]
    1206:	79db      	ldrb	r3, [r3, #7]
    1208:	2214      	movs	r2, #20
    120a:	18ba      	adds	r2, r7, r2
    120c:	2114      	movs	r1, #20
    120e:	1879      	adds	r1, r7, r1
    1210:	8809      	ldrh	r1, [r1, #0]
    1212:	8011      	strh	r1, [r2, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d019      	beq.n	124c <spi_write_buffer_wait+0xec>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1218:	46c0      	nop			; (mov r8, r8)
    121a:	68fb      	ldr	r3, [r7, #12]
    121c:	1c18      	adds	r0, r3, #0
    121e:	4b1b      	ldr	r3, [pc, #108]	; (128c <spi_write_buffer_wait+0x12c>)
    1220:	4798      	blx	r3
    1222:	1c03      	adds	r3, r0, #0
    1224:	1c1a      	adds	r2, r3, #0
    1226:	2301      	movs	r3, #1
    1228:	4053      	eors	r3, r2
    122a:	b2db      	uxtb	r3, r3
    122c:	2b00      	cmp	r3, #0
    122e:	d1f4      	bne.n	121a <spi_write_buffer_wait+0xba>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1230:	68fa      	ldr	r2, [r7, #12]
    1232:	2310      	movs	r3, #16
    1234:	18fb      	adds	r3, r7, r3
    1236:	1c10      	adds	r0, r2, #0
    1238:	1c19      	adds	r1, r3, #0
    123a:	4b15      	ldr	r3, [pc, #84]	; (1290 <spi_write_buffer_wait+0x130>)
    123c:	4798      	blx	r3
			flush_length--;
    123e:	2314      	movs	r3, #20
    1240:	18fb      	adds	r3, r7, r3
    1242:	881a      	ldrh	r2, [r3, #0]
    1244:	2314      	movs	r3, #20
    1246:	18fb      	adds	r3, r7, r3
    1248:	3a01      	subs	r2, #1
    124a:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    124c:	1dbb      	adds	r3, r7, #6
    124e:	881b      	ldrh	r3, [r3, #0]
    1250:	1dba      	adds	r2, r7, #6
    1252:	1e59      	subs	r1, r3, #1
    1254:	8011      	strh	r1, [r2, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d199      	bne.n	118e <spi_write_buffer_wait+0x2e>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	795b      	ldrb	r3, [r3, #5]
    125e:	2b01      	cmp	r3, #1
    1260:	d10b      	bne.n	127a <spi_write_buffer_wait+0x11a>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	1c18      	adds	r0, r3, #0
    1268:	4b0a      	ldr	r3, [pc, #40]	; (1294 <spi_write_buffer_wait+0x134>)
    126a:	4798      	blx	r3
    126c:	1c03      	adds	r3, r0, #0
    126e:	1c1a      	adds	r2, r3, #0
    1270:	2301      	movs	r3, #1
    1272:	4053      	eors	r3, r2
    1274:	b2db      	uxtb	r3, r3
    1276:	2b00      	cmp	r3, #0
    1278:	d1f4      	bne.n	1264 <spi_write_buffer_wait+0x104>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    127a:	2300      	movs	r3, #0
}
    127c:	1c18      	adds	r0, r3, #0
    127e:	46bd      	mov	sp, r7
    1280:	b006      	add	sp, #24
    1282:	bd80      	pop	{r7, pc}
    1284:	0000099d 	.word	0x0000099d
    1288:	000009ed 	.word	0x000009ed
    128c:	000009c5 	.word	0x000009c5
    1290:	00000a35 	.word	0x00000a35
    1294:	00000975 	.word	0x00000975

00001298 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1298:	b590      	push	{r4, r7, lr}
    129a:	b089      	sub	sp, #36	; 0x24
    129c:	af00      	add	r7, sp, #0
    129e:	60f8      	str	r0, [r7, #12]
    12a0:	60b9      	str	r1, [r7, #8]
    12a2:	607a      	str	r2, [r7, #4]
    12a4:	1c1a      	adds	r2, r3, #0
    12a6:	1cbb      	adds	r3, r7, #2
    12a8:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    12aa:	1cbb      	adds	r3, r7, #2
    12ac:	881b      	ldrh	r3, [r3, #0]
    12ae:	2b00      	cmp	r3, #0
    12b0:	d101      	bne.n	12b6 <spi_transceive_buffer_wait+0x1e>
		return STATUS_ERR_INVALID_ARG;
    12b2:	2317      	movs	r3, #23
    12b4:	e0b9      	b.n	142a <spi_transceive_buffer_wait+0x192>
	}

	if (!(module->receiver_enabled)) {
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	79db      	ldrb	r3, [r3, #7]
    12ba:	2201      	movs	r2, #1
    12bc:	4053      	eors	r3, r2
    12be:	b2db      	uxtb	r3, r3
    12c0:	2b00      	cmp	r3, #0
    12c2:	d001      	beq.n	12c8 <spi_transceive_buffer_wait+0x30>
		return STATUS_ERR_DENIED;
    12c4:	231c      	movs	r3, #28
    12c6:	e0b0      	b.n	142a <spi_transceive_buffer_wait+0x192>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    12c8:	231e      	movs	r3, #30
    12ca:	18fb      	adds	r3, r7, r3
    12cc:	2200      	movs	r2, #0
    12ce:	801a      	strh	r2, [r3, #0]
	uint16_t rx_pos = 0;
    12d0:	231c      	movs	r3, #28
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	2200      	movs	r2, #0
    12d6:	801a      	strh	r2, [r3, #0]
	uint16_t rx_length = length;
    12d8:	231a      	movs	r3, #26
    12da:	18fb      	adds	r3, r7, r3
    12dc:	1cba      	adds	r2, r7, #2
    12de:	8812      	ldrh	r2, [r2, #0]
    12e0:	801a      	strh	r2, [r3, #0]

	/* Send and receive buffer */
	while (length--) {
    12e2:	e089      	b.n	13f8 <spi_transceive_buffer_wait+0x160>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    12e4:	46c0      	nop			; (mov r8, r8)
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	1c18      	adds	r0, r3, #0
    12ea:	4b52      	ldr	r3, [pc, #328]	; (1434 <spi_transceive_buffer_wait+0x19c>)
    12ec:	4798      	blx	r3
    12ee:	1c03      	adds	r3, r0, #0
    12f0:	1c1a      	adds	r2, r3, #0
    12f2:	2301      	movs	r3, #1
    12f4:	4053      	eors	r3, r2
    12f6:	b2db      	uxtb	r3, r3
    12f8:	2b00      	cmp	r3, #0
    12fa:	d1f4      	bne.n	12e6 <spi_transceive_buffer_wait+0x4e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    12fc:	231e      	movs	r3, #30
    12fe:	18fb      	adds	r3, r7, r3
    1300:	881b      	ldrh	r3, [r3, #0]
    1302:	221e      	movs	r2, #30
    1304:	18ba      	adds	r2, r7, r2
    1306:	1c59      	adds	r1, r3, #1
    1308:	8011      	strh	r1, [r2, #0]
    130a:	1c1a      	adds	r2, r3, #0
    130c:	68bb      	ldr	r3, [r7, #8]
    130e:	189b      	adds	r3, r3, r2
    1310:	781a      	ldrb	r2, [r3, #0]
    1312:	2318      	movs	r3, #24
    1314:	18fb      	adds	r3, r7, r3
    1316:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1318:	68fb      	ldr	r3, [r7, #12]
    131a:	799b      	ldrb	r3, [r3, #6]
    131c:	2b01      	cmp	r3, #1
    131e:	d114      	bne.n	134a <spi_transceive_buffer_wait+0xb2>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1320:	231e      	movs	r3, #30
    1322:	18fb      	adds	r3, r7, r3
    1324:	881b      	ldrh	r3, [r3, #0]
    1326:	221e      	movs	r2, #30
    1328:	18ba      	adds	r2, r7, r2
    132a:	1c59      	adds	r1, r3, #1
    132c:	8011      	strh	r1, [r2, #0]
    132e:	1c1a      	adds	r2, r3, #0
    1330:	68bb      	ldr	r3, [r7, #8]
    1332:	189b      	adds	r3, r3, r2
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	021b      	lsls	r3, r3, #8
    1338:	b29a      	uxth	r2, r3
    133a:	2318      	movs	r3, #24
    133c:	18fb      	adds	r3, r7, r3
    133e:	881b      	ldrh	r3, [r3, #0]
    1340:	4313      	orrs	r3, r2
    1342:	b29a      	uxth	r2, r3
    1344:	2318      	movs	r3, #24
    1346:	18fb      	adds	r3, r7, r3
    1348:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    134a:	68fa      	ldr	r2, [r7, #12]
    134c:	2318      	movs	r3, #24
    134e:	18fb      	adds	r3, r7, r3
    1350:	881b      	ldrh	r3, [r3, #0]
    1352:	1c10      	adds	r0, r2, #0
    1354:	1c19      	adds	r1, r3, #0
    1356:	4b38      	ldr	r3, [pc, #224]	; (1438 <spi_transceive_buffer_wait+0x1a0>)
    1358:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	68fb      	ldr	r3, [r7, #12]
    135e:	1c18      	adds	r0, r3, #0
    1360:	4b36      	ldr	r3, [pc, #216]	; (143c <spi_transceive_buffer_wait+0x1a4>)
    1362:	4798      	blx	r3
    1364:	1c03      	adds	r3, r0, #0
    1366:	1c1a      	adds	r2, r3, #0
    1368:	2301      	movs	r3, #1
    136a:	4053      	eors	r3, r2
    136c:	b2db      	uxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	d1f4      	bne.n	135c <spi_transceive_buffer_wait+0xc4>
		}

		enum status_code retval;
		uint16_t received_data = 0;
    1372:	2314      	movs	r3, #20
    1374:	18fb      	adds	r3, r7, r3
    1376:	2200      	movs	r2, #0
    1378:	801a      	strh	r2, [r3, #0]
		rx_length--;
    137a:	231a      	movs	r3, #26
    137c:	18fb      	adds	r3, r7, r3
    137e:	881a      	ldrh	r2, [r3, #0]
    1380:	231a      	movs	r3, #26
    1382:	18fb      	adds	r3, r7, r3
    1384:	3a01      	subs	r2, #1
    1386:	801a      	strh	r2, [r3, #0]

		retval = spi_read(module, &received_data);
    1388:	2317      	movs	r3, #23
    138a:	18fc      	adds	r4, r7, r3
    138c:	68fa      	ldr	r2, [r7, #12]
    138e:	2314      	movs	r3, #20
    1390:	18fb      	adds	r3, r7, r3
    1392:	1c10      	adds	r0, r2, #0
    1394:	1c19      	adds	r1, r3, #0
    1396:	4b2a      	ldr	r3, [pc, #168]	; (1440 <spi_transceive_buffer_wait+0x1a8>)
    1398:	4798      	blx	r3
    139a:	1c03      	adds	r3, r0, #0
    139c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    139e:	2317      	movs	r3, #23
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	781b      	ldrb	r3, [r3, #0]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d003      	beq.n	13b0 <spi_transceive_buffer_wait+0x118>
			/* Overflow, abort */
			return retval;
    13a8:	2317      	movs	r3, #23
    13aa:	18fb      	adds	r3, r7, r3
    13ac:	781b      	ldrb	r3, [r3, #0]
    13ae:	e03c      	b.n	142a <spi_transceive_buffer_wait+0x192>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    13b0:	231c      	movs	r3, #28
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	881b      	ldrh	r3, [r3, #0]
    13b6:	221c      	movs	r2, #28
    13b8:	18ba      	adds	r2, r7, r2
    13ba:	1c59      	adds	r1, r3, #1
    13bc:	8011      	strh	r1, [r2, #0]
    13be:	1c1a      	adds	r2, r3, #0
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	189b      	adds	r3, r3, r2
    13c4:	2214      	movs	r2, #20
    13c6:	18ba      	adds	r2, r7, r2
    13c8:	8812      	ldrh	r2, [r2, #0]
    13ca:	b2d2      	uxtb	r2, r2
    13cc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	799b      	ldrb	r3, [r3, #6]
    13d2:	2b01      	cmp	r3, #1
    13d4:	d110      	bne.n	13f8 <spi_transceive_buffer_wait+0x160>
			rx_data[rx_pos++] = (received_data >> 8);
    13d6:	231c      	movs	r3, #28
    13d8:	18fb      	adds	r3, r7, r3
    13da:	881b      	ldrh	r3, [r3, #0]
    13dc:	221c      	movs	r2, #28
    13de:	18ba      	adds	r2, r7, r2
    13e0:	1c59      	adds	r1, r3, #1
    13e2:	8011      	strh	r1, [r2, #0]
    13e4:	1c1a      	adds	r2, r3, #0
    13e6:	687b      	ldr	r3, [r7, #4]
    13e8:	189b      	adds	r3, r3, r2
    13ea:	2214      	movs	r2, #20
    13ec:	18ba      	adds	r2, r7, r2
    13ee:	8812      	ldrh	r2, [r2, #0]
    13f0:	0a12      	lsrs	r2, r2, #8
    13f2:	b292      	uxth	r2, r2
    13f4:	b2d2      	uxtb	r2, r2
    13f6:	701a      	strb	r2, [r3, #0]
	uint16_t tx_pos = 0;
	uint16_t rx_pos = 0;
	uint16_t rx_length = length;

	/* Send and receive buffer */
	while (length--) {
    13f8:	1cbb      	adds	r3, r7, #2
    13fa:	881b      	ldrh	r3, [r3, #0]
    13fc:	1cba      	adds	r2, r7, #2
    13fe:	1e59      	subs	r1, r3, #1
    1400:	8011      	strh	r1, [r2, #0]
    1402:	2b00      	cmp	r3, #0
    1404:	d000      	beq.n	1408 <spi_transceive_buffer_wait+0x170>
    1406:	e76d      	b.n	12e4 <spi_transceive_buffer_wait+0x4c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1408:	68fb      	ldr	r3, [r7, #12]
    140a:	795b      	ldrb	r3, [r3, #5]
    140c:	2b01      	cmp	r3, #1
    140e:	d10b      	bne.n	1428 <spi_transceive_buffer_wait+0x190>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1410:	46c0      	nop			; (mov r8, r8)
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	1c18      	adds	r0, r3, #0
    1416:	4b0b      	ldr	r3, [pc, #44]	; (1444 <spi_transceive_buffer_wait+0x1ac>)
    1418:	4798      	blx	r3
    141a:	1c03      	adds	r3, r0, #0
    141c:	1c1a      	adds	r2, r3, #0
    141e:	2301      	movs	r3, #1
    1420:	4053      	eors	r3, r2
    1422:	b2db      	uxtb	r3, r3
    1424:	2b00      	cmp	r3, #0
    1426:	d1f4      	bne.n	1412 <spi_transceive_buffer_wait+0x17a>
				rx_data[rx_pos++] = (received_data >> 8);
			}
		}
	}
#  endif
	return STATUS_OK;
    1428:	2300      	movs	r3, #0
}
    142a:	1c18      	adds	r0, r3, #0
    142c:	46bd      	mov	sp, r7
    142e:	b009      	add	sp, #36	; 0x24
    1430:	bd90      	pop	{r4, r7, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	0000099d 	.word	0x0000099d
    1438:	000009ed 	.word	0x000009ed
    143c:	000009c5 	.word	0x000009c5
    1440:	00000a35 	.word	0x00000a35
    1444:	00000975 	.word	0x00000975

00001448 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1448:	b580      	push	{r7, lr}
    144a:	b082      	sub	sp, #8
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	2201      	movs	r2, #1
    1454:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1456:	687b      	ldr	r3, [r7, #4]
    1458:	2200      	movs	r2, #0
    145a:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	2206      	movs	r2, #6
    1460:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	2200      	movs	r2, #0
    1466:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1468:	687b      	ldr	r3, [r7, #4]
    146a:	2200      	movs	r2, #0
    146c:	725a      	strb	r2, [r3, #9]
}
    146e:	46bd      	mov	sp, r7
    1470:	b002      	add	sp, #8
    1472:	bd80      	pop	{r7, pc}

00001474 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    1474:	b580      	push	{r7, lr}
    1476:	b082      	sub	sp, #8
    1478:	af00      	add	r7, sp, #0
    147a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	2203      	movs	r2, #3
    1480:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	2200      	movs	r2, #0
    1486:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1488:	687b      	ldr	r3, [r7, #4]
    148a:	2201      	movs	r2, #1
    148c:	709a      	strb	r2, [r3, #2]
}
    148e:	46bd      	mov	sp, r7
    1490:	b002      	add	sp, #8
    1492:	bd80      	pop	{r7, pc}

00001494 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    1494:	b580      	push	{r7, lr}
    1496:	b082      	sub	sp, #8
    1498:	af00      	add	r7, sp, #0
    149a:	1c02      	adds	r2, r0, #0
    149c:	1dfb      	adds	r3, r7, #7
    149e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    14a0:	4a03      	ldr	r2, [pc, #12]	; (14b0 <system_cpu_clock_set_divider+0x1c>)
    14a2:	1dfb      	adds	r3, r7, #7
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	7213      	strb	r3, [r2, #8]
}
    14a8:	46bd      	mov	sp, r7
    14aa:	b002      	add	sp, #8
    14ac:	bd80      	pop	{r7, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	40000400 	.word	0x40000400

000014b4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    14b4:	b580      	push	{r7, lr}
    14b6:	b082      	sub	sp, #8
    14b8:	af00      	add	r7, sp, #0
    14ba:	1c02      	adds	r2, r0, #0
    14bc:	1dfb      	adds	r3, r7, #7
    14be:	701a      	strb	r2, [r3, #0]
    14c0:	1dbb      	adds	r3, r7, #6
    14c2:	1c0a      	adds	r2, r1, #0
    14c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    14c6:	1dfb      	adds	r3, r7, #7
    14c8:	781b      	ldrb	r3, [r3, #0]
    14ca:	2b01      	cmp	r3, #1
    14cc:	d008      	beq.n	14e0 <system_apb_clock_set_divider+0x2c>
    14ce:	2b02      	cmp	r3, #2
    14d0:	d00b      	beq.n	14ea <system_apb_clock_set_divider+0x36>
    14d2:	2b00      	cmp	r3, #0
    14d4:	d10e      	bne.n	14f4 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    14d6:	4a0b      	ldr	r2, [pc, #44]	; (1504 <system_apb_clock_set_divider+0x50>)
    14d8:	1dbb      	adds	r3, r7, #6
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	7253      	strb	r3, [r2, #9]
			break;
    14de:	e00b      	b.n	14f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    14e0:	4a08      	ldr	r2, [pc, #32]	; (1504 <system_apb_clock_set_divider+0x50>)
    14e2:	1dbb      	adds	r3, r7, #6
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	7293      	strb	r3, [r2, #10]
			break;
    14e8:	e006      	b.n	14f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    14ea:	4a06      	ldr	r2, [pc, #24]	; (1504 <system_apb_clock_set_divider+0x50>)
    14ec:	1dbb      	adds	r3, r7, #6
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	72d3      	strb	r3, [r2, #11]
			break;
    14f2:	e001      	b.n	14f8 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    14f4:	2317      	movs	r3, #23
    14f6:	e000      	b.n	14fa <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    14f8:	2300      	movs	r3, #0
}
    14fa:	1c18      	adds	r0, r3, #0
    14fc:	46bd      	mov	sp, r7
    14fe:	b002      	add	sp, #8
    1500:	bd80      	pop	{r7, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	40000400 	.word	0x40000400

00001508 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1508:	b580      	push	{r7, lr}
    150a:	b082      	sub	sp, #8
    150c:	af00      	add	r7, sp, #0
    150e:	1c02      	adds	r2, r0, #0
    1510:	1dfb      	adds	r3, r7, #7
    1512:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <system_flash_set_waitstates+0x30>)
    1516:	1dfa      	adds	r2, r7, #7
    1518:	7812      	ldrb	r2, [r2, #0]
    151a:	210f      	movs	r1, #15
    151c:	400a      	ands	r2, r1
    151e:	b2d2      	uxtb	r2, r2
    1520:	210f      	movs	r1, #15
    1522:	400a      	ands	r2, r1
    1524:	0052      	lsls	r2, r2, #1
    1526:	6859      	ldr	r1, [r3, #4]
    1528:	201e      	movs	r0, #30
    152a:	4381      	bics	r1, r0
    152c:	430a      	orrs	r2, r1
    152e:	605a      	str	r2, [r3, #4]
}
    1530:	46bd      	mov	sp, r7
    1532:	b002      	add	sp, #8
    1534:	bd80      	pop	{r7, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	41004000 	.word	0x41004000

0000153c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    153c:	b580      	push	{r7, lr}
    153e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1540:	46c0      	nop			; (mov r8, r8)
    1542:	4b03      	ldr	r3, [pc, #12]	; (1550 <_system_dfll_wait_for_sync+0x14>)
    1544:	68db      	ldr	r3, [r3, #12]
    1546:	2210      	movs	r2, #16
    1548:	4013      	ands	r3, r2
    154a:	d0fa      	beq.n	1542 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    154c:	46bd      	mov	sp, r7
    154e:	bd80      	pop	{r7, pc}
    1550:	40000800 	.word	0x40000800

00001554 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1554:	b580      	push	{r7, lr}
    1556:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1558:	4a0c      	ldr	r2, [pc, #48]	; (158c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    155a:	4b0d      	ldr	r3, [pc, #52]	; (1590 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	b29b      	uxth	r3, r3
    1560:	2180      	movs	r1, #128	; 0x80
    1562:	438b      	bics	r3, r1
    1564:	b29b      	uxth	r3, r3
    1566:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    156a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    156c:	4a07      	ldr	r2, [pc, #28]	; (158c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1570:	689b      	ldr	r3, [r3, #8]
    1572:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1574:	4a05      	ldr	r2, [pc, #20]	; (158c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1576:	4b06      	ldr	r3, [pc, #24]	; (1590 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1578:	685b      	ldr	r3, [r3, #4]
    157a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    157c:	4a03      	ldr	r2, [pc, #12]	; (158c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    157e:	4b04      	ldr	r3, [pc, #16]	; (1590 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1580:	681b      	ldr	r3, [r3, #0]
    1582:	b29b      	uxth	r3, r3
    1584:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1586:	46bd      	mov	sp, r7
    1588:	bd80      	pop	{r7, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000800 	.word	0x40000800
    1590:	2000003c 	.word	0x2000003c
    1594:	0000153d 	.word	0x0000153d

00001598 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1598:	b580      	push	{r7, lr}
    159a:	b082      	sub	sp, #8
    159c:	af00      	add	r7, sp, #0
    159e:	1c02      	adds	r2, r0, #0
    15a0:	1dfb      	adds	r3, r7, #7
    15a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    15a4:	1dfb      	adds	r3, r7, #7
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	2b08      	cmp	r3, #8
    15aa:	d842      	bhi.n	1632 <system_clock_source_get_hz+0x9a>
    15ac:	009a      	lsls	r2, r3, #2
    15ae:	4b23      	ldr	r3, [pc, #140]	; (163c <system_clock_source_get_hz+0xa4>)
    15b0:	18d3      	adds	r3, r2, r3
    15b2:	681b      	ldr	r3, [r3, #0]
    15b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    15b6:	4b22      	ldr	r3, [pc, #136]	; (1640 <system_clock_source_get_hz+0xa8>)
    15b8:	691b      	ldr	r3, [r3, #16]
    15ba:	e03b      	b.n	1634 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    15bc:	4b21      	ldr	r3, [pc, #132]	; (1644 <system_clock_source_get_hz+0xac>)
    15be:	6a1b      	ldr	r3, [r3, #32]
    15c0:	0a1b      	lsrs	r3, r3, #8
    15c2:	1c1a      	adds	r2, r3, #0
    15c4:	2303      	movs	r3, #3
    15c6:	4013      	ands	r3, r2
    15c8:	b2db      	uxtb	r3, r3
    15ca:	1c1a      	adds	r2, r3, #0
    15cc:	4b1e      	ldr	r3, [pc, #120]	; (1648 <system_clock_source_get_hz+0xb0>)
    15ce:	40d3      	lsrs	r3, r2
    15d0:	e030      	b.n	1634 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    15d2:	2380      	movs	r3, #128	; 0x80
    15d4:	021b      	lsls	r3, r3, #8
    15d6:	e02d      	b.n	1634 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    15d8:	2380      	movs	r3, #128	; 0x80
    15da:	021b      	lsls	r3, r3, #8
    15dc:	e02a      	b.n	1634 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    15de:	4b18      	ldr	r3, [pc, #96]	; (1640 <system_clock_source_get_hz+0xa8>)
    15e0:	695b      	ldr	r3, [r3, #20]
    15e2:	e027      	b.n	1634 <system_clock_source_get_hz+0x9c>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15e4:	4b16      	ldr	r3, [pc, #88]	; (1640 <system_clock_source_get_hz+0xa8>)
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	2202      	movs	r2, #2
    15ea:	4013      	ands	r3, r2
    15ec:	d101      	bne.n	15f2 <system_clock_source_get_hz+0x5a>
			return 0;
    15ee:	2300      	movs	r3, #0
    15f0:	e020      	b.n	1634 <system_clock_source_get_hz+0x9c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    15f2:	4b16      	ldr	r3, [pc, #88]	; (164c <system_clock_source_get_hz+0xb4>)
    15f4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    15f6:	4b12      	ldr	r3, [pc, #72]	; (1640 <system_clock_source_get_hz+0xa8>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	2204      	movs	r2, #4
    15fc:	4013      	ands	r3, r2
    15fe:	d009      	beq.n	1614 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1600:	2000      	movs	r0, #0
    1602:	4b13      	ldr	r3, [pc, #76]	; (1650 <system_clock_source_get_hz+0xb8>)
    1604:	4798      	blx	r3
    1606:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    1608:	4b0d      	ldr	r3, [pc, #52]	; (1640 <system_clock_source_get_hz+0xa8>)
    160a:	689b      	ldr	r3, [r3, #8]
    160c:	041b      	lsls	r3, r3, #16
    160e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1610:	4353      	muls	r3, r2
    1612:	e00f      	b.n	1634 <system_clock_source_get_hz+0x9c>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1614:	4b0f      	ldr	r3, [pc, #60]	; (1654 <system_clock_source_get_hz+0xbc>)
    1616:	e00d      	b.n	1634 <system_clock_source_get_hz+0x9c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1618:	4a0a      	ldr	r2, [pc, #40]	; (1644 <system_clock_source_get_hz+0xac>)
    161a:	2350      	movs	r3, #80	; 0x50
    161c:	5cd3      	ldrb	r3, [r2, r3]
    161e:	b2db      	uxtb	r3, r3
    1620:	1c1a      	adds	r2, r3, #0
    1622:	2304      	movs	r3, #4
    1624:	4013      	ands	r3, r2
    1626:	d101      	bne.n	162c <system_clock_source_get_hz+0x94>
			return 0;
    1628:	2300      	movs	r3, #0
    162a:	e003      	b.n	1634 <system_clock_source_get_hz+0x9c>
		}

		return _system_clock_inst.dpll.frequency;
    162c:	4b04      	ldr	r3, [pc, #16]	; (1640 <system_clock_source_get_hz+0xa8>)
    162e:	68db      	ldr	r3, [r3, #12]
    1630:	e000      	b.n	1634 <system_clock_source_get_hz+0x9c>
#endif

	default:
		return 0;
    1632:	2300      	movs	r3, #0
	}
}
    1634:	1c18      	adds	r0, r3, #0
    1636:	46bd      	mov	sp, r7
    1638:	b002      	add	sp, #8
    163a:	bd80      	pop	{r7, pc}
    163c:	00002564 	.word	0x00002564
    1640:	2000003c 	.word	0x2000003c
    1644:	40000800 	.word	0x40000800
    1648:	007a1200 	.word	0x007a1200
    164c:	0000153d 	.word	0x0000153d
    1650:	00001cd5 	.word	0x00001cd5
    1654:	02dc6c00 	.word	0x02dc6c00

00001658 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1660:	4b1a      	ldr	r3, [pc, #104]	; (16cc <system_clock_source_osc8m_set_config+0x74>)
    1662:	6a1b      	ldr	r3, [r3, #32]
    1664:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1666:	687b      	ldr	r3, [r7, #4]
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	1c1a      	adds	r2, r3, #0
    166c:	2303      	movs	r3, #3
    166e:	4013      	ands	r3, r2
    1670:	b2da      	uxtb	r2, r3
    1672:	230d      	movs	r3, #13
    1674:	18fb      	adds	r3, r7, r3
    1676:	2103      	movs	r1, #3
    1678:	400a      	ands	r2, r1
    167a:	1c10      	adds	r0, r2, #0
    167c:	781a      	ldrb	r2, [r3, #0]
    167e:	2103      	movs	r1, #3
    1680:	438a      	bics	r2, r1
    1682:	1c11      	adds	r1, r2, #0
    1684:	1c02      	adds	r2, r0, #0
    1686:	430a      	orrs	r2, r1
    1688:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    168a:	687b      	ldr	r3, [r7, #4]
    168c:	789a      	ldrb	r2, [r3, #2]
    168e:	230c      	movs	r3, #12
    1690:	18fb      	adds	r3, r7, r3
    1692:	01d0      	lsls	r0, r2, #7
    1694:	781a      	ldrb	r2, [r3, #0]
    1696:	217f      	movs	r1, #127	; 0x7f
    1698:	400a      	ands	r2, r1
    169a:	1c11      	adds	r1, r2, #0
    169c:	1c02      	adds	r2, r0, #0
    169e:	430a      	orrs	r2, r1
    16a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	785a      	ldrb	r2, [r3, #1]
    16a6:	230c      	movs	r3, #12
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	2101      	movs	r1, #1
    16ac:	400a      	ands	r2, r1
    16ae:	0190      	lsls	r0, r2, #6
    16b0:	781a      	ldrb	r2, [r3, #0]
    16b2:	2140      	movs	r1, #64	; 0x40
    16b4:	438a      	bics	r2, r1
    16b6:	1c11      	adds	r1, r2, #0
    16b8:	1c02      	adds	r2, r0, #0
    16ba:	430a      	orrs	r2, r1
    16bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    16be:	4b03      	ldr	r3, [pc, #12]	; (16cc <system_clock_source_osc8m_set_config+0x74>)
    16c0:	68fa      	ldr	r2, [r7, #12]
    16c2:	621a      	str	r2, [r3, #32]
}
    16c4:	46bd      	mov	sp, r7
    16c6:	b004      	add	sp, #16
    16c8:	bd80      	pop	{r7, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	40000800 	.word	0x40000800

000016d0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    16d0:	b580      	push	{r7, lr}
    16d2:	b082      	sub	sp, #8
    16d4:	af00      	add	r7, sp, #0
    16d6:	1c02      	adds	r2, r0, #0
    16d8:	1dfb      	adds	r3, r7, #7
    16da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    16dc:	1dfb      	adds	r3, r7, #7
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	2b08      	cmp	r3, #8
    16e2:	d83b      	bhi.n	175c <system_clock_source_enable+0x8c>
    16e4:	009a      	lsls	r2, r3, #2
    16e6:	4b21      	ldr	r3, [pc, #132]	; (176c <system_clock_source_enable+0x9c>)
    16e8:	18d3      	adds	r3, r2, r3
    16ea:	681b      	ldr	r3, [r3, #0]
    16ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    16ee:	4b20      	ldr	r3, [pc, #128]	; (1770 <system_clock_source_enable+0xa0>)
    16f0:	4a1f      	ldr	r2, [pc, #124]	; (1770 <system_clock_source_enable+0xa0>)
    16f2:	6a12      	ldr	r2, [r2, #32]
    16f4:	2102      	movs	r1, #2
    16f6:	430a      	orrs	r2, r1
    16f8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    16fa:	2300      	movs	r3, #0
    16fc:	e031      	b.n	1762 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16fe:	4b1c      	ldr	r3, [pc, #112]	; (1770 <system_clock_source_enable+0xa0>)
    1700:	4a1b      	ldr	r2, [pc, #108]	; (1770 <system_clock_source_enable+0xa0>)
    1702:	6992      	ldr	r2, [r2, #24]
    1704:	2102      	movs	r1, #2
    1706:	430a      	orrs	r2, r1
    1708:	619a      	str	r2, [r3, #24]
		break;
    170a:	e029      	b.n	1760 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    170c:	4a18      	ldr	r2, [pc, #96]	; (1770 <system_clock_source_enable+0xa0>)
    170e:	4b18      	ldr	r3, [pc, #96]	; (1770 <system_clock_source_enable+0xa0>)
    1710:	8a1b      	ldrh	r3, [r3, #16]
    1712:	b29b      	uxth	r3, r3
    1714:	2102      	movs	r1, #2
    1716:	430b      	orrs	r3, r1
    1718:	b29b      	uxth	r3, r3
    171a:	8213      	strh	r3, [r2, #16]
		break;
    171c:	e020      	b.n	1760 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    171e:	4a14      	ldr	r2, [pc, #80]	; (1770 <system_clock_source_enable+0xa0>)
    1720:	4b13      	ldr	r3, [pc, #76]	; (1770 <system_clock_source_enable+0xa0>)
    1722:	8a9b      	ldrh	r3, [r3, #20]
    1724:	b29b      	uxth	r3, r3
    1726:	2102      	movs	r1, #2
    1728:	430b      	orrs	r3, r1
    172a:	b29b      	uxth	r3, r3
    172c:	8293      	strh	r3, [r2, #20]
		break;
    172e:	e017      	b.n	1760 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1730:	4b10      	ldr	r3, [pc, #64]	; (1774 <system_clock_source_enable+0xa4>)
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	2202      	movs	r2, #2
    1736:	431a      	orrs	r2, r3
    1738:	4b0e      	ldr	r3, [pc, #56]	; (1774 <system_clock_source_enable+0xa4>)
    173a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    173c:	4b0e      	ldr	r3, [pc, #56]	; (1778 <system_clock_source_enable+0xa8>)
    173e:	4798      	blx	r3
		break;
    1740:	e00e      	b.n	1760 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1742:	4a0b      	ldr	r2, [pc, #44]	; (1770 <system_clock_source_enable+0xa0>)
    1744:	490a      	ldr	r1, [pc, #40]	; (1770 <system_clock_source_enable+0xa0>)
    1746:	2344      	movs	r3, #68	; 0x44
    1748:	5ccb      	ldrb	r3, [r1, r3]
    174a:	b2db      	uxtb	r3, r3
    174c:	2102      	movs	r1, #2
    174e:	430b      	orrs	r3, r1
    1750:	b2d9      	uxtb	r1, r3
    1752:	2344      	movs	r3, #68	; 0x44
    1754:	54d1      	strb	r1, [r2, r3]
		break;
    1756:	e003      	b.n	1760 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1758:	2300      	movs	r3, #0
    175a:	e002      	b.n	1762 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    175c:	2317      	movs	r3, #23
    175e:	e000      	b.n	1762 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1760:	2300      	movs	r3, #0
}
    1762:	1c18      	adds	r0, r3, #0
    1764:	46bd      	mov	sp, r7
    1766:	b002      	add	sp, #8
    1768:	bd80      	pop	{r7, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	00002588 	.word	0x00002588
    1770:	40000800 	.word	0x40000800
    1774:	2000003c 	.word	0x2000003c
    1778:	00001555 	.word	0x00001555

0000177c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    177c:	b580      	push	{r7, lr}
    177e:	b082      	sub	sp, #8
    1780:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1782:	1c3b      	adds	r3, r7, #0
    1784:	2201      	movs	r2, #1
    1786:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1788:	2300      	movs	r3, #0
    178a:	607b      	str	r3, [r7, #4]
    178c:	e009      	b.n	17a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    178e:	687b      	ldr	r3, [r7, #4]
    1790:	b2da      	uxtb	r2, r3
    1792:	1c3b      	adds	r3, r7, #0
    1794:	1c10      	adds	r0, r2, #0
    1796:	1c19      	adds	r1, r3, #0
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <_switch_peripheral_gclk+0x34>)
    179a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    179c:	687b      	ldr	r3, [r7, #4]
    179e:	3301      	adds	r3, #1
    17a0:	607b      	str	r3, [r7, #4]
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	2b24      	cmp	r3, #36	; 0x24
    17a6:	d9f2      	bls.n	178e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    17a8:	46bd      	mov	sp, r7
    17aa:	b002      	add	sp, #8
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00001bb1 	.word	0x00001bb1

000017b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    17b4:	b580      	push	{r7, lr}
    17b6:	b09c      	sub	sp, #112	; 0x70
    17b8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    17ba:	4b25      	ldr	r3, [pc, #148]	; (1850 <system_clock_init+0x9c>)
    17bc:	22c2      	movs	r2, #194	; 0xc2
    17be:	00d2      	lsls	r2, r2, #3
    17c0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    17c2:	2000      	movs	r0, #0
    17c4:	4b23      	ldr	r3, [pc, #140]	; (1854 <system_clock_init+0xa0>)
    17c6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    17c8:	4b23      	ldr	r3, [pc, #140]	; (1858 <system_clock_init+0xa4>)
    17ca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    17cc:	236c      	movs	r3, #108	; 0x6c
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	1c18      	adds	r0, r3, #0
    17d2:	4b22      	ldr	r3, [pc, #136]	; (185c <system_clock_init+0xa8>)
    17d4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17d6:	236c      	movs	r3, #108	; 0x6c
    17d8:	18fb      	adds	r3, r7, r3
    17da:	2200      	movs	r2, #0
    17dc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    17de:	236c      	movs	r3, #108	; 0x6c
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	2201      	movs	r2, #1
    17e4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    17e6:	236c      	movs	r3, #108	; 0x6c
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	2200      	movs	r2, #0
    17ec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17ee:	236c      	movs	r3, #108	; 0x6c
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	1c18      	adds	r0, r3, #0
    17f4:	4b1a      	ldr	r3, [pc, #104]	; (1860 <system_clock_init+0xac>)
    17f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17f8:	2006      	movs	r0, #6
    17fa:	4b1a      	ldr	r3, [pc, #104]	; (1864 <system_clock_init+0xb0>)
    17fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17fe:	4b1a      	ldr	r3, [pc, #104]	; (1868 <system_clock_init+0xb4>)
    1800:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1802:	2000      	movs	r0, #0
    1804:	4b19      	ldr	r3, [pc, #100]	; (186c <system_clock_init+0xb8>)
    1806:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1808:	2000      	movs	r0, #0
    180a:	2100      	movs	r1, #0
    180c:	4b18      	ldr	r3, [pc, #96]	; (1870 <system_clock_init+0xbc>)
    180e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1810:	2001      	movs	r0, #1
    1812:	2100      	movs	r1, #0
    1814:	4b16      	ldr	r3, [pc, #88]	; (1870 <system_clock_init+0xbc>)
    1816:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1818:	1c3b      	adds	r3, r7, #0
    181a:	1c18      	adds	r0, r3, #0
    181c:	4b15      	ldr	r3, [pc, #84]	; (1874 <system_clock_init+0xc0>)
    181e:	4798      	blx	r3
    1820:	1c3b      	adds	r3, r7, #0
    1822:	2206      	movs	r2, #6
    1824:	701a      	strb	r2, [r3, #0]
    1826:	1c3b      	adds	r3, r7, #0
    1828:	2201      	movs	r2, #1
    182a:	605a      	str	r2, [r3, #4]
    182c:	1c3b      	adds	r3, r7, #0
    182e:	2200      	movs	r2, #0
    1830:	721a      	strb	r2, [r3, #8]
    1832:	1c3b      	adds	r3, r7, #0
    1834:	2200      	movs	r2, #0
    1836:	725a      	strb	r2, [r3, #9]
    1838:	1c3b      	adds	r3, r7, #0
    183a:	2000      	movs	r0, #0
    183c:	1c19      	adds	r1, r3, #0
    183e:	4b0e      	ldr	r3, [pc, #56]	; (1878 <system_clock_init+0xc4>)
    1840:	4798      	blx	r3
    1842:	2000      	movs	r0, #0
    1844:	4b0d      	ldr	r3, [pc, #52]	; (187c <system_clock_init+0xc8>)
    1846:	4798      	blx	r3
#endif
}
    1848:	46bd      	mov	sp, r7
    184a:	b01c      	add	sp, #112	; 0x70
    184c:	bd80      	pop	{r7, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	40000800 	.word	0x40000800
    1854:	00001509 	.word	0x00001509
    1858:	0000177d 	.word	0x0000177d
    185c:	00001475 	.word	0x00001475
    1860:	00001659 	.word	0x00001659
    1864:	000016d1 	.word	0x000016d1
    1868:	00001921 	.word	0x00001921
    186c:	00001495 	.word	0x00001495
    1870:	000014b5 	.word	0x000014b5
    1874:	00001449 	.word	0x00001449
    1878:	00001951 	.word	0x00001951
    187c:	00001a71 	.word	0x00001a71

00001880 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1880:	b580      	push	{r7, lr}
    1882:	b082      	sub	sp, #8
    1884:	af00      	add	r7, sp, #0
    1886:	1c02      	adds	r2, r0, #0
    1888:	6039      	str	r1, [r7, #0]
    188a:	1dfb      	adds	r3, r7, #7
    188c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    188e:	1dfb      	adds	r3, r7, #7
    1890:	781b      	ldrb	r3, [r3, #0]
    1892:	2b01      	cmp	r3, #1
    1894:	d00a      	beq.n	18ac <system_apb_clock_set_mask+0x2c>
    1896:	2b02      	cmp	r3, #2
    1898:	d00f      	beq.n	18ba <system_apb_clock_set_mask+0x3a>
    189a:	2b00      	cmp	r3, #0
    189c:	d114      	bne.n	18c8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    189e:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18a0:	4a0d      	ldr	r2, [pc, #52]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18a2:	6991      	ldr	r1, [r2, #24]
    18a4:	683a      	ldr	r2, [r7, #0]
    18a6:	430a      	orrs	r2, r1
    18a8:	619a      	str	r2, [r3, #24]
			break;
    18aa:	e00f      	b.n	18cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    18ac:	4b0a      	ldr	r3, [pc, #40]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18ae:	4a0a      	ldr	r2, [pc, #40]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18b0:	69d1      	ldr	r1, [r2, #28]
    18b2:	683a      	ldr	r2, [r7, #0]
    18b4:	430a      	orrs	r2, r1
    18b6:	61da      	str	r2, [r3, #28]
			break;
    18b8:	e008      	b.n	18cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    18ba:	4b07      	ldr	r3, [pc, #28]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18bc:	4a06      	ldr	r2, [pc, #24]	; (18d8 <system_apb_clock_set_mask+0x58>)
    18be:	6a11      	ldr	r1, [r2, #32]
    18c0:	683a      	ldr	r2, [r7, #0]
    18c2:	430a      	orrs	r2, r1
    18c4:	621a      	str	r2, [r3, #32]
			break;
    18c6:	e001      	b.n	18cc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    18c8:	2317      	movs	r3, #23
    18ca:	e000      	b.n	18ce <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    18cc:	2300      	movs	r3, #0
}
    18ce:	1c18      	adds	r0, r3, #0
    18d0:	46bd      	mov	sp, r7
    18d2:	b002      	add	sp, #8
    18d4:	bd80      	pop	{r7, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	40000400 	.word	0x40000400

000018dc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    18dc:	b580      	push	{r7, lr}
    18de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    18e0:	4b01      	ldr	r3, [pc, #4]	; (18e8 <system_interrupt_enter_critical_section+0xc>)
    18e2:	4798      	blx	r3
}
    18e4:	46bd      	mov	sp, r7
    18e6:	bd80      	pop	{r7, pc}
    18e8:	0000016d 	.word	0x0000016d

000018ec <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    18f0:	4b01      	ldr	r3, [pc, #4]	; (18f8 <system_interrupt_leave_critical_section+0xc>)
    18f2:	4798      	blx	r3
}
    18f4:	46bd      	mov	sp, r7
    18f6:	bd80      	pop	{r7, pc}
    18f8:	000001bd 	.word	0x000001bd

000018fc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    18fc:	b580      	push	{r7, lr}
    18fe:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1900:	4b06      	ldr	r3, [pc, #24]	; (191c <system_gclk_is_syncing+0x20>)
    1902:	785b      	ldrb	r3, [r3, #1]
    1904:	b2db      	uxtb	r3, r3
    1906:	b2db      	uxtb	r3, r3
    1908:	b25b      	sxtb	r3, r3
    190a:	2b00      	cmp	r3, #0
    190c:	da01      	bge.n	1912 <system_gclk_is_syncing+0x16>
		return true;
    190e:	2301      	movs	r3, #1
    1910:	e000      	b.n	1914 <system_gclk_is_syncing+0x18>
	}

	return false;
    1912:	2300      	movs	r3, #0
}
    1914:	1c18      	adds	r0, r3, #0
    1916:	46bd      	mov	sp, r7
    1918:	bd80      	pop	{r7, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000c00 	.word	0x40000c00

00001920 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1920:	b580      	push	{r7, lr}
    1922:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1924:	2000      	movs	r0, #0
    1926:	2108      	movs	r1, #8
    1928:	4b07      	ldr	r3, [pc, #28]	; (1948 <system_gclk_init+0x28>)
    192a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    192c:	4b07      	ldr	r3, [pc, #28]	; (194c <system_gclk_init+0x2c>)
    192e:	2201      	movs	r2, #1
    1930:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <system_gclk_init+0x2c>)
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	b2db      	uxtb	r3, r3
    193a:	1c1a      	adds	r2, r3, #0
    193c:	2301      	movs	r3, #1
    193e:	4013      	ands	r3, r2
    1940:	d1f8      	bne.n	1934 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1942:	46bd      	mov	sp, r7
    1944:	bd80      	pop	{r7, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	00001881 	.word	0x00001881
    194c:	40000c00 	.word	0x40000c00

00001950 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1950:	b580      	push	{r7, lr}
    1952:	b086      	sub	sp, #24
    1954:	af00      	add	r7, sp, #0
    1956:	1c02      	adds	r2, r0, #0
    1958:	6039      	str	r1, [r7, #0]
    195a:	1dfb      	adds	r3, r7, #7
    195c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    195e:	1dfb      	adds	r3, r7, #7
    1960:	781b      	ldrb	r3, [r3, #0]
    1962:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1964:	1dfb      	adds	r3, r7, #7
    1966:	781b      	ldrb	r3, [r3, #0]
    1968:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    196a:	683b      	ldr	r3, [r7, #0]
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	021b      	lsls	r3, r3, #8
    1970:	1c1a      	adds	r2, r3, #0
    1972:	697b      	ldr	r3, [r7, #20]
    1974:	4313      	orrs	r3, r2
    1976:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1978:	683b      	ldr	r3, [r7, #0]
    197a:	785b      	ldrb	r3, [r3, #1]
    197c:	2b00      	cmp	r3, #0
    197e:	d004      	beq.n	198a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1980:	697b      	ldr	r3, [r7, #20]
    1982:	2280      	movs	r2, #128	; 0x80
    1984:	02d2      	lsls	r2, r2, #11
    1986:	4313      	orrs	r3, r2
    1988:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    198a:	683b      	ldr	r3, [r7, #0]
    198c:	7a5b      	ldrb	r3, [r3, #9]
    198e:	2b00      	cmp	r3, #0
    1990:	d004      	beq.n	199c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1992:	697b      	ldr	r3, [r7, #20]
    1994:	2280      	movs	r2, #128	; 0x80
    1996:	0312      	lsls	r2, r2, #12
    1998:	4313      	orrs	r3, r2
    199a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    199c:	683b      	ldr	r3, [r7, #0]
    199e:	685b      	ldr	r3, [r3, #4]
    19a0:	2b01      	cmp	r3, #1
    19a2:	d92c      	bls.n	19fe <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    19a4:	683b      	ldr	r3, [r7, #0]
    19a6:	685a      	ldr	r2, [r3, #4]
    19a8:	683b      	ldr	r3, [r7, #0]
    19aa:	685b      	ldr	r3, [r3, #4]
    19ac:	3b01      	subs	r3, #1
    19ae:	4013      	ands	r3, r2
    19b0:	d11a      	bne.n	19e8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    19b2:	2300      	movs	r3, #0
    19b4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19b6:	2302      	movs	r3, #2
    19b8:	60bb      	str	r3, [r7, #8]
    19ba:	e005      	b.n	19c8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	3301      	adds	r3, #1
    19c0:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    19c2:	68bb      	ldr	r3, [r7, #8]
    19c4:	005b      	lsls	r3, r3, #1
    19c6:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    19c8:	683b      	ldr	r3, [r7, #0]
    19ca:	685a      	ldr	r2, [r3, #4]
    19cc:	68bb      	ldr	r3, [r7, #8]
    19ce:	429a      	cmp	r2, r3
    19d0:	d8f4      	bhi.n	19bc <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	021b      	lsls	r3, r3, #8
    19d6:	693a      	ldr	r2, [r7, #16]
    19d8:	4313      	orrs	r3, r2
    19da:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    19dc:	697b      	ldr	r3, [r7, #20]
    19de:	2280      	movs	r2, #128	; 0x80
    19e0:	0352      	lsls	r2, r2, #13
    19e2:	4313      	orrs	r3, r2
    19e4:	617b      	str	r3, [r7, #20]
    19e6:	e00a      	b.n	19fe <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    19e8:	683b      	ldr	r3, [r7, #0]
    19ea:	685b      	ldr	r3, [r3, #4]
    19ec:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    19ee:	693a      	ldr	r2, [r7, #16]
    19f0:	4313      	orrs	r3, r2
    19f2:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    19f4:	697b      	ldr	r3, [r7, #20]
    19f6:	2280      	movs	r2, #128	; 0x80
    19f8:	0292      	lsls	r2, r2, #10
    19fa:	4313      	orrs	r3, r2
    19fc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    19fe:	683b      	ldr	r3, [r7, #0]
    1a00:	7a1b      	ldrb	r3, [r3, #8]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d004      	beq.n	1a10 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a06:	697b      	ldr	r3, [r7, #20]
    1a08:	2280      	movs	r2, #128	; 0x80
    1a0a:	0392      	lsls	r2, r2, #14
    1a0c:	4313      	orrs	r3, r2
    1a0e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1a10:	46c0      	nop			; (mov r8, r8)
    1a12:	4b12      	ldr	r3, [pc, #72]	; (1a5c <system_gclk_gen_set_config+0x10c>)
    1a14:	4798      	blx	r3
    1a16:	1e03      	subs	r3, r0, #0
    1a18:	d1fb      	bne.n	1a12 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1a1a:	4b11      	ldr	r3, [pc, #68]	; (1a60 <system_gclk_gen_set_config+0x110>)
    1a1c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a1e:	4a11      	ldr	r2, [pc, #68]	; (1a64 <system_gclk_gen_set_config+0x114>)
    1a20:	1dfb      	adds	r3, r7, #7
    1a22:	781b      	ldrb	r3, [r3, #0]
    1a24:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	4b0c      	ldr	r3, [pc, #48]	; (1a5c <system_gclk_gen_set_config+0x10c>)
    1a2a:	4798      	blx	r3
    1a2c:	1e03      	subs	r3, r0, #0
    1a2e:	d1fb      	bne.n	1a28 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a30:	4b0d      	ldr	r3, [pc, #52]	; (1a68 <system_gclk_gen_set_config+0x118>)
    1a32:	693a      	ldr	r2, [r7, #16]
    1a34:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <system_gclk_gen_set_config+0x10c>)
    1a3a:	4798      	blx	r3
    1a3c:	1e03      	subs	r3, r0, #0
    1a3e:	d1fb      	bne.n	1a38 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a40:	4b09      	ldr	r3, [pc, #36]	; (1a68 <system_gclk_gen_set_config+0x118>)
    1a42:	4a09      	ldr	r2, [pc, #36]	; (1a68 <system_gclk_gen_set_config+0x118>)
    1a44:	6851      	ldr	r1, [r2, #4]
    1a46:	2280      	movs	r2, #128	; 0x80
    1a48:	0252      	lsls	r2, r2, #9
    1a4a:	4011      	ands	r1, r2
    1a4c:	697a      	ldr	r2, [r7, #20]
    1a4e:	430a      	orrs	r2, r1
    1a50:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1a52:	4b06      	ldr	r3, [pc, #24]	; (1a6c <system_gclk_gen_set_config+0x11c>)
    1a54:	4798      	blx	r3
}
    1a56:	46bd      	mov	sp, r7
    1a58:	b006      	add	sp, #24
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	000018fd 	.word	0x000018fd
    1a60:	000018dd 	.word	0x000018dd
    1a64:	40000c08 	.word	0x40000c08
    1a68:	40000c00 	.word	0x40000c00
    1a6c:	000018ed 	.word	0x000018ed

00001a70 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1a70:	b580      	push	{r7, lr}
    1a72:	b082      	sub	sp, #8
    1a74:	af00      	add	r7, sp, #0
    1a76:	1c02      	adds	r2, r0, #0
    1a78:	1dfb      	adds	r3, r7, #7
    1a7a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1a7c:	46c0      	nop			; (mov r8, r8)
    1a7e:	4b0d      	ldr	r3, [pc, #52]	; (1ab4 <system_gclk_gen_enable+0x44>)
    1a80:	4798      	blx	r3
    1a82:	1e03      	subs	r3, r0, #0
    1a84:	d1fb      	bne.n	1a7e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1a86:	4b0c      	ldr	r3, [pc, #48]	; (1ab8 <system_gclk_gen_enable+0x48>)
    1a88:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a8a:	4a0c      	ldr	r2, [pc, #48]	; (1abc <system_gclk_gen_enable+0x4c>)
    1a8c:	1dfb      	adds	r3, r7, #7
    1a8e:	781b      	ldrb	r3, [r3, #0]
    1a90:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	4b07      	ldr	r3, [pc, #28]	; (1ab4 <system_gclk_gen_enable+0x44>)
    1a96:	4798      	blx	r3
    1a98:	1e03      	subs	r3, r0, #0
    1a9a:	d1fb      	bne.n	1a94 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1a9c:	4b08      	ldr	r3, [pc, #32]	; (1ac0 <system_gclk_gen_enable+0x50>)
    1a9e:	4a08      	ldr	r2, [pc, #32]	; (1ac0 <system_gclk_gen_enable+0x50>)
    1aa0:	6852      	ldr	r2, [r2, #4]
    1aa2:	2180      	movs	r1, #128	; 0x80
    1aa4:	0249      	lsls	r1, r1, #9
    1aa6:	430a      	orrs	r2, r1
    1aa8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1aaa:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <system_gclk_gen_enable+0x54>)
    1aac:	4798      	blx	r3
}
    1aae:	46bd      	mov	sp, r7
    1ab0:	b002      	add	sp, #8
    1ab2:	bd80      	pop	{r7, pc}
    1ab4:	000018fd 	.word	0x000018fd
    1ab8:	000018dd 	.word	0x000018dd
    1abc:	40000c04 	.word	0x40000c04
    1ac0:	40000c00 	.word	0x40000c00
    1ac4:	000018ed 	.word	0x000018ed

00001ac8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b086      	sub	sp, #24
    1acc:	af00      	add	r7, sp, #0
    1ace:	1c02      	adds	r2, r0, #0
    1ad0:	1dfb      	adds	r3, r7, #7
    1ad2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	4b2e      	ldr	r3, [pc, #184]	; (1b90 <system_gclk_gen_get_hz+0xc8>)
    1ad8:	4798      	blx	r3
    1ada:	1e03      	subs	r3, r0, #0
    1adc:	d1fb      	bne.n	1ad6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1ade:	4b2d      	ldr	r3, [pc, #180]	; (1b94 <system_gclk_gen_get_hz+0xcc>)
    1ae0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ae2:	4a2d      	ldr	r2, [pc, #180]	; (1b98 <system_gclk_gen_get_hz+0xd0>)
    1ae4:	1dfb      	adds	r3, r7, #7
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	4b28      	ldr	r3, [pc, #160]	; (1b90 <system_gclk_gen_get_hz+0xc8>)
    1aee:	4798      	blx	r3
    1af0:	1e03      	subs	r3, r0, #0
    1af2:	d1fb      	bne.n	1aec <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1af4:	4b29      	ldr	r3, [pc, #164]	; (1b9c <system_gclk_gen_get_hz+0xd4>)
    1af6:	685b      	ldr	r3, [r3, #4]
    1af8:	0a1b      	lsrs	r3, r3, #8
    1afa:	1c1a      	adds	r2, r3, #0
    1afc:	231f      	movs	r3, #31
    1afe:	4013      	ands	r3, r2
    1b00:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b02:	1c18      	adds	r0, r3, #0
    1b04:	4b26      	ldr	r3, [pc, #152]	; (1ba0 <system_gclk_gen_get_hz+0xd8>)
    1b06:	4798      	blx	r3
    1b08:	1c03      	adds	r3, r0, #0
    1b0a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b0c:	4a22      	ldr	r2, [pc, #136]	; (1b98 <system_gclk_gen_get_hz+0xd0>)
    1b0e:	1dfb      	adds	r3, r7, #7
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b14:	4b21      	ldr	r3, [pc, #132]	; (1b9c <system_gclk_gen_get_hz+0xd4>)
    1b16:	685b      	ldr	r3, [r3, #4]
    1b18:	0d1b      	lsrs	r3, r3, #20
    1b1a:	1c1a      	adds	r2, r3, #0
    1b1c:	2301      	movs	r3, #1
    1b1e:	4013      	ands	r3, r2
    1b20:	b2da      	uxtb	r2, r3
    1b22:	2313      	movs	r3, #19
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b28:	4a1e      	ldr	r2, [pc, #120]	; (1ba4 <system_gclk_gen_get_hz+0xdc>)
    1b2a:	1dfb      	adds	r3, r7, #7
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1b30:	46c0      	nop			; (mov r8, r8)
    1b32:	4b17      	ldr	r3, [pc, #92]	; (1b90 <system_gclk_gen_get_hz+0xc8>)
    1b34:	4798      	blx	r3
    1b36:	1e03      	subs	r3, r0, #0
    1b38:	d1fb      	bne.n	1b32 <system_gclk_gen_get_hz+0x6a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b3a:	4b18      	ldr	r3, [pc, #96]	; (1b9c <system_gclk_gen_get_hz+0xd4>)
    1b3c:	689b      	ldr	r3, [r3, #8]
    1b3e:	0a1b      	lsrs	r3, r3, #8
    1b40:	1c1a      	adds	r2, r3, #0
    1b42:	2300      	movs	r3, #0
    1b44:	439a      	bics	r2, r3
    1b46:	1c13      	adds	r3, r2, #0
    1b48:	b29b      	uxth	r3, r3
    1b4a:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1b4c:	4b16      	ldr	r3, [pc, #88]	; (1ba8 <system_gclk_gen_get_hz+0xe0>)
    1b4e:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b50:	2313      	movs	r3, #19
    1b52:	18fb      	adds	r3, r7, r3
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	2b00      	cmp	r3, #0
    1b58:	d109      	bne.n	1b6e <system_gclk_gen_get_hz+0xa6>
    1b5a:	68fb      	ldr	r3, [r7, #12]
    1b5c:	2b01      	cmp	r3, #1
    1b5e:	d906      	bls.n	1b6e <system_gclk_gen_get_hz+0xa6>
		gen_input_hz /= divider;
    1b60:	4b12      	ldr	r3, [pc, #72]	; (1bac <system_gclk_gen_get_hz+0xe4>)
    1b62:	6978      	ldr	r0, [r7, #20]
    1b64:	68f9      	ldr	r1, [r7, #12]
    1b66:	4798      	blx	r3
    1b68:	1c03      	adds	r3, r0, #0
    1b6a:	617b      	str	r3, [r7, #20]
    1b6c:	e00a      	b.n	1b84 <system_gclk_gen_get_hz+0xbc>
	} else if (divsel) {
    1b6e:	2313      	movs	r3, #19
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d005      	beq.n	1b84 <system_gclk_gen_get_hz+0xbc>
		gen_input_hz >>= (divider+1);
    1b78:	68fb      	ldr	r3, [r7, #12]
    1b7a:	3301      	adds	r3, #1
    1b7c:	1c1a      	adds	r2, r3, #0
    1b7e:	697b      	ldr	r3, [r7, #20]
    1b80:	40d3      	lsrs	r3, r2
    1b82:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1b84:	697b      	ldr	r3, [r7, #20]
}
    1b86:	1c18      	adds	r0, r3, #0
    1b88:	46bd      	mov	sp, r7
    1b8a:	b006      	add	sp, #24
    1b8c:	bd80      	pop	{r7, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	000018fd 	.word	0x000018fd
    1b94:	000018dd 	.word	0x000018dd
    1b98:	40000c04 	.word	0x40000c04
    1b9c:	40000c00 	.word	0x40000c00
    1ba0:	00001599 	.word	0x00001599
    1ba4:	40000c08 	.word	0x40000c08
    1ba8:	000018ed 	.word	0x000018ed
    1bac:	000023cd 	.word	0x000023cd

00001bb0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	b084      	sub	sp, #16
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	1c02      	adds	r2, r0, #0
    1bb8:	6039      	str	r1, [r7, #0]
    1bba:	1dfb      	adds	r3, r7, #7
    1bbc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1bbe:	1dfb      	adds	r3, r7, #7
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1bc4:	683b      	ldr	r3, [r7, #0]
    1bc6:	781b      	ldrb	r3, [r3, #0]
    1bc8:	021b      	lsls	r3, r3, #8
    1bca:	1c1a      	adds	r2, r3, #0
    1bcc:	68fb      	ldr	r3, [r7, #12]
    1bce:	4313      	orrs	r3, r2
    1bd0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1bd2:	1dfb      	adds	r3, r7, #7
    1bd4:	781b      	ldrb	r3, [r3, #0]
    1bd6:	1c18      	adds	r0, r3, #0
    1bd8:	4b04      	ldr	r3, [pc, #16]	; (1bec <system_gclk_chan_set_config+0x3c>)
    1bda:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1bdc:	4b04      	ldr	r3, [pc, #16]	; (1bf0 <system_gclk_chan_set_config+0x40>)
    1bde:	68fa      	ldr	r2, [r7, #12]
    1be0:	b292      	uxth	r2, r2
    1be2:	805a      	strh	r2, [r3, #2]
}
    1be4:	46bd      	mov	sp, r7
    1be6:	b004      	add	sp, #16
    1be8:	bd80      	pop	{r7, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	00001c39 	.word	0x00001c39
    1bf0:	40000c00 	.word	0x40000c00

00001bf4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bf4:	b580      	push	{r7, lr}
    1bf6:	b082      	sub	sp, #8
    1bf8:	af00      	add	r7, sp, #0
    1bfa:	1c02      	adds	r2, r0, #0
    1bfc:	1dfb      	adds	r3, r7, #7
    1bfe:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1c00:	4b09      	ldr	r3, [pc, #36]	; (1c28 <system_gclk_chan_enable+0x34>)
    1c02:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c04:	4a09      	ldr	r2, [pc, #36]	; (1c2c <system_gclk_chan_enable+0x38>)
    1c06:	1dfb      	adds	r3, r7, #7
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c0c:	4908      	ldr	r1, [pc, #32]	; (1c30 <system_gclk_chan_enable+0x3c>)
    1c0e:	4b08      	ldr	r3, [pc, #32]	; (1c30 <system_gclk_chan_enable+0x3c>)
    1c10:	885b      	ldrh	r3, [r3, #2]
    1c12:	b29b      	uxth	r3, r3
    1c14:	2280      	movs	r2, #128	; 0x80
    1c16:	01d2      	lsls	r2, r2, #7
    1c18:	4313      	orrs	r3, r2
    1c1a:	b29b      	uxth	r3, r3
    1c1c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1c1e:	4b05      	ldr	r3, [pc, #20]	; (1c34 <system_gclk_chan_enable+0x40>)
    1c20:	4798      	blx	r3
}
    1c22:	46bd      	mov	sp, r7
    1c24:	b002      	add	sp, #8
    1c26:	bd80      	pop	{r7, pc}
    1c28:	000018dd 	.word	0x000018dd
    1c2c:	40000c02 	.word	0x40000c02
    1c30:	40000c00 	.word	0x40000c00
    1c34:	000018ed 	.word	0x000018ed

00001c38 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c38:	b580      	push	{r7, lr}
    1c3a:	b084      	sub	sp, #16
    1c3c:	af00      	add	r7, sp, #0
    1c3e:	1c02      	adds	r2, r0, #0
    1c40:	1dfb      	adds	r3, r7, #7
    1c42:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1c44:	4b1d      	ldr	r3, [pc, #116]	; (1cbc <system_gclk_chan_disable+0x84>)
    1c46:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c48:	4a1d      	ldr	r2, [pc, #116]	; (1cc0 <system_gclk_chan_disable+0x88>)
    1c4a:	1dfb      	adds	r3, r7, #7
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c50:	4b1c      	ldr	r3, [pc, #112]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c52:	885b      	ldrh	r3, [r3, #2]
    1c54:	b29b      	uxth	r3, r3
    1c56:	0a1b      	lsrs	r3, r3, #8
    1c58:	1c1a      	adds	r2, r3, #0
    1c5a:	230f      	movs	r3, #15
    1c5c:	4013      	ands	r3, r2
    1c5e:	b2db      	uxtb	r3, r3
    1c60:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    1c62:	4b18      	ldr	r3, [pc, #96]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c64:	885a      	ldrh	r2, [r3, #2]
    1c66:	4918      	ldr	r1, [pc, #96]	; (1cc8 <system_gclk_chan_disable+0x90>)
    1c68:	400a      	ands	r2, r1
    1c6a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c6c:	4a15      	ldr	r2, [pc, #84]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c6e:	4b15      	ldr	r3, [pc, #84]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c70:	885b      	ldrh	r3, [r3, #2]
    1c72:	b29b      	uxth	r3, r3
    1c74:	4915      	ldr	r1, [pc, #84]	; (1ccc <system_gclk_chan_disable+0x94>)
    1c76:	400b      	ands	r3, r1
    1c78:	b29b      	uxth	r3, r3
    1c7a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c7c:	46c0      	nop			; (mov r8, r8)
    1c7e:	4b11      	ldr	r3, [pc, #68]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c80:	885b      	ldrh	r3, [r3, #2]
    1c82:	b29b      	uxth	r3, r3
    1c84:	1c1a      	adds	r2, r3, #0
    1c86:	2380      	movs	r3, #128	; 0x80
    1c88:	01db      	lsls	r3, r3, #7
    1c8a:	4013      	ands	r3, r2
    1c8c:	d1f7      	bne.n	1c7e <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c8e:	4b0d      	ldr	r3, [pc, #52]	; (1cc4 <system_gclk_chan_disable+0x8c>)
    1c90:	68fa      	ldr	r2, [r7, #12]
    1c92:	b2d2      	uxtb	r2, r2
    1c94:	1c11      	adds	r1, r2, #0
    1c96:	220f      	movs	r2, #15
    1c98:	400a      	ands	r2, r1
    1c9a:	b2d2      	uxtb	r2, r2
    1c9c:	1c11      	adds	r1, r2, #0
    1c9e:	220f      	movs	r2, #15
    1ca0:	400a      	ands	r2, r1
    1ca2:	0210      	lsls	r0, r2, #8
    1ca4:	885a      	ldrh	r2, [r3, #2]
    1ca6:	4908      	ldr	r1, [pc, #32]	; (1cc8 <system_gclk_chan_disable+0x90>)
    1ca8:	400a      	ands	r2, r1
    1caa:	1c11      	adds	r1, r2, #0
    1cac:	1c02      	adds	r2, r0, #0
    1cae:	430a      	orrs	r2, r1
    1cb0:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <system_gclk_chan_disable+0x98>)
    1cb4:	4798      	blx	r3
}
    1cb6:	46bd      	mov	sp, r7
    1cb8:	b004      	add	sp, #16
    1cba:	bd80      	pop	{r7, pc}
    1cbc:	000018dd 	.word	0x000018dd
    1cc0:	40000c02 	.word	0x40000c02
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	fffff0ff 	.word	0xfffff0ff
    1ccc:	ffffbfff 	.word	0xffffbfff
    1cd0:	000018ed 	.word	0x000018ed

00001cd4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b084      	sub	sp, #16
    1cd8:	af00      	add	r7, sp, #0
    1cda:	1c02      	adds	r2, r0, #0
    1cdc:	1dfb      	adds	r3, r7, #7
    1cde:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    1ce0:	4b0e      	ldr	r3, [pc, #56]	; (1d1c <system_gclk_chan_get_hz+0x48>)
    1ce2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ce4:	4a0e      	ldr	r2, [pc, #56]	; (1d20 <system_gclk_chan_get_hz+0x4c>)
    1ce6:	1dfb      	adds	r3, r7, #7
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1cec:	4b0d      	ldr	r3, [pc, #52]	; (1d24 <system_gclk_chan_get_hz+0x50>)
    1cee:	885b      	ldrh	r3, [r3, #2]
    1cf0:	b29b      	uxth	r3, r3
    1cf2:	0a1b      	lsrs	r3, r3, #8
    1cf4:	1c1a      	adds	r2, r3, #0
    1cf6:	230f      	movs	r3, #15
    1cf8:	4013      	ands	r3, r2
    1cfa:	b2da      	uxtb	r2, r3
    1cfc:	230f      	movs	r3, #15
    1cfe:	18fb      	adds	r3, r7, r3
    1d00:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    1d02:	4b09      	ldr	r3, [pc, #36]	; (1d28 <system_gclk_chan_get_hz+0x54>)
    1d04:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d06:	230f      	movs	r3, #15
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	1c18      	adds	r0, r3, #0
    1d0e:	4b07      	ldr	r3, [pc, #28]	; (1d2c <system_gclk_chan_get_hz+0x58>)
    1d10:	4798      	blx	r3
    1d12:	1c03      	adds	r3, r0, #0
}
    1d14:	1c18      	adds	r0, r3, #0
    1d16:	46bd      	mov	sp, r7
    1d18:	b004      	add	sp, #16
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	000018dd 	.word	0x000018dd
    1d20:	40000c02 	.word	0x40000c02
    1d24:	40000c00 	.word	0x40000c00
    1d28:	000018ed 	.word	0x000018ed
    1d2c:	00001ac9 	.word	0x00001ac9

00001d30 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d30:	b580      	push	{r7, lr}
    1d32:	b084      	sub	sp, #16
    1d34:	af00      	add	r7, sp, #0
    1d36:	1c02      	adds	r2, r0, #0
    1d38:	1dfb      	adds	r3, r7, #7
    1d3a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d3c:	230f      	movs	r3, #15
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	1dfa      	adds	r2, r7, #7
    1d42:	7812      	ldrb	r2, [r2, #0]
    1d44:	09d2      	lsrs	r2, r2, #7
    1d46:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d48:	230e      	movs	r3, #14
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	1dfa      	adds	r2, r7, #7
    1d4e:	7812      	ldrb	r2, [r2, #0]
    1d50:	0952      	lsrs	r2, r2, #5
    1d52:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d54:	4b0d      	ldr	r3, [pc, #52]	; (1d8c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d56:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1d58:	230f      	movs	r3, #15
    1d5a:	18fb      	adds	r3, r7, r3
    1d5c:	781b      	ldrb	r3, [r3, #0]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d10f      	bne.n	1d82 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d62:	230f      	movs	r3, #15
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	009b      	lsls	r3, r3, #2
    1d6a:	2210      	movs	r2, #16
    1d6c:	4694      	mov	ip, r2
    1d6e:	44bc      	add	ip, r7
    1d70:	4463      	add	r3, ip
    1d72:	3b08      	subs	r3, #8
    1d74:	681a      	ldr	r2, [r3, #0]
    1d76:	230e      	movs	r3, #14
    1d78:	18fb      	adds	r3, r7, r3
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	01db      	lsls	r3, r3, #7
    1d7e:	18d3      	adds	r3, r2, r3
    1d80:	e000      	b.n	1d84 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1d82:	2300      	movs	r3, #0
	}
}
    1d84:	1c18      	adds	r0, r3, #0
    1d86:	46bd      	mov	sp, r7
    1d88:	b004      	add	sp, #16
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	41004400 	.word	0x41004400

00001d90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b088      	sub	sp, #32
    1d94:	af00      	add	r7, sp, #0
    1d96:	60f8      	str	r0, [r7, #12]
    1d98:	60b9      	str	r1, [r7, #8]
    1d9a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1d9c:	2300      	movs	r3, #0
    1d9e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	78db      	ldrb	r3, [r3, #3]
    1da4:	2201      	movs	r2, #1
    1da6:	4053      	eors	r3, r2
    1da8:	b2db      	uxtb	r3, r3
    1daa:	2b00      	cmp	r3, #0
    1dac:	d035      	beq.n	1e1a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	781b      	ldrb	r3, [r3, #0]
    1db2:	2b80      	cmp	r3, #128	; 0x80
    1db4:	d00b      	beq.n	1dce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    1db6:	69fb      	ldr	r3, [r7, #28]
    1db8:	2280      	movs	r2, #128	; 0x80
    1dba:	0252      	lsls	r2, r2, #9
    1dbc:	4313      	orrs	r3, r2
    1dbe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	061b      	lsls	r3, r3, #24
    1dc6:	1c1a      	adds	r2, r3, #0
    1dc8:	69fb      	ldr	r3, [r7, #28]
    1dca:	4313      	orrs	r3, r2
    1dcc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	785b      	ldrb	r3, [r3, #1]
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d003      	beq.n	1dde <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1dd6:	687b      	ldr	r3, [r7, #4]
    1dd8:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1dda:	2b02      	cmp	r3, #2
    1ddc:	d110      	bne.n	1e00 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1dde:	69fb      	ldr	r3, [r7, #28]
    1de0:	2280      	movs	r2, #128	; 0x80
    1de2:	0292      	lsls	r2, r2, #10
    1de4:	4313      	orrs	r3, r2
    1de6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	789b      	ldrb	r3, [r3, #2]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d004      	beq.n	1dfa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1df0:	69fb      	ldr	r3, [r7, #28]
    1df2:	2280      	movs	r2, #128	; 0x80
    1df4:	02d2      	lsls	r2, r2, #11
    1df6:	4313      	orrs	r3, r2
    1df8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	68ba      	ldr	r2, [r7, #8]
    1dfe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e00:	687b      	ldr	r3, [r7, #4]
    1e02:	785b      	ldrb	r3, [r3, #1]
    1e04:	2b01      	cmp	r3, #1
    1e06:	d003      	beq.n	1e10 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e0c:	2b02      	cmp	r3, #2
    1e0e:	d107      	bne.n	1e20 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1e10:	69fb      	ldr	r3, [r7, #28]
    1e12:	4a21      	ldr	r2, [pc, #132]	; (1e98 <_system_pinmux_config+0x108>)
    1e14:	4013      	ands	r3, r2
    1e16:	61fb      	str	r3, [r7, #28]
    1e18:	e002      	b.n	1e20 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1e1a:	68fb      	ldr	r3, [r7, #12]
    1e1c:	68ba      	ldr	r2, [r7, #8]
    1e1e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1e20:	68bb      	ldr	r3, [r7, #8]
    1e22:	041b      	lsls	r3, r3, #16
    1e24:	0c1b      	lsrs	r3, r3, #16
    1e26:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1e28:	68bb      	ldr	r3, [r7, #8]
    1e2a:	0c1b      	lsrs	r3, r3, #16
    1e2c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e2e:	69ba      	ldr	r2, [r7, #24]
    1e30:	69fb      	ldr	r3, [r7, #28]
    1e32:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e34:	22a0      	movs	r2, #160	; 0xa0
    1e36:	05d2      	lsls	r2, r2, #23
    1e38:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e3e:	697a      	ldr	r2, [r7, #20]
    1e40:	69fb      	ldr	r3, [r7, #28]
    1e42:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1e44:	22d0      	movs	r2, #208	; 0xd0
    1e46:	0612      	lsls	r2, r2, #24
    1e48:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	78db      	ldrb	r3, [r3, #3]
    1e52:	2201      	movs	r2, #1
    1e54:	4053      	eors	r3, r2
    1e56:	b2db      	uxtb	r3, r3
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d01a      	beq.n	1e92 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1e5c:	69fa      	ldr	r2, [r7, #28]
    1e5e:	2380      	movs	r3, #128	; 0x80
    1e60:	02db      	lsls	r3, r3, #11
    1e62:	4013      	ands	r3, r2
    1e64:	d00a      	beq.n	1e7c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	789b      	ldrb	r3, [r3, #2]
    1e6a:	2b01      	cmp	r3, #1
    1e6c:	d103      	bne.n	1e76 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    1e6e:	68fb      	ldr	r3, [r7, #12]
    1e70:	68ba      	ldr	r2, [r7, #8]
    1e72:	619a      	str	r2, [r3, #24]
    1e74:	e002      	b.n	1e7c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    1e76:	68fb      	ldr	r3, [r7, #12]
    1e78:	68ba      	ldr	r2, [r7, #8]
    1e7a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	785b      	ldrb	r3, [r3, #1]
    1e80:	2b01      	cmp	r3, #1
    1e82:	d003      	beq.n	1e8c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e88:	2b02      	cmp	r3, #2
    1e8a:	d102      	bne.n	1e92 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1e8c:	68fb      	ldr	r3, [r7, #12]
    1e8e:	68ba      	ldr	r2, [r7, #8]
    1e90:	609a      	str	r2, [r3, #8]
		}
	}
}
    1e92:	46bd      	mov	sp, r7
    1e94:	b008      	add	sp, #32
    1e96:	bd80      	pop	{r7, pc}
    1e98:	fffbffff 	.word	0xfffbffff

00001e9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b084      	sub	sp, #16
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	1c02      	adds	r2, r0, #0
    1ea4:	6039      	str	r1, [r7, #0]
    1ea6:	1dfb      	adds	r3, r7, #7
    1ea8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1eaa:	1dfb      	adds	r3, r7, #7
    1eac:	781b      	ldrb	r3, [r3, #0]
    1eae:	1c18      	adds	r0, r3, #0
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <system_pinmux_pin_set_config+0x44>)
    1eb2:	4798      	blx	r3
    1eb4:	1c03      	adds	r3, r0, #0
    1eb6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1eb8:	1dfb      	adds	r3, r7, #7
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	221f      	movs	r2, #31
    1ebe:	4013      	ands	r3, r2
    1ec0:	2201      	movs	r2, #1
    1ec2:	409a      	lsls	r2, r3
    1ec4:	1c13      	adds	r3, r2, #0
    1ec6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    1ec8:	68f9      	ldr	r1, [r7, #12]
    1eca:	68ba      	ldr	r2, [r7, #8]
    1ecc:	683b      	ldr	r3, [r7, #0]
    1ece:	1c08      	adds	r0, r1, #0
    1ed0:	1c11      	adds	r1, r2, #0
    1ed2:	1c1a      	adds	r2, r3, #0
    1ed4:	4b03      	ldr	r3, [pc, #12]	; (1ee4 <system_pinmux_pin_set_config+0x48>)
    1ed6:	4798      	blx	r3
}
    1ed8:	46bd      	mov	sp, r7
    1eda:	b004      	add	sp, #16
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00001d31 	.word	0x00001d31
    1ee4:	00001d91 	.word	0x00001d91

00001ee8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	af00      	add	r7, sp, #0
	return;
    1eec:	46c0      	nop			; (mov r8, r8)
}
    1eee:	46bd      	mov	sp, r7
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	46c0      	nop			; (mov r8, r8)

00001ef4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ef4:	b580      	push	{r7, lr}
    1ef6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ef8:	4b04      	ldr	r3, [pc, #16]	; (1f0c <system_init+0x18>)
    1efa:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <system_init+0x1c>)
    1efe:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f00:	4b04      	ldr	r3, [pc, #16]	; (1f14 <system_init+0x20>)
    1f02:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f04:	4b04      	ldr	r3, [pc, #16]	; (1f18 <system_init+0x24>)
    1f06:	4798      	blx	r3
}
    1f08:	46bd      	mov	sp, r7
    1f0a:	bd80      	pop	{r7, pc}
    1f0c:	000017b5 	.word	0x000017b5
    1f10:	000002ed 	.word	0x000002ed
    1f14:	00001ee9 	.word	0x00001ee9
    1f18:	00001ee9 	.word	0x00001ee9

00001f1c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b082      	sub	sp, #8
    1f20:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f22:	4a2e      	ldr	r2, [pc, #184]	; (1fdc <Reset_Handler+0xc0>)
    1f24:	2390      	movs	r3, #144	; 0x90
    1f26:	005b      	lsls	r3, r3, #1
    1f28:	2102      	movs	r1, #2
    1f2a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f2c:	4b2c      	ldr	r3, [pc, #176]	; (1fe0 <Reset_Handler+0xc4>)
    1f2e:	78da      	ldrb	r2, [r3, #3]
    1f30:	2103      	movs	r1, #3
    1f32:	438a      	bics	r2, r1
    1f34:	1c11      	adds	r1, r2, #0
    1f36:	2202      	movs	r2, #2
    1f38:	430a      	orrs	r2, r1
    1f3a:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f3c:	4b28      	ldr	r3, [pc, #160]	; (1fe0 <Reset_Handler+0xc4>)
    1f3e:	78da      	ldrb	r2, [r3, #3]
    1f40:	210c      	movs	r1, #12
    1f42:	438a      	bics	r2, r1
    1f44:	1c11      	adds	r1, r2, #0
    1f46:	2208      	movs	r2, #8
    1f48:	430a      	orrs	r2, r1
    1f4a:	70da      	strb	r2, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f4c:	4b25      	ldr	r3, [pc, #148]	; (1fe4 <Reset_Handler+0xc8>)
    1f4e:	7b9a      	ldrb	r2, [r3, #14]
    1f50:	2130      	movs	r1, #48	; 0x30
    1f52:	438a      	bics	r2, r1
    1f54:	1c11      	adds	r1, r2, #0
    1f56:	2220      	movs	r2, #32
    1f58:	430a      	orrs	r2, r1
    1f5a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f5c:	4b21      	ldr	r3, [pc, #132]	; (1fe4 <Reset_Handler+0xc8>)
    1f5e:	7b9a      	ldrb	r2, [r3, #14]
    1f60:	210c      	movs	r1, #12
    1f62:	438a      	bics	r2, r1
    1f64:	1c11      	adds	r1, r2, #0
    1f66:	2208      	movs	r2, #8
    1f68:	430a      	orrs	r2, r1
    1f6a:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f6c:	4b1d      	ldr	r3, [pc, #116]	; (1fe4 <Reset_Handler+0xc8>)
    1f6e:	7b9a      	ldrb	r2, [r3, #14]
    1f70:	2103      	movs	r1, #3
    1f72:	438a      	bics	r2, r1
    1f74:	1c11      	adds	r1, r2, #0
    1f76:	2202      	movs	r2, #2
    1f78:	430a      	orrs	r2, r1
    1f7a:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
    1f7c:	4b1a      	ldr	r3, [pc, #104]	; (1fe8 <Reset_Handler+0xcc>)
    1f7e:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    1f80:	4b1a      	ldr	r3, [pc, #104]	; (1fec <Reset_Handler+0xd0>)
    1f82:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    1f84:	687a      	ldr	r2, [r7, #4]
    1f86:	683b      	ldr	r3, [r7, #0]
    1f88:	429a      	cmp	r2, r3
    1f8a:	d00c      	beq.n	1fa6 <Reset_Handler+0x8a>
                for (; pDest < &_erelocate;) {
    1f8c:	e007      	b.n	1f9e <Reset_Handler+0x82>
                        *pDest++ = *pSrc++;
    1f8e:	683b      	ldr	r3, [r7, #0]
    1f90:	1d1a      	adds	r2, r3, #4
    1f92:	603a      	str	r2, [r7, #0]
    1f94:	687a      	ldr	r2, [r7, #4]
    1f96:	1d11      	adds	r1, r2, #4
    1f98:	6079      	str	r1, [r7, #4]
    1f9a:	6812      	ldr	r2, [r2, #0]
    1f9c:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1f9e:	683a      	ldr	r2, [r7, #0]
    1fa0:	4b13      	ldr	r3, [pc, #76]	; (1ff0 <Reset_Handler+0xd4>)
    1fa2:	429a      	cmp	r2, r3
    1fa4:	d3f3      	bcc.n	1f8e <Reset_Handler+0x72>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fa6:	4b13      	ldr	r3, [pc, #76]	; (1ff4 <Reset_Handler+0xd8>)
    1fa8:	603b      	str	r3, [r7, #0]
    1faa:	e004      	b.n	1fb6 <Reset_Handler+0x9a>
                *pDest++ = 0;
    1fac:	683b      	ldr	r3, [r7, #0]
    1fae:	1d1a      	adds	r2, r3, #4
    1fb0:	603a      	str	r2, [r7, #0]
    1fb2:	2200      	movs	r2, #0
    1fb4:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fb6:	683a      	ldr	r2, [r7, #0]
    1fb8:	4b0f      	ldr	r3, [pc, #60]	; (1ff8 <Reset_Handler+0xdc>)
    1fba:	429a      	cmp	r2, r3
    1fbc:	d3f6      	bcc.n	1fac <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    1fbe:	4b0f      	ldr	r3, [pc, #60]	; (1ffc <Reset_Handler+0xe0>)
    1fc0:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fc2:	4b0f      	ldr	r3, [pc, #60]	; (2000 <STACK_SIZE>)
    1fc4:	687a      	ldr	r2, [r7, #4]
    1fc6:	217f      	movs	r1, #127	; 0x7f
    1fc8:	438a      	bics	r2, r1
    1fca:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1fcc:	4b0d      	ldr	r3, [pc, #52]	; (2004 <STACK_SIZE+0x4>)
    1fce:	4798      	blx	r3

        /* Branch to main function */
        main();
    1fd0:	4b0d      	ldr	r3, [pc, #52]	; (2008 <STACK_SIZE+0x8>)
    1fd2:	4798      	blx	r3

        /* Infinite loop */
        //while (1);
}
    1fd4:	46bd      	mov	sp, r7
    1fd6:	b002      	add	sp, #8
    1fd8:	bd80      	pop	{r7, pc}
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	41007000 	.word	0x41007000
    1fe0:	41005000 	.word	0x41005000
    1fe4:	41004800 	.word	0x41004800
    1fe8:	000025cc 	.word	0x000025cc
    1fec:	20000000 	.word	0x20000000
    1ff0:	20000014 	.word	0x20000014
    1ff4:	20000014 	.word	0x20000014
    1ff8:	20000064 	.word	0x20000064
    1ffc:	00000000 	.word	0x00000000
    2000:	e000ed00 	.word	0xe000ed00
    2004:	000024f1 	.word	0x000024f1
    2008:	00002315 	.word	0x00002315

0000200c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    200c:	b580      	push	{r7, lr}
    200e:	af00      	add	r7, sp, #0
        //while (1) {
        //}
}
    2010:	46bd      	mov	sp, r7
    2012:	bd80      	pop	{r7, pc}

00002014 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2014:	b580      	push	{r7, lr}
    2016:	b084      	sub	sp, #16
    2018:	af00      	add	r7, sp, #0
    201a:	1c02      	adds	r2, r0, #0
    201c:	1dfb      	adds	r3, r7, #7
    201e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2020:	230f      	movs	r3, #15
    2022:	18fb      	adds	r3, r7, r3
    2024:	1dfa      	adds	r2, r7, #7
    2026:	7812      	ldrb	r2, [r2, #0]
    2028:	09d2      	lsrs	r2, r2, #7
    202a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    202c:	230e      	movs	r3, #14
    202e:	18fb      	adds	r3, r7, r3
    2030:	1dfa      	adds	r2, r7, #7
    2032:	7812      	ldrb	r2, [r2, #0]
    2034:	0952      	lsrs	r2, r2, #5
    2036:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2038:	4b0d      	ldr	r3, [pc, #52]	; (2070 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    203a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    203c:	230f      	movs	r3, #15
    203e:	18fb      	adds	r3, r7, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	2b00      	cmp	r3, #0
    2044:	d10f      	bne.n	2066 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2046:	230f      	movs	r3, #15
    2048:	18fb      	adds	r3, r7, r3
    204a:	781b      	ldrb	r3, [r3, #0]
    204c:	009b      	lsls	r3, r3, #2
    204e:	2210      	movs	r2, #16
    2050:	4694      	mov	ip, r2
    2052:	44bc      	add	ip, r7
    2054:	4463      	add	r3, ip
    2056:	3b08      	subs	r3, #8
    2058:	681a      	ldr	r2, [r3, #0]
    205a:	230e      	movs	r3, #14
    205c:	18fb      	adds	r3, r7, r3
    205e:	781b      	ldrb	r3, [r3, #0]
    2060:	01db      	lsls	r3, r3, #7
    2062:	18d3      	adds	r3, r2, r3
    2064:	e000      	b.n	2068 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2066:	2300      	movs	r3, #0
	}
}
    2068:	1c18      	adds	r0, r3, #0
    206a:	46bd      	mov	sp, r7
    206c:	b004      	add	sp, #16
    206e:	bd80      	pop	{r7, pc}
    2070:	41004400 	.word	0x41004400

00002074 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2074:	b580      	push	{r7, lr}
    2076:	b082      	sub	sp, #8
    2078:	af00      	add	r7, sp, #0
    207a:	1c02      	adds	r2, r0, #0
    207c:	1dfb      	adds	r3, r7, #7
    207e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2080:	1dfb      	adds	r3, r7, #7
    2082:	781b      	ldrb	r3, [r3, #0]
    2084:	1c18      	adds	r0, r3, #0
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <port_get_group_from_gpio_pin+0x20>)
    2088:	4798      	blx	r3
    208a:	1c03      	adds	r3, r0, #0
}
    208c:	1c18      	adds	r0, r3, #0
    208e:	46bd      	mov	sp, r7
    2090:	b002      	add	sp, #8
    2092:	bd80      	pop	{r7, pc}
    2094:	00002015 	.word	0x00002015

00002098 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    20a0:	687b      	ldr	r3, [r7, #4]
    20a2:	2200      	movs	r2, #0
    20a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	2201      	movs	r2, #1
    20aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    20ac:	687b      	ldr	r3, [r7, #4]
    20ae:	2200      	movs	r2, #0
    20b0:	709a      	strb	r2, [r3, #2]
}
    20b2:	46bd      	mov	sp, r7
    20b4:	b002      	add	sp, #8
    20b6:	bd80      	pop	{r7, pc}

000020b8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    20b8:	b580      	push	{r7, lr}
    20ba:	b084      	sub	sp, #16
    20bc:	af00      	add	r7, sp, #0
    20be:	1c02      	adds	r2, r0, #0
    20c0:	1dfb      	adds	r3, r7, #7
    20c2:	701a      	strb	r2, [r3, #0]
    20c4:	1dbb      	adds	r3, r7, #6
    20c6:	1c0a      	adds	r2, r1, #0
    20c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20ca:	1dfb      	adds	r3, r7, #7
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	1c18      	adds	r0, r3, #0
    20d0:	4b0c      	ldr	r3, [pc, #48]	; (2104 <port_pin_set_output_level+0x4c>)
    20d2:	4798      	blx	r3
    20d4:	1c03      	adds	r3, r0, #0
    20d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20d8:	1dfb      	adds	r3, r7, #7
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	221f      	movs	r2, #31
    20de:	4013      	ands	r3, r2
    20e0:	2201      	movs	r2, #1
    20e2:	409a      	lsls	r2, r3
    20e4:	1c13      	adds	r3, r2, #0
    20e6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    20e8:	1dbb      	adds	r3, r7, #6
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d003      	beq.n	20f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    20f0:	68fb      	ldr	r3, [r7, #12]
    20f2:	68ba      	ldr	r2, [r7, #8]
    20f4:	619a      	str	r2, [r3, #24]
    20f6:	e002      	b.n	20fe <port_pin_set_output_level+0x46>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    20f8:	68fb      	ldr	r3, [r7, #12]
    20fa:	68ba      	ldr	r2, [r7, #8]
    20fc:	615a      	str	r2, [r3, #20]
	}
}
    20fe:	46bd      	mov	sp, r7
    2100:	b004      	add	sp, #16
    2102:	bd80      	pop	{r7, pc}
    2104:	00002075 	.word	0x00002075

00002108 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2108:	b580      	push	{r7, lr}
    210a:	b084      	sub	sp, #16
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	681b      	ldr	r3, [r3, #0]
    2114:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2116:	68fb      	ldr	r3, [r7, #12]
    2118:	69db      	ldr	r3, [r3, #28]
    211a:	1e5a      	subs	r2, r3, #1
    211c:	4193      	sbcs	r3, r2
    211e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2120:	1c18      	adds	r0, r3, #0
    2122:	46bd      	mov	sp, r7
    2124:	b004      	add	sp, #16
    2126:	bd80      	pop	{r7, pc}

00002128 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2128:	b580      	push	{r7, lr}
    212a:	b082      	sub	sp, #8
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	2201      	movs	r2, #1
    2134:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	2200      	movs	r2, #0
    213a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	2200      	movs	r2, #0
    2140:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	22c0      	movs	r2, #192	; 0xc0
    2146:	0392      	lsls	r2, r2, #14
    2148:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	2200      	movs	r2, #0
    214e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2150:	687b      	ldr	r3, [r7, #4]
    2152:	2200      	movs	r2, #0
    2154:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	2201      	movs	r2, #1
    215a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	2201      	movs	r2, #1
    2160:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	2200      	movs	r2, #0
    2166:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	2224      	movs	r2, #36	; 0x24
    216c:	2100      	movs	r1, #0
    216e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	3318      	adds	r3, #24
    2174:	1c18      	adds	r0, r3, #0
    2176:	2100      	movs	r1, #0
    2178:	220c      	movs	r2, #12
    217a:	4b0a      	ldr	r3, [pc, #40]	; (21a4 <spi_get_config_defaults+0x7c>)
    217c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    217e:	687b      	ldr	r3, [r7, #4]
    2180:	4a09      	ldr	r2, [pc, #36]	; (21a8 <spi_get_config_defaults+0x80>)
    2182:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	2200      	movs	r2, #0
    2188:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    218a:	687b      	ldr	r3, [r7, #4]
    218c:	2200      	movs	r2, #0
    218e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2200      	movs	r2, #0
    2194:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	635a      	str	r2, [r3, #52]	; 0x34

};
    219c:	46bd      	mov	sp, r7
    219e:	b002      	add	sp, #8
    21a0:	bd80      	pop	{r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	0000253d 	.word	0x0000253d
    21a8:	000186a0 	.word	0x000186a0

000021ac <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    21ac:	b580      	push	{r7, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	af00      	add	r7, sp, #0
    21b2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    21b4:	687b      	ldr	r3, [r7, #4]
    21b6:	220a      	movs	r2, #10
    21b8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    21ba:	687b      	ldr	r3, [r7, #4]
    21bc:	2200      	movs	r2, #0
    21be:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	2200      	movs	r2, #0
    21c4:	709a      	strb	r2, [r3, #2]
}
    21c6:	46bd      	mov	sp, r7
    21c8:	b002      	add	sp, #8
    21ca:	bd80      	pop	{r7, pc}

000021cc <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b084      	sub	sp, #16
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
    21d4:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    21d6:	683b      	ldr	r3, [r7, #0]
    21d8:	781a      	ldrb	r2, [r3, #0]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    21de:	683b      	ldr	r3, [r7, #0]
    21e0:	785a      	ldrb	r2, [r3, #1]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    21e6:	683b      	ldr	r3, [r7, #0]
    21e8:	789a      	ldrb	r2, [r3, #2]
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    21ee:	230c      	movs	r3, #12
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	1c18      	adds	r0, r3, #0
    21f4:	4b0b      	ldr	r3, [pc, #44]	; (2224 <spi_attach_slave+0x58>)
    21f6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    21f8:	230c      	movs	r3, #12
    21fa:	18fb      	adds	r3, r7, r3
    21fc:	2201      	movs	r2, #1
    21fe:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2200:	687b      	ldr	r3, [r7, #4]
    2202:	781a      	ldrb	r2, [r3, #0]
    2204:	230c      	movs	r3, #12
    2206:	18fb      	adds	r3, r7, r3
    2208:	1c10      	adds	r0, r2, #0
    220a:	1c19      	adds	r1, r3, #0
    220c:	4b06      	ldr	r3, [pc, #24]	; (2228 <spi_attach_slave+0x5c>)
    220e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	781b      	ldrb	r3, [r3, #0]
    2214:	1c18      	adds	r0, r3, #0
    2216:	2101      	movs	r1, #1
    2218:	4b04      	ldr	r3, [pc, #16]	; (222c <spi_attach_slave+0x60>)
    221a:	4798      	blx	r3
}
    221c:	46bd      	mov	sp, r7
    221e:	b004      	add	sp, #16
    2220:	bd80      	pop	{r7, pc}
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	00002099 	.word	0x00002099
    2228:	00000365 	.word	0x00000365
    222c:	000020b9 	.word	0x000020b9

00002230 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2230:	b580      	push	{r7, lr}
    2232:	b084      	sub	sp, #16
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2238:	687b      	ldr	r3, [r7, #4]
    223a:	681b      	ldr	r3, [r3, #0]
    223c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	687b      	ldr	r3, [r7, #4]
    2242:	1c18      	adds	r0, r3, #0
    2244:	4b06      	ldr	r3, [pc, #24]	; (2260 <spi_enable+0x30>)
    2246:	4798      	blx	r3
    2248:	1e03      	subs	r3, r0, #0
    224a:	d1f9      	bne.n	2240 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    224c:	68fb      	ldr	r3, [r7, #12]
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	2202      	movs	r2, #2
    2252:	431a      	orrs	r2, r3
    2254:	68fb      	ldr	r3, [r7, #12]
    2256:	601a      	str	r2, [r3, #0]
}
    2258:	46bd      	mov	sp, r7
    225a:	b004      	add	sp, #16
    225c:	bd80      	pop	{r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	00002109 	.word	0x00002109

00002264 <configure_spi_master>:

void configure_spi_master(void);

//! [configure_spi]
void configure_spi_master(void)
{
    2264:	b590      	push	{r4, r7, lr}
    2266:	b091      	sub	sp, #68	; 0x44
    2268:	af00      	add	r7, sp, #0
//! [slave_config]
	struct spi_slave_inst_config slave_dev_config;
//! [slave_config]
	/* Configure and initialize software device instance of peripheral slave */
//! [slave_conf_defaults]
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    226a:	1c3b      	adds	r3, r7, #0
    226c:	1c18      	adds	r0, r3, #0
    226e:	4b1c      	ldr	r3, [pc, #112]	; (22e0 <configure_spi_master+0x7c>)
    2270:	4798      	blx	r3
//! [slave_conf_defaults]
//! [ss_pin]
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
    2272:	1c3b      	adds	r3, r7, #0
    2274:	2205      	movs	r2, #5
    2276:	701a      	strb	r2, [r3, #0]
//! [ss_pin]
//! [slave_init]
	spi_attach_slave(&slave, &slave_dev_config);
    2278:	4a1a      	ldr	r2, [pc, #104]	; (22e4 <configure_spi_master+0x80>)
    227a:	1c3b      	adds	r3, r7, #0
    227c:	1c10      	adds	r0, r2, #0
    227e:	1c19      	adds	r1, r3, #0
    2280:	4b19      	ldr	r3, [pc, #100]	; (22e8 <configure_spi_master+0x84>)
    2282:	4798      	blx	r3
//! [slave_init]
	/* Configure, initialize and enable SERCOM SPI module */
//! [conf_defaults]
	spi_get_config_defaults(&config_spi_master);
    2284:	1d3b      	adds	r3, r7, #4
    2286:	1c18      	adds	r0, r3, #0
    2288:	4b18      	ldr	r3, [pc, #96]	; (22ec <configure_spi_master+0x88>)
    228a:	4798      	blx	r3

//! [conf_defaults]
//! [mux_setting]
	config_spi_master.mux_setting = EXT1_SPI_SERCOM_MUX_SETTING;
    228c:	1d3b      	adds	r3, r7, #4
    228e:	2280      	movs	r2, #128	; 0x80
    2290:	0252      	lsls	r2, r2, #9
    2292:	60da      	str	r2, [r3, #12]
//! [mux_setting]
	/* Configure pad 0 for data in */
//! [di]
	config_spi_master.pinmux_pad0 = EXT1_SPI_SERCOM_PINMUX_PAD0;
    2294:	1d3b      	adds	r3, r7, #4
    2296:	4a16      	ldr	r2, [pc, #88]	; (22f0 <configure_spi_master+0x8c>)
    2298:	629a      	str	r2, [r3, #40]	; 0x28
//! [di]
	/* Configure pad 1 as unused */
//! [ss]
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    229a:	1d3b      	adds	r3, r7, #4
    229c:	2201      	movs	r2, #1
    229e:	4252      	negs	r2, r2
    22a0:	62da      	str	r2, [r3, #44]	; 0x2c
//! [ss]
	/* Configure pad 2 for data out */
//! [do]
	config_spi_master.pinmux_pad2 = EXT1_SPI_SERCOM_PINMUX_PAD2;
    22a2:	1d3b      	adds	r3, r7, #4
    22a4:	4a13      	ldr	r2, [pc, #76]	; (22f4 <configure_spi_master+0x90>)
    22a6:	631a      	str	r2, [r3, #48]	; 0x30
//! [do]
	/* Configure pad 3 for SCK */
//! [sck]
	config_spi_master.pinmux_pad3 = EXT1_SPI_SERCOM_PINMUX_PAD3;
    22a8:	1d3b      	adds	r3, r7, #4
    22aa:	4a13      	ldr	r2, [pc, #76]	; (22f8 <configure_spi_master+0x94>)
    22ac:	635a      	str	r2, [r3, #52]	; 0x34
//! [sck]
//! [init]
	spi_init(&spi_master_instance, EXT1_SPI_MODULE, &config_spi_master);
    22ae:	4a13      	ldr	r2, [pc, #76]	; (22fc <configure_spi_master+0x98>)
    22b0:	4913      	ldr	r1, [pc, #76]	; (2300 <configure_spi_master+0x9c>)
    22b2:	1d3b      	adds	r3, r7, #4
    22b4:	1c10      	adds	r0, r2, #0
    22b6:	1c1a      	adds	r2, r3, #0
    22b8:	4b12      	ldr	r3, [pc, #72]	; (2304 <configure_spi_master+0xa0>)
    22ba:	4798      	blx	r3
//! [init]

//! [enable]
	enum status_code code = spi_set_baudrate(&spi_master_instance, 100000);
    22bc:	233f      	movs	r3, #63	; 0x3f
    22be:	18fc      	adds	r4, r7, r3
    22c0:	4b0e      	ldr	r3, [pc, #56]	; (22fc <configure_spi_master+0x98>)
    22c2:	4a11      	ldr	r2, [pc, #68]	; (2308 <configure_spi_master+0xa4>)
    22c4:	1c18      	adds	r0, r3, #0
    22c6:	1c11      	adds	r1, r2, #0
    22c8:	4b10      	ldr	r3, [pc, #64]	; (230c <configure_spi_master+0xa8>)
    22ca:	4798      	blx	r3
    22cc:	1c03      	adds	r3, r0, #0
    22ce:	7023      	strb	r3, [r4, #0]

	spi_enable(&spi_master_instance);
    22d0:	4b0a      	ldr	r3, [pc, #40]	; (22fc <configure_spi_master+0x98>)
    22d2:	1c18      	adds	r0, r3, #0
    22d4:	4b0e      	ldr	r3, [pc, #56]	; (2310 <configure_spi_master+0xac>)
    22d6:	4798      	blx	r3
//! [enable]

}
    22d8:	46bd      	mov	sp, r7
    22da:	b011      	add	sp, #68	; 0x44
    22dc:	bd90      	pop	{r4, r7, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	000021ad 	.word	0x000021ad
    22e4:	20000060 	.word	0x20000060
    22e8:	000021cd 	.word	0x000021cd
    22ec:	00002129 	.word	0x00002129
    22f0:	00040003 	.word	0x00040003
    22f4:	00060003 	.word	0x00060003
    22f8:	00070003 	.word	0x00070003
    22fc:	20000054 	.word	0x20000054
    2300:	42000800 	.word	0x42000800
    2304:	00000f7d 	.word	0x00000f7d
    2308:	000186a0 	.word	0x000186a0
    230c:	00000ac5 	.word	0x00000ac5
    2310:	00002231 	.word	0x00002231

00002314 <main>:
//! [configure_spi]

int main(void)
{
    2314:	b5b0      	push	{r4, r5, r7, lr}
    2316:	b084      	sub	sp, #16
    2318:	af00      	add	r7, sp, #0
//! [main_setup]
//! [system_init]
	system_init();
    231a:	4b22      	ldr	r3, [pc, #136]	; (23a4 <main+0x90>)
    231c:	4798      	blx	r3
//! [system_init]
//! [run_config]
	configure_spi_master();
    231e:	4b22      	ldr	r3, [pc, #136]	; (23a8 <main+0x94>)
    2320:	4798      	blx	r3
	static uint8_t read1[4] = {
		0x03, 0x00, 0x00, 0x00
	};
	static uint8_t enable = 0x06;
	static uint8_t status[6] = {0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06};
	spi_select_slave(&spi_master_instance, &slave, false);
    2322:	4a22      	ldr	r2, [pc, #136]	; (23ac <main+0x98>)
    2324:	4b22      	ldr	r3, [pc, #136]	; (23b0 <main+0x9c>)
    2326:	1c10      	adds	r0, r2, #0
    2328:	1c19      	adds	r1, r3, #0
    232a:	2200      	movs	r2, #0
    232c:	4b21      	ldr	r3, [pc, #132]	; (23b4 <main+0xa0>)
    232e:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, true);
    2330:	4a1e      	ldr	r2, [pc, #120]	; (23ac <main+0x98>)
    2332:	4b1f      	ldr	r3, [pc, #124]	; (23b0 <main+0x9c>)
    2334:	1c10      	adds	r0, r2, #0
    2336:	1c19      	adds	r1, r3, #0
    2338:	2201      	movs	r2, #1
    233a:	4b1e      	ldr	r3, [pc, #120]	; (23b4 <main+0xa0>)
    233c:	4798      	blx	r3
	enum status_code code_1 = spi_write_buffer_wait(&spi_master_instance, &enable, 1);
    233e:	230f      	movs	r3, #15
    2340:	18fc      	adds	r4, r7, r3
    2342:	4a1a      	ldr	r2, [pc, #104]	; (23ac <main+0x98>)
    2344:	4b1c      	ldr	r3, [pc, #112]	; (23b8 <main+0xa4>)
    2346:	1c10      	adds	r0, r2, #0
    2348:	1c19      	adds	r1, r3, #0
    234a:	2201      	movs	r2, #1
    234c:	4b1b      	ldr	r3, [pc, #108]	; (23bc <main+0xa8>)
    234e:	4798      	blx	r3
    2350:	1c03      	adds	r3, r0, #0
    2352:	7023      	strb	r3, [r4, #0]
	spi_select_slave(&spi_master_instance, &slave, false);
    2354:	4a15      	ldr	r2, [pc, #84]	; (23ac <main+0x98>)
    2356:	4b16      	ldr	r3, [pc, #88]	; (23b0 <main+0x9c>)
    2358:	1c10      	adds	r0, r2, #0
    235a:	1c19      	adds	r1, r3, #0
    235c:	2200      	movs	r2, #0
    235e:	4b15      	ldr	r3, [pc, #84]	; (23b4 <main+0xa0>)
    2360:	4798      	blx	r3
//! [deselect_slave]
	//spi_select_slave(&spi_master_instance, &slave, false);
//! [deselect_slave]
	int temp[2];
//! [inf_loop]
	delay_init();
    2362:	4b17      	ldr	r3, [pc, #92]	; (23c0 <main+0xac>)
    2364:	4798      	blx	r3
	while (true) {
		spi_select_slave(&spi_master_instance, &slave, true);
    2366:	4a11      	ldr	r2, [pc, #68]	; (23ac <main+0x98>)
    2368:	4b11      	ldr	r3, [pc, #68]	; (23b0 <main+0x9c>)
    236a:	1c10      	adds	r0, r2, #0
    236c:	1c19      	adds	r1, r3, #0
    236e:	2201      	movs	r2, #1
    2370:	4b10      	ldr	r3, [pc, #64]	; (23b4 <main+0xa0>)
    2372:	4798      	blx	r3
		enum status_code code_2 = spi_transceive_buffer_wait(&spi_master_instance, status, &temp, 2);
    2374:	230e      	movs	r3, #14
    2376:	18fc      	adds	r4, r7, r3
    2378:	490c      	ldr	r1, [pc, #48]	; (23ac <main+0x98>)
    237a:	4a12      	ldr	r2, [pc, #72]	; (23c4 <main+0xb0>)
    237c:	1c3b      	adds	r3, r7, #0
    237e:	1c08      	adds	r0, r1, #0
    2380:	1c11      	adds	r1, r2, #0
    2382:	1c1a      	adds	r2, r3, #0
    2384:	2302      	movs	r3, #2
    2386:	4d10      	ldr	r5, [pc, #64]	; (23c8 <main+0xb4>)
    2388:	47a8      	blx	r5
    238a:	1c03      	adds	r3, r0, #0
    238c:	7023      	strb	r3, [r4, #0]
		/*for (int i = 0; i < 10; ++i){
			int data;
			enum status_code code_4 = spi_read(&spi_master_instance, &data);
			rx[i] = data;	
		}*/
		spi_select_slave(&spi_master_instance, &slave, false);
    238e:	4a07      	ldr	r2, [pc, #28]	; (23ac <main+0x98>)
    2390:	4b07      	ldr	r3, [pc, #28]	; (23b0 <main+0x9c>)
    2392:	1c10      	adds	r0, r2, #0
    2394:	1c19      	adds	r1, r3, #0
    2396:	2200      	movs	r2, #0
    2398:	4b06      	ldr	r3, [pc, #24]	; (23b4 <main+0xa0>)
    239a:	4798      	blx	r3
			spi_transceive_wait(&spi_master_instance, i, temp);
			spi_select_slave(&spi_master_instance, &slave, false);
			delay_ms(1);
		} */
		//delay_ms(1);
		int a = 9 ;
    239c:	2309      	movs	r3, #9
    239e:	60bb      	str	r3, [r7, #8]
	}
    23a0:	e7e1      	b.n	2366 <main+0x52>
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	00001ef5 	.word	0x00001ef5
    23a8:	00002265 	.word	0x00002265
    23ac:	20000054 	.word	0x20000054
    23b0:	20000060 	.word	0x20000060
    23b4:	00001071 	.word	0x00001071
    23b8:	20000009 	.word	0x20000009
    23bc:	00001161 	.word	0x00001161
    23c0:	00000111 	.word	0x00000111
    23c4:	2000000c 	.word	0x2000000c
    23c8:	00001299 	.word	0x00001299

000023cc <__aeabi_uidiv>:
    23cc:	2200      	movs	r2, #0
    23ce:	0843      	lsrs	r3, r0, #1
    23d0:	428b      	cmp	r3, r1
    23d2:	d374      	bcc.n	24be <__aeabi_uidiv+0xf2>
    23d4:	0903      	lsrs	r3, r0, #4
    23d6:	428b      	cmp	r3, r1
    23d8:	d35f      	bcc.n	249a <__aeabi_uidiv+0xce>
    23da:	0a03      	lsrs	r3, r0, #8
    23dc:	428b      	cmp	r3, r1
    23de:	d344      	bcc.n	246a <__aeabi_uidiv+0x9e>
    23e0:	0b03      	lsrs	r3, r0, #12
    23e2:	428b      	cmp	r3, r1
    23e4:	d328      	bcc.n	2438 <__aeabi_uidiv+0x6c>
    23e6:	0c03      	lsrs	r3, r0, #16
    23e8:	428b      	cmp	r3, r1
    23ea:	d30d      	bcc.n	2408 <__aeabi_uidiv+0x3c>
    23ec:	22ff      	movs	r2, #255	; 0xff
    23ee:	0209      	lsls	r1, r1, #8
    23f0:	ba12      	rev	r2, r2
    23f2:	0c03      	lsrs	r3, r0, #16
    23f4:	428b      	cmp	r3, r1
    23f6:	d302      	bcc.n	23fe <__aeabi_uidiv+0x32>
    23f8:	1212      	asrs	r2, r2, #8
    23fa:	0209      	lsls	r1, r1, #8
    23fc:	d065      	beq.n	24ca <__aeabi_uidiv+0xfe>
    23fe:	0b03      	lsrs	r3, r0, #12
    2400:	428b      	cmp	r3, r1
    2402:	d319      	bcc.n	2438 <__aeabi_uidiv+0x6c>
    2404:	e000      	b.n	2408 <__aeabi_uidiv+0x3c>
    2406:	0a09      	lsrs	r1, r1, #8
    2408:	0bc3      	lsrs	r3, r0, #15
    240a:	428b      	cmp	r3, r1
    240c:	d301      	bcc.n	2412 <__aeabi_uidiv+0x46>
    240e:	03cb      	lsls	r3, r1, #15
    2410:	1ac0      	subs	r0, r0, r3
    2412:	4152      	adcs	r2, r2
    2414:	0b83      	lsrs	r3, r0, #14
    2416:	428b      	cmp	r3, r1
    2418:	d301      	bcc.n	241e <__aeabi_uidiv+0x52>
    241a:	038b      	lsls	r3, r1, #14
    241c:	1ac0      	subs	r0, r0, r3
    241e:	4152      	adcs	r2, r2
    2420:	0b43      	lsrs	r3, r0, #13
    2422:	428b      	cmp	r3, r1
    2424:	d301      	bcc.n	242a <__aeabi_uidiv+0x5e>
    2426:	034b      	lsls	r3, r1, #13
    2428:	1ac0      	subs	r0, r0, r3
    242a:	4152      	adcs	r2, r2
    242c:	0b03      	lsrs	r3, r0, #12
    242e:	428b      	cmp	r3, r1
    2430:	d301      	bcc.n	2436 <__aeabi_uidiv+0x6a>
    2432:	030b      	lsls	r3, r1, #12
    2434:	1ac0      	subs	r0, r0, r3
    2436:	4152      	adcs	r2, r2
    2438:	0ac3      	lsrs	r3, r0, #11
    243a:	428b      	cmp	r3, r1
    243c:	d301      	bcc.n	2442 <__aeabi_uidiv+0x76>
    243e:	02cb      	lsls	r3, r1, #11
    2440:	1ac0      	subs	r0, r0, r3
    2442:	4152      	adcs	r2, r2
    2444:	0a83      	lsrs	r3, r0, #10
    2446:	428b      	cmp	r3, r1
    2448:	d301      	bcc.n	244e <__aeabi_uidiv+0x82>
    244a:	028b      	lsls	r3, r1, #10
    244c:	1ac0      	subs	r0, r0, r3
    244e:	4152      	adcs	r2, r2
    2450:	0a43      	lsrs	r3, r0, #9
    2452:	428b      	cmp	r3, r1
    2454:	d301      	bcc.n	245a <__aeabi_uidiv+0x8e>
    2456:	024b      	lsls	r3, r1, #9
    2458:	1ac0      	subs	r0, r0, r3
    245a:	4152      	adcs	r2, r2
    245c:	0a03      	lsrs	r3, r0, #8
    245e:	428b      	cmp	r3, r1
    2460:	d301      	bcc.n	2466 <__aeabi_uidiv+0x9a>
    2462:	020b      	lsls	r3, r1, #8
    2464:	1ac0      	subs	r0, r0, r3
    2466:	4152      	adcs	r2, r2
    2468:	d2cd      	bcs.n	2406 <__aeabi_uidiv+0x3a>
    246a:	09c3      	lsrs	r3, r0, #7
    246c:	428b      	cmp	r3, r1
    246e:	d301      	bcc.n	2474 <__aeabi_uidiv+0xa8>
    2470:	01cb      	lsls	r3, r1, #7
    2472:	1ac0      	subs	r0, r0, r3
    2474:	4152      	adcs	r2, r2
    2476:	0983      	lsrs	r3, r0, #6
    2478:	428b      	cmp	r3, r1
    247a:	d301      	bcc.n	2480 <__aeabi_uidiv+0xb4>
    247c:	018b      	lsls	r3, r1, #6
    247e:	1ac0      	subs	r0, r0, r3
    2480:	4152      	adcs	r2, r2
    2482:	0943      	lsrs	r3, r0, #5
    2484:	428b      	cmp	r3, r1
    2486:	d301      	bcc.n	248c <__aeabi_uidiv+0xc0>
    2488:	014b      	lsls	r3, r1, #5
    248a:	1ac0      	subs	r0, r0, r3
    248c:	4152      	adcs	r2, r2
    248e:	0903      	lsrs	r3, r0, #4
    2490:	428b      	cmp	r3, r1
    2492:	d301      	bcc.n	2498 <__aeabi_uidiv+0xcc>
    2494:	010b      	lsls	r3, r1, #4
    2496:	1ac0      	subs	r0, r0, r3
    2498:	4152      	adcs	r2, r2
    249a:	08c3      	lsrs	r3, r0, #3
    249c:	428b      	cmp	r3, r1
    249e:	d301      	bcc.n	24a4 <__aeabi_uidiv+0xd8>
    24a0:	00cb      	lsls	r3, r1, #3
    24a2:	1ac0      	subs	r0, r0, r3
    24a4:	4152      	adcs	r2, r2
    24a6:	0883      	lsrs	r3, r0, #2
    24a8:	428b      	cmp	r3, r1
    24aa:	d301      	bcc.n	24b0 <__aeabi_uidiv+0xe4>
    24ac:	008b      	lsls	r3, r1, #2
    24ae:	1ac0      	subs	r0, r0, r3
    24b0:	4152      	adcs	r2, r2
    24b2:	0843      	lsrs	r3, r0, #1
    24b4:	428b      	cmp	r3, r1
    24b6:	d301      	bcc.n	24bc <__aeabi_uidiv+0xf0>
    24b8:	004b      	lsls	r3, r1, #1
    24ba:	1ac0      	subs	r0, r0, r3
    24bc:	4152      	adcs	r2, r2
    24be:	1a41      	subs	r1, r0, r1
    24c0:	d200      	bcs.n	24c4 <__aeabi_uidiv+0xf8>
    24c2:	4601      	mov	r1, r0
    24c4:	4152      	adcs	r2, r2
    24c6:	4610      	mov	r0, r2
    24c8:	4770      	bx	lr
    24ca:	e7ff      	b.n	24cc <__aeabi_uidiv+0x100>
    24cc:	b501      	push	{r0, lr}
    24ce:	2000      	movs	r0, #0
    24d0:	f000 f80c 	bl	24ec <__aeabi_idiv0>
    24d4:	bd02      	pop	{r1, pc}
    24d6:	46c0      	nop			; (mov r8, r8)

000024d8 <__aeabi_uidivmod>:
    24d8:	2900      	cmp	r1, #0
    24da:	d0f7      	beq.n	24cc <__aeabi_uidiv+0x100>
    24dc:	b503      	push	{r0, r1, lr}
    24de:	f7ff ff75 	bl	23cc <__aeabi_uidiv>
    24e2:	bc0e      	pop	{r1, r2, r3}
    24e4:	4342      	muls	r2, r0
    24e6:	1a89      	subs	r1, r1, r2
    24e8:	4718      	bx	r3
    24ea:	46c0      	nop			; (mov r8, r8)

000024ec <__aeabi_idiv0>:
    24ec:	4770      	bx	lr
    24ee:	46c0      	nop			; (mov r8, r8)

000024f0 <__libc_init_array>:
    24f0:	4b0e      	ldr	r3, [pc, #56]	; (252c <__libc_init_array+0x3c>)
    24f2:	b570      	push	{r4, r5, r6, lr}
    24f4:	2500      	movs	r5, #0
    24f6:	1c1e      	adds	r6, r3, #0
    24f8:	4c0d      	ldr	r4, [pc, #52]	; (2530 <__libc_init_array+0x40>)
    24fa:	1ae4      	subs	r4, r4, r3
    24fc:	10a4      	asrs	r4, r4, #2
    24fe:	42a5      	cmp	r5, r4
    2500:	d004      	beq.n	250c <__libc_init_array+0x1c>
    2502:	00ab      	lsls	r3, r5, #2
    2504:	58f3      	ldr	r3, [r6, r3]
    2506:	4798      	blx	r3
    2508:	3501      	adds	r5, #1
    250a:	e7f8      	b.n	24fe <__libc_init_array+0xe>
    250c:	f000 f84e 	bl	25ac <_init>
    2510:	4b08      	ldr	r3, [pc, #32]	; (2534 <__libc_init_array+0x44>)
    2512:	2500      	movs	r5, #0
    2514:	1c1e      	adds	r6, r3, #0
    2516:	4c08      	ldr	r4, [pc, #32]	; (2538 <__libc_init_array+0x48>)
    2518:	1ae4      	subs	r4, r4, r3
    251a:	10a4      	asrs	r4, r4, #2
    251c:	42a5      	cmp	r5, r4
    251e:	d004      	beq.n	252a <__libc_init_array+0x3a>
    2520:	00ab      	lsls	r3, r5, #2
    2522:	58f3      	ldr	r3, [r6, r3]
    2524:	4798      	blx	r3
    2526:	3501      	adds	r5, #1
    2528:	e7f8      	b.n	251c <__libc_init_array+0x2c>
    252a:	bd70      	pop	{r4, r5, r6, pc}
    252c:	000025b8 	.word	0x000025b8
    2530:	000025b8 	.word	0x000025b8
    2534:	000025b8 	.word	0x000025b8
    2538:	000025bc 	.word	0x000025bc

0000253c <memset>:
    253c:	1c03      	adds	r3, r0, #0
    253e:	1882      	adds	r2, r0, r2
    2540:	4293      	cmp	r3, r2
    2542:	d002      	beq.n	254a <memset+0xe>
    2544:	7019      	strb	r1, [r3, #0]
    2546:	3301      	adds	r3, #1
    2548:	e7fa      	b.n	2540 <memset+0x4>
    254a:	4770      	bx	lr
    254c:	42000800 	.word	0x42000800
    2550:	42000c00 	.word	0x42000c00
    2554:	42001000 	.word	0x42001000
    2558:	42001400 	.word	0x42001400
    255c:	42001800 	.word	0x42001800
    2560:	42001c00 	.word	0x42001c00
    2564:	000015b6 	.word	0x000015b6
    2568:	00001632 	.word	0x00001632
    256c:	00001632 	.word	0x00001632
    2570:	000015d8 	.word	0x000015d8
    2574:	000015d2 	.word	0x000015d2
    2578:	000015de 	.word	0x000015de
    257c:	000015bc 	.word	0x000015bc
    2580:	000015e4 	.word	0x000015e4
    2584:	00001618 	.word	0x00001618
    2588:	0000170c 	.word	0x0000170c
    258c:	0000175c 	.word	0x0000175c
    2590:	0000175c 	.word	0x0000175c
    2594:	00001758 	.word	0x00001758
    2598:	000016fe 	.word	0x000016fe
    259c:	0000171e 	.word	0x0000171e
    25a0:	000016ee 	.word	0x000016ee
    25a4:	00001730 	.word	0x00001730
    25a8:	00001742 	.word	0x00001742

000025ac <_init>:
    25ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ae:	46c0      	nop			; (mov r8, r8)
    25b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25b2:	bc08      	pop	{r3}
    25b4:	469e      	mov	lr, r3
    25b6:	4770      	bx	lr

000025b8 <__init_array_start>:
    25b8:	000000d9 	.word	0x000000d9

000025bc <_fini>:
    25bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25c2:	bc08      	pop	{r3}
    25c4:	469e      	mov	lr, r3
    25c6:	4770      	bx	lr

000025c8 <__fini_array_start>:
    25c8:	000000b1 	.word	0x000000b1
