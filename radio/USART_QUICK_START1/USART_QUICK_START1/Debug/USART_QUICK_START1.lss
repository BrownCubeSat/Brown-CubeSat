
USART_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002694  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002694  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  20000070  00002704  00010070  2**2
                  ALLOC
  3 .stack        00002000  200000e0  00002774  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000171b3  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023b7  00000000  00000000  000272a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003ed9  00000000  00000000  0002965d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000418  00000000  00000000  0002d536  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  0002d94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001983f  00000000  00000000  0002dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000099d0  00000000  00000000  000475cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b5df  00000000  00000000  00050f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010d4  00000000  00000000  000dc57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200020e0 	.word	0x200020e0
       4:	000010e5 	.word	0x000010e5
       8:	000010e1 	.word	0x000010e1
       c:	000010e1 	.word	0x000010e1
	...
      2c:	000010e1 	.word	0x000010e1
	...
      38:	000010e1 	.word	0x000010e1
      3c:	000010e1 	.word	0x000010e1
      40:	000010e1 	.word	0x000010e1
      44:	000010e1 	.word	0x000010e1
      48:	000010e1 	.word	0x000010e1
      4c:	000010e1 	.word	0x000010e1
      50:	000010e1 	.word	0x000010e1
      54:	000010e1 	.word	0x000010e1
      58:	000010e1 	.word	0x000010e1
      5c:	000010e1 	.word	0x000010e1
      60:	000010e1 	.word	0x000010e1
      64:	000010e1 	.word	0x000010e1
      68:	000010e1 	.word	0x000010e1
      6c:	000010e1 	.word	0x000010e1
      70:	000010e1 	.word	0x000010e1
      74:	000010e1 	.word	0x000010e1
      78:	000010e1 	.word	0x000010e1
      7c:	000010e1 	.word	0x000010e1
      80:	000010e1 	.word	0x000010e1
      84:	000010e1 	.word	0x000010e1
      88:	000010e1 	.word	0x000010e1
      8c:	000010e1 	.word	0x000010e1
      90:	000010e1 	.word	0x000010e1
      94:	000010e1 	.word	0x000010e1
      98:	000010e1 	.word	0x000010e1
      9c:	000010e1 	.word	0x000010e1
      a0:	000010e1 	.word	0x000010e1
      a4:	000010e1 	.word	0x000010e1
      a8:	000010e1 	.word	0x000010e1
      ac:	000010e1 	.word	0x000010e1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000070 	.word	0x20000070
      d0:	00000000 	.word	0x00000000
      d4:	00002694 	.word	0x00002694

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	00002694 	.word	0x00002694
     104:	20000074 	.word	0x20000074
     108:	00002694 	.word	0x00002694
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     110:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
	cycles_per_ms /= 1000;
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00000e71 	.word	0x00000e71
     13c:	0000145d 	.word	0x0000145d
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_ms+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_ms+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     178:	b5f0      	push	{r4, r5, r6, r7, lr}
     17a:	4647      	mov	r7, r8
     17c:	b480      	push	{r7}
     17e:	1c0c      	adds	r4, r1, #0
     180:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     182:	2800      	cmp	r0, #0
     184:	d110      	bne.n	1a8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     186:	2a00      	cmp	r2, #0
     188:	dd0a      	ble.n	1a0 <_read+0x28>
     18a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     18c:	4e09      	ldr	r6, [pc, #36]	; (1b4 <_read+0x3c>)
     18e:	4d0a      	ldr	r5, [pc, #40]	; (1b8 <_read+0x40>)
     190:	6830      	ldr	r0, [r6, #0]
     192:	1c21      	adds	r1, r4, #0
     194:	682b      	ldr	r3, [r5, #0]
     196:	4798      	blx	r3
		ptr++;
     198:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     19a:	42bc      	cmp	r4, r7
     19c:	d1f8      	bne.n	190 <_read+0x18>
     19e:	e001      	b.n	1a4 <_read+0x2c>
     1a0:	2300      	movs	r3, #0
     1a2:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     1a4:	4640      	mov	r0, r8
     1a6:	e001      	b.n	1ac <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     1a8:	2001      	movs	r0, #1
     1aa:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     1ac:	bc04      	pop	{r2}
     1ae:	4690      	mov	r8, r2
     1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	200000d0 	.word	0x200000d0
     1b8:	200000c8 	.word	0x200000c8

000001bc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1be:	4647      	mov	r7, r8
     1c0:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     1c2:	3801      	subs	r0, #1
     1c4:	2802      	cmp	r0, #2
     1c6:	d815      	bhi.n	1f4 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     1c8:	2a00      	cmp	r2, #0
     1ca:	d010      	beq.n	1ee <_write+0x32>
     1cc:	1c15      	adds	r5, r2, #0
     1ce:	1c0e      	adds	r6, r1, #0
     1d0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     1d2:	4b0c      	ldr	r3, [pc, #48]	; (204 <_write+0x48>)
     1d4:	4698      	mov	r8, r3
     1d6:	4f0c      	ldr	r7, [pc, #48]	; (208 <_write+0x4c>)
     1d8:	4643      	mov	r3, r8
     1da:	6818      	ldr	r0, [r3, #0]
     1dc:	5d31      	ldrb	r1, [r6, r4]
     1de:	683b      	ldr	r3, [r7, #0]
     1e0:	4798      	blx	r3
     1e2:	2800      	cmp	r0, #0
     1e4:	db09      	blt.n	1fa <_write+0x3e>
			return -1;
		}
		++nChars;
     1e6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     1e8:	42a5      	cmp	r5, r4
     1ea:	d1f5      	bne.n	1d8 <_write+0x1c>
     1ec:	e000      	b.n	1f0 <_write+0x34>
     1ee:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     1f0:	1c20      	adds	r0, r4, #0
     1f2:	e004      	b.n	1fe <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     1f4:	2001      	movs	r0, #1
     1f6:	4240      	negs	r0, r0
     1f8:	e001      	b.n	1fe <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     1fa:	2001      	movs	r0, #1
     1fc:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     1fe:	bc04      	pop	{r2}
     200:	4690      	mov	r8, r2
     202:	bdf0      	pop	{r4, r5, r6, r7, pc}
     204:	200000d0 	.word	0x200000d0
     208:	200000cc 	.word	0x200000cc

0000020c <printByte>:
    cmd[0] = 0x01; //SoH byte
    cmd[dataLength + 1] = computeCheckSum(&cmd[1], dataLength);
    return 0;
}

void printByte(uint8_t byte) {
     20c:	b508      	push	{r3, lr}
     20e:	1c01      	adds	r1, r0, #0
    printf("0x%02x\n", byte);
     210:	4801      	ldr	r0, [pc, #4]	; (218 <printByte+0xc>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <printByte+0x10>)
     214:	4798      	blx	r3
}
     216:	bd08      	pop	{r3, pc}
     218:	00002564 	.word	0x00002564
     21c:	00001631 	.word	0x00001631

00000220 <sendToRadio>:

    return !(response[1] == responseType && response[2] == responseCode);
}


int sendToRadio(uint8_t cmd[], int size, Radio* r) {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	464f      	mov	r7, r9
     224:	b480      	push	{r7}
     226:	b082      	sub	sp, #8
     228:	9001      	str	r0, [sp, #4]
     22a:	1e0e      	subs	r6, r1, #0
     22c:	4691      	mov	r9, r2
    for (int i = 0; i < size; i++) {
     22e:	dd07      	ble.n	240 <sendToRadio+0x20>
     230:	1c04      	adds	r4, r0, #0
     232:	1847      	adds	r7, r0, r1
        printByte(cmd[i]);
     234:	4d07      	ldr	r5, [pc, #28]	; (254 <sendToRadio+0x34>)
     236:	7820      	ldrb	r0, [r4, #0]
     238:	47a8      	blx	r5
     23a:	3401      	adds	r4, #1
    return !(response[1] == responseType && response[2] == responseCode);
}


int sendToRadio(uint8_t cmd[], int size, Radio* r) {
    for (int i = 0; i < size; i++) {
     23c:	42bc      	cmp	r4, r7
     23e:	d1fa      	bne.n	236 <sendToRadio+0x16>
        printByte(cmd[i]);
    }
    //return 0;

    return usart_write_buffer_wait(r->in, cmd, size);
     240:	464b      	mov	r3, r9
     242:	6858      	ldr	r0, [r3, #4]
     244:	b2b2      	uxth	r2, r6
     246:	9901      	ldr	r1, [sp, #4]
     248:	4b03      	ldr	r3, [pc, #12]	; (258 <sendToRadio+0x38>)
     24a:	4798      	blx	r3
}
     24c:	b002      	add	sp, #8
     24e:	bc04      	pop	{r2}
     250:	4691      	mov	r9, r2
     252:	bdf0      	pop	{r4, r5, r6, r7, pc}
     254:	0000020d 	.word	0x0000020d
     258:	00000aad 	.word	0x00000aad

0000025c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     25c:	4b0c      	ldr	r3, [pc, #48]	; (290 <cpu_irq_enter_critical+0x34>)
     25e:	681b      	ldr	r3, [r3, #0]
     260:	2b00      	cmp	r3, #0
     262:	d110      	bne.n	286 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     264:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     268:	2b00      	cmp	r3, #0
     26a:	d109      	bne.n	280 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     26c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     26e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     272:	2200      	movs	r2, #0
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <cpu_irq_enter_critical+0x38>)
     276:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     278:	3201      	adds	r2, #1
     27a:	4b07      	ldr	r3, [pc, #28]	; (298 <cpu_irq_enter_critical+0x3c>)
     27c:	701a      	strb	r2, [r3, #0]
     27e:	e002      	b.n	286 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     280:	2200      	movs	r2, #0
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <cpu_irq_enter_critical+0x3c>)
     284:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     286:	4a02      	ldr	r2, [pc, #8]	; (290 <cpu_irq_enter_critical+0x34>)
     288:	6813      	ldr	r3, [r2, #0]
     28a:	3301      	adds	r3, #1
     28c:	6013      	str	r3, [r2, #0]
}
     28e:	4770      	bx	lr
     290:	2000008c 	.word	0x2000008c
     294:	20000008 	.word	0x20000008
     298:	20000090 	.word	0x20000090

0000029c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     29c:	4b08      	ldr	r3, [pc, #32]	; (2c0 <cpu_irq_leave_critical+0x24>)
     29e:	681a      	ldr	r2, [r3, #0]
     2a0:	3a01      	subs	r2, #1
     2a2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2a4:	681b      	ldr	r3, [r3, #0]
     2a6:	2b00      	cmp	r3, #0
     2a8:	d109      	bne.n	2be <cpu_irq_leave_critical+0x22>
     2aa:	4b06      	ldr	r3, [pc, #24]	; (2c4 <cpu_irq_leave_critical+0x28>)
     2ac:	781b      	ldrb	r3, [r3, #0]
     2ae:	2b00      	cmp	r3, #0
     2b0:	d005      	beq.n	2be <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2b2:	2201      	movs	r2, #1
     2b4:	4b04      	ldr	r3, [pc, #16]	; (2c8 <cpu_irq_leave_critical+0x2c>)
     2b6:	701a      	strb	r2, [r3, #0]
     2b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2bc:	b662      	cpsie	i
	}
}
     2be:	4770      	bx	lr
     2c0:	2000008c 	.word	0x2000008c
     2c4:	20000090 	.word	0x20000090
     2c8:	20000008 	.word	0x20000008

000002cc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ce:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2d0:	ac01      	add	r4, sp, #4
     2d2:	2501      	movs	r5, #1
     2d4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     2d6:	2700      	movs	r7, #0
     2d8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2da:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2dc:	203e      	movs	r0, #62	; 0x3e
     2de:	1c21      	adds	r1, r4, #0
     2e0:	4e06      	ldr	r6, [pc, #24]	; (2fc <system_board_init+0x30>)
     2e2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2e4:	2280      	movs	r2, #128	; 0x80
     2e6:	05d2      	lsls	r2, r2, #23
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <system_board_init+0x34>)
     2ea:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     2ec:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     2ee:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     2f0:	200f      	movs	r0, #15
     2f2:	1c21      	adds	r1, r4, #0
     2f4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     2f6:	b003      	add	sp, #12
     2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000305 	.word	0x00000305
     300:	41004480 	.word	0x41004480

00000304 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     304:	b500      	push	{lr}
     306:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     308:	ab01      	add	r3, sp, #4
     30a:	2280      	movs	r2, #128	; 0x80
     30c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     30e:	780a      	ldrb	r2, [r1, #0]
     310:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     312:	784a      	ldrb	r2, [r1, #1]
     314:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     316:	788a      	ldrb	r2, [r1, #2]
     318:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     31a:	1c19      	adds	r1, r3, #0
     31c:	4b01      	ldr	r3, [pc, #4]	; (324 <port_pin_set_config+0x20>)
     31e:	4798      	blx	r3
}
     320:	b003      	add	sp, #12
     322:	bd00      	pop	{pc}
     324:	00001081 	.word	0x00001081

00000328 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     328:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     32a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     32c:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     32e:	4281      	cmp	r1, r0
     330:	d30c      	bcc.n	34c <_sercom_get_sync_baud_val+0x24>
     332:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     334:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     336:	3301      	adds	r3, #1
     338:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     33a:	4288      	cmp	r0, r1
     33c:	d9fa      	bls.n	334 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     33e:	3b01      	subs	r3, #1
     340:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     342:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     344:	2bff      	cmp	r3, #255	; 0xff
     346:	d801      	bhi.n	34c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     348:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     34a:	2400      	movs	r4, #0
	}
}
     34c:	1c20      	adds	r0, r4, #0
     34e:	bd10      	pop	{r4, pc}

00000350 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     350:	b5f0      	push	{r4, r5, r6, r7, lr}
     352:	465f      	mov	r7, fp
     354:	4656      	mov	r6, sl
     356:	464d      	mov	r5, r9
     358:	4644      	mov	r4, r8
     35a:	b4f0      	push	{r4, r5, r6, r7}
     35c:	b089      	sub	sp, #36	; 0x24
     35e:	1c1c      	adds	r4, r3, #0
     360:	ab12      	add	r3, sp, #72	; 0x48
     362:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     364:	1c06      	adds	r6, r0, #0
     366:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     368:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     36a:	428e      	cmp	r6, r1
     36c:	d900      	bls.n	370 <_sercom_get_async_baud_val+0x20>
     36e:	e0c7      	b.n	500 <_sercom_get_async_baud_val+0x1b0>
     370:	1c25      	adds	r5, r4, #0
     372:	9207      	str	r2, [sp, #28]
     374:	1c0c      	adds	r4, r1, #0
     376:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     378:	2d00      	cmp	r5, #0
     37a:	d151      	bne.n	420 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     37c:	1c18      	adds	r0, r3, #0
     37e:	2100      	movs	r1, #0
     380:	2300      	movs	r3, #0
     382:	4d63      	ldr	r5, [pc, #396]	; (510 <_sercom_get_async_baud_val+0x1c0>)
     384:	47a8      	blx	r5
     386:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     388:	1c26      	adds	r6, r4, #0
     38a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     38c:	2300      	movs	r3, #0
     38e:	2400      	movs	r4, #0
     390:	9302      	str	r3, [sp, #8]
     392:	9403      	str	r4, [sp, #12]
     394:	2200      	movs	r2, #0
     396:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     398:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     39a:	2120      	movs	r1, #32
     39c:	468c      	mov	ip, r1
     39e:	391f      	subs	r1, #31
     3a0:	9600      	str	r6, [sp, #0]
     3a2:	9701      	str	r7, [sp, #4]
     3a4:	2420      	movs	r4, #32
     3a6:	4264      	negs	r4, r4
     3a8:	1904      	adds	r4, r0, r4
     3aa:	d403      	bmi.n	3b4 <_sercom_get_async_baud_val+0x64>
     3ac:	1c0d      	adds	r5, r1, #0
     3ae:	40a5      	lsls	r5, r4
     3b0:	46a8      	mov	r8, r5
     3b2:	e004      	b.n	3be <_sercom_get_async_baud_val+0x6e>
     3b4:	4664      	mov	r4, ip
     3b6:	1a24      	subs	r4, r4, r0
     3b8:	1c0d      	adds	r5, r1, #0
     3ba:	40e5      	lsrs	r5, r4
     3bc:	46a8      	mov	r8, r5
     3be:	1c0c      	adds	r4, r1, #0
     3c0:	4084      	lsls	r4, r0
     3c2:	46a1      	mov	r9, r4

		r = r << 1;
     3c4:	1c14      	adds	r4, r2, #0
     3c6:	1c1d      	adds	r5, r3, #0
     3c8:	18a4      	adds	r4, r4, r2
     3ca:	415d      	adcs	r5, r3
     3cc:	1c22      	adds	r2, r4, #0
     3ce:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     3d0:	465e      	mov	r6, fp
     3d2:	4647      	mov	r7, r8
     3d4:	423e      	tst	r6, r7
     3d6:	d003      	beq.n	3e0 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     3d8:	1c0e      	adds	r6, r1, #0
     3da:	4326      	orrs	r6, r4
     3dc:	1c32      	adds	r2, r6, #0
     3de:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     3e0:	9c01      	ldr	r4, [sp, #4]
     3e2:	429c      	cmp	r4, r3
     3e4:	d810      	bhi.n	408 <_sercom_get_async_baud_val+0xb8>
     3e6:	d102      	bne.n	3ee <_sercom_get_async_baud_val+0x9e>
     3e8:	9c00      	ldr	r4, [sp, #0]
     3ea:	4294      	cmp	r4, r2
     3ec:	d80c      	bhi.n	408 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     3ee:	9c00      	ldr	r4, [sp, #0]
     3f0:	9d01      	ldr	r5, [sp, #4]
     3f2:	1b12      	subs	r2, r2, r4
     3f4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     3f6:	464d      	mov	r5, r9
     3f8:	9e02      	ldr	r6, [sp, #8]
     3fa:	9f03      	ldr	r7, [sp, #12]
     3fc:	4335      	orrs	r5, r6
     3fe:	1c3c      	adds	r4, r7, #0
     400:	4646      	mov	r6, r8
     402:	4334      	orrs	r4, r6
     404:	9502      	str	r5, [sp, #8]
     406:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     408:	3801      	subs	r0, #1
     40a:	d2cb      	bcs.n	3a4 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     40c:	2200      	movs	r2, #0
     40e:	2301      	movs	r3, #1
     410:	9802      	ldr	r0, [sp, #8]
     412:	9903      	ldr	r1, [sp, #12]
     414:	1a12      	subs	r2, r2, r0
     416:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     418:	0c11      	lsrs	r1, r2, #16
     41a:	041b      	lsls	r3, r3, #16
     41c:	4319      	orrs	r1, r3
     41e:	e06c      	b.n	4fa <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     420:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     422:	2d01      	cmp	r5, #1
     424:	d169      	bne.n	4fa <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     426:	0f61      	lsrs	r1, r4, #29
     428:	1c0f      	adds	r7, r1, #0
     42a:	00e1      	lsls	r1, r4, #3
     42c:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     42e:	1c18      	adds	r0, r3, #0
     430:	2100      	movs	r1, #0
     432:	2300      	movs	r3, #0
     434:	4c36      	ldr	r4, [pc, #216]	; (510 <_sercom_get_async_baud_val+0x1c0>)
     436:	47a0      	blx	r4
     438:	1c04      	adds	r4, r0, #0
     43a:	1c0d      	adds	r5, r1, #0
     43c:	2300      	movs	r3, #0
     43e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     440:	3320      	adds	r3, #32
     442:	469b      	mov	fp, r3
     444:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     446:	4663      	mov	r3, ip
     448:	9305      	str	r3, [sp, #20]
     44a:	46b9      	mov	r9, r7
     44c:	466b      	mov	r3, sp
     44e:	7d1b      	ldrb	r3, [r3, #20]
     450:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     452:	2300      	movs	r3, #0
     454:	469c      	mov	ip, r3
     456:	2000      	movs	r0, #0
     458:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     45a:	223f      	movs	r2, #63	; 0x3f
     45c:	9400      	str	r4, [sp, #0]
     45e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     460:	2320      	movs	r3, #32
     462:	425b      	negs	r3, r3
     464:	18d3      	adds	r3, r2, r3
     466:	d403      	bmi.n	470 <_sercom_get_async_baud_val+0x120>
     468:	1c34      	adds	r4, r6, #0
     46a:	409c      	lsls	r4, r3
     46c:	1c23      	adds	r3, r4, #0
     46e:	e004      	b.n	47a <_sercom_get_async_baud_val+0x12a>
     470:	465b      	mov	r3, fp
     472:	1a9b      	subs	r3, r3, r2
     474:	1c34      	adds	r4, r6, #0
     476:	40dc      	lsrs	r4, r3
     478:	1c23      	adds	r3, r4, #0
     47a:	1c37      	adds	r7, r6, #0
     47c:	4097      	lsls	r7, r2

		r = r << 1;
     47e:	1c04      	adds	r4, r0, #0
     480:	1c0d      	adds	r5, r1, #0
     482:	1824      	adds	r4, r4, r0
     484:	414d      	adcs	r5, r1
     486:	1c20      	adds	r0, r4, #0
     488:	1c29      	adds	r1, r5, #0
     48a:	9002      	str	r0, [sp, #8]
     48c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     48e:	4644      	mov	r4, r8
     490:	403c      	ands	r4, r7
     492:	46a2      	mov	sl, r4
     494:	464c      	mov	r4, r9
     496:	4023      	ands	r3, r4
     498:	4654      	mov	r4, sl
     49a:	4323      	orrs	r3, r4
     49c:	d005      	beq.n	4aa <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     49e:	9b02      	ldr	r3, [sp, #8]
     4a0:	9c03      	ldr	r4, [sp, #12]
     4a2:	1c1d      	adds	r5, r3, #0
     4a4:	4335      	orrs	r5, r6
     4a6:	1c28      	adds	r0, r5, #0
     4a8:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     4aa:	9b01      	ldr	r3, [sp, #4]
     4ac:	428b      	cmp	r3, r1
     4ae:	d80a      	bhi.n	4c6 <_sercom_get_async_baud_val+0x176>
     4b0:	d102      	bne.n	4b8 <_sercom_get_async_baud_val+0x168>
     4b2:	9b00      	ldr	r3, [sp, #0]
     4b4:	4283      	cmp	r3, r0
     4b6:	d806      	bhi.n	4c6 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     4b8:	9b00      	ldr	r3, [sp, #0]
     4ba:	9c01      	ldr	r4, [sp, #4]
     4bc:	1ac0      	subs	r0, r0, r3
     4be:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     4c0:	4663      	mov	r3, ip
     4c2:	433b      	orrs	r3, r7
     4c4:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     4c6:	3a01      	subs	r2, #1
     4c8:	d2ca      	bcs.n	460 <_sercom_get_async_baud_val+0x110>
     4ca:	9c00      	ldr	r4, [sp, #0]
     4cc:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     4ce:	4662      	mov	r2, ip
     4d0:	9905      	ldr	r1, [sp, #20]
     4d2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     4d4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     4d6:	4a0f      	ldr	r2, [pc, #60]	; (514 <_sercom_get_async_baud_val+0x1c4>)
     4d8:	4293      	cmp	r3, r2
     4da:	d908      	bls.n	4ee <_sercom_get_async_baud_val+0x19e>
     4dc:	9a06      	ldr	r2, [sp, #24]
     4de:	3201      	adds	r2, #1
     4e0:	b2d2      	uxtb	r2, r2
     4e2:	9206      	str	r2, [sp, #24]
     4e4:	1c0a      	adds	r2, r1, #0
     4e6:	3201      	adds	r2, #1
     4e8:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     4ea:	2a08      	cmp	r2, #8
     4ec:	d1ae      	bne.n	44c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ee:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     4f0:	9a06      	ldr	r2, [sp, #24]
     4f2:	2a08      	cmp	r2, #8
     4f4:	d004      	beq.n	500 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     4f6:	0351      	lsls	r1, r2, #13
     4f8:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     4fa:	9b07      	ldr	r3, [sp, #28]
     4fc:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     4fe:	2500      	movs	r5, #0
}
     500:	1c28      	adds	r0, r5, #0
     502:	b009      	add	sp, #36	; 0x24
     504:	bc3c      	pop	{r2, r3, r4, r5}
     506:	4690      	mov	r8, r2
     508:	4699      	mov	r9, r3
     50a:	46a2      	mov	sl, r4
     50c:	46ab      	mov	fp, r5
     50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     510:	00001581 	.word	0x00001581
     514:	00001fff 	.word	0x00001fff

00000518 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     518:	b510      	push	{r4, lr}
     51a:	b082      	sub	sp, #8
     51c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     51e:	4b0e      	ldr	r3, [pc, #56]	; (558 <sercom_set_gclk_generator+0x40>)
     520:	781b      	ldrb	r3, [r3, #0]
     522:	2b00      	cmp	r3, #0
     524:	d001      	beq.n	52a <sercom_set_gclk_generator+0x12>
     526:	2900      	cmp	r1, #0
     528:	d00d      	beq.n	546 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     52a:	a901      	add	r1, sp, #4
     52c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     52e:	2013      	movs	r0, #19
     530:	4b0a      	ldr	r3, [pc, #40]	; (55c <sercom_set_gclk_generator+0x44>)
     532:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     534:	2013      	movs	r0, #19
     536:	4b0a      	ldr	r3, [pc, #40]	; (560 <sercom_set_gclk_generator+0x48>)
     538:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <sercom_set_gclk_generator+0x40>)
     53c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     53e:	2201      	movs	r2, #1
     540:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     542:	2000      	movs	r0, #0
     544:	e006      	b.n	554 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     546:	4b04      	ldr	r3, [pc, #16]	; (558 <sercom_set_gclk_generator+0x40>)
     548:	785b      	ldrb	r3, [r3, #1]
     54a:	4283      	cmp	r3, r0
     54c:	d001      	beq.n	552 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     54e:	201d      	movs	r0, #29
     550:	e000      	b.n	554 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     552:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     554:	b002      	add	sp, #8
     556:	bd10      	pop	{r4, pc}
     558:	20000094 	.word	0x20000094
     55c:	00000f89 	.word	0x00000f89
     560:	00000efd 	.word	0x00000efd

00000564 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     564:	4b44      	ldr	r3, [pc, #272]	; (678 <_sercom_get_default_pad+0x114>)
     566:	4298      	cmp	r0, r3
     568:	d033      	beq.n	5d2 <_sercom_get_default_pad+0x6e>
     56a:	d806      	bhi.n	57a <_sercom_get_default_pad+0x16>
     56c:	4b43      	ldr	r3, [pc, #268]	; (67c <_sercom_get_default_pad+0x118>)
     56e:	4298      	cmp	r0, r3
     570:	d00d      	beq.n	58e <_sercom_get_default_pad+0x2a>
     572:	4b43      	ldr	r3, [pc, #268]	; (680 <_sercom_get_default_pad+0x11c>)
     574:	4298      	cmp	r0, r3
     576:	d01b      	beq.n	5b0 <_sercom_get_default_pad+0x4c>
     578:	e06f      	b.n	65a <_sercom_get_default_pad+0xf6>
     57a:	4b42      	ldr	r3, [pc, #264]	; (684 <_sercom_get_default_pad+0x120>)
     57c:	4298      	cmp	r0, r3
     57e:	d04a      	beq.n	616 <_sercom_get_default_pad+0xb2>
     580:	4b41      	ldr	r3, [pc, #260]	; (688 <_sercom_get_default_pad+0x124>)
     582:	4298      	cmp	r0, r3
     584:	d058      	beq.n	638 <_sercom_get_default_pad+0xd4>
     586:	4b41      	ldr	r3, [pc, #260]	; (68c <_sercom_get_default_pad+0x128>)
     588:	4298      	cmp	r0, r3
     58a:	d166      	bne.n	65a <_sercom_get_default_pad+0xf6>
     58c:	e032      	b.n	5f4 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     58e:	2901      	cmp	r1, #1
     590:	d006      	beq.n	5a0 <_sercom_get_default_pad+0x3c>
     592:	2900      	cmp	r1, #0
     594:	d063      	beq.n	65e <_sercom_get_default_pad+0xfa>
     596:	2902      	cmp	r1, #2
     598:	d006      	beq.n	5a8 <_sercom_get_default_pad+0x44>
     59a:	2903      	cmp	r1, #3
     59c:	d006      	beq.n	5ac <_sercom_get_default_pad+0x48>
     59e:	e001      	b.n	5a4 <_sercom_get_default_pad+0x40>
     5a0:	483b      	ldr	r0, [pc, #236]	; (690 <_sercom_get_default_pad+0x12c>)
     5a2:	e067      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5a4:	2000      	movs	r0, #0
     5a6:	e065      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5a8:	483a      	ldr	r0, [pc, #232]	; (694 <_sercom_get_default_pad+0x130>)
     5aa:	e063      	b.n	674 <_sercom_get_default_pad+0x110>
     5ac:	483a      	ldr	r0, [pc, #232]	; (698 <_sercom_get_default_pad+0x134>)
     5ae:	e061      	b.n	674 <_sercom_get_default_pad+0x110>
     5b0:	2901      	cmp	r1, #1
     5b2:	d006      	beq.n	5c2 <_sercom_get_default_pad+0x5e>
     5b4:	2900      	cmp	r1, #0
     5b6:	d054      	beq.n	662 <_sercom_get_default_pad+0xfe>
     5b8:	2902      	cmp	r1, #2
     5ba:	d006      	beq.n	5ca <_sercom_get_default_pad+0x66>
     5bc:	2903      	cmp	r1, #3
     5be:	d006      	beq.n	5ce <_sercom_get_default_pad+0x6a>
     5c0:	e001      	b.n	5c6 <_sercom_get_default_pad+0x62>
     5c2:	4836      	ldr	r0, [pc, #216]	; (69c <_sercom_get_default_pad+0x138>)
     5c4:	e056      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5c6:	2000      	movs	r0, #0
     5c8:	e054      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ca:	4835      	ldr	r0, [pc, #212]	; (6a0 <_sercom_get_default_pad+0x13c>)
     5cc:	e052      	b.n	674 <_sercom_get_default_pad+0x110>
     5ce:	4835      	ldr	r0, [pc, #212]	; (6a4 <_sercom_get_default_pad+0x140>)
     5d0:	e050      	b.n	674 <_sercom_get_default_pad+0x110>
     5d2:	2901      	cmp	r1, #1
     5d4:	d006      	beq.n	5e4 <_sercom_get_default_pad+0x80>
     5d6:	2900      	cmp	r1, #0
     5d8:	d045      	beq.n	666 <_sercom_get_default_pad+0x102>
     5da:	2902      	cmp	r1, #2
     5dc:	d006      	beq.n	5ec <_sercom_get_default_pad+0x88>
     5de:	2903      	cmp	r1, #3
     5e0:	d006      	beq.n	5f0 <_sercom_get_default_pad+0x8c>
     5e2:	e001      	b.n	5e8 <_sercom_get_default_pad+0x84>
     5e4:	4830      	ldr	r0, [pc, #192]	; (6a8 <_sercom_get_default_pad+0x144>)
     5e6:	e045      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5e8:	2000      	movs	r0, #0
     5ea:	e043      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ec:	482f      	ldr	r0, [pc, #188]	; (6ac <_sercom_get_default_pad+0x148>)
     5ee:	e041      	b.n	674 <_sercom_get_default_pad+0x110>
     5f0:	482f      	ldr	r0, [pc, #188]	; (6b0 <_sercom_get_default_pad+0x14c>)
     5f2:	e03f      	b.n	674 <_sercom_get_default_pad+0x110>
     5f4:	2901      	cmp	r1, #1
     5f6:	d006      	beq.n	606 <_sercom_get_default_pad+0xa2>
     5f8:	2900      	cmp	r1, #0
     5fa:	d036      	beq.n	66a <_sercom_get_default_pad+0x106>
     5fc:	2902      	cmp	r1, #2
     5fe:	d006      	beq.n	60e <_sercom_get_default_pad+0xaa>
     600:	2903      	cmp	r1, #3
     602:	d006      	beq.n	612 <_sercom_get_default_pad+0xae>
     604:	e001      	b.n	60a <_sercom_get_default_pad+0xa6>
     606:	482b      	ldr	r0, [pc, #172]	; (6b4 <_sercom_get_default_pad+0x150>)
     608:	e034      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     60a:	2000      	movs	r0, #0
     60c:	e032      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60e:	482a      	ldr	r0, [pc, #168]	; (6b8 <_sercom_get_default_pad+0x154>)
     610:	e030      	b.n	674 <_sercom_get_default_pad+0x110>
     612:	482a      	ldr	r0, [pc, #168]	; (6bc <_sercom_get_default_pad+0x158>)
     614:	e02e      	b.n	674 <_sercom_get_default_pad+0x110>
     616:	2901      	cmp	r1, #1
     618:	d006      	beq.n	628 <_sercom_get_default_pad+0xc4>
     61a:	2900      	cmp	r1, #0
     61c:	d027      	beq.n	66e <_sercom_get_default_pad+0x10a>
     61e:	2902      	cmp	r1, #2
     620:	d006      	beq.n	630 <_sercom_get_default_pad+0xcc>
     622:	2903      	cmp	r1, #3
     624:	d006      	beq.n	634 <_sercom_get_default_pad+0xd0>
     626:	e001      	b.n	62c <_sercom_get_default_pad+0xc8>
     628:	4825      	ldr	r0, [pc, #148]	; (6c0 <_sercom_get_default_pad+0x15c>)
     62a:	e023      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     62c:	2000      	movs	r0, #0
     62e:	e021      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     630:	4824      	ldr	r0, [pc, #144]	; (6c4 <_sercom_get_default_pad+0x160>)
     632:	e01f      	b.n	674 <_sercom_get_default_pad+0x110>
     634:	4824      	ldr	r0, [pc, #144]	; (6c8 <_sercom_get_default_pad+0x164>)
     636:	e01d      	b.n	674 <_sercom_get_default_pad+0x110>
     638:	2901      	cmp	r1, #1
     63a:	d006      	beq.n	64a <_sercom_get_default_pad+0xe6>
     63c:	2900      	cmp	r1, #0
     63e:	d018      	beq.n	672 <_sercom_get_default_pad+0x10e>
     640:	2902      	cmp	r1, #2
     642:	d006      	beq.n	652 <_sercom_get_default_pad+0xee>
     644:	2903      	cmp	r1, #3
     646:	d006      	beq.n	656 <_sercom_get_default_pad+0xf2>
     648:	e001      	b.n	64e <_sercom_get_default_pad+0xea>
     64a:	4820      	ldr	r0, [pc, #128]	; (6cc <_sercom_get_default_pad+0x168>)
     64c:	e012      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     64e:	2000      	movs	r0, #0
     650:	e010      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     652:	481f      	ldr	r0, [pc, #124]	; (6d0 <_sercom_get_default_pad+0x16c>)
     654:	e00e      	b.n	674 <_sercom_get_default_pad+0x110>
     656:	481f      	ldr	r0, [pc, #124]	; (6d4 <_sercom_get_default_pad+0x170>)
     658:	e00c      	b.n	674 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     65a:	2000      	movs	r0, #0
     65c:	e00a      	b.n	674 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     65e:	481e      	ldr	r0, [pc, #120]	; (6d8 <_sercom_get_default_pad+0x174>)
     660:	e008      	b.n	674 <_sercom_get_default_pad+0x110>
     662:	2003      	movs	r0, #3
     664:	e006      	b.n	674 <_sercom_get_default_pad+0x110>
     666:	481d      	ldr	r0, [pc, #116]	; (6dc <_sercom_get_default_pad+0x178>)
     668:	e004      	b.n	674 <_sercom_get_default_pad+0x110>
     66a:	481d      	ldr	r0, [pc, #116]	; (6e0 <_sercom_get_default_pad+0x17c>)
     66c:	e002      	b.n	674 <_sercom_get_default_pad+0x110>
     66e:	481d      	ldr	r0, [pc, #116]	; (6e4 <_sercom_get_default_pad+0x180>)
     670:	e000      	b.n	674 <_sercom_get_default_pad+0x110>
     672:	481d      	ldr	r0, [pc, #116]	; (6e8 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     674:	4770      	bx	lr
     676:	46c0      	nop			; (mov r8, r8)
     678:	42001000 	.word	0x42001000
     67c:	42000800 	.word	0x42000800
     680:	42000c00 	.word	0x42000c00
     684:	42001800 	.word	0x42001800
     688:	42001c00 	.word	0x42001c00
     68c:	42001400 	.word	0x42001400
     690:	00050003 	.word	0x00050003
     694:	00060003 	.word	0x00060003
     698:	00070003 	.word	0x00070003
     69c:	00010003 	.word	0x00010003
     6a0:	001e0003 	.word	0x001e0003
     6a4:	001f0003 	.word	0x001f0003
     6a8:	00090003 	.word	0x00090003
     6ac:	000a0003 	.word	0x000a0003
     6b0:	000b0003 	.word	0x000b0003
     6b4:	00110003 	.word	0x00110003
     6b8:	00120003 	.word	0x00120003
     6bc:	00130003 	.word	0x00130003
     6c0:	000d0003 	.word	0x000d0003
     6c4:	000e0003 	.word	0x000e0003
     6c8:	000f0003 	.word	0x000f0003
     6cc:	00170003 	.word	0x00170003
     6d0:	00180003 	.word	0x00180003
     6d4:	00190003 	.word	0x00190003
     6d8:	00040003 	.word	0x00040003
     6dc:	00080003 	.word	0x00080003
     6e0:	00100003 	.word	0x00100003
     6e4:	000c0003 	.word	0x000c0003
     6e8:	00160003 	.word	0x00160003

000006ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6ec:	b530      	push	{r4, r5, lr}
     6ee:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6f0:	4b0c      	ldr	r3, [pc, #48]	; (724 <_sercom_get_sercom_inst_index+0x38>)
     6f2:	466a      	mov	r2, sp
     6f4:	cb32      	ldmia	r3!, {r1, r4, r5}
     6f6:	c232      	stmia	r2!, {r1, r4, r5}
     6f8:	cb32      	ldmia	r3!, {r1, r4, r5}
     6fa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6fc:	9b00      	ldr	r3, [sp, #0]
     6fe:	4283      	cmp	r3, r0
     700:	d006      	beq.n	710 <_sercom_get_sercom_inst_index+0x24>
     702:	2301      	movs	r3, #1
     704:	009a      	lsls	r2, r3, #2
     706:	4669      	mov	r1, sp
     708:	5852      	ldr	r2, [r2, r1]
     70a:	4282      	cmp	r2, r0
     70c:	d103      	bne.n	716 <_sercom_get_sercom_inst_index+0x2a>
     70e:	e000      	b.n	712 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     710:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     712:	b2d8      	uxtb	r0, r3
     714:	e003      	b.n	71e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     716:	3301      	adds	r3, #1
     718:	2b06      	cmp	r3, #6
     71a:	d1f3      	bne.n	704 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     71c:	2000      	movs	r0, #0
}
     71e:	b007      	add	sp, #28
     720:	bd30      	pop	{r4, r5, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	0000256c 	.word	0x0000256c

00000728 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     728:	b5f0      	push	{r4, r5, r6, r7, lr}
     72a:	465f      	mov	r7, fp
     72c:	4656      	mov	r6, sl
     72e:	464d      	mov	r5, r9
     730:	4644      	mov	r4, r8
     732:	b4f0      	push	{r4, r5, r6, r7}
     734:	b091      	sub	sp, #68	; 0x44
     736:	1c06      	adds	r6, r0, #0
     738:	1c0c      	adds	r4, r1, #0
     73a:	1c15      	adds	r5, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     73c:	6031      	str	r1, [r6, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     73e:	1c08      	adds	r0, r1, #0
     740:	4baa      	ldr	r3, [pc, #680]	; (9ec <usart_init+0x2c4>)
     742:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     744:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     746:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     748:	07d2      	lsls	r2, r2, #31
     74a:	d500      	bpl.n	74e <usart_init+0x26>
     74c:	e146      	b.n	9dc <usart_init+0x2b4>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     74e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     750:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     752:	0792      	lsls	r2, r2, #30
     754:	d500      	bpl.n	758 <usart_init+0x30>
     756:	e141      	b.n	9dc <usart_init+0x2b4>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     758:	49a5      	ldr	r1, [pc, #660]	; (9f0 <usart_init+0x2c8>)
     75a:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     75c:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     75e:	3b1b      	subs	r3, #27
     760:	40bb      	lsls	r3, r7
     762:	4313      	orrs	r3, r2
     764:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     766:	a90f      	add	r1, sp, #60	; 0x3c
     768:	272d      	movs	r7, #45	; 0x2d
     76a:	5deb      	ldrb	r3, [r5, r7]
     76c:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     76e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     770:	b2c3      	uxtb	r3, r0
     772:	9303      	str	r3, [sp, #12]
     774:	1c18      	adds	r0, r3, #0
     776:	4b9f      	ldr	r3, [pc, #636]	; (9f4 <usart_init+0x2cc>)
     778:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     77a:	9803      	ldr	r0, [sp, #12]
     77c:	4b9e      	ldr	r3, [pc, #632]	; (9f8 <usart_init+0x2d0>)
     77e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     780:	5de8      	ldrb	r0, [r5, r7]
     782:	2100      	movs	r1, #0
     784:	4b9d      	ldr	r3, [pc, #628]	; (9fc <usart_init+0x2d4>)
     786:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     788:	7aeb      	ldrb	r3, [r5, #11]
     78a:	7173      	strb	r3, [r6, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     78c:	2324      	movs	r3, #36	; 0x24
     78e:	5ceb      	ldrb	r3, [r5, r3]
     790:	71b3      	strb	r3, [r6, #6]
	module->transmitter_enabled = config->transmitter_enable;
     792:	2325      	movs	r3, #37	; 0x25
     794:	5ceb      	ldrb	r3, [r5, r3]
     796:	71f3      	strb	r3, [r6, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     798:	7eeb      	ldrb	r3, [r5, #27]
     79a:	7233      	strb	r3, [r6, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     79c:	7f2b      	ldrb	r3, [r5, #28]
     79e:	7273      	strb	r3, [r6, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7a0:	6833      	ldr	r3, [r6, #0]
     7a2:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7a4:	1c18      	adds	r0, r3, #0
     7a6:	4b91      	ldr	r3, [pc, #580]	; (9ec <usart_init+0x2c4>)
     7a8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7aa:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     7ac:	2200      	movs	r2, #0
     7ae:	230e      	movs	r3, #14
     7b0:	a906      	add	r1, sp, #24
     7b2:	468c      	mov	ip, r1
     7b4:	4463      	add	r3, ip
     7b6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     7b8:	8a2b      	ldrh	r3, [r5, #16]
     7ba:	4699      	mov	r9, r3
     7bc:	2380      	movs	r3, #128	; 0x80
     7be:	01db      	lsls	r3, r3, #7
     7c0:	4599      	cmp	r9, r3
     7c2:	d019      	beq.n	7f8 <usart_init+0xd0>
     7c4:	d804      	bhi.n	7d0 <usart_init+0xa8>
     7c6:	2380      	movs	r3, #128	; 0x80
     7c8:	019b      	lsls	r3, r3, #6
     7ca:	4599      	cmp	r9, r3
     7cc:	d00a      	beq.n	7e4 <usart_init+0xbc>
     7ce:	e0e7      	b.n	9a0 <usart_init+0x278>
     7d0:	23c0      	movs	r3, #192	; 0xc0
     7d2:	01db      	lsls	r3, r3, #7
     7d4:	4599      	cmp	r9, r3
     7d6:	d00a      	beq.n	7ee <usart_init+0xc6>
     7d8:	2380      	movs	r3, #128	; 0x80
     7da:	021b      	lsls	r3, r3, #8
     7dc:	4599      	cmp	r9, r3
     7de:	d100      	bne.n	7e2 <usart_init+0xba>
     7e0:	e0e3      	b.n	9aa <usart_init+0x282>
     7e2:	e0dd      	b.n	9a0 <usart_init+0x278>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     7e4:	2310      	movs	r3, #16
     7e6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     7e8:	3b0f      	subs	r3, #15
     7ea:	9307      	str	r3, [sp, #28]
     7ec:	e0e1      	b.n	9b2 <usart_init+0x28a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7ee:	2308      	movs	r3, #8
     7f0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     7f2:	3b07      	subs	r3, #7
     7f4:	9307      	str	r3, [sp, #28]
     7f6:	e0dc      	b.n	9b2 <usart_init+0x28a>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     7f8:	682b      	ldr	r3, [r5, #0]
     7fa:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     7fc:	68eb      	ldr	r3, [r5, #12]
     7fe:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     800:	696b      	ldr	r3, [r5, #20]
     802:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     804:	7e2b      	ldrb	r3, [r5, #24]
     806:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     808:	2326      	movs	r3, #38	; 0x26
     80a:	5ceb      	ldrb	r3, [r5, r3]
     80c:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     80e:	686b      	ldr	r3, [r5, #4]
     810:	2b00      	cmp	r3, #0
     812:	d015      	beq.n	840 <usart_init+0x118>
     814:	2280      	movs	r2, #128	; 0x80
     816:	0552      	lsls	r2, r2, #21
     818:	4293      	cmp	r3, r2
     81a:	d136      	bne.n	88a <usart_init+0x162>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     81c:	2327      	movs	r3, #39	; 0x27
     81e:	5ceb      	ldrb	r3, [r5, r3]
     820:	2b00      	cmp	r3, #0
     822:	d136      	bne.n	892 <usart_init+0x16a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     824:	6a2b      	ldr	r3, [r5, #32]
     826:	1c1f      	adds	r7, r3, #0
     828:	b2c0      	uxtb	r0, r0
     82a:	4b75      	ldr	r3, [pc, #468]	; (a00 <usart_init+0x2d8>)
     82c:	4798      	blx	r3
     82e:	1c01      	adds	r1, r0, #0
     830:	1c38      	adds	r0, r7, #0
     832:	220e      	movs	r2, #14
     834:	ab06      	add	r3, sp, #24
     836:	469c      	mov	ip, r3
     838:	4462      	add	r2, ip
     83a:	4b72      	ldr	r3, [pc, #456]	; (a04 <usart_init+0x2dc>)
     83c:	4798      	blx	r3
     83e:	e025      	b.n	88c <usart_init+0x164>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     840:	2308      	movs	r3, #8
     842:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     844:	2300      	movs	r3, #0
     846:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     848:	2327      	movs	r3, #39	; 0x27
     84a:	5ceb      	ldrb	r3, [r5, r3]
     84c:	2b00      	cmp	r3, #0
     84e:	d00b      	beq.n	868 <usart_init+0x140>
				status_code =
     850:	9b06      	ldr	r3, [sp, #24]
     852:	9300      	str	r3, [sp, #0]
     854:	6a28      	ldr	r0, [r5, #32]
     856:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     858:	220e      	movs	r2, #14
     85a:	ab06      	add	r3, sp, #24
     85c:	469c      	mov	ip, r3
     85e:	4462      	add	r2, ip
     860:	9b07      	ldr	r3, [sp, #28]
     862:	4f69      	ldr	r7, [pc, #420]	; (a08 <usart_init+0x2e0>)
     864:	47b8      	blx	r7
     866:	e011      	b.n	88c <usart_init+0x164>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     868:	6a2b      	ldr	r3, [r5, #32]
     86a:	1c1f      	adds	r7, r3, #0
     86c:	b2c0      	uxtb	r0, r0
     86e:	4b64      	ldr	r3, [pc, #400]	; (a00 <usart_init+0x2d8>)
     870:	4798      	blx	r3
     872:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     874:	9b06      	ldr	r3, [sp, #24]
     876:	9300      	str	r3, [sp, #0]
     878:	1c38      	adds	r0, r7, #0
     87a:	220e      	movs	r2, #14
     87c:	ab06      	add	r3, sp, #24
     87e:	469c      	mov	ip, r3
     880:	4462      	add	r2, ip
     882:	9b07      	ldr	r3, [sp, #28]
     884:	4f60      	ldr	r7, [pc, #384]	; (a08 <usart_init+0x2e0>)
     886:	47b8      	blx	r7
     888:	e000      	b.n	88c <usart_init+0x164>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     88a:	2000      	movs	r0, #0
     88c:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     88e:	d000      	beq.n	892 <usart_init+0x16a>
     890:	e0a4      	b.n	9dc <usart_init+0x2b4>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     892:	7e6b      	ldrb	r3, [r5, #25]
     894:	2b00      	cmp	r3, #0
     896:	d002      	beq.n	89e <usart_init+0x176>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     898:	7eab      	ldrb	r3, [r5, #26]
     89a:	4652      	mov	r2, sl
     89c:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     89e:	6832      	ldr	r2, [r6, #0]
     8a0:	9f05      	ldr	r7, [sp, #20]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8a2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8a4:	2b00      	cmp	r3, #0
     8a6:	d1fc      	bne.n	8a2 <usart_init+0x17a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     8a8:	330e      	adds	r3, #14
     8aa:	aa06      	add	r2, sp, #24
     8ac:	4694      	mov	ip, r2
     8ae:	4463      	add	r3, ip
     8b0:	881b      	ldrh	r3, [r3, #0]
     8b2:	4652      	mov	r2, sl
     8b4:	8193      	strh	r3, [r2, #12]
     8b6:	9b03      	ldr	r3, [sp, #12]
     8b8:	465a      	mov	r2, fp
     8ba:	4313      	orrs	r3, r2
     8bc:	9a04      	ldr	r2, [sp, #16]
     8be:	4313      	orrs	r3, r2
     8c0:	686a      	ldr	r2, [r5, #4]
     8c2:	4313      	orrs	r3, r2
     8c4:	464a      	mov	r2, r9
     8c6:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8c8:	4642      	mov	r2, r8
     8ca:	0212      	lsls	r2, r2, #8
     8cc:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8ce:	077f      	lsls	r7, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     8d0:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     8d2:	2327      	movs	r3, #39	; 0x27
     8d4:	5ceb      	ldrb	r3, [r5, r3]
     8d6:	2b00      	cmp	r3, #0
     8d8:	d101      	bne.n	8de <usart_init+0x1b6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     8da:	3304      	adds	r3, #4
     8dc:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8de:	7e69      	ldrb	r1, [r5, #25]
     8e0:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8e2:	7f2b      	ldrb	r3, [r5, #28]
     8e4:	025b      	lsls	r3, r3, #9
     8e6:	4319      	orrs	r1, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     8e8:	7aeb      	ldrb	r3, [r5, #11]
     8ea:	7aaa      	ldrb	r2, [r5, #10]
     8ec:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     8ee:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8f0:	7f6a      	ldrb	r2, [r5, #29]
     8f2:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     8f4:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8f6:	2324      	movs	r3, #36	; 0x24
     8f8:	5cea      	ldrb	r2, [r5, r3]
     8fa:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     8fc:	1c0b      	adds	r3, r1, #0
     8fe:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     900:	2225      	movs	r2, #37	; 0x25
     902:	5ca9      	ldrb	r1, [r5, r2]
     904:	0409      	lsls	r1, r1, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     906:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     908:	892b      	ldrh	r3, [r5, #8]
     90a:	2bff      	cmp	r3, #255	; 0xff
     90c:	d004      	beq.n	918 <usart_init+0x1f0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     90e:	2280      	movs	r2, #128	; 0x80
     910:	0452      	lsls	r2, r2, #17
     912:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     914:	4319      	orrs	r1, r3
     916:	e005      	b.n	924 <usart_init+0x1fc>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     918:	7eeb      	ldrb	r3, [r5, #27]
     91a:	2b00      	cmp	r3, #0
     91c:	d002      	beq.n	924 <usart_init+0x1fc>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     91e:	2380      	movs	r3, #128	; 0x80
     920:	04db      	lsls	r3, r3, #19
     922:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     924:	232c      	movs	r3, #44	; 0x2c
     926:	5ceb      	ldrb	r3, [r5, r3]
     928:	2b00      	cmp	r3, #0
     92a:	d103      	bne.n	934 <usart_init+0x20c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     92c:	4b37      	ldr	r3, [pc, #220]	; (a0c <usart_init+0x2e4>)
     92e:	789b      	ldrb	r3, [r3, #2]
     930:	079b      	lsls	r3, r3, #30
     932:	d501      	bpl.n	938 <usart_init+0x210>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     934:	2380      	movs	r3, #128	; 0x80
     936:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     938:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     93a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     93c:	2b00      	cmp	r3, #0
     93e:	d1fc      	bne.n	93a <usart_init+0x212>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     940:	4653      	mov	r3, sl
     942:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     944:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     946:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     948:	2b00      	cmp	r3, #0
     94a:	d1fc      	bne.n	946 <usart_init+0x21e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     94c:	4653      	mov	r3, sl
     94e:	601f      	str	r7, [r3, #0]
     950:	ab0e      	add	r3, sp, #56	; 0x38
     952:	2280      	movs	r2, #128	; 0x80
     954:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     956:	2200      	movs	r2, #0
     958:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     95a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     95c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     95e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     960:	930a      	str	r3, [sp, #40]	; 0x28
     962:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     964:	930b      	str	r3, [sp, #44]	; 0x2c
     966:	6bab      	ldr	r3, [r5, #56]	; 0x38
     968:	930c      	str	r3, [sp, #48]	; 0x30
     96a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
     96c:	9303      	str	r3, [sp, #12]
     96e:	930d      	str	r3, [sp, #52]	; 0x34
     970:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     972:	ad0e      	add	r5, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     974:	4e26      	ldr	r6, [pc, #152]	; (a10 <usart_init+0x2e8>)
     976:	b2f9      	uxtb	r1, r7
     978:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     97a:	aa0a      	add	r2, sp, #40	; 0x28
     97c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     97e:	2800      	cmp	r0, #0
     980:	d102      	bne.n	988 <usart_init+0x260>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     982:	1c20      	adds	r0, r4, #0
     984:	4b23      	ldr	r3, [pc, #140]	; (a14 <usart_init+0x2ec>)
     986:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     988:	1c43      	adds	r3, r0, #1
     98a:	d004      	beq.n	996 <usart_init+0x26e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     98c:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     98e:	0c00      	lsrs	r0, r0, #16
     990:	b2c0      	uxtb	r0, r0
     992:	1c29      	adds	r1, r5, #0
     994:	47b0      	blx	r6
     996:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     998:	2f04      	cmp	r7, #4
     99a:	d1ec      	bne.n	976 <usart_init+0x24e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     99c:	2300      	movs	r3, #0
     99e:	e01d      	b.n	9dc <usart_init+0x2b4>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9a0:	2310      	movs	r3, #16
     9a2:	9306      	str	r3, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9a4:	2300      	movs	r3, #0
     9a6:	9307      	str	r3, [sp, #28]
     9a8:	e003      	b.n	9b2 <usart_init+0x28a>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     9aa:	2303      	movs	r3, #3
     9ac:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9ae:	2300      	movs	r3, #0
     9b0:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     9b2:	682b      	ldr	r3, [r5, #0]
     9b4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     9b6:	68eb      	ldr	r3, [r5, #12]
     9b8:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     9ba:	696b      	ldr	r3, [r5, #20]
     9bc:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9be:	7e2b      	ldrb	r3, [r5, #24]
     9c0:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9c2:	2326      	movs	r3, #38	; 0x26
     9c4:	5ceb      	ldrb	r3, [r5, r3]
     9c6:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     9c8:	686b      	ldr	r3, [r5, #4]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d100      	bne.n	9d0 <usart_init+0x2a8>
     9ce:	e73b      	b.n	848 <usart_init+0x120>
     9d0:	2280      	movs	r2, #128	; 0x80
     9d2:	0552      	lsls	r2, r2, #21
     9d4:	4293      	cmp	r3, r2
     9d6:	d100      	bne.n	9da <usart_init+0x2b2>
     9d8:	e720      	b.n	81c <usart_init+0xf4>
     9da:	e75a      	b.n	892 <usart_init+0x16a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     9dc:	1c18      	adds	r0, r3, #0
     9de:	b011      	add	sp, #68	; 0x44
     9e0:	bc3c      	pop	{r2, r3, r4, r5}
     9e2:	4690      	mov	r8, r2
     9e4:	4699      	mov	r9, r3
     9e6:	46a2      	mov	sl, r4
     9e8:	46ab      	mov	fp, r5
     9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ec:	000006ed 	.word	0x000006ed
     9f0:	40000400 	.word	0x40000400
     9f4:	00000f89 	.word	0x00000f89
     9f8:	00000efd 	.word	0x00000efd
     9fc:	00000519 	.word	0x00000519
     a00:	00000fa5 	.word	0x00000fa5
     a04:	00000329 	.word	0x00000329
     a08:	00000351 	.word	0x00000351
     a0c:	41002000 	.word	0x41002000
     a10:	00001081 	.word	0x00001081
     a14:	00000565 	.word	0x00000565

00000a18 <usart_write_wait>:
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a18:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a1a:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a1c:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a1e:	2a00      	cmp	r2, #0
     a20:	d00c      	beq.n	a3c <usart_write_wait+0x24>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a22:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     a24:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a26:	07d2      	lsls	r2, r2, #31
     a28:	d508      	bpl.n	a3c <usart_write_wait+0x24>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a2a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a2c:	2a00      	cmp	r2, #0
     a2e:	d1fc      	bne.n	a2a <usart_write_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     a30:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a32:	2102      	movs	r1, #2
     a34:	7e1a      	ldrb	r2, [r3, #24]
     a36:	420a      	tst	r2, r1
     a38:	d0fc      	beq.n	a34 <usart_write_wait+0x1c>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     a3a:	2000      	movs	r0, #0
}
     a3c:	4770      	bx	lr
     a3e:	46c0      	nop			; (mov r8, r8)

00000a40 <usart_read_wait>:

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a40:	6803      	ldr	r3, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a42:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a44:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a46:	2a00      	cmp	r2, #0
     a48:	d02f      	beq.n	aaa <usart_read_wait+0x6a>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a4a:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     a4c:	3817      	subs	r0, #23
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a4e:	0752      	lsls	r2, r2, #29
     a50:	d52b      	bpl.n	aaa <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a52:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a54:	2a00      	cmp	r2, #0
     a56:	d1fc      	bne.n	a52 <usart_read_wait+0x12>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a58:	8b5a      	ldrh	r2, [r3, #26]
     a5a:	b2d2      	uxtb	r2, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     a5c:	0690      	lsls	r0, r2, #26
     a5e:	d021      	beq.n	aa4 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a60:	0790      	lsls	r0, r2, #30
     a62:	d503      	bpl.n	a6c <usart_read_wait+0x2c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a64:	2202      	movs	r2, #2
     a66:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
     a68:	201a      	movs	r0, #26
     a6a:	e01e      	b.n	aaa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a6c:	0750      	lsls	r0, r2, #29
     a6e:	d503      	bpl.n	a78 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a70:	2204      	movs	r2, #4
     a72:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
     a74:	201e      	movs	r0, #30
     a76:	e018      	b.n	aaa <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a78:	07d0      	lsls	r0, r2, #31
     a7a:	d503      	bpl.n	a84 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a7c:	2201      	movs	r2, #1
     a7e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
     a80:	2013      	movs	r0, #19
     a82:	e012      	b.n	aaa <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a84:	06d0      	lsls	r0, r2, #27
     a86:	d505      	bpl.n	a94 <usart_read_wait+0x54>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a88:	8b59      	ldrh	r1, [r3, #26]
     a8a:	2210      	movs	r2, #16
     a8c:	430a      	orrs	r2, r1
     a8e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
     a90:	2042      	movs	r0, #66	; 0x42
     a92:	e00a      	b.n	aaa <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a94:	0692      	lsls	r2, r2, #26
     a96:	d505      	bpl.n	aa4 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a98:	8b59      	ldrh	r1, [r3, #26]
     a9a:	2220      	movs	r2, #32
     a9c:	430a      	orrs	r2, r1
     a9e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
     aa0:	2041      	movs	r0, #65	; 0x41
     aa2:	e002      	b.n	aaa <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     aa6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     aa8:	2000      	movs	r0, #0
}
     aaa:	4770      	bx	lr

00000aac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	4657      	mov	r7, sl
     ab0:	464e      	mov	r6, r9
     ab2:	b4c0      	push	{r6, r7}
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ab4:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     ab6:	2a00      	cmp	r2, #0
     ab8:	d049      	beq.n	b4e <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     aba:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     abc:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     abe:	2c00      	cmp	r4, #0
     ac0:	d045      	beq.n	b4e <usart_write_buffer_wait+0xa2>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ac2:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ac4:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ac6:	2b00      	cmp	r3, #0
     ac8:	d1fc      	bne.n	ac4 <usart_write_buffer_wait+0x18>
     aca:	468a      	mov	sl, r1
     acc:	4681      	mov	r9, r0
     ace:	1c17      	adds	r7, r2, #0
     ad0:	2600      	movs	r6, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ad2:	2501      	movs	r5, #1
     ad4:	e01f      	b.n	b16 <usart_write_buffer_wait+0x6a>
     ad6:	7e22      	ldrb	r2, [r4, #24]
     ad8:	422a      	tst	r2, r5
     ada:	d104      	bne.n	ae6 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
     adc:	2b01      	cmp	r3, #1
     ade:	d028      	beq.n	b32 <usart_write_buffer_wait+0x86>
     ae0:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ae2:	2b00      	cmp	r3, #0
     ae4:	d1f7      	bne.n	ad6 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     ae6:	1c72      	adds	r2, r6, #1
     ae8:	b292      	uxth	r2, r2
     aea:	4653      	mov	r3, sl
     aec:	5d9b      	ldrb	r3, [r3, r6]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     aee:	4649      	mov	r1, r9
     af0:	7949      	ldrb	r1, [r1, #5]
     af2:	2901      	cmp	r1, #1
     af4:	d002      	beq.n	afc <usart_write_buffer_wait+0x50>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     af6:	b299      	uxth	r1, r3
     af8:	1c16      	adds	r6, r2, #0
     afa:	e005      	b.n	b08 <usart_write_buffer_wait+0x5c>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     afc:	1cb1      	adds	r1, r6, #2
     afe:	b28e      	uxth	r6, r1
     b00:	4651      	mov	r1, sl
     b02:	5c89      	ldrb	r1, [r1, r2]
     b04:	0209      	lsls	r1, r1, #8
     b06:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     b08:	4648      	mov	r0, r9
     b0a:	4b13      	ldr	r3, [pc, #76]	; (b58 <usart_write_buffer_wait+0xac>)
     b0c:	4798      	blx	r3
     b0e:	1e7a      	subs	r2, r7, #1
     b10:	b297      	uxth	r7, r2
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     b12:	2f00      	cmp	r7, #0
     b14:	d015      	beq.n	b42 <usart_write_buffer_wait+0x96>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b16:	7e23      	ldrb	r3, [r4, #24]
     b18:	422b      	tst	r3, r5
     b1a:	d1e4      	bne.n	ae6 <usart_write_buffer_wait+0x3a>
     b1c:	4b0f      	ldr	r3, [pc, #60]	; (b5c <usart_write_buffer_wait+0xb0>)
     b1e:	e7da      	b.n	ad6 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b20:	7e22      	ldrb	r2, [r4, #24]
     b22:	420a      	tst	r2, r1
     b24:	d107      	bne.n	b36 <usart_write_buffer_wait+0x8a>
			break;
		} else if (i == USART_TIMEOUT) {
     b26:	2b01      	cmp	r3, #1
     b28:	d007      	beq.n	b3a <usart_write_buffer_wait+0x8e>
     b2a:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b2c:	2b00      	cmp	r3, #0
     b2e:	d1f7      	bne.n	b20 <usart_write_buffer_wait+0x74>
     b30:	e00d      	b.n	b4e <usart_write_buffer_wait+0xa2>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     b32:	2312      	movs	r3, #18
     b34:	e00b      	b.n	b4e <usart_write_buffer_wait+0xa2>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     b36:	2300      	movs	r3, #0
     b38:	e009      	b.n	b4e <usart_write_buffer_wait+0xa2>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     b3a:	2312      	movs	r3, #18
     b3c:	e007      	b.n	b4e <usart_write_buffer_wait+0xa2>
		}
	}

	return STATUS_OK;
     b3e:	2300      	movs	r3, #0
     b40:	e005      	b.n	b4e <usart_write_buffer_wait+0xa2>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b42:	7e23      	ldrb	r3, [r4, #24]
     b44:	079b      	lsls	r3, r3, #30
     b46:	d4fa      	bmi.n	b3e <usart_write_buffer_wait+0x92>
     b48:	4b04      	ldr	r3, [pc, #16]	; (b5c <usart_write_buffer_wait+0xb0>)
     b4a:	2102      	movs	r1, #2
     b4c:	e7e8      	b.n	b20 <usart_write_buffer_wait+0x74>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     b4e:	1c18      	adds	r0, r3, #0
     b50:	bc0c      	pop	{r2, r3}
     b52:	4691      	mov	r9, r2
     b54:	469a      	mov	sl, r3
     b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b58:	00000a19 	.word	0x00000a19
     b5c:	0000ffff 	.word	0x0000ffff

00000b60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b60:	b508      	push	{r3, lr}
	switch (clock_source) {
     b62:	2808      	cmp	r0, #8
     b64:	d803      	bhi.n	b6e <system_clock_source_get_hz+0xe>
     b66:	0080      	lsls	r0, r0, #2
     b68:	4b1b      	ldr	r3, [pc, #108]	; (bd8 <system_clock_source_get_hz+0x78>)
     b6a:	581b      	ldr	r3, [r3, r0]
     b6c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b6e:	2000      	movs	r0, #0
     b70:	e031      	b.n	bd6 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     b72:	4b1a      	ldr	r3, [pc, #104]	; (bdc <system_clock_source_get_hz+0x7c>)
     b74:	6918      	ldr	r0, [r3, #16]
     b76:	e02e      	b.n	bd6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b78:	4b19      	ldr	r3, [pc, #100]	; (be0 <system_clock_source_get_hz+0x80>)
     b7a:	6a18      	ldr	r0, [r3, #32]
     b7c:	0580      	lsls	r0, r0, #22
     b7e:	0f80      	lsrs	r0, r0, #30
     b80:	4b18      	ldr	r3, [pc, #96]	; (be4 <system_clock_source_get_hz+0x84>)
     b82:	40c3      	lsrs	r3, r0
     b84:	1c18      	adds	r0, r3, #0
     b86:	e026      	b.n	bd6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     b88:	4b14      	ldr	r3, [pc, #80]	; (bdc <system_clock_source_get_hz+0x7c>)
     b8a:	6958      	ldr	r0, [r3, #20]
     b8c:	e023      	b.n	bd6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b8e:	4b13      	ldr	r3, [pc, #76]	; (bdc <system_clock_source_get_hz+0x7c>)
     b90:	681b      	ldr	r3, [r3, #0]
     b92:	2002      	movs	r0, #2
     b94:	4018      	ands	r0, r3
     b96:	d01e      	beq.n	bd6 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b98:	4911      	ldr	r1, [pc, #68]	; (be0 <system_clock_source_get_hz+0x80>)
     b9a:	2210      	movs	r2, #16
     b9c:	68cb      	ldr	r3, [r1, #12]
     b9e:	421a      	tst	r2, r3
     ba0:	d0fc      	beq.n	b9c <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ba2:	4b0e      	ldr	r3, [pc, #56]	; (bdc <system_clock_source_get_hz+0x7c>)
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	075b      	lsls	r3, r3, #29
     ba8:	d514      	bpl.n	bd4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     baa:	2000      	movs	r0, #0
     bac:	4b0e      	ldr	r3, [pc, #56]	; (be8 <system_clock_source_get_hz+0x88>)
     bae:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     bb0:	4b0a      	ldr	r3, [pc, #40]	; (bdc <system_clock_source_get_hz+0x7c>)
     bb2:	689b      	ldr	r3, [r3, #8]
     bb4:	041b      	lsls	r3, r3, #16
     bb6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bb8:	4358      	muls	r0, r3
     bba:	e00c      	b.n	bd6 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bbc:	2350      	movs	r3, #80	; 0x50
     bbe:	4a08      	ldr	r2, [pc, #32]	; (be0 <system_clock_source_get_hz+0x80>)
     bc0:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bc2:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bc4:	075b      	lsls	r3, r3, #29
     bc6:	d506      	bpl.n	bd6 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     bc8:	4b04      	ldr	r3, [pc, #16]	; (bdc <system_clock_source_get_hz+0x7c>)
     bca:	68d8      	ldr	r0, [r3, #12]
     bcc:	e003      	b.n	bd6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     bce:	2080      	movs	r0, #128	; 0x80
     bd0:	0200      	lsls	r0, r0, #8
     bd2:	e000      	b.n	bd6 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     bd4:	4805      	ldr	r0, [pc, #20]	; (bec <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     bd6:	bd08      	pop	{r3, pc}
     bd8:	00002584 	.word	0x00002584
     bdc:	20000098 	.word	0x20000098
     be0:	40000800 	.word	0x40000800
     be4:	007a1200 	.word	0x007a1200
     be8:	00000fa5 	.word	0x00000fa5
     bec:	02dc6c00 	.word	0x02dc6c00

00000bf0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bf0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bf2:	4c0c      	ldr	r4, [pc, #48]	; (c24 <system_clock_source_osc8m_set_config+0x34>)
     bf4:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bf6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bf8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bfa:	7842      	ldrb	r2, [r0, #1]
     bfc:	2001      	movs	r0, #1
     bfe:	4002      	ands	r2, r0
     c00:	0192      	lsls	r2, r2, #6
     c02:	2640      	movs	r6, #64	; 0x40
     c04:	43b3      	bics	r3, r6
     c06:	4313      	orrs	r3, r2
     c08:	1c02      	adds	r2, r0, #0
     c0a:	402a      	ands	r2, r5
     c0c:	01d2      	lsls	r2, r2, #7
     c0e:	307f      	adds	r0, #127	; 0x7f
     c10:	4383      	bics	r3, r0
     c12:	4313      	orrs	r3, r2
     c14:	2203      	movs	r2, #3
     c16:	400a      	ands	r2, r1
     c18:	0212      	lsls	r2, r2, #8
     c1a:	4903      	ldr	r1, [pc, #12]	; (c28 <system_clock_source_osc8m_set_config+0x38>)
     c1c:	400b      	ands	r3, r1
     c1e:	4313      	orrs	r3, r2
     c20:	6223      	str	r3, [r4, #32]
}
     c22:	bd70      	pop	{r4, r5, r6, pc}
     c24:	40000800 	.word	0x40000800
     c28:	fffffcff 	.word	0xfffffcff

00000c2c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c2c:	2808      	cmp	r0, #8
     c2e:	d803      	bhi.n	c38 <system_clock_source_enable+0xc>
     c30:	0080      	lsls	r0, r0, #2
     c32:	4b22      	ldr	r3, [pc, #136]	; (cbc <system_clock_source_enable+0x90>)
     c34:	581b      	ldr	r3, [r3, r0]
     c36:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c38:	2017      	movs	r0, #23
     c3a:	e03e      	b.n	cba <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c3c:	4a20      	ldr	r2, [pc, #128]	; (cc0 <system_clock_source_enable+0x94>)
     c3e:	6a11      	ldr	r1, [r2, #32]
     c40:	2302      	movs	r3, #2
     c42:	430b      	orrs	r3, r1
     c44:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c46:	2000      	movs	r0, #0
     c48:	e037      	b.n	cba <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c4a:	4a1d      	ldr	r2, [pc, #116]	; (cc0 <system_clock_source_enable+0x94>)
     c4c:	6991      	ldr	r1, [r2, #24]
     c4e:	2302      	movs	r3, #2
     c50:	430b      	orrs	r3, r1
     c52:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c54:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     c56:	e030      	b.n	cba <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c58:	4a19      	ldr	r2, [pc, #100]	; (cc0 <system_clock_source_enable+0x94>)
     c5a:	8a11      	ldrh	r1, [r2, #16]
     c5c:	2302      	movs	r3, #2
     c5e:	430b      	orrs	r3, r1
     c60:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c62:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     c64:	e029      	b.n	cba <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c66:	4a16      	ldr	r2, [pc, #88]	; (cc0 <system_clock_source_enable+0x94>)
     c68:	8a91      	ldrh	r1, [r2, #20]
     c6a:	2302      	movs	r3, #2
     c6c:	430b      	orrs	r3, r1
     c6e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c70:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     c72:	e022      	b.n	cba <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c74:	4b13      	ldr	r3, [pc, #76]	; (cc4 <system_clock_source_enable+0x98>)
     c76:	6819      	ldr	r1, [r3, #0]
     c78:	2202      	movs	r2, #2
     c7a:	430a      	orrs	r2, r1
     c7c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c7e:	681a      	ldr	r2, [r3, #0]
     c80:	4b11      	ldr	r3, [pc, #68]	; (cc8 <system_clock_source_enable+0x9c>)
     c82:	4013      	ands	r3, r2
     c84:	4a0e      	ldr	r2, [pc, #56]	; (cc0 <system_clock_source_enable+0x94>)
     c86:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c88:	1c11      	adds	r1, r2, #0
     c8a:	2210      	movs	r2, #16
     c8c:	68cb      	ldr	r3, [r1, #12]
     c8e:	421a      	tst	r2, r3
     c90:	d0fc      	beq.n	c8c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c92:	4a0c      	ldr	r2, [pc, #48]	; (cc4 <system_clock_source_enable+0x98>)
     c94:	6891      	ldr	r1, [r2, #8]
     c96:	4b0a      	ldr	r3, [pc, #40]	; (cc0 <system_clock_source_enable+0x94>)
     c98:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c9a:	6851      	ldr	r1, [r2, #4]
     c9c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c9e:	6812      	ldr	r2, [r2, #0]
     ca0:	b292      	uxth	r2, r2
     ca2:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     ca4:	2000      	movs	r0, #0
     ca6:	e008      	b.n	cba <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     ca8:	4905      	ldr	r1, [pc, #20]	; (cc0 <system_clock_source_enable+0x94>)
     caa:	2244      	movs	r2, #68	; 0x44
     cac:	5c88      	ldrb	r0, [r1, r2]
     cae:	2302      	movs	r3, #2
     cb0:	4303      	orrs	r3, r0
     cb2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     cb4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     cb6:	e000      	b.n	cba <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     cb8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     cba:	4770      	bx	lr
     cbc:	000025a8 	.word	0x000025a8
     cc0:	40000800 	.word	0x40000800
     cc4:	20000098 	.word	0x20000098
     cc8:	0000ff7f 	.word	0x0000ff7f

00000ccc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     ccc:	b530      	push	{r4, r5, lr}
     cce:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cd0:	22c2      	movs	r2, #194	; 0xc2
     cd2:	00d2      	lsls	r2, r2, #3
     cd4:	4b1a      	ldr	r3, [pc, #104]	; (d40 <system_clock_init+0x74>)
     cd6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cd8:	4a1a      	ldr	r2, [pc, #104]	; (d44 <system_clock_init+0x78>)
     cda:	6853      	ldr	r3, [r2, #4]
     cdc:	211e      	movs	r1, #30
     cde:	438b      	bics	r3, r1
     ce0:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     ce2:	2301      	movs	r3, #1
     ce4:	466a      	mov	r2, sp
     ce6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ce8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cea:	4d17      	ldr	r5, [pc, #92]	; (d48 <system_clock_init+0x7c>)
     cec:	b2e0      	uxtb	r0, r4
     cee:	4669      	mov	r1, sp
     cf0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cf2:	3401      	adds	r4, #1
     cf4:	2c25      	cmp	r4, #37	; 0x25
     cf6:	d1f9      	bne.n	cec <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     cf8:	a803      	add	r0, sp, #12
     cfa:	2400      	movs	r4, #0
     cfc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     cfe:	2501      	movs	r5, #1
     d00:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d02:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d04:	4b11      	ldr	r3, [pc, #68]	; (d4c <system_clock_init+0x80>)
     d06:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d08:	2006      	movs	r0, #6
     d0a:	4b11      	ldr	r3, [pc, #68]	; (d50 <system_clock_init+0x84>)
     d0c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d0e:	4b11      	ldr	r3, [pc, #68]	; (d54 <system_clock_init+0x88>)
     d10:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     d12:	4b11      	ldr	r3, [pc, #68]	; (d58 <system_clock_init+0x8c>)
     d14:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     d16:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     d18:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     d1a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d1c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d1e:	466b      	mov	r3, sp
     d20:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d22:	2306      	movs	r3, #6
     d24:	466a      	mov	r2, sp
     d26:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d28:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d2a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d2c:	2000      	movs	r0, #0
     d2e:	4669      	mov	r1, sp
     d30:	4b0a      	ldr	r3, [pc, #40]	; (d5c <system_clock_init+0x90>)
     d32:	4798      	blx	r3
     d34:	2000      	movs	r0, #0
     d36:	4b0a      	ldr	r3, [pc, #40]	; (d60 <system_clock_init+0x94>)
     d38:	4798      	blx	r3
#endif
}
     d3a:	b005      	add	sp, #20
     d3c:	bd30      	pop	{r4, r5, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	40000800 	.word	0x40000800
     d44:	41004000 	.word	0x41004000
     d48:	00000f89 	.word	0x00000f89
     d4c:	00000bf1 	.word	0x00000bf1
     d50:	00000c2d 	.word	0x00000c2d
     d54:	00000d65 	.word	0x00000d65
     d58:	40000400 	.word	0x40000400
     d5c:	00000d89 	.word	0x00000d89
     d60:	00000e2d 	.word	0x00000e2d

00000d64 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d64:	4a06      	ldr	r2, [pc, #24]	; (d80 <system_gclk_init+0x1c>)
     d66:	6991      	ldr	r1, [r2, #24]
     d68:	2308      	movs	r3, #8
     d6a:	430b      	orrs	r3, r1
     d6c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d6e:	2201      	movs	r2, #1
     d70:	4b04      	ldr	r3, [pc, #16]	; (d84 <system_gclk_init+0x20>)
     d72:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d74:	1c19      	adds	r1, r3, #0
     d76:	780b      	ldrb	r3, [r1, #0]
     d78:	4213      	tst	r3, r2
     d7a:	d1fc      	bne.n	d76 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d7c:	4770      	bx	lr
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	40000400 	.word	0x40000400
     d84:	40000c00 	.word	0x40000c00

00000d88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d88:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d8a:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d8c:	780d      	ldrb	r5, [r1, #0]
     d8e:	022d      	lsls	r5, r5, #8
     d90:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d92:	784b      	ldrb	r3, [r1, #1]
     d94:	2b00      	cmp	r3, #0
     d96:	d002      	beq.n	d9e <system_gclk_gen_set_config+0x16>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d98:	2380      	movs	r3, #128	; 0x80
     d9a:	02db      	lsls	r3, r3, #11
     d9c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d9e:	7a4b      	ldrb	r3, [r1, #9]
     da0:	2b00      	cmp	r3, #0
     da2:	d002      	beq.n	daa <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     da4:	2380      	movs	r3, #128	; 0x80
     da6:	031b      	lsls	r3, r3, #12
     da8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     daa:	684e      	ldr	r6, [r1, #4]
     dac:	2e01      	cmp	r6, #1
     dae:	d918      	bls.n	de2 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     db0:	1e73      	subs	r3, r6, #1
     db2:	421e      	tst	r6, r3
     db4:	d110      	bne.n	dd8 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     db6:	2e02      	cmp	r6, #2
     db8:	d906      	bls.n	dc8 <system_gclk_gen_set_config+0x40>
     dba:	2302      	movs	r3, #2
     dbc:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     dbe:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     dc0:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dc2:	429e      	cmp	r6, r3
     dc4:	d8fb      	bhi.n	dbe <system_gclk_gen_set_config+0x36>
     dc6:	e000      	b.n	dca <system_gclk_gen_set_config+0x42>
     dc8:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     dca:	0212      	lsls	r2, r2, #8
     dcc:	4310      	orrs	r0, r2
     dce:	1c04      	adds	r4, r0, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     dd0:	2380      	movs	r3, #128	; 0x80
     dd2:	035b      	lsls	r3, r3, #13
     dd4:	431d      	orrs	r5, r3
     dd6:	e004      	b.n	de2 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     dd8:	0234      	lsls	r4, r6, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     dda:	4304      	orrs	r4, r0
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     ddc:	2380      	movs	r3, #128	; 0x80
     dde:	029b      	lsls	r3, r3, #10
     de0:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     de2:	7a0b      	ldrb	r3, [r1, #8]
     de4:	2b00      	cmp	r3, #0
     de6:	d002      	beq.n	dee <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     de8:	2380      	movs	r3, #128	; 0x80
     dea:	039b      	lsls	r3, r3, #14
     dec:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dee:	4a0c      	ldr	r2, [pc, #48]	; (e20 <system_gclk_gen_set_config+0x98>)
     df0:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     df2:	b25b      	sxtb	r3, r3
     df4:	2b00      	cmp	r3, #0
     df6:	dbfb      	blt.n	df0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     df8:	4b0a      	ldr	r3, [pc, #40]	; (e24 <system_gclk_gen_set_config+0x9c>)
     dfa:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;
     dfc:	4b08      	ldr	r3, [pc, #32]	; (e20 <system_gclk_gen_set_config+0x98>)
     dfe:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e00:	1c1a      	adds	r2, r3, #0
     e02:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     e04:	b25b      	sxtb	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	dbfb      	blt.n	e02 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e0a:	4a05      	ldr	r2, [pc, #20]	; (e20 <system_gclk_gen_set_config+0x98>)
     e0c:	6851      	ldr	r1, [r2, #4]
     e0e:	2380      	movs	r3, #128	; 0x80
     e10:	025b      	lsls	r3, r3, #9
     e12:	400b      	ands	r3, r1
     e14:	431d      	orrs	r5, r3
     e16:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e18:	4b03      	ldr	r3, [pc, #12]	; (e28 <system_gclk_gen_set_config+0xa0>)
     e1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e1c:	bd70      	pop	{r4, r5, r6, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	40000c00 	.word	0x40000c00
     e24:	0000025d 	.word	0x0000025d
     e28:	0000029d 	.word	0x0000029d

00000e2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e30:	4a0b      	ldr	r2, [pc, #44]	; (e60 <system_gclk_gen_enable+0x34>)
     e32:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e34:	b25b      	sxtb	r3, r3
     e36:	2b00      	cmp	r3, #0
     e38:	dbfb      	blt.n	e32 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e3a:	4b0a      	ldr	r3, [pc, #40]	; (e64 <system_gclk_gen_enable+0x38>)
     e3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e3e:	4b0a      	ldr	r3, [pc, #40]	; (e68 <system_gclk_gen_enable+0x3c>)
     e40:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e42:	4a07      	ldr	r2, [pc, #28]	; (e60 <system_gclk_gen_enable+0x34>)
     e44:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     e46:	b25b      	sxtb	r3, r3
     e48:	2b00      	cmp	r3, #0
     e4a:	dbfb      	blt.n	e44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e4c:	4a04      	ldr	r2, [pc, #16]	; (e60 <system_gclk_gen_enable+0x34>)
     e4e:	6853      	ldr	r3, [r2, #4]
     e50:	2180      	movs	r1, #128	; 0x80
     e52:	0249      	lsls	r1, r1, #9
     e54:	430b      	orrs	r3, r1
     e56:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e58:	4b04      	ldr	r3, [pc, #16]	; (e6c <system_gclk_gen_enable+0x40>)
     e5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e5c:	bd10      	pop	{r4, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	40000c00 	.word	0x40000c00
     e64:	0000025d 	.word	0x0000025d
     e68:	40000c04 	.word	0x40000c04
     e6c:	0000029d 	.word	0x0000029d

00000e70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e70:	b570      	push	{r4, r5, r6, lr}
     e72:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e74:	4a1a      	ldr	r2, [pc, #104]	; (ee0 <system_gclk_gen_get_hz+0x70>)
     e76:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e78:	b25b      	sxtb	r3, r3
     e7a:	2b00      	cmp	r3, #0
     e7c:	dbfb      	blt.n	e76 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e7e:	4b19      	ldr	r3, [pc, #100]	; (ee4 <system_gclk_gen_get_hz+0x74>)
     e80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e82:	4b19      	ldr	r3, [pc, #100]	; (ee8 <system_gclk_gen_get_hz+0x78>)
     e84:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e86:	4a16      	ldr	r2, [pc, #88]	; (ee0 <system_gclk_gen_get_hz+0x70>)
     e88:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     e8a:	b25b      	sxtb	r3, r3
     e8c:	2b00      	cmp	r3, #0
     e8e:	dbfb      	blt.n	e88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e90:	4e13      	ldr	r6, [pc, #76]	; (ee0 <system_gclk_gen_get_hz+0x70>)
     e92:	6870      	ldr	r0, [r6, #4]
     e94:	04c0      	lsls	r0, r0, #19
     e96:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e98:	4b14      	ldr	r3, [pc, #80]	; (eec <system_gclk_gen_get_hz+0x7c>)
     e9a:	4798      	blx	r3
     e9c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e9e:	4b12      	ldr	r3, [pc, #72]	; (ee8 <system_gclk_gen_get_hz+0x78>)
     ea0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ea2:	6876      	ldr	r6, [r6, #4]
     ea4:	02f6      	lsls	r6, r6, #11
     ea6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ea8:	4b11      	ldr	r3, [pc, #68]	; (ef0 <system_gclk_gen_get_hz+0x80>)
     eaa:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eac:	4a0c      	ldr	r2, [pc, #48]	; (ee0 <system_gclk_gen_get_hz+0x70>)
     eae:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     eb0:	b25b      	sxtb	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	dbfb      	blt.n	eae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     eb6:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <system_gclk_gen_get_hz+0x70>)
     eb8:	689c      	ldr	r4, [r3, #8]
     eba:	0a24      	lsrs	r4, r4, #8
     ebc:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ebe:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <system_gclk_gen_get_hz+0x84>)
     ec0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ec2:	2e00      	cmp	r6, #0
     ec4:	d107      	bne.n	ed6 <system_gclk_gen_get_hz+0x66>
     ec6:	2c01      	cmp	r4, #1
     ec8:	d907      	bls.n	eda <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     eca:	1c28      	adds	r0, r5, #0
     ecc:	1c21      	adds	r1, r4, #0
     ece:	4b0a      	ldr	r3, [pc, #40]	; (ef8 <system_gclk_gen_get_hz+0x88>)
     ed0:	4798      	blx	r3
     ed2:	1c05      	adds	r5, r0, #0
     ed4:	e001      	b.n	eda <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ed6:	3401      	adds	r4, #1
     ed8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     eda:	1c28      	adds	r0, r5, #0
     edc:	bd70      	pop	{r4, r5, r6, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	40000c00 	.word	0x40000c00
     ee4:	0000025d 	.word	0x0000025d
     ee8:	40000c04 	.word	0x40000c04
     eec:	00000b61 	.word	0x00000b61
     ef0:	40000c08 	.word	0x40000c08
     ef4:	0000029d 	.word	0x0000029d
     ef8:	0000145d 	.word	0x0000145d

00000efc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     efc:	b510      	push	{r4, lr}
     efe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <system_gclk_chan_enable+0x20>)
     f02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f04:	4b06      	ldr	r3, [pc, #24]	; (f20 <system_gclk_chan_enable+0x24>)
     f06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f08:	4a06      	ldr	r2, [pc, #24]	; (f24 <system_gclk_chan_enable+0x28>)
     f0a:	8851      	ldrh	r1, [r2, #2]
     f0c:	2380      	movs	r3, #128	; 0x80
     f0e:	01db      	lsls	r3, r3, #7
     f10:	430b      	orrs	r3, r1
     f12:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <system_gclk_chan_enable+0x2c>)
     f16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f18:	bd10      	pop	{r4, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	0000025d 	.word	0x0000025d
     f20:	40000c02 	.word	0x40000c02
     f24:	40000c00 	.word	0x40000c00
     f28:	0000029d 	.word	0x0000029d

00000f2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f2c:	b510      	push	{r4, lr}
     f2e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f30:	4b0f      	ldr	r3, [pc, #60]	; (f70 <system_gclk_chan_disable+0x44>)
     f32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f34:	4b0f      	ldr	r3, [pc, #60]	; (f74 <system_gclk_chan_disable+0x48>)
     f36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f38:	4b0f      	ldr	r3, [pc, #60]	; (f78 <system_gclk_chan_disable+0x4c>)
     f3a:	885a      	ldrh	r2, [r3, #2]
     f3c:	0512      	lsls	r2, r2, #20
     f3e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f40:	8859      	ldrh	r1, [r3, #2]
     f42:	4a0e      	ldr	r2, [pc, #56]	; (f7c <system_gclk_chan_disable+0x50>)
     f44:	400a      	ands	r2, r1
     f46:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f48:	8859      	ldrh	r1, [r3, #2]
     f4a:	4a0d      	ldr	r2, [pc, #52]	; (f80 <system_gclk_chan_disable+0x54>)
     f4c:	400a      	ands	r2, r1
     f4e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f50:	1c19      	adds	r1, r3, #0
     f52:	2280      	movs	r2, #128	; 0x80
     f54:	01d2      	lsls	r2, r2, #7
     f56:	884b      	ldrh	r3, [r1, #2]
     f58:	4213      	tst	r3, r2
     f5a:	d1fc      	bne.n	f56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f5c:	4906      	ldr	r1, [pc, #24]	; (f78 <system_gclk_chan_disable+0x4c>)
     f5e:	0202      	lsls	r2, r0, #8
     f60:	8848      	ldrh	r0, [r1, #2]
     f62:	4b06      	ldr	r3, [pc, #24]	; (f7c <system_gclk_chan_disable+0x50>)
     f64:	4003      	ands	r3, r0
     f66:	4313      	orrs	r3, r2
     f68:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f6a:	4b06      	ldr	r3, [pc, #24]	; (f84 <system_gclk_chan_disable+0x58>)
     f6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f6e:	bd10      	pop	{r4, pc}
     f70:	0000025d 	.word	0x0000025d
     f74:	40000c02 	.word	0x40000c02
     f78:	40000c00 	.word	0x40000c00
     f7c:	fffff0ff 	.word	0xfffff0ff
     f80:	ffffbfff 	.word	0xffffbfff
     f84:	0000029d 	.word	0x0000029d

00000f88 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     f88:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f8a:	780c      	ldrb	r4, [r1, #0]
     f8c:	0224      	lsls	r4, r4, #8
     f8e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     f90:	4b02      	ldr	r3, [pc, #8]	; (f9c <system_gclk_chan_set_config+0x14>)
     f92:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f94:	b2a4      	uxth	r4, r4
     f96:	4b02      	ldr	r3, [pc, #8]	; (fa0 <system_gclk_chan_set_config+0x18>)
     f98:	805c      	strh	r4, [r3, #2]
}
     f9a:	bd10      	pop	{r4, pc}
     f9c:	00000f2d 	.word	0x00000f2d
     fa0:	40000c00 	.word	0x40000c00

00000fa4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fa4:	b510      	push	{r4, lr}
     fa6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fa8:	4b06      	ldr	r3, [pc, #24]	; (fc4 <system_gclk_chan_get_hz+0x20>)
     faa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fac:	4b06      	ldr	r3, [pc, #24]	; (fc8 <system_gclk_chan_get_hz+0x24>)
     fae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fb0:	4b06      	ldr	r3, [pc, #24]	; (fcc <system_gclk_chan_get_hz+0x28>)
     fb2:	885c      	ldrh	r4, [r3, #2]
     fb4:	0524      	lsls	r4, r4, #20
     fb6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     fb8:	4b05      	ldr	r3, [pc, #20]	; (fd0 <system_gclk_chan_get_hz+0x2c>)
     fba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fbc:	1c20      	adds	r0, r4, #0
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <system_gclk_chan_get_hz+0x30>)
     fc0:	4798      	blx	r3
}
     fc2:	bd10      	pop	{r4, pc}
     fc4:	0000025d 	.word	0x0000025d
     fc8:	40000c02 	.word	0x40000c02
     fcc:	40000c00 	.word	0x40000c00
     fd0:	0000029d 	.word	0x0000029d
     fd4:	00000e71 	.word	0x00000e71

00000fd8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     fd8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     fda:	78d3      	ldrb	r3, [r2, #3]
     fdc:	2b00      	cmp	r3, #0
     fde:	d11e      	bne.n	101e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     fe0:	7814      	ldrb	r4, [r2, #0]
     fe2:	2c80      	cmp	r4, #128	; 0x80
     fe4:	d004      	beq.n	ff0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     fe6:	0624      	lsls	r4, r4, #24
     fe8:	2380      	movs	r3, #128	; 0x80
     fea:	025b      	lsls	r3, r3, #9
     fec:	431c      	orrs	r4, r3
     fee:	e000      	b.n	ff2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     ff0:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     ff2:	7853      	ldrb	r3, [r2, #1]
     ff4:	2502      	movs	r5, #2
     ff6:	43ab      	bics	r3, r5
     ff8:	d10a      	bne.n	1010 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     ffa:	7893      	ldrb	r3, [r2, #2]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d103      	bne.n	1008 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	029b      	lsls	r3, r3, #10
    1004:	431c      	orrs	r4, r3
    1006:	e002      	b.n	100e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1008:	23c0      	movs	r3, #192	; 0xc0
    100a:	02db      	lsls	r3, r3, #11
    100c:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    100e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1010:	7853      	ldrb	r3, [r2, #1]
    1012:	3b01      	subs	r3, #1
    1014:	2b01      	cmp	r3, #1
    1016:	d812      	bhi.n	103e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1018:	4b18      	ldr	r3, [pc, #96]	; (107c <_system_pinmux_config+0xa4>)
    101a:	401c      	ands	r4, r3
    101c:	e00f      	b.n	103e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    101e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1020:	040b      	lsls	r3, r1, #16
    1022:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1024:	24a0      	movs	r4, #160	; 0xa0
    1026:	05e4      	lsls	r4, r4, #23
    1028:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    102a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    102c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    102e:	24d0      	movs	r4, #208	; 0xd0
    1030:	0624      	lsls	r4, r4, #24
    1032:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1034:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1036:	78d3      	ldrb	r3, [r2, #3]
    1038:	2b00      	cmp	r3, #0
    103a:	d018      	beq.n	106e <_system_pinmux_config+0x96>
    103c:	e01c      	b.n	1078 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    103e:	040b      	lsls	r3, r1, #16
    1040:	0c1b      	lsrs	r3, r3, #16
    1042:	25a0      	movs	r5, #160	; 0xa0
    1044:	05ed      	lsls	r5, r5, #23
    1046:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1048:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    104a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    104c:	0c0b      	lsrs	r3, r1, #16
    104e:	25d0      	movs	r5, #208	; 0xd0
    1050:	062d      	lsls	r5, r5, #24
    1052:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1054:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1056:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1058:	78d3      	ldrb	r3, [r2, #3]
    105a:	2b00      	cmp	r3, #0
    105c:	d10c      	bne.n	1078 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    105e:	0363      	lsls	r3, r4, #13
    1060:	d505      	bpl.n	106e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1062:	7893      	ldrb	r3, [r2, #2]
    1064:	2b01      	cmp	r3, #1
    1066:	d101      	bne.n	106c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1068:	6181      	str	r1, [r0, #24]
    106a:	e000      	b.n	106e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    106c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    106e:	7853      	ldrb	r3, [r2, #1]
    1070:	3b01      	subs	r3, #1
    1072:	2b01      	cmp	r3, #1
    1074:	d800      	bhi.n	1078 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1076:	6081      	str	r1, [r0, #8]
		}
	}
}
    1078:	bd30      	pop	{r4, r5, pc}
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	fffbffff 	.word	0xfffbffff

00001080 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1080:	b508      	push	{r3, lr}
    1082:	1c03      	adds	r3, r0, #0
    1084:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1086:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1088:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    108a:	2900      	cmp	r1, #0
    108c:	d104      	bne.n	1098 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    108e:	0958      	lsrs	r0, r3, #5
    1090:	01c0      	lsls	r0, r0, #7
    1092:	4905      	ldr	r1, [pc, #20]	; (10a8 <system_pinmux_pin_set_config+0x28>)
    1094:	468c      	mov	ip, r1
    1096:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1098:	211f      	movs	r1, #31
    109a:	400b      	ands	r3, r1
    109c:	391e      	subs	r1, #30
    109e:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <system_pinmux_pin_set_config+0x2c>)
    10a2:	4798      	blx	r3
}
    10a4:	bd08      	pop	{r3, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	41004400 	.word	0x41004400
    10ac:	00000fd9 	.word	0x00000fd9

000010b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10b0:	4770      	bx	lr
    10b2:	46c0      	nop			; (mov r8, r8)

000010b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10b4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10b6:	4b05      	ldr	r3, [pc, #20]	; (10cc <system_init+0x18>)
    10b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <system_init+0x1c>)
    10bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10be:	4b05      	ldr	r3, [pc, #20]	; (10d4 <system_init+0x20>)
    10c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10c2:	4b05      	ldr	r3, [pc, #20]	; (10d8 <system_init+0x24>)
    10c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10c6:	4b05      	ldr	r3, [pc, #20]	; (10dc <system_init+0x28>)
    10c8:	4798      	blx	r3
}
    10ca:	bd08      	pop	{r3, pc}
    10cc:	00000ccd 	.word	0x00000ccd
    10d0:	000002cd 	.word	0x000002cd
    10d4:	000010b1 	.word	0x000010b1
    10d8:	000010b1 	.word	0x000010b1
    10dc:	000010b1 	.word	0x000010b1

000010e0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    10e0:	e7fe      	b.n	10e0 <Dummy_Handler>
    10e2:	46c0      	nop			; (mov r8, r8)

000010e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    10e4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    10e6:	4b2e      	ldr	r3, [pc, #184]	; (11a0 <Reset_Handler+0xbc>)
    10e8:	4a2e      	ldr	r2, [pc, #184]	; (11a4 <Reset_Handler+0xc0>)
    10ea:	429a      	cmp	r2, r3
    10ec:	d003      	beq.n	10f6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    10ee:	4b2e      	ldr	r3, [pc, #184]	; (11a8 <Reset_Handler+0xc4>)
    10f0:	4a2b      	ldr	r2, [pc, #172]	; (11a0 <Reset_Handler+0xbc>)
    10f2:	429a      	cmp	r2, r3
    10f4:	d304      	bcc.n	1100 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    10f6:	4b2d      	ldr	r3, [pc, #180]	; (11ac <Reset_Handler+0xc8>)
    10f8:	4a2d      	ldr	r2, [pc, #180]	; (11b0 <Reset_Handler+0xcc>)
    10fa:	429a      	cmp	r2, r3
    10fc:	d310      	bcc.n	1120 <Reset_Handler+0x3c>
    10fe:	e01e      	b.n	113e <Reset_Handler+0x5a>
    1100:	4a2c      	ldr	r2, [pc, #176]	; (11b4 <Reset_Handler+0xd0>)
    1102:	4b29      	ldr	r3, [pc, #164]	; (11a8 <Reset_Handler+0xc4>)
    1104:	3303      	adds	r3, #3
    1106:	1a9b      	subs	r3, r3, r2
    1108:	089b      	lsrs	r3, r3, #2
    110a:	3301      	adds	r3, #1
    110c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    110e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1110:	4823      	ldr	r0, [pc, #140]	; (11a0 <Reset_Handler+0xbc>)
    1112:	4924      	ldr	r1, [pc, #144]	; (11a4 <Reset_Handler+0xc0>)
    1114:	588c      	ldr	r4, [r1, r2]
    1116:	5084      	str	r4, [r0, r2]
    1118:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    111a:	429a      	cmp	r2, r3
    111c:	d1fa      	bne.n	1114 <Reset_Handler+0x30>
    111e:	e7ea      	b.n	10f6 <Reset_Handler+0x12>
    1120:	4a25      	ldr	r2, [pc, #148]	; (11b8 <Reset_Handler+0xd4>)
    1122:	4b22      	ldr	r3, [pc, #136]	; (11ac <Reset_Handler+0xc8>)
    1124:	3303      	adds	r3, #3
    1126:	1a9b      	subs	r3, r3, r2
    1128:	089b      	lsrs	r3, r3, #2
    112a:	3301      	adds	r3, #1
    112c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    112e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1130:	481f      	ldr	r0, [pc, #124]	; (11b0 <Reset_Handler+0xcc>)
    1132:	2100      	movs	r1, #0
    1134:	1814      	adds	r4, r2, r0
    1136:	6021      	str	r1, [r4, #0]
    1138:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    113a:	429a      	cmp	r2, r3
    113c:	d1fa      	bne.n	1134 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    113e:	4a1f      	ldr	r2, [pc, #124]	; (11bc <Reset_Handler+0xd8>)
    1140:	21ff      	movs	r1, #255	; 0xff
    1142:	4b1f      	ldr	r3, [pc, #124]	; (11c0 <Reset_Handler+0xdc>)
    1144:	438b      	bics	r3, r1
    1146:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1148:	39fd      	subs	r1, #253	; 0xfd
    114a:	2390      	movs	r3, #144	; 0x90
    114c:	005b      	lsls	r3, r3, #1
    114e:	4a1d      	ldr	r2, [pc, #116]	; (11c4 <Reset_Handler+0xe0>)
    1150:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1152:	481d      	ldr	r0, [pc, #116]	; (11c8 <Reset_Handler+0xe4>)
    1154:	78c3      	ldrb	r3, [r0, #3]
    1156:	2403      	movs	r4, #3
    1158:	43a3      	bics	r3, r4
    115a:	2202      	movs	r2, #2
    115c:	4313      	orrs	r3, r2
    115e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1160:	78c3      	ldrb	r3, [r0, #3]
    1162:	260c      	movs	r6, #12
    1164:	43b3      	bics	r3, r6
    1166:	2108      	movs	r1, #8
    1168:	430b      	orrs	r3, r1
    116a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    116c:	4b17      	ldr	r3, [pc, #92]	; (11cc <Reset_Handler+0xe8>)
    116e:	7b98      	ldrb	r0, [r3, #14]
    1170:	2530      	movs	r5, #48	; 0x30
    1172:	43a8      	bics	r0, r5
    1174:	1c05      	adds	r5, r0, #0
    1176:	2020      	movs	r0, #32
    1178:	4328      	orrs	r0, r5
    117a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    117c:	7b98      	ldrb	r0, [r3, #14]
    117e:	43b0      	bics	r0, r6
    1180:	4301      	orrs	r1, r0
    1182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1184:	7b99      	ldrb	r1, [r3, #14]
    1186:	43a1      	bics	r1, r4
    1188:	430a      	orrs	r2, r1
    118a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    118c:	4a10      	ldr	r2, [pc, #64]	; (11d0 <Reset_Handler+0xec>)
    118e:	6851      	ldr	r1, [r2, #4]
    1190:	2380      	movs	r3, #128	; 0x80
    1192:	430b      	orrs	r3, r1
    1194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    1196:	4b0f      	ldr	r3, [pc, #60]	; (11d4 <Reset_Handler+0xf0>)
    1198:	4798      	blx	r3

        /* Branch to main function */
        main();
    119a:	4b0f      	ldr	r3, [pc, #60]	; (11d8 <Reset_Handler+0xf4>)
    119c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    119e:	e7fe      	b.n	119e <Reset_Handler+0xba>
    11a0:	20000000 	.word	0x20000000
    11a4:	00002694 	.word	0x00002694
    11a8:	20000070 	.word	0x20000070
    11ac:	200000e0 	.word	0x200000e0
    11b0:	20000070 	.word	0x20000070
    11b4:	20000004 	.word	0x20000004
    11b8:	20000074 	.word	0x20000074
    11bc:	e000ed00 	.word	0xe000ed00
    11c0:	00000000 	.word	0x00000000
    11c4:	41007000 	.word	0x41007000
    11c8:	41005000 	.word	0x41005000
    11cc:	41004800 	.word	0x41004800
    11d0:	41004000 	.word	0x41004000
    11d4:	000015d5 	.word	0x000015d5
    11d8:	00001361 	.word	0x00001361

000011dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    11dc:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11de:	4a06      	ldr	r2, [pc, #24]	; (11f8 <_sbrk+0x1c>)
    11e0:	6812      	ldr	r2, [r2, #0]
    11e2:	2a00      	cmp	r2, #0
    11e4:	d102      	bne.n	11ec <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    11e6:	4905      	ldr	r1, [pc, #20]	; (11fc <_sbrk+0x20>)
    11e8:	4a03      	ldr	r2, [pc, #12]	; (11f8 <_sbrk+0x1c>)
    11ea:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    11ec:	4a02      	ldr	r2, [pc, #8]	; (11f8 <_sbrk+0x1c>)
    11ee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    11f0:	18c3      	adds	r3, r0, r3
    11f2:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    11f4:	4770      	bx	lr
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	200000b0 	.word	0x200000b0
    11fc:	200020e0 	.word	0x200020e0

00001200 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1200:	2001      	movs	r0, #1
    1202:	4240      	negs	r0, r0
    1204:	4770      	bx	lr
    1206:	46c0      	nop			; (mov r8, r8)

00001208 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1208:	2380      	movs	r3, #128	; 0x80
    120a:	019b      	lsls	r3, r3, #6
    120c:	604b      	str	r3, [r1, #4]

	return 0;
}
    120e:	2000      	movs	r0, #0
    1210:	4770      	bx	lr
    1212:	46c0      	nop			; (mov r8, r8)

00001214 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1214:	2001      	movs	r0, #1
    1216:	4770      	bx	lr

00001218 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1218:	2000      	movs	r0, #0
    121a:	4770      	bx	lr

0000121c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	b082      	sub	sp, #8
    1220:	1c05      	adds	r5, r0, #0
    1222:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1224:	2200      	movs	r2, #0
    1226:	466b      	mov	r3, sp
    1228:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    122a:	4c06      	ldr	r4, [pc, #24]	; (1244 <usart_serial_getchar+0x28>)
    122c:	1c28      	adds	r0, r5, #0
    122e:	466b      	mov	r3, sp
    1230:	1d99      	adds	r1, r3, #6
    1232:	47a0      	blx	r4
    1234:	2800      	cmp	r0, #0
    1236:	d1f9      	bne.n	122c <usart_serial_getchar+0x10>

	*c = temp;
    1238:	466b      	mov	r3, sp
    123a:	3306      	adds	r3, #6
    123c:	881b      	ldrh	r3, [r3, #0]
    123e:	7033      	strb	r3, [r6, #0]
}
    1240:	b002      	add	sp, #8
    1242:	bd70      	pop	{r4, r5, r6, pc}
    1244:	00000a41 	.word	0x00000a41

00001248 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    124c:	b28c      	uxth	r4, r1
    124e:	4e03      	ldr	r6, [pc, #12]	; (125c <usart_serial_putchar+0x14>)
    1250:	1c28      	adds	r0, r5, #0
    1252:	1c21      	adds	r1, r4, #0
    1254:	47b0      	blx	r6
    1256:	2800      	cmp	r0, #0
    1258:	d1fa      	bne.n	1250 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    125a:	bd70      	pop	{r4, r5, r6, pc}
    125c:	00000a19 	.word	0x00000a19

00001260 <configure_usart>:
    usart_enable(&cdc_uart_module);
}



void configure_usart(void) {
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1264:	2380      	movs	r3, #128	; 0x80
    1266:	05db      	lsls	r3, r3, #23
    1268:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    126a:	2300      	movs	r3, #0
    126c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    126e:	22ff      	movs	r2, #255	; 0xff
    1270:	4669      	mov	r1, sp
    1272:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1274:	2200      	movs	r2, #0
    1276:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1278:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    127a:	2196      	movs	r1, #150	; 0x96
    127c:	0189      	lsls	r1, r1, #6
    127e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1280:	2101      	movs	r1, #1
    1282:	2024      	movs	r0, #36	; 0x24
    1284:	466c      	mov	r4, sp
    1286:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1288:	3001      	adds	r0, #1
    128a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    128c:	3125      	adds	r1, #37	; 0x25
    128e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1290:	3101      	adds	r1, #1
    1292:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1294:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1296:	3105      	adds	r1, #5
    1298:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    129a:	3101      	adds	r1, #1
    129c:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    129e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    12a0:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    12a2:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    12a4:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    12a6:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    12a8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    12aa:	2313      	movs	r3, #19
    12ac:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    12ae:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    12b0:	2380      	movs	r3, #128	; 0x80
    12b2:	035b      	lsls	r3, r3, #13
    12b4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    12b6:	4b14      	ldr	r3, [pc, #80]	; (1308 <configure_usart+0xa8>)
    12b8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    12ba:	4b14      	ldr	r3, [pc, #80]	; (130c <configure_usart+0xac>)
    12bc:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    12be:	2301      	movs	r3, #1
    12c0:	425b      	negs	r3, r3
    12c2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    12c4:	930f      	str	r3, [sp, #60]	; 0x3c

	/*
	while (usart_init(&usart_instance,
			EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	} */
	usart_init(r.in, EDBG_CDC_MODULE, &config_usart);
    12c6:	4c12      	ldr	r4, [pc, #72]	; (1310 <configure_usart+0xb0>)
    12c8:	4e12      	ldr	r6, [pc, #72]	; (1314 <configure_usart+0xb4>)
    12ca:	6860      	ldr	r0, [r4, #4]
    12cc:	1c31      	adds	r1, r6, #0
    12ce:	466a      	mov	r2, sp
    12d0:	4d11      	ldr	r5, [pc, #68]	; (1318 <configure_usart+0xb8>)
    12d2:	47a8      	blx	r5
	
	usart_init(r.out, EDBG_CDC_MODULE, &config_usart);
    12d4:	6820      	ldr	r0, [r4, #0]
    12d6:	1c31      	adds	r1, r6, #0
    12d8:	466a      	mov	r2, sp
    12da:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12dc:	6863      	ldr	r3, [r4, #4]
    12de:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12e0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    12e2:	2b00      	cmp	r3, #0
    12e4:	d1fc      	bne.n	12e0 <configure_usart+0x80>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12e6:	6811      	ldr	r1, [r2, #0]
    12e8:	3302      	adds	r3, #2
    12ea:	430b      	orrs	r3, r1
    12ec:	6013      	str	r3, [r2, #0]
	usart_enable(r.in);
	usart_enable(r.out);
    12ee:	4b08      	ldr	r3, [pc, #32]	; (1310 <configure_usart+0xb0>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12f4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    12f6:	2b00      	cmp	r3, #0
    12f8:	d1fc      	bne.n	12f4 <configure_usart+0x94>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12fa:	6811      	ldr	r1, [r2, #0]
    12fc:	3302      	adds	r3, #2
    12fe:	430b      	orrs	r3, r1
    1300:	6013      	str	r3, [r2, #0]

}
    1302:	b010      	add	sp, #64	; 0x40
    1304:	bd70      	pop	{r4, r5, r6, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	00160002 	.word	0x00160002
    130c:	00170002 	.word	0x00170002
    1310:	200000d4 	.word	0x200000d4
    1314:	42001400 	.word	0x42001400
    1318:	00000729 	.word	0x00000729

0000131c <enablePacketMode>:

void enablePacketMode(void) {	
    131c:	b530      	push	{r4, r5, lr}
    131e:	b083      	sub	sp, #12
	delay_ms(1000);	
    1320:	25fa      	movs	r5, #250	; 0xfa
    1322:	00ad      	lsls	r5, r5, #2
    1324:	1c28      	adds	r0, r5, #0
    1326:	4c09      	ldr	r4, [pc, #36]	; (134c <enablePacketMode+0x30>)
    1328:	47a0      	blx	r4
	unsigned char msg[3];
	msg[0] = '+';
    132a:	a801      	add	r0, sp, #4
    132c:	232b      	movs	r3, #43	; 0x2b
    132e:	7003      	strb	r3, [r0, #0]
	msg[1] = '+';
    1330:	7043      	strb	r3, [r0, #1]
	msg[2] = '+';
    1332:	7083      	strb	r3, [r0, #2]
	int status = sendToRadio(msg, 3, &r);
    1334:	2103      	movs	r1, #3
    1336:	4a06      	ldr	r2, [pc, #24]	; (1350 <enablePacketMode+0x34>)
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <enablePacketMode+0x38>)
    133a:	4798      	blx	r3
    133c:	1c01      	adds	r1, r0, #0
	printf("STATUS: %d", status);
    133e:	4806      	ldr	r0, [pc, #24]	; (1358 <enablePacketMode+0x3c>)
    1340:	4b06      	ldr	r3, [pc, #24]	; (135c <enablePacketMode+0x40>)
    1342:	4798      	blx	r3
	delay_ms(1000);		
    1344:	1c28      	adds	r0, r5, #0
    1346:	47a0      	blx	r4
}
    1348:	b003      	add	sp, #12
    134a:	bd30      	pop	{r4, r5, pc}
    134c:	0000014d 	.word	0x0000014d
    1350:	200000d4 	.word	0x200000d4
    1354:	00000221 	.word	0x00000221
    1358:	000025cc 	.word	0x000025cc
    135c:	00001631 	.word	0x00001631

00001360 <main>:

int main(void)
{
    1360:	b570      	push	{r4, r5, r6, lr}
    1362:	b090      	sub	sp, #64	; 0x40
	system_init();
    1364:	4b2d      	ldr	r3, [pc, #180]	; (141c <main+0xbc>)
    1366:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1368:	2380      	movs	r3, #128	; 0x80
    136a:	05db      	lsls	r3, r3, #23
    136c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    136e:	2300      	movs	r3, #0
    1370:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1372:	22ff      	movs	r2, #255	; 0xff
    1374:	4669      	mov	r1, sp
    1376:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1378:	2200      	movs	r2, #0
    137a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    137c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    137e:	2101      	movs	r1, #1
    1380:	2024      	movs	r0, #36	; 0x24
    1382:	466c      	mov	r4, sp
    1384:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1386:	3001      	adds	r0, #1
    1388:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    138a:	3125      	adds	r1, #37	; 0x25
    138c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    138e:	3101      	adds	r1, #1
    1390:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1392:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1394:	3105      	adds	r1, #5
    1396:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1398:	3101      	adds	r1, #1
    139a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    139c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    139e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    13a0:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    13a2:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    13a4:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    13a6:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    13a8:	2313      	movs	r3, #19
    13aa:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    13ac:	7762      	strb	r2, [r4, #29]
 */
static void configure_console(void) {
    struct usart_config usart_conf;

    usart_get_config_defaults(&usart_conf);
    usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    13ae:	2380      	movs	r3, #128	; 0x80
    13b0:	035b      	lsls	r3, r3, #13
    13b2:	9303      	str	r3, [sp, #12]
    usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    13b4:	4b1a      	ldr	r3, [pc, #104]	; (1420 <main+0xc0>)
    13b6:	930c      	str	r3, [sp, #48]	; 0x30
    usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    13b8:	4b1a      	ldr	r3, [pc, #104]	; (1424 <main+0xc4>)
    13ba:	930d      	str	r3, [sp, #52]	; 0x34
    usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    13bc:	2301      	movs	r3, #1
    13be:	425b      	negs	r3, r3
    13c0:	930e      	str	r3, [sp, #56]	; 0x38
    usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    13c2:	930f      	str	r3, [sp, #60]	; 0x3c
    usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    13c4:	2396      	movs	r3, #150	; 0x96
    13c6:	021b      	lsls	r3, r3, #8
    13c8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    13ca:	4c17      	ldr	r4, [pc, #92]	; (1428 <main+0xc8>)
    13cc:	4b17      	ldr	r3, [pc, #92]	; (142c <main+0xcc>)
    13ce:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    13d0:	4a17      	ldr	r2, [pc, #92]	; (1430 <main+0xd0>)
    13d2:	4b18      	ldr	r3, [pc, #96]	; (1434 <main+0xd4>)
    13d4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    13d6:	4a18      	ldr	r2, [pc, #96]	; (1438 <main+0xd8>)
    13d8:	4b18      	ldr	r3, [pc, #96]	; (143c <main+0xdc>)
    13da:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    13dc:	1c20      	adds	r0, r4, #0
    13de:	4918      	ldr	r1, [pc, #96]	; (1440 <main+0xe0>)
    13e0:	466a      	mov	r2, sp
    13e2:	4b18      	ldr	r3, [pc, #96]	; (1444 <main+0xe4>)
    13e4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    13e6:	4e18      	ldr	r6, [pc, #96]	; (1448 <main+0xe8>)
    13e8:	6833      	ldr	r3, [r6, #0]
    13ea:	6898      	ldr	r0, [r3, #8]
    13ec:	2100      	movs	r1, #0
    13ee:	4d17      	ldr	r5, [pc, #92]	; (144c <main+0xec>)
    13f0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    13f2:	6833      	ldr	r3, [r6, #0]
    13f4:	6858      	ldr	r0, [r3, #4]
    13f6:	2100      	movs	r1, #0
    13f8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13fa:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    13fc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    13fe:	2b00      	cmp	r3, #0
    1400:	d1fc      	bne.n	13fc <main+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1402:	6811      	ldr	r1, [r2, #0]
    1404:	3302      	adds	r3, #2
    1406:	430b      	orrs	r3, r1
    1408:	6013      	str	r3, [r2, #0]

int main(void)
{
	system_init();
	configure_console();		
	configure_usart();
    140a:	4b11      	ldr	r3, [pc, #68]	; (1450 <main+0xf0>)
    140c:	4798      	blx	r3
	delay_init();
    140e:	4b11      	ldr	r3, [pc, #68]	; (1454 <main+0xf4>)
    1410:	4798      	blx	r3
	enablePacketMode();
    1412:	4b11      	ldr	r3, [pc, #68]	; (1458 <main+0xf8>)
    1414:	4798      	blx	r3

			while (usart_write_wait(&usart_instance, temp) != STATUS_OK) {
			}
		}
	}*/
}
    1416:	2000      	movs	r0, #0
    1418:	b010      	add	sp, #64	; 0x40
    141a:	bd70      	pop	{r4, r5, r6, pc}
    141c:	000010b5 	.word	0x000010b5
    1420:	00160002 	.word	0x00160002
    1424:	00170002 	.word	0x00170002
    1428:	200000b4 	.word	0x200000b4
    142c:	200000d0 	.word	0x200000d0
    1430:	00001249 	.word	0x00001249
    1434:	200000cc 	.word	0x200000cc
    1438:	0000121d 	.word	0x0000121d
    143c:	200000c8 	.word	0x200000c8
    1440:	42001400 	.word	0x42001400
    1444:	00000729 	.word	0x00000729
    1448:	2000006c 	.word	0x2000006c
    144c:	00001665 	.word	0x00001665
    1450:	00001261 	.word	0x00001261
    1454:	00000111 	.word	0x00000111
    1458:	0000131d 	.word	0x0000131d

0000145c <__aeabi_uidiv>:
    145c:	2200      	movs	r2, #0
    145e:	0843      	lsrs	r3, r0, #1
    1460:	428b      	cmp	r3, r1
    1462:	d374      	bcc.n	154e <__aeabi_uidiv+0xf2>
    1464:	0903      	lsrs	r3, r0, #4
    1466:	428b      	cmp	r3, r1
    1468:	d35f      	bcc.n	152a <__aeabi_uidiv+0xce>
    146a:	0a03      	lsrs	r3, r0, #8
    146c:	428b      	cmp	r3, r1
    146e:	d344      	bcc.n	14fa <__aeabi_uidiv+0x9e>
    1470:	0b03      	lsrs	r3, r0, #12
    1472:	428b      	cmp	r3, r1
    1474:	d328      	bcc.n	14c8 <__aeabi_uidiv+0x6c>
    1476:	0c03      	lsrs	r3, r0, #16
    1478:	428b      	cmp	r3, r1
    147a:	d30d      	bcc.n	1498 <__aeabi_uidiv+0x3c>
    147c:	22ff      	movs	r2, #255	; 0xff
    147e:	0209      	lsls	r1, r1, #8
    1480:	ba12      	rev	r2, r2
    1482:	0c03      	lsrs	r3, r0, #16
    1484:	428b      	cmp	r3, r1
    1486:	d302      	bcc.n	148e <__aeabi_uidiv+0x32>
    1488:	1212      	asrs	r2, r2, #8
    148a:	0209      	lsls	r1, r1, #8
    148c:	d065      	beq.n	155a <__aeabi_uidiv+0xfe>
    148e:	0b03      	lsrs	r3, r0, #12
    1490:	428b      	cmp	r3, r1
    1492:	d319      	bcc.n	14c8 <__aeabi_uidiv+0x6c>
    1494:	e000      	b.n	1498 <__aeabi_uidiv+0x3c>
    1496:	0a09      	lsrs	r1, r1, #8
    1498:	0bc3      	lsrs	r3, r0, #15
    149a:	428b      	cmp	r3, r1
    149c:	d301      	bcc.n	14a2 <__aeabi_uidiv+0x46>
    149e:	03cb      	lsls	r3, r1, #15
    14a0:	1ac0      	subs	r0, r0, r3
    14a2:	4152      	adcs	r2, r2
    14a4:	0b83      	lsrs	r3, r0, #14
    14a6:	428b      	cmp	r3, r1
    14a8:	d301      	bcc.n	14ae <__aeabi_uidiv+0x52>
    14aa:	038b      	lsls	r3, r1, #14
    14ac:	1ac0      	subs	r0, r0, r3
    14ae:	4152      	adcs	r2, r2
    14b0:	0b43      	lsrs	r3, r0, #13
    14b2:	428b      	cmp	r3, r1
    14b4:	d301      	bcc.n	14ba <__aeabi_uidiv+0x5e>
    14b6:	034b      	lsls	r3, r1, #13
    14b8:	1ac0      	subs	r0, r0, r3
    14ba:	4152      	adcs	r2, r2
    14bc:	0b03      	lsrs	r3, r0, #12
    14be:	428b      	cmp	r3, r1
    14c0:	d301      	bcc.n	14c6 <__aeabi_uidiv+0x6a>
    14c2:	030b      	lsls	r3, r1, #12
    14c4:	1ac0      	subs	r0, r0, r3
    14c6:	4152      	adcs	r2, r2
    14c8:	0ac3      	lsrs	r3, r0, #11
    14ca:	428b      	cmp	r3, r1
    14cc:	d301      	bcc.n	14d2 <__aeabi_uidiv+0x76>
    14ce:	02cb      	lsls	r3, r1, #11
    14d0:	1ac0      	subs	r0, r0, r3
    14d2:	4152      	adcs	r2, r2
    14d4:	0a83      	lsrs	r3, r0, #10
    14d6:	428b      	cmp	r3, r1
    14d8:	d301      	bcc.n	14de <__aeabi_uidiv+0x82>
    14da:	028b      	lsls	r3, r1, #10
    14dc:	1ac0      	subs	r0, r0, r3
    14de:	4152      	adcs	r2, r2
    14e0:	0a43      	lsrs	r3, r0, #9
    14e2:	428b      	cmp	r3, r1
    14e4:	d301      	bcc.n	14ea <__aeabi_uidiv+0x8e>
    14e6:	024b      	lsls	r3, r1, #9
    14e8:	1ac0      	subs	r0, r0, r3
    14ea:	4152      	adcs	r2, r2
    14ec:	0a03      	lsrs	r3, r0, #8
    14ee:	428b      	cmp	r3, r1
    14f0:	d301      	bcc.n	14f6 <__aeabi_uidiv+0x9a>
    14f2:	020b      	lsls	r3, r1, #8
    14f4:	1ac0      	subs	r0, r0, r3
    14f6:	4152      	adcs	r2, r2
    14f8:	d2cd      	bcs.n	1496 <__aeabi_uidiv+0x3a>
    14fa:	09c3      	lsrs	r3, r0, #7
    14fc:	428b      	cmp	r3, r1
    14fe:	d301      	bcc.n	1504 <__aeabi_uidiv+0xa8>
    1500:	01cb      	lsls	r3, r1, #7
    1502:	1ac0      	subs	r0, r0, r3
    1504:	4152      	adcs	r2, r2
    1506:	0983      	lsrs	r3, r0, #6
    1508:	428b      	cmp	r3, r1
    150a:	d301      	bcc.n	1510 <__aeabi_uidiv+0xb4>
    150c:	018b      	lsls	r3, r1, #6
    150e:	1ac0      	subs	r0, r0, r3
    1510:	4152      	adcs	r2, r2
    1512:	0943      	lsrs	r3, r0, #5
    1514:	428b      	cmp	r3, r1
    1516:	d301      	bcc.n	151c <__aeabi_uidiv+0xc0>
    1518:	014b      	lsls	r3, r1, #5
    151a:	1ac0      	subs	r0, r0, r3
    151c:	4152      	adcs	r2, r2
    151e:	0903      	lsrs	r3, r0, #4
    1520:	428b      	cmp	r3, r1
    1522:	d301      	bcc.n	1528 <__aeabi_uidiv+0xcc>
    1524:	010b      	lsls	r3, r1, #4
    1526:	1ac0      	subs	r0, r0, r3
    1528:	4152      	adcs	r2, r2
    152a:	08c3      	lsrs	r3, r0, #3
    152c:	428b      	cmp	r3, r1
    152e:	d301      	bcc.n	1534 <__aeabi_uidiv+0xd8>
    1530:	00cb      	lsls	r3, r1, #3
    1532:	1ac0      	subs	r0, r0, r3
    1534:	4152      	adcs	r2, r2
    1536:	0883      	lsrs	r3, r0, #2
    1538:	428b      	cmp	r3, r1
    153a:	d301      	bcc.n	1540 <__aeabi_uidiv+0xe4>
    153c:	008b      	lsls	r3, r1, #2
    153e:	1ac0      	subs	r0, r0, r3
    1540:	4152      	adcs	r2, r2
    1542:	0843      	lsrs	r3, r0, #1
    1544:	428b      	cmp	r3, r1
    1546:	d301      	bcc.n	154c <__aeabi_uidiv+0xf0>
    1548:	004b      	lsls	r3, r1, #1
    154a:	1ac0      	subs	r0, r0, r3
    154c:	4152      	adcs	r2, r2
    154e:	1a41      	subs	r1, r0, r1
    1550:	d200      	bcs.n	1554 <__aeabi_uidiv+0xf8>
    1552:	4601      	mov	r1, r0
    1554:	4152      	adcs	r2, r2
    1556:	4610      	mov	r0, r2
    1558:	4770      	bx	lr
    155a:	e7ff      	b.n	155c <__aeabi_uidiv+0x100>
    155c:	b501      	push	{r0, lr}
    155e:	2000      	movs	r0, #0
    1560:	f000 f80c 	bl	157c <__aeabi_idiv0>
    1564:	bd02      	pop	{r1, pc}
    1566:	46c0      	nop			; (mov r8, r8)

00001568 <__aeabi_uidivmod>:
    1568:	2900      	cmp	r1, #0
    156a:	d0f7      	beq.n	155c <__aeabi_uidiv+0x100>
    156c:	b503      	push	{r0, r1, lr}
    156e:	f7ff ff75 	bl	145c <__aeabi_uidiv>
    1572:	bc0e      	pop	{r1, r2, r3}
    1574:	4342      	muls	r2, r0
    1576:	1a89      	subs	r1, r1, r2
    1578:	4718      	bx	r3
    157a:	46c0      	nop			; (mov r8, r8)

0000157c <__aeabi_idiv0>:
    157c:	4770      	bx	lr
    157e:	46c0      	nop			; (mov r8, r8)

00001580 <__aeabi_lmul>:
    1580:	b5f0      	push	{r4, r5, r6, r7, lr}
    1582:	464f      	mov	r7, r9
    1584:	4646      	mov	r6, r8
    1586:	0405      	lsls	r5, r0, #16
    1588:	0c2d      	lsrs	r5, r5, #16
    158a:	1c2c      	adds	r4, r5, #0
    158c:	b4c0      	push	{r6, r7}
    158e:	0417      	lsls	r7, r2, #16
    1590:	0c16      	lsrs	r6, r2, #16
    1592:	0c3f      	lsrs	r7, r7, #16
    1594:	4699      	mov	r9, r3
    1596:	0c03      	lsrs	r3, r0, #16
    1598:	437c      	muls	r4, r7
    159a:	4375      	muls	r5, r6
    159c:	435f      	muls	r7, r3
    159e:	4373      	muls	r3, r6
    15a0:	197d      	adds	r5, r7, r5
    15a2:	0c26      	lsrs	r6, r4, #16
    15a4:	19ad      	adds	r5, r5, r6
    15a6:	469c      	mov	ip, r3
    15a8:	42af      	cmp	r7, r5
    15aa:	d903      	bls.n	15b4 <__aeabi_lmul+0x34>
    15ac:	2380      	movs	r3, #128	; 0x80
    15ae:	025b      	lsls	r3, r3, #9
    15b0:	4698      	mov	r8, r3
    15b2:	44c4      	add	ip, r8
    15b4:	464b      	mov	r3, r9
    15b6:	4351      	muls	r1, r2
    15b8:	4343      	muls	r3, r0
    15ba:	0424      	lsls	r4, r4, #16
    15bc:	0c2e      	lsrs	r6, r5, #16
    15be:	0c24      	lsrs	r4, r4, #16
    15c0:	042d      	lsls	r5, r5, #16
    15c2:	4466      	add	r6, ip
    15c4:	192c      	adds	r4, r5, r4
    15c6:	1859      	adds	r1, r3, r1
    15c8:	1989      	adds	r1, r1, r6
    15ca:	1c20      	adds	r0, r4, #0
    15cc:	bc0c      	pop	{r2, r3}
    15ce:	4690      	mov	r8, r2
    15d0:	4699      	mov	r9, r3
    15d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000015d4 <__libc_init_array>:
    15d4:	4b0e      	ldr	r3, [pc, #56]	; (1610 <__libc_init_array+0x3c>)
    15d6:	b570      	push	{r4, r5, r6, lr}
    15d8:	2500      	movs	r5, #0
    15da:	1c1e      	adds	r6, r3, #0
    15dc:	4c0d      	ldr	r4, [pc, #52]	; (1614 <__libc_init_array+0x40>)
    15de:	1ae4      	subs	r4, r4, r3
    15e0:	10a4      	asrs	r4, r4, #2
    15e2:	42a5      	cmp	r5, r4
    15e4:	d004      	beq.n	15f0 <__libc_init_array+0x1c>
    15e6:	00ab      	lsls	r3, r5, #2
    15e8:	58f3      	ldr	r3, [r6, r3]
    15ea:	4798      	blx	r3
    15ec:	3501      	adds	r5, #1
    15ee:	e7f8      	b.n	15e2 <__libc_init_array+0xe>
    15f0:	f001 f840 	bl	2674 <_init>
    15f4:	4b08      	ldr	r3, [pc, #32]	; (1618 <__libc_init_array+0x44>)
    15f6:	2500      	movs	r5, #0
    15f8:	1c1e      	adds	r6, r3, #0
    15fa:	4c08      	ldr	r4, [pc, #32]	; (161c <__libc_init_array+0x48>)
    15fc:	1ae4      	subs	r4, r4, r3
    15fe:	10a4      	asrs	r4, r4, #2
    1600:	42a5      	cmp	r5, r4
    1602:	d004      	beq.n	160e <__libc_init_array+0x3a>
    1604:	00ab      	lsls	r3, r5, #2
    1606:	58f3      	ldr	r3, [r6, r3]
    1608:	4798      	blx	r3
    160a:	3501      	adds	r5, #1
    160c:	e7f8      	b.n	1600 <__libc_init_array+0x2c>
    160e:	bd70      	pop	{r4, r5, r6, pc}
    1610:	00002680 	.word	0x00002680
    1614:	00002680 	.word	0x00002680
    1618:	00002680 	.word	0x00002680
    161c:	00002684 	.word	0x00002684

00001620 <memset>:
    1620:	1c03      	adds	r3, r0, #0
    1622:	1882      	adds	r2, r0, r2
    1624:	4293      	cmp	r3, r2
    1626:	d002      	beq.n	162e <memset+0xe>
    1628:	7019      	strb	r1, [r3, #0]
    162a:	3301      	adds	r3, #1
    162c:	e7fa      	b.n	1624 <memset+0x4>
    162e:	4770      	bx	lr

00001630 <iprintf>:
    1630:	b40f      	push	{r0, r1, r2, r3}
    1632:	4b0b      	ldr	r3, [pc, #44]	; (1660 <iprintf+0x30>)
    1634:	b513      	push	{r0, r1, r4, lr}
    1636:	681c      	ldr	r4, [r3, #0]
    1638:	2c00      	cmp	r4, #0
    163a:	d005      	beq.n	1648 <iprintf+0x18>
    163c:	69a3      	ldr	r3, [r4, #24]
    163e:	2b00      	cmp	r3, #0
    1640:	d102      	bne.n	1648 <iprintf+0x18>
    1642:	1c20      	adds	r0, r4, #0
    1644:	f000 f996 	bl	1974 <__sinit>
    1648:	ab05      	add	r3, sp, #20
    164a:	1c20      	adds	r0, r4, #0
    164c:	68a1      	ldr	r1, [r4, #8]
    164e:	9a04      	ldr	r2, [sp, #16]
    1650:	9301      	str	r3, [sp, #4]
    1652:	f000 faf1 	bl	1c38 <_vfiprintf_r>
    1656:	bc16      	pop	{r1, r2, r4}
    1658:	bc08      	pop	{r3}
    165a:	b004      	add	sp, #16
    165c:	4718      	bx	r3
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	2000006c 	.word	0x2000006c

00001664 <setbuf>:
    1664:	b508      	push	{r3, lr}
    1666:	424a      	negs	r2, r1
    1668:	414a      	adcs	r2, r1
    166a:	2380      	movs	r3, #128	; 0x80
    166c:	0052      	lsls	r2, r2, #1
    166e:	00db      	lsls	r3, r3, #3
    1670:	f000 f802 	bl	1678 <setvbuf>
    1674:	bd08      	pop	{r3, pc}
	...

00001678 <setvbuf>:
    1678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    167a:	1c1e      	adds	r6, r3, #0
    167c:	4b3c      	ldr	r3, [pc, #240]	; (1770 <setvbuf+0xf8>)
    167e:	1c04      	adds	r4, r0, #0
    1680:	681d      	ldr	r5, [r3, #0]
    1682:	1c0f      	adds	r7, r1, #0
    1684:	9201      	str	r2, [sp, #4]
    1686:	2d00      	cmp	r5, #0
    1688:	d005      	beq.n	1696 <setvbuf+0x1e>
    168a:	69ab      	ldr	r3, [r5, #24]
    168c:	2b00      	cmp	r3, #0
    168e:	d102      	bne.n	1696 <setvbuf+0x1e>
    1690:	1c28      	adds	r0, r5, #0
    1692:	f000 f96f 	bl	1974 <__sinit>
    1696:	4b37      	ldr	r3, [pc, #220]	; (1774 <setvbuf+0xfc>)
    1698:	429c      	cmp	r4, r3
    169a:	d101      	bne.n	16a0 <setvbuf+0x28>
    169c:	686c      	ldr	r4, [r5, #4]
    169e:	e008      	b.n	16b2 <setvbuf+0x3a>
    16a0:	4b35      	ldr	r3, [pc, #212]	; (1778 <setvbuf+0x100>)
    16a2:	429c      	cmp	r4, r3
    16a4:	d101      	bne.n	16aa <setvbuf+0x32>
    16a6:	68ac      	ldr	r4, [r5, #8]
    16a8:	e003      	b.n	16b2 <setvbuf+0x3a>
    16aa:	4b34      	ldr	r3, [pc, #208]	; (177c <setvbuf+0x104>)
    16ac:	429c      	cmp	r4, r3
    16ae:	d100      	bne.n	16b2 <setvbuf+0x3a>
    16b0:	68ec      	ldr	r4, [r5, #12]
    16b2:	9b01      	ldr	r3, [sp, #4]
    16b4:	2b02      	cmp	r3, #2
    16b6:	d858      	bhi.n	176a <setvbuf+0xf2>
    16b8:	2e00      	cmp	r6, #0
    16ba:	db56      	blt.n	176a <setvbuf+0xf2>
    16bc:	1c28      	adds	r0, r5, #0
    16be:	1c21      	adds	r1, r4, #0
    16c0:	f000 f8ea 	bl	1898 <_fflush_r>
    16c4:	2300      	movs	r3, #0
    16c6:	6063      	str	r3, [r4, #4]
    16c8:	61a3      	str	r3, [r4, #24]
    16ca:	89a3      	ldrh	r3, [r4, #12]
    16cc:	061b      	lsls	r3, r3, #24
    16ce:	d503      	bpl.n	16d8 <setvbuf+0x60>
    16d0:	1c28      	adds	r0, r5, #0
    16d2:	6921      	ldr	r1, [r4, #16]
    16d4:	f000 f9ea 	bl	1aac <_free_r>
    16d8:	2283      	movs	r2, #131	; 0x83
    16da:	89a3      	ldrh	r3, [r4, #12]
    16dc:	4393      	bics	r3, r2
    16de:	81a3      	strh	r3, [r4, #12]
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	2b02      	cmp	r3, #2
    16e4:	d013      	beq.n	170e <setvbuf+0x96>
    16e6:	2f00      	cmp	r7, #0
    16e8:	d125      	bne.n	1736 <setvbuf+0xbe>
    16ea:	2e00      	cmp	r6, #0
    16ec:	d101      	bne.n	16f2 <setvbuf+0x7a>
    16ee:	2680      	movs	r6, #128	; 0x80
    16f0:	00f6      	lsls	r6, r6, #3
    16f2:	1c30      	adds	r0, r6, #0
    16f4:	f000 f9d0 	bl	1a98 <malloc>
    16f8:	1e07      	subs	r7, r0, #0
    16fa:	d118      	bne.n	172e <setvbuf+0xb6>
    16fc:	2080      	movs	r0, #128	; 0x80
    16fe:	00c0      	lsls	r0, r0, #3
    1700:	f000 f9ca 	bl	1a98 <malloc>
    1704:	1e07      	subs	r7, r0, #0
    1706:	d110      	bne.n	172a <setvbuf+0xb2>
    1708:	2001      	movs	r0, #1
    170a:	4240      	negs	r0, r0
    170c:	e000      	b.n	1710 <setvbuf+0x98>
    170e:	2000      	movs	r0, #0
    1710:	2202      	movs	r2, #2
    1712:	89a3      	ldrh	r3, [r4, #12]
    1714:	4313      	orrs	r3, r2
    1716:	81a3      	strh	r3, [r4, #12]
    1718:	2300      	movs	r3, #0
    171a:	60a3      	str	r3, [r4, #8]
    171c:	1c23      	adds	r3, r4, #0
    171e:	3347      	adds	r3, #71	; 0x47
    1720:	6023      	str	r3, [r4, #0]
    1722:	6123      	str	r3, [r4, #16]
    1724:	2301      	movs	r3, #1
    1726:	6163      	str	r3, [r4, #20]
    1728:	e021      	b.n	176e <setvbuf+0xf6>
    172a:	2680      	movs	r6, #128	; 0x80
    172c:	00f6      	lsls	r6, r6, #3
    172e:	2280      	movs	r2, #128	; 0x80
    1730:	89a3      	ldrh	r3, [r4, #12]
    1732:	4313      	orrs	r3, r2
    1734:	81a3      	strh	r3, [r4, #12]
    1736:	9b01      	ldr	r3, [sp, #4]
    1738:	2b01      	cmp	r3, #1
    173a:	d105      	bne.n	1748 <setvbuf+0xd0>
    173c:	89a3      	ldrh	r3, [r4, #12]
    173e:	9a01      	ldr	r2, [sp, #4]
    1740:	431a      	orrs	r2, r3
    1742:	4273      	negs	r3, r6
    1744:	81a2      	strh	r2, [r4, #12]
    1746:	61a3      	str	r3, [r4, #24]
    1748:	4b0d      	ldr	r3, [pc, #52]	; (1780 <setvbuf+0x108>)
    174a:	2000      	movs	r0, #0
    174c:	62ab      	str	r3, [r5, #40]	; 0x28
    174e:	89a2      	ldrh	r2, [r4, #12]
    1750:	6027      	str	r7, [r4, #0]
    1752:	6127      	str	r7, [r4, #16]
    1754:	6166      	str	r6, [r4, #20]
    1756:	0713      	lsls	r3, r2, #28
    1758:	d509      	bpl.n	176e <setvbuf+0xf6>
    175a:	2303      	movs	r3, #3
    175c:	401a      	ands	r2, r3
    175e:	4253      	negs	r3, r2
    1760:	4153      	adcs	r3, r2
    1762:	425b      	negs	r3, r3
    1764:	401e      	ands	r6, r3
    1766:	60a6      	str	r6, [r4, #8]
    1768:	e001      	b.n	176e <setvbuf+0xf6>
    176a:	2001      	movs	r0, #1
    176c:	4240      	negs	r0, r0
    176e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1770:	2000006c 	.word	0x2000006c
    1774:	000025e0 	.word	0x000025e0
    1778:	00002600 	.word	0x00002600
    177c:	00002620 	.word	0x00002620
    1780:	000018f1 	.word	0x000018f1

00001784 <__sflush_r>:
    1784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1786:	898a      	ldrh	r2, [r1, #12]
    1788:	1c05      	adds	r5, r0, #0
    178a:	1c0c      	adds	r4, r1, #0
    178c:	0713      	lsls	r3, r2, #28
    178e:	d45e      	bmi.n	184e <__sflush_r+0xca>
    1790:	684b      	ldr	r3, [r1, #4]
    1792:	2b00      	cmp	r3, #0
    1794:	dc02      	bgt.n	179c <__sflush_r+0x18>
    1796:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1798:	2b00      	cmp	r3, #0
    179a:	dd1a      	ble.n	17d2 <__sflush_r+0x4e>
    179c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    179e:	2f00      	cmp	r7, #0
    17a0:	d017      	beq.n	17d2 <__sflush_r+0x4e>
    17a2:	2300      	movs	r3, #0
    17a4:	682e      	ldr	r6, [r5, #0]
    17a6:	602b      	str	r3, [r5, #0]
    17a8:	2380      	movs	r3, #128	; 0x80
    17aa:	015b      	lsls	r3, r3, #5
    17ac:	401a      	ands	r2, r3
    17ae:	d001      	beq.n	17b4 <__sflush_r+0x30>
    17b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    17b2:	e015      	b.n	17e0 <__sflush_r+0x5c>
    17b4:	1c28      	adds	r0, r5, #0
    17b6:	6a21      	ldr	r1, [r4, #32]
    17b8:	2301      	movs	r3, #1
    17ba:	47b8      	blx	r7
    17bc:	1c02      	adds	r2, r0, #0
    17be:	1c43      	adds	r3, r0, #1
    17c0:	d10e      	bne.n	17e0 <__sflush_r+0x5c>
    17c2:	682b      	ldr	r3, [r5, #0]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d00b      	beq.n	17e0 <__sflush_r+0x5c>
    17c8:	2b1d      	cmp	r3, #29
    17ca:	d001      	beq.n	17d0 <__sflush_r+0x4c>
    17cc:	2b16      	cmp	r3, #22
    17ce:	d102      	bne.n	17d6 <__sflush_r+0x52>
    17d0:	602e      	str	r6, [r5, #0]
    17d2:	2000      	movs	r0, #0
    17d4:	e05e      	b.n	1894 <__sflush_r+0x110>
    17d6:	2140      	movs	r1, #64	; 0x40
    17d8:	89a3      	ldrh	r3, [r4, #12]
    17da:	430b      	orrs	r3, r1
    17dc:	81a3      	strh	r3, [r4, #12]
    17de:	e059      	b.n	1894 <__sflush_r+0x110>
    17e0:	89a3      	ldrh	r3, [r4, #12]
    17e2:	075b      	lsls	r3, r3, #29
    17e4:	d506      	bpl.n	17f4 <__sflush_r+0x70>
    17e6:	6863      	ldr	r3, [r4, #4]
    17e8:	1ad2      	subs	r2, r2, r3
    17ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    17ec:	2b00      	cmp	r3, #0
    17ee:	d001      	beq.n	17f4 <__sflush_r+0x70>
    17f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    17f2:	1ad2      	subs	r2, r2, r3
    17f4:	2300      	movs	r3, #0
    17f6:	1c28      	adds	r0, r5, #0
    17f8:	6a21      	ldr	r1, [r4, #32]
    17fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    17fc:	47b8      	blx	r7
    17fe:	89a3      	ldrh	r3, [r4, #12]
    1800:	1c42      	adds	r2, r0, #1
    1802:	d106      	bne.n	1812 <__sflush_r+0x8e>
    1804:	682a      	ldr	r2, [r5, #0]
    1806:	2a00      	cmp	r2, #0
    1808:	d003      	beq.n	1812 <__sflush_r+0x8e>
    180a:	2a1d      	cmp	r2, #29
    180c:	d001      	beq.n	1812 <__sflush_r+0x8e>
    180e:	2a16      	cmp	r2, #22
    1810:	d119      	bne.n	1846 <__sflush_r+0xc2>
    1812:	2200      	movs	r2, #0
    1814:	6062      	str	r2, [r4, #4]
    1816:	6922      	ldr	r2, [r4, #16]
    1818:	6022      	str	r2, [r4, #0]
    181a:	04db      	lsls	r3, r3, #19
    181c:	d505      	bpl.n	182a <__sflush_r+0xa6>
    181e:	1c43      	adds	r3, r0, #1
    1820:	d102      	bne.n	1828 <__sflush_r+0xa4>
    1822:	682b      	ldr	r3, [r5, #0]
    1824:	2b00      	cmp	r3, #0
    1826:	d100      	bne.n	182a <__sflush_r+0xa6>
    1828:	6560      	str	r0, [r4, #84]	; 0x54
    182a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    182c:	602e      	str	r6, [r5, #0]
    182e:	2900      	cmp	r1, #0
    1830:	d0cf      	beq.n	17d2 <__sflush_r+0x4e>
    1832:	1c23      	adds	r3, r4, #0
    1834:	3344      	adds	r3, #68	; 0x44
    1836:	4299      	cmp	r1, r3
    1838:	d002      	beq.n	1840 <__sflush_r+0xbc>
    183a:	1c28      	adds	r0, r5, #0
    183c:	f000 f936 	bl	1aac <_free_r>
    1840:	2000      	movs	r0, #0
    1842:	6360      	str	r0, [r4, #52]	; 0x34
    1844:	e026      	b.n	1894 <__sflush_r+0x110>
    1846:	2240      	movs	r2, #64	; 0x40
    1848:	4313      	orrs	r3, r2
    184a:	81a3      	strh	r3, [r4, #12]
    184c:	e022      	b.n	1894 <__sflush_r+0x110>
    184e:	690f      	ldr	r7, [r1, #16]
    1850:	2f00      	cmp	r7, #0
    1852:	d0be      	beq.n	17d2 <__sflush_r+0x4e>
    1854:	680b      	ldr	r3, [r1, #0]
    1856:	600f      	str	r7, [r1, #0]
    1858:	1bdb      	subs	r3, r3, r7
    185a:	9301      	str	r3, [sp, #4]
    185c:	2300      	movs	r3, #0
    185e:	0792      	lsls	r2, r2, #30
    1860:	d100      	bne.n	1864 <__sflush_r+0xe0>
    1862:	694b      	ldr	r3, [r1, #20]
    1864:	60a3      	str	r3, [r4, #8]
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	2b00      	cmp	r3, #0
    186a:	ddb2      	ble.n	17d2 <__sflush_r+0x4e>
    186c:	1c28      	adds	r0, r5, #0
    186e:	6a21      	ldr	r1, [r4, #32]
    1870:	1c3a      	adds	r2, r7, #0
    1872:	9b01      	ldr	r3, [sp, #4]
    1874:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1876:	47b0      	blx	r6
    1878:	2800      	cmp	r0, #0
    187a:	dc06      	bgt.n	188a <__sflush_r+0x106>
    187c:	2240      	movs	r2, #64	; 0x40
    187e:	2001      	movs	r0, #1
    1880:	89a3      	ldrh	r3, [r4, #12]
    1882:	4240      	negs	r0, r0
    1884:	4313      	orrs	r3, r2
    1886:	81a3      	strh	r3, [r4, #12]
    1888:	e004      	b.n	1894 <__sflush_r+0x110>
    188a:	9b01      	ldr	r3, [sp, #4]
    188c:	183f      	adds	r7, r7, r0
    188e:	1a1b      	subs	r3, r3, r0
    1890:	9301      	str	r3, [sp, #4]
    1892:	e7e8      	b.n	1866 <__sflush_r+0xe2>
    1894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001898 <_fflush_r>:
    1898:	b538      	push	{r3, r4, r5, lr}
    189a:	690b      	ldr	r3, [r1, #16]
    189c:	1c05      	adds	r5, r0, #0
    189e:	1c0c      	adds	r4, r1, #0
    18a0:	2b00      	cmp	r3, #0
    18a2:	d101      	bne.n	18a8 <_fflush_r+0x10>
    18a4:	2000      	movs	r0, #0
    18a6:	e01c      	b.n	18e2 <_fflush_r+0x4a>
    18a8:	2800      	cmp	r0, #0
    18aa:	d004      	beq.n	18b6 <_fflush_r+0x1e>
    18ac:	6983      	ldr	r3, [r0, #24]
    18ae:	2b00      	cmp	r3, #0
    18b0:	d101      	bne.n	18b6 <_fflush_r+0x1e>
    18b2:	f000 f85f 	bl	1974 <__sinit>
    18b6:	4b0b      	ldr	r3, [pc, #44]	; (18e4 <_fflush_r+0x4c>)
    18b8:	429c      	cmp	r4, r3
    18ba:	d101      	bne.n	18c0 <_fflush_r+0x28>
    18bc:	686c      	ldr	r4, [r5, #4]
    18be:	e008      	b.n	18d2 <_fflush_r+0x3a>
    18c0:	4b09      	ldr	r3, [pc, #36]	; (18e8 <_fflush_r+0x50>)
    18c2:	429c      	cmp	r4, r3
    18c4:	d101      	bne.n	18ca <_fflush_r+0x32>
    18c6:	68ac      	ldr	r4, [r5, #8]
    18c8:	e003      	b.n	18d2 <_fflush_r+0x3a>
    18ca:	4b08      	ldr	r3, [pc, #32]	; (18ec <_fflush_r+0x54>)
    18cc:	429c      	cmp	r4, r3
    18ce:	d100      	bne.n	18d2 <_fflush_r+0x3a>
    18d0:	68ec      	ldr	r4, [r5, #12]
    18d2:	220c      	movs	r2, #12
    18d4:	5ea3      	ldrsh	r3, [r4, r2]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d0e4      	beq.n	18a4 <_fflush_r+0xc>
    18da:	1c28      	adds	r0, r5, #0
    18dc:	1c21      	adds	r1, r4, #0
    18de:	f7ff ff51 	bl	1784 <__sflush_r>
    18e2:	bd38      	pop	{r3, r4, r5, pc}
    18e4:	000025e0 	.word	0x000025e0
    18e8:	00002600 	.word	0x00002600
    18ec:	00002620 	.word	0x00002620

000018f0 <_cleanup_r>:
    18f0:	b508      	push	{r3, lr}
    18f2:	4902      	ldr	r1, [pc, #8]	; (18fc <_cleanup_r+0xc>)
    18f4:	f000 f8ae 	bl	1a54 <_fwalk_reent>
    18f8:	bd08      	pop	{r3, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	00001899 	.word	0x00001899

00001900 <std.isra.0>:
    1900:	2300      	movs	r3, #0
    1902:	b510      	push	{r4, lr}
    1904:	1c04      	adds	r4, r0, #0
    1906:	6003      	str	r3, [r0, #0]
    1908:	6043      	str	r3, [r0, #4]
    190a:	6083      	str	r3, [r0, #8]
    190c:	8181      	strh	r1, [r0, #12]
    190e:	6643      	str	r3, [r0, #100]	; 0x64
    1910:	81c2      	strh	r2, [r0, #14]
    1912:	6103      	str	r3, [r0, #16]
    1914:	6143      	str	r3, [r0, #20]
    1916:	6183      	str	r3, [r0, #24]
    1918:	1c19      	adds	r1, r3, #0
    191a:	2208      	movs	r2, #8
    191c:	305c      	adds	r0, #92	; 0x5c
    191e:	f7ff fe7f 	bl	1620 <memset>
    1922:	4b05      	ldr	r3, [pc, #20]	; (1938 <std.isra.0+0x38>)
    1924:	6224      	str	r4, [r4, #32]
    1926:	6263      	str	r3, [r4, #36]	; 0x24
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <std.isra.0+0x3c>)
    192a:	62a3      	str	r3, [r4, #40]	; 0x28
    192c:	4b04      	ldr	r3, [pc, #16]	; (1940 <std.isra.0+0x40>)
    192e:	62e3      	str	r3, [r4, #44]	; 0x2c
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <std.isra.0+0x44>)
    1932:	6323      	str	r3, [r4, #48]	; 0x30
    1934:	bd10      	pop	{r4, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00002189 	.word	0x00002189
    193c:	000021b1 	.word	0x000021b1
    1940:	000021e9 	.word	0x000021e9
    1944:	00002215 	.word	0x00002215

00001948 <__sfmoreglue>:
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	2568      	movs	r5, #104	; 0x68
    194c:	1e4b      	subs	r3, r1, #1
    194e:	435d      	muls	r5, r3
    1950:	1c0e      	adds	r6, r1, #0
    1952:	1c29      	adds	r1, r5, #0
    1954:	3174      	adds	r1, #116	; 0x74
    1956:	f000 f8ef 	bl	1b38 <_malloc_r>
    195a:	1e04      	subs	r4, r0, #0
    195c:	d008      	beq.n	1970 <__sfmoreglue+0x28>
    195e:	2100      	movs	r1, #0
    1960:	1c2a      	adds	r2, r5, #0
    1962:	6001      	str	r1, [r0, #0]
    1964:	6046      	str	r6, [r0, #4]
    1966:	300c      	adds	r0, #12
    1968:	60a0      	str	r0, [r4, #8]
    196a:	3268      	adds	r2, #104	; 0x68
    196c:	f7ff fe58 	bl	1620 <memset>
    1970:	1c20      	adds	r0, r4, #0
    1972:	bd70      	pop	{r4, r5, r6, pc}

00001974 <__sinit>:
    1974:	6983      	ldr	r3, [r0, #24]
    1976:	b513      	push	{r0, r1, r4, lr}
    1978:	2b00      	cmp	r3, #0
    197a:	d128      	bne.n	19ce <__sinit+0x5a>
    197c:	6483      	str	r3, [r0, #72]	; 0x48
    197e:	64c3      	str	r3, [r0, #76]	; 0x4c
    1980:	6503      	str	r3, [r0, #80]	; 0x50
    1982:	4b13      	ldr	r3, [pc, #76]	; (19d0 <__sinit+0x5c>)
    1984:	4a13      	ldr	r2, [pc, #76]	; (19d4 <__sinit+0x60>)
    1986:	681b      	ldr	r3, [r3, #0]
    1988:	6282      	str	r2, [r0, #40]	; 0x28
    198a:	9301      	str	r3, [sp, #4]
    198c:	4298      	cmp	r0, r3
    198e:	d101      	bne.n	1994 <__sinit+0x20>
    1990:	2301      	movs	r3, #1
    1992:	6183      	str	r3, [r0, #24]
    1994:	1c04      	adds	r4, r0, #0
    1996:	f000 f81f 	bl	19d8 <__sfp>
    199a:	6060      	str	r0, [r4, #4]
    199c:	1c20      	adds	r0, r4, #0
    199e:	f000 f81b 	bl	19d8 <__sfp>
    19a2:	60a0      	str	r0, [r4, #8]
    19a4:	1c20      	adds	r0, r4, #0
    19a6:	f000 f817 	bl	19d8 <__sfp>
    19aa:	2104      	movs	r1, #4
    19ac:	60e0      	str	r0, [r4, #12]
    19ae:	2200      	movs	r2, #0
    19b0:	6860      	ldr	r0, [r4, #4]
    19b2:	f7ff ffa5 	bl	1900 <std.isra.0>
    19b6:	68a0      	ldr	r0, [r4, #8]
    19b8:	2109      	movs	r1, #9
    19ba:	2201      	movs	r2, #1
    19bc:	f7ff ffa0 	bl	1900 <std.isra.0>
    19c0:	68e0      	ldr	r0, [r4, #12]
    19c2:	2112      	movs	r1, #18
    19c4:	2202      	movs	r2, #2
    19c6:	f7ff ff9b 	bl	1900 <std.isra.0>
    19ca:	2301      	movs	r3, #1
    19cc:	61a3      	str	r3, [r4, #24]
    19ce:	bd13      	pop	{r0, r1, r4, pc}
    19d0:	000025dc 	.word	0x000025dc
    19d4:	000018f1 	.word	0x000018f1

000019d8 <__sfp>:
    19d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19da:	4b1d      	ldr	r3, [pc, #116]	; (1a50 <__sfp+0x78>)
    19dc:	1c06      	adds	r6, r0, #0
    19de:	681d      	ldr	r5, [r3, #0]
    19e0:	69ab      	ldr	r3, [r5, #24]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d102      	bne.n	19ec <__sfp+0x14>
    19e6:	1c28      	adds	r0, r5, #0
    19e8:	f7ff ffc4 	bl	1974 <__sinit>
    19ec:	3548      	adds	r5, #72	; 0x48
    19ee:	68ac      	ldr	r4, [r5, #8]
    19f0:	686b      	ldr	r3, [r5, #4]
    19f2:	3b01      	subs	r3, #1
    19f4:	d405      	bmi.n	1a02 <__sfp+0x2a>
    19f6:	220c      	movs	r2, #12
    19f8:	5ea7      	ldrsh	r7, [r4, r2]
    19fa:	2f00      	cmp	r7, #0
    19fc:	d010      	beq.n	1a20 <__sfp+0x48>
    19fe:	3468      	adds	r4, #104	; 0x68
    1a00:	e7f7      	b.n	19f2 <__sfp+0x1a>
    1a02:	682b      	ldr	r3, [r5, #0]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d106      	bne.n	1a16 <__sfp+0x3e>
    1a08:	1c30      	adds	r0, r6, #0
    1a0a:	2104      	movs	r1, #4
    1a0c:	f7ff ff9c 	bl	1948 <__sfmoreglue>
    1a10:	6028      	str	r0, [r5, #0]
    1a12:	2800      	cmp	r0, #0
    1a14:	d001      	beq.n	1a1a <__sfp+0x42>
    1a16:	682d      	ldr	r5, [r5, #0]
    1a18:	e7e9      	b.n	19ee <__sfp+0x16>
    1a1a:	230c      	movs	r3, #12
    1a1c:	6033      	str	r3, [r6, #0]
    1a1e:	e016      	b.n	1a4e <__sfp+0x76>
    1a20:	2301      	movs	r3, #1
    1a22:	1c20      	adds	r0, r4, #0
    1a24:	425b      	negs	r3, r3
    1a26:	81e3      	strh	r3, [r4, #14]
    1a28:	3302      	adds	r3, #2
    1a2a:	81a3      	strh	r3, [r4, #12]
    1a2c:	6667      	str	r7, [r4, #100]	; 0x64
    1a2e:	6027      	str	r7, [r4, #0]
    1a30:	60a7      	str	r7, [r4, #8]
    1a32:	6067      	str	r7, [r4, #4]
    1a34:	6127      	str	r7, [r4, #16]
    1a36:	6167      	str	r7, [r4, #20]
    1a38:	61a7      	str	r7, [r4, #24]
    1a3a:	305c      	adds	r0, #92	; 0x5c
    1a3c:	1c39      	adds	r1, r7, #0
    1a3e:	2208      	movs	r2, #8
    1a40:	f7ff fdee 	bl	1620 <memset>
    1a44:	1c20      	adds	r0, r4, #0
    1a46:	6367      	str	r7, [r4, #52]	; 0x34
    1a48:	63a7      	str	r7, [r4, #56]	; 0x38
    1a4a:	64a7      	str	r7, [r4, #72]	; 0x48
    1a4c:	64e7      	str	r7, [r4, #76]	; 0x4c
    1a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a50:	000025dc 	.word	0x000025dc

00001a54 <_fwalk_reent>:
    1a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a56:	1c04      	adds	r4, r0, #0
    1a58:	1c07      	adds	r7, r0, #0
    1a5a:	2600      	movs	r6, #0
    1a5c:	9101      	str	r1, [sp, #4]
    1a5e:	3448      	adds	r4, #72	; 0x48
    1a60:	2c00      	cmp	r4, #0
    1a62:	d016      	beq.n	1a92 <_fwalk_reent+0x3e>
    1a64:	6863      	ldr	r3, [r4, #4]
    1a66:	68a5      	ldr	r5, [r4, #8]
    1a68:	9300      	str	r3, [sp, #0]
    1a6a:	9b00      	ldr	r3, [sp, #0]
    1a6c:	3b01      	subs	r3, #1
    1a6e:	9300      	str	r3, [sp, #0]
    1a70:	d40d      	bmi.n	1a8e <_fwalk_reent+0x3a>
    1a72:	89ab      	ldrh	r3, [r5, #12]
    1a74:	2b01      	cmp	r3, #1
    1a76:	d908      	bls.n	1a8a <_fwalk_reent+0x36>
    1a78:	220e      	movs	r2, #14
    1a7a:	5eab      	ldrsh	r3, [r5, r2]
    1a7c:	3301      	adds	r3, #1
    1a7e:	d004      	beq.n	1a8a <_fwalk_reent+0x36>
    1a80:	1c38      	adds	r0, r7, #0
    1a82:	1c29      	adds	r1, r5, #0
    1a84:	9b01      	ldr	r3, [sp, #4]
    1a86:	4798      	blx	r3
    1a88:	4306      	orrs	r6, r0
    1a8a:	3568      	adds	r5, #104	; 0x68
    1a8c:	e7ed      	b.n	1a6a <_fwalk_reent+0x16>
    1a8e:	6824      	ldr	r4, [r4, #0]
    1a90:	e7e6      	b.n	1a60 <_fwalk_reent+0xc>
    1a92:	1c30      	adds	r0, r6, #0
    1a94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001a98 <malloc>:
    1a98:	b508      	push	{r3, lr}
    1a9a:	4b03      	ldr	r3, [pc, #12]	; (1aa8 <malloc+0x10>)
    1a9c:	1c01      	adds	r1, r0, #0
    1a9e:	6818      	ldr	r0, [r3, #0]
    1aa0:	f000 f84a 	bl	1b38 <_malloc_r>
    1aa4:	bd08      	pop	{r3, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	2000006c 	.word	0x2000006c

00001aac <_free_r>:
    1aac:	b530      	push	{r4, r5, lr}
    1aae:	2900      	cmp	r1, #0
    1ab0:	d03e      	beq.n	1b30 <_free_r+0x84>
    1ab2:	3904      	subs	r1, #4
    1ab4:	680b      	ldr	r3, [r1, #0]
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	da00      	bge.n	1abc <_free_r+0x10>
    1aba:	18c9      	adds	r1, r1, r3
    1abc:	4a1d      	ldr	r2, [pc, #116]	; (1b34 <_free_r+0x88>)
    1abe:	6813      	ldr	r3, [r2, #0]
    1ac0:	1c14      	adds	r4, r2, #0
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d102      	bne.n	1acc <_free_r+0x20>
    1ac6:	604b      	str	r3, [r1, #4]
    1ac8:	6011      	str	r1, [r2, #0]
    1aca:	e031      	b.n	1b30 <_free_r+0x84>
    1acc:	4299      	cmp	r1, r3
    1ace:	d20d      	bcs.n	1aec <_free_r+0x40>
    1ad0:	6808      	ldr	r0, [r1, #0]
    1ad2:	180a      	adds	r2, r1, r0
    1ad4:	429a      	cmp	r2, r3
    1ad6:	d103      	bne.n	1ae0 <_free_r+0x34>
    1ad8:	6813      	ldr	r3, [r2, #0]
    1ada:	18c3      	adds	r3, r0, r3
    1adc:	600b      	str	r3, [r1, #0]
    1ade:	6853      	ldr	r3, [r2, #4]
    1ae0:	604b      	str	r3, [r1, #4]
    1ae2:	6021      	str	r1, [r4, #0]
    1ae4:	e024      	b.n	1b30 <_free_r+0x84>
    1ae6:	428a      	cmp	r2, r1
    1ae8:	d803      	bhi.n	1af2 <_free_r+0x46>
    1aea:	1c13      	adds	r3, r2, #0
    1aec:	685a      	ldr	r2, [r3, #4]
    1aee:	2a00      	cmp	r2, #0
    1af0:	d1f9      	bne.n	1ae6 <_free_r+0x3a>
    1af2:	681d      	ldr	r5, [r3, #0]
    1af4:	195c      	adds	r4, r3, r5
    1af6:	428c      	cmp	r4, r1
    1af8:	d10b      	bne.n	1b12 <_free_r+0x66>
    1afa:	6809      	ldr	r1, [r1, #0]
    1afc:	1869      	adds	r1, r5, r1
    1afe:	1858      	adds	r0, r3, r1
    1b00:	6019      	str	r1, [r3, #0]
    1b02:	4290      	cmp	r0, r2
    1b04:	d114      	bne.n	1b30 <_free_r+0x84>
    1b06:	6810      	ldr	r0, [r2, #0]
    1b08:	6852      	ldr	r2, [r2, #4]
    1b0a:	1809      	adds	r1, r1, r0
    1b0c:	6019      	str	r1, [r3, #0]
    1b0e:	605a      	str	r2, [r3, #4]
    1b10:	e00e      	b.n	1b30 <_free_r+0x84>
    1b12:	428c      	cmp	r4, r1
    1b14:	d902      	bls.n	1b1c <_free_r+0x70>
    1b16:	230c      	movs	r3, #12
    1b18:	6003      	str	r3, [r0, #0]
    1b1a:	e009      	b.n	1b30 <_free_r+0x84>
    1b1c:	6808      	ldr	r0, [r1, #0]
    1b1e:	180c      	adds	r4, r1, r0
    1b20:	4294      	cmp	r4, r2
    1b22:	d103      	bne.n	1b2c <_free_r+0x80>
    1b24:	6814      	ldr	r4, [r2, #0]
    1b26:	6852      	ldr	r2, [r2, #4]
    1b28:	1900      	adds	r0, r0, r4
    1b2a:	6008      	str	r0, [r1, #0]
    1b2c:	604a      	str	r2, [r1, #4]
    1b2e:	6059      	str	r1, [r3, #4]
    1b30:	bd30      	pop	{r4, r5, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	200000c4 	.word	0x200000c4

00001b38 <_malloc_r>:
    1b38:	2303      	movs	r3, #3
    1b3a:	b570      	push	{r4, r5, r6, lr}
    1b3c:	1ccc      	adds	r4, r1, #3
    1b3e:	439c      	bics	r4, r3
    1b40:	3408      	adds	r4, #8
    1b42:	1c05      	adds	r5, r0, #0
    1b44:	2c0c      	cmp	r4, #12
    1b46:	d201      	bcs.n	1b4c <_malloc_r+0x14>
    1b48:	240c      	movs	r4, #12
    1b4a:	e005      	b.n	1b58 <_malloc_r+0x20>
    1b4c:	2c00      	cmp	r4, #0
    1b4e:	da03      	bge.n	1b58 <_malloc_r+0x20>
    1b50:	230c      	movs	r3, #12
    1b52:	2000      	movs	r0, #0
    1b54:	602b      	str	r3, [r5, #0]
    1b56:	e042      	b.n	1bde <_malloc_r+0xa6>
    1b58:	428c      	cmp	r4, r1
    1b5a:	d3f9      	bcc.n	1b50 <_malloc_r+0x18>
    1b5c:	4a20      	ldr	r2, [pc, #128]	; (1be0 <_malloc_r+0xa8>)
    1b5e:	6813      	ldr	r3, [r2, #0]
    1b60:	1c10      	adds	r0, r2, #0
    1b62:	1c19      	adds	r1, r3, #0
    1b64:	2900      	cmp	r1, #0
    1b66:	d013      	beq.n	1b90 <_malloc_r+0x58>
    1b68:	680a      	ldr	r2, [r1, #0]
    1b6a:	1b12      	subs	r2, r2, r4
    1b6c:	d40d      	bmi.n	1b8a <_malloc_r+0x52>
    1b6e:	2a0b      	cmp	r2, #11
    1b70:	d902      	bls.n	1b78 <_malloc_r+0x40>
    1b72:	600a      	str	r2, [r1, #0]
    1b74:	188b      	adds	r3, r1, r2
    1b76:	e01f      	b.n	1bb8 <_malloc_r+0x80>
    1b78:	428b      	cmp	r3, r1
    1b7a:	d102      	bne.n	1b82 <_malloc_r+0x4a>
    1b7c:	685a      	ldr	r2, [r3, #4]
    1b7e:	6002      	str	r2, [r0, #0]
    1b80:	e01b      	b.n	1bba <_malloc_r+0x82>
    1b82:	684a      	ldr	r2, [r1, #4]
    1b84:	605a      	str	r2, [r3, #4]
    1b86:	1c0b      	adds	r3, r1, #0
    1b88:	e017      	b.n	1bba <_malloc_r+0x82>
    1b8a:	1c0b      	adds	r3, r1, #0
    1b8c:	6849      	ldr	r1, [r1, #4]
    1b8e:	e7e9      	b.n	1b64 <_malloc_r+0x2c>
    1b90:	4e14      	ldr	r6, [pc, #80]	; (1be4 <_malloc_r+0xac>)
    1b92:	6833      	ldr	r3, [r6, #0]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d103      	bne.n	1ba0 <_malloc_r+0x68>
    1b98:	1c28      	adds	r0, r5, #0
    1b9a:	f000 fae3 	bl	2164 <_sbrk_r>
    1b9e:	6030      	str	r0, [r6, #0]
    1ba0:	1c28      	adds	r0, r5, #0
    1ba2:	1c21      	adds	r1, r4, #0
    1ba4:	f000 fade 	bl	2164 <_sbrk_r>
    1ba8:	1c03      	adds	r3, r0, #0
    1baa:	1c42      	adds	r2, r0, #1
    1bac:	d0d0      	beq.n	1b50 <_malloc_r+0x18>
    1bae:	2203      	movs	r2, #3
    1bb0:	1cc6      	adds	r6, r0, #3
    1bb2:	4396      	bics	r6, r2
    1bb4:	4286      	cmp	r6, r0
    1bb6:	d10a      	bne.n	1bce <_malloc_r+0x96>
    1bb8:	601c      	str	r4, [r3, #0]
    1bba:	1c18      	adds	r0, r3, #0
    1bbc:	2107      	movs	r1, #7
    1bbe:	300b      	adds	r0, #11
    1bc0:	1d1a      	adds	r2, r3, #4
    1bc2:	4388      	bics	r0, r1
    1bc4:	1a82      	subs	r2, r0, r2
    1bc6:	d00a      	beq.n	1bde <_malloc_r+0xa6>
    1bc8:	4251      	negs	r1, r2
    1bca:	5099      	str	r1, [r3, r2]
    1bcc:	e007      	b.n	1bde <_malloc_r+0xa6>
    1bce:	1a31      	subs	r1, r6, r0
    1bd0:	1c28      	adds	r0, r5, #0
    1bd2:	f000 fac7 	bl	2164 <_sbrk_r>
    1bd6:	1c43      	adds	r3, r0, #1
    1bd8:	d0ba      	beq.n	1b50 <_malloc_r+0x18>
    1bda:	1c33      	adds	r3, r6, #0
    1bdc:	e7ec      	b.n	1bb8 <_malloc_r+0x80>
    1bde:	bd70      	pop	{r4, r5, r6, pc}
    1be0:	200000c4 	.word	0x200000c4
    1be4:	200000c0 	.word	0x200000c0

00001be8 <__sfputc_r>:
    1be8:	6893      	ldr	r3, [r2, #8]
    1bea:	b510      	push	{r4, lr}
    1bec:	3b01      	subs	r3, #1
    1bee:	6093      	str	r3, [r2, #8]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	da05      	bge.n	1c00 <__sfputc_r+0x18>
    1bf4:	6994      	ldr	r4, [r2, #24]
    1bf6:	42a3      	cmp	r3, r4
    1bf8:	db08      	blt.n	1c0c <__sfputc_r+0x24>
    1bfa:	b2cb      	uxtb	r3, r1
    1bfc:	2b0a      	cmp	r3, #10
    1bfe:	d005      	beq.n	1c0c <__sfputc_r+0x24>
    1c00:	6813      	ldr	r3, [r2, #0]
    1c02:	1c58      	adds	r0, r3, #1
    1c04:	6010      	str	r0, [r2, #0]
    1c06:	7019      	strb	r1, [r3, #0]
    1c08:	b2c8      	uxtb	r0, r1
    1c0a:	e001      	b.n	1c10 <__sfputc_r+0x28>
    1c0c:	f000 fb08 	bl	2220 <__swbuf_r>
    1c10:	bd10      	pop	{r4, pc}

00001c12 <__sfputs_r>:
    1c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c14:	1c06      	adds	r6, r0, #0
    1c16:	1c0f      	adds	r7, r1, #0
    1c18:	1c14      	adds	r4, r2, #0
    1c1a:	18d5      	adds	r5, r2, r3
    1c1c:	42ac      	cmp	r4, r5
    1c1e:	d008      	beq.n	1c32 <__sfputs_r+0x20>
    1c20:	7821      	ldrb	r1, [r4, #0]
    1c22:	1c30      	adds	r0, r6, #0
    1c24:	1c3a      	adds	r2, r7, #0
    1c26:	f7ff ffdf 	bl	1be8 <__sfputc_r>
    1c2a:	3401      	adds	r4, #1
    1c2c:	1c43      	adds	r3, r0, #1
    1c2e:	d1f5      	bne.n	1c1c <__sfputs_r+0xa>
    1c30:	e000      	b.n	1c34 <__sfputs_r+0x22>
    1c32:	2000      	movs	r0, #0
    1c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001c38 <_vfiprintf_r>:
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b09f      	sub	sp, #124	; 0x7c
    1c3c:	1c06      	adds	r6, r0, #0
    1c3e:	1c0f      	adds	r7, r1, #0
    1c40:	9202      	str	r2, [sp, #8]
    1c42:	9305      	str	r3, [sp, #20]
    1c44:	2800      	cmp	r0, #0
    1c46:	d004      	beq.n	1c52 <_vfiprintf_r+0x1a>
    1c48:	6983      	ldr	r3, [r0, #24]
    1c4a:	2b00      	cmp	r3, #0
    1c4c:	d101      	bne.n	1c52 <_vfiprintf_r+0x1a>
    1c4e:	f7ff fe91 	bl	1974 <__sinit>
    1c52:	4b79      	ldr	r3, [pc, #484]	; (1e38 <_vfiprintf_r+0x200>)
    1c54:	429f      	cmp	r7, r3
    1c56:	d101      	bne.n	1c5c <_vfiprintf_r+0x24>
    1c58:	6877      	ldr	r7, [r6, #4]
    1c5a:	e008      	b.n	1c6e <_vfiprintf_r+0x36>
    1c5c:	4b77      	ldr	r3, [pc, #476]	; (1e3c <_vfiprintf_r+0x204>)
    1c5e:	429f      	cmp	r7, r3
    1c60:	d101      	bne.n	1c66 <_vfiprintf_r+0x2e>
    1c62:	68b7      	ldr	r7, [r6, #8]
    1c64:	e003      	b.n	1c6e <_vfiprintf_r+0x36>
    1c66:	4b76      	ldr	r3, [pc, #472]	; (1e40 <_vfiprintf_r+0x208>)
    1c68:	429f      	cmp	r7, r3
    1c6a:	d100      	bne.n	1c6e <_vfiprintf_r+0x36>
    1c6c:	68f7      	ldr	r7, [r6, #12]
    1c6e:	89bb      	ldrh	r3, [r7, #12]
    1c70:	071b      	lsls	r3, r3, #28
    1c72:	d50a      	bpl.n	1c8a <_vfiprintf_r+0x52>
    1c74:	693b      	ldr	r3, [r7, #16]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d007      	beq.n	1c8a <_vfiprintf_r+0x52>
    1c7a:	2300      	movs	r3, #0
    1c7c:	ad06      	add	r5, sp, #24
    1c7e:	616b      	str	r3, [r5, #20]
    1c80:	3320      	adds	r3, #32
    1c82:	766b      	strb	r3, [r5, #25]
    1c84:	3310      	adds	r3, #16
    1c86:	76ab      	strb	r3, [r5, #26]
    1c88:	e03d      	b.n	1d06 <_vfiprintf_r+0xce>
    1c8a:	1c30      	adds	r0, r6, #0
    1c8c:	1c39      	adds	r1, r7, #0
    1c8e:	f000 fb33 	bl	22f8 <__swsetup_r>
    1c92:	2800      	cmp	r0, #0
    1c94:	d0f1      	beq.n	1c7a <_vfiprintf_r+0x42>
    1c96:	2001      	movs	r0, #1
    1c98:	4240      	negs	r0, r0
    1c9a:	e0ca      	b.n	1e32 <_vfiprintf_r+0x1fa>
    1c9c:	9a05      	ldr	r2, [sp, #20]
    1c9e:	1d11      	adds	r1, r2, #4
    1ca0:	6812      	ldr	r2, [r2, #0]
    1ca2:	9105      	str	r1, [sp, #20]
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	db7e      	blt.n	1da6 <_vfiprintf_r+0x16e>
    1ca8:	9209      	str	r2, [sp, #36]	; 0x24
    1caa:	3401      	adds	r4, #1
    1cac:	7823      	ldrb	r3, [r4, #0]
    1cae:	2b2e      	cmp	r3, #46	; 0x2e
    1cb0:	d100      	bne.n	1cb4 <_vfiprintf_r+0x7c>
    1cb2:	e089      	b.n	1dc8 <_vfiprintf_r+0x190>
    1cb4:	7821      	ldrb	r1, [r4, #0]
    1cb6:	4863      	ldr	r0, [pc, #396]	; (1e44 <_vfiprintf_r+0x20c>)
    1cb8:	2203      	movs	r2, #3
    1cba:	f000 fc0f 	bl	24dc <memchr>
    1cbe:	2800      	cmp	r0, #0
    1cc0:	d008      	beq.n	1cd4 <_vfiprintf_r+0x9c>
    1cc2:	4b60      	ldr	r3, [pc, #384]	; (1e44 <_vfiprintf_r+0x20c>)
    1cc4:	3401      	adds	r4, #1
    1cc6:	1ac0      	subs	r0, r0, r3
    1cc8:	2340      	movs	r3, #64	; 0x40
    1cca:	4083      	lsls	r3, r0
    1ccc:	1c18      	adds	r0, r3, #0
    1cce:	682b      	ldr	r3, [r5, #0]
    1cd0:	4318      	orrs	r0, r3
    1cd2:	6028      	str	r0, [r5, #0]
    1cd4:	7821      	ldrb	r1, [r4, #0]
    1cd6:	1c63      	adds	r3, r4, #1
    1cd8:	485b      	ldr	r0, [pc, #364]	; (1e48 <_vfiprintf_r+0x210>)
    1cda:	2206      	movs	r2, #6
    1cdc:	9302      	str	r3, [sp, #8]
    1cde:	7629      	strb	r1, [r5, #24]
    1ce0:	f000 fbfc 	bl	24dc <memchr>
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d100      	bne.n	1cea <_vfiprintf_r+0xb2>
    1ce8:	e091      	b.n	1e0e <_vfiprintf_r+0x1d6>
    1cea:	4b58      	ldr	r3, [pc, #352]	; (1e4c <_vfiprintf_r+0x214>)
    1cec:	2b00      	cmp	r3, #0
    1cee:	d000      	beq.n	1cf2 <_vfiprintf_r+0xba>
    1cf0:	e084      	b.n	1dfc <_vfiprintf_r+0x1c4>
    1cf2:	2207      	movs	r2, #7
    1cf4:	9b05      	ldr	r3, [sp, #20]
    1cf6:	3307      	adds	r3, #7
    1cf8:	4393      	bics	r3, r2
    1cfa:	3308      	adds	r3, #8
    1cfc:	9305      	str	r3, [sp, #20]
    1cfe:	696b      	ldr	r3, [r5, #20]
    1d00:	9a03      	ldr	r2, [sp, #12]
    1d02:	189b      	adds	r3, r3, r2
    1d04:	616b      	str	r3, [r5, #20]
    1d06:	9c02      	ldr	r4, [sp, #8]
    1d08:	7823      	ldrb	r3, [r4, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d104      	bne.n	1d18 <_vfiprintf_r+0xe0>
    1d0e:	9b02      	ldr	r3, [sp, #8]
    1d10:	1ae3      	subs	r3, r4, r3
    1d12:	9304      	str	r3, [sp, #16]
    1d14:	d011      	beq.n	1d3a <_vfiprintf_r+0x102>
    1d16:	e003      	b.n	1d20 <_vfiprintf_r+0xe8>
    1d18:	2b25      	cmp	r3, #37	; 0x25
    1d1a:	d0f8      	beq.n	1d0e <_vfiprintf_r+0xd6>
    1d1c:	3401      	adds	r4, #1
    1d1e:	e7f3      	b.n	1d08 <_vfiprintf_r+0xd0>
    1d20:	9b04      	ldr	r3, [sp, #16]
    1d22:	1c30      	adds	r0, r6, #0
    1d24:	1c39      	adds	r1, r7, #0
    1d26:	9a02      	ldr	r2, [sp, #8]
    1d28:	f7ff ff73 	bl	1c12 <__sfputs_r>
    1d2c:	1c43      	adds	r3, r0, #1
    1d2e:	d07b      	beq.n	1e28 <_vfiprintf_r+0x1f0>
    1d30:	696a      	ldr	r2, [r5, #20]
    1d32:	9b04      	ldr	r3, [sp, #16]
    1d34:	4694      	mov	ip, r2
    1d36:	4463      	add	r3, ip
    1d38:	616b      	str	r3, [r5, #20]
    1d3a:	7823      	ldrb	r3, [r4, #0]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d073      	beq.n	1e28 <_vfiprintf_r+0x1f0>
    1d40:	2201      	movs	r2, #1
    1d42:	2300      	movs	r3, #0
    1d44:	4252      	negs	r2, r2
    1d46:	606a      	str	r2, [r5, #4]
    1d48:	a902      	add	r1, sp, #8
    1d4a:	3254      	adds	r2, #84	; 0x54
    1d4c:	1852      	adds	r2, r2, r1
    1d4e:	3401      	adds	r4, #1
    1d50:	602b      	str	r3, [r5, #0]
    1d52:	60eb      	str	r3, [r5, #12]
    1d54:	60ab      	str	r3, [r5, #8]
    1d56:	7013      	strb	r3, [r2, #0]
    1d58:	65ab      	str	r3, [r5, #88]	; 0x58
    1d5a:	7821      	ldrb	r1, [r4, #0]
    1d5c:	483c      	ldr	r0, [pc, #240]	; (1e50 <_vfiprintf_r+0x218>)
    1d5e:	2205      	movs	r2, #5
    1d60:	f000 fbbc 	bl	24dc <memchr>
    1d64:	2800      	cmp	r0, #0
    1d66:	d009      	beq.n	1d7c <_vfiprintf_r+0x144>
    1d68:	4b39      	ldr	r3, [pc, #228]	; (1e50 <_vfiprintf_r+0x218>)
    1d6a:	3401      	adds	r4, #1
    1d6c:	1ac0      	subs	r0, r0, r3
    1d6e:	2301      	movs	r3, #1
    1d70:	4083      	lsls	r3, r0
    1d72:	1c18      	adds	r0, r3, #0
    1d74:	682b      	ldr	r3, [r5, #0]
    1d76:	4318      	orrs	r0, r3
    1d78:	6028      	str	r0, [r5, #0]
    1d7a:	e7ee      	b.n	1d5a <_vfiprintf_r+0x122>
    1d7c:	682b      	ldr	r3, [r5, #0]
    1d7e:	06da      	lsls	r2, r3, #27
    1d80:	d504      	bpl.n	1d8c <_vfiprintf_r+0x154>
    1d82:	2253      	movs	r2, #83	; 0x53
    1d84:	2120      	movs	r1, #32
    1d86:	a802      	add	r0, sp, #8
    1d88:	1812      	adds	r2, r2, r0
    1d8a:	7011      	strb	r1, [r2, #0]
    1d8c:	071a      	lsls	r2, r3, #28
    1d8e:	d504      	bpl.n	1d9a <_vfiprintf_r+0x162>
    1d90:	2253      	movs	r2, #83	; 0x53
    1d92:	212b      	movs	r1, #43	; 0x2b
    1d94:	a802      	add	r0, sp, #8
    1d96:	1812      	adds	r2, r2, r0
    1d98:	7011      	strb	r1, [r2, #0]
    1d9a:	7822      	ldrb	r2, [r4, #0]
    1d9c:	2a2a      	cmp	r2, #42	; 0x2a
    1d9e:	d100      	bne.n	1da2 <_vfiprintf_r+0x16a>
    1da0:	e77c      	b.n	1c9c <_vfiprintf_r+0x64>
    1da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1da4:	e005      	b.n	1db2 <_vfiprintf_r+0x17a>
    1da6:	4252      	negs	r2, r2
    1da8:	60ea      	str	r2, [r5, #12]
    1daa:	2202      	movs	r2, #2
    1dac:	4313      	orrs	r3, r2
    1dae:	602b      	str	r3, [r5, #0]
    1db0:	e77b      	b.n	1caa <_vfiprintf_r+0x72>
    1db2:	7822      	ldrb	r2, [r4, #0]
    1db4:	3a30      	subs	r2, #48	; 0x30
    1db6:	2a09      	cmp	r2, #9
    1db8:	d804      	bhi.n	1dc4 <_vfiprintf_r+0x18c>
    1dba:	210a      	movs	r1, #10
    1dbc:	434b      	muls	r3, r1
    1dbe:	3401      	adds	r4, #1
    1dc0:	189b      	adds	r3, r3, r2
    1dc2:	e7f6      	b.n	1db2 <_vfiprintf_r+0x17a>
    1dc4:	9309      	str	r3, [sp, #36]	; 0x24
    1dc6:	e771      	b.n	1cac <_vfiprintf_r+0x74>
    1dc8:	7863      	ldrb	r3, [r4, #1]
    1dca:	2b2a      	cmp	r3, #42	; 0x2a
    1dcc:	d109      	bne.n	1de2 <_vfiprintf_r+0x1aa>
    1dce:	9b05      	ldr	r3, [sp, #20]
    1dd0:	3402      	adds	r4, #2
    1dd2:	1d1a      	adds	r2, r3, #4
    1dd4:	681b      	ldr	r3, [r3, #0]
    1dd6:	9205      	str	r2, [sp, #20]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	da0d      	bge.n	1df8 <_vfiprintf_r+0x1c0>
    1ddc:	2301      	movs	r3, #1
    1dde:	425b      	negs	r3, r3
    1de0:	e00a      	b.n	1df8 <_vfiprintf_r+0x1c0>
    1de2:	2300      	movs	r3, #0
    1de4:	3401      	adds	r4, #1
    1de6:	7822      	ldrb	r2, [r4, #0]
    1de8:	3a30      	subs	r2, #48	; 0x30
    1dea:	2a09      	cmp	r2, #9
    1dec:	d804      	bhi.n	1df8 <_vfiprintf_r+0x1c0>
    1dee:	210a      	movs	r1, #10
    1df0:	434b      	muls	r3, r1
    1df2:	3401      	adds	r4, #1
    1df4:	189b      	adds	r3, r3, r2
    1df6:	e7f6      	b.n	1de6 <_vfiprintf_r+0x1ae>
    1df8:	9307      	str	r3, [sp, #28]
    1dfa:	e75b      	b.n	1cb4 <_vfiprintf_r+0x7c>
    1dfc:	ab05      	add	r3, sp, #20
    1dfe:	9300      	str	r3, [sp, #0]
    1e00:	1c30      	adds	r0, r6, #0
    1e02:	1c29      	adds	r1, r5, #0
    1e04:	1c3a      	adds	r2, r7, #0
    1e06:	4b13      	ldr	r3, [pc, #76]	; (1e54 <_vfiprintf_r+0x21c>)
    1e08:	e000      	b.n	1e0c <_vfiprintf_r+0x1d4>
    1e0a:	bf00      	nop
    1e0c:	e007      	b.n	1e1e <_vfiprintf_r+0x1e6>
    1e0e:	ab05      	add	r3, sp, #20
    1e10:	9300      	str	r3, [sp, #0]
    1e12:	1c30      	adds	r0, r6, #0
    1e14:	1c29      	adds	r1, r5, #0
    1e16:	1c3a      	adds	r2, r7, #0
    1e18:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <_vfiprintf_r+0x21c>)
    1e1a:	f000 f88b 	bl	1f34 <_printf_i>
    1e1e:	9003      	str	r0, [sp, #12]
    1e20:	9b03      	ldr	r3, [sp, #12]
    1e22:	3301      	adds	r3, #1
    1e24:	d000      	beq.n	1e28 <_vfiprintf_r+0x1f0>
    1e26:	e76a      	b.n	1cfe <_vfiprintf_r+0xc6>
    1e28:	89bb      	ldrh	r3, [r7, #12]
    1e2a:	065b      	lsls	r3, r3, #25
    1e2c:	d500      	bpl.n	1e30 <_vfiprintf_r+0x1f8>
    1e2e:	e732      	b.n	1c96 <_vfiprintf_r+0x5e>
    1e30:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e32:	b01f      	add	sp, #124	; 0x7c
    1e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	000025e0 	.word	0x000025e0
    1e3c:	00002600 	.word	0x00002600
    1e40:	00002620 	.word	0x00002620
    1e44:	00002646 	.word	0x00002646
    1e48:	0000264a 	.word	0x0000264a
    1e4c:	00000000 	.word	0x00000000
    1e50:	00002640 	.word	0x00002640
    1e54:	00001c13 	.word	0x00001c13

00001e58 <_printf_common>:
    1e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e5a:	1c17      	adds	r7, r2, #0
    1e5c:	9301      	str	r3, [sp, #4]
    1e5e:	690a      	ldr	r2, [r1, #16]
    1e60:	688b      	ldr	r3, [r1, #8]
    1e62:	9000      	str	r0, [sp, #0]
    1e64:	1c0c      	adds	r4, r1, #0
    1e66:	4293      	cmp	r3, r2
    1e68:	da00      	bge.n	1e6c <_printf_common+0x14>
    1e6a:	1c13      	adds	r3, r2, #0
    1e6c:	1c22      	adds	r2, r4, #0
    1e6e:	603b      	str	r3, [r7, #0]
    1e70:	3243      	adds	r2, #67	; 0x43
    1e72:	7812      	ldrb	r2, [r2, #0]
    1e74:	2a00      	cmp	r2, #0
    1e76:	d001      	beq.n	1e7c <_printf_common+0x24>
    1e78:	3301      	adds	r3, #1
    1e7a:	603b      	str	r3, [r7, #0]
    1e7c:	6823      	ldr	r3, [r4, #0]
    1e7e:	069b      	lsls	r3, r3, #26
    1e80:	d502      	bpl.n	1e88 <_printf_common+0x30>
    1e82:	683b      	ldr	r3, [r7, #0]
    1e84:	3302      	adds	r3, #2
    1e86:	603b      	str	r3, [r7, #0]
    1e88:	2506      	movs	r5, #6
    1e8a:	6823      	ldr	r3, [r4, #0]
    1e8c:	401d      	ands	r5, r3
    1e8e:	d01e      	beq.n	1ece <_printf_common+0x76>
    1e90:	1c23      	adds	r3, r4, #0
    1e92:	3343      	adds	r3, #67	; 0x43
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	1e5a      	subs	r2, r3, #1
    1e98:	4193      	sbcs	r3, r2
    1e9a:	6822      	ldr	r2, [r4, #0]
    1e9c:	0692      	lsls	r2, r2, #26
    1e9e:	d51c      	bpl.n	1eda <_printf_common+0x82>
    1ea0:	2030      	movs	r0, #48	; 0x30
    1ea2:	18e1      	adds	r1, r4, r3
    1ea4:	3140      	adds	r1, #64	; 0x40
    1ea6:	70c8      	strb	r0, [r1, #3]
    1ea8:	1c21      	adds	r1, r4, #0
    1eaa:	1c5a      	adds	r2, r3, #1
    1eac:	3145      	adds	r1, #69	; 0x45
    1eae:	7809      	ldrb	r1, [r1, #0]
    1eb0:	18a2      	adds	r2, r4, r2
    1eb2:	3240      	adds	r2, #64	; 0x40
    1eb4:	3302      	adds	r3, #2
    1eb6:	70d1      	strb	r1, [r2, #3]
    1eb8:	e00f      	b.n	1eda <_printf_common+0x82>
    1eba:	1c22      	adds	r2, r4, #0
    1ebc:	2301      	movs	r3, #1
    1ebe:	9800      	ldr	r0, [sp, #0]
    1ec0:	9901      	ldr	r1, [sp, #4]
    1ec2:	3219      	adds	r2, #25
    1ec4:	9e08      	ldr	r6, [sp, #32]
    1ec6:	47b0      	blx	r6
    1ec8:	1c43      	adds	r3, r0, #1
    1eca:	d00e      	beq.n	1eea <_printf_common+0x92>
    1ecc:	3501      	adds	r5, #1
    1ece:	68e3      	ldr	r3, [r4, #12]
    1ed0:	683a      	ldr	r2, [r7, #0]
    1ed2:	1a9b      	subs	r3, r3, r2
    1ed4:	429d      	cmp	r5, r3
    1ed6:	dbf0      	blt.n	1eba <_printf_common+0x62>
    1ed8:	e7da      	b.n	1e90 <_printf_common+0x38>
    1eda:	1c22      	adds	r2, r4, #0
    1edc:	9800      	ldr	r0, [sp, #0]
    1ede:	9901      	ldr	r1, [sp, #4]
    1ee0:	3243      	adds	r2, #67	; 0x43
    1ee2:	9d08      	ldr	r5, [sp, #32]
    1ee4:	47a8      	blx	r5
    1ee6:	1c43      	adds	r3, r0, #1
    1ee8:	d102      	bne.n	1ef0 <_printf_common+0x98>
    1eea:	2001      	movs	r0, #1
    1eec:	4240      	negs	r0, r0
    1eee:	e020      	b.n	1f32 <_printf_common+0xda>
    1ef0:	2306      	movs	r3, #6
    1ef2:	6820      	ldr	r0, [r4, #0]
    1ef4:	68e1      	ldr	r1, [r4, #12]
    1ef6:	683a      	ldr	r2, [r7, #0]
    1ef8:	4003      	ands	r3, r0
    1efa:	2500      	movs	r5, #0
    1efc:	2b04      	cmp	r3, #4
    1efe:	d103      	bne.n	1f08 <_printf_common+0xb0>
    1f00:	1a8d      	subs	r5, r1, r2
    1f02:	43eb      	mvns	r3, r5
    1f04:	17db      	asrs	r3, r3, #31
    1f06:	401d      	ands	r5, r3
    1f08:	68a3      	ldr	r3, [r4, #8]
    1f0a:	6922      	ldr	r2, [r4, #16]
    1f0c:	4293      	cmp	r3, r2
    1f0e:	dd01      	ble.n	1f14 <_printf_common+0xbc>
    1f10:	1a9b      	subs	r3, r3, r2
    1f12:	18ed      	adds	r5, r5, r3
    1f14:	2700      	movs	r7, #0
    1f16:	42af      	cmp	r7, r5
    1f18:	da0a      	bge.n	1f30 <_printf_common+0xd8>
    1f1a:	1c22      	adds	r2, r4, #0
    1f1c:	2301      	movs	r3, #1
    1f1e:	9800      	ldr	r0, [sp, #0]
    1f20:	9901      	ldr	r1, [sp, #4]
    1f22:	321a      	adds	r2, #26
    1f24:	9e08      	ldr	r6, [sp, #32]
    1f26:	47b0      	blx	r6
    1f28:	1c43      	adds	r3, r0, #1
    1f2a:	d0de      	beq.n	1eea <_printf_common+0x92>
    1f2c:	3701      	adds	r7, #1
    1f2e:	e7f2      	b.n	1f16 <_printf_common+0xbe>
    1f30:	2000      	movs	r0, #0
    1f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001f34 <_printf_i>:
    1f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f36:	b08b      	sub	sp, #44	; 0x2c
    1f38:	9206      	str	r2, [sp, #24]
    1f3a:	1c0a      	adds	r2, r1, #0
    1f3c:	3243      	adds	r2, #67	; 0x43
    1f3e:	9307      	str	r3, [sp, #28]
    1f40:	9005      	str	r0, [sp, #20]
    1f42:	9204      	str	r2, [sp, #16]
    1f44:	7e0a      	ldrb	r2, [r1, #24]
    1f46:	1c0c      	adds	r4, r1, #0
    1f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1f4a:	2a6e      	cmp	r2, #110	; 0x6e
    1f4c:	d100      	bne.n	1f50 <_printf_i+0x1c>
    1f4e:	e0a8      	b.n	20a2 <STACK_SIZE+0xa2>
    1f50:	d811      	bhi.n	1f76 <_printf_i+0x42>
    1f52:	2a63      	cmp	r2, #99	; 0x63
    1f54:	d022      	beq.n	1f9c <_printf_i+0x68>
    1f56:	d809      	bhi.n	1f6c <_printf_i+0x38>
    1f58:	2a00      	cmp	r2, #0
    1f5a:	d100      	bne.n	1f5e <_printf_i+0x2a>
    1f5c:	e0b2      	b.n	20c4 <STACK_SIZE+0xc4>
    1f5e:	2a58      	cmp	r2, #88	; 0x58
    1f60:	d000      	beq.n	1f64 <_printf_i+0x30>
    1f62:	e0c2      	b.n	20ea <STACK_SIZE+0xea>
    1f64:	3145      	adds	r1, #69	; 0x45
    1f66:	700a      	strb	r2, [r1, #0]
    1f68:	4a7c      	ldr	r2, [pc, #496]	; (215c <STACK_SIZE+0x15c>)
    1f6a:	e04f      	b.n	200c <STACK_SIZE+0xc>
    1f6c:	2a64      	cmp	r2, #100	; 0x64
    1f6e:	d01d      	beq.n	1fac <_printf_i+0x78>
    1f70:	2a69      	cmp	r2, #105	; 0x69
    1f72:	d01b      	beq.n	1fac <_printf_i+0x78>
    1f74:	e0b9      	b.n	20ea <STACK_SIZE+0xea>
    1f76:	2a73      	cmp	r2, #115	; 0x73
    1f78:	d100      	bne.n	1f7c <_printf_i+0x48>
    1f7a:	e0a7      	b.n	20cc <STACK_SIZE+0xcc>
    1f7c:	d809      	bhi.n	1f92 <_printf_i+0x5e>
    1f7e:	2a6f      	cmp	r2, #111	; 0x6f
    1f80:	d029      	beq.n	1fd6 <_printf_i+0xa2>
    1f82:	2a70      	cmp	r2, #112	; 0x70
    1f84:	d000      	beq.n	1f88 <_printf_i+0x54>
    1f86:	e0b0      	b.n	20ea <STACK_SIZE+0xea>
    1f88:	2220      	movs	r2, #32
    1f8a:	6809      	ldr	r1, [r1, #0]
    1f8c:	430a      	orrs	r2, r1
    1f8e:	6022      	str	r2, [r4, #0]
    1f90:	e037      	b.n	2002 <STACK_SIZE+0x2>
    1f92:	2a75      	cmp	r2, #117	; 0x75
    1f94:	d01f      	beq.n	1fd6 <_printf_i+0xa2>
    1f96:	2a78      	cmp	r2, #120	; 0x78
    1f98:	d033      	beq.n	2002 <STACK_SIZE+0x2>
    1f9a:	e0a6      	b.n	20ea <STACK_SIZE+0xea>
    1f9c:	1c0e      	adds	r6, r1, #0
    1f9e:	681a      	ldr	r2, [r3, #0]
    1fa0:	3642      	adds	r6, #66	; 0x42
    1fa2:	1d11      	adds	r1, r2, #4
    1fa4:	6019      	str	r1, [r3, #0]
    1fa6:	6813      	ldr	r3, [r2, #0]
    1fa8:	7033      	strb	r3, [r6, #0]
    1faa:	e0a1      	b.n	20f0 <STACK_SIZE+0xf0>
    1fac:	6821      	ldr	r1, [r4, #0]
    1fae:	681a      	ldr	r2, [r3, #0]
    1fb0:	0608      	lsls	r0, r1, #24
    1fb2:	d406      	bmi.n	1fc2 <_printf_i+0x8e>
    1fb4:	0649      	lsls	r1, r1, #25
    1fb6:	d504      	bpl.n	1fc2 <_printf_i+0x8e>
    1fb8:	1d11      	adds	r1, r2, #4
    1fba:	6019      	str	r1, [r3, #0]
    1fbc:	2300      	movs	r3, #0
    1fbe:	5ed5      	ldrsh	r5, [r2, r3]
    1fc0:	e002      	b.n	1fc8 <_printf_i+0x94>
    1fc2:	1d11      	adds	r1, r2, #4
    1fc4:	6019      	str	r1, [r3, #0]
    1fc6:	6815      	ldr	r5, [r2, #0]
    1fc8:	2d00      	cmp	r5, #0
    1fca:	da3b      	bge.n	2044 <STACK_SIZE+0x44>
    1fcc:	232d      	movs	r3, #45	; 0x2d
    1fce:	9a04      	ldr	r2, [sp, #16]
    1fd0:	426d      	negs	r5, r5
    1fd2:	7013      	strb	r3, [r2, #0]
    1fd4:	e036      	b.n	2044 <STACK_SIZE+0x44>
    1fd6:	6821      	ldr	r1, [r4, #0]
    1fd8:	681a      	ldr	r2, [r3, #0]
    1fda:	0608      	lsls	r0, r1, #24
    1fdc:	d406      	bmi.n	1fec <_printf_i+0xb8>
    1fde:	0649      	lsls	r1, r1, #25
    1fe0:	d504      	bpl.n	1fec <_printf_i+0xb8>
    1fe2:	6815      	ldr	r5, [r2, #0]
    1fe4:	1d11      	adds	r1, r2, #4
    1fe6:	6019      	str	r1, [r3, #0]
    1fe8:	b2ad      	uxth	r5, r5
    1fea:	e002      	b.n	1ff2 <_printf_i+0xbe>
    1fec:	1d11      	adds	r1, r2, #4
    1fee:	6019      	str	r1, [r3, #0]
    1ff0:	6815      	ldr	r5, [r2, #0]
    1ff2:	4b5a      	ldr	r3, [pc, #360]	; (215c <STACK_SIZE+0x15c>)
    1ff4:	7e22      	ldrb	r2, [r4, #24]
    1ff6:	9303      	str	r3, [sp, #12]
    1ff8:	270a      	movs	r7, #10
    1ffa:	2a6f      	cmp	r2, #111	; 0x6f
    1ffc:	d11d      	bne.n	203a <STACK_SIZE+0x3a>
    1ffe:	2708      	movs	r7, #8
    2000:	e01b      	b.n	203a <STACK_SIZE+0x3a>
    2002:	1c22      	adds	r2, r4, #0
    2004:	2178      	movs	r1, #120	; 0x78
    2006:	3245      	adds	r2, #69	; 0x45
    2008:	7011      	strb	r1, [r2, #0]
    200a:	4a55      	ldr	r2, [pc, #340]	; (2160 <STACK_SIZE+0x160>)
    200c:	6819      	ldr	r1, [r3, #0]
    200e:	9203      	str	r2, [sp, #12]
    2010:	1d08      	adds	r0, r1, #4
    2012:	6822      	ldr	r2, [r4, #0]
    2014:	6018      	str	r0, [r3, #0]
    2016:	680d      	ldr	r5, [r1, #0]
    2018:	0610      	lsls	r0, r2, #24
    201a:	d402      	bmi.n	2022 <STACK_SIZE+0x22>
    201c:	0650      	lsls	r0, r2, #25
    201e:	d500      	bpl.n	2022 <STACK_SIZE+0x22>
    2020:	b2ad      	uxth	r5, r5
    2022:	07d3      	lsls	r3, r2, #31
    2024:	d502      	bpl.n	202c <STACK_SIZE+0x2c>
    2026:	2320      	movs	r3, #32
    2028:	431a      	orrs	r2, r3
    202a:	6022      	str	r2, [r4, #0]
    202c:	2710      	movs	r7, #16
    202e:	2d00      	cmp	r5, #0
    2030:	d103      	bne.n	203a <STACK_SIZE+0x3a>
    2032:	2320      	movs	r3, #32
    2034:	6822      	ldr	r2, [r4, #0]
    2036:	439a      	bics	r2, r3
    2038:	6022      	str	r2, [r4, #0]
    203a:	1c23      	adds	r3, r4, #0
    203c:	2200      	movs	r2, #0
    203e:	3343      	adds	r3, #67	; 0x43
    2040:	701a      	strb	r2, [r3, #0]
    2042:	e002      	b.n	204a <STACK_SIZE+0x4a>
    2044:	270a      	movs	r7, #10
    2046:	4b45      	ldr	r3, [pc, #276]	; (215c <STACK_SIZE+0x15c>)
    2048:	9303      	str	r3, [sp, #12]
    204a:	6863      	ldr	r3, [r4, #4]
    204c:	60a3      	str	r3, [r4, #8]
    204e:	2b00      	cmp	r3, #0
    2050:	db03      	blt.n	205a <STACK_SIZE+0x5a>
    2052:	2204      	movs	r2, #4
    2054:	6821      	ldr	r1, [r4, #0]
    2056:	4391      	bics	r1, r2
    2058:	6021      	str	r1, [r4, #0]
    205a:	2d00      	cmp	r5, #0
    205c:	d102      	bne.n	2064 <STACK_SIZE+0x64>
    205e:	9e04      	ldr	r6, [sp, #16]
    2060:	2b00      	cmp	r3, #0
    2062:	d00e      	beq.n	2082 <STACK_SIZE+0x82>
    2064:	9e04      	ldr	r6, [sp, #16]
    2066:	1c28      	adds	r0, r5, #0
    2068:	1c39      	adds	r1, r7, #0
    206a:	f7ff fa7d 	bl	1568 <__aeabi_uidivmod>
    206e:	9b03      	ldr	r3, [sp, #12]
    2070:	3e01      	subs	r6, #1
    2072:	5c5b      	ldrb	r3, [r3, r1]
    2074:	1c28      	adds	r0, r5, #0
    2076:	7033      	strb	r3, [r6, #0]
    2078:	1c39      	adds	r1, r7, #0
    207a:	f7ff f9ef 	bl	145c <__aeabi_uidiv>
    207e:	1e05      	subs	r5, r0, #0
    2080:	d1f1      	bne.n	2066 <STACK_SIZE+0x66>
    2082:	2f08      	cmp	r7, #8
    2084:	d109      	bne.n	209a <STACK_SIZE+0x9a>
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	07db      	lsls	r3, r3, #31
    208a:	d506      	bpl.n	209a <STACK_SIZE+0x9a>
    208c:	6863      	ldr	r3, [r4, #4]
    208e:	6922      	ldr	r2, [r4, #16]
    2090:	4293      	cmp	r3, r2
    2092:	dc02      	bgt.n	209a <STACK_SIZE+0x9a>
    2094:	2330      	movs	r3, #48	; 0x30
    2096:	3e01      	subs	r6, #1
    2098:	7033      	strb	r3, [r6, #0]
    209a:	9b04      	ldr	r3, [sp, #16]
    209c:	1b9b      	subs	r3, r3, r6
    209e:	6123      	str	r3, [r4, #16]
    20a0:	e02b      	b.n	20fa <STACK_SIZE+0xfa>
    20a2:	6809      	ldr	r1, [r1, #0]
    20a4:	681a      	ldr	r2, [r3, #0]
    20a6:	0608      	lsls	r0, r1, #24
    20a8:	d407      	bmi.n	20ba <STACK_SIZE+0xba>
    20aa:	0649      	lsls	r1, r1, #25
    20ac:	d505      	bpl.n	20ba <STACK_SIZE+0xba>
    20ae:	1d11      	adds	r1, r2, #4
    20b0:	6019      	str	r1, [r3, #0]
    20b2:	6813      	ldr	r3, [r2, #0]
    20b4:	8aa2      	ldrh	r2, [r4, #20]
    20b6:	801a      	strh	r2, [r3, #0]
    20b8:	e004      	b.n	20c4 <STACK_SIZE+0xc4>
    20ba:	1d11      	adds	r1, r2, #4
    20bc:	6019      	str	r1, [r3, #0]
    20be:	6813      	ldr	r3, [r2, #0]
    20c0:	6962      	ldr	r2, [r4, #20]
    20c2:	601a      	str	r2, [r3, #0]
    20c4:	2300      	movs	r3, #0
    20c6:	9e04      	ldr	r6, [sp, #16]
    20c8:	6123      	str	r3, [r4, #16]
    20ca:	e016      	b.n	20fa <STACK_SIZE+0xfa>
    20cc:	681a      	ldr	r2, [r3, #0]
    20ce:	1d11      	adds	r1, r2, #4
    20d0:	6019      	str	r1, [r3, #0]
    20d2:	6816      	ldr	r6, [r2, #0]
    20d4:	2100      	movs	r1, #0
    20d6:	1c30      	adds	r0, r6, #0
    20d8:	6862      	ldr	r2, [r4, #4]
    20da:	f000 f9ff 	bl	24dc <memchr>
    20de:	2800      	cmp	r0, #0
    20e0:	d001      	beq.n	20e6 <STACK_SIZE+0xe6>
    20e2:	1b80      	subs	r0, r0, r6
    20e4:	6060      	str	r0, [r4, #4]
    20e6:	6863      	ldr	r3, [r4, #4]
    20e8:	e003      	b.n	20f2 <STACK_SIZE+0xf2>
    20ea:	1c26      	adds	r6, r4, #0
    20ec:	3642      	adds	r6, #66	; 0x42
    20ee:	7032      	strb	r2, [r6, #0]
    20f0:	2301      	movs	r3, #1
    20f2:	6123      	str	r3, [r4, #16]
    20f4:	2300      	movs	r3, #0
    20f6:	9a04      	ldr	r2, [sp, #16]
    20f8:	7013      	strb	r3, [r2, #0]
    20fa:	9b07      	ldr	r3, [sp, #28]
    20fc:	9805      	ldr	r0, [sp, #20]
    20fe:	9300      	str	r3, [sp, #0]
    2100:	1c21      	adds	r1, r4, #0
    2102:	9b06      	ldr	r3, [sp, #24]
    2104:	aa09      	add	r2, sp, #36	; 0x24
    2106:	f7ff fea7 	bl	1e58 <_printf_common>
    210a:	1c43      	adds	r3, r0, #1
    210c:	d102      	bne.n	2114 <STACK_SIZE+0x114>
    210e:	2001      	movs	r0, #1
    2110:	4240      	negs	r0, r0
    2112:	e021      	b.n	2158 <STACK_SIZE+0x158>
    2114:	6923      	ldr	r3, [r4, #16]
    2116:	9805      	ldr	r0, [sp, #20]
    2118:	9906      	ldr	r1, [sp, #24]
    211a:	1c32      	adds	r2, r6, #0
    211c:	9d07      	ldr	r5, [sp, #28]
    211e:	47a8      	blx	r5
    2120:	1c43      	adds	r3, r0, #1
    2122:	d0f4      	beq.n	210e <STACK_SIZE+0x10e>
    2124:	6823      	ldr	r3, [r4, #0]
    2126:	079b      	lsls	r3, r3, #30
    2128:	d405      	bmi.n	2136 <STACK_SIZE+0x136>
    212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    212c:	68e0      	ldr	r0, [r4, #12]
    212e:	4298      	cmp	r0, r3
    2130:	da12      	bge.n	2158 <STACK_SIZE+0x158>
    2132:	1c18      	adds	r0, r3, #0
    2134:	e010      	b.n	2158 <STACK_SIZE+0x158>
    2136:	2500      	movs	r5, #0
    2138:	68e3      	ldr	r3, [r4, #12]
    213a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    213c:	1a9b      	subs	r3, r3, r2
    213e:	429d      	cmp	r5, r3
    2140:	daf3      	bge.n	212a <STACK_SIZE+0x12a>
    2142:	1c22      	adds	r2, r4, #0
    2144:	2301      	movs	r3, #1
    2146:	9805      	ldr	r0, [sp, #20]
    2148:	9906      	ldr	r1, [sp, #24]
    214a:	3219      	adds	r2, #25
    214c:	9e07      	ldr	r6, [sp, #28]
    214e:	47b0      	blx	r6
    2150:	1c43      	adds	r3, r0, #1
    2152:	d0dc      	beq.n	210e <STACK_SIZE+0x10e>
    2154:	3501      	adds	r5, #1
    2156:	e7ef      	b.n	2138 <STACK_SIZE+0x138>
    2158:	b00b      	add	sp, #44	; 0x2c
    215a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    215c:	00002651 	.word	0x00002651
    2160:	00002662 	.word	0x00002662

00002164 <_sbrk_r>:
    2164:	b538      	push	{r3, r4, r5, lr}
    2166:	2300      	movs	r3, #0
    2168:	4c06      	ldr	r4, [pc, #24]	; (2184 <_sbrk_r+0x20>)
    216a:	1c05      	adds	r5, r0, #0
    216c:	1c08      	adds	r0, r1, #0
    216e:	6023      	str	r3, [r4, #0]
    2170:	f7ff f834 	bl	11dc <_sbrk>
    2174:	1c43      	adds	r3, r0, #1
    2176:	d103      	bne.n	2180 <_sbrk_r+0x1c>
    2178:	6823      	ldr	r3, [r4, #0]
    217a:	2b00      	cmp	r3, #0
    217c:	d000      	beq.n	2180 <_sbrk_r+0x1c>
    217e:	602b      	str	r3, [r5, #0]
    2180:	bd38      	pop	{r3, r4, r5, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	200000dc 	.word	0x200000dc

00002188 <__sread>:
    2188:	b538      	push	{r3, r4, r5, lr}
    218a:	1c0c      	adds	r4, r1, #0
    218c:	250e      	movs	r5, #14
    218e:	5f49      	ldrsh	r1, [r1, r5]
    2190:	f000 f9b0 	bl	24f4 <_read_r>
    2194:	2800      	cmp	r0, #0
    2196:	db03      	blt.n	21a0 <__sread+0x18>
    2198:	6d63      	ldr	r3, [r4, #84]	; 0x54
    219a:	181b      	adds	r3, r3, r0
    219c:	6563      	str	r3, [r4, #84]	; 0x54
    219e:	e003      	b.n	21a8 <__sread+0x20>
    21a0:	89a2      	ldrh	r2, [r4, #12]
    21a2:	4b02      	ldr	r3, [pc, #8]	; (21ac <__sread+0x24>)
    21a4:	4013      	ands	r3, r2
    21a6:	81a3      	strh	r3, [r4, #12]
    21a8:	bd38      	pop	{r3, r4, r5, pc}
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	ffffefff 	.word	0xffffefff

000021b0 <__swrite>:
    21b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21b2:	1c1e      	adds	r6, r3, #0
    21b4:	898b      	ldrh	r3, [r1, #12]
    21b6:	1c05      	adds	r5, r0, #0
    21b8:	1c0c      	adds	r4, r1, #0
    21ba:	1c17      	adds	r7, r2, #0
    21bc:	05db      	lsls	r3, r3, #23
    21be:	d505      	bpl.n	21cc <__swrite+0x1c>
    21c0:	230e      	movs	r3, #14
    21c2:	5ec9      	ldrsh	r1, [r1, r3]
    21c4:	2200      	movs	r2, #0
    21c6:	2302      	movs	r3, #2
    21c8:	f000 f91c 	bl	2404 <_lseek_r>
    21cc:	89a2      	ldrh	r2, [r4, #12]
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <__swrite+0x34>)
    21d0:	1c28      	adds	r0, r5, #0
    21d2:	4013      	ands	r3, r2
    21d4:	81a3      	strh	r3, [r4, #12]
    21d6:	1c3a      	adds	r2, r7, #0
    21d8:	230e      	movs	r3, #14
    21da:	5ee1      	ldrsh	r1, [r4, r3]
    21dc:	1c33      	adds	r3, r6, #0
    21de:	f000 f877 	bl	22d0 <_write_r>
    21e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21e4:	ffffefff 	.word	0xffffefff

000021e8 <__sseek>:
    21e8:	b538      	push	{r3, r4, r5, lr}
    21ea:	1c0c      	adds	r4, r1, #0
    21ec:	250e      	movs	r5, #14
    21ee:	5f49      	ldrsh	r1, [r1, r5]
    21f0:	f000 f908 	bl	2404 <_lseek_r>
    21f4:	89a3      	ldrh	r3, [r4, #12]
    21f6:	1c42      	adds	r2, r0, #1
    21f8:	d103      	bne.n	2202 <__sseek+0x1a>
    21fa:	4a05      	ldr	r2, [pc, #20]	; (2210 <__sseek+0x28>)
    21fc:	4013      	ands	r3, r2
    21fe:	81a3      	strh	r3, [r4, #12]
    2200:	e004      	b.n	220c <__sseek+0x24>
    2202:	2280      	movs	r2, #128	; 0x80
    2204:	0152      	lsls	r2, r2, #5
    2206:	4313      	orrs	r3, r2
    2208:	81a3      	strh	r3, [r4, #12]
    220a:	6560      	str	r0, [r4, #84]	; 0x54
    220c:	bd38      	pop	{r3, r4, r5, pc}
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	ffffefff 	.word	0xffffefff

00002214 <__sclose>:
    2214:	b508      	push	{r3, lr}
    2216:	230e      	movs	r3, #14
    2218:	5ec9      	ldrsh	r1, [r1, r3]
    221a:	f000 f8e1 	bl	23e0 <_close_r>
    221e:	bd08      	pop	{r3, pc}

00002220 <__swbuf_r>:
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	1c05      	adds	r5, r0, #0
    2224:	1c0e      	adds	r6, r1, #0
    2226:	1c14      	adds	r4, r2, #0
    2228:	2800      	cmp	r0, #0
    222a:	d004      	beq.n	2236 <__swbuf_r+0x16>
    222c:	6983      	ldr	r3, [r0, #24]
    222e:	2b00      	cmp	r3, #0
    2230:	d101      	bne.n	2236 <__swbuf_r+0x16>
    2232:	f7ff fb9f 	bl	1974 <__sinit>
    2236:	4b23      	ldr	r3, [pc, #140]	; (22c4 <__swbuf_r+0xa4>)
    2238:	429c      	cmp	r4, r3
    223a:	d101      	bne.n	2240 <__swbuf_r+0x20>
    223c:	686c      	ldr	r4, [r5, #4]
    223e:	e008      	b.n	2252 <__swbuf_r+0x32>
    2240:	4b21      	ldr	r3, [pc, #132]	; (22c8 <__swbuf_r+0xa8>)
    2242:	429c      	cmp	r4, r3
    2244:	d101      	bne.n	224a <__swbuf_r+0x2a>
    2246:	68ac      	ldr	r4, [r5, #8]
    2248:	e003      	b.n	2252 <__swbuf_r+0x32>
    224a:	4b20      	ldr	r3, [pc, #128]	; (22cc <__swbuf_r+0xac>)
    224c:	429c      	cmp	r4, r3
    224e:	d100      	bne.n	2252 <__swbuf_r+0x32>
    2250:	68ec      	ldr	r4, [r5, #12]
    2252:	69a3      	ldr	r3, [r4, #24]
    2254:	60a3      	str	r3, [r4, #8]
    2256:	89a3      	ldrh	r3, [r4, #12]
    2258:	071b      	lsls	r3, r3, #28
    225a:	d50a      	bpl.n	2272 <__swbuf_r+0x52>
    225c:	6923      	ldr	r3, [r4, #16]
    225e:	2b00      	cmp	r3, #0
    2260:	d007      	beq.n	2272 <__swbuf_r+0x52>
    2262:	6823      	ldr	r3, [r4, #0]
    2264:	6922      	ldr	r2, [r4, #16]
    2266:	b2f6      	uxtb	r6, r6
    2268:	1a98      	subs	r0, r3, r2
    226a:	6963      	ldr	r3, [r4, #20]
    226c:	4298      	cmp	r0, r3
    226e:	db0f      	blt.n	2290 <__swbuf_r+0x70>
    2270:	e008      	b.n	2284 <__swbuf_r+0x64>
    2272:	1c28      	adds	r0, r5, #0
    2274:	1c21      	adds	r1, r4, #0
    2276:	f000 f83f 	bl	22f8 <__swsetup_r>
    227a:	2800      	cmp	r0, #0
    227c:	d0f1      	beq.n	2262 <__swbuf_r+0x42>
    227e:	2001      	movs	r0, #1
    2280:	4240      	negs	r0, r0
    2282:	e01d      	b.n	22c0 <__swbuf_r+0xa0>
    2284:	1c28      	adds	r0, r5, #0
    2286:	1c21      	adds	r1, r4, #0
    2288:	f7ff fb06 	bl	1898 <_fflush_r>
    228c:	2800      	cmp	r0, #0
    228e:	d1f6      	bne.n	227e <__swbuf_r+0x5e>
    2290:	68a3      	ldr	r3, [r4, #8]
    2292:	3001      	adds	r0, #1
    2294:	3b01      	subs	r3, #1
    2296:	60a3      	str	r3, [r4, #8]
    2298:	6823      	ldr	r3, [r4, #0]
    229a:	1c5a      	adds	r2, r3, #1
    229c:	6022      	str	r2, [r4, #0]
    229e:	701e      	strb	r6, [r3, #0]
    22a0:	6963      	ldr	r3, [r4, #20]
    22a2:	4298      	cmp	r0, r3
    22a4:	d005      	beq.n	22b2 <__swbuf_r+0x92>
    22a6:	89a3      	ldrh	r3, [r4, #12]
    22a8:	1c30      	adds	r0, r6, #0
    22aa:	07db      	lsls	r3, r3, #31
    22ac:	d508      	bpl.n	22c0 <__swbuf_r+0xa0>
    22ae:	2e0a      	cmp	r6, #10
    22b0:	d106      	bne.n	22c0 <__swbuf_r+0xa0>
    22b2:	1c28      	adds	r0, r5, #0
    22b4:	1c21      	adds	r1, r4, #0
    22b6:	f7ff faef 	bl	1898 <_fflush_r>
    22ba:	2800      	cmp	r0, #0
    22bc:	d1df      	bne.n	227e <__swbuf_r+0x5e>
    22be:	1c30      	adds	r0, r6, #0
    22c0:	bd70      	pop	{r4, r5, r6, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	000025e0 	.word	0x000025e0
    22c8:	00002600 	.word	0x00002600
    22cc:	00002620 	.word	0x00002620

000022d0 <_write_r>:
    22d0:	b538      	push	{r3, r4, r5, lr}
    22d2:	1c05      	adds	r5, r0, #0
    22d4:	2000      	movs	r0, #0
    22d6:	4c07      	ldr	r4, [pc, #28]	; (22f4 <_write_r+0x24>)
    22d8:	6020      	str	r0, [r4, #0]
    22da:	1c08      	adds	r0, r1, #0
    22dc:	1c11      	adds	r1, r2, #0
    22de:	1c1a      	adds	r2, r3, #0
    22e0:	f7fd ff6c 	bl	1bc <_write>
    22e4:	1c43      	adds	r3, r0, #1
    22e6:	d103      	bne.n	22f0 <_write_r+0x20>
    22e8:	6823      	ldr	r3, [r4, #0]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d000      	beq.n	22f0 <_write_r+0x20>
    22ee:	602b      	str	r3, [r5, #0]
    22f0:	bd38      	pop	{r3, r4, r5, pc}
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	200000dc 	.word	0x200000dc

000022f8 <__swsetup_r>:
    22f8:	4b35      	ldr	r3, [pc, #212]	; (23d0 <__swsetup_r+0xd8>)
    22fa:	b570      	push	{r4, r5, r6, lr}
    22fc:	681d      	ldr	r5, [r3, #0]
    22fe:	1c06      	adds	r6, r0, #0
    2300:	1c0c      	adds	r4, r1, #0
    2302:	2d00      	cmp	r5, #0
    2304:	d005      	beq.n	2312 <__swsetup_r+0x1a>
    2306:	69ab      	ldr	r3, [r5, #24]
    2308:	2b00      	cmp	r3, #0
    230a:	d102      	bne.n	2312 <__swsetup_r+0x1a>
    230c:	1c28      	adds	r0, r5, #0
    230e:	f7ff fb31 	bl	1974 <__sinit>
    2312:	4b30      	ldr	r3, [pc, #192]	; (23d4 <__swsetup_r+0xdc>)
    2314:	429c      	cmp	r4, r3
    2316:	d101      	bne.n	231c <__swsetup_r+0x24>
    2318:	686c      	ldr	r4, [r5, #4]
    231a:	e008      	b.n	232e <__swsetup_r+0x36>
    231c:	4b2e      	ldr	r3, [pc, #184]	; (23d8 <__swsetup_r+0xe0>)
    231e:	429c      	cmp	r4, r3
    2320:	d101      	bne.n	2326 <__swsetup_r+0x2e>
    2322:	68ac      	ldr	r4, [r5, #8]
    2324:	e003      	b.n	232e <__swsetup_r+0x36>
    2326:	4b2d      	ldr	r3, [pc, #180]	; (23dc <__swsetup_r+0xe4>)
    2328:	429c      	cmp	r4, r3
    232a:	d100      	bne.n	232e <__swsetup_r+0x36>
    232c:	68ec      	ldr	r4, [r5, #12]
    232e:	89a3      	ldrh	r3, [r4, #12]
    2330:	b29a      	uxth	r2, r3
    2332:	0711      	lsls	r1, r2, #28
    2334:	d423      	bmi.n	237e <__swsetup_r+0x86>
    2336:	06d1      	lsls	r1, r2, #27
    2338:	d407      	bmi.n	234a <__swsetup_r+0x52>
    233a:	2209      	movs	r2, #9
    233c:	2001      	movs	r0, #1
    233e:	6032      	str	r2, [r6, #0]
    2340:	3237      	adds	r2, #55	; 0x37
    2342:	4313      	orrs	r3, r2
    2344:	81a3      	strh	r3, [r4, #12]
    2346:	4240      	negs	r0, r0
    2348:	e040      	b.n	23cc <__swsetup_r+0xd4>
    234a:	0753      	lsls	r3, r2, #29
    234c:	d513      	bpl.n	2376 <__swsetup_r+0x7e>
    234e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2350:	2900      	cmp	r1, #0
    2352:	d008      	beq.n	2366 <__swsetup_r+0x6e>
    2354:	1c23      	adds	r3, r4, #0
    2356:	3344      	adds	r3, #68	; 0x44
    2358:	4299      	cmp	r1, r3
    235a:	d002      	beq.n	2362 <__swsetup_r+0x6a>
    235c:	1c30      	adds	r0, r6, #0
    235e:	f7ff fba5 	bl	1aac <_free_r>
    2362:	2300      	movs	r3, #0
    2364:	6363      	str	r3, [r4, #52]	; 0x34
    2366:	2224      	movs	r2, #36	; 0x24
    2368:	89a3      	ldrh	r3, [r4, #12]
    236a:	4393      	bics	r3, r2
    236c:	81a3      	strh	r3, [r4, #12]
    236e:	2300      	movs	r3, #0
    2370:	6063      	str	r3, [r4, #4]
    2372:	6923      	ldr	r3, [r4, #16]
    2374:	6023      	str	r3, [r4, #0]
    2376:	2208      	movs	r2, #8
    2378:	89a3      	ldrh	r3, [r4, #12]
    237a:	4313      	orrs	r3, r2
    237c:	81a3      	strh	r3, [r4, #12]
    237e:	6923      	ldr	r3, [r4, #16]
    2380:	2b00      	cmp	r3, #0
    2382:	d10b      	bne.n	239c <__swsetup_r+0xa4>
    2384:	23a0      	movs	r3, #160	; 0xa0
    2386:	89a2      	ldrh	r2, [r4, #12]
    2388:	009b      	lsls	r3, r3, #2
    238a:	4013      	ands	r3, r2
    238c:	2280      	movs	r2, #128	; 0x80
    238e:	0092      	lsls	r2, r2, #2
    2390:	4293      	cmp	r3, r2
    2392:	d003      	beq.n	239c <__swsetup_r+0xa4>
    2394:	1c30      	adds	r0, r6, #0
    2396:	1c21      	adds	r1, r4, #0
    2398:	f000 f848 	bl	242c <__smakebuf_r>
    239c:	2301      	movs	r3, #1
    239e:	89a2      	ldrh	r2, [r4, #12]
    23a0:	4013      	ands	r3, r2
    23a2:	d005      	beq.n	23b0 <__swsetup_r+0xb8>
    23a4:	2300      	movs	r3, #0
    23a6:	60a3      	str	r3, [r4, #8]
    23a8:	6963      	ldr	r3, [r4, #20]
    23aa:	425b      	negs	r3, r3
    23ac:	61a3      	str	r3, [r4, #24]
    23ae:	e003      	b.n	23b8 <__swsetup_r+0xc0>
    23b0:	0791      	lsls	r1, r2, #30
    23b2:	d400      	bmi.n	23b6 <__swsetup_r+0xbe>
    23b4:	6963      	ldr	r3, [r4, #20]
    23b6:	60a3      	str	r3, [r4, #8]
    23b8:	2000      	movs	r0, #0
    23ba:	6923      	ldr	r3, [r4, #16]
    23bc:	4283      	cmp	r3, r0
    23be:	d105      	bne.n	23cc <__swsetup_r+0xd4>
    23c0:	0613      	lsls	r3, r2, #24
    23c2:	d503      	bpl.n	23cc <__swsetup_r+0xd4>
    23c4:	2340      	movs	r3, #64	; 0x40
    23c6:	431a      	orrs	r2, r3
    23c8:	81a2      	strh	r2, [r4, #12]
    23ca:	3801      	subs	r0, #1
    23cc:	bd70      	pop	{r4, r5, r6, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	2000006c 	.word	0x2000006c
    23d4:	000025e0 	.word	0x000025e0
    23d8:	00002600 	.word	0x00002600
    23dc:	00002620 	.word	0x00002620

000023e0 <_close_r>:
    23e0:	b538      	push	{r3, r4, r5, lr}
    23e2:	2300      	movs	r3, #0
    23e4:	4c06      	ldr	r4, [pc, #24]	; (2400 <_close_r+0x20>)
    23e6:	1c05      	adds	r5, r0, #0
    23e8:	1c08      	adds	r0, r1, #0
    23ea:	6023      	str	r3, [r4, #0]
    23ec:	f7fe ff08 	bl	1200 <_close>
    23f0:	1c43      	adds	r3, r0, #1
    23f2:	d103      	bne.n	23fc <_close_r+0x1c>
    23f4:	6823      	ldr	r3, [r4, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d000      	beq.n	23fc <_close_r+0x1c>
    23fa:	602b      	str	r3, [r5, #0]
    23fc:	bd38      	pop	{r3, r4, r5, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	200000dc 	.word	0x200000dc

00002404 <_lseek_r>:
    2404:	b538      	push	{r3, r4, r5, lr}
    2406:	1c05      	adds	r5, r0, #0
    2408:	2000      	movs	r0, #0
    240a:	4c07      	ldr	r4, [pc, #28]	; (2428 <_lseek_r+0x24>)
    240c:	6020      	str	r0, [r4, #0]
    240e:	1c08      	adds	r0, r1, #0
    2410:	1c11      	adds	r1, r2, #0
    2412:	1c1a      	adds	r2, r3, #0
    2414:	f7fe ff00 	bl	1218 <_lseek>
    2418:	1c43      	adds	r3, r0, #1
    241a:	d103      	bne.n	2424 <_lseek_r+0x20>
    241c:	6823      	ldr	r3, [r4, #0]
    241e:	2b00      	cmp	r3, #0
    2420:	d000      	beq.n	2424 <_lseek_r+0x20>
    2422:	602b      	str	r3, [r5, #0]
    2424:	bd38      	pop	{r3, r4, r5, pc}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	200000dc 	.word	0x200000dc

0000242c <__smakebuf_r>:
    242c:	b5f0      	push	{r4, r5, r6, r7, lr}
    242e:	898b      	ldrh	r3, [r1, #12]
    2430:	b091      	sub	sp, #68	; 0x44
    2432:	079b      	lsls	r3, r3, #30
    2434:	d506      	bpl.n	2444 <__smakebuf_r+0x18>
    2436:	1c0b      	adds	r3, r1, #0
    2438:	3347      	adds	r3, #71	; 0x47
    243a:	600b      	str	r3, [r1, #0]
    243c:	610b      	str	r3, [r1, #16]
    243e:	2301      	movs	r3, #1
    2440:	614b      	str	r3, [r1, #20]
    2442:	e045      	b.n	24d0 <__smakebuf_r+0xa4>
    2444:	1c0c      	adds	r4, r1, #0
    2446:	230e      	movs	r3, #14
    2448:	5ec9      	ldrsh	r1, [r1, r3]
    244a:	1c06      	adds	r6, r0, #0
    244c:	2900      	cmp	r1, #0
    244e:	da04      	bge.n	245a <__smakebuf_r+0x2e>
    2450:	2380      	movs	r3, #128	; 0x80
    2452:	89a5      	ldrh	r5, [r4, #12]
    2454:	401d      	ands	r5, r3
    2456:	d110      	bne.n	247a <__smakebuf_r+0x4e>
    2458:	e00c      	b.n	2474 <__smakebuf_r+0x48>
    245a:	aa01      	add	r2, sp, #4
    245c:	f000 f85e 	bl	251c <_fstat_r>
    2460:	2800      	cmp	r0, #0
    2462:	dbf5      	blt.n	2450 <__smakebuf_r+0x24>
    2464:	23f0      	movs	r3, #240	; 0xf0
    2466:	9d02      	ldr	r5, [sp, #8]
    2468:	021b      	lsls	r3, r3, #8
    246a:	401d      	ands	r5, r3
    246c:	4b19      	ldr	r3, [pc, #100]	; (24d4 <__smakebuf_r+0xa8>)
    246e:	18ed      	adds	r5, r5, r3
    2470:	426b      	negs	r3, r5
    2472:	415d      	adcs	r5, r3
    2474:	2780      	movs	r7, #128	; 0x80
    2476:	00ff      	lsls	r7, r7, #3
    2478:	e001      	b.n	247e <__smakebuf_r+0x52>
    247a:	2500      	movs	r5, #0
    247c:	2740      	movs	r7, #64	; 0x40
    247e:	1c30      	adds	r0, r6, #0
    2480:	1c39      	adds	r1, r7, #0
    2482:	f7ff fb59 	bl	1b38 <_malloc_r>
    2486:	2800      	cmp	r0, #0
    2488:	d10c      	bne.n	24a4 <__smakebuf_r+0x78>
    248a:	89a3      	ldrh	r3, [r4, #12]
    248c:	059a      	lsls	r2, r3, #22
    248e:	d41f      	bmi.n	24d0 <__smakebuf_r+0xa4>
    2490:	2202      	movs	r2, #2
    2492:	4313      	orrs	r3, r2
    2494:	81a3      	strh	r3, [r4, #12]
    2496:	1c23      	adds	r3, r4, #0
    2498:	3347      	adds	r3, #71	; 0x47
    249a:	6023      	str	r3, [r4, #0]
    249c:	6123      	str	r3, [r4, #16]
    249e:	2301      	movs	r3, #1
    24a0:	6163      	str	r3, [r4, #20]
    24a2:	e015      	b.n	24d0 <__smakebuf_r+0xa4>
    24a4:	2280      	movs	r2, #128	; 0x80
    24a6:	4b0c      	ldr	r3, [pc, #48]	; (24d8 <__smakebuf_r+0xac>)
    24a8:	62b3      	str	r3, [r6, #40]	; 0x28
    24aa:	89a3      	ldrh	r3, [r4, #12]
    24ac:	6020      	str	r0, [r4, #0]
    24ae:	4313      	orrs	r3, r2
    24b0:	81a3      	strh	r3, [r4, #12]
    24b2:	6120      	str	r0, [r4, #16]
    24b4:	6167      	str	r7, [r4, #20]
    24b6:	2d00      	cmp	r5, #0
    24b8:	d00a      	beq.n	24d0 <__smakebuf_r+0xa4>
    24ba:	230e      	movs	r3, #14
    24bc:	5ee1      	ldrsh	r1, [r4, r3]
    24be:	1c30      	adds	r0, r6, #0
    24c0:	f000 f83e 	bl	2540 <_isatty_r>
    24c4:	2800      	cmp	r0, #0
    24c6:	d003      	beq.n	24d0 <__smakebuf_r+0xa4>
    24c8:	2201      	movs	r2, #1
    24ca:	89a3      	ldrh	r3, [r4, #12]
    24cc:	4313      	orrs	r3, r2
    24ce:	81a3      	strh	r3, [r4, #12]
    24d0:	b011      	add	sp, #68	; 0x44
    24d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24d4:	ffffe000 	.word	0xffffe000
    24d8:	000018f1 	.word	0x000018f1

000024dc <memchr>:
    24dc:	b2c9      	uxtb	r1, r1
    24de:	1882      	adds	r2, r0, r2
    24e0:	4290      	cmp	r0, r2
    24e2:	d004      	beq.n	24ee <memchr+0x12>
    24e4:	7803      	ldrb	r3, [r0, #0]
    24e6:	428b      	cmp	r3, r1
    24e8:	d002      	beq.n	24f0 <memchr+0x14>
    24ea:	3001      	adds	r0, #1
    24ec:	e7f8      	b.n	24e0 <memchr+0x4>
    24ee:	2000      	movs	r0, #0
    24f0:	4770      	bx	lr
	...

000024f4 <_read_r>:
    24f4:	b538      	push	{r3, r4, r5, lr}
    24f6:	1c05      	adds	r5, r0, #0
    24f8:	2000      	movs	r0, #0
    24fa:	4c07      	ldr	r4, [pc, #28]	; (2518 <_read_r+0x24>)
    24fc:	6020      	str	r0, [r4, #0]
    24fe:	1c08      	adds	r0, r1, #0
    2500:	1c11      	adds	r1, r2, #0
    2502:	1c1a      	adds	r2, r3, #0
    2504:	f7fd fe38 	bl	178 <_read>
    2508:	1c43      	adds	r3, r0, #1
    250a:	d103      	bne.n	2514 <_read_r+0x20>
    250c:	6823      	ldr	r3, [r4, #0]
    250e:	2b00      	cmp	r3, #0
    2510:	d000      	beq.n	2514 <_read_r+0x20>
    2512:	602b      	str	r3, [r5, #0]
    2514:	bd38      	pop	{r3, r4, r5, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	200000dc 	.word	0x200000dc

0000251c <_fstat_r>:
    251c:	b538      	push	{r3, r4, r5, lr}
    251e:	2300      	movs	r3, #0
    2520:	4c06      	ldr	r4, [pc, #24]	; (253c <_fstat_r+0x20>)
    2522:	1c05      	adds	r5, r0, #0
    2524:	1c08      	adds	r0, r1, #0
    2526:	1c11      	adds	r1, r2, #0
    2528:	6023      	str	r3, [r4, #0]
    252a:	f7fe fe6d 	bl	1208 <_fstat>
    252e:	1c43      	adds	r3, r0, #1
    2530:	d103      	bne.n	253a <_fstat_r+0x1e>
    2532:	6823      	ldr	r3, [r4, #0]
    2534:	2b00      	cmp	r3, #0
    2536:	d000      	beq.n	253a <_fstat_r+0x1e>
    2538:	602b      	str	r3, [r5, #0]
    253a:	bd38      	pop	{r3, r4, r5, pc}
    253c:	200000dc 	.word	0x200000dc

00002540 <_isatty_r>:
    2540:	b538      	push	{r3, r4, r5, lr}
    2542:	2300      	movs	r3, #0
    2544:	4c06      	ldr	r4, [pc, #24]	; (2560 <_isatty_r+0x20>)
    2546:	1c05      	adds	r5, r0, #0
    2548:	1c08      	adds	r0, r1, #0
    254a:	6023      	str	r3, [r4, #0]
    254c:	f7fe fe62 	bl	1214 <_isatty>
    2550:	1c43      	adds	r3, r0, #1
    2552:	d103      	bne.n	255c <_isatty_r+0x1c>
    2554:	6823      	ldr	r3, [r4, #0]
    2556:	2b00      	cmp	r3, #0
    2558:	d000      	beq.n	255c <_isatty_r+0x1c>
    255a:	602b      	str	r3, [r5, #0]
    255c:	bd38      	pop	{r3, r4, r5, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	200000dc 	.word	0x200000dc
    2564:	30257830 	.word	0x30257830
    2568:	000a7832 	.word	0x000a7832
    256c:	42000800 	.word	0x42000800
    2570:	42000c00 	.word	0x42000c00
    2574:	42001000 	.word	0x42001000
    2578:	42001400 	.word	0x42001400
    257c:	42001800 	.word	0x42001800
    2580:	42001c00 	.word	0x42001c00
    2584:	00000b72 	.word	0x00000b72
    2588:	00000b6e 	.word	0x00000b6e
    258c:	00000b6e 	.word	0x00000b6e
    2590:	00000bce 	.word	0x00000bce
    2594:	00000bce 	.word	0x00000bce
    2598:	00000b88 	.word	0x00000b88
    259c:	00000b78 	.word	0x00000b78
    25a0:	00000b8e 	.word	0x00000b8e
    25a4:	00000bbc 	.word	0x00000bbc
    25a8:	00000c58 	.word	0x00000c58
    25ac:	00000c38 	.word	0x00000c38
    25b0:	00000c38 	.word	0x00000c38
    25b4:	00000cb8 	.word	0x00000cb8
    25b8:	00000c4a 	.word	0x00000c4a
    25bc:	00000c66 	.word	0x00000c66
    25c0:	00000c3c 	.word	0x00000c3c
    25c4:	00000c74 	.word	0x00000c74
    25c8:	00000ca8 	.word	0x00000ca8
    25cc:	54415453 	.word	0x54415453
    25d0:	203a5355 	.word	0x203a5355
    25d4:	00006425 	.word	0x00006425
    25d8:	00000043 	.word	0x00000043

000025dc <_global_impure_ptr>:
    25dc:	2000000c                                ... 

000025e0 <__sf_fake_stdin>:
	...

00002600 <__sf_fake_stdout>:
	...

00002620 <__sf_fake_stderr>:
	...
    2640:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2650:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2660:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2670:	00006665                                ef..

00002674 <_init>:
    2674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	bcf8      	pop	{r3, r4, r5, r6, r7}
    267a:	bc08      	pop	{r3}
    267c:	469e      	mov	lr, r3
    267e:	4770      	bx	lr

00002680 <__init_array_start>:
    2680:	000000d9 	.word	0x000000d9

00002684 <_fini>:
    2684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	bcf8      	pop	{r3, r4, r5, r6, r7}
    268a:	bc08      	pop	{r3}
    268c:	469e      	mov	lr, r3
    268e:	4770      	bx	lr

00002690 <__fini_array_start>:
    2690:	000000b1 	.word	0x000000b1
