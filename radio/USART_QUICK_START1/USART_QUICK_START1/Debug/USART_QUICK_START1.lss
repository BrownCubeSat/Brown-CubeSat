
USART_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002554  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002554  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  20000068  000025bc  00010068  2**2
                  ALLOC
  3 .stack        00002000  200000d8  0000262c  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016ea2  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002259  00000000  00000000  00026f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000404a  00000000  00000000  000291e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e0  00000000  00000000  0002d230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003e0  00000000  00000000  0002d610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018d33  00000000  00000000  0002d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000090d7  00000000  00000000  00046723  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a252  00000000  00000000  0004f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001064  00000000  00000000  000d9a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200020d8 	.word	0x200020d8
       4:	0000109d 	.word	0x0000109d
       8:	00001099 	.word	0x00001099
       c:	00001099 	.word	0x00001099
	...
      2c:	00001099 	.word	0x00001099
	...
      38:	00001099 	.word	0x00001099
      3c:	00001099 	.word	0x00001099
      40:	00001099 	.word	0x00001099
      44:	00001099 	.word	0x00001099
      48:	00001099 	.word	0x00001099
      4c:	00001099 	.word	0x00001099
      50:	00001099 	.word	0x00001099
      54:	00001099 	.word	0x00001099
      58:	00001099 	.word	0x00001099
      5c:	00001099 	.word	0x00001099
      60:	00001099 	.word	0x00001099
      64:	00001099 	.word	0x00001099
      68:	00001099 	.word	0x00001099
      6c:	00001099 	.word	0x00001099
      70:	00001099 	.word	0x00001099
      74:	00001099 	.word	0x00001099
      78:	00001099 	.word	0x00001099
      7c:	00001099 	.word	0x00001099
      80:	00001099 	.word	0x00001099
      84:	00001099 	.word	0x00001099
      88:	00001099 	.word	0x00001099
      8c:	00001099 	.word	0x00001099
      90:	00001099 	.word	0x00001099
      94:	00001099 	.word	0x00001099
      98:	00001099 	.word	0x00001099
      9c:	00001099 	.word	0x00001099
      a0:	00001099 	.word	0x00001099
      a4:	00001099 	.word	0x00001099
      a8:	00001099 	.word	0x00001099
      ac:	00001099 	.word	0x00001099

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000068 	.word	0x20000068
      d0:	00000000 	.word	0x00000000
      d4:	00002554 	.word	0x00002554

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002554 	.word	0x00002554
     104:	2000006c 	.word	0x2000006c
     108:	00002554 	.word	0x00002554
     10c:	00000000 	.word	0x00000000

00000110 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     110:	b5f0      	push	{r4, r5, r6, r7, lr}
     112:	4647      	mov	r7, r8
     114:	b480      	push	{r7}
     116:	1c0c      	adds	r4, r1, #0
     118:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     11a:	2800      	cmp	r0, #0
     11c:	d10c      	bne.n	138 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     11e:	2a00      	cmp	r2, #0
     120:	dd0d      	ble.n	13e <_read+0x2e>
     122:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     124:	4e09      	ldr	r6, [pc, #36]	; (14c <_read+0x3c>)
     126:	4d0a      	ldr	r5, [pc, #40]	; (150 <_read+0x40>)
     128:	6830      	ldr	r0, [r6, #0]
     12a:	1c21      	adds	r1, r4, #0
     12c:	682b      	ldr	r3, [r5, #0]
     12e:	4798      	blx	r3
		ptr++;
     130:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     132:	42bc      	cmp	r4, r7
     134:	d1f8      	bne.n	128 <_read+0x18>
     136:	e004      	b.n	142 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     138:	2001      	movs	r0, #1
     13a:	4240      	negs	r0, r0
     13c:	e002      	b.n	144 <_read+0x34>
	}

	for (; len > 0; --len) {
     13e:	2000      	movs	r0, #0
     140:	e000      	b.n	144 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     142:	4640      	mov	r0, r8
	}
	return nChars;
}
     144:	bc04      	pop	{r2}
     146:	4690      	mov	r8, r2
     148:	bdf0      	pop	{r4, r5, r6, r7, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	200000c8 	.word	0x200000c8
     150:	200000c0 	.word	0x200000c0

00000154 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     154:	b5f0      	push	{r4, r5, r6, r7, lr}
     156:	4647      	mov	r7, r8
     158:	b480      	push	{r7}
     15a:	1c0e      	adds	r6, r1, #0
     15c:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     15e:	3801      	subs	r0, #1
     160:	2802      	cmp	r0, #2
     162:	d810      	bhi.n	186 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     164:	2a00      	cmp	r2, #0
     166:	d011      	beq.n	18c <_write+0x38>
     168:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     16a:	4b0d      	ldr	r3, [pc, #52]	; (1a0 <_write+0x4c>)
     16c:	4698      	mov	r8, r3
     16e:	4f0d      	ldr	r7, [pc, #52]	; (1a4 <_write+0x50>)
     170:	4643      	mov	r3, r8
     172:	6818      	ldr	r0, [r3, #0]
     174:	5d31      	ldrb	r1, [r6, r4]
     176:	683b      	ldr	r3, [r7, #0]
     178:	4798      	blx	r3
     17a:	2800      	cmp	r0, #0
     17c:	db08      	blt.n	190 <_write+0x3c>
			return -1;
		}
		++nChars;
     17e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     180:	42a5      	cmp	r5, r4
     182:	d1f5      	bne.n	170 <_write+0x1c>
     184:	e007      	b.n	196 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     186:	2001      	movs	r0, #1
     188:	4240      	negs	r0, r0
     18a:	e005      	b.n	198 <_write+0x44>
	}

	for (; len != 0; --len) {
     18c:	2000      	movs	r0, #0
     18e:	e003      	b.n	198 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     190:	2001      	movs	r0, #1
     192:	4240      	negs	r0, r0
     194:	e000      	b.n	198 <_write+0x44>
		}
		++nChars;
     196:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     198:	bc04      	pop	{r2}
     19a:	4690      	mov	r8, r2
     19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	200000c8 	.word	0x200000c8
     1a4:	200000c4 	.word	0x200000c4

000001a8 <computeCheckSum>:
#include <asf.h>
#include "radio_commands.h"
#include "radio.h"
//<><><<>><><>Helpers<><><<>><><>

uint8_t computeCheckSum(uint8_t cmd[], int dataLength) {
     1a8:	b510      	push	{r4, lr}
    uint8_t sum = 0;
    for(int i = 0; i < dataLength; i ++) {
     1aa:	2900      	cmp	r1, #0
     1ac:	dd09      	ble.n	1c2 <computeCheckSum+0x1a>
     1ae:	1c03      	adds	r3, r0, #0
     1b0:	1840      	adds	r0, r0, r1
#include "radio_commands.h"
#include "radio.h"
//<><><<>><><>Helpers<><><<>><><>

uint8_t computeCheckSum(uint8_t cmd[], int dataLength) {
    uint8_t sum = 0;
     1b2:	2200      	movs	r2, #0
    for(int i = 0; i < dataLength; i ++) {
        sum += cmd[i];
     1b4:	781c      	ldrb	r4, [r3, #0]
     1b6:	1912      	adds	r2, r2, r4
     1b8:	b2d2      	uxtb	r2, r2
     1ba:	3301      	adds	r3, #1
#include "radio.h"
//<><><<>><><>Helpers<><><<>><><>

uint8_t computeCheckSum(uint8_t cmd[], int dataLength) {
    uint8_t sum = 0;
    for(int i = 0; i < dataLength; i ++) {
     1bc:	4283      	cmp	r3, r0
     1be:	d1f9      	bne.n	1b4 <computeCheckSum+0xc>
     1c0:	e000      	b.n	1c4 <computeCheckSum+0x1c>
#include "radio_commands.h"
#include "radio.h"
//<><><<>><><>Helpers<><><<>><><>

uint8_t computeCheckSum(uint8_t cmd[], int dataLength) {
    uint8_t sum = 0;
     1c2:	2200      	movs	r2, #0
    for(int i = 0; i < dataLength; i ++) {
        sum += cmd[i];
    }
    return ~sum;
     1c4:	43d2      	mvns	r2, r2
     1c6:	b2d0      	uxtb	r0, r2
}
     1c8:	bd10      	pop	{r4, pc}
     1ca:	46c0      	nop			; (mov r8, r8)

000001cc <printByte>:
    cmd[0] = 0x01; //SoH byte
    cmd[dataLength + 1] = computeCheckSum(&cmd[1], dataLength);
    return 0;
}

void printByte(uint8_t byte) {
     1cc:	b508      	push	{r3, lr}
     1ce:	1c01      	adds	r1, r0, #0
    printf("0x%02x\n", byte);
     1d0:	4801      	ldr	r0, [pc, #4]	; (1d8 <printByte+0xc>)
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <printByte+0x10>)
     1d4:	4798      	blx	r3
}
     1d6:	bd08      	pop	{r3, pc}
     1d8:	00002430 	.word	0x00002430
     1dc:	00001529 	.word	0x00001529

000001e0 <sendToRadio>:

    return !(response[1] == responseType && response[2] == responseCode);
}


int sendToRadio(uint8_t cmd[], int size, Radio* r) {
     1e0:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < size; i++) {
     1e2:	2900      	cmp	r1, #0
     1e4:	dd07      	ble.n	1f6 <sendToRadio+0x16>
     1e6:	1c04      	adds	r4, r0, #0
     1e8:	1846      	adds	r6, r0, r1
        printByte(cmd[i]);
     1ea:	4d04      	ldr	r5, [pc, #16]	; (1fc <sendToRadio+0x1c>)
     1ec:	7820      	ldrb	r0, [r4, #0]
     1ee:	47a8      	blx	r5
     1f0:	3401      	adds	r4, #1
    return !(response[1] == responseType && response[2] == responseCode);
}


int sendToRadio(uint8_t cmd[], int size, Radio* r) {
    for (int i = 0; i < size; i++) {
     1f2:	42b4      	cmp	r4, r6
     1f4:	d1fa      	bne.n	1ec <sendToRadio+0xc>
        printByte(cmd[i]);
    }
    return 0;

    // return usart_write_buffer_wait(r->in, cmd, size);
}
     1f6:	2000      	movs	r0, #0
     1f8:	bd70      	pop	{r4, r5, r6, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	000001cd 	.word	0x000001cd

00000200 <receiveFromRadio>:

int receiveFromRadio(uint8_t* rx_data, uint16_t length, Radio* r) {
     200:	b510      	push	{r4, lr}
     202:	1c04      	adds	r4, r0, #0
     204:	1c0b      	adds	r3, r1, #0
    return usart_read_buffer_wait(r->out, rx_data, length);
     206:	6810      	ldr	r0, [r2, #0]
     208:	1c21      	adds	r1, r4, #0
     20a:	1c1a      	adds	r2, r3, #0
     20c:	4b01      	ldr	r3, [pc, #4]	; (214 <receiveFromRadio+0x14>)
     20e:	4798      	blx	r3
}
     210:	bd10      	pop	{r4, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	00000a9d 	.word	0x00000a9d

00000218 <simpleResponse>:
    
    return 0;
    
}

int simpleResponse(int responseType, int responseCode, Radio *r) {
     218:	b570      	push	{r4, r5, r6, lr}
     21a:	b082      	sub	sp, #8
     21c:	1c05      	adds	r5, r0, #0
     21e:	1c0e      	adds	r6, r1, #0
    //+ 3 for SoH, Status, Checksum
    int responseLength = 1 + 3;
    uint8_t response[responseLength];

    if  (receiveFromRadio(response, responseLength, r)) {
     220:	a801      	add	r0, sp, #4
     222:	2104      	movs	r1, #4
     224:	4c0d      	ldr	r4, [pc, #52]	; (25c <simpleResponse+0x44>)
     226:	47a0      	blx	r4
        //error
        return 1;
     228:	2301      	movs	r3, #1
int simpleResponse(int responseType, int responseCode, Radio *r) {
    //+ 3 for SoH, Status, Checksum
    int responseLength = 1 + 3;
    uint8_t response[responseLength];

    if  (receiveFromRadio(response, responseLength, r)) {
     22a:	2800      	cmp	r0, #0
     22c:	d113      	bne.n	256 <simpleResponse+0x3e>
        //error
        return 1;
    }

    if (computeCheckSum(&response[1], 2) != response[3]) {
     22e:	4668      	mov	r0, sp
     230:	3005      	adds	r0, #5
     232:	2102      	movs	r1, #2
     234:	4a0a      	ldr	r2, [pc, #40]	; (260 <simpleResponse+0x48>)
     236:	4790      	blx	r2
     238:	ab01      	add	r3, sp, #4
     23a:	78da      	ldrb	r2, [r3, #3]
        //bad checksum, data is corrupted.
        return 1;
     23c:	2301      	movs	r3, #1
    if  (receiveFromRadio(response, responseLength, r)) {
        //error
        return 1;
    }

    if (computeCheckSum(&response[1], 2) != response[3]) {
     23e:	4282      	cmp	r2, r0
     240:	d109      	bne.n	256 <simpleResponse+0x3e>
        //bad checksum, data is corrupted.
        return 1;
    }

    return !(response[1] == responseType && response[2] == responseCode);
     242:	ab01      	add	r3, sp, #4
     244:	785a      	ldrb	r2, [r3, #1]
     246:	2301      	movs	r3, #1
     248:	42aa      	cmp	r2, r5
     24a:	d104      	bne.n	256 <simpleResponse+0x3e>
     24c:	ab01      	add	r3, sp, #4
     24e:	789b      	ldrb	r3, [r3, #2]
     250:	1b9b      	subs	r3, r3, r6
    int responseLength = 1 + 3;
    uint8_t response[responseLength];

    if  (receiveFromRadio(response, responseLength, r)) {
        //error
        return 1;
     252:	1e5e      	subs	r6, r3, #1
     254:	41b3      	sbcs	r3, r6
        //bad checksum, data is corrupted.
        return 1;
    }

    return !(response[1] == responseType && response[2] == responseCode);
}
     256:	1c18      	adds	r0, r3, #0
     258:	b002      	add	sp, #8
     25a:	bd70      	pop	{r4, r5, r6, pc}
     25c:	00000201 	.word	0x00000201
     260:	000001a9 	.word	0x000001a9

00000264 <program>:

    return simpleResponse(0xb9, 0x00, r);
}


int program(Radio* r) {
     264:	b510      	push	{r4, lr}
     266:	b082      	sub	sp, #8
     268:	1c04      	adds	r4, r0, #0
    uint8_t cmd[] = {0x01, 0x1e, 0xe1};
     26a:	a801      	add	r0, sp, #4
     26c:	4907      	ldr	r1, [pc, #28]	; (28c <program+0x28>)
     26e:	2203      	movs	r2, #3
     270:	4b07      	ldr	r3, [pc, #28]	; (290 <program+0x2c>)
     272:	4798      	blx	r3
    if (sendToRadio(cmd, 3, r)) {
     274:	a801      	add	r0, sp, #4
     276:	2103      	movs	r1, #3
     278:	1c22      	adds	r2, r4, #0
     27a:	4b06      	ldr	r3, [pc, #24]	; (294 <program+0x30>)
     27c:	4798      	blx	r3
        //error
    }

    return simpleResponse(0x9E, 0x00, r);
     27e:	209e      	movs	r0, #158	; 0x9e
     280:	2100      	movs	r1, #0
     282:	1c22      	adds	r2, r4, #0
     284:	4b04      	ldr	r3, [pc, #16]	; (298 <program+0x34>)
     286:	4798      	blx	r3
}
     288:	b002      	add	sp, #8
     28a:	bd10      	pop	{r4, pc}
     28c:	0000242c 	.word	0x0000242c
     290:	00001505 	.word	0x00001505
     294:	000001e1 	.word	0x000001e1
     298:	00000219 	.word	0x00000219

0000029c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     29c:	4b0c      	ldr	r3, [pc, #48]	; (2d0 <cpu_irq_enter_critical+0x34>)
     29e:	681b      	ldr	r3, [r3, #0]
     2a0:	2b00      	cmp	r3, #0
     2a2:	d110      	bne.n	2c6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2a4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     2a8:	2b00      	cmp	r3, #0
     2aa:	d109      	bne.n	2c0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2ae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     2b2:	2200      	movs	r2, #0
     2b4:	4b07      	ldr	r3, [pc, #28]	; (2d4 <cpu_irq_enter_critical+0x38>)
     2b6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     2b8:	2201      	movs	r2, #1
     2ba:	4b07      	ldr	r3, [pc, #28]	; (2d8 <cpu_irq_enter_critical+0x3c>)
     2bc:	701a      	strb	r2, [r3, #0]
     2be:	e002      	b.n	2c6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     2c0:	2200      	movs	r2, #0
     2c2:	4b05      	ldr	r3, [pc, #20]	; (2d8 <cpu_irq_enter_critical+0x3c>)
     2c4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <cpu_irq_enter_critical+0x34>)
     2c8:	681a      	ldr	r2, [r3, #0]
     2ca:	3201      	adds	r2, #1
     2cc:	601a      	str	r2, [r3, #0]
}
     2ce:	4770      	bx	lr
     2d0:	20000084 	.word	0x20000084
     2d4:	20000000 	.word	0x20000000
     2d8:	20000088 	.word	0x20000088

000002dc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     2dc:	4b08      	ldr	r3, [pc, #32]	; (300 <cpu_irq_leave_critical+0x24>)
     2de:	681a      	ldr	r2, [r3, #0]
     2e0:	3a01      	subs	r2, #1
     2e2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     2e4:	681b      	ldr	r3, [r3, #0]
     2e6:	2b00      	cmp	r3, #0
     2e8:	d109      	bne.n	2fe <cpu_irq_leave_critical+0x22>
     2ea:	4b06      	ldr	r3, [pc, #24]	; (304 <cpu_irq_leave_critical+0x28>)
     2ec:	781b      	ldrb	r3, [r3, #0]
     2ee:	2b00      	cmp	r3, #0
     2f0:	d005      	beq.n	2fe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     2f2:	2201      	movs	r2, #1
     2f4:	4b04      	ldr	r3, [pc, #16]	; (308 <cpu_irq_leave_critical+0x2c>)
     2f6:	701a      	strb	r2, [r3, #0]
     2f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2fc:	b662      	cpsie	i
	}
}
     2fe:	4770      	bx	lr
     300:	20000084 	.word	0x20000084
     304:	20000088 	.word	0x20000088
     308:	20000000 	.word	0x20000000

0000030c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     30c:	b5f0      	push	{r4, r5, r6, r7, lr}
     30e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     310:	ac01      	add	r4, sp, #4
     312:	2501      	movs	r5, #1
     314:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     316:	2700      	movs	r7, #0
     318:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     31a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     31c:	203e      	movs	r0, #62	; 0x3e
     31e:	1c21      	adds	r1, r4, #0
     320:	4e06      	ldr	r6, [pc, #24]	; (33c <system_board_init+0x30>)
     322:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     324:	2280      	movs	r2, #128	; 0x80
     326:	05d2      	lsls	r2, r2, #23
     328:	4b05      	ldr	r3, [pc, #20]	; (340 <system_board_init+0x34>)
     32a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     32c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     32e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     330:	200f      	movs	r0, #15
     332:	1c21      	adds	r1, r4, #0
     334:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     336:	b003      	add	sp, #12
     338:	bdf0      	pop	{r4, r5, r6, r7, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	00000345 	.word	0x00000345
     340:	41004480 	.word	0x41004480

00000344 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     344:	b500      	push	{lr}
     346:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     348:	ab01      	add	r3, sp, #4
     34a:	2280      	movs	r2, #128	; 0x80
     34c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     34e:	780a      	ldrb	r2, [r1, #0]
     350:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     352:	784a      	ldrb	r2, [r1, #1]
     354:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     356:	788a      	ldrb	r2, [r1, #2]
     358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     35a:	1c19      	adds	r1, r3, #0
     35c:	4b01      	ldr	r3, [pc, #4]	; (364 <port_pin_set_config+0x20>)
     35e:	4798      	blx	r3
}
     360:	b003      	add	sp, #12
     362:	bd00      	pop	{pc}
     364:	0000103d 	.word	0x0000103d

00000368 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     368:	b510      	push	{r4, lr}
     36a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     36c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     36e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     370:	4299      	cmp	r1, r3
     372:	d30c      	bcc.n	38e <_sercom_get_sync_baud_val+0x26>
     374:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     376:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     378:	1c60      	adds	r0, r4, #1
     37a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     37c:	428b      	cmp	r3, r1
     37e:	d801      	bhi.n	384 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     380:	1c04      	adds	r4, r0, #0
     382:	e7f8      	b.n	376 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     384:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     386:	2cff      	cmp	r4, #255	; 0xff
     388:	d801      	bhi.n	38e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     38a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     38c:	2000      	movs	r0, #0
	}
}
     38e:	bd10      	pop	{r4, pc}

00000390 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     390:	b5f0      	push	{r4, r5, r6, r7, lr}
     392:	465f      	mov	r7, fp
     394:	4656      	mov	r6, sl
     396:	464d      	mov	r5, r9
     398:	4644      	mov	r4, r8
     39a:	b4f0      	push	{r4, r5, r6, r7}
     39c:	b087      	sub	sp, #28
     39e:	1c06      	adds	r6, r0, #0
     3a0:	1c0d      	adds	r5, r1, #0
     3a2:	9204      	str	r2, [sp, #16]
     3a4:	aa10      	add	r2, sp, #64	; 0x40
     3a6:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3a8:	1c32      	adds	r2, r6, #0
     3aa:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ac:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3ae:	428a      	cmp	r2, r1
     3b0:	d900      	bls.n	3b4 <_sercom_get_async_baud_val+0x24>
     3b2:	e0b3      	b.n	51c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3b4:	2b00      	cmp	r3, #0
     3b6:	d14b      	bne.n	450 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3b8:	2100      	movs	r1, #0
     3ba:	1c32      	adds	r2, r6, #0
     3bc:	4c5e      	ldr	r4, [pc, #376]	; (538 <_sercom_get_async_baud_val+0x1a8>)
     3be:	47a0      	blx	r4
     3c0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     3c2:	1c2e      	adds	r6, r5, #0
     3c4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3c6:	2000      	movs	r0, #0
     3c8:	2100      	movs	r1, #0
     3ca:	2200      	movs	r2, #0
     3cc:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     3ce:	243f      	movs	r4, #63	; 0x3f
     3d0:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     3d2:	2501      	movs	r5, #1
     3d4:	46a8      	mov	r8, r5
     3d6:	9002      	str	r0, [sp, #8]
     3d8:	9103      	str	r1, [sp, #12]
     3da:	4661      	mov	r1, ip
     3dc:	3920      	subs	r1, #32
     3de:	d403      	bmi.n	3e8 <_sercom_get_async_baud_val+0x58>
     3e0:	4640      	mov	r0, r8
     3e2:	4088      	lsls	r0, r1
     3e4:	4681      	mov	r9, r0
     3e6:	e005      	b.n	3f4 <_sercom_get_async_baud_val+0x64>
     3e8:	2120      	movs	r1, #32
     3ea:	4665      	mov	r5, ip
     3ec:	1b4c      	subs	r4, r1, r5
     3ee:	4640      	mov	r0, r8
     3f0:	40e0      	lsrs	r0, r4
     3f2:	4681      	mov	r9, r0
     3f4:	4641      	mov	r1, r8
     3f6:	4664      	mov	r4, ip
     3f8:	40a1      	lsls	r1, r4
     3fa:	468a      	mov	sl, r1

		r = r << 1;
     3fc:	1c10      	adds	r0, r2, #0
     3fe:	1c19      	adds	r1, r3, #0
     400:	1880      	adds	r0, r0, r2
     402:	4159      	adcs	r1, r3
     404:	1c02      	adds	r2, r0, #0
     406:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     408:	465d      	mov	r5, fp
     40a:	464c      	mov	r4, r9
     40c:	4225      	tst	r5, r4
     40e:	d002      	beq.n	416 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     410:	4642      	mov	r2, r8
     412:	4302      	orrs	r2, r0
     414:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     416:	429f      	cmp	r7, r3
     418:	d80c      	bhi.n	434 <_sercom_get_async_baud_val+0xa4>
     41a:	d101      	bne.n	420 <_sercom_get_async_baud_val+0x90>
     41c:	4296      	cmp	r6, r2
     41e:	d809      	bhi.n	434 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     420:	1b92      	subs	r2, r2, r6
     422:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     424:	4650      	mov	r0, sl
     426:	9d02      	ldr	r5, [sp, #8]
     428:	4328      	orrs	r0, r5
     42a:	4649      	mov	r1, r9
     42c:	9c03      	ldr	r4, [sp, #12]
     42e:	4321      	orrs	r1, r4
     430:	9002      	str	r0, [sp, #8]
     432:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     434:	4665      	mov	r5, ip
     436:	3d01      	subs	r5, #1
     438:	46ac      	mov	ip, r5
     43a:	d2ce      	bcs.n	3da <_sercom_get_async_baud_val+0x4a>
     43c:	9802      	ldr	r0, [sp, #8]
     43e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     440:	4b3c      	ldr	r3, [pc, #240]	; (534 <_sercom_get_async_baud_val+0x1a4>)
     442:	4a3b      	ldr	r2, [pc, #236]	; (530 <_sercom_get_async_baud_val+0x1a0>)
     444:	1a12      	subs	r2, r2, r0
     446:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     448:	0c12      	lsrs	r2, r2, #16
     44a:	041b      	lsls	r3, r3, #16
     44c:	431a      	orrs	r2, r3
     44e:	e062      	b.n	516 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     450:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     452:	2b01      	cmp	r3, #1
     454:	d15f      	bne.n	516 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     456:	0f4f      	lsrs	r7, r1, #29
     458:	46b9      	mov	r9, r7
     45a:	00cd      	lsls	r5, r1, #3
     45c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     45e:	2100      	movs	r1, #0
     460:	1c32      	adds	r2, r6, #0
     462:	2300      	movs	r3, #0
     464:	4c34      	ldr	r4, [pc, #208]	; (538 <_sercom_get_async_baud_val+0x1a8>)
     466:	47a0      	blx	r4
     468:	1c06      	adds	r6, r0, #0
     46a:	1c0f      	adds	r7, r1, #0
     46c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     46e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     470:	9602      	str	r6, [sp, #8]
     472:	9703      	str	r7, [sp, #12]
     474:	469a      	mov	sl, r3
     476:	4650      	mov	r0, sl
     478:	b2c0      	uxtb	r0, r0
     47a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     47c:	2100      	movs	r1, #0
     47e:	4688      	mov	r8, r1
     480:	2200      	movs	r2, #0
     482:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     484:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     486:	1c27      	adds	r7, r4, #0
     488:	3f20      	subs	r7, #32
     48a:	d403      	bmi.n	494 <_sercom_get_async_baud_val+0x104>
     48c:	1c2e      	adds	r6, r5, #0
     48e:	40be      	lsls	r6, r7
     490:	9601      	str	r6, [sp, #4]
     492:	e004      	b.n	49e <_sercom_get_async_baud_val+0x10e>
     494:	2020      	movs	r0, #32
     496:	1b07      	subs	r7, r0, r4
     498:	1c29      	adds	r1, r5, #0
     49a:	40f9      	lsrs	r1, r7
     49c:	9101      	str	r1, [sp, #4]
     49e:	1c2e      	adds	r6, r5, #0
     4a0:	40a6      	lsls	r6, r4
     4a2:	9600      	str	r6, [sp, #0]

		r = r << 1;
     4a4:	1c10      	adds	r0, r2, #0
     4a6:	1c19      	adds	r1, r3, #0
     4a8:	1880      	adds	r0, r0, r2
     4aa:	4159      	adcs	r1, r3
     4ac:	1c02      	adds	r2, r0, #0
     4ae:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     4b0:	465f      	mov	r7, fp
     4b2:	4037      	ands	r7, r6
     4b4:	46bc      	mov	ip, r7
     4b6:	9e01      	ldr	r6, [sp, #4]
     4b8:	464f      	mov	r7, r9
     4ba:	403e      	ands	r6, r7
     4bc:	4667      	mov	r7, ip
     4be:	433e      	orrs	r6, r7
     4c0:	d002      	beq.n	4c8 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     4c2:	1c2a      	adds	r2, r5, #0
     4c4:	4302      	orrs	r2, r0
     4c6:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     4c8:	9803      	ldr	r0, [sp, #12]
     4ca:	4298      	cmp	r0, r3
     4cc:	d80b      	bhi.n	4e6 <_sercom_get_async_baud_val+0x156>
     4ce:	d102      	bne.n	4d6 <_sercom_get_async_baud_val+0x146>
     4d0:	9902      	ldr	r1, [sp, #8]
     4d2:	4291      	cmp	r1, r2
     4d4:	d807      	bhi.n	4e6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     4d6:	9e02      	ldr	r6, [sp, #8]
     4d8:	9f03      	ldr	r7, [sp, #12]
     4da:	1b92      	subs	r2, r2, r6
     4dc:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     4de:	4647      	mov	r7, r8
     4e0:	9800      	ldr	r0, [sp, #0]
     4e2:	4307      	orrs	r7, r0
     4e4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     4e6:	3c01      	subs	r4, #1
     4e8:	d2cd      	bcs.n	486 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     4ea:	4641      	mov	r1, r8
     4ec:	4652      	mov	r2, sl
     4ee:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     4f0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     4f2:	4c12      	ldr	r4, [pc, #72]	; (53c <_sercom_get_async_baud_val+0x1ac>)
     4f4:	42a3      	cmp	r3, r4
     4f6:	d908      	bls.n	50a <_sercom_get_async_baud_val+0x17a>
     4f8:	9a05      	ldr	r2, [sp, #20]
     4fa:	3201      	adds	r2, #1
     4fc:	b2d2      	uxtb	r2, r2
     4fe:	9205      	str	r2, [sp, #20]
     500:	2601      	movs	r6, #1
     502:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     504:	4657      	mov	r7, sl
     506:	2f08      	cmp	r7, #8
     508:	d1b5      	bne.n	476 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     50a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     50c:	9805      	ldr	r0, [sp, #20]
     50e:	2808      	cmp	r0, #8
     510:	d004      	beq.n	51c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     512:	0342      	lsls	r2, r0, #13
     514:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     516:	9c04      	ldr	r4, [sp, #16]
     518:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     51a:	2400      	movs	r4, #0
}
     51c:	1c20      	adds	r0, r4, #0
     51e:	b007      	add	sp, #28
     520:	bc3c      	pop	{r2, r3, r4, r5}
     522:	4690      	mov	r8, r2
     524:	4699      	mov	r9, r3
     526:	46a2      	mov	sl, r4
     528:	46ab      	mov	fp, r5
     52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     52c:	46c0      	nop			; (mov r8, r8)
     52e:	46c0      	nop			; (mov r8, r8)
     530:	00000000 	.word	0x00000000
     534:	00000001 	.word	0x00000001
     538:	00001475 	.word	0x00001475
     53c:	00001fff 	.word	0x00001fff

00000540 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     540:	b510      	push	{r4, lr}
     542:	b082      	sub	sp, #8
     544:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     546:	4b0f      	ldr	r3, [pc, #60]	; (584 <sercom_set_gclk_generator+0x44>)
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	2b00      	cmp	r3, #0
     54c:	d001      	beq.n	552 <sercom_set_gclk_generator+0x12>
     54e:	2900      	cmp	r1, #0
     550:	d00d      	beq.n	56e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     552:	a901      	add	r1, sp, #4
     554:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     556:	2013      	movs	r0, #19
     558:	4b0b      	ldr	r3, [pc, #44]	; (588 <sercom_set_gclk_generator+0x48>)
     55a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     55c:	2013      	movs	r0, #19
     55e:	4b0b      	ldr	r3, [pc, #44]	; (58c <sercom_set_gclk_generator+0x4c>)
     560:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     562:	4b08      	ldr	r3, [pc, #32]	; (584 <sercom_set_gclk_generator+0x44>)
     564:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     566:	2201      	movs	r2, #1
     568:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     56a:	2000      	movs	r0, #0
     56c:	e007      	b.n	57e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     56e:	4b05      	ldr	r3, [pc, #20]	; (584 <sercom_set_gclk_generator+0x44>)
     570:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     572:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     574:	1b14      	subs	r4, r2, r4
     576:	1e62      	subs	r2, r4, #1
     578:	4194      	sbcs	r4, r2
     57a:	4264      	negs	r4, r4
     57c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     57e:	b002      	add	sp, #8
     580:	bd10      	pop	{r4, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	2000008c 	.word	0x2000008c
     588:	00000f61 	.word	0x00000f61
     58c:	00000ed5 	.word	0x00000ed5

00000590 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     590:	4b44      	ldr	r3, [pc, #272]	; (6a4 <_sercom_get_default_pad+0x114>)
     592:	4298      	cmp	r0, r3
     594:	d033      	beq.n	5fe <_sercom_get_default_pad+0x6e>
     596:	d806      	bhi.n	5a6 <_sercom_get_default_pad+0x16>
     598:	4b43      	ldr	r3, [pc, #268]	; (6a8 <_sercom_get_default_pad+0x118>)
     59a:	4298      	cmp	r0, r3
     59c:	d00d      	beq.n	5ba <_sercom_get_default_pad+0x2a>
     59e:	4b43      	ldr	r3, [pc, #268]	; (6ac <_sercom_get_default_pad+0x11c>)
     5a0:	4298      	cmp	r0, r3
     5a2:	d01b      	beq.n	5dc <_sercom_get_default_pad+0x4c>
     5a4:	e06f      	b.n	686 <_sercom_get_default_pad+0xf6>
     5a6:	4b42      	ldr	r3, [pc, #264]	; (6b0 <_sercom_get_default_pad+0x120>)
     5a8:	4298      	cmp	r0, r3
     5aa:	d04a      	beq.n	642 <_sercom_get_default_pad+0xb2>
     5ac:	4b41      	ldr	r3, [pc, #260]	; (6b4 <_sercom_get_default_pad+0x124>)
     5ae:	4298      	cmp	r0, r3
     5b0:	d058      	beq.n	664 <_sercom_get_default_pad+0xd4>
     5b2:	4b41      	ldr	r3, [pc, #260]	; (6b8 <_sercom_get_default_pad+0x128>)
     5b4:	4298      	cmp	r0, r3
     5b6:	d166      	bne.n	686 <_sercom_get_default_pad+0xf6>
     5b8:	e032      	b.n	620 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ba:	2901      	cmp	r1, #1
     5bc:	d065      	beq.n	68a <_sercom_get_default_pad+0xfa>
     5be:	2900      	cmp	r1, #0
     5c0:	d004      	beq.n	5cc <_sercom_get_default_pad+0x3c>
     5c2:	2902      	cmp	r1, #2
     5c4:	d006      	beq.n	5d4 <_sercom_get_default_pad+0x44>
     5c6:	2903      	cmp	r1, #3
     5c8:	d006      	beq.n	5d8 <_sercom_get_default_pad+0x48>
     5ca:	e001      	b.n	5d0 <_sercom_get_default_pad+0x40>
     5cc:	483b      	ldr	r0, [pc, #236]	; (6bc <_sercom_get_default_pad+0x12c>)
     5ce:	e067      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5d0:	2000      	movs	r0, #0
     5d2:	e065      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d4:	483a      	ldr	r0, [pc, #232]	; (6c0 <_sercom_get_default_pad+0x130>)
     5d6:	e063      	b.n	6a0 <_sercom_get_default_pad+0x110>
     5d8:	483a      	ldr	r0, [pc, #232]	; (6c4 <_sercom_get_default_pad+0x134>)
     5da:	e061      	b.n	6a0 <_sercom_get_default_pad+0x110>
     5dc:	2901      	cmp	r1, #1
     5de:	d056      	beq.n	68e <_sercom_get_default_pad+0xfe>
     5e0:	2900      	cmp	r1, #0
     5e2:	d004      	beq.n	5ee <_sercom_get_default_pad+0x5e>
     5e4:	2902      	cmp	r1, #2
     5e6:	d006      	beq.n	5f6 <_sercom_get_default_pad+0x66>
     5e8:	2903      	cmp	r1, #3
     5ea:	d006      	beq.n	5fa <_sercom_get_default_pad+0x6a>
     5ec:	e001      	b.n	5f2 <_sercom_get_default_pad+0x62>
     5ee:	2003      	movs	r0, #3
     5f0:	e056      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5f2:	2000      	movs	r0, #0
     5f4:	e054      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5f6:	4834      	ldr	r0, [pc, #208]	; (6c8 <_sercom_get_default_pad+0x138>)
     5f8:	e052      	b.n	6a0 <_sercom_get_default_pad+0x110>
     5fa:	4834      	ldr	r0, [pc, #208]	; (6cc <_sercom_get_default_pad+0x13c>)
     5fc:	e050      	b.n	6a0 <_sercom_get_default_pad+0x110>
     5fe:	2901      	cmp	r1, #1
     600:	d047      	beq.n	692 <_sercom_get_default_pad+0x102>
     602:	2900      	cmp	r1, #0
     604:	d004      	beq.n	610 <_sercom_get_default_pad+0x80>
     606:	2902      	cmp	r1, #2
     608:	d006      	beq.n	618 <_sercom_get_default_pad+0x88>
     60a:	2903      	cmp	r1, #3
     60c:	d006      	beq.n	61c <_sercom_get_default_pad+0x8c>
     60e:	e001      	b.n	614 <_sercom_get_default_pad+0x84>
     610:	482f      	ldr	r0, [pc, #188]	; (6d0 <_sercom_get_default_pad+0x140>)
     612:	e045      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     614:	2000      	movs	r0, #0
     616:	e043      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     618:	482e      	ldr	r0, [pc, #184]	; (6d4 <_sercom_get_default_pad+0x144>)
     61a:	e041      	b.n	6a0 <_sercom_get_default_pad+0x110>
     61c:	482e      	ldr	r0, [pc, #184]	; (6d8 <_sercom_get_default_pad+0x148>)
     61e:	e03f      	b.n	6a0 <_sercom_get_default_pad+0x110>
     620:	2901      	cmp	r1, #1
     622:	d038      	beq.n	696 <_sercom_get_default_pad+0x106>
     624:	2900      	cmp	r1, #0
     626:	d004      	beq.n	632 <_sercom_get_default_pad+0xa2>
     628:	2902      	cmp	r1, #2
     62a:	d006      	beq.n	63a <_sercom_get_default_pad+0xaa>
     62c:	2903      	cmp	r1, #3
     62e:	d006      	beq.n	63e <_sercom_get_default_pad+0xae>
     630:	e001      	b.n	636 <_sercom_get_default_pad+0xa6>
     632:	482a      	ldr	r0, [pc, #168]	; (6dc <_sercom_get_default_pad+0x14c>)
     634:	e034      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     636:	2000      	movs	r0, #0
     638:	e032      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     63a:	4829      	ldr	r0, [pc, #164]	; (6e0 <_sercom_get_default_pad+0x150>)
     63c:	e030      	b.n	6a0 <_sercom_get_default_pad+0x110>
     63e:	4829      	ldr	r0, [pc, #164]	; (6e4 <_sercom_get_default_pad+0x154>)
     640:	e02e      	b.n	6a0 <_sercom_get_default_pad+0x110>
     642:	2901      	cmp	r1, #1
     644:	d029      	beq.n	69a <_sercom_get_default_pad+0x10a>
     646:	2900      	cmp	r1, #0
     648:	d004      	beq.n	654 <_sercom_get_default_pad+0xc4>
     64a:	2902      	cmp	r1, #2
     64c:	d006      	beq.n	65c <_sercom_get_default_pad+0xcc>
     64e:	2903      	cmp	r1, #3
     650:	d006      	beq.n	660 <_sercom_get_default_pad+0xd0>
     652:	e001      	b.n	658 <_sercom_get_default_pad+0xc8>
     654:	4824      	ldr	r0, [pc, #144]	; (6e8 <_sercom_get_default_pad+0x158>)
     656:	e023      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     658:	2000      	movs	r0, #0
     65a:	e021      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     65c:	4823      	ldr	r0, [pc, #140]	; (6ec <_sercom_get_default_pad+0x15c>)
     65e:	e01f      	b.n	6a0 <_sercom_get_default_pad+0x110>
     660:	4823      	ldr	r0, [pc, #140]	; (6f0 <_sercom_get_default_pad+0x160>)
     662:	e01d      	b.n	6a0 <_sercom_get_default_pad+0x110>
     664:	2901      	cmp	r1, #1
     666:	d01a      	beq.n	69e <_sercom_get_default_pad+0x10e>
     668:	2900      	cmp	r1, #0
     66a:	d004      	beq.n	676 <_sercom_get_default_pad+0xe6>
     66c:	2902      	cmp	r1, #2
     66e:	d006      	beq.n	67e <_sercom_get_default_pad+0xee>
     670:	2903      	cmp	r1, #3
     672:	d006      	beq.n	682 <_sercom_get_default_pad+0xf2>
     674:	e001      	b.n	67a <_sercom_get_default_pad+0xea>
     676:	481f      	ldr	r0, [pc, #124]	; (6f4 <_sercom_get_default_pad+0x164>)
     678:	e012      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     67a:	2000      	movs	r0, #0
     67c:	e010      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     67e:	481e      	ldr	r0, [pc, #120]	; (6f8 <_sercom_get_default_pad+0x168>)
     680:	e00e      	b.n	6a0 <_sercom_get_default_pad+0x110>
     682:	481e      	ldr	r0, [pc, #120]	; (6fc <_sercom_get_default_pad+0x16c>)
     684:	e00c      	b.n	6a0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     686:	2000      	movs	r0, #0
     688:	e00a      	b.n	6a0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     68a:	481d      	ldr	r0, [pc, #116]	; (700 <_sercom_get_default_pad+0x170>)
     68c:	e008      	b.n	6a0 <_sercom_get_default_pad+0x110>
     68e:	481d      	ldr	r0, [pc, #116]	; (704 <_sercom_get_default_pad+0x174>)
     690:	e006      	b.n	6a0 <_sercom_get_default_pad+0x110>
     692:	481d      	ldr	r0, [pc, #116]	; (708 <_sercom_get_default_pad+0x178>)
     694:	e004      	b.n	6a0 <_sercom_get_default_pad+0x110>
     696:	481d      	ldr	r0, [pc, #116]	; (70c <_sercom_get_default_pad+0x17c>)
     698:	e002      	b.n	6a0 <_sercom_get_default_pad+0x110>
     69a:	481d      	ldr	r0, [pc, #116]	; (710 <_sercom_get_default_pad+0x180>)
     69c:	e000      	b.n	6a0 <_sercom_get_default_pad+0x110>
     69e:	481d      	ldr	r0, [pc, #116]	; (714 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     6a0:	4770      	bx	lr
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	42001000 	.word	0x42001000
     6a8:	42000800 	.word	0x42000800
     6ac:	42000c00 	.word	0x42000c00
     6b0:	42001800 	.word	0x42001800
     6b4:	42001c00 	.word	0x42001c00
     6b8:	42001400 	.word	0x42001400
     6bc:	00040003 	.word	0x00040003
     6c0:	00060003 	.word	0x00060003
     6c4:	00070003 	.word	0x00070003
     6c8:	001e0003 	.word	0x001e0003
     6cc:	001f0003 	.word	0x001f0003
     6d0:	00080003 	.word	0x00080003
     6d4:	000a0003 	.word	0x000a0003
     6d8:	000b0003 	.word	0x000b0003
     6dc:	00100003 	.word	0x00100003
     6e0:	00120003 	.word	0x00120003
     6e4:	00130003 	.word	0x00130003
     6e8:	000c0003 	.word	0x000c0003
     6ec:	000e0003 	.word	0x000e0003
     6f0:	000f0003 	.word	0x000f0003
     6f4:	00160003 	.word	0x00160003
     6f8:	00180003 	.word	0x00180003
     6fc:	00190003 	.word	0x00190003
     700:	00050003 	.word	0x00050003
     704:	00010003 	.word	0x00010003
     708:	00090003 	.word	0x00090003
     70c:	00110003 	.word	0x00110003
     710:	000d0003 	.word	0x000d0003
     714:	00170003 	.word	0x00170003

00000718 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     718:	b570      	push	{r4, r5, r6, lr}
     71a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     71c:	4a0c      	ldr	r2, [pc, #48]	; (750 <_sercom_get_sercom_inst_index+0x38>)
     71e:	466b      	mov	r3, sp
     720:	ca70      	ldmia	r2!, {r4, r5, r6}
     722:	c370      	stmia	r3!, {r4, r5, r6}
     724:	ca32      	ldmia	r2!, {r1, r4, r5}
     726:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     728:	9e00      	ldr	r6, [sp, #0]
     72a:	4286      	cmp	r6, r0
     72c:	d006      	beq.n	73c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     72e:	2301      	movs	r3, #1
     730:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     732:	4669      	mov	r1, sp
     734:	5852      	ldr	r2, [r2, r1]
     736:	4282      	cmp	r2, r0
     738:	d103      	bne.n	742 <_sercom_get_sercom_inst_index+0x2a>
     73a:	e000      	b.n	73e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     73c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     73e:	b2d8      	uxtb	r0, r3
     740:	e003      	b.n	74a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     742:	3301      	adds	r3, #1
     744:	2b06      	cmp	r3, #6
     746:	d1f3      	bne.n	730 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     748:	2000      	movs	r0, #0
}
     74a:	b006      	add	sp, #24
     74c:	bd70      	pop	{r4, r5, r6, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	00002438 	.word	0x00002438

00000754 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	465f      	mov	r7, fp
     758:	4656      	mov	r6, sl
     75a:	464d      	mov	r5, r9
     75c:	4644      	mov	r4, r8
     75e:	b4f0      	push	{r4, r5, r6, r7}
     760:	b091      	sub	sp, #68	; 0x44
     762:	1c05      	adds	r5, r0, #0
     764:	1c0c      	adds	r4, r1, #0
     766:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     768:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     76a:	1c08      	adds	r0, r1, #0
     76c:	4b9a      	ldr	r3, [pc, #616]	; (9d8 <usart_init+0x284>)
     76e:	4798      	blx	r3
     770:	1c02      	adds	r2, r0, #0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     772:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     774:	2005      	movs	r0, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     776:	07d9      	lsls	r1, r3, #31
     778:	d500      	bpl.n	77c <usart_init+0x28>
     77a:	e126      	b.n	9ca <usart_init+0x276>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     77c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     77e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     780:	079f      	lsls	r7, r3, #30
     782:	d500      	bpl.n	786 <usart_init+0x32>
     784:	e121      	b.n	9ca <usart_init+0x276>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     786:	4b95      	ldr	r3, [pc, #596]	; (9dc <usart_init+0x288>)
     788:	6a18      	ldr	r0, [r3, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     78a:	1c91      	adds	r1, r2, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     78c:	2701      	movs	r7, #1
     78e:	408f      	lsls	r7, r1
     790:	1c39      	adds	r1, r7, #0
     792:	4301      	orrs	r1, r0
     794:	6219      	str	r1, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     796:	a90f      	add	r1, sp, #60	; 0x3c
     798:	272d      	movs	r7, #45	; 0x2d
     79a:	5df3      	ldrb	r3, [r6, r7]
     79c:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     79e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7a0:	b2d2      	uxtb	r2, r2
     7a2:	4690      	mov	r8, r2
     7a4:	1c10      	adds	r0, r2, #0
     7a6:	4b8e      	ldr	r3, [pc, #568]	; (9e0 <usart_init+0x28c>)
     7a8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7aa:	4640      	mov	r0, r8
     7ac:	4b8d      	ldr	r3, [pc, #564]	; (9e4 <usart_init+0x290>)
     7ae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7b0:	5df0      	ldrb	r0, [r6, r7]
     7b2:	2100      	movs	r1, #0
     7b4:	4b8c      	ldr	r3, [pc, #560]	; (9e8 <usart_init+0x294>)
     7b6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     7b8:	7af3      	ldrb	r3, [r6, #11]
     7ba:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     7bc:	2324      	movs	r3, #36	; 0x24
     7be:	5cf3      	ldrb	r3, [r6, r3]
     7c0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     7c2:	2325      	movs	r3, #37	; 0x25
     7c4:	5cf3      	ldrb	r3, [r6, r3]
     7c6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     7c8:	7ef3      	ldrb	r3, [r6, #27]
     7ca:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     7cc:	7f33      	ldrb	r3, [r6, #28]
     7ce:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d0:	6829      	ldr	r1, [r5, #0]
     7d2:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7d4:	1c08      	adds	r0, r1, #0
     7d6:	4b80      	ldr	r3, [pc, #512]	; (9d8 <usart_init+0x284>)
     7d8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7da:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     7dc:	2200      	movs	r2, #0
     7de:	466b      	mov	r3, sp
     7e0:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     7e2:	8a32      	ldrh	r2, [r6, #16]
     7e4:	9202      	str	r2, [sp, #8]
     7e6:	2380      	movs	r3, #128	; 0x80
     7e8:	01db      	lsls	r3, r3, #7
     7ea:	429a      	cmp	r2, r3
     7ec:	d021      	beq.n	832 <usart_init+0xde>
     7ee:	2380      	movs	r3, #128	; 0x80
     7f0:	01db      	lsls	r3, r3, #7
     7f2:	429a      	cmp	r2, r3
     7f4:	d804      	bhi.n	800 <usart_init+0xac>
     7f6:	2380      	movs	r3, #128	; 0x80
     7f8:	019b      	lsls	r3, r3, #6
     7fa:	429a      	cmp	r2, r3
     7fc:	d011      	beq.n	822 <usart_init+0xce>
     7fe:	e008      	b.n	812 <usart_init+0xbe>
     800:	23c0      	movs	r3, #192	; 0xc0
     802:	01db      	lsls	r3, r3, #7
     804:	9f02      	ldr	r7, [sp, #8]
     806:	429f      	cmp	r7, r3
     808:	d00f      	beq.n	82a <usart_init+0xd6>
     80a:	2380      	movs	r3, #128	; 0x80
     80c:	021b      	lsls	r3, r3, #8
     80e:	429f      	cmp	r7, r3
     810:	d003      	beq.n	81a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     812:	2710      	movs	r7, #16
     814:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     816:	2700      	movs	r7, #0
     818:	e00e      	b.n	838 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     81a:	2703      	movs	r7, #3
     81c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     81e:	2700      	movs	r7, #0
     820:	e00a      	b.n	838 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     822:	2710      	movs	r7, #16
     824:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     826:	2701      	movs	r7, #1
     828:	e006      	b.n	838 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     82a:	2708      	movs	r7, #8
     82c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     82e:	2701      	movs	r7, #1
     830:	e002      	b.n	838 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     832:	2708      	movs	r7, #8
     834:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     836:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     838:	6831      	ldr	r1, [r6, #0]
     83a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     83c:	68f2      	ldr	r2, [r6, #12]
     83e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     840:	6973      	ldr	r3, [r6, #20]
     842:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     844:	7e31      	ldrb	r1, [r6, #24]
     846:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     848:	2326      	movs	r3, #38	; 0x26
     84a:	5cf3      	ldrb	r3, [r6, r3]
     84c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     84e:	6873      	ldr	r3, [r6, #4]
     850:	2b00      	cmp	r3, #0
     852:	d013      	beq.n	87c <usart_init+0x128>
     854:	2280      	movs	r2, #128	; 0x80
     856:	0552      	lsls	r2, r2, #21
     858:	4293      	cmp	r3, r2
     85a:	d12e      	bne.n	8ba <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     85c:	2327      	movs	r3, #39	; 0x27
     85e:	5cf3      	ldrb	r3, [r6, r3]
     860:	2b00      	cmp	r3, #0
     862:	d12e      	bne.n	8c2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     864:	6a37      	ldr	r7, [r6, #32]
     866:	b2c0      	uxtb	r0, r0
     868:	4b60      	ldr	r3, [pc, #384]	; (9ec <usart_init+0x298>)
     86a:	4798      	blx	r3
     86c:	1c01      	adds	r1, r0, #0
     86e:	1c38      	adds	r0, r7, #0
     870:	466a      	mov	r2, sp
     872:	3226      	adds	r2, #38	; 0x26
     874:	4b5e      	ldr	r3, [pc, #376]	; (9f0 <usart_init+0x29c>)
     876:	4798      	blx	r3
     878:	1c03      	adds	r3, r0, #0
     87a:	e01f      	b.n	8bc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     87c:	2327      	movs	r3, #39	; 0x27
     87e:	5cf3      	ldrb	r3, [r6, r3]
     880:	2b00      	cmp	r3, #0
     882:	d00a      	beq.n	89a <usart_init+0x146>
				status_code =
     884:	9a06      	ldr	r2, [sp, #24]
     886:	9200      	str	r2, [sp, #0]
     888:	6a30      	ldr	r0, [r6, #32]
     88a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     88c:	466a      	mov	r2, sp
     88e:	3226      	adds	r2, #38	; 0x26
     890:	1c3b      	adds	r3, r7, #0
     892:	4f58      	ldr	r7, [pc, #352]	; (9f4 <usart_init+0x2a0>)
     894:	47b8      	blx	r7
     896:	1c03      	adds	r3, r0, #0
     898:	e010      	b.n	8bc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     89a:	6a31      	ldr	r1, [r6, #32]
     89c:	9107      	str	r1, [sp, #28]
     89e:	b2c0      	uxtb	r0, r0
     8a0:	4b52      	ldr	r3, [pc, #328]	; (9ec <usart_init+0x298>)
     8a2:	4798      	blx	r3
     8a4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     8a6:	9a06      	ldr	r2, [sp, #24]
     8a8:	9200      	str	r2, [sp, #0]
     8aa:	9807      	ldr	r0, [sp, #28]
     8ac:	466a      	mov	r2, sp
     8ae:	3226      	adds	r2, #38	; 0x26
     8b0:	1c3b      	adds	r3, r7, #0
     8b2:	4f50      	ldr	r7, [pc, #320]	; (9f4 <usart_init+0x2a0>)
     8b4:	47b8      	blx	r7
     8b6:	1c03      	adds	r3, r0, #0
     8b8:	e000      	b.n	8bc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     8ba:	2300      	movs	r3, #0
     8bc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     8be:	d000      	beq.n	8c2 <usart_init+0x16e>
     8c0:	e083      	b.n	9ca <usart_init+0x276>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     8c2:	7e73      	ldrb	r3, [r6, #25]
     8c4:	2b00      	cmp	r3, #0
     8c6:	d002      	beq.n	8ce <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     8c8:	7eb3      	ldrb	r3, [r6, #26]
     8ca:	4641      	mov	r1, r8
     8cc:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     8ce:	682a      	ldr	r2, [r5, #0]
     8d0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8d2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8d4:	2b00      	cmp	r3, #0
     8d6:	d1fc      	bne.n	8d2 <usart_init+0x17e>
     8d8:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     8da:	466b      	mov	r3, sp
     8dc:	3326      	adds	r3, #38	; 0x26
     8de:	881b      	ldrh	r3, [r3, #0]
     8e0:	4642      	mov	r2, r8
     8e2:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8e4:	464b      	mov	r3, r9
     8e6:	9f03      	ldr	r7, [sp, #12]
     8e8:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     8ea:	9f04      	ldr	r7, [sp, #16]
     8ec:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8ee:	6871      	ldr	r1, [r6, #4]
     8f0:	430b      	orrs	r3, r1
		config->sample_rate |
     8f2:	9f02      	ldr	r7, [sp, #8]
     8f4:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8f6:	4652      	mov	r2, sl
     8f8:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8fa:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8fc:	4659      	mov	r1, fp
     8fe:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     900:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     902:	2327      	movs	r3, #39	; 0x27
     904:	5cf3      	ldrb	r3, [r6, r3]
     906:	2b00      	cmp	r3, #0
     908:	d101      	bne.n	90e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     90a:	2304      	movs	r3, #4
     90c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     90e:	7e71      	ldrb	r1, [r6, #25]
     910:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     912:	7f33      	ldrb	r3, [r6, #28]
     914:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     916:	4319      	orrs	r1, r3
     918:	7af2      	ldrb	r2, [r6, #11]
     91a:	7ab3      	ldrb	r3, [r6, #10]
     91c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     91e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     920:	7f73      	ldrb	r3, [r6, #29]
     922:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     924:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     926:	2324      	movs	r3, #36	; 0x24
     928:	5cf3      	ldrb	r3, [r6, r3]
     92a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     92c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     92e:	2325      	movs	r3, #37	; 0x25
     930:	5cf3      	ldrb	r3, [r6, r3]
     932:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     934:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     936:	8933      	ldrh	r3, [r6, #8]
     938:	2bff      	cmp	r3, #255	; 0xff
     93a:	d004      	beq.n	946 <usart_init+0x1f2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     93c:	2280      	movs	r2, #128	; 0x80
     93e:	0452      	lsls	r2, r2, #17
     940:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     942:	4319      	orrs	r1, r3
     944:	e005      	b.n	952 <usart_init+0x1fe>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     946:	7ef3      	ldrb	r3, [r6, #27]
     948:	2b00      	cmp	r3, #0
     94a:	d002      	beq.n	952 <usart_init+0x1fe>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     94c:	2380      	movs	r3, #128	; 0x80
     94e:	04db      	lsls	r3, r3, #19
     950:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     952:	232c      	movs	r3, #44	; 0x2c
     954:	5cf3      	ldrb	r3, [r6, r3]
     956:	2b00      	cmp	r3, #0
     958:	d103      	bne.n	962 <usart_init+0x20e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     95a:	4b27      	ldr	r3, [pc, #156]	; (9f8 <usart_init+0x2a4>)
     95c:	789b      	ldrb	r3, [r3, #2]
     95e:	079a      	lsls	r2, r3, #30
     960:	d501      	bpl.n	966 <usart_init+0x212>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     962:	2380      	movs	r3, #128	; 0x80
     964:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     966:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     968:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     96a:	2b00      	cmp	r3, #0
     96c:	d1fc      	bne.n	968 <usart_init+0x214>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     96e:	4643      	mov	r3, r8
     970:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     972:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     974:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     976:	2b00      	cmp	r3, #0
     978:	d1fc      	bne.n	974 <usart_init+0x220>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     97a:	4641      	mov	r1, r8
     97c:	600f      	str	r7, [r1, #0]
     97e:	ab0e      	add	r3, sp, #56	; 0x38
     980:	2280      	movs	r2, #128	; 0x80
     982:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     984:	2200      	movs	r2, #0
     986:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     988:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     98a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     98c:	6b32      	ldr	r2, [r6, #48]	; 0x30
     98e:	920a      	str	r2, [sp, #40]	; 0x28
     990:	6b73      	ldr	r3, [r6, #52]	; 0x34
     992:	930b      	str	r3, [sp, #44]	; 0x2c
     994:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     996:	970c      	str	r7, [sp, #48]	; 0x30
     998:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     99a:	960d      	str	r6, [sp, #52]	; 0x34
     99c:	2500      	movs	r5, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     99e:	ae0e      	add	r6, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9a0:	4f16      	ldr	r7, [pc, #88]	; (9fc <usart_init+0x2a8>)
     9a2:	b2e9      	uxtb	r1, r5
     9a4:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9a6:	aa0a      	add	r2, sp, #40	; 0x28
     9a8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9aa:	2800      	cmp	r0, #0
     9ac:	d102      	bne.n	9b4 <usart_init+0x260>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ae:	1c20      	adds	r0, r4, #0
     9b0:	4a13      	ldr	r2, [pc, #76]	; (a00 <usart_init+0x2ac>)
     9b2:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     9b4:	1c43      	adds	r3, r0, #1
     9b6:	d004      	beq.n	9c2 <usart_init+0x26e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9b8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9ba:	0c00      	lsrs	r0, r0, #16
     9bc:	b2c0      	uxtb	r0, r0
     9be:	1c31      	adds	r1, r6, #0
     9c0:	47b8      	blx	r7
     9c2:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     9c4:	2d04      	cmp	r5, #4
     9c6:	d1ec      	bne.n	9a2 <usart_init+0x24e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
     9c8:	2000      	movs	r0, #0
}
     9ca:	b011      	add	sp, #68	; 0x44
     9cc:	bc3c      	pop	{r2, r3, r4, r5}
     9ce:	4690      	mov	r8, r2
     9d0:	4699      	mov	r9, r3
     9d2:	46a2      	mov	sl, r4
     9d4:	46ab      	mov	fp, r5
     9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d8:	00000719 	.word	0x00000719
     9dc:	40000400 	.word	0x40000400
     9e0:	00000f61 	.word	0x00000f61
     9e4:	00000ed5 	.word	0x00000ed5
     9e8:	00000541 	.word	0x00000541
     9ec:	00000f7d 	.word	0x00000f7d
     9f0:	00000369 	.word	0x00000369
     9f4:	00000391 	.word	0x00000391
     9f8:	41002000 	.word	0x41002000
     9fc:	0000103d 	.word	0x0000103d
     a00:	00000591 	.word	0x00000591

00000a04 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     a04:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a06:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a08:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a0a:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a0c:	2a00      	cmp	r2, #0
     a0e:	d00c      	beq.n	a2a <usart_write_wait+0x26>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a10:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     a12:	2005      	movs	r0, #5
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
     a14:	07d4      	lsls	r4, r2, #31
     a16:	d508      	bpl.n	a2a <usart_write_wait+0x26>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a18:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a1a:	2a00      	cmp	r2, #0
     a1c:	d1fc      	bne.n	a18 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     a1e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     a20:	2102      	movs	r1, #2
     a22:	7e1a      	ldrb	r2, [r3, #24]
     a24:	420a      	tst	r2, r1
     a26:	d0fc      	beq.n	a22 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     a28:	2000      	movs	r0, #0
}
     a2a:	bd10      	pop	{r4, pc}

00000a2c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     a2c:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a2e:	6803      	ldr	r3, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a30:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     a32:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     a34:	2a00      	cmp	r2, #0
     a36:	d02f      	beq.n	a98 <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a38:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
     a3a:	2005      	movs	r0, #5
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a3c:	0754      	lsls	r4, r2, #29
     a3e:	d52b      	bpl.n	a98 <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a40:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a42:	2a00      	cmp	r2, #0
     a44:	d1fc      	bne.n	a40 <usart_read_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a46:	8b5a      	ldrh	r2, [r3, #26]
     a48:	b2d2      	uxtb	r2, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     a4a:	0690      	lsls	r0, r2, #26
     a4c:	d021      	beq.n	a92 <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a4e:	0794      	lsls	r4, r2, #30
     a50:	d503      	bpl.n	a5a <usart_read_wait+0x2e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a52:	2202      	movs	r2, #2
     a54:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
     a56:	201a      	movs	r0, #26
     a58:	e01e      	b.n	a98 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a5a:	0750      	lsls	r0, r2, #29
     a5c:	d503      	bpl.n	a66 <usart_read_wait+0x3a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a5e:	2204      	movs	r2, #4
     a60:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
     a62:	201e      	movs	r0, #30
     a64:	e018      	b.n	a98 <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a66:	07d4      	lsls	r4, r2, #31
     a68:	d503      	bpl.n	a72 <usart_read_wait+0x46>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a6a:	2201      	movs	r2, #1
     a6c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
     a6e:	2013      	movs	r0, #19
     a70:	e012      	b.n	a98 <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a72:	06d0      	lsls	r0, r2, #27
     a74:	d505      	bpl.n	a82 <usart_read_wait+0x56>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a76:	8b59      	ldrh	r1, [r3, #26]
     a78:	2210      	movs	r2, #16
     a7a:	430a      	orrs	r2, r1
     a7c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
     a7e:	2042      	movs	r0, #66	; 0x42
     a80:	e00a      	b.n	a98 <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a82:	0694      	lsls	r4, r2, #26
     a84:	d505      	bpl.n	a92 <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a86:	8b59      	ldrh	r1, [r3, #26]
     a88:	2220      	movs	r2, #32
     a8a:	430a      	orrs	r2, r1
     a8c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
     a8e:	2041      	movs	r0, #65	; 0x41
     a90:	e002      	b.n	a98 <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     a94:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     a96:	2000      	movs	r0, #0
}
     a98:	bd10      	pop	{r4, pc}
     a9a:	46c0      	nop			; (mov r8, r8)

00000a9c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	4657      	mov	r7, sl
     aa0:	464e      	mov	r6, r9
     aa2:	4645      	mov	r5, r8
     aa4:	b4e0      	push	{r5, r6, r7}
     aa6:	b082      	sub	sp, #8
     aa8:	1c06      	adds	r6, r0, #0
     aaa:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     aac:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     aae:	2a00      	cmp	r2, #0
     ab0:	d039      	beq.n	b26 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ab2:	79b3      	ldrb	r3, [r6, #6]
		return STATUS_ERR_DENIED;
     ab4:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     ab6:	2b00      	cmp	r3, #0
     ab8:	d035      	beq.n	b26 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     aba:	6835      	ldr	r5, [r6, #0]
     abc:	4692      	mov	sl, r2

	uint16_t rx_pos = 0;
     abe:	2700      	movs	r7, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     ac0:	2404      	movs	r4, #4
     ac2:	481c      	ldr	r0, [pc, #112]	; (b34 <usart_read_buffer_wait+0x98>)
     ac4:	4681      	mov	r9, r0
     ac6:	e029      	b.n	b1c <usart_read_buffer_wait+0x80>
     ac8:	7e2a      	ldrb	r2, [r5, #24]
     aca:	4222      	tst	r2, r4
     acc:	d104      	bne.n	ad8 <usart_read_buffer_wait+0x3c>
				break;
			} else if (i == USART_TIMEOUT) {
     ace:	2b01      	cmp	r3, #1
     ad0:	d021      	beq.n	b16 <usart_read_buffer_wait+0x7a>
     ad2:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     ad4:	2b00      	cmp	r3, #0
     ad6:	d1f7      	bne.n	ac8 <usart_read_buffer_wait+0x2c>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     ad8:	4669      	mov	r1, sp
     ada:	3106      	adds	r1, #6
     adc:	2300      	movs	r3, #0
     ade:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
     ae0:	1c30      	adds	r0, r6, #0
     ae2:	4a15      	ldr	r2, [pc, #84]	; (b38 <usart_read_buffer_wait+0x9c>)
     ae4:	4790      	blx	r2

		if (retval != STATUS_OK) {
     ae6:	2800      	cmp	r0, #0
     ae8:	d11d      	bne.n	b26 <usart_read_buffer_wait+0x8a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     aea:	1c7b      	adds	r3, r7, #1
     aec:	b29b      	uxth	r3, r3
     aee:	466a      	mov	r2, sp
     af0:	3206      	adds	r2, #6
     af2:	8812      	ldrh	r2, [r2, #0]
     af4:	4640      	mov	r0, r8
     af6:	55c2      	strb	r2, [r0, r7]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     af8:	7971      	ldrb	r1, [r6, #5]
     afa:	2901      	cmp	r1, #1
     afc:	d103      	bne.n	b06 <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
     afe:	1cb9      	adds	r1, r7, #2
     b00:	0a12      	lsrs	r2, r2, #8
     b02:	54c2      	strb	r2, [r0, r3]
     b04:	b28b      	uxth	r3, r1
     b06:	4652      	mov	r2, sl
     b08:	3a01      	subs	r2, #1
     b0a:	b292      	uxth	r2, r2
     b0c:	4692      	mov	sl, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     b0e:	2a00      	cmp	r2, #0
     b10:	d103      	bne.n	b1a <usart_read_buffer_wait+0x7e>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     b12:	2000      	movs	r0, #0
     b14:	e007      	b.n	b26 <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     b16:	2012      	movs	r0, #18
     b18:	e005      	b.n	b26 <usart_read_buffer_wait+0x8a>
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     b1a:	1c1f      	adds	r7, r3, #0
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     b1c:	7e2b      	ldrb	r3, [r5, #24]
     b1e:	4223      	tst	r3, r4
     b20:	d1da      	bne.n	ad8 <usart_read_buffer_wait+0x3c>
     b22:	464b      	mov	r3, r9
     b24:	e7d0      	b.n	ac8 <usart_read_buffer_wait+0x2c>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     b26:	b002      	add	sp, #8
     b28:	bc1c      	pop	{r2, r3, r4}
     b2a:	4690      	mov	r8, r2
     b2c:	4699      	mov	r9, r3
     b2e:	46a2      	mov	sl, r4
     b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	0000ffff 	.word	0x0000ffff
     b38:	00000a2d 	.word	0x00000a2d

00000b3c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b3c:	b508      	push	{r3, lr}
	switch (clock_source) {
     b3e:	2808      	cmp	r0, #8
     b40:	d834      	bhi.n	bac <system_clock_source_get_hz+0x70>
     b42:	0080      	lsls	r0, r0, #2
     b44:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <system_clock_source_get_hz+0x78>)
     b46:	581b      	ldr	r3, [r3, r0]
     b48:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     b4a:	2080      	movs	r0, #128	; 0x80
     b4c:	0200      	lsls	r0, r0, #8
     b4e:	e030      	b.n	bb2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     b50:	4b19      	ldr	r3, [pc, #100]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b52:	6918      	ldr	r0, [r3, #16]
     b54:	e02d      	b.n	bb2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b56:	4b19      	ldr	r3, [pc, #100]	; (bbc <system_clock_source_get_hz+0x80>)
     b58:	6a18      	ldr	r0, [r3, #32]
     b5a:	0580      	lsls	r0, r0, #22
     b5c:	0f80      	lsrs	r0, r0, #30
     b5e:	4b18      	ldr	r3, [pc, #96]	; (bc0 <system_clock_source_get_hz+0x84>)
     b60:	40c3      	lsrs	r3, r0
     b62:	1c18      	adds	r0, r3, #0
     b64:	e025      	b.n	bb2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     b66:	4b14      	ldr	r3, [pc, #80]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b68:	6958      	ldr	r0, [r3, #20]
     b6a:	e022      	b.n	bb2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b6c:	4b12      	ldr	r3, [pc, #72]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	2002      	movs	r0, #2
     b72:	4018      	ands	r0, r3
     b74:	d01d      	beq.n	bb2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b76:	4911      	ldr	r1, [pc, #68]	; (bbc <system_clock_source_get_hz+0x80>)
     b78:	2210      	movs	r2, #16
     b7a:	68cb      	ldr	r3, [r1, #12]
     b7c:	421a      	tst	r2, r3
     b7e:	d0fc      	beq.n	b7a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     b80:	4b0d      	ldr	r3, [pc, #52]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	075a      	lsls	r2, r3, #29
     b86:	d513      	bpl.n	bb0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b88:	2000      	movs	r0, #0
     b8a:	4b0e      	ldr	r3, [pc, #56]	; (bc4 <system_clock_source_get_hz+0x88>)
     b8c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b8e:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <system_clock_source_get_hz+0x7c>)
     b90:	689b      	ldr	r3, [r3, #8]
     b92:	041b      	lsls	r3, r3, #16
     b94:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b96:	4358      	muls	r0, r3
     b98:	e00b      	b.n	bb2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b9a:	2350      	movs	r3, #80	; 0x50
     b9c:	4a07      	ldr	r2, [pc, #28]	; (bbc <system_clock_source_get_hz+0x80>)
     b9e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ba0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ba2:	075a      	lsls	r2, r3, #29
     ba4:	d505      	bpl.n	bb2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <system_clock_source_get_hz+0x7c>)
     ba8:	68d8      	ldr	r0, [r3, #12]
     baa:	e002      	b.n	bb2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     bac:	2000      	movs	r0, #0
     bae:	e000      	b.n	bb2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     bb0:	4805      	ldr	r0, [pc, #20]	; (bc8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     bb2:	bd08      	pop	{r3, pc}
     bb4:	00002450 	.word	0x00002450
     bb8:	20000090 	.word	0x20000090
     bbc:	40000800 	.word	0x40000800
     bc0:	007a1200 	.word	0x007a1200
     bc4:	00000f7d 	.word	0x00000f7d
     bc8:	02dc6c00 	.word	0x02dc6c00

00000bcc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bcc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bce:	4b0c      	ldr	r3, [pc, #48]	; (c00 <system_clock_source_osc8m_set_config+0x34>)
     bd0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bd2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bd4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bd6:	7840      	ldrb	r0, [r0, #1]
     bd8:	2201      	movs	r2, #1
     bda:	4010      	ands	r0, r2
     bdc:	0180      	lsls	r0, r0, #6
     bde:	2640      	movs	r6, #64	; 0x40
     be0:	43b4      	bics	r4, r6
     be2:	4304      	orrs	r4, r0
     be4:	402a      	ands	r2, r5
     be6:	01d0      	lsls	r0, r2, #7
     be8:	2280      	movs	r2, #128	; 0x80
     bea:	4394      	bics	r4, r2
     bec:	1c22      	adds	r2, r4, #0
     bee:	4302      	orrs	r2, r0
     bf0:	2003      	movs	r0, #3
     bf2:	4001      	ands	r1, r0
     bf4:	0209      	lsls	r1, r1, #8
     bf6:	4803      	ldr	r0, [pc, #12]	; (c04 <system_clock_source_osc8m_set_config+0x38>)
     bf8:	4002      	ands	r2, r0
     bfa:	430a      	orrs	r2, r1
     bfc:	621a      	str	r2, [r3, #32]
}
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	40000800 	.word	0x40000800
     c04:	fffffcff 	.word	0xfffffcff

00000c08 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c08:	2808      	cmp	r0, #8
     c0a:	d843      	bhi.n	c94 <system_clock_source_enable+0x8c>
     c0c:	0080      	lsls	r0, r0, #2
     c0e:	4b22      	ldr	r3, [pc, #136]	; (c98 <system_clock_source_enable+0x90>)
     c10:	581b      	ldr	r3, [r3, r0]
     c12:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     c14:	2000      	movs	r0, #0
     c16:	e03e      	b.n	c96 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c18:	4b20      	ldr	r3, [pc, #128]	; (c9c <system_clock_source_enable+0x94>)
     c1a:	6a19      	ldr	r1, [r3, #32]
     c1c:	2202      	movs	r2, #2
     c1e:	430a      	orrs	r2, r1
     c20:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     c22:	2000      	movs	r0, #0
     c24:	e037      	b.n	c96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c26:	4b1d      	ldr	r3, [pc, #116]	; (c9c <system_clock_source_enable+0x94>)
     c28:	6999      	ldr	r1, [r3, #24]
     c2a:	2202      	movs	r2, #2
     c2c:	430a      	orrs	r2, r1
     c2e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c30:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     c32:	e030      	b.n	c96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c34:	4b19      	ldr	r3, [pc, #100]	; (c9c <system_clock_source_enable+0x94>)
     c36:	8a19      	ldrh	r1, [r3, #16]
     c38:	2202      	movs	r2, #2
     c3a:	430a      	orrs	r2, r1
     c3c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c3e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     c40:	e029      	b.n	c96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c42:	4b16      	ldr	r3, [pc, #88]	; (c9c <system_clock_source_enable+0x94>)
     c44:	8a99      	ldrh	r1, [r3, #20]
     c46:	2202      	movs	r2, #2
     c48:	430a      	orrs	r2, r1
     c4a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c4c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     c4e:	e022      	b.n	c96 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c50:	4b13      	ldr	r3, [pc, #76]	; (ca0 <system_clock_source_enable+0x98>)
     c52:	6819      	ldr	r1, [r3, #0]
     c54:	2202      	movs	r2, #2
     c56:	430a      	orrs	r2, r1
     c58:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	4b11      	ldr	r3, [pc, #68]	; (ca4 <system_clock_source_enable+0x9c>)
     c5e:	401a      	ands	r2, r3
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <system_clock_source_enable+0x94>)
     c62:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c64:	1c19      	adds	r1, r3, #0
     c66:	2210      	movs	r2, #16
     c68:	68cb      	ldr	r3, [r1, #12]
     c6a:	421a      	tst	r2, r3
     c6c:	d0fc      	beq.n	c68 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c6e:	4a0c      	ldr	r2, [pc, #48]	; (ca0 <system_clock_source_enable+0x98>)
     c70:	6891      	ldr	r1, [r2, #8]
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <system_clock_source_enable+0x94>)
     c74:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c76:	6851      	ldr	r1, [r2, #4]
     c78:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c7a:	6812      	ldr	r2, [r2, #0]
     c7c:	b292      	uxth	r2, r2
     c7e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c80:	2000      	movs	r0, #0
     c82:	e008      	b.n	c96 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     c84:	4a05      	ldr	r2, [pc, #20]	; (c9c <system_clock_source_enable+0x94>)
     c86:	2344      	movs	r3, #68	; 0x44
     c88:	5cd0      	ldrb	r0, [r2, r3]
     c8a:	2102      	movs	r1, #2
     c8c:	4301      	orrs	r1, r0
     c8e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c90:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     c92:	e000      	b.n	c96 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c94:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     c96:	4770      	bx	lr
     c98:	00002474 	.word	0x00002474
     c9c:	40000800 	.word	0x40000800
     ca0:	20000090 	.word	0x20000090
     ca4:	0000ff7f 	.word	0x0000ff7f

00000ca8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     ca8:	b530      	push	{r4, r5, lr}
     caa:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cac:	22c2      	movs	r2, #194	; 0xc2
     cae:	00d2      	lsls	r2, r2, #3
     cb0:	4b1a      	ldr	r3, [pc, #104]	; (d1c <system_clock_init+0x74>)
     cb2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cb4:	4b1a      	ldr	r3, [pc, #104]	; (d20 <system_clock_init+0x78>)
     cb6:	685a      	ldr	r2, [r3, #4]
     cb8:	211e      	movs	r1, #30
     cba:	438a      	bics	r2, r1
     cbc:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cbe:	2301      	movs	r3, #1
     cc0:	466a      	mov	r2, sp
     cc2:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cc4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cc6:	4d17      	ldr	r5, [pc, #92]	; (d24 <system_clock_init+0x7c>)
     cc8:	b2e0      	uxtb	r0, r4
     cca:	4669      	mov	r1, sp
     ccc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cce:	3401      	adds	r4, #1
     cd0:	2c25      	cmp	r4, #37	; 0x25
     cd2:	d1f9      	bne.n	cc8 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     cd4:	a803      	add	r0, sp, #12
     cd6:	2400      	movs	r4, #0
     cd8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     cda:	2501      	movs	r5, #1
     cdc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     cde:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ce0:	4b11      	ldr	r3, [pc, #68]	; (d28 <system_clock_init+0x80>)
     ce2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ce4:	2006      	movs	r0, #6
     ce6:	4b11      	ldr	r3, [pc, #68]	; (d2c <system_clock_init+0x84>)
     ce8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     cea:	4b11      	ldr	r3, [pc, #68]	; (d30 <system_clock_init+0x88>)
     cec:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     cee:	4b11      	ldr	r3, [pc, #68]	; (d34 <system_clock_init+0x8c>)
     cf0:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     cf2:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     cf4:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     cf6:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     cf8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     cfa:	466b      	mov	r3, sp
     cfc:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     cfe:	2306      	movs	r3, #6
     d00:	466a      	mov	r2, sp
     d02:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d04:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d06:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d08:	2000      	movs	r0, #0
     d0a:	4669      	mov	r1, sp
     d0c:	4b0a      	ldr	r3, [pc, #40]	; (d38 <system_clock_init+0x90>)
     d0e:	4798      	blx	r3
     d10:	2000      	movs	r0, #0
     d12:	4b0a      	ldr	r3, [pc, #40]	; (d3c <system_clock_init+0x94>)
     d14:	4798      	blx	r3
#endif
}
     d16:	b005      	add	sp, #20
     d18:	bd30      	pop	{r4, r5, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	40000800 	.word	0x40000800
     d20:	41004000 	.word	0x41004000
     d24:	00000f61 	.word	0x00000f61
     d28:	00000bcd 	.word	0x00000bcd
     d2c:	00000c09 	.word	0x00000c09
     d30:	00000d41 	.word	0x00000d41
     d34:	40000400 	.word	0x40000400
     d38:	00000d65 	.word	0x00000d65
     d3c:	00000e05 	.word	0x00000e05

00000d40 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d40:	4b06      	ldr	r3, [pc, #24]	; (d5c <system_gclk_init+0x1c>)
     d42:	6999      	ldr	r1, [r3, #24]
     d44:	2208      	movs	r2, #8
     d46:	430a      	orrs	r2, r1
     d48:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d4a:	2201      	movs	r2, #1
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <system_gclk_init+0x20>)
     d4e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d50:	1c19      	adds	r1, r3, #0
     d52:	780b      	ldrb	r3, [r1, #0]
     d54:	4213      	tst	r3, r2
     d56:	d1fc      	bne.n	d52 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d58:	4770      	bx	lr
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	40000400 	.word	0x40000400
     d60:	40000c00 	.word	0x40000c00

00000d64 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d64:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d66:	1c06      	adds	r6, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d68:	780d      	ldrb	r5, [r1, #0]
     d6a:	022d      	lsls	r5, r5, #8
     d6c:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     d6e:	784b      	ldrb	r3, [r1, #1]
     d70:	2b00      	cmp	r3, #0
     d72:	d002      	beq.n	d7a <system_gclk_gen_set_config+0x16>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     d74:	2380      	movs	r3, #128	; 0x80
     d76:	02db      	lsls	r3, r3, #11
     d78:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     d7a:	7a4b      	ldrb	r3, [r1, #9]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d002      	beq.n	d86 <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	031b      	lsls	r3, r3, #12
     d84:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     d86:	684c      	ldr	r4, [r1, #4]
     d88:	2c01      	cmp	r4, #1
     d8a:	d917      	bls.n	dbc <system_gclk_gen_set_config+0x58>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     d8c:	1e63      	subs	r3, r4, #1
     d8e:	421c      	tst	r4, r3
     d90:	d10f      	bne.n	db2 <system_gclk_gen_set_config+0x4e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d92:	2c02      	cmp	r4, #2
     d94:	d906      	bls.n	da4 <system_gclk_gen_set_config+0x40>
     d96:	2302      	movs	r3, #2
     d98:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     d9a:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     d9c:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     d9e:	429c      	cmp	r4, r3
     da0:	d8fb      	bhi.n	d9a <system_gclk_gen_set_config+0x36>
     da2:	e000      	b.n	da6 <system_gclk_gen_set_config+0x42>
     da4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     da6:	0216      	lsls	r6, r2, #8
     da8:	4306      	orrs	r6, r0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     daa:	2380      	movs	r3, #128	; 0x80
     dac:	035b      	lsls	r3, r3, #13
     dae:	431d      	orrs	r5, r3
     db0:	e004      	b.n	dbc <system_gclk_gen_set_config+0x58>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     db2:	0226      	lsls	r6, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     db4:	4306      	orrs	r6, r0
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	029b      	lsls	r3, r3, #10
     dba:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     dbc:	7a0b      	ldrb	r3, [r1, #8]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d002      	beq.n	dc8 <system_gclk_gen_set_config+0x64>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	039b      	lsls	r3, r3, #14
     dc6:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dc8:	490b      	ldr	r1, [pc, #44]	; (df8 <system_gclk_gen_set_config+0x94>)
     dca:	784b      	ldrb	r3, [r1, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     dcc:	b25b      	sxtb	r3, r3
     dce:	2b00      	cmp	r3, #0
     dd0:	dbfb      	blt.n	dca <system_gclk_gen_set_config+0x66>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     dd2:	4b0a      	ldr	r3, [pc, #40]	; (dfc <system_gclk_gen_set_config+0x98>)
     dd4:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;
     dd6:	4b08      	ldr	r3, [pc, #32]	; (df8 <system_gclk_gen_set_config+0x94>)
     dd8:	609e      	str	r6, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dda:	1c1a      	adds	r2, r3, #0
     ddc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     dde:	b25b      	sxtb	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	dbfb      	blt.n	ddc <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     de4:	4b04      	ldr	r3, [pc, #16]	; (df8 <system_gclk_gen_set_config+0x94>)
     de6:	6859      	ldr	r1, [r3, #4]
     de8:	2280      	movs	r2, #128	; 0x80
     dea:	0252      	lsls	r2, r2, #9
     dec:	400a      	ands	r2, r1
     dee:	4315      	orrs	r5, r2
     df0:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     df2:	4b03      	ldr	r3, [pc, #12]	; (e00 <system_gclk_gen_set_config+0x9c>)
     df4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     df6:	bd70      	pop	{r4, r5, r6, pc}
     df8:	40000c00 	.word	0x40000c00
     dfc:	0000029d 	.word	0x0000029d
     e00:	000002dd 	.word	0x000002dd

00000e04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e04:	b510      	push	{r4, lr}
     e06:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e08:	4a0b      	ldr	r2, [pc, #44]	; (e38 <system_gclk_gen_enable+0x34>)
     e0a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e0c:	b25b      	sxtb	r3, r3
     e0e:	2b00      	cmp	r3, #0
     e10:	dbfb      	blt.n	e0a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e12:	4b0a      	ldr	r3, [pc, #40]	; (e3c <system_gclk_gen_enable+0x38>)
     e14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e16:	4b0a      	ldr	r3, [pc, #40]	; (e40 <system_gclk_gen_enable+0x3c>)
     e18:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e1a:	4a07      	ldr	r2, [pc, #28]	; (e38 <system_gclk_gen_enable+0x34>)
     e1c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     e1e:	b25b      	sxtb	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	dbfb      	blt.n	e1c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e24:	4b04      	ldr	r3, [pc, #16]	; (e38 <system_gclk_gen_enable+0x34>)
     e26:	6859      	ldr	r1, [r3, #4]
     e28:	2280      	movs	r2, #128	; 0x80
     e2a:	0252      	lsls	r2, r2, #9
     e2c:	430a      	orrs	r2, r1
     e2e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e30:	4b04      	ldr	r3, [pc, #16]	; (e44 <system_gclk_gen_enable+0x40>)
     e32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e34:	bd10      	pop	{r4, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	40000c00 	.word	0x40000c00
     e3c:	0000029d 	.word	0x0000029d
     e40:	40000c04 	.word	0x40000c04
     e44:	000002dd 	.word	0x000002dd

00000e48 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e48:	b570      	push	{r4, r5, r6, lr}
     e4a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e4c:	4a1a      	ldr	r2, [pc, #104]	; (eb8 <system_gclk_gen_get_hz+0x70>)
     e4e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e50:	b25b      	sxtb	r3, r3
     e52:	2b00      	cmp	r3, #0
     e54:	dbfb      	blt.n	e4e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e56:	4b19      	ldr	r3, [pc, #100]	; (ebc <system_gclk_gen_get_hz+0x74>)
     e58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e5a:	4b19      	ldr	r3, [pc, #100]	; (ec0 <system_gclk_gen_get_hz+0x78>)
     e5c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e5e:	4a16      	ldr	r2, [pc, #88]	; (eb8 <system_gclk_gen_get_hz+0x70>)
     e60:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     e62:	b25b      	sxtb	r3, r3
     e64:	2b00      	cmp	r3, #0
     e66:	dbfb      	blt.n	e60 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     e68:	4e13      	ldr	r6, [pc, #76]	; (eb8 <system_gclk_gen_get_hz+0x70>)
     e6a:	6870      	ldr	r0, [r6, #4]
     e6c:	04c0      	lsls	r0, r0, #19
     e6e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     e70:	4b14      	ldr	r3, [pc, #80]	; (ec4 <system_gclk_gen_get_hz+0x7c>)
     e72:	4798      	blx	r3
     e74:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e76:	4b12      	ldr	r3, [pc, #72]	; (ec0 <system_gclk_gen_get_hz+0x78>)
     e78:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     e7a:	6876      	ldr	r6, [r6, #4]
     e7c:	02f6      	lsls	r6, r6, #11
     e7e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e80:	4b11      	ldr	r3, [pc, #68]	; (ec8 <system_gclk_gen_get_hz+0x80>)
     e82:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e84:	4a0c      	ldr	r2, [pc, #48]	; (eb8 <system_gclk_gen_get_hz+0x70>)
     e86:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     e88:	b25b      	sxtb	r3, r3
     e8a:	2b00      	cmp	r3, #0
     e8c:	dbfb      	blt.n	e86 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <system_gclk_gen_get_hz+0x70>)
     e90:	689c      	ldr	r4, [r3, #8]
     e92:	0a24      	lsrs	r4, r4, #8
     e94:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e96:	4b0d      	ldr	r3, [pc, #52]	; (ecc <system_gclk_gen_get_hz+0x84>)
     e98:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     e9a:	2e00      	cmp	r6, #0
     e9c:	d107      	bne.n	eae <system_gclk_gen_get_hz+0x66>
     e9e:	2c01      	cmp	r4, #1
     ea0:	d907      	bls.n	eb2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ea2:	1c28      	adds	r0, r5, #0
     ea4:	1c21      	adds	r1, r4, #0
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <system_gclk_gen_get_hz+0x88>)
     ea8:	4798      	blx	r3
     eaa:	1c05      	adds	r5, r0, #0
     eac:	e001      	b.n	eb2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     eae:	3401      	adds	r4, #1
     eb0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     eb2:	1c28      	adds	r0, r5, #0
     eb4:	bd70      	pop	{r4, r5, r6, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	40000c00 	.word	0x40000c00
     ebc:	0000029d 	.word	0x0000029d
     ec0:	40000c04 	.word	0x40000c04
     ec4:	00000b3d 	.word	0x00000b3d
     ec8:	40000c08 	.word	0x40000c08
     ecc:	000002dd 	.word	0x000002dd
     ed0:	000013d5 	.word	0x000013d5

00000ed4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     ed4:	b510      	push	{r4, lr}
     ed6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <system_gclk_chan_enable+0x20>)
     eda:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     edc:	4b06      	ldr	r3, [pc, #24]	; (ef8 <system_gclk_chan_enable+0x24>)
     ede:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     ee0:	4b06      	ldr	r3, [pc, #24]	; (efc <system_gclk_chan_enable+0x28>)
     ee2:	8859      	ldrh	r1, [r3, #2]
     ee4:	2280      	movs	r2, #128	; 0x80
     ee6:	01d2      	lsls	r2, r2, #7
     ee8:	430a      	orrs	r2, r1
     eea:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eec:	4b04      	ldr	r3, [pc, #16]	; (f00 <system_gclk_chan_enable+0x2c>)
     eee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ef0:	bd10      	pop	{r4, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	0000029d 	.word	0x0000029d
     ef8:	40000c02 	.word	0x40000c02
     efc:	40000c00 	.word	0x40000c00
     f00:	000002dd 	.word	0x000002dd

00000f04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f04:	b510      	push	{r4, lr}
     f06:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f08:	4b0f      	ldr	r3, [pc, #60]	; (f48 <system_gclk_chan_disable+0x44>)
     f0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f0c:	4b0f      	ldr	r3, [pc, #60]	; (f4c <system_gclk_chan_disable+0x48>)
     f0e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f10:	4b0f      	ldr	r3, [pc, #60]	; (f50 <system_gclk_chan_disable+0x4c>)
     f12:	8858      	ldrh	r0, [r3, #2]
     f14:	0500      	lsls	r0, r0, #20
     f16:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f18:	8859      	ldrh	r1, [r3, #2]
     f1a:	4a0e      	ldr	r2, [pc, #56]	; (f54 <system_gclk_chan_disable+0x50>)
     f1c:	400a      	ands	r2, r1
     f1e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f20:	8859      	ldrh	r1, [r3, #2]
     f22:	4a0d      	ldr	r2, [pc, #52]	; (f58 <system_gclk_chan_disable+0x54>)
     f24:	400a      	ands	r2, r1
     f26:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f28:	1c19      	adds	r1, r3, #0
     f2a:	2280      	movs	r2, #128	; 0x80
     f2c:	01d2      	lsls	r2, r2, #7
     f2e:	884b      	ldrh	r3, [r1, #2]
     f30:	4213      	tst	r3, r2
     f32:	d1fc      	bne.n	f2e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f34:	4b06      	ldr	r3, [pc, #24]	; (f50 <system_gclk_chan_disable+0x4c>)
     f36:	0201      	lsls	r1, r0, #8
     f38:	8858      	ldrh	r0, [r3, #2]
     f3a:	4a06      	ldr	r2, [pc, #24]	; (f54 <system_gclk_chan_disable+0x50>)
     f3c:	4002      	ands	r2, r0
     f3e:	430a      	orrs	r2, r1
     f40:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f42:	4b06      	ldr	r3, [pc, #24]	; (f5c <system_gclk_chan_disable+0x58>)
     f44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f46:	bd10      	pop	{r4, pc}
     f48:	0000029d 	.word	0x0000029d
     f4c:	40000c02 	.word	0x40000c02
     f50:	40000c00 	.word	0x40000c00
     f54:	fffff0ff 	.word	0xfffff0ff
     f58:	ffffbfff 	.word	0xffffbfff
     f5c:	000002dd 	.word	0x000002dd

00000f60 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     f60:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     f62:	780c      	ldrb	r4, [r1, #0]
     f64:	0224      	lsls	r4, r4, #8
     f66:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     f68:	4b02      	ldr	r3, [pc, #8]	; (f74 <system_gclk_chan_set_config+0x14>)
     f6a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     f6c:	b2a4      	uxth	r4, r4
     f6e:	4b02      	ldr	r3, [pc, #8]	; (f78 <system_gclk_chan_set_config+0x18>)
     f70:	805c      	strh	r4, [r3, #2]
}
     f72:	bd10      	pop	{r4, pc}
     f74:	00000f05 	.word	0x00000f05
     f78:	40000c00 	.word	0x40000c00

00000f7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     f7c:	b510      	push	{r4, lr}
     f7e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f80:	4b06      	ldr	r3, [pc, #24]	; (f9c <system_gclk_chan_get_hz+0x20>)
     f82:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f84:	4b06      	ldr	r3, [pc, #24]	; (fa0 <system_gclk_chan_get_hz+0x24>)
     f86:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     f88:	4b06      	ldr	r3, [pc, #24]	; (fa4 <system_gclk_chan_get_hz+0x28>)
     f8a:	885c      	ldrh	r4, [r3, #2]
     f8c:	0524      	lsls	r4, r4, #20
     f8e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f90:	4b05      	ldr	r3, [pc, #20]	; (fa8 <system_gclk_chan_get_hz+0x2c>)
     f92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     f94:	1c20      	adds	r0, r4, #0
     f96:	4b05      	ldr	r3, [pc, #20]	; (fac <system_gclk_chan_get_hz+0x30>)
     f98:	4798      	blx	r3
}
     f9a:	bd10      	pop	{r4, pc}
     f9c:	0000029d 	.word	0x0000029d
     fa0:	40000c02 	.word	0x40000c02
     fa4:	40000c00 	.word	0x40000c00
     fa8:	000002dd 	.word	0x000002dd
     fac:	00000e49 	.word	0x00000e49

00000fb0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     fb0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     fb2:	78d3      	ldrb	r3, [r2, #3]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d11e      	bne.n	ff6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     fb8:	7813      	ldrb	r3, [r2, #0]
     fba:	2b80      	cmp	r3, #128	; 0x80
     fbc:	d004      	beq.n	fc8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     fbe:	061b      	lsls	r3, r3, #24
     fc0:	2480      	movs	r4, #128	; 0x80
     fc2:	0264      	lsls	r4, r4, #9
     fc4:	4323      	orrs	r3, r4
     fc6:	e000      	b.n	fca <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     fc8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     fca:	7854      	ldrb	r4, [r2, #1]
     fcc:	2502      	movs	r5, #2
     fce:	43ac      	bics	r4, r5
     fd0:	d10a      	bne.n	fe8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     fd2:	7894      	ldrb	r4, [r2, #2]
     fd4:	2c00      	cmp	r4, #0
     fd6:	d103      	bne.n	fe0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     fd8:	2480      	movs	r4, #128	; 0x80
     fda:	02a4      	lsls	r4, r4, #10
     fdc:	4323      	orrs	r3, r4
     fde:	e002      	b.n	fe6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     fe0:	24c0      	movs	r4, #192	; 0xc0
     fe2:	02e4      	lsls	r4, r4, #11
     fe4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     fe6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     fe8:	7854      	ldrb	r4, [r2, #1]
     fea:	3c01      	subs	r4, #1
     fec:	2c01      	cmp	r4, #1
     fee:	d804      	bhi.n	ffa <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     ff0:	4c11      	ldr	r4, [pc, #68]	; (1038 <_system_pinmux_config+0x88>)
     ff2:	4023      	ands	r3, r4
     ff4:	e001      	b.n	ffa <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     ff6:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     ff8:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     ffa:	040d      	lsls	r5, r1, #16
     ffc:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     ffe:	24a0      	movs	r4, #160	; 0xa0
    1000:	05e4      	lsls	r4, r4, #23
    1002:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1004:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1006:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1008:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    100a:	24d0      	movs	r4, #208	; 0xd0
    100c:	0624      	lsls	r4, r4, #24
    100e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1010:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1012:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1014:	78d4      	ldrb	r4, [r2, #3]
    1016:	2c00      	cmp	r4, #0
    1018:	d10c      	bne.n	1034 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    101a:	035c      	lsls	r4, r3, #13
    101c:	d505      	bpl.n	102a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    101e:	7893      	ldrb	r3, [r2, #2]
    1020:	2b01      	cmp	r3, #1
    1022:	d101      	bne.n	1028 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1024:	6181      	str	r1, [r0, #24]
    1026:	e000      	b.n	102a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1028:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    102a:	7853      	ldrb	r3, [r2, #1]
    102c:	3b01      	subs	r3, #1
    102e:	2b01      	cmp	r3, #1
    1030:	d800      	bhi.n	1034 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1032:	6081      	str	r1, [r0, #8]
		}
	}
}
    1034:	bd30      	pop	{r4, r5, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	fffbffff 	.word	0xfffbffff

0000103c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    103c:	b508      	push	{r3, lr}
    103e:	1c03      	adds	r3, r0, #0
    1040:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1042:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1044:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1046:	2900      	cmp	r1, #0
    1048:	d103      	bne.n	1052 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    104a:	0958      	lsrs	r0, r3, #5
    104c:	01c0      	lsls	r0, r0, #7
    104e:	4904      	ldr	r1, [pc, #16]	; (1060 <system_pinmux_pin_set_config+0x24>)
    1050:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1052:	211f      	movs	r1, #31
    1054:	400b      	ands	r3, r1
    1056:	2101      	movs	r1, #1
    1058:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    105a:	4b02      	ldr	r3, [pc, #8]	; (1064 <system_pinmux_pin_set_config+0x28>)
    105c:	4798      	blx	r3
}
    105e:	bd08      	pop	{r3, pc}
    1060:	41004400 	.word	0x41004400
    1064:	00000fb1 	.word	0x00000fb1

00001068 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1068:	4770      	bx	lr
    106a:	46c0      	nop			; (mov r8, r8)

0000106c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    106c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    106e:	4b05      	ldr	r3, [pc, #20]	; (1084 <system_init+0x18>)
    1070:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1072:	4b05      	ldr	r3, [pc, #20]	; (1088 <system_init+0x1c>)
    1074:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <system_init+0x20>)
    1078:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <system_init+0x24>)
    107c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    107e:	4b05      	ldr	r3, [pc, #20]	; (1094 <system_init+0x28>)
    1080:	4798      	blx	r3
}
    1082:	bd08      	pop	{r3, pc}
    1084:	00000ca9 	.word	0x00000ca9
    1088:	0000030d 	.word	0x0000030d
    108c:	00001069 	.word	0x00001069
    1090:	00001069 	.word	0x00001069
    1094:	00001069 	.word	0x00001069

00001098 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1098:	e7fe      	b.n	1098 <Dummy_Handler>
    109a:	46c0      	nop			; (mov r8, r8)

0000109c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    109c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    109e:	4b2c      	ldr	r3, [pc, #176]	; (1150 <Reset_Handler+0xb4>)
    10a0:	4a2c      	ldr	r2, [pc, #176]	; (1154 <Reset_Handler+0xb8>)
    10a2:	429a      	cmp	r2, r3
    10a4:	d003      	beq.n	10ae <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    10a6:	4b2c      	ldr	r3, [pc, #176]	; (1158 <Reset_Handler+0xbc>)
    10a8:	4a29      	ldr	r2, [pc, #164]	; (1150 <Reset_Handler+0xb4>)
    10aa:	429a      	cmp	r2, r3
    10ac:	d304      	bcc.n	10b8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    10ae:	4b2b      	ldr	r3, [pc, #172]	; (115c <Reset_Handler+0xc0>)
    10b0:	4a2b      	ldr	r2, [pc, #172]	; (1160 <Reset_Handler+0xc4>)
    10b2:	429a      	cmp	r2, r3
    10b4:	d310      	bcc.n	10d8 <Reset_Handler+0x3c>
    10b6:	e01b      	b.n	10f0 <Reset_Handler+0x54>
    10b8:	4b2a      	ldr	r3, [pc, #168]	; (1164 <Reset_Handler+0xc8>)
    10ba:	4827      	ldr	r0, [pc, #156]	; (1158 <Reset_Handler+0xbc>)
    10bc:	3003      	adds	r0, #3
    10be:	1ac0      	subs	r0, r0, r3
    10c0:	0880      	lsrs	r0, r0, #2
    10c2:	3001      	adds	r0, #1
    10c4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    10c6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    10c8:	4921      	ldr	r1, [pc, #132]	; (1150 <Reset_Handler+0xb4>)
    10ca:	4a22      	ldr	r2, [pc, #136]	; (1154 <Reset_Handler+0xb8>)
    10cc:	58d4      	ldr	r4, [r2, r3]
    10ce:	50cc      	str	r4, [r1, r3]
    10d0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    10d2:	4283      	cmp	r3, r0
    10d4:	d1fa      	bne.n	10cc <Reset_Handler+0x30>
    10d6:	e7ea      	b.n	10ae <Reset_Handler+0x12>
    10d8:	4b21      	ldr	r3, [pc, #132]	; (1160 <Reset_Handler+0xc4>)
    10da:	1d1a      	adds	r2, r3, #4
    10dc:	491f      	ldr	r1, [pc, #124]	; (115c <Reset_Handler+0xc0>)
    10de:	3103      	adds	r1, #3
    10e0:	1a89      	subs	r1, r1, r2
    10e2:	0889      	lsrs	r1, r1, #2
    10e4:	0089      	lsls	r1, r1, #2
    10e6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    10e8:	2100      	movs	r1, #0
    10ea:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    10ec:	4293      	cmp	r3, r2
    10ee:	d1fc      	bne.n	10ea <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    10f0:	4b1d      	ldr	r3, [pc, #116]	; (1168 <Reset_Handler+0xcc>)
    10f2:	21ff      	movs	r1, #255	; 0xff
    10f4:	4a1d      	ldr	r2, [pc, #116]	; (116c <Reset_Handler+0xd0>)
    10f6:	438a      	bics	r2, r1
    10f8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    10fa:	2102      	movs	r1, #2
    10fc:	2390      	movs	r3, #144	; 0x90
    10fe:	005b      	lsls	r3, r3, #1
    1100:	4a1b      	ldr	r2, [pc, #108]	; (1170 <Reset_Handler+0xd4>)
    1102:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1104:	4b1b      	ldr	r3, [pc, #108]	; (1174 <Reset_Handler+0xd8>)
    1106:	78d8      	ldrb	r0, [r3, #3]
    1108:	2103      	movs	r1, #3
    110a:	4388      	bics	r0, r1
    110c:	2202      	movs	r2, #2
    110e:	4310      	orrs	r0, r2
    1110:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1112:	78dd      	ldrb	r5, [r3, #3]
    1114:	240c      	movs	r4, #12
    1116:	43a5      	bics	r5, r4
    1118:	2008      	movs	r0, #8
    111a:	4305      	orrs	r5, r0
    111c:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    111e:	4b16      	ldr	r3, [pc, #88]	; (1178 <Reset_Handler+0xdc>)
    1120:	7b9e      	ldrb	r6, [r3, #14]
    1122:	2530      	movs	r5, #48	; 0x30
    1124:	43ae      	bics	r6, r5
    1126:	2520      	movs	r5, #32
    1128:	4335      	orrs	r5, r6
    112a:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    112c:	7b9d      	ldrb	r5, [r3, #14]
    112e:	43a5      	bics	r5, r4
    1130:	4328      	orrs	r0, r5
    1132:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1134:	7b98      	ldrb	r0, [r3, #14]
    1136:	4388      	bics	r0, r1
    1138:	4302      	orrs	r2, r0
    113a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    113c:	4b0f      	ldr	r3, [pc, #60]	; (117c <Reset_Handler+0xe0>)
    113e:	6859      	ldr	r1, [r3, #4]
    1140:	2280      	movs	r2, #128	; 0x80
    1142:	430a      	orrs	r2, r1
    1144:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1146:	4b0e      	ldr	r3, [pc, #56]	; (1180 <Reset_Handler+0xe4>)
    1148:	4798      	blx	r3

        /* Branch to main function */
        main();
    114a:	4b0e      	ldr	r3, [pc, #56]	; (1184 <Reset_Handler+0xe8>)
    114c:	4798      	blx	r3
    114e:	e7fe      	b.n	114e <Reset_Handler+0xb2>
    1150:	20000000 	.word	0x20000000
    1154:	00002554 	.word	0x00002554
    1158:	20000068 	.word	0x20000068
    115c:	200000d8 	.word	0x200000d8
    1160:	20000068 	.word	0x20000068
    1164:	20000004 	.word	0x20000004
    1168:	e000ed00 	.word	0xe000ed00
    116c:	00000000 	.word	0x00000000
    1170:	41007000 	.word	0x41007000
    1174:	41005000 	.word	0x41005000
    1178:	41004800 	.word	0x41004800
    117c:	41004000 	.word	0x41004000
    1180:	000014b9 	.word	0x000014b9
    1184:	000012d9 	.word	0x000012d9

00001188 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1188:	4b06      	ldr	r3, [pc, #24]	; (11a4 <_sbrk+0x1c>)
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	2b00      	cmp	r3, #0
    118e:	d102      	bne.n	1196 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1190:	4a05      	ldr	r2, [pc, #20]	; (11a8 <_sbrk+0x20>)
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <_sbrk+0x1c>)
    1194:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1196:	4a03      	ldr	r2, [pc, #12]	; (11a4 <_sbrk+0x1c>)
    1198:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    119a:	1818      	adds	r0, r3, r0
    119c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    119e:	1c18      	adds	r0, r3, #0
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	200000a8 	.word	0x200000a8
    11a8:	200020d8 	.word	0x200020d8

000011ac <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    11ac:	2001      	movs	r0, #1
}
    11ae:	4240      	negs	r0, r0
    11b0:	4770      	bx	lr
    11b2:	46c0      	nop			; (mov r8, r8)

000011b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    11b4:	2380      	movs	r3, #128	; 0x80
    11b6:	019b      	lsls	r3, r3, #6
    11b8:	604b      	str	r3, [r1, #4]

	return 0;
}
    11ba:	2000      	movs	r0, #0
    11bc:	4770      	bx	lr
    11be:	46c0      	nop			; (mov r8, r8)

000011c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    11c0:	2001      	movs	r0, #1
    11c2:	4770      	bx	lr

000011c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    11c4:	2000      	movs	r0, #0
    11c6:	4770      	bx	lr

000011c8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    11c8:	b570      	push	{r4, r5, r6, lr}
    11ca:	b082      	sub	sp, #8
    11cc:	1c05      	adds	r5, r0, #0
    11ce:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    11d0:	2200      	movs	r2, #0
    11d2:	466b      	mov	r3, sp
    11d4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    11d6:	4c06      	ldr	r4, [pc, #24]	; (11f0 <usart_serial_getchar+0x28>)
    11d8:	1c28      	adds	r0, r5, #0
    11da:	4669      	mov	r1, sp
    11dc:	3106      	adds	r1, #6
    11de:	47a0      	blx	r4
    11e0:	2800      	cmp	r0, #0
    11e2:	d1f9      	bne.n	11d8 <usart_serial_getchar+0x10>

	*c = temp;
    11e4:	466b      	mov	r3, sp
    11e6:	3306      	adds	r3, #6
    11e8:	881b      	ldrh	r3, [r3, #0]
    11ea:	7033      	strb	r3, [r6, #0]
}
    11ec:	b002      	add	sp, #8
    11ee:	bd70      	pop	{r4, r5, r6, pc}
    11f0:	00000a2d 	.word	0x00000a2d

000011f4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
    11f6:	1c06      	adds	r6, r0, #0
    11f8:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    11fa:	4c03      	ldr	r4, [pc, #12]	; (1208 <usart_serial_putchar+0x14>)
    11fc:	1c30      	adds	r0, r6, #0
    11fe:	1c29      	adds	r1, r5, #0
    1200:	47a0      	blx	r4
    1202:	2800      	cmp	r0, #0
    1204:	d1fa      	bne.n	11fc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1206:	bd70      	pop	{r4, r5, r6, pc}
    1208:	00000a05 	.word	0x00000a05

0000120c <configure_usart>:
    usart_enable(&cdc_uart_module);
}



void configure_usart(void) {
    120c:	b570      	push	{r4, r5, r6, lr}
    120e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	05db      	lsls	r3, r3, #23
    1214:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1216:	2300      	movs	r3, #0
    1218:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    121a:	22ff      	movs	r2, #255	; 0xff
    121c:	4668      	mov	r0, sp
    121e:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    1220:	2200      	movs	r2, #0
    1222:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1224:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    1226:	2196      	movs	r1, #150	; 0x96
    1228:	0189      	lsls	r1, r1, #6
    122a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    122c:	2101      	movs	r1, #1
    122e:	2024      	movs	r0, #36	; 0x24
    1230:	466c      	mov	r4, sp
    1232:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1234:	2025      	movs	r0, #37	; 0x25
    1236:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1238:	2126      	movs	r1, #38	; 0x26
    123a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    123c:	2127      	movs	r1, #39	; 0x27
    123e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1240:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1242:	212c      	movs	r1, #44	; 0x2c
    1244:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1246:	212d      	movs	r1, #45	; 0x2d
    1248:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    124a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    124c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    124e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    1250:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1252:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1254:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    1256:	2313      	movs	r3, #19
    1258:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    125a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	035b      	lsls	r3, r3, #13
    1260:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1262:	4b18      	ldr	r3, [pc, #96]	; (12c4 <configure_usart+0xb8>)
    1264:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1266:	4b18      	ldr	r3, [pc, #96]	; (12c8 <configure_usart+0xbc>)
    1268:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    126a:	2301      	movs	r3, #1
    126c:	425b      	negs	r3, r3
    126e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1270:	930f      	str	r3, [sp, #60]	; 0x3c
	/*
	while (usart_init(&usart_instance,
			EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	} */
	
	while (usart_init(r.in,
    1272:	4e16      	ldr	r6, [pc, #88]	; (12cc <configure_usart+0xc0>)
    1274:	4d16      	ldr	r5, [pc, #88]	; (12d0 <configure_usart+0xc4>)
    1276:	4c17      	ldr	r4, [pc, #92]	; (12d4 <configure_usart+0xc8>)
    1278:	6870      	ldr	r0, [r6, #4]
    127a:	1c29      	adds	r1, r5, #0
    127c:	466a      	mov	r2, sp
    127e:	47a0      	blx	r4
    1280:	2800      	cmp	r0, #0
    1282:	d1f9      	bne.n	1278 <configure_usart+0x6c>
		EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	
	while (usart_init(r.out,
    1284:	4e11      	ldr	r6, [pc, #68]	; (12cc <configure_usart+0xc0>)
    1286:	4d12      	ldr	r5, [pc, #72]	; (12d0 <configure_usart+0xc4>)
    1288:	4c12      	ldr	r4, [pc, #72]	; (12d4 <configure_usart+0xc8>)
    128a:	6830      	ldr	r0, [r6, #0]
    128c:	1c29      	adds	r1, r5, #0
    128e:	466a      	mov	r2, sp
    1290:	47a0      	blx	r4
    1292:	2800      	cmp	r0, #0
    1294:	d1f9      	bne.n	128a <configure_usart+0x7e>
		EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(r.in);
    1296:	4b0d      	ldr	r3, [pc, #52]	; (12cc <configure_usart+0xc0>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    129c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    129e:	2b00      	cmp	r3, #0
    12a0:	d1fc      	bne.n	129c <configure_usart+0x90>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12a2:	6811      	ldr	r1, [r2, #0]
    12a4:	2302      	movs	r3, #2
    12a6:	430b      	orrs	r3, r1
    12a8:	6013      	str	r3, [r2, #0]
	usart_enable(r.out);
    12aa:	4b08      	ldr	r3, [pc, #32]	; (12cc <configure_usart+0xc0>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ac:	681b      	ldr	r3, [r3, #0]
    12ae:	681a      	ldr	r2, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12b0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    12b2:	2b00      	cmp	r3, #0
    12b4:	d1fc      	bne.n	12b0 <configure_usart+0xa4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12b6:	6811      	ldr	r1, [r2, #0]
    12b8:	2302      	movs	r3, #2
    12ba:	430b      	orrs	r3, r1
    12bc:	6013      	str	r3, [r2, #0]

}
    12be:	b010      	add	sp, #64	; 0x40
    12c0:	bd70      	pop	{r4, r5, r6, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	00160002 	.word	0x00160002
    12c8:	00170002 	.word	0x00170002
    12cc:	200000cc 	.word	0x200000cc
    12d0:	42001400 	.word	0x42001400
    12d4:	00000755 	.word	0x00000755

000012d8 <main>:

int main(void)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b090      	sub	sp, #64	; 0x40
	system_init();
    12dc:	4b2d      	ldr	r3, [pc, #180]	; (1394 <main+0xbc>)
    12de:	4798      	blx	r3
	configure_usart();
    12e0:	4b2d      	ldr	r3, [pc, #180]	; (1398 <main+0xc0>)
    12e2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    12e4:	2380      	movs	r3, #128	; 0x80
    12e6:	05db      	lsls	r3, r3, #23
    12e8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    12ea:	2300      	movs	r3, #0
    12ec:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    12ee:	22ff      	movs	r2, #255	; 0xff
    12f0:	4668      	mov	r0, sp
    12f2:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    12f4:	2200      	movs	r2, #0
    12f6:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    12f8:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    12fa:	2101      	movs	r1, #1
    12fc:	2024      	movs	r0, #36	; 0x24
    12fe:	466c      	mov	r4, sp
    1300:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1302:	2025      	movs	r0, #37	; 0x25
    1304:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1306:	2126      	movs	r1, #38	; 0x26
    1308:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    130a:	2127      	movs	r1, #39	; 0x27
    130c:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    130e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1310:	212c      	movs	r1, #44	; 0x2c
    1312:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1314:	212d      	movs	r1, #45	; 0x2d
    1316:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1318:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    131a:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    131c:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    131e:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1320:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1322:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    1324:	2313      	movs	r3, #19
    1326:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    1328:	7762      	strb	r2, [r4, #29]
 */
static void configure_console(void) {
    struct usart_config usart_conf;

    usart_get_config_defaults(&usart_conf);
    usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    132a:	2380      	movs	r3, #128	; 0x80
    132c:	035b      	lsls	r3, r3, #13
    132e:	9303      	str	r3, [sp, #12]
    usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    1330:	4b1a      	ldr	r3, [pc, #104]	; (139c <main+0xc4>)
    1332:	930c      	str	r3, [sp, #48]	; 0x30
    usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    1334:	4b1a      	ldr	r3, [pc, #104]	; (13a0 <main+0xc8>)
    1336:	930d      	str	r3, [sp, #52]	; 0x34
    usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    1338:	2301      	movs	r3, #1
    133a:	425b      	negs	r3, r3
    133c:	930e      	str	r3, [sp, #56]	; 0x38
    usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    133e:	930f      	str	r3, [sp, #60]	; 0x3c
    usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1340:	2396      	movs	r3, #150	; 0x96
    1342:	021b      	lsls	r3, r3, #8
    1344:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1346:	4c17      	ldr	r4, [pc, #92]	; (13a4 <main+0xcc>)
    1348:	4b17      	ldr	r3, [pc, #92]	; (13a8 <main+0xd0>)
    134a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    134c:	4a17      	ldr	r2, [pc, #92]	; (13ac <main+0xd4>)
    134e:	4b18      	ldr	r3, [pc, #96]	; (13b0 <main+0xd8>)
    1350:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1352:	4a18      	ldr	r2, [pc, #96]	; (13b4 <main+0xdc>)
    1354:	4b18      	ldr	r3, [pc, #96]	; (13b8 <main+0xe0>)
    1356:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    1358:	1c20      	adds	r0, r4, #0
    135a:	4918      	ldr	r1, [pc, #96]	; (13bc <main+0xe4>)
    135c:	466a      	mov	r2, sp
    135e:	4b18      	ldr	r3, [pc, #96]	; (13c0 <main+0xe8>)
    1360:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1362:	4e18      	ldr	r6, [pc, #96]	; (13c4 <main+0xec>)
    1364:	6833      	ldr	r3, [r6, #0]
    1366:	6898      	ldr	r0, [r3, #8]
    1368:	2100      	movs	r1, #0
    136a:	4d17      	ldr	r5, [pc, #92]	; (13c8 <main+0xf0>)
    136c:	47a8      	blx	r5
	setbuf(stdin, NULL);
    136e:	6833      	ldr	r3, [r6, #0]
    1370:	6858      	ldr	r0, [r3, #4]
    1372:	2100      	movs	r1, #0
    1374:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1376:	6822      	ldr	r2, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1378:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    137a:	2b00      	cmp	r3, #0
    137c:	d1fc      	bne.n	1378 <main+0xa0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    137e:	6811      	ldr	r1, [r2, #0]
    1380:	2302      	movs	r3, #2
    1382:	430b      	orrs	r3, r1
    1384:	6013      	str	r3, [r2, #0]
int main(void)
{
	system_init();
	configure_usart();
	configure_console();	
	program(&r);
    1386:	4811      	ldr	r0, [pc, #68]	; (13cc <main+0xf4>)
    1388:	4b11      	ldr	r3, [pc, #68]	; (13d0 <main+0xf8>)
    138a:	4798      	blx	r3

			while (usart_write_wait(&usart_instance, temp) != STATUS_OK) {
			}
		}
	}*/
}
    138c:	2000      	movs	r0, #0
    138e:	b010      	add	sp, #64	; 0x40
    1390:	bd70      	pop	{r4, r5, r6, pc}
    1392:	46c0      	nop			; (mov r8, r8)
    1394:	0000106d 	.word	0x0000106d
    1398:	0000120d 	.word	0x0000120d
    139c:	00160002 	.word	0x00160002
    13a0:	00170002 	.word	0x00170002
    13a4:	200000ac 	.word	0x200000ac
    13a8:	200000c8 	.word	0x200000c8
    13ac:	000011f5 	.word	0x000011f5
    13b0:	200000c4 	.word	0x200000c4
    13b4:	000011c9 	.word	0x000011c9
    13b8:	200000c0 	.word	0x200000c0
    13bc:	42001400 	.word	0x42001400
    13c0:	00000755 	.word	0x00000755
    13c4:	20000064 	.word	0x20000064
    13c8:	0000155d 	.word	0x0000155d
    13cc:	200000cc 	.word	0x200000cc
    13d0:	00000265 	.word	0x00000265

000013d4 <__aeabi_uidiv>:
    13d4:	2900      	cmp	r1, #0
    13d6:	d034      	beq.n	1442 <.udivsi3_skip_div0_test+0x6a>

000013d8 <.udivsi3_skip_div0_test>:
    13d8:	2301      	movs	r3, #1
    13da:	2200      	movs	r2, #0
    13dc:	b410      	push	{r4}
    13de:	4288      	cmp	r0, r1
    13e0:	d32c      	bcc.n	143c <.udivsi3_skip_div0_test+0x64>
    13e2:	2401      	movs	r4, #1
    13e4:	0724      	lsls	r4, r4, #28
    13e6:	42a1      	cmp	r1, r4
    13e8:	d204      	bcs.n	13f4 <.udivsi3_skip_div0_test+0x1c>
    13ea:	4281      	cmp	r1, r0
    13ec:	d202      	bcs.n	13f4 <.udivsi3_skip_div0_test+0x1c>
    13ee:	0109      	lsls	r1, r1, #4
    13f0:	011b      	lsls	r3, r3, #4
    13f2:	e7f8      	b.n	13e6 <.udivsi3_skip_div0_test+0xe>
    13f4:	00e4      	lsls	r4, r4, #3
    13f6:	42a1      	cmp	r1, r4
    13f8:	d204      	bcs.n	1404 <.udivsi3_skip_div0_test+0x2c>
    13fa:	4281      	cmp	r1, r0
    13fc:	d202      	bcs.n	1404 <.udivsi3_skip_div0_test+0x2c>
    13fe:	0049      	lsls	r1, r1, #1
    1400:	005b      	lsls	r3, r3, #1
    1402:	e7f8      	b.n	13f6 <.udivsi3_skip_div0_test+0x1e>
    1404:	4288      	cmp	r0, r1
    1406:	d301      	bcc.n	140c <.udivsi3_skip_div0_test+0x34>
    1408:	1a40      	subs	r0, r0, r1
    140a:	431a      	orrs	r2, r3
    140c:	084c      	lsrs	r4, r1, #1
    140e:	42a0      	cmp	r0, r4
    1410:	d302      	bcc.n	1418 <.udivsi3_skip_div0_test+0x40>
    1412:	1b00      	subs	r0, r0, r4
    1414:	085c      	lsrs	r4, r3, #1
    1416:	4322      	orrs	r2, r4
    1418:	088c      	lsrs	r4, r1, #2
    141a:	42a0      	cmp	r0, r4
    141c:	d302      	bcc.n	1424 <.udivsi3_skip_div0_test+0x4c>
    141e:	1b00      	subs	r0, r0, r4
    1420:	089c      	lsrs	r4, r3, #2
    1422:	4322      	orrs	r2, r4
    1424:	08cc      	lsrs	r4, r1, #3
    1426:	42a0      	cmp	r0, r4
    1428:	d302      	bcc.n	1430 <.udivsi3_skip_div0_test+0x58>
    142a:	1b00      	subs	r0, r0, r4
    142c:	08dc      	lsrs	r4, r3, #3
    142e:	4322      	orrs	r2, r4
    1430:	2800      	cmp	r0, #0
    1432:	d003      	beq.n	143c <.udivsi3_skip_div0_test+0x64>
    1434:	091b      	lsrs	r3, r3, #4
    1436:	d001      	beq.n	143c <.udivsi3_skip_div0_test+0x64>
    1438:	0909      	lsrs	r1, r1, #4
    143a:	e7e3      	b.n	1404 <.udivsi3_skip_div0_test+0x2c>
    143c:	1c10      	adds	r0, r2, #0
    143e:	bc10      	pop	{r4}
    1440:	4770      	bx	lr
    1442:	2800      	cmp	r0, #0
    1444:	d001      	beq.n	144a <.udivsi3_skip_div0_test+0x72>
    1446:	2000      	movs	r0, #0
    1448:	43c0      	mvns	r0, r0
    144a:	b407      	push	{r0, r1, r2}
    144c:	4802      	ldr	r0, [pc, #8]	; (1458 <.udivsi3_skip_div0_test+0x80>)
    144e:	a102      	add	r1, pc, #8	; (adr r1, 1458 <.udivsi3_skip_div0_test+0x80>)
    1450:	1840      	adds	r0, r0, r1
    1452:	9002      	str	r0, [sp, #8]
    1454:	bd03      	pop	{r0, r1, pc}
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	00000019 	.word	0x00000019

0000145c <__aeabi_uidivmod>:
    145c:	2900      	cmp	r1, #0
    145e:	d0f0      	beq.n	1442 <.udivsi3_skip_div0_test+0x6a>
    1460:	b503      	push	{r0, r1, lr}
    1462:	f7ff ffb9 	bl	13d8 <.udivsi3_skip_div0_test>
    1466:	bc0e      	pop	{r1, r2, r3}
    1468:	4342      	muls	r2, r0
    146a:	1a89      	subs	r1, r1, r2
    146c:	4718      	bx	r3
    146e:	46c0      	nop			; (mov r8, r8)

00001470 <__aeabi_idiv0>:
    1470:	4770      	bx	lr
    1472:	46c0      	nop			; (mov r8, r8)

00001474 <__aeabi_lmul>:
    1474:	469c      	mov	ip, r3
    1476:	0403      	lsls	r3, r0, #16
    1478:	b5f0      	push	{r4, r5, r6, r7, lr}
    147a:	0c1b      	lsrs	r3, r3, #16
    147c:	0417      	lsls	r7, r2, #16
    147e:	0c3f      	lsrs	r7, r7, #16
    1480:	0c15      	lsrs	r5, r2, #16
    1482:	1c1e      	adds	r6, r3, #0
    1484:	1c04      	adds	r4, r0, #0
    1486:	0c00      	lsrs	r0, r0, #16
    1488:	437e      	muls	r6, r7
    148a:	436b      	muls	r3, r5
    148c:	4347      	muls	r7, r0
    148e:	4345      	muls	r5, r0
    1490:	18fb      	adds	r3, r7, r3
    1492:	0c30      	lsrs	r0, r6, #16
    1494:	1818      	adds	r0, r3, r0
    1496:	4287      	cmp	r7, r0
    1498:	d902      	bls.n	14a0 <__aeabi_lmul+0x2c>
    149a:	2380      	movs	r3, #128	; 0x80
    149c:	025b      	lsls	r3, r3, #9
    149e:	18ed      	adds	r5, r5, r3
    14a0:	0c03      	lsrs	r3, r0, #16
    14a2:	18ed      	adds	r5, r5, r3
    14a4:	4663      	mov	r3, ip
    14a6:	435c      	muls	r4, r3
    14a8:	434a      	muls	r2, r1
    14aa:	0436      	lsls	r6, r6, #16
    14ac:	0c36      	lsrs	r6, r6, #16
    14ae:	18a1      	adds	r1, r4, r2
    14b0:	0400      	lsls	r0, r0, #16
    14b2:	1980      	adds	r0, r0, r6
    14b4:	1949      	adds	r1, r1, r5
    14b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000014b8 <__libc_init_array>:
    14b8:	b570      	push	{r4, r5, r6, lr}
    14ba:	4b0e      	ldr	r3, [pc, #56]	; (14f4 <__libc_init_array+0x3c>)
    14bc:	4d0e      	ldr	r5, [pc, #56]	; (14f8 <__libc_init_array+0x40>)
    14be:	2400      	movs	r4, #0
    14c0:	1aed      	subs	r5, r5, r3
    14c2:	10ad      	asrs	r5, r5, #2
    14c4:	1c1e      	adds	r6, r3, #0
    14c6:	42ac      	cmp	r4, r5
    14c8:	d004      	beq.n	14d4 <__libc_init_array+0x1c>
    14ca:	00a3      	lsls	r3, r4, #2
    14cc:	58f3      	ldr	r3, [r6, r3]
    14ce:	4798      	blx	r3
    14d0:	3401      	adds	r4, #1
    14d2:	e7f8      	b.n	14c6 <__libc_init_array+0xe>
    14d4:	f001 f82e 	bl	2534 <_init>
    14d8:	4b08      	ldr	r3, [pc, #32]	; (14fc <__libc_init_array+0x44>)
    14da:	4d09      	ldr	r5, [pc, #36]	; (1500 <__libc_init_array+0x48>)
    14dc:	2400      	movs	r4, #0
    14de:	1aed      	subs	r5, r5, r3
    14e0:	10ad      	asrs	r5, r5, #2
    14e2:	1c1e      	adds	r6, r3, #0
    14e4:	42ac      	cmp	r4, r5
    14e6:	d004      	beq.n	14f2 <__libc_init_array+0x3a>
    14e8:	00a3      	lsls	r3, r4, #2
    14ea:	58f3      	ldr	r3, [r6, r3]
    14ec:	4798      	blx	r3
    14ee:	3401      	adds	r4, #1
    14f0:	e7f8      	b.n	14e4 <__libc_init_array+0x2c>
    14f2:	bd70      	pop	{r4, r5, r6, pc}
    14f4:	00002540 	.word	0x00002540
    14f8:	00002540 	.word	0x00002540
    14fc:	00002540 	.word	0x00002540
    1500:	00002544 	.word	0x00002544

00001504 <memcpy>:
    1504:	b510      	push	{r4, lr}
    1506:	2300      	movs	r3, #0
    1508:	4293      	cmp	r3, r2
    150a:	d003      	beq.n	1514 <memcpy+0x10>
    150c:	5ccc      	ldrb	r4, [r1, r3]
    150e:	54c4      	strb	r4, [r0, r3]
    1510:	3301      	adds	r3, #1
    1512:	e7f9      	b.n	1508 <memcpy+0x4>
    1514:	bd10      	pop	{r4, pc}

00001516 <memset>:
    1516:	1c03      	adds	r3, r0, #0
    1518:	1882      	adds	r2, r0, r2
    151a:	4293      	cmp	r3, r2
    151c:	d002      	beq.n	1524 <memset+0xe>
    151e:	7019      	strb	r1, [r3, #0]
    1520:	3301      	adds	r3, #1
    1522:	e7fa      	b.n	151a <memset+0x4>
    1524:	4770      	bx	lr
	...

00001528 <iprintf>:
    1528:	b40f      	push	{r0, r1, r2, r3}
    152a:	4b0b      	ldr	r3, [pc, #44]	; (1558 <iprintf+0x30>)
    152c:	b513      	push	{r0, r1, r4, lr}
    152e:	681c      	ldr	r4, [r3, #0]
    1530:	2c00      	cmp	r4, #0
    1532:	d005      	beq.n	1540 <iprintf+0x18>
    1534:	69a3      	ldr	r3, [r4, #24]
    1536:	2b00      	cmp	r3, #0
    1538:	d102      	bne.n	1540 <iprintf+0x18>
    153a:	1c20      	adds	r0, r4, #0
    153c:	f000 fd2c 	bl	1f98 <__sinit>
    1540:	ab05      	add	r3, sp, #20
    1542:	68a1      	ldr	r1, [r4, #8]
    1544:	1c20      	adds	r0, r4, #0
    1546:	9a04      	ldr	r2, [sp, #16]
    1548:	9301      	str	r3, [sp, #4]
    154a:	f000 f8bf 	bl	16cc <_vfiprintf_r>
    154e:	bc16      	pop	{r1, r2, r4}
    1550:	bc08      	pop	{r3}
    1552:	b004      	add	sp, #16
    1554:	4718      	bx	r3
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	20000064 	.word	0x20000064

0000155c <setbuf>:
    155c:	b508      	push	{r3, lr}
    155e:	424a      	negs	r2, r1
    1560:	414a      	adcs	r2, r1
    1562:	2380      	movs	r3, #128	; 0x80
    1564:	0052      	lsls	r2, r2, #1
    1566:	00db      	lsls	r3, r3, #3
    1568:	f000 f802 	bl	1570 <setvbuf>
    156c:	bd08      	pop	{r3, pc}
	...

00001570 <setvbuf>:
    1570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1572:	1c1e      	adds	r6, r3, #0
    1574:	4b3c      	ldr	r3, [pc, #240]	; (1668 <setvbuf+0xf8>)
    1576:	1c04      	adds	r4, r0, #0
    1578:	681d      	ldr	r5, [r3, #0]
    157a:	1c0f      	adds	r7, r1, #0
    157c:	9201      	str	r2, [sp, #4]
    157e:	2d00      	cmp	r5, #0
    1580:	d005      	beq.n	158e <setvbuf+0x1e>
    1582:	69aa      	ldr	r2, [r5, #24]
    1584:	2a00      	cmp	r2, #0
    1586:	d102      	bne.n	158e <setvbuf+0x1e>
    1588:	1c28      	adds	r0, r5, #0
    158a:	f000 fd05 	bl	1f98 <__sinit>
    158e:	4b37      	ldr	r3, [pc, #220]	; (166c <setvbuf+0xfc>)
    1590:	429c      	cmp	r4, r3
    1592:	d101      	bne.n	1598 <setvbuf+0x28>
    1594:	686c      	ldr	r4, [r5, #4]
    1596:	e008      	b.n	15aa <setvbuf+0x3a>
    1598:	4b35      	ldr	r3, [pc, #212]	; (1670 <setvbuf+0x100>)
    159a:	429c      	cmp	r4, r3
    159c:	d101      	bne.n	15a2 <setvbuf+0x32>
    159e:	68ac      	ldr	r4, [r5, #8]
    15a0:	e003      	b.n	15aa <setvbuf+0x3a>
    15a2:	4b34      	ldr	r3, [pc, #208]	; (1674 <setvbuf+0x104>)
    15a4:	429c      	cmp	r4, r3
    15a6:	d100      	bne.n	15aa <setvbuf+0x3a>
    15a8:	68ec      	ldr	r4, [r5, #12]
    15aa:	9b01      	ldr	r3, [sp, #4]
    15ac:	2b02      	cmp	r3, #2
    15ae:	d857      	bhi.n	1660 <setvbuf+0xf0>
    15b0:	2e00      	cmp	r6, #0
    15b2:	db55      	blt.n	1660 <setvbuf+0xf0>
    15b4:	1c28      	adds	r0, r5, #0
    15b6:	1c21      	adds	r1, r4, #0
    15b8:	f000 fc6e 	bl	1e98 <_fflush_r>
    15bc:	2300      	movs	r3, #0
    15be:	6063      	str	r3, [r4, #4]
    15c0:	61a3      	str	r3, [r4, #24]
    15c2:	89a3      	ldrh	r3, [r4, #12]
    15c4:	061a      	lsls	r2, r3, #24
    15c6:	d503      	bpl.n	15d0 <setvbuf+0x60>
    15c8:	1c28      	adds	r0, r5, #0
    15ca:	6921      	ldr	r1, [r4, #16]
    15cc:	f000 fdba 	bl	2144 <_free_r>
    15d0:	89a3      	ldrh	r3, [r4, #12]
    15d2:	2283      	movs	r2, #131	; 0x83
    15d4:	4393      	bics	r3, r2
    15d6:	81a3      	strh	r3, [r4, #12]
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	2b02      	cmp	r3, #2
    15dc:	d013      	beq.n	1606 <setvbuf+0x96>
    15de:	2f00      	cmp	r7, #0
    15e0:	d125      	bne.n	162e <setvbuf+0xbe>
    15e2:	2e00      	cmp	r6, #0
    15e4:	d101      	bne.n	15ea <setvbuf+0x7a>
    15e6:	2680      	movs	r6, #128	; 0x80
    15e8:	00f6      	lsls	r6, r6, #3
    15ea:	1c30      	adds	r0, r6, #0
    15ec:	f000 fd94 	bl	2118 <malloc>
    15f0:	1e07      	subs	r7, r0, #0
    15f2:	d118      	bne.n	1626 <setvbuf+0xb6>
    15f4:	2080      	movs	r0, #128	; 0x80
    15f6:	00c0      	lsls	r0, r0, #3
    15f8:	f000 fd8e 	bl	2118 <malloc>
    15fc:	1e07      	subs	r7, r0, #0
    15fe:	d110      	bne.n	1622 <setvbuf+0xb2>
    1600:	2001      	movs	r0, #1
    1602:	4240      	negs	r0, r0
    1604:	e000      	b.n	1608 <setvbuf+0x98>
    1606:	2000      	movs	r0, #0
    1608:	89a3      	ldrh	r3, [r4, #12]
    160a:	2202      	movs	r2, #2
    160c:	4313      	orrs	r3, r2
    160e:	81a3      	strh	r3, [r4, #12]
    1610:	2300      	movs	r3, #0
    1612:	60a3      	str	r3, [r4, #8]
    1614:	1c23      	adds	r3, r4, #0
    1616:	3347      	adds	r3, #71	; 0x47
    1618:	6023      	str	r3, [r4, #0]
    161a:	6123      	str	r3, [r4, #16]
    161c:	2301      	movs	r3, #1
    161e:	6163      	str	r3, [r4, #20]
    1620:	e020      	b.n	1664 <setvbuf+0xf4>
    1622:	2680      	movs	r6, #128	; 0x80
    1624:	00f6      	lsls	r6, r6, #3
    1626:	89a3      	ldrh	r3, [r4, #12]
    1628:	2280      	movs	r2, #128	; 0x80
    162a:	4313      	orrs	r3, r2
    162c:	81a3      	strh	r3, [r4, #12]
    162e:	9a01      	ldr	r2, [sp, #4]
    1630:	2a01      	cmp	r2, #1
    1632:	d104      	bne.n	163e <setvbuf+0xce>
    1634:	89a3      	ldrh	r3, [r4, #12]
    1636:	4313      	orrs	r3, r2
    1638:	81a3      	strh	r3, [r4, #12]
    163a:	4273      	negs	r3, r6
    163c:	61a3      	str	r3, [r4, #24]
    163e:	4b0e      	ldr	r3, [pc, #56]	; (1678 <setvbuf+0x108>)
    1640:	2000      	movs	r0, #0
    1642:	62ab      	str	r3, [r5, #40]	; 0x28
    1644:	89a3      	ldrh	r3, [r4, #12]
    1646:	6027      	str	r7, [r4, #0]
    1648:	6127      	str	r7, [r4, #16]
    164a:	6166      	str	r6, [r4, #20]
    164c:	071a      	lsls	r2, r3, #28
    164e:	d509      	bpl.n	1664 <setvbuf+0xf4>
    1650:	2203      	movs	r2, #3
    1652:	4013      	ands	r3, r2
    1654:	425a      	negs	r2, r3
    1656:	4153      	adcs	r3, r2
    1658:	425b      	negs	r3, r3
    165a:	401e      	ands	r6, r3
    165c:	60a6      	str	r6, [r4, #8]
    165e:	e001      	b.n	1664 <setvbuf+0xf4>
    1660:	2001      	movs	r0, #1
    1662:	4240      	negs	r0, r0
    1664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	20000064 	.word	0x20000064
    166c:	000024d4 	.word	0x000024d4
    1670:	000024f4 	.word	0x000024f4
    1674:	00002514 	.word	0x00002514
    1678:	00001ef1 	.word	0x00001ef1

0000167c <__sfputc_r>:
    167c:	6893      	ldr	r3, [r2, #8]
    167e:	b510      	push	{r4, lr}
    1680:	3b01      	subs	r3, #1
    1682:	6093      	str	r3, [r2, #8]
    1684:	2b00      	cmp	r3, #0
    1686:	da05      	bge.n	1694 <__sfputc_r+0x18>
    1688:	6994      	ldr	r4, [r2, #24]
    168a:	42a3      	cmp	r3, r4
    168c:	db08      	blt.n	16a0 <__sfputc_r+0x24>
    168e:	b2cb      	uxtb	r3, r1
    1690:	2b0a      	cmp	r3, #10
    1692:	d005      	beq.n	16a0 <__sfputc_r+0x24>
    1694:	6813      	ldr	r3, [r2, #0]
    1696:	1c58      	adds	r0, r3, #1
    1698:	6010      	str	r0, [r2, #0]
    169a:	7019      	strb	r1, [r3, #0]
    169c:	b2c8      	uxtb	r0, r1
    169e:	e001      	b.n	16a4 <__sfputc_r+0x28>
    16a0:	f000 faa6 	bl	1bf0 <__swbuf_r>
    16a4:	bd10      	pop	{r4, pc}

000016a6 <__sfputs_r>:
    16a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a8:	1c06      	adds	r6, r0, #0
    16aa:	1c0f      	adds	r7, r1, #0
    16ac:	1c14      	adds	r4, r2, #0
    16ae:	18d5      	adds	r5, r2, r3
    16b0:	42ac      	cmp	r4, r5
    16b2:	d008      	beq.n	16c6 <__sfputs_r+0x20>
    16b4:	7821      	ldrb	r1, [r4, #0]
    16b6:	1c30      	adds	r0, r6, #0
    16b8:	1c3a      	adds	r2, r7, #0
    16ba:	f7ff ffdf 	bl	167c <__sfputc_r>
    16be:	3401      	adds	r4, #1
    16c0:	1c43      	adds	r3, r0, #1
    16c2:	d1f5      	bne.n	16b0 <__sfputs_r+0xa>
    16c4:	e000      	b.n	16c8 <__sfputs_r+0x22>
    16c6:	2000      	movs	r0, #0
    16c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000016cc <_vfiprintf_r>:
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	b09f      	sub	sp, #124	; 0x7c
    16d0:	1c06      	adds	r6, r0, #0
    16d2:	1c0f      	adds	r7, r1, #0
    16d4:	9203      	str	r2, [sp, #12]
    16d6:	9305      	str	r3, [sp, #20]
    16d8:	2800      	cmp	r0, #0
    16da:	d004      	beq.n	16e6 <_vfiprintf_r+0x1a>
    16dc:	6981      	ldr	r1, [r0, #24]
    16de:	2900      	cmp	r1, #0
    16e0:	d101      	bne.n	16e6 <_vfiprintf_r+0x1a>
    16e2:	f000 fc59 	bl	1f98 <__sinit>
    16e6:	4b75      	ldr	r3, [pc, #468]	; (18bc <_vfiprintf_r+0x1f0>)
    16e8:	429f      	cmp	r7, r3
    16ea:	d101      	bne.n	16f0 <_vfiprintf_r+0x24>
    16ec:	6877      	ldr	r7, [r6, #4]
    16ee:	e008      	b.n	1702 <_vfiprintf_r+0x36>
    16f0:	4b73      	ldr	r3, [pc, #460]	; (18c0 <_vfiprintf_r+0x1f4>)
    16f2:	429f      	cmp	r7, r3
    16f4:	d101      	bne.n	16fa <_vfiprintf_r+0x2e>
    16f6:	68b7      	ldr	r7, [r6, #8]
    16f8:	e003      	b.n	1702 <_vfiprintf_r+0x36>
    16fa:	4b72      	ldr	r3, [pc, #456]	; (18c4 <_vfiprintf_r+0x1f8>)
    16fc:	429f      	cmp	r7, r3
    16fe:	d100      	bne.n	1702 <_vfiprintf_r+0x36>
    1700:	68f7      	ldr	r7, [r6, #12]
    1702:	89bb      	ldrh	r3, [r7, #12]
    1704:	071a      	lsls	r2, r3, #28
    1706:	d50a      	bpl.n	171e <_vfiprintf_r+0x52>
    1708:	693b      	ldr	r3, [r7, #16]
    170a:	2b00      	cmp	r3, #0
    170c:	d007      	beq.n	171e <_vfiprintf_r+0x52>
    170e:	ad06      	add	r5, sp, #24
    1710:	2300      	movs	r3, #0
    1712:	616b      	str	r3, [r5, #20]
    1714:	2320      	movs	r3, #32
    1716:	766b      	strb	r3, [r5, #25]
    1718:	2330      	movs	r3, #48	; 0x30
    171a:	76ab      	strb	r3, [r5, #26]
    171c:	e03b      	b.n	1796 <_vfiprintf_r+0xca>
    171e:	1c30      	adds	r0, r6, #0
    1720:	1c39      	adds	r1, r7, #0
    1722:	f000 fabd 	bl	1ca0 <__swsetup_r>
    1726:	2800      	cmp	r0, #0
    1728:	d0f1      	beq.n	170e <_vfiprintf_r+0x42>
    172a:	2001      	movs	r0, #1
    172c:	4240      	negs	r0, r0
    172e:	e0c2      	b.n	18b6 <_vfiprintf_r+0x1ea>
    1730:	9a05      	ldr	r2, [sp, #20]
    1732:	1d11      	adds	r1, r2, #4
    1734:	6812      	ldr	r2, [r2, #0]
    1736:	9105      	str	r1, [sp, #20]
    1738:	2a00      	cmp	r2, #0
    173a:	db76      	blt.n	182a <_vfiprintf_r+0x15e>
    173c:	9209      	str	r2, [sp, #36]	; 0x24
    173e:	3401      	adds	r4, #1
    1740:	7823      	ldrb	r3, [r4, #0]
    1742:	2b2e      	cmp	r3, #46	; 0x2e
    1744:	d100      	bne.n	1748 <_vfiprintf_r+0x7c>
    1746:	e081      	b.n	184c <_vfiprintf_r+0x180>
    1748:	7821      	ldrb	r1, [r4, #0]
    174a:	485f      	ldr	r0, [pc, #380]	; (18c8 <_vfiprintf_r+0x1fc>)
    174c:	2203      	movs	r2, #3
    174e:	f000 fced 	bl	212c <memchr>
    1752:	2800      	cmp	r0, #0
    1754:	d007      	beq.n	1766 <_vfiprintf_r+0x9a>
    1756:	495c      	ldr	r1, [pc, #368]	; (18c8 <_vfiprintf_r+0x1fc>)
    1758:	682a      	ldr	r2, [r5, #0]
    175a:	1a43      	subs	r3, r0, r1
    175c:	2040      	movs	r0, #64	; 0x40
    175e:	4098      	lsls	r0, r3
    1760:	4310      	orrs	r0, r2
    1762:	6028      	str	r0, [r5, #0]
    1764:	3401      	adds	r4, #1
    1766:	7821      	ldrb	r1, [r4, #0]
    1768:	1c63      	adds	r3, r4, #1
    176a:	4858      	ldr	r0, [pc, #352]	; (18cc <_vfiprintf_r+0x200>)
    176c:	2206      	movs	r2, #6
    176e:	9303      	str	r3, [sp, #12]
    1770:	7629      	strb	r1, [r5, #24]
    1772:	f000 fcdb 	bl	212c <memchr>
    1776:	2800      	cmp	r0, #0
    1778:	d100      	bne.n	177c <_vfiprintf_r+0xb0>
    177a:	e08a      	b.n	1892 <_vfiprintf_r+0x1c6>
    177c:	4b54      	ldr	r3, [pc, #336]	; (18d0 <_vfiprintf_r+0x204>)
    177e:	2b00      	cmp	r3, #0
    1780:	d17e      	bne.n	1880 <_vfiprintf_r+0x1b4>
    1782:	9b05      	ldr	r3, [sp, #20]
    1784:	2207      	movs	r2, #7
    1786:	3307      	adds	r3, #7
    1788:	4393      	bics	r3, r2
    178a:	3308      	adds	r3, #8
    178c:	9305      	str	r3, [sp, #20]
    178e:	696a      	ldr	r2, [r5, #20]
    1790:	9904      	ldr	r1, [sp, #16]
    1792:	1853      	adds	r3, r2, r1
    1794:	616b      	str	r3, [r5, #20]
    1796:	9c03      	ldr	r4, [sp, #12]
    1798:	7823      	ldrb	r3, [r4, #0]
    179a:	2b00      	cmp	r3, #0
    179c:	d104      	bne.n	17a8 <_vfiprintf_r+0xdc>
    179e:	9903      	ldr	r1, [sp, #12]
    17a0:	1a61      	subs	r1, r4, r1
    17a2:	9102      	str	r1, [sp, #8]
    17a4:	d010      	beq.n	17c8 <_vfiprintf_r+0xfc>
    17a6:	e003      	b.n	17b0 <_vfiprintf_r+0xe4>
    17a8:	2b25      	cmp	r3, #37	; 0x25
    17aa:	d0f8      	beq.n	179e <_vfiprintf_r+0xd2>
    17ac:	3401      	adds	r4, #1
    17ae:	e7f3      	b.n	1798 <_vfiprintf_r+0xcc>
    17b0:	1c30      	adds	r0, r6, #0
    17b2:	1c39      	adds	r1, r7, #0
    17b4:	9a03      	ldr	r2, [sp, #12]
    17b6:	9b02      	ldr	r3, [sp, #8]
    17b8:	f7ff ff75 	bl	16a6 <__sfputs_r>
    17bc:	3001      	adds	r0, #1
    17be:	d075      	beq.n	18ac <_vfiprintf_r+0x1e0>
    17c0:	696a      	ldr	r2, [r5, #20]
    17c2:	9902      	ldr	r1, [sp, #8]
    17c4:	1853      	adds	r3, r2, r1
    17c6:	616b      	str	r3, [r5, #20]
    17c8:	7823      	ldrb	r3, [r4, #0]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d06e      	beq.n	18ac <_vfiprintf_r+0x1e0>
    17ce:	2201      	movs	r2, #1
    17d0:	4252      	negs	r2, r2
    17d2:	606a      	str	r2, [r5, #4]
    17d4:	466a      	mov	r2, sp
    17d6:	2300      	movs	r3, #0
    17d8:	325b      	adds	r2, #91	; 0x5b
    17da:	3401      	adds	r4, #1
    17dc:	602b      	str	r3, [r5, #0]
    17de:	60eb      	str	r3, [r5, #12]
    17e0:	60ab      	str	r3, [r5, #8]
    17e2:	7013      	strb	r3, [r2, #0]
    17e4:	65ab      	str	r3, [r5, #88]	; 0x58
    17e6:	7821      	ldrb	r1, [r4, #0]
    17e8:	483a      	ldr	r0, [pc, #232]	; (18d4 <_vfiprintf_r+0x208>)
    17ea:	2205      	movs	r2, #5
    17ec:	f000 fc9e 	bl	212c <memchr>
    17f0:	2800      	cmp	r0, #0
    17f2:	d008      	beq.n	1806 <_vfiprintf_r+0x13a>
    17f4:	4a37      	ldr	r2, [pc, #220]	; (18d4 <_vfiprintf_r+0x208>)
    17f6:	3401      	adds	r4, #1
    17f8:	1a83      	subs	r3, r0, r2
    17fa:	2001      	movs	r0, #1
    17fc:	4098      	lsls	r0, r3
    17fe:	682b      	ldr	r3, [r5, #0]
    1800:	4318      	orrs	r0, r3
    1802:	6028      	str	r0, [r5, #0]
    1804:	e7ef      	b.n	17e6 <_vfiprintf_r+0x11a>
    1806:	682b      	ldr	r3, [r5, #0]
    1808:	06d9      	lsls	r1, r3, #27
    180a:	d503      	bpl.n	1814 <_vfiprintf_r+0x148>
    180c:	466a      	mov	r2, sp
    180e:	2120      	movs	r1, #32
    1810:	325b      	adds	r2, #91	; 0x5b
    1812:	7011      	strb	r1, [r2, #0]
    1814:	071a      	lsls	r2, r3, #28
    1816:	d503      	bpl.n	1820 <_vfiprintf_r+0x154>
    1818:	466a      	mov	r2, sp
    181a:	212b      	movs	r1, #43	; 0x2b
    181c:	325b      	adds	r2, #91	; 0x5b
    181e:	7011      	strb	r1, [r2, #0]
    1820:	7822      	ldrb	r2, [r4, #0]
    1822:	2a2a      	cmp	r2, #42	; 0x2a
    1824:	d084      	beq.n	1730 <_vfiprintf_r+0x64>
    1826:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1828:	e005      	b.n	1836 <_vfiprintf_r+0x16a>
    182a:	4252      	negs	r2, r2
    182c:	60ea      	str	r2, [r5, #12]
    182e:	2202      	movs	r2, #2
    1830:	4313      	orrs	r3, r2
    1832:	602b      	str	r3, [r5, #0]
    1834:	e783      	b.n	173e <_vfiprintf_r+0x72>
    1836:	7822      	ldrb	r2, [r4, #0]
    1838:	3a30      	subs	r2, #48	; 0x30
    183a:	2a09      	cmp	r2, #9
    183c:	d804      	bhi.n	1848 <_vfiprintf_r+0x17c>
    183e:	210a      	movs	r1, #10
    1840:	434b      	muls	r3, r1
    1842:	3401      	adds	r4, #1
    1844:	189b      	adds	r3, r3, r2
    1846:	e7f6      	b.n	1836 <_vfiprintf_r+0x16a>
    1848:	9309      	str	r3, [sp, #36]	; 0x24
    184a:	e779      	b.n	1740 <_vfiprintf_r+0x74>
    184c:	7863      	ldrb	r3, [r4, #1]
    184e:	2b2a      	cmp	r3, #42	; 0x2a
    1850:	d109      	bne.n	1866 <_vfiprintf_r+0x19a>
    1852:	9b05      	ldr	r3, [sp, #20]
    1854:	3402      	adds	r4, #2
    1856:	1d1a      	adds	r2, r3, #4
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	9205      	str	r2, [sp, #20]
    185c:	2b00      	cmp	r3, #0
    185e:	da0d      	bge.n	187c <_vfiprintf_r+0x1b0>
    1860:	2301      	movs	r3, #1
    1862:	425b      	negs	r3, r3
    1864:	e00a      	b.n	187c <_vfiprintf_r+0x1b0>
    1866:	3401      	adds	r4, #1
    1868:	2300      	movs	r3, #0
    186a:	7822      	ldrb	r2, [r4, #0]
    186c:	3a30      	subs	r2, #48	; 0x30
    186e:	2a09      	cmp	r2, #9
    1870:	d804      	bhi.n	187c <_vfiprintf_r+0x1b0>
    1872:	210a      	movs	r1, #10
    1874:	434b      	muls	r3, r1
    1876:	3401      	adds	r4, #1
    1878:	189b      	adds	r3, r3, r2
    187a:	e7f6      	b.n	186a <_vfiprintf_r+0x19e>
    187c:	9307      	str	r3, [sp, #28]
    187e:	e763      	b.n	1748 <_vfiprintf_r+0x7c>
    1880:	ab05      	add	r3, sp, #20
    1882:	9300      	str	r3, [sp, #0]
    1884:	1c30      	adds	r0, r6, #0
    1886:	1c29      	adds	r1, r5, #0
    1888:	1c3a      	adds	r2, r7, #0
    188a:	4b13      	ldr	r3, [pc, #76]	; (18d8 <_vfiprintf_r+0x20c>)
    188c:	e000      	b.n	1890 <_vfiprintf_r+0x1c4>
    188e:	bf00      	nop
    1890:	e007      	b.n	18a2 <_vfiprintf_r+0x1d6>
    1892:	ab05      	add	r3, sp, #20
    1894:	9300      	str	r3, [sp, #0]
    1896:	1c30      	adds	r0, r6, #0
    1898:	1c29      	adds	r1, r5, #0
    189a:	1c3a      	adds	r2, r7, #0
    189c:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <_vfiprintf_r+0x20c>)
    189e:	f000 f891 	bl	19c4 <_printf_i>
    18a2:	9004      	str	r0, [sp, #16]
    18a4:	9904      	ldr	r1, [sp, #16]
    18a6:	3101      	adds	r1, #1
    18a8:	d000      	beq.n	18ac <_vfiprintf_r+0x1e0>
    18aa:	e770      	b.n	178e <_vfiprintf_r+0xc2>
    18ac:	89bb      	ldrh	r3, [r7, #12]
    18ae:	065a      	lsls	r2, r3, #25
    18b0:	d500      	bpl.n	18b4 <_vfiprintf_r+0x1e8>
    18b2:	e73a      	b.n	172a <_vfiprintf_r+0x5e>
    18b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    18b6:	b01f      	add	sp, #124	; 0x7c
    18b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	000024d4 	.word	0x000024d4
    18c0:	000024f4 	.word	0x000024f4
    18c4:	00002514 	.word	0x00002514
    18c8:	000024a6 	.word	0x000024a6
    18cc:	000024aa 	.word	0x000024aa
    18d0:	00000000 	.word	0x00000000
    18d4:	000024a0 	.word	0x000024a0
    18d8:	000016a7 	.word	0x000016a7

000018dc <_printf_common>:
    18dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18de:	1c15      	adds	r5, r2, #0
    18e0:	9301      	str	r3, [sp, #4]
    18e2:	690a      	ldr	r2, [r1, #16]
    18e4:	688b      	ldr	r3, [r1, #8]
    18e6:	1c06      	adds	r6, r0, #0
    18e8:	1c0c      	adds	r4, r1, #0
    18ea:	4293      	cmp	r3, r2
    18ec:	da00      	bge.n	18f0 <_printf_common+0x14>
    18ee:	1c13      	adds	r3, r2, #0
    18f0:	1c22      	adds	r2, r4, #0
    18f2:	602b      	str	r3, [r5, #0]
    18f4:	3243      	adds	r2, #67	; 0x43
    18f6:	7812      	ldrb	r2, [r2, #0]
    18f8:	2a00      	cmp	r2, #0
    18fa:	d001      	beq.n	1900 <_printf_common+0x24>
    18fc:	3301      	adds	r3, #1
    18fe:	602b      	str	r3, [r5, #0]
    1900:	6820      	ldr	r0, [r4, #0]
    1902:	0680      	lsls	r0, r0, #26
    1904:	d502      	bpl.n	190c <_printf_common+0x30>
    1906:	682b      	ldr	r3, [r5, #0]
    1908:	3302      	adds	r3, #2
    190a:	602b      	str	r3, [r5, #0]
    190c:	6821      	ldr	r1, [r4, #0]
    190e:	2706      	movs	r7, #6
    1910:	400f      	ands	r7, r1
    1912:	d01f      	beq.n	1954 <_printf_common+0x78>
    1914:	1c23      	adds	r3, r4, #0
    1916:	3343      	adds	r3, #67	; 0x43
    1918:	781b      	ldrb	r3, [r3, #0]
    191a:	1e5a      	subs	r2, r3, #1
    191c:	4193      	sbcs	r3, r2
    191e:	6822      	ldr	r2, [r4, #0]
    1920:	0692      	lsls	r2, r2, #26
    1922:	d51f      	bpl.n	1964 <_printf_common+0x88>
    1924:	18e1      	adds	r1, r4, r3
    1926:	3140      	adds	r1, #64	; 0x40
    1928:	2030      	movs	r0, #48	; 0x30
    192a:	70c8      	strb	r0, [r1, #3]
    192c:	1c21      	adds	r1, r4, #0
    192e:	1c5a      	adds	r2, r3, #1
    1930:	3145      	adds	r1, #69	; 0x45
    1932:	7809      	ldrb	r1, [r1, #0]
    1934:	18a2      	adds	r2, r4, r2
    1936:	3240      	adds	r2, #64	; 0x40
    1938:	3302      	adds	r3, #2
    193a:	70d1      	strb	r1, [r2, #3]
    193c:	e012      	b.n	1964 <_printf_common+0x88>
    193e:	1c22      	adds	r2, r4, #0
    1940:	1c30      	adds	r0, r6, #0
    1942:	9901      	ldr	r1, [sp, #4]
    1944:	3219      	adds	r2, #25
    1946:	2301      	movs	r3, #1
    1948:	9f08      	ldr	r7, [sp, #32]
    194a:	47b8      	blx	r7
    194c:	3001      	adds	r0, #1
    194e:	d011      	beq.n	1974 <_printf_common+0x98>
    1950:	9f00      	ldr	r7, [sp, #0]
    1952:	3701      	adds	r7, #1
    1954:	9700      	str	r7, [sp, #0]
    1956:	68e0      	ldr	r0, [r4, #12]
    1958:	6829      	ldr	r1, [r5, #0]
    195a:	9f00      	ldr	r7, [sp, #0]
    195c:	1a43      	subs	r3, r0, r1
    195e:	429f      	cmp	r7, r3
    1960:	dbed      	blt.n	193e <_printf_common+0x62>
    1962:	e7d7      	b.n	1914 <_printf_common+0x38>
    1964:	1c22      	adds	r2, r4, #0
    1966:	1c30      	adds	r0, r6, #0
    1968:	9901      	ldr	r1, [sp, #4]
    196a:	3243      	adds	r2, #67	; 0x43
    196c:	9f08      	ldr	r7, [sp, #32]
    196e:	47b8      	blx	r7
    1970:	3001      	adds	r0, #1
    1972:	d102      	bne.n	197a <_printf_common+0x9e>
    1974:	2001      	movs	r0, #1
    1976:	4240      	negs	r0, r0
    1978:	e023      	b.n	19c2 <_printf_common+0xe6>
    197a:	6820      	ldr	r0, [r4, #0]
    197c:	2106      	movs	r1, #6
    197e:	682b      	ldr	r3, [r5, #0]
    1980:	68e2      	ldr	r2, [r4, #12]
    1982:	4001      	ands	r1, r0
    1984:	2500      	movs	r5, #0
    1986:	2904      	cmp	r1, #4
    1988:	d103      	bne.n	1992 <_printf_common+0xb6>
    198a:	1ad5      	subs	r5, r2, r3
    198c:	43eb      	mvns	r3, r5
    198e:	17db      	asrs	r3, r3, #31
    1990:	401d      	ands	r5, r3
    1992:	68a2      	ldr	r2, [r4, #8]
    1994:	6923      	ldr	r3, [r4, #16]
    1996:	429a      	cmp	r2, r3
    1998:	dd01      	ble.n	199e <_printf_common+0xc2>
    199a:	1ad3      	subs	r3, r2, r3
    199c:	18ed      	adds	r5, r5, r3
    199e:	2700      	movs	r7, #0
    19a0:	9700      	str	r7, [sp, #0]
    19a2:	9f00      	ldr	r7, [sp, #0]
    19a4:	42af      	cmp	r7, r5
    19a6:	da0b      	bge.n	19c0 <_printf_common+0xe4>
    19a8:	1c22      	adds	r2, r4, #0
    19aa:	1c30      	adds	r0, r6, #0
    19ac:	9901      	ldr	r1, [sp, #4]
    19ae:	321a      	adds	r2, #26
    19b0:	2301      	movs	r3, #1
    19b2:	9f08      	ldr	r7, [sp, #32]
    19b4:	47b8      	blx	r7
    19b6:	3001      	adds	r0, #1
    19b8:	d0dc      	beq.n	1974 <_printf_common+0x98>
    19ba:	9f00      	ldr	r7, [sp, #0]
    19bc:	3701      	adds	r7, #1
    19be:	e7ef      	b.n	19a0 <_printf_common+0xc4>
    19c0:	2000      	movs	r0, #0
    19c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000019c4 <_printf_i>:
    19c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c6:	1c0d      	adds	r5, r1, #0
    19c8:	b08b      	sub	sp, #44	; 0x2c
    19ca:	3543      	adds	r5, #67	; 0x43
    19cc:	9206      	str	r2, [sp, #24]
    19ce:	9005      	str	r0, [sp, #20]
    19d0:	9307      	str	r3, [sp, #28]
    19d2:	9504      	str	r5, [sp, #16]
    19d4:	7e0b      	ldrb	r3, [r1, #24]
    19d6:	1c0c      	adds	r4, r1, #0
    19d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19da:	2b6e      	cmp	r3, #110	; 0x6e
    19dc:	d100      	bne.n	19e0 <_printf_i+0x1c>
    19de:	e0a7      	b.n	1b30 <_printf_i+0x16c>
    19e0:	d811      	bhi.n	1a06 <_printf_i+0x42>
    19e2:	2b63      	cmp	r3, #99	; 0x63
    19e4:	d022      	beq.n	1a2c <_printf_i+0x68>
    19e6:	d809      	bhi.n	19fc <_printf_i+0x38>
    19e8:	2b00      	cmp	r3, #0
    19ea:	d100      	bne.n	19ee <_printf_i+0x2a>
    19ec:	e0b0      	b.n	1b50 <_printf_i+0x18c>
    19ee:	2b58      	cmp	r3, #88	; 0x58
    19f0:	d000      	beq.n	19f4 <_printf_i+0x30>
    19f2:	e0c0      	b.n	1b76 <_printf_i+0x1b2>
    19f4:	3145      	adds	r1, #69	; 0x45
    19f6:	700b      	strb	r3, [r1, #0]
    19f8:	4d7b      	ldr	r5, [pc, #492]	; (1be8 <_printf_i+0x224>)
    19fa:	e04e      	b.n	1a9a <_printf_i+0xd6>
    19fc:	2b64      	cmp	r3, #100	; 0x64
    19fe:	d01c      	beq.n	1a3a <_printf_i+0x76>
    1a00:	2b69      	cmp	r3, #105	; 0x69
    1a02:	d01a      	beq.n	1a3a <_printf_i+0x76>
    1a04:	e0b7      	b.n	1b76 <_printf_i+0x1b2>
    1a06:	2b73      	cmp	r3, #115	; 0x73
    1a08:	d100      	bne.n	1a0c <_printf_i+0x48>
    1a0a:	e0a5      	b.n	1b58 <_printf_i+0x194>
    1a0c:	d809      	bhi.n	1a22 <_printf_i+0x5e>
    1a0e:	2b6f      	cmp	r3, #111	; 0x6f
    1a10:	d029      	beq.n	1a66 <_printf_i+0xa2>
    1a12:	2b70      	cmp	r3, #112	; 0x70
    1a14:	d000      	beq.n	1a18 <_printf_i+0x54>
    1a16:	e0ae      	b.n	1b76 <_printf_i+0x1b2>
    1a18:	680e      	ldr	r6, [r1, #0]
    1a1a:	2320      	movs	r3, #32
    1a1c:	4333      	orrs	r3, r6
    1a1e:	600b      	str	r3, [r1, #0]
    1a20:	e036      	b.n	1a90 <_printf_i+0xcc>
    1a22:	2b75      	cmp	r3, #117	; 0x75
    1a24:	d01f      	beq.n	1a66 <_printf_i+0xa2>
    1a26:	2b78      	cmp	r3, #120	; 0x78
    1a28:	d032      	beq.n	1a90 <_printf_i+0xcc>
    1a2a:	e0a4      	b.n	1b76 <_printf_i+0x1b2>
    1a2c:	6813      	ldr	r3, [r2, #0]
    1a2e:	1c0d      	adds	r5, r1, #0
    1a30:	1d19      	adds	r1, r3, #4
    1a32:	3542      	adds	r5, #66	; 0x42
    1a34:	6011      	str	r1, [r2, #0]
    1a36:	681b      	ldr	r3, [r3, #0]
    1a38:	e09f      	b.n	1b7a <_printf_i+0x1b6>
    1a3a:	6821      	ldr	r1, [r4, #0]
    1a3c:	6813      	ldr	r3, [r2, #0]
    1a3e:	060e      	lsls	r6, r1, #24
    1a40:	d503      	bpl.n	1a4a <_printf_i+0x86>
    1a42:	1d19      	adds	r1, r3, #4
    1a44:	6011      	str	r1, [r2, #0]
    1a46:	681e      	ldr	r6, [r3, #0]
    1a48:	e005      	b.n	1a56 <_printf_i+0x92>
    1a4a:	0648      	lsls	r0, r1, #25
    1a4c:	d5f9      	bpl.n	1a42 <_printf_i+0x7e>
    1a4e:	1d19      	adds	r1, r3, #4
    1a50:	6011      	str	r1, [r2, #0]
    1a52:	2100      	movs	r1, #0
    1a54:	5e5e      	ldrsh	r6, [r3, r1]
    1a56:	4b64      	ldr	r3, [pc, #400]	; (1be8 <_printf_i+0x224>)
    1a58:	2e00      	cmp	r6, #0
    1a5a:	da3b      	bge.n	1ad4 <_printf_i+0x110>
    1a5c:	9d04      	ldr	r5, [sp, #16]
    1a5e:	222d      	movs	r2, #45	; 0x2d
    1a60:	4276      	negs	r6, r6
    1a62:	702a      	strb	r2, [r5, #0]
    1a64:	e036      	b.n	1ad4 <_printf_i+0x110>
    1a66:	6821      	ldr	r1, [r4, #0]
    1a68:	6813      	ldr	r3, [r2, #0]
    1a6a:	060e      	lsls	r6, r1, #24
    1a6c:	d503      	bpl.n	1a76 <_printf_i+0xb2>
    1a6e:	1d19      	adds	r1, r3, #4
    1a70:	6011      	str	r1, [r2, #0]
    1a72:	681e      	ldr	r6, [r3, #0]
    1a74:	e004      	b.n	1a80 <_printf_i+0xbc>
    1a76:	0648      	lsls	r0, r1, #25
    1a78:	d5f9      	bpl.n	1a6e <_printf_i+0xaa>
    1a7a:	1d19      	adds	r1, r3, #4
    1a7c:	881e      	ldrh	r6, [r3, #0]
    1a7e:	6011      	str	r1, [r2, #0]
    1a80:	4b59      	ldr	r3, [pc, #356]	; (1be8 <_printf_i+0x224>)
    1a82:	7e22      	ldrb	r2, [r4, #24]
    1a84:	9303      	str	r3, [sp, #12]
    1a86:	2708      	movs	r7, #8
    1a88:	2a6f      	cmp	r2, #111	; 0x6f
    1a8a:	d01e      	beq.n	1aca <_printf_i+0x106>
    1a8c:	270a      	movs	r7, #10
    1a8e:	e01c      	b.n	1aca <_printf_i+0x106>
    1a90:	1c23      	adds	r3, r4, #0
    1a92:	2178      	movs	r1, #120	; 0x78
    1a94:	3345      	adds	r3, #69	; 0x45
    1a96:	4d55      	ldr	r5, [pc, #340]	; (1bec <_printf_i+0x228>)
    1a98:	7019      	strb	r1, [r3, #0]
    1a9a:	6811      	ldr	r1, [r2, #0]
    1a9c:	6823      	ldr	r3, [r4, #0]
    1a9e:	1d08      	adds	r0, r1, #4
    1aa0:	9503      	str	r5, [sp, #12]
    1aa2:	6010      	str	r0, [r2, #0]
    1aa4:	061e      	lsls	r6, r3, #24
    1aa6:	d501      	bpl.n	1aac <_printf_i+0xe8>
    1aa8:	680e      	ldr	r6, [r1, #0]
    1aaa:	e002      	b.n	1ab2 <_printf_i+0xee>
    1aac:	0658      	lsls	r0, r3, #25
    1aae:	d5fb      	bpl.n	1aa8 <_printf_i+0xe4>
    1ab0:	880e      	ldrh	r6, [r1, #0]
    1ab2:	07d9      	lsls	r1, r3, #31
    1ab4:	d502      	bpl.n	1abc <_printf_i+0xf8>
    1ab6:	2220      	movs	r2, #32
    1ab8:	4313      	orrs	r3, r2
    1aba:	6023      	str	r3, [r4, #0]
    1abc:	2710      	movs	r7, #16
    1abe:	2e00      	cmp	r6, #0
    1ac0:	d103      	bne.n	1aca <_printf_i+0x106>
    1ac2:	6822      	ldr	r2, [r4, #0]
    1ac4:	2320      	movs	r3, #32
    1ac6:	439a      	bics	r2, r3
    1ac8:	6022      	str	r2, [r4, #0]
    1aca:	1c23      	adds	r3, r4, #0
    1acc:	2200      	movs	r2, #0
    1ace:	3343      	adds	r3, #67	; 0x43
    1ad0:	701a      	strb	r2, [r3, #0]
    1ad2:	e001      	b.n	1ad8 <_printf_i+0x114>
    1ad4:	9303      	str	r3, [sp, #12]
    1ad6:	270a      	movs	r7, #10
    1ad8:	6863      	ldr	r3, [r4, #4]
    1ada:	60a3      	str	r3, [r4, #8]
    1adc:	2b00      	cmp	r3, #0
    1ade:	db03      	blt.n	1ae8 <_printf_i+0x124>
    1ae0:	6825      	ldr	r5, [r4, #0]
    1ae2:	2204      	movs	r2, #4
    1ae4:	4395      	bics	r5, r2
    1ae6:	6025      	str	r5, [r4, #0]
    1ae8:	2e00      	cmp	r6, #0
    1aea:	d102      	bne.n	1af2 <_printf_i+0x12e>
    1aec:	9d04      	ldr	r5, [sp, #16]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d00e      	beq.n	1b10 <_printf_i+0x14c>
    1af2:	9d04      	ldr	r5, [sp, #16]
    1af4:	1c30      	adds	r0, r6, #0
    1af6:	1c39      	adds	r1, r7, #0
    1af8:	f7ff fcb0 	bl	145c <__aeabi_uidivmod>
    1afc:	9803      	ldr	r0, [sp, #12]
    1afe:	3d01      	subs	r5, #1
    1b00:	5c43      	ldrb	r3, [r0, r1]
    1b02:	1c30      	adds	r0, r6, #0
    1b04:	702b      	strb	r3, [r5, #0]
    1b06:	1c39      	adds	r1, r7, #0
    1b08:	f7ff fc64 	bl	13d4 <__aeabi_uidiv>
    1b0c:	1e06      	subs	r6, r0, #0
    1b0e:	d1f1      	bne.n	1af4 <_printf_i+0x130>
    1b10:	2f08      	cmp	r7, #8
    1b12:	d109      	bne.n	1b28 <_printf_i+0x164>
    1b14:	6821      	ldr	r1, [r4, #0]
    1b16:	07c9      	lsls	r1, r1, #31
    1b18:	d506      	bpl.n	1b28 <_printf_i+0x164>
    1b1a:	6862      	ldr	r2, [r4, #4]
    1b1c:	6923      	ldr	r3, [r4, #16]
    1b1e:	429a      	cmp	r2, r3
    1b20:	dc02      	bgt.n	1b28 <_printf_i+0x164>
    1b22:	3d01      	subs	r5, #1
    1b24:	2330      	movs	r3, #48	; 0x30
    1b26:	702b      	strb	r3, [r5, #0]
    1b28:	9e04      	ldr	r6, [sp, #16]
    1b2a:	1b73      	subs	r3, r6, r5
    1b2c:	6123      	str	r3, [r4, #16]
    1b2e:	e02a      	b.n	1b86 <_printf_i+0x1c2>
    1b30:	6808      	ldr	r0, [r1, #0]
    1b32:	6813      	ldr	r3, [r2, #0]
    1b34:	6949      	ldr	r1, [r1, #20]
    1b36:	0605      	lsls	r5, r0, #24
    1b38:	d504      	bpl.n	1b44 <_printf_i+0x180>
    1b3a:	1d18      	adds	r0, r3, #4
    1b3c:	6010      	str	r0, [r2, #0]
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	6019      	str	r1, [r3, #0]
    1b42:	e005      	b.n	1b50 <_printf_i+0x18c>
    1b44:	0646      	lsls	r6, r0, #25
    1b46:	d5f8      	bpl.n	1b3a <_printf_i+0x176>
    1b48:	1d18      	adds	r0, r3, #4
    1b4a:	6010      	str	r0, [r2, #0]
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	8019      	strh	r1, [r3, #0]
    1b50:	2300      	movs	r3, #0
    1b52:	6123      	str	r3, [r4, #16]
    1b54:	9d04      	ldr	r5, [sp, #16]
    1b56:	e016      	b.n	1b86 <_printf_i+0x1c2>
    1b58:	6813      	ldr	r3, [r2, #0]
    1b5a:	1d19      	adds	r1, r3, #4
    1b5c:	6011      	str	r1, [r2, #0]
    1b5e:	681d      	ldr	r5, [r3, #0]
    1b60:	1c28      	adds	r0, r5, #0
    1b62:	f000 fbe9 	bl	2338 <strlen>
    1b66:	6863      	ldr	r3, [r4, #4]
    1b68:	6120      	str	r0, [r4, #16]
    1b6a:	4298      	cmp	r0, r3
    1b6c:	d900      	bls.n	1b70 <_printf_i+0x1ac>
    1b6e:	6123      	str	r3, [r4, #16]
    1b70:	6920      	ldr	r0, [r4, #16]
    1b72:	6060      	str	r0, [r4, #4]
    1b74:	e004      	b.n	1b80 <_printf_i+0x1bc>
    1b76:	1c25      	adds	r5, r4, #0
    1b78:	3542      	adds	r5, #66	; 0x42
    1b7a:	702b      	strb	r3, [r5, #0]
    1b7c:	2301      	movs	r3, #1
    1b7e:	6123      	str	r3, [r4, #16]
    1b80:	9e04      	ldr	r6, [sp, #16]
    1b82:	2300      	movs	r3, #0
    1b84:	7033      	strb	r3, [r6, #0]
    1b86:	9e07      	ldr	r6, [sp, #28]
    1b88:	9805      	ldr	r0, [sp, #20]
    1b8a:	9600      	str	r6, [sp, #0]
    1b8c:	1c21      	adds	r1, r4, #0
    1b8e:	aa09      	add	r2, sp, #36	; 0x24
    1b90:	9b06      	ldr	r3, [sp, #24]
    1b92:	f7ff fea3 	bl	18dc <_printf_common>
    1b96:	3001      	adds	r0, #1
    1b98:	d102      	bne.n	1ba0 <_printf_i+0x1dc>
    1b9a:	2001      	movs	r0, #1
    1b9c:	4240      	negs	r0, r0
    1b9e:	e021      	b.n	1be4 <_printf_i+0x220>
    1ba0:	1c2a      	adds	r2, r5, #0
    1ba2:	9805      	ldr	r0, [sp, #20]
    1ba4:	9906      	ldr	r1, [sp, #24]
    1ba6:	6923      	ldr	r3, [r4, #16]
    1ba8:	9d07      	ldr	r5, [sp, #28]
    1baa:	47a8      	blx	r5
    1bac:	3001      	adds	r0, #1
    1bae:	d0f4      	beq.n	1b9a <_printf_i+0x1d6>
    1bb0:	6826      	ldr	r6, [r4, #0]
    1bb2:	07b6      	lsls	r6, r6, #30
    1bb4:	d405      	bmi.n	1bc2 <_printf_i+0x1fe>
    1bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bb8:	68e0      	ldr	r0, [r4, #12]
    1bba:	4298      	cmp	r0, r3
    1bbc:	da12      	bge.n	1be4 <_printf_i+0x220>
    1bbe:	1c18      	adds	r0, r3, #0
    1bc0:	e010      	b.n	1be4 <_printf_i+0x220>
    1bc2:	2500      	movs	r5, #0
    1bc4:	68e0      	ldr	r0, [r4, #12]
    1bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bc8:	1a43      	subs	r3, r0, r1
    1bca:	429d      	cmp	r5, r3
    1bcc:	daf3      	bge.n	1bb6 <_printf_i+0x1f2>
    1bce:	1c22      	adds	r2, r4, #0
    1bd0:	9805      	ldr	r0, [sp, #20]
    1bd2:	9906      	ldr	r1, [sp, #24]
    1bd4:	3219      	adds	r2, #25
    1bd6:	2301      	movs	r3, #1
    1bd8:	9e07      	ldr	r6, [sp, #28]
    1bda:	47b0      	blx	r6
    1bdc:	3001      	adds	r0, #1
    1bde:	d0dc      	beq.n	1b9a <_printf_i+0x1d6>
    1be0:	3501      	adds	r5, #1
    1be2:	e7ef      	b.n	1bc4 <_printf_i+0x200>
    1be4:	b00b      	add	sp, #44	; 0x2c
    1be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be8:	000024b1 	.word	0x000024b1
    1bec:	000024c2 	.word	0x000024c2

00001bf0 <__swbuf_r>:
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	1c05      	adds	r5, r0, #0
    1bf4:	1c0e      	adds	r6, r1, #0
    1bf6:	1c14      	adds	r4, r2, #0
    1bf8:	2800      	cmp	r0, #0
    1bfa:	d004      	beq.n	1c06 <__swbuf_r+0x16>
    1bfc:	6982      	ldr	r2, [r0, #24]
    1bfe:	2a00      	cmp	r2, #0
    1c00:	d101      	bne.n	1c06 <__swbuf_r+0x16>
    1c02:	f000 f9c9 	bl	1f98 <__sinit>
    1c06:	4b23      	ldr	r3, [pc, #140]	; (1c94 <__swbuf_r+0xa4>)
    1c08:	429c      	cmp	r4, r3
    1c0a:	d101      	bne.n	1c10 <__swbuf_r+0x20>
    1c0c:	686c      	ldr	r4, [r5, #4]
    1c0e:	e008      	b.n	1c22 <__swbuf_r+0x32>
    1c10:	4b21      	ldr	r3, [pc, #132]	; (1c98 <__swbuf_r+0xa8>)
    1c12:	429c      	cmp	r4, r3
    1c14:	d101      	bne.n	1c1a <__swbuf_r+0x2a>
    1c16:	68ac      	ldr	r4, [r5, #8]
    1c18:	e003      	b.n	1c22 <__swbuf_r+0x32>
    1c1a:	4b20      	ldr	r3, [pc, #128]	; (1c9c <__swbuf_r+0xac>)
    1c1c:	429c      	cmp	r4, r3
    1c1e:	d100      	bne.n	1c22 <__swbuf_r+0x32>
    1c20:	68ec      	ldr	r4, [r5, #12]
    1c22:	69a3      	ldr	r3, [r4, #24]
    1c24:	60a3      	str	r3, [r4, #8]
    1c26:	89a3      	ldrh	r3, [r4, #12]
    1c28:	071a      	lsls	r2, r3, #28
    1c2a:	d50a      	bpl.n	1c42 <__swbuf_r+0x52>
    1c2c:	6923      	ldr	r3, [r4, #16]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d007      	beq.n	1c42 <__swbuf_r+0x52>
    1c32:	6822      	ldr	r2, [r4, #0]
    1c34:	6923      	ldr	r3, [r4, #16]
    1c36:	b2f6      	uxtb	r6, r6
    1c38:	1ad0      	subs	r0, r2, r3
    1c3a:	6962      	ldr	r2, [r4, #20]
    1c3c:	4290      	cmp	r0, r2
    1c3e:	db0f      	blt.n	1c60 <__swbuf_r+0x70>
    1c40:	e008      	b.n	1c54 <__swbuf_r+0x64>
    1c42:	1c28      	adds	r0, r5, #0
    1c44:	1c21      	adds	r1, r4, #0
    1c46:	f000 f82b 	bl	1ca0 <__swsetup_r>
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d0f1      	beq.n	1c32 <__swbuf_r+0x42>
    1c4e:	2001      	movs	r0, #1
    1c50:	4240      	negs	r0, r0
    1c52:	e01d      	b.n	1c90 <__swbuf_r+0xa0>
    1c54:	1c28      	adds	r0, r5, #0
    1c56:	1c21      	adds	r1, r4, #0
    1c58:	f000 f91e 	bl	1e98 <_fflush_r>
    1c5c:	2800      	cmp	r0, #0
    1c5e:	d1f6      	bne.n	1c4e <__swbuf_r+0x5e>
    1c60:	68a3      	ldr	r3, [r4, #8]
    1c62:	3001      	adds	r0, #1
    1c64:	3b01      	subs	r3, #1
    1c66:	60a3      	str	r3, [r4, #8]
    1c68:	6823      	ldr	r3, [r4, #0]
    1c6a:	1c5a      	adds	r2, r3, #1
    1c6c:	6022      	str	r2, [r4, #0]
    1c6e:	701e      	strb	r6, [r3, #0]
    1c70:	6963      	ldr	r3, [r4, #20]
    1c72:	4298      	cmp	r0, r3
    1c74:	d005      	beq.n	1c82 <__swbuf_r+0x92>
    1c76:	89a3      	ldrh	r3, [r4, #12]
    1c78:	1c30      	adds	r0, r6, #0
    1c7a:	07da      	lsls	r2, r3, #31
    1c7c:	d508      	bpl.n	1c90 <__swbuf_r+0xa0>
    1c7e:	2e0a      	cmp	r6, #10
    1c80:	d106      	bne.n	1c90 <__swbuf_r+0xa0>
    1c82:	1c28      	adds	r0, r5, #0
    1c84:	1c21      	adds	r1, r4, #0
    1c86:	f000 f907 	bl	1e98 <_fflush_r>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	d1df      	bne.n	1c4e <__swbuf_r+0x5e>
    1c8e:	1c30      	adds	r0, r6, #0
    1c90:	bd70      	pop	{r4, r5, r6, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	000024d4 	.word	0x000024d4
    1c98:	000024f4 	.word	0x000024f4
    1c9c:	00002514 	.word	0x00002514

00001ca0 <__swsetup_r>:
    1ca0:	4b34      	ldr	r3, [pc, #208]	; (1d74 <__swsetup_r+0xd4>)
    1ca2:	b570      	push	{r4, r5, r6, lr}
    1ca4:	681d      	ldr	r5, [r3, #0]
    1ca6:	1c06      	adds	r6, r0, #0
    1ca8:	1c0c      	adds	r4, r1, #0
    1caa:	2d00      	cmp	r5, #0
    1cac:	d005      	beq.n	1cba <__swsetup_r+0x1a>
    1cae:	69a9      	ldr	r1, [r5, #24]
    1cb0:	2900      	cmp	r1, #0
    1cb2:	d102      	bne.n	1cba <__swsetup_r+0x1a>
    1cb4:	1c28      	adds	r0, r5, #0
    1cb6:	f000 f96f 	bl	1f98 <__sinit>
    1cba:	4b2f      	ldr	r3, [pc, #188]	; (1d78 <__swsetup_r+0xd8>)
    1cbc:	429c      	cmp	r4, r3
    1cbe:	d101      	bne.n	1cc4 <__swsetup_r+0x24>
    1cc0:	686c      	ldr	r4, [r5, #4]
    1cc2:	e008      	b.n	1cd6 <__swsetup_r+0x36>
    1cc4:	4b2d      	ldr	r3, [pc, #180]	; (1d7c <__swsetup_r+0xdc>)
    1cc6:	429c      	cmp	r4, r3
    1cc8:	d101      	bne.n	1cce <__swsetup_r+0x2e>
    1cca:	68ac      	ldr	r4, [r5, #8]
    1ccc:	e003      	b.n	1cd6 <__swsetup_r+0x36>
    1cce:	4b2c      	ldr	r3, [pc, #176]	; (1d80 <__swsetup_r+0xe0>)
    1cd0:	429c      	cmp	r4, r3
    1cd2:	d100      	bne.n	1cd6 <__swsetup_r+0x36>
    1cd4:	68ec      	ldr	r4, [r5, #12]
    1cd6:	89a2      	ldrh	r2, [r4, #12]
    1cd8:	b293      	uxth	r3, r2
    1cda:	0719      	lsls	r1, r3, #28
    1cdc:	d421      	bmi.n	1d22 <__swsetup_r+0x82>
    1cde:	06d9      	lsls	r1, r3, #27
    1ce0:	d405      	bmi.n	1cee <__swsetup_r+0x4e>
    1ce2:	2309      	movs	r3, #9
    1ce4:	6033      	str	r3, [r6, #0]
    1ce6:	2340      	movs	r3, #64	; 0x40
    1ce8:	431a      	orrs	r2, r3
    1cea:	81a2      	strh	r2, [r4, #12]
    1cec:	e03f      	b.n	1d6e <__swsetup_r+0xce>
    1cee:	075a      	lsls	r2, r3, #29
    1cf0:	d513      	bpl.n	1d1a <__swsetup_r+0x7a>
    1cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cf4:	2900      	cmp	r1, #0
    1cf6:	d008      	beq.n	1d0a <__swsetup_r+0x6a>
    1cf8:	1c23      	adds	r3, r4, #0
    1cfa:	3344      	adds	r3, #68	; 0x44
    1cfc:	4299      	cmp	r1, r3
    1cfe:	d002      	beq.n	1d06 <__swsetup_r+0x66>
    1d00:	1c30      	adds	r0, r6, #0
    1d02:	f000 fa1f 	bl	2144 <_free_r>
    1d06:	2300      	movs	r3, #0
    1d08:	6363      	str	r3, [r4, #52]	; 0x34
    1d0a:	89a3      	ldrh	r3, [r4, #12]
    1d0c:	2224      	movs	r2, #36	; 0x24
    1d0e:	4393      	bics	r3, r2
    1d10:	81a3      	strh	r3, [r4, #12]
    1d12:	2300      	movs	r3, #0
    1d14:	6063      	str	r3, [r4, #4]
    1d16:	6923      	ldr	r3, [r4, #16]
    1d18:	6023      	str	r3, [r4, #0]
    1d1a:	89a3      	ldrh	r3, [r4, #12]
    1d1c:	2208      	movs	r2, #8
    1d1e:	4313      	orrs	r3, r2
    1d20:	81a3      	strh	r3, [r4, #12]
    1d22:	6921      	ldr	r1, [r4, #16]
    1d24:	2900      	cmp	r1, #0
    1d26:	d10b      	bne.n	1d40 <__swsetup_r+0xa0>
    1d28:	89a3      	ldrh	r3, [r4, #12]
    1d2a:	22a0      	movs	r2, #160	; 0xa0
    1d2c:	0092      	lsls	r2, r2, #2
    1d2e:	401a      	ands	r2, r3
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	009b      	lsls	r3, r3, #2
    1d34:	429a      	cmp	r2, r3
    1d36:	d003      	beq.n	1d40 <__swsetup_r+0xa0>
    1d38:	1c30      	adds	r0, r6, #0
    1d3a:	1c21      	adds	r1, r4, #0
    1d3c:	f000 f99c 	bl	2078 <__smakebuf_r>
    1d40:	89a3      	ldrh	r3, [r4, #12]
    1d42:	2201      	movs	r2, #1
    1d44:	401a      	ands	r2, r3
    1d46:	d005      	beq.n	1d54 <__swsetup_r+0xb4>
    1d48:	6961      	ldr	r1, [r4, #20]
    1d4a:	2200      	movs	r2, #0
    1d4c:	60a2      	str	r2, [r4, #8]
    1d4e:	424a      	negs	r2, r1
    1d50:	61a2      	str	r2, [r4, #24]
    1d52:	e003      	b.n	1d5c <__swsetup_r+0xbc>
    1d54:	0799      	lsls	r1, r3, #30
    1d56:	d400      	bmi.n	1d5a <__swsetup_r+0xba>
    1d58:	6962      	ldr	r2, [r4, #20]
    1d5a:	60a2      	str	r2, [r4, #8]
    1d5c:	6922      	ldr	r2, [r4, #16]
    1d5e:	2000      	movs	r0, #0
    1d60:	4282      	cmp	r2, r0
    1d62:	d106      	bne.n	1d72 <__swsetup_r+0xd2>
    1d64:	0619      	lsls	r1, r3, #24
    1d66:	d504      	bpl.n	1d72 <__swsetup_r+0xd2>
    1d68:	2240      	movs	r2, #64	; 0x40
    1d6a:	4313      	orrs	r3, r2
    1d6c:	81a3      	strh	r3, [r4, #12]
    1d6e:	2001      	movs	r0, #1
    1d70:	4240      	negs	r0, r0
    1d72:	bd70      	pop	{r4, r5, r6, pc}
    1d74:	20000064 	.word	0x20000064
    1d78:	000024d4 	.word	0x000024d4
    1d7c:	000024f4 	.word	0x000024f4
    1d80:	00002514 	.word	0x00002514

00001d84 <__sflush_r>:
    1d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d86:	898b      	ldrh	r3, [r1, #12]
    1d88:	1c05      	adds	r5, r0, #0
    1d8a:	1c0c      	adds	r4, r1, #0
    1d8c:	0719      	lsls	r1, r3, #28
    1d8e:	d45e      	bmi.n	1e4e <__sflush_r+0xca>
    1d90:	6862      	ldr	r2, [r4, #4]
    1d92:	2a00      	cmp	r2, #0
    1d94:	dc02      	bgt.n	1d9c <__sflush_r+0x18>
    1d96:	6c27      	ldr	r7, [r4, #64]	; 0x40
    1d98:	2f00      	cmp	r7, #0
    1d9a:	dd1a      	ble.n	1dd2 <__sflush_r+0x4e>
    1d9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1d9e:	2f00      	cmp	r7, #0
    1da0:	d017      	beq.n	1dd2 <__sflush_r+0x4e>
    1da2:	2200      	movs	r2, #0
    1da4:	682e      	ldr	r6, [r5, #0]
    1da6:	602a      	str	r2, [r5, #0]
    1da8:	2280      	movs	r2, #128	; 0x80
    1daa:	0152      	lsls	r2, r2, #5
    1dac:	401a      	ands	r2, r3
    1dae:	d001      	beq.n	1db4 <__sflush_r+0x30>
    1db0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1db2:	e015      	b.n	1de0 <__sflush_r+0x5c>
    1db4:	1c28      	adds	r0, r5, #0
    1db6:	6a21      	ldr	r1, [r4, #32]
    1db8:	2301      	movs	r3, #1
    1dba:	47b8      	blx	r7
    1dbc:	1c02      	adds	r2, r0, #0
    1dbe:	1c41      	adds	r1, r0, #1
    1dc0:	d10e      	bne.n	1de0 <__sflush_r+0x5c>
    1dc2:	682b      	ldr	r3, [r5, #0]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d00b      	beq.n	1de0 <__sflush_r+0x5c>
    1dc8:	2b1d      	cmp	r3, #29
    1dca:	d001      	beq.n	1dd0 <__sflush_r+0x4c>
    1dcc:	2b16      	cmp	r3, #22
    1dce:	d102      	bne.n	1dd6 <__sflush_r+0x52>
    1dd0:	602e      	str	r6, [r5, #0]
    1dd2:	2000      	movs	r0, #0
    1dd4:	e05e      	b.n	1e94 <__sflush_r+0x110>
    1dd6:	89a3      	ldrh	r3, [r4, #12]
    1dd8:	2140      	movs	r1, #64	; 0x40
    1dda:	430b      	orrs	r3, r1
    1ddc:	81a3      	strh	r3, [r4, #12]
    1dde:	e059      	b.n	1e94 <__sflush_r+0x110>
    1de0:	89a3      	ldrh	r3, [r4, #12]
    1de2:	075f      	lsls	r7, r3, #29
    1de4:	d506      	bpl.n	1df4 <__sflush_r+0x70>
    1de6:	6861      	ldr	r1, [r4, #4]
    1de8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1dea:	1a52      	subs	r2, r2, r1
    1dec:	2b00      	cmp	r3, #0
    1dee:	d001      	beq.n	1df4 <__sflush_r+0x70>
    1df0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    1df2:	1bd2      	subs	r2, r2, r7
    1df4:	1c28      	adds	r0, r5, #0
    1df6:	6a21      	ldr	r1, [r4, #32]
    1df8:	2300      	movs	r3, #0
    1dfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1dfc:	47b8      	blx	r7
    1dfe:	89a2      	ldrh	r2, [r4, #12]
    1e00:	1c41      	adds	r1, r0, #1
    1e02:	d106      	bne.n	1e12 <__sflush_r+0x8e>
    1e04:	682b      	ldr	r3, [r5, #0]
    1e06:	2b00      	cmp	r3, #0
    1e08:	d003      	beq.n	1e12 <__sflush_r+0x8e>
    1e0a:	2b1d      	cmp	r3, #29
    1e0c:	d001      	beq.n	1e12 <__sflush_r+0x8e>
    1e0e:	2b16      	cmp	r3, #22
    1e10:	d119      	bne.n	1e46 <__sflush_r+0xc2>
    1e12:	2300      	movs	r3, #0
    1e14:	6063      	str	r3, [r4, #4]
    1e16:	6923      	ldr	r3, [r4, #16]
    1e18:	6023      	str	r3, [r4, #0]
    1e1a:	04d7      	lsls	r7, r2, #19
    1e1c:	d505      	bpl.n	1e2a <__sflush_r+0xa6>
    1e1e:	1c41      	adds	r1, r0, #1
    1e20:	d102      	bne.n	1e28 <__sflush_r+0xa4>
    1e22:	682a      	ldr	r2, [r5, #0]
    1e24:	2a00      	cmp	r2, #0
    1e26:	d100      	bne.n	1e2a <__sflush_r+0xa6>
    1e28:	6560      	str	r0, [r4, #84]	; 0x54
    1e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e2c:	602e      	str	r6, [r5, #0]
    1e2e:	2900      	cmp	r1, #0
    1e30:	d0cf      	beq.n	1dd2 <__sflush_r+0x4e>
    1e32:	1c23      	adds	r3, r4, #0
    1e34:	3344      	adds	r3, #68	; 0x44
    1e36:	4299      	cmp	r1, r3
    1e38:	d002      	beq.n	1e40 <__sflush_r+0xbc>
    1e3a:	1c28      	adds	r0, r5, #0
    1e3c:	f000 f982 	bl	2144 <_free_r>
    1e40:	2000      	movs	r0, #0
    1e42:	6360      	str	r0, [r4, #52]	; 0x34
    1e44:	e026      	b.n	1e94 <__sflush_r+0x110>
    1e46:	2340      	movs	r3, #64	; 0x40
    1e48:	431a      	orrs	r2, r3
    1e4a:	81a2      	strh	r2, [r4, #12]
    1e4c:	e022      	b.n	1e94 <__sflush_r+0x110>
    1e4e:	6926      	ldr	r6, [r4, #16]
    1e50:	2e00      	cmp	r6, #0
    1e52:	d0be      	beq.n	1dd2 <__sflush_r+0x4e>
    1e54:	6827      	ldr	r7, [r4, #0]
    1e56:	2200      	movs	r2, #0
    1e58:	1bbf      	subs	r7, r7, r6
    1e5a:	9701      	str	r7, [sp, #4]
    1e5c:	6026      	str	r6, [r4, #0]
    1e5e:	0799      	lsls	r1, r3, #30
    1e60:	d100      	bne.n	1e64 <__sflush_r+0xe0>
    1e62:	6962      	ldr	r2, [r4, #20]
    1e64:	60a2      	str	r2, [r4, #8]
    1e66:	9f01      	ldr	r7, [sp, #4]
    1e68:	2f00      	cmp	r7, #0
    1e6a:	ddb2      	ble.n	1dd2 <__sflush_r+0x4e>
    1e6c:	1c28      	adds	r0, r5, #0
    1e6e:	6a21      	ldr	r1, [r4, #32]
    1e70:	1c32      	adds	r2, r6, #0
    1e72:	9b01      	ldr	r3, [sp, #4]
    1e74:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    1e76:	47b8      	blx	r7
    1e78:	2800      	cmp	r0, #0
    1e7a:	dc06      	bgt.n	1e8a <__sflush_r+0x106>
    1e7c:	89a3      	ldrh	r3, [r4, #12]
    1e7e:	2240      	movs	r2, #64	; 0x40
    1e80:	4313      	orrs	r3, r2
    1e82:	2001      	movs	r0, #1
    1e84:	81a3      	strh	r3, [r4, #12]
    1e86:	4240      	negs	r0, r0
    1e88:	e004      	b.n	1e94 <__sflush_r+0x110>
    1e8a:	9f01      	ldr	r7, [sp, #4]
    1e8c:	1836      	adds	r6, r6, r0
    1e8e:	1a3f      	subs	r7, r7, r0
    1e90:	9701      	str	r7, [sp, #4]
    1e92:	e7e8      	b.n	1e66 <__sflush_r+0xe2>
    1e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001e98 <_fflush_r>:
    1e98:	690a      	ldr	r2, [r1, #16]
    1e9a:	b538      	push	{r3, r4, r5, lr}
    1e9c:	1c05      	adds	r5, r0, #0
    1e9e:	1c0c      	adds	r4, r1, #0
    1ea0:	2a00      	cmp	r2, #0
    1ea2:	d101      	bne.n	1ea8 <_fflush_r+0x10>
    1ea4:	2000      	movs	r0, #0
    1ea6:	e01c      	b.n	1ee2 <_fflush_r+0x4a>
    1ea8:	2800      	cmp	r0, #0
    1eaa:	d004      	beq.n	1eb6 <_fflush_r+0x1e>
    1eac:	6983      	ldr	r3, [r0, #24]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d101      	bne.n	1eb6 <_fflush_r+0x1e>
    1eb2:	f000 f871 	bl	1f98 <__sinit>
    1eb6:	4b0b      	ldr	r3, [pc, #44]	; (1ee4 <_fflush_r+0x4c>)
    1eb8:	429c      	cmp	r4, r3
    1eba:	d101      	bne.n	1ec0 <_fflush_r+0x28>
    1ebc:	686c      	ldr	r4, [r5, #4]
    1ebe:	e008      	b.n	1ed2 <_fflush_r+0x3a>
    1ec0:	4b09      	ldr	r3, [pc, #36]	; (1ee8 <_fflush_r+0x50>)
    1ec2:	429c      	cmp	r4, r3
    1ec4:	d101      	bne.n	1eca <_fflush_r+0x32>
    1ec6:	68ac      	ldr	r4, [r5, #8]
    1ec8:	e003      	b.n	1ed2 <_fflush_r+0x3a>
    1eca:	4b08      	ldr	r3, [pc, #32]	; (1eec <_fflush_r+0x54>)
    1ecc:	429c      	cmp	r4, r3
    1ece:	d100      	bne.n	1ed2 <_fflush_r+0x3a>
    1ed0:	68ec      	ldr	r4, [r5, #12]
    1ed2:	220c      	movs	r2, #12
    1ed4:	5ea3      	ldrsh	r3, [r4, r2]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d0e4      	beq.n	1ea4 <_fflush_r+0xc>
    1eda:	1c28      	adds	r0, r5, #0
    1edc:	1c21      	adds	r1, r4, #0
    1ede:	f7ff ff51 	bl	1d84 <__sflush_r>
    1ee2:	bd38      	pop	{r3, r4, r5, pc}
    1ee4:	000024d4 	.word	0x000024d4
    1ee8:	000024f4 	.word	0x000024f4
    1eec:	00002514 	.word	0x00002514

00001ef0 <_cleanup_r>:
    1ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ef2:	1c04      	adds	r4, r0, #0
    1ef4:	1c07      	adds	r7, r0, #0
    1ef6:	3448      	adds	r4, #72	; 0x48
    1ef8:	2c00      	cmp	r4, #0
    1efa:	d012      	beq.n	1f22 <_cleanup_r+0x32>
    1efc:	68a5      	ldr	r5, [r4, #8]
    1efe:	6866      	ldr	r6, [r4, #4]
    1f00:	3e01      	subs	r6, #1
    1f02:	d40c      	bmi.n	1f1e <_cleanup_r+0x2e>
    1f04:	89ab      	ldrh	r3, [r5, #12]
    1f06:	2b01      	cmp	r3, #1
    1f08:	d907      	bls.n	1f1a <_cleanup_r+0x2a>
    1f0a:	220e      	movs	r2, #14
    1f0c:	5eab      	ldrsh	r3, [r5, r2]
    1f0e:	3301      	adds	r3, #1
    1f10:	d003      	beq.n	1f1a <_cleanup_r+0x2a>
    1f12:	1c38      	adds	r0, r7, #0
    1f14:	1c29      	adds	r1, r5, #0
    1f16:	f7ff ffbf 	bl	1e98 <_fflush_r>
    1f1a:	3568      	adds	r5, #104	; 0x68
    1f1c:	e7f0      	b.n	1f00 <_cleanup_r+0x10>
    1f1e:	6824      	ldr	r4, [r4, #0]
    1f20:	e7ea      	b.n	1ef8 <_cleanup_r+0x8>
    1f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001f24 <std.isra.0>:
    1f24:	2300      	movs	r3, #0
    1f26:	b510      	push	{r4, lr}
    1f28:	1c04      	adds	r4, r0, #0
    1f2a:	6003      	str	r3, [r0, #0]
    1f2c:	6043      	str	r3, [r0, #4]
    1f2e:	6083      	str	r3, [r0, #8]
    1f30:	8181      	strh	r1, [r0, #12]
    1f32:	6643      	str	r3, [r0, #100]	; 0x64
    1f34:	81c2      	strh	r2, [r0, #14]
    1f36:	6103      	str	r3, [r0, #16]
    1f38:	6143      	str	r3, [r0, #20]
    1f3a:	6183      	str	r3, [r0, #24]
    1f3c:	1c19      	adds	r1, r3, #0
    1f3e:	2208      	movs	r2, #8
    1f40:	305c      	adds	r0, #92	; 0x5c
    1f42:	f7ff fae8 	bl	1516 <memset>
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <std.isra.0+0x38>)
    1f48:	6224      	str	r4, [r4, #32]
    1f4a:	6263      	str	r3, [r4, #36]	; 0x24
    1f4c:	4b04      	ldr	r3, [pc, #16]	; (1f60 <std.isra.0+0x3c>)
    1f4e:	62a3      	str	r3, [r4, #40]	; 0x28
    1f50:	4b04      	ldr	r3, [pc, #16]	; (1f64 <std.isra.0+0x40>)
    1f52:	62e3      	str	r3, [r4, #44]	; 0x2c
    1f54:	4b04      	ldr	r3, [pc, #16]	; (1f68 <std.isra.0+0x44>)
    1f56:	6323      	str	r3, [r4, #48]	; 0x30
    1f58:	bd10      	pop	{r4, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	000022a1 	.word	0x000022a1
    1f60:	000022c9 	.word	0x000022c9
    1f64:	00002301 	.word	0x00002301
    1f68:	0000232d 	.word	0x0000232d

00001f6c <__sfmoreglue>:
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	1e4b      	subs	r3, r1, #1
    1f70:	2568      	movs	r5, #104	; 0x68
    1f72:	435d      	muls	r5, r3
    1f74:	1c0e      	adds	r6, r1, #0
    1f76:	1c29      	adds	r1, r5, #0
    1f78:	3174      	adds	r1, #116	; 0x74
    1f7a:	f000 f92b 	bl	21d4 <_malloc_r>
    1f7e:	1e04      	subs	r4, r0, #0
    1f80:	d008      	beq.n	1f94 <__sfmoreglue+0x28>
    1f82:	2100      	movs	r1, #0
    1f84:	6001      	str	r1, [r0, #0]
    1f86:	6046      	str	r6, [r0, #4]
    1f88:	1c2a      	adds	r2, r5, #0
    1f8a:	300c      	adds	r0, #12
    1f8c:	60a0      	str	r0, [r4, #8]
    1f8e:	3268      	adds	r2, #104	; 0x68
    1f90:	f7ff fac1 	bl	1516 <memset>
    1f94:	1c20      	adds	r0, r4, #0
    1f96:	bd70      	pop	{r4, r5, r6, pc}

00001f98 <__sinit>:
    1f98:	6983      	ldr	r3, [r0, #24]
    1f9a:	b513      	push	{r0, r1, r4, lr}
    1f9c:	1c04      	adds	r4, r0, #0
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d127      	bne.n	1ff2 <__sinit+0x5a>
    1fa2:	6483      	str	r3, [r0, #72]	; 0x48
    1fa4:	64c3      	str	r3, [r0, #76]	; 0x4c
    1fa6:	6503      	str	r3, [r0, #80]	; 0x50
    1fa8:	4b12      	ldr	r3, [pc, #72]	; (1ff4 <__sinit+0x5c>)
    1faa:	4a13      	ldr	r2, [pc, #76]	; (1ff8 <__sinit+0x60>)
    1fac:	681b      	ldr	r3, [r3, #0]
    1fae:	6282      	str	r2, [r0, #40]	; 0x28
    1fb0:	4298      	cmp	r0, r3
    1fb2:	d101      	bne.n	1fb8 <__sinit+0x20>
    1fb4:	2301      	movs	r3, #1
    1fb6:	6183      	str	r3, [r0, #24]
    1fb8:	1c20      	adds	r0, r4, #0
    1fba:	f000 f81f 	bl	1ffc <__sfp>
    1fbe:	6060      	str	r0, [r4, #4]
    1fc0:	1c20      	adds	r0, r4, #0
    1fc2:	f000 f81b 	bl	1ffc <__sfp>
    1fc6:	60a0      	str	r0, [r4, #8]
    1fc8:	1c20      	adds	r0, r4, #0
    1fca:	f000 f817 	bl	1ffc <__sfp>
    1fce:	2104      	movs	r1, #4
    1fd0:	60e0      	str	r0, [r4, #12]
    1fd2:	2200      	movs	r2, #0
    1fd4:	6860      	ldr	r0, [r4, #4]
    1fd6:	f7ff ffa5 	bl	1f24 <std.isra.0>
    1fda:	68a0      	ldr	r0, [r4, #8]
    1fdc:	2109      	movs	r1, #9
    1fde:	2201      	movs	r2, #1
    1fe0:	f7ff ffa0 	bl	1f24 <std.isra.0>
    1fe4:	68e0      	ldr	r0, [r4, #12]
    1fe6:	2112      	movs	r1, #18
    1fe8:	2202      	movs	r2, #2
    1fea:	f7ff ff9b 	bl	1f24 <std.isra.0>
    1fee:	2301      	movs	r3, #1
    1ff0:	61a3      	str	r3, [r4, #24]
    1ff2:	bd13      	pop	{r0, r1, r4, pc}
    1ff4:	0000249c 	.word	0x0000249c
    1ff8:	00001ef1 	.word	0x00001ef1

00001ffc <__sfp>:
    1ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffe:	4b1d      	ldr	r3, [pc, #116]	; (2074 <STACK_SIZE+0x74>)
    2000:	1c07      	adds	r7, r0, #0
    2002:	681e      	ldr	r6, [r3, #0]
    2004:	69b2      	ldr	r2, [r6, #24]
    2006:	2a00      	cmp	r2, #0
    2008:	d102      	bne.n	2010 <STACK_SIZE+0x10>
    200a:	1c30      	adds	r0, r6, #0
    200c:	f7ff ffc4 	bl	1f98 <__sinit>
    2010:	3648      	adds	r6, #72	; 0x48
    2012:	68b4      	ldr	r4, [r6, #8]
    2014:	6873      	ldr	r3, [r6, #4]
    2016:	3b01      	subs	r3, #1
    2018:	d405      	bmi.n	2026 <STACK_SIZE+0x26>
    201a:	220c      	movs	r2, #12
    201c:	5ea5      	ldrsh	r5, [r4, r2]
    201e:	2d00      	cmp	r5, #0
    2020:	d010      	beq.n	2044 <STACK_SIZE+0x44>
    2022:	3468      	adds	r4, #104	; 0x68
    2024:	e7f7      	b.n	2016 <STACK_SIZE+0x16>
    2026:	6833      	ldr	r3, [r6, #0]
    2028:	2b00      	cmp	r3, #0
    202a:	d106      	bne.n	203a <STACK_SIZE+0x3a>
    202c:	1c38      	adds	r0, r7, #0
    202e:	2104      	movs	r1, #4
    2030:	f7ff ff9c 	bl	1f6c <__sfmoreglue>
    2034:	6030      	str	r0, [r6, #0]
    2036:	2800      	cmp	r0, #0
    2038:	d001      	beq.n	203e <STACK_SIZE+0x3e>
    203a:	6836      	ldr	r6, [r6, #0]
    203c:	e7e9      	b.n	2012 <STACK_SIZE+0x12>
    203e:	230c      	movs	r3, #12
    2040:	603b      	str	r3, [r7, #0]
    2042:	e016      	b.n	2072 <STACK_SIZE+0x72>
    2044:	2301      	movs	r3, #1
    2046:	425b      	negs	r3, r3
    2048:	81e3      	strh	r3, [r4, #14]
    204a:	1c20      	adds	r0, r4, #0
    204c:	2301      	movs	r3, #1
    204e:	81a3      	strh	r3, [r4, #12]
    2050:	6665      	str	r5, [r4, #100]	; 0x64
    2052:	6025      	str	r5, [r4, #0]
    2054:	60a5      	str	r5, [r4, #8]
    2056:	6065      	str	r5, [r4, #4]
    2058:	6125      	str	r5, [r4, #16]
    205a:	6165      	str	r5, [r4, #20]
    205c:	61a5      	str	r5, [r4, #24]
    205e:	305c      	adds	r0, #92	; 0x5c
    2060:	1c29      	adds	r1, r5, #0
    2062:	2208      	movs	r2, #8
    2064:	f7ff fa57 	bl	1516 <memset>
    2068:	6365      	str	r5, [r4, #52]	; 0x34
    206a:	63a5      	str	r5, [r4, #56]	; 0x38
    206c:	64a5      	str	r5, [r4, #72]	; 0x48
    206e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2070:	1c20      	adds	r0, r4, #0
    2072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2074:	0000249c 	.word	0x0000249c

00002078 <__smakebuf_r>:
    2078:	b5f0      	push	{r4, r5, r6, r7, lr}
    207a:	898b      	ldrh	r3, [r1, #12]
    207c:	b091      	sub	sp, #68	; 0x44
    207e:	1c05      	adds	r5, r0, #0
    2080:	1c0c      	adds	r4, r1, #0
    2082:	079a      	lsls	r2, r3, #30
    2084:	d425      	bmi.n	20d2 <__smakebuf_r+0x5a>
    2086:	230e      	movs	r3, #14
    2088:	5ec9      	ldrsh	r1, [r1, r3]
    208a:	2900      	cmp	r1, #0
    208c:	da06      	bge.n	209c <__smakebuf_r+0x24>
    208e:	89a7      	ldrh	r7, [r4, #12]
    2090:	2380      	movs	r3, #128	; 0x80
    2092:	401f      	ands	r7, r3
    2094:	d00f      	beq.n	20b6 <__smakebuf_r+0x3e>
    2096:	2700      	movs	r7, #0
    2098:	2640      	movs	r6, #64	; 0x40
    209a:	e00e      	b.n	20ba <__smakebuf_r+0x42>
    209c:	aa01      	add	r2, sp, #4
    209e:	f000 f979 	bl	2394 <_fstat_r>
    20a2:	2800      	cmp	r0, #0
    20a4:	dbf3      	blt.n	208e <__smakebuf_r+0x16>
    20a6:	9b02      	ldr	r3, [sp, #8]
    20a8:	27f0      	movs	r7, #240	; 0xf0
    20aa:	023f      	lsls	r7, r7, #8
    20ac:	4a18      	ldr	r2, [pc, #96]	; (2110 <__smakebuf_r+0x98>)
    20ae:	401f      	ands	r7, r3
    20b0:	18bf      	adds	r7, r7, r2
    20b2:	427b      	negs	r3, r7
    20b4:	415f      	adcs	r7, r3
    20b6:	2680      	movs	r6, #128	; 0x80
    20b8:	00f6      	lsls	r6, r6, #3
    20ba:	1c28      	adds	r0, r5, #0
    20bc:	1c31      	adds	r1, r6, #0
    20be:	f000 f889 	bl	21d4 <_malloc_r>
    20c2:	2800      	cmp	r0, #0
    20c4:	d10c      	bne.n	20e0 <__smakebuf_r+0x68>
    20c6:	89a3      	ldrh	r3, [r4, #12]
    20c8:	059a      	lsls	r2, r3, #22
    20ca:	d41f      	bmi.n	210c <__smakebuf_r+0x94>
    20cc:	2202      	movs	r2, #2
    20ce:	4313      	orrs	r3, r2
    20d0:	81a3      	strh	r3, [r4, #12]
    20d2:	1c23      	adds	r3, r4, #0
    20d4:	3347      	adds	r3, #71	; 0x47
    20d6:	6023      	str	r3, [r4, #0]
    20d8:	6123      	str	r3, [r4, #16]
    20da:	2301      	movs	r3, #1
    20dc:	6163      	str	r3, [r4, #20]
    20de:	e015      	b.n	210c <__smakebuf_r+0x94>
    20e0:	4b0c      	ldr	r3, [pc, #48]	; (2114 <__smakebuf_r+0x9c>)
    20e2:	2280      	movs	r2, #128	; 0x80
    20e4:	62ab      	str	r3, [r5, #40]	; 0x28
    20e6:	89a3      	ldrh	r3, [r4, #12]
    20e8:	6020      	str	r0, [r4, #0]
    20ea:	4313      	orrs	r3, r2
    20ec:	81a3      	strh	r3, [r4, #12]
    20ee:	6120      	str	r0, [r4, #16]
    20f0:	6166      	str	r6, [r4, #20]
    20f2:	2f00      	cmp	r7, #0
    20f4:	d00a      	beq.n	210c <__smakebuf_r+0x94>
    20f6:	230e      	movs	r3, #14
    20f8:	5ee1      	ldrsh	r1, [r4, r3]
    20fa:	1c28      	adds	r0, r5, #0
    20fc:	f000 f95c 	bl	23b8 <_isatty_r>
    2100:	2800      	cmp	r0, #0
    2102:	d003      	beq.n	210c <__smakebuf_r+0x94>
    2104:	89a3      	ldrh	r3, [r4, #12]
    2106:	2201      	movs	r2, #1
    2108:	4313      	orrs	r3, r2
    210a:	81a3      	strh	r3, [r4, #12]
    210c:	b011      	add	sp, #68	; 0x44
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2110:	ffffe000 	.word	0xffffe000
    2114:	00001ef1 	.word	0x00001ef1

00002118 <malloc>:
    2118:	b508      	push	{r3, lr}
    211a:	4b03      	ldr	r3, [pc, #12]	; (2128 <malloc+0x10>)
    211c:	1c01      	adds	r1, r0, #0
    211e:	6818      	ldr	r0, [r3, #0]
    2120:	f000 f858 	bl	21d4 <_malloc_r>
    2124:	bd08      	pop	{r3, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	20000064 	.word	0x20000064

0000212c <memchr>:
    212c:	b2c9      	uxtb	r1, r1
    212e:	1882      	adds	r2, r0, r2
    2130:	4290      	cmp	r0, r2
    2132:	d004      	beq.n	213e <memchr+0x12>
    2134:	7803      	ldrb	r3, [r0, #0]
    2136:	428b      	cmp	r3, r1
    2138:	d002      	beq.n	2140 <memchr+0x14>
    213a:	3001      	adds	r0, #1
    213c:	e7f8      	b.n	2130 <memchr+0x4>
    213e:	2000      	movs	r0, #0
    2140:	4770      	bx	lr
	...

00002144 <_free_r>:
    2144:	b530      	push	{r4, r5, lr}
    2146:	2900      	cmp	r1, #0
    2148:	d040      	beq.n	21cc <_free_r+0x88>
    214a:	3904      	subs	r1, #4
    214c:	680b      	ldr	r3, [r1, #0]
    214e:	2b00      	cmp	r3, #0
    2150:	da00      	bge.n	2154 <_free_r+0x10>
    2152:	18c9      	adds	r1, r1, r3
    2154:	4a1e      	ldr	r2, [pc, #120]	; (21d0 <_free_r+0x8c>)
    2156:	6813      	ldr	r3, [r2, #0]
    2158:	1c14      	adds	r4, r2, #0
    215a:	2b00      	cmp	r3, #0
    215c:	d102      	bne.n	2164 <_free_r+0x20>
    215e:	604b      	str	r3, [r1, #4]
    2160:	6011      	str	r1, [r2, #0]
    2162:	e033      	b.n	21cc <_free_r+0x88>
    2164:	4299      	cmp	r1, r3
    2166:	d20f      	bcs.n	2188 <_free_r+0x44>
    2168:	6808      	ldr	r0, [r1, #0]
    216a:	180a      	adds	r2, r1, r0
    216c:	429a      	cmp	r2, r3
    216e:	d105      	bne.n	217c <_free_r+0x38>
    2170:	6813      	ldr	r3, [r2, #0]
    2172:	6852      	ldr	r2, [r2, #4]
    2174:	18c0      	adds	r0, r0, r3
    2176:	6008      	str	r0, [r1, #0]
    2178:	604a      	str	r2, [r1, #4]
    217a:	e000      	b.n	217e <_free_r+0x3a>
    217c:	604b      	str	r3, [r1, #4]
    217e:	6021      	str	r1, [r4, #0]
    2180:	e024      	b.n	21cc <_free_r+0x88>
    2182:	428a      	cmp	r2, r1
    2184:	d803      	bhi.n	218e <_free_r+0x4a>
    2186:	1c13      	adds	r3, r2, #0
    2188:	685a      	ldr	r2, [r3, #4]
    218a:	2a00      	cmp	r2, #0
    218c:	d1f9      	bne.n	2182 <_free_r+0x3e>
    218e:	681d      	ldr	r5, [r3, #0]
    2190:	195c      	adds	r4, r3, r5
    2192:	428c      	cmp	r4, r1
    2194:	d10b      	bne.n	21ae <_free_r+0x6a>
    2196:	6809      	ldr	r1, [r1, #0]
    2198:	1869      	adds	r1, r5, r1
    219a:	1858      	adds	r0, r3, r1
    219c:	6019      	str	r1, [r3, #0]
    219e:	4290      	cmp	r0, r2
    21a0:	d114      	bne.n	21cc <_free_r+0x88>
    21a2:	6814      	ldr	r4, [r2, #0]
    21a4:	6852      	ldr	r2, [r2, #4]
    21a6:	1909      	adds	r1, r1, r4
    21a8:	6019      	str	r1, [r3, #0]
    21aa:	605a      	str	r2, [r3, #4]
    21ac:	e00e      	b.n	21cc <_free_r+0x88>
    21ae:	428c      	cmp	r4, r1
    21b0:	d902      	bls.n	21b8 <_free_r+0x74>
    21b2:	230c      	movs	r3, #12
    21b4:	6003      	str	r3, [r0, #0]
    21b6:	e009      	b.n	21cc <_free_r+0x88>
    21b8:	6808      	ldr	r0, [r1, #0]
    21ba:	180c      	adds	r4, r1, r0
    21bc:	4294      	cmp	r4, r2
    21be:	d103      	bne.n	21c8 <_free_r+0x84>
    21c0:	6814      	ldr	r4, [r2, #0]
    21c2:	6852      	ldr	r2, [r2, #4]
    21c4:	1900      	adds	r0, r0, r4
    21c6:	6008      	str	r0, [r1, #0]
    21c8:	604a      	str	r2, [r1, #4]
    21ca:	6059      	str	r1, [r3, #4]
    21cc:	bd30      	pop	{r4, r5, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	200000bc 	.word	0x200000bc

000021d4 <_malloc_r>:
    21d4:	b570      	push	{r4, r5, r6, lr}
    21d6:	2303      	movs	r3, #3
    21d8:	1ccd      	adds	r5, r1, #3
    21da:	439d      	bics	r5, r3
    21dc:	3508      	adds	r5, #8
    21de:	1c06      	adds	r6, r0, #0
    21e0:	2d0c      	cmp	r5, #12
    21e2:	d201      	bcs.n	21e8 <_malloc_r+0x14>
    21e4:	250c      	movs	r5, #12
    21e6:	e001      	b.n	21ec <_malloc_r+0x18>
    21e8:	2d00      	cmp	r5, #0
    21ea:	db3f      	blt.n	226c <_malloc_r+0x98>
    21ec:	428d      	cmp	r5, r1
    21ee:	d33d      	bcc.n	226c <_malloc_r+0x98>
    21f0:	4b20      	ldr	r3, [pc, #128]	; (2274 <_malloc_r+0xa0>)
    21f2:	681c      	ldr	r4, [r3, #0]
    21f4:	1c1a      	adds	r2, r3, #0
    21f6:	1c21      	adds	r1, r4, #0
    21f8:	2900      	cmp	r1, #0
    21fa:	d013      	beq.n	2224 <_malloc_r+0x50>
    21fc:	6808      	ldr	r0, [r1, #0]
    21fe:	1b43      	subs	r3, r0, r5
    2200:	d40d      	bmi.n	221e <_malloc_r+0x4a>
    2202:	2b0b      	cmp	r3, #11
    2204:	d902      	bls.n	220c <_malloc_r+0x38>
    2206:	600b      	str	r3, [r1, #0]
    2208:	18cc      	adds	r4, r1, r3
    220a:	e01e      	b.n	224a <_malloc_r+0x76>
    220c:	428c      	cmp	r4, r1
    220e:	d102      	bne.n	2216 <_malloc_r+0x42>
    2210:	6863      	ldr	r3, [r4, #4]
    2212:	6013      	str	r3, [r2, #0]
    2214:	e01a      	b.n	224c <_malloc_r+0x78>
    2216:	6848      	ldr	r0, [r1, #4]
    2218:	6060      	str	r0, [r4, #4]
    221a:	1c0c      	adds	r4, r1, #0
    221c:	e016      	b.n	224c <_malloc_r+0x78>
    221e:	1c0c      	adds	r4, r1, #0
    2220:	6849      	ldr	r1, [r1, #4]
    2222:	e7e9      	b.n	21f8 <_malloc_r+0x24>
    2224:	4c14      	ldr	r4, [pc, #80]	; (2278 <_malloc_r+0xa4>)
    2226:	6820      	ldr	r0, [r4, #0]
    2228:	2800      	cmp	r0, #0
    222a:	d103      	bne.n	2234 <_malloc_r+0x60>
    222c:	1c30      	adds	r0, r6, #0
    222e:	f000 f825 	bl	227c <_sbrk_r>
    2232:	6020      	str	r0, [r4, #0]
    2234:	1c30      	adds	r0, r6, #0
    2236:	1c29      	adds	r1, r5, #0
    2238:	f000 f820 	bl	227c <_sbrk_r>
    223c:	1c43      	adds	r3, r0, #1
    223e:	d015      	beq.n	226c <_malloc_r+0x98>
    2240:	1cc4      	adds	r4, r0, #3
    2242:	2303      	movs	r3, #3
    2244:	439c      	bics	r4, r3
    2246:	4284      	cmp	r4, r0
    2248:	d10a      	bne.n	2260 <_malloc_r+0x8c>
    224a:	6025      	str	r5, [r4, #0]
    224c:	1c20      	adds	r0, r4, #0
    224e:	300b      	adds	r0, #11
    2250:	2207      	movs	r2, #7
    2252:	1d23      	adds	r3, r4, #4
    2254:	4390      	bics	r0, r2
    2256:	1ac3      	subs	r3, r0, r3
    2258:	d00b      	beq.n	2272 <_malloc_r+0x9e>
    225a:	425a      	negs	r2, r3
    225c:	50e2      	str	r2, [r4, r3]
    225e:	e008      	b.n	2272 <_malloc_r+0x9e>
    2260:	1a21      	subs	r1, r4, r0
    2262:	1c30      	adds	r0, r6, #0
    2264:	f000 f80a 	bl	227c <_sbrk_r>
    2268:	3001      	adds	r0, #1
    226a:	d1ee      	bne.n	224a <_malloc_r+0x76>
    226c:	230c      	movs	r3, #12
    226e:	6033      	str	r3, [r6, #0]
    2270:	2000      	movs	r0, #0
    2272:	bd70      	pop	{r4, r5, r6, pc}
    2274:	200000bc 	.word	0x200000bc
    2278:	200000b8 	.word	0x200000b8

0000227c <_sbrk_r>:
    227c:	b538      	push	{r3, r4, r5, lr}
    227e:	4c07      	ldr	r4, [pc, #28]	; (229c <_sbrk_r+0x20>)
    2280:	2300      	movs	r3, #0
    2282:	1c05      	adds	r5, r0, #0
    2284:	1c08      	adds	r0, r1, #0
    2286:	6023      	str	r3, [r4, #0]
    2288:	f7fe ff7e 	bl	1188 <_sbrk>
    228c:	1c43      	adds	r3, r0, #1
    228e:	d103      	bne.n	2298 <_sbrk_r+0x1c>
    2290:	6823      	ldr	r3, [r4, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d000      	beq.n	2298 <_sbrk_r+0x1c>
    2296:	602b      	str	r3, [r5, #0]
    2298:	bd38      	pop	{r3, r4, r5, pc}
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	200000d4 	.word	0x200000d4

000022a0 <__sread>:
    22a0:	b538      	push	{r3, r4, r5, lr}
    22a2:	1c0c      	adds	r4, r1, #0
    22a4:	250e      	movs	r5, #14
    22a6:	5f49      	ldrsh	r1, [r1, r5]
    22a8:	f000 f8ac 	bl	2404 <_read_r>
    22ac:	2800      	cmp	r0, #0
    22ae:	db03      	blt.n	22b8 <__sread+0x18>
    22b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    22b2:	1813      	adds	r3, r2, r0
    22b4:	6563      	str	r3, [r4, #84]	; 0x54
    22b6:	e003      	b.n	22c0 <__sread+0x20>
    22b8:	89a2      	ldrh	r2, [r4, #12]
    22ba:	4b02      	ldr	r3, [pc, #8]	; (22c4 <__sread+0x24>)
    22bc:	4013      	ands	r3, r2
    22be:	81a3      	strh	r3, [r4, #12]
    22c0:	bd38      	pop	{r3, r4, r5, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	ffffefff 	.word	0xffffefff

000022c8 <__swrite>:
    22c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ca:	1c1e      	adds	r6, r3, #0
    22cc:	898b      	ldrh	r3, [r1, #12]
    22ce:	1c05      	adds	r5, r0, #0
    22d0:	1c0c      	adds	r4, r1, #0
    22d2:	1c17      	adds	r7, r2, #0
    22d4:	05da      	lsls	r2, r3, #23
    22d6:	d505      	bpl.n	22e4 <__swrite+0x1c>
    22d8:	230e      	movs	r3, #14
    22da:	5ec9      	ldrsh	r1, [r1, r3]
    22dc:	2200      	movs	r2, #0
    22de:	2302      	movs	r3, #2
    22e0:	f000 f87c 	bl	23dc <_lseek_r>
    22e4:	89a2      	ldrh	r2, [r4, #12]
    22e6:	4b05      	ldr	r3, [pc, #20]	; (22fc <__swrite+0x34>)
    22e8:	1c28      	adds	r0, r5, #0
    22ea:	4013      	ands	r3, r2
    22ec:	81a3      	strh	r3, [r4, #12]
    22ee:	220e      	movs	r2, #14
    22f0:	5ea1      	ldrsh	r1, [r4, r2]
    22f2:	1c33      	adds	r3, r6, #0
    22f4:	1c3a      	adds	r2, r7, #0
    22f6:	f000 f827 	bl	2348 <_write_r>
    22fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fc:	ffffefff 	.word	0xffffefff

00002300 <__sseek>:
    2300:	b538      	push	{r3, r4, r5, lr}
    2302:	1c0c      	adds	r4, r1, #0
    2304:	250e      	movs	r5, #14
    2306:	5f49      	ldrsh	r1, [r1, r5]
    2308:	f000 f868 	bl	23dc <_lseek_r>
    230c:	89a3      	ldrh	r3, [r4, #12]
    230e:	1c42      	adds	r2, r0, #1
    2310:	d103      	bne.n	231a <__sseek+0x1a>
    2312:	4a05      	ldr	r2, [pc, #20]	; (2328 <__sseek+0x28>)
    2314:	4013      	ands	r3, r2
    2316:	81a3      	strh	r3, [r4, #12]
    2318:	e004      	b.n	2324 <__sseek+0x24>
    231a:	2280      	movs	r2, #128	; 0x80
    231c:	0152      	lsls	r2, r2, #5
    231e:	4313      	orrs	r3, r2
    2320:	81a3      	strh	r3, [r4, #12]
    2322:	6560      	str	r0, [r4, #84]	; 0x54
    2324:	bd38      	pop	{r3, r4, r5, pc}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	ffffefff 	.word	0xffffefff

0000232c <__sclose>:
    232c:	b508      	push	{r3, lr}
    232e:	230e      	movs	r3, #14
    2330:	5ec9      	ldrsh	r1, [r1, r3]
    2332:	f000 f81d 	bl	2370 <_close_r>
    2336:	bd08      	pop	{r3, pc}

00002338 <strlen>:
    2338:	2300      	movs	r3, #0
    233a:	5cc2      	ldrb	r2, [r0, r3]
    233c:	3301      	adds	r3, #1
    233e:	2a00      	cmp	r2, #0
    2340:	d1fb      	bne.n	233a <strlen+0x2>
    2342:	1e58      	subs	r0, r3, #1
    2344:	4770      	bx	lr
	...

00002348 <_write_r>:
    2348:	b538      	push	{r3, r4, r5, lr}
    234a:	4c08      	ldr	r4, [pc, #32]	; (236c <_write_r+0x24>)
    234c:	1c05      	adds	r5, r0, #0
    234e:	2000      	movs	r0, #0
    2350:	6020      	str	r0, [r4, #0]
    2352:	1c08      	adds	r0, r1, #0
    2354:	1c11      	adds	r1, r2, #0
    2356:	1c1a      	adds	r2, r3, #0
    2358:	f7fd fefc 	bl	154 <_write>
    235c:	1c43      	adds	r3, r0, #1
    235e:	d103      	bne.n	2368 <_write_r+0x20>
    2360:	6823      	ldr	r3, [r4, #0]
    2362:	2b00      	cmp	r3, #0
    2364:	d000      	beq.n	2368 <_write_r+0x20>
    2366:	602b      	str	r3, [r5, #0]
    2368:	bd38      	pop	{r3, r4, r5, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	200000d4 	.word	0x200000d4

00002370 <_close_r>:
    2370:	b538      	push	{r3, r4, r5, lr}
    2372:	4c07      	ldr	r4, [pc, #28]	; (2390 <_close_r+0x20>)
    2374:	2300      	movs	r3, #0
    2376:	1c05      	adds	r5, r0, #0
    2378:	1c08      	adds	r0, r1, #0
    237a:	6023      	str	r3, [r4, #0]
    237c:	f7fe ff16 	bl	11ac <_close>
    2380:	1c43      	adds	r3, r0, #1
    2382:	d103      	bne.n	238c <_close_r+0x1c>
    2384:	6823      	ldr	r3, [r4, #0]
    2386:	2b00      	cmp	r3, #0
    2388:	d000      	beq.n	238c <_close_r+0x1c>
    238a:	602b      	str	r3, [r5, #0]
    238c:	bd38      	pop	{r3, r4, r5, pc}
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	200000d4 	.word	0x200000d4

00002394 <_fstat_r>:
    2394:	b538      	push	{r3, r4, r5, lr}
    2396:	4c07      	ldr	r4, [pc, #28]	; (23b4 <_fstat_r+0x20>)
    2398:	2300      	movs	r3, #0
    239a:	1c05      	adds	r5, r0, #0
    239c:	1c08      	adds	r0, r1, #0
    239e:	1c11      	adds	r1, r2, #0
    23a0:	6023      	str	r3, [r4, #0]
    23a2:	f7fe ff07 	bl	11b4 <_fstat>
    23a6:	1c43      	adds	r3, r0, #1
    23a8:	d103      	bne.n	23b2 <_fstat_r+0x1e>
    23aa:	6823      	ldr	r3, [r4, #0]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d000      	beq.n	23b2 <_fstat_r+0x1e>
    23b0:	602b      	str	r3, [r5, #0]
    23b2:	bd38      	pop	{r3, r4, r5, pc}
    23b4:	200000d4 	.word	0x200000d4

000023b8 <_isatty_r>:
    23b8:	b538      	push	{r3, r4, r5, lr}
    23ba:	4c07      	ldr	r4, [pc, #28]	; (23d8 <_isatty_r+0x20>)
    23bc:	2300      	movs	r3, #0
    23be:	1c05      	adds	r5, r0, #0
    23c0:	1c08      	adds	r0, r1, #0
    23c2:	6023      	str	r3, [r4, #0]
    23c4:	f7fe fefc 	bl	11c0 <_isatty>
    23c8:	1c43      	adds	r3, r0, #1
    23ca:	d103      	bne.n	23d4 <_isatty_r+0x1c>
    23cc:	6823      	ldr	r3, [r4, #0]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d000      	beq.n	23d4 <_isatty_r+0x1c>
    23d2:	602b      	str	r3, [r5, #0]
    23d4:	bd38      	pop	{r3, r4, r5, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	200000d4 	.word	0x200000d4

000023dc <_lseek_r>:
    23dc:	b538      	push	{r3, r4, r5, lr}
    23de:	4c08      	ldr	r4, [pc, #32]	; (2400 <_lseek_r+0x24>)
    23e0:	1c05      	adds	r5, r0, #0
    23e2:	2000      	movs	r0, #0
    23e4:	6020      	str	r0, [r4, #0]
    23e6:	1c08      	adds	r0, r1, #0
    23e8:	1c11      	adds	r1, r2, #0
    23ea:	1c1a      	adds	r2, r3, #0
    23ec:	f7fe feea 	bl	11c4 <_lseek>
    23f0:	1c43      	adds	r3, r0, #1
    23f2:	d103      	bne.n	23fc <_lseek_r+0x20>
    23f4:	6823      	ldr	r3, [r4, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d000      	beq.n	23fc <_lseek_r+0x20>
    23fa:	602b      	str	r3, [r5, #0]
    23fc:	bd38      	pop	{r3, r4, r5, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	200000d4 	.word	0x200000d4

00002404 <_read_r>:
    2404:	b538      	push	{r3, r4, r5, lr}
    2406:	4c08      	ldr	r4, [pc, #32]	; (2428 <_read_r+0x24>)
    2408:	1c05      	adds	r5, r0, #0
    240a:	2000      	movs	r0, #0
    240c:	6020      	str	r0, [r4, #0]
    240e:	1c08      	adds	r0, r1, #0
    2410:	1c11      	adds	r1, r2, #0
    2412:	1c1a      	adds	r2, r3, #0
    2414:	f7fd fe7c 	bl	110 <_read>
    2418:	1c43      	adds	r3, r0, #1
    241a:	d103      	bne.n	2424 <_read_r+0x20>
    241c:	6823      	ldr	r3, [r4, #0]
    241e:	2b00      	cmp	r3, #0
    2420:	d000      	beq.n	2424 <_read_r+0x20>
    2422:	602b      	str	r3, [r5, #0]
    2424:	bd38      	pop	{r3, r4, r5, pc}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	200000d4 	.word	0x200000d4
    242c:	00e11e01 	.word	0x00e11e01
    2430:	30257830 	.word	0x30257830
    2434:	000a7832 	.word	0x000a7832
    2438:	42000800 	.word	0x42000800
    243c:	42000c00 	.word	0x42000c00
    2440:	42001000 	.word	0x42001000
    2444:	42001400 	.word	0x42001400
    2448:	42001800 	.word	0x42001800
    244c:	42001c00 	.word	0x42001c00
    2450:	00000b50 	.word	0x00000b50
    2454:	00000bac 	.word	0x00000bac
    2458:	00000bac 	.word	0x00000bac
    245c:	00000b4a 	.word	0x00000b4a
    2460:	00000b4a 	.word	0x00000b4a
    2464:	00000b66 	.word	0x00000b66
    2468:	00000b56 	.word	0x00000b56
    246c:	00000b6c 	.word	0x00000b6c
    2470:	00000b9a 	.word	0x00000b9a
    2474:	00000c34 	.word	0x00000c34
    2478:	00000c94 	.word	0x00000c94
    247c:	00000c94 	.word	0x00000c94
    2480:	00000c14 	.word	0x00000c14
    2484:	00000c26 	.word	0x00000c26
    2488:	00000c42 	.word	0x00000c42
    248c:	00000c18 	.word	0x00000c18
    2490:	00000c50 	.word	0x00000c50
    2494:	00000c84 	.word	0x00000c84
    2498:	00000043 	.word	0x00000043

0000249c <_global_impure_ptr>:
    249c:	20000004 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    24ac:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    24bc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    24cc:	64636261 00006665                       abcdef..

000024d4 <__sf_fake_stdin>:
	...

000024f4 <__sf_fake_stdout>:
	...

00002514 <__sf_fake_stderr>:
	...

00002534 <_init>:
    2534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	bcf8      	pop	{r3, r4, r5, r6, r7}
    253a:	bc08      	pop	{r3}
    253c:	469e      	mov	lr, r3
    253e:	4770      	bx	lr

00002540 <__init_array_start>:
    2540:	000000d9 	.word	0x000000d9

00002544 <_fini>:
    2544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	bcf8      	pop	{r3, r4, r5, r6, r7}
    254a:	bc08      	pop	{r3}
    254c:	469e      	mov	lr, r3
    254e:	4770      	bx	lr

00002550 <__fini_array_start>:
    2550:	000000b1 	.word	0x000000b1
