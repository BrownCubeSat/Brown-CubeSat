
I2C_QUICK_START_MASTER_BASIC_USE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00002ba4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20000078  00002c1c  00010078  2**2
                  ALLOC
  3 .stack        00002000  20000148  00002cec  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001caa8  00000000  00000000  000100fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029a9  00000000  00000000  0002cba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004b9d  00000000  00000000  0002f54c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004b8  00000000  00000000  000340e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000498  00000000  00000000  000345a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000194a1  00000000  00000000  00034a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a877  00000000  00000000  0004deda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000897a6  00000000  00000000  00058751  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012d4  00000000  00000000  000e1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002148 	.word	0x20002148
       4:	000014a5 	.word	0x000014a5
       8:	000014a1 	.word	0x000014a1
       c:	000014a1 	.word	0x000014a1
	...
      2c:	000014a1 	.word	0x000014a1
	...
      38:	000014a1 	.word	0x000014a1
      3c:	000014a1 	.word	0x000014a1
      40:	000014a1 	.word	0x000014a1
      44:	000014a1 	.word	0x000014a1
      48:	000014a1 	.word	0x000014a1
      4c:	000014a1 	.word	0x000014a1
      50:	000014a1 	.word	0x000014a1
      54:	000014a1 	.word	0x000014a1
      58:	000014a1 	.word	0x000014a1
      5c:	000014a1 	.word	0x000014a1
      60:	000014a1 	.word	0x000014a1
      64:	00000979 	.word	0x00000979
      68:	00000989 	.word	0x00000989
      6c:	00000999 	.word	0x00000999
      70:	000009a9 	.word	0x000009a9
      74:	000009b9 	.word	0x000009b9
      78:	000009c9 	.word	0x000009c9
      7c:	000014a1 	.word	0x000014a1
      80:	000014a1 	.word	0x000014a1
      84:	000014a1 	.word	0x000014a1
      88:	000014a1 	.word	0x000014a1
      8c:	000014a1 	.word	0x000014a1
      90:	000014a1 	.word	0x000014a1
      94:	000014a1 	.word	0x000014a1
      98:	000014a1 	.word	0x000014a1
      9c:	000014a1 	.word	0x000014a1
      a0:	000014a1 	.word	0x000014a1
      a4:	000014a1 	.word	0x000014a1
      a8:	000014a1 	.word	0x000014a1
      ac:	000014a1 	.word	0x000014a1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000078 	.word	0x20000078
      d0:	00000000 	.word	0x00000000
      d4:	00002ba4 	.word	0x00002ba4

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002ba4 	.word	0x00002ba4
     104:	2000007c 	.word	0x2000007c
     108:	00002ba4 	.word	0x00002ba4
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b00      	cmp	r3, #0
     116:	d110      	bne.n	13a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     11c:	2b00      	cmp	r3, #0
     11e:	d109      	bne.n	134 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     120:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     122:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     126:	2200      	movs	r2, #0
     128:	4b07      	ldr	r3, [pc, #28]	; (148 <cpu_irq_enter_critical+0x38>)
     12a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     12c:	2201      	movs	r2, #1
     12e:	4b07      	ldr	r3, [pc, #28]	; (14c <cpu_irq_enter_critical+0x3c>)
     130:	701a      	strb	r2, [r3, #0]
     132:	e002      	b.n	13a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     134:	2200      	movs	r2, #0
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <cpu_irq_enter_critical+0x3c>)
     138:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <cpu_irq_enter_critical+0x34>)
     13c:	681a      	ldr	r2, [r3, #0]
     13e:	3201      	adds	r2, #1
     140:	601a      	str	r2, [r3, #0]
}
     142:	4770      	bx	lr
     144:	20000094 	.word	0x20000094
     148:	20000000 	.word	0x20000000
     14c:	20000098 	.word	0x20000098

00000150 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     150:	4b08      	ldr	r3, [pc, #32]	; (174 <cpu_irq_leave_critical+0x24>)
     152:	681a      	ldr	r2, [r3, #0]
     154:	3a01      	subs	r2, #1
     156:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     158:	681b      	ldr	r3, [r3, #0]
     15a:	2b00      	cmp	r3, #0
     15c:	d109      	bne.n	172 <cpu_irq_leave_critical+0x22>
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <cpu_irq_leave_critical+0x28>)
     160:	781b      	ldrb	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d005      	beq.n	172 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     166:	2201      	movs	r2, #1
     168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_leave_critical+0x2c>)
     16a:	701a      	strb	r2, [r3, #0]
     16c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     170:	b662      	cpsie	i
	}
}
     172:	4770      	bx	lr
     174:	20000094 	.word	0x20000094
     178:	20000098 	.word	0x20000098
     17c:	20000000 	.word	0x20000000

00000180 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     180:	b5f0      	push	{r4, r5, r6, r7, lr}
     182:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     184:	ac01      	add	r4, sp, #4
     186:	2501      	movs	r5, #1
     188:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     18a:	2700      	movs	r7, #0
     18c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     18e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     190:	203e      	movs	r0, #62	; 0x3e
     192:	1c21      	adds	r1, r4, #0
     194:	4e06      	ldr	r6, [pc, #24]	; (1b0 <system_board_init+0x30>)
     196:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     198:	2280      	movs	r2, #128	; 0x80
     19a:	05d2      	lsls	r2, r2, #23
     19c:	4b05      	ldr	r3, [pc, #20]	; (1b4 <system_board_init+0x34>)
     19e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1a4:	200f      	movs	r0, #15
     1a6:	1c21      	adds	r1, r4, #0
     1a8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     1aa:	b003      	add	sp, #12
     1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	000001b9 	.word	0x000001b9
     1b4:	41004480 	.word	0x41004480

000001b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1b8:	b500      	push	{lr}
     1ba:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1bc:	ab01      	add	r3, sp, #4
     1be:	2280      	movs	r2, #128	; 0x80
     1c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1c2:	780a      	ldrb	r2, [r1, #0]
     1c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1c6:	784a      	ldrb	r2, [r1, #1]
     1c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     1ca:	788a      	ldrb	r2, [r1, #2]
     1cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     1ce:	1c19      	adds	r1, r3, #0
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <port_pin_set_config+0x20>)
     1d2:	4798      	blx	r3
}
     1d4:	b003      	add	sp, #12
     1d6:	bd00      	pop	{pc}
     1d8:	0000144d 	.word	0x0000144d

000001dc <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     1dc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     1de:	2207      	movs	r2, #7
     1e0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     1e2:	421a      	tst	r2, r3
     1e4:	d1fc      	bne.n	1e0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     1e6:	4770      	bx	lr

000001e8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ea:	4647      	mov	r7, r8
     1ec:	b480      	push	{r7}
     1ee:	b082      	sub	sp, #8
     1f0:	1c07      	adds	r7, r0, #0
     1f2:	1c0c      	adds	r4, r1, #0
     1f4:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     1f6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     1f8:	1c08      	adds	r0, r1, #0
     1fa:	4b5d      	ldr	r3, [pc, #372]	; (370 <i2c_master_init+0x188>)
     1fc:	4798      	blx	r3
     1fe:	1c06      	adds	r6, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     200:	4b5c      	ldr	r3, [pc, #368]	; (374 <i2c_master_init+0x18c>)
     202:	6a19      	ldr	r1, [r3, #32]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     204:	1c82      	adds	r2, r0, #2
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     206:	2001      	movs	r0, #1
     208:	4090      	lsls	r0, r2
     20a:	1c02      	adds	r2, r0, #0
     20c:	430a      	orrs	r2, r1
     20e:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     210:	a901      	add	r1, sp, #4
     212:	7b2b      	ldrb	r3, [r5, #12]
     214:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     216:	3614      	adds	r6, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     218:	b2f6      	uxtb	r6, r6
     21a:	1c30      	adds	r0, r6, #0
     21c:	4b56      	ldr	r3, [pc, #344]	; (378 <i2c_master_init+0x190>)
     21e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     220:	1c30      	adds	r0, r6, #0
     222:	4b56      	ldr	r3, [pc, #344]	; (37c <i2c_master_init+0x194>)
     224:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     226:	7b28      	ldrb	r0, [r5, #12]
     228:	2100      	movs	r1, #0
     22a:	4b55      	ldr	r3, [pc, #340]	; (380 <i2c_master_init+0x198>)
     22c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     22e:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     230:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     232:	0799      	lsls	r1, r3, #30
     234:	d500      	bpl.n	238 <i2c_master_init+0x50>
     236:	e097      	b.n	368 <i2c_master_init+0x180>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     238:	6823      	ldr	r3, [r4, #0]
		return STATUS_BUSY;
     23a:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     23c:	07da      	lsls	r2, r3, #31
     23e:	d500      	bpl.n	242 <i2c_master_init+0x5a>
     240:	e092      	b.n	368 <i2c_master_init+0x180>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     242:	2314      	movs	r3, #20
     244:	6023      	str	r3, [r4, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     246:	683c      	ldr	r4, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     248:	1c20      	adds	r0, r4, #0
     24a:	4b49      	ldr	r3, [pc, #292]	; (370 <i2c_master_init+0x188>)
     24c:	4798      	blx	r3
     24e:	4680      	mov	r8, r0
     250:	2380      	movs	r3, #128	; 0x80
     252:	4669      	mov	r1, sp
     254:	700b      	strb	r3, [r1, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     256:	2300      	movs	r3, #0
     258:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     25a:	2201      	movs	r2, #1
     25c:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     25e:	70cb      	strb	r3, [r1, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     260:	69e8      	ldr	r0, [r5, #28]
	uint32_t pad1 = config->pinmux_pad1;
     262:	6a2e      	ldr	r6, [r5, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     264:	2800      	cmp	r0, #0
     266:	d103      	bne.n	270 <i2c_master_init+0x88>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     268:	1c20      	adds	r0, r4, #0
     26a:	2100      	movs	r1, #0
     26c:	4b45      	ldr	r3, [pc, #276]	; (384 <i2c_master_init+0x19c>)
     26e:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     270:	466a      	mov	r2, sp
     272:	7010      	strb	r0, [r2, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     274:	2202      	movs	r2, #2
     276:	466b      	mov	r3, sp
     278:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     27a:	0c03      	lsrs	r3, r0, #16
     27c:	b2d8      	uxtb	r0, r3
     27e:	4669      	mov	r1, sp
     280:	4b41      	ldr	r3, [pc, #260]	; (388 <i2c_master_init+0x1a0>)
     282:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     284:	2e00      	cmp	r6, #0
     286:	d104      	bne.n	292 <i2c_master_init+0xaa>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     288:	1c20      	adds	r0, r4, #0
     28a:	2101      	movs	r1, #1
     28c:	4b3d      	ldr	r3, [pc, #244]	; (384 <i2c_master_init+0x19c>)
     28e:	4798      	blx	r3
     290:	1c06      	adds	r6, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     292:	4669      	mov	r1, sp
     294:	700e      	strb	r6, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     296:	2302      	movs	r3, #2
     298:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     29a:	0c36      	lsrs	r6, r6, #16
     29c:	b2f0      	uxtb	r0, r6
     29e:	4b3a      	ldr	r3, [pc, #232]	; (388 <i2c_master_init+0x1a0>)
     2a0:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     2a2:	8aab      	ldrh	r3, [r5, #20]
     2a4:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     2a6:	8aeb      	ldrh	r3, [r5, #22]
     2a8:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2aa:	7e2a      	ldrb	r2, [r5, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     2ac:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     2ae:	2a00      	cmp	r2, #0
     2b0:	d104      	bne.n	2bc <i2c_master_init+0xd4>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     2b2:	4b36      	ldr	r3, [pc, #216]	; (38c <i2c_master_init+0x1a4>)
     2b4:	789b      	ldrb	r3, [r3, #2]
     2b6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     2b8:	0fdb      	lsrs	r3, r3, #31
     2ba:	01db      	lsls	r3, r3, #7
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     2bc:	692a      	ldr	r2, [r5, #16]
     2be:	2a00      	cmp	r2, #0
     2c0:	d000      	beq.n	2c4 <i2c_master_init+0xdc>
		tmp_ctrla |= config->start_hold_time;
     2c2:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     2c4:	68aa      	ldr	r2, [r5, #8]
     2c6:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     2c8:	2224      	movs	r2, #36	; 0x24
     2ca:	5caa      	ldrb	r2, [r5, r2]
     2cc:	2a00      	cmp	r2, #0
     2ce:	d002      	beq.n	2d6 <i2c_master_init+0xee>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     2d0:	2280      	movs	r2, #128	; 0x80
     2d2:	05d2      	lsls	r2, r2, #23
     2d4:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     2d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     2d8:	2a00      	cmp	r2, #0
     2da:	d000      	beq.n	2de <i2c_master_init+0xf6>
		tmp_ctrla |= config->inactive_timeout;
     2dc:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     2de:	222c      	movs	r2, #44	; 0x2c
     2e0:	5caa      	ldrb	r2, [r5, r2]
     2e2:	2a00      	cmp	r2, #0
     2e4:	d002      	beq.n	2ec <i2c_master_init+0x104>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     2e6:	2280      	movs	r2, #128	; 0x80
     2e8:	0512      	lsls	r2, r2, #20
     2ea:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     2ec:	222d      	movs	r2, #45	; 0x2d
     2ee:	5caa      	ldrb	r2, [r5, r2]
     2f0:	2a00      	cmp	r2, #0
     2f2:	d002      	beq.n	2fa <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     2f4:	2280      	movs	r2, #128	; 0x80
     2f6:	0412      	lsls	r2, r2, #16
     2f8:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     2fa:	222e      	movs	r2, #46	; 0x2e
     2fc:	5caa      	ldrb	r2, [r5, r2]
     2fe:	2a00      	cmp	r2, #0
     300:	d002      	beq.n	308 <i2c_master_init+0x120>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     302:	2280      	movs	r2, #128	; 0x80
     304:	03d2      	lsls	r2, r2, #15
     306:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     308:	6822      	ldr	r2, [r4, #0]
     30a:	4313      	orrs	r3, r2
     30c:	6023      	str	r3, [r4, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     30e:	2380      	movs	r3, #128	; 0x80
     310:	005b      	lsls	r3, r3, #1
     312:	6063      	str	r3, [r4, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     314:	4646      	mov	r6, r8
     316:	3614      	adds	r6, #20
     318:	b2f6      	uxtb	r6, r6
     31a:	1c30      	adds	r0, r6, #0
     31c:	4b1c      	ldr	r3, [pc, #112]	; (390 <i2c_master_init+0x1a8>)
     31e:	4798      	blx	r3
     320:	21fa      	movs	r1, #250	; 0xfa
     322:	00c9      	lsls	r1, r1, #3
     324:	682b      	ldr	r3, [r5, #0]
     326:	4359      	muls	r1, r3
     328:	1e4b      	subs	r3, r1, #1
     32a:	1818      	adds	r0, r3, r0
     32c:	4b19      	ldr	r3, [pc, #100]	; (394 <i2c_master_init+0x1ac>)
     32e:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     330:	1f47      	subs	r7, r0, #5

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     332:	2fff      	cmp	r7, #255	; 0xff
     334:	d80d      	bhi.n	352 <i2c_master_init+0x16a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     336:	1c30      	adds	r0, r6, #0
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <i2c_master_init+0x1a8>)
     33a:	4798      	blx	r3
     33c:	686b      	ldr	r3, [r5, #4]
     33e:	21fa      	movs	r1, #250	; 0xfa
     340:	00c9      	lsls	r1, r1, #3
     342:	4359      	muls	r1, r3
     344:	1e4b      	subs	r3, r1, #1
     346:	1818      	adds	r0, r3, r0
     348:	4b12      	ldr	r3, [pc, #72]	; (394 <i2c_master_init+0x1ac>)
     34a:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     34c:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     34e:	28ff      	cmp	r0, #255	; 0xff
     350:	d901      	bls.n	356 <i2c_master_init+0x16e>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     352:	2040      	movs	r0, #64	; 0x40
     354:	e008      	b.n	368 <i2c_master_init+0x180>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     356:	0400      	lsls	r0, r0, #16
     358:	23ff      	movs	r3, #255	; 0xff
     35a:	041b      	lsls	r3, r3, #16
     35c:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     35e:	23ff      	movs	r3, #255	; 0xff
     360:	401f      	ands	r7, r3
     362:	4307      	orrs	r7, r0
     364:	60e7      	str	r7, [r4, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     366:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     368:	b002      	add	sp, #8
     36a:	bc04      	pop	{r2}
     36c:	4690      	mov	r8, r2
     36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     370:	000008d1 	.word	0x000008d1
     374:	40000400 	.word	0x40000400
     378:	00001371 	.word	0x00001371
     37c:	000012e5 	.word	0x000012e5
     380:	000006f9 	.word	0x000006f9
     384:	00000749 	.word	0x00000749
     388:	0000144d 	.word	0x0000144d
     38c:	41002000 	.word	0x41002000
     390:	0000138d 	.word	0x0000138d
     394:	000018b5 	.word	0x000018b5

00000398 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     398:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     39a:	7e1a      	ldrb	r2, [r3, #24]
     39c:	0791      	lsls	r1, r2, #30
     39e:	d506      	bpl.n	3ae <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     3a0:	2202      	movs	r2, #2
     3a2:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3a4:	8b5b      	ldrh	r3, [r3, #26]
     3a6:	079a      	lsls	r2, r3, #30
     3a8:	d50b      	bpl.n	3c2 <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     3aa:	2041      	movs	r0, #65	; 0x41
     3ac:	e00c      	b.n	3c8 <_i2c_master_address_response+0x30>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     3ae:	8b5a      	ldrh	r2, [r3, #26]
     3b0:	0751      	lsls	r1, r2, #29
     3b2:	d508      	bpl.n	3c6 <_i2c_master_address_response+0x2e>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     3b4:	6859      	ldr	r1, [r3, #4]
     3b6:	22c0      	movs	r2, #192	; 0xc0
     3b8:	0292      	lsls	r2, r2, #10
     3ba:	430a      	orrs	r2, r1
     3bc:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     3be:	2018      	movs	r0, #24
     3c0:	e002      	b.n	3c8 <_i2c_master_address_response+0x30>
	}

	return STATUS_OK;
     3c2:	2000      	movs	r0, #0
     3c4:	e000      	b.n	3c8 <_i2c_master_address_response+0x30>
     3c6:	2000      	movs	r0, #0
}
     3c8:	4770      	bx	lr
     3ca:	46c0      	nop			; (mov r8, r8)

000003cc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     3cc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3ce:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     3d0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3d2:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3d4:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3d6:	e004      	b.n	3e2 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     3d8:	3301      	adds	r3, #1
     3da:	b29b      	uxth	r3, r3
     3dc:	8901      	ldrh	r1, [r0, #8]
     3de:	4299      	cmp	r1, r3
     3e0:	d907      	bls.n	3f2 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3e2:	7e11      	ldrb	r1, [r2, #24]
     3e4:	4221      	tst	r1, r4
     3e6:	d106      	bne.n	3f6 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     3e8:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     3ea:	4229      	tst	r1, r5
     3ec:	d0f4      	beq.n	3d8 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     3ee:	2000      	movs	r0, #0
     3f0:	e002      	b.n	3f8 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     3f2:	2012      	movs	r0, #18
     3f4:	e000      	b.n	3f8 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     3f6:	2000      	movs	r0, #0
}
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	46c0      	nop			; (mov r8, r8)

000003fc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     3fc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3fe:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     400:	6862      	ldr	r2, [r4, #4]
     402:	2380      	movs	r3, #128	; 0x80
     404:	02db      	lsls	r3, r3, #11
     406:	4313      	orrs	r3, r2
     408:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     40a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     40c:	4b02      	ldr	r3, [pc, #8]	; (418 <_i2c_master_send_hs_master_code+0x1c>)
     40e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     410:	2301      	movs	r3, #1
     412:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     414:	bd10      	pop	{r4, pc}
     416:	46c0      	nop			; (mov r8, r8)
     418:	000003cd 	.word	0x000003cd

0000041c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     41c:	b5f0      	push	{r4, r5, r6, r7, lr}
     41e:	465f      	mov	r7, fp
     420:	4656      	mov	r6, sl
     422:	464d      	mov	r5, r9
     424:	4644      	mov	r4, r8
     426:	b4f0      	push	{r4, r5, r6, r7}
     428:	b083      	sub	sp, #12
     42a:	1c06      	adds	r6, r0, #0
     42c:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     42e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     430:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     432:	4b32      	ldr	r3, [pc, #200]	; (4fc <_i2c_master_write_packet+0xe0>)
     434:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     436:	7a7b      	ldrb	r3, [r7, #9]
     438:	2b00      	cmp	r3, #0
     43a:	d003      	beq.n	444 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     43c:	7ab9      	ldrb	r1, [r7, #10]
     43e:	1c30      	adds	r0, r6, #0
     440:	4b2f      	ldr	r3, [pc, #188]	; (500 <_i2c_master_write_packet+0xe4>)
     442:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     444:	686a      	ldr	r2, [r5, #4]
     446:	4b2f      	ldr	r3, [pc, #188]	; (504 <_i2c_master_write_packet+0xe8>)
     448:	4013      	ands	r3, r2
     44a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     44c:	7a3b      	ldrb	r3, [r7, #8]
     44e:	2b00      	cmp	r3, #0
     450:	d009      	beq.n	466 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     452:	7a7a      	ldrb	r2, [r7, #9]
     454:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     456:	883b      	ldrh	r3, [r7, #0]
     458:	005b      	lsls	r3, r3, #1
     45a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     45c:	2280      	movs	r2, #128	; 0x80
     45e:	0212      	lsls	r2, r2, #8
     460:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     462:	626b      	str	r3, [r5, #36]	; 0x24
     464:	e005      	b.n	472 <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     466:	7a7a      	ldrb	r2, [r7, #9]
     468:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     46a:	883b      	ldrh	r3, [r7, #0]
     46c:	005b      	lsls	r3, r3, #1
     46e:	4313      	orrs	r3, r2
     470:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     472:	1c30      	adds	r0, r6, #0
     474:	4b24      	ldr	r3, [pc, #144]	; (508 <_i2c_master_write_packet+0xec>)
     476:	4798      	blx	r3
     478:	1c03      	adds	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     47a:	2b00      	cmp	r3, #0
     47c:	d136      	bne.n	4ec <_i2c_master_write_packet+0xd0>
		tmp_status = _i2c_master_address_response(module);
     47e:	1c30      	adds	r0, r6, #0
     480:	4b22      	ldr	r3, [pc, #136]	; (50c <_i2c_master_write_packet+0xf0>)
     482:	4798      	blx	r3
     484:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     486:	2800      	cmp	r0, #0
     488:	d130      	bne.n	4ec <_i2c_master_write_packet+0xd0>
     48a:	46a0      	mov	r8, r4
     48c:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     48e:	2320      	movs	r3, #32
     490:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     492:	4a1a      	ldr	r2, [pc, #104]	; (4fc <_i2c_master_write_packet+0xe0>)
     494:	4693      	mov	fp, r2
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     496:	4b1c      	ldr	r3, [pc, #112]	; (508 <_i2c_master_write_packet+0xec>)
     498:	469a      	mov	sl, r3
     49a:	e011      	b.n	4c0 <_i2c_master_write_packet+0xa4>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     49c:	8b6b      	ldrh	r3, [r5, #26]
     49e:	464a      	mov	r2, r9
     4a0:	4213      	tst	r3, r2
     4a2:	d022      	beq.n	4ea <_i2c_master_write_packet+0xce>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     4a4:	1c30      	adds	r0, r6, #0
     4a6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	5d1a      	ldrb	r2, [r3, r4]
     4ac:	2328      	movs	r3, #40	; 0x28
     4ae:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     4b0:	1c30      	adds	r0, r6, #0
     4b2:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     4b4:	2800      	cmp	r0, #0
     4b6:	d106      	bne.n	4c6 <_i2c_master_write_packet+0xaa>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     4b8:	8b6b      	ldrh	r3, [r5, #26]
     4ba:	3401      	adds	r4, #1
     4bc:	075a      	lsls	r2, r3, #29
     4be:	d404      	bmi.n	4ca <_i2c_master_write_packet+0xae>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     4c0:	4544      	cmp	r4, r8
     4c2:	d1eb      	bne.n	49c <_i2c_master_write_packet+0x80>
     4c4:	e003      	b.n	4ce <_i2c_master_write_packet+0xb2>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     4c6:	9001      	str	r0, [sp, #4]
     4c8:	e001      	b.n	4ce <_i2c_master_write_packet+0xb2>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     4ca:	231e      	movs	r3, #30
     4cc:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     4ce:	7ab3      	ldrb	r3, [r6, #10]
     4d0:	9801      	ldr	r0, [sp, #4]
     4d2:	2b00      	cmp	r3, #0
     4d4:	d00a      	beq.n	4ec <_i2c_master_write_packet+0xd0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     4d6:	1c30      	adds	r0, r6, #0
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <_i2c_master_write_packet+0xe0>)
     4da:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4dc:	686a      	ldr	r2, [r5, #4]
     4de:	23c0      	movs	r3, #192	; 0xc0
     4e0:	029b      	lsls	r3, r3, #10
     4e2:	4313      	orrs	r3, r2
     4e4:	606b      	str	r3, [r5, #4]
     4e6:	9801      	ldr	r0, [sp, #4]
     4e8:	e000      	b.n	4ec <_i2c_master_write_packet+0xd0>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     4ea:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     4ec:	b003      	add	sp, #12
     4ee:	bc3c      	pop	{r2, r3, r4, r5}
     4f0:	4690      	mov	r8, r2
     4f2:	4699      	mov	r9, r3
     4f4:	46a2      	mov	sl, r4
     4f6:	46ab      	mov	fp, r5
     4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	000001dd 	.word	0x000001dd
     500:	000003fd 	.word	0x000003fd
     504:	fffbffff 	.word	0xfffbffff
     508:	000003cd 	.word	0x000003cd
     50c:	00000399 	.word	0x00000399

00000510 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     510:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     512:	2301      	movs	r3, #1
     514:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     516:	4b01      	ldr	r3, [pc, #4]	; (51c <i2c_master_write_packet_wait+0xc>)
     518:	4798      	blx	r3
}
     51a:	bd08      	pop	{r3, pc}
     51c:	0000041d 	.word	0x0000041d

00000520 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     520:	b510      	push	{r4, lr}
     522:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     524:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     526:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     528:	4299      	cmp	r1, r3
     52a:	d30c      	bcc.n	546 <_sercom_get_sync_baud_val+0x26>
     52c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     52e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     530:	1c60      	adds	r0, r4, #1
     532:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     534:	428b      	cmp	r3, r1
     536:	d801      	bhi.n	53c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     538:	1c04      	adds	r4, r0, #0
     53a:	e7f8      	b.n	52e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     53c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     53e:	2cff      	cmp	r4, #255	; 0xff
     540:	d801      	bhi.n	546 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     542:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     544:	2000      	movs	r0, #0
	}
}
     546:	bd10      	pop	{r4, pc}

00000548 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	465f      	mov	r7, fp
     54c:	4656      	mov	r6, sl
     54e:	464d      	mov	r5, r9
     550:	4644      	mov	r4, r8
     552:	b4f0      	push	{r4, r5, r6, r7}
     554:	b087      	sub	sp, #28
     556:	1c06      	adds	r6, r0, #0
     558:	1c0d      	adds	r5, r1, #0
     55a:	9204      	str	r2, [sp, #16]
     55c:	aa10      	add	r2, sp, #64	; 0x40
     55e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     560:	1c32      	adds	r2, r6, #0
     562:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     564:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     566:	428a      	cmp	r2, r1
     568:	d900      	bls.n	56c <_sercom_get_async_baud_val+0x24>
     56a:	e0b3      	b.n	6d4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     56c:	2b00      	cmp	r3, #0
     56e:	d14b      	bne.n	608 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     570:	2100      	movs	r1, #0
     572:	1c32      	adds	r2, r6, #0
     574:	4c5e      	ldr	r4, [pc, #376]	; (6f0 <_sercom_get_async_baud_val+0x1a8>)
     576:	47a0      	blx	r4
     578:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     57a:	1c2e      	adds	r6, r5, #0
     57c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     57e:	2000      	movs	r0, #0
     580:	2100      	movs	r1, #0
     582:	2200      	movs	r2, #0
     584:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     586:	243f      	movs	r4, #63	; 0x3f
     588:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     58a:	2501      	movs	r5, #1
     58c:	46a8      	mov	r8, r5
     58e:	9002      	str	r0, [sp, #8]
     590:	9103      	str	r1, [sp, #12]
     592:	4661      	mov	r1, ip
     594:	3920      	subs	r1, #32
     596:	d403      	bmi.n	5a0 <_sercom_get_async_baud_val+0x58>
     598:	4640      	mov	r0, r8
     59a:	4088      	lsls	r0, r1
     59c:	4681      	mov	r9, r0
     59e:	e005      	b.n	5ac <_sercom_get_async_baud_val+0x64>
     5a0:	2120      	movs	r1, #32
     5a2:	4665      	mov	r5, ip
     5a4:	1b4c      	subs	r4, r1, r5
     5a6:	4640      	mov	r0, r8
     5a8:	40e0      	lsrs	r0, r4
     5aa:	4681      	mov	r9, r0
     5ac:	4641      	mov	r1, r8
     5ae:	4664      	mov	r4, ip
     5b0:	40a1      	lsls	r1, r4
     5b2:	468a      	mov	sl, r1

		r = r << 1;
     5b4:	1c10      	adds	r0, r2, #0
     5b6:	1c19      	adds	r1, r3, #0
     5b8:	1880      	adds	r0, r0, r2
     5ba:	4159      	adcs	r1, r3
     5bc:	1c02      	adds	r2, r0, #0
     5be:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     5c0:	465d      	mov	r5, fp
     5c2:	464c      	mov	r4, r9
     5c4:	4225      	tst	r5, r4
     5c6:	d002      	beq.n	5ce <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     5c8:	4642      	mov	r2, r8
     5ca:	4302      	orrs	r2, r0
     5cc:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     5ce:	429f      	cmp	r7, r3
     5d0:	d80c      	bhi.n	5ec <_sercom_get_async_baud_val+0xa4>
     5d2:	d101      	bne.n	5d8 <_sercom_get_async_baud_val+0x90>
     5d4:	4296      	cmp	r6, r2
     5d6:	d809      	bhi.n	5ec <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     5d8:	1b92      	subs	r2, r2, r6
     5da:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     5dc:	4650      	mov	r0, sl
     5de:	9d02      	ldr	r5, [sp, #8]
     5e0:	4328      	orrs	r0, r5
     5e2:	4649      	mov	r1, r9
     5e4:	9c03      	ldr	r4, [sp, #12]
     5e6:	4321      	orrs	r1, r4
     5e8:	9002      	str	r0, [sp, #8]
     5ea:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5ec:	4665      	mov	r5, ip
     5ee:	3d01      	subs	r5, #1
     5f0:	46ac      	mov	ip, r5
     5f2:	d2ce      	bcs.n	592 <_sercom_get_async_baud_val+0x4a>
     5f4:	9802      	ldr	r0, [sp, #8]
     5f6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5f8:	4b3c      	ldr	r3, [pc, #240]	; (6ec <_sercom_get_async_baud_val+0x1a4>)
     5fa:	4a3b      	ldr	r2, [pc, #236]	; (6e8 <_sercom_get_async_baud_val+0x1a0>)
     5fc:	1a12      	subs	r2, r2, r0
     5fe:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     600:	0c12      	lsrs	r2, r2, #16
     602:	041b      	lsls	r3, r3, #16
     604:	431a      	orrs	r2, r3
     606:	e062      	b.n	6ce <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     608:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     60a:	2b01      	cmp	r3, #1
     60c:	d15f      	bne.n	6ce <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     60e:	0f4f      	lsrs	r7, r1, #29
     610:	46b9      	mov	r9, r7
     612:	00cd      	lsls	r5, r1, #3
     614:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     616:	2100      	movs	r1, #0
     618:	1c32      	adds	r2, r6, #0
     61a:	2300      	movs	r3, #0
     61c:	4c34      	ldr	r4, [pc, #208]	; (6f0 <_sercom_get_async_baud_val+0x1a8>)
     61e:	47a0      	blx	r4
     620:	1c06      	adds	r6, r0, #0
     622:	1c0f      	adds	r7, r1, #0
     624:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     626:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     628:	9602      	str	r6, [sp, #8]
     62a:	9703      	str	r7, [sp, #12]
     62c:	469a      	mov	sl, r3
     62e:	4650      	mov	r0, sl
     630:	b2c0      	uxtb	r0, r0
     632:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     634:	2100      	movs	r1, #0
     636:	4688      	mov	r8, r1
     638:	2200      	movs	r2, #0
     63a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     63c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     63e:	1c27      	adds	r7, r4, #0
     640:	3f20      	subs	r7, #32
     642:	d403      	bmi.n	64c <_sercom_get_async_baud_val+0x104>
     644:	1c2e      	adds	r6, r5, #0
     646:	40be      	lsls	r6, r7
     648:	9601      	str	r6, [sp, #4]
     64a:	e004      	b.n	656 <_sercom_get_async_baud_val+0x10e>
     64c:	2020      	movs	r0, #32
     64e:	1b07      	subs	r7, r0, r4
     650:	1c29      	adds	r1, r5, #0
     652:	40f9      	lsrs	r1, r7
     654:	9101      	str	r1, [sp, #4]
     656:	1c2e      	adds	r6, r5, #0
     658:	40a6      	lsls	r6, r4
     65a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     65c:	1c10      	adds	r0, r2, #0
     65e:	1c19      	adds	r1, r3, #0
     660:	1880      	adds	r0, r0, r2
     662:	4159      	adcs	r1, r3
     664:	1c02      	adds	r2, r0, #0
     666:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     668:	465f      	mov	r7, fp
     66a:	4037      	ands	r7, r6
     66c:	46bc      	mov	ip, r7
     66e:	9e01      	ldr	r6, [sp, #4]
     670:	464f      	mov	r7, r9
     672:	403e      	ands	r6, r7
     674:	4667      	mov	r7, ip
     676:	433e      	orrs	r6, r7
     678:	d002      	beq.n	680 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     67a:	1c2a      	adds	r2, r5, #0
     67c:	4302      	orrs	r2, r0
     67e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     680:	9803      	ldr	r0, [sp, #12]
     682:	4298      	cmp	r0, r3
     684:	d80b      	bhi.n	69e <_sercom_get_async_baud_val+0x156>
     686:	d102      	bne.n	68e <_sercom_get_async_baud_val+0x146>
     688:	9902      	ldr	r1, [sp, #8]
     68a:	4291      	cmp	r1, r2
     68c:	d807      	bhi.n	69e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     68e:	9e02      	ldr	r6, [sp, #8]
     690:	9f03      	ldr	r7, [sp, #12]
     692:	1b92      	subs	r2, r2, r6
     694:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     696:	4647      	mov	r7, r8
     698:	9800      	ldr	r0, [sp, #0]
     69a:	4307      	orrs	r7, r0
     69c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     69e:	3c01      	subs	r4, #1
     6a0:	d2cd      	bcs.n	63e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     6a2:	4641      	mov	r1, r8
     6a4:	4652      	mov	r2, sl
     6a6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     6a8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     6aa:	4c12      	ldr	r4, [pc, #72]	; (6f4 <_sercom_get_async_baud_val+0x1ac>)
     6ac:	42a3      	cmp	r3, r4
     6ae:	d908      	bls.n	6c2 <_sercom_get_async_baud_val+0x17a>
     6b0:	9a05      	ldr	r2, [sp, #20]
     6b2:	3201      	adds	r2, #1
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	9205      	str	r2, [sp, #20]
     6b8:	2601      	movs	r6, #1
     6ba:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     6bc:	4657      	mov	r7, sl
     6be:	2f08      	cmp	r7, #8
     6c0:	d1b5      	bne.n	62e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6c2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     6c4:	9805      	ldr	r0, [sp, #20]
     6c6:	2808      	cmp	r0, #8
     6c8:	d004      	beq.n	6d4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     6ca:	0342      	lsls	r2, r0, #13
     6cc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     6ce:	9c04      	ldr	r4, [sp, #16]
     6d0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     6d2:	2400      	movs	r4, #0
}
     6d4:	1c20      	adds	r0, r4, #0
     6d6:	b007      	add	sp, #28
     6d8:	bc3c      	pop	{r2, r3, r4, r5}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	46ab      	mov	fp, r5
     6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000000 	.word	0x00000000
     6ec:	00000001 	.word	0x00000001
     6f0:	00001955 	.word	0x00001955
     6f4:	00001fff 	.word	0x00001fff

000006f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6f8:	b510      	push	{r4, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     6fe:	4b0f      	ldr	r3, [pc, #60]	; (73c <sercom_set_gclk_generator+0x44>)
     700:	781b      	ldrb	r3, [r3, #0]
     702:	2b00      	cmp	r3, #0
     704:	d001      	beq.n	70a <sercom_set_gclk_generator+0x12>
     706:	2900      	cmp	r1, #0
     708:	d00d      	beq.n	726 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     70a:	a901      	add	r1, sp, #4
     70c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     70e:	2013      	movs	r0, #19
     710:	4b0b      	ldr	r3, [pc, #44]	; (740 <sercom_set_gclk_generator+0x48>)
     712:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     714:	2013      	movs	r0, #19
     716:	4b0b      	ldr	r3, [pc, #44]	; (744 <sercom_set_gclk_generator+0x4c>)
     718:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     71a:	4b08      	ldr	r3, [pc, #32]	; (73c <sercom_set_gclk_generator+0x44>)
     71c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     71e:	2201      	movs	r2, #1
     720:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     722:	2000      	movs	r0, #0
     724:	e007      	b.n	736 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <sercom_set_gclk_generator+0x44>)
     728:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     72a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     72c:	1b14      	subs	r4, r2, r4
     72e:	1e62      	subs	r2, r4, #1
     730:	4194      	sbcs	r4, r2
     732:	4264      	negs	r4, r4
     734:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     736:	b002      	add	sp, #8
     738:	bd10      	pop	{r4, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	2000009c 	.word	0x2000009c
     740:	00001371 	.word	0x00001371
     744:	000012e5 	.word	0x000012e5

00000748 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     748:	4b44      	ldr	r3, [pc, #272]	; (85c <_sercom_get_default_pad+0x114>)
     74a:	4298      	cmp	r0, r3
     74c:	d033      	beq.n	7b6 <_sercom_get_default_pad+0x6e>
     74e:	d806      	bhi.n	75e <_sercom_get_default_pad+0x16>
     750:	4b43      	ldr	r3, [pc, #268]	; (860 <_sercom_get_default_pad+0x118>)
     752:	4298      	cmp	r0, r3
     754:	d00d      	beq.n	772 <_sercom_get_default_pad+0x2a>
     756:	4b43      	ldr	r3, [pc, #268]	; (864 <_sercom_get_default_pad+0x11c>)
     758:	4298      	cmp	r0, r3
     75a:	d01b      	beq.n	794 <_sercom_get_default_pad+0x4c>
     75c:	e06f      	b.n	83e <_sercom_get_default_pad+0xf6>
     75e:	4b42      	ldr	r3, [pc, #264]	; (868 <_sercom_get_default_pad+0x120>)
     760:	4298      	cmp	r0, r3
     762:	d04a      	beq.n	7fa <_sercom_get_default_pad+0xb2>
     764:	4b41      	ldr	r3, [pc, #260]	; (86c <_sercom_get_default_pad+0x124>)
     766:	4298      	cmp	r0, r3
     768:	d058      	beq.n	81c <_sercom_get_default_pad+0xd4>
     76a:	4b41      	ldr	r3, [pc, #260]	; (870 <_sercom_get_default_pad+0x128>)
     76c:	4298      	cmp	r0, r3
     76e:	d166      	bne.n	83e <_sercom_get_default_pad+0xf6>
     770:	e032      	b.n	7d8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     772:	2901      	cmp	r1, #1
     774:	d065      	beq.n	842 <_sercom_get_default_pad+0xfa>
     776:	2900      	cmp	r1, #0
     778:	d004      	beq.n	784 <_sercom_get_default_pad+0x3c>
     77a:	2902      	cmp	r1, #2
     77c:	d006      	beq.n	78c <_sercom_get_default_pad+0x44>
     77e:	2903      	cmp	r1, #3
     780:	d006      	beq.n	790 <_sercom_get_default_pad+0x48>
     782:	e001      	b.n	788 <_sercom_get_default_pad+0x40>
     784:	483b      	ldr	r0, [pc, #236]	; (874 <_sercom_get_default_pad+0x12c>)
     786:	e067      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     788:	2000      	movs	r0, #0
     78a:	e065      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78c:	483a      	ldr	r0, [pc, #232]	; (878 <_sercom_get_default_pad+0x130>)
     78e:	e063      	b.n	858 <_sercom_get_default_pad+0x110>
     790:	483a      	ldr	r0, [pc, #232]	; (87c <_sercom_get_default_pad+0x134>)
     792:	e061      	b.n	858 <_sercom_get_default_pad+0x110>
     794:	2901      	cmp	r1, #1
     796:	d056      	beq.n	846 <_sercom_get_default_pad+0xfe>
     798:	2900      	cmp	r1, #0
     79a:	d004      	beq.n	7a6 <_sercom_get_default_pad+0x5e>
     79c:	2902      	cmp	r1, #2
     79e:	d006      	beq.n	7ae <_sercom_get_default_pad+0x66>
     7a0:	2903      	cmp	r1, #3
     7a2:	d006      	beq.n	7b2 <_sercom_get_default_pad+0x6a>
     7a4:	e001      	b.n	7aa <_sercom_get_default_pad+0x62>
     7a6:	2003      	movs	r0, #3
     7a8:	e056      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7aa:	2000      	movs	r0, #0
     7ac:	e054      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ae:	4834      	ldr	r0, [pc, #208]	; (880 <_sercom_get_default_pad+0x138>)
     7b0:	e052      	b.n	858 <_sercom_get_default_pad+0x110>
     7b2:	4834      	ldr	r0, [pc, #208]	; (884 <_sercom_get_default_pad+0x13c>)
     7b4:	e050      	b.n	858 <_sercom_get_default_pad+0x110>
     7b6:	2901      	cmp	r1, #1
     7b8:	d047      	beq.n	84a <_sercom_get_default_pad+0x102>
     7ba:	2900      	cmp	r1, #0
     7bc:	d004      	beq.n	7c8 <_sercom_get_default_pad+0x80>
     7be:	2902      	cmp	r1, #2
     7c0:	d006      	beq.n	7d0 <_sercom_get_default_pad+0x88>
     7c2:	2903      	cmp	r1, #3
     7c4:	d006      	beq.n	7d4 <_sercom_get_default_pad+0x8c>
     7c6:	e001      	b.n	7cc <_sercom_get_default_pad+0x84>
     7c8:	482f      	ldr	r0, [pc, #188]	; (888 <_sercom_get_default_pad+0x140>)
     7ca:	e045      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7cc:	2000      	movs	r0, #0
     7ce:	e043      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7d0:	482e      	ldr	r0, [pc, #184]	; (88c <_sercom_get_default_pad+0x144>)
     7d2:	e041      	b.n	858 <_sercom_get_default_pad+0x110>
     7d4:	482e      	ldr	r0, [pc, #184]	; (890 <_sercom_get_default_pad+0x148>)
     7d6:	e03f      	b.n	858 <_sercom_get_default_pad+0x110>
     7d8:	2901      	cmp	r1, #1
     7da:	d038      	beq.n	84e <_sercom_get_default_pad+0x106>
     7dc:	2900      	cmp	r1, #0
     7de:	d004      	beq.n	7ea <_sercom_get_default_pad+0xa2>
     7e0:	2902      	cmp	r1, #2
     7e2:	d006      	beq.n	7f2 <_sercom_get_default_pad+0xaa>
     7e4:	2903      	cmp	r1, #3
     7e6:	d006      	beq.n	7f6 <_sercom_get_default_pad+0xae>
     7e8:	e001      	b.n	7ee <_sercom_get_default_pad+0xa6>
     7ea:	482a      	ldr	r0, [pc, #168]	; (894 <_sercom_get_default_pad+0x14c>)
     7ec:	e034      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ee:	2000      	movs	r0, #0
     7f0:	e032      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7f2:	4829      	ldr	r0, [pc, #164]	; (898 <_sercom_get_default_pad+0x150>)
     7f4:	e030      	b.n	858 <_sercom_get_default_pad+0x110>
     7f6:	4829      	ldr	r0, [pc, #164]	; (89c <_sercom_get_default_pad+0x154>)
     7f8:	e02e      	b.n	858 <_sercom_get_default_pad+0x110>
     7fa:	2901      	cmp	r1, #1
     7fc:	d029      	beq.n	852 <_sercom_get_default_pad+0x10a>
     7fe:	2900      	cmp	r1, #0
     800:	d004      	beq.n	80c <_sercom_get_default_pad+0xc4>
     802:	2902      	cmp	r1, #2
     804:	d006      	beq.n	814 <_sercom_get_default_pad+0xcc>
     806:	2903      	cmp	r1, #3
     808:	d006      	beq.n	818 <_sercom_get_default_pad+0xd0>
     80a:	e001      	b.n	810 <_sercom_get_default_pad+0xc8>
     80c:	4824      	ldr	r0, [pc, #144]	; (8a0 <_sercom_get_default_pad+0x158>)
     80e:	e023      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     810:	2000      	movs	r0, #0
     812:	e021      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     814:	4823      	ldr	r0, [pc, #140]	; (8a4 <_sercom_get_default_pad+0x15c>)
     816:	e01f      	b.n	858 <_sercom_get_default_pad+0x110>
     818:	4823      	ldr	r0, [pc, #140]	; (8a8 <_sercom_get_default_pad+0x160>)
     81a:	e01d      	b.n	858 <_sercom_get_default_pad+0x110>
     81c:	2901      	cmp	r1, #1
     81e:	d01a      	beq.n	856 <_sercom_get_default_pad+0x10e>
     820:	2900      	cmp	r1, #0
     822:	d004      	beq.n	82e <_sercom_get_default_pad+0xe6>
     824:	2902      	cmp	r1, #2
     826:	d006      	beq.n	836 <_sercom_get_default_pad+0xee>
     828:	2903      	cmp	r1, #3
     82a:	d006      	beq.n	83a <_sercom_get_default_pad+0xf2>
     82c:	e001      	b.n	832 <_sercom_get_default_pad+0xea>
     82e:	481f      	ldr	r0, [pc, #124]	; (8ac <_sercom_get_default_pad+0x164>)
     830:	e012      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     832:	2000      	movs	r0, #0
     834:	e010      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     836:	481e      	ldr	r0, [pc, #120]	; (8b0 <_sercom_get_default_pad+0x168>)
     838:	e00e      	b.n	858 <_sercom_get_default_pad+0x110>
     83a:	481e      	ldr	r0, [pc, #120]	; (8b4 <_sercom_get_default_pad+0x16c>)
     83c:	e00c      	b.n	858 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     83e:	2000      	movs	r0, #0
     840:	e00a      	b.n	858 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     842:	481d      	ldr	r0, [pc, #116]	; (8b8 <_sercom_get_default_pad+0x170>)
     844:	e008      	b.n	858 <_sercom_get_default_pad+0x110>
     846:	481d      	ldr	r0, [pc, #116]	; (8bc <_sercom_get_default_pad+0x174>)
     848:	e006      	b.n	858 <_sercom_get_default_pad+0x110>
     84a:	481d      	ldr	r0, [pc, #116]	; (8c0 <_sercom_get_default_pad+0x178>)
     84c:	e004      	b.n	858 <_sercom_get_default_pad+0x110>
     84e:	481d      	ldr	r0, [pc, #116]	; (8c4 <_sercom_get_default_pad+0x17c>)
     850:	e002      	b.n	858 <_sercom_get_default_pad+0x110>
     852:	481d      	ldr	r0, [pc, #116]	; (8c8 <_sercom_get_default_pad+0x180>)
     854:	e000      	b.n	858 <_sercom_get_default_pad+0x110>
     856:	481d      	ldr	r0, [pc, #116]	; (8cc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     858:	4770      	bx	lr
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	42001000 	.word	0x42001000
     860:	42000800 	.word	0x42000800
     864:	42000c00 	.word	0x42000c00
     868:	42001800 	.word	0x42001800
     86c:	42001c00 	.word	0x42001c00
     870:	42001400 	.word	0x42001400
     874:	00040003 	.word	0x00040003
     878:	00060003 	.word	0x00060003
     87c:	00070003 	.word	0x00070003
     880:	001e0003 	.word	0x001e0003
     884:	001f0003 	.word	0x001f0003
     888:	00080003 	.word	0x00080003
     88c:	000a0003 	.word	0x000a0003
     890:	000b0003 	.word	0x000b0003
     894:	00100003 	.word	0x00100003
     898:	00120003 	.word	0x00120003
     89c:	00130003 	.word	0x00130003
     8a0:	000c0003 	.word	0x000c0003
     8a4:	000e0003 	.word	0x000e0003
     8a8:	000f0003 	.word	0x000f0003
     8ac:	00160003 	.word	0x00160003
     8b0:	00180003 	.word	0x00180003
     8b4:	00190003 	.word	0x00190003
     8b8:	00050003 	.word	0x00050003
     8bc:	00010003 	.word	0x00010003
     8c0:	00090003 	.word	0x00090003
     8c4:	00110003 	.word	0x00110003
     8c8:	000d0003 	.word	0x000d0003
     8cc:	00170003 	.word	0x00170003

000008d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8d4:	4a0c      	ldr	r2, [pc, #48]	; (908 <_sercom_get_sercom_inst_index+0x38>)
     8d6:	466b      	mov	r3, sp
     8d8:	ca70      	ldmia	r2!, {r4, r5, r6}
     8da:	c370      	stmia	r3!, {r4, r5, r6}
     8dc:	ca32      	ldmia	r2!, {r1, r4, r5}
     8de:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8e0:	9e00      	ldr	r6, [sp, #0]
     8e2:	4286      	cmp	r6, r0
     8e4:	d006      	beq.n	8f4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8e6:	2301      	movs	r3, #1
     8e8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8ea:	4669      	mov	r1, sp
     8ec:	5852      	ldr	r2, [r2, r1]
     8ee:	4282      	cmp	r2, r0
     8f0:	d103      	bne.n	8fa <_sercom_get_sercom_inst_index+0x2a>
     8f2:	e000      	b.n	8f6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8f4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8f6:	b2d8      	uxtb	r0, r3
     8f8:	e003      	b.n	902 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8fa:	3301      	adds	r3, #1
     8fc:	2b06      	cmp	r3, #6
     8fe:	d1f3      	bne.n	8e8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     900:	2000      	movs	r0, #0
}
     902:	b006      	add	sp, #24
     904:	bd70      	pop	{r4, r5, r6, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	000029e4 	.word	0x000029e4

0000090c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     90c:	4770      	bx	lr
     90e:	46c0      	nop			; (mov r8, r8)

00000910 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     910:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <_sercom_set_handler+0x2c>)
     914:	781b      	ldrb	r3, [r3, #0]
     916:	2b00      	cmp	r3, #0
     918:	d10c      	bne.n	934 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     91a:	4f09      	ldr	r7, [pc, #36]	; (940 <_sercom_set_handler+0x30>)
     91c:	4e09      	ldr	r6, [pc, #36]	; (944 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     91e:	4d0a      	ldr	r5, [pc, #40]	; (948 <_sercom_set_handler+0x38>)
     920:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     922:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     924:	195a      	adds	r2, r3, r5
     926:	6014      	str	r4, [r2, #0]
     928:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     92a:	2b18      	cmp	r3, #24
     92c:	d1f9      	bne.n	922 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     92e:	2201      	movs	r2, #1
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <_sercom_set_handler+0x2c>)
     932:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     934:	0080      	lsls	r0, r0, #2
     936:	4b02      	ldr	r3, [pc, #8]	; (940 <_sercom_set_handler+0x30>)
     938:	50c1      	str	r1, [r0, r3]
}
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     93c:	200000a0 	.word	0x200000a0
     940:	200000a4 	.word	0x200000a4
     944:	0000090d 	.word	0x0000090d
     948:	20000114 	.word	0x20000114

0000094c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     94c:	b510      	push	{r4, lr}
     94e:	b082      	sub	sp, #8
     950:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     952:	4668      	mov	r0, sp
     954:	4905      	ldr	r1, [pc, #20]	; (96c <_sercom_get_interrupt_vector+0x20>)
     956:	2206      	movs	r2, #6
     958:	4b05      	ldr	r3, [pc, #20]	; (970 <_sercom_get_interrupt_vector+0x24>)
     95a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     95c:	1c20      	adds	r0, r4, #0
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <_sercom_get_interrupt_vector+0x28>)
     960:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     962:	466b      	mov	r3, sp
     964:	5618      	ldrsb	r0, [r3, r0]
}
     966:	b002      	add	sp, #8
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000029fc 	.word	0x000029fc
     970:	000019e5 	.word	0x000019e5
     974:	000008d1 	.word	0x000008d1

00000978 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     978:	b508      	push	{r3, lr}
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <SERCOM0_Handler+0xc>)
     97c:	681b      	ldr	r3, [r3, #0]
     97e:	2000      	movs	r0, #0
     980:	4798      	blx	r3
     982:	bd08      	pop	{r3, pc}
     984:	200000a4 	.word	0x200000a4

00000988 <SERCOM1_Handler>:
     988:	b508      	push	{r3, lr}
     98a:	4b02      	ldr	r3, [pc, #8]	; (994 <SERCOM1_Handler+0xc>)
     98c:	685b      	ldr	r3, [r3, #4]
     98e:	2001      	movs	r0, #1
     990:	4798      	blx	r3
     992:	bd08      	pop	{r3, pc}
     994:	200000a4 	.word	0x200000a4

00000998 <SERCOM2_Handler>:
     998:	b508      	push	{r3, lr}
     99a:	4b02      	ldr	r3, [pc, #8]	; (9a4 <SERCOM2_Handler+0xc>)
     99c:	689b      	ldr	r3, [r3, #8]
     99e:	2002      	movs	r0, #2
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	200000a4 	.word	0x200000a4

000009a8 <SERCOM3_Handler>:
     9a8:	b508      	push	{r3, lr}
     9aa:	4b02      	ldr	r3, [pc, #8]	; (9b4 <SERCOM3_Handler+0xc>)
     9ac:	68db      	ldr	r3, [r3, #12]
     9ae:	2003      	movs	r0, #3
     9b0:	4798      	blx	r3
     9b2:	bd08      	pop	{r3, pc}
     9b4:	200000a4 	.word	0x200000a4

000009b8 <SERCOM4_Handler>:
     9b8:	b508      	push	{r3, lr}
     9ba:	4b02      	ldr	r3, [pc, #8]	; (9c4 <SERCOM4_Handler+0xc>)
     9bc:	691b      	ldr	r3, [r3, #16]
     9be:	2004      	movs	r0, #4
     9c0:	4798      	blx	r3
     9c2:	bd08      	pop	{r3, pc}
     9c4:	200000a4 	.word	0x200000a4

000009c8 <SERCOM5_Handler>:
     9c8:	b508      	push	{r3, lr}
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <SERCOM5_Handler+0xc>)
     9cc:	695b      	ldr	r3, [r3, #20]
     9ce:	2005      	movs	r0, #5
     9d0:	4798      	blx	r3
     9d2:	bd08      	pop	{r3, pc}
     9d4:	200000a4 	.word	0x200000a4

000009d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	465f      	mov	r7, fp
     9dc:	4656      	mov	r6, sl
     9de:	464d      	mov	r5, r9
     9e0:	4644      	mov	r4, r8
     9e2:	b4f0      	push	{r4, r5, r6, r7}
     9e4:	b091      	sub	sp, #68	; 0x44
     9e6:	1c05      	adds	r5, r0, #0
     9e8:	1c0c      	adds	r4, r1, #0
     9ea:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     9ec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9ee:	1c08      	adds	r0, r1, #0
     9f0:	4bad      	ldr	r3, [pc, #692]	; (ca8 <usart_init+0x2d0>)
     9f2:	4798      	blx	r3
     9f4:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9f6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     9f8:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     9fa:	07d9      	lsls	r1, r3, #31
     9fc:	d500      	bpl.n	a00 <usart_init+0x28>
     9fe:	e14b      	b.n	c98 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a00:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a02:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a04:	079f      	lsls	r7, r3, #30
     a06:	d500      	bpl.n	a0a <usart_init+0x32>
     a08:	e146      	b.n	c98 <usart_init+0x2c0>
     a0a:	4ba8      	ldr	r3, [pc, #672]	; (cac <usart_init+0x2d4>)
     a0c:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a0e:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a10:	2701      	movs	r7, #1
     a12:	408f      	lsls	r7, r1
     a14:	1c39      	adds	r1, r7, #0
     a16:	4301      	orrs	r1, r0
     a18:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a1a:	a90f      	add	r1, sp, #60	; 0x3c
     a1c:	272d      	movs	r7, #45	; 0x2d
     a1e:	5df3      	ldrb	r3, [r6, r7]
     a20:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a22:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a24:	b2d2      	uxtb	r2, r2
     a26:	4690      	mov	r8, r2
     a28:	1c10      	adds	r0, r2, #0
     a2a:	4ba1      	ldr	r3, [pc, #644]	; (cb0 <usart_init+0x2d8>)
     a2c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a2e:	4640      	mov	r0, r8
     a30:	4ba0      	ldr	r3, [pc, #640]	; (cb4 <usart_init+0x2dc>)
     a32:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a34:	5df0      	ldrb	r0, [r6, r7]
     a36:	2100      	movs	r1, #0
     a38:	4b9f      	ldr	r3, [pc, #636]	; (cb8 <usart_init+0x2e0>)
     a3a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     a3c:	7af3      	ldrb	r3, [r6, #11]
     a3e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     a40:	2324      	movs	r3, #36	; 0x24
     a42:	5cf3      	ldrb	r3, [r6, r3]
     a44:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a46:	2325      	movs	r3, #37	; 0x25
     a48:	5cf3      	ldrb	r3, [r6, r3]
     a4a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     a4c:	7ef3      	ldrb	r3, [r6, #27]
     a4e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a50:	7f33      	ldrb	r3, [r6, #28]
     a52:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     a54:	6829      	ldr	r1, [r5, #0]
     a56:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a58:	1c08      	adds	r0, r1, #0
     a5a:	4b93      	ldr	r3, [pc, #588]	; (ca8 <usart_init+0x2d0>)
     a5c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a5e:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     a60:	2200      	movs	r2, #0
     a62:	466b      	mov	r3, sp
     a64:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     a66:	8a32      	ldrh	r2, [r6, #16]
     a68:	9202      	str	r2, [sp, #8]
     a6a:	2380      	movs	r3, #128	; 0x80
     a6c:	01db      	lsls	r3, r3, #7
     a6e:	429a      	cmp	r2, r3
     a70:	d021      	beq.n	ab6 <usart_init+0xde>
     a72:	2380      	movs	r3, #128	; 0x80
     a74:	01db      	lsls	r3, r3, #7
     a76:	429a      	cmp	r2, r3
     a78:	d804      	bhi.n	a84 <usart_init+0xac>
     a7a:	2380      	movs	r3, #128	; 0x80
     a7c:	019b      	lsls	r3, r3, #6
     a7e:	429a      	cmp	r2, r3
     a80:	d011      	beq.n	aa6 <usart_init+0xce>
     a82:	e008      	b.n	a96 <usart_init+0xbe>
     a84:	23c0      	movs	r3, #192	; 0xc0
     a86:	01db      	lsls	r3, r3, #7
     a88:	9f02      	ldr	r7, [sp, #8]
     a8a:	429f      	cmp	r7, r3
     a8c:	d00f      	beq.n	aae <usart_init+0xd6>
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	021b      	lsls	r3, r3, #8
     a92:	429f      	cmp	r7, r3
     a94:	d003      	beq.n	a9e <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a96:	2710      	movs	r7, #16
     a98:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a9a:	2700      	movs	r7, #0
     a9c:	e00e      	b.n	abc <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a9e:	2703      	movs	r7, #3
     aa0:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aa2:	2700      	movs	r7, #0
     aa4:	e00a      	b.n	abc <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     aa6:	2710      	movs	r7, #16
     aa8:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     aaa:	2701      	movs	r7, #1
     aac:	e006      	b.n	abc <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     aae:	2708      	movs	r7, #8
     ab0:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ab2:	2701      	movs	r7, #1
     ab4:	e002      	b.n	abc <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ab6:	2708      	movs	r7, #8
     ab8:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aba:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     abc:	6831      	ldr	r1, [r6, #0]
     abe:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     ac0:	68f2      	ldr	r2, [r6, #12]
     ac2:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ac4:	6973      	ldr	r3, [r6, #20]
     ac6:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ac8:	7e31      	ldrb	r1, [r6, #24]
     aca:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     acc:	2326      	movs	r3, #38	; 0x26
     ace:	5cf3      	ldrb	r3, [r6, r3]
     ad0:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     ad2:	6873      	ldr	r3, [r6, #4]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d013      	beq.n	b00 <usart_init+0x128>
     ad8:	2280      	movs	r2, #128	; 0x80
     ada:	0552      	lsls	r2, r2, #21
     adc:	4293      	cmp	r3, r2
     ade:	d12e      	bne.n	b3e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     ae0:	2327      	movs	r3, #39	; 0x27
     ae2:	5cf3      	ldrb	r3, [r6, r3]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d12e      	bne.n	b46 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     ae8:	6a37      	ldr	r7, [r6, #32]
     aea:	b2c0      	uxtb	r0, r0
     aec:	4b73      	ldr	r3, [pc, #460]	; (cbc <usart_init+0x2e4>)
     aee:	4798      	blx	r3
     af0:	1c01      	adds	r1, r0, #0
     af2:	1c38      	adds	r0, r7, #0
     af4:	466a      	mov	r2, sp
     af6:	3226      	adds	r2, #38	; 0x26
     af8:	4b71      	ldr	r3, [pc, #452]	; (cc0 <usart_init+0x2e8>)
     afa:	4798      	blx	r3
     afc:	1c03      	adds	r3, r0, #0
     afe:	e01f      	b.n	b40 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     b00:	2327      	movs	r3, #39	; 0x27
     b02:	5cf3      	ldrb	r3, [r6, r3]
     b04:	2b00      	cmp	r3, #0
     b06:	d00a      	beq.n	b1e <usart_init+0x146>
				status_code =
     b08:	9a06      	ldr	r2, [sp, #24]
     b0a:	9200      	str	r2, [sp, #0]
     b0c:	6a30      	ldr	r0, [r6, #32]
     b0e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b10:	466a      	mov	r2, sp
     b12:	3226      	adds	r2, #38	; 0x26
     b14:	1c3b      	adds	r3, r7, #0
     b16:	4f6b      	ldr	r7, [pc, #428]	; (cc4 <usart_init+0x2ec>)
     b18:	47b8      	blx	r7
     b1a:	1c03      	adds	r3, r0, #0
     b1c:	e010      	b.n	b40 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     b1e:	6a31      	ldr	r1, [r6, #32]
     b20:	9107      	str	r1, [sp, #28]
     b22:	b2c0      	uxtb	r0, r0
     b24:	4b65      	ldr	r3, [pc, #404]	; (cbc <usart_init+0x2e4>)
     b26:	4798      	blx	r3
     b28:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     b2a:	9a06      	ldr	r2, [sp, #24]
     b2c:	9200      	str	r2, [sp, #0]
     b2e:	9807      	ldr	r0, [sp, #28]
     b30:	466a      	mov	r2, sp
     b32:	3226      	adds	r2, #38	; 0x26
     b34:	1c3b      	adds	r3, r7, #0
     b36:	4f63      	ldr	r7, [pc, #396]	; (cc4 <usart_init+0x2ec>)
     b38:	47b8      	blx	r7
     b3a:	1c03      	adds	r3, r0, #0
     b3c:	e000      	b.n	b40 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     b3e:	2300      	movs	r3, #0
     b40:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     b42:	d000      	beq.n	b46 <usart_init+0x16e>
     b44:	e0a8      	b.n	c98 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     b46:	7e73      	ldrb	r3, [r6, #25]
     b48:	2b00      	cmp	r3, #0
     b4a:	d002      	beq.n	b52 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b4c:	7eb3      	ldrb	r3, [r6, #26]
     b4e:	4641      	mov	r1, r8
     b50:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b52:	682a      	ldr	r2, [r5, #0]
     b54:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b56:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     b58:	2b00      	cmp	r3, #0
     b5a:	d1fc      	bne.n	b56 <usart_init+0x17e>
     b5c:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     b5e:	466b      	mov	r3, sp
     b60:	3326      	adds	r3, #38	; 0x26
     b62:	881b      	ldrh	r3, [r3, #0]
     b64:	4642      	mov	r2, r8
     b66:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b68:	464b      	mov	r3, r9
     b6a:	9f03      	ldr	r7, [sp, #12]
     b6c:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     b6e:	9f04      	ldr	r7, [sp, #16]
     b70:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b72:	6871      	ldr	r1, [r6, #4]
     b74:	430b      	orrs	r3, r1
		config->sample_rate |
     b76:	9f02      	ldr	r7, [sp, #8]
     b78:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b7a:	4652      	mov	r2, sl
     b7c:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b7e:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b80:	4659      	mov	r1, fp
     b82:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     b84:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     b86:	2327      	movs	r3, #39	; 0x27
     b88:	5cf3      	ldrb	r3, [r6, r3]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d101      	bne.n	b92 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b8e:	2304      	movs	r3, #4
     b90:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b92:	7e71      	ldrb	r1, [r6, #25]
     b94:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b96:	7f33      	ldrb	r3, [r6, #28]
     b98:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     b9a:	4319      	orrs	r1, r3
     b9c:	7af2      	ldrb	r2, [r6, #11]
     b9e:	7ab3      	ldrb	r3, [r6, #10]
     ba0:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ba2:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ba4:	7f73      	ldrb	r3, [r6, #29]
     ba6:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ba8:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     baa:	2324      	movs	r3, #36	; 0x24
     bac:	5cf3      	ldrb	r3, [r6, r3]
     bae:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     bb0:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     bb2:	2325      	movs	r3, #37	; 0x25
     bb4:	5cf3      	ldrb	r3, [r6, r3]
     bb6:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     bb8:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     bba:	8933      	ldrh	r3, [r6, #8]
     bbc:	2bff      	cmp	r3, #255	; 0xff
     bbe:	d00b      	beq.n	bd8 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     bc0:	7ef2      	ldrb	r2, [r6, #27]
     bc2:	2a00      	cmp	r2, #0
     bc4:	d003      	beq.n	bce <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     bc6:	22a0      	movs	r2, #160	; 0xa0
     bc8:	04d2      	lsls	r2, r2, #19
     bca:	4317      	orrs	r7, r2
     bcc:	e002      	b.n	bd4 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     bce:	2280      	movs	r2, #128	; 0x80
     bd0:	0452      	lsls	r2, r2, #17
     bd2:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     bd4:	4319      	orrs	r1, r3
     bd6:	e005      	b.n	be4 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     bd8:	7ef3      	ldrb	r3, [r6, #27]
     bda:	2b00      	cmp	r3, #0
     bdc:	d002      	beq.n	be4 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     bde:	2380      	movs	r3, #128	; 0x80
     be0:	04db      	lsls	r3, r3, #19
     be2:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     be4:	232c      	movs	r3, #44	; 0x2c
     be6:	5cf3      	ldrb	r3, [r6, r3]
     be8:	2b00      	cmp	r3, #0
     bea:	d103      	bne.n	bf4 <usart_init+0x21c>
     bec:	4b36      	ldr	r3, [pc, #216]	; (cc8 <usart_init+0x2f0>)
     bee:	789b      	ldrb	r3, [r3, #2]
     bf0:	079a      	lsls	r2, r3, #30
     bf2:	d501      	bpl.n	bf8 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     bf4:	2380      	movs	r3, #128	; 0x80
     bf6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bf8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bfa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     bfc:	2b00      	cmp	r3, #0
     bfe:	d1fc      	bne.n	bfa <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c00:	4643      	mov	r3, r8
     c02:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c04:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c06:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c08:	2b00      	cmp	r3, #0
     c0a:	d1fc      	bne.n	c06 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     c0c:	4641      	mov	r1, r8
     c0e:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c10:	ab0e      	add	r3, sp, #56	; 0x38
     c12:	2280      	movs	r2, #128	; 0x80
     c14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c16:	2200      	movs	r2, #0
     c18:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c1a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c1c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     c1e:	6b32      	ldr	r2, [r6, #48]	; 0x30
     c20:	920a      	str	r2, [sp, #40]	; 0x28
     c22:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c24:	930b      	str	r3, [sp, #44]	; 0x2c
     c26:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     c28:	970c      	str	r7, [sp, #48]	; 0x30
     c2a:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     c2c:	960d      	str	r6, [sp, #52]	; 0x34
     c2e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c30:	ae0e      	add	r6, sp, #56	; 0x38
     c32:	b2f9      	uxtb	r1, r7
     c34:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c36:	aa0a      	add	r2, sp, #40	; 0x28
     c38:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     c3a:	2800      	cmp	r0, #0
     c3c:	d102      	bne.n	c44 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c3e:	1c20      	adds	r0, r4, #0
     c40:	4a22      	ldr	r2, [pc, #136]	; (ccc <usart_init+0x2f4>)
     c42:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c44:	1c43      	adds	r3, r0, #1
     c46:	d005      	beq.n	c54 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c48:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c4a:	0c00      	lsrs	r0, r0, #16
     c4c:	b2c0      	uxtb	r0, r0
     c4e:	1c31      	adds	r1, r6, #0
     c50:	4a1f      	ldr	r2, [pc, #124]	; (cd0 <usart_init+0x2f8>)
     c52:	4790      	blx	r2
     c54:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c56:	2f04      	cmp	r7, #4
     c58:	d1eb      	bne.n	c32 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     c5a:	2300      	movs	r3, #0
     c5c:	60eb      	str	r3, [r5, #12]
     c5e:	612b      	str	r3, [r5, #16]
     c60:	616b      	str	r3, [r5, #20]
     c62:	61ab      	str	r3, [r5, #24]
     c64:	61eb      	str	r3, [r5, #28]
     c66:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     c68:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     c6a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     c6c:	2200      	movs	r2, #0
     c6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     c70:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     c72:	2330      	movs	r3, #48	; 0x30
     c74:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     c76:	2331      	movs	r3, #49	; 0x31
     c78:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     c7a:	2332      	movs	r3, #50	; 0x32
     c7c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     c7e:	2333      	movs	r3, #51	; 0x33
     c80:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     c82:	6828      	ldr	r0, [r5, #0]
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <usart_init+0x2d0>)
     c86:	4798      	blx	r3
     c88:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     c8a:	4912      	ldr	r1, [pc, #72]	; (cd4 <usart_init+0x2fc>)
     c8c:	4b12      	ldr	r3, [pc, #72]	; (cd8 <usart_init+0x300>)
     c8e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     c90:	00a4      	lsls	r4, r4, #2
     c92:	4b12      	ldr	r3, [pc, #72]	; (cdc <usart_init+0x304>)
     c94:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     c96:	2000      	movs	r0, #0
}
     c98:	b011      	add	sp, #68	; 0x44
     c9a:	bc3c      	pop	{r2, r3, r4, r5}
     c9c:	4690      	mov	r8, r2
     c9e:	4699      	mov	r9, r3
     ca0:	46a2      	mov	sl, r4
     ca2:	46ab      	mov	fp, r5
     ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	000008d1 	.word	0x000008d1
     cac:	40000400 	.word	0x40000400
     cb0:	00001371 	.word	0x00001371
     cb4:	000012e5 	.word	0x000012e5
     cb8:	000006f9 	.word	0x000006f9
     cbc:	0000138d 	.word	0x0000138d
     cc0:	00000521 	.word	0x00000521
     cc4:	00000549 	.word	0x00000549
     cc8:	41002000 	.word	0x41002000
     ccc:	00000749 	.word	0x00000749
     cd0:	0000144d 	.word	0x0000144d
     cd4:	00000d85 	.word	0x00000d85
     cd8:	00000911 	.word	0x00000911
     cdc:	20000114 	.word	0x20000114

00000ce0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     ce0:	b510      	push	{r4, lr}
     ce2:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ce4:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ce6:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     ce8:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     cea:	2c00      	cmp	r4, #0
     cec:	d00d      	beq.n	d0a <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     cee:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     cf0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     cf2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     cf4:	2a00      	cmp	r2, #0
     cf6:	d108      	bne.n	d0a <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cf8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     cfa:	2a00      	cmp	r2, #0
     cfc:	d1fc      	bne.n	cf8 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     cfe:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d00:	2102      	movs	r1, #2
     d02:	7e1a      	ldrb	r2, [r3, #24]
     d04:	420a      	tst	r2, r1
     d06:	d0fc      	beq.n	d02 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     d08:	2000      	movs	r0, #0
}
     d0a:	bd10      	pop	{r4, pc}

00000d0c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     d0c:	b510      	push	{r4, lr}
     d0e:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d10:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d12:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     d14:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d16:	2a00      	cmp	r2, #0
     d18:	d033      	beq.n	d82 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     d1c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d1e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     d20:	2b00      	cmp	r3, #0
     d22:	d12e      	bne.n	d82 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     d24:	7e23      	ldrb	r3, [r4, #24]
     d26:	075a      	lsls	r2, r3, #29
     d28:	d52b      	bpl.n	d82 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d2a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d2c:	2b00      	cmp	r3, #0
     d2e:	d1fc      	bne.n	d2a <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d30:	8b63      	ldrh	r3, [r4, #26]
     d32:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     d34:	069a      	lsls	r2, r3, #26
     d36:	d021      	beq.n	d7c <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     d38:	079a      	lsls	r2, r3, #30
     d3a:	d503      	bpl.n	d44 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d3c:	2302      	movs	r3, #2
     d3e:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     d40:	201a      	movs	r0, #26
     d42:	e01e      	b.n	d82 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d44:	075a      	lsls	r2, r3, #29
     d46:	d503      	bpl.n	d50 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d48:	2304      	movs	r3, #4
     d4a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     d4c:	201e      	movs	r0, #30
     d4e:	e018      	b.n	d82 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d50:	07da      	lsls	r2, r3, #31
     d52:	d503      	bpl.n	d5c <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d54:	2301      	movs	r3, #1
     d56:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     d58:	2013      	movs	r0, #19
     d5a:	e012      	b.n	d82 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     d5c:	06da      	lsls	r2, r3, #27
     d5e:	d505      	bpl.n	d6c <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     d60:	8b62      	ldrh	r2, [r4, #26]
     d62:	2310      	movs	r3, #16
     d64:	4313      	orrs	r3, r2
     d66:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     d68:	2042      	movs	r0, #66	; 0x42
     d6a:	e00a      	b.n	d82 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     d6c:	069a      	lsls	r2, r3, #26
     d6e:	d505      	bpl.n	d7c <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     d70:	8b62      	ldrh	r2, [r4, #26]
     d72:	2320      	movs	r3, #32
     d74:	4313      	orrs	r3, r2
     d76:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     d78:	2041      	movs	r0, #65	; 0x41
     d7a:	e002      	b.n	d82 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     d7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d7e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     d80:	2000      	movs	r0, #0
}
     d82:	bd10      	pop	{r4, pc}

00000d84 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     d86:	0080      	lsls	r0, r0, #2
     d88:	4b64      	ldr	r3, [pc, #400]	; (f1c <_usart_interrupt_handler+0x198>)
     d8a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     d8c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d8e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d90:	2b00      	cmp	r3, #0
     d92:	d1fc      	bne.n	d8e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     d94:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     d96:	7da6      	ldrb	r6, [r4, #22]
     d98:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     d9a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     d9c:	5ceb      	ldrb	r3, [r5, r3]
     d9e:	2230      	movs	r2, #48	; 0x30
     da0:	5caf      	ldrb	r7, [r5, r2]
     da2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     da4:	07f1      	lsls	r1, r6, #31
     da6:	d520      	bpl.n	dea <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     da8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     daa:	b29b      	uxth	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	d01a      	beq.n	de6 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     db0:	6aab      	ldr	r3, [r5, #40]	; 0x28
     db2:	781a      	ldrb	r2, [r3, #0]
     db4:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     db6:	1c59      	adds	r1, r3, #1
     db8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dba:	7969      	ldrb	r1, [r5, #5]
     dbc:	2901      	cmp	r1, #1
     dbe:	d104      	bne.n	dca <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     dc0:	7859      	ldrb	r1, [r3, #1]
     dc2:	0209      	lsls	r1, r1, #8
     dc4:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     dc6:	3302      	adds	r3, #2
     dc8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     dca:	05d3      	lsls	r3, r2, #23
     dcc:	0ddb      	lsrs	r3, r3, #23
     dce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     dd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     dd2:	3b01      	subs	r3, #1
     dd4:	b29b      	uxth	r3, r3
     dd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     dd8:	2b00      	cmp	r3, #0
     dda:	d106      	bne.n	dea <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ddc:	2301      	movs	r3, #1
     dde:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     de0:	2302      	movs	r3, #2
     de2:	75a3      	strb	r3, [r4, #22]
     de4:	e001      	b.n	dea <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     de6:	2301      	movs	r3, #1
     de8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     dea:	07b2      	lsls	r2, r6, #30
     dec:	d509      	bpl.n	e02 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     dee:	2302      	movs	r3, #2
     df0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     df2:	2200      	movs	r2, #0
     df4:	2333      	movs	r3, #51	; 0x33
     df6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     df8:	07fb      	lsls	r3, r7, #31
     dfa:	d502      	bpl.n	e02 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     dfc:	1c28      	adds	r0, r5, #0
     dfe:	68e9      	ldr	r1, [r5, #12]
     e00:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e02:	0772      	lsls	r2, r6, #29
     e04:	d56a      	bpl.n	edc <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     e06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e08:	b29b      	uxth	r3, r3
     e0a:	2b00      	cmp	r3, #0
     e0c:	d064      	beq.n	ed8 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e0e:	8b63      	ldrh	r3, [r4, #26]
     e10:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e12:	0719      	lsls	r1, r3, #28
     e14:	d402      	bmi.n	e1c <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e16:	223f      	movs	r2, #63	; 0x3f
     e18:	4013      	ands	r3, r2
     e1a:	e001      	b.n	e20 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e1c:	2237      	movs	r2, #55	; 0x37
     e1e:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e20:	2b00      	cmp	r3, #0
     e22:	d037      	beq.n	e94 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e24:	079a      	lsls	r2, r3, #30
     e26:	d507      	bpl.n	e38 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e28:	221a      	movs	r2, #26
     e2a:	2332      	movs	r3, #50	; 0x32
     e2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     e2e:	8b62      	ldrh	r2, [r4, #26]
     e30:	2302      	movs	r3, #2
     e32:	4313      	orrs	r3, r2
     e34:	8363      	strh	r3, [r4, #26]
     e36:	e027      	b.n	e88 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e38:	0759      	lsls	r1, r3, #29
     e3a:	d507      	bpl.n	e4c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     e3c:	221e      	movs	r2, #30
     e3e:	2332      	movs	r3, #50	; 0x32
     e40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     e42:	8b62      	ldrh	r2, [r4, #26]
     e44:	2304      	movs	r3, #4
     e46:	4313      	orrs	r3, r2
     e48:	8363      	strh	r3, [r4, #26]
     e4a:	e01d      	b.n	e88 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e4c:	07da      	lsls	r2, r3, #31
     e4e:	d507      	bpl.n	e60 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     e50:	2213      	movs	r2, #19
     e52:	2332      	movs	r3, #50	; 0x32
     e54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     e56:	8b62      	ldrh	r2, [r4, #26]
     e58:	2301      	movs	r3, #1
     e5a:	4313      	orrs	r3, r2
     e5c:	8363      	strh	r3, [r4, #26]
     e5e:	e013      	b.n	e88 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     e60:	06d9      	lsls	r1, r3, #27
     e62:	d507      	bpl.n	e74 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     e64:	2242      	movs	r2, #66	; 0x42
     e66:	2332      	movs	r3, #50	; 0x32
     e68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     e6a:	8b62      	ldrh	r2, [r4, #26]
     e6c:	2310      	movs	r3, #16
     e6e:	4313      	orrs	r3, r2
     e70:	8363      	strh	r3, [r4, #26]
     e72:	e009      	b.n	e88 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     e74:	2220      	movs	r2, #32
     e76:	421a      	tst	r2, r3
     e78:	d006      	beq.n	e88 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     e7a:	2241      	movs	r2, #65	; 0x41
     e7c:	2332      	movs	r3, #50	; 0x32
     e7e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     e80:	8b62      	ldrh	r2, [r4, #26]
     e82:	2320      	movs	r3, #32
     e84:	4313      	orrs	r3, r2
     e86:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     e88:	077a      	lsls	r2, r7, #29
     e8a:	d527      	bpl.n	edc <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     e8c:	1c28      	adds	r0, r5, #0
     e8e:	696b      	ldr	r3, [r5, #20]
     e90:	4798      	blx	r3
     e92:	e023      	b.n	edc <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     e94:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     e96:	05d2      	lsls	r2, r2, #23
     e98:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     e9a:	b2d3      	uxtb	r3, r2
     e9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     e9e:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ea0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ea2:	1c59      	adds	r1, r3, #1
     ea4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ea6:	7969      	ldrb	r1, [r5, #5]
     ea8:	2901      	cmp	r1, #1
     eaa:	d104      	bne.n	eb6 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     eac:	0a12      	lsrs	r2, r2, #8
     eae:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     eb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     eb2:	3301      	adds	r3, #1
     eb4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     eb6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     eb8:	3b01      	subs	r3, #1
     eba:	b29b      	uxth	r3, r3
     ebc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     ebe:	2b00      	cmp	r3, #0
     ec0:	d10c      	bne.n	edc <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ec2:	2304      	movs	r3, #4
     ec4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ec6:	2200      	movs	r2, #0
     ec8:	2332      	movs	r3, #50	; 0x32
     eca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     ecc:	07ba      	lsls	r2, r7, #30
     ece:	d505      	bpl.n	edc <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ed0:	1c28      	adds	r0, r5, #0
     ed2:	692b      	ldr	r3, [r5, #16]
     ed4:	4798      	blx	r3
     ed6:	e001      	b.n	edc <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ed8:	2304      	movs	r3, #4
     eda:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     edc:	06f1      	lsls	r1, r6, #27
     ede:	d507      	bpl.n	ef0 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ee0:	2310      	movs	r3, #16
     ee2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     ee4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     ee6:	06fa      	lsls	r2, r7, #27
     ee8:	d502      	bpl.n	ef0 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     eea:	1c28      	adds	r0, r5, #0
     eec:	69eb      	ldr	r3, [r5, #28]
     eee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ef0:	06b1      	lsls	r1, r6, #26
     ef2:	d507      	bpl.n	f04 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ef4:	2320      	movs	r3, #32
     ef6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ef8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     efa:	073a      	lsls	r2, r7, #28
     efc:	d502      	bpl.n	f04 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     efe:	1c28      	adds	r0, r5, #0
     f00:	69ab      	ldr	r3, [r5, #24]
     f02:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     f04:	0731      	lsls	r1, r6, #28
     f06:	d507      	bpl.n	f18 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     f08:	2308      	movs	r3, #8
     f0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f0e:	06ba      	lsls	r2, r7, #26
     f10:	d502      	bpl.n	f18 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f12:	6a2b      	ldr	r3, [r5, #32]
     f14:	1c28      	adds	r0, r5, #0
     f16:	4798      	blx	r3
		}
	}
#endif
}
     f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	20000114 	.word	0x20000114

00000f20 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f20:	b508      	push	{r3, lr}
	switch (clock_source) {
     f22:	2808      	cmp	r0, #8
     f24:	d834      	bhi.n	f90 <system_clock_source_get_hz+0x70>
     f26:	0080      	lsls	r0, r0, #2
     f28:	4b1b      	ldr	r3, [pc, #108]	; (f98 <system_clock_source_get_hz+0x78>)
     f2a:	581b      	ldr	r3, [r3, r0]
     f2c:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     f2e:	2080      	movs	r0, #128	; 0x80
     f30:	0200      	lsls	r0, r0, #8
     f32:	e030      	b.n	f96 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     f34:	4b19      	ldr	r3, [pc, #100]	; (f9c <system_clock_source_get_hz+0x7c>)
     f36:	6918      	ldr	r0, [r3, #16]
     f38:	e02d      	b.n	f96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f3a:	4b19      	ldr	r3, [pc, #100]	; (fa0 <system_clock_source_get_hz+0x80>)
     f3c:	6a18      	ldr	r0, [r3, #32]
     f3e:	0580      	lsls	r0, r0, #22
     f40:	0f80      	lsrs	r0, r0, #30
     f42:	4b18      	ldr	r3, [pc, #96]	; (fa4 <system_clock_source_get_hz+0x84>)
     f44:	40c3      	lsrs	r3, r0
     f46:	1c18      	adds	r0, r3, #0
     f48:	e025      	b.n	f96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     f4a:	4b14      	ldr	r3, [pc, #80]	; (f9c <system_clock_source_get_hz+0x7c>)
     f4c:	6958      	ldr	r0, [r3, #20]
     f4e:	e022      	b.n	f96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f50:	4b12      	ldr	r3, [pc, #72]	; (f9c <system_clock_source_get_hz+0x7c>)
     f52:	681b      	ldr	r3, [r3, #0]
     f54:	2002      	movs	r0, #2
     f56:	4018      	ands	r0, r3
     f58:	d01d      	beq.n	f96 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f5a:	4911      	ldr	r1, [pc, #68]	; (fa0 <system_clock_source_get_hz+0x80>)
     f5c:	2210      	movs	r2, #16
     f5e:	68cb      	ldr	r3, [r1, #12]
     f60:	421a      	tst	r2, r3
     f62:	d0fc      	beq.n	f5e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     f64:	4b0d      	ldr	r3, [pc, #52]	; (f9c <system_clock_source_get_hz+0x7c>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	075a      	lsls	r2, r3, #29
     f6a:	d513      	bpl.n	f94 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f6c:	2000      	movs	r0, #0
     f6e:	4b0e      	ldr	r3, [pc, #56]	; (fa8 <system_clock_source_get_hz+0x88>)
     f70:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f72:	4b0a      	ldr	r3, [pc, #40]	; (f9c <system_clock_source_get_hz+0x7c>)
     f74:	689b      	ldr	r3, [r3, #8]
     f76:	041b      	lsls	r3, r3, #16
     f78:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f7a:	4358      	muls	r0, r3
     f7c:	e00b      	b.n	f96 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f7e:	2350      	movs	r3, #80	; 0x50
     f80:	4a07      	ldr	r2, [pc, #28]	; (fa0 <system_clock_source_get_hz+0x80>)
     f82:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     f84:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f86:	075a      	lsls	r2, r3, #29
     f88:	d505      	bpl.n	f96 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     f8a:	4b04      	ldr	r3, [pc, #16]	; (f9c <system_clock_source_get_hz+0x7c>)
     f8c:	68d8      	ldr	r0, [r3, #12]
     f8e:	e002      	b.n	f96 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     f90:	2000      	movs	r0, #0
     f92:	e000      	b.n	f96 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     f94:	4805      	ldr	r0, [pc, #20]	; (fac <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     f96:	bd08      	pop	{r3, pc}
     f98:	00002a04 	.word	0x00002a04
     f9c:	200000bc 	.word	0x200000bc
     fa0:	40000800 	.word	0x40000800
     fa4:	007a1200 	.word	0x007a1200
     fa8:	0000138d 	.word	0x0000138d
     fac:	02dc6c00 	.word	0x02dc6c00

00000fb0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fb0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fb2:	4b0c      	ldr	r3, [pc, #48]	; (fe4 <system_clock_source_osc8m_set_config+0x34>)
     fb4:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fb6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fb8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fba:	7840      	ldrb	r0, [r0, #1]
     fbc:	2201      	movs	r2, #1
     fbe:	4010      	ands	r0, r2
     fc0:	0180      	lsls	r0, r0, #6
     fc2:	2640      	movs	r6, #64	; 0x40
     fc4:	43b4      	bics	r4, r6
     fc6:	4304      	orrs	r4, r0
     fc8:	402a      	ands	r2, r5
     fca:	01d0      	lsls	r0, r2, #7
     fcc:	2280      	movs	r2, #128	; 0x80
     fce:	4394      	bics	r4, r2
     fd0:	1c22      	adds	r2, r4, #0
     fd2:	4302      	orrs	r2, r0
     fd4:	2003      	movs	r0, #3
     fd6:	4001      	ands	r1, r0
     fd8:	0209      	lsls	r1, r1, #8
     fda:	4803      	ldr	r0, [pc, #12]	; (fe8 <system_clock_source_osc8m_set_config+0x38>)
     fdc:	4002      	ands	r2, r0
     fde:	430a      	orrs	r2, r1
     fe0:	621a      	str	r2, [r3, #32]
}
     fe2:	bd70      	pop	{r4, r5, r6, pc}
     fe4:	40000800 	.word	0x40000800
     fe8:	fffffcff 	.word	0xfffffcff

00000fec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fec:	2808      	cmp	r0, #8
     fee:	d843      	bhi.n	1078 <system_clock_source_enable+0x8c>
     ff0:	0080      	lsls	r0, r0, #2
     ff2:	4b22      	ldr	r3, [pc, #136]	; (107c <system_clock_source_enable+0x90>)
     ff4:	581b      	ldr	r3, [r3, r0]
     ff6:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     ff8:	2000      	movs	r0, #0
     ffa:	e03e      	b.n	107a <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ffc:	4b20      	ldr	r3, [pc, #128]	; (1080 <system_clock_source_enable+0x94>)
     ffe:	6a19      	ldr	r1, [r3, #32]
    1000:	2202      	movs	r2, #2
    1002:	430a      	orrs	r2, r1
    1004:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1006:	2000      	movs	r0, #0
    1008:	e037      	b.n	107a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    100a:	4b1d      	ldr	r3, [pc, #116]	; (1080 <system_clock_source_enable+0x94>)
    100c:	6999      	ldr	r1, [r3, #24]
    100e:	2202      	movs	r2, #2
    1010:	430a      	orrs	r2, r1
    1012:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1014:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1016:	e030      	b.n	107a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1018:	4b19      	ldr	r3, [pc, #100]	; (1080 <system_clock_source_enable+0x94>)
    101a:	8a19      	ldrh	r1, [r3, #16]
    101c:	2202      	movs	r2, #2
    101e:	430a      	orrs	r2, r1
    1020:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1022:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1024:	e029      	b.n	107a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1026:	4b16      	ldr	r3, [pc, #88]	; (1080 <system_clock_source_enable+0x94>)
    1028:	8a99      	ldrh	r1, [r3, #20]
    102a:	2202      	movs	r2, #2
    102c:	430a      	orrs	r2, r1
    102e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1030:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1032:	e022      	b.n	107a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1034:	4b13      	ldr	r3, [pc, #76]	; (1084 <system_clock_source_enable+0x98>)
    1036:	6819      	ldr	r1, [r3, #0]
    1038:	2202      	movs	r2, #2
    103a:	430a      	orrs	r2, r1
    103c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    103e:	681a      	ldr	r2, [r3, #0]
    1040:	4b11      	ldr	r3, [pc, #68]	; (1088 <system_clock_source_enable+0x9c>)
    1042:	401a      	ands	r2, r3
    1044:	4b0e      	ldr	r3, [pc, #56]	; (1080 <system_clock_source_enable+0x94>)
    1046:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1048:	1c19      	adds	r1, r3, #0
    104a:	2210      	movs	r2, #16
    104c:	68cb      	ldr	r3, [r1, #12]
    104e:	421a      	tst	r2, r3
    1050:	d0fc      	beq.n	104c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1052:	4a0c      	ldr	r2, [pc, #48]	; (1084 <system_clock_source_enable+0x98>)
    1054:	6891      	ldr	r1, [r2, #8]
    1056:	4b0a      	ldr	r3, [pc, #40]	; (1080 <system_clock_source_enable+0x94>)
    1058:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    105a:	6851      	ldr	r1, [r2, #4]
    105c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    105e:	6812      	ldr	r2, [r2, #0]
    1060:	b292      	uxth	r2, r2
    1062:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1064:	2000      	movs	r0, #0
    1066:	e008      	b.n	107a <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1068:	4a05      	ldr	r2, [pc, #20]	; (1080 <system_clock_source_enable+0x94>)
    106a:	2344      	movs	r3, #68	; 0x44
    106c:	5cd0      	ldrb	r0, [r2, r3]
    106e:	2102      	movs	r1, #2
    1070:	4301      	orrs	r1, r0
    1072:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1074:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1076:	e000      	b.n	107a <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1078:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    107a:	4770      	bx	lr
    107c:	00002a28 	.word	0x00002a28
    1080:	40000800 	.word	0x40000800
    1084:	200000bc 	.word	0x200000bc
    1088:	0000ff7f 	.word	0x0000ff7f

0000108c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1090:	22c2      	movs	r2, #194	; 0xc2
    1092:	00d2      	lsls	r2, r2, #3
    1094:	4b20      	ldr	r3, [pc, #128]	; (1118 <system_clock_init+0x8c>)
    1096:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1098:	4b20      	ldr	r3, [pc, #128]	; (111c <system_clock_init+0x90>)
    109a:	685a      	ldr	r2, [r3, #4]
    109c:	211e      	movs	r1, #30
    109e:	438a      	bics	r2, r1
    10a0:	605a      	str	r2, [r3, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    10a2:	2302      	movs	r3, #2
    10a4:	466a      	mov	r2, sp
    10a6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10a8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10aa:	4d1d      	ldr	r5, [pc, #116]	; (1120 <system_clock_init+0x94>)
    10ac:	b2e0      	uxtb	r0, r4
    10ae:	4669      	mov	r1, sp
    10b0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10b2:	3401      	adds	r4, #1
    10b4:	2c25      	cmp	r4, #37	; 0x25
    10b6:	d1f9      	bne.n	10ac <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    10b8:	a803      	add	r0, sp, #12
    10ba:	2400      	movs	r4, #0
    10bc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10be:	2501      	movs	r5, #1
    10c0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10c2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10c4:	4b17      	ldr	r3, [pc, #92]	; (1124 <system_clock_init+0x98>)
    10c6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10c8:	2006      	movs	r0, #6
    10ca:	4b17      	ldr	r3, [pc, #92]	; (1128 <system_clock_init+0x9c>)
    10cc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10ce:	4b17      	ldr	r3, [pc, #92]	; (112c <system_clock_init+0xa0>)
    10d0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    10d2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    10d4:	466b      	mov	r3, sp
    10d6:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    10d8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    10da:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    10dc:	2304      	movs	r3, #4
    10de:	466a      	mov	r2, sp
    10e0:	7013      	strb	r3, [r2, #0]
    10e2:	2001      	movs	r0, #1
    10e4:	4669      	mov	r1, sp
    10e6:	4f12      	ldr	r7, [pc, #72]	; (1130 <system_clock_init+0xa4>)
    10e8:	47b8      	blx	r7
    10ea:	2001      	movs	r0, #1
    10ec:	4e11      	ldr	r6, [pc, #68]	; (1134 <system_clock_init+0xa8>)
    10ee:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    10f0:	4b11      	ldr	r3, [pc, #68]	; (1138 <system_clock_init+0xac>)
    10f2:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    10f4:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    10f6:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    10f8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    10fa:	466b      	mov	r3, sp
    10fc:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10fe:	2306      	movs	r3, #6
    1100:	466a      	mov	r2, sp
    1102:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1104:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1106:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1108:	2000      	movs	r0, #0
    110a:	4669      	mov	r1, sp
    110c:	47b8      	blx	r7
    110e:	2000      	movs	r0, #0
    1110:	47b0      	blx	r6
#endif
}
    1112:	b005      	add	sp, #20
    1114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	40000800 	.word	0x40000800
    111c:	41004000 	.word	0x41004000
    1120:	00001371 	.word	0x00001371
    1124:	00000fb1 	.word	0x00000fb1
    1128:	00000fed 	.word	0x00000fed
    112c:	0000113d 	.word	0x0000113d
    1130:	00001161 	.word	0x00001161
    1134:	00001215 	.word	0x00001215
    1138:	40000400 	.word	0x40000400

0000113c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    113c:	4b06      	ldr	r3, [pc, #24]	; (1158 <system_gclk_init+0x1c>)
    113e:	6999      	ldr	r1, [r3, #24]
    1140:	2208      	movs	r2, #8
    1142:	430a      	orrs	r2, r1
    1144:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1146:	2201      	movs	r2, #1
    1148:	4b04      	ldr	r3, [pc, #16]	; (115c <system_gclk_init+0x20>)
    114a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    114c:	1c19      	adds	r1, r3, #0
    114e:	780b      	ldrb	r3, [r1, #0]
    1150:	4213      	tst	r3, r2
    1152:	d1fc      	bne.n	114e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1154:	4770      	bx	lr
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	40000400 	.word	0x40000400
    115c:	40000c00 	.word	0x40000c00

00001160 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1162:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1164:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1166:	780d      	ldrb	r5, [r1, #0]
    1168:	022d      	lsls	r5, r5, #8
    116a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    116c:	784b      	ldrb	r3, [r1, #1]
    116e:	2b00      	cmp	r3, #0
    1170:	d002      	beq.n	1178 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1172:	2380      	movs	r3, #128	; 0x80
    1174:	02db      	lsls	r3, r3, #11
    1176:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1178:	7a4b      	ldrb	r3, [r1, #9]
    117a:	2b00      	cmp	r3, #0
    117c:	d002      	beq.n	1184 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    117e:	2380      	movs	r3, #128	; 0x80
    1180:	031b      	lsls	r3, r3, #12
    1182:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1184:	684c      	ldr	r4, [r1, #4]
    1186:	2c01      	cmp	r4, #1
    1188:	d917      	bls.n	11ba <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    118a:	1e63      	subs	r3, r4, #1
    118c:	421c      	tst	r4, r3
    118e:	d10f      	bne.n	11b0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1190:	2c02      	cmp	r4, #2
    1192:	d906      	bls.n	11a2 <system_gclk_gen_set_config+0x42>
    1194:	2302      	movs	r3, #2
    1196:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1198:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    119a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    119c:	429c      	cmp	r4, r3
    119e:	d8fb      	bhi.n	1198 <system_gclk_gen_set_config+0x38>
    11a0:	e000      	b.n	11a4 <system_gclk_gen_set_config+0x44>
    11a2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11a4:	0217      	lsls	r7, r2, #8
    11a6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11a8:	2380      	movs	r3, #128	; 0x80
    11aa:	035b      	lsls	r3, r3, #13
    11ac:	431d      	orrs	r5, r3
    11ae:	e004      	b.n	11ba <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    11b0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    11b2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    11b4:	2380      	movs	r3, #128	; 0x80
    11b6:	029b      	lsls	r3, r3, #10
    11b8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11ba:	7a0b      	ldrb	r3, [r1, #8]
    11bc:	2b00      	cmp	r3, #0
    11be:	d002      	beq.n	11c6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11c0:	2380      	movs	r3, #128	; 0x80
    11c2:	039b      	lsls	r3, r3, #14
    11c4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11c6:	4a0f      	ldr	r2, [pc, #60]	; (1204 <system_gclk_gen_set_config+0xa4>)
    11c8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    11ca:	b25b      	sxtb	r3, r3
    11cc:	2b00      	cmp	r3, #0
    11ce:	dbfb      	blt.n	11c8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11d0:	4b0d      	ldr	r3, [pc, #52]	; (1208 <system_gclk_gen_set_config+0xa8>)
    11d2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11d4:	4b0d      	ldr	r3, [pc, #52]	; (120c <system_gclk_gen_set_config+0xac>)
    11d6:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11d8:	4a0a      	ldr	r2, [pc, #40]	; (1204 <system_gclk_gen_set_config+0xa4>)
    11da:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11dc:	b25b      	sxtb	r3, r3
    11de:	2b00      	cmp	r3, #0
    11e0:	dbfb      	blt.n	11da <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11e2:	4b08      	ldr	r3, [pc, #32]	; (1204 <system_gclk_gen_set_config+0xa4>)
    11e4:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11e6:	1c1a      	adds	r2, r3, #0
    11e8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    11ea:	b25b      	sxtb	r3, r3
    11ec:	2b00      	cmp	r3, #0
    11ee:	dbfb      	blt.n	11e8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11f0:	4b04      	ldr	r3, [pc, #16]	; (1204 <system_gclk_gen_set_config+0xa4>)
    11f2:	6859      	ldr	r1, [r3, #4]
    11f4:	2280      	movs	r2, #128	; 0x80
    11f6:	0252      	lsls	r2, r2, #9
    11f8:	400a      	ands	r2, r1
    11fa:	4315      	orrs	r5, r2
    11fc:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11fe:	4b04      	ldr	r3, [pc, #16]	; (1210 <system_gclk_gen_set_config+0xb0>)
    1200:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1204:	40000c00 	.word	0x40000c00
    1208:	00000111 	.word	0x00000111
    120c:	40000c08 	.word	0x40000c08
    1210:	00000151 	.word	0x00000151

00001214 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1214:	b510      	push	{r4, lr}
    1216:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1218:	4a0b      	ldr	r2, [pc, #44]	; (1248 <system_gclk_gen_enable+0x34>)
    121a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    121c:	b25b      	sxtb	r3, r3
    121e:	2b00      	cmp	r3, #0
    1220:	dbfb      	blt.n	121a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <system_gclk_gen_enable+0x38>)
    1224:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1226:	4b0a      	ldr	r3, [pc, #40]	; (1250 <system_gclk_gen_enable+0x3c>)
    1228:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    122a:	4a07      	ldr	r2, [pc, #28]	; (1248 <system_gclk_gen_enable+0x34>)
    122c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    122e:	b25b      	sxtb	r3, r3
    1230:	2b00      	cmp	r3, #0
    1232:	dbfb      	blt.n	122c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <system_gclk_gen_enable+0x34>)
    1236:	6859      	ldr	r1, [r3, #4]
    1238:	2280      	movs	r2, #128	; 0x80
    123a:	0252      	lsls	r2, r2, #9
    123c:	430a      	orrs	r2, r1
    123e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1240:	4b04      	ldr	r3, [pc, #16]	; (1254 <system_gclk_gen_enable+0x40>)
    1242:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1244:	bd10      	pop	{r4, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	40000c00 	.word	0x40000c00
    124c:	00000111 	.word	0x00000111
    1250:	40000c04 	.word	0x40000c04
    1254:	00000151 	.word	0x00000151

00001258 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1258:	b570      	push	{r4, r5, r6, lr}
    125a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    125c:	4a1a      	ldr	r2, [pc, #104]	; (12c8 <system_gclk_gen_get_hz+0x70>)
    125e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1260:	b25b      	sxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	dbfb      	blt.n	125e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1266:	4b19      	ldr	r3, [pc, #100]	; (12cc <system_gclk_gen_get_hz+0x74>)
    1268:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    126a:	4b19      	ldr	r3, [pc, #100]	; (12d0 <system_gclk_gen_get_hz+0x78>)
    126c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    126e:	4a16      	ldr	r2, [pc, #88]	; (12c8 <system_gclk_gen_get_hz+0x70>)
    1270:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1272:	b25b      	sxtb	r3, r3
    1274:	2b00      	cmp	r3, #0
    1276:	dbfb      	blt.n	1270 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1278:	4e13      	ldr	r6, [pc, #76]	; (12c8 <system_gclk_gen_get_hz+0x70>)
    127a:	6870      	ldr	r0, [r6, #4]
    127c:	04c0      	lsls	r0, r0, #19
    127e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1280:	4b14      	ldr	r3, [pc, #80]	; (12d4 <system_gclk_gen_get_hz+0x7c>)
    1282:	4798      	blx	r3
    1284:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1286:	4b12      	ldr	r3, [pc, #72]	; (12d0 <system_gclk_gen_get_hz+0x78>)
    1288:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    128a:	6876      	ldr	r6, [r6, #4]
    128c:	02f6      	lsls	r6, r6, #11
    128e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1290:	4b11      	ldr	r3, [pc, #68]	; (12d8 <system_gclk_gen_get_hz+0x80>)
    1292:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1294:	4a0c      	ldr	r2, [pc, #48]	; (12c8 <system_gclk_gen_get_hz+0x70>)
    1296:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1298:	b25b      	sxtb	r3, r3
    129a:	2b00      	cmp	r3, #0
    129c:	dbfb      	blt.n	1296 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    129e:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <system_gclk_gen_get_hz+0x70>)
    12a0:	689c      	ldr	r4, [r3, #8]
    12a2:	0a24      	lsrs	r4, r4, #8
    12a4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12a6:	4b0d      	ldr	r3, [pc, #52]	; (12dc <system_gclk_gen_get_hz+0x84>)
    12a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12aa:	2e00      	cmp	r6, #0
    12ac:	d107      	bne.n	12be <system_gclk_gen_get_hz+0x66>
    12ae:	2c01      	cmp	r4, #1
    12b0:	d907      	bls.n	12c2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12b2:	1c28      	adds	r0, r5, #0
    12b4:	1c21      	adds	r1, r4, #0
    12b6:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <system_gclk_gen_get_hz+0x88>)
    12b8:	4798      	blx	r3
    12ba:	1c05      	adds	r5, r0, #0
    12bc:	e001      	b.n	12c2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    12be:	3401      	adds	r4, #1
    12c0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    12c2:	1c28      	adds	r0, r5, #0
    12c4:	bd70      	pop	{r4, r5, r6, pc}
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	40000c00 	.word	0x40000c00
    12cc:	00000111 	.word	0x00000111
    12d0:	40000c04 	.word	0x40000c04
    12d4:	00000f21 	.word	0x00000f21
    12d8:	40000c08 	.word	0x40000c08
    12dc:	00000151 	.word	0x00000151
    12e0:	000018b5 	.word	0x000018b5

000012e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    12e4:	b510      	push	{r4, lr}
    12e6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12e8:	4b06      	ldr	r3, [pc, #24]	; (1304 <system_gclk_chan_enable+0x20>)
    12ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12ec:	4b06      	ldr	r3, [pc, #24]	; (1308 <system_gclk_chan_enable+0x24>)
    12ee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12f0:	4b06      	ldr	r3, [pc, #24]	; (130c <system_gclk_chan_enable+0x28>)
    12f2:	8859      	ldrh	r1, [r3, #2]
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	01d2      	lsls	r2, r2, #7
    12f8:	430a      	orrs	r2, r1
    12fa:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12fc:	4b04      	ldr	r3, [pc, #16]	; (1310 <system_gclk_chan_enable+0x2c>)
    12fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1300:	bd10      	pop	{r4, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	00000111 	.word	0x00000111
    1308:	40000c02 	.word	0x40000c02
    130c:	40000c00 	.word	0x40000c00
    1310:	00000151 	.word	0x00000151

00001314 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1314:	b510      	push	{r4, lr}
    1316:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1318:	4b0f      	ldr	r3, [pc, #60]	; (1358 <system_gclk_chan_disable+0x44>)
    131a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    131c:	4b0f      	ldr	r3, [pc, #60]	; (135c <system_gclk_chan_disable+0x48>)
    131e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <system_gclk_chan_disable+0x4c>)
    1322:	8858      	ldrh	r0, [r3, #2]
    1324:	0500      	lsls	r0, r0, #20
    1326:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1328:	8859      	ldrh	r1, [r3, #2]
    132a:	4a0e      	ldr	r2, [pc, #56]	; (1364 <system_gclk_chan_disable+0x50>)
    132c:	400a      	ands	r2, r1
    132e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1330:	8859      	ldrh	r1, [r3, #2]
    1332:	4a0d      	ldr	r2, [pc, #52]	; (1368 <system_gclk_chan_disable+0x54>)
    1334:	400a      	ands	r2, r1
    1336:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1338:	1c19      	adds	r1, r3, #0
    133a:	2280      	movs	r2, #128	; 0x80
    133c:	01d2      	lsls	r2, r2, #7
    133e:	884b      	ldrh	r3, [r1, #2]
    1340:	4213      	tst	r3, r2
    1342:	d1fc      	bne.n	133e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1344:	4b06      	ldr	r3, [pc, #24]	; (1360 <system_gclk_chan_disable+0x4c>)
    1346:	0201      	lsls	r1, r0, #8
    1348:	8858      	ldrh	r0, [r3, #2]
    134a:	4a06      	ldr	r2, [pc, #24]	; (1364 <system_gclk_chan_disable+0x50>)
    134c:	4002      	ands	r2, r0
    134e:	430a      	orrs	r2, r1
    1350:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1352:	4b06      	ldr	r3, [pc, #24]	; (136c <system_gclk_chan_disable+0x58>)
    1354:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1356:	bd10      	pop	{r4, pc}
    1358:	00000111 	.word	0x00000111
    135c:	40000c02 	.word	0x40000c02
    1360:	40000c00 	.word	0x40000c00
    1364:	fffff0ff 	.word	0xfffff0ff
    1368:	ffffbfff 	.word	0xffffbfff
    136c:	00000151 	.word	0x00000151

00001370 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1370:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1372:	780c      	ldrb	r4, [r1, #0]
    1374:	0224      	lsls	r4, r4, #8
    1376:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1378:	4b02      	ldr	r3, [pc, #8]	; (1384 <system_gclk_chan_set_config+0x14>)
    137a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    137c:	b2a4      	uxth	r4, r4
    137e:	4b02      	ldr	r3, [pc, #8]	; (1388 <system_gclk_chan_set_config+0x18>)
    1380:	805c      	strh	r4, [r3, #2]
}
    1382:	bd10      	pop	{r4, pc}
    1384:	00001315 	.word	0x00001315
    1388:	40000c00 	.word	0x40000c00

0000138c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    138c:	b510      	push	{r4, lr}
    138e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1390:	4b06      	ldr	r3, [pc, #24]	; (13ac <system_gclk_chan_get_hz+0x20>)
    1392:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1394:	4b06      	ldr	r3, [pc, #24]	; (13b0 <system_gclk_chan_get_hz+0x24>)
    1396:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1398:	4b06      	ldr	r3, [pc, #24]	; (13b4 <system_gclk_chan_get_hz+0x28>)
    139a:	885c      	ldrh	r4, [r3, #2]
    139c:	0524      	lsls	r4, r4, #20
    139e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13a0:	4b05      	ldr	r3, [pc, #20]	; (13b8 <system_gclk_chan_get_hz+0x2c>)
    13a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13a4:	1c20      	adds	r0, r4, #0
    13a6:	4b05      	ldr	r3, [pc, #20]	; (13bc <system_gclk_chan_get_hz+0x30>)
    13a8:	4798      	blx	r3
}
    13aa:	bd10      	pop	{r4, pc}
    13ac:	00000111 	.word	0x00000111
    13b0:	40000c02 	.word	0x40000c02
    13b4:	40000c00 	.word	0x40000c00
    13b8:	00000151 	.word	0x00000151
    13bc:	00001259 	.word	0x00001259

000013c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13c2:	78d3      	ldrb	r3, [r2, #3]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d11e      	bne.n	1406 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13c8:	7813      	ldrb	r3, [r2, #0]
    13ca:	2b80      	cmp	r3, #128	; 0x80
    13cc:	d004      	beq.n	13d8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13ce:	061b      	lsls	r3, r3, #24
    13d0:	2480      	movs	r4, #128	; 0x80
    13d2:	0264      	lsls	r4, r4, #9
    13d4:	4323      	orrs	r3, r4
    13d6:	e000      	b.n	13da <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    13d8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13da:	7854      	ldrb	r4, [r2, #1]
    13dc:	2502      	movs	r5, #2
    13de:	43ac      	bics	r4, r5
    13e0:	d10a      	bne.n	13f8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    13e2:	7894      	ldrb	r4, [r2, #2]
    13e4:	2c00      	cmp	r4, #0
    13e6:	d103      	bne.n	13f0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    13e8:	2480      	movs	r4, #128	; 0x80
    13ea:	02a4      	lsls	r4, r4, #10
    13ec:	4323      	orrs	r3, r4
    13ee:	e002      	b.n	13f6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13f0:	24c0      	movs	r4, #192	; 0xc0
    13f2:	02e4      	lsls	r4, r4, #11
    13f4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    13f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13f8:	7854      	ldrb	r4, [r2, #1]
    13fa:	3c01      	subs	r4, #1
    13fc:	2c01      	cmp	r4, #1
    13fe:	d804      	bhi.n	140a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1400:	4c11      	ldr	r4, [pc, #68]	; (1448 <_system_pinmux_config+0x88>)
    1402:	4023      	ands	r3, r4
    1404:	e001      	b.n	140a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1406:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1408:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    140a:	040d      	lsls	r5, r1, #16
    140c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    140e:	24a0      	movs	r4, #160	; 0xa0
    1410:	05e4      	lsls	r4, r4, #23
    1412:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1414:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1416:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1418:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    141a:	24d0      	movs	r4, #208	; 0xd0
    141c:	0624      	lsls	r4, r4, #24
    141e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1420:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1422:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1424:	78d4      	ldrb	r4, [r2, #3]
    1426:	2c00      	cmp	r4, #0
    1428:	d10c      	bne.n	1444 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    142a:	035c      	lsls	r4, r3, #13
    142c:	d505      	bpl.n	143a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    142e:	7893      	ldrb	r3, [r2, #2]
    1430:	2b01      	cmp	r3, #1
    1432:	d101      	bne.n	1438 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1434:	6181      	str	r1, [r0, #24]
    1436:	e000      	b.n	143a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1438:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    143a:	7853      	ldrb	r3, [r2, #1]
    143c:	3b01      	subs	r3, #1
    143e:	2b01      	cmp	r3, #1
    1440:	d800      	bhi.n	1444 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1442:	6081      	str	r1, [r0, #8]
		}
	}
}
    1444:	bd30      	pop	{r4, r5, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	fffbffff 	.word	0xfffbffff

0000144c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    144c:	b508      	push	{r3, lr}
    144e:	1c03      	adds	r3, r0, #0
    1450:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1452:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1454:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1456:	2900      	cmp	r1, #0
    1458:	d103      	bne.n	1462 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    145a:	0958      	lsrs	r0, r3, #5
    145c:	01c0      	lsls	r0, r0, #7
    145e:	4904      	ldr	r1, [pc, #16]	; (1470 <system_pinmux_pin_set_config+0x24>)
    1460:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1462:	211f      	movs	r1, #31
    1464:	400b      	ands	r3, r1
    1466:	2101      	movs	r1, #1
    1468:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    146a:	4b02      	ldr	r3, [pc, #8]	; (1474 <system_pinmux_pin_set_config+0x28>)
    146c:	4798      	blx	r3
}
    146e:	bd08      	pop	{r3, pc}
    1470:	41004400 	.word	0x41004400
    1474:	000013c1 	.word	0x000013c1

00001478 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1478:	4770      	bx	lr
    147a:	46c0      	nop			; (mov r8, r8)

0000147c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    147c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <system_init+0x14>)
    1480:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1482:	4b04      	ldr	r3, [pc, #16]	; (1494 <system_init+0x18>)
    1484:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <system_init+0x1c>)
    1488:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <system_init+0x20>)
    148c:	4798      	blx	r3
}
    148e:	bd08      	pop	{r3, pc}
    1490:	0000108d 	.word	0x0000108d
    1494:	00000181 	.word	0x00000181
    1498:	00001479 	.word	0x00001479
    149c:	00001479 	.word	0x00001479

000014a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    14a0:	e7fe      	b.n	14a0 <Dummy_Handler>
    14a2:	46c0      	nop			; (mov r8, r8)

000014a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    14a4:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14a6:	2102      	movs	r1, #2
    14a8:	2390      	movs	r3, #144	; 0x90
    14aa:	005b      	lsls	r3, r3, #1
    14ac:	4a28      	ldr	r2, [pc, #160]	; (1550 <Reset_Handler+0xac>)
    14ae:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14b0:	4b28      	ldr	r3, [pc, #160]	; (1554 <Reset_Handler+0xb0>)
    14b2:	78d8      	ldrb	r0, [r3, #3]
    14b4:	2103      	movs	r1, #3
    14b6:	4388      	bics	r0, r1
    14b8:	2202      	movs	r2, #2
    14ba:	4310      	orrs	r0, r2
    14bc:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14be:	78dd      	ldrb	r5, [r3, #3]
    14c0:	240c      	movs	r4, #12
    14c2:	43a5      	bics	r5, r4
    14c4:	2008      	movs	r0, #8
    14c6:	4305      	orrs	r5, r0
    14c8:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14ca:	4b23      	ldr	r3, [pc, #140]	; (1558 <Reset_Handler+0xb4>)
    14cc:	7b9e      	ldrb	r6, [r3, #14]
    14ce:	2530      	movs	r5, #48	; 0x30
    14d0:	43ae      	bics	r6, r5
    14d2:	2520      	movs	r5, #32
    14d4:	4335      	orrs	r5, r6
    14d6:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14d8:	7b9d      	ldrb	r5, [r3, #14]
    14da:	43a5      	bics	r5, r4
    14dc:	4328      	orrs	r0, r5
    14de:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14e0:	7b98      	ldrb	r0, [r3, #14]
    14e2:	4388      	bics	r0, r1
    14e4:	4302      	orrs	r2, r0
    14e6:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    14e8:	4b1c      	ldr	r3, [pc, #112]	; (155c <Reset_Handler+0xb8>)
    14ea:	4a1d      	ldr	r2, [pc, #116]	; (1560 <Reset_Handler+0xbc>)
    14ec:	429a      	cmp	r2, r3
    14ee:	d003      	beq.n	14f8 <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    14f0:	4b1c      	ldr	r3, [pc, #112]	; (1564 <Reset_Handler+0xc0>)
    14f2:	4a1a      	ldr	r2, [pc, #104]	; (155c <Reset_Handler+0xb8>)
    14f4:	429a      	cmp	r2, r3
    14f6:	d304      	bcc.n	1502 <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    14f8:	4b1b      	ldr	r3, [pc, #108]	; (1568 <Reset_Handler+0xc4>)
    14fa:	4a1c      	ldr	r2, [pc, #112]	; (156c <Reset_Handler+0xc8>)
    14fc:	429a      	cmp	r2, r3
    14fe:	d310      	bcc.n	1522 <Reset_Handler+0x7e>
    1500:	e01b      	b.n	153a <Reset_Handler+0x96>
    1502:	4b1b      	ldr	r3, [pc, #108]	; (1570 <Reset_Handler+0xcc>)
    1504:	4817      	ldr	r0, [pc, #92]	; (1564 <Reset_Handler+0xc0>)
    1506:	3003      	adds	r0, #3
    1508:	1ac0      	subs	r0, r0, r3
    150a:	0880      	lsrs	r0, r0, #2
    150c:	3001      	adds	r0, #1
    150e:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1510:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1512:	4912      	ldr	r1, [pc, #72]	; (155c <Reset_Handler+0xb8>)
    1514:	4a12      	ldr	r2, [pc, #72]	; (1560 <Reset_Handler+0xbc>)
    1516:	58d4      	ldr	r4, [r2, r3]
    1518:	50cc      	str	r4, [r1, r3]
    151a:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    151c:	4283      	cmp	r3, r0
    151e:	d1fa      	bne.n	1516 <Reset_Handler+0x72>
    1520:	e7ea      	b.n	14f8 <Reset_Handler+0x54>
    1522:	4b12      	ldr	r3, [pc, #72]	; (156c <Reset_Handler+0xc8>)
    1524:	1d1a      	adds	r2, r3, #4
    1526:	4910      	ldr	r1, [pc, #64]	; (1568 <Reset_Handler+0xc4>)
    1528:	3103      	adds	r1, #3
    152a:	1a89      	subs	r1, r1, r2
    152c:	0889      	lsrs	r1, r1, #2
    152e:	0089      	lsls	r1, r1, #2
    1530:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1532:	2100      	movs	r1, #0
    1534:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1536:	4293      	cmp	r3, r2
    1538:	d1fc      	bne.n	1534 <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <Reset_Handler+0xd0>)
    153c:	217f      	movs	r1, #127	; 0x7f
    153e:	4a0e      	ldr	r2, [pc, #56]	; (1578 <Reset_Handler+0xd4>)
    1540:	438a      	bics	r2, r1
    1542:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1544:	4b0d      	ldr	r3, [pc, #52]	; (157c <Reset_Handler+0xd8>)
    1546:	4798      	blx	r3

        /* Branch to main function */
        main();
    1548:	4b0d      	ldr	r3, [pc, #52]	; (1580 <Reset_Handler+0xdc>)
    154a:	4798      	blx	r3
    154c:	e7fe      	b.n	154c <Reset_Handler+0xa8>
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	41007000 	.word	0x41007000
    1554:	41005000 	.word	0x41005000
    1558:	41004800 	.word	0x41004800
    155c:	20000000 	.word	0x20000000
    1560:	00002ba4 	.word	0x00002ba4
    1564:	20000078 	.word	0x20000078
    1568:	20000148 	.word	0x20000148
    156c:	20000078 	.word	0x20000078
    1570:	20000004 	.word	0x20000004
    1574:	e000ed00 	.word	0xe000ed00
    1578:	00000000 	.word	0x00000000
    157c:	00001999 	.word	0x00001999
    1580:	0000176d 	.word	0x0000176d

00001584 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1584:	b5f0      	push	{r4, r5, r6, r7, lr}
    1586:	4647      	mov	r7, r8
    1588:	b480      	push	{r7}
    158a:	1c0c      	adds	r4, r1, #0
    158c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    158e:	2800      	cmp	r0, #0
    1590:	d10c      	bne.n	15ac <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    1592:	2a00      	cmp	r2, #0
    1594:	dd0d      	ble.n	15b2 <_read+0x2e>
    1596:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1598:	4e09      	ldr	r6, [pc, #36]	; (15c0 <_read+0x3c>)
    159a:	4d0a      	ldr	r5, [pc, #40]	; (15c4 <_read+0x40>)
    159c:	6830      	ldr	r0, [r6, #0]
    159e:	1c21      	adds	r1, r4, #0
    15a0:	682b      	ldr	r3, [r5, #0]
    15a2:	4798      	blx	r3
		ptr++;
    15a4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    15a6:	42bc      	cmp	r4, r7
    15a8:	d1f8      	bne.n	159c <_read+0x18>
    15aa:	e004      	b.n	15b6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    15ac:	2001      	movs	r0, #1
    15ae:	4240      	negs	r0, r0
    15b0:	e002      	b.n	15b8 <_read+0x34>
	}

	for (; len > 0; --len) {
    15b2:	2000      	movs	r0, #0
    15b4:	e000      	b.n	15b8 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    15b6:	4640      	mov	r0, r8
	}
	return nChars;
}
    15b8:	bc04      	pop	{r2}
    15ba:	4690      	mov	r8, r2
    15bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	20000134 	.word	0x20000134
    15c4:	2000012c 	.word	0x2000012c

000015c8 <_write>:
    15c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ca:	4647      	mov	r7, r8
    15cc:	b480      	push	{r7}
    15ce:	1c0e      	adds	r6, r1, #0
    15d0:	1c15      	adds	r5, r2, #0
    15d2:	3801      	subs	r0, #1
    15d4:	2802      	cmp	r0, #2
    15d6:	d810      	bhi.n	15fa <_write+0x32>
    15d8:	2a00      	cmp	r2, #0
    15da:	d011      	beq.n	1600 <_write+0x38>
    15dc:	2400      	movs	r4, #0
    15de:	4b0d      	ldr	r3, [pc, #52]	; (1614 <_write+0x4c>)
    15e0:	4698      	mov	r8, r3
    15e2:	4f0d      	ldr	r7, [pc, #52]	; (1618 <_write+0x50>)
    15e4:	4643      	mov	r3, r8
    15e6:	6818      	ldr	r0, [r3, #0]
    15e8:	5d31      	ldrb	r1, [r6, r4]
    15ea:	683b      	ldr	r3, [r7, #0]
    15ec:	4798      	blx	r3
    15ee:	2800      	cmp	r0, #0
    15f0:	db08      	blt.n	1604 <_write+0x3c>
    15f2:	3401      	adds	r4, #1
    15f4:	42a5      	cmp	r5, r4
    15f6:	d1f5      	bne.n	15e4 <_write+0x1c>
    15f8:	e007      	b.n	160a <_write+0x42>
    15fa:	2001      	movs	r0, #1
    15fc:	4240      	negs	r0, r0
    15fe:	e005      	b.n	160c <_write+0x44>
    1600:	2000      	movs	r0, #0
    1602:	e003      	b.n	160c <_write+0x44>
    1604:	2001      	movs	r0, #1
    1606:	4240      	negs	r0, r0
    1608:	e000      	b.n	160c <_write+0x44>
    160a:	1c20      	adds	r0, r4, #0
    160c:	bc04      	pop	{r2}
    160e:	4690      	mov	r8, r2
    1610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	20000134 	.word	0x20000134
    1618:	20000130 	.word	0x20000130

0000161c <_sbrk>:
    161c:	4b06      	ldr	r3, [pc, #24]	; (1638 <_sbrk+0x1c>)
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	2b00      	cmp	r3, #0
    1622:	d102      	bne.n	162a <_sbrk+0xe>
    1624:	4a05      	ldr	r2, [pc, #20]	; (163c <_sbrk+0x20>)
    1626:	4b04      	ldr	r3, [pc, #16]	; (1638 <_sbrk+0x1c>)
    1628:	601a      	str	r2, [r3, #0]
    162a:	4a03      	ldr	r2, [pc, #12]	; (1638 <_sbrk+0x1c>)
    162c:	6813      	ldr	r3, [r2, #0]
    162e:	1818      	adds	r0, r3, r0
    1630:	6010      	str	r0, [r2, #0]
    1632:	1c18      	adds	r0, r3, #0
    1634:	4770      	bx	lr
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	200000d4 	.word	0x200000d4
    163c:	20002148 	.word	0x20002148

00001640 <_close>:
    1640:	2001      	movs	r0, #1
    1642:	4240      	negs	r0, r0
    1644:	4770      	bx	lr
    1646:	46c0      	nop			; (mov r8, r8)

00001648 <_fstat>:
    1648:	2380      	movs	r3, #128	; 0x80
    164a:	019b      	lsls	r3, r3, #6
    164c:	604b      	str	r3, [r1, #4]
    164e:	2000      	movs	r0, #0
    1650:	4770      	bx	lr
    1652:	46c0      	nop			; (mov r8, r8)

00001654 <_isatty>:
    1654:	2001      	movs	r0, #1
    1656:	4770      	bx	lr

00001658 <_lseek>:
    1658:	2000      	movs	r0, #0
    165a:	4770      	bx	lr

0000165c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    165c:	b570      	push	{r4, r5, r6, lr}
    165e:	b082      	sub	sp, #8
    1660:	1c05      	adds	r5, r0, #0
    1662:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1664:	2200      	movs	r2, #0
    1666:	466b      	mov	r3, sp
    1668:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    166a:	4c06      	ldr	r4, [pc, #24]	; (1684 <usart_serial_getchar+0x28>)
    166c:	1c28      	adds	r0, r5, #0
    166e:	4669      	mov	r1, sp
    1670:	3106      	adds	r1, #6
    1672:	47a0      	blx	r4
    1674:	2800      	cmp	r0, #0
    1676:	d1f9      	bne.n	166c <usart_serial_getchar+0x10>

	*c = temp;
    1678:	466b      	mov	r3, sp
    167a:	3306      	adds	r3, #6
    167c:	881b      	ldrh	r3, [r3, #0]
    167e:	7033      	strb	r3, [r6, #0]
}
    1680:	b002      	add	sp, #8
    1682:	bd70      	pop	{r4, r5, r6, pc}
    1684:	00000d0d 	.word	0x00000d0d

00001688 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1688:	b570      	push	{r4, r5, r6, lr}
    168a:	1c06      	adds	r6, r0, #0
    168c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    168e:	4c03      	ldr	r4, [pc, #12]	; (169c <usart_serial_putchar+0x14>)
    1690:	1c30      	adds	r0, r6, #0
    1692:	1c29      	adds	r1, r5, #0
    1694:	47a0      	blx	r4
    1696:	2800      	cmp	r0, #0
    1698:	d1fa      	bne.n	1690 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    169a:	bd70      	pop	{r4, r5, r6, pc}
    169c:	00000ce1 	.word	0x00000ce1

000016a0 <configure_i2c_master>:

/*
	Configures I2C connection with standard settings
*/
void configure_i2c_master(void)
{
    16a0:	b510      	push	{r4, lr}
    16a2:	b08c      	sub	sp, #48	; 0x30
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    16a4:	2364      	movs	r3, #100	; 0x64
    16a6:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    16a8:	4b1c      	ldr	r3, [pc, #112]	; (171c <configure_i2c_master+0x7c>)
    16aa:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    16ac:	2300      	movs	r3, #0
    16ae:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    16b0:	4669      	mov	r1, sp
    16b2:	730b      	strb	r3, [r1, #12]
	config->run_in_standby   = false;
    16b4:	760b      	strb	r3, [r1, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    16b6:	2280      	movs	r2, #128	; 0x80
    16b8:	0392      	lsls	r2, r2, #14
    16ba:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    16bc:	2201      	movs	r2, #1
    16be:	4252      	negs	r2, r2
    16c0:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    16c2:	9307      	str	r3, [sp, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    16c4:	9308      	str	r3, [sp, #32]
	config->scl_low_timeout  = false;
    16c6:	2224      	movs	r2, #36	; 0x24
    16c8:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    16ca:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    16cc:	222c      	movs	r2, #44	; 0x2c
    16ce:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    16d0:	222d      	movs	r2, #45	; 0x2d
    16d2:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
    16d4:	222e      	movs	r2, #46	; 0x2e
    16d6:	548b      	strb	r3, [r1, r2]
	i2c_master_get_config_defaults(&config_i2c_master);
	//! [init_conf]

	/* Change buffer timeout to something longer. */
	//! [conf_change]
	config_i2c_master.buffer_timeout = 10000;
    16d8:	4b11      	ldr	r3, [pc, #68]	; (1720 <configure_i2c_master+0x80>)
    16da:	466a      	mov	r2, sp
    16dc:	82cb      	strh	r3, [r1, #22]
	//! [conf_change]

	/* Initialize and enable device with config. */
	//! [init_module]
	i2c_master_init(&i2c_master_instance, SERCOM0, &config_i2c_master);
    16de:	4c11      	ldr	r4, [pc, #68]	; (1724 <configure_i2c_master+0x84>)
    16e0:	1c20      	adds	r0, r4, #0
    16e2:	4911      	ldr	r1, [pc, #68]	; (1728 <configure_i2c_master+0x88>)
    16e4:	4b11      	ldr	r3, [pc, #68]	; (172c <configure_i2c_master+0x8c>)
    16e6:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16e8:	6822      	ldr	r2, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    16ea:	2107      	movs	r1, #7
    16ec:	69d3      	ldr	r3, [r2, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    16ee:	4219      	tst	r1, r3
    16f0:	d1fc      	bne.n	16ec <configure_i2c_master+0x4c>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    16f2:	6811      	ldr	r1, [r2, #0]
    16f4:	2302      	movs	r3, #2
    16f6:	430b      	orrs	r3, r1
    16f8:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    16fa:	4b0a      	ldr	r3, [pc, #40]	; (1724 <configure_i2c_master+0x84>)
    16fc:	88dc      	ldrh	r4, [r3, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    16fe:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1700:	2010      	movs	r0, #16
    1702:	e005      	b.n	1710 <configure_i2c_master+0x70>
		timeout_counter++;
    1704:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1706:	42a3      	cmp	r3, r4
    1708:	d302      	bcc.n	1710 <configure_i2c_master+0x70>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    170a:	2310      	movs	r3, #16
    170c:	8353      	strh	r3, [r2, #26]
    170e:	e002      	b.n	1716 <configure_i2c_master+0x76>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1710:	8b51      	ldrh	r1, [r2, #26]
    1712:	4201      	tst	r1, r0
    1714:	d0f6      	beq.n	1704 <configure_i2c_master+0x64>
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    1716:	b00c      	add	sp, #48	; 0x30
    1718:	bd10      	pop	{r4, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	00000d48 	.word	0x00000d48
    1720:	00002710 	.word	0x00002710
    1724:	20000138 	.word	0x20000138
    1728:	42000800 	.word	0x42000800
    172c:	000001e9 	.word	0x000001e9

00001730 <i2c_write_command>:

/*
	Given a pointer to a packet, perform a write over I2C following the information
	detailed in the packet
*/
void i2c_write_command(struct i2c_master_packet* packet_address){
    1730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1732:	1c07      	adds	r7, r0, #0
	uint16_t timeout = 0;
	while (i2c_master_write_packet_wait(&i2c_master_instance, packet_address) != STATUS_OK) {
    1734:	4c08      	ldr	r4, [pc, #32]	; (1758 <i2c_write_command+0x28>)
    1736:	4e09      	ldr	r6, [pc, #36]	; (175c <i2c_write_command+0x2c>)
    1738:	4d09      	ldr	r5, [pc, #36]	; (1760 <i2c_write_command+0x30>)
    173a:	e007      	b.n	174c <i2c_write_command+0x1c>
    173c:	3c01      	subs	r4, #1
    173e:	b2a4      	uxth	r4, r4
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    1740:	2c00      	cmp	r4, #0
    1742:	d103      	bne.n	174c <i2c_write_command+0x1c>
			printf("I2C write timed out.\r\n");
    1744:	4807      	ldr	r0, [pc, #28]	; (1764 <i2c_write_command+0x34>)
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <i2c_write_command+0x38>)
    1748:	4798      	blx	r3
			break;
    174a:	e004      	b.n	1756 <i2c_write_command+0x26>
	Given a pointer to a packet, perform a write over I2C following the information
	detailed in the packet
*/
void i2c_write_command(struct i2c_master_packet* packet_address){
	uint16_t timeout = 0;
	while (i2c_master_write_packet_wait(&i2c_master_instance, packet_address) != STATUS_OK) {
    174c:	1c30      	adds	r0, r6, #0
    174e:	1c39      	adds	r1, r7, #0
    1750:	47a8      	blx	r5
    1752:	2800      	cmp	r0, #0
    1754:	d1f2      	bne.n	173c <i2c_write_command+0xc>
		if (timeout++ == TIMEOUT) {
			printf("I2C write timed out.\r\n");
			break;
		}
	}
}
    1756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1758:	000003e9 	.word	0x000003e9
    175c:	20000138 	.word	0x20000138
    1760:	00000511 	.word	0x00000511
    1764:	00002a7c 	.word	0x00002a7c
    1768:	00001b01 	.word	0x00001b01

0000176c <main>:
void i2c_write_command(struct i2c_master_packet* packet_address);
void i2c_read_command(struct i2c_master_packet* packet_address);
void HMC5883L_init(void);
void HMC5883L_read(uint8_t* read_buffer);

int main(void){
    176c:	b5f0      	push	{r4, r5, r6, r7, lr}
    176e:	b095      	sub	sp, #84	; 0x54
	//initialize SAMD21
	system_init();
    1770:	4b38      	ldr	r3, [pc, #224]	; (1854 <main+0xe8>)
    1772:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1774:	aa01      	add	r2, sp, #4
    1776:	2380      	movs	r3, #128	; 0x80
    1778:	05db      	lsls	r3, r3, #23
    177a:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    177c:	2300      	movs	r3, #0
    177e:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    1780:	21ff      	movs	r1, #255	; 0xff
    1782:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1784:	2100      	movs	r1, #0
    1786:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1788:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    178a:	2601      	movs	r6, #1
    178c:	2024      	movs	r0, #36	; 0x24
    178e:	5416      	strb	r6, [r2, r0]
	config->transmitter_enable = true;
    1790:	2025      	movs	r0, #37	; 0x25
    1792:	5416      	strb	r6, [r2, r0]
	config->clock_polarity_inverted = false;
    1794:	2026      	movs	r0, #38	; 0x26
    1796:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    1798:	2027      	movs	r0, #39	; 0x27
    179a:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    179c:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    179e:	202c      	movs	r0, #44	; 0x2c
    17a0:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    17a2:	202d      	movs	r0, #45	; 0x2d
    17a4:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    17a6:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    17a8:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    17aa:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    17ac:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    17ae:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    17b0:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    17b2:	2313      	movs	r3, #19
    17b4:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    17b6:	7751      	strb	r1, [r2, #29]
 */
static void configure_console(void) {
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    17b8:	2380      	movs	r3, #128	; 0x80
    17ba:	035b      	lsls	r3, r3, #13
    17bc:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    17be:	4b26      	ldr	r3, [pc, #152]	; (1858 <main+0xec>)
    17c0:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    17c2:	4b26      	ldr	r3, [pc, #152]	; (185c <main+0xf0>)
    17c4:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    17c6:	2301      	movs	r3, #1
    17c8:	425b      	negs	r3, r3
    17ca:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    17cc:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    17ce:	2396      	movs	r3, #150	; 0x96
    17d0:	021b      	lsls	r3, r3, #8
    17d2:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    17d4:	4c22      	ldr	r4, [pc, #136]	; (1860 <main+0xf4>)
    17d6:	4b23      	ldr	r3, [pc, #140]	; (1864 <main+0xf8>)
    17d8:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    17da:	4923      	ldr	r1, [pc, #140]	; (1868 <main+0xfc>)
    17dc:	4b23      	ldr	r3, [pc, #140]	; (186c <main+0x100>)
    17de:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    17e0:	4923      	ldr	r1, [pc, #140]	; (1870 <main+0x104>)
    17e2:	4b24      	ldr	r3, [pc, #144]	; (1874 <main+0x108>)
    17e4:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    17e6:	1c20      	adds	r0, r4, #0
    17e8:	4923      	ldr	r1, [pc, #140]	; (1878 <main+0x10c>)
    17ea:	4b24      	ldr	r3, [pc, #144]	; (187c <main+0x110>)
    17ec:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    17ee:	4f24      	ldr	r7, [pc, #144]	; (1880 <main+0x114>)
    17f0:	683b      	ldr	r3, [r7, #0]
    17f2:	6898      	ldr	r0, [r3, #8]
    17f4:	2100      	movs	r1, #0
    17f6:	4d23      	ldr	r5, [pc, #140]	; (1884 <main+0x118>)
    17f8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    17fa:	683b      	ldr	r3, [r7, #0]
    17fc:	6858      	ldr	r0, [r3, #4]
    17fe:	2100      	movs	r1, #0
    1800:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1802:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1804:	1c28      	adds	r0, r5, #0
    1806:	4b20      	ldr	r3, [pc, #128]	; (1888 <main+0x11c>)
    1808:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    180a:	231f      	movs	r3, #31
    180c:	4018      	ands	r0, r3
    180e:	4086      	lsls	r6, r0
    1810:	4b1e      	ldr	r3, [pc, #120]	; (188c <main+0x120>)
    1812:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1814:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1816:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1818:	2b00      	cmp	r3, #0
    181a:	d1fc      	bne.n	1816 <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    181c:	682a      	ldr	r2, [r5, #0]
    181e:	2302      	movs	r3, #2
    1820:	4313      	orrs	r3, r2
    1822:	602b      	str	r3, [r5, #0]
	//initialize SAMD21
	system_init();
	
	//configure PUTTY terminal
	configure_console();
	printf("Running...\n\r");
    1824:	481a      	ldr	r0, [pc, #104]	; (1890 <main+0x124>)
    1826:	4c1b      	ldr	r4, [pc, #108]	; (1894 <main+0x128>)
    1828:	47a0      	blx	r4
	
	//configure i2c master on SAMD21
	configure_i2c_master();
    182a:	4b1b      	ldr	r3, [pc, #108]	; (1898 <main+0x12c>)
    182c:	4798      	blx	r3
	printf("I2C Configured\n\r");
    182e:	481b      	ldr	r0, [pc, #108]	; (189c <main+0x130>)
    1830:	47a0      	blx	r4
		.data        = mc_move_buffer,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};*/
	struct i2c_master_packet mc_dir_packet = {
    1832:	ac11      	add	r4, sp, #68	; 0x44
    1834:	4b1a      	ldr	r3, [pc, #104]	; (18a0 <main+0x134>)
    1836:	1c22      	adds	r2, r4, #0
    1838:	cb23      	ldmia	r3!, {r0, r1, r5}
    183a:	c223      	stmia	r2!, {r0, r1, r5}
		.data        = mc_dir_buffer,
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	printf("going to write dir command\r\n");
    183c:	4819      	ldr	r0, [pc, #100]	; (18a4 <main+0x138>)
    183e:	4d1a      	ldr	r5, [pc, #104]	; (18a8 <main+0x13c>)
    1840:	47a8      	blx	r5
	
	i2c_write_command(&mc_dir_packet);
    1842:	1c20      	adds	r0, r4, #0
    1844:	4b19      	ldr	r3, [pc, #100]	; (18ac <main+0x140>)
    1846:	4798      	blx	r3
	printf("wrote dir command\r\n");
    1848:	4819      	ldr	r0, [pc, #100]	; (18b0 <main+0x144>)
    184a:	47a8      	blx	r5
	//i2c_write_command(&mc_move_packet);
	//printf("wrote move command\r\n");
}
    184c:	2000      	movs	r0, #0
    184e:	b015      	add	sp, #84	; 0x54
    1850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	0000147d 	.word	0x0000147d
    1858:	00160002 	.word	0x00160002
    185c:	00170002 	.word	0x00170002
    1860:	200000d8 	.word	0x200000d8
    1864:	20000134 	.word	0x20000134
    1868:	00001689 	.word	0x00001689
    186c:	20000130 	.word	0x20000130
    1870:	0000165d 	.word	0x0000165d
    1874:	2000012c 	.word	0x2000012c
    1878:	42001400 	.word	0x42001400
    187c:	000009d9 	.word	0x000009d9
    1880:	20000074 	.word	0x20000074
    1884:	00001b15 	.word	0x00001b15
    1888:	0000094d 	.word	0x0000094d
    188c:	e000e100 	.word	0xe000e100
    1890:	00002a94 	.word	0x00002a94
    1894:	00001a09 	.word	0x00001a09
    1898:	000016a1 	.word	0x000016a1
    189c:	00002aa4 	.word	0x00002aa4
    18a0:	00002a4c 	.word	0x00002a4c
    18a4:	00002ab8 	.word	0x00002ab8
    18a8:	00001b01 	.word	0x00001b01
    18ac:	00001731 	.word	0x00001731
    18b0:	00002ad4 	.word	0x00002ad4

000018b4 <__aeabi_uidiv>:
    18b4:	2900      	cmp	r1, #0
    18b6:	d034      	beq.n	1922 <.udivsi3_skip_div0_test+0x6a>

000018b8 <.udivsi3_skip_div0_test>:
    18b8:	2301      	movs	r3, #1
    18ba:	2200      	movs	r2, #0
    18bc:	b410      	push	{r4}
    18be:	4288      	cmp	r0, r1
    18c0:	d32c      	bcc.n	191c <.udivsi3_skip_div0_test+0x64>
    18c2:	2401      	movs	r4, #1
    18c4:	0724      	lsls	r4, r4, #28
    18c6:	42a1      	cmp	r1, r4
    18c8:	d204      	bcs.n	18d4 <.udivsi3_skip_div0_test+0x1c>
    18ca:	4281      	cmp	r1, r0
    18cc:	d202      	bcs.n	18d4 <.udivsi3_skip_div0_test+0x1c>
    18ce:	0109      	lsls	r1, r1, #4
    18d0:	011b      	lsls	r3, r3, #4
    18d2:	e7f8      	b.n	18c6 <.udivsi3_skip_div0_test+0xe>
    18d4:	00e4      	lsls	r4, r4, #3
    18d6:	42a1      	cmp	r1, r4
    18d8:	d204      	bcs.n	18e4 <.udivsi3_skip_div0_test+0x2c>
    18da:	4281      	cmp	r1, r0
    18dc:	d202      	bcs.n	18e4 <.udivsi3_skip_div0_test+0x2c>
    18de:	0049      	lsls	r1, r1, #1
    18e0:	005b      	lsls	r3, r3, #1
    18e2:	e7f8      	b.n	18d6 <.udivsi3_skip_div0_test+0x1e>
    18e4:	4288      	cmp	r0, r1
    18e6:	d301      	bcc.n	18ec <.udivsi3_skip_div0_test+0x34>
    18e8:	1a40      	subs	r0, r0, r1
    18ea:	431a      	orrs	r2, r3
    18ec:	084c      	lsrs	r4, r1, #1
    18ee:	42a0      	cmp	r0, r4
    18f0:	d302      	bcc.n	18f8 <.udivsi3_skip_div0_test+0x40>
    18f2:	1b00      	subs	r0, r0, r4
    18f4:	085c      	lsrs	r4, r3, #1
    18f6:	4322      	orrs	r2, r4
    18f8:	088c      	lsrs	r4, r1, #2
    18fa:	42a0      	cmp	r0, r4
    18fc:	d302      	bcc.n	1904 <.udivsi3_skip_div0_test+0x4c>
    18fe:	1b00      	subs	r0, r0, r4
    1900:	089c      	lsrs	r4, r3, #2
    1902:	4322      	orrs	r2, r4
    1904:	08cc      	lsrs	r4, r1, #3
    1906:	42a0      	cmp	r0, r4
    1908:	d302      	bcc.n	1910 <.udivsi3_skip_div0_test+0x58>
    190a:	1b00      	subs	r0, r0, r4
    190c:	08dc      	lsrs	r4, r3, #3
    190e:	4322      	orrs	r2, r4
    1910:	2800      	cmp	r0, #0
    1912:	d003      	beq.n	191c <.udivsi3_skip_div0_test+0x64>
    1914:	091b      	lsrs	r3, r3, #4
    1916:	d001      	beq.n	191c <.udivsi3_skip_div0_test+0x64>
    1918:	0909      	lsrs	r1, r1, #4
    191a:	e7e3      	b.n	18e4 <.udivsi3_skip_div0_test+0x2c>
    191c:	1c10      	adds	r0, r2, #0
    191e:	bc10      	pop	{r4}
    1920:	4770      	bx	lr
    1922:	2800      	cmp	r0, #0
    1924:	d001      	beq.n	192a <.udivsi3_skip_div0_test+0x72>
    1926:	2000      	movs	r0, #0
    1928:	43c0      	mvns	r0, r0
    192a:	b407      	push	{r0, r1, r2}
    192c:	4802      	ldr	r0, [pc, #8]	; (1938 <.udivsi3_skip_div0_test+0x80>)
    192e:	a102      	add	r1, pc, #8	; (adr r1, 1938 <.udivsi3_skip_div0_test+0x80>)
    1930:	1840      	adds	r0, r0, r1
    1932:	9002      	str	r0, [sp, #8]
    1934:	bd03      	pop	{r0, r1, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	00000019 	.word	0x00000019

0000193c <__aeabi_uidivmod>:
    193c:	2900      	cmp	r1, #0
    193e:	d0f0      	beq.n	1922 <.udivsi3_skip_div0_test+0x6a>
    1940:	b503      	push	{r0, r1, lr}
    1942:	f7ff ffb9 	bl	18b8 <.udivsi3_skip_div0_test>
    1946:	bc0e      	pop	{r1, r2, r3}
    1948:	4342      	muls	r2, r0
    194a:	1a89      	subs	r1, r1, r2
    194c:	4718      	bx	r3
    194e:	46c0      	nop			; (mov r8, r8)

00001950 <__aeabi_idiv0>:
    1950:	4770      	bx	lr
    1952:	46c0      	nop			; (mov r8, r8)

00001954 <__aeabi_lmul>:
    1954:	469c      	mov	ip, r3
    1956:	0403      	lsls	r3, r0, #16
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	0c1b      	lsrs	r3, r3, #16
    195c:	0417      	lsls	r7, r2, #16
    195e:	0c3f      	lsrs	r7, r7, #16
    1960:	0c15      	lsrs	r5, r2, #16
    1962:	1c1e      	adds	r6, r3, #0
    1964:	1c04      	adds	r4, r0, #0
    1966:	0c00      	lsrs	r0, r0, #16
    1968:	437e      	muls	r6, r7
    196a:	436b      	muls	r3, r5
    196c:	4347      	muls	r7, r0
    196e:	4345      	muls	r5, r0
    1970:	18fb      	adds	r3, r7, r3
    1972:	0c30      	lsrs	r0, r6, #16
    1974:	1818      	adds	r0, r3, r0
    1976:	4287      	cmp	r7, r0
    1978:	d902      	bls.n	1980 <__aeabi_lmul+0x2c>
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	025b      	lsls	r3, r3, #9
    197e:	18ed      	adds	r5, r5, r3
    1980:	0c03      	lsrs	r3, r0, #16
    1982:	18ed      	adds	r5, r5, r3
    1984:	4663      	mov	r3, ip
    1986:	435c      	muls	r4, r3
    1988:	434a      	muls	r2, r1
    198a:	0436      	lsls	r6, r6, #16
    198c:	0c36      	lsrs	r6, r6, #16
    198e:	18a1      	adds	r1, r4, r2
    1990:	0400      	lsls	r0, r0, #16
    1992:	1980      	adds	r0, r0, r6
    1994:	1949      	adds	r1, r1, r5
    1996:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001998 <__libc_init_array>:
    1998:	b570      	push	{r4, r5, r6, lr}
    199a:	4b0e      	ldr	r3, [pc, #56]	; (19d4 <__libc_init_array+0x3c>)
    199c:	4d0e      	ldr	r5, [pc, #56]	; (19d8 <__libc_init_array+0x40>)
    199e:	2400      	movs	r4, #0
    19a0:	1aed      	subs	r5, r5, r3
    19a2:	10ad      	asrs	r5, r5, #2
    19a4:	1c1e      	adds	r6, r3, #0
    19a6:	42ac      	cmp	r4, r5
    19a8:	d004      	beq.n	19b4 <__libc_init_array+0x1c>
    19aa:	00a3      	lsls	r3, r4, #2
    19ac:	58f3      	ldr	r3, [r6, r3]
    19ae:	4798      	blx	r3
    19b0:	3401      	adds	r4, #1
    19b2:	e7f8      	b.n	19a6 <__libc_init_array+0xe>
    19b4:	f001 f8e6 	bl	2b84 <_init>
    19b8:	4b08      	ldr	r3, [pc, #32]	; (19dc <__libc_init_array+0x44>)
    19ba:	4d09      	ldr	r5, [pc, #36]	; (19e0 <__libc_init_array+0x48>)
    19bc:	2400      	movs	r4, #0
    19be:	1aed      	subs	r5, r5, r3
    19c0:	10ad      	asrs	r5, r5, #2
    19c2:	1c1e      	adds	r6, r3, #0
    19c4:	42ac      	cmp	r4, r5
    19c6:	d004      	beq.n	19d2 <__libc_init_array+0x3a>
    19c8:	00a3      	lsls	r3, r4, #2
    19ca:	58f3      	ldr	r3, [r6, r3]
    19cc:	4798      	blx	r3
    19ce:	3401      	adds	r4, #1
    19d0:	e7f8      	b.n	19c4 <__libc_init_array+0x2c>
    19d2:	bd70      	pop	{r4, r5, r6, pc}
    19d4:	00002b90 	.word	0x00002b90
    19d8:	00002b90 	.word	0x00002b90
    19dc:	00002b90 	.word	0x00002b90
    19e0:	00002b94 	.word	0x00002b94

000019e4 <memcpy>:
    19e4:	b510      	push	{r4, lr}
    19e6:	2300      	movs	r3, #0
    19e8:	4293      	cmp	r3, r2
    19ea:	d003      	beq.n	19f4 <memcpy+0x10>
    19ec:	5ccc      	ldrb	r4, [r1, r3]
    19ee:	54c4      	strb	r4, [r0, r3]
    19f0:	3301      	adds	r3, #1
    19f2:	e7f9      	b.n	19e8 <memcpy+0x4>
    19f4:	bd10      	pop	{r4, pc}

000019f6 <memset>:
    19f6:	1c03      	adds	r3, r0, #0
    19f8:	1882      	adds	r2, r0, r2
    19fa:	4293      	cmp	r3, r2
    19fc:	d002      	beq.n	1a04 <memset+0xe>
    19fe:	7019      	strb	r1, [r3, #0]
    1a00:	3301      	adds	r3, #1
    1a02:	e7fa      	b.n	19fa <memset+0x4>
    1a04:	4770      	bx	lr
	...

00001a08 <iprintf>:
    1a08:	b40f      	push	{r0, r1, r2, r3}
    1a0a:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <iprintf+0x30>)
    1a0c:	b513      	push	{r0, r1, r4, lr}
    1a0e:	681c      	ldr	r4, [r3, #0]
    1a10:	2c00      	cmp	r4, #0
    1a12:	d005      	beq.n	1a20 <iprintf+0x18>
    1a14:	69a3      	ldr	r3, [r4, #24]
    1a16:	2b00      	cmp	r3, #0
    1a18:	d102      	bne.n	1a20 <iprintf+0x18>
    1a1a:	1c20      	adds	r0, r4, #0
    1a1c:	f000 fd98 	bl	2550 <__sinit>
    1a20:	ab05      	add	r3, sp, #20
    1a22:	68a1      	ldr	r1, [r4, #8]
    1a24:	1c20      	adds	r0, r4, #0
    1a26:	9a04      	ldr	r2, [sp, #16]
    1a28:	9301      	str	r3, [sp, #4]
    1a2a:	f000 f92b 	bl	1c84 <_vfiprintf_r>
    1a2e:	bc16      	pop	{r1, r2, r4}
    1a30:	bc08      	pop	{r3}
    1a32:	b004      	add	sp, #16
    1a34:	4718      	bx	r3
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	20000074 	.word	0x20000074

00001a3c <_puts_r>:
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	1c05      	adds	r5, r0, #0
    1a40:	1c0e      	adds	r6, r1, #0
    1a42:	2800      	cmp	r0, #0
    1a44:	d004      	beq.n	1a50 <_puts_r+0x14>
    1a46:	6982      	ldr	r2, [r0, #24]
    1a48:	2a00      	cmp	r2, #0
    1a4a:	d101      	bne.n	1a50 <_puts_r+0x14>
    1a4c:	f000 fd80 	bl	2550 <__sinit>
    1a50:	68ac      	ldr	r4, [r5, #8]
    1a52:	89a3      	ldrh	r3, [r4, #12]
    1a54:	071a      	lsls	r2, r3, #28
    1a56:	d502      	bpl.n	1a5e <_puts_r+0x22>
    1a58:	6923      	ldr	r3, [r4, #16]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d119      	bne.n	1a92 <_puts_r+0x56>
    1a5e:	1c28      	adds	r0, r5, #0
    1a60:	1c21      	adds	r1, r4, #0
    1a62:	f000 fbf9 	bl	2258 <__swsetup_r>
    1a66:	2800      	cmp	r0, #0
    1a68:	d013      	beq.n	1a92 <_puts_r+0x56>
    1a6a:	2001      	movs	r0, #1
    1a6c:	4240      	negs	r0, r0
    1a6e:	e045      	b.n	1afc <_puts_r+0xc0>
    1a70:	7831      	ldrb	r1, [r6, #0]
    1a72:	2b00      	cmp	r3, #0
    1a74:	da1b      	bge.n	1aae <_puts_r+0x72>
    1a76:	69a2      	ldr	r2, [r4, #24]
    1a78:	4293      	cmp	r3, r2
    1a7a:	da11      	bge.n	1aa0 <_puts_r+0x64>
    1a7c:	1c28      	adds	r0, r5, #0
    1a7e:	1c22      	adds	r2, r4, #0
    1a80:	f000 fb92 	bl	21a8 <__swbuf_r>
    1a84:	3001      	adds	r0, #1
    1a86:	4243      	negs	r3, r0
    1a88:	4158      	adcs	r0, r3
    1a8a:	b2c0      	uxtb	r0, r0
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d1ec      	bne.n	1a6a <_puts_r+0x2e>
    1a90:	3601      	adds	r6, #1
    1a92:	68a3      	ldr	r3, [r4, #8]
    1a94:	7832      	ldrb	r2, [r6, #0]
    1a96:	3b01      	subs	r3, #1
    1a98:	60a3      	str	r3, [r4, #8]
    1a9a:	2a00      	cmp	r2, #0
    1a9c:	d1e8      	bne.n	1a70 <_puts_r+0x34>
    1a9e:	e00c      	b.n	1aba <_puts_r+0x7e>
    1aa0:	6823      	ldr	r3, [r4, #0]
    1aa2:	7019      	strb	r1, [r3, #0]
    1aa4:	6823      	ldr	r3, [r4, #0]
    1aa6:	7819      	ldrb	r1, [r3, #0]
    1aa8:	290a      	cmp	r1, #10
    1aaa:	d103      	bne.n	1ab4 <_puts_r+0x78>
    1aac:	e7e6      	b.n	1a7c <_puts_r+0x40>
    1aae:	6822      	ldr	r2, [r4, #0]
    1ab0:	7011      	strb	r1, [r2, #0]
    1ab2:	6823      	ldr	r3, [r4, #0]
    1ab4:	3301      	adds	r3, #1
    1ab6:	6023      	str	r3, [r4, #0]
    1ab8:	e7ea      	b.n	1a90 <_puts_r+0x54>
    1aba:	2b00      	cmp	r3, #0
    1abc:	da17      	bge.n	1aee <_puts_r+0xb2>
    1abe:	69a2      	ldr	r2, [r4, #24]
    1ac0:	4293      	cmp	r3, r2
    1ac2:	db08      	blt.n	1ad6 <_puts_r+0x9a>
    1ac4:	6822      	ldr	r2, [r4, #0]
    1ac6:	230a      	movs	r3, #10
    1ac8:	7013      	strb	r3, [r2, #0]
    1aca:	6823      	ldr	r3, [r4, #0]
    1acc:	7819      	ldrb	r1, [r3, #0]
    1ace:	290a      	cmp	r1, #10
    1ad0:	d111      	bne.n	1af6 <_puts_r+0xba>
    1ad2:	1c28      	adds	r0, r5, #0
    1ad4:	e001      	b.n	1ada <_puts_r+0x9e>
    1ad6:	1c28      	adds	r0, r5, #0
    1ad8:	210a      	movs	r1, #10
    1ada:	1c22      	adds	r2, r4, #0
    1adc:	f000 fb64 	bl	21a8 <__swbuf_r>
    1ae0:	3001      	adds	r0, #1
    1ae2:	4243      	negs	r3, r0
    1ae4:	4158      	adcs	r0, r3
    1ae6:	b2c0      	uxtb	r0, r0
    1ae8:	2800      	cmp	r0, #0
    1aea:	d006      	beq.n	1afa <_puts_r+0xbe>
    1aec:	e7bd      	b.n	1a6a <_puts_r+0x2e>
    1aee:	6822      	ldr	r2, [r4, #0]
    1af0:	230a      	movs	r3, #10
    1af2:	7013      	strb	r3, [r2, #0]
    1af4:	6823      	ldr	r3, [r4, #0]
    1af6:	3301      	adds	r3, #1
    1af8:	6023      	str	r3, [r4, #0]
    1afa:	200a      	movs	r0, #10
    1afc:	bd70      	pop	{r4, r5, r6, pc}
	...

00001b00 <puts>:
    1b00:	b508      	push	{r3, lr}
    1b02:	4b03      	ldr	r3, [pc, #12]	; (1b10 <puts+0x10>)
    1b04:	1c01      	adds	r1, r0, #0
    1b06:	6818      	ldr	r0, [r3, #0]
    1b08:	f7ff ff98 	bl	1a3c <_puts_r>
    1b0c:	bd08      	pop	{r3, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20000074 	.word	0x20000074

00001b14 <setbuf>:
    1b14:	b508      	push	{r3, lr}
    1b16:	424a      	negs	r2, r1
    1b18:	414a      	adcs	r2, r1
    1b1a:	2380      	movs	r3, #128	; 0x80
    1b1c:	0052      	lsls	r2, r2, #1
    1b1e:	00db      	lsls	r3, r3, #3
    1b20:	f000 f802 	bl	1b28 <setvbuf>
    1b24:	bd08      	pop	{r3, pc}
	...

00001b28 <setvbuf>:
    1b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b2a:	1c1e      	adds	r6, r3, #0
    1b2c:	4b3c      	ldr	r3, [pc, #240]	; (1c20 <setvbuf+0xf8>)
    1b2e:	1c04      	adds	r4, r0, #0
    1b30:	681d      	ldr	r5, [r3, #0]
    1b32:	1c0f      	adds	r7, r1, #0
    1b34:	9201      	str	r2, [sp, #4]
    1b36:	2d00      	cmp	r5, #0
    1b38:	d005      	beq.n	1b46 <setvbuf+0x1e>
    1b3a:	69aa      	ldr	r2, [r5, #24]
    1b3c:	2a00      	cmp	r2, #0
    1b3e:	d102      	bne.n	1b46 <setvbuf+0x1e>
    1b40:	1c28      	adds	r0, r5, #0
    1b42:	f000 fd05 	bl	2550 <__sinit>
    1b46:	4b37      	ldr	r3, [pc, #220]	; (1c24 <setvbuf+0xfc>)
    1b48:	429c      	cmp	r4, r3
    1b4a:	d101      	bne.n	1b50 <setvbuf+0x28>
    1b4c:	686c      	ldr	r4, [r5, #4]
    1b4e:	e008      	b.n	1b62 <setvbuf+0x3a>
    1b50:	4b35      	ldr	r3, [pc, #212]	; (1c28 <setvbuf+0x100>)
    1b52:	429c      	cmp	r4, r3
    1b54:	d101      	bne.n	1b5a <setvbuf+0x32>
    1b56:	68ac      	ldr	r4, [r5, #8]
    1b58:	e003      	b.n	1b62 <setvbuf+0x3a>
    1b5a:	4b34      	ldr	r3, [pc, #208]	; (1c2c <setvbuf+0x104>)
    1b5c:	429c      	cmp	r4, r3
    1b5e:	d100      	bne.n	1b62 <setvbuf+0x3a>
    1b60:	68ec      	ldr	r4, [r5, #12]
    1b62:	9b01      	ldr	r3, [sp, #4]
    1b64:	2b02      	cmp	r3, #2
    1b66:	d857      	bhi.n	1c18 <setvbuf+0xf0>
    1b68:	2e00      	cmp	r6, #0
    1b6a:	db55      	blt.n	1c18 <setvbuf+0xf0>
    1b6c:	1c28      	adds	r0, r5, #0
    1b6e:	1c21      	adds	r1, r4, #0
    1b70:	f000 fc6e 	bl	2450 <_fflush_r>
    1b74:	2300      	movs	r3, #0
    1b76:	6063      	str	r3, [r4, #4]
    1b78:	61a3      	str	r3, [r4, #24]
    1b7a:	89a3      	ldrh	r3, [r4, #12]
    1b7c:	061a      	lsls	r2, r3, #24
    1b7e:	d503      	bpl.n	1b88 <setvbuf+0x60>
    1b80:	1c28      	adds	r0, r5, #0
    1b82:	6921      	ldr	r1, [r4, #16]
    1b84:	f000 fdba 	bl	26fc <_free_r>
    1b88:	89a3      	ldrh	r3, [r4, #12]
    1b8a:	2283      	movs	r2, #131	; 0x83
    1b8c:	4393      	bics	r3, r2
    1b8e:	81a3      	strh	r3, [r4, #12]
    1b90:	9b01      	ldr	r3, [sp, #4]
    1b92:	2b02      	cmp	r3, #2
    1b94:	d013      	beq.n	1bbe <setvbuf+0x96>
    1b96:	2f00      	cmp	r7, #0
    1b98:	d125      	bne.n	1be6 <setvbuf+0xbe>
    1b9a:	2e00      	cmp	r6, #0
    1b9c:	d101      	bne.n	1ba2 <setvbuf+0x7a>
    1b9e:	2680      	movs	r6, #128	; 0x80
    1ba0:	00f6      	lsls	r6, r6, #3
    1ba2:	1c30      	adds	r0, r6, #0
    1ba4:	f000 fd94 	bl	26d0 <malloc>
    1ba8:	1e07      	subs	r7, r0, #0
    1baa:	d118      	bne.n	1bde <setvbuf+0xb6>
    1bac:	2080      	movs	r0, #128	; 0x80
    1bae:	00c0      	lsls	r0, r0, #3
    1bb0:	f000 fd8e 	bl	26d0 <malloc>
    1bb4:	1e07      	subs	r7, r0, #0
    1bb6:	d110      	bne.n	1bda <setvbuf+0xb2>
    1bb8:	2001      	movs	r0, #1
    1bba:	4240      	negs	r0, r0
    1bbc:	e000      	b.n	1bc0 <setvbuf+0x98>
    1bbe:	2000      	movs	r0, #0
    1bc0:	89a3      	ldrh	r3, [r4, #12]
    1bc2:	2202      	movs	r2, #2
    1bc4:	4313      	orrs	r3, r2
    1bc6:	81a3      	strh	r3, [r4, #12]
    1bc8:	2300      	movs	r3, #0
    1bca:	60a3      	str	r3, [r4, #8]
    1bcc:	1c23      	adds	r3, r4, #0
    1bce:	3347      	adds	r3, #71	; 0x47
    1bd0:	6023      	str	r3, [r4, #0]
    1bd2:	6123      	str	r3, [r4, #16]
    1bd4:	2301      	movs	r3, #1
    1bd6:	6163      	str	r3, [r4, #20]
    1bd8:	e020      	b.n	1c1c <setvbuf+0xf4>
    1bda:	2680      	movs	r6, #128	; 0x80
    1bdc:	00f6      	lsls	r6, r6, #3
    1bde:	89a3      	ldrh	r3, [r4, #12]
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	4313      	orrs	r3, r2
    1be4:	81a3      	strh	r3, [r4, #12]
    1be6:	9a01      	ldr	r2, [sp, #4]
    1be8:	2a01      	cmp	r2, #1
    1bea:	d104      	bne.n	1bf6 <setvbuf+0xce>
    1bec:	89a3      	ldrh	r3, [r4, #12]
    1bee:	4313      	orrs	r3, r2
    1bf0:	81a3      	strh	r3, [r4, #12]
    1bf2:	4273      	negs	r3, r6
    1bf4:	61a3      	str	r3, [r4, #24]
    1bf6:	4b0e      	ldr	r3, [pc, #56]	; (1c30 <setvbuf+0x108>)
    1bf8:	2000      	movs	r0, #0
    1bfa:	62ab      	str	r3, [r5, #40]	; 0x28
    1bfc:	89a3      	ldrh	r3, [r4, #12]
    1bfe:	6027      	str	r7, [r4, #0]
    1c00:	6127      	str	r7, [r4, #16]
    1c02:	6166      	str	r6, [r4, #20]
    1c04:	071a      	lsls	r2, r3, #28
    1c06:	d509      	bpl.n	1c1c <setvbuf+0xf4>
    1c08:	2203      	movs	r2, #3
    1c0a:	4013      	ands	r3, r2
    1c0c:	425a      	negs	r2, r3
    1c0e:	4153      	adcs	r3, r2
    1c10:	425b      	negs	r3, r3
    1c12:	401e      	ands	r6, r3
    1c14:	60a6      	str	r6, [r4, #8]
    1c16:	e001      	b.n	1c1c <setvbuf+0xf4>
    1c18:	2001      	movs	r0, #1
    1c1a:	4240      	negs	r0, r0
    1c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	20000074 	.word	0x20000074
    1c24:	00002b24 	.word	0x00002b24
    1c28:	00002b44 	.word	0x00002b44
    1c2c:	00002b64 	.word	0x00002b64
    1c30:	000024a9 	.word	0x000024a9

00001c34 <__sfputc_r>:
    1c34:	6893      	ldr	r3, [r2, #8]
    1c36:	b510      	push	{r4, lr}
    1c38:	3b01      	subs	r3, #1
    1c3a:	6093      	str	r3, [r2, #8]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	da05      	bge.n	1c4c <__sfputc_r+0x18>
    1c40:	6994      	ldr	r4, [r2, #24]
    1c42:	42a3      	cmp	r3, r4
    1c44:	db08      	blt.n	1c58 <__sfputc_r+0x24>
    1c46:	b2cb      	uxtb	r3, r1
    1c48:	2b0a      	cmp	r3, #10
    1c4a:	d005      	beq.n	1c58 <__sfputc_r+0x24>
    1c4c:	6813      	ldr	r3, [r2, #0]
    1c4e:	1c58      	adds	r0, r3, #1
    1c50:	6010      	str	r0, [r2, #0]
    1c52:	7019      	strb	r1, [r3, #0]
    1c54:	b2c8      	uxtb	r0, r1
    1c56:	e001      	b.n	1c5c <__sfputc_r+0x28>
    1c58:	f000 faa6 	bl	21a8 <__swbuf_r>
    1c5c:	bd10      	pop	{r4, pc}

00001c5e <__sfputs_r>:
    1c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c60:	1c06      	adds	r6, r0, #0
    1c62:	1c0f      	adds	r7, r1, #0
    1c64:	1c14      	adds	r4, r2, #0
    1c66:	18d5      	adds	r5, r2, r3
    1c68:	42ac      	cmp	r4, r5
    1c6a:	d008      	beq.n	1c7e <__sfputs_r+0x20>
    1c6c:	7821      	ldrb	r1, [r4, #0]
    1c6e:	1c30      	adds	r0, r6, #0
    1c70:	1c3a      	adds	r2, r7, #0
    1c72:	f7ff ffdf 	bl	1c34 <__sfputc_r>
    1c76:	3401      	adds	r4, #1
    1c78:	1c43      	adds	r3, r0, #1
    1c7a:	d1f5      	bne.n	1c68 <__sfputs_r+0xa>
    1c7c:	e000      	b.n	1c80 <__sfputs_r+0x22>
    1c7e:	2000      	movs	r0, #0
    1c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001c84 <_vfiprintf_r>:
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c86:	b09f      	sub	sp, #124	; 0x7c
    1c88:	1c06      	adds	r6, r0, #0
    1c8a:	1c0f      	adds	r7, r1, #0
    1c8c:	9203      	str	r2, [sp, #12]
    1c8e:	9305      	str	r3, [sp, #20]
    1c90:	2800      	cmp	r0, #0
    1c92:	d004      	beq.n	1c9e <_vfiprintf_r+0x1a>
    1c94:	6981      	ldr	r1, [r0, #24]
    1c96:	2900      	cmp	r1, #0
    1c98:	d101      	bne.n	1c9e <_vfiprintf_r+0x1a>
    1c9a:	f000 fc59 	bl	2550 <__sinit>
    1c9e:	4b75      	ldr	r3, [pc, #468]	; (1e74 <_vfiprintf_r+0x1f0>)
    1ca0:	429f      	cmp	r7, r3
    1ca2:	d101      	bne.n	1ca8 <_vfiprintf_r+0x24>
    1ca4:	6877      	ldr	r7, [r6, #4]
    1ca6:	e008      	b.n	1cba <_vfiprintf_r+0x36>
    1ca8:	4b73      	ldr	r3, [pc, #460]	; (1e78 <_vfiprintf_r+0x1f4>)
    1caa:	429f      	cmp	r7, r3
    1cac:	d101      	bne.n	1cb2 <_vfiprintf_r+0x2e>
    1cae:	68b7      	ldr	r7, [r6, #8]
    1cb0:	e003      	b.n	1cba <_vfiprintf_r+0x36>
    1cb2:	4b72      	ldr	r3, [pc, #456]	; (1e7c <_vfiprintf_r+0x1f8>)
    1cb4:	429f      	cmp	r7, r3
    1cb6:	d100      	bne.n	1cba <_vfiprintf_r+0x36>
    1cb8:	68f7      	ldr	r7, [r6, #12]
    1cba:	89bb      	ldrh	r3, [r7, #12]
    1cbc:	071a      	lsls	r2, r3, #28
    1cbe:	d50a      	bpl.n	1cd6 <_vfiprintf_r+0x52>
    1cc0:	693b      	ldr	r3, [r7, #16]
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d007      	beq.n	1cd6 <_vfiprintf_r+0x52>
    1cc6:	ad06      	add	r5, sp, #24
    1cc8:	2300      	movs	r3, #0
    1cca:	616b      	str	r3, [r5, #20]
    1ccc:	2320      	movs	r3, #32
    1cce:	766b      	strb	r3, [r5, #25]
    1cd0:	2330      	movs	r3, #48	; 0x30
    1cd2:	76ab      	strb	r3, [r5, #26]
    1cd4:	e03b      	b.n	1d4e <_vfiprintf_r+0xca>
    1cd6:	1c30      	adds	r0, r6, #0
    1cd8:	1c39      	adds	r1, r7, #0
    1cda:	f000 fabd 	bl	2258 <__swsetup_r>
    1cde:	2800      	cmp	r0, #0
    1ce0:	d0f1      	beq.n	1cc6 <_vfiprintf_r+0x42>
    1ce2:	2001      	movs	r0, #1
    1ce4:	4240      	negs	r0, r0
    1ce6:	e0c2      	b.n	1e6e <_vfiprintf_r+0x1ea>
    1ce8:	9a05      	ldr	r2, [sp, #20]
    1cea:	1d11      	adds	r1, r2, #4
    1cec:	6812      	ldr	r2, [r2, #0]
    1cee:	9105      	str	r1, [sp, #20]
    1cf0:	2a00      	cmp	r2, #0
    1cf2:	db76      	blt.n	1de2 <_vfiprintf_r+0x15e>
    1cf4:	9209      	str	r2, [sp, #36]	; 0x24
    1cf6:	3401      	adds	r4, #1
    1cf8:	7823      	ldrb	r3, [r4, #0]
    1cfa:	2b2e      	cmp	r3, #46	; 0x2e
    1cfc:	d100      	bne.n	1d00 <_vfiprintf_r+0x7c>
    1cfe:	e081      	b.n	1e04 <_vfiprintf_r+0x180>
    1d00:	7821      	ldrb	r1, [r4, #0]
    1d02:	485f      	ldr	r0, [pc, #380]	; (1e80 <_vfiprintf_r+0x1fc>)
    1d04:	2203      	movs	r2, #3
    1d06:	f000 fced 	bl	26e4 <memchr>
    1d0a:	2800      	cmp	r0, #0
    1d0c:	d007      	beq.n	1d1e <_vfiprintf_r+0x9a>
    1d0e:	495c      	ldr	r1, [pc, #368]	; (1e80 <_vfiprintf_r+0x1fc>)
    1d10:	682a      	ldr	r2, [r5, #0]
    1d12:	1a43      	subs	r3, r0, r1
    1d14:	2040      	movs	r0, #64	; 0x40
    1d16:	4098      	lsls	r0, r3
    1d18:	4310      	orrs	r0, r2
    1d1a:	6028      	str	r0, [r5, #0]
    1d1c:	3401      	adds	r4, #1
    1d1e:	7821      	ldrb	r1, [r4, #0]
    1d20:	1c63      	adds	r3, r4, #1
    1d22:	4858      	ldr	r0, [pc, #352]	; (1e84 <_vfiprintf_r+0x200>)
    1d24:	2206      	movs	r2, #6
    1d26:	9303      	str	r3, [sp, #12]
    1d28:	7629      	strb	r1, [r5, #24]
    1d2a:	f000 fcdb 	bl	26e4 <memchr>
    1d2e:	2800      	cmp	r0, #0
    1d30:	d100      	bne.n	1d34 <_vfiprintf_r+0xb0>
    1d32:	e08a      	b.n	1e4a <_vfiprintf_r+0x1c6>
    1d34:	4b54      	ldr	r3, [pc, #336]	; (1e88 <_vfiprintf_r+0x204>)
    1d36:	2b00      	cmp	r3, #0
    1d38:	d17e      	bne.n	1e38 <_vfiprintf_r+0x1b4>
    1d3a:	9b05      	ldr	r3, [sp, #20]
    1d3c:	2207      	movs	r2, #7
    1d3e:	3307      	adds	r3, #7
    1d40:	4393      	bics	r3, r2
    1d42:	3308      	adds	r3, #8
    1d44:	9305      	str	r3, [sp, #20]
    1d46:	696a      	ldr	r2, [r5, #20]
    1d48:	9904      	ldr	r1, [sp, #16]
    1d4a:	1853      	adds	r3, r2, r1
    1d4c:	616b      	str	r3, [r5, #20]
    1d4e:	9c03      	ldr	r4, [sp, #12]
    1d50:	7823      	ldrb	r3, [r4, #0]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d104      	bne.n	1d60 <_vfiprintf_r+0xdc>
    1d56:	9903      	ldr	r1, [sp, #12]
    1d58:	1a61      	subs	r1, r4, r1
    1d5a:	9102      	str	r1, [sp, #8]
    1d5c:	d010      	beq.n	1d80 <_vfiprintf_r+0xfc>
    1d5e:	e003      	b.n	1d68 <_vfiprintf_r+0xe4>
    1d60:	2b25      	cmp	r3, #37	; 0x25
    1d62:	d0f8      	beq.n	1d56 <_vfiprintf_r+0xd2>
    1d64:	3401      	adds	r4, #1
    1d66:	e7f3      	b.n	1d50 <_vfiprintf_r+0xcc>
    1d68:	1c30      	adds	r0, r6, #0
    1d6a:	1c39      	adds	r1, r7, #0
    1d6c:	9a03      	ldr	r2, [sp, #12]
    1d6e:	9b02      	ldr	r3, [sp, #8]
    1d70:	f7ff ff75 	bl	1c5e <__sfputs_r>
    1d74:	3001      	adds	r0, #1
    1d76:	d075      	beq.n	1e64 <_vfiprintf_r+0x1e0>
    1d78:	696a      	ldr	r2, [r5, #20]
    1d7a:	9902      	ldr	r1, [sp, #8]
    1d7c:	1853      	adds	r3, r2, r1
    1d7e:	616b      	str	r3, [r5, #20]
    1d80:	7823      	ldrb	r3, [r4, #0]
    1d82:	2b00      	cmp	r3, #0
    1d84:	d06e      	beq.n	1e64 <_vfiprintf_r+0x1e0>
    1d86:	2201      	movs	r2, #1
    1d88:	4252      	negs	r2, r2
    1d8a:	606a      	str	r2, [r5, #4]
    1d8c:	466a      	mov	r2, sp
    1d8e:	2300      	movs	r3, #0
    1d90:	325b      	adds	r2, #91	; 0x5b
    1d92:	3401      	adds	r4, #1
    1d94:	602b      	str	r3, [r5, #0]
    1d96:	60eb      	str	r3, [r5, #12]
    1d98:	60ab      	str	r3, [r5, #8]
    1d9a:	7013      	strb	r3, [r2, #0]
    1d9c:	65ab      	str	r3, [r5, #88]	; 0x58
    1d9e:	7821      	ldrb	r1, [r4, #0]
    1da0:	483a      	ldr	r0, [pc, #232]	; (1e8c <_vfiprintf_r+0x208>)
    1da2:	2205      	movs	r2, #5
    1da4:	f000 fc9e 	bl	26e4 <memchr>
    1da8:	2800      	cmp	r0, #0
    1daa:	d008      	beq.n	1dbe <_vfiprintf_r+0x13a>
    1dac:	4a37      	ldr	r2, [pc, #220]	; (1e8c <_vfiprintf_r+0x208>)
    1dae:	3401      	adds	r4, #1
    1db0:	1a83      	subs	r3, r0, r2
    1db2:	2001      	movs	r0, #1
    1db4:	4098      	lsls	r0, r3
    1db6:	682b      	ldr	r3, [r5, #0]
    1db8:	4318      	orrs	r0, r3
    1dba:	6028      	str	r0, [r5, #0]
    1dbc:	e7ef      	b.n	1d9e <_vfiprintf_r+0x11a>
    1dbe:	682b      	ldr	r3, [r5, #0]
    1dc0:	06d9      	lsls	r1, r3, #27
    1dc2:	d503      	bpl.n	1dcc <_vfiprintf_r+0x148>
    1dc4:	466a      	mov	r2, sp
    1dc6:	2120      	movs	r1, #32
    1dc8:	325b      	adds	r2, #91	; 0x5b
    1dca:	7011      	strb	r1, [r2, #0]
    1dcc:	071a      	lsls	r2, r3, #28
    1dce:	d503      	bpl.n	1dd8 <_vfiprintf_r+0x154>
    1dd0:	466a      	mov	r2, sp
    1dd2:	212b      	movs	r1, #43	; 0x2b
    1dd4:	325b      	adds	r2, #91	; 0x5b
    1dd6:	7011      	strb	r1, [r2, #0]
    1dd8:	7822      	ldrb	r2, [r4, #0]
    1dda:	2a2a      	cmp	r2, #42	; 0x2a
    1ddc:	d084      	beq.n	1ce8 <_vfiprintf_r+0x64>
    1dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1de0:	e005      	b.n	1dee <_vfiprintf_r+0x16a>
    1de2:	4252      	negs	r2, r2
    1de4:	60ea      	str	r2, [r5, #12]
    1de6:	2202      	movs	r2, #2
    1de8:	4313      	orrs	r3, r2
    1dea:	602b      	str	r3, [r5, #0]
    1dec:	e783      	b.n	1cf6 <_vfiprintf_r+0x72>
    1dee:	7822      	ldrb	r2, [r4, #0]
    1df0:	3a30      	subs	r2, #48	; 0x30
    1df2:	2a09      	cmp	r2, #9
    1df4:	d804      	bhi.n	1e00 <_vfiprintf_r+0x17c>
    1df6:	210a      	movs	r1, #10
    1df8:	434b      	muls	r3, r1
    1dfa:	3401      	adds	r4, #1
    1dfc:	189b      	adds	r3, r3, r2
    1dfe:	e7f6      	b.n	1dee <_vfiprintf_r+0x16a>
    1e00:	9309      	str	r3, [sp, #36]	; 0x24
    1e02:	e779      	b.n	1cf8 <_vfiprintf_r+0x74>
    1e04:	7863      	ldrb	r3, [r4, #1]
    1e06:	2b2a      	cmp	r3, #42	; 0x2a
    1e08:	d109      	bne.n	1e1e <_vfiprintf_r+0x19a>
    1e0a:	9b05      	ldr	r3, [sp, #20]
    1e0c:	3402      	adds	r4, #2
    1e0e:	1d1a      	adds	r2, r3, #4
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	9205      	str	r2, [sp, #20]
    1e14:	2b00      	cmp	r3, #0
    1e16:	da0d      	bge.n	1e34 <_vfiprintf_r+0x1b0>
    1e18:	2301      	movs	r3, #1
    1e1a:	425b      	negs	r3, r3
    1e1c:	e00a      	b.n	1e34 <_vfiprintf_r+0x1b0>
    1e1e:	3401      	adds	r4, #1
    1e20:	2300      	movs	r3, #0
    1e22:	7822      	ldrb	r2, [r4, #0]
    1e24:	3a30      	subs	r2, #48	; 0x30
    1e26:	2a09      	cmp	r2, #9
    1e28:	d804      	bhi.n	1e34 <_vfiprintf_r+0x1b0>
    1e2a:	210a      	movs	r1, #10
    1e2c:	434b      	muls	r3, r1
    1e2e:	3401      	adds	r4, #1
    1e30:	189b      	adds	r3, r3, r2
    1e32:	e7f6      	b.n	1e22 <_vfiprintf_r+0x19e>
    1e34:	9307      	str	r3, [sp, #28]
    1e36:	e763      	b.n	1d00 <_vfiprintf_r+0x7c>
    1e38:	ab05      	add	r3, sp, #20
    1e3a:	9300      	str	r3, [sp, #0]
    1e3c:	1c30      	adds	r0, r6, #0
    1e3e:	1c29      	adds	r1, r5, #0
    1e40:	1c3a      	adds	r2, r7, #0
    1e42:	4b13      	ldr	r3, [pc, #76]	; (1e90 <_vfiprintf_r+0x20c>)
    1e44:	e000      	b.n	1e48 <_vfiprintf_r+0x1c4>
    1e46:	bf00      	nop
    1e48:	e007      	b.n	1e5a <_vfiprintf_r+0x1d6>
    1e4a:	ab05      	add	r3, sp, #20
    1e4c:	9300      	str	r3, [sp, #0]
    1e4e:	1c30      	adds	r0, r6, #0
    1e50:	1c29      	adds	r1, r5, #0
    1e52:	1c3a      	adds	r2, r7, #0
    1e54:	4b0e      	ldr	r3, [pc, #56]	; (1e90 <_vfiprintf_r+0x20c>)
    1e56:	f000 f891 	bl	1f7c <_printf_i>
    1e5a:	9004      	str	r0, [sp, #16]
    1e5c:	9904      	ldr	r1, [sp, #16]
    1e5e:	3101      	adds	r1, #1
    1e60:	d000      	beq.n	1e64 <_vfiprintf_r+0x1e0>
    1e62:	e770      	b.n	1d46 <_vfiprintf_r+0xc2>
    1e64:	89bb      	ldrh	r3, [r7, #12]
    1e66:	065a      	lsls	r2, r3, #25
    1e68:	d500      	bpl.n	1e6c <_vfiprintf_r+0x1e8>
    1e6a:	e73a      	b.n	1ce2 <_vfiprintf_r+0x5e>
    1e6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e6e:	b01f      	add	sp, #124	; 0x7c
    1e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	00002b24 	.word	0x00002b24
    1e78:	00002b44 	.word	0x00002b44
    1e7c:	00002b64 	.word	0x00002b64
    1e80:	00002af6 	.word	0x00002af6
    1e84:	00002afa 	.word	0x00002afa
    1e88:	00000000 	.word	0x00000000
    1e8c:	00002af0 	.word	0x00002af0
    1e90:	00001c5f 	.word	0x00001c5f

00001e94 <_printf_common>:
    1e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e96:	1c15      	adds	r5, r2, #0
    1e98:	9301      	str	r3, [sp, #4]
    1e9a:	690a      	ldr	r2, [r1, #16]
    1e9c:	688b      	ldr	r3, [r1, #8]
    1e9e:	1c06      	adds	r6, r0, #0
    1ea0:	1c0c      	adds	r4, r1, #0
    1ea2:	4293      	cmp	r3, r2
    1ea4:	da00      	bge.n	1ea8 <_printf_common+0x14>
    1ea6:	1c13      	adds	r3, r2, #0
    1ea8:	1c22      	adds	r2, r4, #0
    1eaa:	602b      	str	r3, [r5, #0]
    1eac:	3243      	adds	r2, #67	; 0x43
    1eae:	7812      	ldrb	r2, [r2, #0]
    1eb0:	2a00      	cmp	r2, #0
    1eb2:	d001      	beq.n	1eb8 <_printf_common+0x24>
    1eb4:	3301      	adds	r3, #1
    1eb6:	602b      	str	r3, [r5, #0]
    1eb8:	6820      	ldr	r0, [r4, #0]
    1eba:	0680      	lsls	r0, r0, #26
    1ebc:	d502      	bpl.n	1ec4 <_printf_common+0x30>
    1ebe:	682b      	ldr	r3, [r5, #0]
    1ec0:	3302      	adds	r3, #2
    1ec2:	602b      	str	r3, [r5, #0]
    1ec4:	6821      	ldr	r1, [r4, #0]
    1ec6:	2706      	movs	r7, #6
    1ec8:	400f      	ands	r7, r1
    1eca:	d01f      	beq.n	1f0c <_printf_common+0x78>
    1ecc:	1c23      	adds	r3, r4, #0
    1ece:	3343      	adds	r3, #67	; 0x43
    1ed0:	781b      	ldrb	r3, [r3, #0]
    1ed2:	1e5a      	subs	r2, r3, #1
    1ed4:	4193      	sbcs	r3, r2
    1ed6:	6822      	ldr	r2, [r4, #0]
    1ed8:	0692      	lsls	r2, r2, #26
    1eda:	d51f      	bpl.n	1f1c <_printf_common+0x88>
    1edc:	18e1      	adds	r1, r4, r3
    1ede:	3140      	adds	r1, #64	; 0x40
    1ee0:	2030      	movs	r0, #48	; 0x30
    1ee2:	70c8      	strb	r0, [r1, #3]
    1ee4:	1c21      	adds	r1, r4, #0
    1ee6:	1c5a      	adds	r2, r3, #1
    1ee8:	3145      	adds	r1, #69	; 0x45
    1eea:	7809      	ldrb	r1, [r1, #0]
    1eec:	18a2      	adds	r2, r4, r2
    1eee:	3240      	adds	r2, #64	; 0x40
    1ef0:	3302      	adds	r3, #2
    1ef2:	70d1      	strb	r1, [r2, #3]
    1ef4:	e012      	b.n	1f1c <_printf_common+0x88>
    1ef6:	1c22      	adds	r2, r4, #0
    1ef8:	1c30      	adds	r0, r6, #0
    1efa:	9901      	ldr	r1, [sp, #4]
    1efc:	3219      	adds	r2, #25
    1efe:	2301      	movs	r3, #1
    1f00:	9f08      	ldr	r7, [sp, #32]
    1f02:	47b8      	blx	r7
    1f04:	3001      	adds	r0, #1
    1f06:	d011      	beq.n	1f2c <_printf_common+0x98>
    1f08:	9f00      	ldr	r7, [sp, #0]
    1f0a:	3701      	adds	r7, #1
    1f0c:	9700      	str	r7, [sp, #0]
    1f0e:	68e0      	ldr	r0, [r4, #12]
    1f10:	6829      	ldr	r1, [r5, #0]
    1f12:	9f00      	ldr	r7, [sp, #0]
    1f14:	1a43      	subs	r3, r0, r1
    1f16:	429f      	cmp	r7, r3
    1f18:	dbed      	blt.n	1ef6 <_printf_common+0x62>
    1f1a:	e7d7      	b.n	1ecc <_printf_common+0x38>
    1f1c:	1c22      	adds	r2, r4, #0
    1f1e:	1c30      	adds	r0, r6, #0
    1f20:	9901      	ldr	r1, [sp, #4]
    1f22:	3243      	adds	r2, #67	; 0x43
    1f24:	9f08      	ldr	r7, [sp, #32]
    1f26:	47b8      	blx	r7
    1f28:	3001      	adds	r0, #1
    1f2a:	d102      	bne.n	1f32 <_printf_common+0x9e>
    1f2c:	2001      	movs	r0, #1
    1f2e:	4240      	negs	r0, r0
    1f30:	e023      	b.n	1f7a <_printf_common+0xe6>
    1f32:	6820      	ldr	r0, [r4, #0]
    1f34:	2106      	movs	r1, #6
    1f36:	682b      	ldr	r3, [r5, #0]
    1f38:	68e2      	ldr	r2, [r4, #12]
    1f3a:	4001      	ands	r1, r0
    1f3c:	2500      	movs	r5, #0
    1f3e:	2904      	cmp	r1, #4
    1f40:	d103      	bne.n	1f4a <_printf_common+0xb6>
    1f42:	1ad5      	subs	r5, r2, r3
    1f44:	43eb      	mvns	r3, r5
    1f46:	17db      	asrs	r3, r3, #31
    1f48:	401d      	ands	r5, r3
    1f4a:	68a2      	ldr	r2, [r4, #8]
    1f4c:	6923      	ldr	r3, [r4, #16]
    1f4e:	429a      	cmp	r2, r3
    1f50:	dd01      	ble.n	1f56 <_printf_common+0xc2>
    1f52:	1ad3      	subs	r3, r2, r3
    1f54:	18ed      	adds	r5, r5, r3
    1f56:	2700      	movs	r7, #0
    1f58:	9700      	str	r7, [sp, #0]
    1f5a:	9f00      	ldr	r7, [sp, #0]
    1f5c:	42af      	cmp	r7, r5
    1f5e:	da0b      	bge.n	1f78 <_printf_common+0xe4>
    1f60:	1c22      	adds	r2, r4, #0
    1f62:	1c30      	adds	r0, r6, #0
    1f64:	9901      	ldr	r1, [sp, #4]
    1f66:	321a      	adds	r2, #26
    1f68:	2301      	movs	r3, #1
    1f6a:	9f08      	ldr	r7, [sp, #32]
    1f6c:	47b8      	blx	r7
    1f6e:	3001      	adds	r0, #1
    1f70:	d0dc      	beq.n	1f2c <_printf_common+0x98>
    1f72:	9f00      	ldr	r7, [sp, #0]
    1f74:	3701      	adds	r7, #1
    1f76:	e7ef      	b.n	1f58 <_printf_common+0xc4>
    1f78:	2000      	movs	r0, #0
    1f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001f7c <_printf_i>:
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	1c0d      	adds	r5, r1, #0
    1f80:	b08b      	sub	sp, #44	; 0x2c
    1f82:	3543      	adds	r5, #67	; 0x43
    1f84:	9206      	str	r2, [sp, #24]
    1f86:	9005      	str	r0, [sp, #20]
    1f88:	9307      	str	r3, [sp, #28]
    1f8a:	9504      	str	r5, [sp, #16]
    1f8c:	7e0b      	ldrb	r3, [r1, #24]
    1f8e:	1c0c      	adds	r4, r1, #0
    1f90:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1f92:	2b6e      	cmp	r3, #110	; 0x6e
    1f94:	d100      	bne.n	1f98 <_printf_i+0x1c>
    1f96:	e0a7      	b.n	20e8 <STACK_SIZE+0xe8>
    1f98:	d811      	bhi.n	1fbe <_printf_i+0x42>
    1f9a:	2b63      	cmp	r3, #99	; 0x63
    1f9c:	d022      	beq.n	1fe4 <_printf_i+0x68>
    1f9e:	d809      	bhi.n	1fb4 <_printf_i+0x38>
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d100      	bne.n	1fa6 <_printf_i+0x2a>
    1fa4:	e0b0      	b.n	2108 <STACK_SIZE+0x108>
    1fa6:	2b58      	cmp	r3, #88	; 0x58
    1fa8:	d000      	beq.n	1fac <_printf_i+0x30>
    1faa:	e0c0      	b.n	212e <STACK_SIZE+0x12e>
    1fac:	3145      	adds	r1, #69	; 0x45
    1fae:	700b      	strb	r3, [r1, #0]
    1fb0:	4d7b      	ldr	r5, [pc, #492]	; (21a0 <STACK_SIZE+0x1a0>)
    1fb2:	e04e      	b.n	2052 <STACK_SIZE+0x52>
    1fb4:	2b64      	cmp	r3, #100	; 0x64
    1fb6:	d01c      	beq.n	1ff2 <_printf_i+0x76>
    1fb8:	2b69      	cmp	r3, #105	; 0x69
    1fba:	d01a      	beq.n	1ff2 <_printf_i+0x76>
    1fbc:	e0b7      	b.n	212e <STACK_SIZE+0x12e>
    1fbe:	2b73      	cmp	r3, #115	; 0x73
    1fc0:	d100      	bne.n	1fc4 <_printf_i+0x48>
    1fc2:	e0a5      	b.n	2110 <STACK_SIZE+0x110>
    1fc4:	d809      	bhi.n	1fda <_printf_i+0x5e>
    1fc6:	2b6f      	cmp	r3, #111	; 0x6f
    1fc8:	d029      	beq.n	201e <STACK_SIZE+0x1e>
    1fca:	2b70      	cmp	r3, #112	; 0x70
    1fcc:	d000      	beq.n	1fd0 <_printf_i+0x54>
    1fce:	e0ae      	b.n	212e <STACK_SIZE+0x12e>
    1fd0:	680e      	ldr	r6, [r1, #0]
    1fd2:	2320      	movs	r3, #32
    1fd4:	4333      	orrs	r3, r6
    1fd6:	600b      	str	r3, [r1, #0]
    1fd8:	e036      	b.n	2048 <STACK_SIZE+0x48>
    1fda:	2b75      	cmp	r3, #117	; 0x75
    1fdc:	d01f      	beq.n	201e <STACK_SIZE+0x1e>
    1fde:	2b78      	cmp	r3, #120	; 0x78
    1fe0:	d032      	beq.n	2048 <STACK_SIZE+0x48>
    1fe2:	e0a4      	b.n	212e <STACK_SIZE+0x12e>
    1fe4:	6813      	ldr	r3, [r2, #0]
    1fe6:	1c0d      	adds	r5, r1, #0
    1fe8:	1d19      	adds	r1, r3, #4
    1fea:	3542      	adds	r5, #66	; 0x42
    1fec:	6011      	str	r1, [r2, #0]
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	e09f      	b.n	2132 <STACK_SIZE+0x132>
    1ff2:	6821      	ldr	r1, [r4, #0]
    1ff4:	6813      	ldr	r3, [r2, #0]
    1ff6:	060e      	lsls	r6, r1, #24
    1ff8:	d503      	bpl.n	2002 <STACK_SIZE+0x2>
    1ffa:	1d19      	adds	r1, r3, #4
    1ffc:	6011      	str	r1, [r2, #0]
    1ffe:	681e      	ldr	r6, [r3, #0]
    2000:	e005      	b.n	200e <STACK_SIZE+0xe>
    2002:	0648      	lsls	r0, r1, #25
    2004:	d5f9      	bpl.n	1ffa <_printf_i+0x7e>
    2006:	1d19      	adds	r1, r3, #4
    2008:	6011      	str	r1, [r2, #0]
    200a:	2100      	movs	r1, #0
    200c:	5e5e      	ldrsh	r6, [r3, r1]
    200e:	4b64      	ldr	r3, [pc, #400]	; (21a0 <STACK_SIZE+0x1a0>)
    2010:	2e00      	cmp	r6, #0
    2012:	da3b      	bge.n	208c <STACK_SIZE+0x8c>
    2014:	9d04      	ldr	r5, [sp, #16]
    2016:	222d      	movs	r2, #45	; 0x2d
    2018:	4276      	negs	r6, r6
    201a:	702a      	strb	r2, [r5, #0]
    201c:	e036      	b.n	208c <STACK_SIZE+0x8c>
    201e:	6821      	ldr	r1, [r4, #0]
    2020:	6813      	ldr	r3, [r2, #0]
    2022:	060e      	lsls	r6, r1, #24
    2024:	d503      	bpl.n	202e <STACK_SIZE+0x2e>
    2026:	1d19      	adds	r1, r3, #4
    2028:	6011      	str	r1, [r2, #0]
    202a:	681e      	ldr	r6, [r3, #0]
    202c:	e004      	b.n	2038 <STACK_SIZE+0x38>
    202e:	0648      	lsls	r0, r1, #25
    2030:	d5f9      	bpl.n	2026 <STACK_SIZE+0x26>
    2032:	1d19      	adds	r1, r3, #4
    2034:	881e      	ldrh	r6, [r3, #0]
    2036:	6011      	str	r1, [r2, #0]
    2038:	4b59      	ldr	r3, [pc, #356]	; (21a0 <STACK_SIZE+0x1a0>)
    203a:	7e22      	ldrb	r2, [r4, #24]
    203c:	9303      	str	r3, [sp, #12]
    203e:	2708      	movs	r7, #8
    2040:	2a6f      	cmp	r2, #111	; 0x6f
    2042:	d01e      	beq.n	2082 <STACK_SIZE+0x82>
    2044:	270a      	movs	r7, #10
    2046:	e01c      	b.n	2082 <STACK_SIZE+0x82>
    2048:	1c23      	adds	r3, r4, #0
    204a:	2178      	movs	r1, #120	; 0x78
    204c:	3345      	adds	r3, #69	; 0x45
    204e:	4d55      	ldr	r5, [pc, #340]	; (21a4 <STACK_SIZE+0x1a4>)
    2050:	7019      	strb	r1, [r3, #0]
    2052:	6811      	ldr	r1, [r2, #0]
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	1d08      	adds	r0, r1, #4
    2058:	9503      	str	r5, [sp, #12]
    205a:	6010      	str	r0, [r2, #0]
    205c:	061e      	lsls	r6, r3, #24
    205e:	d501      	bpl.n	2064 <STACK_SIZE+0x64>
    2060:	680e      	ldr	r6, [r1, #0]
    2062:	e002      	b.n	206a <STACK_SIZE+0x6a>
    2064:	0658      	lsls	r0, r3, #25
    2066:	d5fb      	bpl.n	2060 <STACK_SIZE+0x60>
    2068:	880e      	ldrh	r6, [r1, #0]
    206a:	07d9      	lsls	r1, r3, #31
    206c:	d502      	bpl.n	2074 <STACK_SIZE+0x74>
    206e:	2220      	movs	r2, #32
    2070:	4313      	orrs	r3, r2
    2072:	6023      	str	r3, [r4, #0]
    2074:	2710      	movs	r7, #16
    2076:	2e00      	cmp	r6, #0
    2078:	d103      	bne.n	2082 <STACK_SIZE+0x82>
    207a:	6822      	ldr	r2, [r4, #0]
    207c:	2320      	movs	r3, #32
    207e:	439a      	bics	r2, r3
    2080:	6022      	str	r2, [r4, #0]
    2082:	1c23      	adds	r3, r4, #0
    2084:	2200      	movs	r2, #0
    2086:	3343      	adds	r3, #67	; 0x43
    2088:	701a      	strb	r2, [r3, #0]
    208a:	e001      	b.n	2090 <STACK_SIZE+0x90>
    208c:	9303      	str	r3, [sp, #12]
    208e:	270a      	movs	r7, #10
    2090:	6863      	ldr	r3, [r4, #4]
    2092:	60a3      	str	r3, [r4, #8]
    2094:	2b00      	cmp	r3, #0
    2096:	db03      	blt.n	20a0 <STACK_SIZE+0xa0>
    2098:	6825      	ldr	r5, [r4, #0]
    209a:	2204      	movs	r2, #4
    209c:	4395      	bics	r5, r2
    209e:	6025      	str	r5, [r4, #0]
    20a0:	2e00      	cmp	r6, #0
    20a2:	d102      	bne.n	20aa <STACK_SIZE+0xaa>
    20a4:	9d04      	ldr	r5, [sp, #16]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d00e      	beq.n	20c8 <STACK_SIZE+0xc8>
    20aa:	9d04      	ldr	r5, [sp, #16]
    20ac:	1c30      	adds	r0, r6, #0
    20ae:	1c39      	adds	r1, r7, #0
    20b0:	f7ff fc44 	bl	193c <__aeabi_uidivmod>
    20b4:	9803      	ldr	r0, [sp, #12]
    20b6:	3d01      	subs	r5, #1
    20b8:	5c43      	ldrb	r3, [r0, r1]
    20ba:	1c30      	adds	r0, r6, #0
    20bc:	702b      	strb	r3, [r5, #0]
    20be:	1c39      	adds	r1, r7, #0
    20c0:	f7ff fbf8 	bl	18b4 <__aeabi_uidiv>
    20c4:	1e06      	subs	r6, r0, #0
    20c6:	d1f1      	bne.n	20ac <STACK_SIZE+0xac>
    20c8:	2f08      	cmp	r7, #8
    20ca:	d109      	bne.n	20e0 <STACK_SIZE+0xe0>
    20cc:	6821      	ldr	r1, [r4, #0]
    20ce:	07c9      	lsls	r1, r1, #31
    20d0:	d506      	bpl.n	20e0 <STACK_SIZE+0xe0>
    20d2:	6862      	ldr	r2, [r4, #4]
    20d4:	6923      	ldr	r3, [r4, #16]
    20d6:	429a      	cmp	r2, r3
    20d8:	dc02      	bgt.n	20e0 <STACK_SIZE+0xe0>
    20da:	3d01      	subs	r5, #1
    20dc:	2330      	movs	r3, #48	; 0x30
    20de:	702b      	strb	r3, [r5, #0]
    20e0:	9e04      	ldr	r6, [sp, #16]
    20e2:	1b73      	subs	r3, r6, r5
    20e4:	6123      	str	r3, [r4, #16]
    20e6:	e02a      	b.n	213e <STACK_SIZE+0x13e>
    20e8:	6808      	ldr	r0, [r1, #0]
    20ea:	6813      	ldr	r3, [r2, #0]
    20ec:	6949      	ldr	r1, [r1, #20]
    20ee:	0605      	lsls	r5, r0, #24
    20f0:	d504      	bpl.n	20fc <STACK_SIZE+0xfc>
    20f2:	1d18      	adds	r0, r3, #4
    20f4:	6010      	str	r0, [r2, #0]
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	6019      	str	r1, [r3, #0]
    20fa:	e005      	b.n	2108 <STACK_SIZE+0x108>
    20fc:	0646      	lsls	r6, r0, #25
    20fe:	d5f8      	bpl.n	20f2 <STACK_SIZE+0xf2>
    2100:	1d18      	adds	r0, r3, #4
    2102:	6010      	str	r0, [r2, #0]
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	8019      	strh	r1, [r3, #0]
    2108:	2300      	movs	r3, #0
    210a:	6123      	str	r3, [r4, #16]
    210c:	9d04      	ldr	r5, [sp, #16]
    210e:	e016      	b.n	213e <STACK_SIZE+0x13e>
    2110:	6813      	ldr	r3, [r2, #0]
    2112:	1d19      	adds	r1, r3, #4
    2114:	6011      	str	r1, [r2, #0]
    2116:	681d      	ldr	r5, [r3, #0]
    2118:	1c28      	adds	r0, r5, #0
    211a:	f000 fbe9 	bl	28f0 <strlen>
    211e:	6863      	ldr	r3, [r4, #4]
    2120:	6120      	str	r0, [r4, #16]
    2122:	4298      	cmp	r0, r3
    2124:	d900      	bls.n	2128 <STACK_SIZE+0x128>
    2126:	6123      	str	r3, [r4, #16]
    2128:	6920      	ldr	r0, [r4, #16]
    212a:	6060      	str	r0, [r4, #4]
    212c:	e004      	b.n	2138 <STACK_SIZE+0x138>
    212e:	1c25      	adds	r5, r4, #0
    2130:	3542      	adds	r5, #66	; 0x42
    2132:	702b      	strb	r3, [r5, #0]
    2134:	2301      	movs	r3, #1
    2136:	6123      	str	r3, [r4, #16]
    2138:	9e04      	ldr	r6, [sp, #16]
    213a:	2300      	movs	r3, #0
    213c:	7033      	strb	r3, [r6, #0]
    213e:	9e07      	ldr	r6, [sp, #28]
    2140:	9805      	ldr	r0, [sp, #20]
    2142:	9600      	str	r6, [sp, #0]
    2144:	1c21      	adds	r1, r4, #0
    2146:	aa09      	add	r2, sp, #36	; 0x24
    2148:	9b06      	ldr	r3, [sp, #24]
    214a:	f7ff fea3 	bl	1e94 <_printf_common>
    214e:	3001      	adds	r0, #1
    2150:	d102      	bne.n	2158 <STACK_SIZE+0x158>
    2152:	2001      	movs	r0, #1
    2154:	4240      	negs	r0, r0
    2156:	e021      	b.n	219c <STACK_SIZE+0x19c>
    2158:	1c2a      	adds	r2, r5, #0
    215a:	9805      	ldr	r0, [sp, #20]
    215c:	9906      	ldr	r1, [sp, #24]
    215e:	6923      	ldr	r3, [r4, #16]
    2160:	9d07      	ldr	r5, [sp, #28]
    2162:	47a8      	blx	r5
    2164:	3001      	adds	r0, #1
    2166:	d0f4      	beq.n	2152 <STACK_SIZE+0x152>
    2168:	6826      	ldr	r6, [r4, #0]
    216a:	07b6      	lsls	r6, r6, #30
    216c:	d405      	bmi.n	217a <STACK_SIZE+0x17a>
    216e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2170:	68e0      	ldr	r0, [r4, #12]
    2172:	4298      	cmp	r0, r3
    2174:	da12      	bge.n	219c <STACK_SIZE+0x19c>
    2176:	1c18      	adds	r0, r3, #0
    2178:	e010      	b.n	219c <STACK_SIZE+0x19c>
    217a:	2500      	movs	r5, #0
    217c:	68e0      	ldr	r0, [r4, #12]
    217e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2180:	1a43      	subs	r3, r0, r1
    2182:	429d      	cmp	r5, r3
    2184:	daf3      	bge.n	216e <STACK_SIZE+0x16e>
    2186:	1c22      	adds	r2, r4, #0
    2188:	9805      	ldr	r0, [sp, #20]
    218a:	9906      	ldr	r1, [sp, #24]
    218c:	3219      	adds	r2, #25
    218e:	2301      	movs	r3, #1
    2190:	9e07      	ldr	r6, [sp, #28]
    2192:	47b0      	blx	r6
    2194:	3001      	adds	r0, #1
    2196:	d0dc      	beq.n	2152 <STACK_SIZE+0x152>
    2198:	3501      	adds	r5, #1
    219a:	e7ef      	b.n	217c <STACK_SIZE+0x17c>
    219c:	b00b      	add	sp, #44	; 0x2c
    219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a0:	00002b01 	.word	0x00002b01
    21a4:	00002b12 	.word	0x00002b12

000021a8 <__swbuf_r>:
    21a8:	b570      	push	{r4, r5, r6, lr}
    21aa:	1c05      	adds	r5, r0, #0
    21ac:	1c0e      	adds	r6, r1, #0
    21ae:	1c14      	adds	r4, r2, #0
    21b0:	2800      	cmp	r0, #0
    21b2:	d004      	beq.n	21be <__swbuf_r+0x16>
    21b4:	6982      	ldr	r2, [r0, #24]
    21b6:	2a00      	cmp	r2, #0
    21b8:	d101      	bne.n	21be <__swbuf_r+0x16>
    21ba:	f000 f9c9 	bl	2550 <__sinit>
    21be:	4b23      	ldr	r3, [pc, #140]	; (224c <__swbuf_r+0xa4>)
    21c0:	429c      	cmp	r4, r3
    21c2:	d101      	bne.n	21c8 <__swbuf_r+0x20>
    21c4:	686c      	ldr	r4, [r5, #4]
    21c6:	e008      	b.n	21da <__swbuf_r+0x32>
    21c8:	4b21      	ldr	r3, [pc, #132]	; (2250 <__swbuf_r+0xa8>)
    21ca:	429c      	cmp	r4, r3
    21cc:	d101      	bne.n	21d2 <__swbuf_r+0x2a>
    21ce:	68ac      	ldr	r4, [r5, #8]
    21d0:	e003      	b.n	21da <__swbuf_r+0x32>
    21d2:	4b20      	ldr	r3, [pc, #128]	; (2254 <__swbuf_r+0xac>)
    21d4:	429c      	cmp	r4, r3
    21d6:	d100      	bne.n	21da <__swbuf_r+0x32>
    21d8:	68ec      	ldr	r4, [r5, #12]
    21da:	69a3      	ldr	r3, [r4, #24]
    21dc:	60a3      	str	r3, [r4, #8]
    21de:	89a3      	ldrh	r3, [r4, #12]
    21e0:	071a      	lsls	r2, r3, #28
    21e2:	d50a      	bpl.n	21fa <__swbuf_r+0x52>
    21e4:	6923      	ldr	r3, [r4, #16]
    21e6:	2b00      	cmp	r3, #0
    21e8:	d007      	beq.n	21fa <__swbuf_r+0x52>
    21ea:	6822      	ldr	r2, [r4, #0]
    21ec:	6923      	ldr	r3, [r4, #16]
    21ee:	b2f6      	uxtb	r6, r6
    21f0:	1ad0      	subs	r0, r2, r3
    21f2:	6962      	ldr	r2, [r4, #20]
    21f4:	4290      	cmp	r0, r2
    21f6:	db0f      	blt.n	2218 <__swbuf_r+0x70>
    21f8:	e008      	b.n	220c <__swbuf_r+0x64>
    21fa:	1c28      	adds	r0, r5, #0
    21fc:	1c21      	adds	r1, r4, #0
    21fe:	f000 f82b 	bl	2258 <__swsetup_r>
    2202:	2800      	cmp	r0, #0
    2204:	d0f1      	beq.n	21ea <__swbuf_r+0x42>
    2206:	2001      	movs	r0, #1
    2208:	4240      	negs	r0, r0
    220a:	e01d      	b.n	2248 <__swbuf_r+0xa0>
    220c:	1c28      	adds	r0, r5, #0
    220e:	1c21      	adds	r1, r4, #0
    2210:	f000 f91e 	bl	2450 <_fflush_r>
    2214:	2800      	cmp	r0, #0
    2216:	d1f6      	bne.n	2206 <__swbuf_r+0x5e>
    2218:	68a3      	ldr	r3, [r4, #8]
    221a:	3001      	adds	r0, #1
    221c:	3b01      	subs	r3, #1
    221e:	60a3      	str	r3, [r4, #8]
    2220:	6823      	ldr	r3, [r4, #0]
    2222:	1c5a      	adds	r2, r3, #1
    2224:	6022      	str	r2, [r4, #0]
    2226:	701e      	strb	r6, [r3, #0]
    2228:	6963      	ldr	r3, [r4, #20]
    222a:	4298      	cmp	r0, r3
    222c:	d005      	beq.n	223a <__swbuf_r+0x92>
    222e:	89a3      	ldrh	r3, [r4, #12]
    2230:	1c30      	adds	r0, r6, #0
    2232:	07da      	lsls	r2, r3, #31
    2234:	d508      	bpl.n	2248 <__swbuf_r+0xa0>
    2236:	2e0a      	cmp	r6, #10
    2238:	d106      	bne.n	2248 <__swbuf_r+0xa0>
    223a:	1c28      	adds	r0, r5, #0
    223c:	1c21      	adds	r1, r4, #0
    223e:	f000 f907 	bl	2450 <_fflush_r>
    2242:	2800      	cmp	r0, #0
    2244:	d1df      	bne.n	2206 <__swbuf_r+0x5e>
    2246:	1c30      	adds	r0, r6, #0
    2248:	bd70      	pop	{r4, r5, r6, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	00002b24 	.word	0x00002b24
    2250:	00002b44 	.word	0x00002b44
    2254:	00002b64 	.word	0x00002b64

00002258 <__swsetup_r>:
    2258:	4b34      	ldr	r3, [pc, #208]	; (232c <__swsetup_r+0xd4>)
    225a:	b570      	push	{r4, r5, r6, lr}
    225c:	681d      	ldr	r5, [r3, #0]
    225e:	1c06      	adds	r6, r0, #0
    2260:	1c0c      	adds	r4, r1, #0
    2262:	2d00      	cmp	r5, #0
    2264:	d005      	beq.n	2272 <__swsetup_r+0x1a>
    2266:	69a9      	ldr	r1, [r5, #24]
    2268:	2900      	cmp	r1, #0
    226a:	d102      	bne.n	2272 <__swsetup_r+0x1a>
    226c:	1c28      	adds	r0, r5, #0
    226e:	f000 f96f 	bl	2550 <__sinit>
    2272:	4b2f      	ldr	r3, [pc, #188]	; (2330 <__swsetup_r+0xd8>)
    2274:	429c      	cmp	r4, r3
    2276:	d101      	bne.n	227c <__swsetup_r+0x24>
    2278:	686c      	ldr	r4, [r5, #4]
    227a:	e008      	b.n	228e <__swsetup_r+0x36>
    227c:	4b2d      	ldr	r3, [pc, #180]	; (2334 <__swsetup_r+0xdc>)
    227e:	429c      	cmp	r4, r3
    2280:	d101      	bne.n	2286 <__swsetup_r+0x2e>
    2282:	68ac      	ldr	r4, [r5, #8]
    2284:	e003      	b.n	228e <__swsetup_r+0x36>
    2286:	4b2c      	ldr	r3, [pc, #176]	; (2338 <__swsetup_r+0xe0>)
    2288:	429c      	cmp	r4, r3
    228a:	d100      	bne.n	228e <__swsetup_r+0x36>
    228c:	68ec      	ldr	r4, [r5, #12]
    228e:	89a2      	ldrh	r2, [r4, #12]
    2290:	b293      	uxth	r3, r2
    2292:	0719      	lsls	r1, r3, #28
    2294:	d421      	bmi.n	22da <__swsetup_r+0x82>
    2296:	06d9      	lsls	r1, r3, #27
    2298:	d405      	bmi.n	22a6 <__swsetup_r+0x4e>
    229a:	2309      	movs	r3, #9
    229c:	6033      	str	r3, [r6, #0]
    229e:	2340      	movs	r3, #64	; 0x40
    22a0:	431a      	orrs	r2, r3
    22a2:	81a2      	strh	r2, [r4, #12]
    22a4:	e03f      	b.n	2326 <__swsetup_r+0xce>
    22a6:	075a      	lsls	r2, r3, #29
    22a8:	d513      	bpl.n	22d2 <__swsetup_r+0x7a>
    22aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    22ac:	2900      	cmp	r1, #0
    22ae:	d008      	beq.n	22c2 <__swsetup_r+0x6a>
    22b0:	1c23      	adds	r3, r4, #0
    22b2:	3344      	adds	r3, #68	; 0x44
    22b4:	4299      	cmp	r1, r3
    22b6:	d002      	beq.n	22be <__swsetup_r+0x66>
    22b8:	1c30      	adds	r0, r6, #0
    22ba:	f000 fa1f 	bl	26fc <_free_r>
    22be:	2300      	movs	r3, #0
    22c0:	6363      	str	r3, [r4, #52]	; 0x34
    22c2:	89a3      	ldrh	r3, [r4, #12]
    22c4:	2224      	movs	r2, #36	; 0x24
    22c6:	4393      	bics	r3, r2
    22c8:	81a3      	strh	r3, [r4, #12]
    22ca:	2300      	movs	r3, #0
    22cc:	6063      	str	r3, [r4, #4]
    22ce:	6923      	ldr	r3, [r4, #16]
    22d0:	6023      	str	r3, [r4, #0]
    22d2:	89a3      	ldrh	r3, [r4, #12]
    22d4:	2208      	movs	r2, #8
    22d6:	4313      	orrs	r3, r2
    22d8:	81a3      	strh	r3, [r4, #12]
    22da:	6921      	ldr	r1, [r4, #16]
    22dc:	2900      	cmp	r1, #0
    22de:	d10b      	bne.n	22f8 <__swsetup_r+0xa0>
    22e0:	89a3      	ldrh	r3, [r4, #12]
    22e2:	22a0      	movs	r2, #160	; 0xa0
    22e4:	0092      	lsls	r2, r2, #2
    22e6:	401a      	ands	r2, r3
    22e8:	2380      	movs	r3, #128	; 0x80
    22ea:	009b      	lsls	r3, r3, #2
    22ec:	429a      	cmp	r2, r3
    22ee:	d003      	beq.n	22f8 <__swsetup_r+0xa0>
    22f0:	1c30      	adds	r0, r6, #0
    22f2:	1c21      	adds	r1, r4, #0
    22f4:	f000 f99c 	bl	2630 <__smakebuf_r>
    22f8:	89a3      	ldrh	r3, [r4, #12]
    22fa:	2201      	movs	r2, #1
    22fc:	401a      	ands	r2, r3
    22fe:	d005      	beq.n	230c <__swsetup_r+0xb4>
    2300:	6961      	ldr	r1, [r4, #20]
    2302:	2200      	movs	r2, #0
    2304:	60a2      	str	r2, [r4, #8]
    2306:	424a      	negs	r2, r1
    2308:	61a2      	str	r2, [r4, #24]
    230a:	e003      	b.n	2314 <__swsetup_r+0xbc>
    230c:	0799      	lsls	r1, r3, #30
    230e:	d400      	bmi.n	2312 <__swsetup_r+0xba>
    2310:	6962      	ldr	r2, [r4, #20]
    2312:	60a2      	str	r2, [r4, #8]
    2314:	6922      	ldr	r2, [r4, #16]
    2316:	2000      	movs	r0, #0
    2318:	4282      	cmp	r2, r0
    231a:	d106      	bne.n	232a <__swsetup_r+0xd2>
    231c:	0619      	lsls	r1, r3, #24
    231e:	d504      	bpl.n	232a <__swsetup_r+0xd2>
    2320:	2240      	movs	r2, #64	; 0x40
    2322:	4313      	orrs	r3, r2
    2324:	81a3      	strh	r3, [r4, #12]
    2326:	2001      	movs	r0, #1
    2328:	4240      	negs	r0, r0
    232a:	bd70      	pop	{r4, r5, r6, pc}
    232c:	20000074 	.word	0x20000074
    2330:	00002b24 	.word	0x00002b24
    2334:	00002b44 	.word	0x00002b44
    2338:	00002b64 	.word	0x00002b64

0000233c <__sflush_r>:
    233c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    233e:	898b      	ldrh	r3, [r1, #12]
    2340:	1c05      	adds	r5, r0, #0
    2342:	1c0c      	adds	r4, r1, #0
    2344:	0719      	lsls	r1, r3, #28
    2346:	d45e      	bmi.n	2406 <__sflush_r+0xca>
    2348:	6862      	ldr	r2, [r4, #4]
    234a:	2a00      	cmp	r2, #0
    234c:	dc02      	bgt.n	2354 <__sflush_r+0x18>
    234e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2350:	2f00      	cmp	r7, #0
    2352:	dd1a      	ble.n	238a <__sflush_r+0x4e>
    2354:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2356:	2f00      	cmp	r7, #0
    2358:	d017      	beq.n	238a <__sflush_r+0x4e>
    235a:	2200      	movs	r2, #0
    235c:	682e      	ldr	r6, [r5, #0]
    235e:	602a      	str	r2, [r5, #0]
    2360:	2280      	movs	r2, #128	; 0x80
    2362:	0152      	lsls	r2, r2, #5
    2364:	401a      	ands	r2, r3
    2366:	d001      	beq.n	236c <__sflush_r+0x30>
    2368:	6d62      	ldr	r2, [r4, #84]	; 0x54
    236a:	e015      	b.n	2398 <__sflush_r+0x5c>
    236c:	1c28      	adds	r0, r5, #0
    236e:	6a21      	ldr	r1, [r4, #32]
    2370:	2301      	movs	r3, #1
    2372:	47b8      	blx	r7
    2374:	1c02      	adds	r2, r0, #0
    2376:	1c41      	adds	r1, r0, #1
    2378:	d10e      	bne.n	2398 <__sflush_r+0x5c>
    237a:	682b      	ldr	r3, [r5, #0]
    237c:	2b00      	cmp	r3, #0
    237e:	d00b      	beq.n	2398 <__sflush_r+0x5c>
    2380:	2b1d      	cmp	r3, #29
    2382:	d001      	beq.n	2388 <__sflush_r+0x4c>
    2384:	2b16      	cmp	r3, #22
    2386:	d102      	bne.n	238e <__sflush_r+0x52>
    2388:	602e      	str	r6, [r5, #0]
    238a:	2000      	movs	r0, #0
    238c:	e05e      	b.n	244c <__sflush_r+0x110>
    238e:	89a3      	ldrh	r3, [r4, #12]
    2390:	2140      	movs	r1, #64	; 0x40
    2392:	430b      	orrs	r3, r1
    2394:	81a3      	strh	r3, [r4, #12]
    2396:	e059      	b.n	244c <__sflush_r+0x110>
    2398:	89a3      	ldrh	r3, [r4, #12]
    239a:	075f      	lsls	r7, r3, #29
    239c:	d506      	bpl.n	23ac <__sflush_r+0x70>
    239e:	6861      	ldr	r1, [r4, #4]
    23a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    23a2:	1a52      	subs	r2, r2, r1
    23a4:	2b00      	cmp	r3, #0
    23a6:	d001      	beq.n	23ac <__sflush_r+0x70>
    23a8:	6c27      	ldr	r7, [r4, #64]	; 0x40
    23aa:	1bd2      	subs	r2, r2, r7
    23ac:	1c28      	adds	r0, r5, #0
    23ae:	6a21      	ldr	r1, [r4, #32]
    23b0:	2300      	movs	r3, #0
    23b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    23b4:	47b8      	blx	r7
    23b6:	89a2      	ldrh	r2, [r4, #12]
    23b8:	1c41      	adds	r1, r0, #1
    23ba:	d106      	bne.n	23ca <__sflush_r+0x8e>
    23bc:	682b      	ldr	r3, [r5, #0]
    23be:	2b00      	cmp	r3, #0
    23c0:	d003      	beq.n	23ca <__sflush_r+0x8e>
    23c2:	2b1d      	cmp	r3, #29
    23c4:	d001      	beq.n	23ca <__sflush_r+0x8e>
    23c6:	2b16      	cmp	r3, #22
    23c8:	d119      	bne.n	23fe <__sflush_r+0xc2>
    23ca:	2300      	movs	r3, #0
    23cc:	6063      	str	r3, [r4, #4]
    23ce:	6923      	ldr	r3, [r4, #16]
    23d0:	6023      	str	r3, [r4, #0]
    23d2:	04d7      	lsls	r7, r2, #19
    23d4:	d505      	bpl.n	23e2 <__sflush_r+0xa6>
    23d6:	1c41      	adds	r1, r0, #1
    23d8:	d102      	bne.n	23e0 <__sflush_r+0xa4>
    23da:	682a      	ldr	r2, [r5, #0]
    23dc:	2a00      	cmp	r2, #0
    23de:	d100      	bne.n	23e2 <__sflush_r+0xa6>
    23e0:	6560      	str	r0, [r4, #84]	; 0x54
    23e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    23e4:	602e      	str	r6, [r5, #0]
    23e6:	2900      	cmp	r1, #0
    23e8:	d0cf      	beq.n	238a <__sflush_r+0x4e>
    23ea:	1c23      	adds	r3, r4, #0
    23ec:	3344      	adds	r3, #68	; 0x44
    23ee:	4299      	cmp	r1, r3
    23f0:	d002      	beq.n	23f8 <__sflush_r+0xbc>
    23f2:	1c28      	adds	r0, r5, #0
    23f4:	f000 f982 	bl	26fc <_free_r>
    23f8:	2000      	movs	r0, #0
    23fa:	6360      	str	r0, [r4, #52]	; 0x34
    23fc:	e026      	b.n	244c <__sflush_r+0x110>
    23fe:	2340      	movs	r3, #64	; 0x40
    2400:	431a      	orrs	r2, r3
    2402:	81a2      	strh	r2, [r4, #12]
    2404:	e022      	b.n	244c <__sflush_r+0x110>
    2406:	6926      	ldr	r6, [r4, #16]
    2408:	2e00      	cmp	r6, #0
    240a:	d0be      	beq.n	238a <__sflush_r+0x4e>
    240c:	6827      	ldr	r7, [r4, #0]
    240e:	2200      	movs	r2, #0
    2410:	1bbf      	subs	r7, r7, r6
    2412:	9701      	str	r7, [sp, #4]
    2414:	6026      	str	r6, [r4, #0]
    2416:	0799      	lsls	r1, r3, #30
    2418:	d100      	bne.n	241c <__sflush_r+0xe0>
    241a:	6962      	ldr	r2, [r4, #20]
    241c:	60a2      	str	r2, [r4, #8]
    241e:	9f01      	ldr	r7, [sp, #4]
    2420:	2f00      	cmp	r7, #0
    2422:	ddb2      	ble.n	238a <__sflush_r+0x4e>
    2424:	1c28      	adds	r0, r5, #0
    2426:	6a21      	ldr	r1, [r4, #32]
    2428:	1c32      	adds	r2, r6, #0
    242a:	9b01      	ldr	r3, [sp, #4]
    242c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    242e:	47b8      	blx	r7
    2430:	2800      	cmp	r0, #0
    2432:	dc06      	bgt.n	2442 <__sflush_r+0x106>
    2434:	89a3      	ldrh	r3, [r4, #12]
    2436:	2240      	movs	r2, #64	; 0x40
    2438:	4313      	orrs	r3, r2
    243a:	2001      	movs	r0, #1
    243c:	81a3      	strh	r3, [r4, #12]
    243e:	4240      	negs	r0, r0
    2440:	e004      	b.n	244c <__sflush_r+0x110>
    2442:	9f01      	ldr	r7, [sp, #4]
    2444:	1836      	adds	r6, r6, r0
    2446:	1a3f      	subs	r7, r7, r0
    2448:	9701      	str	r7, [sp, #4]
    244a:	e7e8      	b.n	241e <__sflush_r+0xe2>
    244c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002450 <_fflush_r>:
    2450:	690a      	ldr	r2, [r1, #16]
    2452:	b538      	push	{r3, r4, r5, lr}
    2454:	1c05      	adds	r5, r0, #0
    2456:	1c0c      	adds	r4, r1, #0
    2458:	2a00      	cmp	r2, #0
    245a:	d101      	bne.n	2460 <_fflush_r+0x10>
    245c:	2000      	movs	r0, #0
    245e:	e01c      	b.n	249a <_fflush_r+0x4a>
    2460:	2800      	cmp	r0, #0
    2462:	d004      	beq.n	246e <_fflush_r+0x1e>
    2464:	6983      	ldr	r3, [r0, #24]
    2466:	2b00      	cmp	r3, #0
    2468:	d101      	bne.n	246e <_fflush_r+0x1e>
    246a:	f000 f871 	bl	2550 <__sinit>
    246e:	4b0b      	ldr	r3, [pc, #44]	; (249c <_fflush_r+0x4c>)
    2470:	429c      	cmp	r4, r3
    2472:	d101      	bne.n	2478 <_fflush_r+0x28>
    2474:	686c      	ldr	r4, [r5, #4]
    2476:	e008      	b.n	248a <_fflush_r+0x3a>
    2478:	4b09      	ldr	r3, [pc, #36]	; (24a0 <_fflush_r+0x50>)
    247a:	429c      	cmp	r4, r3
    247c:	d101      	bne.n	2482 <_fflush_r+0x32>
    247e:	68ac      	ldr	r4, [r5, #8]
    2480:	e003      	b.n	248a <_fflush_r+0x3a>
    2482:	4b08      	ldr	r3, [pc, #32]	; (24a4 <_fflush_r+0x54>)
    2484:	429c      	cmp	r4, r3
    2486:	d100      	bne.n	248a <_fflush_r+0x3a>
    2488:	68ec      	ldr	r4, [r5, #12]
    248a:	220c      	movs	r2, #12
    248c:	5ea3      	ldrsh	r3, [r4, r2]
    248e:	2b00      	cmp	r3, #0
    2490:	d0e4      	beq.n	245c <_fflush_r+0xc>
    2492:	1c28      	adds	r0, r5, #0
    2494:	1c21      	adds	r1, r4, #0
    2496:	f7ff ff51 	bl	233c <__sflush_r>
    249a:	bd38      	pop	{r3, r4, r5, pc}
    249c:	00002b24 	.word	0x00002b24
    24a0:	00002b44 	.word	0x00002b44
    24a4:	00002b64 	.word	0x00002b64

000024a8 <_cleanup_r>:
    24a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24aa:	1c04      	adds	r4, r0, #0
    24ac:	1c07      	adds	r7, r0, #0
    24ae:	3448      	adds	r4, #72	; 0x48
    24b0:	2c00      	cmp	r4, #0
    24b2:	d012      	beq.n	24da <_cleanup_r+0x32>
    24b4:	68a5      	ldr	r5, [r4, #8]
    24b6:	6866      	ldr	r6, [r4, #4]
    24b8:	3e01      	subs	r6, #1
    24ba:	d40c      	bmi.n	24d6 <_cleanup_r+0x2e>
    24bc:	89ab      	ldrh	r3, [r5, #12]
    24be:	2b01      	cmp	r3, #1
    24c0:	d907      	bls.n	24d2 <_cleanup_r+0x2a>
    24c2:	220e      	movs	r2, #14
    24c4:	5eab      	ldrsh	r3, [r5, r2]
    24c6:	3301      	adds	r3, #1
    24c8:	d003      	beq.n	24d2 <_cleanup_r+0x2a>
    24ca:	1c38      	adds	r0, r7, #0
    24cc:	1c29      	adds	r1, r5, #0
    24ce:	f7ff ffbf 	bl	2450 <_fflush_r>
    24d2:	3568      	adds	r5, #104	; 0x68
    24d4:	e7f0      	b.n	24b8 <_cleanup_r+0x10>
    24d6:	6824      	ldr	r4, [r4, #0]
    24d8:	e7ea      	b.n	24b0 <_cleanup_r+0x8>
    24da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000024dc <std.isra.0>:
    24dc:	2300      	movs	r3, #0
    24de:	b510      	push	{r4, lr}
    24e0:	1c04      	adds	r4, r0, #0
    24e2:	6003      	str	r3, [r0, #0]
    24e4:	6043      	str	r3, [r0, #4]
    24e6:	6083      	str	r3, [r0, #8]
    24e8:	8181      	strh	r1, [r0, #12]
    24ea:	6643      	str	r3, [r0, #100]	; 0x64
    24ec:	81c2      	strh	r2, [r0, #14]
    24ee:	6103      	str	r3, [r0, #16]
    24f0:	6143      	str	r3, [r0, #20]
    24f2:	6183      	str	r3, [r0, #24]
    24f4:	1c19      	adds	r1, r3, #0
    24f6:	2208      	movs	r2, #8
    24f8:	305c      	adds	r0, #92	; 0x5c
    24fa:	f7ff fa7c 	bl	19f6 <memset>
    24fe:	4b05      	ldr	r3, [pc, #20]	; (2514 <std.isra.0+0x38>)
    2500:	6224      	str	r4, [r4, #32]
    2502:	6263      	str	r3, [r4, #36]	; 0x24
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <std.isra.0+0x3c>)
    2506:	62a3      	str	r3, [r4, #40]	; 0x28
    2508:	4b04      	ldr	r3, [pc, #16]	; (251c <std.isra.0+0x40>)
    250a:	62e3      	str	r3, [r4, #44]	; 0x2c
    250c:	4b04      	ldr	r3, [pc, #16]	; (2520 <std.isra.0+0x44>)
    250e:	6323      	str	r3, [r4, #48]	; 0x30
    2510:	bd10      	pop	{r4, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	00002859 	.word	0x00002859
    2518:	00002881 	.word	0x00002881
    251c:	000028b9 	.word	0x000028b9
    2520:	000028e5 	.word	0x000028e5

00002524 <__sfmoreglue>:
    2524:	b570      	push	{r4, r5, r6, lr}
    2526:	1e4b      	subs	r3, r1, #1
    2528:	2568      	movs	r5, #104	; 0x68
    252a:	435d      	muls	r5, r3
    252c:	1c0e      	adds	r6, r1, #0
    252e:	1c29      	adds	r1, r5, #0
    2530:	3174      	adds	r1, #116	; 0x74
    2532:	f000 f92b 	bl	278c <_malloc_r>
    2536:	1e04      	subs	r4, r0, #0
    2538:	d008      	beq.n	254c <__sfmoreglue+0x28>
    253a:	2100      	movs	r1, #0
    253c:	6001      	str	r1, [r0, #0]
    253e:	6046      	str	r6, [r0, #4]
    2540:	1c2a      	adds	r2, r5, #0
    2542:	300c      	adds	r0, #12
    2544:	60a0      	str	r0, [r4, #8]
    2546:	3268      	adds	r2, #104	; 0x68
    2548:	f7ff fa55 	bl	19f6 <memset>
    254c:	1c20      	adds	r0, r4, #0
    254e:	bd70      	pop	{r4, r5, r6, pc}

00002550 <__sinit>:
    2550:	6983      	ldr	r3, [r0, #24]
    2552:	b513      	push	{r0, r1, r4, lr}
    2554:	1c04      	adds	r4, r0, #0
    2556:	2b00      	cmp	r3, #0
    2558:	d127      	bne.n	25aa <__sinit+0x5a>
    255a:	6483      	str	r3, [r0, #72]	; 0x48
    255c:	64c3      	str	r3, [r0, #76]	; 0x4c
    255e:	6503      	str	r3, [r0, #80]	; 0x50
    2560:	4b12      	ldr	r3, [pc, #72]	; (25ac <__sinit+0x5c>)
    2562:	4a13      	ldr	r2, [pc, #76]	; (25b0 <__sinit+0x60>)
    2564:	681b      	ldr	r3, [r3, #0]
    2566:	6282      	str	r2, [r0, #40]	; 0x28
    2568:	4298      	cmp	r0, r3
    256a:	d101      	bne.n	2570 <__sinit+0x20>
    256c:	2301      	movs	r3, #1
    256e:	6183      	str	r3, [r0, #24]
    2570:	1c20      	adds	r0, r4, #0
    2572:	f000 f81f 	bl	25b4 <__sfp>
    2576:	6060      	str	r0, [r4, #4]
    2578:	1c20      	adds	r0, r4, #0
    257a:	f000 f81b 	bl	25b4 <__sfp>
    257e:	60a0      	str	r0, [r4, #8]
    2580:	1c20      	adds	r0, r4, #0
    2582:	f000 f817 	bl	25b4 <__sfp>
    2586:	2104      	movs	r1, #4
    2588:	60e0      	str	r0, [r4, #12]
    258a:	2200      	movs	r2, #0
    258c:	6860      	ldr	r0, [r4, #4]
    258e:	f7ff ffa5 	bl	24dc <std.isra.0>
    2592:	68a0      	ldr	r0, [r4, #8]
    2594:	2109      	movs	r1, #9
    2596:	2201      	movs	r2, #1
    2598:	f7ff ffa0 	bl	24dc <std.isra.0>
    259c:	68e0      	ldr	r0, [r4, #12]
    259e:	2112      	movs	r1, #18
    25a0:	2202      	movs	r2, #2
    25a2:	f7ff ff9b 	bl	24dc <std.isra.0>
    25a6:	2301      	movs	r3, #1
    25a8:	61a3      	str	r3, [r4, #24]
    25aa:	bd13      	pop	{r0, r1, r4, pc}
    25ac:	00002aec 	.word	0x00002aec
    25b0:	000024a9 	.word	0x000024a9

000025b4 <__sfp>:
    25b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25b6:	4b1d      	ldr	r3, [pc, #116]	; (262c <__sfp+0x78>)
    25b8:	1c07      	adds	r7, r0, #0
    25ba:	681e      	ldr	r6, [r3, #0]
    25bc:	69b2      	ldr	r2, [r6, #24]
    25be:	2a00      	cmp	r2, #0
    25c0:	d102      	bne.n	25c8 <__sfp+0x14>
    25c2:	1c30      	adds	r0, r6, #0
    25c4:	f7ff ffc4 	bl	2550 <__sinit>
    25c8:	3648      	adds	r6, #72	; 0x48
    25ca:	68b4      	ldr	r4, [r6, #8]
    25cc:	6873      	ldr	r3, [r6, #4]
    25ce:	3b01      	subs	r3, #1
    25d0:	d405      	bmi.n	25de <__sfp+0x2a>
    25d2:	220c      	movs	r2, #12
    25d4:	5ea5      	ldrsh	r5, [r4, r2]
    25d6:	2d00      	cmp	r5, #0
    25d8:	d010      	beq.n	25fc <__sfp+0x48>
    25da:	3468      	adds	r4, #104	; 0x68
    25dc:	e7f7      	b.n	25ce <__sfp+0x1a>
    25de:	6833      	ldr	r3, [r6, #0]
    25e0:	2b00      	cmp	r3, #0
    25e2:	d106      	bne.n	25f2 <__sfp+0x3e>
    25e4:	1c38      	adds	r0, r7, #0
    25e6:	2104      	movs	r1, #4
    25e8:	f7ff ff9c 	bl	2524 <__sfmoreglue>
    25ec:	6030      	str	r0, [r6, #0]
    25ee:	2800      	cmp	r0, #0
    25f0:	d001      	beq.n	25f6 <__sfp+0x42>
    25f2:	6836      	ldr	r6, [r6, #0]
    25f4:	e7e9      	b.n	25ca <__sfp+0x16>
    25f6:	230c      	movs	r3, #12
    25f8:	603b      	str	r3, [r7, #0]
    25fa:	e016      	b.n	262a <__sfp+0x76>
    25fc:	2301      	movs	r3, #1
    25fe:	425b      	negs	r3, r3
    2600:	81e3      	strh	r3, [r4, #14]
    2602:	1c20      	adds	r0, r4, #0
    2604:	2301      	movs	r3, #1
    2606:	81a3      	strh	r3, [r4, #12]
    2608:	6665      	str	r5, [r4, #100]	; 0x64
    260a:	6025      	str	r5, [r4, #0]
    260c:	60a5      	str	r5, [r4, #8]
    260e:	6065      	str	r5, [r4, #4]
    2610:	6125      	str	r5, [r4, #16]
    2612:	6165      	str	r5, [r4, #20]
    2614:	61a5      	str	r5, [r4, #24]
    2616:	305c      	adds	r0, #92	; 0x5c
    2618:	1c29      	adds	r1, r5, #0
    261a:	2208      	movs	r2, #8
    261c:	f7ff f9eb 	bl	19f6 <memset>
    2620:	6365      	str	r5, [r4, #52]	; 0x34
    2622:	63a5      	str	r5, [r4, #56]	; 0x38
    2624:	64a5      	str	r5, [r4, #72]	; 0x48
    2626:	64e5      	str	r5, [r4, #76]	; 0x4c
    2628:	1c20      	adds	r0, r4, #0
    262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    262c:	00002aec 	.word	0x00002aec

00002630 <__smakebuf_r>:
    2630:	b5f0      	push	{r4, r5, r6, r7, lr}
    2632:	898b      	ldrh	r3, [r1, #12]
    2634:	b091      	sub	sp, #68	; 0x44
    2636:	1c05      	adds	r5, r0, #0
    2638:	1c0c      	adds	r4, r1, #0
    263a:	079a      	lsls	r2, r3, #30
    263c:	d425      	bmi.n	268a <__smakebuf_r+0x5a>
    263e:	230e      	movs	r3, #14
    2640:	5ec9      	ldrsh	r1, [r1, r3]
    2642:	2900      	cmp	r1, #0
    2644:	da06      	bge.n	2654 <__smakebuf_r+0x24>
    2646:	89a7      	ldrh	r7, [r4, #12]
    2648:	2380      	movs	r3, #128	; 0x80
    264a:	401f      	ands	r7, r3
    264c:	d00f      	beq.n	266e <__smakebuf_r+0x3e>
    264e:	2700      	movs	r7, #0
    2650:	2640      	movs	r6, #64	; 0x40
    2652:	e00e      	b.n	2672 <__smakebuf_r+0x42>
    2654:	aa01      	add	r2, sp, #4
    2656:	f000 f979 	bl	294c <_fstat_r>
    265a:	2800      	cmp	r0, #0
    265c:	dbf3      	blt.n	2646 <__smakebuf_r+0x16>
    265e:	9b02      	ldr	r3, [sp, #8]
    2660:	27f0      	movs	r7, #240	; 0xf0
    2662:	023f      	lsls	r7, r7, #8
    2664:	4a18      	ldr	r2, [pc, #96]	; (26c8 <__smakebuf_r+0x98>)
    2666:	401f      	ands	r7, r3
    2668:	18bf      	adds	r7, r7, r2
    266a:	427b      	negs	r3, r7
    266c:	415f      	adcs	r7, r3
    266e:	2680      	movs	r6, #128	; 0x80
    2670:	00f6      	lsls	r6, r6, #3
    2672:	1c28      	adds	r0, r5, #0
    2674:	1c31      	adds	r1, r6, #0
    2676:	f000 f889 	bl	278c <_malloc_r>
    267a:	2800      	cmp	r0, #0
    267c:	d10c      	bne.n	2698 <__smakebuf_r+0x68>
    267e:	89a3      	ldrh	r3, [r4, #12]
    2680:	059a      	lsls	r2, r3, #22
    2682:	d41f      	bmi.n	26c4 <__smakebuf_r+0x94>
    2684:	2202      	movs	r2, #2
    2686:	4313      	orrs	r3, r2
    2688:	81a3      	strh	r3, [r4, #12]
    268a:	1c23      	adds	r3, r4, #0
    268c:	3347      	adds	r3, #71	; 0x47
    268e:	6023      	str	r3, [r4, #0]
    2690:	6123      	str	r3, [r4, #16]
    2692:	2301      	movs	r3, #1
    2694:	6163      	str	r3, [r4, #20]
    2696:	e015      	b.n	26c4 <__smakebuf_r+0x94>
    2698:	4b0c      	ldr	r3, [pc, #48]	; (26cc <__smakebuf_r+0x9c>)
    269a:	2280      	movs	r2, #128	; 0x80
    269c:	62ab      	str	r3, [r5, #40]	; 0x28
    269e:	89a3      	ldrh	r3, [r4, #12]
    26a0:	6020      	str	r0, [r4, #0]
    26a2:	4313      	orrs	r3, r2
    26a4:	81a3      	strh	r3, [r4, #12]
    26a6:	6120      	str	r0, [r4, #16]
    26a8:	6166      	str	r6, [r4, #20]
    26aa:	2f00      	cmp	r7, #0
    26ac:	d00a      	beq.n	26c4 <__smakebuf_r+0x94>
    26ae:	230e      	movs	r3, #14
    26b0:	5ee1      	ldrsh	r1, [r4, r3]
    26b2:	1c28      	adds	r0, r5, #0
    26b4:	f000 f95c 	bl	2970 <_isatty_r>
    26b8:	2800      	cmp	r0, #0
    26ba:	d003      	beq.n	26c4 <__smakebuf_r+0x94>
    26bc:	89a3      	ldrh	r3, [r4, #12]
    26be:	2201      	movs	r2, #1
    26c0:	4313      	orrs	r3, r2
    26c2:	81a3      	strh	r3, [r4, #12]
    26c4:	b011      	add	sp, #68	; 0x44
    26c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c8:	ffffe000 	.word	0xffffe000
    26cc:	000024a9 	.word	0x000024a9

000026d0 <malloc>:
    26d0:	b508      	push	{r3, lr}
    26d2:	4b03      	ldr	r3, [pc, #12]	; (26e0 <malloc+0x10>)
    26d4:	1c01      	adds	r1, r0, #0
    26d6:	6818      	ldr	r0, [r3, #0]
    26d8:	f000 f858 	bl	278c <_malloc_r>
    26dc:	bd08      	pop	{r3, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	20000074 	.word	0x20000074

000026e4 <memchr>:
    26e4:	b2c9      	uxtb	r1, r1
    26e6:	1882      	adds	r2, r0, r2
    26e8:	4290      	cmp	r0, r2
    26ea:	d004      	beq.n	26f6 <memchr+0x12>
    26ec:	7803      	ldrb	r3, [r0, #0]
    26ee:	428b      	cmp	r3, r1
    26f0:	d002      	beq.n	26f8 <memchr+0x14>
    26f2:	3001      	adds	r0, #1
    26f4:	e7f8      	b.n	26e8 <memchr+0x4>
    26f6:	2000      	movs	r0, #0
    26f8:	4770      	bx	lr
	...

000026fc <_free_r>:
    26fc:	b530      	push	{r4, r5, lr}
    26fe:	2900      	cmp	r1, #0
    2700:	d040      	beq.n	2784 <_free_r+0x88>
    2702:	3904      	subs	r1, #4
    2704:	680b      	ldr	r3, [r1, #0]
    2706:	2b00      	cmp	r3, #0
    2708:	da00      	bge.n	270c <_free_r+0x10>
    270a:	18c9      	adds	r1, r1, r3
    270c:	4a1e      	ldr	r2, [pc, #120]	; (2788 <_free_r+0x8c>)
    270e:	6813      	ldr	r3, [r2, #0]
    2710:	1c14      	adds	r4, r2, #0
    2712:	2b00      	cmp	r3, #0
    2714:	d102      	bne.n	271c <_free_r+0x20>
    2716:	604b      	str	r3, [r1, #4]
    2718:	6011      	str	r1, [r2, #0]
    271a:	e033      	b.n	2784 <_free_r+0x88>
    271c:	4299      	cmp	r1, r3
    271e:	d20f      	bcs.n	2740 <_free_r+0x44>
    2720:	6808      	ldr	r0, [r1, #0]
    2722:	180a      	adds	r2, r1, r0
    2724:	429a      	cmp	r2, r3
    2726:	d105      	bne.n	2734 <_free_r+0x38>
    2728:	6813      	ldr	r3, [r2, #0]
    272a:	6852      	ldr	r2, [r2, #4]
    272c:	18c0      	adds	r0, r0, r3
    272e:	6008      	str	r0, [r1, #0]
    2730:	604a      	str	r2, [r1, #4]
    2732:	e000      	b.n	2736 <_free_r+0x3a>
    2734:	604b      	str	r3, [r1, #4]
    2736:	6021      	str	r1, [r4, #0]
    2738:	e024      	b.n	2784 <_free_r+0x88>
    273a:	428a      	cmp	r2, r1
    273c:	d803      	bhi.n	2746 <_free_r+0x4a>
    273e:	1c13      	adds	r3, r2, #0
    2740:	685a      	ldr	r2, [r3, #4]
    2742:	2a00      	cmp	r2, #0
    2744:	d1f9      	bne.n	273a <_free_r+0x3e>
    2746:	681d      	ldr	r5, [r3, #0]
    2748:	195c      	adds	r4, r3, r5
    274a:	428c      	cmp	r4, r1
    274c:	d10b      	bne.n	2766 <_free_r+0x6a>
    274e:	6809      	ldr	r1, [r1, #0]
    2750:	1869      	adds	r1, r5, r1
    2752:	1858      	adds	r0, r3, r1
    2754:	6019      	str	r1, [r3, #0]
    2756:	4290      	cmp	r0, r2
    2758:	d114      	bne.n	2784 <_free_r+0x88>
    275a:	6814      	ldr	r4, [r2, #0]
    275c:	6852      	ldr	r2, [r2, #4]
    275e:	1909      	adds	r1, r1, r4
    2760:	6019      	str	r1, [r3, #0]
    2762:	605a      	str	r2, [r3, #4]
    2764:	e00e      	b.n	2784 <_free_r+0x88>
    2766:	428c      	cmp	r4, r1
    2768:	d902      	bls.n	2770 <_free_r+0x74>
    276a:	230c      	movs	r3, #12
    276c:	6003      	str	r3, [r0, #0]
    276e:	e009      	b.n	2784 <_free_r+0x88>
    2770:	6808      	ldr	r0, [r1, #0]
    2772:	180c      	adds	r4, r1, r0
    2774:	4294      	cmp	r4, r2
    2776:	d103      	bne.n	2780 <_free_r+0x84>
    2778:	6814      	ldr	r4, [r2, #0]
    277a:	6852      	ldr	r2, [r2, #4]
    277c:	1900      	adds	r0, r0, r4
    277e:	6008      	str	r0, [r1, #0]
    2780:	604a      	str	r2, [r1, #4]
    2782:	6059      	str	r1, [r3, #4]
    2784:	bd30      	pop	{r4, r5, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	20000110 	.word	0x20000110

0000278c <_malloc_r>:
    278c:	b570      	push	{r4, r5, r6, lr}
    278e:	2303      	movs	r3, #3
    2790:	1ccd      	adds	r5, r1, #3
    2792:	439d      	bics	r5, r3
    2794:	3508      	adds	r5, #8
    2796:	1c06      	adds	r6, r0, #0
    2798:	2d0c      	cmp	r5, #12
    279a:	d201      	bcs.n	27a0 <_malloc_r+0x14>
    279c:	250c      	movs	r5, #12
    279e:	e001      	b.n	27a4 <_malloc_r+0x18>
    27a0:	2d00      	cmp	r5, #0
    27a2:	db3f      	blt.n	2824 <_malloc_r+0x98>
    27a4:	428d      	cmp	r5, r1
    27a6:	d33d      	bcc.n	2824 <_malloc_r+0x98>
    27a8:	4b20      	ldr	r3, [pc, #128]	; (282c <_malloc_r+0xa0>)
    27aa:	681c      	ldr	r4, [r3, #0]
    27ac:	1c1a      	adds	r2, r3, #0
    27ae:	1c21      	adds	r1, r4, #0
    27b0:	2900      	cmp	r1, #0
    27b2:	d013      	beq.n	27dc <_malloc_r+0x50>
    27b4:	6808      	ldr	r0, [r1, #0]
    27b6:	1b43      	subs	r3, r0, r5
    27b8:	d40d      	bmi.n	27d6 <_malloc_r+0x4a>
    27ba:	2b0b      	cmp	r3, #11
    27bc:	d902      	bls.n	27c4 <_malloc_r+0x38>
    27be:	600b      	str	r3, [r1, #0]
    27c0:	18cc      	adds	r4, r1, r3
    27c2:	e01e      	b.n	2802 <_malloc_r+0x76>
    27c4:	428c      	cmp	r4, r1
    27c6:	d102      	bne.n	27ce <_malloc_r+0x42>
    27c8:	6863      	ldr	r3, [r4, #4]
    27ca:	6013      	str	r3, [r2, #0]
    27cc:	e01a      	b.n	2804 <_malloc_r+0x78>
    27ce:	6848      	ldr	r0, [r1, #4]
    27d0:	6060      	str	r0, [r4, #4]
    27d2:	1c0c      	adds	r4, r1, #0
    27d4:	e016      	b.n	2804 <_malloc_r+0x78>
    27d6:	1c0c      	adds	r4, r1, #0
    27d8:	6849      	ldr	r1, [r1, #4]
    27da:	e7e9      	b.n	27b0 <_malloc_r+0x24>
    27dc:	4c14      	ldr	r4, [pc, #80]	; (2830 <_malloc_r+0xa4>)
    27de:	6820      	ldr	r0, [r4, #0]
    27e0:	2800      	cmp	r0, #0
    27e2:	d103      	bne.n	27ec <_malloc_r+0x60>
    27e4:	1c30      	adds	r0, r6, #0
    27e6:	f000 f825 	bl	2834 <_sbrk_r>
    27ea:	6020      	str	r0, [r4, #0]
    27ec:	1c30      	adds	r0, r6, #0
    27ee:	1c29      	adds	r1, r5, #0
    27f0:	f000 f820 	bl	2834 <_sbrk_r>
    27f4:	1c43      	adds	r3, r0, #1
    27f6:	d015      	beq.n	2824 <_malloc_r+0x98>
    27f8:	1cc4      	adds	r4, r0, #3
    27fa:	2303      	movs	r3, #3
    27fc:	439c      	bics	r4, r3
    27fe:	4284      	cmp	r4, r0
    2800:	d10a      	bne.n	2818 <_malloc_r+0x8c>
    2802:	6025      	str	r5, [r4, #0]
    2804:	1c20      	adds	r0, r4, #0
    2806:	300b      	adds	r0, #11
    2808:	2207      	movs	r2, #7
    280a:	1d23      	adds	r3, r4, #4
    280c:	4390      	bics	r0, r2
    280e:	1ac3      	subs	r3, r0, r3
    2810:	d00b      	beq.n	282a <_malloc_r+0x9e>
    2812:	425a      	negs	r2, r3
    2814:	50e2      	str	r2, [r4, r3]
    2816:	e008      	b.n	282a <_malloc_r+0x9e>
    2818:	1a21      	subs	r1, r4, r0
    281a:	1c30      	adds	r0, r6, #0
    281c:	f000 f80a 	bl	2834 <_sbrk_r>
    2820:	3001      	adds	r0, #1
    2822:	d1ee      	bne.n	2802 <_malloc_r+0x76>
    2824:	230c      	movs	r3, #12
    2826:	6033      	str	r3, [r6, #0]
    2828:	2000      	movs	r0, #0
    282a:	bd70      	pop	{r4, r5, r6, pc}
    282c:	20000110 	.word	0x20000110
    2830:	2000010c 	.word	0x2000010c

00002834 <_sbrk_r>:
    2834:	b538      	push	{r3, r4, r5, lr}
    2836:	4c07      	ldr	r4, [pc, #28]	; (2854 <_sbrk_r+0x20>)
    2838:	2300      	movs	r3, #0
    283a:	1c05      	adds	r5, r0, #0
    283c:	1c08      	adds	r0, r1, #0
    283e:	6023      	str	r3, [r4, #0]
    2840:	f7fe feec 	bl	161c <_sbrk>
    2844:	1c43      	adds	r3, r0, #1
    2846:	d103      	bne.n	2850 <_sbrk_r+0x1c>
    2848:	6823      	ldr	r3, [r4, #0]
    284a:	2b00      	cmp	r3, #0
    284c:	d000      	beq.n	2850 <_sbrk_r+0x1c>
    284e:	602b      	str	r3, [r5, #0]
    2850:	bd38      	pop	{r3, r4, r5, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	20000144 	.word	0x20000144

00002858 <__sread>:
    2858:	b538      	push	{r3, r4, r5, lr}
    285a:	1c0c      	adds	r4, r1, #0
    285c:	250e      	movs	r5, #14
    285e:	5f49      	ldrsh	r1, [r1, r5]
    2860:	f000 f8ac 	bl	29bc <_read_r>
    2864:	2800      	cmp	r0, #0
    2866:	db03      	blt.n	2870 <__sread+0x18>
    2868:	6d62      	ldr	r2, [r4, #84]	; 0x54
    286a:	1813      	adds	r3, r2, r0
    286c:	6563      	str	r3, [r4, #84]	; 0x54
    286e:	e003      	b.n	2878 <__sread+0x20>
    2870:	89a2      	ldrh	r2, [r4, #12]
    2872:	4b02      	ldr	r3, [pc, #8]	; (287c <__sread+0x24>)
    2874:	4013      	ands	r3, r2
    2876:	81a3      	strh	r3, [r4, #12]
    2878:	bd38      	pop	{r3, r4, r5, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	ffffefff 	.word	0xffffefff

00002880 <__swrite>:
    2880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2882:	1c1e      	adds	r6, r3, #0
    2884:	898b      	ldrh	r3, [r1, #12]
    2886:	1c05      	adds	r5, r0, #0
    2888:	1c0c      	adds	r4, r1, #0
    288a:	1c17      	adds	r7, r2, #0
    288c:	05da      	lsls	r2, r3, #23
    288e:	d505      	bpl.n	289c <__swrite+0x1c>
    2890:	230e      	movs	r3, #14
    2892:	5ec9      	ldrsh	r1, [r1, r3]
    2894:	2200      	movs	r2, #0
    2896:	2302      	movs	r3, #2
    2898:	f000 f87c 	bl	2994 <_lseek_r>
    289c:	89a2      	ldrh	r2, [r4, #12]
    289e:	4b05      	ldr	r3, [pc, #20]	; (28b4 <__swrite+0x34>)
    28a0:	1c28      	adds	r0, r5, #0
    28a2:	4013      	ands	r3, r2
    28a4:	81a3      	strh	r3, [r4, #12]
    28a6:	220e      	movs	r2, #14
    28a8:	5ea1      	ldrsh	r1, [r4, r2]
    28aa:	1c33      	adds	r3, r6, #0
    28ac:	1c3a      	adds	r2, r7, #0
    28ae:	f000 f827 	bl	2900 <_write_r>
    28b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28b4:	ffffefff 	.word	0xffffefff

000028b8 <__sseek>:
    28b8:	b538      	push	{r3, r4, r5, lr}
    28ba:	1c0c      	adds	r4, r1, #0
    28bc:	250e      	movs	r5, #14
    28be:	5f49      	ldrsh	r1, [r1, r5]
    28c0:	f000 f868 	bl	2994 <_lseek_r>
    28c4:	89a3      	ldrh	r3, [r4, #12]
    28c6:	1c42      	adds	r2, r0, #1
    28c8:	d103      	bne.n	28d2 <__sseek+0x1a>
    28ca:	4a05      	ldr	r2, [pc, #20]	; (28e0 <__sseek+0x28>)
    28cc:	4013      	ands	r3, r2
    28ce:	81a3      	strh	r3, [r4, #12]
    28d0:	e004      	b.n	28dc <__sseek+0x24>
    28d2:	2280      	movs	r2, #128	; 0x80
    28d4:	0152      	lsls	r2, r2, #5
    28d6:	4313      	orrs	r3, r2
    28d8:	81a3      	strh	r3, [r4, #12]
    28da:	6560      	str	r0, [r4, #84]	; 0x54
    28dc:	bd38      	pop	{r3, r4, r5, pc}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	ffffefff 	.word	0xffffefff

000028e4 <__sclose>:
    28e4:	b508      	push	{r3, lr}
    28e6:	230e      	movs	r3, #14
    28e8:	5ec9      	ldrsh	r1, [r1, r3]
    28ea:	f000 f81d 	bl	2928 <_close_r>
    28ee:	bd08      	pop	{r3, pc}

000028f0 <strlen>:
    28f0:	2300      	movs	r3, #0
    28f2:	5cc2      	ldrb	r2, [r0, r3]
    28f4:	3301      	adds	r3, #1
    28f6:	2a00      	cmp	r2, #0
    28f8:	d1fb      	bne.n	28f2 <strlen+0x2>
    28fa:	1e58      	subs	r0, r3, #1
    28fc:	4770      	bx	lr
	...

00002900 <_write_r>:
    2900:	b538      	push	{r3, r4, r5, lr}
    2902:	4c08      	ldr	r4, [pc, #32]	; (2924 <_write_r+0x24>)
    2904:	1c05      	adds	r5, r0, #0
    2906:	2000      	movs	r0, #0
    2908:	6020      	str	r0, [r4, #0]
    290a:	1c08      	adds	r0, r1, #0
    290c:	1c11      	adds	r1, r2, #0
    290e:	1c1a      	adds	r2, r3, #0
    2910:	f7fe fe5a 	bl	15c8 <_write>
    2914:	1c43      	adds	r3, r0, #1
    2916:	d103      	bne.n	2920 <_write_r+0x20>
    2918:	6823      	ldr	r3, [r4, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	d000      	beq.n	2920 <_write_r+0x20>
    291e:	602b      	str	r3, [r5, #0]
    2920:	bd38      	pop	{r3, r4, r5, pc}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	20000144 	.word	0x20000144

00002928 <_close_r>:
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	4c07      	ldr	r4, [pc, #28]	; (2948 <_close_r+0x20>)
    292c:	2300      	movs	r3, #0
    292e:	1c05      	adds	r5, r0, #0
    2930:	1c08      	adds	r0, r1, #0
    2932:	6023      	str	r3, [r4, #0]
    2934:	f7fe fe84 	bl	1640 <_close>
    2938:	1c43      	adds	r3, r0, #1
    293a:	d103      	bne.n	2944 <_close_r+0x1c>
    293c:	6823      	ldr	r3, [r4, #0]
    293e:	2b00      	cmp	r3, #0
    2940:	d000      	beq.n	2944 <_close_r+0x1c>
    2942:	602b      	str	r3, [r5, #0]
    2944:	bd38      	pop	{r3, r4, r5, pc}
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	20000144 	.word	0x20000144

0000294c <_fstat_r>:
    294c:	b538      	push	{r3, r4, r5, lr}
    294e:	4c07      	ldr	r4, [pc, #28]	; (296c <_fstat_r+0x20>)
    2950:	2300      	movs	r3, #0
    2952:	1c05      	adds	r5, r0, #0
    2954:	1c08      	adds	r0, r1, #0
    2956:	1c11      	adds	r1, r2, #0
    2958:	6023      	str	r3, [r4, #0]
    295a:	f7fe fe75 	bl	1648 <_fstat>
    295e:	1c43      	adds	r3, r0, #1
    2960:	d103      	bne.n	296a <_fstat_r+0x1e>
    2962:	6823      	ldr	r3, [r4, #0]
    2964:	2b00      	cmp	r3, #0
    2966:	d000      	beq.n	296a <_fstat_r+0x1e>
    2968:	602b      	str	r3, [r5, #0]
    296a:	bd38      	pop	{r3, r4, r5, pc}
    296c:	20000144 	.word	0x20000144

00002970 <_isatty_r>:
    2970:	b538      	push	{r3, r4, r5, lr}
    2972:	4c07      	ldr	r4, [pc, #28]	; (2990 <_isatty_r+0x20>)
    2974:	2300      	movs	r3, #0
    2976:	1c05      	adds	r5, r0, #0
    2978:	1c08      	adds	r0, r1, #0
    297a:	6023      	str	r3, [r4, #0]
    297c:	f7fe fe6a 	bl	1654 <_isatty>
    2980:	1c43      	adds	r3, r0, #1
    2982:	d103      	bne.n	298c <_isatty_r+0x1c>
    2984:	6823      	ldr	r3, [r4, #0]
    2986:	2b00      	cmp	r3, #0
    2988:	d000      	beq.n	298c <_isatty_r+0x1c>
    298a:	602b      	str	r3, [r5, #0]
    298c:	bd38      	pop	{r3, r4, r5, pc}
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	20000144 	.word	0x20000144

00002994 <_lseek_r>:
    2994:	b538      	push	{r3, r4, r5, lr}
    2996:	4c08      	ldr	r4, [pc, #32]	; (29b8 <_lseek_r+0x24>)
    2998:	1c05      	adds	r5, r0, #0
    299a:	2000      	movs	r0, #0
    299c:	6020      	str	r0, [r4, #0]
    299e:	1c08      	adds	r0, r1, #0
    29a0:	1c11      	adds	r1, r2, #0
    29a2:	1c1a      	adds	r2, r3, #0
    29a4:	f7fe fe58 	bl	1658 <_lseek>
    29a8:	1c43      	adds	r3, r0, #1
    29aa:	d103      	bne.n	29b4 <_lseek_r+0x20>
    29ac:	6823      	ldr	r3, [r4, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d000      	beq.n	29b4 <_lseek_r+0x20>
    29b2:	602b      	str	r3, [r5, #0]
    29b4:	bd38      	pop	{r3, r4, r5, pc}
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	20000144 	.word	0x20000144

000029bc <_read_r>:
    29bc:	b538      	push	{r3, r4, r5, lr}
    29be:	4c08      	ldr	r4, [pc, #32]	; (29e0 <_read_r+0x24>)
    29c0:	1c05      	adds	r5, r0, #0
    29c2:	2000      	movs	r0, #0
    29c4:	6020      	str	r0, [r4, #0]
    29c6:	1c08      	adds	r0, r1, #0
    29c8:	1c11      	adds	r1, r2, #0
    29ca:	1c1a      	adds	r2, r3, #0
    29cc:	f7fe fdda 	bl	1584 <_read>
    29d0:	1c43      	adds	r3, r0, #1
    29d2:	d103      	bne.n	29dc <_read_r+0x20>
    29d4:	6823      	ldr	r3, [r4, #0]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d000      	beq.n	29dc <_read_r+0x20>
    29da:	602b      	str	r3, [r5, #0]
    29dc:	bd38      	pop	{r3, r4, r5, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	20000144 	.word	0x20000144
    29e4:	42000800 	.word	0x42000800
    29e8:	42000c00 	.word	0x42000c00
    29ec:	42001000 	.word	0x42001000
    29f0:	42001400 	.word	0x42001400
    29f4:	42001800 	.word	0x42001800
    29f8:	42001c00 	.word	0x42001c00
    29fc:	0c0b0a09 	.word	0x0c0b0a09
    2a00:	00000e0d 	.word	0x00000e0d
    2a04:	00000f34 	.word	0x00000f34
    2a08:	00000f90 	.word	0x00000f90
    2a0c:	00000f90 	.word	0x00000f90
    2a10:	00000f2e 	.word	0x00000f2e
    2a14:	00000f2e 	.word	0x00000f2e
    2a18:	00000f4a 	.word	0x00000f4a
    2a1c:	00000f3a 	.word	0x00000f3a
    2a20:	00000f50 	.word	0x00000f50
    2a24:	00000f7e 	.word	0x00000f7e
    2a28:	00001018 	.word	0x00001018
    2a2c:	00001078 	.word	0x00001078
    2a30:	00001078 	.word	0x00001078
    2a34:	00000ff8 	.word	0x00000ff8
    2a38:	0000100a 	.word	0x0000100a
    2a3c:	00001026 	.word	0x00001026
    2a40:	00000ffc 	.word	0x00000ffc
    2a44:	00001034 	.word	0x00001034
    2a48:	00001068 	.word	0x00001068
    2a4c:	0003000f 	.word	0x0003000f
    2a50:	2000000c 	.word	0x2000000c
    2a54:	00000000 	.word	0x00000000
    2a58:	0002001e 	.word	0x0002001e
    2a5c:	20000010 	.word	0x20000010
    2a60:	00000000 	.word	0x00000000
    2a64:	0002001e 	.word	0x0002001e
    2a68:	20000008 	.word	0x20000008
    2a6c:	00000000 	.word	0x00000000
    2a70:	0002001e 	.word	0x0002001e
    2a74:	20000004 	.word	0x20000004
    2a78:	00000000 	.word	0x00000000
    2a7c:	20433249 	.word	0x20433249
    2a80:	74697277 	.word	0x74697277
    2a84:	69742065 	.word	0x69742065
    2a88:	2064656d 	.word	0x2064656d
    2a8c:	2e74756f 	.word	0x2e74756f
    2a90:	0000000d 	.word	0x0000000d
    2a94:	6e6e7552 	.word	0x6e6e7552
    2a98:	2e676e69 	.word	0x2e676e69
    2a9c:	0d0a2e2e 	.word	0x0d0a2e2e
    2aa0:	00000000 	.word	0x00000000
    2aa4:	20433249 	.word	0x20433249
    2aa8:	666e6f43 	.word	0x666e6f43
    2aac:	72756769 	.word	0x72756769
    2ab0:	0d0a6465 	.word	0x0d0a6465
    2ab4:	00000000 	.word	0x00000000
    2ab8:	6e696f67 	.word	0x6e696f67
    2abc:	6f742067 	.word	0x6f742067
    2ac0:	69727720 	.word	0x69727720
    2ac4:	64206574 	.word	0x64206574
    2ac8:	63207269 	.word	0x63207269
    2acc:	616d6d6f 	.word	0x616d6d6f
    2ad0:	000d646e 	.word	0x000d646e
    2ad4:	746f7277 	.word	0x746f7277
    2ad8:	69642065 	.word	0x69642065
    2adc:	6f632072 	.word	0x6f632072
    2ae0:	6e616d6d 	.word	0x6e616d6d
    2ae4:	00000d64 	.word	0x00000d64
    2ae8:	00000043 	.word	0x00000043

00002aec <_global_impure_ptr>:
    2aec:	20000014 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    2afc:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2b0c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2b1c:	64636261 00006665                       abcdef..

00002b24 <__sf_fake_stdin>:
	...

00002b44 <__sf_fake_stdout>:
	...

00002b64 <__sf_fake_stderr>:
	...

00002b84 <_init>:
    2b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b8a:	bc08      	pop	{r3}
    2b8c:	469e      	mov	lr, r3
    2b8e:	4770      	bx	lr

00002b90 <__init_array_start>:
    2b90:	000000d9 	.word	0x000000d9

00002b94 <_fini>:
    2b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b9a:	bc08      	pop	{r3}
    2b9c:	469e      	mov	lr, r3
    2b9e:	4770      	bx	lr

00002ba0 <__fini_array_start>:
    2ba0:	000000b1 	.word	0x000000b1
