
ADC_QUICK_START2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c04  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002c04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000068  00002c6c  00010068  2**2
                  ALLOC
  3 .stack        00002004  20000134  00002d38  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001cacc  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028cb  00000000  00000000  0002cbb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004659  00000000  00000000  0002f482  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000448  00000000  00000000  00033adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  00033f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001943e  00000000  00000000  00034363  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a714  00000000  00000000  0004d7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089e7b  00000000  00000000  00057eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001100  00000000  00000000  000e1d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002138 	.word	0x20002138
       4:	0000161d 	.word	0x0000161d
       8:	00001619 	.word	0x00001619
       c:	00001619 	.word	0x00001619
	...
      2c:	00001619 	.word	0x00001619
	...
      38:	00001619 	.word	0x00001619
      3c:	00001619 	.word	0x00001619
      40:	00001619 	.word	0x00001619
      44:	00001619 	.word	0x00001619
      48:	00001619 	.word	0x00001619
      4c:	00001619 	.word	0x00001619
      50:	00001619 	.word	0x00001619
      54:	00001619 	.word	0x00001619
      58:	00001619 	.word	0x00001619
      5c:	00001619 	.word	0x00001619
      60:	00001619 	.word	0x00001619
      64:	00000b49 	.word	0x00000b49
      68:	00000b59 	.word	0x00000b59
      6c:	00000b69 	.word	0x00000b69
      70:	00000b79 	.word	0x00000b79
      74:	00000b89 	.word	0x00000b89
      78:	00000b99 	.word	0x00000b99
      7c:	00001619 	.word	0x00001619
      80:	00001619 	.word	0x00001619
      84:	00001619 	.word	0x00001619
      88:	00001619 	.word	0x00001619
      8c:	00001619 	.word	0x00001619
      90:	00001619 	.word	0x00001619
      94:	00001619 	.word	0x00001619
      98:	00001619 	.word	0x00001619
      9c:	00001619 	.word	0x00001619
      a0:	00001619 	.word	0x00001619
      a4:	00001619 	.word	0x00001619
      a8:	00001619 	.word	0x00001619
      ac:	00001619 	.word	0x00001619

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000068 	.word	0x20000068
      d0:	00000000 	.word	0x00000000
      d4:	00002c04 	.word	0x00002c04

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002c04 	.word	0x00002c04
     104:	2000006c 	.word	0x2000006c
     108:	00002c04 	.word	0x00002c04
     10c:	00000000 	.word	0x00000000

00000110 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     110:	b510      	push	{r4, lr}
     112:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     114:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     116:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     118:	4299      	cmp	r1, r3
     11a:	d30c      	bcc.n	136 <_sercom_get_sync_baud_val+0x26>
     11c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     11e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     120:	1c60      	adds	r0, r4, #1
     122:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     124:	428b      	cmp	r3, r1
     126:	d801      	bhi.n	12c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     128:	1c04      	adds	r4, r0, #0
     12a:	e7f8      	b.n	11e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     12e:	2cff      	cmp	r4, #255	; 0xff
     130:	d801      	bhi.n	136 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     132:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     134:	2000      	movs	r0, #0
	}
}
     136:	bd10      	pop	{r4, pc}

00000138 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     138:	b5f0      	push	{r4, r5, r6, r7, lr}
     13a:	465f      	mov	r7, fp
     13c:	4656      	mov	r6, sl
     13e:	464d      	mov	r5, r9
     140:	4644      	mov	r4, r8
     142:	b4f0      	push	{r4, r5, r6, r7}
     144:	b087      	sub	sp, #28
     146:	1c06      	adds	r6, r0, #0
     148:	1c0d      	adds	r5, r1, #0
     14a:	9204      	str	r2, [sp, #16]
     14c:	aa10      	add	r2, sp, #64	; 0x40
     14e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     150:	1c32      	adds	r2, r6, #0
     152:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     154:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     156:	428a      	cmp	r2, r1
     158:	d900      	bls.n	15c <_sercom_get_async_baud_val+0x24>
     15a:	e0b3      	b.n	2c4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     15c:	2b00      	cmp	r3, #0
     15e:	d14b      	bne.n	1f8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     160:	2100      	movs	r1, #0
     162:	1c32      	adds	r2, r6, #0
     164:	4c5e      	ldr	r4, [pc, #376]	; (2e0 <_sercom_get_async_baud_val+0x1a8>)
     166:	47a0      	blx	r4
     168:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     16a:	1c2e      	adds	r6, r5, #0
     16c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     16e:	2000      	movs	r0, #0
     170:	2100      	movs	r1, #0
     172:	2200      	movs	r2, #0
     174:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     176:	243f      	movs	r4, #63	; 0x3f
     178:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     17a:	2501      	movs	r5, #1
     17c:	46a8      	mov	r8, r5
     17e:	9002      	str	r0, [sp, #8]
     180:	9103      	str	r1, [sp, #12]
     182:	4661      	mov	r1, ip
     184:	3920      	subs	r1, #32
     186:	d403      	bmi.n	190 <_sercom_get_async_baud_val+0x58>
     188:	4640      	mov	r0, r8
     18a:	4088      	lsls	r0, r1
     18c:	4681      	mov	r9, r0
     18e:	e005      	b.n	19c <_sercom_get_async_baud_val+0x64>
     190:	2120      	movs	r1, #32
     192:	4665      	mov	r5, ip
     194:	1b4c      	subs	r4, r1, r5
     196:	4640      	mov	r0, r8
     198:	40e0      	lsrs	r0, r4
     19a:	4681      	mov	r9, r0
     19c:	4641      	mov	r1, r8
     19e:	4664      	mov	r4, ip
     1a0:	40a1      	lsls	r1, r4
     1a2:	468a      	mov	sl, r1

		r = r << 1;
     1a4:	1c10      	adds	r0, r2, #0
     1a6:	1c19      	adds	r1, r3, #0
     1a8:	1880      	adds	r0, r0, r2
     1aa:	4159      	adcs	r1, r3
     1ac:	1c02      	adds	r2, r0, #0
     1ae:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     1b0:	465d      	mov	r5, fp
     1b2:	464c      	mov	r4, r9
     1b4:	4225      	tst	r5, r4
     1b6:	d002      	beq.n	1be <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     1b8:	4642      	mov	r2, r8
     1ba:	4302      	orrs	r2, r0
     1bc:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     1be:	429f      	cmp	r7, r3
     1c0:	d80c      	bhi.n	1dc <_sercom_get_async_baud_val+0xa4>
     1c2:	d101      	bne.n	1c8 <_sercom_get_async_baud_val+0x90>
     1c4:	4296      	cmp	r6, r2
     1c6:	d809      	bhi.n	1dc <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     1c8:	1b92      	subs	r2, r2, r6
     1ca:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     1cc:	4650      	mov	r0, sl
     1ce:	9d02      	ldr	r5, [sp, #8]
     1d0:	4328      	orrs	r0, r5
     1d2:	4649      	mov	r1, r9
     1d4:	9c03      	ldr	r4, [sp, #12]
     1d6:	4321      	orrs	r1, r4
     1d8:	9002      	str	r0, [sp, #8]
     1da:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1dc:	4665      	mov	r5, ip
     1de:	3d01      	subs	r5, #1
     1e0:	46ac      	mov	ip, r5
     1e2:	d2ce      	bcs.n	182 <_sercom_get_async_baud_val+0x4a>
     1e4:	9802      	ldr	r0, [sp, #8]
     1e6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1e8:	4b3c      	ldr	r3, [pc, #240]	; (2dc <_sercom_get_async_baud_val+0x1a4>)
     1ea:	4a3b      	ldr	r2, [pc, #236]	; (2d8 <_sercom_get_async_baud_val+0x1a0>)
     1ec:	1a12      	subs	r2, r2, r0
     1ee:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     1f0:	0c12      	lsrs	r2, r2, #16
     1f2:	041b      	lsls	r3, r3, #16
     1f4:	431a      	orrs	r2, r3
     1f6:	e062      	b.n	2be <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     1f8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     1fa:	2b01      	cmp	r3, #1
     1fc:	d15f      	bne.n	2be <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     1fe:	0f4f      	lsrs	r7, r1, #29
     200:	46b9      	mov	r9, r7
     202:	00cd      	lsls	r5, r1, #3
     204:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     206:	2100      	movs	r1, #0
     208:	1c32      	adds	r2, r6, #0
     20a:	2300      	movs	r3, #0
     20c:	4c34      	ldr	r4, [pc, #208]	; (2e0 <_sercom_get_async_baud_val+0x1a8>)
     20e:	47a0      	blx	r4
     210:	1c06      	adds	r6, r0, #0
     212:	1c0f      	adds	r7, r1, #0
     214:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     216:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     218:	9602      	str	r6, [sp, #8]
     21a:	9703      	str	r7, [sp, #12]
     21c:	469a      	mov	sl, r3
     21e:	4650      	mov	r0, sl
     220:	b2c0      	uxtb	r0, r0
     222:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     224:	2100      	movs	r1, #0
     226:	4688      	mov	r8, r1
     228:	2200      	movs	r2, #0
     22a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     22c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     22e:	1c27      	adds	r7, r4, #0
     230:	3f20      	subs	r7, #32
     232:	d403      	bmi.n	23c <_sercom_get_async_baud_val+0x104>
     234:	1c2e      	adds	r6, r5, #0
     236:	40be      	lsls	r6, r7
     238:	9601      	str	r6, [sp, #4]
     23a:	e004      	b.n	246 <_sercom_get_async_baud_val+0x10e>
     23c:	2020      	movs	r0, #32
     23e:	1b07      	subs	r7, r0, r4
     240:	1c29      	adds	r1, r5, #0
     242:	40f9      	lsrs	r1, r7
     244:	9101      	str	r1, [sp, #4]
     246:	1c2e      	adds	r6, r5, #0
     248:	40a6      	lsls	r6, r4
     24a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     24c:	1c10      	adds	r0, r2, #0
     24e:	1c19      	adds	r1, r3, #0
     250:	1880      	adds	r0, r0, r2
     252:	4159      	adcs	r1, r3
     254:	1c02      	adds	r2, r0, #0
     256:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     258:	465f      	mov	r7, fp
     25a:	4037      	ands	r7, r6
     25c:	46bc      	mov	ip, r7
     25e:	9e01      	ldr	r6, [sp, #4]
     260:	464f      	mov	r7, r9
     262:	403e      	ands	r6, r7
     264:	4667      	mov	r7, ip
     266:	433e      	orrs	r6, r7
     268:	d002      	beq.n	270 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     26a:	1c2a      	adds	r2, r5, #0
     26c:	4302      	orrs	r2, r0
     26e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     270:	9803      	ldr	r0, [sp, #12]
     272:	4298      	cmp	r0, r3
     274:	d80b      	bhi.n	28e <_sercom_get_async_baud_val+0x156>
     276:	d102      	bne.n	27e <_sercom_get_async_baud_val+0x146>
     278:	9902      	ldr	r1, [sp, #8]
     27a:	4291      	cmp	r1, r2
     27c:	d807      	bhi.n	28e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     27e:	9e02      	ldr	r6, [sp, #8]
     280:	9f03      	ldr	r7, [sp, #12]
     282:	1b92      	subs	r2, r2, r6
     284:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     286:	4647      	mov	r7, r8
     288:	9800      	ldr	r0, [sp, #0]
     28a:	4307      	orrs	r7, r0
     28c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     28e:	3c01      	subs	r4, #1
     290:	d2cd      	bcs.n	22e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     292:	4641      	mov	r1, r8
     294:	4652      	mov	r2, sl
     296:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     298:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     29a:	4c12      	ldr	r4, [pc, #72]	; (2e4 <_sercom_get_async_baud_val+0x1ac>)
     29c:	42a3      	cmp	r3, r4
     29e:	d908      	bls.n	2b2 <_sercom_get_async_baud_val+0x17a>
     2a0:	9a05      	ldr	r2, [sp, #20]
     2a2:	3201      	adds	r2, #1
     2a4:	b2d2      	uxtb	r2, r2
     2a6:	9205      	str	r2, [sp, #20]
     2a8:	2601      	movs	r6, #1
     2aa:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2ac:	4657      	mov	r7, sl
     2ae:	2f08      	cmp	r7, #8
     2b0:	d1b5      	bne.n	21e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2b2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2b4:	9805      	ldr	r0, [sp, #20]
     2b6:	2808      	cmp	r0, #8
     2b8:	d004      	beq.n	2c4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2ba:	0342      	lsls	r2, r0, #13
     2bc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     2be:	9c04      	ldr	r4, [sp, #16]
     2c0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     2c2:	2400      	movs	r4, #0
}
     2c4:	1c20      	adds	r0, r4, #0
     2c6:	b007      	add	sp, #28
     2c8:	bc3c      	pop	{r2, r3, r4, r5}
     2ca:	4690      	mov	r8, r2
     2cc:	4699      	mov	r9, r3
     2ce:	46a2      	mov	sl, r4
     2d0:	46ab      	mov	fp, r5
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	46c0      	nop			; (mov r8, r8)
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	00000000 	.word	0x00000000
     2dc:	00000001 	.word	0x00000001
     2e0:	00001a01 	.word	0x00001a01
     2e4:	00001fff 	.word	0x00001fff

000002e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     2ee:	4b0f      	ldr	r3, [pc, #60]	; (32c <sercom_set_gclk_generator+0x44>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d001      	beq.n	2fa <sercom_set_gclk_generator+0x12>
     2f6:	2900      	cmp	r1, #0
     2f8:	d00d      	beq.n	316 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     2fa:	a901      	add	r1, sp, #4
     2fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2fe:	2013      	movs	r0, #19
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <sercom_set_gclk_generator+0x48>)
     302:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     304:	2013      	movs	r0, #19
     306:	4b0b      	ldr	r3, [pc, #44]	; (334 <sercom_set_gclk_generator+0x4c>)
     308:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     30a:	4b08      	ldr	r3, [pc, #32]	; (32c <sercom_set_gclk_generator+0x44>)
     30c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     30e:	2201      	movs	r2, #1
     310:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     312:	2000      	movs	r0, #0
     314:	e007      	b.n	326 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <sercom_set_gclk_generator+0x44>)
     318:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     31a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     31c:	1b14      	subs	r4, r2, r4
     31e:	1e62      	subs	r2, r4, #1
     320:	4194      	sbcs	r4, r2
     322:	4264      	negs	r4, r4
     324:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     326:	b002      	add	sp, #8
     328:	bd10      	pop	{r4, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000084 	.word	0x20000084
     330:	000014e9 	.word	0x000014e9
     334:	0000145d 	.word	0x0000145d

00000338 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     338:	4b44      	ldr	r3, [pc, #272]	; (44c <_sercom_get_default_pad+0x114>)
     33a:	4298      	cmp	r0, r3
     33c:	d033      	beq.n	3a6 <_sercom_get_default_pad+0x6e>
     33e:	d806      	bhi.n	34e <_sercom_get_default_pad+0x16>
     340:	4b43      	ldr	r3, [pc, #268]	; (450 <_sercom_get_default_pad+0x118>)
     342:	4298      	cmp	r0, r3
     344:	d00d      	beq.n	362 <_sercom_get_default_pad+0x2a>
     346:	4b43      	ldr	r3, [pc, #268]	; (454 <_sercom_get_default_pad+0x11c>)
     348:	4298      	cmp	r0, r3
     34a:	d01b      	beq.n	384 <_sercom_get_default_pad+0x4c>
     34c:	e06f      	b.n	42e <_sercom_get_default_pad+0xf6>
     34e:	4b42      	ldr	r3, [pc, #264]	; (458 <_sercom_get_default_pad+0x120>)
     350:	4298      	cmp	r0, r3
     352:	d04a      	beq.n	3ea <_sercom_get_default_pad+0xb2>
     354:	4b41      	ldr	r3, [pc, #260]	; (45c <_sercom_get_default_pad+0x124>)
     356:	4298      	cmp	r0, r3
     358:	d058      	beq.n	40c <_sercom_get_default_pad+0xd4>
     35a:	4b41      	ldr	r3, [pc, #260]	; (460 <_sercom_get_default_pad+0x128>)
     35c:	4298      	cmp	r0, r3
     35e:	d166      	bne.n	42e <_sercom_get_default_pad+0xf6>
     360:	e032      	b.n	3c8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     362:	2901      	cmp	r1, #1
     364:	d065      	beq.n	432 <_sercom_get_default_pad+0xfa>
     366:	2900      	cmp	r1, #0
     368:	d004      	beq.n	374 <_sercom_get_default_pad+0x3c>
     36a:	2902      	cmp	r1, #2
     36c:	d006      	beq.n	37c <_sercom_get_default_pad+0x44>
     36e:	2903      	cmp	r1, #3
     370:	d006      	beq.n	380 <_sercom_get_default_pad+0x48>
     372:	e001      	b.n	378 <_sercom_get_default_pad+0x40>
     374:	483b      	ldr	r0, [pc, #236]	; (464 <_sercom_get_default_pad+0x12c>)
     376:	e067      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     378:	2000      	movs	r0, #0
     37a:	e065      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37c:	483a      	ldr	r0, [pc, #232]	; (468 <_sercom_get_default_pad+0x130>)
     37e:	e063      	b.n	448 <_sercom_get_default_pad+0x110>
     380:	483a      	ldr	r0, [pc, #232]	; (46c <_sercom_get_default_pad+0x134>)
     382:	e061      	b.n	448 <_sercom_get_default_pad+0x110>
     384:	2901      	cmp	r1, #1
     386:	d056      	beq.n	436 <_sercom_get_default_pad+0xfe>
     388:	2900      	cmp	r1, #0
     38a:	d004      	beq.n	396 <_sercom_get_default_pad+0x5e>
     38c:	2902      	cmp	r1, #2
     38e:	d006      	beq.n	39e <_sercom_get_default_pad+0x66>
     390:	2903      	cmp	r1, #3
     392:	d006      	beq.n	3a2 <_sercom_get_default_pad+0x6a>
     394:	e001      	b.n	39a <_sercom_get_default_pad+0x62>
     396:	2003      	movs	r0, #3
     398:	e056      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     39a:	2000      	movs	r0, #0
     39c:	e054      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     39e:	4834      	ldr	r0, [pc, #208]	; (470 <_sercom_get_default_pad+0x138>)
     3a0:	e052      	b.n	448 <_sercom_get_default_pad+0x110>
     3a2:	4834      	ldr	r0, [pc, #208]	; (474 <_sercom_get_default_pad+0x13c>)
     3a4:	e050      	b.n	448 <_sercom_get_default_pad+0x110>
     3a6:	2901      	cmp	r1, #1
     3a8:	d047      	beq.n	43a <_sercom_get_default_pad+0x102>
     3aa:	2900      	cmp	r1, #0
     3ac:	d004      	beq.n	3b8 <_sercom_get_default_pad+0x80>
     3ae:	2902      	cmp	r1, #2
     3b0:	d006      	beq.n	3c0 <_sercom_get_default_pad+0x88>
     3b2:	2903      	cmp	r1, #3
     3b4:	d006      	beq.n	3c4 <_sercom_get_default_pad+0x8c>
     3b6:	e001      	b.n	3bc <_sercom_get_default_pad+0x84>
     3b8:	482f      	ldr	r0, [pc, #188]	; (478 <_sercom_get_default_pad+0x140>)
     3ba:	e045      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3bc:	2000      	movs	r0, #0
     3be:	e043      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3c0:	482e      	ldr	r0, [pc, #184]	; (47c <_sercom_get_default_pad+0x144>)
     3c2:	e041      	b.n	448 <_sercom_get_default_pad+0x110>
     3c4:	482e      	ldr	r0, [pc, #184]	; (480 <_sercom_get_default_pad+0x148>)
     3c6:	e03f      	b.n	448 <_sercom_get_default_pad+0x110>
     3c8:	2901      	cmp	r1, #1
     3ca:	d038      	beq.n	43e <_sercom_get_default_pad+0x106>
     3cc:	2900      	cmp	r1, #0
     3ce:	d004      	beq.n	3da <_sercom_get_default_pad+0xa2>
     3d0:	2902      	cmp	r1, #2
     3d2:	d006      	beq.n	3e2 <_sercom_get_default_pad+0xaa>
     3d4:	2903      	cmp	r1, #3
     3d6:	d006      	beq.n	3e6 <_sercom_get_default_pad+0xae>
     3d8:	e001      	b.n	3de <_sercom_get_default_pad+0xa6>
     3da:	482a      	ldr	r0, [pc, #168]	; (484 <_sercom_get_default_pad+0x14c>)
     3dc:	e034      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3de:	2000      	movs	r0, #0
     3e0:	e032      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e2:	4829      	ldr	r0, [pc, #164]	; (488 <_sercom_get_default_pad+0x150>)
     3e4:	e030      	b.n	448 <_sercom_get_default_pad+0x110>
     3e6:	4829      	ldr	r0, [pc, #164]	; (48c <_sercom_get_default_pad+0x154>)
     3e8:	e02e      	b.n	448 <_sercom_get_default_pad+0x110>
     3ea:	2901      	cmp	r1, #1
     3ec:	d029      	beq.n	442 <_sercom_get_default_pad+0x10a>
     3ee:	2900      	cmp	r1, #0
     3f0:	d004      	beq.n	3fc <_sercom_get_default_pad+0xc4>
     3f2:	2902      	cmp	r1, #2
     3f4:	d006      	beq.n	404 <_sercom_get_default_pad+0xcc>
     3f6:	2903      	cmp	r1, #3
     3f8:	d006      	beq.n	408 <_sercom_get_default_pad+0xd0>
     3fa:	e001      	b.n	400 <_sercom_get_default_pad+0xc8>
     3fc:	4824      	ldr	r0, [pc, #144]	; (490 <_sercom_get_default_pad+0x158>)
     3fe:	e023      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     400:	2000      	movs	r0, #0
     402:	e021      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     404:	4823      	ldr	r0, [pc, #140]	; (494 <_sercom_get_default_pad+0x15c>)
     406:	e01f      	b.n	448 <_sercom_get_default_pad+0x110>
     408:	4823      	ldr	r0, [pc, #140]	; (498 <_sercom_get_default_pad+0x160>)
     40a:	e01d      	b.n	448 <_sercom_get_default_pad+0x110>
     40c:	2901      	cmp	r1, #1
     40e:	d01a      	beq.n	446 <_sercom_get_default_pad+0x10e>
     410:	2900      	cmp	r1, #0
     412:	d004      	beq.n	41e <_sercom_get_default_pad+0xe6>
     414:	2902      	cmp	r1, #2
     416:	d006      	beq.n	426 <_sercom_get_default_pad+0xee>
     418:	2903      	cmp	r1, #3
     41a:	d006      	beq.n	42a <_sercom_get_default_pad+0xf2>
     41c:	e001      	b.n	422 <_sercom_get_default_pad+0xea>
     41e:	481f      	ldr	r0, [pc, #124]	; (49c <_sercom_get_default_pad+0x164>)
     420:	e012      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     422:	2000      	movs	r0, #0
     424:	e010      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     426:	481e      	ldr	r0, [pc, #120]	; (4a0 <_sercom_get_default_pad+0x168>)
     428:	e00e      	b.n	448 <_sercom_get_default_pad+0x110>
     42a:	481e      	ldr	r0, [pc, #120]	; (4a4 <_sercom_get_default_pad+0x16c>)
     42c:	e00c      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     42e:	2000      	movs	r0, #0
     430:	e00a      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     432:	481d      	ldr	r0, [pc, #116]	; (4a8 <_sercom_get_default_pad+0x170>)
     434:	e008      	b.n	448 <_sercom_get_default_pad+0x110>
     436:	481d      	ldr	r0, [pc, #116]	; (4ac <_sercom_get_default_pad+0x174>)
     438:	e006      	b.n	448 <_sercom_get_default_pad+0x110>
     43a:	481d      	ldr	r0, [pc, #116]	; (4b0 <_sercom_get_default_pad+0x178>)
     43c:	e004      	b.n	448 <_sercom_get_default_pad+0x110>
     43e:	481d      	ldr	r0, [pc, #116]	; (4b4 <_sercom_get_default_pad+0x17c>)
     440:	e002      	b.n	448 <_sercom_get_default_pad+0x110>
     442:	481d      	ldr	r0, [pc, #116]	; (4b8 <_sercom_get_default_pad+0x180>)
     444:	e000      	b.n	448 <_sercom_get_default_pad+0x110>
     446:	481d      	ldr	r0, [pc, #116]	; (4bc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     448:	4770      	bx	lr
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	42001000 	.word	0x42001000
     450:	42000800 	.word	0x42000800
     454:	42000c00 	.word	0x42000c00
     458:	42001800 	.word	0x42001800
     45c:	42001c00 	.word	0x42001c00
     460:	42001400 	.word	0x42001400
     464:	00040003 	.word	0x00040003
     468:	00060003 	.word	0x00060003
     46c:	00070003 	.word	0x00070003
     470:	001e0003 	.word	0x001e0003
     474:	001f0003 	.word	0x001f0003
     478:	00080003 	.word	0x00080003
     47c:	000a0003 	.word	0x000a0003
     480:	000b0003 	.word	0x000b0003
     484:	00100003 	.word	0x00100003
     488:	00120003 	.word	0x00120003
     48c:	00130003 	.word	0x00130003
     490:	000c0003 	.word	0x000c0003
     494:	000e0003 	.word	0x000e0003
     498:	000f0003 	.word	0x000f0003
     49c:	00160003 	.word	0x00160003
     4a0:	00180003 	.word	0x00180003
     4a4:	00190003 	.word	0x00190003
     4a8:	00050003 	.word	0x00050003
     4ac:	00010003 	.word	0x00010003
     4b0:	00090003 	.word	0x00090003
     4b4:	00110003 	.word	0x00110003
     4b8:	000d0003 	.word	0x000d0003
     4bc:	00170003 	.word	0x00170003

000004c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4c4:	4a0c      	ldr	r2, [pc, #48]	; (4f8 <_sercom_get_sercom_inst_index+0x38>)
     4c6:	466b      	mov	r3, sp
     4c8:	ca70      	ldmia	r2!, {r4, r5, r6}
     4ca:	c370      	stmia	r3!, {r4, r5, r6}
     4cc:	ca32      	ldmia	r2!, {r1, r4, r5}
     4ce:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4d0:	9e00      	ldr	r6, [sp, #0]
     4d2:	4286      	cmp	r6, r0
     4d4:	d006      	beq.n	4e4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4d6:	2301      	movs	r3, #1
     4d8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4da:	4669      	mov	r1, sp
     4dc:	5852      	ldr	r2, [r2, r1]
     4de:	4282      	cmp	r2, r0
     4e0:	d103      	bne.n	4ea <_sercom_get_sercom_inst_index+0x2a>
     4e2:	e000      	b.n	4e6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4e4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4e6:	b2d8      	uxtb	r0, r3
     4e8:	e003      	b.n	4f2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ea:	3301      	adds	r3, #1
     4ec:	2b06      	cmp	r3, #6
     4ee:	d1f3      	bne.n	4d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     4f0:	2000      	movs	r0, #0
}
     4f2:	b006      	add	sp, #24
     4f4:	bd70      	pop	{r4, r5, r6, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	000029b8 	.word	0x000029b8

000004fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	4647      	mov	r7, r8
     500:	b480      	push	{r7}
     502:	1c0c      	adds	r4, r1, #0
     504:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     506:	2800      	cmp	r0, #0
     508:	d10c      	bne.n	524 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     50a:	2a00      	cmp	r2, #0
     50c:	dd0d      	ble.n	52a <_read+0x2e>
     50e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     510:	4e09      	ldr	r6, [pc, #36]	; (538 <_read+0x3c>)
     512:	4d0a      	ldr	r5, [pc, #40]	; (53c <_read+0x40>)
     514:	6830      	ldr	r0, [r6, #0]
     516:	1c21      	adds	r1, r4, #0
     518:	682b      	ldr	r3, [r5, #0]
     51a:	4798      	blx	r3
		ptr++;
     51c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     51e:	42bc      	cmp	r4, r7
     520:	d1f8      	bne.n	514 <_read+0x18>
     522:	e004      	b.n	52e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     524:	2001      	movs	r0, #1
     526:	4240      	negs	r0, r0
     528:	e002      	b.n	530 <_read+0x34>
	}

	for (; len > 0; --len) {
     52a:	2000      	movs	r0, #0
     52c:	e000      	b.n	530 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     52e:	4640      	mov	r0, r8
	}
	return nChars;
}
     530:	bc04      	pop	{r2}
     532:	4690      	mov	r8, r2
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	2000010c 	.word	0x2000010c
     53c:	20000104 	.word	0x20000104

00000540 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	4647      	mov	r7, r8
     544:	b480      	push	{r7}
     546:	1c0e      	adds	r6, r1, #0
     548:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     54a:	3801      	subs	r0, #1
     54c:	2802      	cmp	r0, #2
     54e:	d810      	bhi.n	572 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     550:	2a00      	cmp	r2, #0
     552:	d011      	beq.n	578 <_write+0x38>
     554:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     556:	4b0d      	ldr	r3, [pc, #52]	; (58c <_write+0x4c>)
     558:	4698      	mov	r8, r3
     55a:	4f0d      	ldr	r7, [pc, #52]	; (590 <_write+0x50>)
     55c:	4643      	mov	r3, r8
     55e:	6818      	ldr	r0, [r3, #0]
     560:	5d31      	ldrb	r1, [r6, r4]
     562:	683b      	ldr	r3, [r7, #0]
     564:	4798      	blx	r3
     566:	2800      	cmp	r0, #0
     568:	db08      	blt.n	57c <_write+0x3c>
			return -1;
		}
		++nChars;
     56a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     56c:	42a5      	cmp	r5, r4
     56e:	d1f5      	bne.n	55c <_write+0x1c>
     570:	e007      	b.n	582 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     572:	2001      	movs	r0, #1
     574:	4240      	negs	r0, r0
     576:	e005      	b.n	584 <_write+0x44>
	}

	for (; len != 0; --len) {
     578:	2000      	movs	r0, #0
     57a:	e003      	b.n	584 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     57c:	2001      	movs	r0, #1
     57e:	4240      	negs	r0, r0
     580:	e000      	b.n	584 <_write+0x44>
		}
		++nChars;
     582:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     584:	bc04      	pop	{r2}
     586:	4690      	mov	r8, r2
     588:	bdf0      	pop	{r4, r5, r6, r7, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	2000010c 	.word	0x2000010c
     590:	20000108 	.word	0x20000108

00000594 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	465f      	mov	r7, fp
     598:	4656      	mov	r6, sl
     59a:	464d      	mov	r5, r9
     59c:	4644      	mov	r4, r8
     59e:	b4f0      	push	{r4, r5, r6, r7}
     5a0:	b091      	sub	sp, #68	; 0x44
     5a2:	1c05      	adds	r5, r0, #0
     5a4:	1c0c      	adds	r4, r1, #0
     5a6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5a8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5aa:	1c08      	adds	r0, r1, #0
     5ac:	4bad      	ldr	r3, [pc, #692]	; (864 <usart_init+0x2d0>)
     5ae:	4798      	blx	r3
     5b0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5b2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5b4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5b6:	07d9      	lsls	r1, r3, #31
     5b8:	d500      	bpl.n	5bc <usart_init+0x28>
     5ba:	e14b      	b.n	854 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5bc:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     5be:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5c0:	079f      	lsls	r7, r3, #30
     5c2:	d500      	bpl.n	5c6 <usart_init+0x32>
     5c4:	e146      	b.n	854 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5c6:	4ba8      	ldr	r3, [pc, #672]	; (868 <usart_init+0x2d4>)
     5c8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5ca:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5cc:	2701      	movs	r7, #1
     5ce:	408f      	lsls	r7, r1
     5d0:	1c39      	adds	r1, r7, #0
     5d2:	4301      	orrs	r1, r0
     5d4:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5d6:	a90f      	add	r1, sp, #60	; 0x3c
     5d8:	272d      	movs	r7, #45	; 0x2d
     5da:	5df3      	ldrb	r3, [r6, r7]
     5dc:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5de:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5e0:	b2d2      	uxtb	r2, r2
     5e2:	4690      	mov	r8, r2
     5e4:	1c10      	adds	r0, r2, #0
     5e6:	4ba1      	ldr	r3, [pc, #644]	; (86c <usart_init+0x2d8>)
     5e8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5ea:	4640      	mov	r0, r8
     5ec:	4ba0      	ldr	r3, [pc, #640]	; (870 <usart_init+0x2dc>)
     5ee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5f0:	5df0      	ldrb	r0, [r6, r7]
     5f2:	2100      	movs	r1, #0
     5f4:	4b9f      	ldr	r3, [pc, #636]	; (874 <usart_init+0x2e0>)
     5f6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     5f8:	7af3      	ldrb	r3, [r6, #11]
     5fa:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     5fc:	2324      	movs	r3, #36	; 0x24
     5fe:	5cf3      	ldrb	r3, [r6, r3]
     600:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     602:	2325      	movs	r3, #37	; 0x25
     604:	5cf3      	ldrb	r3, [r6, r3]
     606:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     608:	7ef3      	ldrb	r3, [r6, #27]
     60a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     60c:	7f33      	ldrb	r3, [r6, #28]
     60e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     610:	6829      	ldr	r1, [r5, #0]
     612:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     614:	1c08      	adds	r0, r1, #0
     616:	4b93      	ldr	r3, [pc, #588]	; (864 <usart_init+0x2d0>)
     618:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     61a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     61c:	2200      	movs	r2, #0
     61e:	466b      	mov	r3, sp
     620:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     622:	8a32      	ldrh	r2, [r6, #16]
     624:	9202      	str	r2, [sp, #8]
     626:	2380      	movs	r3, #128	; 0x80
     628:	01db      	lsls	r3, r3, #7
     62a:	429a      	cmp	r2, r3
     62c:	d021      	beq.n	672 <usart_init+0xde>
     62e:	2380      	movs	r3, #128	; 0x80
     630:	01db      	lsls	r3, r3, #7
     632:	429a      	cmp	r2, r3
     634:	d804      	bhi.n	640 <usart_init+0xac>
     636:	2380      	movs	r3, #128	; 0x80
     638:	019b      	lsls	r3, r3, #6
     63a:	429a      	cmp	r2, r3
     63c:	d011      	beq.n	662 <usart_init+0xce>
     63e:	e008      	b.n	652 <usart_init+0xbe>
     640:	23c0      	movs	r3, #192	; 0xc0
     642:	01db      	lsls	r3, r3, #7
     644:	9f02      	ldr	r7, [sp, #8]
     646:	429f      	cmp	r7, r3
     648:	d00f      	beq.n	66a <usart_init+0xd6>
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	021b      	lsls	r3, r3, #8
     64e:	429f      	cmp	r7, r3
     650:	d003      	beq.n	65a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     652:	2710      	movs	r7, #16
     654:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     656:	2700      	movs	r7, #0
     658:	e00e      	b.n	678 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     65a:	2703      	movs	r7, #3
     65c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     65e:	2700      	movs	r7, #0
     660:	e00a      	b.n	678 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     662:	2710      	movs	r7, #16
     664:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     666:	2701      	movs	r7, #1
     668:	e006      	b.n	678 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     66a:	2708      	movs	r7, #8
     66c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     66e:	2701      	movs	r7, #1
     670:	e002      	b.n	678 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     672:	2708      	movs	r7, #8
     674:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     676:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     678:	6831      	ldr	r1, [r6, #0]
     67a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     67c:	68f2      	ldr	r2, [r6, #12]
     67e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     680:	6973      	ldr	r3, [r6, #20]
     682:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     684:	7e31      	ldrb	r1, [r6, #24]
     686:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     688:	2326      	movs	r3, #38	; 0x26
     68a:	5cf3      	ldrb	r3, [r6, r3]
     68c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     68e:	6873      	ldr	r3, [r6, #4]
     690:	2b00      	cmp	r3, #0
     692:	d013      	beq.n	6bc <usart_init+0x128>
     694:	2280      	movs	r2, #128	; 0x80
     696:	0552      	lsls	r2, r2, #21
     698:	4293      	cmp	r3, r2
     69a:	d12e      	bne.n	6fa <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     69c:	2327      	movs	r3, #39	; 0x27
     69e:	5cf3      	ldrb	r3, [r6, r3]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d12e      	bne.n	702 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6a4:	6a37      	ldr	r7, [r6, #32]
     6a6:	b2c0      	uxtb	r0, r0
     6a8:	4b73      	ldr	r3, [pc, #460]	; (878 <usart_init+0x2e4>)
     6aa:	4798      	blx	r3
     6ac:	1c01      	adds	r1, r0, #0
     6ae:	1c38      	adds	r0, r7, #0
     6b0:	466a      	mov	r2, sp
     6b2:	3226      	adds	r2, #38	; 0x26
     6b4:	4b71      	ldr	r3, [pc, #452]	; (87c <usart_init+0x2e8>)
     6b6:	4798      	blx	r3
     6b8:	1c03      	adds	r3, r0, #0
     6ba:	e01f      	b.n	6fc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     6bc:	2327      	movs	r3, #39	; 0x27
     6be:	5cf3      	ldrb	r3, [r6, r3]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d00a      	beq.n	6da <usart_init+0x146>
				status_code =
     6c4:	9a06      	ldr	r2, [sp, #24]
     6c6:	9200      	str	r2, [sp, #0]
     6c8:	6a30      	ldr	r0, [r6, #32]
     6ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6cc:	466a      	mov	r2, sp
     6ce:	3226      	adds	r2, #38	; 0x26
     6d0:	1c3b      	adds	r3, r7, #0
     6d2:	4f6b      	ldr	r7, [pc, #428]	; (880 <usart_init+0x2ec>)
     6d4:	47b8      	blx	r7
     6d6:	1c03      	adds	r3, r0, #0
     6d8:	e010      	b.n	6fc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     6da:	6a31      	ldr	r1, [r6, #32]
     6dc:	9107      	str	r1, [sp, #28]
     6de:	b2c0      	uxtb	r0, r0
     6e0:	4b65      	ldr	r3, [pc, #404]	; (878 <usart_init+0x2e4>)
     6e2:	4798      	blx	r3
     6e4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     6e6:	9a06      	ldr	r2, [sp, #24]
     6e8:	9200      	str	r2, [sp, #0]
     6ea:	9807      	ldr	r0, [sp, #28]
     6ec:	466a      	mov	r2, sp
     6ee:	3226      	adds	r2, #38	; 0x26
     6f0:	1c3b      	adds	r3, r7, #0
     6f2:	4f63      	ldr	r7, [pc, #396]	; (880 <usart_init+0x2ec>)
     6f4:	47b8      	blx	r7
     6f6:	1c03      	adds	r3, r0, #0
     6f8:	e000      	b.n	6fc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     6fa:	2300      	movs	r3, #0
     6fc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     6fe:	d000      	beq.n	702 <usart_init+0x16e>
     700:	e0a8      	b.n	854 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     702:	7e73      	ldrb	r3, [r6, #25]
     704:	2b00      	cmp	r3, #0
     706:	d002      	beq.n	70e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     708:	7eb3      	ldrb	r3, [r6, #26]
     70a:	4641      	mov	r1, r8
     70c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     70e:	682a      	ldr	r2, [r5, #0]
     710:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     712:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     714:	2b00      	cmp	r3, #0
     716:	d1fc      	bne.n	712 <usart_init+0x17e>
     718:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     71a:	466b      	mov	r3, sp
     71c:	3326      	adds	r3, #38	; 0x26
     71e:	881b      	ldrh	r3, [r3, #0]
     720:	4642      	mov	r2, r8
     722:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     724:	464b      	mov	r3, r9
     726:	9f03      	ldr	r7, [sp, #12]
     728:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     72a:	9f04      	ldr	r7, [sp, #16]
     72c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     72e:	6871      	ldr	r1, [r6, #4]
     730:	430b      	orrs	r3, r1
		config->sample_rate |
     732:	9f02      	ldr	r7, [sp, #8]
     734:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     736:	4652      	mov	r2, sl
     738:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     73a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     73c:	4659      	mov	r1, fp
     73e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     740:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     742:	2327      	movs	r3, #39	; 0x27
     744:	5cf3      	ldrb	r3, [r6, r3]
     746:	2b00      	cmp	r3, #0
     748:	d101      	bne.n	74e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     74a:	2304      	movs	r3, #4
     74c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     74e:	7e71      	ldrb	r1, [r6, #25]
     750:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     752:	7f33      	ldrb	r3, [r6, #28]
     754:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     756:	4319      	orrs	r1, r3
     758:	7af2      	ldrb	r2, [r6, #11]
     75a:	7ab3      	ldrb	r3, [r6, #10]
     75c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     75e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     760:	7f73      	ldrb	r3, [r6, #29]
     762:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     764:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     766:	2324      	movs	r3, #36	; 0x24
     768:	5cf3      	ldrb	r3, [r6, r3]
     76a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     76c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     76e:	2325      	movs	r3, #37	; 0x25
     770:	5cf3      	ldrb	r3, [r6, r3]
     772:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     774:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     776:	8933      	ldrh	r3, [r6, #8]
     778:	2bff      	cmp	r3, #255	; 0xff
     77a:	d00b      	beq.n	794 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     77c:	7ef2      	ldrb	r2, [r6, #27]
     77e:	2a00      	cmp	r2, #0
     780:	d003      	beq.n	78a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     782:	22a0      	movs	r2, #160	; 0xa0
     784:	04d2      	lsls	r2, r2, #19
     786:	4317      	orrs	r7, r2
     788:	e002      	b.n	790 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0452      	lsls	r2, r2, #17
     78e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     790:	4319      	orrs	r1, r3
     792:	e005      	b.n	7a0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     794:	7ef3      	ldrb	r3, [r6, #27]
     796:	2b00      	cmp	r3, #0
     798:	d002      	beq.n	7a0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     79a:	2380      	movs	r3, #128	; 0x80
     79c:	04db      	lsls	r3, r3, #19
     79e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     7a0:	232c      	movs	r3, #44	; 0x2c
     7a2:	5cf3      	ldrb	r3, [r6, r3]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d103      	bne.n	7b0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7a8:	4b36      	ldr	r3, [pc, #216]	; (884 <usart_init+0x2f0>)
     7aa:	789b      	ldrb	r3, [r3, #2]
     7ac:	079a      	lsls	r2, r3, #30
     7ae:	d501      	bpl.n	7b4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7b0:	2380      	movs	r3, #128	; 0x80
     7b2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7b4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7b6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7b8:	2b00      	cmp	r3, #0
     7ba:	d1fc      	bne.n	7b6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     7bc:	4643      	mov	r3, r8
     7be:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7c0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7c2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d1fc      	bne.n	7c2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     7c8:	4641      	mov	r1, r8
     7ca:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7cc:	ab0e      	add	r3, sp, #56	; 0x38
     7ce:	2280      	movs	r2, #128	; 0x80
     7d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d2:	2200      	movs	r2, #0
     7d4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7d6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7d8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     7da:	6b32      	ldr	r2, [r6, #48]	; 0x30
     7dc:	920a      	str	r2, [sp, #40]	; 0x28
     7de:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7e0:	930b      	str	r3, [sp, #44]	; 0x2c
     7e2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     7e4:	970c      	str	r7, [sp, #48]	; 0x30
     7e6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     7e8:	960d      	str	r6, [sp, #52]	; 0x34
     7ea:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7ec:	ae0e      	add	r6, sp, #56	; 0x38
     7ee:	b2f9      	uxtb	r1, r7
     7f0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7f2:	aa0a      	add	r2, sp, #40	; 0x28
     7f4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7f6:	2800      	cmp	r0, #0
     7f8:	d102      	bne.n	800 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7fa:	1c20      	adds	r0, r4, #0
     7fc:	4a22      	ldr	r2, [pc, #136]	; (888 <usart_init+0x2f4>)
     7fe:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     800:	1c43      	adds	r3, r0, #1
     802:	d005      	beq.n	810 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     804:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     806:	0c00      	lsrs	r0, r0, #16
     808:	b2c0      	uxtb	r0, r0
     80a:	1c31      	adds	r1, r6, #0
     80c:	4a1f      	ldr	r2, [pc, #124]	; (88c <usart_init+0x2f8>)
     80e:	4790      	blx	r2
     810:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     812:	2f04      	cmp	r7, #4
     814:	d1eb      	bne.n	7ee <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     816:	2300      	movs	r3, #0
     818:	60eb      	str	r3, [r5, #12]
     81a:	612b      	str	r3, [r5, #16]
     81c:	616b      	str	r3, [r5, #20]
     81e:	61ab      	str	r3, [r5, #24]
     820:	61eb      	str	r3, [r5, #28]
     822:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     824:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     826:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     828:	2200      	movs	r2, #0
     82a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     82c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     82e:	2330      	movs	r3, #48	; 0x30
     830:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     832:	2331      	movs	r3, #49	; 0x31
     834:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     836:	2332      	movs	r3, #50	; 0x32
     838:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     83a:	2333      	movs	r3, #51	; 0x33
     83c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     83e:	6828      	ldr	r0, [r5, #0]
     840:	4b08      	ldr	r3, [pc, #32]	; (864 <usart_init+0x2d0>)
     842:	4798      	blx	r3
     844:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     846:	4912      	ldr	r1, [pc, #72]	; (890 <usart_init+0x2fc>)
     848:	4b12      	ldr	r3, [pc, #72]	; (894 <usart_init+0x300>)
     84a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     84c:	00a4      	lsls	r4, r4, #2
     84e:	4b12      	ldr	r3, [pc, #72]	; (898 <usart_init+0x304>)
     850:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     852:	2000      	movs	r0, #0
}
     854:	b011      	add	sp, #68	; 0x44
     856:	bc3c      	pop	{r2, r3, r4, r5}
     858:	4690      	mov	r8, r2
     85a:	4699      	mov	r9, r3
     85c:	46a2      	mov	sl, r4
     85e:	46ab      	mov	fp, r5
     860:	bdf0      	pop	{r4, r5, r6, r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	000004c1 	.word	0x000004c1
     868:	40000400 	.word	0x40000400
     86c:	000014e9 	.word	0x000014e9
     870:	0000145d 	.word	0x0000145d
     874:	000002e9 	.word	0x000002e9
     878:	00001505 	.word	0x00001505
     87c:	00000111 	.word	0x00000111
     880:	00000139 	.word	0x00000139
     884:	41002000 	.word	0x41002000
     888:	00000339 	.word	0x00000339
     88c:	000015c5 	.word	0x000015c5
     890:	00000941 	.word	0x00000941
     894:	00000ae1 	.word	0x00000ae1
     898:	20000110 	.word	0x20000110

0000089c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     89c:	b510      	push	{r4, lr}
     89e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8a2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     8a4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8a6:	2c00      	cmp	r4, #0
     8a8:	d00d      	beq.n	8c6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8aa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     8ac:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     8ae:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8b0:	2a00      	cmp	r2, #0
     8b2:	d108      	bne.n	8c6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8b4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8b6:	2a00      	cmp	r2, #0
     8b8:	d1fc      	bne.n	8b4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     8ba:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8bc:	2102      	movs	r1, #2
     8be:	7e1a      	ldrb	r2, [r3, #24]
     8c0:	420a      	tst	r2, r1
     8c2:	d0fc      	beq.n	8be <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     8c4:	2000      	movs	r0, #0
}
     8c6:	bd10      	pop	{r4, pc}

000008c8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     8c8:	b510      	push	{r4, lr}
     8ca:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8cc:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8ce:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     8d0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8d2:	2a00      	cmp	r2, #0
     8d4:	d033      	beq.n	93e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     8d8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     8da:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8dc:	2b00      	cmp	r3, #0
     8de:	d12e      	bne.n	93e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     8e0:	7e23      	ldrb	r3, [r4, #24]
     8e2:	075a      	lsls	r2, r3, #29
     8e4:	d52b      	bpl.n	93e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8e6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8e8:	2b00      	cmp	r3, #0
     8ea:	d1fc      	bne.n	8e6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     8ec:	8b63      	ldrh	r3, [r4, #26]
     8ee:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     8f0:	069a      	lsls	r2, r3, #26
     8f2:	d021      	beq.n	938 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     8f4:	079a      	lsls	r2, r3, #30
     8f6:	d503      	bpl.n	900 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     8f8:	2302      	movs	r3, #2
     8fa:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     8fc:	201a      	movs	r0, #26
     8fe:	e01e      	b.n	93e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     900:	075a      	lsls	r2, r3, #29
     902:	d503      	bpl.n	90c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     904:	2304      	movs	r3, #4
     906:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     908:	201e      	movs	r0, #30
     90a:	e018      	b.n	93e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     90c:	07da      	lsls	r2, r3, #31
     90e:	d503      	bpl.n	918 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     910:	2301      	movs	r3, #1
     912:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     914:	2013      	movs	r0, #19
     916:	e012      	b.n	93e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     918:	06da      	lsls	r2, r3, #27
     91a:	d505      	bpl.n	928 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     91c:	8b62      	ldrh	r2, [r4, #26]
     91e:	2310      	movs	r3, #16
     920:	4313      	orrs	r3, r2
     922:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     924:	2042      	movs	r0, #66	; 0x42
     926:	e00a      	b.n	93e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     928:	069a      	lsls	r2, r3, #26
     92a:	d505      	bpl.n	938 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     92c:	8b62      	ldrh	r2, [r4, #26]
     92e:	2320      	movs	r3, #32
     930:	4313      	orrs	r3, r2
     932:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     934:	2041      	movs	r0, #65	; 0x41
     936:	e002      	b.n	93e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     938:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     93a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     93c:	2000      	movs	r0, #0
}
     93e:	bd10      	pop	{r4, pc}

00000940 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     942:	0080      	lsls	r0, r0, #2
     944:	4b64      	ldr	r3, [pc, #400]	; (ad8 <_usart_interrupt_handler+0x198>)
     946:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     948:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     94a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fc      	bne.n	94a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     950:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     952:	7da6      	ldrb	r6, [r4, #22]
     954:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     956:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     958:	5ceb      	ldrb	r3, [r5, r3]
     95a:	2230      	movs	r2, #48	; 0x30
     95c:	5caf      	ldrb	r7, [r5, r2]
     95e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     960:	07f1      	lsls	r1, r6, #31
     962:	d520      	bpl.n	9a6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     964:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     966:	b29b      	uxth	r3, r3
     968:	2b00      	cmp	r3, #0
     96a:	d01a      	beq.n	9a2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     96c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     96e:	781a      	ldrb	r2, [r3, #0]
     970:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     972:	1c59      	adds	r1, r3, #1
     974:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     976:	7969      	ldrb	r1, [r5, #5]
     978:	2901      	cmp	r1, #1
     97a:	d104      	bne.n	986 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     97c:	7859      	ldrb	r1, [r3, #1]
     97e:	0209      	lsls	r1, r1, #8
     980:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     982:	3302      	adds	r3, #2
     984:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     986:	05d3      	lsls	r3, r2, #23
     988:	0ddb      	lsrs	r3, r3, #23
     98a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     98c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     98e:	3b01      	subs	r3, #1
     990:	b29b      	uxth	r3, r3
     992:	85eb      	strh	r3, [r5, #46]	; 0x2e
     994:	2b00      	cmp	r3, #0
     996:	d106      	bne.n	9a6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     998:	2301      	movs	r3, #1
     99a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     99c:	2302      	movs	r3, #2
     99e:	75a3      	strb	r3, [r4, #22]
     9a0:	e001      	b.n	9a6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9a2:	2301      	movs	r3, #1
     9a4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9a6:	07b2      	lsls	r2, r6, #30
     9a8:	d509      	bpl.n	9be <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9aa:	2302      	movs	r3, #2
     9ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9ae:	2200      	movs	r2, #0
     9b0:	2333      	movs	r3, #51	; 0x33
     9b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9b4:	07fb      	lsls	r3, r7, #31
     9b6:	d502      	bpl.n	9be <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     9b8:	1c28      	adds	r0, r5, #0
     9ba:	68e9      	ldr	r1, [r5, #12]
     9bc:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9be:	0772      	lsls	r2, r6, #29
     9c0:	d56a      	bpl.n	a98 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     9c2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9c4:	b29b      	uxth	r3, r3
     9c6:	2b00      	cmp	r3, #0
     9c8:	d064      	beq.n	a94 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9ca:	8b63      	ldrh	r3, [r4, #26]
     9cc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     9ce:	0719      	lsls	r1, r3, #28
     9d0:	d402      	bmi.n	9d8 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9d2:	223f      	movs	r2, #63	; 0x3f
     9d4:	4013      	ands	r3, r2
     9d6:	e001      	b.n	9dc <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     9d8:	2237      	movs	r2, #55	; 0x37
     9da:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9dc:	2b00      	cmp	r3, #0
     9de:	d037      	beq.n	a50 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9e0:	079a      	lsls	r2, r3, #30
     9e2:	d507      	bpl.n	9f4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9e4:	221a      	movs	r2, #26
     9e6:	2332      	movs	r3, #50	; 0x32
     9e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9ea:	8b62      	ldrh	r2, [r4, #26]
     9ec:	2302      	movs	r3, #2
     9ee:	4313      	orrs	r3, r2
     9f0:	8363      	strh	r3, [r4, #26]
     9f2:	e027      	b.n	a44 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9f4:	0759      	lsls	r1, r3, #29
     9f6:	d507      	bpl.n	a08 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     9f8:	221e      	movs	r2, #30
     9fa:	2332      	movs	r3, #50	; 0x32
     9fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     9fe:	8b62      	ldrh	r2, [r4, #26]
     a00:	2304      	movs	r3, #4
     a02:	4313      	orrs	r3, r2
     a04:	8363      	strh	r3, [r4, #26]
     a06:	e01d      	b.n	a44 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a08:	07da      	lsls	r2, r3, #31
     a0a:	d507      	bpl.n	a1c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a0c:	2213      	movs	r2, #19
     a0e:	2332      	movs	r3, #50	; 0x32
     a10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a12:	8b62      	ldrh	r2, [r4, #26]
     a14:	2301      	movs	r3, #1
     a16:	4313      	orrs	r3, r2
     a18:	8363      	strh	r3, [r4, #26]
     a1a:	e013      	b.n	a44 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a1c:	06d9      	lsls	r1, r3, #27
     a1e:	d507      	bpl.n	a30 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     a20:	2242      	movs	r2, #66	; 0x42
     a22:	2332      	movs	r3, #50	; 0x32
     a24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a26:	8b62      	ldrh	r2, [r4, #26]
     a28:	2310      	movs	r3, #16
     a2a:	4313      	orrs	r3, r2
     a2c:	8363      	strh	r3, [r4, #26]
     a2e:	e009      	b.n	a44 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a30:	2220      	movs	r2, #32
     a32:	421a      	tst	r2, r3
     a34:	d006      	beq.n	a44 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a36:	2241      	movs	r2, #65	; 0x41
     a38:	2332      	movs	r3, #50	; 0x32
     a3a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a3c:	8b62      	ldrh	r2, [r4, #26]
     a3e:	2320      	movs	r3, #32
     a40:	4313      	orrs	r3, r2
     a42:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a44:	077a      	lsls	r2, r7, #29
     a46:	d527      	bpl.n	a98 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a48:	1c28      	adds	r0, r5, #0
     a4a:	696b      	ldr	r3, [r5, #20]
     a4c:	4798      	blx	r3
     a4e:	e023      	b.n	a98 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a52:	05d2      	lsls	r2, r2, #23
     a54:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a56:	b2d3      	uxtb	r3, r2
     a58:	6a69      	ldr	r1, [r5, #36]	; 0x24
     a5a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a5e:	1c59      	adds	r1, r3, #1
     a60:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a62:	7969      	ldrb	r1, [r5, #5]
     a64:	2901      	cmp	r1, #1
     a66:	d104      	bne.n	a72 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a68:	0a12      	lsrs	r2, r2, #8
     a6a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     a6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a6e:	3301      	adds	r3, #1
     a70:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a72:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a74:	3b01      	subs	r3, #1
     a76:	b29b      	uxth	r3, r3
     a78:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a7a:	2b00      	cmp	r3, #0
     a7c:	d10c      	bne.n	a98 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a7e:	2304      	movs	r3, #4
     a80:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     a82:	2200      	movs	r2, #0
     a84:	2332      	movs	r3, #50	; 0x32
     a86:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     a88:	07ba      	lsls	r2, r7, #30
     a8a:	d505      	bpl.n	a98 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a8c:	1c28      	adds	r0, r5, #0
     a8e:	692b      	ldr	r3, [r5, #16]
     a90:	4798      	blx	r3
     a92:	e001      	b.n	a98 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a94:	2304      	movs	r3, #4
     a96:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     a98:	06f1      	lsls	r1, r6, #27
     a9a:	d507      	bpl.n	aac <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     a9c:	2310      	movs	r3, #16
     a9e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     aa0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     aa2:	06fa      	lsls	r2, r7, #27
     aa4:	d502      	bpl.n	aac <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     aa6:	1c28      	adds	r0, r5, #0
     aa8:	69eb      	ldr	r3, [r5, #28]
     aaa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     aac:	06b1      	lsls	r1, r6, #26
     aae:	d507      	bpl.n	ac0 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ab0:	2320      	movs	r3, #32
     ab2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ab4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ab6:	073a      	lsls	r2, r7, #28
     ab8:	d502      	bpl.n	ac0 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     aba:	1c28      	adds	r0, r5, #0
     abc:	69ab      	ldr	r3, [r5, #24]
     abe:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ac0:	0731      	lsls	r1, r6, #28
     ac2:	d507      	bpl.n	ad4 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ac4:	2308      	movs	r3, #8
     ac6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ac8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     aca:	06ba      	lsls	r2, r7, #26
     acc:	d502      	bpl.n	ad4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ace:	6a2b      	ldr	r3, [r5, #32]
     ad0:	1c28      	adds	r0, r5, #0
     ad2:	4798      	blx	r3
		}
	}
#endif
}
     ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	20000110 	.word	0x20000110

00000adc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     adc:	4770      	bx	lr
     ade:	46c0      	nop			; (mov r8, r8)

00000ae0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     ae2:	4b0a      	ldr	r3, [pc, #40]	; (b0c <_sercom_set_handler+0x2c>)
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d10c      	bne.n	b04 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     aea:	4f09      	ldr	r7, [pc, #36]	; (b10 <_sercom_set_handler+0x30>)
     aec:	4e09      	ldr	r6, [pc, #36]	; (b14 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     aee:	4d0a      	ldr	r5, [pc, #40]	; (b18 <_sercom_set_handler+0x38>)
     af0:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     af2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     af4:	195a      	adds	r2, r3, r5
     af6:	6014      	str	r4, [r2, #0]
     af8:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     afa:	2b18      	cmp	r3, #24
     afc:	d1f9      	bne.n	af2 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     afe:	2201      	movs	r2, #1
     b00:	4b02      	ldr	r3, [pc, #8]	; (b0c <_sercom_set_handler+0x2c>)
     b02:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b04:	0080      	lsls	r0, r0, #2
     b06:	4b02      	ldr	r3, [pc, #8]	; (b10 <_sercom_set_handler+0x30>)
     b08:	50c1      	str	r1, [r0, r3]
}
     b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0c:	20000088 	.word	0x20000088
     b10:	2000008c 	.word	0x2000008c
     b14:	00000add 	.word	0x00000add
     b18:	20000110 	.word	0x20000110

00000b1c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b1c:	b510      	push	{r4, lr}
     b1e:	b082      	sub	sp, #8
     b20:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b22:	4668      	mov	r0, sp
     b24:	4905      	ldr	r1, [pc, #20]	; (b3c <_sercom_get_interrupt_vector+0x20>)
     b26:	2206      	movs	r2, #6
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <_sercom_get_interrupt_vector+0x24>)
     b2a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b2c:	1c20      	adds	r0, r4, #0
     b2e:	4b05      	ldr	r3, [pc, #20]	; (b44 <_sercom_get_interrupt_vector+0x28>)
     b30:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b32:	466b      	mov	r3, sp
     b34:	5618      	ldrsb	r0, [r3, r0]
}
     b36:	b002      	add	sp, #8
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	000029d0 	.word	0x000029d0
     b40:	00001a91 	.word	0x00001a91
     b44:	000004c1 	.word	0x000004c1

00000b48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b48:	b508      	push	{r3, lr}
     b4a:	4b02      	ldr	r3, [pc, #8]	; (b54 <SERCOM0_Handler+0xc>)
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	2000      	movs	r0, #0
     b50:	4798      	blx	r3
     b52:	bd08      	pop	{r3, pc}
     b54:	2000008c 	.word	0x2000008c

00000b58 <SERCOM1_Handler>:
     b58:	b508      	push	{r3, lr}
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <SERCOM1_Handler+0xc>)
     b5c:	685b      	ldr	r3, [r3, #4]
     b5e:	2001      	movs	r0, #1
     b60:	4798      	blx	r3
     b62:	bd08      	pop	{r3, pc}
     b64:	2000008c 	.word	0x2000008c

00000b68 <SERCOM2_Handler>:
     b68:	b508      	push	{r3, lr}
     b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <SERCOM2_Handler+0xc>)
     b6c:	689b      	ldr	r3, [r3, #8]
     b6e:	2002      	movs	r0, #2
     b70:	4798      	blx	r3
     b72:	bd08      	pop	{r3, pc}
     b74:	2000008c 	.word	0x2000008c

00000b78 <SERCOM3_Handler>:
     b78:	b508      	push	{r3, lr}
     b7a:	4b02      	ldr	r3, [pc, #8]	; (b84 <SERCOM3_Handler+0xc>)
     b7c:	68db      	ldr	r3, [r3, #12]
     b7e:	2003      	movs	r0, #3
     b80:	4798      	blx	r3
     b82:	bd08      	pop	{r3, pc}
     b84:	2000008c 	.word	0x2000008c

00000b88 <SERCOM4_Handler>:
     b88:	b508      	push	{r3, lr}
     b8a:	4b02      	ldr	r3, [pc, #8]	; (b94 <SERCOM4_Handler+0xc>)
     b8c:	691b      	ldr	r3, [r3, #16]
     b8e:	2004      	movs	r0, #4
     b90:	4798      	blx	r3
     b92:	bd08      	pop	{r3, pc}
     b94:	2000008c 	.word	0x2000008c

00000b98 <SERCOM5_Handler>:
     b98:	b508      	push	{r3, lr}
     b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <SERCOM5_Handler+0xc>)
     b9c:	695b      	ldr	r3, [r3, #20]
     b9e:	2005      	movs	r0, #5
     ba0:	4798      	blx	r3
     ba2:	bd08      	pop	{r3, pc}
     ba4:	2000008c 	.word	0x2000008c

00000ba8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ba8:	4b0c      	ldr	r3, [pc, #48]	; (bdc <cpu_irq_enter_critical+0x34>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	2b00      	cmp	r3, #0
     bae:	d110      	bne.n	bd2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bb0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bb4:	2b00      	cmp	r3, #0
     bb6:	d109      	bne.n	bcc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     bb8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bbe:	2200      	movs	r2, #0
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <cpu_irq_enter_critical+0x38>)
     bc2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bc4:	2201      	movs	r2, #1
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <cpu_irq_enter_critical+0x3c>)
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	e002      	b.n	bd2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bcc:	2200      	movs	r2, #0
     bce:	4b05      	ldr	r3, [pc, #20]	; (be4 <cpu_irq_enter_critical+0x3c>)
     bd0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bd2:	4b02      	ldr	r3, [pc, #8]	; (bdc <cpu_irq_enter_critical+0x34>)
     bd4:	681a      	ldr	r2, [r3, #0]
     bd6:	3201      	adds	r2, #1
     bd8:	601a      	str	r2, [r3, #0]
}
     bda:	4770      	bx	lr
     bdc:	200000a4 	.word	0x200000a4
     be0:	20000000 	.word	0x20000000
     be4:	200000a8 	.word	0x200000a8

00000be8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     be8:	4b08      	ldr	r3, [pc, #32]	; (c0c <cpu_irq_leave_critical+0x24>)
     bea:	681a      	ldr	r2, [r3, #0]
     bec:	3a01      	subs	r2, #1
     bee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d109      	bne.n	c0a <cpu_irq_leave_critical+0x22>
     bf6:	4b06      	ldr	r3, [pc, #24]	; (c10 <cpu_irq_leave_critical+0x28>)
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d005      	beq.n	c0a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bfe:	2201      	movs	r2, #1
     c00:	4b04      	ldr	r3, [pc, #16]	; (c14 <cpu_irq_leave_critical+0x2c>)
     c02:	701a      	strb	r2, [r3, #0]
     c04:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c08:	b662      	cpsie	i
	}
}
     c0a:	4770      	bx	lr
     c0c:	200000a4 	.word	0x200000a4
     c10:	200000a8 	.word	0x200000a8
     c14:	20000000 	.word	0x20000000

00000c18 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c18:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c1c:	ac01      	add	r4, sp, #4
     c1e:	2501      	movs	r5, #1
     c20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c22:	2700      	movs	r7, #0
     c24:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c26:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c28:	203e      	movs	r0, #62	; 0x3e
     c2a:	1c21      	adds	r1, r4, #0
     c2c:	4e06      	ldr	r6, [pc, #24]	; (c48 <system_board_init+0x30>)
     c2e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c30:	2280      	movs	r2, #128	; 0x80
     c32:	05d2      	lsls	r2, r2, #23
     c34:	4b05      	ldr	r3, [pc, #20]	; (c4c <system_board_init+0x34>)
     c36:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c38:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c3a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c3c:	200f      	movs	r0, #15
     c3e:	1c21      	adds	r1, r4, #0
     c40:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c42:	b003      	add	sp, #12
     c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00001091 	.word	0x00001091
     c4c:	41004480 	.word	0x41004480

00000c50 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     c50:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     c52:	2200      	movs	r2, #0
     c54:	2300      	movs	r3, #0
     c56:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     c58:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     c5a:	2100      	movs	r1, #0
     c5c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     c5e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     c60:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     c62:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     c64:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     c66:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     c68:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     c6a:	24c0      	movs	r4, #192	; 0xc0
     c6c:	0164      	lsls	r4, r4, #5
     c6e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     c70:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     c72:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     c74:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     c76:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     c78:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     c7a:	242a      	movs	r4, #42	; 0x2a
     c7c:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     c7e:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     c80:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     c82:	2424      	movs	r4, #36	; 0x24
     c84:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     c86:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     c88:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     c8a:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     c8c:	232b      	movs	r3, #43	; 0x2b
     c8e:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     c90:	232c      	movs	r3, #44	; 0x2c
     c92:	54c1      	strb	r1, [r0, r3]
}
     c94:	bd10      	pop	{r4, pc}
     c96:	46c0      	nop			; (mov r8, r8)

00000c98 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	465f      	mov	r7, fp
     c9c:	4656      	mov	r6, sl
     c9e:	464d      	mov	r5, r9
     ca0:	4644      	mov	r4, r8
     ca2:	b4f0      	push	{r4, r5, r6, r7}
     ca4:	b099      	sub	sp, #100	; 0x64
     ca6:	1c06      	adds	r6, r0, #0
     ca8:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     caa:	6001      	str	r1, [r0, #0]
     cac:	4bb5      	ldr	r3, [pc, #724]	; (f84 <adc_init+0x2ec>)
     cae:	6a18      	ldr	r0, [r3, #32]
     cb0:	2280      	movs	r2, #128	; 0x80
     cb2:	0252      	lsls	r2, r2, #9
     cb4:	4302      	orrs	r2, r0
     cb6:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cb8:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     cba:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cbc:	07da      	lsls	r2, r3, #31
     cbe:	d500      	bpl.n	cc2 <adc_init+0x2a>
     cc0:	e1d9      	b.n	1076 <adc_init+0x3de>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cc2:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     cc4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cc6:	0799      	lsls	r1, r3, #30
     cc8:	d500      	bpl.n	ccc <adc_init+0x34>
     cca:	e1d4      	b.n	1076 <adc_init+0x3de>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     ccc:	786b      	ldrb	r3, [r5, #1]
     cce:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     cd0:	2b00      	cmp	r3, #0
     cd2:	d104      	bne.n	cde <adc_init+0x46>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     cd4:	4bac      	ldr	r3, [pc, #688]	; (f88 <adc_init+0x2f0>)
     cd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
     cd8:	2204      	movs	r2, #4
     cda:	430a      	orrs	r2, r1
     cdc:	641a      	str	r2, [r3, #64]	; 0x40
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     cde:	6832      	ldr	r2, [r6, #0]
     ce0:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     ce2:	782b      	ldrb	r3, [r5, #0]
     ce4:	4668      	mov	r0, sp
     ce6:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     ce8:	201e      	movs	r0, #30
     cea:	a902      	add	r1, sp, #8
     cec:	4ba7      	ldr	r3, [pc, #668]	; (f8c <adc_init+0x2f4>)
     cee:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     cf0:	201e      	movs	r0, #30
     cf2:	4ba7      	ldr	r3, [pc, #668]	; (f90 <adc_init+0x2f8>)
     cf4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     cf6:	232c      	movs	r3, #44	; 0x2c
     cf8:	5ceb      	ldrb	r3, [r5, r3]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d042      	beq.n	d84 <adc_init+0xec>
		uint8_t offset = config->pin_scan.offset_start_scan;
     cfe:	222b      	movs	r2, #43	; 0x2b
     d00:	5cac      	ldrb	r4, [r5, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     d02:	7b29      	ldrb	r1, [r5, #12]
     d04:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     d06:	190a      	adds	r2, r1, r4
     d08:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	b2db      	uxtb	r3, r3
     d0e:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     d10:	429a      	cmp	r2, r3
     d12:	d221      	bcs.n	d58 <adc_init+0xc0>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d14:	4a9f      	ldr	r2, [pc, #636]	; (f94 <adc_init+0x2fc>)
     d16:	4693      	mov	fp, r2
     d18:	4b9f      	ldr	r3, [pc, #636]	; (f98 <adc_init+0x300>)
     d1a:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     d1c:	270f      	movs	r7, #15
     d1e:	4027      	ands	r7, r4
     d20:	7b2b      	ldrb	r3, [r5, #12]
     d22:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d24:	a804      	add	r0, sp, #16
     d26:	4659      	mov	r1, fp
     d28:	2250      	movs	r2, #80	; 0x50
     d2a:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d2c:	2f13      	cmp	r7, #19
     d2e:	d80c      	bhi.n	d4a <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d30:	00bf      	lsls	r7, r7, #2
     d32:	ab04      	add	r3, sp, #16
     d34:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d36:	a903      	add	r1, sp, #12
     d38:	2300      	movs	r3, #0
     d3a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d3c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d3e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d40:	2301      	movs	r3, #1
     d42:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     d44:	b2c0      	uxtb	r0, r0
     d46:	4a95      	ldr	r2, [pc, #596]	; (f9c <adc_init+0x304>)
     d48:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     d4a:	3401      	adds	r4, #1
     d4c:	b2e4      	uxtb	r4, r4
     d4e:	4640      	mov	r0, r8
     d50:	1903      	adds	r3, r0, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     d52:	b2db      	uxtb	r3, r3
     d54:	4599      	cmp	r9, r3
     d56:	d8e1      	bhi.n	d1c <adc_init+0x84>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     d58:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d5a:	a804      	add	r0, sp, #16
     d5c:	498d      	ldr	r1, [pc, #564]	; (f94 <adc_init+0x2fc>)
     d5e:	2250      	movs	r2, #80	; 0x50
     d60:	4b8d      	ldr	r3, [pc, #564]	; (f98 <adc_init+0x300>)
     d62:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d64:	2c13      	cmp	r4, #19
     d66:	d837      	bhi.n	dd8 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d68:	00a4      	lsls	r4, r4, #2
     d6a:	ab04      	add	r3, sp, #16
     d6c:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d6e:	a903      	add	r1, sp, #12
     d70:	2300      	movs	r3, #0
     d72:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d74:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d76:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d78:	2301      	movs	r3, #1
     d7a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     d7c:	b2c0      	uxtb	r0, r0
     d7e:	4b87      	ldr	r3, [pc, #540]	; (f9c <adc_init+0x304>)
     d80:	4798      	blx	r3
     d82:	e029      	b.n	dd8 <adc_init+0x140>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     d84:	7b2c      	ldrb	r4, [r5, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d86:	a804      	add	r0, sp, #16
     d88:	4982      	ldr	r1, [pc, #520]	; (f94 <adc_init+0x2fc>)
     d8a:	2250      	movs	r2, #80	; 0x50
     d8c:	4b82      	ldr	r3, [pc, #520]	; (f98 <adc_init+0x300>)
     d8e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d90:	2c13      	cmp	r4, #19
     d92:	d80c      	bhi.n	dae <adc_init+0x116>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d94:	00a4      	lsls	r4, r4, #2
     d96:	ab04      	add	r3, sp, #16
     d98:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d9a:	a903      	add	r1, sp, #12
     d9c:	2300      	movs	r3, #0
     d9e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     da0:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     da2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     da4:	2301      	movs	r3, #1
     da6:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     da8:	b2c0      	uxtb	r0, r0
     daa:	4b7c      	ldr	r3, [pc, #496]	; (f9c <adc_init+0x304>)
     dac:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     dae:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     db0:	a804      	add	r0, sp, #16
     db2:	4978      	ldr	r1, [pc, #480]	; (f94 <adc_init+0x2fc>)
     db4:	2250      	movs	r2, #80	; 0x50
     db6:	4b78      	ldr	r3, [pc, #480]	; (f98 <adc_init+0x300>)
     db8:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     dba:	2c13      	cmp	r4, #19
     dbc:	d80c      	bhi.n	dd8 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dbe:	00a4      	lsls	r4, r4, #2
     dc0:	ab04      	add	r3, sp, #16
     dc2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dc4:	a903      	add	r1, sp, #12
     dc6:	2300      	movs	r3, #0
     dc8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dca:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dcc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dce:	2301      	movs	r3, #1
     dd0:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     dd2:	b2c0      	uxtb	r0, r0
     dd4:	4b71      	ldr	r3, [pc, #452]	; (f9c <adc_init+0x304>)
     dd6:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     dd8:	7d6b      	ldrb	r3, [r5, #21]
     dda:	009b      	lsls	r3, r3, #2
     ddc:	b2db      	uxtb	r3, r3
     dde:	9901      	ldr	r1, [sp, #4]
     de0:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     de2:	7dab      	ldrb	r3, [r5, #22]
     de4:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     de6:	786a      	ldrb	r2, [r5, #1]
     de8:	4313      	orrs	r3, r2
     dea:	b2db      	uxtb	r3, r3
     dec:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     dee:	792b      	ldrb	r3, [r5, #4]
     df0:	2b34      	cmp	r3, #52	; 0x34
     df2:	d900      	bls.n	df6 <adc_init+0x15e>
     df4:	e13e      	b.n	1074 <adc_init+0x3dc>
     df6:	009b      	lsls	r3, r3, #2
     df8:	4a69      	ldr	r2, [pc, #420]	; (fa0 <adc_init+0x308>)
     dfa:	58d3      	ldr	r3, [r2, r3]
     dfc:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     dfe:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e00:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e02:	2301      	movs	r3, #1
     e04:	e01a      	b.n	e3c <adc_init+0x1a4>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     e06:	7c6b      	ldrb	r3, [r5, #17]
		accumulate = config->accumulate_samples;
     e08:	7c2a      	ldrb	r2, [r5, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e0a:	2410      	movs	r4, #16
     e0c:	e016      	b.n	e3c <adc_init+0x1a4>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e0e:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e10:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e12:	2301      	movs	r3, #1
     e14:	e012      	b.n	e3c <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e16:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e18:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e1a:	2300      	movs	r3, #0
     e1c:	e00e      	b.n	e3c <adc_init+0x1a4>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e1e:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     e20:	2430      	movs	r4, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e22:	2300      	movs	r3, #0
     e24:	e00a      	b.n	e3c <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e26:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     e28:	2420      	movs	r4, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e2a:	2300      	movs	r3, #0
     e2c:	e006      	b.n	e3c <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e2e:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     e30:	2400      	movs	r4, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e32:	2300      	movs	r3, #0
     e34:	e002      	b.n	e3c <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     e36:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e38:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     e3a:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     e3c:	011b      	lsls	r3, r3, #4
     e3e:	2170      	movs	r1, #112	; 0x70
     e40:	400b      	ands	r3, r1
     e42:	4313      	orrs	r3, r2
     e44:	9a01      	ldr	r2, [sp, #4]
     e46:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e48:	7deb      	ldrb	r3, [r5, #23]
		return STATUS_ERR_INVALID_ARG;
     e4a:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e4c:	2b3f      	cmp	r3, #63	; 0x3f
     e4e:	d900      	bls.n	e52 <adc_init+0x1ba>
     e50:	e111      	b.n	1076 <adc_init+0x3de>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     e52:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e54:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e56:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     e58:	b25b      	sxtb	r3, r3
     e5a:	2b00      	cmp	r3, #0
     e5c:	dbfb      	blt.n	e56 <adc_init+0x1be>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     e5e:	7cea      	ldrb	r2, [r5, #19]
     e60:	886b      	ldrh	r3, [r5, #2]
     e62:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     e64:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     e66:	5caa      	ldrb	r2, [r5, r2]
     e68:	00d2      	lsls	r2, r2, #3
     e6a:	4313      	orrs	r3, r2
     e6c:	7d2a      	ldrb	r2, [r5, #20]
     e6e:	0092      	lsls	r2, r2, #2
     e70:	4313      	orrs	r3, r2
     e72:	7caa      	ldrb	r2, [r5, #18]
     e74:	0052      	lsls	r2, r2, #1
     e76:	4313      	orrs	r3, r2
     e78:	4323      	orrs	r3, r4
     e7a:	9801      	ldr	r0, [sp, #4]
     e7c:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     e7e:	7e2b      	ldrb	r3, [r5, #24]
     e80:	2b00      	cmp	r3, #0
     e82:	d101      	bne.n	e88 <adc_init+0x1f0>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e84:	6831      	ldr	r1, [r6, #0]
     e86:	e095      	b.n	fb4 <adc_init+0x31c>
		switch (resolution) {
     e88:	2c10      	cmp	r4, #16
     e8a:	d05b      	beq.n	f44 <adc_init+0x2ac>
     e8c:	d802      	bhi.n	e94 <adc_init+0x1fc>
     e8e:	2c00      	cmp	r4, #0
     e90:	d038      	beq.n	f04 <adc_init+0x26c>
     e92:	e7f7      	b.n	e84 <adc_init+0x1ec>
     e94:	2c20      	cmp	r4, #32
     e96:	d019      	beq.n	ecc <adc_init+0x234>
     e98:	2c30      	cmp	r4, #48	; 0x30
     e9a:	d1f3      	bne.n	e84 <adc_init+0x1ec>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     e9c:	7cea      	ldrb	r2, [r5, #19]
     e9e:	2a00      	cmp	r2, #0
     ea0:	d00a      	beq.n	eb8 <adc_init+0x220>
					(config->window.window_lower_value > 127 ||
     ea2:	69ea      	ldr	r2, [r5, #28]
     ea4:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ea6:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     ea8:	2aff      	cmp	r2, #255	; 0xff
     eaa:	d900      	bls.n	eae <adc_init+0x216>
     eac:	e0e3      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     eae:	6a2a      	ldr	r2, [r5, #32]
     eb0:	3280      	adds	r2, #128	; 0x80
     eb2:	2aff      	cmp	r2, #255	; 0xff
     eb4:	d900      	bls.n	eb8 <adc_init+0x220>
     eb6:	e0de      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eb8:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     eba:	69e9      	ldr	r1, [r5, #28]
     ebc:	29ff      	cmp	r1, #255	; 0xff
     ebe:	dd00      	ble.n	ec2 <adc_init+0x22a>
     ec0:	e0d9      	b.n	1076 <adc_init+0x3de>
     ec2:	6a2a      	ldr	r2, [r5, #32]
     ec4:	2aff      	cmp	r2, #255	; 0xff
     ec6:	dd00      	ble.n	eca <adc_init+0x232>
     ec8:	e0d5      	b.n	1076 <adc_init+0x3de>
     eca:	e7db      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     ecc:	7cea      	ldrb	r2, [r5, #19]
     ece:	2a00      	cmp	r2, #0
     ed0:	d00d      	beq.n	eee <adc_init+0x256>
					(config->window.window_lower_value > 511 ||
     ed2:	69e8      	ldr	r0, [r5, #28]
     ed4:	2280      	movs	r2, #128	; 0x80
     ed6:	0092      	lsls	r2, r2, #2
     ed8:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eda:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     edc:	4a31      	ldr	r2, [pc, #196]	; (fa4 <adc_init+0x30c>)
     ede:	4291      	cmp	r1, r2
     ee0:	d900      	bls.n	ee4 <adc_init+0x24c>
     ee2:	e0c8      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     ee4:	4a30      	ldr	r2, [pc, #192]	; (fa8 <adc_init+0x310>)
     ee6:	6a29      	ldr	r1, [r5, #32]
     ee8:	4291      	cmp	r1, r2
     eea:	db00      	blt.n	eee <adc_init+0x256>
     eec:	e0c3      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eee:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     ef0:	4a2c      	ldr	r2, [pc, #176]	; (fa4 <adc_init+0x30c>)
     ef2:	69e9      	ldr	r1, [r5, #28]
     ef4:	4291      	cmp	r1, r2
     ef6:	dd00      	ble.n	efa <adc_init+0x262>
     ef8:	e0bd      	b.n	1076 <adc_init+0x3de>
     efa:	6a29      	ldr	r1, [r5, #32]
     efc:	4291      	cmp	r1, r2
     efe:	dd00      	ble.n	f02 <adc_init+0x26a>
     f00:	e0b9      	b.n	1076 <adc_init+0x3de>
     f02:	e7bf      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f04:	7cea      	ldrb	r2, [r5, #19]
     f06:	2a00      	cmp	r2, #0
     f08:	d011      	beq.n	f2e <adc_init+0x296>
					(config->window.window_lower_value > 2047 ||
     f0a:	69ea      	ldr	r2, [r5, #28]
     f0c:	2080      	movs	r0, #128	; 0x80
     f0e:	0100      	lsls	r0, r0, #4
     f10:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f12:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f14:	4a25      	ldr	r2, [pc, #148]	; (fac <adc_init+0x314>)
     f16:	4291      	cmp	r1, r2
     f18:	d900      	bls.n	f1c <adc_init+0x284>
     f1a:	e0ac      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f1c:	6a2a      	ldr	r2, [r5, #32]
     f1e:	2080      	movs	r0, #128	; 0x80
     f20:	0100      	lsls	r0, r0, #4
     f22:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f24:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f26:	4a21      	ldr	r2, [pc, #132]	; (fac <adc_init+0x314>)
     f28:	4291      	cmp	r1, r2
     f2a:	d900      	bls.n	f2e <adc_init+0x296>
     f2c:	e0a3      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f2e:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     f30:	4a1e      	ldr	r2, [pc, #120]	; (fac <adc_init+0x314>)
     f32:	69e9      	ldr	r1, [r5, #28]
     f34:	4291      	cmp	r1, r2
     f36:	dd00      	ble.n	f3a <adc_init+0x2a2>
     f38:	e09d      	b.n	1076 <adc_init+0x3de>
     f3a:	6a29      	ldr	r1, [r5, #32]
     f3c:	4291      	cmp	r1, r2
     f3e:	dd00      	ble.n	f42 <adc_init+0x2aa>
     f40:	e099      	b.n	1076 <adc_init+0x3de>
     f42:	e79f      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     f44:	7cea      	ldrb	r2, [r5, #19]
     f46:	2a00      	cmp	r2, #0
     f48:	d011      	beq.n	f6e <adc_init+0x2d6>
					(config->window.window_lower_value > 32767 ||
     f4a:	69ea      	ldr	r2, [r5, #28]
     f4c:	2080      	movs	r0, #128	; 0x80
     f4e:	0200      	lsls	r0, r0, #8
     f50:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f52:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     f54:	4a16      	ldr	r2, [pc, #88]	; (fb0 <adc_init+0x318>)
     f56:	4291      	cmp	r1, r2
     f58:	d900      	bls.n	f5c <adc_init+0x2c4>
     f5a:	e08c      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     f5c:	6a2a      	ldr	r2, [r5, #32]
     f5e:	2080      	movs	r0, #128	; 0x80
     f60:	0200      	lsls	r0, r0, #8
     f62:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f64:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     f66:	4a12      	ldr	r2, [pc, #72]	; (fb0 <adc_init+0x318>)
     f68:	4291      	cmp	r1, r2
     f6a:	d900      	bls.n	f6e <adc_init+0x2d6>
     f6c:	e083      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f6e:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     f70:	4a0f      	ldr	r2, [pc, #60]	; (fb0 <adc_init+0x318>)
     f72:	69e9      	ldr	r1, [r5, #28]
     f74:	4291      	cmp	r1, r2
     f76:	dd00      	ble.n	f7a <adc_init+0x2e2>
     f78:	e07d      	b.n	1076 <adc_init+0x3de>
     f7a:	6a29      	ldr	r1, [r5, #32]
     f7c:	4291      	cmp	r1, r2
     f7e:	dd00      	ble.n	f82 <adc_init+0x2ea>
     f80:	e079      	b.n	1076 <adc_init+0x3de>
     f82:	e77f      	b.n	e84 <adc_init+0x1ec>
     f84:	40000400 	.word	0x40000400
     f88:	40000800 	.word	0x40000800
     f8c:	000014e9 	.word	0x000014e9
     f90:	0000145d 	.word	0x0000145d
     f94:	00002aac 	.word	0x00002aac
     f98:	00001a91 	.word	0x00001a91
     f9c:	000015c5 	.word	0x000015c5
     fa0:	000029d8 	.word	0x000029d8
     fa4:	000003ff 	.word	0x000003ff
     fa8:	fffffe01 	.word	0xfffffe01
     fac:	00000fff 	.word	0x00000fff
     fb0:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fb4:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     fb6:	b252      	sxtb	r2, r2
     fb8:	2a00      	cmp	r2, #0
     fba:	dbfb      	blt.n	fb4 <adc_init+0x31c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     fbc:	9a01      	ldr	r2, [sp, #4]
     fbe:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     fc0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fc2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     fc4:	b25b      	sxtb	r3, r3
     fc6:	2b00      	cmp	r3, #0
     fc8:	dbfb      	blt.n	fc2 <adc_init+0x32a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     fca:	8bab      	ldrh	r3, [r5, #28]
     fcc:	9801      	ldr	r0, [sp, #4]
     fce:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     fd0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fd2:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     fd4:	b25b      	sxtb	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	dbfb      	blt.n	fd2 <adc_init+0x33a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     fda:	8c2b      	ldrh	r3, [r5, #32]
     fdc:	9901      	ldr	r1, [sp, #4]
     fde:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     fe0:	232c      	movs	r3, #44	; 0x2c
     fe2:	5ceb      	ldrb	r3, [r5, r3]
	if (inputs_to_scan > 0) {
     fe4:	2b00      	cmp	r3, #0
     fe6:	d004      	beq.n	ff2 <adc_init+0x35a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     fe8:	3b01      	subs	r3, #1
     fea:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     fec:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     fee:	2b0f      	cmp	r3, #15
     ff0:	d841      	bhi.n	1076 <adc_init+0x3de>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     ff2:	222b      	movs	r2, #43	; 0x2b
     ff4:	5caa      	ldrb	r2, [r5, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     ff6:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     ff8:	2a0f      	cmp	r2, #15
     ffa:	d83c      	bhi.n	1076 <adc_init+0x3de>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ffc:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ffe:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    1000:	b240      	sxtb	r0, r0
    1002:	2800      	cmp	r0, #0
    1004:	dbfb      	blt.n	ffe <adc_init+0x366>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1006:	89e8      	ldrh	r0, [r5, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1008:	7b29      	ldrb	r1, [r5, #12]
			config->gain_factor |
    100a:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    100c:	68a8      	ldr	r0, [r5, #8]
    100e:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    1010:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1012:	430a      	orrs	r2, r1
    1014:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1016:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1018:	9901      	ldr	r1, [sp, #4]
    101a:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    101c:	232a      	movs	r3, #42	; 0x2a
    101e:	5ceb      	ldrb	r3, [r5, r3]
    1020:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1022:	230f      	movs	r3, #15
    1024:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1026:	2324      	movs	r3, #36	; 0x24
    1028:	5ceb      	ldrb	r3, [r5, r3]
    102a:	2b00      	cmp	r3, #0
    102c:	d010      	beq.n	1050 <adc_init+0x3b8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    102e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    1030:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1032:	4a14      	ldr	r2, [pc, #80]	; (1084 <adc_init+0x3ec>)
    1034:	4293      	cmp	r3, r2
    1036:	d81e      	bhi.n	1076 <adc_init+0x3de>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1038:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    103a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    103c:	2080      	movs	r0, #128	; 0x80
    103e:	0100      	lsls	r0, r0, #4
    1040:	1819      	adds	r1, r3, r0
    1042:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1044:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1046:	4a0f      	ldr	r2, [pc, #60]	; (1084 <adc_init+0x3ec>)
    1048:	4291      	cmp	r1, r2
    104a:	d814      	bhi.n	1076 <adc_init+0x3de>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    104c:	9901      	ldr	r1, [sp, #4]
    104e:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    1050:	4b0d      	ldr	r3, [pc, #52]	; (1088 <adc_init+0x3f0>)
    1052:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1054:	0152      	lsls	r2, r2, #5
    1056:	23e0      	movs	r3, #224	; 0xe0
    1058:	00db      	lsls	r3, r3, #3
    105a:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <adc_init+0x3f4>)
    105e:	6858      	ldr	r0, [r3, #4]
    1060:	0141      	lsls	r1, r0, #5
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	0edb      	lsrs	r3, r3, #27
    1066:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1068:	b2db      	uxtb	r3, r3
    106a:	4313      	orrs	r3, r2
    106c:	9901      	ldr	r1, [sp, #4]
    106e:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1070:	2000      	movs	r0, #0
    1072:	e000      	b.n	1076 <adc_init+0x3de>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1074:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1076:	b019      	add	sp, #100	; 0x64
    1078:	bc3c      	pop	{r2, r3, r4, r5}
    107a:	4690      	mov	r8, r2
    107c:	4699      	mov	r9, r3
    107e:	46a2      	mov	sl, r4
    1080:	46ab      	mov	fp, r5
    1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1084:	00000fff 	.word	0x00000fff
    1088:	00806024 	.word	0x00806024
    108c:	00806020 	.word	0x00806020

00001090 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1090:	b500      	push	{lr}
    1092:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1094:	ab01      	add	r3, sp, #4
    1096:	2280      	movs	r2, #128	; 0x80
    1098:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    109a:	780a      	ldrb	r2, [r1, #0]
    109c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    109e:	784a      	ldrb	r2, [r1, #1]
    10a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    10a2:	788a      	ldrb	r2, [r1, #2]
    10a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    10a6:	1c19      	adds	r1, r3, #0
    10a8:	4b01      	ldr	r3, [pc, #4]	; (10b0 <port_pin_set_config+0x20>)
    10aa:	4798      	blx	r3
}
    10ac:	b003      	add	sp, #12
    10ae:	bd00      	pop	{pc}
    10b0:	000015c5 	.word	0x000015c5

000010b4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10b4:	b508      	push	{r3, lr}
	switch (clock_source) {
    10b6:	2808      	cmp	r0, #8
    10b8:	d834      	bhi.n	1124 <system_clock_source_get_hz+0x70>
    10ba:	0080      	lsls	r0, r0, #2
    10bc:	4b1b      	ldr	r3, [pc, #108]	; (112c <system_clock_source_get_hz+0x78>)
    10be:	581b      	ldr	r3, [r3, r0]
    10c0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10c2:	2080      	movs	r0, #128	; 0x80
    10c4:	0200      	lsls	r0, r0, #8
    10c6:	e030      	b.n	112a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    10c8:	4b19      	ldr	r3, [pc, #100]	; (1130 <system_clock_source_get_hz+0x7c>)
    10ca:	6918      	ldr	r0, [r3, #16]
    10cc:	e02d      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10ce:	4b19      	ldr	r3, [pc, #100]	; (1134 <system_clock_source_get_hz+0x80>)
    10d0:	6a18      	ldr	r0, [r3, #32]
    10d2:	0580      	lsls	r0, r0, #22
    10d4:	0f80      	lsrs	r0, r0, #30
    10d6:	4b18      	ldr	r3, [pc, #96]	; (1138 <system_clock_source_get_hz+0x84>)
    10d8:	40c3      	lsrs	r3, r0
    10da:	1c18      	adds	r0, r3, #0
    10dc:	e025      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10de:	4b14      	ldr	r3, [pc, #80]	; (1130 <system_clock_source_get_hz+0x7c>)
    10e0:	6958      	ldr	r0, [r3, #20]
    10e2:	e022      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10e4:	4b12      	ldr	r3, [pc, #72]	; (1130 <system_clock_source_get_hz+0x7c>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	2002      	movs	r0, #2
    10ea:	4018      	ands	r0, r3
    10ec:	d01d      	beq.n	112a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10ee:	4911      	ldr	r1, [pc, #68]	; (1134 <system_clock_source_get_hz+0x80>)
    10f0:	2210      	movs	r2, #16
    10f2:	68cb      	ldr	r3, [r1, #12]
    10f4:	421a      	tst	r2, r3
    10f6:	d0fc      	beq.n	10f2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10f8:	4b0d      	ldr	r3, [pc, #52]	; (1130 <system_clock_source_get_hz+0x7c>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	075a      	lsls	r2, r3, #29
    10fe:	d513      	bpl.n	1128 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1100:	2000      	movs	r0, #0
    1102:	4b0e      	ldr	r3, [pc, #56]	; (113c <system_clock_source_get_hz+0x88>)
    1104:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1106:	4b0a      	ldr	r3, [pc, #40]	; (1130 <system_clock_source_get_hz+0x7c>)
    1108:	689b      	ldr	r3, [r3, #8]
    110a:	041b      	lsls	r3, r3, #16
    110c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    110e:	4358      	muls	r0, r3
    1110:	e00b      	b.n	112a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1112:	2350      	movs	r3, #80	; 0x50
    1114:	4a07      	ldr	r2, [pc, #28]	; (1134 <system_clock_source_get_hz+0x80>)
    1116:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1118:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    111a:	075a      	lsls	r2, r3, #29
    111c:	d505      	bpl.n	112a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    111e:	4b04      	ldr	r3, [pc, #16]	; (1130 <system_clock_source_get_hz+0x7c>)
    1120:	68d8      	ldr	r0, [r3, #12]
    1122:	e002      	b.n	112a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1124:	2000      	movs	r0, #0
    1126:	e000      	b.n	112a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1128:	4805      	ldr	r0, [pc, #20]	; (1140 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    112a:	bd08      	pop	{r3, pc}
    112c:	00002afc 	.word	0x00002afc
    1130:	200000ac 	.word	0x200000ac
    1134:	40000800 	.word	0x40000800
    1138:	007a1200 	.word	0x007a1200
    113c:	00001505 	.word	0x00001505
    1140:	02dc6c00 	.word	0x02dc6c00

00001144 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1144:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1146:	4b0c      	ldr	r3, [pc, #48]	; (1178 <system_clock_source_osc8m_set_config+0x34>)
    1148:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    114a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    114c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    114e:	7840      	ldrb	r0, [r0, #1]
    1150:	2201      	movs	r2, #1
    1152:	4010      	ands	r0, r2
    1154:	0180      	lsls	r0, r0, #6
    1156:	2640      	movs	r6, #64	; 0x40
    1158:	43b4      	bics	r4, r6
    115a:	4304      	orrs	r4, r0
    115c:	402a      	ands	r2, r5
    115e:	01d0      	lsls	r0, r2, #7
    1160:	2280      	movs	r2, #128	; 0x80
    1162:	4394      	bics	r4, r2
    1164:	1c22      	adds	r2, r4, #0
    1166:	4302      	orrs	r2, r0
    1168:	2003      	movs	r0, #3
    116a:	4001      	ands	r1, r0
    116c:	0209      	lsls	r1, r1, #8
    116e:	4803      	ldr	r0, [pc, #12]	; (117c <system_clock_source_osc8m_set_config+0x38>)
    1170:	4002      	ands	r2, r0
    1172:	430a      	orrs	r2, r1
    1174:	621a      	str	r2, [r3, #32]
}
    1176:	bd70      	pop	{r4, r5, r6, pc}
    1178:	40000800 	.word	0x40000800
    117c:	fffffcff 	.word	0xfffffcff

00001180 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1180:	2808      	cmp	r0, #8
    1182:	d843      	bhi.n	120c <system_clock_source_enable+0x8c>
    1184:	0080      	lsls	r0, r0, #2
    1186:	4b22      	ldr	r3, [pc, #136]	; (1210 <system_clock_source_enable+0x90>)
    1188:	581b      	ldr	r3, [r3, r0]
    118a:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    118c:	2000      	movs	r0, #0
    118e:	e03e      	b.n	120e <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1190:	4b20      	ldr	r3, [pc, #128]	; (1214 <system_clock_source_enable+0x94>)
    1192:	6a19      	ldr	r1, [r3, #32]
    1194:	2202      	movs	r2, #2
    1196:	430a      	orrs	r2, r1
    1198:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    119a:	2000      	movs	r0, #0
    119c:	e037      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <system_clock_source_enable+0x94>)
    11a0:	6999      	ldr	r1, [r3, #24]
    11a2:	2202      	movs	r2, #2
    11a4:	430a      	orrs	r2, r1
    11a6:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    11aa:	e030      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    11ac:	4b19      	ldr	r3, [pc, #100]	; (1214 <system_clock_source_enable+0x94>)
    11ae:	8a19      	ldrh	r1, [r3, #16]
    11b0:	2202      	movs	r2, #2
    11b2:	430a      	orrs	r2, r1
    11b4:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11b6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    11b8:	e029      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    11ba:	4b16      	ldr	r3, [pc, #88]	; (1214 <system_clock_source_enable+0x94>)
    11bc:	8a99      	ldrh	r1, [r3, #20]
    11be:	2202      	movs	r2, #2
    11c0:	430a      	orrs	r2, r1
    11c2:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11c4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    11c6:	e022      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11c8:	4b13      	ldr	r3, [pc, #76]	; (1218 <system_clock_source_enable+0x98>)
    11ca:	6819      	ldr	r1, [r3, #0]
    11cc:	2202      	movs	r2, #2
    11ce:	430a      	orrs	r2, r1
    11d0:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    11d2:	681a      	ldr	r2, [r3, #0]
    11d4:	4b11      	ldr	r3, [pc, #68]	; (121c <system_clock_source_enable+0x9c>)
    11d6:	401a      	ands	r2, r3
    11d8:	4b0e      	ldr	r3, [pc, #56]	; (1214 <system_clock_source_enable+0x94>)
    11da:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11dc:	1c19      	adds	r1, r3, #0
    11de:	2210      	movs	r2, #16
    11e0:	68cb      	ldr	r3, [r1, #12]
    11e2:	421a      	tst	r2, r3
    11e4:	d0fc      	beq.n	11e0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11e6:	4a0c      	ldr	r2, [pc, #48]	; (1218 <system_clock_source_enable+0x98>)
    11e8:	6891      	ldr	r1, [r2, #8]
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <system_clock_source_enable+0x94>)
    11ec:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11ee:	6851      	ldr	r1, [r2, #4]
    11f0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    11f2:	6812      	ldr	r2, [r2, #0]
    11f4:	b292      	uxth	r2, r2
    11f6:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11f8:	2000      	movs	r0, #0
    11fa:	e008      	b.n	120e <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    11fc:	4a05      	ldr	r2, [pc, #20]	; (1214 <system_clock_source_enable+0x94>)
    11fe:	2344      	movs	r3, #68	; 0x44
    1200:	5cd0      	ldrb	r0, [r2, r3]
    1202:	2102      	movs	r1, #2
    1204:	4301      	orrs	r1, r0
    1206:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1208:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    120a:	e000      	b.n	120e <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    120c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    120e:	4770      	bx	lr
    1210:	00002b20 	.word	0x00002b20
    1214:	40000800 	.word	0x40000800
    1218:	200000ac 	.word	0x200000ac
    121c:	0000ff7f 	.word	0x0000ff7f

00001220 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1220:	b530      	push	{r4, r5, lr}
    1222:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1224:	22c2      	movs	r2, #194	; 0xc2
    1226:	00d2      	lsls	r2, r2, #3
    1228:	4b19      	ldr	r3, [pc, #100]	; (1290 <system_clock_init+0x70>)
    122a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    122c:	4b19      	ldr	r3, [pc, #100]	; (1294 <system_clock_init+0x74>)
    122e:	685a      	ldr	r2, [r3, #4]
    1230:	211e      	movs	r1, #30
    1232:	438a      	bics	r2, r1
    1234:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1236:	2301      	movs	r3, #1
    1238:	466a      	mov	r2, sp
    123a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    123c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    123e:	4d16      	ldr	r5, [pc, #88]	; (1298 <system_clock_init+0x78>)
    1240:	b2e0      	uxtb	r0, r4
    1242:	4669      	mov	r1, sp
    1244:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1246:	3401      	adds	r4, #1
    1248:	2c25      	cmp	r4, #37	; 0x25
    124a:	d1f9      	bne.n	1240 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    124c:	a803      	add	r0, sp, #12
    124e:	2400      	movs	r4, #0
    1250:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1252:	2501      	movs	r5, #1
    1254:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1256:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1258:	4b10      	ldr	r3, [pc, #64]	; (129c <system_clock_init+0x7c>)
    125a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    125c:	2006      	movs	r0, #6
    125e:	4b10      	ldr	r3, [pc, #64]	; (12a0 <system_clock_init+0x80>)
    1260:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1262:	4b10      	ldr	r3, [pc, #64]	; (12a4 <system_clock_init+0x84>)
    1264:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1266:	4b10      	ldr	r3, [pc, #64]	; (12a8 <system_clock_init+0x88>)
    1268:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    126a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    126c:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    126e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1270:	466b      	mov	r3, sp
    1272:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1274:	2306      	movs	r3, #6
    1276:	466a      	mov	r2, sp
    1278:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    127a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    127c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    127e:	2000      	movs	r0, #0
    1280:	4669      	mov	r1, sp
    1282:	4b0a      	ldr	r3, [pc, #40]	; (12ac <system_clock_init+0x8c>)
    1284:	4798      	blx	r3
    1286:	2000      	movs	r0, #0
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <system_clock_init+0x90>)
    128a:	4798      	blx	r3
#endif
}
    128c:	b005      	add	sp, #20
    128e:	bd30      	pop	{r4, r5, pc}
    1290:	40000800 	.word	0x40000800
    1294:	41004000 	.word	0x41004000
    1298:	000014e9 	.word	0x000014e9
    129c:	00001145 	.word	0x00001145
    12a0:	00001181 	.word	0x00001181
    12a4:	000012b5 	.word	0x000012b5
    12a8:	40000400 	.word	0x40000400
    12ac:	000012d9 	.word	0x000012d9
    12b0:	0000138d 	.word	0x0000138d

000012b4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <system_gclk_init+0x1c>)
    12b6:	6999      	ldr	r1, [r3, #24]
    12b8:	2208      	movs	r2, #8
    12ba:	430a      	orrs	r2, r1
    12bc:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12be:	2201      	movs	r2, #1
    12c0:	4b04      	ldr	r3, [pc, #16]	; (12d4 <system_gclk_init+0x20>)
    12c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12c4:	1c19      	adds	r1, r3, #0
    12c6:	780b      	ldrb	r3, [r1, #0]
    12c8:	4213      	tst	r3, r2
    12ca:	d1fc      	bne.n	12c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12cc:	4770      	bx	lr
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	40000400 	.word	0x40000400
    12d4:	40000c00 	.word	0x40000c00

000012d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12da:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12dc:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12de:	780d      	ldrb	r5, [r1, #0]
    12e0:	022d      	lsls	r5, r5, #8
    12e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12e4:	784b      	ldrb	r3, [r1, #1]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d002      	beq.n	12f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12ea:	2380      	movs	r3, #128	; 0x80
    12ec:	02db      	lsls	r3, r3, #11
    12ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12f0:	7a4b      	ldrb	r3, [r1, #9]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d002      	beq.n	12fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	031b      	lsls	r3, r3, #12
    12fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12fc:	684c      	ldr	r4, [r1, #4]
    12fe:	2c01      	cmp	r4, #1
    1300:	d917      	bls.n	1332 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1302:	1e63      	subs	r3, r4, #1
    1304:	421c      	tst	r4, r3
    1306:	d10f      	bne.n	1328 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1308:	2c02      	cmp	r4, #2
    130a:	d906      	bls.n	131a <system_gclk_gen_set_config+0x42>
    130c:	2302      	movs	r3, #2
    130e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1310:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1312:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1314:	429c      	cmp	r4, r3
    1316:	d8fb      	bhi.n	1310 <system_gclk_gen_set_config+0x38>
    1318:	e000      	b.n	131c <system_gclk_gen_set_config+0x44>
    131a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    131c:	0217      	lsls	r7, r2, #8
    131e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	035b      	lsls	r3, r3, #13
    1324:	431d      	orrs	r5, r3
    1326:	e004      	b.n	1332 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1328:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    132a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	029b      	lsls	r3, r3, #10
    1330:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1332:	7a0b      	ldrb	r3, [r1, #8]
    1334:	2b00      	cmp	r3, #0
    1336:	d002      	beq.n	133e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	039b      	lsls	r3, r3, #14
    133c:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    133e:	4a0f      	ldr	r2, [pc, #60]	; (137c <system_gclk_gen_set_config+0xa4>)
    1340:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1342:	b25b      	sxtb	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	dbfb      	blt.n	1340 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1348:	4b0d      	ldr	r3, [pc, #52]	; (1380 <system_gclk_gen_set_config+0xa8>)
    134a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    134c:	4b0d      	ldr	r3, [pc, #52]	; (1384 <system_gclk_gen_set_config+0xac>)
    134e:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1350:	4a0a      	ldr	r2, [pc, #40]	; (137c <system_gclk_gen_set_config+0xa4>)
    1352:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1354:	b25b      	sxtb	r3, r3
    1356:	2b00      	cmp	r3, #0
    1358:	dbfb      	blt.n	1352 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    135a:	4b08      	ldr	r3, [pc, #32]	; (137c <system_gclk_gen_set_config+0xa4>)
    135c:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    135e:	1c1a      	adds	r2, r3, #0
    1360:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1362:	b25b      	sxtb	r3, r3
    1364:	2b00      	cmp	r3, #0
    1366:	dbfb      	blt.n	1360 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <system_gclk_gen_set_config+0xa4>)
    136a:	6859      	ldr	r1, [r3, #4]
    136c:	2280      	movs	r2, #128	; 0x80
    136e:	0252      	lsls	r2, r2, #9
    1370:	400a      	ands	r2, r1
    1372:	4315      	orrs	r5, r2
    1374:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1376:	4b04      	ldr	r3, [pc, #16]	; (1388 <system_gclk_gen_set_config+0xb0>)
    1378:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    137c:	40000c00 	.word	0x40000c00
    1380:	00000ba9 	.word	0x00000ba9
    1384:	40000c08 	.word	0x40000c08
    1388:	00000be9 	.word	0x00000be9

0000138c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    138c:	b510      	push	{r4, lr}
    138e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1390:	4a0b      	ldr	r2, [pc, #44]	; (13c0 <system_gclk_gen_enable+0x34>)
    1392:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1394:	b25b      	sxtb	r3, r3
    1396:	2b00      	cmp	r3, #0
    1398:	dbfb      	blt.n	1392 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    139a:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <system_gclk_gen_enable+0x38>)
    139c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    139e:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <system_gclk_gen_enable+0x3c>)
    13a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13a2:	4a07      	ldr	r2, [pc, #28]	; (13c0 <system_gclk_gen_enable+0x34>)
    13a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13a6:	b25b      	sxtb	r3, r3
    13a8:	2b00      	cmp	r3, #0
    13aa:	dbfb      	blt.n	13a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <system_gclk_gen_enable+0x34>)
    13ae:	6859      	ldr	r1, [r3, #4]
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	0252      	lsls	r2, r2, #9
    13b4:	430a      	orrs	r2, r1
    13b6:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <system_gclk_gen_enable+0x40>)
    13ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	40000c00 	.word	0x40000c00
    13c4:	00000ba9 	.word	0x00000ba9
    13c8:	40000c04 	.word	0x40000c04
    13cc:	00000be9 	.word	0x00000be9

000013d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13d0:	b570      	push	{r4, r5, r6, lr}
    13d2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13d4:	4a1a      	ldr	r2, [pc, #104]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13d6:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    13d8:	b25b      	sxtb	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	dbfb      	blt.n	13d6 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13de:	4b19      	ldr	r3, [pc, #100]	; (1444 <system_gclk_gen_get_hz+0x74>)
    13e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13e2:	4b19      	ldr	r3, [pc, #100]	; (1448 <system_gclk_gen_get_hz+0x78>)
    13e4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e6:	4a16      	ldr	r2, [pc, #88]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13e8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13ea:	b25b      	sxtb	r3, r3
    13ec:	2b00      	cmp	r3, #0
    13ee:	dbfb      	blt.n	13e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13f0:	4e13      	ldr	r6, [pc, #76]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13f2:	6870      	ldr	r0, [r6, #4]
    13f4:	04c0      	lsls	r0, r0, #19
    13f6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <system_gclk_gen_get_hz+0x7c>)
    13fa:	4798      	blx	r3
    13fc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13fe:	4b12      	ldr	r3, [pc, #72]	; (1448 <system_gclk_gen_get_hz+0x78>)
    1400:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1402:	6876      	ldr	r6, [r6, #4]
    1404:	02f6      	lsls	r6, r6, #11
    1406:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1408:	4b11      	ldr	r3, [pc, #68]	; (1450 <system_gclk_gen_get_hz+0x80>)
    140a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    140c:	4a0c      	ldr	r2, [pc, #48]	; (1440 <system_gclk_gen_get_hz+0x70>)
    140e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1410:	b25b      	sxtb	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	dbfb      	blt.n	140e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <system_gclk_gen_get_hz+0x70>)
    1418:	689c      	ldr	r4, [r3, #8]
    141a:	0a24      	lsrs	r4, r4, #8
    141c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <system_gclk_gen_get_hz+0x84>)
    1420:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1422:	2e00      	cmp	r6, #0
    1424:	d107      	bne.n	1436 <system_gclk_gen_get_hz+0x66>
    1426:	2c01      	cmp	r4, #1
    1428:	d907      	bls.n	143a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    142a:	1c28      	adds	r0, r5, #0
    142c:	1c21      	adds	r1, r4, #0
    142e:	4b0a      	ldr	r3, [pc, #40]	; (1458 <system_gclk_gen_get_hz+0x88>)
    1430:	4798      	blx	r3
    1432:	1c05      	adds	r5, r0, #0
    1434:	e001      	b.n	143a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1436:	3401      	adds	r4, #1
    1438:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    143a:	1c28      	adds	r0, r5, #0
    143c:	bd70      	pop	{r4, r5, r6, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	40000c00 	.word	0x40000c00
    1444:	00000ba9 	.word	0x00000ba9
    1448:	40000c04 	.word	0x40000c04
    144c:	000010b5 	.word	0x000010b5
    1450:	40000c08 	.word	0x40000c08
    1454:	00000be9 	.word	0x00000be9
    1458:	00001961 	.word	0x00001961

0000145c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    145c:	b510      	push	{r4, lr}
    145e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1460:	4b06      	ldr	r3, [pc, #24]	; (147c <system_gclk_chan_enable+0x20>)
    1462:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <system_gclk_chan_enable+0x24>)
    1466:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_enable+0x28>)
    146a:	8859      	ldrh	r1, [r3, #2]
    146c:	2280      	movs	r2, #128	; 0x80
    146e:	01d2      	lsls	r2, r2, #7
    1470:	430a      	orrs	r2, r1
    1472:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <system_gclk_chan_enable+0x2c>)
    1476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	00000ba9 	.word	0x00000ba9
    1480:	40000c02 	.word	0x40000c02
    1484:	40000c00 	.word	0x40000c00
    1488:	00000be9 	.word	0x00000be9

0000148c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    148c:	b510      	push	{r4, lr}
    148e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <system_gclk_chan_disable+0x44>)
    1492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1494:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <system_gclk_chan_disable+0x48>)
    1496:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1498:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <system_gclk_chan_disable+0x4c>)
    149a:	8858      	ldrh	r0, [r3, #2]
    149c:	0500      	lsls	r0, r0, #20
    149e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    14a0:	8859      	ldrh	r1, [r3, #2]
    14a2:	4a0e      	ldr	r2, [pc, #56]	; (14dc <system_gclk_chan_disable+0x50>)
    14a4:	400a      	ands	r2, r1
    14a6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    14a8:	8859      	ldrh	r1, [r3, #2]
    14aa:	4a0d      	ldr	r2, [pc, #52]	; (14e0 <system_gclk_chan_disable+0x54>)
    14ac:	400a      	ands	r2, r1
    14ae:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    14b0:	1c19      	adds	r1, r3, #0
    14b2:	2280      	movs	r2, #128	; 0x80
    14b4:	01d2      	lsls	r2, r2, #7
    14b6:	884b      	ldrh	r3, [r1, #2]
    14b8:	4213      	tst	r3, r2
    14ba:	d1fc      	bne.n	14b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <system_gclk_chan_disable+0x4c>)
    14be:	0201      	lsls	r1, r0, #8
    14c0:	8858      	ldrh	r0, [r3, #2]
    14c2:	4a06      	ldr	r2, [pc, #24]	; (14dc <system_gclk_chan_disable+0x50>)
    14c4:	4002      	ands	r2, r0
    14c6:	430a      	orrs	r2, r1
    14c8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <system_gclk_chan_disable+0x58>)
    14cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00000ba9 	.word	0x00000ba9
    14d4:	40000c02 	.word	0x40000c02
    14d8:	40000c00 	.word	0x40000c00
    14dc:	fffff0ff 	.word	0xfffff0ff
    14e0:	ffffbfff 	.word	0xffffbfff
    14e4:	00000be9 	.word	0x00000be9

000014e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    14e8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14ea:	780c      	ldrb	r4, [r1, #0]
    14ec:	0224      	lsls	r4, r4, #8
    14ee:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <system_gclk_chan_set_config+0x14>)
    14f2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14f4:	b2a4      	uxth	r4, r4
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <system_gclk_chan_set_config+0x18>)
    14f8:	805c      	strh	r4, [r3, #2]
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	0000148d 	.word	0x0000148d
    1500:	40000c00 	.word	0x40000c00

00001504 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1504:	b510      	push	{r4, lr}
    1506:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <system_gclk_chan_get_hz+0x20>)
    150a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <system_gclk_chan_get_hz+0x24>)
    150e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <system_gclk_chan_get_hz+0x28>)
    1512:	885c      	ldrh	r4, [r3, #2]
    1514:	0524      	lsls	r4, r4, #20
    1516:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <system_gclk_chan_get_hz+0x2c>)
    151a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    151c:	1c20      	adds	r0, r4, #0
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <system_gclk_chan_get_hz+0x30>)
    1520:	4798      	blx	r3
}
    1522:	bd10      	pop	{r4, pc}
    1524:	00000ba9 	.word	0x00000ba9
    1528:	40000c02 	.word	0x40000c02
    152c:	40000c00 	.word	0x40000c00
    1530:	00000be9 	.word	0x00000be9
    1534:	000013d1 	.word	0x000013d1

00001538 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1538:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    153a:	78d3      	ldrb	r3, [r2, #3]
    153c:	2b00      	cmp	r3, #0
    153e:	d11e      	bne.n	157e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1540:	7813      	ldrb	r3, [r2, #0]
    1542:	2b80      	cmp	r3, #128	; 0x80
    1544:	d004      	beq.n	1550 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1546:	061b      	lsls	r3, r3, #24
    1548:	2480      	movs	r4, #128	; 0x80
    154a:	0264      	lsls	r4, r4, #9
    154c:	4323      	orrs	r3, r4
    154e:	e000      	b.n	1552 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1550:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1552:	7854      	ldrb	r4, [r2, #1]
    1554:	2502      	movs	r5, #2
    1556:	43ac      	bics	r4, r5
    1558:	d10a      	bne.n	1570 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    155a:	7894      	ldrb	r4, [r2, #2]
    155c:	2c00      	cmp	r4, #0
    155e:	d103      	bne.n	1568 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1560:	2480      	movs	r4, #128	; 0x80
    1562:	02a4      	lsls	r4, r4, #10
    1564:	4323      	orrs	r3, r4
    1566:	e002      	b.n	156e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1568:	24c0      	movs	r4, #192	; 0xc0
    156a:	02e4      	lsls	r4, r4, #11
    156c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    156e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1570:	7854      	ldrb	r4, [r2, #1]
    1572:	3c01      	subs	r4, #1
    1574:	2c01      	cmp	r4, #1
    1576:	d804      	bhi.n	1582 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1578:	4c11      	ldr	r4, [pc, #68]	; (15c0 <_system_pinmux_config+0x88>)
    157a:	4023      	ands	r3, r4
    157c:	e001      	b.n	1582 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    157e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1580:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1582:	040d      	lsls	r5, r1, #16
    1584:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1586:	24a0      	movs	r4, #160	; 0xa0
    1588:	05e4      	lsls	r4, r4, #23
    158a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    158c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    158e:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1590:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1592:	24d0      	movs	r4, #208	; 0xd0
    1594:	0624      	lsls	r4, r4, #24
    1596:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1598:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    159a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    159c:	78d4      	ldrb	r4, [r2, #3]
    159e:	2c00      	cmp	r4, #0
    15a0:	d10c      	bne.n	15bc <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15a2:	035c      	lsls	r4, r3, #13
    15a4:	d505      	bpl.n	15b2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15a6:	7893      	ldrb	r3, [r2, #2]
    15a8:	2b01      	cmp	r3, #1
    15aa:	d101      	bne.n	15b0 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    15ac:	6181      	str	r1, [r0, #24]
    15ae:	e000      	b.n	15b2 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    15b0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15b2:	7853      	ldrb	r3, [r2, #1]
    15b4:	3b01      	subs	r3, #1
    15b6:	2b01      	cmp	r3, #1
    15b8:	d800      	bhi.n	15bc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    15ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    15bc:	bd30      	pop	{r4, r5, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	fffbffff 	.word	0xfffbffff

000015c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15c4:	b508      	push	{r3, lr}
    15c6:	1c03      	adds	r3, r0, #0
    15c8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ca:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15cc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ce:	2900      	cmp	r1, #0
    15d0:	d103      	bne.n	15da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15d2:	0958      	lsrs	r0, r3, #5
    15d4:	01c0      	lsls	r0, r0, #7
    15d6:	4904      	ldr	r1, [pc, #16]	; (15e8 <system_pinmux_pin_set_config+0x24>)
    15d8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15da:	211f      	movs	r1, #31
    15dc:	400b      	ands	r3, r1
    15de:	2101      	movs	r1, #1
    15e0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    15e2:	4b02      	ldr	r3, [pc, #8]	; (15ec <system_pinmux_pin_set_config+0x28>)
    15e4:	4798      	blx	r3
}
    15e6:	bd08      	pop	{r3, pc}
    15e8:	41004400 	.word	0x41004400
    15ec:	00001539 	.word	0x00001539

000015f0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15f4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15f6:	4b04      	ldr	r3, [pc, #16]	; (1608 <system_init+0x14>)
    15f8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15fa:	4b04      	ldr	r3, [pc, #16]	; (160c <system_init+0x18>)
    15fc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15fe:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_init+0x1c>)
    1600:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_init+0x20>)
    1604:	4798      	blx	r3
}
    1606:	bd08      	pop	{r3, pc}
    1608:	00001221 	.word	0x00001221
    160c:	00000c19 	.word	0x00000c19
    1610:	000015f1 	.word	0x000015f1
    1614:	000015f1 	.word	0x000015f1

00001618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1618:	e7fe      	b.n	1618 <Dummy_Handler>
    161a:	46c0      	nop			; (mov r8, r8)

0000161c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    161c:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    161e:	2102      	movs	r1, #2
    1620:	2390      	movs	r3, #144	; 0x90
    1622:	005b      	lsls	r3, r3, #1
    1624:	4a28      	ldr	r2, [pc, #160]	; (16c8 <Reset_Handler+0xac>)
    1626:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1628:	4b28      	ldr	r3, [pc, #160]	; (16cc <Reset_Handler+0xb0>)
    162a:	78d8      	ldrb	r0, [r3, #3]
    162c:	2103      	movs	r1, #3
    162e:	4388      	bics	r0, r1
    1630:	2202      	movs	r2, #2
    1632:	4310      	orrs	r0, r2
    1634:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1636:	78dd      	ldrb	r5, [r3, #3]
    1638:	240c      	movs	r4, #12
    163a:	43a5      	bics	r5, r4
    163c:	2008      	movs	r0, #8
    163e:	4305      	orrs	r5, r0
    1640:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1642:	4b23      	ldr	r3, [pc, #140]	; (16d0 <Reset_Handler+0xb4>)
    1644:	7b9e      	ldrb	r6, [r3, #14]
    1646:	2530      	movs	r5, #48	; 0x30
    1648:	43ae      	bics	r6, r5
    164a:	2520      	movs	r5, #32
    164c:	4335      	orrs	r5, r6
    164e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1650:	7b9d      	ldrb	r5, [r3, #14]
    1652:	43a5      	bics	r5, r4
    1654:	4328      	orrs	r0, r5
    1656:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1658:	7b98      	ldrb	r0, [r3, #14]
    165a:	4388      	bics	r0, r1
    165c:	4302      	orrs	r2, r0
    165e:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1660:	4b1c      	ldr	r3, [pc, #112]	; (16d4 <Reset_Handler+0xb8>)
    1662:	4a1d      	ldr	r2, [pc, #116]	; (16d8 <Reset_Handler+0xbc>)
    1664:	429a      	cmp	r2, r3
    1666:	d003      	beq.n	1670 <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    1668:	4b1c      	ldr	r3, [pc, #112]	; (16dc <Reset_Handler+0xc0>)
    166a:	4a1a      	ldr	r2, [pc, #104]	; (16d4 <Reset_Handler+0xb8>)
    166c:	429a      	cmp	r2, r3
    166e:	d304      	bcc.n	167a <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1670:	4b1b      	ldr	r3, [pc, #108]	; (16e0 <Reset_Handler+0xc4>)
    1672:	4a1c      	ldr	r2, [pc, #112]	; (16e4 <Reset_Handler+0xc8>)
    1674:	429a      	cmp	r2, r3
    1676:	d310      	bcc.n	169a <Reset_Handler+0x7e>
    1678:	e01b      	b.n	16b2 <Reset_Handler+0x96>
    167a:	4b1b      	ldr	r3, [pc, #108]	; (16e8 <Reset_Handler+0xcc>)
    167c:	4817      	ldr	r0, [pc, #92]	; (16dc <Reset_Handler+0xc0>)
    167e:	3003      	adds	r0, #3
    1680:	1ac0      	subs	r0, r0, r3
    1682:	0880      	lsrs	r0, r0, #2
    1684:	3001      	adds	r0, #1
    1686:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1688:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    168a:	4912      	ldr	r1, [pc, #72]	; (16d4 <Reset_Handler+0xb8>)
    168c:	4a12      	ldr	r2, [pc, #72]	; (16d8 <Reset_Handler+0xbc>)
    168e:	58d4      	ldr	r4, [r2, r3]
    1690:	50cc      	str	r4, [r1, r3]
    1692:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1694:	4283      	cmp	r3, r0
    1696:	d1fa      	bne.n	168e <Reset_Handler+0x72>
    1698:	e7ea      	b.n	1670 <Reset_Handler+0x54>
    169a:	4b12      	ldr	r3, [pc, #72]	; (16e4 <Reset_Handler+0xc8>)
    169c:	1d1a      	adds	r2, r3, #4
    169e:	4910      	ldr	r1, [pc, #64]	; (16e0 <Reset_Handler+0xc4>)
    16a0:	3103      	adds	r1, #3
    16a2:	1a89      	subs	r1, r1, r2
    16a4:	0889      	lsrs	r1, r1, #2
    16a6:	0089      	lsls	r1, r1, #2
    16a8:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    16aa:	2100      	movs	r1, #0
    16ac:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16ae:	4293      	cmp	r3, r2
    16b0:	d1fc      	bne.n	16ac <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16b2:	4b0e      	ldr	r3, [pc, #56]	; (16ec <Reset_Handler+0xd0>)
    16b4:	217f      	movs	r1, #127	; 0x7f
    16b6:	4a0e      	ldr	r2, [pc, #56]	; (16f0 <Reset_Handler+0xd4>)
    16b8:	438a      	bics	r2, r1
    16ba:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <Reset_Handler+0xd8>)
    16be:	4798      	blx	r3

        /* Branch to main function */
        main();
    16c0:	4b0d      	ldr	r3, [pc, #52]	; (16f8 <Reset_Handler+0xdc>)
    16c2:	4798      	blx	r3
    16c4:	e7fe      	b.n	16c4 <Reset_Handler+0xa8>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	41007000 	.word	0x41007000
    16cc:	41005000 	.word	0x41005000
    16d0:	41004800 	.word	0x41004800
    16d4:	20000000 	.word	0x20000000
    16d8:	00002c04 	.word	0x00002c04
    16dc:	20000068 	.word	0x20000068
    16e0:	20000134 	.word	0x20000134
    16e4:	20000068 	.word	0x20000068
    16e8:	20000004 	.word	0x20000004
    16ec:	e000ed00 	.word	0xe000ed00
    16f0:	00000000 	.word	0x00000000
    16f4:	00001a45 	.word	0x00001a45
    16f8:	000017e1 	.word	0x000017e1

000016fc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    16fc:	4b06      	ldr	r3, [pc, #24]	; (1718 <_sbrk+0x1c>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d102      	bne.n	170a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1704:	4a05      	ldr	r2, [pc, #20]	; (171c <_sbrk+0x20>)
    1706:	4b04      	ldr	r3, [pc, #16]	; (1718 <_sbrk+0x1c>)
    1708:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    170a:	4a03      	ldr	r2, [pc, #12]	; (1718 <_sbrk+0x1c>)
    170c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    170e:	1818      	adds	r0, r3, r0
    1710:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1712:	1c18      	adds	r0, r3, #0
    1714:	4770      	bx	lr
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	200000c4 	.word	0x200000c4
    171c:	20002138 	.word	0x20002138

00001720 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1720:	2001      	movs	r0, #1
}
    1722:	4240      	negs	r0, r0
    1724:	4770      	bx	lr
    1726:	46c0      	nop			; (mov r8, r8)

00001728 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1728:	2380      	movs	r3, #128	; 0x80
    172a:	019b      	lsls	r3, r3, #6
    172c:	604b      	str	r3, [r1, #4]

	return 0;
}
    172e:	2000      	movs	r0, #0
    1730:	4770      	bx	lr
    1732:	46c0      	nop			; (mov r8, r8)

00001734 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1734:	2001      	movs	r0, #1
    1736:	4770      	bx	lr

00001738 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1738:	2000      	movs	r0, #0
    173a:	4770      	bx	lr

0000173c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	b082      	sub	sp, #8
    1740:	1c05      	adds	r5, r0, #0
    1742:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1744:	2200      	movs	r2, #0
    1746:	466b      	mov	r3, sp
    1748:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    174a:	4c06      	ldr	r4, [pc, #24]	; (1764 <usart_serial_getchar+0x28>)
    174c:	1c28      	adds	r0, r5, #0
    174e:	4669      	mov	r1, sp
    1750:	3106      	adds	r1, #6
    1752:	47a0      	blx	r4
    1754:	2800      	cmp	r0, #0
    1756:	d1f9      	bne.n	174c <usart_serial_getchar+0x10>

	*c = temp;
    1758:	466b      	mov	r3, sp
    175a:	3306      	adds	r3, #6
    175c:	881b      	ldrh	r3, [r3, #0]
    175e:	7033      	strb	r3, [r6, #0]
}
    1760:	b002      	add	sp, #8
    1762:	bd70      	pop	{r4, r5, r6, pc}
    1764:	000008c9 	.word	0x000008c9

00001768 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1768:	b570      	push	{r4, r5, r6, lr}
    176a:	1c06      	adds	r6, r0, #0
    176c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    176e:	4c03      	ldr	r4, [pc, #12]	; (177c <usart_serial_putchar+0x14>)
    1770:	1c30      	adds	r0, r6, #0
    1772:	1c29      	adds	r1, r5, #0
    1774:	47a0      	blx	r4
    1776:	2800      	cmp	r0, #0
    1778:	d1fa      	bne.n	1770 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	0000089d 	.word	0x0000089d

00001780 <configure_adc>:
struct adc_module adc_instance;
//! [module_inst]

//! [setup]
void configure_adc(void)
{
    1780:	b510      	push	{r4, lr}
    1782:	b08e      	sub	sp, #56	; 0x38
//! [setup_config]
	struct adc_config config_adc;
//! [setup_config]
//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    1784:	a802      	add	r0, sp, #8
    1786:	4b11      	ldr	r3, [pc, #68]	; (17cc <configure_adc+0x4c>)
    1788:	4798      	blx	r3
//! [setup_config_defaults]

//! [setup_set_config]
	adc_init(&adc_instance, ADC, &config_adc);
    178a:	4c11      	ldr	r4, [pc, #68]	; (17d0 <configure_adc+0x50>)
    178c:	1c20      	adds	r0, r4, #0
    178e:	4911      	ldr	r1, [pc, #68]	; (17d4 <configure_adc+0x54>)
    1790:	aa02      	add	r2, sp, #8
    1792:	4b11      	ldr	r3, [pc, #68]	; (17d8 <configure_adc+0x58>)
    1794:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    179a:	b252      	sxtb	r2, r2
    179c:	2a00      	cmp	r2, #0
    179e:	dbfb      	blt.n	1798 <configure_adc+0x18>

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    17a0:	7819      	ldrb	r1, [r3, #0]
    17a2:	2202      	movs	r2, #2
    17a4:	430a      	orrs	r2, r1
    17a6:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    17a8:	4b09      	ldr	r3, [pc, #36]	; (17d0 <configure_adc+0x50>)
    17aa:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    17ac:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    17ae:	b25b      	sxtb	r3, r3
    17b0:	2b00      	cmp	r3, #0
    17b2:	dbfb      	blt.n	17ac <configure_adc+0x2c>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17b4:	a901      	add	r1, sp, #4
    17b6:	2300      	movs	r3, #0
    17b8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    17ba:	70cb      	strb	r3, [r1, #3]

struct system_pinmux_config config;
system_pinmux_get_config_defaults(&config);

//Analog functions are all on MUX setting B
config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    17bc:	708b      	strb	r3, [r1, #2]
config.mux_position = 1;
    17be:	2301      	movs	r3, #1
    17c0:	700b      	strb	r3, [r1, #0]

system_pinmux_pin_set_config(PIN_PB00, &config);
    17c2:	2020      	movs	r0, #32
    17c4:	4b05      	ldr	r3, [pc, #20]	; (17dc <configure_adc+0x5c>)
    17c6:	4798      	blx	r3
}
    17c8:	b00e      	add	sp, #56	; 0x38
    17ca:	bd10      	pop	{r4, pc}
    17cc:	00000c51 	.word	0x00000c51
    17d0:	20000128 	.word	0x20000128
    17d4:	42004000 	.word	0x42004000
    17d8:	00000c99 	.word	0x00000c99
    17dc:	000015c5 	.word	0x000015c5

000017e0 <main>:
//! [setup]

int main(void)
{
    17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e2:	b091      	sub	sp, #68	; 0x44
	system_init();
    17e4:	4b4b      	ldr	r3, [pc, #300]	; (1914 <main+0x134>)
    17e6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    17e8:	2380      	movs	r3, #128	; 0x80
    17ea:	05db      	lsls	r3, r3, #23
    17ec:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    17ee:	2300      	movs	r3, #0
    17f0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    17f2:	22ff      	movs	r2, #255	; 0xff
    17f4:	4668      	mov	r0, sp
    17f6:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    17f8:	2200      	movs	r2, #0
    17fa:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    17fc:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    17fe:	2601      	movs	r6, #1
    1800:	2124      	movs	r1, #36	; 0x24
    1802:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    1804:	2125      	movs	r1, #37	; 0x25
    1806:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    1808:	2126      	movs	r1, #38	; 0x26
    180a:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    180c:	2127      	movs	r1, #39	; 0x27
    180e:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1810:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1812:	212c      	movs	r1, #44	; 0x2c
    1814:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1816:	212d      	movs	r1, #45	; 0x2d
    1818:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    181a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    181c:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    181e:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    1820:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1822:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1824:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    1826:	2313      	movs	r3, #19
    1828:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    182a:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    182c:	2380      	movs	r3, #128	; 0x80
    182e:	035b      	lsls	r3, r3, #13
    1830:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    1832:	4b39      	ldr	r3, [pc, #228]	; (1918 <main+0x138>)
    1834:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    1836:	4b39      	ldr	r3, [pc, #228]	; (191c <main+0x13c>)
    1838:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    183a:	2301      	movs	r3, #1
    183c:	425b      	negs	r3, r3
    183e:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1840:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1842:	2396      	movs	r3, #150	; 0x96
    1844:	021b      	lsls	r3, r3, #8
    1846:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1848:	4c35      	ldr	r4, [pc, #212]	; (1920 <main+0x140>)
    184a:	4b36      	ldr	r3, [pc, #216]	; (1924 <main+0x144>)
    184c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    184e:	4a36      	ldr	r2, [pc, #216]	; (1928 <main+0x148>)
    1850:	4b36      	ldr	r3, [pc, #216]	; (192c <main+0x14c>)
    1852:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1854:	4a36      	ldr	r2, [pc, #216]	; (1930 <main+0x150>)
    1856:	4b37      	ldr	r3, [pc, #220]	; (1934 <main+0x154>)
    1858:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    185a:	1c20      	adds	r0, r4, #0
    185c:	4936      	ldr	r1, [pc, #216]	; (1938 <main+0x158>)
    185e:	466a      	mov	r2, sp
    1860:	4b36      	ldr	r3, [pc, #216]	; (193c <main+0x15c>)
    1862:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1864:	4f36      	ldr	r7, [pc, #216]	; (1940 <main+0x160>)
    1866:	683b      	ldr	r3, [r7, #0]
    1868:	6898      	ldr	r0, [r3, #8]
    186a:	2100      	movs	r1, #0
    186c:	4d35      	ldr	r5, [pc, #212]	; (1944 <main+0x164>)
    186e:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1870:	683b      	ldr	r3, [r7, #0]
    1872:	6858      	ldr	r0, [r3, #4]
    1874:	2100      	movs	r1, #0
    1876:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1878:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    187a:	1c28      	adds	r0, r5, #0
    187c:	4b32      	ldr	r3, [pc, #200]	; (1948 <main+0x168>)
    187e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1880:	231f      	movs	r3, #31
    1882:	4018      	ands	r0, r3
    1884:	4086      	lsls	r6, r0
    1886:	4b31      	ldr	r3, [pc, #196]	; (194c <main+0x16c>)
    1888:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    188a:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    188c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    188e:	2b00      	cmp	r3, #0
    1890:	d1fc      	bne.n	188c <main+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1892:	682a      	ldr	r2, [r5, #0]
    1894:	2302      	movs	r3, #2
    1896:	4313      	orrs	r3, r2
    1898:	602b      	str	r3, [r5, #0]
{
	system_init();
	
	configure_console();	
//! [setup_init]
	configure_adc();
    189a:	4b2d      	ldr	r3, [pc, #180]	; (1950 <main+0x170>)
    189c:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    189e:	4b2d      	ldr	r3, [pc, #180]	; (1954 <main+0x174>)
    18a0:	6818      	ldr	r0, [r3, #0]
    18a2:	7e43      	ldrb	r3, [r0, #25]

	while (adc_is_syncing(module_inst)) {
    18a4:	b25b      	sxtb	r3, r3
    18a6:	2b00      	cmp	r3, #0
    18a8:	dbfb      	blt.n	18a2 <main+0xc2>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    18aa:	7b02      	ldrb	r2, [r0, #12]
    18ac:	2302      	movs	r3, #2
    18ae:	4313      	orrs	r3, r2
    18b0:	7303      	strb	r3, [r0, #12]
    18b2:	7e43      	ldrb	r3, [r0, #25]

	while (adc_is_syncing(module_inst)) {
    18b4:	b25b      	sxtb	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	dbfb      	blt.n	18b2 <main+0xd2>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    18ba:	2101      	movs	r1, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    18bc:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    18be:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    18c0:	7e02      	ldrb	r2, [r0, #24]
    18c2:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    18c4:	1c0b      	adds	r3, r1, #0
    18c6:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    18c8:	4215      	tst	r5, r2
    18ca:	d000      	beq.n	18ce <main+0xee>
		status_flags |= ADC_STATUS_WINDOW;
    18cc:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    18ce:	4214      	tst	r4, r2
    18d0:	d000      	beq.n	18d4 <main+0xf4>
		status_flags |= ADC_STATUS_OVERRUN;
    18d2:	432b      	orrs	r3, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    18d4:	4219      	tst	r1, r3
    18d6:	d0f3      	beq.n	18c0 <main+0xe0>
    18d8:	7e43      	ldrb	r3, [r0, #25]
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    18da:	b25b      	sxtb	r3, r3
    18dc:	2b00      	cmp	r3, #0
    18de:	dbfb      	blt.n	18d8 <main+0xf8>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    18e0:	8b41      	ldrh	r1, [r0, #26]
    18e2:	b289      	uxth	r1, r1
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    18e4:	2301      	movs	r3, #1
    18e6:	7603      	strb	r3, [r0, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    18e8:	7e02      	ldrb	r2, [r0, #24]
    18ea:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    18ec:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    18ee:	0754      	lsls	r4, r2, #29
    18f0:	d501      	bpl.n	18f6 <main+0x116>
		status_flags |= ADC_STATUS_WINDOW;
    18f2:	2402      	movs	r4, #2
    18f4:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    18f6:	0794      	lsls	r4, r2, #30
    18f8:	d501      	bpl.n	18fe <main+0x11e>
		status_flags |= ADC_STATUS_OVERRUN;
    18fa:	2204      	movs	r2, #4
    18fc:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    18fe:	075a      	lsls	r2, r3, #29
    1900:	d501      	bpl.n	1906 <main+0x126>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1902:	2302      	movs	r3, #2
    1904:	7603      	strb	r3, [r0, #24]
	uint16_t result;	
	do {
		/* Wait for conversion to be done and read out result */
		//printf("%d\n", result);
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
	printf("%d\n", result);
    1906:	4814      	ldr	r0, [pc, #80]	; (1958 <main+0x178>)
    1908:	4b14      	ldr	r3, [pc, #80]	; (195c <main+0x17c>)
    190a:	4798      	blx	r3
//! [get_res]

//! [inf_loop]
//! [inf_loop]
//! [main]
}
    190c:	2000      	movs	r0, #0
    190e:	b011      	add	sp, #68	; 0x44
    1910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	000015f5 	.word	0x000015f5
    1918:	00160002 	.word	0x00160002
    191c:	00170002 	.word	0x00170002
    1920:	200000c8 	.word	0x200000c8
    1924:	2000010c 	.word	0x2000010c
    1928:	00001769 	.word	0x00001769
    192c:	20000108 	.word	0x20000108
    1930:	0000173d 	.word	0x0000173d
    1934:	20000104 	.word	0x20000104
    1938:	42001400 	.word	0x42001400
    193c:	00000595 	.word	0x00000595
    1940:	20000064 	.word	0x20000064
    1944:	00001ae9 	.word	0x00001ae9
    1948:	00000b1d 	.word	0x00000b1d
    194c:	e000e100 	.word	0xe000e100
    1950:	00001781 	.word	0x00001781
    1954:	20000128 	.word	0x20000128
    1958:	00002b44 	.word	0x00002b44
    195c:	00001ab5 	.word	0x00001ab5

00001960 <__aeabi_uidiv>:
    1960:	2900      	cmp	r1, #0
    1962:	d034      	beq.n	19ce <.udivsi3_skip_div0_test+0x6a>

00001964 <.udivsi3_skip_div0_test>:
    1964:	2301      	movs	r3, #1
    1966:	2200      	movs	r2, #0
    1968:	b410      	push	{r4}
    196a:	4288      	cmp	r0, r1
    196c:	d32c      	bcc.n	19c8 <.udivsi3_skip_div0_test+0x64>
    196e:	2401      	movs	r4, #1
    1970:	0724      	lsls	r4, r4, #28
    1972:	42a1      	cmp	r1, r4
    1974:	d204      	bcs.n	1980 <.udivsi3_skip_div0_test+0x1c>
    1976:	4281      	cmp	r1, r0
    1978:	d202      	bcs.n	1980 <.udivsi3_skip_div0_test+0x1c>
    197a:	0109      	lsls	r1, r1, #4
    197c:	011b      	lsls	r3, r3, #4
    197e:	e7f8      	b.n	1972 <.udivsi3_skip_div0_test+0xe>
    1980:	00e4      	lsls	r4, r4, #3
    1982:	42a1      	cmp	r1, r4
    1984:	d204      	bcs.n	1990 <.udivsi3_skip_div0_test+0x2c>
    1986:	4281      	cmp	r1, r0
    1988:	d202      	bcs.n	1990 <.udivsi3_skip_div0_test+0x2c>
    198a:	0049      	lsls	r1, r1, #1
    198c:	005b      	lsls	r3, r3, #1
    198e:	e7f8      	b.n	1982 <.udivsi3_skip_div0_test+0x1e>
    1990:	4288      	cmp	r0, r1
    1992:	d301      	bcc.n	1998 <.udivsi3_skip_div0_test+0x34>
    1994:	1a40      	subs	r0, r0, r1
    1996:	431a      	orrs	r2, r3
    1998:	084c      	lsrs	r4, r1, #1
    199a:	42a0      	cmp	r0, r4
    199c:	d302      	bcc.n	19a4 <.udivsi3_skip_div0_test+0x40>
    199e:	1b00      	subs	r0, r0, r4
    19a0:	085c      	lsrs	r4, r3, #1
    19a2:	4322      	orrs	r2, r4
    19a4:	088c      	lsrs	r4, r1, #2
    19a6:	42a0      	cmp	r0, r4
    19a8:	d302      	bcc.n	19b0 <.udivsi3_skip_div0_test+0x4c>
    19aa:	1b00      	subs	r0, r0, r4
    19ac:	089c      	lsrs	r4, r3, #2
    19ae:	4322      	orrs	r2, r4
    19b0:	08cc      	lsrs	r4, r1, #3
    19b2:	42a0      	cmp	r0, r4
    19b4:	d302      	bcc.n	19bc <.udivsi3_skip_div0_test+0x58>
    19b6:	1b00      	subs	r0, r0, r4
    19b8:	08dc      	lsrs	r4, r3, #3
    19ba:	4322      	orrs	r2, r4
    19bc:	2800      	cmp	r0, #0
    19be:	d003      	beq.n	19c8 <.udivsi3_skip_div0_test+0x64>
    19c0:	091b      	lsrs	r3, r3, #4
    19c2:	d001      	beq.n	19c8 <.udivsi3_skip_div0_test+0x64>
    19c4:	0909      	lsrs	r1, r1, #4
    19c6:	e7e3      	b.n	1990 <.udivsi3_skip_div0_test+0x2c>
    19c8:	1c10      	adds	r0, r2, #0
    19ca:	bc10      	pop	{r4}
    19cc:	4770      	bx	lr
    19ce:	2800      	cmp	r0, #0
    19d0:	d001      	beq.n	19d6 <.udivsi3_skip_div0_test+0x72>
    19d2:	2000      	movs	r0, #0
    19d4:	43c0      	mvns	r0, r0
    19d6:	b407      	push	{r0, r1, r2}
    19d8:	4802      	ldr	r0, [pc, #8]	; (19e4 <.udivsi3_skip_div0_test+0x80>)
    19da:	a102      	add	r1, pc, #8	; (adr r1, 19e4 <.udivsi3_skip_div0_test+0x80>)
    19dc:	1840      	adds	r0, r0, r1
    19de:	9002      	str	r0, [sp, #8]
    19e0:	bd03      	pop	{r0, r1, pc}
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	00000019 	.word	0x00000019

000019e8 <__aeabi_uidivmod>:
    19e8:	2900      	cmp	r1, #0
    19ea:	d0f0      	beq.n	19ce <.udivsi3_skip_div0_test+0x6a>
    19ec:	b503      	push	{r0, r1, lr}
    19ee:	f7ff ffb9 	bl	1964 <.udivsi3_skip_div0_test>
    19f2:	bc0e      	pop	{r1, r2, r3}
    19f4:	4342      	muls	r2, r0
    19f6:	1a89      	subs	r1, r1, r2
    19f8:	4718      	bx	r3
    19fa:	46c0      	nop			; (mov r8, r8)

000019fc <__aeabi_idiv0>:
    19fc:	4770      	bx	lr
    19fe:	46c0      	nop			; (mov r8, r8)

00001a00 <__aeabi_lmul>:
    1a00:	469c      	mov	ip, r3
    1a02:	0403      	lsls	r3, r0, #16
    1a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a06:	0c1b      	lsrs	r3, r3, #16
    1a08:	0417      	lsls	r7, r2, #16
    1a0a:	0c3f      	lsrs	r7, r7, #16
    1a0c:	0c15      	lsrs	r5, r2, #16
    1a0e:	1c1e      	adds	r6, r3, #0
    1a10:	1c04      	adds	r4, r0, #0
    1a12:	0c00      	lsrs	r0, r0, #16
    1a14:	437e      	muls	r6, r7
    1a16:	436b      	muls	r3, r5
    1a18:	4347      	muls	r7, r0
    1a1a:	4345      	muls	r5, r0
    1a1c:	18fb      	adds	r3, r7, r3
    1a1e:	0c30      	lsrs	r0, r6, #16
    1a20:	1818      	adds	r0, r3, r0
    1a22:	4287      	cmp	r7, r0
    1a24:	d902      	bls.n	1a2c <__aeabi_lmul+0x2c>
    1a26:	2380      	movs	r3, #128	; 0x80
    1a28:	025b      	lsls	r3, r3, #9
    1a2a:	18ed      	adds	r5, r5, r3
    1a2c:	0c03      	lsrs	r3, r0, #16
    1a2e:	18ed      	adds	r5, r5, r3
    1a30:	4663      	mov	r3, ip
    1a32:	435c      	muls	r4, r3
    1a34:	434a      	muls	r2, r1
    1a36:	0436      	lsls	r6, r6, #16
    1a38:	0c36      	lsrs	r6, r6, #16
    1a3a:	18a1      	adds	r1, r4, r2
    1a3c:	0400      	lsls	r0, r0, #16
    1a3e:	1980      	adds	r0, r0, r6
    1a40:	1949      	adds	r1, r1, r5
    1a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a44 <__libc_init_array>:
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	4b0e      	ldr	r3, [pc, #56]	; (1a80 <__libc_init_array+0x3c>)
    1a48:	4d0e      	ldr	r5, [pc, #56]	; (1a84 <__libc_init_array+0x40>)
    1a4a:	2400      	movs	r4, #0
    1a4c:	1aed      	subs	r5, r5, r3
    1a4e:	10ad      	asrs	r5, r5, #2
    1a50:	1c1e      	adds	r6, r3, #0
    1a52:	42ac      	cmp	r4, r5
    1a54:	d004      	beq.n	1a60 <__libc_init_array+0x1c>
    1a56:	00a3      	lsls	r3, r4, #2
    1a58:	58f3      	ldr	r3, [r6, r3]
    1a5a:	4798      	blx	r3
    1a5c:	3401      	adds	r4, #1
    1a5e:	e7f8      	b.n	1a52 <__libc_init_array+0xe>
    1a60:	f001 f8c0 	bl	2be4 <_init>
    1a64:	4b08      	ldr	r3, [pc, #32]	; (1a88 <__libc_init_array+0x44>)
    1a66:	4d09      	ldr	r5, [pc, #36]	; (1a8c <__libc_init_array+0x48>)
    1a68:	2400      	movs	r4, #0
    1a6a:	1aed      	subs	r5, r5, r3
    1a6c:	10ad      	asrs	r5, r5, #2
    1a6e:	1c1e      	adds	r6, r3, #0
    1a70:	42ac      	cmp	r4, r5
    1a72:	d004      	beq.n	1a7e <__libc_init_array+0x3a>
    1a74:	00a3      	lsls	r3, r4, #2
    1a76:	58f3      	ldr	r3, [r6, r3]
    1a78:	4798      	blx	r3
    1a7a:	3401      	adds	r4, #1
    1a7c:	e7f8      	b.n	1a70 <__libc_init_array+0x2c>
    1a7e:	bd70      	pop	{r4, r5, r6, pc}
    1a80:	00002bf0 	.word	0x00002bf0
    1a84:	00002bf0 	.word	0x00002bf0
    1a88:	00002bf0 	.word	0x00002bf0
    1a8c:	00002bf4 	.word	0x00002bf4

00001a90 <memcpy>:
    1a90:	b510      	push	{r4, lr}
    1a92:	2300      	movs	r3, #0
    1a94:	4293      	cmp	r3, r2
    1a96:	d003      	beq.n	1aa0 <memcpy+0x10>
    1a98:	5ccc      	ldrb	r4, [r1, r3]
    1a9a:	54c4      	strb	r4, [r0, r3]
    1a9c:	3301      	adds	r3, #1
    1a9e:	e7f9      	b.n	1a94 <memcpy+0x4>
    1aa0:	bd10      	pop	{r4, pc}

00001aa2 <memset>:
    1aa2:	1c03      	adds	r3, r0, #0
    1aa4:	1882      	adds	r2, r0, r2
    1aa6:	4293      	cmp	r3, r2
    1aa8:	d002      	beq.n	1ab0 <memset+0xe>
    1aaa:	7019      	strb	r1, [r3, #0]
    1aac:	3301      	adds	r3, #1
    1aae:	e7fa      	b.n	1aa6 <memset+0x4>
    1ab0:	4770      	bx	lr
	...

00001ab4 <iprintf>:
    1ab4:	b40f      	push	{r0, r1, r2, r3}
    1ab6:	4b0b      	ldr	r3, [pc, #44]	; (1ae4 <iprintf+0x30>)
    1ab8:	b513      	push	{r0, r1, r4, lr}
    1aba:	681c      	ldr	r4, [r3, #0]
    1abc:	2c00      	cmp	r4, #0
    1abe:	d005      	beq.n	1acc <iprintf+0x18>
    1ac0:	69a3      	ldr	r3, [r4, #24]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d102      	bne.n	1acc <iprintf+0x18>
    1ac6:	1c20      	adds	r0, r4, #0
    1ac8:	f000 fd2c 	bl	2524 <__sinit>
    1acc:	ab05      	add	r3, sp, #20
    1ace:	68a1      	ldr	r1, [r4, #8]
    1ad0:	1c20      	adds	r0, r4, #0
    1ad2:	9a04      	ldr	r2, [sp, #16]
    1ad4:	9301      	str	r3, [sp, #4]
    1ad6:	f000 f8bf 	bl	1c58 <_vfiprintf_r>
    1ada:	bc16      	pop	{r1, r2, r4}
    1adc:	bc08      	pop	{r3}
    1ade:	b004      	add	sp, #16
    1ae0:	4718      	bx	r3
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	20000064 	.word	0x20000064

00001ae8 <setbuf>:
    1ae8:	b508      	push	{r3, lr}
    1aea:	424a      	negs	r2, r1
    1aec:	414a      	adcs	r2, r1
    1aee:	2380      	movs	r3, #128	; 0x80
    1af0:	0052      	lsls	r2, r2, #1
    1af2:	00db      	lsls	r3, r3, #3
    1af4:	f000 f802 	bl	1afc <setvbuf>
    1af8:	bd08      	pop	{r3, pc}
	...

00001afc <setvbuf>:
    1afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1afe:	1c1e      	adds	r6, r3, #0
    1b00:	4b3c      	ldr	r3, [pc, #240]	; (1bf4 <setvbuf+0xf8>)
    1b02:	1c04      	adds	r4, r0, #0
    1b04:	681d      	ldr	r5, [r3, #0]
    1b06:	1c0f      	adds	r7, r1, #0
    1b08:	9201      	str	r2, [sp, #4]
    1b0a:	2d00      	cmp	r5, #0
    1b0c:	d005      	beq.n	1b1a <setvbuf+0x1e>
    1b0e:	69aa      	ldr	r2, [r5, #24]
    1b10:	2a00      	cmp	r2, #0
    1b12:	d102      	bne.n	1b1a <setvbuf+0x1e>
    1b14:	1c28      	adds	r0, r5, #0
    1b16:	f000 fd05 	bl	2524 <__sinit>
    1b1a:	4b37      	ldr	r3, [pc, #220]	; (1bf8 <setvbuf+0xfc>)
    1b1c:	429c      	cmp	r4, r3
    1b1e:	d101      	bne.n	1b24 <setvbuf+0x28>
    1b20:	686c      	ldr	r4, [r5, #4]
    1b22:	e008      	b.n	1b36 <setvbuf+0x3a>
    1b24:	4b35      	ldr	r3, [pc, #212]	; (1bfc <setvbuf+0x100>)
    1b26:	429c      	cmp	r4, r3
    1b28:	d101      	bne.n	1b2e <setvbuf+0x32>
    1b2a:	68ac      	ldr	r4, [r5, #8]
    1b2c:	e003      	b.n	1b36 <setvbuf+0x3a>
    1b2e:	4b34      	ldr	r3, [pc, #208]	; (1c00 <setvbuf+0x104>)
    1b30:	429c      	cmp	r4, r3
    1b32:	d100      	bne.n	1b36 <setvbuf+0x3a>
    1b34:	68ec      	ldr	r4, [r5, #12]
    1b36:	9b01      	ldr	r3, [sp, #4]
    1b38:	2b02      	cmp	r3, #2
    1b3a:	d857      	bhi.n	1bec <setvbuf+0xf0>
    1b3c:	2e00      	cmp	r6, #0
    1b3e:	db55      	blt.n	1bec <setvbuf+0xf0>
    1b40:	1c28      	adds	r0, r5, #0
    1b42:	1c21      	adds	r1, r4, #0
    1b44:	f000 fc6e 	bl	2424 <_fflush_r>
    1b48:	2300      	movs	r3, #0
    1b4a:	6063      	str	r3, [r4, #4]
    1b4c:	61a3      	str	r3, [r4, #24]
    1b4e:	89a3      	ldrh	r3, [r4, #12]
    1b50:	061a      	lsls	r2, r3, #24
    1b52:	d503      	bpl.n	1b5c <setvbuf+0x60>
    1b54:	1c28      	adds	r0, r5, #0
    1b56:	6921      	ldr	r1, [r4, #16]
    1b58:	f000 fdba 	bl	26d0 <_free_r>
    1b5c:	89a3      	ldrh	r3, [r4, #12]
    1b5e:	2283      	movs	r2, #131	; 0x83
    1b60:	4393      	bics	r3, r2
    1b62:	81a3      	strh	r3, [r4, #12]
    1b64:	9b01      	ldr	r3, [sp, #4]
    1b66:	2b02      	cmp	r3, #2
    1b68:	d013      	beq.n	1b92 <setvbuf+0x96>
    1b6a:	2f00      	cmp	r7, #0
    1b6c:	d125      	bne.n	1bba <setvbuf+0xbe>
    1b6e:	2e00      	cmp	r6, #0
    1b70:	d101      	bne.n	1b76 <setvbuf+0x7a>
    1b72:	2680      	movs	r6, #128	; 0x80
    1b74:	00f6      	lsls	r6, r6, #3
    1b76:	1c30      	adds	r0, r6, #0
    1b78:	f000 fd94 	bl	26a4 <malloc>
    1b7c:	1e07      	subs	r7, r0, #0
    1b7e:	d118      	bne.n	1bb2 <setvbuf+0xb6>
    1b80:	2080      	movs	r0, #128	; 0x80
    1b82:	00c0      	lsls	r0, r0, #3
    1b84:	f000 fd8e 	bl	26a4 <malloc>
    1b88:	1e07      	subs	r7, r0, #0
    1b8a:	d110      	bne.n	1bae <setvbuf+0xb2>
    1b8c:	2001      	movs	r0, #1
    1b8e:	4240      	negs	r0, r0
    1b90:	e000      	b.n	1b94 <setvbuf+0x98>
    1b92:	2000      	movs	r0, #0
    1b94:	89a3      	ldrh	r3, [r4, #12]
    1b96:	2202      	movs	r2, #2
    1b98:	4313      	orrs	r3, r2
    1b9a:	81a3      	strh	r3, [r4, #12]
    1b9c:	2300      	movs	r3, #0
    1b9e:	60a3      	str	r3, [r4, #8]
    1ba0:	1c23      	adds	r3, r4, #0
    1ba2:	3347      	adds	r3, #71	; 0x47
    1ba4:	6023      	str	r3, [r4, #0]
    1ba6:	6123      	str	r3, [r4, #16]
    1ba8:	2301      	movs	r3, #1
    1baa:	6163      	str	r3, [r4, #20]
    1bac:	e020      	b.n	1bf0 <setvbuf+0xf4>
    1bae:	2680      	movs	r6, #128	; 0x80
    1bb0:	00f6      	lsls	r6, r6, #3
    1bb2:	89a3      	ldrh	r3, [r4, #12]
    1bb4:	2280      	movs	r2, #128	; 0x80
    1bb6:	4313      	orrs	r3, r2
    1bb8:	81a3      	strh	r3, [r4, #12]
    1bba:	9a01      	ldr	r2, [sp, #4]
    1bbc:	2a01      	cmp	r2, #1
    1bbe:	d104      	bne.n	1bca <setvbuf+0xce>
    1bc0:	89a3      	ldrh	r3, [r4, #12]
    1bc2:	4313      	orrs	r3, r2
    1bc4:	81a3      	strh	r3, [r4, #12]
    1bc6:	4273      	negs	r3, r6
    1bc8:	61a3      	str	r3, [r4, #24]
    1bca:	4b0e      	ldr	r3, [pc, #56]	; (1c04 <setvbuf+0x108>)
    1bcc:	2000      	movs	r0, #0
    1bce:	62ab      	str	r3, [r5, #40]	; 0x28
    1bd0:	89a3      	ldrh	r3, [r4, #12]
    1bd2:	6027      	str	r7, [r4, #0]
    1bd4:	6127      	str	r7, [r4, #16]
    1bd6:	6166      	str	r6, [r4, #20]
    1bd8:	071a      	lsls	r2, r3, #28
    1bda:	d509      	bpl.n	1bf0 <setvbuf+0xf4>
    1bdc:	2203      	movs	r2, #3
    1bde:	4013      	ands	r3, r2
    1be0:	425a      	negs	r2, r3
    1be2:	4153      	adcs	r3, r2
    1be4:	425b      	negs	r3, r3
    1be6:	401e      	ands	r6, r3
    1be8:	60a6      	str	r6, [r4, #8]
    1bea:	e001      	b.n	1bf0 <setvbuf+0xf4>
    1bec:	2001      	movs	r0, #1
    1bee:	4240      	negs	r0, r0
    1bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	20000064 	.word	0x20000064
    1bf8:	00002b84 	.word	0x00002b84
    1bfc:	00002ba4 	.word	0x00002ba4
    1c00:	00002bc4 	.word	0x00002bc4
    1c04:	0000247d 	.word	0x0000247d

00001c08 <__sfputc_r>:
    1c08:	6893      	ldr	r3, [r2, #8]
    1c0a:	b510      	push	{r4, lr}
    1c0c:	3b01      	subs	r3, #1
    1c0e:	6093      	str	r3, [r2, #8]
    1c10:	2b00      	cmp	r3, #0
    1c12:	da05      	bge.n	1c20 <__sfputc_r+0x18>
    1c14:	6994      	ldr	r4, [r2, #24]
    1c16:	42a3      	cmp	r3, r4
    1c18:	db08      	blt.n	1c2c <__sfputc_r+0x24>
    1c1a:	b2cb      	uxtb	r3, r1
    1c1c:	2b0a      	cmp	r3, #10
    1c1e:	d005      	beq.n	1c2c <__sfputc_r+0x24>
    1c20:	6813      	ldr	r3, [r2, #0]
    1c22:	1c58      	adds	r0, r3, #1
    1c24:	6010      	str	r0, [r2, #0]
    1c26:	7019      	strb	r1, [r3, #0]
    1c28:	b2c8      	uxtb	r0, r1
    1c2a:	e001      	b.n	1c30 <__sfputc_r+0x28>
    1c2c:	f000 faa6 	bl	217c <__swbuf_r>
    1c30:	bd10      	pop	{r4, pc}

00001c32 <__sfputs_r>:
    1c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c34:	1c06      	adds	r6, r0, #0
    1c36:	1c0f      	adds	r7, r1, #0
    1c38:	1c14      	adds	r4, r2, #0
    1c3a:	18d5      	adds	r5, r2, r3
    1c3c:	42ac      	cmp	r4, r5
    1c3e:	d008      	beq.n	1c52 <__sfputs_r+0x20>
    1c40:	7821      	ldrb	r1, [r4, #0]
    1c42:	1c30      	adds	r0, r6, #0
    1c44:	1c3a      	adds	r2, r7, #0
    1c46:	f7ff ffdf 	bl	1c08 <__sfputc_r>
    1c4a:	3401      	adds	r4, #1
    1c4c:	1c43      	adds	r3, r0, #1
    1c4e:	d1f5      	bne.n	1c3c <__sfputs_r+0xa>
    1c50:	e000      	b.n	1c54 <__sfputs_r+0x22>
    1c52:	2000      	movs	r0, #0
    1c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001c58 <_vfiprintf_r>:
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5a:	b09f      	sub	sp, #124	; 0x7c
    1c5c:	1c06      	adds	r6, r0, #0
    1c5e:	1c0f      	adds	r7, r1, #0
    1c60:	9203      	str	r2, [sp, #12]
    1c62:	9305      	str	r3, [sp, #20]
    1c64:	2800      	cmp	r0, #0
    1c66:	d004      	beq.n	1c72 <_vfiprintf_r+0x1a>
    1c68:	6981      	ldr	r1, [r0, #24]
    1c6a:	2900      	cmp	r1, #0
    1c6c:	d101      	bne.n	1c72 <_vfiprintf_r+0x1a>
    1c6e:	f000 fc59 	bl	2524 <__sinit>
    1c72:	4b75      	ldr	r3, [pc, #468]	; (1e48 <_vfiprintf_r+0x1f0>)
    1c74:	429f      	cmp	r7, r3
    1c76:	d101      	bne.n	1c7c <_vfiprintf_r+0x24>
    1c78:	6877      	ldr	r7, [r6, #4]
    1c7a:	e008      	b.n	1c8e <_vfiprintf_r+0x36>
    1c7c:	4b73      	ldr	r3, [pc, #460]	; (1e4c <_vfiprintf_r+0x1f4>)
    1c7e:	429f      	cmp	r7, r3
    1c80:	d101      	bne.n	1c86 <_vfiprintf_r+0x2e>
    1c82:	68b7      	ldr	r7, [r6, #8]
    1c84:	e003      	b.n	1c8e <_vfiprintf_r+0x36>
    1c86:	4b72      	ldr	r3, [pc, #456]	; (1e50 <_vfiprintf_r+0x1f8>)
    1c88:	429f      	cmp	r7, r3
    1c8a:	d100      	bne.n	1c8e <_vfiprintf_r+0x36>
    1c8c:	68f7      	ldr	r7, [r6, #12]
    1c8e:	89bb      	ldrh	r3, [r7, #12]
    1c90:	071a      	lsls	r2, r3, #28
    1c92:	d50a      	bpl.n	1caa <_vfiprintf_r+0x52>
    1c94:	693b      	ldr	r3, [r7, #16]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d007      	beq.n	1caa <_vfiprintf_r+0x52>
    1c9a:	ad06      	add	r5, sp, #24
    1c9c:	2300      	movs	r3, #0
    1c9e:	616b      	str	r3, [r5, #20]
    1ca0:	2320      	movs	r3, #32
    1ca2:	766b      	strb	r3, [r5, #25]
    1ca4:	2330      	movs	r3, #48	; 0x30
    1ca6:	76ab      	strb	r3, [r5, #26]
    1ca8:	e03b      	b.n	1d22 <_vfiprintf_r+0xca>
    1caa:	1c30      	adds	r0, r6, #0
    1cac:	1c39      	adds	r1, r7, #0
    1cae:	f000 fabd 	bl	222c <__swsetup_r>
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d0f1      	beq.n	1c9a <_vfiprintf_r+0x42>
    1cb6:	2001      	movs	r0, #1
    1cb8:	4240      	negs	r0, r0
    1cba:	e0c2      	b.n	1e42 <_vfiprintf_r+0x1ea>
    1cbc:	9a05      	ldr	r2, [sp, #20]
    1cbe:	1d11      	adds	r1, r2, #4
    1cc0:	6812      	ldr	r2, [r2, #0]
    1cc2:	9105      	str	r1, [sp, #20]
    1cc4:	2a00      	cmp	r2, #0
    1cc6:	db76      	blt.n	1db6 <_vfiprintf_r+0x15e>
    1cc8:	9209      	str	r2, [sp, #36]	; 0x24
    1cca:	3401      	adds	r4, #1
    1ccc:	7823      	ldrb	r3, [r4, #0]
    1cce:	2b2e      	cmp	r3, #46	; 0x2e
    1cd0:	d100      	bne.n	1cd4 <_vfiprintf_r+0x7c>
    1cd2:	e081      	b.n	1dd8 <_vfiprintf_r+0x180>
    1cd4:	7821      	ldrb	r1, [r4, #0]
    1cd6:	485f      	ldr	r0, [pc, #380]	; (1e54 <_vfiprintf_r+0x1fc>)
    1cd8:	2203      	movs	r2, #3
    1cda:	f000 fced 	bl	26b8 <memchr>
    1cde:	2800      	cmp	r0, #0
    1ce0:	d007      	beq.n	1cf2 <_vfiprintf_r+0x9a>
    1ce2:	495c      	ldr	r1, [pc, #368]	; (1e54 <_vfiprintf_r+0x1fc>)
    1ce4:	682a      	ldr	r2, [r5, #0]
    1ce6:	1a43      	subs	r3, r0, r1
    1ce8:	2040      	movs	r0, #64	; 0x40
    1cea:	4098      	lsls	r0, r3
    1cec:	4310      	orrs	r0, r2
    1cee:	6028      	str	r0, [r5, #0]
    1cf0:	3401      	adds	r4, #1
    1cf2:	7821      	ldrb	r1, [r4, #0]
    1cf4:	1c63      	adds	r3, r4, #1
    1cf6:	4858      	ldr	r0, [pc, #352]	; (1e58 <_vfiprintf_r+0x200>)
    1cf8:	2206      	movs	r2, #6
    1cfa:	9303      	str	r3, [sp, #12]
    1cfc:	7629      	strb	r1, [r5, #24]
    1cfe:	f000 fcdb 	bl	26b8 <memchr>
    1d02:	2800      	cmp	r0, #0
    1d04:	d100      	bne.n	1d08 <_vfiprintf_r+0xb0>
    1d06:	e08a      	b.n	1e1e <_vfiprintf_r+0x1c6>
    1d08:	4b54      	ldr	r3, [pc, #336]	; (1e5c <_vfiprintf_r+0x204>)
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d17e      	bne.n	1e0c <_vfiprintf_r+0x1b4>
    1d0e:	9b05      	ldr	r3, [sp, #20]
    1d10:	2207      	movs	r2, #7
    1d12:	3307      	adds	r3, #7
    1d14:	4393      	bics	r3, r2
    1d16:	3308      	adds	r3, #8
    1d18:	9305      	str	r3, [sp, #20]
    1d1a:	696a      	ldr	r2, [r5, #20]
    1d1c:	9904      	ldr	r1, [sp, #16]
    1d1e:	1853      	adds	r3, r2, r1
    1d20:	616b      	str	r3, [r5, #20]
    1d22:	9c03      	ldr	r4, [sp, #12]
    1d24:	7823      	ldrb	r3, [r4, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d104      	bne.n	1d34 <_vfiprintf_r+0xdc>
    1d2a:	9903      	ldr	r1, [sp, #12]
    1d2c:	1a61      	subs	r1, r4, r1
    1d2e:	9102      	str	r1, [sp, #8]
    1d30:	d010      	beq.n	1d54 <_vfiprintf_r+0xfc>
    1d32:	e003      	b.n	1d3c <_vfiprintf_r+0xe4>
    1d34:	2b25      	cmp	r3, #37	; 0x25
    1d36:	d0f8      	beq.n	1d2a <_vfiprintf_r+0xd2>
    1d38:	3401      	adds	r4, #1
    1d3a:	e7f3      	b.n	1d24 <_vfiprintf_r+0xcc>
    1d3c:	1c30      	adds	r0, r6, #0
    1d3e:	1c39      	adds	r1, r7, #0
    1d40:	9a03      	ldr	r2, [sp, #12]
    1d42:	9b02      	ldr	r3, [sp, #8]
    1d44:	f7ff ff75 	bl	1c32 <__sfputs_r>
    1d48:	3001      	adds	r0, #1
    1d4a:	d075      	beq.n	1e38 <_vfiprintf_r+0x1e0>
    1d4c:	696a      	ldr	r2, [r5, #20]
    1d4e:	9902      	ldr	r1, [sp, #8]
    1d50:	1853      	adds	r3, r2, r1
    1d52:	616b      	str	r3, [r5, #20]
    1d54:	7823      	ldrb	r3, [r4, #0]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d06e      	beq.n	1e38 <_vfiprintf_r+0x1e0>
    1d5a:	2201      	movs	r2, #1
    1d5c:	4252      	negs	r2, r2
    1d5e:	606a      	str	r2, [r5, #4]
    1d60:	466a      	mov	r2, sp
    1d62:	2300      	movs	r3, #0
    1d64:	325b      	adds	r2, #91	; 0x5b
    1d66:	3401      	adds	r4, #1
    1d68:	602b      	str	r3, [r5, #0]
    1d6a:	60eb      	str	r3, [r5, #12]
    1d6c:	60ab      	str	r3, [r5, #8]
    1d6e:	7013      	strb	r3, [r2, #0]
    1d70:	65ab      	str	r3, [r5, #88]	; 0x58
    1d72:	7821      	ldrb	r1, [r4, #0]
    1d74:	483a      	ldr	r0, [pc, #232]	; (1e60 <_vfiprintf_r+0x208>)
    1d76:	2205      	movs	r2, #5
    1d78:	f000 fc9e 	bl	26b8 <memchr>
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d008      	beq.n	1d92 <_vfiprintf_r+0x13a>
    1d80:	4a37      	ldr	r2, [pc, #220]	; (1e60 <_vfiprintf_r+0x208>)
    1d82:	3401      	adds	r4, #1
    1d84:	1a83      	subs	r3, r0, r2
    1d86:	2001      	movs	r0, #1
    1d88:	4098      	lsls	r0, r3
    1d8a:	682b      	ldr	r3, [r5, #0]
    1d8c:	4318      	orrs	r0, r3
    1d8e:	6028      	str	r0, [r5, #0]
    1d90:	e7ef      	b.n	1d72 <_vfiprintf_r+0x11a>
    1d92:	682b      	ldr	r3, [r5, #0]
    1d94:	06d9      	lsls	r1, r3, #27
    1d96:	d503      	bpl.n	1da0 <_vfiprintf_r+0x148>
    1d98:	466a      	mov	r2, sp
    1d9a:	2120      	movs	r1, #32
    1d9c:	325b      	adds	r2, #91	; 0x5b
    1d9e:	7011      	strb	r1, [r2, #0]
    1da0:	071a      	lsls	r2, r3, #28
    1da2:	d503      	bpl.n	1dac <_vfiprintf_r+0x154>
    1da4:	466a      	mov	r2, sp
    1da6:	212b      	movs	r1, #43	; 0x2b
    1da8:	325b      	adds	r2, #91	; 0x5b
    1daa:	7011      	strb	r1, [r2, #0]
    1dac:	7822      	ldrb	r2, [r4, #0]
    1dae:	2a2a      	cmp	r2, #42	; 0x2a
    1db0:	d084      	beq.n	1cbc <_vfiprintf_r+0x64>
    1db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1db4:	e005      	b.n	1dc2 <_vfiprintf_r+0x16a>
    1db6:	4252      	negs	r2, r2
    1db8:	60ea      	str	r2, [r5, #12]
    1dba:	2202      	movs	r2, #2
    1dbc:	4313      	orrs	r3, r2
    1dbe:	602b      	str	r3, [r5, #0]
    1dc0:	e783      	b.n	1cca <_vfiprintf_r+0x72>
    1dc2:	7822      	ldrb	r2, [r4, #0]
    1dc4:	3a30      	subs	r2, #48	; 0x30
    1dc6:	2a09      	cmp	r2, #9
    1dc8:	d804      	bhi.n	1dd4 <_vfiprintf_r+0x17c>
    1dca:	210a      	movs	r1, #10
    1dcc:	434b      	muls	r3, r1
    1dce:	3401      	adds	r4, #1
    1dd0:	189b      	adds	r3, r3, r2
    1dd2:	e7f6      	b.n	1dc2 <_vfiprintf_r+0x16a>
    1dd4:	9309      	str	r3, [sp, #36]	; 0x24
    1dd6:	e779      	b.n	1ccc <_vfiprintf_r+0x74>
    1dd8:	7863      	ldrb	r3, [r4, #1]
    1dda:	2b2a      	cmp	r3, #42	; 0x2a
    1ddc:	d109      	bne.n	1df2 <_vfiprintf_r+0x19a>
    1dde:	9b05      	ldr	r3, [sp, #20]
    1de0:	3402      	adds	r4, #2
    1de2:	1d1a      	adds	r2, r3, #4
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	9205      	str	r2, [sp, #20]
    1de8:	2b00      	cmp	r3, #0
    1dea:	da0d      	bge.n	1e08 <_vfiprintf_r+0x1b0>
    1dec:	2301      	movs	r3, #1
    1dee:	425b      	negs	r3, r3
    1df0:	e00a      	b.n	1e08 <_vfiprintf_r+0x1b0>
    1df2:	3401      	adds	r4, #1
    1df4:	2300      	movs	r3, #0
    1df6:	7822      	ldrb	r2, [r4, #0]
    1df8:	3a30      	subs	r2, #48	; 0x30
    1dfa:	2a09      	cmp	r2, #9
    1dfc:	d804      	bhi.n	1e08 <_vfiprintf_r+0x1b0>
    1dfe:	210a      	movs	r1, #10
    1e00:	434b      	muls	r3, r1
    1e02:	3401      	adds	r4, #1
    1e04:	189b      	adds	r3, r3, r2
    1e06:	e7f6      	b.n	1df6 <_vfiprintf_r+0x19e>
    1e08:	9307      	str	r3, [sp, #28]
    1e0a:	e763      	b.n	1cd4 <_vfiprintf_r+0x7c>
    1e0c:	ab05      	add	r3, sp, #20
    1e0e:	9300      	str	r3, [sp, #0]
    1e10:	1c30      	adds	r0, r6, #0
    1e12:	1c29      	adds	r1, r5, #0
    1e14:	1c3a      	adds	r2, r7, #0
    1e16:	4b13      	ldr	r3, [pc, #76]	; (1e64 <_vfiprintf_r+0x20c>)
    1e18:	e000      	b.n	1e1c <_vfiprintf_r+0x1c4>
    1e1a:	bf00      	nop
    1e1c:	e007      	b.n	1e2e <_vfiprintf_r+0x1d6>
    1e1e:	ab05      	add	r3, sp, #20
    1e20:	9300      	str	r3, [sp, #0]
    1e22:	1c30      	adds	r0, r6, #0
    1e24:	1c29      	adds	r1, r5, #0
    1e26:	1c3a      	adds	r2, r7, #0
    1e28:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <_vfiprintf_r+0x20c>)
    1e2a:	f000 f891 	bl	1f50 <_printf_i>
    1e2e:	9004      	str	r0, [sp, #16]
    1e30:	9904      	ldr	r1, [sp, #16]
    1e32:	3101      	adds	r1, #1
    1e34:	d000      	beq.n	1e38 <_vfiprintf_r+0x1e0>
    1e36:	e770      	b.n	1d1a <_vfiprintf_r+0xc2>
    1e38:	89bb      	ldrh	r3, [r7, #12]
    1e3a:	065a      	lsls	r2, r3, #25
    1e3c:	d500      	bpl.n	1e40 <_vfiprintf_r+0x1e8>
    1e3e:	e73a      	b.n	1cb6 <_vfiprintf_r+0x5e>
    1e40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1e42:	b01f      	add	sp, #124	; 0x7c
    1e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	00002b84 	.word	0x00002b84
    1e4c:	00002ba4 	.word	0x00002ba4
    1e50:	00002bc4 	.word	0x00002bc4
    1e54:	00002b56 	.word	0x00002b56
    1e58:	00002b5a 	.word	0x00002b5a
    1e5c:	00000000 	.word	0x00000000
    1e60:	00002b50 	.word	0x00002b50
    1e64:	00001c33 	.word	0x00001c33

00001e68 <_printf_common>:
    1e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e6a:	1c15      	adds	r5, r2, #0
    1e6c:	9301      	str	r3, [sp, #4]
    1e6e:	690a      	ldr	r2, [r1, #16]
    1e70:	688b      	ldr	r3, [r1, #8]
    1e72:	1c06      	adds	r6, r0, #0
    1e74:	1c0c      	adds	r4, r1, #0
    1e76:	4293      	cmp	r3, r2
    1e78:	da00      	bge.n	1e7c <_printf_common+0x14>
    1e7a:	1c13      	adds	r3, r2, #0
    1e7c:	1c22      	adds	r2, r4, #0
    1e7e:	602b      	str	r3, [r5, #0]
    1e80:	3243      	adds	r2, #67	; 0x43
    1e82:	7812      	ldrb	r2, [r2, #0]
    1e84:	2a00      	cmp	r2, #0
    1e86:	d001      	beq.n	1e8c <_printf_common+0x24>
    1e88:	3301      	adds	r3, #1
    1e8a:	602b      	str	r3, [r5, #0]
    1e8c:	6820      	ldr	r0, [r4, #0]
    1e8e:	0680      	lsls	r0, r0, #26
    1e90:	d502      	bpl.n	1e98 <_printf_common+0x30>
    1e92:	682b      	ldr	r3, [r5, #0]
    1e94:	3302      	adds	r3, #2
    1e96:	602b      	str	r3, [r5, #0]
    1e98:	6821      	ldr	r1, [r4, #0]
    1e9a:	2706      	movs	r7, #6
    1e9c:	400f      	ands	r7, r1
    1e9e:	d01f      	beq.n	1ee0 <_printf_common+0x78>
    1ea0:	1c23      	adds	r3, r4, #0
    1ea2:	3343      	adds	r3, #67	; 0x43
    1ea4:	781b      	ldrb	r3, [r3, #0]
    1ea6:	1e5a      	subs	r2, r3, #1
    1ea8:	4193      	sbcs	r3, r2
    1eaa:	6822      	ldr	r2, [r4, #0]
    1eac:	0692      	lsls	r2, r2, #26
    1eae:	d51f      	bpl.n	1ef0 <_printf_common+0x88>
    1eb0:	18e1      	adds	r1, r4, r3
    1eb2:	3140      	adds	r1, #64	; 0x40
    1eb4:	2030      	movs	r0, #48	; 0x30
    1eb6:	70c8      	strb	r0, [r1, #3]
    1eb8:	1c21      	adds	r1, r4, #0
    1eba:	1c5a      	adds	r2, r3, #1
    1ebc:	3145      	adds	r1, #69	; 0x45
    1ebe:	7809      	ldrb	r1, [r1, #0]
    1ec0:	18a2      	adds	r2, r4, r2
    1ec2:	3240      	adds	r2, #64	; 0x40
    1ec4:	3302      	adds	r3, #2
    1ec6:	70d1      	strb	r1, [r2, #3]
    1ec8:	e012      	b.n	1ef0 <_printf_common+0x88>
    1eca:	1c22      	adds	r2, r4, #0
    1ecc:	1c30      	adds	r0, r6, #0
    1ece:	9901      	ldr	r1, [sp, #4]
    1ed0:	3219      	adds	r2, #25
    1ed2:	2301      	movs	r3, #1
    1ed4:	9f08      	ldr	r7, [sp, #32]
    1ed6:	47b8      	blx	r7
    1ed8:	3001      	adds	r0, #1
    1eda:	d011      	beq.n	1f00 <_printf_common+0x98>
    1edc:	9f00      	ldr	r7, [sp, #0]
    1ede:	3701      	adds	r7, #1
    1ee0:	9700      	str	r7, [sp, #0]
    1ee2:	68e0      	ldr	r0, [r4, #12]
    1ee4:	6829      	ldr	r1, [r5, #0]
    1ee6:	9f00      	ldr	r7, [sp, #0]
    1ee8:	1a43      	subs	r3, r0, r1
    1eea:	429f      	cmp	r7, r3
    1eec:	dbed      	blt.n	1eca <_printf_common+0x62>
    1eee:	e7d7      	b.n	1ea0 <_printf_common+0x38>
    1ef0:	1c22      	adds	r2, r4, #0
    1ef2:	1c30      	adds	r0, r6, #0
    1ef4:	9901      	ldr	r1, [sp, #4]
    1ef6:	3243      	adds	r2, #67	; 0x43
    1ef8:	9f08      	ldr	r7, [sp, #32]
    1efa:	47b8      	blx	r7
    1efc:	3001      	adds	r0, #1
    1efe:	d102      	bne.n	1f06 <_printf_common+0x9e>
    1f00:	2001      	movs	r0, #1
    1f02:	4240      	negs	r0, r0
    1f04:	e023      	b.n	1f4e <_printf_common+0xe6>
    1f06:	6820      	ldr	r0, [r4, #0]
    1f08:	2106      	movs	r1, #6
    1f0a:	682b      	ldr	r3, [r5, #0]
    1f0c:	68e2      	ldr	r2, [r4, #12]
    1f0e:	4001      	ands	r1, r0
    1f10:	2500      	movs	r5, #0
    1f12:	2904      	cmp	r1, #4
    1f14:	d103      	bne.n	1f1e <_printf_common+0xb6>
    1f16:	1ad5      	subs	r5, r2, r3
    1f18:	43eb      	mvns	r3, r5
    1f1a:	17db      	asrs	r3, r3, #31
    1f1c:	401d      	ands	r5, r3
    1f1e:	68a2      	ldr	r2, [r4, #8]
    1f20:	6923      	ldr	r3, [r4, #16]
    1f22:	429a      	cmp	r2, r3
    1f24:	dd01      	ble.n	1f2a <_printf_common+0xc2>
    1f26:	1ad3      	subs	r3, r2, r3
    1f28:	18ed      	adds	r5, r5, r3
    1f2a:	2700      	movs	r7, #0
    1f2c:	9700      	str	r7, [sp, #0]
    1f2e:	9f00      	ldr	r7, [sp, #0]
    1f30:	42af      	cmp	r7, r5
    1f32:	da0b      	bge.n	1f4c <_printf_common+0xe4>
    1f34:	1c22      	adds	r2, r4, #0
    1f36:	1c30      	adds	r0, r6, #0
    1f38:	9901      	ldr	r1, [sp, #4]
    1f3a:	321a      	adds	r2, #26
    1f3c:	2301      	movs	r3, #1
    1f3e:	9f08      	ldr	r7, [sp, #32]
    1f40:	47b8      	blx	r7
    1f42:	3001      	adds	r0, #1
    1f44:	d0dc      	beq.n	1f00 <_printf_common+0x98>
    1f46:	9f00      	ldr	r7, [sp, #0]
    1f48:	3701      	adds	r7, #1
    1f4a:	e7ef      	b.n	1f2c <_printf_common+0xc4>
    1f4c:	2000      	movs	r0, #0
    1f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001f50 <_printf_i>:
    1f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f52:	1c0d      	adds	r5, r1, #0
    1f54:	b08b      	sub	sp, #44	; 0x2c
    1f56:	3543      	adds	r5, #67	; 0x43
    1f58:	9206      	str	r2, [sp, #24]
    1f5a:	9005      	str	r0, [sp, #20]
    1f5c:	9307      	str	r3, [sp, #28]
    1f5e:	9504      	str	r5, [sp, #16]
    1f60:	7e0b      	ldrb	r3, [r1, #24]
    1f62:	1c0c      	adds	r4, r1, #0
    1f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1f66:	2b6e      	cmp	r3, #110	; 0x6e
    1f68:	d100      	bne.n	1f6c <_printf_i+0x1c>
    1f6a:	e0a7      	b.n	20bc <STACK_SIZE+0xbc>
    1f6c:	d811      	bhi.n	1f92 <_printf_i+0x42>
    1f6e:	2b63      	cmp	r3, #99	; 0x63
    1f70:	d022      	beq.n	1fb8 <_printf_i+0x68>
    1f72:	d809      	bhi.n	1f88 <_printf_i+0x38>
    1f74:	2b00      	cmp	r3, #0
    1f76:	d100      	bne.n	1f7a <_printf_i+0x2a>
    1f78:	e0b0      	b.n	20dc <STACK_SIZE+0xdc>
    1f7a:	2b58      	cmp	r3, #88	; 0x58
    1f7c:	d000      	beq.n	1f80 <_printf_i+0x30>
    1f7e:	e0c0      	b.n	2102 <STACK_SIZE+0x102>
    1f80:	3145      	adds	r1, #69	; 0x45
    1f82:	700b      	strb	r3, [r1, #0]
    1f84:	4d7b      	ldr	r5, [pc, #492]	; (2174 <STACK_SIZE+0x174>)
    1f86:	e04e      	b.n	2026 <STACK_SIZE+0x26>
    1f88:	2b64      	cmp	r3, #100	; 0x64
    1f8a:	d01c      	beq.n	1fc6 <_printf_i+0x76>
    1f8c:	2b69      	cmp	r3, #105	; 0x69
    1f8e:	d01a      	beq.n	1fc6 <_printf_i+0x76>
    1f90:	e0b7      	b.n	2102 <STACK_SIZE+0x102>
    1f92:	2b73      	cmp	r3, #115	; 0x73
    1f94:	d100      	bne.n	1f98 <_printf_i+0x48>
    1f96:	e0a5      	b.n	20e4 <STACK_SIZE+0xe4>
    1f98:	d809      	bhi.n	1fae <_printf_i+0x5e>
    1f9a:	2b6f      	cmp	r3, #111	; 0x6f
    1f9c:	d029      	beq.n	1ff2 <_printf_i+0xa2>
    1f9e:	2b70      	cmp	r3, #112	; 0x70
    1fa0:	d000      	beq.n	1fa4 <_printf_i+0x54>
    1fa2:	e0ae      	b.n	2102 <STACK_SIZE+0x102>
    1fa4:	680e      	ldr	r6, [r1, #0]
    1fa6:	2320      	movs	r3, #32
    1fa8:	4333      	orrs	r3, r6
    1faa:	600b      	str	r3, [r1, #0]
    1fac:	e036      	b.n	201c <STACK_SIZE+0x1c>
    1fae:	2b75      	cmp	r3, #117	; 0x75
    1fb0:	d01f      	beq.n	1ff2 <_printf_i+0xa2>
    1fb2:	2b78      	cmp	r3, #120	; 0x78
    1fb4:	d032      	beq.n	201c <STACK_SIZE+0x1c>
    1fb6:	e0a4      	b.n	2102 <STACK_SIZE+0x102>
    1fb8:	6813      	ldr	r3, [r2, #0]
    1fba:	1c0d      	adds	r5, r1, #0
    1fbc:	1d19      	adds	r1, r3, #4
    1fbe:	3542      	adds	r5, #66	; 0x42
    1fc0:	6011      	str	r1, [r2, #0]
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	e09f      	b.n	2106 <STACK_SIZE+0x106>
    1fc6:	6821      	ldr	r1, [r4, #0]
    1fc8:	6813      	ldr	r3, [r2, #0]
    1fca:	060e      	lsls	r6, r1, #24
    1fcc:	d503      	bpl.n	1fd6 <_printf_i+0x86>
    1fce:	1d19      	adds	r1, r3, #4
    1fd0:	6011      	str	r1, [r2, #0]
    1fd2:	681e      	ldr	r6, [r3, #0]
    1fd4:	e005      	b.n	1fe2 <_printf_i+0x92>
    1fd6:	0648      	lsls	r0, r1, #25
    1fd8:	d5f9      	bpl.n	1fce <_printf_i+0x7e>
    1fda:	1d19      	adds	r1, r3, #4
    1fdc:	6011      	str	r1, [r2, #0]
    1fde:	2100      	movs	r1, #0
    1fe0:	5e5e      	ldrsh	r6, [r3, r1]
    1fe2:	4b64      	ldr	r3, [pc, #400]	; (2174 <STACK_SIZE+0x174>)
    1fe4:	2e00      	cmp	r6, #0
    1fe6:	da3b      	bge.n	2060 <STACK_SIZE+0x60>
    1fe8:	9d04      	ldr	r5, [sp, #16]
    1fea:	222d      	movs	r2, #45	; 0x2d
    1fec:	4276      	negs	r6, r6
    1fee:	702a      	strb	r2, [r5, #0]
    1ff0:	e036      	b.n	2060 <STACK_SIZE+0x60>
    1ff2:	6821      	ldr	r1, [r4, #0]
    1ff4:	6813      	ldr	r3, [r2, #0]
    1ff6:	060e      	lsls	r6, r1, #24
    1ff8:	d503      	bpl.n	2002 <STACK_SIZE+0x2>
    1ffa:	1d19      	adds	r1, r3, #4
    1ffc:	6011      	str	r1, [r2, #0]
    1ffe:	681e      	ldr	r6, [r3, #0]
    2000:	e004      	b.n	200c <STACK_SIZE+0xc>
    2002:	0648      	lsls	r0, r1, #25
    2004:	d5f9      	bpl.n	1ffa <_printf_i+0xaa>
    2006:	1d19      	adds	r1, r3, #4
    2008:	881e      	ldrh	r6, [r3, #0]
    200a:	6011      	str	r1, [r2, #0]
    200c:	4b59      	ldr	r3, [pc, #356]	; (2174 <STACK_SIZE+0x174>)
    200e:	7e22      	ldrb	r2, [r4, #24]
    2010:	9303      	str	r3, [sp, #12]
    2012:	2708      	movs	r7, #8
    2014:	2a6f      	cmp	r2, #111	; 0x6f
    2016:	d01e      	beq.n	2056 <STACK_SIZE+0x56>
    2018:	270a      	movs	r7, #10
    201a:	e01c      	b.n	2056 <STACK_SIZE+0x56>
    201c:	1c23      	adds	r3, r4, #0
    201e:	2178      	movs	r1, #120	; 0x78
    2020:	3345      	adds	r3, #69	; 0x45
    2022:	4d55      	ldr	r5, [pc, #340]	; (2178 <STACK_SIZE+0x178>)
    2024:	7019      	strb	r1, [r3, #0]
    2026:	6811      	ldr	r1, [r2, #0]
    2028:	6823      	ldr	r3, [r4, #0]
    202a:	1d08      	adds	r0, r1, #4
    202c:	9503      	str	r5, [sp, #12]
    202e:	6010      	str	r0, [r2, #0]
    2030:	061e      	lsls	r6, r3, #24
    2032:	d501      	bpl.n	2038 <STACK_SIZE+0x38>
    2034:	680e      	ldr	r6, [r1, #0]
    2036:	e002      	b.n	203e <STACK_SIZE+0x3e>
    2038:	0658      	lsls	r0, r3, #25
    203a:	d5fb      	bpl.n	2034 <STACK_SIZE+0x34>
    203c:	880e      	ldrh	r6, [r1, #0]
    203e:	07d9      	lsls	r1, r3, #31
    2040:	d502      	bpl.n	2048 <STACK_SIZE+0x48>
    2042:	2220      	movs	r2, #32
    2044:	4313      	orrs	r3, r2
    2046:	6023      	str	r3, [r4, #0]
    2048:	2710      	movs	r7, #16
    204a:	2e00      	cmp	r6, #0
    204c:	d103      	bne.n	2056 <STACK_SIZE+0x56>
    204e:	6822      	ldr	r2, [r4, #0]
    2050:	2320      	movs	r3, #32
    2052:	439a      	bics	r2, r3
    2054:	6022      	str	r2, [r4, #0]
    2056:	1c23      	adds	r3, r4, #0
    2058:	2200      	movs	r2, #0
    205a:	3343      	adds	r3, #67	; 0x43
    205c:	701a      	strb	r2, [r3, #0]
    205e:	e001      	b.n	2064 <STACK_SIZE+0x64>
    2060:	9303      	str	r3, [sp, #12]
    2062:	270a      	movs	r7, #10
    2064:	6863      	ldr	r3, [r4, #4]
    2066:	60a3      	str	r3, [r4, #8]
    2068:	2b00      	cmp	r3, #0
    206a:	db03      	blt.n	2074 <STACK_SIZE+0x74>
    206c:	6825      	ldr	r5, [r4, #0]
    206e:	2204      	movs	r2, #4
    2070:	4395      	bics	r5, r2
    2072:	6025      	str	r5, [r4, #0]
    2074:	2e00      	cmp	r6, #0
    2076:	d102      	bne.n	207e <STACK_SIZE+0x7e>
    2078:	9d04      	ldr	r5, [sp, #16]
    207a:	2b00      	cmp	r3, #0
    207c:	d00e      	beq.n	209c <STACK_SIZE+0x9c>
    207e:	9d04      	ldr	r5, [sp, #16]
    2080:	1c30      	adds	r0, r6, #0
    2082:	1c39      	adds	r1, r7, #0
    2084:	f7ff fcb0 	bl	19e8 <__aeabi_uidivmod>
    2088:	9803      	ldr	r0, [sp, #12]
    208a:	3d01      	subs	r5, #1
    208c:	5c43      	ldrb	r3, [r0, r1]
    208e:	1c30      	adds	r0, r6, #0
    2090:	702b      	strb	r3, [r5, #0]
    2092:	1c39      	adds	r1, r7, #0
    2094:	f7ff fc64 	bl	1960 <__aeabi_uidiv>
    2098:	1e06      	subs	r6, r0, #0
    209a:	d1f1      	bne.n	2080 <STACK_SIZE+0x80>
    209c:	2f08      	cmp	r7, #8
    209e:	d109      	bne.n	20b4 <STACK_SIZE+0xb4>
    20a0:	6821      	ldr	r1, [r4, #0]
    20a2:	07c9      	lsls	r1, r1, #31
    20a4:	d506      	bpl.n	20b4 <STACK_SIZE+0xb4>
    20a6:	6862      	ldr	r2, [r4, #4]
    20a8:	6923      	ldr	r3, [r4, #16]
    20aa:	429a      	cmp	r2, r3
    20ac:	dc02      	bgt.n	20b4 <STACK_SIZE+0xb4>
    20ae:	3d01      	subs	r5, #1
    20b0:	2330      	movs	r3, #48	; 0x30
    20b2:	702b      	strb	r3, [r5, #0]
    20b4:	9e04      	ldr	r6, [sp, #16]
    20b6:	1b73      	subs	r3, r6, r5
    20b8:	6123      	str	r3, [r4, #16]
    20ba:	e02a      	b.n	2112 <STACK_SIZE+0x112>
    20bc:	6808      	ldr	r0, [r1, #0]
    20be:	6813      	ldr	r3, [r2, #0]
    20c0:	6949      	ldr	r1, [r1, #20]
    20c2:	0605      	lsls	r5, r0, #24
    20c4:	d504      	bpl.n	20d0 <STACK_SIZE+0xd0>
    20c6:	1d18      	adds	r0, r3, #4
    20c8:	6010      	str	r0, [r2, #0]
    20ca:	681b      	ldr	r3, [r3, #0]
    20cc:	6019      	str	r1, [r3, #0]
    20ce:	e005      	b.n	20dc <STACK_SIZE+0xdc>
    20d0:	0646      	lsls	r6, r0, #25
    20d2:	d5f8      	bpl.n	20c6 <STACK_SIZE+0xc6>
    20d4:	1d18      	adds	r0, r3, #4
    20d6:	6010      	str	r0, [r2, #0]
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	8019      	strh	r1, [r3, #0]
    20dc:	2300      	movs	r3, #0
    20de:	6123      	str	r3, [r4, #16]
    20e0:	9d04      	ldr	r5, [sp, #16]
    20e2:	e016      	b.n	2112 <STACK_SIZE+0x112>
    20e4:	6813      	ldr	r3, [r2, #0]
    20e6:	1d19      	adds	r1, r3, #4
    20e8:	6011      	str	r1, [r2, #0]
    20ea:	681d      	ldr	r5, [r3, #0]
    20ec:	1c28      	adds	r0, r5, #0
    20ee:	f000 fbe9 	bl	28c4 <strlen>
    20f2:	6863      	ldr	r3, [r4, #4]
    20f4:	6120      	str	r0, [r4, #16]
    20f6:	4298      	cmp	r0, r3
    20f8:	d900      	bls.n	20fc <STACK_SIZE+0xfc>
    20fa:	6123      	str	r3, [r4, #16]
    20fc:	6920      	ldr	r0, [r4, #16]
    20fe:	6060      	str	r0, [r4, #4]
    2100:	e004      	b.n	210c <STACK_SIZE+0x10c>
    2102:	1c25      	adds	r5, r4, #0
    2104:	3542      	adds	r5, #66	; 0x42
    2106:	702b      	strb	r3, [r5, #0]
    2108:	2301      	movs	r3, #1
    210a:	6123      	str	r3, [r4, #16]
    210c:	9e04      	ldr	r6, [sp, #16]
    210e:	2300      	movs	r3, #0
    2110:	7033      	strb	r3, [r6, #0]
    2112:	9e07      	ldr	r6, [sp, #28]
    2114:	9805      	ldr	r0, [sp, #20]
    2116:	9600      	str	r6, [sp, #0]
    2118:	1c21      	adds	r1, r4, #0
    211a:	aa09      	add	r2, sp, #36	; 0x24
    211c:	9b06      	ldr	r3, [sp, #24]
    211e:	f7ff fea3 	bl	1e68 <_printf_common>
    2122:	3001      	adds	r0, #1
    2124:	d102      	bne.n	212c <STACK_SIZE+0x12c>
    2126:	2001      	movs	r0, #1
    2128:	4240      	negs	r0, r0
    212a:	e021      	b.n	2170 <STACK_SIZE+0x170>
    212c:	1c2a      	adds	r2, r5, #0
    212e:	9805      	ldr	r0, [sp, #20]
    2130:	9906      	ldr	r1, [sp, #24]
    2132:	6923      	ldr	r3, [r4, #16]
    2134:	9d07      	ldr	r5, [sp, #28]
    2136:	47a8      	blx	r5
    2138:	3001      	adds	r0, #1
    213a:	d0f4      	beq.n	2126 <STACK_SIZE+0x126>
    213c:	6826      	ldr	r6, [r4, #0]
    213e:	07b6      	lsls	r6, r6, #30
    2140:	d405      	bmi.n	214e <STACK_SIZE+0x14e>
    2142:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2144:	68e0      	ldr	r0, [r4, #12]
    2146:	4298      	cmp	r0, r3
    2148:	da12      	bge.n	2170 <STACK_SIZE+0x170>
    214a:	1c18      	adds	r0, r3, #0
    214c:	e010      	b.n	2170 <STACK_SIZE+0x170>
    214e:	2500      	movs	r5, #0
    2150:	68e0      	ldr	r0, [r4, #12]
    2152:	9909      	ldr	r1, [sp, #36]	; 0x24
    2154:	1a43      	subs	r3, r0, r1
    2156:	429d      	cmp	r5, r3
    2158:	daf3      	bge.n	2142 <STACK_SIZE+0x142>
    215a:	1c22      	adds	r2, r4, #0
    215c:	9805      	ldr	r0, [sp, #20]
    215e:	9906      	ldr	r1, [sp, #24]
    2160:	3219      	adds	r2, #25
    2162:	2301      	movs	r3, #1
    2164:	9e07      	ldr	r6, [sp, #28]
    2166:	47b0      	blx	r6
    2168:	3001      	adds	r0, #1
    216a:	d0dc      	beq.n	2126 <STACK_SIZE+0x126>
    216c:	3501      	adds	r5, #1
    216e:	e7ef      	b.n	2150 <STACK_SIZE+0x150>
    2170:	b00b      	add	sp, #44	; 0x2c
    2172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2174:	00002b61 	.word	0x00002b61
    2178:	00002b72 	.word	0x00002b72

0000217c <__swbuf_r>:
    217c:	b570      	push	{r4, r5, r6, lr}
    217e:	1c05      	adds	r5, r0, #0
    2180:	1c0e      	adds	r6, r1, #0
    2182:	1c14      	adds	r4, r2, #0
    2184:	2800      	cmp	r0, #0
    2186:	d004      	beq.n	2192 <__swbuf_r+0x16>
    2188:	6982      	ldr	r2, [r0, #24]
    218a:	2a00      	cmp	r2, #0
    218c:	d101      	bne.n	2192 <__swbuf_r+0x16>
    218e:	f000 f9c9 	bl	2524 <__sinit>
    2192:	4b23      	ldr	r3, [pc, #140]	; (2220 <__swbuf_r+0xa4>)
    2194:	429c      	cmp	r4, r3
    2196:	d101      	bne.n	219c <__swbuf_r+0x20>
    2198:	686c      	ldr	r4, [r5, #4]
    219a:	e008      	b.n	21ae <__swbuf_r+0x32>
    219c:	4b21      	ldr	r3, [pc, #132]	; (2224 <__swbuf_r+0xa8>)
    219e:	429c      	cmp	r4, r3
    21a0:	d101      	bne.n	21a6 <__swbuf_r+0x2a>
    21a2:	68ac      	ldr	r4, [r5, #8]
    21a4:	e003      	b.n	21ae <__swbuf_r+0x32>
    21a6:	4b20      	ldr	r3, [pc, #128]	; (2228 <__swbuf_r+0xac>)
    21a8:	429c      	cmp	r4, r3
    21aa:	d100      	bne.n	21ae <__swbuf_r+0x32>
    21ac:	68ec      	ldr	r4, [r5, #12]
    21ae:	69a3      	ldr	r3, [r4, #24]
    21b0:	60a3      	str	r3, [r4, #8]
    21b2:	89a3      	ldrh	r3, [r4, #12]
    21b4:	071a      	lsls	r2, r3, #28
    21b6:	d50a      	bpl.n	21ce <__swbuf_r+0x52>
    21b8:	6923      	ldr	r3, [r4, #16]
    21ba:	2b00      	cmp	r3, #0
    21bc:	d007      	beq.n	21ce <__swbuf_r+0x52>
    21be:	6822      	ldr	r2, [r4, #0]
    21c0:	6923      	ldr	r3, [r4, #16]
    21c2:	b2f6      	uxtb	r6, r6
    21c4:	1ad0      	subs	r0, r2, r3
    21c6:	6962      	ldr	r2, [r4, #20]
    21c8:	4290      	cmp	r0, r2
    21ca:	db0f      	blt.n	21ec <__swbuf_r+0x70>
    21cc:	e008      	b.n	21e0 <__swbuf_r+0x64>
    21ce:	1c28      	adds	r0, r5, #0
    21d0:	1c21      	adds	r1, r4, #0
    21d2:	f000 f82b 	bl	222c <__swsetup_r>
    21d6:	2800      	cmp	r0, #0
    21d8:	d0f1      	beq.n	21be <__swbuf_r+0x42>
    21da:	2001      	movs	r0, #1
    21dc:	4240      	negs	r0, r0
    21de:	e01d      	b.n	221c <__swbuf_r+0xa0>
    21e0:	1c28      	adds	r0, r5, #0
    21e2:	1c21      	adds	r1, r4, #0
    21e4:	f000 f91e 	bl	2424 <_fflush_r>
    21e8:	2800      	cmp	r0, #0
    21ea:	d1f6      	bne.n	21da <__swbuf_r+0x5e>
    21ec:	68a3      	ldr	r3, [r4, #8]
    21ee:	3001      	adds	r0, #1
    21f0:	3b01      	subs	r3, #1
    21f2:	60a3      	str	r3, [r4, #8]
    21f4:	6823      	ldr	r3, [r4, #0]
    21f6:	1c5a      	adds	r2, r3, #1
    21f8:	6022      	str	r2, [r4, #0]
    21fa:	701e      	strb	r6, [r3, #0]
    21fc:	6963      	ldr	r3, [r4, #20]
    21fe:	4298      	cmp	r0, r3
    2200:	d005      	beq.n	220e <__swbuf_r+0x92>
    2202:	89a3      	ldrh	r3, [r4, #12]
    2204:	1c30      	adds	r0, r6, #0
    2206:	07da      	lsls	r2, r3, #31
    2208:	d508      	bpl.n	221c <__swbuf_r+0xa0>
    220a:	2e0a      	cmp	r6, #10
    220c:	d106      	bne.n	221c <__swbuf_r+0xa0>
    220e:	1c28      	adds	r0, r5, #0
    2210:	1c21      	adds	r1, r4, #0
    2212:	f000 f907 	bl	2424 <_fflush_r>
    2216:	2800      	cmp	r0, #0
    2218:	d1df      	bne.n	21da <__swbuf_r+0x5e>
    221a:	1c30      	adds	r0, r6, #0
    221c:	bd70      	pop	{r4, r5, r6, pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	00002b84 	.word	0x00002b84
    2224:	00002ba4 	.word	0x00002ba4
    2228:	00002bc4 	.word	0x00002bc4

0000222c <__swsetup_r>:
    222c:	4b34      	ldr	r3, [pc, #208]	; (2300 <__swsetup_r+0xd4>)
    222e:	b570      	push	{r4, r5, r6, lr}
    2230:	681d      	ldr	r5, [r3, #0]
    2232:	1c06      	adds	r6, r0, #0
    2234:	1c0c      	adds	r4, r1, #0
    2236:	2d00      	cmp	r5, #0
    2238:	d005      	beq.n	2246 <__swsetup_r+0x1a>
    223a:	69a9      	ldr	r1, [r5, #24]
    223c:	2900      	cmp	r1, #0
    223e:	d102      	bne.n	2246 <__swsetup_r+0x1a>
    2240:	1c28      	adds	r0, r5, #0
    2242:	f000 f96f 	bl	2524 <__sinit>
    2246:	4b2f      	ldr	r3, [pc, #188]	; (2304 <__swsetup_r+0xd8>)
    2248:	429c      	cmp	r4, r3
    224a:	d101      	bne.n	2250 <__swsetup_r+0x24>
    224c:	686c      	ldr	r4, [r5, #4]
    224e:	e008      	b.n	2262 <__swsetup_r+0x36>
    2250:	4b2d      	ldr	r3, [pc, #180]	; (2308 <__swsetup_r+0xdc>)
    2252:	429c      	cmp	r4, r3
    2254:	d101      	bne.n	225a <__swsetup_r+0x2e>
    2256:	68ac      	ldr	r4, [r5, #8]
    2258:	e003      	b.n	2262 <__swsetup_r+0x36>
    225a:	4b2c      	ldr	r3, [pc, #176]	; (230c <__swsetup_r+0xe0>)
    225c:	429c      	cmp	r4, r3
    225e:	d100      	bne.n	2262 <__swsetup_r+0x36>
    2260:	68ec      	ldr	r4, [r5, #12]
    2262:	89a2      	ldrh	r2, [r4, #12]
    2264:	b293      	uxth	r3, r2
    2266:	0719      	lsls	r1, r3, #28
    2268:	d421      	bmi.n	22ae <__swsetup_r+0x82>
    226a:	06d9      	lsls	r1, r3, #27
    226c:	d405      	bmi.n	227a <__swsetup_r+0x4e>
    226e:	2309      	movs	r3, #9
    2270:	6033      	str	r3, [r6, #0]
    2272:	2340      	movs	r3, #64	; 0x40
    2274:	431a      	orrs	r2, r3
    2276:	81a2      	strh	r2, [r4, #12]
    2278:	e03f      	b.n	22fa <__swsetup_r+0xce>
    227a:	075a      	lsls	r2, r3, #29
    227c:	d513      	bpl.n	22a6 <__swsetup_r+0x7a>
    227e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2280:	2900      	cmp	r1, #0
    2282:	d008      	beq.n	2296 <__swsetup_r+0x6a>
    2284:	1c23      	adds	r3, r4, #0
    2286:	3344      	adds	r3, #68	; 0x44
    2288:	4299      	cmp	r1, r3
    228a:	d002      	beq.n	2292 <__swsetup_r+0x66>
    228c:	1c30      	adds	r0, r6, #0
    228e:	f000 fa1f 	bl	26d0 <_free_r>
    2292:	2300      	movs	r3, #0
    2294:	6363      	str	r3, [r4, #52]	; 0x34
    2296:	89a3      	ldrh	r3, [r4, #12]
    2298:	2224      	movs	r2, #36	; 0x24
    229a:	4393      	bics	r3, r2
    229c:	81a3      	strh	r3, [r4, #12]
    229e:	2300      	movs	r3, #0
    22a0:	6063      	str	r3, [r4, #4]
    22a2:	6923      	ldr	r3, [r4, #16]
    22a4:	6023      	str	r3, [r4, #0]
    22a6:	89a3      	ldrh	r3, [r4, #12]
    22a8:	2208      	movs	r2, #8
    22aa:	4313      	orrs	r3, r2
    22ac:	81a3      	strh	r3, [r4, #12]
    22ae:	6921      	ldr	r1, [r4, #16]
    22b0:	2900      	cmp	r1, #0
    22b2:	d10b      	bne.n	22cc <__swsetup_r+0xa0>
    22b4:	89a3      	ldrh	r3, [r4, #12]
    22b6:	22a0      	movs	r2, #160	; 0xa0
    22b8:	0092      	lsls	r2, r2, #2
    22ba:	401a      	ands	r2, r3
    22bc:	2380      	movs	r3, #128	; 0x80
    22be:	009b      	lsls	r3, r3, #2
    22c0:	429a      	cmp	r2, r3
    22c2:	d003      	beq.n	22cc <__swsetup_r+0xa0>
    22c4:	1c30      	adds	r0, r6, #0
    22c6:	1c21      	adds	r1, r4, #0
    22c8:	f000 f99c 	bl	2604 <__smakebuf_r>
    22cc:	89a3      	ldrh	r3, [r4, #12]
    22ce:	2201      	movs	r2, #1
    22d0:	401a      	ands	r2, r3
    22d2:	d005      	beq.n	22e0 <__swsetup_r+0xb4>
    22d4:	6961      	ldr	r1, [r4, #20]
    22d6:	2200      	movs	r2, #0
    22d8:	60a2      	str	r2, [r4, #8]
    22da:	424a      	negs	r2, r1
    22dc:	61a2      	str	r2, [r4, #24]
    22de:	e003      	b.n	22e8 <__swsetup_r+0xbc>
    22e0:	0799      	lsls	r1, r3, #30
    22e2:	d400      	bmi.n	22e6 <__swsetup_r+0xba>
    22e4:	6962      	ldr	r2, [r4, #20]
    22e6:	60a2      	str	r2, [r4, #8]
    22e8:	6922      	ldr	r2, [r4, #16]
    22ea:	2000      	movs	r0, #0
    22ec:	4282      	cmp	r2, r0
    22ee:	d106      	bne.n	22fe <__swsetup_r+0xd2>
    22f0:	0619      	lsls	r1, r3, #24
    22f2:	d504      	bpl.n	22fe <__swsetup_r+0xd2>
    22f4:	2240      	movs	r2, #64	; 0x40
    22f6:	4313      	orrs	r3, r2
    22f8:	81a3      	strh	r3, [r4, #12]
    22fa:	2001      	movs	r0, #1
    22fc:	4240      	negs	r0, r0
    22fe:	bd70      	pop	{r4, r5, r6, pc}
    2300:	20000064 	.word	0x20000064
    2304:	00002b84 	.word	0x00002b84
    2308:	00002ba4 	.word	0x00002ba4
    230c:	00002bc4 	.word	0x00002bc4

00002310 <__sflush_r>:
    2310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2312:	898b      	ldrh	r3, [r1, #12]
    2314:	1c05      	adds	r5, r0, #0
    2316:	1c0c      	adds	r4, r1, #0
    2318:	0719      	lsls	r1, r3, #28
    231a:	d45e      	bmi.n	23da <__sflush_r+0xca>
    231c:	6862      	ldr	r2, [r4, #4]
    231e:	2a00      	cmp	r2, #0
    2320:	dc02      	bgt.n	2328 <__sflush_r+0x18>
    2322:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2324:	2f00      	cmp	r7, #0
    2326:	dd1a      	ble.n	235e <__sflush_r+0x4e>
    2328:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    232a:	2f00      	cmp	r7, #0
    232c:	d017      	beq.n	235e <__sflush_r+0x4e>
    232e:	2200      	movs	r2, #0
    2330:	682e      	ldr	r6, [r5, #0]
    2332:	602a      	str	r2, [r5, #0]
    2334:	2280      	movs	r2, #128	; 0x80
    2336:	0152      	lsls	r2, r2, #5
    2338:	401a      	ands	r2, r3
    233a:	d001      	beq.n	2340 <__sflush_r+0x30>
    233c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    233e:	e015      	b.n	236c <__sflush_r+0x5c>
    2340:	1c28      	adds	r0, r5, #0
    2342:	6a21      	ldr	r1, [r4, #32]
    2344:	2301      	movs	r3, #1
    2346:	47b8      	blx	r7
    2348:	1c02      	adds	r2, r0, #0
    234a:	1c41      	adds	r1, r0, #1
    234c:	d10e      	bne.n	236c <__sflush_r+0x5c>
    234e:	682b      	ldr	r3, [r5, #0]
    2350:	2b00      	cmp	r3, #0
    2352:	d00b      	beq.n	236c <__sflush_r+0x5c>
    2354:	2b1d      	cmp	r3, #29
    2356:	d001      	beq.n	235c <__sflush_r+0x4c>
    2358:	2b16      	cmp	r3, #22
    235a:	d102      	bne.n	2362 <__sflush_r+0x52>
    235c:	602e      	str	r6, [r5, #0]
    235e:	2000      	movs	r0, #0
    2360:	e05e      	b.n	2420 <__sflush_r+0x110>
    2362:	89a3      	ldrh	r3, [r4, #12]
    2364:	2140      	movs	r1, #64	; 0x40
    2366:	430b      	orrs	r3, r1
    2368:	81a3      	strh	r3, [r4, #12]
    236a:	e059      	b.n	2420 <__sflush_r+0x110>
    236c:	89a3      	ldrh	r3, [r4, #12]
    236e:	075f      	lsls	r7, r3, #29
    2370:	d506      	bpl.n	2380 <__sflush_r+0x70>
    2372:	6861      	ldr	r1, [r4, #4]
    2374:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2376:	1a52      	subs	r2, r2, r1
    2378:	2b00      	cmp	r3, #0
    237a:	d001      	beq.n	2380 <__sflush_r+0x70>
    237c:	6c27      	ldr	r7, [r4, #64]	; 0x40
    237e:	1bd2      	subs	r2, r2, r7
    2380:	1c28      	adds	r0, r5, #0
    2382:	6a21      	ldr	r1, [r4, #32]
    2384:	2300      	movs	r3, #0
    2386:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2388:	47b8      	blx	r7
    238a:	89a2      	ldrh	r2, [r4, #12]
    238c:	1c41      	adds	r1, r0, #1
    238e:	d106      	bne.n	239e <__sflush_r+0x8e>
    2390:	682b      	ldr	r3, [r5, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d003      	beq.n	239e <__sflush_r+0x8e>
    2396:	2b1d      	cmp	r3, #29
    2398:	d001      	beq.n	239e <__sflush_r+0x8e>
    239a:	2b16      	cmp	r3, #22
    239c:	d119      	bne.n	23d2 <__sflush_r+0xc2>
    239e:	2300      	movs	r3, #0
    23a0:	6063      	str	r3, [r4, #4]
    23a2:	6923      	ldr	r3, [r4, #16]
    23a4:	6023      	str	r3, [r4, #0]
    23a6:	04d7      	lsls	r7, r2, #19
    23a8:	d505      	bpl.n	23b6 <__sflush_r+0xa6>
    23aa:	1c41      	adds	r1, r0, #1
    23ac:	d102      	bne.n	23b4 <__sflush_r+0xa4>
    23ae:	682a      	ldr	r2, [r5, #0]
    23b0:	2a00      	cmp	r2, #0
    23b2:	d100      	bne.n	23b6 <__sflush_r+0xa6>
    23b4:	6560      	str	r0, [r4, #84]	; 0x54
    23b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    23b8:	602e      	str	r6, [r5, #0]
    23ba:	2900      	cmp	r1, #0
    23bc:	d0cf      	beq.n	235e <__sflush_r+0x4e>
    23be:	1c23      	adds	r3, r4, #0
    23c0:	3344      	adds	r3, #68	; 0x44
    23c2:	4299      	cmp	r1, r3
    23c4:	d002      	beq.n	23cc <__sflush_r+0xbc>
    23c6:	1c28      	adds	r0, r5, #0
    23c8:	f000 f982 	bl	26d0 <_free_r>
    23cc:	2000      	movs	r0, #0
    23ce:	6360      	str	r0, [r4, #52]	; 0x34
    23d0:	e026      	b.n	2420 <__sflush_r+0x110>
    23d2:	2340      	movs	r3, #64	; 0x40
    23d4:	431a      	orrs	r2, r3
    23d6:	81a2      	strh	r2, [r4, #12]
    23d8:	e022      	b.n	2420 <__sflush_r+0x110>
    23da:	6926      	ldr	r6, [r4, #16]
    23dc:	2e00      	cmp	r6, #0
    23de:	d0be      	beq.n	235e <__sflush_r+0x4e>
    23e0:	6827      	ldr	r7, [r4, #0]
    23e2:	2200      	movs	r2, #0
    23e4:	1bbf      	subs	r7, r7, r6
    23e6:	9701      	str	r7, [sp, #4]
    23e8:	6026      	str	r6, [r4, #0]
    23ea:	0799      	lsls	r1, r3, #30
    23ec:	d100      	bne.n	23f0 <__sflush_r+0xe0>
    23ee:	6962      	ldr	r2, [r4, #20]
    23f0:	60a2      	str	r2, [r4, #8]
    23f2:	9f01      	ldr	r7, [sp, #4]
    23f4:	2f00      	cmp	r7, #0
    23f6:	ddb2      	ble.n	235e <__sflush_r+0x4e>
    23f8:	1c28      	adds	r0, r5, #0
    23fa:	6a21      	ldr	r1, [r4, #32]
    23fc:	1c32      	adds	r2, r6, #0
    23fe:	9b01      	ldr	r3, [sp, #4]
    2400:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    2402:	47b8      	blx	r7
    2404:	2800      	cmp	r0, #0
    2406:	dc06      	bgt.n	2416 <__sflush_r+0x106>
    2408:	89a3      	ldrh	r3, [r4, #12]
    240a:	2240      	movs	r2, #64	; 0x40
    240c:	4313      	orrs	r3, r2
    240e:	2001      	movs	r0, #1
    2410:	81a3      	strh	r3, [r4, #12]
    2412:	4240      	negs	r0, r0
    2414:	e004      	b.n	2420 <__sflush_r+0x110>
    2416:	9f01      	ldr	r7, [sp, #4]
    2418:	1836      	adds	r6, r6, r0
    241a:	1a3f      	subs	r7, r7, r0
    241c:	9701      	str	r7, [sp, #4]
    241e:	e7e8      	b.n	23f2 <__sflush_r+0xe2>
    2420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002424 <_fflush_r>:
    2424:	690a      	ldr	r2, [r1, #16]
    2426:	b538      	push	{r3, r4, r5, lr}
    2428:	1c05      	adds	r5, r0, #0
    242a:	1c0c      	adds	r4, r1, #0
    242c:	2a00      	cmp	r2, #0
    242e:	d101      	bne.n	2434 <_fflush_r+0x10>
    2430:	2000      	movs	r0, #0
    2432:	e01c      	b.n	246e <_fflush_r+0x4a>
    2434:	2800      	cmp	r0, #0
    2436:	d004      	beq.n	2442 <_fflush_r+0x1e>
    2438:	6983      	ldr	r3, [r0, #24]
    243a:	2b00      	cmp	r3, #0
    243c:	d101      	bne.n	2442 <_fflush_r+0x1e>
    243e:	f000 f871 	bl	2524 <__sinit>
    2442:	4b0b      	ldr	r3, [pc, #44]	; (2470 <_fflush_r+0x4c>)
    2444:	429c      	cmp	r4, r3
    2446:	d101      	bne.n	244c <_fflush_r+0x28>
    2448:	686c      	ldr	r4, [r5, #4]
    244a:	e008      	b.n	245e <_fflush_r+0x3a>
    244c:	4b09      	ldr	r3, [pc, #36]	; (2474 <_fflush_r+0x50>)
    244e:	429c      	cmp	r4, r3
    2450:	d101      	bne.n	2456 <_fflush_r+0x32>
    2452:	68ac      	ldr	r4, [r5, #8]
    2454:	e003      	b.n	245e <_fflush_r+0x3a>
    2456:	4b08      	ldr	r3, [pc, #32]	; (2478 <_fflush_r+0x54>)
    2458:	429c      	cmp	r4, r3
    245a:	d100      	bne.n	245e <_fflush_r+0x3a>
    245c:	68ec      	ldr	r4, [r5, #12]
    245e:	220c      	movs	r2, #12
    2460:	5ea3      	ldrsh	r3, [r4, r2]
    2462:	2b00      	cmp	r3, #0
    2464:	d0e4      	beq.n	2430 <_fflush_r+0xc>
    2466:	1c28      	adds	r0, r5, #0
    2468:	1c21      	adds	r1, r4, #0
    246a:	f7ff ff51 	bl	2310 <__sflush_r>
    246e:	bd38      	pop	{r3, r4, r5, pc}
    2470:	00002b84 	.word	0x00002b84
    2474:	00002ba4 	.word	0x00002ba4
    2478:	00002bc4 	.word	0x00002bc4

0000247c <_cleanup_r>:
    247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    247e:	1c04      	adds	r4, r0, #0
    2480:	1c07      	adds	r7, r0, #0
    2482:	3448      	adds	r4, #72	; 0x48
    2484:	2c00      	cmp	r4, #0
    2486:	d012      	beq.n	24ae <_cleanup_r+0x32>
    2488:	68a5      	ldr	r5, [r4, #8]
    248a:	6866      	ldr	r6, [r4, #4]
    248c:	3e01      	subs	r6, #1
    248e:	d40c      	bmi.n	24aa <_cleanup_r+0x2e>
    2490:	89ab      	ldrh	r3, [r5, #12]
    2492:	2b01      	cmp	r3, #1
    2494:	d907      	bls.n	24a6 <_cleanup_r+0x2a>
    2496:	220e      	movs	r2, #14
    2498:	5eab      	ldrsh	r3, [r5, r2]
    249a:	3301      	adds	r3, #1
    249c:	d003      	beq.n	24a6 <_cleanup_r+0x2a>
    249e:	1c38      	adds	r0, r7, #0
    24a0:	1c29      	adds	r1, r5, #0
    24a2:	f7ff ffbf 	bl	2424 <_fflush_r>
    24a6:	3568      	adds	r5, #104	; 0x68
    24a8:	e7f0      	b.n	248c <_cleanup_r+0x10>
    24aa:	6824      	ldr	r4, [r4, #0]
    24ac:	e7ea      	b.n	2484 <_cleanup_r+0x8>
    24ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000024b0 <std.isra.0>:
    24b0:	2300      	movs	r3, #0
    24b2:	b510      	push	{r4, lr}
    24b4:	1c04      	adds	r4, r0, #0
    24b6:	6003      	str	r3, [r0, #0]
    24b8:	6043      	str	r3, [r0, #4]
    24ba:	6083      	str	r3, [r0, #8]
    24bc:	8181      	strh	r1, [r0, #12]
    24be:	6643      	str	r3, [r0, #100]	; 0x64
    24c0:	81c2      	strh	r2, [r0, #14]
    24c2:	6103      	str	r3, [r0, #16]
    24c4:	6143      	str	r3, [r0, #20]
    24c6:	6183      	str	r3, [r0, #24]
    24c8:	1c19      	adds	r1, r3, #0
    24ca:	2208      	movs	r2, #8
    24cc:	305c      	adds	r0, #92	; 0x5c
    24ce:	f7ff fae8 	bl	1aa2 <memset>
    24d2:	4b05      	ldr	r3, [pc, #20]	; (24e8 <std.isra.0+0x38>)
    24d4:	6224      	str	r4, [r4, #32]
    24d6:	6263      	str	r3, [r4, #36]	; 0x24
    24d8:	4b04      	ldr	r3, [pc, #16]	; (24ec <std.isra.0+0x3c>)
    24da:	62a3      	str	r3, [r4, #40]	; 0x28
    24dc:	4b04      	ldr	r3, [pc, #16]	; (24f0 <std.isra.0+0x40>)
    24de:	62e3      	str	r3, [r4, #44]	; 0x2c
    24e0:	4b04      	ldr	r3, [pc, #16]	; (24f4 <std.isra.0+0x44>)
    24e2:	6323      	str	r3, [r4, #48]	; 0x30
    24e4:	bd10      	pop	{r4, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	0000282d 	.word	0x0000282d
    24ec:	00002855 	.word	0x00002855
    24f0:	0000288d 	.word	0x0000288d
    24f4:	000028b9 	.word	0x000028b9

000024f8 <__sfmoreglue>:
    24f8:	b570      	push	{r4, r5, r6, lr}
    24fa:	1e4b      	subs	r3, r1, #1
    24fc:	2568      	movs	r5, #104	; 0x68
    24fe:	435d      	muls	r5, r3
    2500:	1c0e      	adds	r6, r1, #0
    2502:	1c29      	adds	r1, r5, #0
    2504:	3174      	adds	r1, #116	; 0x74
    2506:	f000 f92b 	bl	2760 <_malloc_r>
    250a:	1e04      	subs	r4, r0, #0
    250c:	d008      	beq.n	2520 <__sfmoreglue+0x28>
    250e:	2100      	movs	r1, #0
    2510:	6001      	str	r1, [r0, #0]
    2512:	6046      	str	r6, [r0, #4]
    2514:	1c2a      	adds	r2, r5, #0
    2516:	300c      	adds	r0, #12
    2518:	60a0      	str	r0, [r4, #8]
    251a:	3268      	adds	r2, #104	; 0x68
    251c:	f7ff fac1 	bl	1aa2 <memset>
    2520:	1c20      	adds	r0, r4, #0
    2522:	bd70      	pop	{r4, r5, r6, pc}

00002524 <__sinit>:
    2524:	6983      	ldr	r3, [r0, #24]
    2526:	b513      	push	{r0, r1, r4, lr}
    2528:	1c04      	adds	r4, r0, #0
    252a:	2b00      	cmp	r3, #0
    252c:	d127      	bne.n	257e <__sinit+0x5a>
    252e:	6483      	str	r3, [r0, #72]	; 0x48
    2530:	64c3      	str	r3, [r0, #76]	; 0x4c
    2532:	6503      	str	r3, [r0, #80]	; 0x50
    2534:	4b12      	ldr	r3, [pc, #72]	; (2580 <__sinit+0x5c>)
    2536:	4a13      	ldr	r2, [pc, #76]	; (2584 <__sinit+0x60>)
    2538:	681b      	ldr	r3, [r3, #0]
    253a:	6282      	str	r2, [r0, #40]	; 0x28
    253c:	4298      	cmp	r0, r3
    253e:	d101      	bne.n	2544 <__sinit+0x20>
    2540:	2301      	movs	r3, #1
    2542:	6183      	str	r3, [r0, #24]
    2544:	1c20      	adds	r0, r4, #0
    2546:	f000 f81f 	bl	2588 <__sfp>
    254a:	6060      	str	r0, [r4, #4]
    254c:	1c20      	adds	r0, r4, #0
    254e:	f000 f81b 	bl	2588 <__sfp>
    2552:	60a0      	str	r0, [r4, #8]
    2554:	1c20      	adds	r0, r4, #0
    2556:	f000 f817 	bl	2588 <__sfp>
    255a:	2104      	movs	r1, #4
    255c:	60e0      	str	r0, [r4, #12]
    255e:	2200      	movs	r2, #0
    2560:	6860      	ldr	r0, [r4, #4]
    2562:	f7ff ffa5 	bl	24b0 <std.isra.0>
    2566:	68a0      	ldr	r0, [r4, #8]
    2568:	2109      	movs	r1, #9
    256a:	2201      	movs	r2, #1
    256c:	f7ff ffa0 	bl	24b0 <std.isra.0>
    2570:	68e0      	ldr	r0, [r4, #12]
    2572:	2112      	movs	r1, #18
    2574:	2202      	movs	r2, #2
    2576:	f7ff ff9b 	bl	24b0 <std.isra.0>
    257a:	2301      	movs	r3, #1
    257c:	61a3      	str	r3, [r4, #24]
    257e:	bd13      	pop	{r0, r1, r4, pc}
    2580:	00002b4c 	.word	0x00002b4c
    2584:	0000247d 	.word	0x0000247d

00002588 <__sfp>:
    2588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    258a:	4b1d      	ldr	r3, [pc, #116]	; (2600 <__sfp+0x78>)
    258c:	1c07      	adds	r7, r0, #0
    258e:	681e      	ldr	r6, [r3, #0]
    2590:	69b2      	ldr	r2, [r6, #24]
    2592:	2a00      	cmp	r2, #0
    2594:	d102      	bne.n	259c <__sfp+0x14>
    2596:	1c30      	adds	r0, r6, #0
    2598:	f7ff ffc4 	bl	2524 <__sinit>
    259c:	3648      	adds	r6, #72	; 0x48
    259e:	68b4      	ldr	r4, [r6, #8]
    25a0:	6873      	ldr	r3, [r6, #4]
    25a2:	3b01      	subs	r3, #1
    25a4:	d405      	bmi.n	25b2 <__sfp+0x2a>
    25a6:	220c      	movs	r2, #12
    25a8:	5ea5      	ldrsh	r5, [r4, r2]
    25aa:	2d00      	cmp	r5, #0
    25ac:	d010      	beq.n	25d0 <__sfp+0x48>
    25ae:	3468      	adds	r4, #104	; 0x68
    25b0:	e7f7      	b.n	25a2 <__sfp+0x1a>
    25b2:	6833      	ldr	r3, [r6, #0]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d106      	bne.n	25c6 <__sfp+0x3e>
    25b8:	1c38      	adds	r0, r7, #0
    25ba:	2104      	movs	r1, #4
    25bc:	f7ff ff9c 	bl	24f8 <__sfmoreglue>
    25c0:	6030      	str	r0, [r6, #0]
    25c2:	2800      	cmp	r0, #0
    25c4:	d001      	beq.n	25ca <__sfp+0x42>
    25c6:	6836      	ldr	r6, [r6, #0]
    25c8:	e7e9      	b.n	259e <__sfp+0x16>
    25ca:	230c      	movs	r3, #12
    25cc:	603b      	str	r3, [r7, #0]
    25ce:	e016      	b.n	25fe <__sfp+0x76>
    25d0:	2301      	movs	r3, #1
    25d2:	425b      	negs	r3, r3
    25d4:	81e3      	strh	r3, [r4, #14]
    25d6:	1c20      	adds	r0, r4, #0
    25d8:	2301      	movs	r3, #1
    25da:	81a3      	strh	r3, [r4, #12]
    25dc:	6665      	str	r5, [r4, #100]	; 0x64
    25de:	6025      	str	r5, [r4, #0]
    25e0:	60a5      	str	r5, [r4, #8]
    25e2:	6065      	str	r5, [r4, #4]
    25e4:	6125      	str	r5, [r4, #16]
    25e6:	6165      	str	r5, [r4, #20]
    25e8:	61a5      	str	r5, [r4, #24]
    25ea:	305c      	adds	r0, #92	; 0x5c
    25ec:	1c29      	adds	r1, r5, #0
    25ee:	2208      	movs	r2, #8
    25f0:	f7ff fa57 	bl	1aa2 <memset>
    25f4:	6365      	str	r5, [r4, #52]	; 0x34
    25f6:	63a5      	str	r5, [r4, #56]	; 0x38
    25f8:	64a5      	str	r5, [r4, #72]	; 0x48
    25fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    25fc:	1c20      	adds	r0, r4, #0
    25fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2600:	00002b4c 	.word	0x00002b4c

00002604 <__smakebuf_r>:
    2604:	b5f0      	push	{r4, r5, r6, r7, lr}
    2606:	898b      	ldrh	r3, [r1, #12]
    2608:	b091      	sub	sp, #68	; 0x44
    260a:	1c05      	adds	r5, r0, #0
    260c:	1c0c      	adds	r4, r1, #0
    260e:	079a      	lsls	r2, r3, #30
    2610:	d425      	bmi.n	265e <__smakebuf_r+0x5a>
    2612:	230e      	movs	r3, #14
    2614:	5ec9      	ldrsh	r1, [r1, r3]
    2616:	2900      	cmp	r1, #0
    2618:	da06      	bge.n	2628 <__smakebuf_r+0x24>
    261a:	89a7      	ldrh	r7, [r4, #12]
    261c:	2380      	movs	r3, #128	; 0x80
    261e:	401f      	ands	r7, r3
    2620:	d00f      	beq.n	2642 <__smakebuf_r+0x3e>
    2622:	2700      	movs	r7, #0
    2624:	2640      	movs	r6, #64	; 0x40
    2626:	e00e      	b.n	2646 <__smakebuf_r+0x42>
    2628:	aa01      	add	r2, sp, #4
    262a:	f000 f979 	bl	2920 <_fstat_r>
    262e:	2800      	cmp	r0, #0
    2630:	dbf3      	blt.n	261a <__smakebuf_r+0x16>
    2632:	9b02      	ldr	r3, [sp, #8]
    2634:	27f0      	movs	r7, #240	; 0xf0
    2636:	023f      	lsls	r7, r7, #8
    2638:	4a18      	ldr	r2, [pc, #96]	; (269c <__smakebuf_r+0x98>)
    263a:	401f      	ands	r7, r3
    263c:	18bf      	adds	r7, r7, r2
    263e:	427b      	negs	r3, r7
    2640:	415f      	adcs	r7, r3
    2642:	2680      	movs	r6, #128	; 0x80
    2644:	00f6      	lsls	r6, r6, #3
    2646:	1c28      	adds	r0, r5, #0
    2648:	1c31      	adds	r1, r6, #0
    264a:	f000 f889 	bl	2760 <_malloc_r>
    264e:	2800      	cmp	r0, #0
    2650:	d10c      	bne.n	266c <__smakebuf_r+0x68>
    2652:	89a3      	ldrh	r3, [r4, #12]
    2654:	059a      	lsls	r2, r3, #22
    2656:	d41f      	bmi.n	2698 <__smakebuf_r+0x94>
    2658:	2202      	movs	r2, #2
    265a:	4313      	orrs	r3, r2
    265c:	81a3      	strh	r3, [r4, #12]
    265e:	1c23      	adds	r3, r4, #0
    2660:	3347      	adds	r3, #71	; 0x47
    2662:	6023      	str	r3, [r4, #0]
    2664:	6123      	str	r3, [r4, #16]
    2666:	2301      	movs	r3, #1
    2668:	6163      	str	r3, [r4, #20]
    266a:	e015      	b.n	2698 <__smakebuf_r+0x94>
    266c:	4b0c      	ldr	r3, [pc, #48]	; (26a0 <__smakebuf_r+0x9c>)
    266e:	2280      	movs	r2, #128	; 0x80
    2670:	62ab      	str	r3, [r5, #40]	; 0x28
    2672:	89a3      	ldrh	r3, [r4, #12]
    2674:	6020      	str	r0, [r4, #0]
    2676:	4313      	orrs	r3, r2
    2678:	81a3      	strh	r3, [r4, #12]
    267a:	6120      	str	r0, [r4, #16]
    267c:	6166      	str	r6, [r4, #20]
    267e:	2f00      	cmp	r7, #0
    2680:	d00a      	beq.n	2698 <__smakebuf_r+0x94>
    2682:	230e      	movs	r3, #14
    2684:	5ee1      	ldrsh	r1, [r4, r3]
    2686:	1c28      	adds	r0, r5, #0
    2688:	f000 f95c 	bl	2944 <_isatty_r>
    268c:	2800      	cmp	r0, #0
    268e:	d003      	beq.n	2698 <__smakebuf_r+0x94>
    2690:	89a3      	ldrh	r3, [r4, #12]
    2692:	2201      	movs	r2, #1
    2694:	4313      	orrs	r3, r2
    2696:	81a3      	strh	r3, [r4, #12]
    2698:	b011      	add	sp, #68	; 0x44
    269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    269c:	ffffe000 	.word	0xffffe000
    26a0:	0000247d 	.word	0x0000247d

000026a4 <malloc>:
    26a4:	b508      	push	{r3, lr}
    26a6:	4b03      	ldr	r3, [pc, #12]	; (26b4 <malloc+0x10>)
    26a8:	1c01      	adds	r1, r0, #0
    26aa:	6818      	ldr	r0, [r3, #0]
    26ac:	f000 f858 	bl	2760 <_malloc_r>
    26b0:	bd08      	pop	{r3, pc}
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	20000064 	.word	0x20000064

000026b8 <memchr>:
    26b8:	b2c9      	uxtb	r1, r1
    26ba:	1882      	adds	r2, r0, r2
    26bc:	4290      	cmp	r0, r2
    26be:	d004      	beq.n	26ca <memchr+0x12>
    26c0:	7803      	ldrb	r3, [r0, #0]
    26c2:	428b      	cmp	r3, r1
    26c4:	d002      	beq.n	26cc <memchr+0x14>
    26c6:	3001      	adds	r0, #1
    26c8:	e7f8      	b.n	26bc <memchr+0x4>
    26ca:	2000      	movs	r0, #0
    26cc:	4770      	bx	lr
	...

000026d0 <_free_r>:
    26d0:	b530      	push	{r4, r5, lr}
    26d2:	2900      	cmp	r1, #0
    26d4:	d040      	beq.n	2758 <_free_r+0x88>
    26d6:	3904      	subs	r1, #4
    26d8:	680b      	ldr	r3, [r1, #0]
    26da:	2b00      	cmp	r3, #0
    26dc:	da00      	bge.n	26e0 <_free_r+0x10>
    26de:	18c9      	adds	r1, r1, r3
    26e0:	4a1e      	ldr	r2, [pc, #120]	; (275c <_free_r+0x8c>)
    26e2:	6813      	ldr	r3, [r2, #0]
    26e4:	1c14      	adds	r4, r2, #0
    26e6:	2b00      	cmp	r3, #0
    26e8:	d102      	bne.n	26f0 <_free_r+0x20>
    26ea:	604b      	str	r3, [r1, #4]
    26ec:	6011      	str	r1, [r2, #0]
    26ee:	e033      	b.n	2758 <_free_r+0x88>
    26f0:	4299      	cmp	r1, r3
    26f2:	d20f      	bcs.n	2714 <_free_r+0x44>
    26f4:	6808      	ldr	r0, [r1, #0]
    26f6:	180a      	adds	r2, r1, r0
    26f8:	429a      	cmp	r2, r3
    26fa:	d105      	bne.n	2708 <_free_r+0x38>
    26fc:	6813      	ldr	r3, [r2, #0]
    26fe:	6852      	ldr	r2, [r2, #4]
    2700:	18c0      	adds	r0, r0, r3
    2702:	6008      	str	r0, [r1, #0]
    2704:	604a      	str	r2, [r1, #4]
    2706:	e000      	b.n	270a <_free_r+0x3a>
    2708:	604b      	str	r3, [r1, #4]
    270a:	6021      	str	r1, [r4, #0]
    270c:	e024      	b.n	2758 <_free_r+0x88>
    270e:	428a      	cmp	r2, r1
    2710:	d803      	bhi.n	271a <_free_r+0x4a>
    2712:	1c13      	adds	r3, r2, #0
    2714:	685a      	ldr	r2, [r3, #4]
    2716:	2a00      	cmp	r2, #0
    2718:	d1f9      	bne.n	270e <_free_r+0x3e>
    271a:	681d      	ldr	r5, [r3, #0]
    271c:	195c      	adds	r4, r3, r5
    271e:	428c      	cmp	r4, r1
    2720:	d10b      	bne.n	273a <_free_r+0x6a>
    2722:	6809      	ldr	r1, [r1, #0]
    2724:	1869      	adds	r1, r5, r1
    2726:	1858      	adds	r0, r3, r1
    2728:	6019      	str	r1, [r3, #0]
    272a:	4290      	cmp	r0, r2
    272c:	d114      	bne.n	2758 <_free_r+0x88>
    272e:	6814      	ldr	r4, [r2, #0]
    2730:	6852      	ldr	r2, [r2, #4]
    2732:	1909      	adds	r1, r1, r4
    2734:	6019      	str	r1, [r3, #0]
    2736:	605a      	str	r2, [r3, #4]
    2738:	e00e      	b.n	2758 <_free_r+0x88>
    273a:	428c      	cmp	r4, r1
    273c:	d902      	bls.n	2744 <_free_r+0x74>
    273e:	230c      	movs	r3, #12
    2740:	6003      	str	r3, [r0, #0]
    2742:	e009      	b.n	2758 <_free_r+0x88>
    2744:	6808      	ldr	r0, [r1, #0]
    2746:	180c      	adds	r4, r1, r0
    2748:	4294      	cmp	r4, r2
    274a:	d103      	bne.n	2754 <_free_r+0x84>
    274c:	6814      	ldr	r4, [r2, #0]
    274e:	6852      	ldr	r2, [r2, #4]
    2750:	1900      	adds	r0, r0, r4
    2752:	6008      	str	r0, [r1, #0]
    2754:	604a      	str	r2, [r1, #4]
    2756:	6059      	str	r1, [r3, #4]
    2758:	bd30      	pop	{r4, r5, pc}
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	20000100 	.word	0x20000100

00002760 <_malloc_r>:
    2760:	b570      	push	{r4, r5, r6, lr}
    2762:	2303      	movs	r3, #3
    2764:	1ccd      	adds	r5, r1, #3
    2766:	439d      	bics	r5, r3
    2768:	3508      	adds	r5, #8
    276a:	1c06      	adds	r6, r0, #0
    276c:	2d0c      	cmp	r5, #12
    276e:	d201      	bcs.n	2774 <_malloc_r+0x14>
    2770:	250c      	movs	r5, #12
    2772:	e001      	b.n	2778 <_malloc_r+0x18>
    2774:	2d00      	cmp	r5, #0
    2776:	db3f      	blt.n	27f8 <_malloc_r+0x98>
    2778:	428d      	cmp	r5, r1
    277a:	d33d      	bcc.n	27f8 <_malloc_r+0x98>
    277c:	4b20      	ldr	r3, [pc, #128]	; (2800 <_malloc_r+0xa0>)
    277e:	681c      	ldr	r4, [r3, #0]
    2780:	1c1a      	adds	r2, r3, #0
    2782:	1c21      	adds	r1, r4, #0
    2784:	2900      	cmp	r1, #0
    2786:	d013      	beq.n	27b0 <_malloc_r+0x50>
    2788:	6808      	ldr	r0, [r1, #0]
    278a:	1b43      	subs	r3, r0, r5
    278c:	d40d      	bmi.n	27aa <_malloc_r+0x4a>
    278e:	2b0b      	cmp	r3, #11
    2790:	d902      	bls.n	2798 <_malloc_r+0x38>
    2792:	600b      	str	r3, [r1, #0]
    2794:	18cc      	adds	r4, r1, r3
    2796:	e01e      	b.n	27d6 <_malloc_r+0x76>
    2798:	428c      	cmp	r4, r1
    279a:	d102      	bne.n	27a2 <_malloc_r+0x42>
    279c:	6863      	ldr	r3, [r4, #4]
    279e:	6013      	str	r3, [r2, #0]
    27a0:	e01a      	b.n	27d8 <_malloc_r+0x78>
    27a2:	6848      	ldr	r0, [r1, #4]
    27a4:	6060      	str	r0, [r4, #4]
    27a6:	1c0c      	adds	r4, r1, #0
    27a8:	e016      	b.n	27d8 <_malloc_r+0x78>
    27aa:	1c0c      	adds	r4, r1, #0
    27ac:	6849      	ldr	r1, [r1, #4]
    27ae:	e7e9      	b.n	2784 <_malloc_r+0x24>
    27b0:	4c14      	ldr	r4, [pc, #80]	; (2804 <_malloc_r+0xa4>)
    27b2:	6820      	ldr	r0, [r4, #0]
    27b4:	2800      	cmp	r0, #0
    27b6:	d103      	bne.n	27c0 <_malloc_r+0x60>
    27b8:	1c30      	adds	r0, r6, #0
    27ba:	f000 f825 	bl	2808 <_sbrk_r>
    27be:	6020      	str	r0, [r4, #0]
    27c0:	1c30      	adds	r0, r6, #0
    27c2:	1c29      	adds	r1, r5, #0
    27c4:	f000 f820 	bl	2808 <_sbrk_r>
    27c8:	1c43      	adds	r3, r0, #1
    27ca:	d015      	beq.n	27f8 <_malloc_r+0x98>
    27cc:	1cc4      	adds	r4, r0, #3
    27ce:	2303      	movs	r3, #3
    27d0:	439c      	bics	r4, r3
    27d2:	4284      	cmp	r4, r0
    27d4:	d10a      	bne.n	27ec <_malloc_r+0x8c>
    27d6:	6025      	str	r5, [r4, #0]
    27d8:	1c20      	adds	r0, r4, #0
    27da:	300b      	adds	r0, #11
    27dc:	2207      	movs	r2, #7
    27de:	1d23      	adds	r3, r4, #4
    27e0:	4390      	bics	r0, r2
    27e2:	1ac3      	subs	r3, r0, r3
    27e4:	d00b      	beq.n	27fe <_malloc_r+0x9e>
    27e6:	425a      	negs	r2, r3
    27e8:	50e2      	str	r2, [r4, r3]
    27ea:	e008      	b.n	27fe <_malloc_r+0x9e>
    27ec:	1a21      	subs	r1, r4, r0
    27ee:	1c30      	adds	r0, r6, #0
    27f0:	f000 f80a 	bl	2808 <_sbrk_r>
    27f4:	3001      	adds	r0, #1
    27f6:	d1ee      	bne.n	27d6 <_malloc_r+0x76>
    27f8:	230c      	movs	r3, #12
    27fa:	6033      	str	r3, [r6, #0]
    27fc:	2000      	movs	r0, #0
    27fe:	bd70      	pop	{r4, r5, r6, pc}
    2800:	20000100 	.word	0x20000100
    2804:	200000fc 	.word	0x200000fc

00002808 <_sbrk_r>:
    2808:	b538      	push	{r3, r4, r5, lr}
    280a:	4c07      	ldr	r4, [pc, #28]	; (2828 <_sbrk_r+0x20>)
    280c:	2300      	movs	r3, #0
    280e:	1c05      	adds	r5, r0, #0
    2810:	1c08      	adds	r0, r1, #0
    2812:	6023      	str	r3, [r4, #0]
    2814:	f7fe ff72 	bl	16fc <_sbrk>
    2818:	1c43      	adds	r3, r0, #1
    281a:	d103      	bne.n	2824 <_sbrk_r+0x1c>
    281c:	6823      	ldr	r3, [r4, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d000      	beq.n	2824 <_sbrk_r+0x1c>
    2822:	602b      	str	r3, [r5, #0]
    2824:	bd38      	pop	{r3, r4, r5, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	20000130 	.word	0x20000130

0000282c <__sread>:
    282c:	b538      	push	{r3, r4, r5, lr}
    282e:	1c0c      	adds	r4, r1, #0
    2830:	250e      	movs	r5, #14
    2832:	5f49      	ldrsh	r1, [r1, r5]
    2834:	f000 f8ac 	bl	2990 <_read_r>
    2838:	2800      	cmp	r0, #0
    283a:	db03      	blt.n	2844 <__sread+0x18>
    283c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    283e:	1813      	adds	r3, r2, r0
    2840:	6563      	str	r3, [r4, #84]	; 0x54
    2842:	e003      	b.n	284c <__sread+0x20>
    2844:	89a2      	ldrh	r2, [r4, #12]
    2846:	4b02      	ldr	r3, [pc, #8]	; (2850 <__sread+0x24>)
    2848:	4013      	ands	r3, r2
    284a:	81a3      	strh	r3, [r4, #12]
    284c:	bd38      	pop	{r3, r4, r5, pc}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	ffffefff 	.word	0xffffefff

00002854 <__swrite>:
    2854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2856:	1c1e      	adds	r6, r3, #0
    2858:	898b      	ldrh	r3, [r1, #12]
    285a:	1c05      	adds	r5, r0, #0
    285c:	1c0c      	adds	r4, r1, #0
    285e:	1c17      	adds	r7, r2, #0
    2860:	05da      	lsls	r2, r3, #23
    2862:	d505      	bpl.n	2870 <__swrite+0x1c>
    2864:	230e      	movs	r3, #14
    2866:	5ec9      	ldrsh	r1, [r1, r3]
    2868:	2200      	movs	r2, #0
    286a:	2302      	movs	r3, #2
    286c:	f000 f87c 	bl	2968 <_lseek_r>
    2870:	89a2      	ldrh	r2, [r4, #12]
    2872:	4b05      	ldr	r3, [pc, #20]	; (2888 <__swrite+0x34>)
    2874:	1c28      	adds	r0, r5, #0
    2876:	4013      	ands	r3, r2
    2878:	81a3      	strh	r3, [r4, #12]
    287a:	220e      	movs	r2, #14
    287c:	5ea1      	ldrsh	r1, [r4, r2]
    287e:	1c33      	adds	r3, r6, #0
    2880:	1c3a      	adds	r2, r7, #0
    2882:	f000 f827 	bl	28d4 <_write_r>
    2886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2888:	ffffefff 	.word	0xffffefff

0000288c <__sseek>:
    288c:	b538      	push	{r3, r4, r5, lr}
    288e:	1c0c      	adds	r4, r1, #0
    2890:	250e      	movs	r5, #14
    2892:	5f49      	ldrsh	r1, [r1, r5]
    2894:	f000 f868 	bl	2968 <_lseek_r>
    2898:	89a3      	ldrh	r3, [r4, #12]
    289a:	1c42      	adds	r2, r0, #1
    289c:	d103      	bne.n	28a6 <__sseek+0x1a>
    289e:	4a05      	ldr	r2, [pc, #20]	; (28b4 <__sseek+0x28>)
    28a0:	4013      	ands	r3, r2
    28a2:	81a3      	strh	r3, [r4, #12]
    28a4:	e004      	b.n	28b0 <__sseek+0x24>
    28a6:	2280      	movs	r2, #128	; 0x80
    28a8:	0152      	lsls	r2, r2, #5
    28aa:	4313      	orrs	r3, r2
    28ac:	81a3      	strh	r3, [r4, #12]
    28ae:	6560      	str	r0, [r4, #84]	; 0x54
    28b0:	bd38      	pop	{r3, r4, r5, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	ffffefff 	.word	0xffffefff

000028b8 <__sclose>:
    28b8:	b508      	push	{r3, lr}
    28ba:	230e      	movs	r3, #14
    28bc:	5ec9      	ldrsh	r1, [r1, r3]
    28be:	f000 f81d 	bl	28fc <_close_r>
    28c2:	bd08      	pop	{r3, pc}

000028c4 <strlen>:
    28c4:	2300      	movs	r3, #0
    28c6:	5cc2      	ldrb	r2, [r0, r3]
    28c8:	3301      	adds	r3, #1
    28ca:	2a00      	cmp	r2, #0
    28cc:	d1fb      	bne.n	28c6 <strlen+0x2>
    28ce:	1e58      	subs	r0, r3, #1
    28d0:	4770      	bx	lr
	...

000028d4 <_write_r>:
    28d4:	b538      	push	{r3, r4, r5, lr}
    28d6:	4c08      	ldr	r4, [pc, #32]	; (28f8 <_write_r+0x24>)
    28d8:	1c05      	adds	r5, r0, #0
    28da:	2000      	movs	r0, #0
    28dc:	6020      	str	r0, [r4, #0]
    28de:	1c08      	adds	r0, r1, #0
    28e0:	1c11      	adds	r1, r2, #0
    28e2:	1c1a      	adds	r2, r3, #0
    28e4:	f7fd fe2c 	bl	540 <_write>
    28e8:	1c43      	adds	r3, r0, #1
    28ea:	d103      	bne.n	28f4 <_write_r+0x20>
    28ec:	6823      	ldr	r3, [r4, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d000      	beq.n	28f4 <_write_r+0x20>
    28f2:	602b      	str	r3, [r5, #0]
    28f4:	bd38      	pop	{r3, r4, r5, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	20000130 	.word	0x20000130

000028fc <_close_r>:
    28fc:	b538      	push	{r3, r4, r5, lr}
    28fe:	4c07      	ldr	r4, [pc, #28]	; (291c <_close_r+0x20>)
    2900:	2300      	movs	r3, #0
    2902:	1c05      	adds	r5, r0, #0
    2904:	1c08      	adds	r0, r1, #0
    2906:	6023      	str	r3, [r4, #0]
    2908:	f7fe ff0a 	bl	1720 <_close>
    290c:	1c43      	adds	r3, r0, #1
    290e:	d103      	bne.n	2918 <_close_r+0x1c>
    2910:	6823      	ldr	r3, [r4, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d000      	beq.n	2918 <_close_r+0x1c>
    2916:	602b      	str	r3, [r5, #0]
    2918:	bd38      	pop	{r3, r4, r5, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	20000130 	.word	0x20000130

00002920 <_fstat_r>:
    2920:	b538      	push	{r3, r4, r5, lr}
    2922:	4c07      	ldr	r4, [pc, #28]	; (2940 <_fstat_r+0x20>)
    2924:	2300      	movs	r3, #0
    2926:	1c05      	adds	r5, r0, #0
    2928:	1c08      	adds	r0, r1, #0
    292a:	1c11      	adds	r1, r2, #0
    292c:	6023      	str	r3, [r4, #0]
    292e:	f7fe fefb 	bl	1728 <_fstat>
    2932:	1c43      	adds	r3, r0, #1
    2934:	d103      	bne.n	293e <_fstat_r+0x1e>
    2936:	6823      	ldr	r3, [r4, #0]
    2938:	2b00      	cmp	r3, #0
    293a:	d000      	beq.n	293e <_fstat_r+0x1e>
    293c:	602b      	str	r3, [r5, #0]
    293e:	bd38      	pop	{r3, r4, r5, pc}
    2940:	20000130 	.word	0x20000130

00002944 <_isatty_r>:
    2944:	b538      	push	{r3, r4, r5, lr}
    2946:	4c07      	ldr	r4, [pc, #28]	; (2964 <_isatty_r+0x20>)
    2948:	2300      	movs	r3, #0
    294a:	1c05      	adds	r5, r0, #0
    294c:	1c08      	adds	r0, r1, #0
    294e:	6023      	str	r3, [r4, #0]
    2950:	f7fe fef0 	bl	1734 <_isatty>
    2954:	1c43      	adds	r3, r0, #1
    2956:	d103      	bne.n	2960 <_isatty_r+0x1c>
    2958:	6823      	ldr	r3, [r4, #0]
    295a:	2b00      	cmp	r3, #0
    295c:	d000      	beq.n	2960 <_isatty_r+0x1c>
    295e:	602b      	str	r3, [r5, #0]
    2960:	bd38      	pop	{r3, r4, r5, pc}
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	20000130 	.word	0x20000130

00002968 <_lseek_r>:
    2968:	b538      	push	{r3, r4, r5, lr}
    296a:	4c08      	ldr	r4, [pc, #32]	; (298c <_lseek_r+0x24>)
    296c:	1c05      	adds	r5, r0, #0
    296e:	2000      	movs	r0, #0
    2970:	6020      	str	r0, [r4, #0]
    2972:	1c08      	adds	r0, r1, #0
    2974:	1c11      	adds	r1, r2, #0
    2976:	1c1a      	adds	r2, r3, #0
    2978:	f7fe fede 	bl	1738 <_lseek>
    297c:	1c43      	adds	r3, r0, #1
    297e:	d103      	bne.n	2988 <_lseek_r+0x20>
    2980:	6823      	ldr	r3, [r4, #0]
    2982:	2b00      	cmp	r3, #0
    2984:	d000      	beq.n	2988 <_lseek_r+0x20>
    2986:	602b      	str	r3, [r5, #0]
    2988:	bd38      	pop	{r3, r4, r5, pc}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	20000130 	.word	0x20000130

00002990 <_read_r>:
    2990:	b538      	push	{r3, r4, r5, lr}
    2992:	4c08      	ldr	r4, [pc, #32]	; (29b4 <_read_r+0x24>)
    2994:	1c05      	adds	r5, r0, #0
    2996:	2000      	movs	r0, #0
    2998:	6020      	str	r0, [r4, #0]
    299a:	1c08      	adds	r0, r1, #0
    299c:	1c11      	adds	r1, r2, #0
    299e:	1c1a      	adds	r2, r3, #0
    29a0:	f7fd fdac 	bl	4fc <_read>
    29a4:	1c43      	adds	r3, r0, #1
    29a6:	d103      	bne.n	29b0 <_read_r+0x20>
    29a8:	6823      	ldr	r3, [r4, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d000      	beq.n	29b0 <_read_r+0x20>
    29ae:	602b      	str	r3, [r5, #0]
    29b0:	bd38      	pop	{r3, r4, r5, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000130 	.word	0x20000130
    29b8:	42000800 	.word	0x42000800
    29bc:	42000c00 	.word	0x42000c00
    29c0:	42001000 	.word	0x42001000
    29c4:	42001400 	.word	0x42001400
    29c8:	42001800 	.word	0x42001800
    29cc:	42001c00 	.word	0x42001c00
    29d0:	0c0b0a09 	.word	0x0c0b0a09
    29d4:	00000e0d 	.word	0x00000e0d
    29d8:	00000e2e 	.word	0x00000e2e
    29dc:	00001074 	.word	0x00001074
    29e0:	00001074 	.word	0x00001074
    29e4:	00001074 	.word	0x00001074
    29e8:	00001074 	.word	0x00001074
    29ec:	00001074 	.word	0x00001074
    29f0:	00001074 	.word	0x00001074
    29f4:	00001074 	.word	0x00001074
    29f8:	00001074 	.word	0x00001074
    29fc:	00001074 	.word	0x00001074
    2a00:	00001074 	.word	0x00001074
    2a04:	00001074 	.word	0x00001074
    2a08:	00001074 	.word	0x00001074
    2a0c:	00001074 	.word	0x00001074
    2a10:	00001074 	.word	0x00001074
    2a14:	00001074 	.word	0x00001074
    2a18:	00000e16 	.word	0x00000e16
    2a1c:	00001074 	.word	0x00001074
    2a20:	00001074 	.word	0x00001074
    2a24:	00001074 	.word	0x00001074
    2a28:	00001074 	.word	0x00001074
    2a2c:	00001074 	.word	0x00001074
    2a30:	00001074 	.word	0x00001074
    2a34:	00001074 	.word	0x00001074
    2a38:	00001074 	.word	0x00001074
    2a3c:	00001074 	.word	0x00001074
    2a40:	00001074 	.word	0x00001074
    2a44:	00001074 	.word	0x00001074
    2a48:	00001074 	.word	0x00001074
    2a4c:	00001074 	.word	0x00001074
    2a50:	00001074 	.word	0x00001074
    2a54:	00001074 	.word	0x00001074
    2a58:	00000e26 	.word	0x00000e26
    2a5c:	00001074 	.word	0x00001074
    2a60:	00001074 	.word	0x00001074
    2a64:	00001074 	.word	0x00001074
    2a68:	00001074 	.word	0x00001074
    2a6c:	00001074 	.word	0x00001074
    2a70:	00001074 	.word	0x00001074
    2a74:	00001074 	.word	0x00001074
    2a78:	00001074 	.word	0x00001074
    2a7c:	00001074 	.word	0x00001074
    2a80:	00001074 	.word	0x00001074
    2a84:	00001074 	.word	0x00001074
    2a88:	00001074 	.word	0x00001074
    2a8c:	00001074 	.word	0x00001074
    2a90:	00001074 	.word	0x00001074
    2a94:	00001074 	.word	0x00001074
    2a98:	00000e1e 	.word	0x00000e1e
    2a9c:	00000dfe 	.word	0x00000dfe
    2aa0:	00000e36 	.word	0x00000e36
    2aa4:	00000e0e 	.word	0x00000e0e
    2aa8:	00000e06 	.word	0x00000e06
    2aac:	00000002 	.word	0x00000002
    2ab0:	00000003 	.word	0x00000003
    2ab4:	00000028 	.word	0x00000028
    2ab8:	00000029 	.word	0x00000029
    2abc:	00000004 	.word	0x00000004
    2ac0:	00000005 	.word	0x00000005
    2ac4:	00000006 	.word	0x00000006
    2ac8:	00000007 	.word	0x00000007
    2acc:	00000020 	.word	0x00000020
    2ad0:	00000021 	.word	0x00000021
    2ad4:	00000022 	.word	0x00000022
    2ad8:	00000023 	.word	0x00000023
    2adc:	00000024 	.word	0x00000024
    2ae0:	00000025 	.word	0x00000025
    2ae4:	00000026 	.word	0x00000026
    2ae8:	00000027 	.word	0x00000027
    2aec:	00000008 	.word	0x00000008
    2af0:	00000009 	.word	0x00000009
    2af4:	0000000a 	.word	0x0000000a
    2af8:	0000000b 	.word	0x0000000b
    2afc:	000010c8 	.word	0x000010c8
    2b00:	00001124 	.word	0x00001124
    2b04:	00001124 	.word	0x00001124
    2b08:	000010c2 	.word	0x000010c2
    2b0c:	000010c2 	.word	0x000010c2
    2b10:	000010de 	.word	0x000010de
    2b14:	000010ce 	.word	0x000010ce
    2b18:	000010e4 	.word	0x000010e4
    2b1c:	00001112 	.word	0x00001112
    2b20:	000011ac 	.word	0x000011ac
    2b24:	0000120c 	.word	0x0000120c
    2b28:	0000120c 	.word	0x0000120c
    2b2c:	0000118c 	.word	0x0000118c
    2b30:	0000119e 	.word	0x0000119e
    2b34:	000011ba 	.word	0x000011ba
    2b38:	00001190 	.word	0x00001190
    2b3c:	000011c8 	.word	0x000011c8
    2b40:	000011fc 	.word	0x000011fc
    2b44:	000a6425 	.word	0x000a6425
    2b48:	00000043 	.word	0x00000043

00002b4c <_global_impure_ptr>:
    2b4c:	20000004 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    2b5c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2b6c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2b7c:	64636261 00006665                       abcdef..

00002b84 <__sf_fake_stdin>:
	...

00002ba4 <__sf_fake_stdout>:
	...

00002bc4 <__sf_fake_stderr>:
	...

00002be4 <_init>:
    2be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bea:	bc08      	pop	{r3}
    2bec:	469e      	mov	lr, r3
    2bee:	4770      	bx	lr

00002bf0 <__init_array_start>:
    2bf0:	000000d9 	.word	0x000000d9

00002bf4 <_fini>:
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bfa:	bc08      	pop	{r3}
    2bfc:	469e      	mov	lr, r3
    2bfe:	4770      	bx	lr

00002c00 <__fini_array_start>:
    2c00:	000000b1 	.word	0x000000b1
