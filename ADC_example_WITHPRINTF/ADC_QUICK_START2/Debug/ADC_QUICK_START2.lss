
ADC_QUICK_START2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066b4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a0  20000000  000066b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  200000a0  00006754  000100a0  2**2
                  ALLOC
  3 .stack        00002004  2000016c  00006820  000100a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001cb40  00000000  00000000  00010123  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002925  00000000  00000000  0002cc63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000486b  00000000  00000000  0002f588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000460  00000000  00000000  00033df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000458  00000000  00000000  00034253  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000064b6  00000000  00000000  000346ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a7cd  00000000  00000000  0003ab61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008adcc  00000000  00000000  0004532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001804  00000000  00000000  000d00fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002170 	.word	0x20002170
       4:	0000161d 	.word	0x0000161d
       8:	00001619 	.word	0x00001619
       c:	00001619 	.word	0x00001619
	...
      2c:	00001619 	.word	0x00001619
	...
      38:	00001619 	.word	0x00001619
      3c:	00001619 	.word	0x00001619
      40:	00001619 	.word	0x00001619
      44:	00001619 	.word	0x00001619
      48:	00001619 	.word	0x00001619
      4c:	00001619 	.word	0x00001619
      50:	00001619 	.word	0x00001619
      54:	00001619 	.word	0x00001619
      58:	00001619 	.word	0x00001619
      5c:	00001619 	.word	0x00001619
      60:	00001619 	.word	0x00001619
      64:	00000b49 	.word	0x00000b49
      68:	00000b59 	.word	0x00000b59
      6c:	00000b69 	.word	0x00000b69
      70:	00000b79 	.word	0x00000b79
      74:	00000b89 	.word	0x00000b89
      78:	00000b99 	.word	0x00000b99
      7c:	00001619 	.word	0x00001619
      80:	00001619 	.word	0x00001619
      84:	00001619 	.word	0x00001619
      88:	00001619 	.word	0x00001619
      8c:	00001619 	.word	0x00001619
      90:	00001619 	.word	0x00001619
      94:	00001619 	.word	0x00001619
      98:	00001619 	.word	0x00001619
      9c:	00001619 	.word	0x00001619
      a0:	00001619 	.word	0x00001619
      a4:	00001619 	.word	0x00001619
      a8:	00001619 	.word	0x00001619
      ac:	00001619 	.word	0x00001619

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200000a0 	.word	0x200000a0
      d0:	00000000 	.word	0x00000000
      d4:	000066b4 	.word	0x000066b4

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	000066b4 	.word	0x000066b4
     104:	200000a4 	.word	0x200000a4
     108:	000066b4 	.word	0x000066b4
     10c:	00000000 	.word	0x00000000

00000110 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     110:	b510      	push	{r4, lr}
     112:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     114:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     116:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     118:	4299      	cmp	r1, r3
     11a:	d30c      	bcc.n	136 <_sercom_get_sync_baud_val+0x26>
     11c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     11e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     120:	1c60      	adds	r0, r4, #1
     122:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     124:	428b      	cmp	r3, r1
     126:	d801      	bhi.n	12c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     128:	1c04      	adds	r4, r0, #0
     12a:	e7f8      	b.n	11e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     12e:	2cff      	cmp	r4, #255	; 0xff
     130:	d801      	bhi.n	136 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     132:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     134:	2000      	movs	r0, #0
	}
}
     136:	bd10      	pop	{r4, pc}

00000138 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     138:	b5f0      	push	{r4, r5, r6, r7, lr}
     13a:	465f      	mov	r7, fp
     13c:	4656      	mov	r6, sl
     13e:	464d      	mov	r5, r9
     140:	4644      	mov	r4, r8
     142:	b4f0      	push	{r4, r5, r6, r7}
     144:	b087      	sub	sp, #28
     146:	1c06      	adds	r6, r0, #0
     148:	1c0d      	adds	r5, r1, #0
     14a:	9204      	str	r2, [sp, #16]
     14c:	aa10      	add	r2, sp, #64	; 0x40
     14e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     150:	1c32      	adds	r2, r6, #0
     152:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     154:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     156:	428a      	cmp	r2, r1
     158:	d900      	bls.n	15c <_sercom_get_async_baud_val+0x24>
     15a:	e0b3      	b.n	2c4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     15c:	2b00      	cmp	r3, #0
     15e:	d14b      	bne.n	1f8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     160:	2100      	movs	r1, #0
     162:	1c32      	adds	r2, r6, #0
     164:	4c5e      	ldr	r4, [pc, #376]	; (2e0 <_sercom_get_async_baud_val+0x1a8>)
     166:	47a0      	blx	r4
     168:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     16a:	1c2e      	adds	r6, r5, #0
     16c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     16e:	2000      	movs	r0, #0
     170:	2100      	movs	r1, #0
     172:	2200      	movs	r2, #0
     174:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     176:	243f      	movs	r4, #63	; 0x3f
     178:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     17a:	2501      	movs	r5, #1
     17c:	46a8      	mov	r8, r5
     17e:	9002      	str	r0, [sp, #8]
     180:	9103      	str	r1, [sp, #12]
     182:	4661      	mov	r1, ip
     184:	3920      	subs	r1, #32
     186:	d403      	bmi.n	190 <_sercom_get_async_baud_val+0x58>
     188:	4640      	mov	r0, r8
     18a:	4088      	lsls	r0, r1
     18c:	4681      	mov	r9, r0
     18e:	e005      	b.n	19c <_sercom_get_async_baud_val+0x64>
     190:	2120      	movs	r1, #32
     192:	4665      	mov	r5, ip
     194:	1b4c      	subs	r4, r1, r5
     196:	4640      	mov	r0, r8
     198:	40e0      	lsrs	r0, r4
     19a:	4681      	mov	r9, r0
     19c:	4641      	mov	r1, r8
     19e:	4664      	mov	r4, ip
     1a0:	40a1      	lsls	r1, r4
     1a2:	468a      	mov	sl, r1

		r = r << 1;
     1a4:	1c10      	adds	r0, r2, #0
     1a6:	1c19      	adds	r1, r3, #0
     1a8:	1880      	adds	r0, r0, r2
     1aa:	4159      	adcs	r1, r3
     1ac:	1c02      	adds	r2, r0, #0
     1ae:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     1b0:	465d      	mov	r5, fp
     1b2:	464c      	mov	r4, r9
     1b4:	4225      	tst	r5, r4
     1b6:	d002      	beq.n	1be <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     1b8:	4642      	mov	r2, r8
     1ba:	4302      	orrs	r2, r0
     1bc:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     1be:	429f      	cmp	r7, r3
     1c0:	d80c      	bhi.n	1dc <_sercom_get_async_baud_val+0xa4>
     1c2:	d101      	bne.n	1c8 <_sercom_get_async_baud_val+0x90>
     1c4:	4296      	cmp	r6, r2
     1c6:	d809      	bhi.n	1dc <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     1c8:	1b92      	subs	r2, r2, r6
     1ca:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     1cc:	4650      	mov	r0, sl
     1ce:	9d02      	ldr	r5, [sp, #8]
     1d0:	4328      	orrs	r0, r5
     1d2:	4649      	mov	r1, r9
     1d4:	9c03      	ldr	r4, [sp, #12]
     1d6:	4321      	orrs	r1, r4
     1d8:	9002      	str	r0, [sp, #8]
     1da:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1dc:	4665      	mov	r5, ip
     1de:	3d01      	subs	r5, #1
     1e0:	46ac      	mov	ip, r5
     1e2:	d2ce      	bcs.n	182 <_sercom_get_async_baud_val+0x4a>
     1e4:	9802      	ldr	r0, [sp, #8]
     1e6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1e8:	4b3c      	ldr	r3, [pc, #240]	; (2dc <_sercom_get_async_baud_val+0x1a4>)
     1ea:	4a3b      	ldr	r2, [pc, #236]	; (2d8 <_sercom_get_async_baud_val+0x1a0>)
     1ec:	1a12      	subs	r2, r2, r0
     1ee:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     1f0:	0c12      	lsrs	r2, r2, #16
     1f2:	041b      	lsls	r3, r3, #16
     1f4:	431a      	orrs	r2, r3
     1f6:	e062      	b.n	2be <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     1f8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     1fa:	2b01      	cmp	r3, #1
     1fc:	d15f      	bne.n	2be <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     1fe:	0f4f      	lsrs	r7, r1, #29
     200:	46b9      	mov	r9, r7
     202:	00cd      	lsls	r5, r1, #3
     204:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     206:	2100      	movs	r1, #0
     208:	1c32      	adds	r2, r6, #0
     20a:	2300      	movs	r3, #0
     20c:	4c34      	ldr	r4, [pc, #208]	; (2e0 <_sercom_get_async_baud_val+0x1a8>)
     20e:	47a0      	blx	r4
     210:	1c06      	adds	r6, r0, #0
     212:	1c0f      	adds	r7, r1, #0
     214:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     216:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     218:	9602      	str	r6, [sp, #8]
     21a:	9703      	str	r7, [sp, #12]
     21c:	469a      	mov	sl, r3
     21e:	4650      	mov	r0, sl
     220:	b2c0      	uxtb	r0, r0
     222:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     224:	2100      	movs	r1, #0
     226:	4688      	mov	r8, r1
     228:	2200      	movs	r2, #0
     22a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     22c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     22e:	1c27      	adds	r7, r4, #0
     230:	3f20      	subs	r7, #32
     232:	d403      	bmi.n	23c <_sercom_get_async_baud_val+0x104>
     234:	1c2e      	adds	r6, r5, #0
     236:	40be      	lsls	r6, r7
     238:	9601      	str	r6, [sp, #4]
     23a:	e004      	b.n	246 <_sercom_get_async_baud_val+0x10e>
     23c:	2020      	movs	r0, #32
     23e:	1b07      	subs	r7, r0, r4
     240:	1c29      	adds	r1, r5, #0
     242:	40f9      	lsrs	r1, r7
     244:	9101      	str	r1, [sp, #4]
     246:	1c2e      	adds	r6, r5, #0
     248:	40a6      	lsls	r6, r4
     24a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     24c:	1c10      	adds	r0, r2, #0
     24e:	1c19      	adds	r1, r3, #0
     250:	1880      	adds	r0, r0, r2
     252:	4159      	adcs	r1, r3
     254:	1c02      	adds	r2, r0, #0
     256:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     258:	465f      	mov	r7, fp
     25a:	4037      	ands	r7, r6
     25c:	46bc      	mov	ip, r7
     25e:	9e01      	ldr	r6, [sp, #4]
     260:	464f      	mov	r7, r9
     262:	403e      	ands	r6, r7
     264:	4667      	mov	r7, ip
     266:	433e      	orrs	r6, r7
     268:	d002      	beq.n	270 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     26a:	1c2a      	adds	r2, r5, #0
     26c:	4302      	orrs	r2, r0
     26e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     270:	9803      	ldr	r0, [sp, #12]
     272:	4298      	cmp	r0, r3
     274:	d80b      	bhi.n	28e <_sercom_get_async_baud_val+0x156>
     276:	d102      	bne.n	27e <_sercom_get_async_baud_val+0x146>
     278:	9902      	ldr	r1, [sp, #8]
     27a:	4291      	cmp	r1, r2
     27c:	d807      	bhi.n	28e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     27e:	9e02      	ldr	r6, [sp, #8]
     280:	9f03      	ldr	r7, [sp, #12]
     282:	1b92      	subs	r2, r2, r6
     284:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     286:	4647      	mov	r7, r8
     288:	9800      	ldr	r0, [sp, #0]
     28a:	4307      	orrs	r7, r0
     28c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     28e:	3c01      	subs	r4, #1
     290:	d2cd      	bcs.n	22e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     292:	4641      	mov	r1, r8
     294:	4652      	mov	r2, sl
     296:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     298:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     29a:	4c12      	ldr	r4, [pc, #72]	; (2e4 <_sercom_get_async_baud_val+0x1ac>)
     29c:	42a3      	cmp	r3, r4
     29e:	d908      	bls.n	2b2 <_sercom_get_async_baud_val+0x17a>
     2a0:	9a05      	ldr	r2, [sp, #20]
     2a2:	3201      	adds	r2, #1
     2a4:	b2d2      	uxtb	r2, r2
     2a6:	9205      	str	r2, [sp, #20]
     2a8:	2601      	movs	r6, #1
     2aa:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2ac:	4657      	mov	r7, sl
     2ae:	2f08      	cmp	r7, #8
     2b0:	d1b5      	bne.n	21e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2b2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2b4:	9805      	ldr	r0, [sp, #20]
     2b6:	2808      	cmp	r0, #8
     2b8:	d004      	beq.n	2c4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2ba:	0342      	lsls	r2, r0, #13
     2bc:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     2be:	9c04      	ldr	r4, [sp, #16]
     2c0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     2c2:	2400      	movs	r4, #0
}
     2c4:	1c20      	adds	r0, r4, #0
     2c6:	b007      	add	sp, #28
     2c8:	bc3c      	pop	{r2, r3, r4, r5}
     2ca:	4690      	mov	r8, r2
     2cc:	4699      	mov	r9, r3
     2ce:	46a2      	mov	sl, r4
     2d0:	46ab      	mov	fp, r5
     2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2d4:	46c0      	nop			; (mov r8, r8)
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	00000000 	.word	0x00000000
     2dc:	00000001 	.word	0x00000001
     2e0:	000043fd 	.word	0x000043fd
     2e4:	00001fff 	.word	0x00001fff

000002e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     2ee:	4b0f      	ldr	r3, [pc, #60]	; (32c <sercom_set_gclk_generator+0x44>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d001      	beq.n	2fa <sercom_set_gclk_generator+0x12>
     2f6:	2900      	cmp	r1, #0
     2f8:	d00d      	beq.n	316 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     2fa:	a901      	add	r1, sp, #4
     2fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     2fe:	2013      	movs	r0, #19
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <sercom_set_gclk_generator+0x48>)
     302:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     304:	2013      	movs	r0, #19
     306:	4b0b      	ldr	r3, [pc, #44]	; (334 <sercom_set_gclk_generator+0x4c>)
     308:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     30a:	4b08      	ldr	r3, [pc, #32]	; (32c <sercom_set_gclk_generator+0x44>)
     30c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     30e:	2201      	movs	r2, #1
     310:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     312:	2000      	movs	r0, #0
     314:	e007      	b.n	326 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <sercom_set_gclk_generator+0x44>)
     318:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     31a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     31c:	1b14      	subs	r4, r2, r4
     31e:	1e62      	subs	r2, r4, #1
     320:	4194      	sbcs	r4, r2
     322:	4264      	negs	r4, r4
     324:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     326:	b002      	add	sp, #8
     328:	bd10      	pop	{r4, pc}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	200000bc 	.word	0x200000bc
     330:	000014e9 	.word	0x000014e9
     334:	0000145d 	.word	0x0000145d

00000338 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     338:	4b44      	ldr	r3, [pc, #272]	; (44c <_sercom_get_default_pad+0x114>)
     33a:	4298      	cmp	r0, r3
     33c:	d033      	beq.n	3a6 <_sercom_get_default_pad+0x6e>
     33e:	d806      	bhi.n	34e <_sercom_get_default_pad+0x16>
     340:	4b43      	ldr	r3, [pc, #268]	; (450 <_sercom_get_default_pad+0x118>)
     342:	4298      	cmp	r0, r3
     344:	d00d      	beq.n	362 <_sercom_get_default_pad+0x2a>
     346:	4b43      	ldr	r3, [pc, #268]	; (454 <_sercom_get_default_pad+0x11c>)
     348:	4298      	cmp	r0, r3
     34a:	d01b      	beq.n	384 <_sercom_get_default_pad+0x4c>
     34c:	e06f      	b.n	42e <_sercom_get_default_pad+0xf6>
     34e:	4b42      	ldr	r3, [pc, #264]	; (458 <_sercom_get_default_pad+0x120>)
     350:	4298      	cmp	r0, r3
     352:	d04a      	beq.n	3ea <_sercom_get_default_pad+0xb2>
     354:	4b41      	ldr	r3, [pc, #260]	; (45c <_sercom_get_default_pad+0x124>)
     356:	4298      	cmp	r0, r3
     358:	d058      	beq.n	40c <_sercom_get_default_pad+0xd4>
     35a:	4b41      	ldr	r3, [pc, #260]	; (460 <_sercom_get_default_pad+0x128>)
     35c:	4298      	cmp	r0, r3
     35e:	d166      	bne.n	42e <_sercom_get_default_pad+0xf6>
     360:	e032      	b.n	3c8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     362:	2901      	cmp	r1, #1
     364:	d065      	beq.n	432 <_sercom_get_default_pad+0xfa>
     366:	2900      	cmp	r1, #0
     368:	d004      	beq.n	374 <_sercom_get_default_pad+0x3c>
     36a:	2902      	cmp	r1, #2
     36c:	d006      	beq.n	37c <_sercom_get_default_pad+0x44>
     36e:	2903      	cmp	r1, #3
     370:	d006      	beq.n	380 <_sercom_get_default_pad+0x48>
     372:	e001      	b.n	378 <_sercom_get_default_pad+0x40>
     374:	483b      	ldr	r0, [pc, #236]	; (464 <_sercom_get_default_pad+0x12c>)
     376:	e067      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     378:	2000      	movs	r0, #0
     37a:	e065      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37c:	483a      	ldr	r0, [pc, #232]	; (468 <_sercom_get_default_pad+0x130>)
     37e:	e063      	b.n	448 <_sercom_get_default_pad+0x110>
     380:	483a      	ldr	r0, [pc, #232]	; (46c <_sercom_get_default_pad+0x134>)
     382:	e061      	b.n	448 <_sercom_get_default_pad+0x110>
     384:	2901      	cmp	r1, #1
     386:	d056      	beq.n	436 <_sercom_get_default_pad+0xfe>
     388:	2900      	cmp	r1, #0
     38a:	d004      	beq.n	396 <_sercom_get_default_pad+0x5e>
     38c:	2902      	cmp	r1, #2
     38e:	d006      	beq.n	39e <_sercom_get_default_pad+0x66>
     390:	2903      	cmp	r1, #3
     392:	d006      	beq.n	3a2 <_sercom_get_default_pad+0x6a>
     394:	e001      	b.n	39a <_sercom_get_default_pad+0x62>
     396:	2003      	movs	r0, #3
     398:	e056      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     39a:	2000      	movs	r0, #0
     39c:	e054      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     39e:	4834      	ldr	r0, [pc, #208]	; (470 <_sercom_get_default_pad+0x138>)
     3a0:	e052      	b.n	448 <_sercom_get_default_pad+0x110>
     3a2:	4834      	ldr	r0, [pc, #208]	; (474 <_sercom_get_default_pad+0x13c>)
     3a4:	e050      	b.n	448 <_sercom_get_default_pad+0x110>
     3a6:	2901      	cmp	r1, #1
     3a8:	d047      	beq.n	43a <_sercom_get_default_pad+0x102>
     3aa:	2900      	cmp	r1, #0
     3ac:	d004      	beq.n	3b8 <_sercom_get_default_pad+0x80>
     3ae:	2902      	cmp	r1, #2
     3b0:	d006      	beq.n	3c0 <_sercom_get_default_pad+0x88>
     3b2:	2903      	cmp	r1, #3
     3b4:	d006      	beq.n	3c4 <_sercom_get_default_pad+0x8c>
     3b6:	e001      	b.n	3bc <_sercom_get_default_pad+0x84>
     3b8:	482f      	ldr	r0, [pc, #188]	; (478 <_sercom_get_default_pad+0x140>)
     3ba:	e045      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3bc:	2000      	movs	r0, #0
     3be:	e043      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3c0:	482e      	ldr	r0, [pc, #184]	; (47c <_sercom_get_default_pad+0x144>)
     3c2:	e041      	b.n	448 <_sercom_get_default_pad+0x110>
     3c4:	482e      	ldr	r0, [pc, #184]	; (480 <_sercom_get_default_pad+0x148>)
     3c6:	e03f      	b.n	448 <_sercom_get_default_pad+0x110>
     3c8:	2901      	cmp	r1, #1
     3ca:	d038      	beq.n	43e <_sercom_get_default_pad+0x106>
     3cc:	2900      	cmp	r1, #0
     3ce:	d004      	beq.n	3da <_sercom_get_default_pad+0xa2>
     3d0:	2902      	cmp	r1, #2
     3d2:	d006      	beq.n	3e2 <_sercom_get_default_pad+0xaa>
     3d4:	2903      	cmp	r1, #3
     3d6:	d006      	beq.n	3e6 <_sercom_get_default_pad+0xae>
     3d8:	e001      	b.n	3de <_sercom_get_default_pad+0xa6>
     3da:	482a      	ldr	r0, [pc, #168]	; (484 <_sercom_get_default_pad+0x14c>)
     3dc:	e034      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3de:	2000      	movs	r0, #0
     3e0:	e032      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e2:	4829      	ldr	r0, [pc, #164]	; (488 <_sercom_get_default_pad+0x150>)
     3e4:	e030      	b.n	448 <_sercom_get_default_pad+0x110>
     3e6:	4829      	ldr	r0, [pc, #164]	; (48c <_sercom_get_default_pad+0x154>)
     3e8:	e02e      	b.n	448 <_sercom_get_default_pad+0x110>
     3ea:	2901      	cmp	r1, #1
     3ec:	d029      	beq.n	442 <_sercom_get_default_pad+0x10a>
     3ee:	2900      	cmp	r1, #0
     3f0:	d004      	beq.n	3fc <_sercom_get_default_pad+0xc4>
     3f2:	2902      	cmp	r1, #2
     3f4:	d006      	beq.n	404 <_sercom_get_default_pad+0xcc>
     3f6:	2903      	cmp	r1, #3
     3f8:	d006      	beq.n	408 <_sercom_get_default_pad+0xd0>
     3fa:	e001      	b.n	400 <_sercom_get_default_pad+0xc8>
     3fc:	4824      	ldr	r0, [pc, #144]	; (490 <_sercom_get_default_pad+0x158>)
     3fe:	e023      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     400:	2000      	movs	r0, #0
     402:	e021      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     404:	4823      	ldr	r0, [pc, #140]	; (494 <_sercom_get_default_pad+0x15c>)
     406:	e01f      	b.n	448 <_sercom_get_default_pad+0x110>
     408:	4823      	ldr	r0, [pc, #140]	; (498 <_sercom_get_default_pad+0x160>)
     40a:	e01d      	b.n	448 <_sercom_get_default_pad+0x110>
     40c:	2901      	cmp	r1, #1
     40e:	d01a      	beq.n	446 <_sercom_get_default_pad+0x10e>
     410:	2900      	cmp	r1, #0
     412:	d004      	beq.n	41e <_sercom_get_default_pad+0xe6>
     414:	2902      	cmp	r1, #2
     416:	d006      	beq.n	426 <_sercom_get_default_pad+0xee>
     418:	2903      	cmp	r1, #3
     41a:	d006      	beq.n	42a <_sercom_get_default_pad+0xf2>
     41c:	e001      	b.n	422 <_sercom_get_default_pad+0xea>
     41e:	481f      	ldr	r0, [pc, #124]	; (49c <_sercom_get_default_pad+0x164>)
     420:	e012      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     422:	2000      	movs	r0, #0
     424:	e010      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     426:	481e      	ldr	r0, [pc, #120]	; (4a0 <_sercom_get_default_pad+0x168>)
     428:	e00e      	b.n	448 <_sercom_get_default_pad+0x110>
     42a:	481e      	ldr	r0, [pc, #120]	; (4a4 <_sercom_get_default_pad+0x16c>)
     42c:	e00c      	b.n	448 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     42e:	2000      	movs	r0, #0
     430:	e00a      	b.n	448 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     432:	481d      	ldr	r0, [pc, #116]	; (4a8 <_sercom_get_default_pad+0x170>)
     434:	e008      	b.n	448 <_sercom_get_default_pad+0x110>
     436:	481d      	ldr	r0, [pc, #116]	; (4ac <_sercom_get_default_pad+0x174>)
     438:	e006      	b.n	448 <_sercom_get_default_pad+0x110>
     43a:	481d      	ldr	r0, [pc, #116]	; (4b0 <_sercom_get_default_pad+0x178>)
     43c:	e004      	b.n	448 <_sercom_get_default_pad+0x110>
     43e:	481d      	ldr	r0, [pc, #116]	; (4b4 <_sercom_get_default_pad+0x17c>)
     440:	e002      	b.n	448 <_sercom_get_default_pad+0x110>
     442:	481d      	ldr	r0, [pc, #116]	; (4b8 <_sercom_get_default_pad+0x180>)
     444:	e000      	b.n	448 <_sercom_get_default_pad+0x110>
     446:	481d      	ldr	r0, [pc, #116]	; (4bc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     448:	4770      	bx	lr
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	42001000 	.word	0x42001000
     450:	42000800 	.word	0x42000800
     454:	42000c00 	.word	0x42000c00
     458:	42001800 	.word	0x42001800
     45c:	42001c00 	.word	0x42001c00
     460:	42001400 	.word	0x42001400
     464:	00040003 	.word	0x00040003
     468:	00060003 	.word	0x00060003
     46c:	00070003 	.word	0x00070003
     470:	001e0003 	.word	0x001e0003
     474:	001f0003 	.word	0x001f0003
     478:	00080003 	.word	0x00080003
     47c:	000a0003 	.word	0x000a0003
     480:	000b0003 	.word	0x000b0003
     484:	00100003 	.word	0x00100003
     488:	00120003 	.word	0x00120003
     48c:	00130003 	.word	0x00130003
     490:	000c0003 	.word	0x000c0003
     494:	000e0003 	.word	0x000e0003
     498:	000f0003 	.word	0x000f0003
     49c:	00160003 	.word	0x00160003
     4a0:	00180003 	.word	0x00180003
     4a4:	00190003 	.word	0x00190003
     4a8:	00050003 	.word	0x00050003
     4ac:	00010003 	.word	0x00010003
     4b0:	00090003 	.word	0x00090003
     4b4:	00110003 	.word	0x00110003
     4b8:	000d0003 	.word	0x000d0003
     4bc:	00170003 	.word	0x00170003

000004c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4c4:	4a0c      	ldr	r2, [pc, #48]	; (4f8 <_sercom_get_sercom_inst_index+0x38>)
     4c6:	466b      	mov	r3, sp
     4c8:	ca70      	ldmia	r2!, {r4, r5, r6}
     4ca:	c370      	stmia	r3!, {r4, r5, r6}
     4cc:	ca32      	ldmia	r2!, {r1, r4, r5}
     4ce:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4d0:	9e00      	ldr	r6, [sp, #0]
     4d2:	4286      	cmp	r6, r0
     4d4:	d006      	beq.n	4e4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4d6:	2301      	movs	r3, #1
     4d8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4da:	4669      	mov	r1, sp
     4dc:	5852      	ldr	r2, [r2, r1]
     4de:	4282      	cmp	r2, r0
     4e0:	d103      	bne.n	4ea <_sercom_get_sercom_inst_index+0x2a>
     4e2:	e000      	b.n	4e6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4e4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4e6:	b2d8      	uxtb	r0, r3
     4e8:	e003      	b.n	4f2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ea:	3301      	adds	r3, #1
     4ec:	2b06      	cmp	r3, #6
     4ee:	d1f3      	bne.n	4d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     4f0:	2000      	movs	r0, #0
}
     4f2:	b006      	add	sp, #24
     4f4:	bd70      	pop	{r4, r5, r6, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	000062c4 	.word	0x000062c4

000004fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	4647      	mov	r7, r8
     500:	b480      	push	{r7}
     502:	1c0c      	adds	r4, r1, #0
     504:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     506:	2800      	cmp	r0, #0
     508:	d10c      	bne.n	524 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     50a:	2a00      	cmp	r2, #0
     50c:	dd0d      	ble.n	52a <_read+0x2e>
     50e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     510:	4e09      	ldr	r6, [pc, #36]	; (538 <_read+0x3c>)
     512:	4d0a      	ldr	r5, [pc, #40]	; (53c <_read+0x40>)
     514:	6830      	ldr	r0, [r6, #0]
     516:	1c21      	adds	r1, r4, #0
     518:	682b      	ldr	r3, [r5, #0]
     51a:	4798      	blx	r3
		ptr++;
     51c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     51e:	42bc      	cmp	r4, r7
     520:	d1f8      	bne.n	514 <_read+0x18>
     522:	e004      	b.n	52e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     524:	2001      	movs	r0, #1
     526:	4240      	negs	r0, r0
     528:	e002      	b.n	530 <_read+0x34>
	}

	for (; len > 0; --len) {
     52a:	2000      	movs	r0, #0
     52c:	e000      	b.n	530 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     52e:	4640      	mov	r0, r8
	}
	return nChars;
}
     530:	bc04      	pop	{r2}
     532:	4690      	mov	r8, r2
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	20000144 	.word	0x20000144
     53c:	2000013c 	.word	0x2000013c

00000540 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     540:	b5f0      	push	{r4, r5, r6, r7, lr}
     542:	4647      	mov	r7, r8
     544:	b480      	push	{r7}
     546:	1c0e      	adds	r6, r1, #0
     548:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     54a:	3801      	subs	r0, #1
     54c:	2802      	cmp	r0, #2
     54e:	d810      	bhi.n	572 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     550:	2a00      	cmp	r2, #0
     552:	d011      	beq.n	578 <_write+0x38>
     554:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     556:	4b0d      	ldr	r3, [pc, #52]	; (58c <_write+0x4c>)
     558:	4698      	mov	r8, r3
     55a:	4f0d      	ldr	r7, [pc, #52]	; (590 <_write+0x50>)
     55c:	4643      	mov	r3, r8
     55e:	6818      	ldr	r0, [r3, #0]
     560:	5d31      	ldrb	r1, [r6, r4]
     562:	683b      	ldr	r3, [r7, #0]
     564:	4798      	blx	r3
     566:	2800      	cmp	r0, #0
     568:	db08      	blt.n	57c <_write+0x3c>
			return -1;
		}
		++nChars;
     56a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     56c:	42a5      	cmp	r5, r4
     56e:	d1f5      	bne.n	55c <_write+0x1c>
     570:	e007      	b.n	582 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     572:	2001      	movs	r0, #1
     574:	4240      	negs	r0, r0
     576:	e005      	b.n	584 <_write+0x44>
	}

	for (; len != 0; --len) {
     578:	2000      	movs	r0, #0
     57a:	e003      	b.n	584 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     57c:	2001      	movs	r0, #1
     57e:	4240      	negs	r0, r0
     580:	e000      	b.n	584 <_write+0x44>
		}
		++nChars;
     582:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     584:	bc04      	pop	{r2}
     586:	4690      	mov	r8, r2
     588:	bdf0      	pop	{r4, r5, r6, r7, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	20000144 	.word	0x20000144
     590:	20000140 	.word	0x20000140

00000594 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
     596:	465f      	mov	r7, fp
     598:	4656      	mov	r6, sl
     59a:	464d      	mov	r5, r9
     59c:	4644      	mov	r4, r8
     59e:	b4f0      	push	{r4, r5, r6, r7}
     5a0:	b091      	sub	sp, #68	; 0x44
     5a2:	1c05      	adds	r5, r0, #0
     5a4:	1c0c      	adds	r4, r1, #0
     5a6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5a8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5aa:	1c08      	adds	r0, r1, #0
     5ac:	4bad      	ldr	r3, [pc, #692]	; (864 <usart_init+0x2d0>)
     5ae:	4798      	blx	r3
     5b0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5b2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5b4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5b6:	07d9      	lsls	r1, r3, #31
     5b8:	d500      	bpl.n	5bc <usart_init+0x28>
     5ba:	e14b      	b.n	854 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5bc:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     5be:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5c0:	079f      	lsls	r7, r3, #30
     5c2:	d500      	bpl.n	5c6 <usart_init+0x32>
     5c4:	e146      	b.n	854 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5c6:	4ba8      	ldr	r3, [pc, #672]	; (868 <usart_init+0x2d4>)
     5c8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5ca:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5cc:	2701      	movs	r7, #1
     5ce:	408f      	lsls	r7, r1
     5d0:	1c39      	adds	r1, r7, #0
     5d2:	4301      	orrs	r1, r0
     5d4:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5d6:	a90f      	add	r1, sp, #60	; 0x3c
     5d8:	272d      	movs	r7, #45	; 0x2d
     5da:	5df3      	ldrb	r3, [r6, r7]
     5dc:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5de:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5e0:	b2d2      	uxtb	r2, r2
     5e2:	4690      	mov	r8, r2
     5e4:	1c10      	adds	r0, r2, #0
     5e6:	4ba1      	ldr	r3, [pc, #644]	; (86c <usart_init+0x2d8>)
     5e8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5ea:	4640      	mov	r0, r8
     5ec:	4ba0      	ldr	r3, [pc, #640]	; (870 <usart_init+0x2dc>)
     5ee:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5f0:	5df0      	ldrb	r0, [r6, r7]
     5f2:	2100      	movs	r1, #0
     5f4:	4b9f      	ldr	r3, [pc, #636]	; (874 <usart_init+0x2e0>)
     5f6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     5f8:	7af3      	ldrb	r3, [r6, #11]
     5fa:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     5fc:	2324      	movs	r3, #36	; 0x24
     5fe:	5cf3      	ldrb	r3, [r6, r3]
     600:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     602:	2325      	movs	r3, #37	; 0x25
     604:	5cf3      	ldrb	r3, [r6, r3]
     606:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     608:	7ef3      	ldrb	r3, [r6, #27]
     60a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     60c:	7f33      	ldrb	r3, [r6, #28]
     60e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     610:	6829      	ldr	r1, [r5, #0]
     612:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     614:	1c08      	adds	r0, r1, #0
     616:	4b93      	ldr	r3, [pc, #588]	; (864 <usart_init+0x2d0>)
     618:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     61a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     61c:	2200      	movs	r2, #0
     61e:	466b      	mov	r3, sp
     620:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     622:	8a32      	ldrh	r2, [r6, #16]
     624:	9202      	str	r2, [sp, #8]
     626:	2380      	movs	r3, #128	; 0x80
     628:	01db      	lsls	r3, r3, #7
     62a:	429a      	cmp	r2, r3
     62c:	d021      	beq.n	672 <usart_init+0xde>
     62e:	2380      	movs	r3, #128	; 0x80
     630:	01db      	lsls	r3, r3, #7
     632:	429a      	cmp	r2, r3
     634:	d804      	bhi.n	640 <usart_init+0xac>
     636:	2380      	movs	r3, #128	; 0x80
     638:	019b      	lsls	r3, r3, #6
     63a:	429a      	cmp	r2, r3
     63c:	d011      	beq.n	662 <usart_init+0xce>
     63e:	e008      	b.n	652 <usart_init+0xbe>
     640:	23c0      	movs	r3, #192	; 0xc0
     642:	01db      	lsls	r3, r3, #7
     644:	9f02      	ldr	r7, [sp, #8]
     646:	429f      	cmp	r7, r3
     648:	d00f      	beq.n	66a <usart_init+0xd6>
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	021b      	lsls	r3, r3, #8
     64e:	429f      	cmp	r7, r3
     650:	d003      	beq.n	65a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     652:	2710      	movs	r7, #16
     654:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     656:	2700      	movs	r7, #0
     658:	e00e      	b.n	678 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     65a:	2703      	movs	r7, #3
     65c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     65e:	2700      	movs	r7, #0
     660:	e00a      	b.n	678 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     662:	2710      	movs	r7, #16
     664:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     666:	2701      	movs	r7, #1
     668:	e006      	b.n	678 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     66a:	2708      	movs	r7, #8
     66c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     66e:	2701      	movs	r7, #1
     670:	e002      	b.n	678 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     672:	2708      	movs	r7, #8
     674:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     676:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     678:	6831      	ldr	r1, [r6, #0]
     67a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     67c:	68f2      	ldr	r2, [r6, #12]
     67e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     680:	6973      	ldr	r3, [r6, #20]
     682:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     684:	7e31      	ldrb	r1, [r6, #24]
     686:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     688:	2326      	movs	r3, #38	; 0x26
     68a:	5cf3      	ldrb	r3, [r6, r3]
     68c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     68e:	6873      	ldr	r3, [r6, #4]
     690:	2b00      	cmp	r3, #0
     692:	d013      	beq.n	6bc <usart_init+0x128>
     694:	2280      	movs	r2, #128	; 0x80
     696:	0552      	lsls	r2, r2, #21
     698:	4293      	cmp	r3, r2
     69a:	d12e      	bne.n	6fa <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     69c:	2327      	movs	r3, #39	; 0x27
     69e:	5cf3      	ldrb	r3, [r6, r3]
     6a0:	2b00      	cmp	r3, #0
     6a2:	d12e      	bne.n	702 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6a4:	6a37      	ldr	r7, [r6, #32]
     6a6:	b2c0      	uxtb	r0, r0
     6a8:	4b73      	ldr	r3, [pc, #460]	; (878 <usart_init+0x2e4>)
     6aa:	4798      	blx	r3
     6ac:	1c01      	adds	r1, r0, #0
     6ae:	1c38      	adds	r0, r7, #0
     6b0:	466a      	mov	r2, sp
     6b2:	3226      	adds	r2, #38	; 0x26
     6b4:	4b71      	ldr	r3, [pc, #452]	; (87c <usart_init+0x2e8>)
     6b6:	4798      	blx	r3
     6b8:	1c03      	adds	r3, r0, #0
     6ba:	e01f      	b.n	6fc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     6bc:	2327      	movs	r3, #39	; 0x27
     6be:	5cf3      	ldrb	r3, [r6, r3]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d00a      	beq.n	6da <usart_init+0x146>
				status_code =
     6c4:	9a06      	ldr	r2, [sp, #24]
     6c6:	9200      	str	r2, [sp, #0]
     6c8:	6a30      	ldr	r0, [r6, #32]
     6ca:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6cc:	466a      	mov	r2, sp
     6ce:	3226      	adds	r2, #38	; 0x26
     6d0:	1c3b      	adds	r3, r7, #0
     6d2:	4f6b      	ldr	r7, [pc, #428]	; (880 <usart_init+0x2ec>)
     6d4:	47b8      	blx	r7
     6d6:	1c03      	adds	r3, r0, #0
     6d8:	e010      	b.n	6fc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     6da:	6a31      	ldr	r1, [r6, #32]
     6dc:	9107      	str	r1, [sp, #28]
     6de:	b2c0      	uxtb	r0, r0
     6e0:	4b65      	ldr	r3, [pc, #404]	; (878 <usart_init+0x2e4>)
     6e2:	4798      	blx	r3
     6e4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     6e6:	9a06      	ldr	r2, [sp, #24]
     6e8:	9200      	str	r2, [sp, #0]
     6ea:	9807      	ldr	r0, [sp, #28]
     6ec:	466a      	mov	r2, sp
     6ee:	3226      	adds	r2, #38	; 0x26
     6f0:	1c3b      	adds	r3, r7, #0
     6f2:	4f63      	ldr	r7, [pc, #396]	; (880 <usart_init+0x2ec>)
     6f4:	47b8      	blx	r7
     6f6:	1c03      	adds	r3, r0, #0
     6f8:	e000      	b.n	6fc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     6fa:	2300      	movs	r3, #0
     6fc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     6fe:	d000      	beq.n	702 <usart_init+0x16e>
     700:	e0a8      	b.n	854 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     702:	7e73      	ldrb	r3, [r6, #25]
     704:	2b00      	cmp	r3, #0
     706:	d002      	beq.n	70e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     708:	7eb3      	ldrb	r3, [r6, #26]
     70a:	4641      	mov	r1, r8
     70c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     70e:	682a      	ldr	r2, [r5, #0]
     710:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     712:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     714:	2b00      	cmp	r3, #0
     716:	d1fc      	bne.n	712 <usart_init+0x17e>
     718:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     71a:	466b      	mov	r3, sp
     71c:	3326      	adds	r3, #38	; 0x26
     71e:	881b      	ldrh	r3, [r3, #0]
     720:	4642      	mov	r2, r8
     722:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     724:	464b      	mov	r3, r9
     726:	9f03      	ldr	r7, [sp, #12]
     728:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     72a:	9f04      	ldr	r7, [sp, #16]
     72c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     72e:	6871      	ldr	r1, [r6, #4]
     730:	430b      	orrs	r3, r1
		config->sample_rate |
     732:	9f02      	ldr	r7, [sp, #8]
     734:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     736:	4652      	mov	r2, sl
     738:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     73a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     73c:	4659      	mov	r1, fp
     73e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     740:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     742:	2327      	movs	r3, #39	; 0x27
     744:	5cf3      	ldrb	r3, [r6, r3]
     746:	2b00      	cmp	r3, #0
     748:	d101      	bne.n	74e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     74a:	2304      	movs	r3, #4
     74c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     74e:	7e71      	ldrb	r1, [r6, #25]
     750:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     752:	7f33      	ldrb	r3, [r6, #28]
     754:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     756:	4319      	orrs	r1, r3
     758:	7af2      	ldrb	r2, [r6, #11]
     75a:	7ab3      	ldrb	r3, [r6, #10]
     75c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     75e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     760:	7f73      	ldrb	r3, [r6, #29]
     762:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     764:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     766:	2324      	movs	r3, #36	; 0x24
     768:	5cf3      	ldrb	r3, [r6, r3]
     76a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     76c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     76e:	2325      	movs	r3, #37	; 0x25
     770:	5cf3      	ldrb	r3, [r6, r3]
     772:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     774:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     776:	8933      	ldrh	r3, [r6, #8]
     778:	2bff      	cmp	r3, #255	; 0xff
     77a:	d00b      	beq.n	794 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     77c:	7ef2      	ldrb	r2, [r6, #27]
     77e:	2a00      	cmp	r2, #0
     780:	d003      	beq.n	78a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     782:	22a0      	movs	r2, #160	; 0xa0
     784:	04d2      	lsls	r2, r2, #19
     786:	4317      	orrs	r7, r2
     788:	e002      	b.n	790 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0452      	lsls	r2, r2, #17
     78e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     790:	4319      	orrs	r1, r3
     792:	e005      	b.n	7a0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     794:	7ef3      	ldrb	r3, [r6, #27]
     796:	2b00      	cmp	r3, #0
     798:	d002      	beq.n	7a0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     79a:	2380      	movs	r3, #128	; 0x80
     79c:	04db      	lsls	r3, r3, #19
     79e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     7a0:	232c      	movs	r3, #44	; 0x2c
     7a2:	5cf3      	ldrb	r3, [r6, r3]
     7a4:	2b00      	cmp	r3, #0
     7a6:	d103      	bne.n	7b0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7a8:	4b36      	ldr	r3, [pc, #216]	; (884 <usart_init+0x2f0>)
     7aa:	789b      	ldrb	r3, [r3, #2]
     7ac:	079a      	lsls	r2, r3, #30
     7ae:	d501      	bpl.n	7b4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7b0:	2380      	movs	r3, #128	; 0x80
     7b2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7b4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7b6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7b8:	2b00      	cmp	r3, #0
     7ba:	d1fc      	bne.n	7b6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     7bc:	4643      	mov	r3, r8
     7be:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7c0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7c2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d1fc      	bne.n	7c2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     7c8:	4641      	mov	r1, r8
     7ca:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7cc:	ab0e      	add	r3, sp, #56	; 0x38
     7ce:	2280      	movs	r2, #128	; 0x80
     7d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7d2:	2200      	movs	r2, #0
     7d4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7d6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7d8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     7da:	6b32      	ldr	r2, [r6, #48]	; 0x30
     7dc:	920a      	str	r2, [sp, #40]	; 0x28
     7de:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7e0:	930b      	str	r3, [sp, #44]	; 0x2c
     7e2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     7e4:	970c      	str	r7, [sp, #48]	; 0x30
     7e6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     7e8:	960d      	str	r6, [sp, #52]	; 0x34
     7ea:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7ec:	ae0e      	add	r6, sp, #56	; 0x38
     7ee:	b2f9      	uxtb	r1, r7
     7f0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7f2:	aa0a      	add	r2, sp, #40	; 0x28
     7f4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7f6:	2800      	cmp	r0, #0
     7f8:	d102      	bne.n	800 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7fa:	1c20      	adds	r0, r4, #0
     7fc:	4a22      	ldr	r2, [pc, #136]	; (888 <usart_init+0x2f4>)
     7fe:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     800:	1c43      	adds	r3, r0, #1
     802:	d005      	beq.n	810 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     804:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     806:	0c00      	lsrs	r0, r0, #16
     808:	b2c0      	uxtb	r0, r0
     80a:	1c31      	adds	r1, r6, #0
     80c:	4a1f      	ldr	r2, [pc, #124]	; (88c <usart_init+0x2f8>)
     80e:	4790      	blx	r2
     810:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     812:	2f04      	cmp	r7, #4
     814:	d1eb      	bne.n	7ee <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     816:	2300      	movs	r3, #0
     818:	60eb      	str	r3, [r5, #12]
     81a:	612b      	str	r3, [r5, #16]
     81c:	616b      	str	r3, [r5, #20]
     81e:	61ab      	str	r3, [r5, #24]
     820:	61eb      	str	r3, [r5, #28]
     822:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     824:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     826:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     828:	2200      	movs	r2, #0
     82a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     82c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     82e:	2330      	movs	r3, #48	; 0x30
     830:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     832:	2331      	movs	r3, #49	; 0x31
     834:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     836:	2332      	movs	r3, #50	; 0x32
     838:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     83a:	2333      	movs	r3, #51	; 0x33
     83c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     83e:	6828      	ldr	r0, [r5, #0]
     840:	4b08      	ldr	r3, [pc, #32]	; (864 <usart_init+0x2d0>)
     842:	4798      	blx	r3
     844:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     846:	4912      	ldr	r1, [pc, #72]	; (890 <usart_init+0x2fc>)
     848:	4b12      	ldr	r3, [pc, #72]	; (894 <usart_init+0x300>)
     84a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     84c:	00a4      	lsls	r4, r4, #2
     84e:	4b12      	ldr	r3, [pc, #72]	; (898 <usart_init+0x304>)
     850:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     852:	2000      	movs	r0, #0
}
     854:	b011      	add	sp, #68	; 0x44
     856:	bc3c      	pop	{r2, r3, r4, r5}
     858:	4690      	mov	r8, r2
     85a:	4699      	mov	r9, r3
     85c:	46a2      	mov	sl, r4
     85e:	46ab      	mov	fp, r5
     860:	bdf0      	pop	{r4, r5, r6, r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	000004c1 	.word	0x000004c1
     868:	40000400 	.word	0x40000400
     86c:	000014e9 	.word	0x000014e9
     870:	0000145d 	.word	0x0000145d
     874:	000002e9 	.word	0x000002e9
     878:	00001505 	.word	0x00001505
     87c:	00000111 	.word	0x00000111
     880:	00000139 	.word	0x00000139
     884:	41002000 	.word	0x41002000
     888:	00000339 	.word	0x00000339
     88c:	000015c5 	.word	0x000015c5
     890:	00000941 	.word	0x00000941
     894:	00000ae1 	.word	0x00000ae1
     898:	20000148 	.word	0x20000148

0000089c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     89c:	b510      	push	{r4, lr}
     89e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8a2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     8a4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8a6:	2c00      	cmp	r4, #0
     8a8:	d00d      	beq.n	8c6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8aa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     8ac:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     8ae:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8b0:	2a00      	cmp	r2, #0
     8b2:	d108      	bne.n	8c6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8b4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8b6:	2a00      	cmp	r2, #0
     8b8:	d1fc      	bne.n	8b4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     8ba:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8bc:	2102      	movs	r1, #2
     8be:	7e1a      	ldrb	r2, [r3, #24]
     8c0:	420a      	tst	r2, r1
     8c2:	d0fc      	beq.n	8be <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     8c4:	2000      	movs	r0, #0
}
     8c6:	bd10      	pop	{r4, pc}

000008c8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     8c8:	b510      	push	{r4, lr}
     8ca:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8cc:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8ce:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     8d0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8d2:	2a00      	cmp	r2, #0
     8d4:	d033      	beq.n	93e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     8d8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     8da:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8dc:	2b00      	cmp	r3, #0
     8de:	d12e      	bne.n	93e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     8e0:	7e23      	ldrb	r3, [r4, #24]
     8e2:	075a      	lsls	r2, r3, #29
     8e4:	d52b      	bpl.n	93e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8e6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8e8:	2b00      	cmp	r3, #0
     8ea:	d1fc      	bne.n	8e6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     8ec:	8b63      	ldrh	r3, [r4, #26]
     8ee:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     8f0:	069a      	lsls	r2, r3, #26
     8f2:	d021      	beq.n	938 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     8f4:	079a      	lsls	r2, r3, #30
     8f6:	d503      	bpl.n	900 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     8f8:	2302      	movs	r3, #2
     8fa:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     8fc:	201a      	movs	r0, #26
     8fe:	e01e      	b.n	93e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     900:	075a      	lsls	r2, r3, #29
     902:	d503      	bpl.n	90c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     904:	2304      	movs	r3, #4
     906:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     908:	201e      	movs	r0, #30
     90a:	e018      	b.n	93e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     90c:	07da      	lsls	r2, r3, #31
     90e:	d503      	bpl.n	918 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     910:	2301      	movs	r3, #1
     912:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     914:	2013      	movs	r0, #19
     916:	e012      	b.n	93e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     918:	06da      	lsls	r2, r3, #27
     91a:	d505      	bpl.n	928 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     91c:	8b62      	ldrh	r2, [r4, #26]
     91e:	2310      	movs	r3, #16
     920:	4313      	orrs	r3, r2
     922:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     924:	2042      	movs	r0, #66	; 0x42
     926:	e00a      	b.n	93e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     928:	069a      	lsls	r2, r3, #26
     92a:	d505      	bpl.n	938 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     92c:	8b62      	ldrh	r2, [r4, #26]
     92e:	2320      	movs	r3, #32
     930:	4313      	orrs	r3, r2
     932:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     934:	2041      	movs	r0, #65	; 0x41
     936:	e002      	b.n	93e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     938:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     93a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     93c:	2000      	movs	r0, #0
}
     93e:	bd10      	pop	{r4, pc}

00000940 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     942:	0080      	lsls	r0, r0, #2
     944:	4b64      	ldr	r3, [pc, #400]	; (ad8 <_usart_interrupt_handler+0x198>)
     946:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     948:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     94a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fc      	bne.n	94a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     950:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     952:	7da6      	ldrb	r6, [r4, #22]
     954:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     956:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     958:	5ceb      	ldrb	r3, [r5, r3]
     95a:	2230      	movs	r2, #48	; 0x30
     95c:	5caf      	ldrb	r7, [r5, r2]
     95e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     960:	07f1      	lsls	r1, r6, #31
     962:	d520      	bpl.n	9a6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     964:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     966:	b29b      	uxth	r3, r3
     968:	2b00      	cmp	r3, #0
     96a:	d01a      	beq.n	9a2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     96c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     96e:	781a      	ldrb	r2, [r3, #0]
     970:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     972:	1c59      	adds	r1, r3, #1
     974:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     976:	7969      	ldrb	r1, [r5, #5]
     978:	2901      	cmp	r1, #1
     97a:	d104      	bne.n	986 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     97c:	7859      	ldrb	r1, [r3, #1]
     97e:	0209      	lsls	r1, r1, #8
     980:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     982:	3302      	adds	r3, #2
     984:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     986:	05d3      	lsls	r3, r2, #23
     988:	0ddb      	lsrs	r3, r3, #23
     98a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     98c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     98e:	3b01      	subs	r3, #1
     990:	b29b      	uxth	r3, r3
     992:	85eb      	strh	r3, [r5, #46]	; 0x2e
     994:	2b00      	cmp	r3, #0
     996:	d106      	bne.n	9a6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     998:	2301      	movs	r3, #1
     99a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     99c:	2302      	movs	r3, #2
     99e:	75a3      	strb	r3, [r4, #22]
     9a0:	e001      	b.n	9a6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9a2:	2301      	movs	r3, #1
     9a4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9a6:	07b2      	lsls	r2, r6, #30
     9a8:	d509      	bpl.n	9be <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9aa:	2302      	movs	r3, #2
     9ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9ae:	2200      	movs	r2, #0
     9b0:	2333      	movs	r3, #51	; 0x33
     9b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9b4:	07fb      	lsls	r3, r7, #31
     9b6:	d502      	bpl.n	9be <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     9b8:	1c28      	adds	r0, r5, #0
     9ba:	68e9      	ldr	r1, [r5, #12]
     9bc:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9be:	0772      	lsls	r2, r6, #29
     9c0:	d56a      	bpl.n	a98 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     9c2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9c4:	b29b      	uxth	r3, r3
     9c6:	2b00      	cmp	r3, #0
     9c8:	d064      	beq.n	a94 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9ca:	8b63      	ldrh	r3, [r4, #26]
     9cc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     9ce:	0719      	lsls	r1, r3, #28
     9d0:	d402      	bmi.n	9d8 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9d2:	223f      	movs	r2, #63	; 0x3f
     9d4:	4013      	ands	r3, r2
     9d6:	e001      	b.n	9dc <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     9d8:	2237      	movs	r2, #55	; 0x37
     9da:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9dc:	2b00      	cmp	r3, #0
     9de:	d037      	beq.n	a50 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9e0:	079a      	lsls	r2, r3, #30
     9e2:	d507      	bpl.n	9f4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9e4:	221a      	movs	r2, #26
     9e6:	2332      	movs	r3, #50	; 0x32
     9e8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9ea:	8b62      	ldrh	r2, [r4, #26]
     9ec:	2302      	movs	r3, #2
     9ee:	4313      	orrs	r3, r2
     9f0:	8363      	strh	r3, [r4, #26]
     9f2:	e027      	b.n	a44 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9f4:	0759      	lsls	r1, r3, #29
     9f6:	d507      	bpl.n	a08 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     9f8:	221e      	movs	r2, #30
     9fa:	2332      	movs	r3, #50	; 0x32
     9fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     9fe:	8b62      	ldrh	r2, [r4, #26]
     a00:	2304      	movs	r3, #4
     a02:	4313      	orrs	r3, r2
     a04:	8363      	strh	r3, [r4, #26]
     a06:	e01d      	b.n	a44 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a08:	07da      	lsls	r2, r3, #31
     a0a:	d507      	bpl.n	a1c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a0c:	2213      	movs	r2, #19
     a0e:	2332      	movs	r3, #50	; 0x32
     a10:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a12:	8b62      	ldrh	r2, [r4, #26]
     a14:	2301      	movs	r3, #1
     a16:	4313      	orrs	r3, r2
     a18:	8363      	strh	r3, [r4, #26]
     a1a:	e013      	b.n	a44 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a1c:	06d9      	lsls	r1, r3, #27
     a1e:	d507      	bpl.n	a30 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     a20:	2242      	movs	r2, #66	; 0x42
     a22:	2332      	movs	r3, #50	; 0x32
     a24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a26:	8b62      	ldrh	r2, [r4, #26]
     a28:	2310      	movs	r3, #16
     a2a:	4313      	orrs	r3, r2
     a2c:	8363      	strh	r3, [r4, #26]
     a2e:	e009      	b.n	a44 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a30:	2220      	movs	r2, #32
     a32:	421a      	tst	r2, r3
     a34:	d006      	beq.n	a44 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a36:	2241      	movs	r2, #65	; 0x41
     a38:	2332      	movs	r3, #50	; 0x32
     a3a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a3c:	8b62      	ldrh	r2, [r4, #26]
     a3e:	2320      	movs	r3, #32
     a40:	4313      	orrs	r3, r2
     a42:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a44:	077a      	lsls	r2, r7, #29
     a46:	d527      	bpl.n	a98 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a48:	1c28      	adds	r0, r5, #0
     a4a:	696b      	ldr	r3, [r5, #20]
     a4c:	4798      	blx	r3
     a4e:	e023      	b.n	a98 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a52:	05d2      	lsls	r2, r2, #23
     a54:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a56:	b2d3      	uxtb	r3, r2
     a58:	6a69      	ldr	r1, [r5, #36]	; 0x24
     a5a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a5c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a5e:	1c59      	adds	r1, r3, #1
     a60:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a62:	7969      	ldrb	r1, [r5, #5]
     a64:	2901      	cmp	r1, #1
     a66:	d104      	bne.n	a72 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a68:	0a12      	lsrs	r2, r2, #8
     a6a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     a6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a6e:	3301      	adds	r3, #1
     a70:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a72:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a74:	3b01      	subs	r3, #1
     a76:	b29b      	uxth	r3, r3
     a78:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a7a:	2b00      	cmp	r3, #0
     a7c:	d10c      	bne.n	a98 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a7e:	2304      	movs	r3, #4
     a80:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     a82:	2200      	movs	r2, #0
     a84:	2332      	movs	r3, #50	; 0x32
     a86:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     a88:	07ba      	lsls	r2, r7, #30
     a8a:	d505      	bpl.n	a98 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a8c:	1c28      	adds	r0, r5, #0
     a8e:	692b      	ldr	r3, [r5, #16]
     a90:	4798      	blx	r3
     a92:	e001      	b.n	a98 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a94:	2304      	movs	r3, #4
     a96:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     a98:	06f1      	lsls	r1, r6, #27
     a9a:	d507      	bpl.n	aac <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     a9c:	2310      	movs	r3, #16
     a9e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     aa0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     aa2:	06fa      	lsls	r2, r7, #27
     aa4:	d502      	bpl.n	aac <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     aa6:	1c28      	adds	r0, r5, #0
     aa8:	69eb      	ldr	r3, [r5, #28]
     aaa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     aac:	06b1      	lsls	r1, r6, #26
     aae:	d507      	bpl.n	ac0 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ab0:	2320      	movs	r3, #32
     ab2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ab4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     ab6:	073a      	lsls	r2, r7, #28
     ab8:	d502      	bpl.n	ac0 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     aba:	1c28      	adds	r0, r5, #0
     abc:	69ab      	ldr	r3, [r5, #24]
     abe:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ac0:	0731      	lsls	r1, r6, #28
     ac2:	d507      	bpl.n	ad4 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ac4:	2308      	movs	r3, #8
     ac6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ac8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     aca:	06ba      	lsls	r2, r7, #26
     acc:	d502      	bpl.n	ad4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ace:	6a2b      	ldr	r3, [r5, #32]
     ad0:	1c28      	adds	r0, r5, #0
     ad2:	4798      	blx	r3
		}
	}
#endif
}
     ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	20000148 	.word	0x20000148

00000adc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     adc:	4770      	bx	lr
     ade:	46c0      	nop			; (mov r8, r8)

00000ae0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     ae2:	4b0a      	ldr	r3, [pc, #40]	; (b0c <_sercom_set_handler+0x2c>)
     ae4:	781b      	ldrb	r3, [r3, #0]
     ae6:	2b00      	cmp	r3, #0
     ae8:	d10c      	bne.n	b04 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     aea:	4f09      	ldr	r7, [pc, #36]	; (b10 <_sercom_set_handler+0x30>)
     aec:	4e09      	ldr	r6, [pc, #36]	; (b14 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     aee:	4d0a      	ldr	r5, [pc, #40]	; (b18 <_sercom_set_handler+0x38>)
     af0:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     af2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     af4:	195a      	adds	r2, r3, r5
     af6:	6014      	str	r4, [r2, #0]
     af8:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     afa:	2b18      	cmp	r3, #24
     afc:	d1f9      	bne.n	af2 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     afe:	2201      	movs	r2, #1
     b00:	4b02      	ldr	r3, [pc, #8]	; (b0c <_sercom_set_handler+0x2c>)
     b02:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b04:	0080      	lsls	r0, r0, #2
     b06:	4b02      	ldr	r3, [pc, #8]	; (b10 <_sercom_set_handler+0x30>)
     b08:	50c1      	str	r1, [r0, r3]
}
     b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0c:	200000c0 	.word	0x200000c0
     b10:	200000c4 	.word	0x200000c4
     b14:	00000add 	.word	0x00000add
     b18:	20000148 	.word	0x20000148

00000b1c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b1c:	b510      	push	{r4, lr}
     b1e:	b082      	sub	sp, #8
     b20:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b22:	4668      	mov	r0, sp
     b24:	4905      	ldr	r1, [pc, #20]	; (b3c <_sercom_get_interrupt_vector+0x20>)
     b26:	2206      	movs	r2, #6
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <_sercom_get_interrupt_vector+0x24>)
     b2a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b2c:	1c20      	adds	r0, r4, #0
     b2e:	4b05      	ldr	r3, [pc, #20]	; (b44 <_sercom_get_interrupt_vector+0x28>)
     b30:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b32:	466b      	mov	r3, sp
     b34:	5618      	ldrsb	r0, [r3, r0]
}
     b36:	b002      	add	sp, #8
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	000062dc 	.word	0x000062dc
     b40:	00001a29 	.word	0x00001a29
     b44:	000004c1 	.word	0x000004c1

00000b48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b48:	b508      	push	{r3, lr}
     b4a:	4b02      	ldr	r3, [pc, #8]	; (b54 <SERCOM0_Handler+0xc>)
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	2000      	movs	r0, #0
     b50:	4798      	blx	r3
     b52:	bd08      	pop	{r3, pc}
     b54:	200000c4 	.word	0x200000c4

00000b58 <SERCOM1_Handler>:
     b58:	b508      	push	{r3, lr}
     b5a:	4b02      	ldr	r3, [pc, #8]	; (b64 <SERCOM1_Handler+0xc>)
     b5c:	685b      	ldr	r3, [r3, #4]
     b5e:	2001      	movs	r0, #1
     b60:	4798      	blx	r3
     b62:	bd08      	pop	{r3, pc}
     b64:	200000c4 	.word	0x200000c4

00000b68 <SERCOM2_Handler>:
     b68:	b508      	push	{r3, lr}
     b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <SERCOM2_Handler+0xc>)
     b6c:	689b      	ldr	r3, [r3, #8]
     b6e:	2002      	movs	r0, #2
     b70:	4798      	blx	r3
     b72:	bd08      	pop	{r3, pc}
     b74:	200000c4 	.word	0x200000c4

00000b78 <SERCOM3_Handler>:
     b78:	b508      	push	{r3, lr}
     b7a:	4b02      	ldr	r3, [pc, #8]	; (b84 <SERCOM3_Handler+0xc>)
     b7c:	68db      	ldr	r3, [r3, #12]
     b7e:	2003      	movs	r0, #3
     b80:	4798      	blx	r3
     b82:	bd08      	pop	{r3, pc}
     b84:	200000c4 	.word	0x200000c4

00000b88 <SERCOM4_Handler>:
     b88:	b508      	push	{r3, lr}
     b8a:	4b02      	ldr	r3, [pc, #8]	; (b94 <SERCOM4_Handler+0xc>)
     b8c:	691b      	ldr	r3, [r3, #16]
     b8e:	2004      	movs	r0, #4
     b90:	4798      	blx	r3
     b92:	bd08      	pop	{r3, pc}
     b94:	200000c4 	.word	0x200000c4

00000b98 <SERCOM5_Handler>:
     b98:	b508      	push	{r3, lr}
     b9a:	4b02      	ldr	r3, [pc, #8]	; (ba4 <SERCOM5_Handler+0xc>)
     b9c:	695b      	ldr	r3, [r3, #20]
     b9e:	2005      	movs	r0, #5
     ba0:	4798      	blx	r3
     ba2:	bd08      	pop	{r3, pc}
     ba4:	200000c4 	.word	0x200000c4

00000ba8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ba8:	4b0c      	ldr	r3, [pc, #48]	; (bdc <cpu_irq_enter_critical+0x34>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	2b00      	cmp	r3, #0
     bae:	d110      	bne.n	bd2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bb0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bb4:	2b00      	cmp	r3, #0
     bb6:	d109      	bne.n	bcc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     bb8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bbe:	2200      	movs	r2, #0
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <cpu_irq_enter_critical+0x38>)
     bc2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bc4:	2201      	movs	r2, #1
     bc6:	4b07      	ldr	r3, [pc, #28]	; (be4 <cpu_irq_enter_critical+0x3c>)
     bc8:	701a      	strb	r2, [r3, #0]
     bca:	e002      	b.n	bd2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bcc:	2200      	movs	r2, #0
     bce:	4b05      	ldr	r3, [pc, #20]	; (be4 <cpu_irq_enter_critical+0x3c>)
     bd0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bd2:	4b02      	ldr	r3, [pc, #8]	; (bdc <cpu_irq_enter_critical+0x34>)
     bd4:	681a      	ldr	r2, [r3, #0]
     bd6:	3201      	adds	r2, #1
     bd8:	601a      	str	r2, [r3, #0]
}
     bda:	4770      	bx	lr
     bdc:	200000dc 	.word	0x200000dc
     be0:	20000000 	.word	0x20000000
     be4:	200000e0 	.word	0x200000e0

00000be8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     be8:	4b08      	ldr	r3, [pc, #32]	; (c0c <cpu_irq_leave_critical+0x24>)
     bea:	681a      	ldr	r2, [r3, #0]
     bec:	3a01      	subs	r2, #1
     bee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d109      	bne.n	c0a <cpu_irq_leave_critical+0x22>
     bf6:	4b06      	ldr	r3, [pc, #24]	; (c10 <cpu_irq_leave_critical+0x28>)
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d005      	beq.n	c0a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bfe:	2201      	movs	r2, #1
     c00:	4b04      	ldr	r3, [pc, #16]	; (c14 <cpu_irq_leave_critical+0x2c>)
     c02:	701a      	strb	r2, [r3, #0]
     c04:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c08:	b662      	cpsie	i
	}
}
     c0a:	4770      	bx	lr
     c0c:	200000dc 	.word	0x200000dc
     c10:	200000e0 	.word	0x200000e0
     c14:	20000000 	.word	0x20000000

00000c18 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c18:	b5f0      	push	{r4, r5, r6, r7, lr}
     c1a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c1c:	ac01      	add	r4, sp, #4
     c1e:	2501      	movs	r5, #1
     c20:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c22:	2700      	movs	r7, #0
     c24:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c26:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c28:	203e      	movs	r0, #62	; 0x3e
     c2a:	1c21      	adds	r1, r4, #0
     c2c:	4e06      	ldr	r6, [pc, #24]	; (c48 <system_board_init+0x30>)
     c2e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c30:	2280      	movs	r2, #128	; 0x80
     c32:	05d2      	lsls	r2, r2, #23
     c34:	4b05      	ldr	r3, [pc, #20]	; (c4c <system_board_init+0x34>)
     c36:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c38:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c3a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c3c:	200f      	movs	r0, #15
     c3e:	1c21      	adds	r1, r4, #0
     c40:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c42:	b003      	add	sp, #12
     c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00001091 	.word	0x00001091
     c4c:	41004480 	.word	0x41004480

00000c50 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     c50:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     c52:	2200      	movs	r2, #0
     c54:	2300      	movs	r3, #0
     c56:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     c58:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     c5a:	2100      	movs	r1, #0
     c5c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     c5e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     c60:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     c62:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     c64:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     c66:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     c68:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     c6a:	24c0      	movs	r4, #192	; 0xc0
     c6c:	0164      	lsls	r4, r4, #5
     c6e:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     c70:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     c72:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     c74:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     c76:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     c78:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     c7a:	242a      	movs	r4, #42	; 0x2a
     c7c:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     c7e:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     c80:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     c82:	2424      	movs	r4, #36	; 0x24
     c84:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     c86:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     c88:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     c8a:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     c8c:	232b      	movs	r3, #43	; 0x2b
     c8e:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     c90:	232c      	movs	r3, #44	; 0x2c
     c92:	54c1      	strb	r1, [r0, r3]
}
     c94:	bd10      	pop	{r4, pc}
     c96:	46c0      	nop			; (mov r8, r8)

00000c98 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	465f      	mov	r7, fp
     c9c:	4656      	mov	r6, sl
     c9e:	464d      	mov	r5, r9
     ca0:	4644      	mov	r4, r8
     ca2:	b4f0      	push	{r4, r5, r6, r7}
     ca4:	b099      	sub	sp, #100	; 0x64
     ca6:	1c06      	adds	r6, r0, #0
     ca8:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     caa:	6001      	str	r1, [r0, #0]
     cac:	4bb5      	ldr	r3, [pc, #724]	; (f84 <adc_init+0x2ec>)
     cae:	6a18      	ldr	r0, [r3, #32]
     cb0:	2280      	movs	r2, #128	; 0x80
     cb2:	0252      	lsls	r2, r2, #9
     cb4:	4302      	orrs	r2, r0
     cb6:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cb8:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     cba:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     cbc:	07da      	lsls	r2, r3, #31
     cbe:	d500      	bpl.n	cc2 <adc_init+0x2a>
     cc0:	e1d9      	b.n	1076 <adc_init+0x3de>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cc2:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     cc4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     cc6:	0799      	lsls	r1, r3, #30
     cc8:	d500      	bpl.n	ccc <adc_init+0x34>
     cca:	e1d4      	b.n	1076 <adc_init+0x3de>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     ccc:	786b      	ldrb	r3, [r5, #1]
     cce:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     cd0:	2b00      	cmp	r3, #0
     cd2:	d104      	bne.n	cde <adc_init+0x46>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     cd4:	4bac      	ldr	r3, [pc, #688]	; (f88 <adc_init+0x2f0>)
     cd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
     cd8:	2204      	movs	r2, #4
     cda:	430a      	orrs	r2, r1
     cdc:	641a      	str	r2, [r3, #64]	; 0x40
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     cde:	6832      	ldr	r2, [r6, #0]
     ce0:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     ce2:	782b      	ldrb	r3, [r5, #0]
     ce4:	4668      	mov	r0, sp
     ce6:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     ce8:	201e      	movs	r0, #30
     cea:	a902      	add	r1, sp, #8
     cec:	4ba7      	ldr	r3, [pc, #668]	; (f8c <adc_init+0x2f4>)
     cee:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     cf0:	201e      	movs	r0, #30
     cf2:	4ba7      	ldr	r3, [pc, #668]	; (f90 <adc_init+0x2f8>)
     cf4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     cf6:	232c      	movs	r3, #44	; 0x2c
     cf8:	5ceb      	ldrb	r3, [r5, r3]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d042      	beq.n	d84 <adc_init+0xec>
		uint8_t offset = config->pin_scan.offset_start_scan;
     cfe:	222b      	movs	r2, #43	; 0x2b
     d00:	5cac      	ldrb	r4, [r5, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     d02:	7b29      	ldrb	r1, [r5, #12]
     d04:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     d06:	190a      	adds	r2, r1, r4
     d08:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	b2db      	uxtb	r3, r3
     d0e:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     d10:	429a      	cmp	r2, r3
     d12:	d221      	bcs.n	d58 <adc_init+0xc0>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d14:	4a9f      	ldr	r2, [pc, #636]	; (f94 <adc_init+0x2fc>)
     d16:	4693      	mov	fp, r2
     d18:	4b9f      	ldr	r3, [pc, #636]	; (f98 <adc_init+0x300>)
     d1a:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     d1c:	270f      	movs	r7, #15
     d1e:	4027      	ands	r7, r4
     d20:	7b2b      	ldrb	r3, [r5, #12]
     d22:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d24:	a804      	add	r0, sp, #16
     d26:	4659      	mov	r1, fp
     d28:	2250      	movs	r2, #80	; 0x50
     d2a:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d2c:	2f13      	cmp	r7, #19
     d2e:	d80c      	bhi.n	d4a <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d30:	00bf      	lsls	r7, r7, #2
     d32:	ab04      	add	r3, sp, #16
     d34:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d36:	a903      	add	r1, sp, #12
     d38:	2300      	movs	r3, #0
     d3a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d3c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d3e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d40:	2301      	movs	r3, #1
     d42:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     d44:	b2c0      	uxtb	r0, r0
     d46:	4a95      	ldr	r2, [pc, #596]	; (f9c <adc_init+0x304>)
     d48:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     d4a:	3401      	adds	r4, #1
     d4c:	b2e4      	uxtb	r4, r4
     d4e:	4640      	mov	r0, r8
     d50:	1903      	adds	r3, r0, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     d52:	b2db      	uxtb	r3, r3
     d54:	4599      	cmp	r9, r3
     d56:	d8e1      	bhi.n	d1c <adc_init+0x84>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     d58:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d5a:	a804      	add	r0, sp, #16
     d5c:	498d      	ldr	r1, [pc, #564]	; (f94 <adc_init+0x2fc>)
     d5e:	2250      	movs	r2, #80	; 0x50
     d60:	4b8d      	ldr	r3, [pc, #564]	; (f98 <adc_init+0x300>)
     d62:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d64:	2c13      	cmp	r4, #19
     d66:	d837      	bhi.n	dd8 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d68:	00a4      	lsls	r4, r4, #2
     d6a:	ab04      	add	r3, sp, #16
     d6c:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d6e:	a903      	add	r1, sp, #12
     d70:	2300      	movs	r3, #0
     d72:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     d74:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     d76:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     d78:	2301      	movs	r3, #1
     d7a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     d7c:	b2c0      	uxtb	r0, r0
     d7e:	4b87      	ldr	r3, [pc, #540]	; (f9c <adc_init+0x304>)
     d80:	4798      	blx	r3
     d82:	e029      	b.n	dd8 <adc_init+0x140>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     d84:	7b2c      	ldrb	r4, [r5, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d86:	a804      	add	r0, sp, #16
     d88:	4982      	ldr	r1, [pc, #520]	; (f94 <adc_init+0x2fc>)
     d8a:	2250      	movs	r2, #80	; 0x50
     d8c:	4b82      	ldr	r3, [pc, #520]	; (f98 <adc_init+0x300>)
     d8e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d90:	2c13      	cmp	r4, #19
     d92:	d80c      	bhi.n	dae <adc_init+0x116>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     d94:	00a4      	lsls	r4, r4, #2
     d96:	ab04      	add	r3, sp, #16
     d98:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d9a:	a903      	add	r1, sp, #12
     d9c:	2300      	movs	r3, #0
     d9e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     da0:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     da2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     da4:	2301      	movs	r3, #1
     da6:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     da8:	b2c0      	uxtb	r0, r0
     daa:	4b7c      	ldr	r3, [pc, #496]	; (f9c <adc_init+0x304>)
     dac:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     dae:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     db0:	a804      	add	r0, sp, #16
     db2:	4978      	ldr	r1, [pc, #480]	; (f94 <adc_init+0x2fc>)
     db4:	2250      	movs	r2, #80	; 0x50
     db6:	4b78      	ldr	r3, [pc, #480]	; (f98 <adc_init+0x300>)
     db8:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     dba:	2c13      	cmp	r4, #19
     dbc:	d80c      	bhi.n	dd8 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dbe:	00a4      	lsls	r4, r4, #2
     dc0:	ab04      	add	r3, sp, #16
     dc2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dc4:	a903      	add	r1, sp, #12
     dc6:	2300      	movs	r3, #0
     dc8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dca:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dcc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     dce:	2301      	movs	r3, #1
     dd0:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     dd2:	b2c0      	uxtb	r0, r0
     dd4:	4b71      	ldr	r3, [pc, #452]	; (f9c <adc_init+0x304>)
     dd6:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     dd8:	7d6b      	ldrb	r3, [r5, #21]
     dda:	009b      	lsls	r3, r3, #2
     ddc:	b2db      	uxtb	r3, r3
     dde:	9901      	ldr	r1, [sp, #4]
     de0:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     de2:	7dab      	ldrb	r3, [r5, #22]
     de4:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     de6:	786a      	ldrb	r2, [r5, #1]
     de8:	4313      	orrs	r3, r2
     dea:	b2db      	uxtb	r3, r3
     dec:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     dee:	792b      	ldrb	r3, [r5, #4]
     df0:	2b34      	cmp	r3, #52	; 0x34
     df2:	d900      	bls.n	df6 <adc_init+0x15e>
     df4:	e13e      	b.n	1074 <adc_init+0x3dc>
     df6:	009b      	lsls	r3, r3, #2
     df8:	4a69      	ldr	r2, [pc, #420]	; (fa0 <adc_init+0x308>)
     dfa:	58d3      	ldr	r3, [r2, r3]
     dfc:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     dfe:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e00:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e02:	2301      	movs	r3, #1
     e04:	e01a      	b.n	e3c <adc_init+0x1a4>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     e06:	7c6b      	ldrb	r3, [r5, #17]
		accumulate = config->accumulate_samples;
     e08:	7c2a      	ldrb	r2, [r5, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e0a:	2410      	movs	r4, #16
     e0c:	e016      	b.n	e3c <adc_init+0x1a4>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e0e:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e10:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e12:	2301      	movs	r3, #1
     e14:	e012      	b.n	e3c <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e16:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e18:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e1a:	2300      	movs	r3, #0
     e1c:	e00e      	b.n	e3c <adc_init+0x1a4>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e1e:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     e20:	2430      	movs	r4, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e22:	2300      	movs	r3, #0
     e24:	e00a      	b.n	e3c <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e26:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     e28:	2420      	movs	r4, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e2a:	2300      	movs	r3, #0
     e2c:	e006      	b.n	e3c <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e2e:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     e30:	2400      	movs	r4, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e32:	2300      	movs	r3, #0
     e34:	e002      	b.n	e3c <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     e36:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e38:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     e3a:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     e3c:	011b      	lsls	r3, r3, #4
     e3e:	2170      	movs	r1, #112	; 0x70
     e40:	400b      	ands	r3, r1
     e42:	4313      	orrs	r3, r2
     e44:	9a01      	ldr	r2, [sp, #4]
     e46:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e48:	7deb      	ldrb	r3, [r5, #23]
		return STATUS_ERR_INVALID_ARG;
     e4a:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     e4c:	2b3f      	cmp	r3, #63	; 0x3f
     e4e:	d900      	bls.n	e52 <adc_init+0x1ba>
     e50:	e111      	b.n	1076 <adc_init+0x3de>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     e52:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e54:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e56:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     e58:	b25b      	sxtb	r3, r3
     e5a:	2b00      	cmp	r3, #0
     e5c:	dbfb      	blt.n	e56 <adc_init+0x1be>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     e5e:	7cea      	ldrb	r2, [r5, #19]
     e60:	886b      	ldrh	r3, [r5, #2]
     e62:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     e64:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     e66:	5caa      	ldrb	r2, [r5, r2]
     e68:	00d2      	lsls	r2, r2, #3
     e6a:	4313      	orrs	r3, r2
     e6c:	7d2a      	ldrb	r2, [r5, #20]
     e6e:	0092      	lsls	r2, r2, #2
     e70:	4313      	orrs	r3, r2
     e72:	7caa      	ldrb	r2, [r5, #18]
     e74:	0052      	lsls	r2, r2, #1
     e76:	4313      	orrs	r3, r2
     e78:	4323      	orrs	r3, r4
     e7a:	9801      	ldr	r0, [sp, #4]
     e7c:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     e7e:	7e2b      	ldrb	r3, [r5, #24]
     e80:	2b00      	cmp	r3, #0
     e82:	d101      	bne.n	e88 <adc_init+0x1f0>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     e84:	6831      	ldr	r1, [r6, #0]
     e86:	e095      	b.n	fb4 <adc_init+0x31c>
		switch (resolution) {
     e88:	2c10      	cmp	r4, #16
     e8a:	d05b      	beq.n	f44 <adc_init+0x2ac>
     e8c:	d802      	bhi.n	e94 <adc_init+0x1fc>
     e8e:	2c00      	cmp	r4, #0
     e90:	d038      	beq.n	f04 <adc_init+0x26c>
     e92:	e7f7      	b.n	e84 <adc_init+0x1ec>
     e94:	2c20      	cmp	r4, #32
     e96:	d019      	beq.n	ecc <adc_init+0x234>
     e98:	2c30      	cmp	r4, #48	; 0x30
     e9a:	d1f3      	bne.n	e84 <adc_init+0x1ec>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     e9c:	7cea      	ldrb	r2, [r5, #19]
     e9e:	2a00      	cmp	r2, #0
     ea0:	d00a      	beq.n	eb8 <adc_init+0x220>
					(config->window.window_lower_value > 127 ||
     ea2:	69ea      	ldr	r2, [r5, #28]
     ea4:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     ea6:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     ea8:	2aff      	cmp	r2, #255	; 0xff
     eaa:	d900      	bls.n	eae <adc_init+0x216>
     eac:	e0e3      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     eae:	6a2a      	ldr	r2, [r5, #32]
     eb0:	3280      	adds	r2, #128	; 0x80
     eb2:	2aff      	cmp	r2, #255	; 0xff
     eb4:	d900      	bls.n	eb8 <adc_init+0x220>
     eb6:	e0de      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eb8:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     eba:	69e9      	ldr	r1, [r5, #28]
     ebc:	29ff      	cmp	r1, #255	; 0xff
     ebe:	dd00      	ble.n	ec2 <adc_init+0x22a>
     ec0:	e0d9      	b.n	1076 <adc_init+0x3de>
     ec2:	6a2a      	ldr	r2, [r5, #32]
     ec4:	2aff      	cmp	r2, #255	; 0xff
     ec6:	dd00      	ble.n	eca <adc_init+0x232>
     ec8:	e0d5      	b.n	1076 <adc_init+0x3de>
     eca:	e7db      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     ecc:	7cea      	ldrb	r2, [r5, #19]
     ece:	2a00      	cmp	r2, #0
     ed0:	d00d      	beq.n	eee <adc_init+0x256>
					(config->window.window_lower_value > 511 ||
     ed2:	69e8      	ldr	r0, [r5, #28]
     ed4:	2280      	movs	r2, #128	; 0x80
     ed6:	0092      	lsls	r2, r2, #2
     ed8:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eda:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     edc:	4a31      	ldr	r2, [pc, #196]	; (fa4 <adc_init+0x30c>)
     ede:	4291      	cmp	r1, r2
     ee0:	d900      	bls.n	ee4 <adc_init+0x24c>
     ee2:	e0c8      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     ee4:	4a30      	ldr	r2, [pc, #192]	; (fa8 <adc_init+0x310>)
     ee6:	6a29      	ldr	r1, [r5, #32]
     ee8:	4291      	cmp	r1, r2
     eea:	db00      	blt.n	eee <adc_init+0x256>
     eec:	e0c3      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     eee:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     ef0:	4a2c      	ldr	r2, [pc, #176]	; (fa4 <adc_init+0x30c>)
     ef2:	69e9      	ldr	r1, [r5, #28]
     ef4:	4291      	cmp	r1, r2
     ef6:	dd00      	ble.n	efa <adc_init+0x262>
     ef8:	e0bd      	b.n	1076 <adc_init+0x3de>
     efa:	6a29      	ldr	r1, [r5, #32]
     efc:	4291      	cmp	r1, r2
     efe:	dd00      	ble.n	f02 <adc_init+0x26a>
     f00:	e0b9      	b.n	1076 <adc_init+0x3de>
     f02:	e7bf      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f04:	7cea      	ldrb	r2, [r5, #19]
     f06:	2a00      	cmp	r2, #0
     f08:	d011      	beq.n	f2e <adc_init+0x296>
					(config->window.window_lower_value > 2047 ||
     f0a:	69ea      	ldr	r2, [r5, #28]
     f0c:	2080      	movs	r0, #128	; 0x80
     f0e:	0100      	lsls	r0, r0, #4
     f10:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f12:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f14:	4a25      	ldr	r2, [pc, #148]	; (fac <adc_init+0x314>)
     f16:	4291      	cmp	r1, r2
     f18:	d900      	bls.n	f1c <adc_init+0x284>
     f1a:	e0ac      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f1c:	6a2a      	ldr	r2, [r5, #32]
     f1e:	2080      	movs	r0, #128	; 0x80
     f20:	0100      	lsls	r0, r0, #4
     f22:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f24:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f26:	4a21      	ldr	r2, [pc, #132]	; (fac <adc_init+0x314>)
     f28:	4291      	cmp	r1, r2
     f2a:	d900      	bls.n	f2e <adc_init+0x296>
     f2c:	e0a3      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f2e:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     f30:	4a1e      	ldr	r2, [pc, #120]	; (fac <adc_init+0x314>)
     f32:	69e9      	ldr	r1, [r5, #28]
     f34:	4291      	cmp	r1, r2
     f36:	dd00      	ble.n	f3a <adc_init+0x2a2>
     f38:	e09d      	b.n	1076 <adc_init+0x3de>
     f3a:	6a29      	ldr	r1, [r5, #32]
     f3c:	4291      	cmp	r1, r2
     f3e:	dd00      	ble.n	f42 <adc_init+0x2aa>
     f40:	e099      	b.n	1076 <adc_init+0x3de>
     f42:	e79f      	b.n	e84 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     f44:	7cea      	ldrb	r2, [r5, #19]
     f46:	2a00      	cmp	r2, #0
     f48:	d011      	beq.n	f6e <adc_init+0x2d6>
					(config->window.window_lower_value > 32767 ||
     f4a:	69ea      	ldr	r2, [r5, #28]
     f4c:	2080      	movs	r0, #128	; 0x80
     f4e:	0200      	lsls	r0, r0, #8
     f50:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f52:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     f54:	4a16      	ldr	r2, [pc, #88]	; (fb0 <adc_init+0x318>)
     f56:	4291      	cmp	r1, r2
     f58:	d900      	bls.n	f5c <adc_init+0x2c4>
     f5a:	e08c      	b.n	1076 <adc_init+0x3de>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     f5c:	6a2a      	ldr	r2, [r5, #32]
     f5e:	2080      	movs	r0, #128	; 0x80
     f60:	0200      	lsls	r0, r0, #8
     f62:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f64:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     f66:	4a12      	ldr	r2, [pc, #72]	; (fb0 <adc_init+0x318>)
     f68:	4291      	cmp	r1, r2
     f6a:	d900      	bls.n	f6e <adc_init+0x2d6>
     f6c:	e083      	b.n	1076 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f6e:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     f70:	4a0f      	ldr	r2, [pc, #60]	; (fb0 <adc_init+0x318>)
     f72:	69e9      	ldr	r1, [r5, #28]
     f74:	4291      	cmp	r1, r2
     f76:	dd00      	ble.n	f7a <adc_init+0x2e2>
     f78:	e07d      	b.n	1076 <adc_init+0x3de>
     f7a:	6a29      	ldr	r1, [r5, #32]
     f7c:	4291      	cmp	r1, r2
     f7e:	dd00      	ble.n	f82 <adc_init+0x2ea>
     f80:	e079      	b.n	1076 <adc_init+0x3de>
     f82:	e77f      	b.n	e84 <adc_init+0x1ec>
     f84:	40000400 	.word	0x40000400
     f88:	40000800 	.word	0x40000800
     f8c:	000014e9 	.word	0x000014e9
     f90:	0000145d 	.word	0x0000145d
     f94:	000063b8 	.word	0x000063b8
     f98:	00001a29 	.word	0x00001a29
     f9c:	000015c5 	.word	0x000015c5
     fa0:	000062e4 	.word	0x000062e4
     fa4:	000003ff 	.word	0x000003ff
     fa8:	fffffe01 	.word	0xfffffe01
     fac:	00000fff 	.word	0x00000fff
     fb0:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fb4:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     fb6:	b252      	sxtb	r2, r2
     fb8:	2a00      	cmp	r2, #0
     fba:	dbfb      	blt.n	fb4 <adc_init+0x31c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     fbc:	9a01      	ldr	r2, [sp, #4]
     fbe:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     fc0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fc2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     fc4:	b25b      	sxtb	r3, r3
     fc6:	2b00      	cmp	r3, #0
     fc8:	dbfb      	blt.n	fc2 <adc_init+0x32a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     fca:	8bab      	ldrh	r3, [r5, #28]
     fcc:	9801      	ldr	r0, [sp, #4]
     fce:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     fd0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fd2:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     fd4:	b25b      	sxtb	r3, r3
     fd6:	2b00      	cmp	r3, #0
     fd8:	dbfb      	blt.n	fd2 <adc_init+0x33a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     fda:	8c2b      	ldrh	r3, [r5, #32]
     fdc:	9901      	ldr	r1, [sp, #4]
     fde:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     fe0:	232c      	movs	r3, #44	; 0x2c
     fe2:	5ceb      	ldrb	r3, [r5, r3]
	if (inputs_to_scan > 0) {
     fe4:	2b00      	cmp	r3, #0
     fe6:	d004      	beq.n	ff2 <adc_init+0x35a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     fe8:	3b01      	subs	r3, #1
     fea:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     fec:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     fee:	2b0f      	cmp	r3, #15
     ff0:	d841      	bhi.n	1076 <adc_init+0x3de>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     ff2:	222b      	movs	r2, #43	; 0x2b
     ff4:	5caa      	ldrb	r2, [r5, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     ff6:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     ff8:	2a0f      	cmp	r2, #15
     ffa:	d83c      	bhi.n	1076 <adc_init+0x3de>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ffc:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ffe:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    1000:	b240      	sxtb	r0, r0
    1002:	2800      	cmp	r0, #0
    1004:	dbfb      	blt.n	ffe <adc_init+0x366>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1006:	89e8      	ldrh	r0, [r5, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1008:	7b29      	ldrb	r1, [r5, #12]
			config->gain_factor |
    100a:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    100c:	68a8      	ldr	r0, [r5, #8]
    100e:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    1010:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1012:	430a      	orrs	r2, r1
    1014:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1016:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1018:	9901      	ldr	r1, [sp, #4]
    101a:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    101c:	232a      	movs	r3, #42	; 0x2a
    101e:	5ceb      	ldrb	r3, [r5, r3]
    1020:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1022:	230f      	movs	r3, #15
    1024:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1026:	2324      	movs	r3, #36	; 0x24
    1028:	5ceb      	ldrb	r3, [r5, r3]
    102a:	2b00      	cmp	r3, #0
    102c:	d010      	beq.n	1050 <adc_init+0x3b8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    102e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    1030:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1032:	4a14      	ldr	r2, [pc, #80]	; (1084 <adc_init+0x3ec>)
    1034:	4293      	cmp	r3, r2
    1036:	d81e      	bhi.n	1076 <adc_init+0x3de>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1038:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    103a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    103c:	2080      	movs	r0, #128	; 0x80
    103e:	0100      	lsls	r0, r0, #4
    1040:	1819      	adds	r1, r3, r0
    1042:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1044:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1046:	4a0f      	ldr	r2, [pc, #60]	; (1084 <adc_init+0x3ec>)
    1048:	4291      	cmp	r1, r2
    104a:	d814      	bhi.n	1076 <adc_init+0x3de>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    104c:	9901      	ldr	r1, [sp, #4]
    104e:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    1050:	4b0d      	ldr	r3, [pc, #52]	; (1088 <adc_init+0x3f0>)
    1052:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1054:	0152      	lsls	r2, r2, #5
    1056:	23e0      	movs	r3, #224	; 0xe0
    1058:	00db      	lsls	r3, r3, #3
    105a:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <adc_init+0x3f4>)
    105e:	6858      	ldr	r0, [r3, #4]
    1060:	0141      	lsls	r1, r0, #5
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	0edb      	lsrs	r3, r3, #27
    1066:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1068:	b2db      	uxtb	r3, r3
    106a:	4313      	orrs	r3, r2
    106c:	9901      	ldr	r1, [sp, #4]
    106e:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1070:	2000      	movs	r0, #0
    1072:	e000      	b.n	1076 <adc_init+0x3de>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1074:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1076:	b019      	add	sp, #100	; 0x64
    1078:	bc3c      	pop	{r2, r3, r4, r5}
    107a:	4690      	mov	r8, r2
    107c:	4699      	mov	r9, r3
    107e:	46a2      	mov	sl, r4
    1080:	46ab      	mov	fp, r5
    1082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1084:	00000fff 	.word	0x00000fff
    1088:	00806024 	.word	0x00806024
    108c:	00806020 	.word	0x00806020

00001090 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1090:	b500      	push	{lr}
    1092:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1094:	ab01      	add	r3, sp, #4
    1096:	2280      	movs	r2, #128	; 0x80
    1098:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    109a:	780a      	ldrb	r2, [r1, #0]
    109c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    109e:	784a      	ldrb	r2, [r1, #1]
    10a0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    10a2:	788a      	ldrb	r2, [r1, #2]
    10a4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    10a6:	1c19      	adds	r1, r3, #0
    10a8:	4b01      	ldr	r3, [pc, #4]	; (10b0 <port_pin_set_config+0x20>)
    10aa:	4798      	blx	r3
}
    10ac:	b003      	add	sp, #12
    10ae:	bd00      	pop	{pc}
    10b0:	000015c5 	.word	0x000015c5

000010b4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10b4:	b508      	push	{r3, lr}
	switch (clock_source) {
    10b6:	2808      	cmp	r0, #8
    10b8:	d834      	bhi.n	1124 <system_clock_source_get_hz+0x70>
    10ba:	0080      	lsls	r0, r0, #2
    10bc:	4b1b      	ldr	r3, [pc, #108]	; (112c <system_clock_source_get_hz+0x78>)
    10be:	581b      	ldr	r3, [r3, r0]
    10c0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10c2:	2080      	movs	r0, #128	; 0x80
    10c4:	0200      	lsls	r0, r0, #8
    10c6:	e030      	b.n	112a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    10c8:	4b19      	ldr	r3, [pc, #100]	; (1130 <system_clock_source_get_hz+0x7c>)
    10ca:	6918      	ldr	r0, [r3, #16]
    10cc:	e02d      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10ce:	4b19      	ldr	r3, [pc, #100]	; (1134 <system_clock_source_get_hz+0x80>)
    10d0:	6a18      	ldr	r0, [r3, #32]
    10d2:	0580      	lsls	r0, r0, #22
    10d4:	0f80      	lsrs	r0, r0, #30
    10d6:	4b18      	ldr	r3, [pc, #96]	; (1138 <system_clock_source_get_hz+0x84>)
    10d8:	40c3      	lsrs	r3, r0
    10da:	1c18      	adds	r0, r3, #0
    10dc:	e025      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10de:	4b14      	ldr	r3, [pc, #80]	; (1130 <system_clock_source_get_hz+0x7c>)
    10e0:	6958      	ldr	r0, [r3, #20]
    10e2:	e022      	b.n	112a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10e4:	4b12      	ldr	r3, [pc, #72]	; (1130 <system_clock_source_get_hz+0x7c>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	2002      	movs	r0, #2
    10ea:	4018      	ands	r0, r3
    10ec:	d01d      	beq.n	112a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10ee:	4911      	ldr	r1, [pc, #68]	; (1134 <system_clock_source_get_hz+0x80>)
    10f0:	2210      	movs	r2, #16
    10f2:	68cb      	ldr	r3, [r1, #12]
    10f4:	421a      	tst	r2, r3
    10f6:	d0fc      	beq.n	10f2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10f8:	4b0d      	ldr	r3, [pc, #52]	; (1130 <system_clock_source_get_hz+0x7c>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	075a      	lsls	r2, r3, #29
    10fe:	d513      	bpl.n	1128 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1100:	2000      	movs	r0, #0
    1102:	4b0e      	ldr	r3, [pc, #56]	; (113c <system_clock_source_get_hz+0x88>)
    1104:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1106:	4b0a      	ldr	r3, [pc, #40]	; (1130 <system_clock_source_get_hz+0x7c>)
    1108:	689b      	ldr	r3, [r3, #8]
    110a:	041b      	lsls	r3, r3, #16
    110c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    110e:	4358      	muls	r0, r3
    1110:	e00b      	b.n	112a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1112:	2350      	movs	r3, #80	; 0x50
    1114:	4a07      	ldr	r2, [pc, #28]	; (1134 <system_clock_source_get_hz+0x80>)
    1116:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1118:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    111a:	075a      	lsls	r2, r3, #29
    111c:	d505      	bpl.n	112a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    111e:	4b04      	ldr	r3, [pc, #16]	; (1130 <system_clock_source_get_hz+0x7c>)
    1120:	68d8      	ldr	r0, [r3, #12]
    1122:	e002      	b.n	112a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1124:	2000      	movs	r0, #0
    1126:	e000      	b.n	112a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1128:	4805      	ldr	r0, [pc, #20]	; (1140 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    112a:	bd08      	pop	{r3, pc}
    112c:	00006408 	.word	0x00006408
    1130:	200000e4 	.word	0x200000e4
    1134:	40000800 	.word	0x40000800
    1138:	007a1200 	.word	0x007a1200
    113c:	00001505 	.word	0x00001505
    1140:	02dc6c00 	.word	0x02dc6c00

00001144 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1144:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1146:	4b0c      	ldr	r3, [pc, #48]	; (1178 <system_clock_source_osc8m_set_config+0x34>)
    1148:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    114a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    114c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    114e:	7840      	ldrb	r0, [r0, #1]
    1150:	2201      	movs	r2, #1
    1152:	4010      	ands	r0, r2
    1154:	0180      	lsls	r0, r0, #6
    1156:	2640      	movs	r6, #64	; 0x40
    1158:	43b4      	bics	r4, r6
    115a:	4304      	orrs	r4, r0
    115c:	402a      	ands	r2, r5
    115e:	01d0      	lsls	r0, r2, #7
    1160:	2280      	movs	r2, #128	; 0x80
    1162:	4394      	bics	r4, r2
    1164:	1c22      	adds	r2, r4, #0
    1166:	4302      	orrs	r2, r0
    1168:	2003      	movs	r0, #3
    116a:	4001      	ands	r1, r0
    116c:	0209      	lsls	r1, r1, #8
    116e:	4803      	ldr	r0, [pc, #12]	; (117c <system_clock_source_osc8m_set_config+0x38>)
    1170:	4002      	ands	r2, r0
    1172:	430a      	orrs	r2, r1
    1174:	621a      	str	r2, [r3, #32]
}
    1176:	bd70      	pop	{r4, r5, r6, pc}
    1178:	40000800 	.word	0x40000800
    117c:	fffffcff 	.word	0xfffffcff

00001180 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1180:	2808      	cmp	r0, #8
    1182:	d843      	bhi.n	120c <system_clock_source_enable+0x8c>
    1184:	0080      	lsls	r0, r0, #2
    1186:	4b22      	ldr	r3, [pc, #136]	; (1210 <system_clock_source_enable+0x90>)
    1188:	581b      	ldr	r3, [r3, r0]
    118a:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    118c:	2000      	movs	r0, #0
    118e:	e03e      	b.n	120e <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1190:	4b20      	ldr	r3, [pc, #128]	; (1214 <system_clock_source_enable+0x94>)
    1192:	6a19      	ldr	r1, [r3, #32]
    1194:	2202      	movs	r2, #2
    1196:	430a      	orrs	r2, r1
    1198:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    119a:	2000      	movs	r0, #0
    119c:	e037      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    119e:	4b1d      	ldr	r3, [pc, #116]	; (1214 <system_clock_source_enable+0x94>)
    11a0:	6999      	ldr	r1, [r3, #24]
    11a2:	2202      	movs	r2, #2
    11a4:	430a      	orrs	r2, r1
    11a6:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11a8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    11aa:	e030      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    11ac:	4b19      	ldr	r3, [pc, #100]	; (1214 <system_clock_source_enable+0x94>)
    11ae:	8a19      	ldrh	r1, [r3, #16]
    11b0:	2202      	movs	r2, #2
    11b2:	430a      	orrs	r2, r1
    11b4:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11b6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    11b8:	e029      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    11ba:	4b16      	ldr	r3, [pc, #88]	; (1214 <system_clock_source_enable+0x94>)
    11bc:	8a99      	ldrh	r1, [r3, #20]
    11be:	2202      	movs	r2, #2
    11c0:	430a      	orrs	r2, r1
    11c2:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11c4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    11c6:	e022      	b.n	120e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11c8:	4b13      	ldr	r3, [pc, #76]	; (1218 <system_clock_source_enable+0x98>)
    11ca:	6819      	ldr	r1, [r3, #0]
    11cc:	2202      	movs	r2, #2
    11ce:	430a      	orrs	r2, r1
    11d0:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    11d2:	681a      	ldr	r2, [r3, #0]
    11d4:	4b11      	ldr	r3, [pc, #68]	; (121c <system_clock_source_enable+0x9c>)
    11d6:	401a      	ands	r2, r3
    11d8:	4b0e      	ldr	r3, [pc, #56]	; (1214 <system_clock_source_enable+0x94>)
    11da:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11dc:	1c19      	adds	r1, r3, #0
    11de:	2210      	movs	r2, #16
    11e0:	68cb      	ldr	r3, [r1, #12]
    11e2:	421a      	tst	r2, r3
    11e4:	d0fc      	beq.n	11e0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11e6:	4a0c      	ldr	r2, [pc, #48]	; (1218 <system_clock_source_enable+0x98>)
    11e8:	6891      	ldr	r1, [r2, #8]
    11ea:	4b0a      	ldr	r3, [pc, #40]	; (1214 <system_clock_source_enable+0x94>)
    11ec:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11ee:	6851      	ldr	r1, [r2, #4]
    11f0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    11f2:	6812      	ldr	r2, [r2, #0]
    11f4:	b292      	uxth	r2, r2
    11f6:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    11f8:	2000      	movs	r0, #0
    11fa:	e008      	b.n	120e <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    11fc:	4a05      	ldr	r2, [pc, #20]	; (1214 <system_clock_source_enable+0x94>)
    11fe:	2344      	movs	r3, #68	; 0x44
    1200:	5cd0      	ldrb	r0, [r2, r3]
    1202:	2102      	movs	r1, #2
    1204:	4301      	orrs	r1, r0
    1206:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1208:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    120a:	e000      	b.n	120e <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    120c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    120e:	4770      	bx	lr
    1210:	0000642c 	.word	0x0000642c
    1214:	40000800 	.word	0x40000800
    1218:	200000e4 	.word	0x200000e4
    121c:	0000ff7f 	.word	0x0000ff7f

00001220 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1220:	b530      	push	{r4, r5, lr}
    1222:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1224:	22c2      	movs	r2, #194	; 0xc2
    1226:	00d2      	lsls	r2, r2, #3
    1228:	4b19      	ldr	r3, [pc, #100]	; (1290 <system_clock_init+0x70>)
    122a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    122c:	4b19      	ldr	r3, [pc, #100]	; (1294 <system_clock_init+0x74>)
    122e:	685a      	ldr	r2, [r3, #4]
    1230:	211e      	movs	r1, #30
    1232:	438a      	bics	r2, r1
    1234:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1236:	2301      	movs	r3, #1
    1238:	466a      	mov	r2, sp
    123a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    123c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    123e:	4d16      	ldr	r5, [pc, #88]	; (1298 <system_clock_init+0x78>)
    1240:	b2e0      	uxtb	r0, r4
    1242:	4669      	mov	r1, sp
    1244:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1246:	3401      	adds	r4, #1
    1248:	2c25      	cmp	r4, #37	; 0x25
    124a:	d1f9      	bne.n	1240 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    124c:	a803      	add	r0, sp, #12
    124e:	2400      	movs	r4, #0
    1250:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1252:	2501      	movs	r5, #1
    1254:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1256:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1258:	4b10      	ldr	r3, [pc, #64]	; (129c <system_clock_init+0x7c>)
    125a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    125c:	2006      	movs	r0, #6
    125e:	4b10      	ldr	r3, [pc, #64]	; (12a0 <system_clock_init+0x80>)
    1260:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1262:	4b10      	ldr	r3, [pc, #64]	; (12a4 <system_clock_init+0x84>)
    1264:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1266:	4b10      	ldr	r3, [pc, #64]	; (12a8 <system_clock_init+0x88>)
    1268:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    126a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    126c:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    126e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1270:	466b      	mov	r3, sp
    1272:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1274:	2306      	movs	r3, #6
    1276:	466a      	mov	r2, sp
    1278:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    127a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    127c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    127e:	2000      	movs	r0, #0
    1280:	4669      	mov	r1, sp
    1282:	4b0a      	ldr	r3, [pc, #40]	; (12ac <system_clock_init+0x8c>)
    1284:	4798      	blx	r3
    1286:	2000      	movs	r0, #0
    1288:	4b09      	ldr	r3, [pc, #36]	; (12b0 <system_clock_init+0x90>)
    128a:	4798      	blx	r3
#endif
}
    128c:	b005      	add	sp, #20
    128e:	bd30      	pop	{r4, r5, pc}
    1290:	40000800 	.word	0x40000800
    1294:	41004000 	.word	0x41004000
    1298:	000014e9 	.word	0x000014e9
    129c:	00001145 	.word	0x00001145
    12a0:	00001181 	.word	0x00001181
    12a4:	000012b5 	.word	0x000012b5
    12a8:	40000400 	.word	0x40000400
    12ac:	000012d9 	.word	0x000012d9
    12b0:	0000138d 	.word	0x0000138d

000012b4 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    12b4:	4b06      	ldr	r3, [pc, #24]	; (12d0 <system_gclk_init+0x1c>)
    12b6:	6999      	ldr	r1, [r3, #24]
    12b8:	2208      	movs	r2, #8
    12ba:	430a      	orrs	r2, r1
    12bc:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12be:	2201      	movs	r2, #1
    12c0:	4b04      	ldr	r3, [pc, #16]	; (12d4 <system_gclk_init+0x20>)
    12c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12c4:	1c19      	adds	r1, r3, #0
    12c6:	780b      	ldrb	r3, [r1, #0]
    12c8:	4213      	tst	r3, r2
    12ca:	d1fc      	bne.n	12c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12cc:	4770      	bx	lr
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	40000400 	.word	0x40000400
    12d4:	40000c00 	.word	0x40000c00

000012d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12da:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12dc:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12de:	780d      	ldrb	r5, [r1, #0]
    12e0:	022d      	lsls	r5, r5, #8
    12e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12e4:	784b      	ldrb	r3, [r1, #1]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d002      	beq.n	12f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12ea:	2380      	movs	r3, #128	; 0x80
    12ec:	02db      	lsls	r3, r3, #11
    12ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12f0:	7a4b      	ldrb	r3, [r1, #9]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d002      	beq.n	12fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	031b      	lsls	r3, r3, #12
    12fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12fc:	684c      	ldr	r4, [r1, #4]
    12fe:	2c01      	cmp	r4, #1
    1300:	d917      	bls.n	1332 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1302:	1e63      	subs	r3, r4, #1
    1304:	421c      	tst	r4, r3
    1306:	d10f      	bne.n	1328 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1308:	2c02      	cmp	r4, #2
    130a:	d906      	bls.n	131a <system_gclk_gen_set_config+0x42>
    130c:	2302      	movs	r3, #2
    130e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1310:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1312:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1314:	429c      	cmp	r4, r3
    1316:	d8fb      	bhi.n	1310 <system_gclk_gen_set_config+0x38>
    1318:	e000      	b.n	131c <system_gclk_gen_set_config+0x44>
    131a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    131c:	0217      	lsls	r7, r2, #8
    131e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	035b      	lsls	r3, r3, #13
    1324:	431d      	orrs	r5, r3
    1326:	e004      	b.n	1332 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1328:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    132a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    132c:	2380      	movs	r3, #128	; 0x80
    132e:	029b      	lsls	r3, r3, #10
    1330:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1332:	7a0b      	ldrb	r3, [r1, #8]
    1334:	2b00      	cmp	r3, #0
    1336:	d002      	beq.n	133e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	039b      	lsls	r3, r3, #14
    133c:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    133e:	4a0f      	ldr	r2, [pc, #60]	; (137c <system_gclk_gen_set_config+0xa4>)
    1340:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1342:	b25b      	sxtb	r3, r3
    1344:	2b00      	cmp	r3, #0
    1346:	dbfb      	blt.n	1340 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1348:	4b0d      	ldr	r3, [pc, #52]	; (1380 <system_gclk_gen_set_config+0xa8>)
    134a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    134c:	4b0d      	ldr	r3, [pc, #52]	; (1384 <system_gclk_gen_set_config+0xac>)
    134e:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1350:	4a0a      	ldr	r2, [pc, #40]	; (137c <system_gclk_gen_set_config+0xa4>)
    1352:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1354:	b25b      	sxtb	r3, r3
    1356:	2b00      	cmp	r3, #0
    1358:	dbfb      	blt.n	1352 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    135a:	4b08      	ldr	r3, [pc, #32]	; (137c <system_gclk_gen_set_config+0xa4>)
    135c:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    135e:	1c1a      	adds	r2, r3, #0
    1360:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1362:	b25b      	sxtb	r3, r3
    1364:	2b00      	cmp	r3, #0
    1366:	dbfb      	blt.n	1360 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <system_gclk_gen_set_config+0xa4>)
    136a:	6859      	ldr	r1, [r3, #4]
    136c:	2280      	movs	r2, #128	; 0x80
    136e:	0252      	lsls	r2, r2, #9
    1370:	400a      	ands	r2, r1
    1372:	4315      	orrs	r5, r2
    1374:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1376:	4b04      	ldr	r3, [pc, #16]	; (1388 <system_gclk_gen_set_config+0xb0>)
    1378:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    137c:	40000c00 	.word	0x40000c00
    1380:	00000ba9 	.word	0x00000ba9
    1384:	40000c08 	.word	0x40000c08
    1388:	00000be9 	.word	0x00000be9

0000138c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    138c:	b510      	push	{r4, lr}
    138e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1390:	4a0b      	ldr	r2, [pc, #44]	; (13c0 <system_gclk_gen_enable+0x34>)
    1392:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1394:	b25b      	sxtb	r3, r3
    1396:	2b00      	cmp	r3, #0
    1398:	dbfb      	blt.n	1392 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    139a:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <system_gclk_gen_enable+0x38>)
    139c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    139e:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <system_gclk_gen_enable+0x3c>)
    13a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13a2:	4a07      	ldr	r2, [pc, #28]	; (13c0 <system_gclk_gen_enable+0x34>)
    13a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13a6:	b25b      	sxtb	r3, r3
    13a8:	2b00      	cmp	r3, #0
    13aa:	dbfb      	blt.n	13a4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <system_gclk_gen_enable+0x34>)
    13ae:	6859      	ldr	r1, [r3, #4]
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	0252      	lsls	r2, r2, #9
    13b4:	430a      	orrs	r2, r1
    13b6:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13b8:	4b04      	ldr	r3, [pc, #16]	; (13cc <system_gclk_gen_enable+0x40>)
    13ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13bc:	bd10      	pop	{r4, pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	40000c00 	.word	0x40000c00
    13c4:	00000ba9 	.word	0x00000ba9
    13c8:	40000c04 	.word	0x40000c04
    13cc:	00000be9 	.word	0x00000be9

000013d0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13d0:	b570      	push	{r4, r5, r6, lr}
    13d2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13d4:	4a1a      	ldr	r2, [pc, #104]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13d6:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    13d8:	b25b      	sxtb	r3, r3
    13da:	2b00      	cmp	r3, #0
    13dc:	dbfb      	blt.n	13d6 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13de:	4b19      	ldr	r3, [pc, #100]	; (1444 <system_gclk_gen_get_hz+0x74>)
    13e0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13e2:	4b19      	ldr	r3, [pc, #100]	; (1448 <system_gclk_gen_get_hz+0x78>)
    13e4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e6:	4a16      	ldr	r2, [pc, #88]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13e8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    13ea:	b25b      	sxtb	r3, r3
    13ec:	2b00      	cmp	r3, #0
    13ee:	dbfb      	blt.n	13e8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13f0:	4e13      	ldr	r6, [pc, #76]	; (1440 <system_gclk_gen_get_hz+0x70>)
    13f2:	6870      	ldr	r0, [r6, #4]
    13f4:	04c0      	lsls	r0, r0, #19
    13f6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <system_gclk_gen_get_hz+0x7c>)
    13fa:	4798      	blx	r3
    13fc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13fe:	4b12      	ldr	r3, [pc, #72]	; (1448 <system_gclk_gen_get_hz+0x78>)
    1400:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1402:	6876      	ldr	r6, [r6, #4]
    1404:	02f6      	lsls	r6, r6, #11
    1406:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1408:	4b11      	ldr	r3, [pc, #68]	; (1450 <system_gclk_gen_get_hz+0x80>)
    140a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    140c:	4a0c      	ldr	r2, [pc, #48]	; (1440 <system_gclk_gen_get_hz+0x70>)
    140e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1410:	b25b      	sxtb	r3, r3
    1412:	2b00      	cmp	r3, #0
    1414:	dbfb      	blt.n	140e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1416:	4b0a      	ldr	r3, [pc, #40]	; (1440 <system_gclk_gen_get_hz+0x70>)
    1418:	689c      	ldr	r4, [r3, #8]
    141a:	0a24      	lsrs	r4, r4, #8
    141c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    141e:	4b0d      	ldr	r3, [pc, #52]	; (1454 <system_gclk_gen_get_hz+0x84>)
    1420:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1422:	2e00      	cmp	r6, #0
    1424:	d107      	bne.n	1436 <system_gclk_gen_get_hz+0x66>
    1426:	2c01      	cmp	r4, #1
    1428:	d907      	bls.n	143a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    142a:	1c28      	adds	r0, r5, #0
    142c:	1c21      	adds	r1, r4, #0
    142e:	4b0a      	ldr	r3, [pc, #40]	; (1458 <system_gclk_gen_get_hz+0x88>)
    1430:	4798      	blx	r3
    1432:	1c05      	adds	r5, r0, #0
    1434:	e001      	b.n	143a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1436:	3401      	adds	r4, #1
    1438:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    143a:	1c28      	adds	r0, r5, #0
    143c:	bd70      	pop	{r4, r5, r6, pc}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	40000c00 	.word	0x40000c00
    1444:	00000ba9 	.word	0x00000ba9
    1448:	40000c04 	.word	0x40000c04
    144c:	000010b5 	.word	0x000010b5
    1450:	40000c08 	.word	0x40000c08
    1454:	00000be9 	.word	0x00000be9
    1458:	00004221 	.word	0x00004221

0000145c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    145c:	b510      	push	{r4, lr}
    145e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1460:	4b06      	ldr	r3, [pc, #24]	; (147c <system_gclk_chan_enable+0x20>)
    1462:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1464:	4b06      	ldr	r3, [pc, #24]	; (1480 <system_gclk_chan_enable+0x24>)
    1466:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_enable+0x28>)
    146a:	8859      	ldrh	r1, [r3, #2]
    146c:	2280      	movs	r2, #128	; 0x80
    146e:	01d2      	lsls	r2, r2, #7
    1470:	430a      	orrs	r2, r1
    1472:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <system_gclk_chan_enable+0x2c>)
    1476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	00000ba9 	.word	0x00000ba9
    1480:	40000c02 	.word	0x40000c02
    1484:	40000c00 	.word	0x40000c00
    1488:	00000be9 	.word	0x00000be9

0000148c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    148c:	b510      	push	{r4, lr}
    148e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <system_gclk_chan_disable+0x44>)
    1492:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1494:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <system_gclk_chan_disable+0x48>)
    1496:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1498:	4b0f      	ldr	r3, [pc, #60]	; (14d8 <system_gclk_chan_disable+0x4c>)
    149a:	8858      	ldrh	r0, [r3, #2]
    149c:	0500      	lsls	r0, r0, #20
    149e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    14a0:	8859      	ldrh	r1, [r3, #2]
    14a2:	4a0e      	ldr	r2, [pc, #56]	; (14dc <system_gclk_chan_disable+0x50>)
    14a4:	400a      	ands	r2, r1
    14a6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    14a8:	8859      	ldrh	r1, [r3, #2]
    14aa:	4a0d      	ldr	r2, [pc, #52]	; (14e0 <system_gclk_chan_disable+0x54>)
    14ac:	400a      	ands	r2, r1
    14ae:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    14b0:	1c19      	adds	r1, r3, #0
    14b2:	2280      	movs	r2, #128	; 0x80
    14b4:	01d2      	lsls	r2, r2, #7
    14b6:	884b      	ldrh	r3, [r1, #2]
    14b8:	4213      	tst	r3, r2
    14ba:	d1fc      	bne.n	14b6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14bc:	4b06      	ldr	r3, [pc, #24]	; (14d8 <system_gclk_chan_disable+0x4c>)
    14be:	0201      	lsls	r1, r0, #8
    14c0:	8858      	ldrh	r0, [r3, #2]
    14c2:	4a06      	ldr	r2, [pc, #24]	; (14dc <system_gclk_chan_disable+0x50>)
    14c4:	4002      	ands	r2, r0
    14c6:	430a      	orrs	r2, r1
    14c8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14ca:	4b06      	ldr	r3, [pc, #24]	; (14e4 <system_gclk_chan_disable+0x58>)
    14cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00000ba9 	.word	0x00000ba9
    14d4:	40000c02 	.word	0x40000c02
    14d8:	40000c00 	.word	0x40000c00
    14dc:	fffff0ff 	.word	0xfffff0ff
    14e0:	ffffbfff 	.word	0xffffbfff
    14e4:	00000be9 	.word	0x00000be9

000014e8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    14e8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14ea:	780c      	ldrb	r4, [r1, #0]
    14ec:	0224      	lsls	r4, r4, #8
    14ee:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <system_gclk_chan_set_config+0x14>)
    14f2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14f4:	b2a4      	uxth	r4, r4
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <system_gclk_chan_set_config+0x18>)
    14f8:	805c      	strh	r4, [r3, #2]
}
    14fa:	bd10      	pop	{r4, pc}
    14fc:	0000148d 	.word	0x0000148d
    1500:	40000c00 	.word	0x40000c00

00001504 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1504:	b510      	push	{r4, lr}
    1506:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <system_gclk_chan_get_hz+0x20>)
    150a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <system_gclk_chan_get_hz+0x24>)
    150e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <system_gclk_chan_get_hz+0x28>)
    1512:	885c      	ldrh	r4, [r3, #2]
    1514:	0524      	lsls	r4, r4, #20
    1516:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <system_gclk_chan_get_hz+0x2c>)
    151a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    151c:	1c20      	adds	r0, r4, #0
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <system_gclk_chan_get_hz+0x30>)
    1520:	4798      	blx	r3
}
    1522:	bd10      	pop	{r4, pc}
    1524:	00000ba9 	.word	0x00000ba9
    1528:	40000c02 	.word	0x40000c02
    152c:	40000c00 	.word	0x40000c00
    1530:	00000be9 	.word	0x00000be9
    1534:	000013d1 	.word	0x000013d1

00001538 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1538:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    153a:	78d3      	ldrb	r3, [r2, #3]
    153c:	2b00      	cmp	r3, #0
    153e:	d11e      	bne.n	157e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1540:	7813      	ldrb	r3, [r2, #0]
    1542:	2b80      	cmp	r3, #128	; 0x80
    1544:	d004      	beq.n	1550 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1546:	061b      	lsls	r3, r3, #24
    1548:	2480      	movs	r4, #128	; 0x80
    154a:	0264      	lsls	r4, r4, #9
    154c:	4323      	orrs	r3, r4
    154e:	e000      	b.n	1552 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1550:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1552:	7854      	ldrb	r4, [r2, #1]
    1554:	2502      	movs	r5, #2
    1556:	43ac      	bics	r4, r5
    1558:	d10a      	bne.n	1570 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    155a:	7894      	ldrb	r4, [r2, #2]
    155c:	2c00      	cmp	r4, #0
    155e:	d103      	bne.n	1568 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1560:	2480      	movs	r4, #128	; 0x80
    1562:	02a4      	lsls	r4, r4, #10
    1564:	4323      	orrs	r3, r4
    1566:	e002      	b.n	156e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1568:	24c0      	movs	r4, #192	; 0xc0
    156a:	02e4      	lsls	r4, r4, #11
    156c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    156e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1570:	7854      	ldrb	r4, [r2, #1]
    1572:	3c01      	subs	r4, #1
    1574:	2c01      	cmp	r4, #1
    1576:	d804      	bhi.n	1582 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1578:	4c11      	ldr	r4, [pc, #68]	; (15c0 <_system_pinmux_config+0x88>)
    157a:	4023      	ands	r3, r4
    157c:	e001      	b.n	1582 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    157e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1580:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1582:	040d      	lsls	r5, r1, #16
    1584:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1586:	24a0      	movs	r4, #160	; 0xa0
    1588:	05e4      	lsls	r4, r4, #23
    158a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    158c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    158e:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1590:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1592:	24d0      	movs	r4, #208	; 0xd0
    1594:	0624      	lsls	r4, r4, #24
    1596:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1598:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    159a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    159c:	78d4      	ldrb	r4, [r2, #3]
    159e:	2c00      	cmp	r4, #0
    15a0:	d10c      	bne.n	15bc <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15a2:	035c      	lsls	r4, r3, #13
    15a4:	d505      	bpl.n	15b2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15a6:	7893      	ldrb	r3, [r2, #2]
    15a8:	2b01      	cmp	r3, #1
    15aa:	d101      	bne.n	15b0 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    15ac:	6181      	str	r1, [r0, #24]
    15ae:	e000      	b.n	15b2 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    15b0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15b2:	7853      	ldrb	r3, [r2, #1]
    15b4:	3b01      	subs	r3, #1
    15b6:	2b01      	cmp	r3, #1
    15b8:	d800      	bhi.n	15bc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    15ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    15bc:	bd30      	pop	{r4, r5, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	fffbffff 	.word	0xfffbffff

000015c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15c4:	b508      	push	{r3, lr}
    15c6:	1c03      	adds	r3, r0, #0
    15c8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ca:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15cc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ce:	2900      	cmp	r1, #0
    15d0:	d103      	bne.n	15da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15d2:	0958      	lsrs	r0, r3, #5
    15d4:	01c0      	lsls	r0, r0, #7
    15d6:	4904      	ldr	r1, [pc, #16]	; (15e8 <system_pinmux_pin_set_config+0x24>)
    15d8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15da:	211f      	movs	r1, #31
    15dc:	400b      	ands	r3, r1
    15de:	2101      	movs	r1, #1
    15e0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    15e2:	4b02      	ldr	r3, [pc, #8]	; (15ec <system_pinmux_pin_set_config+0x28>)
    15e4:	4798      	blx	r3
}
    15e6:	bd08      	pop	{r3, pc}
    15e8:	41004400 	.word	0x41004400
    15ec:	00001539 	.word	0x00001539

000015f0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15f4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15f6:	4b04      	ldr	r3, [pc, #16]	; (1608 <system_init+0x14>)
    15f8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15fa:	4b04      	ldr	r3, [pc, #16]	; (160c <system_init+0x18>)
    15fc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15fe:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_init+0x1c>)
    1600:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <system_init+0x20>)
    1604:	4798      	blx	r3
}
    1606:	bd08      	pop	{r3, pc}
    1608:	00001221 	.word	0x00001221
    160c:	00000c19 	.word	0x00000c19
    1610:	000015f1 	.word	0x000015f1
    1614:	000015f1 	.word	0x000015f1

00001618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1618:	e7fe      	b.n	1618 <Dummy_Handler>
    161a:	46c0      	nop			; (mov r8, r8)

0000161c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    161c:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    161e:	2102      	movs	r1, #2
    1620:	2390      	movs	r3, #144	; 0x90
    1622:	005b      	lsls	r3, r3, #1
    1624:	4a28      	ldr	r2, [pc, #160]	; (16c8 <Reset_Handler+0xac>)
    1626:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1628:	4b28      	ldr	r3, [pc, #160]	; (16cc <Reset_Handler+0xb0>)
    162a:	78d8      	ldrb	r0, [r3, #3]
    162c:	2103      	movs	r1, #3
    162e:	4388      	bics	r0, r1
    1630:	2202      	movs	r2, #2
    1632:	4310      	orrs	r0, r2
    1634:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1636:	78dd      	ldrb	r5, [r3, #3]
    1638:	240c      	movs	r4, #12
    163a:	43a5      	bics	r5, r4
    163c:	2008      	movs	r0, #8
    163e:	4305      	orrs	r5, r0
    1640:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1642:	4b23      	ldr	r3, [pc, #140]	; (16d0 <Reset_Handler+0xb4>)
    1644:	7b9e      	ldrb	r6, [r3, #14]
    1646:	2530      	movs	r5, #48	; 0x30
    1648:	43ae      	bics	r6, r5
    164a:	2520      	movs	r5, #32
    164c:	4335      	orrs	r5, r6
    164e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1650:	7b9d      	ldrb	r5, [r3, #14]
    1652:	43a5      	bics	r5, r4
    1654:	4328      	orrs	r0, r5
    1656:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1658:	7b98      	ldrb	r0, [r3, #14]
    165a:	4388      	bics	r0, r1
    165c:	4302      	orrs	r2, r0
    165e:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1660:	4b1c      	ldr	r3, [pc, #112]	; (16d4 <Reset_Handler+0xb8>)
    1662:	4a1d      	ldr	r2, [pc, #116]	; (16d8 <Reset_Handler+0xbc>)
    1664:	429a      	cmp	r2, r3
    1666:	d003      	beq.n	1670 <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    1668:	4b1c      	ldr	r3, [pc, #112]	; (16dc <Reset_Handler+0xc0>)
    166a:	4a1a      	ldr	r2, [pc, #104]	; (16d4 <Reset_Handler+0xb8>)
    166c:	429a      	cmp	r2, r3
    166e:	d304      	bcc.n	167a <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1670:	4b1b      	ldr	r3, [pc, #108]	; (16e0 <Reset_Handler+0xc4>)
    1672:	4a1c      	ldr	r2, [pc, #112]	; (16e4 <Reset_Handler+0xc8>)
    1674:	429a      	cmp	r2, r3
    1676:	d310      	bcc.n	169a <Reset_Handler+0x7e>
    1678:	e01b      	b.n	16b2 <Reset_Handler+0x96>
    167a:	4b1b      	ldr	r3, [pc, #108]	; (16e8 <Reset_Handler+0xcc>)
    167c:	4817      	ldr	r0, [pc, #92]	; (16dc <Reset_Handler+0xc0>)
    167e:	3003      	adds	r0, #3
    1680:	1ac0      	subs	r0, r0, r3
    1682:	0880      	lsrs	r0, r0, #2
    1684:	3001      	adds	r0, #1
    1686:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1688:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    168a:	4912      	ldr	r1, [pc, #72]	; (16d4 <Reset_Handler+0xb8>)
    168c:	4a12      	ldr	r2, [pc, #72]	; (16d8 <Reset_Handler+0xbc>)
    168e:	58d4      	ldr	r4, [r2, r3]
    1690:	50cc      	str	r4, [r1, r3]
    1692:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1694:	4283      	cmp	r3, r0
    1696:	d1fa      	bne.n	168e <Reset_Handler+0x72>
    1698:	e7ea      	b.n	1670 <Reset_Handler+0x54>
    169a:	4b12      	ldr	r3, [pc, #72]	; (16e4 <Reset_Handler+0xc8>)
    169c:	1d1a      	adds	r2, r3, #4
    169e:	4910      	ldr	r1, [pc, #64]	; (16e0 <Reset_Handler+0xc4>)
    16a0:	3103      	adds	r1, #3
    16a2:	1a89      	subs	r1, r1, r2
    16a4:	0889      	lsrs	r1, r1, #2
    16a6:	0089      	lsls	r1, r1, #2
    16a8:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    16aa:	2100      	movs	r1, #0
    16ac:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16ae:	4293      	cmp	r3, r2
    16b0:	d1fc      	bne.n	16ac <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16b2:	4b0e      	ldr	r3, [pc, #56]	; (16ec <Reset_Handler+0xd0>)
    16b4:	217f      	movs	r1, #127	; 0x7f
    16b6:	4a0e      	ldr	r2, [pc, #56]	; (16f0 <Reset_Handler+0xd4>)
    16b8:	438a      	bics	r2, r1
    16ba:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    16bc:	4b0d      	ldr	r3, [pc, #52]	; (16f4 <Reset_Handler+0xd8>)
    16be:	4798      	blx	r3

        /* Branch to main function */
        main();
    16c0:	4b0d      	ldr	r3, [pc, #52]	; (16f8 <Reset_Handler+0xdc>)
    16c2:	4798      	blx	r3
    16c4:	e7fe      	b.n	16c4 <Reset_Handler+0xa8>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	41007000 	.word	0x41007000
    16cc:	41005000 	.word	0x41005000
    16d0:	41004800 	.word	0x41004800
    16d4:	20000000 	.word	0x20000000
    16d8:	000066b4 	.word	0x000066b4
    16dc:	200000a0 	.word	0x200000a0
    16e0:	2000016c 	.word	0x2000016c
    16e4:	200000a0 	.word	0x200000a0
    16e8:	20000004 	.word	0x20000004
    16ec:	e000ed00 	.word	0xe000ed00
    16f0:	00000000 	.word	0x00000000
    16f4:	000019dd 	.word	0x000019dd
    16f8:	000018a1 	.word	0x000018a1

000016fc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    16fc:	4b06      	ldr	r3, [pc, #24]	; (1718 <_sbrk+0x1c>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d102      	bne.n	170a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1704:	4a05      	ldr	r2, [pc, #20]	; (171c <_sbrk+0x20>)
    1706:	4b04      	ldr	r3, [pc, #16]	; (1718 <_sbrk+0x1c>)
    1708:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    170a:	4a03      	ldr	r2, [pc, #12]	; (1718 <_sbrk+0x1c>)
    170c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    170e:	1818      	adds	r0, r3, r0
    1710:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1712:	1c18      	adds	r0, r3, #0
    1714:	4770      	bx	lr
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	200000fc 	.word	0x200000fc
    171c:	20002170 	.word	0x20002170

00001720 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1720:	2001      	movs	r0, #1
}
    1722:	4240      	negs	r0, r0
    1724:	4770      	bx	lr
    1726:	46c0      	nop			; (mov r8, r8)

00001728 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1728:	2380      	movs	r3, #128	; 0x80
    172a:	019b      	lsls	r3, r3, #6
    172c:	604b      	str	r3, [r1, #4]

	return 0;
}
    172e:	2000      	movs	r0, #0
    1730:	4770      	bx	lr
    1732:	46c0      	nop			; (mov r8, r8)

00001734 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1734:	2001      	movs	r0, #1
    1736:	4770      	bx	lr

00001738 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1738:	2000      	movs	r0, #0
    173a:	4770      	bx	lr

0000173c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	b082      	sub	sp, #8
    1740:	1c05      	adds	r5, r0, #0
    1742:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1744:	2200      	movs	r2, #0
    1746:	466b      	mov	r3, sp
    1748:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    174a:	4c06      	ldr	r4, [pc, #24]	; (1764 <usart_serial_getchar+0x28>)
    174c:	1c28      	adds	r0, r5, #0
    174e:	4669      	mov	r1, sp
    1750:	3106      	adds	r1, #6
    1752:	47a0      	blx	r4
    1754:	2800      	cmp	r0, #0
    1756:	d1f9      	bne.n	174c <usart_serial_getchar+0x10>

	*c = temp;
    1758:	466b      	mov	r3, sp
    175a:	3306      	adds	r3, #6
    175c:	881b      	ldrh	r3, [r3, #0]
    175e:	7033      	strb	r3, [r6, #0]
}
    1760:	b002      	add	sp, #8
    1762:	bd70      	pop	{r4, r5, r6, pc}
    1764:	000008c9 	.word	0x000008c9

00001768 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1768:	b570      	push	{r4, r5, r6, lr}
    176a:	1c06      	adds	r6, r0, #0
    176c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    176e:	4c03      	ldr	r4, [pc, #12]	; (177c <usart_serial_putchar+0x14>)
    1770:	1c30      	adds	r0, r6, #0
    1772:	1c29      	adds	r1, r5, #0
    1774:	47a0      	blx	r4
    1776:	2800      	cmp	r0, #0
    1778:	d1fa      	bne.n	1770 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    177a:	bd70      	pop	{r4, r5, r6, pc}
    177c:	0000089d 	.word	0x0000089d

00001780 <configure_adc>:

//init adc_instant
struct adc_module adc_instance;

//! [setup]
void configure_adc(void) {
    1780:	b510      	push	{r4, lr}
    1782:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	// setup_config_defaults
	adc_get_config_defaults(&config_adc);
    1784:	4668      	mov	r0, sp
    1786:	4b11      	ldr	r3, [pc, #68]	; (17cc <configure_adc+0x4c>)
    1788:	4798      	blx	r3

	config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    178a:	23f0      	movs	r3, #240	; 0xf0
    178c:	051b      	lsls	r3, r3, #20
    178e:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV4;
    1790:	2300      	movs	r3, #0
    1792:	466a      	mov	r2, sp
    1794:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    1796:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8; //PB00
    1798:	2308      	movs	r3, #8
    179a:	7313      	strb	r3, [r2, #12]
	config_adc.resolution = ADC_RESOLUTION_12BIT;
    179c:	2300      	movs	r3, #0
    179e:	7113      	strb	r3, [r2, #4]

	//setup_set_config
	adc_init(&adc_instance, ADC, &config_adc);
    17a0:	4c0b      	ldr	r4, [pc, #44]	; (17d0 <configure_adc+0x50>)
    17a2:	1c20      	adds	r0, r4, #0
    17a4:	490b      	ldr	r1, [pc, #44]	; (17d4 <configure_adc+0x54>)
    17a6:	4b0c      	ldr	r3, [pc, #48]	; (17d8 <configure_adc+0x58>)
    17a8:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    17aa:	6823      	ldr	r3, [r4, #0]
    17ac:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    17ae:	b252      	sxtb	r2, r2
    17b0:	2a00      	cmp	r2, #0
    17b2:	dbfb      	blt.n	17ac <configure_adc+0x2c>

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    17b4:	7819      	ldrb	r1, [r3, #0]
    17b6:	2202      	movs	r2, #2
    17b8:	430a      	orrs	r2, r1
    17ba:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    17bc:	4b04      	ldr	r3, [pc, #16]	; (17d0 <configure_adc+0x50>)
    17be:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    17c0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    17c2:	b25b      	sxtb	r3, r3
    17c4:	2b00      	cmp	r3, #0
    17c6:	dbfb      	blt.n	17c0 <configure_adc+0x40>
	adc_enable(&adc_instance);
}
    17c8:	b00c      	add	sp, #48	; 0x30
    17ca:	bd10      	pop	{r4, pc}
    17cc:	00000c51 	.word	0x00000c51
    17d0:	20000160 	.word	0x20000160
    17d4:	42004000 	.word	0x42004000
    17d8:	00000c99 	.word	0x00000c99
    17dc:	00000000 	.word	0x00000000

000017e0 <readVoltage>:

float readVoltage(struct adc_module adc_instance) {
    17e0:	b530      	push	{r4, r5, lr}
    17e2:	b083      	sub	sp, #12
    17e4:	9000      	str	r0, [sp, #0]
    17e6:	9101      	str	r1, [sp, #4]
	if (!&adc_instance || !adc_instance.hw) {
    17e8:	1e01      	subs	r1, r0, #0
    17ea:	d032      	beq.n	1852 <readVoltage+0x72>
    17ec:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    17ee:	b25b      	sxtb	r3, r3
    17f0:	2b00      	cmp	r3, #0
    17f2:	dbfb      	blt.n	17ec <readVoltage+0xc>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    17f4:	7b0a      	ldrb	r2, [r1, #12]
    17f6:	2302      	movs	r3, #2
    17f8:	4313      	orrs	r3, r2
    17fa:	730b      	strb	r3, [r1, #12]
    17fc:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    17fe:	b25b      	sxtb	r3, r3
    1800:	2b00      	cmp	r3, #0
    1802:	dbfb      	blt.n	17fc <readVoltage+0x1c>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1804:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1806:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1808:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    180a:	7e0a      	ldrb	r2, [r1, #24]
    180c:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    180e:	1c03      	adds	r3, r0, #0
    1810:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1812:	4215      	tst	r5, r2
    1814:	d000      	beq.n	1818 <readVoltage+0x38>
		status_flags |= ADC_STATUS_WINDOW;
    1816:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1818:	4214      	tst	r4, r2
    181a:	d000      	beq.n	181e <readVoltage+0x3e>
		status_flags |= ADC_STATUS_OVERRUN;
    181c:	432b      	orrs	r3, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    181e:	4218      	tst	r0, r3
    1820:	d0f3      	beq.n	180a <readVoltage+0x2a>
    1822:	7e4b      	ldrb	r3, [r1, #25]
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    1824:	b25b      	sxtb	r3, r3
    1826:	2b00      	cmp	r3, #0
    1828:	dbfb      	blt.n	1822 <readVoltage+0x42>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    182a:	8b48      	ldrh	r0, [r1, #26]
    182c:	b280      	uxth	r0, r0
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    182e:	2301      	movs	r3, #1
    1830:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    1832:	7e0a      	ldrb	r2, [r1, #24]
    1834:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1836:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1838:	0754      	lsls	r4, r2, #29
    183a:	d501      	bpl.n	1840 <readVoltage+0x60>
		status_flags |= ADC_STATUS_WINDOW;
    183c:	2402      	movs	r4, #2
    183e:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1840:	0794      	lsls	r4, r2, #30
    1842:	d501      	bpl.n	1848 <readVoltage+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
    1844:	2204      	movs	r2, #4
    1846:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1848:	075a      	lsls	r2, r3, #29
    184a:	d504      	bpl.n	1856 <readVoltage+0x76>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    184c:	2302      	movs	r3, #2
    184e:	760b      	strb	r3, [r1, #24]
    1850:	e001      	b.n	1856 <readVoltage+0x76>
		//You must configure the adc_instance and set it as a global variable.
		return -1;
    1852:	480d      	ldr	r0, [pc, #52]	; (1888 <readVoltage+0xa8>)
    1854:	e00d      	b.n	1872 <readVoltage+0x92>
	
	do {
		// Wait for conversion to be done and read out result
		status = adc_read(&adc_instance, &result);
	} while (status == STATUS_BUSY);
	float resFloat = result;
    1856:	4b0d      	ldr	r3, [pc, #52]	; (188c <readVoltage+0xac>)
    1858:	4798      	blx	r3
	return resultToVoltage(resFloat);
}
	
float resultToVoltage(float result) {
	return 5.599744685 + 0.4909903275 * result;
    185a:	4b0d      	ldr	r3, [pc, #52]	; (1890 <readVoltage+0xb0>)
    185c:	4798      	blx	r3
    185e:	4b07      	ldr	r3, [pc, #28]	; (187c <readVoltage+0x9c>)
    1860:	4a05      	ldr	r2, [pc, #20]	; (1878 <readVoltage+0x98>)
    1862:	4c0c      	ldr	r4, [pc, #48]	; (1894 <readVoltage+0xb4>)
    1864:	47a0      	blx	r4
    1866:	4a06      	ldr	r2, [pc, #24]	; (1880 <readVoltage+0xa0>)
    1868:	4b06      	ldr	r3, [pc, #24]	; (1884 <readVoltage+0xa4>)
    186a:	4c0b      	ldr	r4, [pc, #44]	; (1898 <readVoltage+0xb8>)
    186c:	47a0      	blx	r4
    186e:	4b0b      	ldr	r3, [pc, #44]	; (189c <readVoltage+0xbc>)
    1870:	4798      	blx	r3
		// Wait for conversion to be done and read out result
		status = adc_read(&adc_instance, &result);
	} while (status == STATUS_BUSY);
	float resFloat = result;
	return resultToVoltage(resFloat);
}
    1872:	b003      	add	sp, #12
    1874:	bd30      	pop	{r4, r5, pc}
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	b1d0f2f7 	.word	0xb1d0f2f7
    187c:	3fdf6c62 	.word	0x3fdf6c62
    1880:	7880196b 	.word	0x7880196b
    1884:	40166623 	.word	0x40166623
    1888:	bf800000 	.word	0xbf800000
    188c:	00004441 	.word	0x00004441
    1890:	000060cd 	.word	0x000060cd
    1894:	000053f9 	.word	0x000053f9
    1898:	000044e1 	.word	0x000044e1
    189c:	00006171 	.word	0x00006171

000018a0 <main>:

float voltageToTemp(float voltage) {
	return 0.1*voltage - 50;
}

int main(void) {
    18a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a2:	b091      	sub	sp, #68	; 0x44
	system_init();
    18a4:	4b38      	ldr	r3, [pc, #224]	; (1988 <main+0xe8>)
    18a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18a8:	2380      	movs	r3, #128	; 0x80
    18aa:	05db      	lsls	r3, r3, #23
    18ac:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    18ae:	2300      	movs	r3, #0
    18b0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    18b2:	22ff      	movs	r2, #255	; 0xff
    18b4:	4668      	mov	r0, sp
    18b6:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    18b8:	2200      	movs	r2, #0
    18ba:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    18bc:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    18be:	2601      	movs	r6, #1
    18c0:	2124      	movs	r1, #36	; 0x24
    18c2:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    18c4:	2125      	movs	r1, #37	; 0x25
    18c6:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    18c8:	2126      	movs	r1, #38	; 0x26
    18ca:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    18cc:	2127      	movs	r1, #39	; 0x27
    18ce:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    18d0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    18d2:	212c      	movs	r1, #44	; 0x2c
    18d4:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    18d6:	212d      	movs	r1, #45	; 0x2d
    18d8:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    18da:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    18dc:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    18de:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    18e0:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    18e2:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    18e4:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    18e6:	2313      	movs	r3, #19
    18e8:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    18ea:	7742      	strb	r2, [r0, #29]
 */
static void configure_console(void) {
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    18ec:	2380      	movs	r3, #128	; 0x80
    18ee:	035b      	lsls	r3, r3, #13
    18f0:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    18f2:	4b26      	ldr	r3, [pc, #152]	; (198c <main+0xec>)
    18f4:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    18f6:	4b26      	ldr	r3, [pc, #152]	; (1990 <main+0xf0>)
    18f8:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    18fa:	2301      	movs	r3, #1
    18fc:	425b      	negs	r3, r3
    18fe:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1900:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1902:	2396      	movs	r3, #150	; 0x96
    1904:	021b      	lsls	r3, r3, #8
    1906:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1908:	4c22      	ldr	r4, [pc, #136]	; (1994 <main+0xf4>)
    190a:	4b23      	ldr	r3, [pc, #140]	; (1998 <main+0xf8>)
    190c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    190e:	4a23      	ldr	r2, [pc, #140]	; (199c <main+0xfc>)
    1910:	4b23      	ldr	r3, [pc, #140]	; (19a0 <main+0x100>)
    1912:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1914:	4a23      	ldr	r2, [pc, #140]	; (19a4 <main+0x104>)
    1916:	4b24      	ldr	r3, [pc, #144]	; (19a8 <main+0x108>)
    1918:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    191a:	1c20      	adds	r0, r4, #0
    191c:	4923      	ldr	r1, [pc, #140]	; (19ac <main+0x10c>)
    191e:	466a      	mov	r2, sp
    1920:	4b23      	ldr	r3, [pc, #140]	; (19b0 <main+0x110>)
    1922:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1924:	4f23      	ldr	r7, [pc, #140]	; (19b4 <main+0x114>)
    1926:	683b      	ldr	r3, [r7, #0]
    1928:	6898      	ldr	r0, [r3, #8]
    192a:	2100      	movs	r1, #0
    192c:	4d22      	ldr	r5, [pc, #136]	; (19b8 <main+0x118>)
    192e:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1930:	683b      	ldr	r3, [r7, #0]
    1932:	6858      	ldr	r0, [r3, #4]
    1934:	2100      	movs	r1, #0
    1936:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1938:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    193a:	1c28      	adds	r0, r5, #0
    193c:	4b1f      	ldr	r3, [pc, #124]	; (19bc <main+0x11c>)
    193e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1940:	231f      	movs	r3, #31
    1942:	4018      	ands	r0, r3
    1944:	4086      	lsls	r6, r0
    1946:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <main+0x120>)
    1948:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    194a:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    194c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    194e:	2b00      	cmp	r3, #0
    1950:	d1fc      	bne.n	194c <main+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1952:	682a      	ldr	r2, [r5, #0]
    1954:	2302      	movs	r3, #2
    1956:	4313      	orrs	r3, r2
    1958:	602b      	str	r3, [r5, #0]
}

int main(void) {
	system_init();
	configure_console();
	configure_adc();
    195a:	4b1a      	ldr	r3, [pc, #104]	; (19c4 <main+0x124>)
    195c:	4798      	blx	r3
    195e:	2464      	movs	r4, #100	; 0x64
	
	for(int i = 0; i < 100; i++) {
		printf("%f ", readVoltage(adc_instance));
    1960:	4d19      	ldr	r5, [pc, #100]	; (19c8 <main+0x128>)
    1962:	4f1a      	ldr	r7, [pc, #104]	; (19cc <main+0x12c>)
    1964:	4e1a      	ldr	r6, [pc, #104]	; (19d0 <main+0x130>)
    1966:	6828      	ldr	r0, [r5, #0]
    1968:	6869      	ldr	r1, [r5, #4]
    196a:	47b8      	blx	r7
    196c:	4b19      	ldr	r3, [pc, #100]	; (19d4 <main+0x134>)
    196e:	4798      	blx	r3
    1970:	1c02      	adds	r2, r0, #0
    1972:	1c0b      	adds	r3, r1, #0
    1974:	1c30      	adds	r0, r6, #0
    1976:	4918      	ldr	r1, [pc, #96]	; (19d8 <main+0x138>)
    1978:	4788      	blx	r1
    197a:	3c01      	subs	r4, #1
int main(void) {
	system_init();
	configure_console();
	configure_adc();
	
	for(int i = 0; i < 100; i++) {
    197c:	2c00      	cmp	r4, #0
    197e:	d1f2      	bne.n	1966 <main+0xc6>
		printf("%f ", readVoltage(adc_instance));
	}
}
    1980:	2000      	movs	r0, #0
    1982:	b011      	add	sp, #68	; 0x44
    1984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000015f5 	.word	0x000015f5
    198c:	00160002 	.word	0x00160002
    1990:	00170002 	.word	0x00170002
    1994:	20000100 	.word	0x20000100
    1998:	20000144 	.word	0x20000144
    199c:	00001769 	.word	0x00001769
    19a0:	20000140 	.word	0x20000140
    19a4:	0000173d 	.word	0x0000173d
    19a8:	2000013c 	.word	0x2000013c
    19ac:	42001400 	.word	0x42001400
    19b0:	00000595 	.word	0x00000595
    19b4:	20000064 	.word	0x20000064
    19b8:	00001a81 	.word	0x00001a81
    19bc:	00000b1d 	.word	0x00000b1d
    19c0:	e000e100 	.word	0xe000e100
    19c4:	00001781 	.word	0x00001781
    19c8:	20000160 	.word	0x20000160
    19cc:	000017e1 	.word	0x000017e1
    19d0:	00006450 	.word	0x00006450
    19d4:	000060cd 	.word	0x000060cd
    19d8:	00001a4d 	.word	0x00001a4d

000019dc <__libc_init_array>:
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4b0e      	ldr	r3, [pc, #56]	; (1a18 <__libc_init_array+0x3c>)
    19e0:	4d0e      	ldr	r5, [pc, #56]	; (1a1c <__libc_init_array+0x40>)
    19e2:	2400      	movs	r4, #0
    19e4:	1aed      	subs	r5, r5, r3
    19e6:	10ad      	asrs	r5, r5, #2
    19e8:	1c1e      	adds	r6, r3, #0
    19ea:	42ac      	cmp	r4, r5
    19ec:	d004      	beq.n	19f8 <__libc_init_array+0x1c>
    19ee:	00a3      	lsls	r3, r4, #2
    19f0:	58f3      	ldr	r3, [r6, r3]
    19f2:	4798      	blx	r3
    19f4:	3401      	adds	r4, #1
    19f6:	e7f8      	b.n	19ea <__libc_init_array+0xe>
    19f8:	f004 fe4c 	bl	6694 <_init>
    19fc:	4b08      	ldr	r3, [pc, #32]	; (1a20 <__libc_init_array+0x44>)
    19fe:	4d09      	ldr	r5, [pc, #36]	; (1a24 <__libc_init_array+0x48>)
    1a00:	2400      	movs	r4, #0
    1a02:	1aed      	subs	r5, r5, r3
    1a04:	10ad      	asrs	r5, r5, #2
    1a06:	1c1e      	adds	r6, r3, #0
    1a08:	42ac      	cmp	r4, r5
    1a0a:	d004      	beq.n	1a16 <__libc_init_array+0x3a>
    1a0c:	00a3      	lsls	r3, r4, #2
    1a0e:	58f3      	ldr	r3, [r6, r3]
    1a10:	4798      	blx	r3
    1a12:	3401      	adds	r4, #1
    1a14:	e7f8      	b.n	1a08 <__libc_init_array+0x2c>
    1a16:	bd70      	pop	{r4, r5, r6, pc}
    1a18:	000066a0 	.word	0x000066a0
    1a1c:	000066a0 	.word	0x000066a0
    1a20:	000066a0 	.word	0x000066a0
    1a24:	000066a4 	.word	0x000066a4

00001a28 <memcpy>:
    1a28:	b510      	push	{r4, lr}
    1a2a:	2300      	movs	r3, #0
    1a2c:	4293      	cmp	r3, r2
    1a2e:	d003      	beq.n	1a38 <memcpy+0x10>
    1a30:	5ccc      	ldrb	r4, [r1, r3]
    1a32:	54c4      	strb	r4, [r0, r3]
    1a34:	3301      	adds	r3, #1
    1a36:	e7f9      	b.n	1a2c <memcpy+0x4>
    1a38:	bd10      	pop	{r4, pc}

00001a3a <memset>:
    1a3a:	1c03      	adds	r3, r0, #0
    1a3c:	1882      	adds	r2, r0, r2
    1a3e:	4293      	cmp	r3, r2
    1a40:	d002      	beq.n	1a48 <memset+0xe>
    1a42:	7019      	strb	r1, [r3, #0]
    1a44:	3301      	adds	r3, #1
    1a46:	e7fa      	b.n	1a3e <memset+0x4>
    1a48:	4770      	bx	lr
	...

00001a4c <iprintf>:
    1a4c:	b40f      	push	{r0, r1, r2, r3}
    1a4e:	4b0b      	ldr	r3, [pc, #44]	; (1a7c <iprintf+0x30>)
    1a50:	b513      	push	{r0, r1, r4, lr}
    1a52:	681c      	ldr	r4, [r3, #0]
    1a54:	2c00      	cmp	r4, #0
    1a56:	d005      	beq.n	1a64 <iprintf+0x18>
    1a58:	69a3      	ldr	r3, [r4, #24]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d102      	bne.n	1a64 <iprintf+0x18>
    1a5e:	1c20      	adds	r0, r4, #0
    1a60:	f001 fe60 	bl	3724 <__sinit>
    1a64:	ab05      	add	r3, sp, #20
    1a66:	68a1      	ldr	r1, [r4, #8]
    1a68:	1c20      	adds	r0, r4, #0
    1a6a:	9a04      	ldr	r2, [sp, #16]
    1a6c:	9301      	str	r3, [sp, #4]
    1a6e:	f000 f8bf 	bl	1bf0 <_vfiprintf_r>
    1a72:	bc16      	pop	{r1, r2, r4}
    1a74:	bc08      	pop	{r3}
    1a76:	b004      	add	sp, #16
    1a78:	4718      	bx	r3
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	20000064 	.word	0x20000064

00001a80 <setbuf>:
    1a80:	b508      	push	{r3, lr}
    1a82:	424a      	negs	r2, r1
    1a84:	414a      	adcs	r2, r1
    1a86:	2380      	movs	r3, #128	; 0x80
    1a88:	0052      	lsls	r2, r2, #1
    1a8a:	00db      	lsls	r3, r3, #3
    1a8c:	f000 f802 	bl	1a94 <setvbuf>
    1a90:	bd08      	pop	{r3, pc}
	...

00001a94 <setvbuf>:
    1a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a96:	1c1e      	adds	r6, r3, #0
    1a98:	4b3c      	ldr	r3, [pc, #240]	; (1b8c <setvbuf+0xf8>)
    1a9a:	1c04      	adds	r4, r0, #0
    1a9c:	681d      	ldr	r5, [r3, #0]
    1a9e:	1c0f      	adds	r7, r1, #0
    1aa0:	9201      	str	r2, [sp, #4]
    1aa2:	2d00      	cmp	r5, #0
    1aa4:	d005      	beq.n	1ab2 <setvbuf+0x1e>
    1aa6:	69aa      	ldr	r2, [r5, #24]
    1aa8:	2a00      	cmp	r2, #0
    1aaa:	d102      	bne.n	1ab2 <setvbuf+0x1e>
    1aac:	1c28      	adds	r0, r5, #0
    1aae:	f001 fe39 	bl	3724 <__sinit>
    1ab2:	4b37      	ldr	r3, [pc, #220]	; (1b90 <setvbuf+0xfc>)
    1ab4:	429c      	cmp	r4, r3
    1ab6:	d101      	bne.n	1abc <setvbuf+0x28>
    1ab8:	686c      	ldr	r4, [r5, #4]
    1aba:	e008      	b.n	1ace <setvbuf+0x3a>
    1abc:	4b35      	ldr	r3, [pc, #212]	; (1b94 <setvbuf+0x100>)
    1abe:	429c      	cmp	r4, r3
    1ac0:	d101      	bne.n	1ac6 <setvbuf+0x32>
    1ac2:	68ac      	ldr	r4, [r5, #8]
    1ac4:	e003      	b.n	1ace <setvbuf+0x3a>
    1ac6:	4b34      	ldr	r3, [pc, #208]	; (1b98 <setvbuf+0x104>)
    1ac8:	429c      	cmp	r4, r3
    1aca:	d100      	bne.n	1ace <setvbuf+0x3a>
    1acc:	68ec      	ldr	r4, [r5, #12]
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	2b02      	cmp	r3, #2
    1ad2:	d857      	bhi.n	1b84 <setvbuf+0xf0>
    1ad4:	2e00      	cmp	r6, #0
    1ad6:	db55      	blt.n	1b84 <setvbuf+0xf0>
    1ad8:	1c28      	adds	r0, r5, #0
    1ada:	1c21      	adds	r1, r4, #0
    1adc:	f001 fda2 	bl	3624 <_fflush_r>
    1ae0:	2300      	movs	r3, #0
    1ae2:	6063      	str	r3, [r4, #4]
    1ae4:	61a3      	str	r3, [r4, #24]
    1ae6:	89a3      	ldrh	r3, [r4, #12]
    1ae8:	061a      	lsls	r2, r3, #24
    1aea:	d503      	bpl.n	1af4 <setvbuf+0x60>
    1aec:	1c28      	adds	r0, r5, #0
    1aee:	6921      	ldr	r1, [r4, #16]
    1af0:	f002 f9ee 	bl	3ed0 <_free_r>
    1af4:	89a3      	ldrh	r3, [r4, #12]
    1af6:	2283      	movs	r2, #131	; 0x83
    1af8:	4393      	bics	r3, r2
    1afa:	81a3      	strh	r3, [r4, #12]
    1afc:	9b01      	ldr	r3, [sp, #4]
    1afe:	2b02      	cmp	r3, #2
    1b00:	d013      	beq.n	1b2a <setvbuf+0x96>
    1b02:	2f00      	cmp	r7, #0
    1b04:	d125      	bne.n	1b52 <setvbuf+0xbe>
    1b06:	2e00      	cmp	r6, #0
    1b08:	d101      	bne.n	1b0e <setvbuf+0x7a>
    1b0a:	2680      	movs	r6, #128	; 0x80
    1b0c:	00f6      	lsls	r6, r6, #3
    1b0e:	1c30      	adds	r0, r6, #0
    1b10:	f001 fecc 	bl	38ac <malloc>
    1b14:	1e07      	subs	r7, r0, #0
    1b16:	d118      	bne.n	1b4a <setvbuf+0xb6>
    1b18:	2080      	movs	r0, #128	; 0x80
    1b1a:	00c0      	lsls	r0, r0, #3
    1b1c:	f001 fec6 	bl	38ac <malloc>
    1b20:	1e07      	subs	r7, r0, #0
    1b22:	d110      	bne.n	1b46 <setvbuf+0xb2>
    1b24:	2001      	movs	r0, #1
    1b26:	4240      	negs	r0, r0
    1b28:	e000      	b.n	1b2c <setvbuf+0x98>
    1b2a:	2000      	movs	r0, #0
    1b2c:	89a3      	ldrh	r3, [r4, #12]
    1b2e:	2202      	movs	r2, #2
    1b30:	4313      	orrs	r3, r2
    1b32:	81a3      	strh	r3, [r4, #12]
    1b34:	2300      	movs	r3, #0
    1b36:	60a3      	str	r3, [r4, #8]
    1b38:	1c23      	adds	r3, r4, #0
    1b3a:	3347      	adds	r3, #71	; 0x47
    1b3c:	6023      	str	r3, [r4, #0]
    1b3e:	6123      	str	r3, [r4, #16]
    1b40:	2301      	movs	r3, #1
    1b42:	6163      	str	r3, [r4, #20]
    1b44:	e020      	b.n	1b88 <setvbuf+0xf4>
    1b46:	2680      	movs	r6, #128	; 0x80
    1b48:	00f6      	lsls	r6, r6, #3
    1b4a:	89a3      	ldrh	r3, [r4, #12]
    1b4c:	2280      	movs	r2, #128	; 0x80
    1b4e:	4313      	orrs	r3, r2
    1b50:	81a3      	strh	r3, [r4, #12]
    1b52:	9a01      	ldr	r2, [sp, #4]
    1b54:	2a01      	cmp	r2, #1
    1b56:	d104      	bne.n	1b62 <setvbuf+0xce>
    1b58:	89a3      	ldrh	r3, [r4, #12]
    1b5a:	4313      	orrs	r3, r2
    1b5c:	81a3      	strh	r3, [r4, #12]
    1b5e:	4273      	negs	r3, r6
    1b60:	61a3      	str	r3, [r4, #24]
    1b62:	4b0e      	ldr	r3, [pc, #56]	; (1b9c <setvbuf+0x108>)
    1b64:	2000      	movs	r0, #0
    1b66:	62ab      	str	r3, [r5, #40]	; 0x28
    1b68:	89a3      	ldrh	r3, [r4, #12]
    1b6a:	6027      	str	r7, [r4, #0]
    1b6c:	6127      	str	r7, [r4, #16]
    1b6e:	6166      	str	r6, [r4, #20]
    1b70:	071a      	lsls	r2, r3, #28
    1b72:	d509      	bpl.n	1b88 <setvbuf+0xf4>
    1b74:	2203      	movs	r2, #3
    1b76:	4013      	ands	r3, r2
    1b78:	425a      	negs	r2, r3
    1b7a:	4153      	adcs	r3, r2
    1b7c:	425b      	negs	r3, r3
    1b7e:	401e      	ands	r6, r3
    1b80:	60a6      	str	r6, [r4, #8]
    1b82:	e001      	b.n	1b88 <setvbuf+0xf4>
    1b84:	2001      	movs	r0, #1
    1b86:	4240      	negs	r0, r0
    1b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	20000064 	.word	0x20000064
    1b90:	000064b0 	.word	0x000064b0
    1b94:	000064d0 	.word	0x000064d0
    1b98:	000064f0 	.word	0x000064f0
    1b9c:	0000367d 	.word	0x0000367d

00001ba0 <__sfputc_r>:
    1ba0:	6893      	ldr	r3, [r2, #8]
    1ba2:	b510      	push	{r4, lr}
    1ba4:	3b01      	subs	r3, #1
    1ba6:	6093      	str	r3, [r2, #8]
    1ba8:	2b00      	cmp	r3, #0
    1baa:	da05      	bge.n	1bb8 <__sfputc_r+0x18>
    1bac:	6994      	ldr	r4, [r2, #24]
    1bae:	42a3      	cmp	r3, r4
    1bb0:	db08      	blt.n	1bc4 <__sfputc_r+0x24>
    1bb2:	b2cb      	uxtb	r3, r1
    1bb4:	2b0a      	cmp	r3, #10
    1bb6:	d005      	beq.n	1bc4 <__sfputc_r+0x24>
    1bb8:	6813      	ldr	r3, [r2, #0]
    1bba:	1c58      	adds	r0, r3, #1
    1bbc:	6010      	str	r0, [r2, #0]
    1bbe:	7019      	strb	r1, [r3, #0]
    1bc0:	b2c8      	uxtb	r0, r1
    1bc2:	e001      	b.n	1bc8 <__sfputc_r+0x28>
    1bc4:	f000 fd72 	bl	26ac <__swbuf_r>
    1bc8:	bd10      	pop	{r4, pc}

00001bca <__sfputs_r>:
    1bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bcc:	1c06      	adds	r6, r0, #0
    1bce:	1c0f      	adds	r7, r1, #0
    1bd0:	1c14      	adds	r4, r2, #0
    1bd2:	18d5      	adds	r5, r2, r3
    1bd4:	42ac      	cmp	r4, r5
    1bd6:	d008      	beq.n	1bea <__sfputs_r+0x20>
    1bd8:	7821      	ldrb	r1, [r4, #0]
    1bda:	1c30      	adds	r0, r6, #0
    1bdc:	1c3a      	adds	r2, r7, #0
    1bde:	f7ff ffdf 	bl	1ba0 <__sfputc_r>
    1be2:	3401      	adds	r4, #1
    1be4:	1c43      	adds	r3, r0, #1
    1be6:	d1f5      	bne.n	1bd4 <__sfputs_r+0xa>
    1be8:	e000      	b.n	1bec <__sfputs_r+0x22>
    1bea:	2000      	movs	r0, #0
    1bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00001bf0 <_vfiprintf_r>:
    1bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf2:	b09f      	sub	sp, #124	; 0x7c
    1bf4:	1c06      	adds	r6, r0, #0
    1bf6:	1c0f      	adds	r7, r1, #0
    1bf8:	9203      	str	r2, [sp, #12]
    1bfa:	9305      	str	r3, [sp, #20]
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d004      	beq.n	1c0a <_vfiprintf_r+0x1a>
    1c00:	6981      	ldr	r1, [r0, #24]
    1c02:	2900      	cmp	r1, #0
    1c04:	d101      	bne.n	1c0a <_vfiprintf_r+0x1a>
    1c06:	f001 fd8d 	bl	3724 <__sinit>
    1c0a:	4b75      	ldr	r3, [pc, #468]	; (1de0 <_vfiprintf_r+0x1f0>)
    1c0c:	429f      	cmp	r7, r3
    1c0e:	d101      	bne.n	1c14 <_vfiprintf_r+0x24>
    1c10:	6877      	ldr	r7, [r6, #4]
    1c12:	e008      	b.n	1c26 <_vfiprintf_r+0x36>
    1c14:	4b73      	ldr	r3, [pc, #460]	; (1de4 <_vfiprintf_r+0x1f4>)
    1c16:	429f      	cmp	r7, r3
    1c18:	d101      	bne.n	1c1e <_vfiprintf_r+0x2e>
    1c1a:	68b7      	ldr	r7, [r6, #8]
    1c1c:	e003      	b.n	1c26 <_vfiprintf_r+0x36>
    1c1e:	4b72      	ldr	r3, [pc, #456]	; (1de8 <_vfiprintf_r+0x1f8>)
    1c20:	429f      	cmp	r7, r3
    1c22:	d100      	bne.n	1c26 <_vfiprintf_r+0x36>
    1c24:	68f7      	ldr	r7, [r6, #12]
    1c26:	89bb      	ldrh	r3, [r7, #12]
    1c28:	071a      	lsls	r2, r3, #28
    1c2a:	d50a      	bpl.n	1c42 <_vfiprintf_r+0x52>
    1c2c:	693b      	ldr	r3, [r7, #16]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d007      	beq.n	1c42 <_vfiprintf_r+0x52>
    1c32:	ad06      	add	r5, sp, #24
    1c34:	2300      	movs	r3, #0
    1c36:	616b      	str	r3, [r5, #20]
    1c38:	2320      	movs	r3, #32
    1c3a:	766b      	strb	r3, [r5, #25]
    1c3c:	2330      	movs	r3, #48	; 0x30
    1c3e:	76ab      	strb	r3, [r5, #26]
    1c40:	e03b      	b.n	1cba <_vfiprintf_r+0xca>
    1c42:	1c30      	adds	r0, r6, #0
    1c44:	1c39      	adds	r1, r7, #0
    1c46:	f000 fd89 	bl	275c <__swsetup_r>
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d0f1      	beq.n	1c32 <_vfiprintf_r+0x42>
    1c4e:	2001      	movs	r0, #1
    1c50:	4240      	negs	r0, r0
    1c52:	e0c2      	b.n	1dda <_vfiprintf_r+0x1ea>
    1c54:	9a05      	ldr	r2, [sp, #20]
    1c56:	1d11      	adds	r1, r2, #4
    1c58:	6812      	ldr	r2, [r2, #0]
    1c5a:	9105      	str	r1, [sp, #20]
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	db76      	blt.n	1d4e <_vfiprintf_r+0x15e>
    1c60:	9209      	str	r2, [sp, #36]	; 0x24
    1c62:	3401      	adds	r4, #1
    1c64:	7823      	ldrb	r3, [r4, #0]
    1c66:	2b2e      	cmp	r3, #46	; 0x2e
    1c68:	d100      	bne.n	1c6c <_vfiprintf_r+0x7c>
    1c6a:	e081      	b.n	1d70 <_vfiprintf_r+0x180>
    1c6c:	7821      	ldrb	r1, [r4, #0]
    1c6e:	485f      	ldr	r0, [pc, #380]	; (1dec <_vfiprintf_r+0x1fc>)
    1c70:	2203      	movs	r2, #3
    1c72:	f001 fe25 	bl	38c0 <memchr>
    1c76:	2800      	cmp	r0, #0
    1c78:	d007      	beq.n	1c8a <_vfiprintf_r+0x9a>
    1c7a:	495c      	ldr	r1, [pc, #368]	; (1dec <_vfiprintf_r+0x1fc>)
    1c7c:	682a      	ldr	r2, [r5, #0]
    1c7e:	1a43      	subs	r3, r0, r1
    1c80:	2040      	movs	r0, #64	; 0x40
    1c82:	4098      	lsls	r0, r3
    1c84:	4310      	orrs	r0, r2
    1c86:	6028      	str	r0, [r5, #0]
    1c88:	3401      	adds	r4, #1
    1c8a:	7821      	ldrb	r1, [r4, #0]
    1c8c:	1c63      	adds	r3, r4, #1
    1c8e:	4858      	ldr	r0, [pc, #352]	; (1df0 <_vfiprintf_r+0x200>)
    1c90:	2206      	movs	r2, #6
    1c92:	9303      	str	r3, [sp, #12]
    1c94:	7629      	strb	r1, [r5, #24]
    1c96:	f001 fe13 	bl	38c0 <memchr>
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d100      	bne.n	1ca0 <_vfiprintf_r+0xb0>
    1c9e:	e08a      	b.n	1db6 <_vfiprintf_r+0x1c6>
    1ca0:	4b54      	ldr	r3, [pc, #336]	; (1df4 <_vfiprintf_r+0x204>)
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d17e      	bne.n	1da4 <_vfiprintf_r+0x1b4>
    1ca6:	9b05      	ldr	r3, [sp, #20]
    1ca8:	2207      	movs	r2, #7
    1caa:	3307      	adds	r3, #7
    1cac:	4393      	bics	r3, r2
    1cae:	3308      	adds	r3, #8
    1cb0:	9305      	str	r3, [sp, #20]
    1cb2:	696a      	ldr	r2, [r5, #20]
    1cb4:	9904      	ldr	r1, [sp, #16]
    1cb6:	1853      	adds	r3, r2, r1
    1cb8:	616b      	str	r3, [r5, #20]
    1cba:	9c03      	ldr	r4, [sp, #12]
    1cbc:	7823      	ldrb	r3, [r4, #0]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d104      	bne.n	1ccc <_vfiprintf_r+0xdc>
    1cc2:	9903      	ldr	r1, [sp, #12]
    1cc4:	1a61      	subs	r1, r4, r1
    1cc6:	9102      	str	r1, [sp, #8]
    1cc8:	d010      	beq.n	1cec <_vfiprintf_r+0xfc>
    1cca:	e003      	b.n	1cd4 <_vfiprintf_r+0xe4>
    1ccc:	2b25      	cmp	r3, #37	; 0x25
    1cce:	d0f8      	beq.n	1cc2 <_vfiprintf_r+0xd2>
    1cd0:	3401      	adds	r4, #1
    1cd2:	e7f3      	b.n	1cbc <_vfiprintf_r+0xcc>
    1cd4:	1c30      	adds	r0, r6, #0
    1cd6:	1c39      	adds	r1, r7, #0
    1cd8:	9a03      	ldr	r2, [sp, #12]
    1cda:	9b02      	ldr	r3, [sp, #8]
    1cdc:	f7ff ff75 	bl	1bca <__sfputs_r>
    1ce0:	3001      	adds	r0, #1
    1ce2:	d075      	beq.n	1dd0 <_vfiprintf_r+0x1e0>
    1ce4:	696a      	ldr	r2, [r5, #20]
    1ce6:	9902      	ldr	r1, [sp, #8]
    1ce8:	1853      	adds	r3, r2, r1
    1cea:	616b      	str	r3, [r5, #20]
    1cec:	7823      	ldrb	r3, [r4, #0]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	d06e      	beq.n	1dd0 <_vfiprintf_r+0x1e0>
    1cf2:	2201      	movs	r2, #1
    1cf4:	4252      	negs	r2, r2
    1cf6:	606a      	str	r2, [r5, #4]
    1cf8:	466a      	mov	r2, sp
    1cfa:	2300      	movs	r3, #0
    1cfc:	325b      	adds	r2, #91	; 0x5b
    1cfe:	3401      	adds	r4, #1
    1d00:	602b      	str	r3, [r5, #0]
    1d02:	60eb      	str	r3, [r5, #12]
    1d04:	60ab      	str	r3, [r5, #8]
    1d06:	7013      	strb	r3, [r2, #0]
    1d08:	65ab      	str	r3, [r5, #88]	; 0x58
    1d0a:	7821      	ldrb	r1, [r4, #0]
    1d0c:	483a      	ldr	r0, [pc, #232]	; (1df8 <_vfiprintf_r+0x208>)
    1d0e:	2205      	movs	r2, #5
    1d10:	f001 fdd6 	bl	38c0 <memchr>
    1d14:	2800      	cmp	r0, #0
    1d16:	d008      	beq.n	1d2a <_vfiprintf_r+0x13a>
    1d18:	4a37      	ldr	r2, [pc, #220]	; (1df8 <_vfiprintf_r+0x208>)
    1d1a:	3401      	adds	r4, #1
    1d1c:	1a83      	subs	r3, r0, r2
    1d1e:	2001      	movs	r0, #1
    1d20:	4098      	lsls	r0, r3
    1d22:	682b      	ldr	r3, [r5, #0]
    1d24:	4318      	orrs	r0, r3
    1d26:	6028      	str	r0, [r5, #0]
    1d28:	e7ef      	b.n	1d0a <_vfiprintf_r+0x11a>
    1d2a:	682b      	ldr	r3, [r5, #0]
    1d2c:	06d9      	lsls	r1, r3, #27
    1d2e:	d503      	bpl.n	1d38 <_vfiprintf_r+0x148>
    1d30:	466a      	mov	r2, sp
    1d32:	2120      	movs	r1, #32
    1d34:	325b      	adds	r2, #91	; 0x5b
    1d36:	7011      	strb	r1, [r2, #0]
    1d38:	071a      	lsls	r2, r3, #28
    1d3a:	d503      	bpl.n	1d44 <_vfiprintf_r+0x154>
    1d3c:	466a      	mov	r2, sp
    1d3e:	212b      	movs	r1, #43	; 0x2b
    1d40:	325b      	adds	r2, #91	; 0x5b
    1d42:	7011      	strb	r1, [r2, #0]
    1d44:	7822      	ldrb	r2, [r4, #0]
    1d46:	2a2a      	cmp	r2, #42	; 0x2a
    1d48:	d084      	beq.n	1c54 <_vfiprintf_r+0x64>
    1d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d4c:	e005      	b.n	1d5a <_vfiprintf_r+0x16a>
    1d4e:	4252      	negs	r2, r2
    1d50:	60ea      	str	r2, [r5, #12]
    1d52:	2202      	movs	r2, #2
    1d54:	4313      	orrs	r3, r2
    1d56:	602b      	str	r3, [r5, #0]
    1d58:	e783      	b.n	1c62 <_vfiprintf_r+0x72>
    1d5a:	7822      	ldrb	r2, [r4, #0]
    1d5c:	3a30      	subs	r2, #48	; 0x30
    1d5e:	2a09      	cmp	r2, #9
    1d60:	d804      	bhi.n	1d6c <_vfiprintf_r+0x17c>
    1d62:	210a      	movs	r1, #10
    1d64:	434b      	muls	r3, r1
    1d66:	3401      	adds	r4, #1
    1d68:	189b      	adds	r3, r3, r2
    1d6a:	e7f6      	b.n	1d5a <_vfiprintf_r+0x16a>
    1d6c:	9309      	str	r3, [sp, #36]	; 0x24
    1d6e:	e779      	b.n	1c64 <_vfiprintf_r+0x74>
    1d70:	7863      	ldrb	r3, [r4, #1]
    1d72:	2b2a      	cmp	r3, #42	; 0x2a
    1d74:	d109      	bne.n	1d8a <_vfiprintf_r+0x19a>
    1d76:	9b05      	ldr	r3, [sp, #20]
    1d78:	3402      	adds	r4, #2
    1d7a:	1d1a      	adds	r2, r3, #4
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	9205      	str	r2, [sp, #20]
    1d80:	2b00      	cmp	r3, #0
    1d82:	da0d      	bge.n	1da0 <_vfiprintf_r+0x1b0>
    1d84:	2301      	movs	r3, #1
    1d86:	425b      	negs	r3, r3
    1d88:	e00a      	b.n	1da0 <_vfiprintf_r+0x1b0>
    1d8a:	3401      	adds	r4, #1
    1d8c:	2300      	movs	r3, #0
    1d8e:	7822      	ldrb	r2, [r4, #0]
    1d90:	3a30      	subs	r2, #48	; 0x30
    1d92:	2a09      	cmp	r2, #9
    1d94:	d804      	bhi.n	1da0 <_vfiprintf_r+0x1b0>
    1d96:	210a      	movs	r1, #10
    1d98:	434b      	muls	r3, r1
    1d9a:	3401      	adds	r4, #1
    1d9c:	189b      	adds	r3, r3, r2
    1d9e:	e7f6      	b.n	1d8e <_vfiprintf_r+0x19e>
    1da0:	9307      	str	r3, [sp, #28]
    1da2:	e763      	b.n	1c6c <_vfiprintf_r+0x7c>
    1da4:	ab05      	add	r3, sp, #20
    1da6:	9300      	str	r3, [sp, #0]
    1da8:	1c30      	adds	r0, r6, #0
    1daa:	1c29      	adds	r1, r5, #0
    1dac:	1c3a      	adds	r2, r7, #0
    1dae:	4b13      	ldr	r3, [pc, #76]	; (1dfc <_vfiprintf_r+0x20c>)
    1db0:	f000 f8c6 	bl	1f40 <_printf_float>
    1db4:	e007      	b.n	1dc6 <_vfiprintf_r+0x1d6>
    1db6:	ab05      	add	r3, sp, #20
    1db8:	9300      	str	r3, [sp, #0]
    1dba:	1c30      	adds	r0, r6, #0
    1dbc:	1c29      	adds	r1, r5, #0
    1dbe:	1c3a      	adds	r2, r7, #0
    1dc0:	4b0e      	ldr	r3, [pc, #56]	; (1dfc <_vfiprintf_r+0x20c>)
    1dc2:	f000 fb5d 	bl	2480 <_printf_i>
    1dc6:	9004      	str	r0, [sp, #16]
    1dc8:	9904      	ldr	r1, [sp, #16]
    1dca:	3101      	adds	r1, #1
    1dcc:	d000      	beq.n	1dd0 <_vfiprintf_r+0x1e0>
    1dce:	e770      	b.n	1cb2 <_vfiprintf_r+0xc2>
    1dd0:	89bb      	ldrh	r3, [r7, #12]
    1dd2:	065a      	lsls	r2, r3, #25
    1dd4:	d500      	bpl.n	1dd8 <_vfiprintf_r+0x1e8>
    1dd6:	e73a      	b.n	1c4e <_vfiprintf_r+0x5e>
    1dd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1dda:	b01f      	add	sp, #124	; 0x7c
    1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	000064b0 	.word	0x000064b0
    1de4:	000064d0 	.word	0x000064d0
    1de8:	000064f0 	.word	0x000064f0
    1dec:	00006462 	.word	0x00006462
    1df0:	00006466 	.word	0x00006466
    1df4:	00001f41 	.word	0x00001f41
    1df8:	0000645c 	.word	0x0000645c
    1dfc:	00001bcb 	.word	0x00001bcb

00001e00 <__cvt>:
    1e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e02:	b08b      	sub	sp, #44	; 0x2c
    1e04:	1c16      	adds	r6, r2, #0
    1e06:	1c1c      	adds	r4, r3, #0
    1e08:	9912      	ldr	r1, [sp, #72]	; 0x48
    1e0a:	d504      	bpl.n	1e16 <__cvt+0x16>
    1e0c:	2280      	movs	r2, #128	; 0x80
    1e0e:	0612      	lsls	r2, r2, #24
    1e10:	18a4      	adds	r4, r4, r2
    1e12:	232d      	movs	r3, #45	; 0x2d
    1e14:	e000      	b.n	1e18 <__cvt+0x18>
    1e16:	2300      	movs	r3, #0
    1e18:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1e1a:	700b      	strb	r3, [r1, #0]
    1e1c:	2320      	movs	r3, #32
    1e1e:	439f      	bics	r7, r3
    1e20:	2f46      	cmp	r7, #70	; 0x46
    1e22:	d008      	beq.n	1e36 <__cvt+0x36>
    1e24:	1c3a      	adds	r2, r7, #0
    1e26:	3a45      	subs	r2, #69	; 0x45
    1e28:	4251      	negs	r1, r2
    1e2a:	414a      	adcs	r2, r1
    1e2c:	9910      	ldr	r1, [sp, #64]	; 0x40
    1e2e:	2302      	movs	r3, #2
    1e30:	1889      	adds	r1, r1, r2
    1e32:	9110      	str	r1, [sp, #64]	; 0x40
    1e34:	e000      	b.n	1e38 <__cvt+0x38>
    1e36:	2303      	movs	r3, #3
    1e38:	9300      	str	r3, [sp, #0]
    1e3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e3e:	9302      	str	r3, [sp, #8]
    1e40:	ab08      	add	r3, sp, #32
    1e42:	9303      	str	r3, [sp, #12]
    1e44:	ab09      	add	r3, sp, #36	; 0x24
    1e46:	9201      	str	r2, [sp, #4]
    1e48:	9304      	str	r3, [sp, #16]
    1e4a:	1c32      	adds	r2, r6, #0
    1e4c:	1c23      	adds	r3, r4, #0
    1e4e:	f000 fd83 	bl	2958 <_dtoa_r>
    1e52:	1c05      	adds	r5, r0, #0
    1e54:	2f47      	cmp	r7, #71	; 0x47
    1e56:	d102      	bne.n	1e5e <__cvt+0x5e>
    1e58:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e5a:	07c9      	lsls	r1, r1, #31
    1e5c:	d52c      	bpl.n	1eb8 <__cvt+0xb8>
    1e5e:	9910      	ldr	r1, [sp, #64]	; 0x40
    1e60:	1869      	adds	r1, r5, r1
    1e62:	9107      	str	r1, [sp, #28]
    1e64:	2f46      	cmp	r7, #70	; 0x46
    1e66:	d114      	bne.n	1e92 <__cvt+0x92>
    1e68:	782b      	ldrb	r3, [r5, #0]
    1e6a:	2b30      	cmp	r3, #48	; 0x30
    1e6c:	d10c      	bne.n	1e88 <__cvt+0x88>
    1e6e:	1c30      	adds	r0, r6, #0
    1e70:	1c21      	adds	r1, r4, #0
    1e72:	4b16      	ldr	r3, [pc, #88]	; (1ecc <__cvt+0xcc>)
    1e74:	4a14      	ldr	r2, [pc, #80]	; (1ec8 <__cvt+0xc8>)
    1e76:	f002 fa93 	bl	43a0 <__aeabi_dcmpeq>
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d104      	bne.n	1e88 <__cvt+0x88>
    1e7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1e80:	2301      	movs	r3, #1
    1e82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1e84:	1a9b      	subs	r3, r3, r2
    1e86:	600b      	str	r3, [r1, #0]
    1e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    1e8a:	9907      	ldr	r1, [sp, #28]
    1e8c:	6813      	ldr	r3, [r2, #0]
    1e8e:	18c9      	adds	r1, r1, r3
    1e90:	9107      	str	r1, [sp, #28]
    1e92:	1c30      	adds	r0, r6, #0
    1e94:	1c21      	adds	r1, r4, #0
    1e96:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <__cvt+0xcc>)
    1e98:	4a0b      	ldr	r2, [pc, #44]	; (1ec8 <__cvt+0xc8>)
    1e9a:	f002 fa81 	bl	43a0 <__aeabi_dcmpeq>
    1e9e:	2800      	cmp	r0, #0
    1ea0:	d001      	beq.n	1ea6 <__cvt+0xa6>
    1ea2:	9a07      	ldr	r2, [sp, #28]
    1ea4:	9209      	str	r2, [sp, #36]	; 0x24
    1ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ea8:	9907      	ldr	r1, [sp, #28]
    1eaa:	428b      	cmp	r3, r1
    1eac:	d204      	bcs.n	1eb8 <__cvt+0xb8>
    1eae:	1c5a      	adds	r2, r3, #1
    1eb0:	9209      	str	r2, [sp, #36]	; 0x24
    1eb2:	2230      	movs	r2, #48	; 0x30
    1eb4:	701a      	strb	r2, [r3, #0]
    1eb6:	e7f6      	b.n	1ea6 <__cvt+0xa6>
    1eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1eba:	1c28      	adds	r0, r5, #0
    1ebc:	1b5a      	subs	r2, r3, r5
    1ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ec0:	601a      	str	r2, [r3, #0]
    1ec2:	b00b      	add	sp, #44	; 0x2c
    1ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ec6:	46c0      	nop			; (mov r8, r8)
	...

00001ed0 <__exponent>:
    1ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ed2:	232b      	movs	r3, #43	; 0x2b
    1ed4:	b085      	sub	sp, #20
    1ed6:	1c05      	adds	r5, r0, #0
    1ed8:	1c0c      	adds	r4, r1, #0
    1eda:	7002      	strb	r2, [r0, #0]
    1edc:	1c86      	adds	r6, r0, #2
    1ede:	2900      	cmp	r1, #0
    1ee0:	da01      	bge.n	1ee6 <__exponent+0x16>
    1ee2:	424c      	negs	r4, r1
    1ee4:	232d      	movs	r3, #45	; 0x2d
    1ee6:	706b      	strb	r3, [r5, #1]
    1ee8:	2c09      	cmp	r4, #9
    1eea:	dd1e      	ble.n	1f2a <__exponent+0x5a>
    1eec:	466f      	mov	r7, sp
    1eee:	370e      	adds	r7, #14
    1ef0:	1c20      	adds	r0, r4, #0
    1ef2:	210a      	movs	r1, #10
    1ef4:	9701      	str	r7, [sp, #4]
    1ef6:	f002 fa37 	bl	4368 <__aeabi_idivmod>
    1efa:	3130      	adds	r1, #48	; 0x30
    1efc:	7039      	strb	r1, [r7, #0]
    1efe:	1c20      	adds	r0, r4, #0
    1f00:	210a      	movs	r1, #10
    1f02:	f002 f9db 	bl	42bc <__aeabi_idiv>
    1f06:	3f01      	subs	r7, #1
    1f08:	1e04      	subs	r4, r0, #0
    1f0a:	2c09      	cmp	r4, #9
    1f0c:	dcf0      	bgt.n	1ef0 <__exponent+0x20>
    1f0e:	9b01      	ldr	r3, [sp, #4]
    1f10:	3430      	adds	r4, #48	; 0x30
    1f12:	3b01      	subs	r3, #1
    1f14:	701c      	strb	r4, [r3, #0]
    1f16:	466a      	mov	r2, sp
    1f18:	320f      	adds	r2, #15
    1f1a:	1c30      	adds	r0, r6, #0
    1f1c:	4293      	cmp	r3, r2
    1f1e:	d209      	bcs.n	1f34 <__exponent+0x64>
    1f20:	781a      	ldrb	r2, [r3, #0]
    1f22:	3301      	adds	r3, #1
    1f24:	7032      	strb	r2, [r6, #0]
    1f26:	3601      	adds	r6, #1
    1f28:	e7f5      	b.n	1f16 <__exponent+0x46>
    1f2a:	2330      	movs	r3, #48	; 0x30
    1f2c:	18e4      	adds	r4, r4, r3
    1f2e:	7033      	strb	r3, [r6, #0]
    1f30:	1cb0      	adds	r0, r6, #2
    1f32:	7074      	strb	r4, [r6, #1]
    1f34:	1b40      	subs	r0, r0, r5
    1f36:	b005      	add	sp, #20
    1f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3a:	0000      	movs	r0, r0
    1f3c:	0000      	movs	r0, r0
	...

00001f40 <_printf_float>:
    1f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f42:	b093      	sub	sp, #76	; 0x4c
    1f44:	1c0c      	adds	r4, r1, #0
    1f46:	920a      	str	r2, [sp, #40]	; 0x28
    1f48:	930b      	str	r3, [sp, #44]	; 0x2c
    1f4a:	9e18      	ldr	r6, [sp, #96]	; 0x60
    1f4c:	1c05      	adds	r5, r0, #0
    1f4e:	f001 fc59 	bl	3804 <_localeconv_r>
    1f52:	6800      	ldr	r0, [r0, #0]
    1f54:	900c      	str	r0, [sp, #48]	; 0x30
    1f56:	f002 f8df 	bl	4118 <strlen>
    1f5a:	2300      	movs	r3, #0
    1f5c:	9310      	str	r3, [sp, #64]	; 0x40
    1f5e:	6833      	ldr	r3, [r6, #0]
    1f60:	2207      	movs	r2, #7
    1f62:	3307      	adds	r3, #7
    1f64:	4393      	bics	r3, r2
    1f66:	1c1a      	adds	r2, r3, #0
    1f68:	3208      	adds	r2, #8
    1f6a:	900d      	str	r0, [sp, #52]	; 0x34
    1f6c:	7e27      	ldrb	r7, [r4, #24]
    1f6e:	6818      	ldr	r0, [r3, #0]
    1f70:	6859      	ldr	r1, [r3, #4]
    1f72:	6032      	str	r2, [r6, #0]
    1f74:	64a0      	str	r0, [r4, #72]	; 0x48
    1f76:	64e1      	str	r1, [r4, #76]	; 0x4c
    1f78:	f002 f846 	bl	4008 <__fpclassifyd>
    1f7c:	2801      	cmp	r0, #1
    1f7e:	d119      	bne.n	1fb4 <_printf_float+0x74>
    1f80:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1f82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    1f84:	4bb9      	ldr	r3, [pc, #740]	; (226c <STACK_SIZE+0x26c>)
    1f86:	4ab8      	ldr	r2, [pc, #736]	; (2268 <STACK_SIZE+0x268>)
    1f88:	f002 fa10 	bl	43ac <__aeabi_dcmplt>
    1f8c:	2800      	cmp	r0, #0
    1f8e:	d003      	beq.n	1f98 <_printf_float+0x58>
    1f90:	1c23      	adds	r3, r4, #0
    1f92:	222d      	movs	r2, #45	; 0x2d
    1f94:	3343      	adds	r3, #67	; 0x43
    1f96:	701a      	strb	r2, [r3, #0]
    1f98:	2f47      	cmp	r7, #71	; 0x47
    1f9a:	d801      	bhi.n	1fa0 <_printf_float+0x60>
    1f9c:	4eb4      	ldr	r6, [pc, #720]	; (2270 <STACK_SIZE+0x270>)
    1f9e:	e000      	b.n	1fa2 <_printf_float+0x62>
    1fa0:	4eb4      	ldr	r6, [pc, #720]	; (2274 <STACK_SIZE+0x274>)
    1fa2:	2303      	movs	r3, #3
    1fa4:	6820      	ldr	r0, [r4, #0]
    1fa6:	6123      	str	r3, [r4, #16]
    1fa8:	2304      	movs	r3, #4
    1faa:	4398      	bics	r0, r3
    1fac:	2100      	movs	r1, #0
    1fae:	6020      	str	r0, [r4, #0]
    1fb0:	9109      	str	r1, [sp, #36]	; 0x24
    1fb2:	e091      	b.n	20d8 <STACK_SIZE+0xd8>
    1fb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1fb6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    1fb8:	f002 f826 	bl	4008 <__fpclassifyd>
    1fbc:	6823      	ldr	r3, [r4, #0]
    1fbe:	2800      	cmp	r0, #0
    1fc0:	d10c      	bne.n	1fdc <_printf_float+0x9c>
    1fc2:	2f47      	cmp	r7, #71	; 0x47
    1fc4:	d801      	bhi.n	1fca <_printf_float+0x8a>
    1fc6:	4eac      	ldr	r6, [pc, #688]	; (2278 <STACK_SIZE+0x278>)
    1fc8:	e000      	b.n	1fcc <_printf_float+0x8c>
    1fca:	4eac      	ldr	r6, [pc, #688]	; (227c <STACK_SIZE+0x27c>)
    1fcc:	2203      	movs	r2, #3
    1fce:	6122      	str	r2, [r4, #16]
    1fd0:	2204      	movs	r2, #4
    1fd2:	4393      	bics	r3, r2
    1fd4:	2200      	movs	r2, #0
    1fd6:	6023      	str	r3, [r4, #0]
    1fd8:	9209      	str	r2, [sp, #36]	; 0x24
    1fda:	e07d      	b.n	20d8 <STACK_SIZE+0xd8>
    1fdc:	6862      	ldr	r2, [r4, #4]
    1fde:	1c56      	adds	r6, r2, #1
    1fe0:	d101      	bne.n	1fe6 <_printf_float+0xa6>
    1fe2:	2206      	movs	r2, #6
    1fe4:	e007      	b.n	1ff6 <_printf_float+0xb6>
    1fe6:	2120      	movs	r1, #32
    1fe8:	1c38      	adds	r0, r7, #0
    1fea:	4388      	bics	r0, r1
    1fec:	2847      	cmp	r0, #71	; 0x47
    1fee:	d103      	bne.n	1ff8 <_printf_float+0xb8>
    1ff0:	2a00      	cmp	r2, #0
    1ff2:	d101      	bne.n	1ff8 <_printf_float+0xb8>
    1ff4:	2201      	movs	r2, #1
    1ff6:	6062      	str	r2, [r4, #4]
    1ff8:	2280      	movs	r2, #128	; 0x80
    1ffa:	00d2      	lsls	r2, r2, #3
    1ffc:	4313      	orrs	r3, r2
    1ffe:	6023      	str	r3, [r4, #0]
    2000:	9301      	str	r3, [sp, #4]
    2002:	466b      	mov	r3, sp
    2004:	333b      	adds	r3, #59	; 0x3b
    2006:	9302      	str	r3, [sp, #8]
    2008:	ab0f      	add	r3, sp, #60	; 0x3c
    200a:	6861      	ldr	r1, [r4, #4]
    200c:	9303      	str	r3, [sp, #12]
    200e:	ab10      	add	r3, sp, #64	; 0x40
    2010:	9305      	str	r3, [sp, #20]
    2012:	2300      	movs	r3, #0
    2014:	9100      	str	r1, [sp, #0]
    2016:	9306      	str	r3, [sp, #24]
    2018:	9704      	str	r7, [sp, #16]
    201a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    201c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    201e:	1c28      	adds	r0, r5, #0
    2020:	f7ff feee 	bl	1e00 <__cvt>
    2024:	2320      	movs	r3, #32
    2026:	1c3a      	adds	r2, r7, #0
    2028:	1c06      	adds	r6, r0, #0
    202a:	439a      	bics	r2, r3
    202c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    202e:	2a47      	cmp	r2, #71	; 0x47
    2030:	d107      	bne.n	2042 <STACK_SIZE+0x42>
    2032:	1ccb      	adds	r3, r1, #3
    2034:	db02      	blt.n	203c <STACK_SIZE+0x3c>
    2036:	6860      	ldr	r0, [r4, #4]
    2038:	4281      	cmp	r1, r0
    203a:	dd2e      	ble.n	209a <STACK_SIZE+0x9a>
    203c:	3f02      	subs	r7, #2
    203e:	b2ff      	uxtb	r7, r7
    2040:	e001      	b.n	2046 <STACK_SIZE+0x46>
    2042:	2f65      	cmp	r7, #101	; 0x65
    2044:	d812      	bhi.n	206c <STACK_SIZE+0x6c>
    2046:	1c20      	adds	r0, r4, #0
    2048:	3901      	subs	r1, #1
    204a:	1c3a      	adds	r2, r7, #0
    204c:	3050      	adds	r0, #80	; 0x50
    204e:	910f      	str	r1, [sp, #60]	; 0x3c
    2050:	f7ff ff3e 	bl	1ed0 <__exponent>
    2054:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2056:	9009      	str	r0, [sp, #36]	; 0x24
    2058:	18c2      	adds	r2, r0, r3
    205a:	6122      	str	r2, [r4, #16]
    205c:	2b01      	cmp	r3, #1
    205e:	dc02      	bgt.n	2066 <STACK_SIZE+0x66>
    2060:	6821      	ldr	r1, [r4, #0]
    2062:	07c9      	lsls	r1, r1, #31
    2064:	d52f      	bpl.n	20c6 <STACK_SIZE+0xc6>
    2066:	3201      	adds	r2, #1
    2068:	6122      	str	r2, [r4, #16]
    206a:	e02c      	b.n	20c6 <STACK_SIZE+0xc6>
    206c:	2f66      	cmp	r7, #102	; 0x66
    206e:	d115      	bne.n	209c <STACK_SIZE+0x9c>
    2070:	6863      	ldr	r3, [r4, #4]
    2072:	2900      	cmp	r1, #0
    2074:	dd08      	ble.n	2088 <STACK_SIZE+0x88>
    2076:	6121      	str	r1, [r4, #16]
    2078:	2b00      	cmp	r3, #0
    207a:	d102      	bne.n	2082 <STACK_SIZE+0x82>
    207c:	6822      	ldr	r2, [r4, #0]
    207e:	07d2      	lsls	r2, r2, #31
    2080:	d51d      	bpl.n	20be <STACK_SIZE+0xbe>
    2082:	3301      	adds	r3, #1
    2084:	18c9      	adds	r1, r1, r3
    2086:	e011      	b.n	20ac <STACK_SIZE+0xac>
    2088:	2b00      	cmp	r3, #0
    208a:	d103      	bne.n	2094 <STACK_SIZE+0x94>
    208c:	6820      	ldr	r0, [r4, #0]
    208e:	2201      	movs	r2, #1
    2090:	4210      	tst	r0, r2
    2092:	d000      	beq.n	2096 <STACK_SIZE+0x96>
    2094:	1c9a      	adds	r2, r3, #2
    2096:	6122      	str	r2, [r4, #16]
    2098:	e011      	b.n	20be <STACK_SIZE+0xbe>
    209a:	2767      	movs	r7, #103	; 0x67
    209c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    209e:	4291      	cmp	r1, r2
    20a0:	db06      	blt.n	20b0 <STACK_SIZE+0xb0>
    20a2:	6822      	ldr	r2, [r4, #0]
    20a4:	6121      	str	r1, [r4, #16]
    20a6:	07d2      	lsls	r2, r2, #31
    20a8:	d509      	bpl.n	20be <STACK_SIZE+0xbe>
    20aa:	3101      	adds	r1, #1
    20ac:	6121      	str	r1, [r4, #16]
    20ae:	e006      	b.n	20be <STACK_SIZE+0xbe>
    20b0:	2301      	movs	r3, #1
    20b2:	2900      	cmp	r1, #0
    20b4:	dc01      	bgt.n	20ba <STACK_SIZE+0xba>
    20b6:	2302      	movs	r3, #2
    20b8:	1a5b      	subs	r3, r3, r1
    20ba:	18d3      	adds	r3, r2, r3
    20bc:	6123      	str	r3, [r4, #16]
    20be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    20c0:	2000      	movs	r0, #0
    20c2:	65a3      	str	r3, [r4, #88]	; 0x58
    20c4:	9009      	str	r0, [sp, #36]	; 0x24
    20c6:	466b      	mov	r3, sp
    20c8:	333b      	adds	r3, #59	; 0x3b
    20ca:	781b      	ldrb	r3, [r3, #0]
    20cc:	2b00      	cmp	r3, #0
    20ce:	d003      	beq.n	20d8 <STACK_SIZE+0xd8>
    20d0:	1c23      	adds	r3, r4, #0
    20d2:	222d      	movs	r2, #45	; 0x2d
    20d4:	3343      	adds	r3, #67	; 0x43
    20d6:	701a      	strb	r2, [r3, #0]
    20d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    20da:	1c28      	adds	r0, r5, #0
    20dc:	9100      	str	r1, [sp, #0]
    20de:	aa11      	add	r2, sp, #68	; 0x44
    20e0:	1c21      	adds	r1, r4, #0
    20e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    20e4:	f000 f958 	bl	2398 <_printf_common>
    20e8:	3001      	adds	r0, #1
    20ea:	d102      	bne.n	20f2 <STACK_SIZE+0xf2>
    20ec:	2001      	movs	r0, #1
    20ee:	4240      	negs	r0, r0
    20f0:	e14c      	b.n	238c <STACK_SIZE+0x38c>
    20f2:	6822      	ldr	r2, [r4, #0]
    20f4:	0553      	lsls	r3, r2, #21
    20f6:	d404      	bmi.n	2102 <STACK_SIZE+0x102>
    20f8:	1c28      	adds	r0, r5, #0
    20fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    20fc:	1c32      	adds	r2, r6, #0
    20fe:	6923      	ldr	r3, [r4, #16]
    2100:	e067      	b.n	21d2 <STACK_SIZE+0x1d2>
    2102:	2f65      	cmp	r7, #101	; 0x65
    2104:	d800      	bhi.n	2108 <STACK_SIZE+0x108>
    2106:	e0e0      	b.n	22ca <STACK_SIZE+0x2ca>
    2108:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    210a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    210c:	4b57      	ldr	r3, [pc, #348]	; (226c <STACK_SIZE+0x26c>)
    210e:	4a56      	ldr	r2, [pc, #344]	; (2268 <STACK_SIZE+0x268>)
    2110:	f002 f946 	bl	43a0 <__aeabi_dcmpeq>
    2114:	2800      	cmp	r0, #0
    2116:	d02b      	beq.n	2170 <STACK_SIZE+0x170>
    2118:	1c28      	adds	r0, r5, #0
    211a:	990a      	ldr	r1, [sp, #40]	; 0x28
    211c:	4a58      	ldr	r2, [pc, #352]	; (2280 <STACK_SIZE+0x280>)
    211e:	2301      	movs	r3, #1
    2120:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2122:	47b0      	blx	r6
    2124:	3001      	adds	r0, #1
    2126:	d0e1      	beq.n	20ec <STACK_SIZE+0xec>
    2128:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    212a:	9810      	ldr	r0, [sp, #64]	; 0x40
    212c:	4287      	cmp	r7, r0
    212e:	db07      	blt.n	2140 <STACK_SIZE+0x140>
    2130:	6821      	ldr	r1, [r4, #0]
    2132:	07c9      	lsls	r1, r1, #31
    2134:	d404      	bmi.n	2140 <STACK_SIZE+0x140>
    2136:	6827      	ldr	r7, [r4, #0]
    2138:	07bf      	lsls	r7, r7, #30
    213a:	d500      	bpl.n	213e <STACK_SIZE+0x13e>
    213c:	e10e      	b.n	235c <STACK_SIZE+0x35c>
    213e:	e113      	b.n	2368 <STACK_SIZE+0x368>
    2140:	1c28      	adds	r0, r5, #0
    2142:	990a      	ldr	r1, [sp, #40]	; 0x28
    2144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2148:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    214a:	47b0      	blx	r6
    214c:	3001      	adds	r0, #1
    214e:	d0cd      	beq.n	20ec <STACK_SIZE+0xec>
    2150:	2600      	movs	r6, #0
    2152:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2154:	3b01      	subs	r3, #1
    2156:	429e      	cmp	r6, r3
    2158:	daed      	bge.n	2136 <STACK_SIZE+0x136>
    215a:	1c22      	adds	r2, r4, #0
    215c:	1c28      	adds	r0, r5, #0
    215e:	990a      	ldr	r1, [sp, #40]	; 0x28
    2160:	321a      	adds	r2, #26
    2162:	2301      	movs	r3, #1
    2164:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2166:	47b8      	blx	r7
    2168:	3001      	adds	r0, #1
    216a:	d0bf      	beq.n	20ec <STACK_SIZE+0xec>
    216c:	3601      	adds	r6, #1
    216e:	e7f0      	b.n	2152 <STACK_SIZE+0x152>
    2170:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2172:	2800      	cmp	r0, #0
    2174:	dc30      	bgt.n	21d8 <STACK_SIZE+0x1d8>
    2176:	1c28      	adds	r0, r5, #0
    2178:	990a      	ldr	r1, [sp, #40]	; 0x28
    217a:	4a41      	ldr	r2, [pc, #260]	; (2280 <STACK_SIZE+0x280>)
    217c:	2301      	movs	r3, #1
    217e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2180:	47b8      	blx	r7
    2182:	3001      	adds	r0, #1
    2184:	d0b2      	beq.n	20ec <STACK_SIZE+0xec>
    2186:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2188:	2800      	cmp	r0, #0
    218a:	d105      	bne.n	2198 <STACK_SIZE+0x198>
    218c:	9910      	ldr	r1, [sp, #64]	; 0x40
    218e:	2900      	cmp	r1, #0
    2190:	d102      	bne.n	2198 <STACK_SIZE+0x198>
    2192:	6822      	ldr	r2, [r4, #0]
    2194:	07d2      	lsls	r2, r2, #31
    2196:	d5ce      	bpl.n	2136 <STACK_SIZE+0x136>
    2198:	1c28      	adds	r0, r5, #0
    219a:	990a      	ldr	r1, [sp, #40]	; 0x28
    219c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    219e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    21a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    21a2:	47b8      	blx	r7
    21a4:	3001      	adds	r0, #1
    21a6:	d0a1      	beq.n	20ec <STACK_SIZE+0xec>
    21a8:	2700      	movs	r7, #0
    21aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    21ac:	9709      	str	r7, [sp, #36]	; 0x24
    21ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
    21b0:	4243      	negs	r3, r0
    21b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    21b4:	1c28      	adds	r0, r5, #0
    21b6:	429f      	cmp	r7, r3
    21b8:	da09      	bge.n	21ce <STACK_SIZE+0x1ce>
    21ba:	1c22      	adds	r2, r4, #0
    21bc:	321a      	adds	r2, #26
    21be:	2301      	movs	r3, #1
    21c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    21c2:	47b8      	blx	r7
    21c4:	3001      	adds	r0, #1
    21c6:	d091      	beq.n	20ec <STACK_SIZE+0xec>
    21c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    21ca:	3701      	adds	r7, #1
    21cc:	e7ed      	b.n	21aa <STACK_SIZE+0x1aa>
    21ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    21d0:	1c32      	adds	r2, r6, #0
    21d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    21d4:	47b0      	blx	r6
    21d6:	e0b5      	b.n	2344 <STACK_SIZE+0x344>
    21d8:	9f10      	ldr	r7, [sp, #64]	; 0x40
    21da:	6da3      	ldr	r3, [r4, #88]	; 0x58
    21dc:	9708      	str	r7, [sp, #32]
    21de:	429f      	cmp	r7, r3
    21e0:	dd00      	ble.n	21e4 <STACK_SIZE+0x1e4>
    21e2:	9308      	str	r3, [sp, #32]
    21e4:	9f08      	ldr	r7, [sp, #32]
    21e6:	2f00      	cmp	r7, #0
    21e8:	dc01      	bgt.n	21ee <STACK_SIZE+0x1ee>
    21ea:	2700      	movs	r7, #0
    21ec:	e014      	b.n	2218 <STACK_SIZE+0x218>
    21ee:	1c28      	adds	r0, r5, #0
    21f0:	990a      	ldr	r1, [sp, #40]	; 0x28
    21f2:	1c32      	adds	r2, r6, #0
    21f4:	9b08      	ldr	r3, [sp, #32]
    21f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    21f8:	47b8      	blx	r7
    21fa:	3001      	adds	r0, #1
    21fc:	d1f5      	bne.n	21ea <STACK_SIZE+0x1ea>
    21fe:	e775      	b.n	20ec <STACK_SIZE+0xec>
    2200:	1c22      	adds	r2, r4, #0
    2202:	1c28      	adds	r0, r5, #0
    2204:	990a      	ldr	r1, [sp, #40]	; 0x28
    2206:	321a      	adds	r2, #26
    2208:	2301      	movs	r3, #1
    220a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    220c:	47b8      	blx	r7
    220e:	3001      	adds	r0, #1
    2210:	d100      	bne.n	2214 <STACK_SIZE+0x214>
    2212:	e76b      	b.n	20ec <STACK_SIZE+0xec>
    2214:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2216:	3701      	adds	r7, #1
    2218:	9709      	str	r7, [sp, #36]	; 0x24
    221a:	9f08      	ldr	r7, [sp, #32]
    221c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    221e:	43fa      	mvns	r2, r7
    2220:	17d2      	asrs	r2, r2, #31
    2222:	403a      	ands	r2, r7
    2224:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2226:	1a9a      	subs	r2, r3, r2
    2228:	4297      	cmp	r7, r2
    222a:	dbe9      	blt.n	2200 <STACK_SIZE+0x200>
    222c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    222e:	9910      	ldr	r1, [sp, #64]	; 0x40
    2230:	18f3      	adds	r3, r6, r3
    2232:	9309      	str	r3, [sp, #36]	; 0x24
    2234:	4288      	cmp	r0, r1
    2236:	db0e      	blt.n	2256 <STACK_SIZE+0x256>
    2238:	6822      	ldr	r2, [r4, #0]
    223a:	07d2      	lsls	r2, r2, #31
    223c:	d40b      	bmi.n	2256 <STACK_SIZE+0x256>
    223e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2240:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2242:	18f6      	adds	r6, r6, r3
    2244:	1bdb      	subs	r3, r3, r7
    2246:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2248:	1bf6      	subs	r6, r6, r7
    224a:	429e      	cmp	r6, r3
    224c:	dd00      	ble.n	2250 <STACK_SIZE+0x250>
    224e:	1c1e      	adds	r6, r3, #0
    2250:	2e00      	cmp	r6, #0
    2252:	dc17      	bgt.n	2284 <STACK_SIZE+0x284>
    2254:	e01f      	b.n	2296 <STACK_SIZE+0x296>
    2256:	1c28      	adds	r0, r5, #0
    2258:	990a      	ldr	r1, [sp, #40]	; 0x28
    225a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    225c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    225e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2260:	47b8      	blx	r7
    2262:	3001      	adds	r0, #1
    2264:	d1eb      	bne.n	223e <STACK_SIZE+0x23e>
    2266:	e741      	b.n	20ec <STACK_SIZE+0xec>
	...
    2270:	0000646d 	.word	0x0000646d
    2274:	00006471 	.word	0x00006471
    2278:	00006475 	.word	0x00006475
    227c:	00006479 	.word	0x00006479
    2280:	0000647d 	.word	0x0000647d
    2284:	1c28      	adds	r0, r5, #0
    2286:	990a      	ldr	r1, [sp, #40]	; 0x28
    2288:	9a09      	ldr	r2, [sp, #36]	; 0x24
    228a:	1c33      	adds	r3, r6, #0
    228c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    228e:	47b8      	blx	r7
    2290:	3001      	adds	r0, #1
    2292:	d100      	bne.n	2296 <STACK_SIZE+0x296>
    2294:	e72a      	b.n	20ec <STACK_SIZE+0xec>
    2296:	2700      	movs	r7, #0
    2298:	e00b      	b.n	22b2 <STACK_SIZE+0x2b2>
    229a:	1c22      	adds	r2, r4, #0
    229c:	1c28      	adds	r0, r5, #0
    229e:	990a      	ldr	r1, [sp, #40]	; 0x28
    22a0:	321a      	adds	r2, #26
    22a2:	2301      	movs	r3, #1
    22a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    22a6:	47b8      	blx	r7
    22a8:	3001      	adds	r0, #1
    22aa:	d100      	bne.n	22ae <STACK_SIZE+0x2ae>
    22ac:	e71e      	b.n	20ec <STACK_SIZE+0xec>
    22ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
    22b0:	3701      	adds	r7, #1
    22b2:	9709      	str	r7, [sp, #36]	; 0x24
    22b4:	9810      	ldr	r0, [sp, #64]	; 0x40
    22b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    22b8:	43f3      	mvns	r3, r6
    22ba:	17db      	asrs	r3, r3, #31
    22bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    22be:	1a42      	subs	r2, r0, r1
    22c0:	4033      	ands	r3, r6
    22c2:	1ad3      	subs	r3, r2, r3
    22c4:	429f      	cmp	r7, r3
    22c6:	dbe8      	blt.n	229a <STACK_SIZE+0x29a>
    22c8:	e735      	b.n	2136 <STACK_SIZE+0x136>
    22ca:	9810      	ldr	r0, [sp, #64]	; 0x40
    22cc:	2801      	cmp	r0, #1
    22ce:	dc02      	bgt.n	22d6 <STACK_SIZE+0x2d6>
    22d0:	2301      	movs	r3, #1
    22d2:	421a      	tst	r2, r3
    22d4:	d03a      	beq.n	234c <STACK_SIZE+0x34c>
    22d6:	1c28      	adds	r0, r5, #0
    22d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    22da:	1c32      	adds	r2, r6, #0
    22dc:	2301      	movs	r3, #1
    22de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    22e0:	47b8      	blx	r7
    22e2:	3001      	adds	r0, #1
    22e4:	d100      	bne.n	22e8 <STACK_SIZE+0x2e8>
    22e6:	e701      	b.n	20ec <STACK_SIZE+0xec>
    22e8:	1c28      	adds	r0, r5, #0
    22ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    22ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    22ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    22f0:	47b8      	blx	r7
    22f2:	3001      	adds	r0, #1
    22f4:	d100      	bne.n	22f8 <STACK_SIZE+0x2f8>
    22f6:	e6f9      	b.n	20ec <STACK_SIZE+0xec>
    22f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    22fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    22fc:	4b25      	ldr	r3, [pc, #148]	; (2394 <STACK_SIZE+0x394>)
    22fe:	4a24      	ldr	r2, [pc, #144]	; (2390 <STACK_SIZE+0x390>)
    2300:	f002 f84e 	bl	43a0 <__aeabi_dcmpeq>
    2304:	2800      	cmp	r0, #0
    2306:	d001      	beq.n	230c <STACK_SIZE+0x30c>
    2308:	2600      	movs	r6, #0
    230a:	e010      	b.n	232e <STACK_SIZE+0x32e>
    230c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    230e:	1c72      	adds	r2, r6, #1
    2310:	3b01      	subs	r3, #1
    2312:	1c28      	adds	r0, r5, #0
    2314:	990a      	ldr	r1, [sp, #40]	; 0x28
    2316:	e01c      	b.n	2352 <STACK_SIZE+0x352>
    2318:	1c22      	adds	r2, r4, #0
    231a:	1c28      	adds	r0, r5, #0
    231c:	990a      	ldr	r1, [sp, #40]	; 0x28
    231e:	321a      	adds	r2, #26
    2320:	2301      	movs	r3, #1
    2322:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2324:	47b8      	blx	r7
    2326:	3001      	adds	r0, #1
    2328:	d100      	bne.n	232c <STACK_SIZE+0x32c>
    232a:	e6df      	b.n	20ec <STACK_SIZE+0xec>
    232c:	3601      	adds	r6, #1
    232e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2330:	3b01      	subs	r3, #1
    2332:	429e      	cmp	r6, r3
    2334:	dbf0      	blt.n	2318 <STACK_SIZE+0x318>
    2336:	1c22      	adds	r2, r4, #0
    2338:	1c28      	adds	r0, r5, #0
    233a:	990a      	ldr	r1, [sp, #40]	; 0x28
    233c:	3250      	adds	r2, #80	; 0x50
    233e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2340:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2342:	47b8      	blx	r7
    2344:	3001      	adds	r0, #1
    2346:	d000      	beq.n	234a <STACK_SIZE+0x34a>
    2348:	e6f5      	b.n	2136 <STACK_SIZE+0x136>
    234a:	e6cf      	b.n	20ec <STACK_SIZE+0xec>
    234c:	990a      	ldr	r1, [sp, #40]	; 0x28
    234e:	1c28      	adds	r0, r5, #0
    2350:	1c32      	adds	r2, r6, #0
    2352:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2354:	47b0      	blx	r6
    2356:	3001      	adds	r0, #1
    2358:	d1ed      	bne.n	2336 <STACK_SIZE+0x336>
    235a:	e6c7      	b.n	20ec <STACK_SIZE+0xec>
    235c:	2600      	movs	r6, #0
    235e:	68e0      	ldr	r0, [r4, #12]
    2360:	9911      	ldr	r1, [sp, #68]	; 0x44
    2362:	1a43      	subs	r3, r0, r1
    2364:	429e      	cmp	r6, r3
    2366:	db05      	blt.n	2374 <STACK_SIZE+0x374>
    2368:	9b11      	ldr	r3, [sp, #68]	; 0x44
    236a:	68e0      	ldr	r0, [r4, #12]
    236c:	4298      	cmp	r0, r3
    236e:	da0d      	bge.n	238c <STACK_SIZE+0x38c>
    2370:	1c18      	adds	r0, r3, #0
    2372:	e00b      	b.n	238c <STACK_SIZE+0x38c>
    2374:	1c22      	adds	r2, r4, #0
    2376:	1c28      	adds	r0, r5, #0
    2378:	990a      	ldr	r1, [sp, #40]	; 0x28
    237a:	3219      	adds	r2, #25
    237c:	2301      	movs	r3, #1
    237e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2380:	47b8      	blx	r7
    2382:	3001      	adds	r0, #1
    2384:	d100      	bne.n	2388 <STACK_SIZE+0x388>
    2386:	e6b1      	b.n	20ec <STACK_SIZE+0xec>
    2388:	3601      	adds	r6, #1
    238a:	e7e8      	b.n	235e <STACK_SIZE+0x35e>
    238c:	b013      	add	sp, #76	; 0x4c
    238e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00002398 <_printf_common>:
    2398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    239a:	1c15      	adds	r5, r2, #0
    239c:	9301      	str	r3, [sp, #4]
    239e:	690a      	ldr	r2, [r1, #16]
    23a0:	688b      	ldr	r3, [r1, #8]
    23a2:	1c06      	adds	r6, r0, #0
    23a4:	1c0c      	adds	r4, r1, #0
    23a6:	4293      	cmp	r3, r2
    23a8:	da00      	bge.n	23ac <_printf_common+0x14>
    23aa:	1c13      	adds	r3, r2, #0
    23ac:	1c22      	adds	r2, r4, #0
    23ae:	602b      	str	r3, [r5, #0]
    23b0:	3243      	adds	r2, #67	; 0x43
    23b2:	7812      	ldrb	r2, [r2, #0]
    23b4:	2a00      	cmp	r2, #0
    23b6:	d001      	beq.n	23bc <_printf_common+0x24>
    23b8:	3301      	adds	r3, #1
    23ba:	602b      	str	r3, [r5, #0]
    23bc:	6820      	ldr	r0, [r4, #0]
    23be:	0680      	lsls	r0, r0, #26
    23c0:	d502      	bpl.n	23c8 <_printf_common+0x30>
    23c2:	682b      	ldr	r3, [r5, #0]
    23c4:	3302      	adds	r3, #2
    23c6:	602b      	str	r3, [r5, #0]
    23c8:	6821      	ldr	r1, [r4, #0]
    23ca:	2706      	movs	r7, #6
    23cc:	400f      	ands	r7, r1
    23ce:	d01f      	beq.n	2410 <_printf_common+0x78>
    23d0:	1c23      	adds	r3, r4, #0
    23d2:	3343      	adds	r3, #67	; 0x43
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	1e5a      	subs	r2, r3, #1
    23d8:	4193      	sbcs	r3, r2
    23da:	6822      	ldr	r2, [r4, #0]
    23dc:	0692      	lsls	r2, r2, #26
    23de:	d51f      	bpl.n	2420 <_printf_common+0x88>
    23e0:	18e1      	adds	r1, r4, r3
    23e2:	3140      	adds	r1, #64	; 0x40
    23e4:	2030      	movs	r0, #48	; 0x30
    23e6:	70c8      	strb	r0, [r1, #3]
    23e8:	1c21      	adds	r1, r4, #0
    23ea:	1c5a      	adds	r2, r3, #1
    23ec:	3145      	adds	r1, #69	; 0x45
    23ee:	7809      	ldrb	r1, [r1, #0]
    23f0:	18a2      	adds	r2, r4, r2
    23f2:	3240      	adds	r2, #64	; 0x40
    23f4:	3302      	adds	r3, #2
    23f6:	70d1      	strb	r1, [r2, #3]
    23f8:	e012      	b.n	2420 <_printf_common+0x88>
    23fa:	1c22      	adds	r2, r4, #0
    23fc:	1c30      	adds	r0, r6, #0
    23fe:	9901      	ldr	r1, [sp, #4]
    2400:	3219      	adds	r2, #25
    2402:	2301      	movs	r3, #1
    2404:	9f08      	ldr	r7, [sp, #32]
    2406:	47b8      	blx	r7
    2408:	3001      	adds	r0, #1
    240a:	d011      	beq.n	2430 <_printf_common+0x98>
    240c:	9f00      	ldr	r7, [sp, #0]
    240e:	3701      	adds	r7, #1
    2410:	9700      	str	r7, [sp, #0]
    2412:	68e0      	ldr	r0, [r4, #12]
    2414:	6829      	ldr	r1, [r5, #0]
    2416:	9f00      	ldr	r7, [sp, #0]
    2418:	1a43      	subs	r3, r0, r1
    241a:	429f      	cmp	r7, r3
    241c:	dbed      	blt.n	23fa <_printf_common+0x62>
    241e:	e7d7      	b.n	23d0 <_printf_common+0x38>
    2420:	1c22      	adds	r2, r4, #0
    2422:	1c30      	adds	r0, r6, #0
    2424:	9901      	ldr	r1, [sp, #4]
    2426:	3243      	adds	r2, #67	; 0x43
    2428:	9f08      	ldr	r7, [sp, #32]
    242a:	47b8      	blx	r7
    242c:	3001      	adds	r0, #1
    242e:	d102      	bne.n	2436 <_printf_common+0x9e>
    2430:	2001      	movs	r0, #1
    2432:	4240      	negs	r0, r0
    2434:	e023      	b.n	247e <_printf_common+0xe6>
    2436:	6820      	ldr	r0, [r4, #0]
    2438:	2106      	movs	r1, #6
    243a:	682b      	ldr	r3, [r5, #0]
    243c:	68e2      	ldr	r2, [r4, #12]
    243e:	4001      	ands	r1, r0
    2440:	2500      	movs	r5, #0
    2442:	2904      	cmp	r1, #4
    2444:	d103      	bne.n	244e <_printf_common+0xb6>
    2446:	1ad5      	subs	r5, r2, r3
    2448:	43eb      	mvns	r3, r5
    244a:	17db      	asrs	r3, r3, #31
    244c:	401d      	ands	r5, r3
    244e:	68a2      	ldr	r2, [r4, #8]
    2450:	6923      	ldr	r3, [r4, #16]
    2452:	429a      	cmp	r2, r3
    2454:	dd01      	ble.n	245a <_printf_common+0xc2>
    2456:	1ad3      	subs	r3, r2, r3
    2458:	18ed      	adds	r5, r5, r3
    245a:	2700      	movs	r7, #0
    245c:	9700      	str	r7, [sp, #0]
    245e:	9f00      	ldr	r7, [sp, #0]
    2460:	42af      	cmp	r7, r5
    2462:	da0b      	bge.n	247c <_printf_common+0xe4>
    2464:	1c22      	adds	r2, r4, #0
    2466:	1c30      	adds	r0, r6, #0
    2468:	9901      	ldr	r1, [sp, #4]
    246a:	321a      	adds	r2, #26
    246c:	2301      	movs	r3, #1
    246e:	9f08      	ldr	r7, [sp, #32]
    2470:	47b8      	blx	r7
    2472:	3001      	adds	r0, #1
    2474:	d0dc      	beq.n	2430 <_printf_common+0x98>
    2476:	9f00      	ldr	r7, [sp, #0]
    2478:	3701      	adds	r7, #1
    247a:	e7ef      	b.n	245c <_printf_common+0xc4>
    247c:	2000      	movs	r0, #0
    247e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002480 <_printf_i>:
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	1c0d      	adds	r5, r1, #0
    2484:	b08b      	sub	sp, #44	; 0x2c
    2486:	3543      	adds	r5, #67	; 0x43
    2488:	9206      	str	r2, [sp, #24]
    248a:	9005      	str	r0, [sp, #20]
    248c:	9307      	str	r3, [sp, #28]
    248e:	9504      	str	r5, [sp, #16]
    2490:	7e0b      	ldrb	r3, [r1, #24]
    2492:	1c0c      	adds	r4, r1, #0
    2494:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2496:	2b6e      	cmp	r3, #110	; 0x6e
    2498:	d100      	bne.n	249c <_printf_i+0x1c>
    249a:	e0a7      	b.n	25ec <_printf_i+0x16c>
    249c:	d811      	bhi.n	24c2 <_printf_i+0x42>
    249e:	2b63      	cmp	r3, #99	; 0x63
    24a0:	d022      	beq.n	24e8 <_printf_i+0x68>
    24a2:	d809      	bhi.n	24b8 <_printf_i+0x38>
    24a4:	2b00      	cmp	r3, #0
    24a6:	d100      	bne.n	24aa <_printf_i+0x2a>
    24a8:	e0b0      	b.n	260c <_printf_i+0x18c>
    24aa:	2b58      	cmp	r3, #88	; 0x58
    24ac:	d000      	beq.n	24b0 <_printf_i+0x30>
    24ae:	e0c0      	b.n	2632 <_printf_i+0x1b2>
    24b0:	3145      	adds	r1, #69	; 0x45
    24b2:	700b      	strb	r3, [r1, #0]
    24b4:	4d7b      	ldr	r5, [pc, #492]	; (26a4 <_printf_i+0x224>)
    24b6:	e04e      	b.n	2556 <_printf_i+0xd6>
    24b8:	2b64      	cmp	r3, #100	; 0x64
    24ba:	d01c      	beq.n	24f6 <_printf_i+0x76>
    24bc:	2b69      	cmp	r3, #105	; 0x69
    24be:	d01a      	beq.n	24f6 <_printf_i+0x76>
    24c0:	e0b7      	b.n	2632 <_printf_i+0x1b2>
    24c2:	2b73      	cmp	r3, #115	; 0x73
    24c4:	d100      	bne.n	24c8 <_printf_i+0x48>
    24c6:	e0a5      	b.n	2614 <_printf_i+0x194>
    24c8:	d809      	bhi.n	24de <_printf_i+0x5e>
    24ca:	2b6f      	cmp	r3, #111	; 0x6f
    24cc:	d029      	beq.n	2522 <_printf_i+0xa2>
    24ce:	2b70      	cmp	r3, #112	; 0x70
    24d0:	d000      	beq.n	24d4 <_printf_i+0x54>
    24d2:	e0ae      	b.n	2632 <_printf_i+0x1b2>
    24d4:	680e      	ldr	r6, [r1, #0]
    24d6:	2320      	movs	r3, #32
    24d8:	4333      	orrs	r3, r6
    24da:	600b      	str	r3, [r1, #0]
    24dc:	e036      	b.n	254c <_printf_i+0xcc>
    24de:	2b75      	cmp	r3, #117	; 0x75
    24e0:	d01f      	beq.n	2522 <_printf_i+0xa2>
    24e2:	2b78      	cmp	r3, #120	; 0x78
    24e4:	d032      	beq.n	254c <_printf_i+0xcc>
    24e6:	e0a4      	b.n	2632 <_printf_i+0x1b2>
    24e8:	6813      	ldr	r3, [r2, #0]
    24ea:	1c0d      	adds	r5, r1, #0
    24ec:	1d19      	adds	r1, r3, #4
    24ee:	3542      	adds	r5, #66	; 0x42
    24f0:	6011      	str	r1, [r2, #0]
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	e09f      	b.n	2636 <_printf_i+0x1b6>
    24f6:	6821      	ldr	r1, [r4, #0]
    24f8:	6813      	ldr	r3, [r2, #0]
    24fa:	060e      	lsls	r6, r1, #24
    24fc:	d503      	bpl.n	2506 <_printf_i+0x86>
    24fe:	1d19      	adds	r1, r3, #4
    2500:	6011      	str	r1, [r2, #0]
    2502:	681e      	ldr	r6, [r3, #0]
    2504:	e005      	b.n	2512 <_printf_i+0x92>
    2506:	0648      	lsls	r0, r1, #25
    2508:	d5f9      	bpl.n	24fe <_printf_i+0x7e>
    250a:	1d19      	adds	r1, r3, #4
    250c:	6011      	str	r1, [r2, #0]
    250e:	2100      	movs	r1, #0
    2510:	5e5e      	ldrsh	r6, [r3, r1]
    2512:	4b64      	ldr	r3, [pc, #400]	; (26a4 <_printf_i+0x224>)
    2514:	2e00      	cmp	r6, #0
    2516:	da3b      	bge.n	2590 <_printf_i+0x110>
    2518:	9d04      	ldr	r5, [sp, #16]
    251a:	222d      	movs	r2, #45	; 0x2d
    251c:	4276      	negs	r6, r6
    251e:	702a      	strb	r2, [r5, #0]
    2520:	e036      	b.n	2590 <_printf_i+0x110>
    2522:	6821      	ldr	r1, [r4, #0]
    2524:	6813      	ldr	r3, [r2, #0]
    2526:	060e      	lsls	r6, r1, #24
    2528:	d503      	bpl.n	2532 <_printf_i+0xb2>
    252a:	1d19      	adds	r1, r3, #4
    252c:	6011      	str	r1, [r2, #0]
    252e:	681e      	ldr	r6, [r3, #0]
    2530:	e004      	b.n	253c <_printf_i+0xbc>
    2532:	0648      	lsls	r0, r1, #25
    2534:	d5f9      	bpl.n	252a <_printf_i+0xaa>
    2536:	1d19      	adds	r1, r3, #4
    2538:	881e      	ldrh	r6, [r3, #0]
    253a:	6011      	str	r1, [r2, #0]
    253c:	4b59      	ldr	r3, [pc, #356]	; (26a4 <_printf_i+0x224>)
    253e:	7e22      	ldrb	r2, [r4, #24]
    2540:	9303      	str	r3, [sp, #12]
    2542:	2708      	movs	r7, #8
    2544:	2a6f      	cmp	r2, #111	; 0x6f
    2546:	d01e      	beq.n	2586 <_printf_i+0x106>
    2548:	270a      	movs	r7, #10
    254a:	e01c      	b.n	2586 <_printf_i+0x106>
    254c:	1c23      	adds	r3, r4, #0
    254e:	2178      	movs	r1, #120	; 0x78
    2550:	3345      	adds	r3, #69	; 0x45
    2552:	4d55      	ldr	r5, [pc, #340]	; (26a8 <_printf_i+0x228>)
    2554:	7019      	strb	r1, [r3, #0]
    2556:	6811      	ldr	r1, [r2, #0]
    2558:	6823      	ldr	r3, [r4, #0]
    255a:	1d08      	adds	r0, r1, #4
    255c:	9503      	str	r5, [sp, #12]
    255e:	6010      	str	r0, [r2, #0]
    2560:	061e      	lsls	r6, r3, #24
    2562:	d501      	bpl.n	2568 <_printf_i+0xe8>
    2564:	680e      	ldr	r6, [r1, #0]
    2566:	e002      	b.n	256e <_printf_i+0xee>
    2568:	0658      	lsls	r0, r3, #25
    256a:	d5fb      	bpl.n	2564 <_printf_i+0xe4>
    256c:	880e      	ldrh	r6, [r1, #0]
    256e:	07d9      	lsls	r1, r3, #31
    2570:	d502      	bpl.n	2578 <_printf_i+0xf8>
    2572:	2220      	movs	r2, #32
    2574:	4313      	orrs	r3, r2
    2576:	6023      	str	r3, [r4, #0]
    2578:	2710      	movs	r7, #16
    257a:	2e00      	cmp	r6, #0
    257c:	d103      	bne.n	2586 <_printf_i+0x106>
    257e:	6822      	ldr	r2, [r4, #0]
    2580:	2320      	movs	r3, #32
    2582:	439a      	bics	r2, r3
    2584:	6022      	str	r2, [r4, #0]
    2586:	1c23      	adds	r3, r4, #0
    2588:	2200      	movs	r2, #0
    258a:	3343      	adds	r3, #67	; 0x43
    258c:	701a      	strb	r2, [r3, #0]
    258e:	e001      	b.n	2594 <_printf_i+0x114>
    2590:	9303      	str	r3, [sp, #12]
    2592:	270a      	movs	r7, #10
    2594:	6863      	ldr	r3, [r4, #4]
    2596:	60a3      	str	r3, [r4, #8]
    2598:	2b00      	cmp	r3, #0
    259a:	db03      	blt.n	25a4 <_printf_i+0x124>
    259c:	6825      	ldr	r5, [r4, #0]
    259e:	2204      	movs	r2, #4
    25a0:	4395      	bics	r5, r2
    25a2:	6025      	str	r5, [r4, #0]
    25a4:	2e00      	cmp	r6, #0
    25a6:	d102      	bne.n	25ae <_printf_i+0x12e>
    25a8:	9d04      	ldr	r5, [sp, #16]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d00e      	beq.n	25cc <_printf_i+0x14c>
    25ae:	9d04      	ldr	r5, [sp, #16]
    25b0:	1c30      	adds	r0, r6, #0
    25b2:	1c39      	adds	r1, r7, #0
    25b4:	f001 fe78 	bl	42a8 <__aeabi_uidivmod>
    25b8:	9803      	ldr	r0, [sp, #12]
    25ba:	3d01      	subs	r5, #1
    25bc:	5c43      	ldrb	r3, [r0, r1]
    25be:	1c30      	adds	r0, r6, #0
    25c0:	702b      	strb	r3, [r5, #0]
    25c2:	1c39      	adds	r1, r7, #0
    25c4:	f001 fe2c 	bl	4220 <__aeabi_uidiv>
    25c8:	1e06      	subs	r6, r0, #0
    25ca:	d1f1      	bne.n	25b0 <_printf_i+0x130>
    25cc:	2f08      	cmp	r7, #8
    25ce:	d109      	bne.n	25e4 <_printf_i+0x164>
    25d0:	6821      	ldr	r1, [r4, #0]
    25d2:	07c9      	lsls	r1, r1, #31
    25d4:	d506      	bpl.n	25e4 <_printf_i+0x164>
    25d6:	6862      	ldr	r2, [r4, #4]
    25d8:	6923      	ldr	r3, [r4, #16]
    25da:	429a      	cmp	r2, r3
    25dc:	dc02      	bgt.n	25e4 <_printf_i+0x164>
    25de:	3d01      	subs	r5, #1
    25e0:	2330      	movs	r3, #48	; 0x30
    25e2:	702b      	strb	r3, [r5, #0]
    25e4:	9e04      	ldr	r6, [sp, #16]
    25e6:	1b73      	subs	r3, r6, r5
    25e8:	6123      	str	r3, [r4, #16]
    25ea:	e02a      	b.n	2642 <_printf_i+0x1c2>
    25ec:	6808      	ldr	r0, [r1, #0]
    25ee:	6813      	ldr	r3, [r2, #0]
    25f0:	6949      	ldr	r1, [r1, #20]
    25f2:	0605      	lsls	r5, r0, #24
    25f4:	d504      	bpl.n	2600 <_printf_i+0x180>
    25f6:	1d18      	adds	r0, r3, #4
    25f8:	6010      	str	r0, [r2, #0]
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	6019      	str	r1, [r3, #0]
    25fe:	e005      	b.n	260c <_printf_i+0x18c>
    2600:	0646      	lsls	r6, r0, #25
    2602:	d5f8      	bpl.n	25f6 <_printf_i+0x176>
    2604:	1d18      	adds	r0, r3, #4
    2606:	6010      	str	r0, [r2, #0]
    2608:	681b      	ldr	r3, [r3, #0]
    260a:	8019      	strh	r1, [r3, #0]
    260c:	2300      	movs	r3, #0
    260e:	6123      	str	r3, [r4, #16]
    2610:	9d04      	ldr	r5, [sp, #16]
    2612:	e016      	b.n	2642 <_printf_i+0x1c2>
    2614:	6813      	ldr	r3, [r2, #0]
    2616:	1d19      	adds	r1, r3, #4
    2618:	6011      	str	r1, [r2, #0]
    261a:	681d      	ldr	r5, [r3, #0]
    261c:	1c28      	adds	r0, r5, #0
    261e:	f001 fd7b 	bl	4118 <strlen>
    2622:	6863      	ldr	r3, [r4, #4]
    2624:	6120      	str	r0, [r4, #16]
    2626:	4298      	cmp	r0, r3
    2628:	d900      	bls.n	262c <_printf_i+0x1ac>
    262a:	6123      	str	r3, [r4, #16]
    262c:	6920      	ldr	r0, [r4, #16]
    262e:	6060      	str	r0, [r4, #4]
    2630:	e004      	b.n	263c <_printf_i+0x1bc>
    2632:	1c25      	adds	r5, r4, #0
    2634:	3542      	adds	r5, #66	; 0x42
    2636:	702b      	strb	r3, [r5, #0]
    2638:	2301      	movs	r3, #1
    263a:	6123      	str	r3, [r4, #16]
    263c:	9e04      	ldr	r6, [sp, #16]
    263e:	2300      	movs	r3, #0
    2640:	7033      	strb	r3, [r6, #0]
    2642:	9e07      	ldr	r6, [sp, #28]
    2644:	9805      	ldr	r0, [sp, #20]
    2646:	9600      	str	r6, [sp, #0]
    2648:	1c21      	adds	r1, r4, #0
    264a:	aa09      	add	r2, sp, #36	; 0x24
    264c:	9b06      	ldr	r3, [sp, #24]
    264e:	f7ff fea3 	bl	2398 <_printf_common>
    2652:	3001      	adds	r0, #1
    2654:	d102      	bne.n	265c <_printf_i+0x1dc>
    2656:	2001      	movs	r0, #1
    2658:	4240      	negs	r0, r0
    265a:	e021      	b.n	26a0 <_printf_i+0x220>
    265c:	1c2a      	adds	r2, r5, #0
    265e:	9805      	ldr	r0, [sp, #20]
    2660:	9906      	ldr	r1, [sp, #24]
    2662:	6923      	ldr	r3, [r4, #16]
    2664:	9d07      	ldr	r5, [sp, #28]
    2666:	47a8      	blx	r5
    2668:	3001      	adds	r0, #1
    266a:	d0f4      	beq.n	2656 <_printf_i+0x1d6>
    266c:	6826      	ldr	r6, [r4, #0]
    266e:	07b6      	lsls	r6, r6, #30
    2670:	d405      	bmi.n	267e <_printf_i+0x1fe>
    2672:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2674:	68e0      	ldr	r0, [r4, #12]
    2676:	4298      	cmp	r0, r3
    2678:	da12      	bge.n	26a0 <_printf_i+0x220>
    267a:	1c18      	adds	r0, r3, #0
    267c:	e010      	b.n	26a0 <_printf_i+0x220>
    267e:	2500      	movs	r5, #0
    2680:	68e0      	ldr	r0, [r4, #12]
    2682:	9909      	ldr	r1, [sp, #36]	; 0x24
    2684:	1a43      	subs	r3, r0, r1
    2686:	429d      	cmp	r5, r3
    2688:	daf3      	bge.n	2672 <_printf_i+0x1f2>
    268a:	1c22      	adds	r2, r4, #0
    268c:	9805      	ldr	r0, [sp, #20]
    268e:	9906      	ldr	r1, [sp, #24]
    2690:	3219      	adds	r2, #25
    2692:	2301      	movs	r3, #1
    2694:	9e07      	ldr	r6, [sp, #28]
    2696:	47b0      	blx	r6
    2698:	3001      	adds	r0, #1
    269a:	d0dc      	beq.n	2656 <_printf_i+0x1d6>
    269c:	3501      	adds	r5, #1
    269e:	e7ef      	b.n	2680 <_printf_i+0x200>
    26a0:	b00b      	add	sp, #44	; 0x2c
    26a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26a4:	0000647f 	.word	0x0000647f
    26a8:	00006490 	.word	0x00006490

000026ac <__swbuf_r>:
    26ac:	b570      	push	{r4, r5, r6, lr}
    26ae:	1c05      	adds	r5, r0, #0
    26b0:	1c0e      	adds	r6, r1, #0
    26b2:	1c14      	adds	r4, r2, #0
    26b4:	2800      	cmp	r0, #0
    26b6:	d004      	beq.n	26c2 <__swbuf_r+0x16>
    26b8:	6982      	ldr	r2, [r0, #24]
    26ba:	2a00      	cmp	r2, #0
    26bc:	d101      	bne.n	26c2 <__swbuf_r+0x16>
    26be:	f001 f831 	bl	3724 <__sinit>
    26c2:	4b23      	ldr	r3, [pc, #140]	; (2750 <__swbuf_r+0xa4>)
    26c4:	429c      	cmp	r4, r3
    26c6:	d101      	bne.n	26cc <__swbuf_r+0x20>
    26c8:	686c      	ldr	r4, [r5, #4]
    26ca:	e008      	b.n	26de <__swbuf_r+0x32>
    26cc:	4b21      	ldr	r3, [pc, #132]	; (2754 <__swbuf_r+0xa8>)
    26ce:	429c      	cmp	r4, r3
    26d0:	d101      	bne.n	26d6 <__swbuf_r+0x2a>
    26d2:	68ac      	ldr	r4, [r5, #8]
    26d4:	e003      	b.n	26de <__swbuf_r+0x32>
    26d6:	4b20      	ldr	r3, [pc, #128]	; (2758 <__swbuf_r+0xac>)
    26d8:	429c      	cmp	r4, r3
    26da:	d100      	bne.n	26de <__swbuf_r+0x32>
    26dc:	68ec      	ldr	r4, [r5, #12]
    26de:	69a3      	ldr	r3, [r4, #24]
    26e0:	60a3      	str	r3, [r4, #8]
    26e2:	89a3      	ldrh	r3, [r4, #12]
    26e4:	071a      	lsls	r2, r3, #28
    26e6:	d50a      	bpl.n	26fe <__swbuf_r+0x52>
    26e8:	6923      	ldr	r3, [r4, #16]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d007      	beq.n	26fe <__swbuf_r+0x52>
    26ee:	6822      	ldr	r2, [r4, #0]
    26f0:	6923      	ldr	r3, [r4, #16]
    26f2:	b2f6      	uxtb	r6, r6
    26f4:	1ad0      	subs	r0, r2, r3
    26f6:	6962      	ldr	r2, [r4, #20]
    26f8:	4290      	cmp	r0, r2
    26fa:	db0f      	blt.n	271c <__swbuf_r+0x70>
    26fc:	e008      	b.n	2710 <__swbuf_r+0x64>
    26fe:	1c28      	adds	r0, r5, #0
    2700:	1c21      	adds	r1, r4, #0
    2702:	f000 f82b 	bl	275c <__swsetup_r>
    2706:	2800      	cmp	r0, #0
    2708:	d0f1      	beq.n	26ee <__swbuf_r+0x42>
    270a:	2001      	movs	r0, #1
    270c:	4240      	negs	r0, r0
    270e:	e01d      	b.n	274c <__swbuf_r+0xa0>
    2710:	1c28      	adds	r0, r5, #0
    2712:	1c21      	adds	r1, r4, #0
    2714:	f000 ff86 	bl	3624 <_fflush_r>
    2718:	2800      	cmp	r0, #0
    271a:	d1f6      	bne.n	270a <__swbuf_r+0x5e>
    271c:	68a3      	ldr	r3, [r4, #8]
    271e:	3001      	adds	r0, #1
    2720:	3b01      	subs	r3, #1
    2722:	60a3      	str	r3, [r4, #8]
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	1c5a      	adds	r2, r3, #1
    2728:	6022      	str	r2, [r4, #0]
    272a:	701e      	strb	r6, [r3, #0]
    272c:	6963      	ldr	r3, [r4, #20]
    272e:	4298      	cmp	r0, r3
    2730:	d005      	beq.n	273e <__swbuf_r+0x92>
    2732:	89a3      	ldrh	r3, [r4, #12]
    2734:	1c30      	adds	r0, r6, #0
    2736:	07da      	lsls	r2, r3, #31
    2738:	d508      	bpl.n	274c <__swbuf_r+0xa0>
    273a:	2e0a      	cmp	r6, #10
    273c:	d106      	bne.n	274c <__swbuf_r+0xa0>
    273e:	1c28      	adds	r0, r5, #0
    2740:	1c21      	adds	r1, r4, #0
    2742:	f000 ff6f 	bl	3624 <_fflush_r>
    2746:	2800      	cmp	r0, #0
    2748:	d1df      	bne.n	270a <__swbuf_r+0x5e>
    274a:	1c30      	adds	r0, r6, #0
    274c:	bd70      	pop	{r4, r5, r6, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	000064b0 	.word	0x000064b0
    2754:	000064d0 	.word	0x000064d0
    2758:	000064f0 	.word	0x000064f0

0000275c <__swsetup_r>:
    275c:	4b34      	ldr	r3, [pc, #208]	; (2830 <__swsetup_r+0xd4>)
    275e:	b570      	push	{r4, r5, r6, lr}
    2760:	681d      	ldr	r5, [r3, #0]
    2762:	1c06      	adds	r6, r0, #0
    2764:	1c0c      	adds	r4, r1, #0
    2766:	2d00      	cmp	r5, #0
    2768:	d005      	beq.n	2776 <__swsetup_r+0x1a>
    276a:	69a9      	ldr	r1, [r5, #24]
    276c:	2900      	cmp	r1, #0
    276e:	d102      	bne.n	2776 <__swsetup_r+0x1a>
    2770:	1c28      	adds	r0, r5, #0
    2772:	f000 ffd7 	bl	3724 <__sinit>
    2776:	4b2f      	ldr	r3, [pc, #188]	; (2834 <__swsetup_r+0xd8>)
    2778:	429c      	cmp	r4, r3
    277a:	d101      	bne.n	2780 <__swsetup_r+0x24>
    277c:	686c      	ldr	r4, [r5, #4]
    277e:	e008      	b.n	2792 <__swsetup_r+0x36>
    2780:	4b2d      	ldr	r3, [pc, #180]	; (2838 <__swsetup_r+0xdc>)
    2782:	429c      	cmp	r4, r3
    2784:	d101      	bne.n	278a <__swsetup_r+0x2e>
    2786:	68ac      	ldr	r4, [r5, #8]
    2788:	e003      	b.n	2792 <__swsetup_r+0x36>
    278a:	4b2c      	ldr	r3, [pc, #176]	; (283c <__swsetup_r+0xe0>)
    278c:	429c      	cmp	r4, r3
    278e:	d100      	bne.n	2792 <__swsetup_r+0x36>
    2790:	68ec      	ldr	r4, [r5, #12]
    2792:	89a2      	ldrh	r2, [r4, #12]
    2794:	b293      	uxth	r3, r2
    2796:	0719      	lsls	r1, r3, #28
    2798:	d421      	bmi.n	27de <__swsetup_r+0x82>
    279a:	06d9      	lsls	r1, r3, #27
    279c:	d405      	bmi.n	27aa <__swsetup_r+0x4e>
    279e:	2309      	movs	r3, #9
    27a0:	6033      	str	r3, [r6, #0]
    27a2:	2340      	movs	r3, #64	; 0x40
    27a4:	431a      	orrs	r2, r3
    27a6:	81a2      	strh	r2, [r4, #12]
    27a8:	e03f      	b.n	282a <__swsetup_r+0xce>
    27aa:	075a      	lsls	r2, r3, #29
    27ac:	d513      	bpl.n	27d6 <__swsetup_r+0x7a>
    27ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    27b0:	2900      	cmp	r1, #0
    27b2:	d008      	beq.n	27c6 <__swsetup_r+0x6a>
    27b4:	1c23      	adds	r3, r4, #0
    27b6:	3344      	adds	r3, #68	; 0x44
    27b8:	4299      	cmp	r1, r3
    27ba:	d002      	beq.n	27c2 <__swsetup_r+0x66>
    27bc:	1c30      	adds	r0, r6, #0
    27be:	f001 fb87 	bl	3ed0 <_free_r>
    27c2:	2300      	movs	r3, #0
    27c4:	6363      	str	r3, [r4, #52]	; 0x34
    27c6:	89a3      	ldrh	r3, [r4, #12]
    27c8:	2224      	movs	r2, #36	; 0x24
    27ca:	4393      	bics	r3, r2
    27cc:	81a3      	strh	r3, [r4, #12]
    27ce:	2300      	movs	r3, #0
    27d0:	6063      	str	r3, [r4, #4]
    27d2:	6923      	ldr	r3, [r4, #16]
    27d4:	6023      	str	r3, [r4, #0]
    27d6:	89a3      	ldrh	r3, [r4, #12]
    27d8:	2208      	movs	r2, #8
    27da:	4313      	orrs	r3, r2
    27dc:	81a3      	strh	r3, [r4, #12]
    27de:	6921      	ldr	r1, [r4, #16]
    27e0:	2900      	cmp	r1, #0
    27e2:	d10b      	bne.n	27fc <__swsetup_r+0xa0>
    27e4:	89a3      	ldrh	r3, [r4, #12]
    27e6:	22a0      	movs	r2, #160	; 0xa0
    27e8:	0092      	lsls	r2, r2, #2
    27ea:	401a      	ands	r2, r3
    27ec:	2380      	movs	r3, #128	; 0x80
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	429a      	cmp	r2, r3
    27f2:	d003      	beq.n	27fc <__swsetup_r+0xa0>
    27f4:	1c30      	adds	r0, r6, #0
    27f6:	1c21      	adds	r1, r4, #0
    27f8:	f001 f808 	bl	380c <__smakebuf_r>
    27fc:	89a3      	ldrh	r3, [r4, #12]
    27fe:	2201      	movs	r2, #1
    2800:	401a      	ands	r2, r3
    2802:	d005      	beq.n	2810 <__swsetup_r+0xb4>
    2804:	6961      	ldr	r1, [r4, #20]
    2806:	2200      	movs	r2, #0
    2808:	60a2      	str	r2, [r4, #8]
    280a:	424a      	negs	r2, r1
    280c:	61a2      	str	r2, [r4, #24]
    280e:	e003      	b.n	2818 <__swsetup_r+0xbc>
    2810:	0799      	lsls	r1, r3, #30
    2812:	d400      	bmi.n	2816 <__swsetup_r+0xba>
    2814:	6962      	ldr	r2, [r4, #20]
    2816:	60a2      	str	r2, [r4, #8]
    2818:	6922      	ldr	r2, [r4, #16]
    281a:	2000      	movs	r0, #0
    281c:	4282      	cmp	r2, r0
    281e:	d106      	bne.n	282e <__swsetup_r+0xd2>
    2820:	0619      	lsls	r1, r3, #24
    2822:	d504      	bpl.n	282e <__swsetup_r+0xd2>
    2824:	2240      	movs	r2, #64	; 0x40
    2826:	4313      	orrs	r3, r2
    2828:	81a3      	strh	r3, [r4, #12]
    282a:	2001      	movs	r0, #1
    282c:	4240      	negs	r0, r0
    282e:	bd70      	pop	{r4, r5, r6, pc}
    2830:	20000064 	.word	0x20000064
    2834:	000064b0 	.word	0x000064b0
    2838:	000064d0 	.word	0x000064d0
    283c:	000064f0 	.word	0x000064f0

00002840 <quorem>:
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	b089      	sub	sp, #36	; 0x24
    2844:	9106      	str	r1, [sp, #24]
    2846:	690b      	ldr	r3, [r1, #16]
    2848:	6901      	ldr	r1, [r0, #16]
    284a:	1c05      	adds	r5, r0, #0
    284c:	2600      	movs	r6, #0
    284e:	4299      	cmp	r1, r3
    2850:	db7f      	blt.n	2952 <quorem+0x112>
    2852:	9c06      	ldr	r4, [sp, #24]
    2854:	1e5f      	subs	r7, r3, #1
    2856:	3414      	adds	r4, #20
    2858:	9404      	str	r4, [sp, #16]
    285a:	9904      	ldr	r1, [sp, #16]
    285c:	00bc      	lsls	r4, r7, #2
    285e:	1909      	adds	r1, r1, r4
    2860:	1c02      	adds	r2, r0, #0
    2862:	680b      	ldr	r3, [r1, #0]
    2864:	3214      	adds	r2, #20
    2866:	9105      	str	r1, [sp, #20]
    2868:	1914      	adds	r4, r2, r4
    286a:	1c19      	adds	r1, r3, #0
    286c:	3101      	adds	r1, #1
    286e:	6820      	ldr	r0, [r4, #0]
    2870:	9203      	str	r2, [sp, #12]
    2872:	f001 fcd5 	bl	4220 <__aeabi_uidiv>
    2876:	9002      	str	r0, [sp, #8]
    2878:	42b0      	cmp	r0, r6
    287a:	d038      	beq.n	28ee <quorem+0xae>
    287c:	9904      	ldr	r1, [sp, #16]
    287e:	9b03      	ldr	r3, [sp, #12]
    2880:	468c      	mov	ip, r1
    2882:	9601      	str	r6, [sp, #4]
    2884:	9607      	str	r6, [sp, #28]
    2886:	4662      	mov	r2, ip
    2888:	3204      	adds	r2, #4
    288a:	4694      	mov	ip, r2
    288c:	3a04      	subs	r2, #4
    288e:	ca40      	ldmia	r2!, {r6}
    2890:	9902      	ldr	r1, [sp, #8]
    2892:	b2b0      	uxth	r0, r6
    2894:	4348      	muls	r0, r1
    2896:	0c31      	lsrs	r1, r6, #16
    2898:	9e02      	ldr	r6, [sp, #8]
    289a:	9a01      	ldr	r2, [sp, #4]
    289c:	4371      	muls	r1, r6
    289e:	1810      	adds	r0, r2, r0
    28a0:	0c02      	lsrs	r2, r0, #16
    28a2:	1851      	adds	r1, r2, r1
    28a4:	0c0a      	lsrs	r2, r1, #16
    28a6:	9201      	str	r2, [sp, #4]
    28a8:	681a      	ldr	r2, [r3, #0]
    28aa:	b280      	uxth	r0, r0
    28ac:	b296      	uxth	r6, r2
    28ae:	9a07      	ldr	r2, [sp, #28]
    28b0:	b289      	uxth	r1, r1
    28b2:	18b6      	adds	r6, r6, r2
    28b4:	1a30      	subs	r0, r6, r0
    28b6:	681e      	ldr	r6, [r3, #0]
    28b8:	0c32      	lsrs	r2, r6, #16
    28ba:	1a52      	subs	r2, r2, r1
    28bc:	1406      	asrs	r6, r0, #16
    28be:	1992      	adds	r2, r2, r6
    28c0:	1411      	asrs	r1, r2, #16
    28c2:	b280      	uxth	r0, r0
    28c4:	0412      	lsls	r2, r2, #16
    28c6:	9e05      	ldr	r6, [sp, #20]
    28c8:	4310      	orrs	r0, r2
    28ca:	9107      	str	r1, [sp, #28]
    28cc:	c301      	stmia	r3!, {r0}
    28ce:	4566      	cmp	r6, ip
    28d0:	d2d9      	bcs.n	2886 <quorem+0x46>
    28d2:	6821      	ldr	r1, [r4, #0]
    28d4:	2900      	cmp	r1, #0
    28d6:	d10a      	bne.n	28ee <quorem+0xae>
    28d8:	9e03      	ldr	r6, [sp, #12]
    28da:	3c04      	subs	r4, #4
    28dc:	42b4      	cmp	r4, r6
    28de:	d801      	bhi.n	28e4 <quorem+0xa4>
    28e0:	612f      	str	r7, [r5, #16]
    28e2:	e004      	b.n	28ee <quorem+0xae>
    28e4:	6821      	ldr	r1, [r4, #0]
    28e6:	2900      	cmp	r1, #0
    28e8:	d1fa      	bne.n	28e0 <quorem+0xa0>
    28ea:	3f01      	subs	r7, #1
    28ec:	e7f4      	b.n	28d8 <quorem+0x98>
    28ee:	1c28      	adds	r0, r5, #0
    28f0:	9906      	ldr	r1, [sp, #24]
    28f2:	f001 fa05 	bl	3d00 <__mcmp>
    28f6:	2800      	cmp	r0, #0
    28f8:	db2a      	blt.n	2950 <quorem+0x110>
    28fa:	9c02      	ldr	r4, [sp, #8]
    28fc:	9a03      	ldr	r2, [sp, #12]
    28fe:	3401      	adds	r4, #1
    2900:	9b04      	ldr	r3, [sp, #16]
    2902:	9402      	str	r4, [sp, #8]
    2904:	2400      	movs	r4, #0
    2906:	6811      	ldr	r1, [r2, #0]
    2908:	cb40      	ldmia	r3!, {r6}
    290a:	b288      	uxth	r0, r1
    290c:	1900      	adds	r0, r0, r4
    290e:	6814      	ldr	r4, [r2, #0]
    2910:	b2b1      	uxth	r1, r6
    2912:	1a40      	subs	r0, r0, r1
    2914:	0c36      	lsrs	r6, r6, #16
    2916:	0c21      	lsrs	r1, r4, #16
    2918:	1b89      	subs	r1, r1, r6
    291a:	1404      	asrs	r4, r0, #16
    291c:	1909      	adds	r1, r1, r4
    291e:	140c      	asrs	r4, r1, #16
    2920:	b280      	uxth	r0, r0
    2922:	0409      	lsls	r1, r1, #16
    2924:	9e05      	ldr	r6, [sp, #20]
    2926:	4301      	orrs	r1, r0
    2928:	c202      	stmia	r2!, {r1}
    292a:	429e      	cmp	r6, r3
    292c:	d2eb      	bcs.n	2906 <quorem+0xc6>
    292e:	9c03      	ldr	r4, [sp, #12]
    2930:	00bb      	lsls	r3, r7, #2
    2932:	18e3      	adds	r3, r4, r3
    2934:	681e      	ldr	r6, [r3, #0]
    2936:	2e00      	cmp	r6, #0
    2938:	d10a      	bne.n	2950 <quorem+0x110>
    293a:	9c03      	ldr	r4, [sp, #12]
    293c:	3b04      	subs	r3, #4
    293e:	42a3      	cmp	r3, r4
    2940:	d801      	bhi.n	2946 <quorem+0x106>
    2942:	612f      	str	r7, [r5, #16]
    2944:	e004      	b.n	2950 <quorem+0x110>
    2946:	681e      	ldr	r6, [r3, #0]
    2948:	2e00      	cmp	r6, #0
    294a:	d1fa      	bne.n	2942 <quorem+0x102>
    294c:	3f01      	subs	r7, #1
    294e:	e7f4      	b.n	293a <quorem+0xfa>
    2950:	9e02      	ldr	r6, [sp, #8]
    2952:	1c30      	adds	r0, r6, #0
    2954:	b009      	add	sp, #36	; 0x24
    2956:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002958 <_dtoa_r>:
    2958:	b5f0      	push	{r4, r5, r6, r7, lr}
    295a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    295c:	b09b      	sub	sp, #108	; 0x6c
    295e:	9007      	str	r0, [sp, #28]
    2960:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    2962:	9204      	str	r2, [sp, #16]
    2964:	9305      	str	r3, [sp, #20]
    2966:	2c00      	cmp	r4, #0
    2968:	d108      	bne.n	297c <_dtoa_r+0x24>
    296a:	2010      	movs	r0, #16
    296c:	f000 ff9e 	bl	38ac <malloc>
    2970:	9907      	ldr	r1, [sp, #28]
    2972:	6248      	str	r0, [r1, #36]	; 0x24
    2974:	6044      	str	r4, [r0, #4]
    2976:	6084      	str	r4, [r0, #8]
    2978:	6004      	str	r4, [r0, #0]
    297a:	60c4      	str	r4, [r0, #12]
    297c:	9c07      	ldr	r4, [sp, #28]
    297e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2980:	6819      	ldr	r1, [r3, #0]
    2982:	2900      	cmp	r1, #0
    2984:	d00a      	beq.n	299c <_dtoa_r+0x44>
    2986:	685b      	ldr	r3, [r3, #4]
    2988:	2201      	movs	r2, #1
    298a:	409a      	lsls	r2, r3
    298c:	604b      	str	r3, [r1, #4]
    298e:	608a      	str	r2, [r1, #8]
    2990:	1c20      	adds	r0, r4, #0
    2992:	f000 ffd8 	bl	3946 <_Bfree>
    2996:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2998:	2200      	movs	r2, #0
    299a:	601a      	str	r2, [r3, #0]
    299c:	9805      	ldr	r0, [sp, #20]
    299e:	2800      	cmp	r0, #0
    29a0:	da05      	bge.n	29ae <_dtoa_r+0x56>
    29a2:	2301      	movs	r3, #1
    29a4:	602b      	str	r3, [r5, #0]
    29a6:	0043      	lsls	r3, r0, #1
    29a8:	085b      	lsrs	r3, r3, #1
    29aa:	9305      	str	r3, [sp, #20]
    29ac:	e001      	b.n	29b2 <_dtoa_r+0x5a>
    29ae:	2300      	movs	r3, #0
    29b0:	602b      	str	r3, [r5, #0]
    29b2:	9e05      	ldr	r6, [sp, #20]
    29b4:	4bbe      	ldr	r3, [pc, #760]	; (2cb0 <_dtoa_r+0x358>)
    29b6:	1c32      	adds	r2, r6, #0
    29b8:	401a      	ands	r2, r3
    29ba:	429a      	cmp	r2, r3
    29bc:	d118      	bne.n	29f0 <_dtoa_r+0x98>
    29be:	4bbd      	ldr	r3, [pc, #756]	; (2cb4 <_dtoa_r+0x35c>)
    29c0:	9c22      	ldr	r4, [sp, #136]	; 0x88
    29c2:	9d04      	ldr	r5, [sp, #16]
    29c4:	6023      	str	r3, [r4, #0]
    29c6:	2d00      	cmp	r5, #0
    29c8:	d101      	bne.n	29ce <_dtoa_r+0x76>
    29ca:	0336      	lsls	r6, r6, #12
    29cc:	d001      	beq.n	29d2 <_dtoa_r+0x7a>
    29ce:	48ba      	ldr	r0, [pc, #744]	; (2cb8 <_dtoa_r+0x360>)
    29d0:	e000      	b.n	29d4 <_dtoa_r+0x7c>
    29d2:	48ba      	ldr	r0, [pc, #744]	; (2cbc <_dtoa_r+0x364>)
    29d4:	9c24      	ldr	r4, [sp, #144]	; 0x90
    29d6:	2c00      	cmp	r4, #0
    29d8:	d101      	bne.n	29de <_dtoa_r+0x86>
    29da:	f000 fd93 	bl	3504 <_dtoa_r+0xbac>
    29de:	78c2      	ldrb	r2, [r0, #3]
    29e0:	1cc3      	adds	r3, r0, #3
    29e2:	2a00      	cmp	r2, #0
    29e4:	d000      	beq.n	29e8 <_dtoa_r+0x90>
    29e6:	3305      	adds	r3, #5
    29e8:	9d24      	ldr	r5, [sp, #144]	; 0x90
    29ea:	602b      	str	r3, [r5, #0]
    29ec:	f000 fd8a 	bl	3504 <_dtoa_r+0xbac>
    29f0:	9c04      	ldr	r4, [sp, #16]
    29f2:	9d05      	ldr	r5, [sp, #20]
    29f4:	4ba5      	ldr	r3, [pc, #660]	; (2c8c <_dtoa_r+0x334>)
    29f6:	4aa4      	ldr	r2, [pc, #656]	; (2c88 <_dtoa_r+0x330>)
    29f8:	1c20      	adds	r0, r4, #0
    29fa:	1c29      	adds	r1, r5, #0
    29fc:	f001 fcd0 	bl	43a0 <__aeabi_dcmpeq>
    2a00:	1e07      	subs	r7, r0, #0
    2a02:	d00c      	beq.n	2a1e <_dtoa_r+0xc6>
    2a04:	9c22      	ldr	r4, [sp, #136]	; 0x88
    2a06:	9d24      	ldr	r5, [sp, #144]	; 0x90
    2a08:	2301      	movs	r3, #1
    2a0a:	6023      	str	r3, [r4, #0]
    2a0c:	2d00      	cmp	r5, #0
    2a0e:	d101      	bne.n	2a14 <_dtoa_r+0xbc>
    2a10:	f000 fd75 	bl	34fe <_dtoa_r+0xba6>
    2a14:	48aa      	ldr	r0, [pc, #680]	; (2cc0 <_dtoa_r+0x368>)
    2a16:	6028      	str	r0, [r5, #0]
    2a18:	3801      	subs	r0, #1
    2a1a:	f000 fd73 	bl	3504 <_dtoa_r+0xbac>
    2a1e:	ab19      	add	r3, sp, #100	; 0x64
    2a20:	9300      	str	r3, [sp, #0]
    2a22:	ab18      	add	r3, sp, #96	; 0x60
    2a24:	9301      	str	r3, [sp, #4]
    2a26:	9807      	ldr	r0, [sp, #28]
    2a28:	1c2b      	adds	r3, r5, #0
    2a2a:	1c22      	adds	r2, r4, #0
    2a2c:	f001 f9ea 	bl	3e04 <__d2b>
    2a30:	0073      	lsls	r3, r6, #1
    2a32:	900a      	str	r0, [sp, #40]	; 0x28
    2a34:	0d5b      	lsrs	r3, r3, #21
    2a36:	d009      	beq.n	2a4c <_dtoa_r+0xf4>
    2a38:	1c20      	adds	r0, r4, #0
    2a3a:	4ca2      	ldr	r4, [pc, #648]	; (2cc4 <_dtoa_r+0x36c>)
    2a3c:	032a      	lsls	r2, r5, #12
    2a3e:	0b12      	lsrs	r2, r2, #12
    2a40:	1c21      	adds	r1, r4, #0
    2a42:	4311      	orrs	r1, r2
    2a44:	4aa0      	ldr	r2, [pc, #640]	; (2cc8 <_dtoa_r+0x370>)
    2a46:	9716      	str	r7, [sp, #88]	; 0x58
    2a48:	189e      	adds	r6, r3, r2
    2a4a:	e01b      	b.n	2a84 <_dtoa_r+0x12c>
    2a4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2a4e:	9c19      	ldr	r4, [sp, #100]	; 0x64
    2a50:	191d      	adds	r5, r3, r4
    2a52:	4b9e      	ldr	r3, [pc, #632]	; (2ccc <_dtoa_r+0x374>)
    2a54:	429d      	cmp	r5, r3
    2a56:	db09      	blt.n	2a6c <_dtoa_r+0x114>
    2a58:	499d      	ldr	r1, [pc, #628]	; (2cd0 <_dtoa_r+0x378>)
    2a5a:	9a04      	ldr	r2, [sp, #16]
    2a5c:	4b9d      	ldr	r3, [pc, #628]	; (2cd4 <_dtoa_r+0x37c>)
    2a5e:	1868      	adds	r0, r5, r1
    2a60:	40c2      	lsrs	r2, r0
    2a62:	1b5b      	subs	r3, r3, r5
    2a64:	1c10      	adds	r0, r2, #0
    2a66:	409e      	lsls	r6, r3
    2a68:	4330      	orrs	r0, r6
    2a6a:	e004      	b.n	2a76 <_dtoa_r+0x11e>
    2a6c:	489a      	ldr	r0, [pc, #616]	; (2cd8 <_dtoa_r+0x380>)
    2a6e:	9b04      	ldr	r3, [sp, #16]
    2a70:	1b40      	subs	r0, r0, r5
    2a72:	4083      	lsls	r3, r0
    2a74:	1c18      	adds	r0, r3, #0
    2a76:	f003 faf5 	bl	6064 <__aeabi_ui2d>
    2a7a:	4c98      	ldr	r4, [pc, #608]	; (2cdc <_dtoa_r+0x384>)
    2a7c:	1e6e      	subs	r6, r5, #1
    2a7e:	2501      	movs	r5, #1
    2a80:	1909      	adds	r1, r1, r4
    2a82:	9516      	str	r5, [sp, #88]	; 0x58
    2a84:	4a82      	ldr	r2, [pc, #520]	; (2c90 <_dtoa_r+0x338>)
    2a86:	4b83      	ldr	r3, [pc, #524]	; (2c94 <_dtoa_r+0x33c>)
    2a88:	f002 ff46 	bl	5918 <__aeabi_dsub>
    2a8c:	4a82      	ldr	r2, [pc, #520]	; (2c98 <_dtoa_r+0x340>)
    2a8e:	4b83      	ldr	r3, [pc, #524]	; (2c9c <_dtoa_r+0x344>)
    2a90:	f002 fcb2 	bl	53f8 <__aeabi_dmul>
    2a94:	4a82      	ldr	r2, [pc, #520]	; (2ca0 <_dtoa_r+0x348>)
    2a96:	4b83      	ldr	r3, [pc, #524]	; (2ca4 <_dtoa_r+0x34c>)
    2a98:	f001 fd22 	bl	44e0 <__aeabi_dadd>
    2a9c:	1c04      	adds	r4, r0, #0
    2a9e:	1c30      	adds	r0, r6, #0
    2aa0:	1c0d      	adds	r5, r1, #0
    2aa2:	f003 faa1 	bl	5fe8 <__aeabi_i2d>
    2aa6:	4a80      	ldr	r2, [pc, #512]	; (2ca8 <_dtoa_r+0x350>)
    2aa8:	4b80      	ldr	r3, [pc, #512]	; (2cac <_dtoa_r+0x354>)
    2aaa:	f002 fca5 	bl	53f8 <__aeabi_dmul>
    2aae:	1c02      	adds	r2, r0, #0
    2ab0:	1c0b      	adds	r3, r1, #0
    2ab2:	1c20      	adds	r0, r4, #0
    2ab4:	1c29      	adds	r1, r5, #0
    2ab6:	f001 fd13 	bl	44e0 <__aeabi_dadd>
    2aba:	1c04      	adds	r4, r0, #0
    2abc:	1c0d      	adds	r5, r1, #0
    2abe:	f003 fa5f 	bl	5f80 <__aeabi_d2iz>
    2ac2:	4b72      	ldr	r3, [pc, #456]	; (2c8c <_dtoa_r+0x334>)
    2ac4:	4a70      	ldr	r2, [pc, #448]	; (2c88 <_dtoa_r+0x330>)
    2ac6:	9006      	str	r0, [sp, #24]
    2ac8:	1c29      	adds	r1, r5, #0
    2aca:	1c20      	adds	r0, r4, #0
    2acc:	f001 fc6e 	bl	43ac <__aeabi_dcmplt>
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d00d      	beq.n	2af0 <_dtoa_r+0x198>
    2ad4:	9806      	ldr	r0, [sp, #24]
    2ad6:	f003 fa87 	bl	5fe8 <__aeabi_i2d>
    2ada:	1c0b      	adds	r3, r1, #0
    2adc:	1c02      	adds	r2, r0, #0
    2ade:	1c29      	adds	r1, r5, #0
    2ae0:	1c20      	adds	r0, r4, #0
    2ae2:	f001 fc5d 	bl	43a0 <__aeabi_dcmpeq>
    2ae6:	9c06      	ldr	r4, [sp, #24]
    2ae8:	4243      	negs	r3, r0
    2aea:	4143      	adcs	r3, r0
    2aec:	1ae4      	subs	r4, r4, r3
    2aee:	9406      	str	r4, [sp, #24]
    2af0:	9c06      	ldr	r4, [sp, #24]
    2af2:	2501      	movs	r5, #1
    2af4:	9513      	str	r5, [sp, #76]	; 0x4c
    2af6:	2c16      	cmp	r4, #22
    2af8:	d810      	bhi.n	2b1c <_dtoa_r+0x1c4>
    2afa:	4a79      	ldr	r2, [pc, #484]	; (2ce0 <_dtoa_r+0x388>)
    2afc:	00e3      	lsls	r3, r4, #3
    2afe:	18d3      	adds	r3, r2, r3
    2b00:	6818      	ldr	r0, [r3, #0]
    2b02:	6859      	ldr	r1, [r3, #4]
    2b04:	9a04      	ldr	r2, [sp, #16]
    2b06:	9b05      	ldr	r3, [sp, #20]
    2b08:	f001 fc64 	bl	43d4 <__aeabi_dcmpgt>
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d004      	beq.n	2b1a <_dtoa_r+0x1c2>
    2b10:	3c01      	subs	r4, #1
    2b12:	2500      	movs	r5, #0
    2b14:	9406      	str	r4, [sp, #24]
    2b16:	9513      	str	r5, [sp, #76]	; 0x4c
    2b18:	e000      	b.n	2b1c <_dtoa_r+0x1c4>
    2b1a:	9013      	str	r0, [sp, #76]	; 0x4c
    2b1c:	9818      	ldr	r0, [sp, #96]	; 0x60
    2b1e:	2400      	movs	r4, #0
    2b20:	1b86      	subs	r6, r0, r6
    2b22:	1c35      	adds	r5, r6, #0
    2b24:	9402      	str	r4, [sp, #8]
    2b26:	3d01      	subs	r5, #1
    2b28:	9509      	str	r5, [sp, #36]	; 0x24
    2b2a:	d504      	bpl.n	2b36 <_dtoa_r+0x1de>
    2b2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    2b2e:	2500      	movs	r5, #0
    2b30:	4264      	negs	r4, r4
    2b32:	9402      	str	r4, [sp, #8]
    2b34:	9509      	str	r5, [sp, #36]	; 0x24
    2b36:	9c06      	ldr	r4, [sp, #24]
    2b38:	2c00      	cmp	r4, #0
    2b3a:	db06      	blt.n	2b4a <_dtoa_r+0x1f2>
    2b3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    2b3e:	9412      	str	r4, [sp, #72]	; 0x48
    2b40:	192d      	adds	r5, r5, r4
    2b42:	2400      	movs	r4, #0
    2b44:	9509      	str	r5, [sp, #36]	; 0x24
    2b46:	940d      	str	r4, [sp, #52]	; 0x34
    2b48:	e007      	b.n	2b5a <_dtoa_r+0x202>
    2b4a:	9c06      	ldr	r4, [sp, #24]
    2b4c:	9d02      	ldr	r5, [sp, #8]
    2b4e:	1b2d      	subs	r5, r5, r4
    2b50:	9502      	str	r5, [sp, #8]
    2b52:	4265      	negs	r5, r4
    2b54:	2400      	movs	r4, #0
    2b56:	950d      	str	r5, [sp, #52]	; 0x34
    2b58:	9412      	str	r4, [sp, #72]	; 0x48
    2b5a:	9d20      	ldr	r5, [sp, #128]	; 0x80
    2b5c:	2401      	movs	r4, #1
    2b5e:	2d09      	cmp	r5, #9
    2b60:	d824      	bhi.n	2bac <_dtoa_r+0x254>
    2b62:	2d05      	cmp	r5, #5
    2b64:	dd02      	ble.n	2b6c <_dtoa_r+0x214>
    2b66:	3d04      	subs	r5, #4
    2b68:	9520      	str	r5, [sp, #128]	; 0x80
    2b6a:	2400      	movs	r4, #0
    2b6c:	9820      	ldr	r0, [sp, #128]	; 0x80
    2b6e:	3802      	subs	r0, #2
    2b70:	2803      	cmp	r0, #3
    2b72:	d823      	bhi.n	2bbc <_dtoa_r+0x264>
    2b74:	f001 fb4a 	bl	420c <__gnu_thumb1_case_uqi>
    2b78:	04020e06 	.word	0x04020e06
    2b7c:	2501      	movs	r5, #1
    2b7e:	e002      	b.n	2b86 <_dtoa_r+0x22e>
    2b80:	2501      	movs	r5, #1
    2b82:	e008      	b.n	2b96 <_dtoa_r+0x23e>
    2b84:	2500      	movs	r5, #0
    2b86:	9510      	str	r5, [sp, #64]	; 0x40
    2b88:	9d21      	ldr	r5, [sp, #132]	; 0x84
    2b8a:	2d00      	cmp	r5, #0
    2b8c:	dd1f      	ble.n	2bce <_dtoa_r+0x276>
    2b8e:	950c      	str	r5, [sp, #48]	; 0x30
    2b90:	9508      	str	r5, [sp, #32]
    2b92:	e009      	b.n	2ba8 <_dtoa_r+0x250>
    2b94:	2500      	movs	r5, #0
    2b96:	9510      	str	r5, [sp, #64]	; 0x40
    2b98:	9806      	ldr	r0, [sp, #24]
    2b9a:	9d21      	ldr	r5, [sp, #132]	; 0x84
    2b9c:	182d      	adds	r5, r5, r0
    2b9e:	950c      	str	r5, [sp, #48]	; 0x30
    2ba0:	3501      	adds	r5, #1
    2ba2:	9508      	str	r5, [sp, #32]
    2ba4:	2d00      	cmp	r5, #0
    2ba6:	dd18      	ble.n	2bda <_dtoa_r+0x282>
    2ba8:	1c2b      	adds	r3, r5, #0
    2baa:	e017      	b.n	2bdc <_dtoa_r+0x284>
    2bac:	4263      	negs	r3, r4
    2bae:	2500      	movs	r5, #0
    2bb0:	930c      	str	r3, [sp, #48]	; 0x30
    2bb2:	9308      	str	r3, [sp, #32]
    2bb4:	9520      	str	r5, [sp, #128]	; 0x80
    2bb6:	9410      	str	r4, [sp, #64]	; 0x40
    2bb8:	2312      	movs	r3, #18
    2bba:	e006      	b.n	2bca <_dtoa_r+0x272>
    2bbc:	2501      	movs	r5, #1
    2bbe:	426b      	negs	r3, r5
    2bc0:	9510      	str	r5, [sp, #64]	; 0x40
    2bc2:	930c      	str	r3, [sp, #48]	; 0x30
    2bc4:	9308      	str	r3, [sp, #32]
    2bc6:	2500      	movs	r5, #0
    2bc8:	2312      	movs	r3, #18
    2bca:	9521      	str	r5, [sp, #132]	; 0x84
    2bcc:	e006      	b.n	2bdc <_dtoa_r+0x284>
    2bce:	2501      	movs	r5, #1
    2bd0:	950c      	str	r5, [sp, #48]	; 0x30
    2bd2:	9508      	str	r5, [sp, #32]
    2bd4:	1c2b      	adds	r3, r5, #0
    2bd6:	9521      	str	r5, [sp, #132]	; 0x84
    2bd8:	e000      	b.n	2bdc <_dtoa_r+0x284>
    2bda:	2301      	movs	r3, #1
    2bdc:	9807      	ldr	r0, [sp, #28]
    2bde:	2200      	movs	r2, #0
    2be0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    2be2:	606a      	str	r2, [r5, #4]
    2be4:	2204      	movs	r2, #4
    2be6:	1c10      	adds	r0, r2, #0
    2be8:	3014      	adds	r0, #20
    2bea:	6869      	ldr	r1, [r5, #4]
    2bec:	4298      	cmp	r0, r3
    2bee:	d803      	bhi.n	2bf8 <_dtoa_r+0x2a0>
    2bf0:	3101      	adds	r1, #1
    2bf2:	6069      	str	r1, [r5, #4]
    2bf4:	0052      	lsls	r2, r2, #1
    2bf6:	e7f6      	b.n	2be6 <_dtoa_r+0x28e>
    2bf8:	9807      	ldr	r0, [sp, #28]
    2bfa:	f000 fe6c 	bl	38d6 <_Balloc>
    2bfe:	6028      	str	r0, [r5, #0]
    2c00:	9d07      	ldr	r5, [sp, #28]
    2c02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2c04:	9d08      	ldr	r5, [sp, #32]
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	930b      	str	r3, [sp, #44]	; 0x2c
    2c0a:	2d0e      	cmp	r5, #14
    2c0c:	d900      	bls.n	2c10 <_dtoa_r+0x2b8>
    2c0e:	e187      	b.n	2f20 <_dtoa_r+0x5c8>
    2c10:	2c00      	cmp	r4, #0
    2c12:	d100      	bne.n	2c16 <_dtoa_r+0x2be>
    2c14:	e184      	b.n	2f20 <_dtoa_r+0x5c8>
    2c16:	9c04      	ldr	r4, [sp, #16]
    2c18:	9d05      	ldr	r5, [sp, #20]
    2c1a:	9414      	str	r4, [sp, #80]	; 0x50
    2c1c:	9515      	str	r5, [sp, #84]	; 0x54
    2c1e:	9d06      	ldr	r5, [sp, #24]
    2c20:	2d00      	cmp	r5, #0
    2c22:	dd61      	ble.n	2ce8 <_dtoa_r+0x390>
    2c24:	1c2a      	adds	r2, r5, #0
    2c26:	230f      	movs	r3, #15
    2c28:	401a      	ands	r2, r3
    2c2a:	492d      	ldr	r1, [pc, #180]	; (2ce0 <_dtoa_r+0x388>)
    2c2c:	00d2      	lsls	r2, r2, #3
    2c2e:	188a      	adds	r2, r1, r2
    2c30:	6814      	ldr	r4, [r2, #0]
    2c32:	6855      	ldr	r5, [r2, #4]
    2c34:	940e      	str	r4, [sp, #56]	; 0x38
    2c36:	950f      	str	r5, [sp, #60]	; 0x3c
    2c38:	9d06      	ldr	r5, [sp, #24]
    2c3a:	4c2a      	ldr	r4, [pc, #168]	; (2ce4 <_dtoa_r+0x38c>)
    2c3c:	112f      	asrs	r7, r5, #4
    2c3e:	2502      	movs	r5, #2
    2c40:	06f8      	lsls	r0, r7, #27
    2c42:	d517      	bpl.n	2c74 <_dtoa_r+0x31c>
    2c44:	401f      	ands	r7, r3
    2c46:	9814      	ldr	r0, [sp, #80]	; 0x50
    2c48:	9915      	ldr	r1, [sp, #84]	; 0x54
    2c4a:	6a22      	ldr	r2, [r4, #32]
    2c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c4e:	f001 ff69 	bl	4b24 <__aeabi_ddiv>
    2c52:	2503      	movs	r5, #3
    2c54:	9004      	str	r0, [sp, #16]
    2c56:	9105      	str	r1, [sp, #20]
    2c58:	e00c      	b.n	2c74 <_dtoa_r+0x31c>
    2c5a:	07f9      	lsls	r1, r7, #31
    2c5c:	d508      	bpl.n	2c70 <_dtoa_r+0x318>
    2c5e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2c60:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2c62:	6822      	ldr	r2, [r4, #0]
    2c64:	6863      	ldr	r3, [r4, #4]
    2c66:	f002 fbc7 	bl	53f8 <__aeabi_dmul>
    2c6a:	900e      	str	r0, [sp, #56]	; 0x38
    2c6c:	910f      	str	r1, [sp, #60]	; 0x3c
    2c6e:	3501      	adds	r5, #1
    2c70:	107f      	asrs	r7, r7, #1
    2c72:	3408      	adds	r4, #8
    2c74:	2f00      	cmp	r7, #0
    2c76:	d1f0      	bne.n	2c5a <_dtoa_r+0x302>
    2c78:	9804      	ldr	r0, [sp, #16]
    2c7a:	9905      	ldr	r1, [sp, #20]
    2c7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2c80:	f001 ff50 	bl	4b24 <__aeabi_ddiv>
    2c84:	e04e      	b.n	2d24 <_dtoa_r+0x3cc>
    2c86:	46c0      	nop			; (mov r8, r8)
	...
    2c94:	3ff80000 	.word	0x3ff80000
    2c98:	636f4361 	.word	0x636f4361
    2c9c:	3fd287a7 	.word	0x3fd287a7
    2ca0:	8b60c8b3 	.word	0x8b60c8b3
    2ca4:	3fc68a28 	.word	0x3fc68a28
    2ca8:	509f79fb 	.word	0x509f79fb
    2cac:	3fd34413 	.word	0x3fd34413
    2cb0:	7ff00000 	.word	0x7ff00000
    2cb4:	0000270f 	.word	0x0000270f
    2cb8:	000064aa 	.word	0x000064aa
    2cbc:	000064a1 	.word	0x000064a1
    2cc0:	0000647e 	.word	0x0000647e
    2cc4:	3ff00000 	.word	0x3ff00000
    2cc8:	fffffc01 	.word	0xfffffc01
    2ccc:	fffffbef 	.word	0xfffffbef
    2cd0:	00000412 	.word	0x00000412
    2cd4:	fffffc0e 	.word	0xfffffc0e
    2cd8:	fffffbee 	.word	0xfffffbee
    2cdc:	fe100000 	.word	0xfe100000
    2ce0:	00006518 	.word	0x00006518
    2ce4:	000065e0 	.word	0x000065e0
    2ce8:	9c06      	ldr	r4, [sp, #24]
    2cea:	2502      	movs	r5, #2
    2cec:	4267      	negs	r7, r4
    2cee:	2f00      	cmp	r7, #0
    2cf0:	d01a      	beq.n	2d28 <_dtoa_r+0x3d0>
    2cf2:	230f      	movs	r3, #15
    2cf4:	403b      	ands	r3, r7
    2cf6:	4acc      	ldr	r2, [pc, #816]	; (3028 <_dtoa_r+0x6d0>)
    2cf8:	00db      	lsls	r3, r3, #3
    2cfa:	18d3      	adds	r3, r2, r3
    2cfc:	9814      	ldr	r0, [sp, #80]	; 0x50
    2cfe:	9915      	ldr	r1, [sp, #84]	; 0x54
    2d00:	681a      	ldr	r2, [r3, #0]
    2d02:	685b      	ldr	r3, [r3, #4]
    2d04:	f002 fb78 	bl	53f8 <__aeabi_dmul>
    2d08:	4ec8      	ldr	r6, [pc, #800]	; (302c <_dtoa_r+0x6d4>)
    2d0a:	113f      	asrs	r7, r7, #4
    2d0c:	2f00      	cmp	r7, #0
    2d0e:	d009      	beq.n	2d24 <_dtoa_r+0x3cc>
    2d10:	07fa      	lsls	r2, r7, #31
    2d12:	d504      	bpl.n	2d1e <_dtoa_r+0x3c6>
    2d14:	6832      	ldr	r2, [r6, #0]
    2d16:	6873      	ldr	r3, [r6, #4]
    2d18:	3501      	adds	r5, #1
    2d1a:	f002 fb6d 	bl	53f8 <__aeabi_dmul>
    2d1e:	107f      	asrs	r7, r7, #1
    2d20:	3608      	adds	r6, #8
    2d22:	e7f3      	b.n	2d0c <_dtoa_r+0x3b4>
    2d24:	9004      	str	r0, [sp, #16]
    2d26:	9105      	str	r1, [sp, #20]
    2d28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    2d2a:	2c00      	cmp	r4, #0
    2d2c:	d01e      	beq.n	2d6c <_dtoa_r+0x414>
    2d2e:	9e04      	ldr	r6, [sp, #16]
    2d30:	9f05      	ldr	r7, [sp, #20]
    2d32:	4bb4      	ldr	r3, [pc, #720]	; (3004 <_dtoa_r+0x6ac>)
    2d34:	4ab2      	ldr	r2, [pc, #712]	; (3000 <_dtoa_r+0x6a8>)
    2d36:	1c30      	adds	r0, r6, #0
    2d38:	1c39      	adds	r1, r7, #0
    2d3a:	f001 fb37 	bl	43ac <__aeabi_dcmplt>
    2d3e:	2800      	cmp	r0, #0
    2d40:	d014      	beq.n	2d6c <_dtoa_r+0x414>
    2d42:	9c08      	ldr	r4, [sp, #32]
    2d44:	2c00      	cmp	r4, #0
    2d46:	d011      	beq.n	2d6c <_dtoa_r+0x414>
    2d48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    2d4a:	2c00      	cmp	r4, #0
    2d4c:	dc00      	bgt.n	2d50 <_dtoa_r+0x3f8>
    2d4e:	e0e3      	b.n	2f18 <_dtoa_r+0x5c0>
    2d50:	9c06      	ldr	r4, [sp, #24]
    2d52:	1c30      	adds	r0, r6, #0
    2d54:	3c01      	subs	r4, #1
    2d56:	1c39      	adds	r1, r7, #0
    2d58:	4aab      	ldr	r2, [pc, #684]	; (3008 <_dtoa_r+0x6b0>)
    2d5a:	4bac      	ldr	r3, [pc, #688]	; (300c <_dtoa_r+0x6b4>)
    2d5c:	9411      	str	r4, [sp, #68]	; 0x44
    2d5e:	f002 fb4b 	bl	53f8 <__aeabi_dmul>
    2d62:	3501      	adds	r5, #1
    2d64:	9004      	str	r0, [sp, #16]
    2d66:	9105      	str	r1, [sp, #20]
    2d68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    2d6a:	e002      	b.n	2d72 <_dtoa_r+0x41a>
    2d6c:	9c06      	ldr	r4, [sp, #24]
    2d6e:	9411      	str	r4, [sp, #68]	; 0x44
    2d70:	9c08      	ldr	r4, [sp, #32]
    2d72:	1c28      	adds	r0, r5, #0
    2d74:	9e04      	ldr	r6, [sp, #16]
    2d76:	9f05      	ldr	r7, [sp, #20]
    2d78:	940e      	str	r4, [sp, #56]	; 0x38
    2d7a:	f003 f935 	bl	5fe8 <__aeabi_i2d>
    2d7e:	1c32      	adds	r2, r6, #0
    2d80:	1c3b      	adds	r3, r7, #0
    2d82:	f002 fb39 	bl	53f8 <__aeabi_dmul>
    2d86:	4aa2      	ldr	r2, [pc, #648]	; (3010 <_dtoa_r+0x6b8>)
    2d88:	4ba2      	ldr	r3, [pc, #648]	; (3014 <_dtoa_r+0x6bc>)
    2d8a:	f001 fba9 	bl	44e0 <__aeabi_dadd>
    2d8e:	1c04      	adds	r4, r0, #0
    2d90:	48a7      	ldr	r0, [pc, #668]	; (3030 <_dtoa_r+0x6d8>)
    2d92:	1808      	adds	r0, r1, r0
    2d94:	990e      	ldr	r1, [sp, #56]	; 0x38
    2d96:	9004      	str	r0, [sp, #16]
    2d98:	1c05      	adds	r5, r0, #0
    2d9a:	2900      	cmp	r1, #0
    2d9c:	d11b      	bne.n	2dd6 <_dtoa_r+0x47e>
    2d9e:	4a9e      	ldr	r2, [pc, #632]	; (3018 <_dtoa_r+0x6c0>)
    2da0:	4b9e      	ldr	r3, [pc, #632]	; (301c <_dtoa_r+0x6c4>)
    2da2:	1c30      	adds	r0, r6, #0
    2da4:	1c39      	adds	r1, r7, #0
    2da6:	f002 fdb7 	bl	5918 <__aeabi_dsub>
    2daa:	1c22      	adds	r2, r4, #0
    2dac:	9b04      	ldr	r3, [sp, #16]
    2dae:	1c06      	adds	r6, r0, #0
    2db0:	1c0f      	adds	r7, r1, #0
    2db2:	f001 fb0f 	bl	43d4 <__aeabi_dcmpgt>
    2db6:	2800      	cmp	r0, #0
    2db8:	d000      	beq.n	2dbc <_dtoa_r+0x464>
    2dba:	e25c      	b.n	3276 <_dtoa_r+0x91e>
    2dbc:	1c22      	adds	r2, r4, #0
    2dbe:	2580      	movs	r5, #128	; 0x80
    2dc0:	9c04      	ldr	r4, [sp, #16]
    2dc2:	062d      	lsls	r5, r5, #24
    2dc4:	1c30      	adds	r0, r6, #0
    2dc6:	1c39      	adds	r1, r7, #0
    2dc8:	1963      	adds	r3, r4, r5
    2dca:	f001 faef 	bl	43ac <__aeabi_dcmplt>
    2dce:	2800      	cmp	r0, #0
    2dd0:	d000      	beq.n	2dd4 <_dtoa_r+0x47c>
    2dd2:	e247      	b.n	3264 <_dtoa_r+0x90c>
    2dd4:	e0a0      	b.n	2f18 <_dtoa_r+0x5c0>
    2dd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2dd8:	4b93      	ldr	r3, [pc, #588]	; (3028 <_dtoa_r+0x6d0>)
    2dda:	3a01      	subs	r2, #1
    2ddc:	9810      	ldr	r0, [sp, #64]	; 0x40
    2dde:	00d2      	lsls	r2, r2, #3
    2de0:	189b      	adds	r3, r3, r2
    2de2:	2800      	cmp	r0, #0
    2de4:	d049      	beq.n	2e7a <_dtoa_r+0x522>
    2de6:	681a      	ldr	r2, [r3, #0]
    2de8:	685b      	ldr	r3, [r3, #4]
    2dea:	488d      	ldr	r0, [pc, #564]	; (3020 <_dtoa_r+0x6c8>)
    2dec:	498d      	ldr	r1, [pc, #564]	; (3024 <_dtoa_r+0x6cc>)
    2dee:	f001 fe99 	bl	4b24 <__aeabi_ddiv>
    2df2:	1c2b      	adds	r3, r5, #0
    2df4:	1c22      	adds	r2, r4, #0
    2df6:	f002 fd8f 	bl	5918 <__aeabi_dsub>
    2dfa:	9004      	str	r0, [sp, #16]
    2dfc:	9105      	str	r1, [sp, #20]
    2dfe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2e00:	1c39      	adds	r1, r7, #0
    2e02:	1c30      	adds	r0, r6, #0
    2e04:	f003 f8bc 	bl	5f80 <__aeabi_d2iz>
    2e08:	1c04      	adds	r4, r0, #0
    2e0a:	f003 f8ed 	bl	5fe8 <__aeabi_i2d>
    2e0e:	1c02      	adds	r2, r0, #0
    2e10:	1c0b      	adds	r3, r1, #0
    2e12:	1c30      	adds	r0, r6, #0
    2e14:	1c39      	adds	r1, r7, #0
    2e16:	f002 fd7f 	bl	5918 <__aeabi_dsub>
    2e1a:	3501      	adds	r5, #1
    2e1c:	1e6b      	subs	r3, r5, #1
    2e1e:	3430      	adds	r4, #48	; 0x30
    2e20:	701c      	strb	r4, [r3, #0]
    2e22:	9a04      	ldr	r2, [sp, #16]
    2e24:	9b05      	ldr	r3, [sp, #20]
    2e26:	1c06      	adds	r6, r0, #0
    2e28:	1c0f      	adds	r7, r1, #0
    2e2a:	f001 fabf 	bl	43ac <__aeabi_dcmplt>
    2e2e:	2800      	cmp	r0, #0
    2e30:	d000      	beq.n	2e34 <_dtoa_r+0x4dc>
    2e32:	e353      	b.n	34dc <_dtoa_r+0xb84>
    2e34:	1c32      	adds	r2, r6, #0
    2e36:	1c3b      	adds	r3, r7, #0
    2e38:	4972      	ldr	r1, [pc, #456]	; (3004 <_dtoa_r+0x6ac>)
    2e3a:	4871      	ldr	r0, [pc, #452]	; (3000 <_dtoa_r+0x6a8>)
    2e3c:	f002 fd6c 	bl	5918 <__aeabi_dsub>
    2e40:	9a04      	ldr	r2, [sp, #16]
    2e42:	9b05      	ldr	r3, [sp, #20]
    2e44:	f001 fab2 	bl	43ac <__aeabi_dcmplt>
    2e48:	2800      	cmp	r0, #0
    2e4a:	d000      	beq.n	2e4e <_dtoa_r+0x4f6>
    2e4c:	e0cb      	b.n	2fe6 <_dtoa_r+0x68e>
    2e4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2e50:	1b2b      	subs	r3, r5, r4
    2e52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2e54:	42a3      	cmp	r3, r4
    2e56:	da5f      	bge.n	2f18 <_dtoa_r+0x5c0>
    2e58:	9804      	ldr	r0, [sp, #16]
    2e5a:	9905      	ldr	r1, [sp, #20]
    2e5c:	4a6a      	ldr	r2, [pc, #424]	; (3008 <_dtoa_r+0x6b0>)
    2e5e:	4b6b      	ldr	r3, [pc, #428]	; (300c <_dtoa_r+0x6b4>)
    2e60:	f002 faca 	bl	53f8 <__aeabi_dmul>
    2e64:	4a68      	ldr	r2, [pc, #416]	; (3008 <_dtoa_r+0x6b0>)
    2e66:	4b69      	ldr	r3, [pc, #420]	; (300c <_dtoa_r+0x6b4>)
    2e68:	9004      	str	r0, [sp, #16]
    2e6a:	9105      	str	r1, [sp, #20]
    2e6c:	1c30      	adds	r0, r6, #0
    2e6e:	1c39      	adds	r1, r7, #0
    2e70:	f002 fac2 	bl	53f8 <__aeabi_dmul>
    2e74:	1c06      	adds	r6, r0, #0
    2e76:	1c0f      	adds	r7, r1, #0
    2e78:	e7c2      	b.n	2e00 <_dtoa_r+0x4a8>
    2e7a:	6818      	ldr	r0, [r3, #0]
    2e7c:	6859      	ldr	r1, [r3, #4]
    2e7e:	1c22      	adds	r2, r4, #0
    2e80:	1c2b      	adds	r3, r5, #0
    2e82:	f002 fab9 	bl	53f8 <__aeabi_dmul>
    2e86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2e88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2e8a:	9004      	str	r0, [sp, #16]
    2e8c:	9105      	str	r1, [sp, #20]
    2e8e:	1965      	adds	r5, r4, r5
    2e90:	9517      	str	r5, [sp, #92]	; 0x5c
    2e92:	1c39      	adds	r1, r7, #0
    2e94:	1c30      	adds	r0, r6, #0
    2e96:	f003 f873 	bl	5f80 <__aeabi_d2iz>
    2e9a:	1c05      	adds	r5, r0, #0
    2e9c:	f003 f8a4 	bl	5fe8 <__aeabi_i2d>
    2ea0:	1c02      	adds	r2, r0, #0
    2ea2:	1c0b      	adds	r3, r1, #0
    2ea4:	1c30      	adds	r0, r6, #0
    2ea6:	1c39      	adds	r1, r7, #0
    2ea8:	f002 fd36 	bl	5918 <__aeabi_dsub>
    2eac:	3530      	adds	r5, #48	; 0x30
    2eae:	7025      	strb	r5, [r4, #0]
    2eb0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    2eb2:	3401      	adds	r4, #1
    2eb4:	1c06      	adds	r6, r0, #0
    2eb6:	1c0f      	adds	r7, r1, #0
    2eb8:	42ac      	cmp	r4, r5
    2eba:	d126      	bne.n	2f0a <_dtoa_r+0x5b2>
    2ebc:	980e      	ldr	r0, [sp, #56]	; 0x38
    2ebe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2ec0:	4a57      	ldr	r2, [pc, #348]	; (3020 <_dtoa_r+0x6c8>)
    2ec2:	4b58      	ldr	r3, [pc, #352]	; (3024 <_dtoa_r+0x6cc>)
    2ec4:	1825      	adds	r5, r4, r0
    2ec6:	9804      	ldr	r0, [sp, #16]
    2ec8:	9905      	ldr	r1, [sp, #20]
    2eca:	f001 fb09 	bl	44e0 <__aeabi_dadd>
    2ece:	1c02      	adds	r2, r0, #0
    2ed0:	1c0b      	adds	r3, r1, #0
    2ed2:	1c30      	adds	r0, r6, #0
    2ed4:	1c39      	adds	r1, r7, #0
    2ed6:	f001 fa7d 	bl	43d4 <__aeabi_dcmpgt>
    2eda:	2800      	cmp	r0, #0
    2edc:	d000      	beq.n	2ee0 <_dtoa_r+0x588>
    2ede:	e082      	b.n	2fe6 <_dtoa_r+0x68e>
    2ee0:	9a04      	ldr	r2, [sp, #16]
    2ee2:	9b05      	ldr	r3, [sp, #20]
    2ee4:	484e      	ldr	r0, [pc, #312]	; (3020 <_dtoa_r+0x6c8>)
    2ee6:	494f      	ldr	r1, [pc, #316]	; (3024 <_dtoa_r+0x6cc>)
    2ee8:	f002 fd16 	bl	5918 <__aeabi_dsub>
    2eec:	1c02      	adds	r2, r0, #0
    2eee:	1c0b      	adds	r3, r1, #0
    2ef0:	1c30      	adds	r0, r6, #0
    2ef2:	1c39      	adds	r1, r7, #0
    2ef4:	f001 fa5a 	bl	43ac <__aeabi_dcmplt>
    2ef8:	2800      	cmp	r0, #0
    2efa:	d00d      	beq.n	2f18 <_dtoa_r+0x5c0>
    2efc:	1e6b      	subs	r3, r5, #1
    2efe:	781a      	ldrb	r2, [r3, #0]
    2f00:	2a30      	cmp	r2, #48	; 0x30
    2f02:	d000      	beq.n	2f06 <_dtoa_r+0x5ae>
    2f04:	e2ea      	b.n	34dc <_dtoa_r+0xb84>
    2f06:	1c1d      	adds	r5, r3, #0
    2f08:	e7f8      	b.n	2efc <_dtoa_r+0x5a4>
    2f0a:	4a3f      	ldr	r2, [pc, #252]	; (3008 <_dtoa_r+0x6b0>)
    2f0c:	4b3f      	ldr	r3, [pc, #252]	; (300c <_dtoa_r+0x6b4>)
    2f0e:	f002 fa73 	bl	53f8 <__aeabi_dmul>
    2f12:	1c06      	adds	r6, r0, #0
    2f14:	1c0f      	adds	r7, r1, #0
    2f16:	e7bc      	b.n	2e92 <_dtoa_r+0x53a>
    2f18:	9c14      	ldr	r4, [sp, #80]	; 0x50
    2f1a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    2f1c:	9404      	str	r4, [sp, #16]
    2f1e:	9505      	str	r5, [sp, #20]
    2f20:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2f22:	2b00      	cmp	r3, #0
    2f24:	da00      	bge.n	2f28 <_dtoa_r+0x5d0>
    2f26:	e09f      	b.n	3068 <_dtoa_r+0x710>
    2f28:	9d06      	ldr	r5, [sp, #24]
    2f2a:	2d0e      	cmp	r5, #14
    2f2c:	dd00      	ble.n	2f30 <_dtoa_r+0x5d8>
    2f2e:	e09b      	b.n	3068 <_dtoa_r+0x710>
    2f30:	4a3d      	ldr	r2, [pc, #244]	; (3028 <_dtoa_r+0x6d0>)
    2f32:	00eb      	lsls	r3, r5, #3
    2f34:	18d3      	adds	r3, r2, r3
    2f36:	681c      	ldr	r4, [r3, #0]
    2f38:	685d      	ldr	r5, [r3, #4]
    2f3a:	9402      	str	r4, [sp, #8]
    2f3c:	9503      	str	r5, [sp, #12]
    2f3e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    2f40:	2d00      	cmp	r5, #0
    2f42:	da14      	bge.n	2f6e <_dtoa_r+0x616>
    2f44:	9c08      	ldr	r4, [sp, #32]
    2f46:	2c00      	cmp	r4, #0
    2f48:	dc11      	bgt.n	2f6e <_dtoa_r+0x616>
    2f4a:	d000      	beq.n	2f4e <_dtoa_r+0x5f6>
    2f4c:	e18c      	b.n	3268 <_dtoa_r+0x910>
    2f4e:	4a32      	ldr	r2, [pc, #200]	; (3018 <_dtoa_r+0x6c0>)
    2f50:	4b32      	ldr	r3, [pc, #200]	; (301c <_dtoa_r+0x6c4>)
    2f52:	9802      	ldr	r0, [sp, #8]
    2f54:	9903      	ldr	r1, [sp, #12]
    2f56:	f002 fa4f 	bl	53f8 <__aeabi_dmul>
    2f5a:	9a04      	ldr	r2, [sp, #16]
    2f5c:	9b05      	ldr	r3, [sp, #20]
    2f5e:	f001 fa43 	bl	43e8 <__aeabi_dcmpge>
    2f62:	9f08      	ldr	r7, [sp, #32]
    2f64:	1c3e      	adds	r6, r7, #0
    2f66:	2800      	cmp	r0, #0
    2f68:	d000      	beq.n	2f6c <_dtoa_r+0x614>
    2f6a:	e17f      	b.n	326c <_dtoa_r+0x914>
    2f6c:	e187      	b.n	327e <_dtoa_r+0x926>
    2f6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2f70:	9e04      	ldr	r6, [sp, #16]
    2f72:	9f05      	ldr	r7, [sp, #20]
    2f74:	9a02      	ldr	r2, [sp, #8]
    2f76:	9b03      	ldr	r3, [sp, #12]
    2f78:	1c30      	adds	r0, r6, #0
    2f7a:	1c39      	adds	r1, r7, #0
    2f7c:	f001 fdd2 	bl	4b24 <__aeabi_ddiv>
    2f80:	f002 fffe 	bl	5f80 <__aeabi_d2iz>
    2f84:	1c04      	adds	r4, r0, #0
    2f86:	f003 f82f 	bl	5fe8 <__aeabi_i2d>
    2f8a:	9a02      	ldr	r2, [sp, #8]
    2f8c:	9b03      	ldr	r3, [sp, #12]
    2f8e:	f002 fa33 	bl	53f8 <__aeabi_dmul>
    2f92:	1c02      	adds	r2, r0, #0
    2f94:	1c0b      	adds	r3, r1, #0
    2f96:	1c30      	adds	r0, r6, #0
    2f98:	1c39      	adds	r1, r7, #0
    2f9a:	f002 fcbd 	bl	5918 <__aeabi_dsub>
    2f9e:	3501      	adds	r5, #1
    2fa0:	1c02      	adds	r2, r0, #0
    2fa2:	1c20      	adds	r0, r4, #0
    2fa4:	3030      	adds	r0, #48	; 0x30
    2fa6:	1c0b      	adds	r3, r1, #0
    2fa8:	1e69      	subs	r1, r5, #1
    2faa:	7008      	strb	r0, [r1, #0]
    2fac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2fae:	1a29      	subs	r1, r5, r0
    2fb0:	9808      	ldr	r0, [sp, #32]
    2fb2:	4281      	cmp	r1, r0
    2fb4:	d148      	bne.n	3048 <_dtoa_r+0x6f0>
    2fb6:	1c10      	adds	r0, r2, #0
    2fb8:	1c19      	adds	r1, r3, #0
    2fba:	f001 fa91 	bl	44e0 <__aeabi_dadd>
    2fbe:	9a02      	ldr	r2, [sp, #8]
    2fc0:	9b03      	ldr	r3, [sp, #12]
    2fc2:	1c06      	adds	r6, r0, #0
    2fc4:	1c0f      	adds	r7, r1, #0
    2fc6:	f001 fa05 	bl	43d4 <__aeabi_dcmpgt>
    2fca:	2800      	cmp	r0, #0
    2fcc:	d10d      	bne.n	2fea <_dtoa_r+0x692>
    2fce:	1c30      	adds	r0, r6, #0
    2fd0:	1c39      	adds	r1, r7, #0
    2fd2:	9a02      	ldr	r2, [sp, #8]
    2fd4:	9b03      	ldr	r3, [sp, #12]
    2fd6:	f001 f9e3 	bl	43a0 <__aeabi_dcmpeq>
    2fda:	2800      	cmp	r0, #0
    2fdc:	d100      	bne.n	2fe0 <_dtoa_r+0x688>
    2fde:	e27f      	b.n	34e0 <_dtoa_r+0xb88>
    2fe0:	07e1      	lsls	r1, r4, #31
    2fe2:	d402      	bmi.n	2fea <_dtoa_r+0x692>
    2fe4:	e27c      	b.n	34e0 <_dtoa_r+0xb88>
    2fe6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    2fe8:	9406      	str	r4, [sp, #24]
    2fea:	1e6b      	subs	r3, r5, #1
    2fec:	781a      	ldrb	r2, [r3, #0]
    2fee:	2a39      	cmp	r2, #57	; 0x39
    2ff0:	d126      	bne.n	3040 <_dtoa_r+0x6e8>
    2ff2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    2ff4:	42a3      	cmp	r3, r4
    2ff6:	d01d      	beq.n	3034 <_dtoa_r+0x6dc>
    2ff8:	1c1d      	adds	r5, r3, #0
    2ffa:	e7f6      	b.n	2fea <_dtoa_r+0x692>
    2ffc:	46c0      	nop			; (mov r8, r8)
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00000000 	.word	0x00000000
    3004:	3ff00000 	.word	0x3ff00000
    3008:	00000000 	.word	0x00000000
    300c:	40240000 	.word	0x40240000
    3010:	00000000 	.word	0x00000000
    3014:	401c0000 	.word	0x401c0000
    3018:	00000000 	.word	0x00000000
    301c:	40140000 	.word	0x40140000
    3020:	00000000 	.word	0x00000000
    3024:	3fe00000 	.word	0x3fe00000
    3028:	00006518 	.word	0x00006518
    302c:	000065e0 	.word	0x000065e0
    3030:	fcc00000 	.word	0xfcc00000
    3034:	9c06      	ldr	r4, [sp, #24]
    3036:	2230      	movs	r2, #48	; 0x30
    3038:	3401      	adds	r4, #1
    303a:	9406      	str	r4, [sp, #24]
    303c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    303e:	7022      	strb	r2, [r4, #0]
    3040:	781a      	ldrb	r2, [r3, #0]
    3042:	3201      	adds	r2, #1
    3044:	701a      	strb	r2, [r3, #0]
    3046:	e24b      	b.n	34e0 <_dtoa_r+0xb88>
    3048:	1c10      	adds	r0, r2, #0
    304a:	1c19      	adds	r1, r3, #0
    304c:	4bc9      	ldr	r3, [pc, #804]	; (3374 <_dtoa_r+0xa1c>)
    304e:	4ac8      	ldr	r2, [pc, #800]	; (3370 <_dtoa_r+0xa18>)
    3050:	f002 f9d2 	bl	53f8 <__aeabi_dmul>
    3054:	4ac8      	ldr	r2, [pc, #800]	; (3378 <_dtoa_r+0xa20>)
    3056:	4bc9      	ldr	r3, [pc, #804]	; (337c <_dtoa_r+0xa24>)
    3058:	1c06      	adds	r6, r0, #0
    305a:	1c0f      	adds	r7, r1, #0
    305c:	f001 f9a0 	bl	43a0 <__aeabi_dcmpeq>
    3060:	2800      	cmp	r0, #0
    3062:	d100      	bne.n	3066 <_dtoa_r+0x70e>
    3064:	e786      	b.n	2f74 <_dtoa_r+0x61c>
    3066:	e23b      	b.n	34e0 <_dtoa_r+0xb88>
    3068:	9d10      	ldr	r5, [sp, #64]	; 0x40
    306a:	2d00      	cmp	r5, #0
    306c:	d031      	beq.n	30d2 <_dtoa_r+0x77a>
    306e:	9c20      	ldr	r4, [sp, #128]	; 0x80
    3070:	2c01      	cmp	r4, #1
    3072:	dc0b      	bgt.n	308c <_dtoa_r+0x734>
    3074:	9d16      	ldr	r5, [sp, #88]	; 0x58
    3076:	2d00      	cmp	r5, #0
    3078:	d002      	beq.n	3080 <_dtoa_r+0x728>
    307a:	48c1      	ldr	r0, [pc, #772]	; (3380 <_dtoa_r+0xa28>)
    307c:	181b      	adds	r3, r3, r0
    307e:	e002      	b.n	3086 <_dtoa_r+0x72e>
    3080:	9918      	ldr	r1, [sp, #96]	; 0x60
    3082:	2336      	movs	r3, #54	; 0x36
    3084:	1a5b      	subs	r3, r3, r1
    3086:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3088:	9c02      	ldr	r4, [sp, #8]
    308a:	e016      	b.n	30ba <_dtoa_r+0x762>
    308c:	9d08      	ldr	r5, [sp, #32]
    308e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3090:	3d01      	subs	r5, #1
    3092:	42ac      	cmp	r4, r5
    3094:	db01      	blt.n	309a <_dtoa_r+0x742>
    3096:	1b65      	subs	r5, r4, r5
    3098:	e006      	b.n	30a8 <_dtoa_r+0x750>
    309a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    309c:	950d      	str	r5, [sp, #52]	; 0x34
    309e:	1b2b      	subs	r3, r5, r4
    30a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    30a2:	2500      	movs	r5, #0
    30a4:	18e4      	adds	r4, r4, r3
    30a6:	9412      	str	r4, [sp, #72]	; 0x48
    30a8:	9c08      	ldr	r4, [sp, #32]
    30aa:	2c00      	cmp	r4, #0
    30ac:	da03      	bge.n	30b6 <_dtoa_r+0x75e>
    30ae:	9802      	ldr	r0, [sp, #8]
    30b0:	2300      	movs	r3, #0
    30b2:	1b04      	subs	r4, r0, r4
    30b4:	e001      	b.n	30ba <_dtoa_r+0x762>
    30b6:	9c02      	ldr	r4, [sp, #8]
    30b8:	9b08      	ldr	r3, [sp, #32]
    30ba:	9902      	ldr	r1, [sp, #8]
    30bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    30be:	18c9      	adds	r1, r1, r3
    30c0:	9102      	str	r1, [sp, #8]
    30c2:	18d2      	adds	r2, r2, r3
    30c4:	9807      	ldr	r0, [sp, #28]
    30c6:	2101      	movs	r1, #1
    30c8:	9209      	str	r2, [sp, #36]	; 0x24
    30ca:	f000 fcdc 	bl	3a86 <__i2b>
    30ce:	1c06      	adds	r6, r0, #0
    30d0:	e002      	b.n	30d8 <_dtoa_r+0x780>
    30d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    30d4:	9c02      	ldr	r4, [sp, #8]
    30d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
    30d8:	2c00      	cmp	r4, #0
    30da:	d00c      	beq.n	30f6 <_dtoa_r+0x79e>
    30dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30de:	2b00      	cmp	r3, #0
    30e0:	dd09      	ble.n	30f6 <_dtoa_r+0x79e>
    30e2:	42a3      	cmp	r3, r4
    30e4:	dd00      	ble.n	30e8 <_dtoa_r+0x790>
    30e6:	1c23      	adds	r3, r4, #0
    30e8:	9802      	ldr	r0, [sp, #8]
    30ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    30ec:	1ac0      	subs	r0, r0, r3
    30ee:	1ac9      	subs	r1, r1, r3
    30f0:	9002      	str	r0, [sp, #8]
    30f2:	1ae4      	subs	r4, r4, r3
    30f4:	9109      	str	r1, [sp, #36]	; 0x24
    30f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    30f8:	2a00      	cmp	r2, #0
    30fa:	dd21      	ble.n	3140 <_dtoa_r+0x7e8>
    30fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30fe:	2b00      	cmp	r3, #0
    3100:	d018      	beq.n	3134 <_dtoa_r+0x7dc>
    3102:	2d00      	cmp	r5, #0
    3104:	dd10      	ble.n	3128 <_dtoa_r+0x7d0>
    3106:	1c31      	adds	r1, r6, #0
    3108:	1c2a      	adds	r2, r5, #0
    310a:	9807      	ldr	r0, [sp, #28]
    310c:	f000 fd54 	bl	3bb8 <__pow5mult>
    3110:	1c06      	adds	r6, r0, #0
    3112:	1c31      	adds	r1, r6, #0
    3114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3116:	9807      	ldr	r0, [sp, #28]
    3118:	f000 fcbe 	bl	3a98 <__multiply>
    311c:	990a      	ldr	r1, [sp, #40]	; 0x28
    311e:	1c07      	adds	r7, r0, #0
    3120:	9807      	ldr	r0, [sp, #28]
    3122:	f000 fc10 	bl	3946 <_Bfree>
    3126:	970a      	str	r7, [sp, #40]	; 0x28
    3128:	980d      	ldr	r0, [sp, #52]	; 0x34
    312a:	1b42      	subs	r2, r0, r5
    312c:	d008      	beq.n	3140 <_dtoa_r+0x7e8>
    312e:	9807      	ldr	r0, [sp, #28]
    3130:	990a      	ldr	r1, [sp, #40]	; 0x28
    3132:	e002      	b.n	313a <_dtoa_r+0x7e2>
    3134:	9807      	ldr	r0, [sp, #28]
    3136:	990a      	ldr	r1, [sp, #40]	; 0x28
    3138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    313a:	f000 fd3d 	bl	3bb8 <__pow5mult>
    313e:	900a      	str	r0, [sp, #40]	; 0x28
    3140:	9807      	ldr	r0, [sp, #28]
    3142:	2101      	movs	r1, #1
    3144:	f000 fc9f 	bl	3a86 <__i2b>
    3148:	9d12      	ldr	r5, [sp, #72]	; 0x48
    314a:	1c07      	adds	r7, r0, #0
    314c:	2d00      	cmp	r5, #0
    314e:	dd05      	ble.n	315c <_dtoa_r+0x804>
    3150:	1c39      	adds	r1, r7, #0
    3152:	9807      	ldr	r0, [sp, #28]
    3154:	1c2a      	adds	r2, r5, #0
    3156:	f000 fd2f 	bl	3bb8 <__pow5mult>
    315a:	1c07      	adds	r7, r0, #0
    315c:	9820      	ldr	r0, [sp, #128]	; 0x80
    315e:	2500      	movs	r5, #0
    3160:	2801      	cmp	r0, #1
    3162:	dc10      	bgt.n	3186 <_dtoa_r+0x82e>
    3164:	9904      	ldr	r1, [sp, #16]
    3166:	42a9      	cmp	r1, r5
    3168:	d10d      	bne.n	3186 <_dtoa_r+0x82e>
    316a:	9a05      	ldr	r2, [sp, #20]
    316c:	0313      	lsls	r3, r2, #12
    316e:	42ab      	cmp	r3, r5
    3170:	d109      	bne.n	3186 <_dtoa_r+0x82e>
    3172:	4b84      	ldr	r3, [pc, #528]	; (3384 <_dtoa_r+0xa2c>)
    3174:	4213      	tst	r3, r2
    3176:	d006      	beq.n	3186 <_dtoa_r+0x82e>
    3178:	9d02      	ldr	r5, [sp, #8]
    317a:	3501      	adds	r5, #1
    317c:	9502      	str	r5, [sp, #8]
    317e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3180:	3501      	adds	r5, #1
    3182:	9509      	str	r5, [sp, #36]	; 0x24
    3184:	2501      	movs	r5, #1
    3186:	9912      	ldr	r1, [sp, #72]	; 0x48
    3188:	2001      	movs	r0, #1
    318a:	2900      	cmp	r1, #0
    318c:	d008      	beq.n	31a0 <_dtoa_r+0x848>
    318e:	693b      	ldr	r3, [r7, #16]
    3190:	3303      	adds	r3, #3
    3192:	009b      	lsls	r3, r3, #2
    3194:	18fb      	adds	r3, r7, r3
    3196:	6858      	ldr	r0, [r3, #4]
    3198:	f000 fc2c 	bl	39f4 <__hi0bits>
    319c:	2320      	movs	r3, #32
    319e:	1a18      	subs	r0, r3, r0
    31a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31a2:	231f      	movs	r3, #31
    31a4:	1880      	adds	r0, r0, r2
    31a6:	4018      	ands	r0, r3
    31a8:	d00d      	beq.n	31c6 <_dtoa_r+0x86e>
    31aa:	2320      	movs	r3, #32
    31ac:	1a1b      	subs	r3, r3, r0
    31ae:	2b04      	cmp	r3, #4
    31b0:	dd06      	ble.n	31c0 <_dtoa_r+0x868>
    31b2:	231c      	movs	r3, #28
    31b4:	1a18      	subs	r0, r3, r0
    31b6:	9b02      	ldr	r3, [sp, #8]
    31b8:	1824      	adds	r4, r4, r0
    31ba:	181b      	adds	r3, r3, r0
    31bc:	9302      	str	r3, [sp, #8]
    31be:	e008      	b.n	31d2 <_dtoa_r+0x87a>
    31c0:	2b04      	cmp	r3, #4
    31c2:	d008      	beq.n	31d6 <_dtoa_r+0x87e>
    31c4:	1c18      	adds	r0, r3, #0
    31c6:	9902      	ldr	r1, [sp, #8]
    31c8:	301c      	adds	r0, #28
    31ca:	1809      	adds	r1, r1, r0
    31cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31ce:	9102      	str	r1, [sp, #8]
    31d0:	1824      	adds	r4, r4, r0
    31d2:	1812      	adds	r2, r2, r0
    31d4:	9209      	str	r2, [sp, #36]	; 0x24
    31d6:	9b02      	ldr	r3, [sp, #8]
    31d8:	2b00      	cmp	r3, #0
    31da:	dd05      	ble.n	31e8 <_dtoa_r+0x890>
    31dc:	9807      	ldr	r0, [sp, #28]
    31de:	990a      	ldr	r1, [sp, #40]	; 0x28
    31e0:	1c1a      	adds	r2, r3, #0
    31e2:	f000 fd3b 	bl	3c5c <__lshift>
    31e6:	900a      	str	r0, [sp, #40]	; 0x28
    31e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    31ea:	2800      	cmp	r0, #0
    31ec:	dd05      	ble.n	31fa <_dtoa_r+0x8a2>
    31ee:	1c39      	adds	r1, r7, #0
    31f0:	9807      	ldr	r0, [sp, #28]
    31f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31f4:	f000 fd32 	bl	3c5c <__lshift>
    31f8:	1c07      	adds	r7, r0, #0
    31fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
    31fc:	2900      	cmp	r1, #0
    31fe:	d01b      	beq.n	3238 <_dtoa_r+0x8e0>
    3200:	980a      	ldr	r0, [sp, #40]	; 0x28
    3202:	1c39      	adds	r1, r7, #0
    3204:	f000 fd7c 	bl	3d00 <__mcmp>
    3208:	2800      	cmp	r0, #0
    320a:	da15      	bge.n	3238 <_dtoa_r+0x8e0>
    320c:	9a06      	ldr	r2, [sp, #24]
    320e:	2300      	movs	r3, #0
    3210:	3a01      	subs	r2, #1
    3212:	9206      	str	r2, [sp, #24]
    3214:	9807      	ldr	r0, [sp, #28]
    3216:	990a      	ldr	r1, [sp, #40]	; 0x28
    3218:	220a      	movs	r2, #10
    321a:	f000 fbad 	bl	3978 <__multadd>
    321e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3220:	900a      	str	r0, [sp, #40]	; 0x28
    3222:	9810      	ldr	r0, [sp, #64]	; 0x40
    3224:	9308      	str	r3, [sp, #32]
    3226:	2800      	cmp	r0, #0
    3228:	d006      	beq.n	3238 <_dtoa_r+0x8e0>
    322a:	1c31      	adds	r1, r6, #0
    322c:	9807      	ldr	r0, [sp, #28]
    322e:	220a      	movs	r2, #10
    3230:	2300      	movs	r3, #0
    3232:	f000 fba1 	bl	3978 <__multadd>
    3236:	1c06      	adds	r6, r0, #0
    3238:	9908      	ldr	r1, [sp, #32]
    323a:	2900      	cmp	r1, #0
    323c:	dc2a      	bgt.n	3294 <_dtoa_r+0x93c>
    323e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3240:	2a02      	cmp	r2, #2
    3242:	dd27      	ble.n	3294 <_dtoa_r+0x93c>
    3244:	2900      	cmp	r1, #0
    3246:	d111      	bne.n	326c <_dtoa_r+0x914>
    3248:	1c39      	adds	r1, r7, #0
    324a:	9807      	ldr	r0, [sp, #28]
    324c:	2205      	movs	r2, #5
    324e:	9b08      	ldr	r3, [sp, #32]
    3250:	f000 fb92 	bl	3978 <__multadd>
    3254:	1c07      	adds	r7, r0, #0
    3256:	1c39      	adds	r1, r7, #0
    3258:	980a      	ldr	r0, [sp, #40]	; 0x28
    325a:	f000 fd51 	bl	3d00 <__mcmp>
    325e:	2800      	cmp	r0, #0
    3260:	dc0d      	bgt.n	327e <_dtoa_r+0x926>
    3262:	e003      	b.n	326c <_dtoa_r+0x914>
    3264:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3266:	e000      	b.n	326a <_dtoa_r+0x912>
    3268:	2700      	movs	r7, #0
    326a:	1c3e      	adds	r6, r7, #0
    326c:	9c21      	ldr	r4, [sp, #132]	; 0x84
    326e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3270:	43e4      	mvns	r4, r4
    3272:	9406      	str	r4, [sp, #24]
    3274:	e00b      	b.n	328e <_dtoa_r+0x936>
    3276:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3278:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    327a:	9506      	str	r5, [sp, #24]
    327c:	1c3e      	adds	r6, r7, #0
    327e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3280:	2331      	movs	r3, #49	; 0x31
    3282:	7023      	strb	r3, [r4, #0]
    3284:	9c06      	ldr	r4, [sp, #24]
    3286:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3288:	3401      	adds	r4, #1
    328a:	3501      	adds	r5, #1
    328c:	9406      	str	r4, [sp, #24]
    328e:	9602      	str	r6, [sp, #8]
    3290:	2600      	movs	r6, #0
    3292:	e10f      	b.n	34b4 <_dtoa_r+0xb5c>
    3294:	9810      	ldr	r0, [sp, #64]	; 0x40
    3296:	2800      	cmp	r0, #0
    3298:	d100      	bne.n	329c <_dtoa_r+0x944>
    329a:	e0c5      	b.n	3428 <_dtoa_r+0xad0>
    329c:	2c00      	cmp	r4, #0
    329e:	dd05      	ble.n	32ac <_dtoa_r+0x954>
    32a0:	1c31      	adds	r1, r6, #0
    32a2:	9807      	ldr	r0, [sp, #28]
    32a4:	1c22      	adds	r2, r4, #0
    32a6:	f000 fcd9 	bl	3c5c <__lshift>
    32aa:	1c06      	adds	r6, r0, #0
    32ac:	9602      	str	r6, [sp, #8]
    32ae:	2d00      	cmp	r5, #0
    32b0:	d012      	beq.n	32d8 <_dtoa_r+0x980>
    32b2:	6871      	ldr	r1, [r6, #4]
    32b4:	9807      	ldr	r0, [sp, #28]
    32b6:	f000 fb0e 	bl	38d6 <_Balloc>
    32ba:	6932      	ldr	r2, [r6, #16]
    32bc:	1c31      	adds	r1, r6, #0
    32be:	3202      	adds	r2, #2
    32c0:	1c04      	adds	r4, r0, #0
    32c2:	0092      	lsls	r2, r2, #2
    32c4:	310c      	adds	r1, #12
    32c6:	300c      	adds	r0, #12
    32c8:	f7fe fbae 	bl	1a28 <memcpy>
    32cc:	9807      	ldr	r0, [sp, #28]
    32ce:	1c21      	adds	r1, r4, #0
    32d0:	2201      	movs	r2, #1
    32d2:	f000 fcc3 	bl	3c5c <__lshift>
    32d6:	9002      	str	r0, [sp, #8]
    32d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    32da:	9d08      	ldr	r5, [sp, #32]
    32dc:	1c23      	adds	r3, r4, #0
    32de:	3b01      	subs	r3, #1
    32e0:	195b      	adds	r3, r3, r5
    32e2:	9409      	str	r4, [sp, #36]	; 0x24
    32e4:	9310      	str	r3, [sp, #64]	; 0x40
    32e6:	1c39      	adds	r1, r7, #0
    32e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    32ea:	f7ff faa9 	bl	2840 <quorem>
    32ee:	1c31      	adds	r1, r6, #0
    32f0:	900d      	str	r0, [sp, #52]	; 0x34
    32f2:	1c04      	adds	r4, r0, #0
    32f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    32f6:	f000 fd03 	bl	3d00 <__mcmp>
    32fa:	1c39      	adds	r1, r7, #0
    32fc:	900c      	str	r0, [sp, #48]	; 0x30
    32fe:	9a02      	ldr	r2, [sp, #8]
    3300:	9807      	ldr	r0, [sp, #28]
    3302:	f000 fd18 	bl	3d36 <__mdiff>
    3306:	1c05      	adds	r5, r0, #0
    3308:	68c0      	ldr	r0, [r0, #12]
    330a:	3430      	adds	r4, #48	; 0x30
    330c:	2800      	cmp	r0, #0
    330e:	d105      	bne.n	331c <_dtoa_r+0x9c4>
    3310:	980a      	ldr	r0, [sp, #40]	; 0x28
    3312:	1c29      	adds	r1, r5, #0
    3314:	f000 fcf4 	bl	3d00 <__mcmp>
    3318:	9008      	str	r0, [sp, #32]
    331a:	e001      	b.n	3320 <_dtoa_r+0x9c8>
    331c:	2101      	movs	r1, #1
    331e:	9108      	str	r1, [sp, #32]
    3320:	1c29      	adds	r1, r5, #0
    3322:	9807      	ldr	r0, [sp, #28]
    3324:	f000 fb0f 	bl	3946 <_Bfree>
    3328:	9b08      	ldr	r3, [sp, #32]
    332a:	9d20      	ldr	r5, [sp, #128]	; 0x80
    332c:	432b      	orrs	r3, r5
    332e:	d10d      	bne.n	334c <_dtoa_r+0x9f4>
    3330:	9804      	ldr	r0, [sp, #16]
    3332:	2301      	movs	r3, #1
    3334:	4203      	tst	r3, r0
    3336:	d109      	bne.n	334c <_dtoa_r+0x9f4>
    3338:	2c39      	cmp	r4, #57	; 0x39
    333a:	d044      	beq.n	33c6 <_dtoa_r+0xa6e>
    333c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    333e:	2d00      	cmp	r5, #0
    3340:	dd01      	ble.n	3346 <_dtoa_r+0x9ee>
    3342:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3344:	3431      	adds	r4, #49	; 0x31
    3346:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3348:	3501      	adds	r5, #1
    334a:	e044      	b.n	33d6 <_dtoa_r+0xa7e>
    334c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    334e:	2d00      	cmp	r5, #0
    3350:	da03      	bge.n	335a <_dtoa_r+0xa02>
    3352:	9d08      	ldr	r5, [sp, #32]
    3354:	2d00      	cmp	r5, #0
    3356:	dc17      	bgt.n	3388 <_dtoa_r+0xa30>
    3358:	e028      	b.n	33ac <_dtoa_r+0xa54>
    335a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    335c:	9d20      	ldr	r5, [sp, #128]	; 0x80
    335e:	432b      	orrs	r3, r5
    3360:	d129      	bne.n	33b6 <_dtoa_r+0xa5e>
    3362:	9804      	ldr	r0, [sp, #16]
    3364:	2301      	movs	r3, #1
    3366:	4203      	tst	r3, r0
    3368:	d125      	bne.n	33b6 <_dtoa_r+0xa5e>
    336a:	e7f2      	b.n	3352 <_dtoa_r+0x9fa>
    336c:	46c0      	nop			; (mov r8, r8)
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	00000000 	.word	0x00000000
    3374:	40240000 	.word	0x40240000
	...
    3380:	00000433 	.word	0x00000433
    3384:	7ff00000 	.word	0x7ff00000
    3388:	990a      	ldr	r1, [sp, #40]	; 0x28
    338a:	9807      	ldr	r0, [sp, #28]
    338c:	2201      	movs	r2, #1
    338e:	f000 fc65 	bl	3c5c <__lshift>
    3392:	1c39      	adds	r1, r7, #0
    3394:	900a      	str	r0, [sp, #40]	; 0x28
    3396:	f000 fcb3 	bl	3d00 <__mcmp>
    339a:	2800      	cmp	r0, #0
    339c:	dc02      	bgt.n	33a4 <_dtoa_r+0xa4c>
    339e:	d105      	bne.n	33ac <_dtoa_r+0xa54>
    33a0:	07e1      	lsls	r1, r4, #31
    33a2:	d503      	bpl.n	33ac <_dtoa_r+0xa54>
    33a4:	2c39      	cmp	r4, #57	; 0x39
    33a6:	d00e      	beq.n	33c6 <_dtoa_r+0xa6e>
    33a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    33aa:	3431      	adds	r4, #49	; 0x31
    33ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
    33ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33b0:	3501      	adds	r5, #1
    33b2:	7014      	strb	r4, [r2, #0]
    33b4:	e07e      	b.n	34b4 <_dtoa_r+0xb5c>
    33b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    33b8:	3501      	adds	r5, #1
    33ba:	950c      	str	r5, [sp, #48]	; 0x30
    33bc:	9d08      	ldr	r5, [sp, #32]
    33be:	2d00      	cmp	r5, #0
    33c0:	dd0c      	ble.n	33dc <_dtoa_r+0xa84>
    33c2:	2c39      	cmp	r4, #57	; 0x39
    33c4:	d105      	bne.n	33d2 <_dtoa_r+0xa7a>
    33c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    33c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    33ca:	2339      	movs	r3, #57	; 0x39
    33cc:	3501      	adds	r5, #1
    33ce:	7023      	strb	r3, [r4, #0]
    33d0:	e05b      	b.n	348a <_dtoa_r+0xb32>
    33d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    33d4:	3401      	adds	r4, #1
    33d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    33d8:	7004      	strb	r4, [r0, #0]
    33da:	e06b      	b.n	34b4 <_dtoa_r+0xb5c>
    33dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    33de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    33e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    33e2:	700c      	strb	r4, [r1, #0]
    33e4:	4291      	cmp	r1, r2
    33e6:	d03d      	beq.n	3464 <_dtoa_r+0xb0c>
    33e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    33ea:	220a      	movs	r2, #10
    33ec:	2300      	movs	r3, #0
    33ee:	9807      	ldr	r0, [sp, #28]
    33f0:	f000 fac2 	bl	3978 <__multadd>
    33f4:	9c02      	ldr	r4, [sp, #8]
    33f6:	900a      	str	r0, [sp, #40]	; 0x28
    33f8:	1c31      	adds	r1, r6, #0
    33fa:	9807      	ldr	r0, [sp, #28]
    33fc:	220a      	movs	r2, #10
    33fe:	2300      	movs	r3, #0
    3400:	42a6      	cmp	r6, r4
    3402:	d104      	bne.n	340e <_dtoa_r+0xab6>
    3404:	f000 fab8 	bl	3978 <__multadd>
    3408:	1c06      	adds	r6, r0, #0
    340a:	9002      	str	r0, [sp, #8]
    340c:	e009      	b.n	3422 <_dtoa_r+0xaca>
    340e:	f000 fab3 	bl	3978 <__multadd>
    3412:	9902      	ldr	r1, [sp, #8]
    3414:	1c06      	adds	r6, r0, #0
    3416:	220a      	movs	r2, #10
    3418:	9807      	ldr	r0, [sp, #28]
    341a:	2300      	movs	r3, #0
    341c:	f000 faac 	bl	3978 <__multadd>
    3420:	9002      	str	r0, [sp, #8]
    3422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3424:	9509      	str	r5, [sp, #36]	; 0x24
    3426:	e75e      	b.n	32e6 <_dtoa_r+0x98e>
    3428:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    342a:	1c39      	adds	r1, r7, #0
    342c:	980a      	ldr	r0, [sp, #40]	; 0x28
    342e:	f7ff fa07 	bl	2840 <quorem>
    3432:	1c04      	adds	r4, r0, #0
    3434:	3430      	adds	r4, #48	; 0x30
    3436:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3438:	9908      	ldr	r1, [sp, #32]
    343a:	702c      	strb	r4, [r5, #0]
    343c:	3501      	adds	r5, #1
    343e:	1a2b      	subs	r3, r5, r0
    3440:	428b      	cmp	r3, r1
    3442:	db07      	blt.n	3454 <_dtoa_r+0xafc>
    3444:	1e0b      	subs	r3, r1, #0
    3446:	dc00      	bgt.n	344a <_dtoa_r+0xaf2>
    3448:	2301      	movs	r3, #1
    344a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    344c:	9602      	str	r6, [sp, #8]
    344e:	18d5      	adds	r5, r2, r3
    3450:	2600      	movs	r6, #0
    3452:	e007      	b.n	3464 <_dtoa_r+0xb0c>
    3454:	9807      	ldr	r0, [sp, #28]
    3456:	990a      	ldr	r1, [sp, #40]	; 0x28
    3458:	220a      	movs	r2, #10
    345a:	2300      	movs	r3, #0
    345c:	f000 fa8c 	bl	3978 <__multadd>
    3460:	900a      	str	r0, [sp, #40]	; 0x28
    3462:	e7e2      	b.n	342a <_dtoa_r+0xad2>
    3464:	990a      	ldr	r1, [sp, #40]	; 0x28
    3466:	9807      	ldr	r0, [sp, #28]
    3468:	2201      	movs	r2, #1
    346a:	f000 fbf7 	bl	3c5c <__lshift>
    346e:	1c39      	adds	r1, r7, #0
    3470:	900a      	str	r0, [sp, #40]	; 0x28
    3472:	f000 fc45 	bl	3d00 <__mcmp>
    3476:	2800      	cmp	r0, #0
    3478:	dc07      	bgt.n	348a <_dtoa_r+0xb32>
    347a:	d115      	bne.n	34a8 <_dtoa_r+0xb50>
    347c:	07e3      	lsls	r3, r4, #31
    347e:	d404      	bmi.n	348a <_dtoa_r+0xb32>
    3480:	e012      	b.n	34a8 <_dtoa_r+0xb50>
    3482:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3484:	42a3      	cmp	r3, r4
    3486:	d005      	beq.n	3494 <_dtoa_r+0xb3c>
    3488:	1c1d      	adds	r5, r3, #0
    348a:	1e6b      	subs	r3, r5, #1
    348c:	781a      	ldrb	r2, [r3, #0]
    348e:	2a39      	cmp	r2, #57	; 0x39
    3490:	d0f7      	beq.n	3482 <_dtoa_r+0xb2a>
    3492:	e006      	b.n	34a2 <_dtoa_r+0xb4a>
    3494:	9c06      	ldr	r4, [sp, #24]
    3496:	2331      	movs	r3, #49	; 0x31
    3498:	3401      	adds	r4, #1
    349a:	9406      	str	r4, [sp, #24]
    349c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    349e:	7023      	strb	r3, [r4, #0]
    34a0:	e008      	b.n	34b4 <_dtoa_r+0xb5c>
    34a2:	3201      	adds	r2, #1
    34a4:	701a      	strb	r2, [r3, #0]
    34a6:	e005      	b.n	34b4 <_dtoa_r+0xb5c>
    34a8:	1e6b      	subs	r3, r5, #1
    34aa:	781a      	ldrb	r2, [r3, #0]
    34ac:	2a30      	cmp	r2, #48	; 0x30
    34ae:	d101      	bne.n	34b4 <_dtoa_r+0xb5c>
    34b0:	1c1d      	adds	r5, r3, #0
    34b2:	e7f9      	b.n	34a8 <_dtoa_r+0xb50>
    34b4:	9807      	ldr	r0, [sp, #28]
    34b6:	1c39      	adds	r1, r7, #0
    34b8:	f000 fa45 	bl	3946 <_Bfree>
    34bc:	9c02      	ldr	r4, [sp, #8]
    34be:	2c00      	cmp	r4, #0
    34c0:	d00e      	beq.n	34e0 <_dtoa_r+0xb88>
    34c2:	2e00      	cmp	r6, #0
    34c4:	d005      	beq.n	34d2 <_dtoa_r+0xb7a>
    34c6:	42a6      	cmp	r6, r4
    34c8:	d003      	beq.n	34d2 <_dtoa_r+0xb7a>
    34ca:	9807      	ldr	r0, [sp, #28]
    34cc:	1c31      	adds	r1, r6, #0
    34ce:	f000 fa3a 	bl	3946 <_Bfree>
    34d2:	9807      	ldr	r0, [sp, #28]
    34d4:	9902      	ldr	r1, [sp, #8]
    34d6:	f000 fa36 	bl	3946 <_Bfree>
    34da:	e001      	b.n	34e0 <_dtoa_r+0xb88>
    34dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
    34de:	9406      	str	r4, [sp, #24]
    34e0:	9807      	ldr	r0, [sp, #28]
    34e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    34e4:	f000 fa2f 	bl	3946 <_Bfree>
    34e8:	2300      	movs	r3, #0
    34ea:	702b      	strb	r3, [r5, #0]
    34ec:	9b06      	ldr	r3, [sp, #24]
    34ee:	9c22      	ldr	r4, [sp, #136]	; 0x88
    34f0:	3301      	adds	r3, #1
    34f2:	6023      	str	r3, [r4, #0]
    34f4:	9c24      	ldr	r4, [sp, #144]	; 0x90
    34f6:	2c00      	cmp	r4, #0
    34f8:	d003      	beq.n	3502 <_dtoa_r+0xbaa>
    34fa:	6025      	str	r5, [r4, #0]
    34fc:	e001      	b.n	3502 <_dtoa_r+0xbaa>
    34fe:	4802      	ldr	r0, [pc, #8]	; (3508 <_dtoa_r+0xbb0>)
    3500:	e000      	b.n	3504 <_dtoa_r+0xbac>
    3502:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3504:	b01b      	add	sp, #108	; 0x6c
    3506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3508:	0000647d 	.word	0x0000647d
    350c:	46c0      	nop			; (mov r8, r8)
    350e:	46c0      	nop			; (mov r8, r8)

00003510 <__sflush_r>:
    3510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3512:	898b      	ldrh	r3, [r1, #12]
    3514:	1c05      	adds	r5, r0, #0
    3516:	1c0c      	adds	r4, r1, #0
    3518:	0719      	lsls	r1, r3, #28
    351a:	d45e      	bmi.n	35da <__sflush_r+0xca>
    351c:	6862      	ldr	r2, [r4, #4]
    351e:	2a00      	cmp	r2, #0
    3520:	dc02      	bgt.n	3528 <__sflush_r+0x18>
    3522:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3524:	2f00      	cmp	r7, #0
    3526:	dd1a      	ble.n	355e <__sflush_r+0x4e>
    3528:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    352a:	2f00      	cmp	r7, #0
    352c:	d017      	beq.n	355e <__sflush_r+0x4e>
    352e:	2200      	movs	r2, #0
    3530:	682e      	ldr	r6, [r5, #0]
    3532:	602a      	str	r2, [r5, #0]
    3534:	2280      	movs	r2, #128	; 0x80
    3536:	0152      	lsls	r2, r2, #5
    3538:	401a      	ands	r2, r3
    353a:	d001      	beq.n	3540 <__sflush_r+0x30>
    353c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    353e:	e015      	b.n	356c <__sflush_r+0x5c>
    3540:	1c28      	adds	r0, r5, #0
    3542:	6a21      	ldr	r1, [r4, #32]
    3544:	2301      	movs	r3, #1
    3546:	47b8      	blx	r7
    3548:	1c02      	adds	r2, r0, #0
    354a:	1c41      	adds	r1, r0, #1
    354c:	d10e      	bne.n	356c <__sflush_r+0x5c>
    354e:	682b      	ldr	r3, [r5, #0]
    3550:	2b00      	cmp	r3, #0
    3552:	d00b      	beq.n	356c <__sflush_r+0x5c>
    3554:	2b1d      	cmp	r3, #29
    3556:	d001      	beq.n	355c <__sflush_r+0x4c>
    3558:	2b16      	cmp	r3, #22
    355a:	d102      	bne.n	3562 <__sflush_r+0x52>
    355c:	602e      	str	r6, [r5, #0]
    355e:	2000      	movs	r0, #0
    3560:	e05e      	b.n	3620 <__sflush_r+0x110>
    3562:	89a3      	ldrh	r3, [r4, #12]
    3564:	2140      	movs	r1, #64	; 0x40
    3566:	430b      	orrs	r3, r1
    3568:	81a3      	strh	r3, [r4, #12]
    356a:	e059      	b.n	3620 <__sflush_r+0x110>
    356c:	89a3      	ldrh	r3, [r4, #12]
    356e:	075f      	lsls	r7, r3, #29
    3570:	d506      	bpl.n	3580 <__sflush_r+0x70>
    3572:	6861      	ldr	r1, [r4, #4]
    3574:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3576:	1a52      	subs	r2, r2, r1
    3578:	2b00      	cmp	r3, #0
    357a:	d001      	beq.n	3580 <__sflush_r+0x70>
    357c:	6c27      	ldr	r7, [r4, #64]	; 0x40
    357e:	1bd2      	subs	r2, r2, r7
    3580:	1c28      	adds	r0, r5, #0
    3582:	6a21      	ldr	r1, [r4, #32]
    3584:	2300      	movs	r3, #0
    3586:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3588:	47b8      	blx	r7
    358a:	89a2      	ldrh	r2, [r4, #12]
    358c:	1c41      	adds	r1, r0, #1
    358e:	d106      	bne.n	359e <__sflush_r+0x8e>
    3590:	682b      	ldr	r3, [r5, #0]
    3592:	2b00      	cmp	r3, #0
    3594:	d003      	beq.n	359e <__sflush_r+0x8e>
    3596:	2b1d      	cmp	r3, #29
    3598:	d001      	beq.n	359e <__sflush_r+0x8e>
    359a:	2b16      	cmp	r3, #22
    359c:	d119      	bne.n	35d2 <__sflush_r+0xc2>
    359e:	2300      	movs	r3, #0
    35a0:	6063      	str	r3, [r4, #4]
    35a2:	6923      	ldr	r3, [r4, #16]
    35a4:	6023      	str	r3, [r4, #0]
    35a6:	04d7      	lsls	r7, r2, #19
    35a8:	d505      	bpl.n	35b6 <__sflush_r+0xa6>
    35aa:	1c41      	adds	r1, r0, #1
    35ac:	d102      	bne.n	35b4 <__sflush_r+0xa4>
    35ae:	682a      	ldr	r2, [r5, #0]
    35b0:	2a00      	cmp	r2, #0
    35b2:	d100      	bne.n	35b6 <__sflush_r+0xa6>
    35b4:	6560      	str	r0, [r4, #84]	; 0x54
    35b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    35b8:	602e      	str	r6, [r5, #0]
    35ba:	2900      	cmp	r1, #0
    35bc:	d0cf      	beq.n	355e <__sflush_r+0x4e>
    35be:	1c23      	adds	r3, r4, #0
    35c0:	3344      	adds	r3, #68	; 0x44
    35c2:	4299      	cmp	r1, r3
    35c4:	d002      	beq.n	35cc <__sflush_r+0xbc>
    35c6:	1c28      	adds	r0, r5, #0
    35c8:	f000 fc82 	bl	3ed0 <_free_r>
    35cc:	2000      	movs	r0, #0
    35ce:	6360      	str	r0, [r4, #52]	; 0x34
    35d0:	e026      	b.n	3620 <__sflush_r+0x110>
    35d2:	2340      	movs	r3, #64	; 0x40
    35d4:	431a      	orrs	r2, r3
    35d6:	81a2      	strh	r2, [r4, #12]
    35d8:	e022      	b.n	3620 <__sflush_r+0x110>
    35da:	6926      	ldr	r6, [r4, #16]
    35dc:	2e00      	cmp	r6, #0
    35de:	d0be      	beq.n	355e <__sflush_r+0x4e>
    35e0:	6827      	ldr	r7, [r4, #0]
    35e2:	2200      	movs	r2, #0
    35e4:	1bbf      	subs	r7, r7, r6
    35e6:	9701      	str	r7, [sp, #4]
    35e8:	6026      	str	r6, [r4, #0]
    35ea:	0799      	lsls	r1, r3, #30
    35ec:	d100      	bne.n	35f0 <__sflush_r+0xe0>
    35ee:	6962      	ldr	r2, [r4, #20]
    35f0:	60a2      	str	r2, [r4, #8]
    35f2:	9f01      	ldr	r7, [sp, #4]
    35f4:	2f00      	cmp	r7, #0
    35f6:	ddb2      	ble.n	355e <__sflush_r+0x4e>
    35f8:	1c28      	adds	r0, r5, #0
    35fa:	6a21      	ldr	r1, [r4, #32]
    35fc:	1c32      	adds	r2, r6, #0
    35fe:	9b01      	ldr	r3, [sp, #4]
    3600:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    3602:	47b8      	blx	r7
    3604:	2800      	cmp	r0, #0
    3606:	dc06      	bgt.n	3616 <__sflush_r+0x106>
    3608:	89a3      	ldrh	r3, [r4, #12]
    360a:	2240      	movs	r2, #64	; 0x40
    360c:	4313      	orrs	r3, r2
    360e:	2001      	movs	r0, #1
    3610:	81a3      	strh	r3, [r4, #12]
    3612:	4240      	negs	r0, r0
    3614:	e004      	b.n	3620 <__sflush_r+0x110>
    3616:	9f01      	ldr	r7, [sp, #4]
    3618:	1836      	adds	r6, r6, r0
    361a:	1a3f      	subs	r7, r7, r0
    361c:	9701      	str	r7, [sp, #4]
    361e:	e7e8      	b.n	35f2 <__sflush_r+0xe2>
    3620:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003624 <_fflush_r>:
    3624:	690a      	ldr	r2, [r1, #16]
    3626:	b538      	push	{r3, r4, r5, lr}
    3628:	1c05      	adds	r5, r0, #0
    362a:	1c0c      	adds	r4, r1, #0
    362c:	2a00      	cmp	r2, #0
    362e:	d101      	bne.n	3634 <_fflush_r+0x10>
    3630:	2000      	movs	r0, #0
    3632:	e01c      	b.n	366e <_fflush_r+0x4a>
    3634:	2800      	cmp	r0, #0
    3636:	d004      	beq.n	3642 <_fflush_r+0x1e>
    3638:	6983      	ldr	r3, [r0, #24]
    363a:	2b00      	cmp	r3, #0
    363c:	d101      	bne.n	3642 <_fflush_r+0x1e>
    363e:	f000 f871 	bl	3724 <__sinit>
    3642:	4b0b      	ldr	r3, [pc, #44]	; (3670 <_fflush_r+0x4c>)
    3644:	429c      	cmp	r4, r3
    3646:	d101      	bne.n	364c <_fflush_r+0x28>
    3648:	686c      	ldr	r4, [r5, #4]
    364a:	e008      	b.n	365e <_fflush_r+0x3a>
    364c:	4b09      	ldr	r3, [pc, #36]	; (3674 <_fflush_r+0x50>)
    364e:	429c      	cmp	r4, r3
    3650:	d101      	bne.n	3656 <_fflush_r+0x32>
    3652:	68ac      	ldr	r4, [r5, #8]
    3654:	e003      	b.n	365e <_fflush_r+0x3a>
    3656:	4b08      	ldr	r3, [pc, #32]	; (3678 <_fflush_r+0x54>)
    3658:	429c      	cmp	r4, r3
    365a:	d100      	bne.n	365e <_fflush_r+0x3a>
    365c:	68ec      	ldr	r4, [r5, #12]
    365e:	220c      	movs	r2, #12
    3660:	5ea3      	ldrsh	r3, [r4, r2]
    3662:	2b00      	cmp	r3, #0
    3664:	d0e4      	beq.n	3630 <_fflush_r+0xc>
    3666:	1c28      	adds	r0, r5, #0
    3668:	1c21      	adds	r1, r4, #0
    366a:	f7ff ff51 	bl	3510 <__sflush_r>
    366e:	bd38      	pop	{r3, r4, r5, pc}
    3670:	000064b0 	.word	0x000064b0
    3674:	000064d0 	.word	0x000064d0
    3678:	000064f0 	.word	0x000064f0

0000367c <_cleanup_r>:
    367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    367e:	1c04      	adds	r4, r0, #0
    3680:	1c07      	adds	r7, r0, #0
    3682:	3448      	adds	r4, #72	; 0x48
    3684:	2c00      	cmp	r4, #0
    3686:	d012      	beq.n	36ae <_cleanup_r+0x32>
    3688:	68a5      	ldr	r5, [r4, #8]
    368a:	6866      	ldr	r6, [r4, #4]
    368c:	3e01      	subs	r6, #1
    368e:	d40c      	bmi.n	36aa <_cleanup_r+0x2e>
    3690:	89ab      	ldrh	r3, [r5, #12]
    3692:	2b01      	cmp	r3, #1
    3694:	d907      	bls.n	36a6 <_cleanup_r+0x2a>
    3696:	220e      	movs	r2, #14
    3698:	5eab      	ldrsh	r3, [r5, r2]
    369a:	3301      	adds	r3, #1
    369c:	d003      	beq.n	36a6 <_cleanup_r+0x2a>
    369e:	1c38      	adds	r0, r7, #0
    36a0:	1c29      	adds	r1, r5, #0
    36a2:	f7ff ffbf 	bl	3624 <_fflush_r>
    36a6:	3568      	adds	r5, #104	; 0x68
    36a8:	e7f0      	b.n	368c <_cleanup_r+0x10>
    36aa:	6824      	ldr	r4, [r4, #0]
    36ac:	e7ea      	b.n	3684 <_cleanup_r+0x8>
    36ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000036b0 <std.isra.0>:
    36b0:	2300      	movs	r3, #0
    36b2:	b510      	push	{r4, lr}
    36b4:	1c04      	adds	r4, r0, #0
    36b6:	6003      	str	r3, [r0, #0]
    36b8:	6043      	str	r3, [r0, #4]
    36ba:	6083      	str	r3, [r0, #8]
    36bc:	8181      	strh	r1, [r0, #12]
    36be:	6643      	str	r3, [r0, #100]	; 0x64
    36c0:	81c2      	strh	r2, [r0, #14]
    36c2:	6103      	str	r3, [r0, #16]
    36c4:	6143      	str	r3, [r0, #20]
    36c6:	6183      	str	r3, [r0, #24]
    36c8:	1c19      	adds	r1, r3, #0
    36ca:	2208      	movs	r2, #8
    36cc:	305c      	adds	r0, #92	; 0x5c
    36ce:	f7fe f9b4 	bl	1a3a <memset>
    36d2:	4b05      	ldr	r3, [pc, #20]	; (36e8 <std.isra.0+0x38>)
    36d4:	6224      	str	r4, [r4, #32]
    36d6:	6263      	str	r3, [r4, #36]	; 0x24
    36d8:	4b04      	ldr	r3, [pc, #16]	; (36ec <std.isra.0+0x3c>)
    36da:	62a3      	str	r3, [r4, #40]	; 0x28
    36dc:	4b04      	ldr	r3, [pc, #16]	; (36f0 <std.isra.0+0x40>)
    36de:	62e3      	str	r3, [r4, #44]	; 0x2c
    36e0:	4b04      	ldr	r3, [pc, #16]	; (36f4 <std.isra.0+0x44>)
    36e2:	6323      	str	r3, [r4, #48]	; 0x30
    36e4:	bd10      	pop	{r4, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	00004081 	.word	0x00004081
    36ec:	000040a9 	.word	0x000040a9
    36f0:	000040e1 	.word	0x000040e1
    36f4:	0000410d 	.word	0x0000410d

000036f8 <__sfmoreglue>:
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	1e4b      	subs	r3, r1, #1
    36fc:	2568      	movs	r5, #104	; 0x68
    36fe:	435d      	muls	r5, r3
    3700:	1c0e      	adds	r6, r1, #0
    3702:	1c29      	adds	r1, r5, #0
    3704:	3174      	adds	r1, #116	; 0x74
    3706:	f000 fc2b 	bl	3f60 <_malloc_r>
    370a:	1e04      	subs	r4, r0, #0
    370c:	d008      	beq.n	3720 <__sfmoreglue+0x28>
    370e:	2100      	movs	r1, #0
    3710:	6001      	str	r1, [r0, #0]
    3712:	6046      	str	r6, [r0, #4]
    3714:	1c2a      	adds	r2, r5, #0
    3716:	300c      	adds	r0, #12
    3718:	60a0      	str	r0, [r4, #8]
    371a:	3268      	adds	r2, #104	; 0x68
    371c:	f7fe f98d 	bl	1a3a <memset>
    3720:	1c20      	adds	r0, r4, #0
    3722:	bd70      	pop	{r4, r5, r6, pc}

00003724 <__sinit>:
    3724:	6983      	ldr	r3, [r0, #24]
    3726:	b513      	push	{r0, r1, r4, lr}
    3728:	1c04      	adds	r4, r0, #0
    372a:	2b00      	cmp	r3, #0
    372c:	d127      	bne.n	377e <__sinit+0x5a>
    372e:	6483      	str	r3, [r0, #72]	; 0x48
    3730:	64c3      	str	r3, [r0, #76]	; 0x4c
    3732:	6503      	str	r3, [r0, #80]	; 0x50
    3734:	4b12      	ldr	r3, [pc, #72]	; (3780 <__sinit+0x5c>)
    3736:	4a13      	ldr	r2, [pc, #76]	; (3784 <__sinit+0x60>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	6282      	str	r2, [r0, #40]	; 0x28
    373c:	4298      	cmp	r0, r3
    373e:	d101      	bne.n	3744 <__sinit+0x20>
    3740:	2301      	movs	r3, #1
    3742:	6183      	str	r3, [r0, #24]
    3744:	1c20      	adds	r0, r4, #0
    3746:	f000 f81f 	bl	3788 <__sfp>
    374a:	6060      	str	r0, [r4, #4]
    374c:	1c20      	adds	r0, r4, #0
    374e:	f000 f81b 	bl	3788 <__sfp>
    3752:	60a0      	str	r0, [r4, #8]
    3754:	1c20      	adds	r0, r4, #0
    3756:	f000 f817 	bl	3788 <__sfp>
    375a:	2104      	movs	r1, #4
    375c:	60e0      	str	r0, [r4, #12]
    375e:	2200      	movs	r2, #0
    3760:	6860      	ldr	r0, [r4, #4]
    3762:	f7ff ffa5 	bl	36b0 <std.isra.0>
    3766:	68a0      	ldr	r0, [r4, #8]
    3768:	2109      	movs	r1, #9
    376a:	2201      	movs	r2, #1
    376c:	f7ff ffa0 	bl	36b0 <std.isra.0>
    3770:	68e0      	ldr	r0, [r4, #12]
    3772:	2112      	movs	r1, #18
    3774:	2202      	movs	r2, #2
    3776:	f7ff ff9b 	bl	36b0 <std.isra.0>
    377a:	2301      	movs	r3, #1
    377c:	61a3      	str	r3, [r4, #24]
    377e:	bd13      	pop	{r0, r1, r4, pc}
    3780:	00006458 	.word	0x00006458
    3784:	0000367d 	.word	0x0000367d

00003788 <__sfp>:
    3788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378a:	4b1d      	ldr	r3, [pc, #116]	; (3800 <__sfp+0x78>)
    378c:	1c07      	adds	r7, r0, #0
    378e:	681e      	ldr	r6, [r3, #0]
    3790:	69b2      	ldr	r2, [r6, #24]
    3792:	2a00      	cmp	r2, #0
    3794:	d102      	bne.n	379c <__sfp+0x14>
    3796:	1c30      	adds	r0, r6, #0
    3798:	f7ff ffc4 	bl	3724 <__sinit>
    379c:	3648      	adds	r6, #72	; 0x48
    379e:	68b4      	ldr	r4, [r6, #8]
    37a0:	6873      	ldr	r3, [r6, #4]
    37a2:	3b01      	subs	r3, #1
    37a4:	d405      	bmi.n	37b2 <__sfp+0x2a>
    37a6:	220c      	movs	r2, #12
    37a8:	5ea5      	ldrsh	r5, [r4, r2]
    37aa:	2d00      	cmp	r5, #0
    37ac:	d010      	beq.n	37d0 <__sfp+0x48>
    37ae:	3468      	adds	r4, #104	; 0x68
    37b0:	e7f7      	b.n	37a2 <__sfp+0x1a>
    37b2:	6833      	ldr	r3, [r6, #0]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d106      	bne.n	37c6 <__sfp+0x3e>
    37b8:	1c38      	adds	r0, r7, #0
    37ba:	2104      	movs	r1, #4
    37bc:	f7ff ff9c 	bl	36f8 <__sfmoreglue>
    37c0:	6030      	str	r0, [r6, #0]
    37c2:	2800      	cmp	r0, #0
    37c4:	d001      	beq.n	37ca <__sfp+0x42>
    37c6:	6836      	ldr	r6, [r6, #0]
    37c8:	e7e9      	b.n	379e <__sfp+0x16>
    37ca:	230c      	movs	r3, #12
    37cc:	603b      	str	r3, [r7, #0]
    37ce:	e016      	b.n	37fe <__sfp+0x76>
    37d0:	2301      	movs	r3, #1
    37d2:	425b      	negs	r3, r3
    37d4:	81e3      	strh	r3, [r4, #14]
    37d6:	1c20      	adds	r0, r4, #0
    37d8:	2301      	movs	r3, #1
    37da:	81a3      	strh	r3, [r4, #12]
    37dc:	6665      	str	r5, [r4, #100]	; 0x64
    37de:	6025      	str	r5, [r4, #0]
    37e0:	60a5      	str	r5, [r4, #8]
    37e2:	6065      	str	r5, [r4, #4]
    37e4:	6125      	str	r5, [r4, #16]
    37e6:	6165      	str	r5, [r4, #20]
    37e8:	61a5      	str	r5, [r4, #24]
    37ea:	305c      	adds	r0, #92	; 0x5c
    37ec:	1c29      	adds	r1, r5, #0
    37ee:	2208      	movs	r2, #8
    37f0:	f7fe f923 	bl	1a3a <memset>
    37f4:	6365      	str	r5, [r4, #52]	; 0x34
    37f6:	63a5      	str	r5, [r4, #56]	; 0x38
    37f8:	64a5      	str	r5, [r4, #72]	; 0x48
    37fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    37fc:	1c20      	adds	r0, r4, #0
    37fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3800:	00006458 	.word	0x00006458

00003804 <_localeconv_r>:
    3804:	4800      	ldr	r0, [pc, #0]	; (3808 <_localeconv_r+0x4>)
    3806:	4770      	bx	lr
    3808:	20000068 	.word	0x20000068

0000380c <__smakebuf_r>:
    380c:	b5f0      	push	{r4, r5, r6, r7, lr}
    380e:	898b      	ldrh	r3, [r1, #12]
    3810:	b091      	sub	sp, #68	; 0x44
    3812:	1c05      	adds	r5, r0, #0
    3814:	1c0c      	adds	r4, r1, #0
    3816:	079a      	lsls	r2, r3, #30
    3818:	d425      	bmi.n	3866 <__smakebuf_r+0x5a>
    381a:	230e      	movs	r3, #14
    381c:	5ec9      	ldrsh	r1, [r1, r3]
    381e:	2900      	cmp	r1, #0
    3820:	da06      	bge.n	3830 <__smakebuf_r+0x24>
    3822:	89a7      	ldrh	r7, [r4, #12]
    3824:	2380      	movs	r3, #128	; 0x80
    3826:	401f      	ands	r7, r3
    3828:	d00f      	beq.n	384a <__smakebuf_r+0x3e>
    382a:	2700      	movs	r7, #0
    382c:	2640      	movs	r6, #64	; 0x40
    382e:	e00e      	b.n	384e <__smakebuf_r+0x42>
    3830:	aa01      	add	r2, sp, #4
    3832:	f000 fc9f 	bl	4174 <_fstat_r>
    3836:	2800      	cmp	r0, #0
    3838:	dbf3      	blt.n	3822 <__smakebuf_r+0x16>
    383a:	9b02      	ldr	r3, [sp, #8]
    383c:	27f0      	movs	r7, #240	; 0xf0
    383e:	023f      	lsls	r7, r7, #8
    3840:	4a18      	ldr	r2, [pc, #96]	; (38a4 <__smakebuf_r+0x98>)
    3842:	401f      	ands	r7, r3
    3844:	18bf      	adds	r7, r7, r2
    3846:	427b      	negs	r3, r7
    3848:	415f      	adcs	r7, r3
    384a:	2680      	movs	r6, #128	; 0x80
    384c:	00f6      	lsls	r6, r6, #3
    384e:	1c28      	adds	r0, r5, #0
    3850:	1c31      	adds	r1, r6, #0
    3852:	f000 fb85 	bl	3f60 <_malloc_r>
    3856:	2800      	cmp	r0, #0
    3858:	d10c      	bne.n	3874 <__smakebuf_r+0x68>
    385a:	89a3      	ldrh	r3, [r4, #12]
    385c:	059a      	lsls	r2, r3, #22
    385e:	d41f      	bmi.n	38a0 <__smakebuf_r+0x94>
    3860:	2202      	movs	r2, #2
    3862:	4313      	orrs	r3, r2
    3864:	81a3      	strh	r3, [r4, #12]
    3866:	1c23      	adds	r3, r4, #0
    3868:	3347      	adds	r3, #71	; 0x47
    386a:	6023      	str	r3, [r4, #0]
    386c:	6123      	str	r3, [r4, #16]
    386e:	2301      	movs	r3, #1
    3870:	6163      	str	r3, [r4, #20]
    3872:	e015      	b.n	38a0 <__smakebuf_r+0x94>
    3874:	4b0c      	ldr	r3, [pc, #48]	; (38a8 <__smakebuf_r+0x9c>)
    3876:	2280      	movs	r2, #128	; 0x80
    3878:	62ab      	str	r3, [r5, #40]	; 0x28
    387a:	89a3      	ldrh	r3, [r4, #12]
    387c:	6020      	str	r0, [r4, #0]
    387e:	4313      	orrs	r3, r2
    3880:	81a3      	strh	r3, [r4, #12]
    3882:	6120      	str	r0, [r4, #16]
    3884:	6166      	str	r6, [r4, #20]
    3886:	2f00      	cmp	r7, #0
    3888:	d00a      	beq.n	38a0 <__smakebuf_r+0x94>
    388a:	230e      	movs	r3, #14
    388c:	5ee1      	ldrsh	r1, [r4, r3]
    388e:	1c28      	adds	r0, r5, #0
    3890:	f000 fc82 	bl	4198 <_isatty_r>
    3894:	2800      	cmp	r0, #0
    3896:	d003      	beq.n	38a0 <__smakebuf_r+0x94>
    3898:	89a3      	ldrh	r3, [r4, #12]
    389a:	2201      	movs	r2, #1
    389c:	4313      	orrs	r3, r2
    389e:	81a3      	strh	r3, [r4, #12]
    38a0:	b011      	add	sp, #68	; 0x44
    38a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a4:	ffffe000 	.word	0xffffe000
    38a8:	0000367d 	.word	0x0000367d

000038ac <malloc>:
    38ac:	b508      	push	{r3, lr}
    38ae:	4b03      	ldr	r3, [pc, #12]	; (38bc <malloc+0x10>)
    38b0:	1c01      	adds	r1, r0, #0
    38b2:	6818      	ldr	r0, [r3, #0]
    38b4:	f000 fb54 	bl	3f60 <_malloc_r>
    38b8:	bd08      	pop	{r3, pc}
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	20000064 	.word	0x20000064

000038c0 <memchr>:
    38c0:	b2c9      	uxtb	r1, r1
    38c2:	1882      	adds	r2, r0, r2
    38c4:	4290      	cmp	r0, r2
    38c6:	d004      	beq.n	38d2 <memchr+0x12>
    38c8:	7803      	ldrb	r3, [r0, #0]
    38ca:	428b      	cmp	r3, r1
    38cc:	d002      	beq.n	38d4 <memchr+0x14>
    38ce:	3001      	adds	r0, #1
    38d0:	e7f8      	b.n	38c4 <memchr+0x4>
    38d2:	2000      	movs	r0, #0
    38d4:	4770      	bx	lr

000038d6 <_Balloc>:
    38d6:	b570      	push	{r4, r5, r6, lr}
    38d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    38da:	1c04      	adds	r4, r0, #0
    38dc:	1c0e      	adds	r6, r1, #0
    38de:	2d00      	cmp	r5, #0
    38e0:	d107      	bne.n	38f2 <_Balloc+0x1c>
    38e2:	2010      	movs	r0, #16
    38e4:	f7ff ffe2 	bl	38ac <malloc>
    38e8:	6260      	str	r0, [r4, #36]	; 0x24
    38ea:	6045      	str	r5, [r0, #4]
    38ec:	6085      	str	r5, [r0, #8]
    38ee:	6005      	str	r5, [r0, #0]
    38f0:	60c5      	str	r5, [r0, #12]
    38f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    38f4:	68eb      	ldr	r3, [r5, #12]
    38f6:	2b00      	cmp	r3, #0
    38f8:	d009      	beq.n	390e <_Balloc+0x38>
    38fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    38fc:	00b2      	lsls	r2, r6, #2
    38fe:	68db      	ldr	r3, [r3, #12]
    3900:	189a      	adds	r2, r3, r2
    3902:	6810      	ldr	r0, [r2, #0]
    3904:	2800      	cmp	r0, #0
    3906:	d00e      	beq.n	3926 <_Balloc+0x50>
    3908:	6803      	ldr	r3, [r0, #0]
    390a:	6013      	str	r3, [r2, #0]
    390c:	e017      	b.n	393e <_Balloc+0x68>
    390e:	1c20      	adds	r0, r4, #0
    3910:	2104      	movs	r1, #4
    3912:	2221      	movs	r2, #33	; 0x21
    3914:	f000 face 	bl	3eb4 <_calloc_r>
    3918:	6a63      	ldr	r3, [r4, #36]	; 0x24
    391a:	60e8      	str	r0, [r5, #12]
    391c:	68db      	ldr	r3, [r3, #12]
    391e:	2b00      	cmp	r3, #0
    3920:	d1eb      	bne.n	38fa <_Balloc+0x24>
    3922:	2000      	movs	r0, #0
    3924:	e00e      	b.n	3944 <_Balloc+0x6e>
    3926:	2101      	movs	r1, #1
    3928:	1c0d      	adds	r5, r1, #0
    392a:	40b5      	lsls	r5, r6
    392c:	1d6a      	adds	r2, r5, #5
    392e:	0092      	lsls	r2, r2, #2
    3930:	1c20      	adds	r0, r4, #0
    3932:	f000 fabf 	bl	3eb4 <_calloc_r>
    3936:	2800      	cmp	r0, #0
    3938:	d0f3      	beq.n	3922 <_Balloc+0x4c>
    393a:	6046      	str	r6, [r0, #4]
    393c:	6085      	str	r5, [r0, #8]
    393e:	2200      	movs	r2, #0
    3940:	6102      	str	r2, [r0, #16]
    3942:	60c2      	str	r2, [r0, #12]
    3944:	bd70      	pop	{r4, r5, r6, pc}

00003946 <_Bfree>:
    3946:	b570      	push	{r4, r5, r6, lr}
    3948:	6a44      	ldr	r4, [r0, #36]	; 0x24
    394a:	1c06      	adds	r6, r0, #0
    394c:	1c0d      	adds	r5, r1, #0
    394e:	2c00      	cmp	r4, #0
    3950:	d107      	bne.n	3962 <_Bfree+0x1c>
    3952:	2010      	movs	r0, #16
    3954:	f7ff ffaa 	bl	38ac <malloc>
    3958:	6270      	str	r0, [r6, #36]	; 0x24
    395a:	6044      	str	r4, [r0, #4]
    395c:	6084      	str	r4, [r0, #8]
    395e:	6004      	str	r4, [r0, #0]
    3960:	60c4      	str	r4, [r0, #12]
    3962:	2d00      	cmp	r5, #0
    3964:	d007      	beq.n	3976 <_Bfree+0x30>
    3966:	6a72      	ldr	r2, [r6, #36]	; 0x24
    3968:	6869      	ldr	r1, [r5, #4]
    396a:	68d2      	ldr	r2, [r2, #12]
    396c:	008b      	lsls	r3, r1, #2
    396e:	18d3      	adds	r3, r2, r3
    3970:	681a      	ldr	r2, [r3, #0]
    3972:	602a      	str	r2, [r5, #0]
    3974:	601d      	str	r5, [r3, #0]
    3976:	bd70      	pop	{r4, r5, r6, pc}

00003978 <__multadd>:
    3978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    397a:	1c0c      	adds	r4, r1, #0
    397c:	1c1e      	adds	r6, r3, #0
    397e:	690d      	ldr	r5, [r1, #16]
    3980:	1c07      	adds	r7, r0, #0
    3982:	3114      	adds	r1, #20
    3984:	2300      	movs	r3, #0
    3986:	6808      	ldr	r0, [r1, #0]
    3988:	3301      	adds	r3, #1
    398a:	b280      	uxth	r0, r0
    398c:	4350      	muls	r0, r2
    398e:	1980      	adds	r0, r0, r6
    3990:	4684      	mov	ip, r0
    3992:	0c06      	lsrs	r6, r0, #16
    3994:	6808      	ldr	r0, [r1, #0]
    3996:	0c00      	lsrs	r0, r0, #16
    3998:	4350      	muls	r0, r2
    399a:	1830      	adds	r0, r6, r0
    399c:	0c06      	lsrs	r6, r0, #16
    399e:	0400      	lsls	r0, r0, #16
    39a0:	9001      	str	r0, [sp, #4]
    39a2:	4660      	mov	r0, ip
    39a4:	b280      	uxth	r0, r0
    39a6:	4684      	mov	ip, r0
    39a8:	9801      	ldr	r0, [sp, #4]
    39aa:	4484      	add	ip, r0
    39ac:	4660      	mov	r0, ip
    39ae:	c101      	stmia	r1!, {r0}
    39b0:	42ab      	cmp	r3, r5
    39b2:	dbe8      	blt.n	3986 <__multadd+0xe>
    39b4:	2e00      	cmp	r6, #0
    39b6:	d01b      	beq.n	39f0 <__multadd+0x78>
    39b8:	68a3      	ldr	r3, [r4, #8]
    39ba:	429d      	cmp	r5, r3
    39bc:	db12      	blt.n	39e4 <__multadd+0x6c>
    39be:	6861      	ldr	r1, [r4, #4]
    39c0:	1c38      	adds	r0, r7, #0
    39c2:	3101      	adds	r1, #1
    39c4:	f7ff ff87 	bl	38d6 <_Balloc>
    39c8:	6922      	ldr	r2, [r4, #16]
    39ca:	1c21      	adds	r1, r4, #0
    39cc:	3202      	adds	r2, #2
    39ce:	9001      	str	r0, [sp, #4]
    39d0:	310c      	adds	r1, #12
    39d2:	0092      	lsls	r2, r2, #2
    39d4:	300c      	adds	r0, #12
    39d6:	f7fe f827 	bl	1a28 <memcpy>
    39da:	1c21      	adds	r1, r4, #0
    39dc:	1c38      	adds	r0, r7, #0
    39de:	f7ff ffb2 	bl	3946 <_Bfree>
    39e2:	9c01      	ldr	r4, [sp, #4]
    39e4:	1d2b      	adds	r3, r5, #4
    39e6:	009b      	lsls	r3, r3, #2
    39e8:	18e3      	adds	r3, r4, r3
    39ea:	3501      	adds	r5, #1
    39ec:	605e      	str	r6, [r3, #4]
    39ee:	6125      	str	r5, [r4, #16]
    39f0:	1c20      	adds	r0, r4, #0
    39f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000039f4 <__hi0bits>:
    39f4:	2200      	movs	r2, #0
    39f6:	1c03      	adds	r3, r0, #0
    39f8:	0c01      	lsrs	r1, r0, #16
    39fa:	4291      	cmp	r1, r2
    39fc:	d101      	bne.n	3a02 <__hi0bits+0xe>
    39fe:	0403      	lsls	r3, r0, #16
    3a00:	2210      	movs	r2, #16
    3a02:	0e19      	lsrs	r1, r3, #24
    3a04:	d101      	bne.n	3a0a <__hi0bits+0x16>
    3a06:	3208      	adds	r2, #8
    3a08:	021b      	lsls	r3, r3, #8
    3a0a:	0f19      	lsrs	r1, r3, #28
    3a0c:	d101      	bne.n	3a12 <__hi0bits+0x1e>
    3a0e:	3204      	adds	r2, #4
    3a10:	011b      	lsls	r3, r3, #4
    3a12:	0f99      	lsrs	r1, r3, #30
    3a14:	d101      	bne.n	3a1a <__hi0bits+0x26>
    3a16:	3202      	adds	r2, #2
    3a18:	009b      	lsls	r3, r3, #2
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	db04      	blt.n	3a28 <__hi0bits+0x34>
    3a1e:	2020      	movs	r0, #32
    3a20:	0059      	lsls	r1, r3, #1
    3a22:	d502      	bpl.n	3a2a <__hi0bits+0x36>
    3a24:	1c50      	adds	r0, r2, #1
    3a26:	e000      	b.n	3a2a <__hi0bits+0x36>
    3a28:	1c10      	adds	r0, r2, #0
    3a2a:	4770      	bx	lr

00003a2c <__lo0bits>:
    3a2c:	6803      	ldr	r3, [r0, #0]
    3a2e:	2207      	movs	r2, #7
    3a30:	1c01      	adds	r1, r0, #0
    3a32:	401a      	ands	r2, r3
    3a34:	d00b      	beq.n	3a4e <__lo0bits+0x22>
    3a36:	2201      	movs	r2, #1
    3a38:	2000      	movs	r0, #0
    3a3a:	4213      	tst	r3, r2
    3a3c:	d122      	bne.n	3a84 <__lo0bits+0x58>
    3a3e:	2002      	movs	r0, #2
    3a40:	4203      	tst	r3, r0
    3a42:	d001      	beq.n	3a48 <__lo0bits+0x1c>
    3a44:	40d3      	lsrs	r3, r2
    3a46:	e01b      	b.n	3a80 <__lo0bits+0x54>
    3a48:	089b      	lsrs	r3, r3, #2
    3a4a:	600b      	str	r3, [r1, #0]
    3a4c:	e01a      	b.n	3a84 <__lo0bits+0x58>
    3a4e:	b298      	uxth	r0, r3
    3a50:	2800      	cmp	r0, #0
    3a52:	d101      	bne.n	3a58 <__lo0bits+0x2c>
    3a54:	0c1b      	lsrs	r3, r3, #16
    3a56:	2210      	movs	r2, #16
    3a58:	b2d8      	uxtb	r0, r3
    3a5a:	2800      	cmp	r0, #0
    3a5c:	d101      	bne.n	3a62 <__lo0bits+0x36>
    3a5e:	3208      	adds	r2, #8
    3a60:	0a1b      	lsrs	r3, r3, #8
    3a62:	0718      	lsls	r0, r3, #28
    3a64:	d101      	bne.n	3a6a <__lo0bits+0x3e>
    3a66:	3204      	adds	r2, #4
    3a68:	091b      	lsrs	r3, r3, #4
    3a6a:	0798      	lsls	r0, r3, #30
    3a6c:	d101      	bne.n	3a72 <__lo0bits+0x46>
    3a6e:	3202      	adds	r2, #2
    3a70:	089b      	lsrs	r3, r3, #2
    3a72:	07d8      	lsls	r0, r3, #31
    3a74:	d404      	bmi.n	3a80 <__lo0bits+0x54>
    3a76:	085b      	lsrs	r3, r3, #1
    3a78:	2020      	movs	r0, #32
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d002      	beq.n	3a84 <__lo0bits+0x58>
    3a7e:	3201      	adds	r2, #1
    3a80:	600b      	str	r3, [r1, #0]
    3a82:	1c10      	adds	r0, r2, #0
    3a84:	4770      	bx	lr

00003a86 <__i2b>:
    3a86:	b510      	push	{r4, lr}
    3a88:	1c0c      	adds	r4, r1, #0
    3a8a:	2101      	movs	r1, #1
    3a8c:	f7ff ff23 	bl	38d6 <_Balloc>
    3a90:	2301      	movs	r3, #1
    3a92:	6144      	str	r4, [r0, #20]
    3a94:	6103      	str	r3, [r0, #16]
    3a96:	bd10      	pop	{r4, pc}

00003a98 <__multiply>:
    3a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a9a:	1c0c      	adds	r4, r1, #0
    3a9c:	1c15      	adds	r5, r2, #0
    3a9e:	6909      	ldr	r1, [r1, #16]
    3aa0:	6912      	ldr	r2, [r2, #16]
    3aa2:	b08b      	sub	sp, #44	; 0x2c
    3aa4:	4291      	cmp	r1, r2
    3aa6:	da02      	bge.n	3aae <__multiply+0x16>
    3aa8:	1c23      	adds	r3, r4, #0
    3aaa:	1c2c      	adds	r4, r5, #0
    3aac:	1c1d      	adds	r5, r3, #0
    3aae:	6927      	ldr	r7, [r4, #16]
    3ab0:	692e      	ldr	r6, [r5, #16]
    3ab2:	68a2      	ldr	r2, [r4, #8]
    3ab4:	19bb      	adds	r3, r7, r6
    3ab6:	6861      	ldr	r1, [r4, #4]
    3ab8:	9302      	str	r3, [sp, #8]
    3aba:	4293      	cmp	r3, r2
    3abc:	dd00      	ble.n	3ac0 <__multiply+0x28>
    3abe:	3101      	adds	r1, #1
    3ac0:	f7ff ff09 	bl	38d6 <_Balloc>
    3ac4:	1c03      	adds	r3, r0, #0
    3ac6:	9003      	str	r0, [sp, #12]
    3ac8:	9802      	ldr	r0, [sp, #8]
    3aca:	3314      	adds	r3, #20
    3acc:	0082      	lsls	r2, r0, #2
    3ace:	189a      	adds	r2, r3, r2
    3ad0:	1c19      	adds	r1, r3, #0
    3ad2:	4291      	cmp	r1, r2
    3ad4:	d202      	bcs.n	3adc <__multiply+0x44>
    3ad6:	2000      	movs	r0, #0
    3ad8:	c101      	stmia	r1!, {r0}
    3ada:	e7fa      	b.n	3ad2 <__multiply+0x3a>
    3adc:	3514      	adds	r5, #20
    3ade:	3414      	adds	r4, #20
    3ae0:	00bf      	lsls	r7, r7, #2
    3ae2:	46ac      	mov	ip, r5
    3ae4:	00b6      	lsls	r6, r6, #2
    3ae6:	19e7      	adds	r7, r4, r7
    3ae8:	4466      	add	r6, ip
    3aea:	9404      	str	r4, [sp, #16]
    3aec:	9707      	str	r7, [sp, #28]
    3aee:	9609      	str	r6, [sp, #36]	; 0x24
    3af0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    3af2:	45b4      	cmp	ip, r6
    3af4:	d256      	bcs.n	3ba4 <__multiply+0x10c>
    3af6:	4665      	mov	r5, ip
    3af8:	882d      	ldrh	r5, [r5, #0]
    3afa:	9505      	str	r5, [sp, #20]
    3afc:	2d00      	cmp	r5, #0
    3afe:	d01f      	beq.n	3b40 <__multiply+0xa8>
    3b00:	9c04      	ldr	r4, [sp, #16]
    3b02:	1c19      	adds	r1, r3, #0
    3b04:	2000      	movs	r0, #0
    3b06:	680f      	ldr	r7, [r1, #0]
    3b08:	cc40      	ldmia	r4!, {r6}
    3b0a:	b2bf      	uxth	r7, r7
    3b0c:	9d05      	ldr	r5, [sp, #20]
    3b0e:	9706      	str	r7, [sp, #24]
    3b10:	b2b7      	uxth	r7, r6
    3b12:	436f      	muls	r7, r5
    3b14:	9d06      	ldr	r5, [sp, #24]
    3b16:	0c36      	lsrs	r6, r6, #16
    3b18:	19ef      	adds	r7, r5, r7
    3b1a:	183f      	adds	r7, r7, r0
    3b1c:	6808      	ldr	r0, [r1, #0]
    3b1e:	9108      	str	r1, [sp, #32]
    3b20:	0c05      	lsrs	r5, r0, #16
    3b22:	9805      	ldr	r0, [sp, #20]
    3b24:	4346      	muls	r6, r0
    3b26:	0c38      	lsrs	r0, r7, #16
    3b28:	19ad      	adds	r5, r5, r6
    3b2a:	182d      	adds	r5, r5, r0
    3b2c:	0c28      	lsrs	r0, r5, #16
    3b2e:	b2bf      	uxth	r7, r7
    3b30:	042d      	lsls	r5, r5, #16
    3b32:	433d      	orrs	r5, r7
    3b34:	c120      	stmia	r1!, {r5}
    3b36:	9d07      	ldr	r5, [sp, #28]
    3b38:	42ac      	cmp	r4, r5
    3b3a:	d3e4      	bcc.n	3b06 <__multiply+0x6e>
    3b3c:	9e08      	ldr	r6, [sp, #32]
    3b3e:	6070      	str	r0, [r6, #4]
    3b40:	4667      	mov	r7, ip
    3b42:	887d      	ldrh	r5, [r7, #2]
    3b44:	2d00      	cmp	r5, #0
    3b46:	d022      	beq.n	3b8e <__multiply+0xf6>
    3b48:	2600      	movs	r6, #0
    3b4a:	6818      	ldr	r0, [r3, #0]
    3b4c:	9c04      	ldr	r4, [sp, #16]
    3b4e:	1c19      	adds	r1, r3, #0
    3b50:	9601      	str	r6, [sp, #4]
    3b52:	8827      	ldrh	r7, [r4, #0]
    3b54:	b280      	uxth	r0, r0
    3b56:	436f      	muls	r7, r5
    3b58:	9706      	str	r7, [sp, #24]
    3b5a:	9e06      	ldr	r6, [sp, #24]
    3b5c:	884f      	ldrh	r7, [r1, #2]
    3b5e:	9105      	str	r1, [sp, #20]
    3b60:	19f6      	adds	r6, r6, r7
    3b62:	9f01      	ldr	r7, [sp, #4]
    3b64:	19f7      	adds	r7, r6, r7
    3b66:	9706      	str	r7, [sp, #24]
    3b68:	043f      	lsls	r7, r7, #16
    3b6a:	4338      	orrs	r0, r7
    3b6c:	6008      	str	r0, [r1, #0]
    3b6e:	cc01      	ldmia	r4!, {r0}
    3b70:	888f      	ldrh	r7, [r1, #4]
    3b72:	0c00      	lsrs	r0, r0, #16
    3b74:	4368      	muls	r0, r5
    3b76:	19c0      	adds	r0, r0, r7
    3b78:	9f06      	ldr	r7, [sp, #24]
    3b7a:	3104      	adds	r1, #4
    3b7c:	0c3e      	lsrs	r6, r7, #16
    3b7e:	1980      	adds	r0, r0, r6
    3b80:	9f07      	ldr	r7, [sp, #28]
    3b82:	0c06      	lsrs	r6, r0, #16
    3b84:	9601      	str	r6, [sp, #4]
    3b86:	42a7      	cmp	r7, r4
    3b88:	d8e3      	bhi.n	3b52 <__multiply+0xba>
    3b8a:	9905      	ldr	r1, [sp, #20]
    3b8c:	6048      	str	r0, [r1, #4]
    3b8e:	2504      	movs	r5, #4
    3b90:	44ac      	add	ip, r5
    3b92:	195b      	adds	r3, r3, r5
    3b94:	e7ac      	b.n	3af0 <__multiply+0x58>
    3b96:	3a04      	subs	r2, #4
    3b98:	6810      	ldr	r0, [r2, #0]
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d105      	bne.n	3baa <__multiply+0x112>
    3b9e:	9f02      	ldr	r7, [sp, #8]
    3ba0:	3f01      	subs	r7, #1
    3ba2:	9702      	str	r7, [sp, #8]
    3ba4:	9d02      	ldr	r5, [sp, #8]
    3ba6:	2d00      	cmp	r5, #0
    3ba8:	dcf5      	bgt.n	3b96 <__multiply+0xfe>
    3baa:	9f03      	ldr	r7, [sp, #12]
    3bac:	9e02      	ldr	r6, [sp, #8]
    3bae:	1c38      	adds	r0, r7, #0
    3bb0:	613e      	str	r6, [r7, #16]
    3bb2:	b00b      	add	sp, #44	; 0x2c
    3bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00003bb8 <__pow5mult>:
    3bb8:	2303      	movs	r3, #3
    3bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bbc:	4013      	ands	r3, r2
    3bbe:	1c05      	adds	r5, r0, #0
    3bc0:	1c0e      	adds	r6, r1, #0
    3bc2:	1c14      	adds	r4, r2, #0
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d007      	beq.n	3bd8 <__pow5mult+0x20>
    3bc8:	4a22      	ldr	r2, [pc, #136]	; (3c54 <__pow5mult+0x9c>)
    3bca:	3b01      	subs	r3, #1
    3bcc:	009b      	lsls	r3, r3, #2
    3bce:	589a      	ldr	r2, [r3, r2]
    3bd0:	2300      	movs	r3, #0
    3bd2:	f7ff fed1 	bl	3978 <__multadd>
    3bd6:	1c06      	adds	r6, r0, #0
    3bd8:	10a4      	asrs	r4, r4, #2
    3bda:	9401      	str	r4, [sp, #4]
    3bdc:	d037      	beq.n	3c4e <__pow5mult+0x96>
    3bde:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    3be0:	2c00      	cmp	r4, #0
    3be2:	d107      	bne.n	3bf4 <__pow5mult+0x3c>
    3be4:	2010      	movs	r0, #16
    3be6:	f7ff fe61 	bl	38ac <malloc>
    3bea:	6268      	str	r0, [r5, #36]	; 0x24
    3bec:	6044      	str	r4, [r0, #4]
    3bee:	6084      	str	r4, [r0, #8]
    3bf0:	6004      	str	r4, [r0, #0]
    3bf2:	60c4      	str	r4, [r0, #12]
    3bf4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    3bf6:	68bc      	ldr	r4, [r7, #8]
    3bf8:	2c00      	cmp	r4, #0
    3bfa:	d110      	bne.n	3c1e <__pow5mult+0x66>
    3bfc:	1c28      	adds	r0, r5, #0
    3bfe:	4916      	ldr	r1, [pc, #88]	; (3c58 <__pow5mult+0xa0>)
    3c00:	f7ff ff41 	bl	3a86 <__i2b>
    3c04:	2300      	movs	r3, #0
    3c06:	60b8      	str	r0, [r7, #8]
    3c08:	1c04      	adds	r4, r0, #0
    3c0a:	6003      	str	r3, [r0, #0]
    3c0c:	e007      	b.n	3c1e <__pow5mult+0x66>
    3c0e:	9b01      	ldr	r3, [sp, #4]
    3c10:	105b      	asrs	r3, r3, #1
    3c12:	9301      	str	r3, [sp, #4]
    3c14:	d01b      	beq.n	3c4e <__pow5mult+0x96>
    3c16:	6820      	ldr	r0, [r4, #0]
    3c18:	2800      	cmp	r0, #0
    3c1a:	d00f      	beq.n	3c3c <__pow5mult+0x84>
    3c1c:	1c04      	adds	r4, r0, #0
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	07db      	lsls	r3, r3, #31
    3c22:	d5f4      	bpl.n	3c0e <__pow5mult+0x56>
    3c24:	1c31      	adds	r1, r6, #0
    3c26:	1c22      	adds	r2, r4, #0
    3c28:	1c28      	adds	r0, r5, #0
    3c2a:	f7ff ff35 	bl	3a98 <__multiply>
    3c2e:	1c31      	adds	r1, r6, #0
    3c30:	1c07      	adds	r7, r0, #0
    3c32:	1c28      	adds	r0, r5, #0
    3c34:	f7ff fe87 	bl	3946 <_Bfree>
    3c38:	1c3e      	adds	r6, r7, #0
    3c3a:	e7e8      	b.n	3c0e <__pow5mult+0x56>
    3c3c:	1c28      	adds	r0, r5, #0
    3c3e:	1c21      	adds	r1, r4, #0
    3c40:	1c22      	adds	r2, r4, #0
    3c42:	f7ff ff29 	bl	3a98 <__multiply>
    3c46:	2300      	movs	r3, #0
    3c48:	6020      	str	r0, [r4, #0]
    3c4a:	6003      	str	r3, [r0, #0]
    3c4c:	e7e6      	b.n	3c1c <__pow5mult+0x64>
    3c4e:	1c30      	adds	r0, r6, #0
    3c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	00006608 	.word	0x00006608
    3c58:	00000271 	.word	0x00000271

00003c5c <__lshift>:
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5e:	1c0c      	adds	r4, r1, #0
    3c60:	b085      	sub	sp, #20
    3c62:	9003      	str	r0, [sp, #12]
    3c64:	6920      	ldr	r0, [r4, #16]
    3c66:	1155      	asrs	r5, r2, #5
    3c68:	1828      	adds	r0, r5, r0
    3c6a:	9002      	str	r0, [sp, #8]
    3c6c:	6849      	ldr	r1, [r1, #4]
    3c6e:	3001      	adds	r0, #1
    3c70:	68a3      	ldr	r3, [r4, #8]
    3c72:	1c17      	adds	r7, r2, #0
    3c74:	9000      	str	r0, [sp, #0]
    3c76:	9a00      	ldr	r2, [sp, #0]
    3c78:	429a      	cmp	r2, r3
    3c7a:	dd02      	ble.n	3c82 <__lshift+0x26>
    3c7c:	3101      	adds	r1, #1
    3c7e:	005b      	lsls	r3, r3, #1
    3c80:	e7f9      	b.n	3c76 <__lshift+0x1a>
    3c82:	9803      	ldr	r0, [sp, #12]
    3c84:	f7ff fe27 	bl	38d6 <_Balloc>
    3c88:	1c02      	adds	r2, r0, #0
    3c8a:	1c06      	adds	r6, r0, #0
    3c8c:	3214      	adds	r2, #20
    3c8e:	2300      	movs	r3, #0
    3c90:	42ab      	cmp	r3, r5
    3c92:	da04      	bge.n	3c9e <__lshift+0x42>
    3c94:	0099      	lsls	r1, r3, #2
    3c96:	2000      	movs	r0, #0
    3c98:	5050      	str	r0, [r2, r1]
    3c9a:	3301      	adds	r3, #1
    3c9c:	e7f8      	b.n	3c90 <__lshift+0x34>
    3c9e:	43eb      	mvns	r3, r5
    3ca0:	17db      	asrs	r3, r3, #31
    3ca2:	401d      	ands	r5, r3
    3ca4:	00ad      	lsls	r5, r5, #2
    3ca6:	6920      	ldr	r0, [r4, #16]
    3ca8:	1955      	adds	r5, r2, r5
    3caa:	1c22      	adds	r2, r4, #0
    3cac:	3214      	adds	r2, #20
    3cae:	0083      	lsls	r3, r0, #2
    3cb0:	189b      	adds	r3, r3, r2
    3cb2:	469c      	mov	ip, r3
    3cb4:	231f      	movs	r3, #31
    3cb6:	401f      	ands	r7, r3
    3cb8:	d014      	beq.n	3ce4 <__lshift+0x88>
    3cba:	2320      	movs	r3, #32
    3cbc:	1bdb      	subs	r3, r3, r7
    3cbe:	9301      	str	r3, [sp, #4]
    3cc0:	2300      	movs	r3, #0
    3cc2:	6810      	ldr	r0, [r2, #0]
    3cc4:	1c29      	adds	r1, r5, #0
    3cc6:	40b8      	lsls	r0, r7
    3cc8:	4303      	orrs	r3, r0
    3cca:	c508      	stmia	r5!, {r3}
    3ccc:	ca08      	ldmia	r2!, {r3}
    3cce:	9801      	ldr	r0, [sp, #4]
    3cd0:	40c3      	lsrs	r3, r0
    3cd2:	4594      	cmp	ip, r2
    3cd4:	d8f5      	bhi.n	3cc2 <__lshift+0x66>
    3cd6:	604b      	str	r3, [r1, #4]
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d007      	beq.n	3cec <__lshift+0x90>
    3cdc:	9902      	ldr	r1, [sp, #8]
    3cde:	3102      	adds	r1, #2
    3ce0:	9100      	str	r1, [sp, #0]
    3ce2:	e003      	b.n	3cec <__lshift+0x90>
    3ce4:	ca08      	ldmia	r2!, {r3}
    3ce6:	c508      	stmia	r5!, {r3}
    3ce8:	4594      	cmp	ip, r2
    3cea:	d8fb      	bhi.n	3ce4 <__lshift+0x88>
    3cec:	9b00      	ldr	r3, [sp, #0]
    3cee:	9803      	ldr	r0, [sp, #12]
    3cf0:	3b01      	subs	r3, #1
    3cf2:	6133      	str	r3, [r6, #16]
    3cf4:	1c21      	adds	r1, r4, #0
    3cf6:	f7ff fe26 	bl	3946 <_Bfree>
    3cfa:	1c30      	adds	r0, r6, #0
    3cfc:	b005      	add	sp, #20
    3cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d00 <__mcmp>:
    3d00:	b510      	push	{r4, lr}
    3d02:	6902      	ldr	r2, [r0, #16]
    3d04:	690c      	ldr	r4, [r1, #16]
    3d06:	1c03      	adds	r3, r0, #0
    3d08:	1b10      	subs	r0, r2, r4
    3d0a:	d113      	bne.n	3d34 <__mcmp+0x34>
    3d0c:	1c1a      	adds	r2, r3, #0
    3d0e:	00a0      	lsls	r0, r4, #2
    3d10:	3214      	adds	r2, #20
    3d12:	3114      	adds	r1, #20
    3d14:	1813      	adds	r3, r2, r0
    3d16:	1809      	adds	r1, r1, r0
    3d18:	3b04      	subs	r3, #4
    3d1a:	3904      	subs	r1, #4
    3d1c:	681c      	ldr	r4, [r3, #0]
    3d1e:	6808      	ldr	r0, [r1, #0]
    3d20:	4284      	cmp	r4, r0
    3d22:	d004      	beq.n	3d2e <__mcmp+0x2e>
    3d24:	4284      	cmp	r4, r0
    3d26:	4180      	sbcs	r0, r0
    3d28:	2301      	movs	r3, #1
    3d2a:	4318      	orrs	r0, r3
    3d2c:	e002      	b.n	3d34 <__mcmp+0x34>
    3d2e:	4293      	cmp	r3, r2
    3d30:	d8f2      	bhi.n	3d18 <__mcmp+0x18>
    3d32:	2000      	movs	r0, #0
    3d34:	bd10      	pop	{r4, pc}

00003d36 <__mdiff>:
    3d36:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d38:	1c07      	adds	r7, r0, #0
    3d3a:	b085      	sub	sp, #20
    3d3c:	1c08      	adds	r0, r1, #0
    3d3e:	1c0d      	adds	r5, r1, #0
    3d40:	1c11      	adds	r1, r2, #0
    3d42:	1c14      	adds	r4, r2, #0
    3d44:	f7ff ffdc 	bl	3d00 <__mcmp>
    3d48:	1e06      	subs	r6, r0, #0
    3d4a:	d107      	bne.n	3d5c <__mdiff+0x26>
    3d4c:	1c38      	adds	r0, r7, #0
    3d4e:	1c31      	adds	r1, r6, #0
    3d50:	f7ff fdc1 	bl	38d6 <_Balloc>
    3d54:	2301      	movs	r3, #1
    3d56:	6103      	str	r3, [r0, #16]
    3d58:	6146      	str	r6, [r0, #20]
    3d5a:	e050      	b.n	3dfe <__mdiff+0xc8>
    3d5c:	2800      	cmp	r0, #0
    3d5e:	db01      	blt.n	3d64 <__mdiff+0x2e>
    3d60:	2600      	movs	r6, #0
    3d62:	e003      	b.n	3d6c <__mdiff+0x36>
    3d64:	1c2b      	adds	r3, r5, #0
    3d66:	2601      	movs	r6, #1
    3d68:	1c25      	adds	r5, r4, #0
    3d6a:	1c1c      	adds	r4, r3, #0
    3d6c:	6869      	ldr	r1, [r5, #4]
    3d6e:	1c38      	adds	r0, r7, #0
    3d70:	f7ff fdb1 	bl	38d6 <_Balloc>
    3d74:	692a      	ldr	r2, [r5, #16]
    3d76:	1c2b      	adds	r3, r5, #0
    3d78:	3314      	adds	r3, #20
    3d7a:	0091      	lsls	r1, r2, #2
    3d7c:	1859      	adds	r1, r3, r1
    3d7e:	9102      	str	r1, [sp, #8]
    3d80:	6921      	ldr	r1, [r4, #16]
    3d82:	1c25      	adds	r5, r4, #0
    3d84:	3514      	adds	r5, #20
    3d86:	0089      	lsls	r1, r1, #2
    3d88:	1869      	adds	r1, r5, r1
    3d8a:	1c04      	adds	r4, r0, #0
    3d8c:	9103      	str	r1, [sp, #12]
    3d8e:	60c6      	str	r6, [r0, #12]
    3d90:	3414      	adds	r4, #20
    3d92:	2100      	movs	r1, #0
    3d94:	cb40      	ldmia	r3!, {r6}
    3d96:	cd80      	ldmia	r5!, {r7}
    3d98:	46b4      	mov	ip, r6
    3d9a:	b2b6      	uxth	r6, r6
    3d9c:	1871      	adds	r1, r6, r1
    3d9e:	b2be      	uxth	r6, r7
    3da0:	1b8e      	subs	r6, r1, r6
    3da2:	4661      	mov	r1, ip
    3da4:	9601      	str	r6, [sp, #4]
    3da6:	0c3f      	lsrs	r7, r7, #16
    3da8:	0c0e      	lsrs	r6, r1, #16
    3daa:	1bf7      	subs	r7, r6, r7
    3dac:	9e01      	ldr	r6, [sp, #4]
    3dae:	3404      	adds	r4, #4
    3db0:	1431      	asrs	r1, r6, #16
    3db2:	187f      	adds	r7, r7, r1
    3db4:	1439      	asrs	r1, r7, #16
    3db6:	043f      	lsls	r7, r7, #16
    3db8:	9700      	str	r7, [sp, #0]
    3dba:	9f01      	ldr	r7, [sp, #4]
    3dbc:	1f26      	subs	r6, r4, #4
    3dbe:	46b4      	mov	ip, r6
    3dc0:	b2be      	uxth	r6, r7
    3dc2:	9f00      	ldr	r7, [sp, #0]
    3dc4:	4337      	orrs	r7, r6
    3dc6:	4666      	mov	r6, ip
    3dc8:	6037      	str	r7, [r6, #0]
    3dca:	9f03      	ldr	r7, [sp, #12]
    3dcc:	42bd      	cmp	r5, r7
    3dce:	d3e1      	bcc.n	3d94 <__mdiff+0x5e>
    3dd0:	9e02      	ldr	r6, [sp, #8]
    3dd2:	1c25      	adds	r5, r4, #0
    3dd4:	42b3      	cmp	r3, r6
    3dd6:	d20b      	bcs.n	3df0 <__mdiff+0xba>
    3dd8:	cb80      	ldmia	r3!, {r7}
    3dda:	b2bd      	uxth	r5, r7
    3ddc:	186d      	adds	r5, r5, r1
    3dde:	142e      	asrs	r6, r5, #16
    3de0:	0c3f      	lsrs	r7, r7, #16
    3de2:	19f6      	adds	r6, r6, r7
    3de4:	1431      	asrs	r1, r6, #16
    3de6:	b2ad      	uxth	r5, r5
    3de8:	0436      	lsls	r6, r6, #16
    3dea:	4335      	orrs	r5, r6
    3dec:	c420      	stmia	r4!, {r5}
    3dee:	e7ef      	b.n	3dd0 <__mdiff+0x9a>
    3df0:	3d04      	subs	r5, #4
    3df2:	682f      	ldr	r7, [r5, #0]
    3df4:	2f00      	cmp	r7, #0
    3df6:	d101      	bne.n	3dfc <__mdiff+0xc6>
    3df8:	3a01      	subs	r2, #1
    3dfa:	e7f9      	b.n	3df0 <__mdiff+0xba>
    3dfc:	6102      	str	r2, [r0, #16]
    3dfe:	b005      	add	sp, #20
    3e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00003e04 <__d2b>:
    3e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e06:	2101      	movs	r1, #1
    3e08:	1c1d      	adds	r5, r3, #0
    3e0a:	1c14      	adds	r4, r2, #0
    3e0c:	f7ff fd63 	bl	38d6 <_Balloc>
    3e10:	006f      	lsls	r7, r5, #1
    3e12:	032b      	lsls	r3, r5, #12
    3e14:	1c06      	adds	r6, r0, #0
    3e16:	0b1b      	lsrs	r3, r3, #12
    3e18:	0d7f      	lsrs	r7, r7, #21
    3e1a:	d002      	beq.n	3e22 <__d2b+0x1e>
    3e1c:	2280      	movs	r2, #128	; 0x80
    3e1e:	0352      	lsls	r2, r2, #13
    3e20:	4313      	orrs	r3, r2
    3e22:	9301      	str	r3, [sp, #4]
    3e24:	2c00      	cmp	r4, #0
    3e26:	d019      	beq.n	3e5c <__d2b+0x58>
    3e28:	4668      	mov	r0, sp
    3e2a:	9400      	str	r4, [sp, #0]
    3e2c:	f7ff fdfe 	bl	3a2c <__lo0bits>
    3e30:	9a00      	ldr	r2, [sp, #0]
    3e32:	2800      	cmp	r0, #0
    3e34:	d009      	beq.n	3e4a <__d2b+0x46>
    3e36:	9b01      	ldr	r3, [sp, #4]
    3e38:	2120      	movs	r1, #32
    3e3a:	1c1c      	adds	r4, r3, #0
    3e3c:	1a09      	subs	r1, r1, r0
    3e3e:	408c      	lsls	r4, r1
    3e40:	4322      	orrs	r2, r4
    3e42:	40c3      	lsrs	r3, r0
    3e44:	6172      	str	r2, [r6, #20]
    3e46:	9301      	str	r3, [sp, #4]
    3e48:	e000      	b.n	3e4c <__d2b+0x48>
    3e4a:	6172      	str	r2, [r6, #20]
    3e4c:	9c01      	ldr	r4, [sp, #4]
    3e4e:	61b4      	str	r4, [r6, #24]
    3e50:	4263      	negs	r3, r4
    3e52:	4163      	adcs	r3, r4
    3e54:	2402      	movs	r4, #2
    3e56:	1ae4      	subs	r4, r4, r3
    3e58:	6134      	str	r4, [r6, #16]
    3e5a:	e007      	b.n	3e6c <__d2b+0x68>
    3e5c:	a801      	add	r0, sp, #4
    3e5e:	f7ff fde5 	bl	3a2c <__lo0bits>
    3e62:	9901      	ldr	r1, [sp, #4]
    3e64:	2401      	movs	r4, #1
    3e66:	6171      	str	r1, [r6, #20]
    3e68:	6134      	str	r4, [r6, #16]
    3e6a:	3020      	adds	r0, #32
    3e6c:	2f00      	cmp	r7, #0
    3e6e:	d009      	beq.n	3e84 <__d2b+0x80>
    3e70:	4a0d      	ldr	r2, [pc, #52]	; (3ea8 <__d2b+0xa4>)
    3e72:	9c08      	ldr	r4, [sp, #32]
    3e74:	18bf      	adds	r7, r7, r2
    3e76:	183f      	adds	r7, r7, r0
    3e78:	6027      	str	r7, [r4, #0]
    3e7a:	2335      	movs	r3, #53	; 0x35
    3e7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    3e7e:	1a18      	subs	r0, r3, r0
    3e80:	6020      	str	r0, [r4, #0]
    3e82:	e00e      	b.n	3ea2 <__d2b+0x9e>
    3e84:	4909      	ldr	r1, [pc, #36]	; (3eac <__d2b+0xa8>)
    3e86:	9a08      	ldr	r2, [sp, #32]
    3e88:	1840      	adds	r0, r0, r1
    3e8a:	4909      	ldr	r1, [pc, #36]	; (3eb0 <__d2b+0xac>)
    3e8c:	6010      	str	r0, [r2, #0]
    3e8e:	1863      	adds	r3, r4, r1
    3e90:	009b      	lsls	r3, r3, #2
    3e92:	18f3      	adds	r3, r6, r3
    3e94:	6958      	ldr	r0, [r3, #20]
    3e96:	f7ff fdad 	bl	39f4 <__hi0bits>
    3e9a:	0164      	lsls	r4, r4, #5
    3e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e9e:	1a24      	subs	r4, r4, r0
    3ea0:	6014      	str	r4, [r2, #0]
    3ea2:	1c30      	adds	r0, r6, #0
    3ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ea6:	46c0      	nop			; (mov r8, r8)
    3ea8:	fffffbcd 	.word	0xfffffbcd
    3eac:	fffffbce 	.word	0xfffffbce
    3eb0:	3fffffff 	.word	0x3fffffff

00003eb4 <_calloc_r>:
    3eb4:	b538      	push	{r3, r4, r5, lr}
    3eb6:	1c15      	adds	r5, r2, #0
    3eb8:	434d      	muls	r5, r1
    3eba:	1c29      	adds	r1, r5, #0
    3ebc:	f000 f850 	bl	3f60 <_malloc_r>
    3ec0:	1e04      	subs	r4, r0, #0
    3ec2:	d003      	beq.n	3ecc <_calloc_r+0x18>
    3ec4:	2100      	movs	r1, #0
    3ec6:	1c2a      	adds	r2, r5, #0
    3ec8:	f7fd fdb7 	bl	1a3a <memset>
    3ecc:	1c20      	adds	r0, r4, #0
    3ece:	bd38      	pop	{r3, r4, r5, pc}

00003ed0 <_free_r>:
    3ed0:	b530      	push	{r4, r5, lr}
    3ed2:	2900      	cmp	r1, #0
    3ed4:	d040      	beq.n	3f58 <_free_r+0x88>
    3ed6:	3904      	subs	r1, #4
    3ed8:	680b      	ldr	r3, [r1, #0]
    3eda:	2b00      	cmp	r3, #0
    3edc:	da00      	bge.n	3ee0 <_free_r+0x10>
    3ede:	18c9      	adds	r1, r1, r3
    3ee0:	4a1e      	ldr	r2, [pc, #120]	; (3f5c <_free_r+0x8c>)
    3ee2:	6813      	ldr	r3, [r2, #0]
    3ee4:	1c14      	adds	r4, r2, #0
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d102      	bne.n	3ef0 <_free_r+0x20>
    3eea:	604b      	str	r3, [r1, #4]
    3eec:	6011      	str	r1, [r2, #0]
    3eee:	e033      	b.n	3f58 <_free_r+0x88>
    3ef0:	4299      	cmp	r1, r3
    3ef2:	d20f      	bcs.n	3f14 <_free_r+0x44>
    3ef4:	6808      	ldr	r0, [r1, #0]
    3ef6:	180a      	adds	r2, r1, r0
    3ef8:	429a      	cmp	r2, r3
    3efa:	d105      	bne.n	3f08 <_free_r+0x38>
    3efc:	6813      	ldr	r3, [r2, #0]
    3efe:	6852      	ldr	r2, [r2, #4]
    3f00:	18c0      	adds	r0, r0, r3
    3f02:	6008      	str	r0, [r1, #0]
    3f04:	604a      	str	r2, [r1, #4]
    3f06:	e000      	b.n	3f0a <_free_r+0x3a>
    3f08:	604b      	str	r3, [r1, #4]
    3f0a:	6021      	str	r1, [r4, #0]
    3f0c:	e024      	b.n	3f58 <_free_r+0x88>
    3f0e:	428a      	cmp	r2, r1
    3f10:	d803      	bhi.n	3f1a <_free_r+0x4a>
    3f12:	1c13      	adds	r3, r2, #0
    3f14:	685a      	ldr	r2, [r3, #4]
    3f16:	2a00      	cmp	r2, #0
    3f18:	d1f9      	bne.n	3f0e <_free_r+0x3e>
    3f1a:	681d      	ldr	r5, [r3, #0]
    3f1c:	195c      	adds	r4, r3, r5
    3f1e:	428c      	cmp	r4, r1
    3f20:	d10b      	bne.n	3f3a <_free_r+0x6a>
    3f22:	6809      	ldr	r1, [r1, #0]
    3f24:	1869      	adds	r1, r5, r1
    3f26:	1858      	adds	r0, r3, r1
    3f28:	6019      	str	r1, [r3, #0]
    3f2a:	4290      	cmp	r0, r2
    3f2c:	d114      	bne.n	3f58 <_free_r+0x88>
    3f2e:	6814      	ldr	r4, [r2, #0]
    3f30:	6852      	ldr	r2, [r2, #4]
    3f32:	1909      	adds	r1, r1, r4
    3f34:	6019      	str	r1, [r3, #0]
    3f36:	605a      	str	r2, [r3, #4]
    3f38:	e00e      	b.n	3f58 <_free_r+0x88>
    3f3a:	428c      	cmp	r4, r1
    3f3c:	d902      	bls.n	3f44 <_free_r+0x74>
    3f3e:	230c      	movs	r3, #12
    3f40:	6003      	str	r3, [r0, #0]
    3f42:	e009      	b.n	3f58 <_free_r+0x88>
    3f44:	6808      	ldr	r0, [r1, #0]
    3f46:	180c      	adds	r4, r1, r0
    3f48:	4294      	cmp	r4, r2
    3f4a:	d103      	bne.n	3f54 <_free_r+0x84>
    3f4c:	6814      	ldr	r4, [r2, #0]
    3f4e:	6852      	ldr	r2, [r2, #4]
    3f50:	1900      	adds	r0, r0, r4
    3f52:	6008      	str	r0, [r1, #0]
    3f54:	604a      	str	r2, [r1, #4]
    3f56:	6059      	str	r1, [r3, #4]
    3f58:	bd30      	pop	{r4, r5, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	20000138 	.word	0x20000138

00003f60 <_malloc_r>:
    3f60:	b570      	push	{r4, r5, r6, lr}
    3f62:	2303      	movs	r3, #3
    3f64:	1ccd      	adds	r5, r1, #3
    3f66:	439d      	bics	r5, r3
    3f68:	3508      	adds	r5, #8
    3f6a:	1c06      	adds	r6, r0, #0
    3f6c:	2d0c      	cmp	r5, #12
    3f6e:	d201      	bcs.n	3f74 <_malloc_r+0x14>
    3f70:	250c      	movs	r5, #12
    3f72:	e001      	b.n	3f78 <_malloc_r+0x18>
    3f74:	2d00      	cmp	r5, #0
    3f76:	db3f      	blt.n	3ff8 <_malloc_r+0x98>
    3f78:	428d      	cmp	r5, r1
    3f7a:	d33d      	bcc.n	3ff8 <_malloc_r+0x98>
    3f7c:	4b20      	ldr	r3, [pc, #128]	; (4000 <_malloc_r+0xa0>)
    3f7e:	681c      	ldr	r4, [r3, #0]
    3f80:	1c1a      	adds	r2, r3, #0
    3f82:	1c21      	adds	r1, r4, #0
    3f84:	2900      	cmp	r1, #0
    3f86:	d013      	beq.n	3fb0 <_malloc_r+0x50>
    3f88:	6808      	ldr	r0, [r1, #0]
    3f8a:	1b43      	subs	r3, r0, r5
    3f8c:	d40d      	bmi.n	3faa <_malloc_r+0x4a>
    3f8e:	2b0b      	cmp	r3, #11
    3f90:	d902      	bls.n	3f98 <_malloc_r+0x38>
    3f92:	600b      	str	r3, [r1, #0]
    3f94:	18cc      	adds	r4, r1, r3
    3f96:	e01e      	b.n	3fd6 <_malloc_r+0x76>
    3f98:	428c      	cmp	r4, r1
    3f9a:	d102      	bne.n	3fa2 <_malloc_r+0x42>
    3f9c:	6863      	ldr	r3, [r4, #4]
    3f9e:	6013      	str	r3, [r2, #0]
    3fa0:	e01a      	b.n	3fd8 <_malloc_r+0x78>
    3fa2:	6848      	ldr	r0, [r1, #4]
    3fa4:	6060      	str	r0, [r4, #4]
    3fa6:	1c0c      	adds	r4, r1, #0
    3fa8:	e016      	b.n	3fd8 <_malloc_r+0x78>
    3faa:	1c0c      	adds	r4, r1, #0
    3fac:	6849      	ldr	r1, [r1, #4]
    3fae:	e7e9      	b.n	3f84 <_malloc_r+0x24>
    3fb0:	4c14      	ldr	r4, [pc, #80]	; (4004 <_malloc_r+0xa4>)
    3fb2:	6820      	ldr	r0, [r4, #0]
    3fb4:	2800      	cmp	r0, #0
    3fb6:	d103      	bne.n	3fc0 <_malloc_r+0x60>
    3fb8:	1c30      	adds	r0, r6, #0
    3fba:	f000 f84f 	bl	405c <_sbrk_r>
    3fbe:	6020      	str	r0, [r4, #0]
    3fc0:	1c30      	adds	r0, r6, #0
    3fc2:	1c29      	adds	r1, r5, #0
    3fc4:	f000 f84a 	bl	405c <_sbrk_r>
    3fc8:	1c43      	adds	r3, r0, #1
    3fca:	d015      	beq.n	3ff8 <_malloc_r+0x98>
    3fcc:	1cc4      	adds	r4, r0, #3
    3fce:	2303      	movs	r3, #3
    3fd0:	439c      	bics	r4, r3
    3fd2:	4284      	cmp	r4, r0
    3fd4:	d10a      	bne.n	3fec <_malloc_r+0x8c>
    3fd6:	6025      	str	r5, [r4, #0]
    3fd8:	1c20      	adds	r0, r4, #0
    3fda:	300b      	adds	r0, #11
    3fdc:	2207      	movs	r2, #7
    3fde:	1d23      	adds	r3, r4, #4
    3fe0:	4390      	bics	r0, r2
    3fe2:	1ac3      	subs	r3, r0, r3
    3fe4:	d00b      	beq.n	3ffe <_malloc_r+0x9e>
    3fe6:	425a      	negs	r2, r3
    3fe8:	50e2      	str	r2, [r4, r3]
    3fea:	e008      	b.n	3ffe <_malloc_r+0x9e>
    3fec:	1a21      	subs	r1, r4, r0
    3fee:	1c30      	adds	r0, r6, #0
    3ff0:	f000 f834 	bl	405c <_sbrk_r>
    3ff4:	3001      	adds	r0, #1
    3ff6:	d1ee      	bne.n	3fd6 <_malloc_r+0x76>
    3ff8:	230c      	movs	r3, #12
    3ffa:	6033      	str	r3, [r6, #0]
    3ffc:	2000      	movs	r0, #0
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
    4000:	20000138 	.word	0x20000138
    4004:	20000134 	.word	0x20000134

00004008 <__fpclassifyd>:
    4008:	b530      	push	{r4, r5, lr}
    400a:	1c0b      	adds	r3, r1, #0
    400c:	1c04      	adds	r4, r0, #0
    400e:	1c02      	adds	r2, r0, #0
    4010:	431c      	orrs	r4, r3
    4012:	2002      	movs	r0, #2
    4014:	2c00      	cmp	r4, #0
    4016:	d017      	beq.n	4048 <__fpclassifyd+0x40>
    4018:	2480      	movs	r4, #128	; 0x80
    401a:	0624      	lsls	r4, r4, #24
    401c:	42a3      	cmp	r3, r4
    401e:	d101      	bne.n	4024 <__fpclassifyd+0x1c>
    4020:	2a00      	cmp	r2, #0
    4022:	d011      	beq.n	4048 <__fpclassifyd+0x40>
    4024:	4809      	ldr	r0, [pc, #36]	; (404c <__fpclassifyd+0x44>)
    4026:	0059      	lsls	r1, r3, #1
    4028:	0849      	lsrs	r1, r1, #1
    402a:	4c09      	ldr	r4, [pc, #36]	; (4050 <__fpclassifyd+0x48>)
    402c:	180d      	adds	r5, r1, r0
    402e:	2004      	movs	r0, #4
    4030:	42a5      	cmp	r5, r4
    4032:	d909      	bls.n	4048 <__fpclassifyd+0x40>
    4034:	4c07      	ldr	r4, [pc, #28]	; (4054 <__fpclassifyd+0x4c>)
    4036:	2003      	movs	r0, #3
    4038:	42a1      	cmp	r1, r4
    403a:	d905      	bls.n	4048 <__fpclassifyd+0x40>
    403c:	4c06      	ldr	r4, [pc, #24]	; (4058 <__fpclassifyd+0x50>)
    403e:	2000      	movs	r0, #0
    4040:	42a1      	cmp	r1, r4
    4042:	d101      	bne.n	4048 <__fpclassifyd+0x40>
    4044:	4250      	negs	r0, r2
    4046:	4150      	adcs	r0, r2
    4048:	bd30      	pop	{r4, r5, pc}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	fff00000 	.word	0xfff00000
    4050:	7fdfffff 	.word	0x7fdfffff
    4054:	000fffff 	.word	0x000fffff
    4058:	7ff00000 	.word	0x7ff00000

0000405c <_sbrk_r>:
    405c:	b538      	push	{r3, r4, r5, lr}
    405e:	4c07      	ldr	r4, [pc, #28]	; (407c <_sbrk_r+0x20>)
    4060:	2300      	movs	r3, #0
    4062:	1c05      	adds	r5, r0, #0
    4064:	1c08      	adds	r0, r1, #0
    4066:	6023      	str	r3, [r4, #0]
    4068:	f7fd fb48 	bl	16fc <_sbrk>
    406c:	1c43      	adds	r3, r0, #1
    406e:	d103      	bne.n	4078 <_sbrk_r+0x1c>
    4070:	6823      	ldr	r3, [r4, #0]
    4072:	2b00      	cmp	r3, #0
    4074:	d000      	beq.n	4078 <_sbrk_r+0x1c>
    4076:	602b      	str	r3, [r5, #0]
    4078:	bd38      	pop	{r3, r4, r5, pc}
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	20000168 	.word	0x20000168

00004080 <__sread>:
    4080:	b538      	push	{r3, r4, r5, lr}
    4082:	1c0c      	adds	r4, r1, #0
    4084:	250e      	movs	r5, #14
    4086:	5f49      	ldrsh	r1, [r1, r5]
    4088:	f000 f8ac 	bl	41e4 <_read_r>
    408c:	2800      	cmp	r0, #0
    408e:	db03      	blt.n	4098 <__sread+0x18>
    4090:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4092:	1813      	adds	r3, r2, r0
    4094:	6563      	str	r3, [r4, #84]	; 0x54
    4096:	e003      	b.n	40a0 <__sread+0x20>
    4098:	89a2      	ldrh	r2, [r4, #12]
    409a:	4b02      	ldr	r3, [pc, #8]	; (40a4 <__sread+0x24>)
    409c:	4013      	ands	r3, r2
    409e:	81a3      	strh	r3, [r4, #12]
    40a0:	bd38      	pop	{r3, r4, r5, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	ffffefff 	.word	0xffffefff

000040a8 <__swrite>:
    40a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40aa:	1c1e      	adds	r6, r3, #0
    40ac:	898b      	ldrh	r3, [r1, #12]
    40ae:	1c05      	adds	r5, r0, #0
    40b0:	1c0c      	adds	r4, r1, #0
    40b2:	1c17      	adds	r7, r2, #0
    40b4:	05da      	lsls	r2, r3, #23
    40b6:	d505      	bpl.n	40c4 <__swrite+0x1c>
    40b8:	230e      	movs	r3, #14
    40ba:	5ec9      	ldrsh	r1, [r1, r3]
    40bc:	2200      	movs	r2, #0
    40be:	2302      	movs	r3, #2
    40c0:	f000 f87c 	bl	41bc <_lseek_r>
    40c4:	89a2      	ldrh	r2, [r4, #12]
    40c6:	4b05      	ldr	r3, [pc, #20]	; (40dc <__swrite+0x34>)
    40c8:	1c28      	adds	r0, r5, #0
    40ca:	4013      	ands	r3, r2
    40cc:	81a3      	strh	r3, [r4, #12]
    40ce:	220e      	movs	r2, #14
    40d0:	5ea1      	ldrsh	r1, [r4, r2]
    40d2:	1c33      	adds	r3, r6, #0
    40d4:	1c3a      	adds	r2, r7, #0
    40d6:	f000 f827 	bl	4128 <_write_r>
    40da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40dc:	ffffefff 	.word	0xffffefff

000040e0 <__sseek>:
    40e0:	b538      	push	{r3, r4, r5, lr}
    40e2:	1c0c      	adds	r4, r1, #0
    40e4:	250e      	movs	r5, #14
    40e6:	5f49      	ldrsh	r1, [r1, r5]
    40e8:	f000 f868 	bl	41bc <_lseek_r>
    40ec:	89a3      	ldrh	r3, [r4, #12]
    40ee:	1c42      	adds	r2, r0, #1
    40f0:	d103      	bne.n	40fa <__sseek+0x1a>
    40f2:	4a05      	ldr	r2, [pc, #20]	; (4108 <__sseek+0x28>)
    40f4:	4013      	ands	r3, r2
    40f6:	81a3      	strh	r3, [r4, #12]
    40f8:	e004      	b.n	4104 <__sseek+0x24>
    40fa:	2280      	movs	r2, #128	; 0x80
    40fc:	0152      	lsls	r2, r2, #5
    40fe:	4313      	orrs	r3, r2
    4100:	81a3      	strh	r3, [r4, #12]
    4102:	6560      	str	r0, [r4, #84]	; 0x54
    4104:	bd38      	pop	{r3, r4, r5, pc}
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	ffffefff 	.word	0xffffefff

0000410c <__sclose>:
    410c:	b508      	push	{r3, lr}
    410e:	230e      	movs	r3, #14
    4110:	5ec9      	ldrsh	r1, [r1, r3]
    4112:	f000 f81d 	bl	4150 <_close_r>
    4116:	bd08      	pop	{r3, pc}

00004118 <strlen>:
    4118:	2300      	movs	r3, #0
    411a:	5cc2      	ldrb	r2, [r0, r3]
    411c:	3301      	adds	r3, #1
    411e:	2a00      	cmp	r2, #0
    4120:	d1fb      	bne.n	411a <strlen+0x2>
    4122:	1e58      	subs	r0, r3, #1
    4124:	4770      	bx	lr
	...

00004128 <_write_r>:
    4128:	b538      	push	{r3, r4, r5, lr}
    412a:	4c08      	ldr	r4, [pc, #32]	; (414c <_write_r+0x24>)
    412c:	1c05      	adds	r5, r0, #0
    412e:	2000      	movs	r0, #0
    4130:	6020      	str	r0, [r4, #0]
    4132:	1c08      	adds	r0, r1, #0
    4134:	1c11      	adds	r1, r2, #0
    4136:	1c1a      	adds	r2, r3, #0
    4138:	f7fc fa02 	bl	540 <_write>
    413c:	1c43      	adds	r3, r0, #1
    413e:	d103      	bne.n	4148 <_write_r+0x20>
    4140:	6823      	ldr	r3, [r4, #0]
    4142:	2b00      	cmp	r3, #0
    4144:	d000      	beq.n	4148 <_write_r+0x20>
    4146:	602b      	str	r3, [r5, #0]
    4148:	bd38      	pop	{r3, r4, r5, pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	20000168 	.word	0x20000168

00004150 <_close_r>:
    4150:	b538      	push	{r3, r4, r5, lr}
    4152:	4c07      	ldr	r4, [pc, #28]	; (4170 <_close_r+0x20>)
    4154:	2300      	movs	r3, #0
    4156:	1c05      	adds	r5, r0, #0
    4158:	1c08      	adds	r0, r1, #0
    415a:	6023      	str	r3, [r4, #0]
    415c:	f7fd fae0 	bl	1720 <_close>
    4160:	1c43      	adds	r3, r0, #1
    4162:	d103      	bne.n	416c <_close_r+0x1c>
    4164:	6823      	ldr	r3, [r4, #0]
    4166:	2b00      	cmp	r3, #0
    4168:	d000      	beq.n	416c <_close_r+0x1c>
    416a:	602b      	str	r3, [r5, #0]
    416c:	bd38      	pop	{r3, r4, r5, pc}
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	20000168 	.word	0x20000168

00004174 <_fstat_r>:
    4174:	b538      	push	{r3, r4, r5, lr}
    4176:	4c07      	ldr	r4, [pc, #28]	; (4194 <_fstat_r+0x20>)
    4178:	2300      	movs	r3, #0
    417a:	1c05      	adds	r5, r0, #0
    417c:	1c08      	adds	r0, r1, #0
    417e:	1c11      	adds	r1, r2, #0
    4180:	6023      	str	r3, [r4, #0]
    4182:	f7fd fad1 	bl	1728 <_fstat>
    4186:	1c43      	adds	r3, r0, #1
    4188:	d103      	bne.n	4192 <_fstat_r+0x1e>
    418a:	6823      	ldr	r3, [r4, #0]
    418c:	2b00      	cmp	r3, #0
    418e:	d000      	beq.n	4192 <_fstat_r+0x1e>
    4190:	602b      	str	r3, [r5, #0]
    4192:	bd38      	pop	{r3, r4, r5, pc}
    4194:	20000168 	.word	0x20000168

00004198 <_isatty_r>:
    4198:	b538      	push	{r3, r4, r5, lr}
    419a:	4c07      	ldr	r4, [pc, #28]	; (41b8 <_isatty_r+0x20>)
    419c:	2300      	movs	r3, #0
    419e:	1c05      	adds	r5, r0, #0
    41a0:	1c08      	adds	r0, r1, #0
    41a2:	6023      	str	r3, [r4, #0]
    41a4:	f7fd fac6 	bl	1734 <_isatty>
    41a8:	1c43      	adds	r3, r0, #1
    41aa:	d103      	bne.n	41b4 <_isatty_r+0x1c>
    41ac:	6823      	ldr	r3, [r4, #0]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d000      	beq.n	41b4 <_isatty_r+0x1c>
    41b2:	602b      	str	r3, [r5, #0]
    41b4:	bd38      	pop	{r3, r4, r5, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	20000168 	.word	0x20000168

000041bc <_lseek_r>:
    41bc:	b538      	push	{r3, r4, r5, lr}
    41be:	4c08      	ldr	r4, [pc, #32]	; (41e0 <_lseek_r+0x24>)
    41c0:	1c05      	adds	r5, r0, #0
    41c2:	2000      	movs	r0, #0
    41c4:	6020      	str	r0, [r4, #0]
    41c6:	1c08      	adds	r0, r1, #0
    41c8:	1c11      	adds	r1, r2, #0
    41ca:	1c1a      	adds	r2, r3, #0
    41cc:	f7fd fab4 	bl	1738 <_lseek>
    41d0:	1c43      	adds	r3, r0, #1
    41d2:	d103      	bne.n	41dc <_lseek_r+0x20>
    41d4:	6823      	ldr	r3, [r4, #0]
    41d6:	2b00      	cmp	r3, #0
    41d8:	d000      	beq.n	41dc <_lseek_r+0x20>
    41da:	602b      	str	r3, [r5, #0]
    41dc:	bd38      	pop	{r3, r4, r5, pc}
    41de:	46c0      	nop			; (mov r8, r8)
    41e0:	20000168 	.word	0x20000168

000041e4 <_read_r>:
    41e4:	b538      	push	{r3, r4, r5, lr}
    41e6:	4c08      	ldr	r4, [pc, #32]	; (4208 <_read_r+0x24>)
    41e8:	1c05      	adds	r5, r0, #0
    41ea:	2000      	movs	r0, #0
    41ec:	6020      	str	r0, [r4, #0]
    41ee:	1c08      	adds	r0, r1, #0
    41f0:	1c11      	adds	r1, r2, #0
    41f2:	1c1a      	adds	r2, r3, #0
    41f4:	f7fc f982 	bl	4fc <_read>
    41f8:	1c43      	adds	r3, r0, #1
    41fa:	d103      	bne.n	4204 <_read_r+0x20>
    41fc:	6823      	ldr	r3, [r4, #0]
    41fe:	2b00      	cmp	r3, #0
    4200:	d000      	beq.n	4204 <_read_r+0x20>
    4202:	602b      	str	r3, [r5, #0]
    4204:	bd38      	pop	{r3, r4, r5, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	20000168 	.word	0x20000168

0000420c <__gnu_thumb1_case_uqi>:
    420c:	b402      	push	{r1}
    420e:	4671      	mov	r1, lr
    4210:	0849      	lsrs	r1, r1, #1
    4212:	0049      	lsls	r1, r1, #1
    4214:	5c09      	ldrb	r1, [r1, r0]
    4216:	0049      	lsls	r1, r1, #1
    4218:	448e      	add	lr, r1
    421a:	bc02      	pop	{r1}
    421c:	4770      	bx	lr
    421e:	46c0      	nop			; (mov r8, r8)

00004220 <__aeabi_uidiv>:
    4220:	2900      	cmp	r1, #0
    4222:	d034      	beq.n	428e <.udivsi3_skip_div0_test+0x6a>

00004224 <.udivsi3_skip_div0_test>:
    4224:	2301      	movs	r3, #1
    4226:	2200      	movs	r2, #0
    4228:	b410      	push	{r4}
    422a:	4288      	cmp	r0, r1
    422c:	d32c      	bcc.n	4288 <.udivsi3_skip_div0_test+0x64>
    422e:	2401      	movs	r4, #1
    4230:	0724      	lsls	r4, r4, #28
    4232:	42a1      	cmp	r1, r4
    4234:	d204      	bcs.n	4240 <.udivsi3_skip_div0_test+0x1c>
    4236:	4281      	cmp	r1, r0
    4238:	d202      	bcs.n	4240 <.udivsi3_skip_div0_test+0x1c>
    423a:	0109      	lsls	r1, r1, #4
    423c:	011b      	lsls	r3, r3, #4
    423e:	e7f8      	b.n	4232 <.udivsi3_skip_div0_test+0xe>
    4240:	00e4      	lsls	r4, r4, #3
    4242:	42a1      	cmp	r1, r4
    4244:	d204      	bcs.n	4250 <.udivsi3_skip_div0_test+0x2c>
    4246:	4281      	cmp	r1, r0
    4248:	d202      	bcs.n	4250 <.udivsi3_skip_div0_test+0x2c>
    424a:	0049      	lsls	r1, r1, #1
    424c:	005b      	lsls	r3, r3, #1
    424e:	e7f8      	b.n	4242 <.udivsi3_skip_div0_test+0x1e>
    4250:	4288      	cmp	r0, r1
    4252:	d301      	bcc.n	4258 <.udivsi3_skip_div0_test+0x34>
    4254:	1a40      	subs	r0, r0, r1
    4256:	431a      	orrs	r2, r3
    4258:	084c      	lsrs	r4, r1, #1
    425a:	42a0      	cmp	r0, r4
    425c:	d302      	bcc.n	4264 <.udivsi3_skip_div0_test+0x40>
    425e:	1b00      	subs	r0, r0, r4
    4260:	085c      	lsrs	r4, r3, #1
    4262:	4322      	orrs	r2, r4
    4264:	088c      	lsrs	r4, r1, #2
    4266:	42a0      	cmp	r0, r4
    4268:	d302      	bcc.n	4270 <.udivsi3_skip_div0_test+0x4c>
    426a:	1b00      	subs	r0, r0, r4
    426c:	089c      	lsrs	r4, r3, #2
    426e:	4322      	orrs	r2, r4
    4270:	08cc      	lsrs	r4, r1, #3
    4272:	42a0      	cmp	r0, r4
    4274:	d302      	bcc.n	427c <.udivsi3_skip_div0_test+0x58>
    4276:	1b00      	subs	r0, r0, r4
    4278:	08dc      	lsrs	r4, r3, #3
    427a:	4322      	orrs	r2, r4
    427c:	2800      	cmp	r0, #0
    427e:	d003      	beq.n	4288 <.udivsi3_skip_div0_test+0x64>
    4280:	091b      	lsrs	r3, r3, #4
    4282:	d001      	beq.n	4288 <.udivsi3_skip_div0_test+0x64>
    4284:	0909      	lsrs	r1, r1, #4
    4286:	e7e3      	b.n	4250 <.udivsi3_skip_div0_test+0x2c>
    4288:	1c10      	adds	r0, r2, #0
    428a:	bc10      	pop	{r4}
    428c:	4770      	bx	lr
    428e:	2800      	cmp	r0, #0
    4290:	d001      	beq.n	4296 <.udivsi3_skip_div0_test+0x72>
    4292:	2000      	movs	r0, #0
    4294:	43c0      	mvns	r0, r0
    4296:	b407      	push	{r0, r1, r2}
    4298:	4802      	ldr	r0, [pc, #8]	; (42a4 <.udivsi3_skip_div0_test+0x80>)
    429a:	a102      	add	r1, pc, #8	; (adr r1, 42a4 <.udivsi3_skip_div0_test+0x80>)
    429c:	1840      	adds	r0, r0, r1
    429e:	9002      	str	r0, [sp, #8]
    42a0:	bd03      	pop	{r0, r1, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	000000d9 	.word	0x000000d9

000042a8 <__aeabi_uidivmod>:
    42a8:	2900      	cmp	r1, #0
    42aa:	d0f0      	beq.n	428e <.udivsi3_skip_div0_test+0x6a>
    42ac:	b503      	push	{r0, r1, lr}
    42ae:	f7ff ffb9 	bl	4224 <.udivsi3_skip_div0_test>
    42b2:	bc0e      	pop	{r1, r2, r3}
    42b4:	4342      	muls	r2, r0
    42b6:	1a89      	subs	r1, r1, r2
    42b8:	4718      	bx	r3
    42ba:	46c0      	nop			; (mov r8, r8)

000042bc <__aeabi_idiv>:
    42bc:	2900      	cmp	r1, #0
    42be:	d041      	beq.n	4344 <.divsi3_skip_div0_test+0x84>

000042c0 <.divsi3_skip_div0_test>:
    42c0:	b410      	push	{r4}
    42c2:	1c04      	adds	r4, r0, #0
    42c4:	404c      	eors	r4, r1
    42c6:	46a4      	mov	ip, r4
    42c8:	2301      	movs	r3, #1
    42ca:	2200      	movs	r2, #0
    42cc:	2900      	cmp	r1, #0
    42ce:	d500      	bpl.n	42d2 <.divsi3_skip_div0_test+0x12>
    42d0:	4249      	negs	r1, r1
    42d2:	2800      	cmp	r0, #0
    42d4:	d500      	bpl.n	42d8 <.divsi3_skip_div0_test+0x18>
    42d6:	4240      	negs	r0, r0
    42d8:	4288      	cmp	r0, r1
    42da:	d32c      	bcc.n	4336 <.divsi3_skip_div0_test+0x76>
    42dc:	2401      	movs	r4, #1
    42de:	0724      	lsls	r4, r4, #28
    42e0:	42a1      	cmp	r1, r4
    42e2:	d204      	bcs.n	42ee <.divsi3_skip_div0_test+0x2e>
    42e4:	4281      	cmp	r1, r0
    42e6:	d202      	bcs.n	42ee <.divsi3_skip_div0_test+0x2e>
    42e8:	0109      	lsls	r1, r1, #4
    42ea:	011b      	lsls	r3, r3, #4
    42ec:	e7f8      	b.n	42e0 <.divsi3_skip_div0_test+0x20>
    42ee:	00e4      	lsls	r4, r4, #3
    42f0:	42a1      	cmp	r1, r4
    42f2:	d204      	bcs.n	42fe <.divsi3_skip_div0_test+0x3e>
    42f4:	4281      	cmp	r1, r0
    42f6:	d202      	bcs.n	42fe <.divsi3_skip_div0_test+0x3e>
    42f8:	0049      	lsls	r1, r1, #1
    42fa:	005b      	lsls	r3, r3, #1
    42fc:	e7f8      	b.n	42f0 <.divsi3_skip_div0_test+0x30>
    42fe:	4288      	cmp	r0, r1
    4300:	d301      	bcc.n	4306 <.divsi3_skip_div0_test+0x46>
    4302:	1a40      	subs	r0, r0, r1
    4304:	431a      	orrs	r2, r3
    4306:	084c      	lsrs	r4, r1, #1
    4308:	42a0      	cmp	r0, r4
    430a:	d302      	bcc.n	4312 <.divsi3_skip_div0_test+0x52>
    430c:	1b00      	subs	r0, r0, r4
    430e:	085c      	lsrs	r4, r3, #1
    4310:	4322      	orrs	r2, r4
    4312:	088c      	lsrs	r4, r1, #2
    4314:	42a0      	cmp	r0, r4
    4316:	d302      	bcc.n	431e <.divsi3_skip_div0_test+0x5e>
    4318:	1b00      	subs	r0, r0, r4
    431a:	089c      	lsrs	r4, r3, #2
    431c:	4322      	orrs	r2, r4
    431e:	08cc      	lsrs	r4, r1, #3
    4320:	42a0      	cmp	r0, r4
    4322:	d302      	bcc.n	432a <.divsi3_skip_div0_test+0x6a>
    4324:	1b00      	subs	r0, r0, r4
    4326:	08dc      	lsrs	r4, r3, #3
    4328:	4322      	orrs	r2, r4
    432a:	2800      	cmp	r0, #0
    432c:	d003      	beq.n	4336 <.divsi3_skip_div0_test+0x76>
    432e:	091b      	lsrs	r3, r3, #4
    4330:	d001      	beq.n	4336 <.divsi3_skip_div0_test+0x76>
    4332:	0909      	lsrs	r1, r1, #4
    4334:	e7e3      	b.n	42fe <.divsi3_skip_div0_test+0x3e>
    4336:	1c10      	adds	r0, r2, #0
    4338:	4664      	mov	r4, ip
    433a:	2c00      	cmp	r4, #0
    433c:	d500      	bpl.n	4340 <.divsi3_skip_div0_test+0x80>
    433e:	4240      	negs	r0, r0
    4340:	bc10      	pop	{r4}
    4342:	4770      	bx	lr
    4344:	2800      	cmp	r0, #0
    4346:	d006      	beq.n	4356 <.divsi3_skip_div0_test+0x96>
    4348:	db03      	blt.n	4352 <.divsi3_skip_div0_test+0x92>
    434a:	2000      	movs	r0, #0
    434c:	43c0      	mvns	r0, r0
    434e:	0840      	lsrs	r0, r0, #1
    4350:	e001      	b.n	4356 <.divsi3_skip_div0_test+0x96>
    4352:	2080      	movs	r0, #128	; 0x80
    4354:	0600      	lsls	r0, r0, #24
    4356:	b407      	push	{r0, r1, r2}
    4358:	4802      	ldr	r0, [pc, #8]	; (4364 <.divsi3_skip_div0_test+0xa4>)
    435a:	a102      	add	r1, pc, #8	; (adr r1, 4364 <.divsi3_skip_div0_test+0xa4>)
    435c:	1840      	adds	r0, r0, r1
    435e:	9002      	str	r0, [sp, #8]
    4360:	bd03      	pop	{r0, r1, pc}
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	00000019 	.word	0x00000019

00004368 <__aeabi_idivmod>:
    4368:	2900      	cmp	r1, #0
    436a:	d0eb      	beq.n	4344 <.divsi3_skip_div0_test+0x84>
    436c:	b503      	push	{r0, r1, lr}
    436e:	f7ff ffa7 	bl	42c0 <.divsi3_skip_div0_test>
    4372:	bc0e      	pop	{r1, r2, r3}
    4374:	4342      	muls	r2, r0
    4376:	1a89      	subs	r1, r1, r2
    4378:	4718      	bx	r3
    437a:	46c0      	nop			; (mov r8, r8)

0000437c <__aeabi_idiv0>:
    437c:	4770      	bx	lr
    437e:	46c0      	nop			; (mov r8, r8)

00004380 <__aeabi_cdrcmple>:
    4380:	4684      	mov	ip, r0
    4382:	1c10      	adds	r0, r2, #0
    4384:	4662      	mov	r2, ip
    4386:	468c      	mov	ip, r1
    4388:	1c19      	adds	r1, r3, #0
    438a:	4663      	mov	r3, ip
    438c:	e000      	b.n	4390 <__aeabi_cdcmpeq>
    438e:	46c0      	nop			; (mov r8, r8)

00004390 <__aeabi_cdcmpeq>:
    4390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4392:	f000 ffb3 	bl	52fc <__ledf2>
    4396:	2800      	cmp	r0, #0
    4398:	d401      	bmi.n	439e <__aeabi_cdcmpeq+0xe>
    439a:	2100      	movs	r1, #0
    439c:	42c8      	cmn	r0, r1
    439e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000043a0 <__aeabi_dcmpeq>:
    43a0:	b510      	push	{r4, lr}
    43a2:	f000 fee3 	bl	516c <__eqdf2>
    43a6:	4240      	negs	r0, r0
    43a8:	3001      	adds	r0, #1
    43aa:	bd10      	pop	{r4, pc}

000043ac <__aeabi_dcmplt>:
    43ac:	b510      	push	{r4, lr}
    43ae:	f000 ffa5 	bl	52fc <__ledf2>
    43b2:	2800      	cmp	r0, #0
    43b4:	db01      	blt.n	43ba <__aeabi_dcmplt+0xe>
    43b6:	2000      	movs	r0, #0
    43b8:	bd10      	pop	{r4, pc}
    43ba:	2001      	movs	r0, #1
    43bc:	bd10      	pop	{r4, pc}
    43be:	46c0      	nop			; (mov r8, r8)

000043c0 <__aeabi_dcmple>:
    43c0:	b510      	push	{r4, lr}
    43c2:	f000 ff9b 	bl	52fc <__ledf2>
    43c6:	2800      	cmp	r0, #0
    43c8:	dd01      	ble.n	43ce <__aeabi_dcmple+0xe>
    43ca:	2000      	movs	r0, #0
    43cc:	bd10      	pop	{r4, pc}
    43ce:	2001      	movs	r0, #1
    43d0:	bd10      	pop	{r4, pc}
    43d2:	46c0      	nop			; (mov r8, r8)

000043d4 <__aeabi_dcmpgt>:
    43d4:	b510      	push	{r4, lr}
    43d6:	f000 ff13 	bl	5200 <__gedf2>
    43da:	2800      	cmp	r0, #0
    43dc:	dc01      	bgt.n	43e2 <__aeabi_dcmpgt+0xe>
    43de:	2000      	movs	r0, #0
    43e0:	bd10      	pop	{r4, pc}
    43e2:	2001      	movs	r0, #1
    43e4:	bd10      	pop	{r4, pc}
    43e6:	46c0      	nop			; (mov r8, r8)

000043e8 <__aeabi_dcmpge>:
    43e8:	b510      	push	{r4, lr}
    43ea:	f000 ff09 	bl	5200 <__gedf2>
    43ee:	2800      	cmp	r0, #0
    43f0:	da01      	bge.n	43f6 <__aeabi_dcmpge+0xe>
    43f2:	2000      	movs	r0, #0
    43f4:	bd10      	pop	{r4, pc}
    43f6:	2001      	movs	r0, #1
    43f8:	bd10      	pop	{r4, pc}
    43fa:	46c0      	nop			; (mov r8, r8)

000043fc <__aeabi_lmul>:
    43fc:	469c      	mov	ip, r3
    43fe:	0403      	lsls	r3, r0, #16
    4400:	b5f0      	push	{r4, r5, r6, r7, lr}
    4402:	0c1b      	lsrs	r3, r3, #16
    4404:	0417      	lsls	r7, r2, #16
    4406:	0c3f      	lsrs	r7, r7, #16
    4408:	0c15      	lsrs	r5, r2, #16
    440a:	1c1e      	adds	r6, r3, #0
    440c:	1c04      	adds	r4, r0, #0
    440e:	0c00      	lsrs	r0, r0, #16
    4410:	437e      	muls	r6, r7
    4412:	436b      	muls	r3, r5
    4414:	4347      	muls	r7, r0
    4416:	4345      	muls	r5, r0
    4418:	18fb      	adds	r3, r7, r3
    441a:	0c30      	lsrs	r0, r6, #16
    441c:	1818      	adds	r0, r3, r0
    441e:	4287      	cmp	r7, r0
    4420:	d902      	bls.n	4428 <__aeabi_lmul+0x2c>
    4422:	2380      	movs	r3, #128	; 0x80
    4424:	025b      	lsls	r3, r3, #9
    4426:	18ed      	adds	r5, r5, r3
    4428:	0c03      	lsrs	r3, r0, #16
    442a:	18ed      	adds	r5, r5, r3
    442c:	4663      	mov	r3, ip
    442e:	435c      	muls	r4, r3
    4430:	434a      	muls	r2, r1
    4432:	0436      	lsls	r6, r6, #16
    4434:	0c36      	lsrs	r6, r6, #16
    4436:	18a1      	adds	r1, r4, r2
    4438:	0400      	lsls	r0, r0, #16
    443a:	1980      	adds	r0, r0, r6
    443c:	1949      	adds	r1, r1, r5
    443e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004440 <__aeabi_ui2f>:
    4440:	b510      	push	{r4, lr}
    4442:	1e04      	subs	r4, r0, #0
    4444:	d033      	beq.n	44ae <__aeabi_ui2f+0x6e>
    4446:	f001 ff1f 	bl	6288 <__clzsi2>
    444a:	239e      	movs	r3, #158	; 0x9e
    444c:	1a1b      	subs	r3, r3, r0
    444e:	2b96      	cmp	r3, #150	; 0x96
    4450:	dc09      	bgt.n	4466 <__aeabi_ui2f+0x26>
    4452:	3808      	subs	r0, #8
    4454:	4084      	lsls	r4, r0
    4456:	0264      	lsls	r4, r4, #9
    4458:	0a64      	lsrs	r4, r4, #9
    445a:	b2db      	uxtb	r3, r3
    445c:	0264      	lsls	r4, r4, #9
    445e:	05db      	lsls	r3, r3, #23
    4460:	0a60      	lsrs	r0, r4, #9
    4462:	4318      	orrs	r0, r3
    4464:	bd10      	pop	{r4, pc}
    4466:	2b99      	cmp	r3, #153	; 0x99
    4468:	dd0a      	ble.n	4480 <__aeabi_ui2f+0x40>
    446a:	2205      	movs	r2, #5
    446c:	1a12      	subs	r2, r2, r0
    446e:	1c21      	adds	r1, r4, #0
    4470:	40d1      	lsrs	r1, r2
    4472:	1c0a      	adds	r2, r1, #0
    4474:	1c01      	adds	r1, r0, #0
    4476:	311b      	adds	r1, #27
    4478:	408c      	lsls	r4, r1
    447a:	1e61      	subs	r1, r4, #1
    447c:	418c      	sbcs	r4, r1
    447e:	4314      	orrs	r4, r2
    4480:	2805      	cmp	r0, #5
    4482:	dd01      	ble.n	4488 <__aeabi_ui2f+0x48>
    4484:	1f42      	subs	r2, r0, #5
    4486:	4094      	lsls	r4, r2
    4488:	4a14      	ldr	r2, [pc, #80]	; (44dc <__aeabi_ui2f+0x9c>)
    448a:	4022      	ands	r2, r4
    448c:	0761      	lsls	r1, r4, #29
    448e:	d004      	beq.n	449a <__aeabi_ui2f+0x5a>
    4490:	210f      	movs	r1, #15
    4492:	400c      	ands	r4, r1
    4494:	2c04      	cmp	r4, #4
    4496:	d000      	beq.n	449a <__aeabi_ui2f+0x5a>
    4498:	3204      	adds	r2, #4
    449a:	0151      	lsls	r1, r2, #5
    449c:	d50a      	bpl.n	44b4 <__aeabi_ui2f+0x74>
    449e:	239f      	movs	r3, #159	; 0x9f
    44a0:	1a18      	subs	r0, r3, r0
    44a2:	28ff      	cmp	r0, #255	; 0xff
    44a4:	d016      	beq.n	44d4 <__aeabi_ui2f+0x94>
    44a6:	0194      	lsls	r4, r2, #6
    44a8:	0a64      	lsrs	r4, r4, #9
    44aa:	b2c3      	uxtb	r3, r0
    44ac:	e7d6      	b.n	445c <__aeabi_ui2f+0x1c>
    44ae:	2300      	movs	r3, #0
    44b0:	2400      	movs	r4, #0
    44b2:	e7d3      	b.n	445c <__aeabi_ui2f+0x1c>
    44b4:	08d2      	lsrs	r2, r2, #3
    44b6:	2bff      	cmp	r3, #255	; 0xff
    44b8:	d003      	beq.n	44c2 <__aeabi_ui2f+0x82>
    44ba:	0254      	lsls	r4, r2, #9
    44bc:	0a64      	lsrs	r4, r4, #9
    44be:	b2db      	uxtb	r3, r3
    44c0:	e7cc      	b.n	445c <__aeabi_ui2f+0x1c>
    44c2:	2a00      	cmp	r2, #0
    44c4:	d006      	beq.n	44d4 <__aeabi_ui2f+0x94>
    44c6:	2480      	movs	r4, #128	; 0x80
    44c8:	03e4      	lsls	r4, r4, #15
    44ca:	4314      	orrs	r4, r2
    44cc:	0264      	lsls	r4, r4, #9
    44ce:	0a64      	lsrs	r4, r4, #9
    44d0:	23ff      	movs	r3, #255	; 0xff
    44d2:	e7c3      	b.n	445c <__aeabi_ui2f+0x1c>
    44d4:	23ff      	movs	r3, #255	; 0xff
    44d6:	2400      	movs	r4, #0
    44d8:	e7c0      	b.n	445c <__aeabi_ui2f+0x1c>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	fbffffff 	.word	0xfbffffff

000044e0 <__aeabi_dadd>:
    44e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44e2:	465f      	mov	r7, fp
    44e4:	4656      	mov	r6, sl
    44e6:	4644      	mov	r4, r8
    44e8:	464d      	mov	r5, r9
    44ea:	b4f0      	push	{r4, r5, r6, r7}
    44ec:	030c      	lsls	r4, r1, #12
    44ee:	004d      	lsls	r5, r1, #1
    44f0:	0fce      	lsrs	r6, r1, #31
    44f2:	0a61      	lsrs	r1, r4, #9
    44f4:	0f44      	lsrs	r4, r0, #29
    44f6:	4321      	orrs	r1, r4
    44f8:	00c4      	lsls	r4, r0, #3
    44fa:	0318      	lsls	r0, r3, #12
    44fc:	4680      	mov	r8, r0
    44fe:	0058      	lsls	r0, r3, #1
    4500:	0d40      	lsrs	r0, r0, #21
    4502:	4682      	mov	sl, r0
    4504:	0fd8      	lsrs	r0, r3, #31
    4506:	4684      	mov	ip, r0
    4508:	4640      	mov	r0, r8
    450a:	0a40      	lsrs	r0, r0, #9
    450c:	0f53      	lsrs	r3, r2, #29
    450e:	4303      	orrs	r3, r0
    4510:	00d0      	lsls	r0, r2, #3
    4512:	0d6d      	lsrs	r5, r5, #21
    4514:	1c37      	adds	r7, r6, #0
    4516:	4683      	mov	fp, r0
    4518:	4652      	mov	r2, sl
    451a:	4566      	cmp	r6, ip
    451c:	d100      	bne.n	4520 <__aeabi_dadd+0x40>
    451e:	e0a4      	b.n	466a <__aeabi_dadd+0x18a>
    4520:	1aaf      	subs	r7, r5, r2
    4522:	2f00      	cmp	r7, #0
    4524:	dc00      	bgt.n	4528 <__aeabi_dadd+0x48>
    4526:	e109      	b.n	473c <__aeabi_dadd+0x25c>
    4528:	2a00      	cmp	r2, #0
    452a:	d13b      	bne.n	45a4 <__aeabi_dadd+0xc4>
    452c:	4318      	orrs	r0, r3
    452e:	d000      	beq.n	4532 <__aeabi_dadd+0x52>
    4530:	e0ea      	b.n	4708 <__aeabi_dadd+0x228>
    4532:	0763      	lsls	r3, r4, #29
    4534:	d100      	bne.n	4538 <__aeabi_dadd+0x58>
    4536:	e087      	b.n	4648 <__aeabi_dadd+0x168>
    4538:	230f      	movs	r3, #15
    453a:	4023      	ands	r3, r4
    453c:	2b04      	cmp	r3, #4
    453e:	d100      	bne.n	4542 <__aeabi_dadd+0x62>
    4540:	e082      	b.n	4648 <__aeabi_dadd+0x168>
    4542:	1d22      	adds	r2, r4, #4
    4544:	42a2      	cmp	r2, r4
    4546:	41a4      	sbcs	r4, r4
    4548:	4264      	negs	r4, r4
    454a:	2380      	movs	r3, #128	; 0x80
    454c:	1909      	adds	r1, r1, r4
    454e:	041b      	lsls	r3, r3, #16
    4550:	400b      	ands	r3, r1
    4552:	1c37      	adds	r7, r6, #0
    4554:	1c14      	adds	r4, r2, #0
    4556:	2b00      	cmp	r3, #0
    4558:	d100      	bne.n	455c <__aeabi_dadd+0x7c>
    455a:	e07c      	b.n	4656 <__aeabi_dadd+0x176>
    455c:	4bce      	ldr	r3, [pc, #824]	; (4898 <__aeabi_dadd+0x3b8>)
    455e:	3501      	adds	r5, #1
    4560:	429d      	cmp	r5, r3
    4562:	d100      	bne.n	4566 <__aeabi_dadd+0x86>
    4564:	e105      	b.n	4772 <__aeabi_dadd+0x292>
    4566:	4bcd      	ldr	r3, [pc, #820]	; (489c <__aeabi_dadd+0x3bc>)
    4568:	08e4      	lsrs	r4, r4, #3
    456a:	4019      	ands	r1, r3
    456c:	0748      	lsls	r0, r1, #29
    456e:	0249      	lsls	r1, r1, #9
    4570:	4304      	orrs	r4, r0
    4572:	0b0b      	lsrs	r3, r1, #12
    4574:	2000      	movs	r0, #0
    4576:	2100      	movs	r1, #0
    4578:	031b      	lsls	r3, r3, #12
    457a:	0b1a      	lsrs	r2, r3, #12
    457c:	0d0b      	lsrs	r3, r1, #20
    457e:	056d      	lsls	r5, r5, #21
    4580:	051b      	lsls	r3, r3, #20
    4582:	4313      	orrs	r3, r2
    4584:	086a      	lsrs	r2, r5, #1
    4586:	4dc6      	ldr	r5, [pc, #792]	; (48a0 <__aeabi_dadd+0x3c0>)
    4588:	07ff      	lsls	r7, r7, #31
    458a:	401d      	ands	r5, r3
    458c:	4315      	orrs	r5, r2
    458e:	006d      	lsls	r5, r5, #1
    4590:	086d      	lsrs	r5, r5, #1
    4592:	1c29      	adds	r1, r5, #0
    4594:	4339      	orrs	r1, r7
    4596:	1c20      	adds	r0, r4, #0
    4598:	bc3c      	pop	{r2, r3, r4, r5}
    459a:	4690      	mov	r8, r2
    459c:	4699      	mov	r9, r3
    459e:	46a2      	mov	sl, r4
    45a0:	46ab      	mov	fp, r5
    45a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45a4:	48bc      	ldr	r0, [pc, #752]	; (4898 <__aeabi_dadd+0x3b8>)
    45a6:	4285      	cmp	r5, r0
    45a8:	d0c3      	beq.n	4532 <__aeabi_dadd+0x52>
    45aa:	2080      	movs	r0, #128	; 0x80
    45ac:	0400      	lsls	r0, r0, #16
    45ae:	4303      	orrs	r3, r0
    45b0:	2f38      	cmp	r7, #56	; 0x38
    45b2:	dd00      	ble.n	45b6 <__aeabi_dadd+0xd6>
    45b4:	e0f0      	b.n	4798 <__aeabi_dadd+0x2b8>
    45b6:	2f1f      	cmp	r7, #31
    45b8:	dd00      	ble.n	45bc <__aeabi_dadd+0xdc>
    45ba:	e124      	b.n	4806 <__aeabi_dadd+0x326>
    45bc:	2020      	movs	r0, #32
    45be:	1bc0      	subs	r0, r0, r7
    45c0:	1c1a      	adds	r2, r3, #0
    45c2:	4681      	mov	r9, r0
    45c4:	4082      	lsls	r2, r0
    45c6:	4658      	mov	r0, fp
    45c8:	40f8      	lsrs	r0, r7
    45ca:	4302      	orrs	r2, r0
    45cc:	4694      	mov	ip, r2
    45ce:	4658      	mov	r0, fp
    45d0:	464a      	mov	r2, r9
    45d2:	4090      	lsls	r0, r2
    45d4:	1e42      	subs	r2, r0, #1
    45d6:	4190      	sbcs	r0, r2
    45d8:	40fb      	lsrs	r3, r7
    45da:	4662      	mov	r2, ip
    45dc:	4302      	orrs	r2, r0
    45de:	1c1f      	adds	r7, r3, #0
    45e0:	1aa2      	subs	r2, r4, r2
    45e2:	4294      	cmp	r4, r2
    45e4:	41a4      	sbcs	r4, r4
    45e6:	4264      	negs	r4, r4
    45e8:	1bc9      	subs	r1, r1, r7
    45ea:	1b09      	subs	r1, r1, r4
    45ec:	1c14      	adds	r4, r2, #0
    45ee:	020b      	lsls	r3, r1, #8
    45f0:	d59f      	bpl.n	4532 <__aeabi_dadd+0x52>
    45f2:	0249      	lsls	r1, r1, #9
    45f4:	0a4f      	lsrs	r7, r1, #9
    45f6:	2f00      	cmp	r7, #0
    45f8:	d100      	bne.n	45fc <__aeabi_dadd+0x11c>
    45fa:	e0c8      	b.n	478e <__aeabi_dadd+0x2ae>
    45fc:	1c38      	adds	r0, r7, #0
    45fe:	f001 fe43 	bl	6288 <__clzsi2>
    4602:	1c02      	adds	r2, r0, #0
    4604:	3a08      	subs	r2, #8
    4606:	2a1f      	cmp	r2, #31
    4608:	dd00      	ble.n	460c <__aeabi_dadd+0x12c>
    460a:	e0b5      	b.n	4778 <__aeabi_dadd+0x298>
    460c:	2128      	movs	r1, #40	; 0x28
    460e:	1a09      	subs	r1, r1, r0
    4610:	1c20      	adds	r0, r4, #0
    4612:	4097      	lsls	r7, r2
    4614:	40c8      	lsrs	r0, r1
    4616:	4307      	orrs	r7, r0
    4618:	4094      	lsls	r4, r2
    461a:	4295      	cmp	r5, r2
    461c:	dd00      	ble.n	4620 <__aeabi_dadd+0x140>
    461e:	e0b2      	b.n	4786 <__aeabi_dadd+0x2a6>
    4620:	1b55      	subs	r5, r2, r5
    4622:	1c69      	adds	r1, r5, #1
    4624:	291f      	cmp	r1, #31
    4626:	dd00      	ble.n	462a <__aeabi_dadd+0x14a>
    4628:	e0dc      	b.n	47e4 <__aeabi_dadd+0x304>
    462a:	221f      	movs	r2, #31
    462c:	1b55      	subs	r5, r2, r5
    462e:	1c3b      	adds	r3, r7, #0
    4630:	1c22      	adds	r2, r4, #0
    4632:	40ab      	lsls	r3, r5
    4634:	40ca      	lsrs	r2, r1
    4636:	40ac      	lsls	r4, r5
    4638:	1e65      	subs	r5, r4, #1
    463a:	41ac      	sbcs	r4, r5
    463c:	4313      	orrs	r3, r2
    463e:	40cf      	lsrs	r7, r1
    4640:	431c      	orrs	r4, r3
    4642:	1c39      	adds	r1, r7, #0
    4644:	2500      	movs	r5, #0
    4646:	e774      	b.n	4532 <__aeabi_dadd+0x52>
    4648:	2380      	movs	r3, #128	; 0x80
    464a:	041b      	lsls	r3, r3, #16
    464c:	400b      	ands	r3, r1
    464e:	1c37      	adds	r7, r6, #0
    4650:	2b00      	cmp	r3, #0
    4652:	d000      	beq.n	4656 <__aeabi_dadd+0x176>
    4654:	e782      	b.n	455c <__aeabi_dadd+0x7c>
    4656:	4b90      	ldr	r3, [pc, #576]	; (4898 <__aeabi_dadd+0x3b8>)
    4658:	0748      	lsls	r0, r1, #29
    465a:	08e4      	lsrs	r4, r4, #3
    465c:	4304      	orrs	r4, r0
    465e:	08c9      	lsrs	r1, r1, #3
    4660:	429d      	cmp	r5, r3
    4662:	d048      	beq.n	46f6 <__aeabi_dadd+0x216>
    4664:	0309      	lsls	r1, r1, #12
    4666:	0b0b      	lsrs	r3, r1, #12
    4668:	e784      	b.n	4574 <__aeabi_dadd+0x94>
    466a:	1aaa      	subs	r2, r5, r2
    466c:	4694      	mov	ip, r2
    466e:	2a00      	cmp	r2, #0
    4670:	dc00      	bgt.n	4674 <__aeabi_dadd+0x194>
    4672:	e098      	b.n	47a6 <__aeabi_dadd+0x2c6>
    4674:	4650      	mov	r0, sl
    4676:	2800      	cmp	r0, #0
    4678:	d052      	beq.n	4720 <__aeabi_dadd+0x240>
    467a:	4887      	ldr	r0, [pc, #540]	; (4898 <__aeabi_dadd+0x3b8>)
    467c:	4285      	cmp	r5, r0
    467e:	d100      	bne.n	4682 <__aeabi_dadd+0x1a2>
    4680:	e757      	b.n	4532 <__aeabi_dadd+0x52>
    4682:	2080      	movs	r0, #128	; 0x80
    4684:	0400      	lsls	r0, r0, #16
    4686:	4303      	orrs	r3, r0
    4688:	4662      	mov	r2, ip
    468a:	2a38      	cmp	r2, #56	; 0x38
    468c:	dd00      	ble.n	4690 <__aeabi_dadd+0x1b0>
    468e:	e0fc      	b.n	488a <__aeabi_dadd+0x3aa>
    4690:	2a1f      	cmp	r2, #31
    4692:	dd00      	ble.n	4696 <__aeabi_dadd+0x1b6>
    4694:	e14a      	b.n	492c <__aeabi_dadd+0x44c>
    4696:	2220      	movs	r2, #32
    4698:	4660      	mov	r0, ip
    469a:	1a10      	subs	r0, r2, r0
    469c:	1c1a      	adds	r2, r3, #0
    469e:	4082      	lsls	r2, r0
    46a0:	4682      	mov	sl, r0
    46a2:	4691      	mov	r9, r2
    46a4:	4658      	mov	r0, fp
    46a6:	4662      	mov	r2, ip
    46a8:	40d0      	lsrs	r0, r2
    46aa:	464a      	mov	r2, r9
    46ac:	4302      	orrs	r2, r0
    46ae:	4690      	mov	r8, r2
    46b0:	4658      	mov	r0, fp
    46b2:	4652      	mov	r2, sl
    46b4:	4090      	lsls	r0, r2
    46b6:	1e42      	subs	r2, r0, #1
    46b8:	4190      	sbcs	r0, r2
    46ba:	4642      	mov	r2, r8
    46bc:	4302      	orrs	r2, r0
    46be:	4660      	mov	r0, ip
    46c0:	40c3      	lsrs	r3, r0
    46c2:	1912      	adds	r2, r2, r4
    46c4:	42a2      	cmp	r2, r4
    46c6:	41a4      	sbcs	r4, r4
    46c8:	4264      	negs	r4, r4
    46ca:	1859      	adds	r1, r3, r1
    46cc:	1909      	adds	r1, r1, r4
    46ce:	1c14      	adds	r4, r2, #0
    46d0:	0208      	lsls	r0, r1, #8
    46d2:	d400      	bmi.n	46d6 <__aeabi_dadd+0x1f6>
    46d4:	e72d      	b.n	4532 <__aeabi_dadd+0x52>
    46d6:	4b70      	ldr	r3, [pc, #448]	; (4898 <__aeabi_dadd+0x3b8>)
    46d8:	3501      	adds	r5, #1
    46da:	429d      	cmp	r5, r3
    46dc:	d100      	bne.n	46e0 <__aeabi_dadd+0x200>
    46de:	e122      	b.n	4926 <__aeabi_dadd+0x446>
    46e0:	4b6e      	ldr	r3, [pc, #440]	; (489c <__aeabi_dadd+0x3bc>)
    46e2:	0860      	lsrs	r0, r4, #1
    46e4:	4019      	ands	r1, r3
    46e6:	2301      	movs	r3, #1
    46e8:	4023      	ands	r3, r4
    46ea:	1c1c      	adds	r4, r3, #0
    46ec:	4304      	orrs	r4, r0
    46ee:	07cb      	lsls	r3, r1, #31
    46f0:	431c      	orrs	r4, r3
    46f2:	0849      	lsrs	r1, r1, #1
    46f4:	e71d      	b.n	4532 <__aeabi_dadd+0x52>
    46f6:	1c23      	adds	r3, r4, #0
    46f8:	430b      	orrs	r3, r1
    46fa:	d03a      	beq.n	4772 <__aeabi_dadd+0x292>
    46fc:	2380      	movs	r3, #128	; 0x80
    46fe:	031b      	lsls	r3, r3, #12
    4700:	430b      	orrs	r3, r1
    4702:	031b      	lsls	r3, r3, #12
    4704:	0b1b      	lsrs	r3, r3, #12
    4706:	e735      	b.n	4574 <__aeabi_dadd+0x94>
    4708:	3f01      	subs	r7, #1
    470a:	2f00      	cmp	r7, #0
    470c:	d165      	bne.n	47da <__aeabi_dadd+0x2fa>
    470e:	4658      	mov	r0, fp
    4710:	1a22      	subs	r2, r4, r0
    4712:	4294      	cmp	r4, r2
    4714:	41a4      	sbcs	r4, r4
    4716:	4264      	negs	r4, r4
    4718:	1ac9      	subs	r1, r1, r3
    471a:	1b09      	subs	r1, r1, r4
    471c:	1c14      	adds	r4, r2, #0
    471e:	e766      	b.n	45ee <__aeabi_dadd+0x10e>
    4720:	4658      	mov	r0, fp
    4722:	4318      	orrs	r0, r3
    4724:	d100      	bne.n	4728 <__aeabi_dadd+0x248>
    4726:	e704      	b.n	4532 <__aeabi_dadd+0x52>
    4728:	2201      	movs	r2, #1
    472a:	4252      	negs	r2, r2
    472c:	4494      	add	ip, r2
    472e:	4660      	mov	r0, ip
    4730:	2800      	cmp	r0, #0
    4732:	d000      	beq.n	4736 <__aeabi_dadd+0x256>
    4734:	e0c5      	b.n	48c2 <__aeabi_dadd+0x3e2>
    4736:	4658      	mov	r0, fp
    4738:	1902      	adds	r2, r0, r4
    473a:	e7c3      	b.n	46c4 <__aeabi_dadd+0x1e4>
    473c:	2f00      	cmp	r7, #0
    473e:	d173      	bne.n	4828 <__aeabi_dadd+0x348>
    4740:	1c68      	adds	r0, r5, #1
    4742:	0540      	lsls	r0, r0, #21
    4744:	0d40      	lsrs	r0, r0, #21
    4746:	2801      	cmp	r0, #1
    4748:	dc00      	bgt.n	474c <__aeabi_dadd+0x26c>
    474a:	e0de      	b.n	490a <__aeabi_dadd+0x42a>
    474c:	465a      	mov	r2, fp
    474e:	1aa2      	subs	r2, r4, r2
    4750:	4294      	cmp	r4, r2
    4752:	41bf      	sbcs	r7, r7
    4754:	1ac8      	subs	r0, r1, r3
    4756:	427f      	negs	r7, r7
    4758:	1bc7      	subs	r7, r0, r7
    475a:	0238      	lsls	r0, r7, #8
    475c:	d400      	bmi.n	4760 <__aeabi_dadd+0x280>
    475e:	e089      	b.n	4874 <__aeabi_dadd+0x394>
    4760:	465a      	mov	r2, fp
    4762:	1b14      	subs	r4, r2, r4
    4764:	45a3      	cmp	fp, r4
    4766:	4192      	sbcs	r2, r2
    4768:	1a59      	subs	r1, r3, r1
    476a:	4252      	negs	r2, r2
    476c:	1a8f      	subs	r7, r1, r2
    476e:	4666      	mov	r6, ip
    4770:	e741      	b.n	45f6 <__aeabi_dadd+0x116>
    4772:	2300      	movs	r3, #0
    4774:	2400      	movs	r4, #0
    4776:	e6fd      	b.n	4574 <__aeabi_dadd+0x94>
    4778:	1c27      	adds	r7, r4, #0
    477a:	3828      	subs	r0, #40	; 0x28
    477c:	4087      	lsls	r7, r0
    477e:	2400      	movs	r4, #0
    4780:	4295      	cmp	r5, r2
    4782:	dc00      	bgt.n	4786 <__aeabi_dadd+0x2a6>
    4784:	e74c      	b.n	4620 <__aeabi_dadd+0x140>
    4786:	4945      	ldr	r1, [pc, #276]	; (489c <__aeabi_dadd+0x3bc>)
    4788:	1aad      	subs	r5, r5, r2
    478a:	4039      	ands	r1, r7
    478c:	e6d1      	b.n	4532 <__aeabi_dadd+0x52>
    478e:	1c20      	adds	r0, r4, #0
    4790:	f001 fd7a 	bl	6288 <__clzsi2>
    4794:	3020      	adds	r0, #32
    4796:	e734      	b.n	4602 <__aeabi_dadd+0x122>
    4798:	465a      	mov	r2, fp
    479a:	431a      	orrs	r2, r3
    479c:	1e53      	subs	r3, r2, #1
    479e:	419a      	sbcs	r2, r3
    47a0:	b2d2      	uxtb	r2, r2
    47a2:	2700      	movs	r7, #0
    47a4:	e71c      	b.n	45e0 <__aeabi_dadd+0x100>
    47a6:	2a00      	cmp	r2, #0
    47a8:	d000      	beq.n	47ac <__aeabi_dadd+0x2cc>
    47aa:	e0dc      	b.n	4966 <__aeabi_dadd+0x486>
    47ac:	1c68      	adds	r0, r5, #1
    47ae:	0542      	lsls	r2, r0, #21
    47b0:	0d52      	lsrs	r2, r2, #21
    47b2:	2a01      	cmp	r2, #1
    47b4:	dc00      	bgt.n	47b8 <__aeabi_dadd+0x2d8>
    47b6:	e08d      	b.n	48d4 <__aeabi_dadd+0x3f4>
    47b8:	4d37      	ldr	r5, [pc, #220]	; (4898 <__aeabi_dadd+0x3b8>)
    47ba:	42a8      	cmp	r0, r5
    47bc:	d100      	bne.n	47c0 <__aeabi_dadd+0x2e0>
    47be:	e0f3      	b.n	49a8 <__aeabi_dadd+0x4c8>
    47c0:	465d      	mov	r5, fp
    47c2:	192a      	adds	r2, r5, r4
    47c4:	42a2      	cmp	r2, r4
    47c6:	41a4      	sbcs	r4, r4
    47c8:	4264      	negs	r4, r4
    47ca:	1859      	adds	r1, r3, r1
    47cc:	1909      	adds	r1, r1, r4
    47ce:	07cc      	lsls	r4, r1, #31
    47d0:	0852      	lsrs	r2, r2, #1
    47d2:	4314      	orrs	r4, r2
    47d4:	0849      	lsrs	r1, r1, #1
    47d6:	1c05      	adds	r5, r0, #0
    47d8:	e6ab      	b.n	4532 <__aeabi_dadd+0x52>
    47da:	482f      	ldr	r0, [pc, #188]	; (4898 <__aeabi_dadd+0x3b8>)
    47dc:	4285      	cmp	r5, r0
    47de:	d000      	beq.n	47e2 <__aeabi_dadd+0x302>
    47e0:	e6e6      	b.n	45b0 <__aeabi_dadd+0xd0>
    47e2:	e6a6      	b.n	4532 <__aeabi_dadd+0x52>
    47e4:	1c2b      	adds	r3, r5, #0
    47e6:	3b1f      	subs	r3, #31
    47e8:	1c3a      	adds	r2, r7, #0
    47ea:	40da      	lsrs	r2, r3
    47ec:	1c13      	adds	r3, r2, #0
    47ee:	2920      	cmp	r1, #32
    47f0:	d06c      	beq.n	48cc <__aeabi_dadd+0x3ec>
    47f2:	223f      	movs	r2, #63	; 0x3f
    47f4:	1b55      	subs	r5, r2, r5
    47f6:	40af      	lsls	r7, r5
    47f8:	433c      	orrs	r4, r7
    47fa:	1e60      	subs	r0, r4, #1
    47fc:	4184      	sbcs	r4, r0
    47fe:	431c      	orrs	r4, r3
    4800:	2100      	movs	r1, #0
    4802:	2500      	movs	r5, #0
    4804:	e695      	b.n	4532 <__aeabi_dadd+0x52>
    4806:	1c38      	adds	r0, r7, #0
    4808:	3820      	subs	r0, #32
    480a:	1c1a      	adds	r2, r3, #0
    480c:	40c2      	lsrs	r2, r0
    480e:	1c10      	adds	r0, r2, #0
    4810:	2f20      	cmp	r7, #32
    4812:	d05d      	beq.n	48d0 <__aeabi_dadd+0x3f0>
    4814:	2240      	movs	r2, #64	; 0x40
    4816:	1bd7      	subs	r7, r2, r7
    4818:	40bb      	lsls	r3, r7
    481a:	465a      	mov	r2, fp
    481c:	431a      	orrs	r2, r3
    481e:	1e53      	subs	r3, r2, #1
    4820:	419a      	sbcs	r2, r3
    4822:	4302      	orrs	r2, r0
    4824:	2700      	movs	r7, #0
    4826:	e6db      	b.n	45e0 <__aeabi_dadd+0x100>
    4828:	2d00      	cmp	r5, #0
    482a:	d03b      	beq.n	48a4 <__aeabi_dadd+0x3c4>
    482c:	4d1a      	ldr	r5, [pc, #104]	; (4898 <__aeabi_dadd+0x3b8>)
    482e:	45aa      	cmp	sl, r5
    4830:	d100      	bne.n	4834 <__aeabi_dadd+0x354>
    4832:	e093      	b.n	495c <__aeabi_dadd+0x47c>
    4834:	2580      	movs	r5, #128	; 0x80
    4836:	042d      	lsls	r5, r5, #16
    4838:	427f      	negs	r7, r7
    483a:	4329      	orrs	r1, r5
    483c:	2f38      	cmp	r7, #56	; 0x38
    483e:	dd00      	ble.n	4842 <__aeabi_dadd+0x362>
    4840:	e0ac      	b.n	499c <__aeabi_dadd+0x4bc>
    4842:	2f1f      	cmp	r7, #31
    4844:	dd00      	ble.n	4848 <__aeabi_dadd+0x368>
    4846:	e129      	b.n	4a9c <__aeabi_dadd+0x5bc>
    4848:	2520      	movs	r5, #32
    484a:	1bed      	subs	r5, r5, r7
    484c:	1c08      	adds	r0, r1, #0
    484e:	1c26      	adds	r6, r4, #0
    4850:	40a8      	lsls	r0, r5
    4852:	40fe      	lsrs	r6, r7
    4854:	40ac      	lsls	r4, r5
    4856:	4306      	orrs	r6, r0
    4858:	1e65      	subs	r5, r4, #1
    485a:	41ac      	sbcs	r4, r5
    485c:	4334      	orrs	r4, r6
    485e:	40f9      	lsrs	r1, r7
    4860:	465d      	mov	r5, fp
    4862:	1b2c      	subs	r4, r5, r4
    4864:	45a3      	cmp	fp, r4
    4866:	4192      	sbcs	r2, r2
    4868:	1a5b      	subs	r3, r3, r1
    486a:	4252      	negs	r2, r2
    486c:	1a99      	subs	r1, r3, r2
    486e:	4655      	mov	r5, sl
    4870:	4666      	mov	r6, ip
    4872:	e6bc      	b.n	45ee <__aeabi_dadd+0x10e>
    4874:	1c13      	adds	r3, r2, #0
    4876:	433b      	orrs	r3, r7
    4878:	1c14      	adds	r4, r2, #0
    487a:	2b00      	cmp	r3, #0
    487c:	d000      	beq.n	4880 <__aeabi_dadd+0x3a0>
    487e:	e6ba      	b.n	45f6 <__aeabi_dadd+0x116>
    4880:	2700      	movs	r7, #0
    4882:	2100      	movs	r1, #0
    4884:	2500      	movs	r5, #0
    4886:	2400      	movs	r4, #0
    4888:	e6e5      	b.n	4656 <__aeabi_dadd+0x176>
    488a:	465a      	mov	r2, fp
    488c:	431a      	orrs	r2, r3
    488e:	1e53      	subs	r3, r2, #1
    4890:	419a      	sbcs	r2, r3
    4892:	b2d2      	uxtb	r2, r2
    4894:	2300      	movs	r3, #0
    4896:	e714      	b.n	46c2 <__aeabi_dadd+0x1e2>
    4898:	000007ff 	.word	0x000007ff
    489c:	ff7fffff 	.word	0xff7fffff
    48a0:	800fffff 	.word	0x800fffff
    48a4:	1c0d      	adds	r5, r1, #0
    48a6:	4325      	orrs	r5, r4
    48a8:	d058      	beq.n	495c <__aeabi_dadd+0x47c>
    48aa:	43ff      	mvns	r7, r7
    48ac:	2f00      	cmp	r7, #0
    48ae:	d151      	bne.n	4954 <__aeabi_dadd+0x474>
    48b0:	1b04      	subs	r4, r0, r4
    48b2:	45a3      	cmp	fp, r4
    48b4:	4192      	sbcs	r2, r2
    48b6:	1a59      	subs	r1, r3, r1
    48b8:	4252      	negs	r2, r2
    48ba:	1a89      	subs	r1, r1, r2
    48bc:	4655      	mov	r5, sl
    48be:	4666      	mov	r6, ip
    48c0:	e695      	b.n	45ee <__aeabi_dadd+0x10e>
    48c2:	4896      	ldr	r0, [pc, #600]	; (4b1c <__aeabi_dadd+0x63c>)
    48c4:	4285      	cmp	r5, r0
    48c6:	d000      	beq.n	48ca <__aeabi_dadd+0x3ea>
    48c8:	e6de      	b.n	4688 <__aeabi_dadd+0x1a8>
    48ca:	e632      	b.n	4532 <__aeabi_dadd+0x52>
    48cc:	2700      	movs	r7, #0
    48ce:	e793      	b.n	47f8 <__aeabi_dadd+0x318>
    48d0:	2300      	movs	r3, #0
    48d2:	e7a2      	b.n	481a <__aeabi_dadd+0x33a>
    48d4:	1c08      	adds	r0, r1, #0
    48d6:	4320      	orrs	r0, r4
    48d8:	2d00      	cmp	r5, #0
    48da:	d000      	beq.n	48de <__aeabi_dadd+0x3fe>
    48dc:	e0c4      	b.n	4a68 <__aeabi_dadd+0x588>
    48de:	2800      	cmp	r0, #0
    48e0:	d100      	bne.n	48e4 <__aeabi_dadd+0x404>
    48e2:	e0f7      	b.n	4ad4 <__aeabi_dadd+0x5f4>
    48e4:	4658      	mov	r0, fp
    48e6:	4318      	orrs	r0, r3
    48e8:	d100      	bne.n	48ec <__aeabi_dadd+0x40c>
    48ea:	e622      	b.n	4532 <__aeabi_dadd+0x52>
    48ec:	4658      	mov	r0, fp
    48ee:	1902      	adds	r2, r0, r4
    48f0:	42a2      	cmp	r2, r4
    48f2:	41a4      	sbcs	r4, r4
    48f4:	4264      	negs	r4, r4
    48f6:	1859      	adds	r1, r3, r1
    48f8:	1909      	adds	r1, r1, r4
    48fa:	1c14      	adds	r4, r2, #0
    48fc:	020a      	lsls	r2, r1, #8
    48fe:	d400      	bmi.n	4902 <__aeabi_dadd+0x422>
    4900:	e617      	b.n	4532 <__aeabi_dadd+0x52>
    4902:	4b87      	ldr	r3, [pc, #540]	; (4b20 <__aeabi_dadd+0x640>)
    4904:	2501      	movs	r5, #1
    4906:	4019      	ands	r1, r3
    4908:	e613      	b.n	4532 <__aeabi_dadd+0x52>
    490a:	1c08      	adds	r0, r1, #0
    490c:	4320      	orrs	r0, r4
    490e:	2d00      	cmp	r5, #0
    4910:	d139      	bne.n	4986 <__aeabi_dadd+0x4a6>
    4912:	2800      	cmp	r0, #0
    4914:	d171      	bne.n	49fa <__aeabi_dadd+0x51a>
    4916:	4659      	mov	r1, fp
    4918:	4319      	orrs	r1, r3
    491a:	d003      	beq.n	4924 <__aeabi_dadd+0x444>
    491c:	1c19      	adds	r1, r3, #0
    491e:	465c      	mov	r4, fp
    4920:	4666      	mov	r6, ip
    4922:	e606      	b.n	4532 <__aeabi_dadd+0x52>
    4924:	2700      	movs	r7, #0
    4926:	2100      	movs	r1, #0
    4928:	2400      	movs	r4, #0
    492a:	e694      	b.n	4656 <__aeabi_dadd+0x176>
    492c:	4660      	mov	r0, ip
    492e:	3820      	subs	r0, #32
    4930:	1c1a      	adds	r2, r3, #0
    4932:	40c2      	lsrs	r2, r0
    4934:	4660      	mov	r0, ip
    4936:	4691      	mov	r9, r2
    4938:	2820      	cmp	r0, #32
    493a:	d100      	bne.n	493e <__aeabi_dadd+0x45e>
    493c:	e0ac      	b.n	4a98 <__aeabi_dadd+0x5b8>
    493e:	2240      	movs	r2, #64	; 0x40
    4940:	1a12      	subs	r2, r2, r0
    4942:	4093      	lsls	r3, r2
    4944:	465a      	mov	r2, fp
    4946:	431a      	orrs	r2, r3
    4948:	1e53      	subs	r3, r2, #1
    494a:	419a      	sbcs	r2, r3
    494c:	464b      	mov	r3, r9
    494e:	431a      	orrs	r2, r3
    4950:	2300      	movs	r3, #0
    4952:	e6b6      	b.n	46c2 <__aeabi_dadd+0x1e2>
    4954:	4d71      	ldr	r5, [pc, #452]	; (4b1c <__aeabi_dadd+0x63c>)
    4956:	45aa      	cmp	sl, r5
    4958:	d000      	beq.n	495c <__aeabi_dadd+0x47c>
    495a:	e76f      	b.n	483c <__aeabi_dadd+0x35c>
    495c:	1c19      	adds	r1, r3, #0
    495e:	465c      	mov	r4, fp
    4960:	4655      	mov	r5, sl
    4962:	4666      	mov	r6, ip
    4964:	e5e5      	b.n	4532 <__aeabi_dadd+0x52>
    4966:	2d00      	cmp	r5, #0
    4968:	d122      	bne.n	49b0 <__aeabi_dadd+0x4d0>
    496a:	1c0d      	adds	r5, r1, #0
    496c:	4325      	orrs	r5, r4
    496e:	d077      	beq.n	4a60 <__aeabi_dadd+0x580>
    4970:	43d5      	mvns	r5, r2
    4972:	2d00      	cmp	r5, #0
    4974:	d171      	bne.n	4a5a <__aeabi_dadd+0x57a>
    4976:	445c      	add	r4, fp
    4978:	455c      	cmp	r4, fp
    497a:	4192      	sbcs	r2, r2
    497c:	1859      	adds	r1, r3, r1
    497e:	4252      	negs	r2, r2
    4980:	1889      	adds	r1, r1, r2
    4982:	4655      	mov	r5, sl
    4984:	e6a4      	b.n	46d0 <__aeabi_dadd+0x1f0>
    4986:	2800      	cmp	r0, #0
    4988:	d14d      	bne.n	4a26 <__aeabi_dadd+0x546>
    498a:	4659      	mov	r1, fp
    498c:	4319      	orrs	r1, r3
    498e:	d100      	bne.n	4992 <__aeabi_dadd+0x4b2>
    4990:	e094      	b.n	4abc <__aeabi_dadd+0x5dc>
    4992:	1c19      	adds	r1, r3, #0
    4994:	465c      	mov	r4, fp
    4996:	4666      	mov	r6, ip
    4998:	4d60      	ldr	r5, [pc, #384]	; (4b1c <__aeabi_dadd+0x63c>)
    499a:	e5ca      	b.n	4532 <__aeabi_dadd+0x52>
    499c:	430c      	orrs	r4, r1
    499e:	1e61      	subs	r1, r4, #1
    49a0:	418c      	sbcs	r4, r1
    49a2:	b2e4      	uxtb	r4, r4
    49a4:	2100      	movs	r1, #0
    49a6:	e75b      	b.n	4860 <__aeabi_dadd+0x380>
    49a8:	1c05      	adds	r5, r0, #0
    49aa:	2100      	movs	r1, #0
    49ac:	2400      	movs	r4, #0
    49ae:	e652      	b.n	4656 <__aeabi_dadd+0x176>
    49b0:	4d5a      	ldr	r5, [pc, #360]	; (4b1c <__aeabi_dadd+0x63c>)
    49b2:	45aa      	cmp	sl, r5
    49b4:	d054      	beq.n	4a60 <__aeabi_dadd+0x580>
    49b6:	4255      	negs	r5, r2
    49b8:	2280      	movs	r2, #128	; 0x80
    49ba:	0410      	lsls	r0, r2, #16
    49bc:	4301      	orrs	r1, r0
    49be:	2d38      	cmp	r5, #56	; 0x38
    49c0:	dd00      	ble.n	49c4 <__aeabi_dadd+0x4e4>
    49c2:	e081      	b.n	4ac8 <__aeabi_dadd+0x5e8>
    49c4:	2d1f      	cmp	r5, #31
    49c6:	dd00      	ble.n	49ca <__aeabi_dadd+0x4ea>
    49c8:	e092      	b.n	4af0 <__aeabi_dadd+0x610>
    49ca:	2220      	movs	r2, #32
    49cc:	1b50      	subs	r0, r2, r5
    49ce:	1c0a      	adds	r2, r1, #0
    49d0:	4684      	mov	ip, r0
    49d2:	4082      	lsls	r2, r0
    49d4:	1c20      	adds	r0, r4, #0
    49d6:	40e8      	lsrs	r0, r5
    49d8:	4302      	orrs	r2, r0
    49da:	4690      	mov	r8, r2
    49dc:	4662      	mov	r2, ip
    49de:	4094      	lsls	r4, r2
    49e0:	1e60      	subs	r0, r4, #1
    49e2:	4184      	sbcs	r4, r0
    49e4:	4642      	mov	r2, r8
    49e6:	4314      	orrs	r4, r2
    49e8:	40e9      	lsrs	r1, r5
    49ea:	445c      	add	r4, fp
    49ec:	455c      	cmp	r4, fp
    49ee:	4192      	sbcs	r2, r2
    49f0:	18cb      	adds	r3, r1, r3
    49f2:	4252      	negs	r2, r2
    49f4:	1899      	adds	r1, r3, r2
    49f6:	4655      	mov	r5, sl
    49f8:	e66a      	b.n	46d0 <__aeabi_dadd+0x1f0>
    49fa:	4658      	mov	r0, fp
    49fc:	4318      	orrs	r0, r3
    49fe:	d100      	bne.n	4a02 <__aeabi_dadd+0x522>
    4a00:	e597      	b.n	4532 <__aeabi_dadd+0x52>
    4a02:	4658      	mov	r0, fp
    4a04:	1a27      	subs	r7, r4, r0
    4a06:	42bc      	cmp	r4, r7
    4a08:	4192      	sbcs	r2, r2
    4a0a:	1ac8      	subs	r0, r1, r3
    4a0c:	4252      	negs	r2, r2
    4a0e:	1a80      	subs	r0, r0, r2
    4a10:	0202      	lsls	r2, r0, #8
    4a12:	d566      	bpl.n	4ae2 <__aeabi_dadd+0x602>
    4a14:	4658      	mov	r0, fp
    4a16:	1b04      	subs	r4, r0, r4
    4a18:	45a3      	cmp	fp, r4
    4a1a:	4192      	sbcs	r2, r2
    4a1c:	1a59      	subs	r1, r3, r1
    4a1e:	4252      	negs	r2, r2
    4a20:	1a89      	subs	r1, r1, r2
    4a22:	4666      	mov	r6, ip
    4a24:	e585      	b.n	4532 <__aeabi_dadd+0x52>
    4a26:	4658      	mov	r0, fp
    4a28:	4318      	orrs	r0, r3
    4a2a:	d033      	beq.n	4a94 <__aeabi_dadd+0x5b4>
    4a2c:	0748      	lsls	r0, r1, #29
    4a2e:	08e4      	lsrs	r4, r4, #3
    4a30:	4304      	orrs	r4, r0
    4a32:	2080      	movs	r0, #128	; 0x80
    4a34:	08c9      	lsrs	r1, r1, #3
    4a36:	0300      	lsls	r0, r0, #12
    4a38:	4201      	tst	r1, r0
    4a3a:	d008      	beq.n	4a4e <__aeabi_dadd+0x56e>
    4a3c:	08dd      	lsrs	r5, r3, #3
    4a3e:	4205      	tst	r5, r0
    4a40:	d105      	bne.n	4a4e <__aeabi_dadd+0x56e>
    4a42:	4659      	mov	r1, fp
    4a44:	08ca      	lsrs	r2, r1, #3
    4a46:	075c      	lsls	r4, r3, #29
    4a48:	4314      	orrs	r4, r2
    4a4a:	1c29      	adds	r1, r5, #0
    4a4c:	4666      	mov	r6, ip
    4a4e:	0f63      	lsrs	r3, r4, #29
    4a50:	00c9      	lsls	r1, r1, #3
    4a52:	4319      	orrs	r1, r3
    4a54:	00e4      	lsls	r4, r4, #3
    4a56:	4d31      	ldr	r5, [pc, #196]	; (4b1c <__aeabi_dadd+0x63c>)
    4a58:	e56b      	b.n	4532 <__aeabi_dadd+0x52>
    4a5a:	4a30      	ldr	r2, [pc, #192]	; (4b1c <__aeabi_dadd+0x63c>)
    4a5c:	4592      	cmp	sl, r2
    4a5e:	d1ae      	bne.n	49be <__aeabi_dadd+0x4de>
    4a60:	1c19      	adds	r1, r3, #0
    4a62:	465c      	mov	r4, fp
    4a64:	4655      	mov	r5, sl
    4a66:	e564      	b.n	4532 <__aeabi_dadd+0x52>
    4a68:	2800      	cmp	r0, #0
    4a6a:	d036      	beq.n	4ada <__aeabi_dadd+0x5fa>
    4a6c:	4658      	mov	r0, fp
    4a6e:	4318      	orrs	r0, r3
    4a70:	d010      	beq.n	4a94 <__aeabi_dadd+0x5b4>
    4a72:	2580      	movs	r5, #128	; 0x80
    4a74:	0748      	lsls	r0, r1, #29
    4a76:	08e4      	lsrs	r4, r4, #3
    4a78:	08c9      	lsrs	r1, r1, #3
    4a7a:	032d      	lsls	r5, r5, #12
    4a7c:	4304      	orrs	r4, r0
    4a7e:	4229      	tst	r1, r5
    4a80:	d0e5      	beq.n	4a4e <__aeabi_dadd+0x56e>
    4a82:	08d8      	lsrs	r0, r3, #3
    4a84:	4228      	tst	r0, r5
    4a86:	d1e2      	bne.n	4a4e <__aeabi_dadd+0x56e>
    4a88:	465d      	mov	r5, fp
    4a8a:	08ea      	lsrs	r2, r5, #3
    4a8c:	075c      	lsls	r4, r3, #29
    4a8e:	4314      	orrs	r4, r2
    4a90:	1c01      	adds	r1, r0, #0
    4a92:	e7dc      	b.n	4a4e <__aeabi_dadd+0x56e>
    4a94:	4d21      	ldr	r5, [pc, #132]	; (4b1c <__aeabi_dadd+0x63c>)
    4a96:	e54c      	b.n	4532 <__aeabi_dadd+0x52>
    4a98:	2300      	movs	r3, #0
    4a9a:	e753      	b.n	4944 <__aeabi_dadd+0x464>
    4a9c:	1c3d      	adds	r5, r7, #0
    4a9e:	3d20      	subs	r5, #32
    4aa0:	1c0a      	adds	r2, r1, #0
    4aa2:	40ea      	lsrs	r2, r5
    4aa4:	1c15      	adds	r5, r2, #0
    4aa6:	2f20      	cmp	r7, #32
    4aa8:	d034      	beq.n	4b14 <__aeabi_dadd+0x634>
    4aaa:	2640      	movs	r6, #64	; 0x40
    4aac:	1bf7      	subs	r7, r6, r7
    4aae:	40b9      	lsls	r1, r7
    4ab0:	430c      	orrs	r4, r1
    4ab2:	1e61      	subs	r1, r4, #1
    4ab4:	418c      	sbcs	r4, r1
    4ab6:	432c      	orrs	r4, r5
    4ab8:	2100      	movs	r1, #0
    4aba:	e6d1      	b.n	4860 <__aeabi_dadd+0x380>
    4abc:	2180      	movs	r1, #128	; 0x80
    4abe:	2700      	movs	r7, #0
    4ac0:	03c9      	lsls	r1, r1, #15
    4ac2:	4d16      	ldr	r5, [pc, #88]	; (4b1c <__aeabi_dadd+0x63c>)
    4ac4:	2400      	movs	r4, #0
    4ac6:	e5c6      	b.n	4656 <__aeabi_dadd+0x176>
    4ac8:	430c      	orrs	r4, r1
    4aca:	1e61      	subs	r1, r4, #1
    4acc:	418c      	sbcs	r4, r1
    4ace:	b2e4      	uxtb	r4, r4
    4ad0:	2100      	movs	r1, #0
    4ad2:	e78a      	b.n	49ea <__aeabi_dadd+0x50a>
    4ad4:	1c19      	adds	r1, r3, #0
    4ad6:	465c      	mov	r4, fp
    4ad8:	e52b      	b.n	4532 <__aeabi_dadd+0x52>
    4ada:	1c19      	adds	r1, r3, #0
    4adc:	465c      	mov	r4, fp
    4ade:	4d0f      	ldr	r5, [pc, #60]	; (4b1c <__aeabi_dadd+0x63c>)
    4ae0:	e527      	b.n	4532 <__aeabi_dadd+0x52>
    4ae2:	1c03      	adds	r3, r0, #0
    4ae4:	433b      	orrs	r3, r7
    4ae6:	d100      	bne.n	4aea <__aeabi_dadd+0x60a>
    4ae8:	e71c      	b.n	4924 <__aeabi_dadd+0x444>
    4aea:	1c01      	adds	r1, r0, #0
    4aec:	1c3c      	adds	r4, r7, #0
    4aee:	e520      	b.n	4532 <__aeabi_dadd+0x52>
    4af0:	2020      	movs	r0, #32
    4af2:	4240      	negs	r0, r0
    4af4:	1940      	adds	r0, r0, r5
    4af6:	1c0a      	adds	r2, r1, #0
    4af8:	40c2      	lsrs	r2, r0
    4afa:	4690      	mov	r8, r2
    4afc:	2d20      	cmp	r5, #32
    4afe:	d00b      	beq.n	4b18 <__aeabi_dadd+0x638>
    4b00:	2040      	movs	r0, #64	; 0x40
    4b02:	1b45      	subs	r5, r0, r5
    4b04:	40a9      	lsls	r1, r5
    4b06:	430c      	orrs	r4, r1
    4b08:	1e61      	subs	r1, r4, #1
    4b0a:	418c      	sbcs	r4, r1
    4b0c:	4645      	mov	r5, r8
    4b0e:	432c      	orrs	r4, r5
    4b10:	2100      	movs	r1, #0
    4b12:	e76a      	b.n	49ea <__aeabi_dadd+0x50a>
    4b14:	2100      	movs	r1, #0
    4b16:	e7cb      	b.n	4ab0 <__aeabi_dadd+0x5d0>
    4b18:	2100      	movs	r1, #0
    4b1a:	e7f4      	b.n	4b06 <__aeabi_dadd+0x626>
    4b1c:	000007ff 	.word	0x000007ff
    4b20:	ff7fffff 	.word	0xff7fffff

00004b24 <__aeabi_ddiv>:
    4b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b26:	4656      	mov	r6, sl
    4b28:	4644      	mov	r4, r8
    4b2a:	465f      	mov	r7, fp
    4b2c:	464d      	mov	r5, r9
    4b2e:	b4f0      	push	{r4, r5, r6, r7}
    4b30:	1c1f      	adds	r7, r3, #0
    4b32:	030b      	lsls	r3, r1, #12
    4b34:	0b1b      	lsrs	r3, r3, #12
    4b36:	4698      	mov	r8, r3
    4b38:	004b      	lsls	r3, r1, #1
    4b3a:	b087      	sub	sp, #28
    4b3c:	1c04      	adds	r4, r0, #0
    4b3e:	4681      	mov	r9, r0
    4b40:	0d5b      	lsrs	r3, r3, #21
    4b42:	0fc8      	lsrs	r0, r1, #31
    4b44:	1c16      	adds	r6, r2, #0
    4b46:	469a      	mov	sl, r3
    4b48:	9000      	str	r0, [sp, #0]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d051      	beq.n	4bf2 <__aeabi_ddiv+0xce>
    4b4e:	4b6a      	ldr	r3, [pc, #424]	; (4cf8 <__aeabi_ddiv+0x1d4>)
    4b50:	459a      	cmp	sl, r3
    4b52:	d031      	beq.n	4bb8 <__aeabi_ddiv+0x94>
    4b54:	2280      	movs	r2, #128	; 0x80
    4b56:	4641      	mov	r1, r8
    4b58:	0352      	lsls	r2, r2, #13
    4b5a:	430a      	orrs	r2, r1
    4b5c:	0f63      	lsrs	r3, r4, #29
    4b5e:	00d2      	lsls	r2, r2, #3
    4b60:	431a      	orrs	r2, r3
    4b62:	4b66      	ldr	r3, [pc, #408]	; (4cfc <__aeabi_ddiv+0x1d8>)
    4b64:	4690      	mov	r8, r2
    4b66:	2500      	movs	r5, #0
    4b68:	00e2      	lsls	r2, r4, #3
    4b6a:	4691      	mov	r9, r2
    4b6c:	449a      	add	sl, r3
    4b6e:	2400      	movs	r4, #0
    4b70:	9502      	str	r5, [sp, #8]
    4b72:	033b      	lsls	r3, r7, #12
    4b74:	0b1b      	lsrs	r3, r3, #12
    4b76:	469b      	mov	fp, r3
    4b78:	0ffd      	lsrs	r5, r7, #31
    4b7a:	007b      	lsls	r3, r7, #1
    4b7c:	1c31      	adds	r1, r6, #0
    4b7e:	0d5b      	lsrs	r3, r3, #21
    4b80:	9501      	str	r5, [sp, #4]
    4b82:	d060      	beq.n	4c46 <__aeabi_ddiv+0x122>
    4b84:	4a5c      	ldr	r2, [pc, #368]	; (4cf8 <__aeabi_ddiv+0x1d4>)
    4b86:	4293      	cmp	r3, r2
    4b88:	d054      	beq.n	4c34 <__aeabi_ddiv+0x110>
    4b8a:	2180      	movs	r1, #128	; 0x80
    4b8c:	4658      	mov	r0, fp
    4b8e:	0349      	lsls	r1, r1, #13
    4b90:	4301      	orrs	r1, r0
    4b92:	0f72      	lsrs	r2, r6, #29
    4b94:	00c9      	lsls	r1, r1, #3
    4b96:	4311      	orrs	r1, r2
    4b98:	4a58      	ldr	r2, [pc, #352]	; (4cfc <__aeabi_ddiv+0x1d8>)
    4b9a:	468b      	mov	fp, r1
    4b9c:	189b      	adds	r3, r3, r2
    4b9e:	00f1      	lsls	r1, r6, #3
    4ba0:	2000      	movs	r0, #0
    4ba2:	9a00      	ldr	r2, [sp, #0]
    4ba4:	4304      	orrs	r4, r0
    4ba6:	406a      	eors	r2, r5
    4ba8:	9203      	str	r2, [sp, #12]
    4baa:	2c0f      	cmp	r4, #15
    4bac:	d900      	bls.n	4bb0 <__aeabi_ddiv+0x8c>
    4bae:	e0ad      	b.n	4d0c <__aeabi_ddiv+0x1e8>
    4bb0:	4e53      	ldr	r6, [pc, #332]	; (4d00 <__aeabi_ddiv+0x1dc>)
    4bb2:	00a4      	lsls	r4, r4, #2
    4bb4:	5934      	ldr	r4, [r6, r4]
    4bb6:	46a7      	mov	pc, r4
    4bb8:	4640      	mov	r0, r8
    4bba:	4304      	orrs	r4, r0
    4bbc:	d16e      	bne.n	4c9c <__aeabi_ddiv+0x178>
    4bbe:	2100      	movs	r1, #0
    4bc0:	2502      	movs	r5, #2
    4bc2:	2408      	movs	r4, #8
    4bc4:	4688      	mov	r8, r1
    4bc6:	4689      	mov	r9, r1
    4bc8:	9502      	str	r5, [sp, #8]
    4bca:	e7d2      	b.n	4b72 <__aeabi_ddiv+0x4e>
    4bcc:	9c00      	ldr	r4, [sp, #0]
    4bce:	9802      	ldr	r0, [sp, #8]
    4bd0:	46c3      	mov	fp, r8
    4bd2:	4649      	mov	r1, r9
    4bd4:	9401      	str	r4, [sp, #4]
    4bd6:	2802      	cmp	r0, #2
    4bd8:	d064      	beq.n	4ca4 <__aeabi_ddiv+0x180>
    4bda:	2803      	cmp	r0, #3
    4bdc:	d100      	bne.n	4be0 <__aeabi_ddiv+0xbc>
    4bde:	e2ab      	b.n	5138 <__aeabi_ddiv+0x614>
    4be0:	2801      	cmp	r0, #1
    4be2:	d000      	beq.n	4be6 <__aeabi_ddiv+0xc2>
    4be4:	e238      	b.n	5058 <__aeabi_ddiv+0x534>
    4be6:	9a01      	ldr	r2, [sp, #4]
    4be8:	2400      	movs	r4, #0
    4bea:	4002      	ands	r2, r0
    4bec:	2500      	movs	r5, #0
    4bee:	46a1      	mov	r9, r4
    4bf0:	e060      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4bf2:	4643      	mov	r3, r8
    4bf4:	4323      	orrs	r3, r4
    4bf6:	d04a      	beq.n	4c8e <__aeabi_ddiv+0x16a>
    4bf8:	4640      	mov	r0, r8
    4bfa:	2800      	cmp	r0, #0
    4bfc:	d100      	bne.n	4c00 <__aeabi_ddiv+0xdc>
    4bfe:	e1c0      	b.n	4f82 <__aeabi_ddiv+0x45e>
    4c00:	f001 fb42 	bl	6288 <__clzsi2>
    4c04:	1e03      	subs	r3, r0, #0
    4c06:	2b27      	cmp	r3, #39	; 0x27
    4c08:	dd00      	ble.n	4c0c <__aeabi_ddiv+0xe8>
    4c0a:	e1b3      	b.n	4f74 <__aeabi_ddiv+0x450>
    4c0c:	2128      	movs	r1, #40	; 0x28
    4c0e:	1a0d      	subs	r5, r1, r0
    4c10:	1c21      	adds	r1, r4, #0
    4c12:	3b08      	subs	r3, #8
    4c14:	4642      	mov	r2, r8
    4c16:	40e9      	lsrs	r1, r5
    4c18:	409a      	lsls	r2, r3
    4c1a:	1c0d      	adds	r5, r1, #0
    4c1c:	4315      	orrs	r5, r2
    4c1e:	1c22      	adds	r2, r4, #0
    4c20:	409a      	lsls	r2, r3
    4c22:	46a8      	mov	r8, r5
    4c24:	4691      	mov	r9, r2
    4c26:	4b37      	ldr	r3, [pc, #220]	; (4d04 <__aeabi_ddiv+0x1e0>)
    4c28:	2500      	movs	r5, #0
    4c2a:	1a1b      	subs	r3, r3, r0
    4c2c:	469a      	mov	sl, r3
    4c2e:	2400      	movs	r4, #0
    4c30:	9502      	str	r5, [sp, #8]
    4c32:	e79e      	b.n	4b72 <__aeabi_ddiv+0x4e>
    4c34:	465a      	mov	r2, fp
    4c36:	4316      	orrs	r6, r2
    4c38:	2003      	movs	r0, #3
    4c3a:	2e00      	cmp	r6, #0
    4c3c:	d1b1      	bne.n	4ba2 <__aeabi_ddiv+0x7e>
    4c3e:	46b3      	mov	fp, r6
    4c40:	2100      	movs	r1, #0
    4c42:	2002      	movs	r0, #2
    4c44:	e7ad      	b.n	4ba2 <__aeabi_ddiv+0x7e>
    4c46:	465a      	mov	r2, fp
    4c48:	4332      	orrs	r2, r6
    4c4a:	d01b      	beq.n	4c84 <__aeabi_ddiv+0x160>
    4c4c:	465b      	mov	r3, fp
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d100      	bne.n	4c54 <__aeabi_ddiv+0x130>
    4c52:	e18a      	b.n	4f6a <__aeabi_ddiv+0x446>
    4c54:	4658      	mov	r0, fp
    4c56:	f001 fb17 	bl	6288 <__clzsi2>
    4c5a:	2827      	cmp	r0, #39	; 0x27
    4c5c:	dd00      	ble.n	4c60 <__aeabi_ddiv+0x13c>
    4c5e:	e17d      	b.n	4f5c <__aeabi_ddiv+0x438>
    4c60:	2228      	movs	r2, #40	; 0x28
    4c62:	1a17      	subs	r7, r2, r0
    4c64:	1c01      	adds	r1, r0, #0
    4c66:	1c32      	adds	r2, r6, #0
    4c68:	3908      	subs	r1, #8
    4c6a:	465b      	mov	r3, fp
    4c6c:	40fa      	lsrs	r2, r7
    4c6e:	408b      	lsls	r3, r1
    4c70:	1c17      	adds	r7, r2, #0
    4c72:	431f      	orrs	r7, r3
    4c74:	1c33      	adds	r3, r6, #0
    4c76:	408b      	lsls	r3, r1
    4c78:	46bb      	mov	fp, r7
    4c7a:	1c19      	adds	r1, r3, #0
    4c7c:	4b21      	ldr	r3, [pc, #132]	; (4d04 <__aeabi_ddiv+0x1e0>)
    4c7e:	1a1b      	subs	r3, r3, r0
    4c80:	2000      	movs	r0, #0
    4c82:	e78e      	b.n	4ba2 <__aeabi_ddiv+0x7e>
    4c84:	2700      	movs	r7, #0
    4c86:	46bb      	mov	fp, r7
    4c88:	2100      	movs	r1, #0
    4c8a:	2001      	movs	r0, #1
    4c8c:	e789      	b.n	4ba2 <__aeabi_ddiv+0x7e>
    4c8e:	2000      	movs	r0, #0
    4c90:	2501      	movs	r5, #1
    4c92:	2404      	movs	r4, #4
    4c94:	4680      	mov	r8, r0
    4c96:	4681      	mov	r9, r0
    4c98:	9502      	str	r5, [sp, #8]
    4c9a:	e76a      	b.n	4b72 <__aeabi_ddiv+0x4e>
    4c9c:	2503      	movs	r5, #3
    4c9e:	240c      	movs	r4, #12
    4ca0:	9502      	str	r5, [sp, #8]
    4ca2:	e766      	b.n	4b72 <__aeabi_ddiv+0x4e>
    4ca4:	9c01      	ldr	r4, [sp, #4]
    4ca6:	9403      	str	r4, [sp, #12]
    4ca8:	9d03      	ldr	r5, [sp, #12]
    4caa:	2201      	movs	r2, #1
    4cac:	402a      	ands	r2, r5
    4cae:	2400      	movs	r4, #0
    4cb0:	4d11      	ldr	r5, [pc, #68]	; (4cf8 <__aeabi_ddiv+0x1d4>)
    4cb2:	46a1      	mov	r9, r4
    4cb4:	2000      	movs	r0, #0
    4cb6:	2100      	movs	r1, #0
    4cb8:	0324      	lsls	r4, r4, #12
    4cba:	0b26      	lsrs	r6, r4, #12
    4cbc:	0d0c      	lsrs	r4, r1, #20
    4cbe:	0524      	lsls	r4, r4, #20
    4cc0:	4b11      	ldr	r3, [pc, #68]	; (4d08 <__aeabi_ddiv+0x1e4>)
    4cc2:	4334      	orrs	r4, r6
    4cc4:	052d      	lsls	r5, r5, #20
    4cc6:	4023      	ands	r3, r4
    4cc8:	432b      	orrs	r3, r5
    4cca:	005b      	lsls	r3, r3, #1
    4ccc:	085b      	lsrs	r3, r3, #1
    4cce:	07d2      	lsls	r2, r2, #31
    4cd0:	1c19      	adds	r1, r3, #0
    4cd2:	4648      	mov	r0, r9
    4cd4:	4311      	orrs	r1, r2
    4cd6:	b007      	add	sp, #28
    4cd8:	bc3c      	pop	{r2, r3, r4, r5}
    4cda:	4690      	mov	r8, r2
    4cdc:	4699      	mov	r9, r3
    4cde:	46a2      	mov	sl, r4
    4ce0:	46ab      	mov	fp, r5
    4ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ce4:	2200      	movs	r2, #0
    4ce6:	2480      	movs	r4, #128	; 0x80
    4ce8:	0324      	lsls	r4, r4, #12
    4cea:	4691      	mov	r9, r2
    4cec:	4d02      	ldr	r5, [pc, #8]	; (4cf8 <__aeabi_ddiv+0x1d4>)
    4cee:	e7e1      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4cf0:	2400      	movs	r4, #0
    4cf2:	2500      	movs	r5, #0
    4cf4:	46a1      	mov	r9, r4
    4cf6:	e7dd      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4cf8:	000007ff 	.word	0x000007ff
    4cfc:	fffffc01 	.word	0xfffffc01
    4d00:	00006614 	.word	0x00006614
    4d04:	fffffc0d 	.word	0xfffffc0d
    4d08:	800fffff 	.word	0x800fffff
    4d0c:	4655      	mov	r5, sl
    4d0e:	1aed      	subs	r5, r5, r3
    4d10:	9504      	str	r5, [sp, #16]
    4d12:	45d8      	cmp	r8, fp
    4d14:	d900      	bls.n	4d18 <__aeabi_ddiv+0x1f4>
    4d16:	e153      	b.n	4fc0 <__aeabi_ddiv+0x49c>
    4d18:	d100      	bne.n	4d1c <__aeabi_ddiv+0x1f8>
    4d1a:	e14e      	b.n	4fba <__aeabi_ddiv+0x496>
    4d1c:	9c04      	ldr	r4, [sp, #16]
    4d1e:	2500      	movs	r5, #0
    4d20:	3c01      	subs	r4, #1
    4d22:	464e      	mov	r6, r9
    4d24:	9404      	str	r4, [sp, #16]
    4d26:	4647      	mov	r7, r8
    4d28:	46a9      	mov	r9, r5
    4d2a:	4658      	mov	r0, fp
    4d2c:	0203      	lsls	r3, r0, #8
    4d2e:	0e0c      	lsrs	r4, r1, #24
    4d30:	431c      	orrs	r4, r3
    4d32:	0209      	lsls	r1, r1, #8
    4d34:	0c25      	lsrs	r5, r4, #16
    4d36:	0423      	lsls	r3, r4, #16
    4d38:	0c1b      	lsrs	r3, r3, #16
    4d3a:	9100      	str	r1, [sp, #0]
    4d3c:	1c38      	adds	r0, r7, #0
    4d3e:	1c29      	adds	r1, r5, #0
    4d40:	9301      	str	r3, [sp, #4]
    4d42:	f7ff fa6d 	bl	4220 <__aeabi_uidiv>
    4d46:	9901      	ldr	r1, [sp, #4]
    4d48:	4683      	mov	fp, r0
    4d4a:	4341      	muls	r1, r0
    4d4c:	1c38      	adds	r0, r7, #0
    4d4e:	468a      	mov	sl, r1
    4d50:	1c29      	adds	r1, r5, #0
    4d52:	f7ff faa9 	bl	42a8 <__aeabi_uidivmod>
    4d56:	0c33      	lsrs	r3, r6, #16
    4d58:	0409      	lsls	r1, r1, #16
    4d5a:	4319      	orrs	r1, r3
    4d5c:	458a      	cmp	sl, r1
    4d5e:	d90c      	bls.n	4d7a <__aeabi_ddiv+0x256>
    4d60:	465b      	mov	r3, fp
    4d62:	1909      	adds	r1, r1, r4
    4d64:	3b01      	subs	r3, #1
    4d66:	428c      	cmp	r4, r1
    4d68:	d900      	bls.n	4d6c <__aeabi_ddiv+0x248>
    4d6a:	e147      	b.n	4ffc <__aeabi_ddiv+0x4d8>
    4d6c:	458a      	cmp	sl, r1
    4d6e:	d800      	bhi.n	4d72 <__aeabi_ddiv+0x24e>
    4d70:	e144      	b.n	4ffc <__aeabi_ddiv+0x4d8>
    4d72:	2202      	movs	r2, #2
    4d74:	4252      	negs	r2, r2
    4d76:	4493      	add	fp, r2
    4d78:	1909      	adds	r1, r1, r4
    4d7a:	4653      	mov	r3, sl
    4d7c:	1acb      	subs	r3, r1, r3
    4d7e:	1c18      	adds	r0, r3, #0
    4d80:	1c29      	adds	r1, r5, #0
    4d82:	4698      	mov	r8, r3
    4d84:	f7ff fa4c 	bl	4220 <__aeabi_uidiv>
    4d88:	1c07      	adds	r7, r0, #0
    4d8a:	9801      	ldr	r0, [sp, #4]
    4d8c:	1c29      	adds	r1, r5, #0
    4d8e:	4378      	muls	r0, r7
    4d90:	4682      	mov	sl, r0
    4d92:	4640      	mov	r0, r8
    4d94:	f7ff fa88 	bl	42a8 <__aeabi_uidivmod>
    4d98:	0436      	lsls	r6, r6, #16
    4d9a:	040b      	lsls	r3, r1, #16
    4d9c:	0c36      	lsrs	r6, r6, #16
    4d9e:	4333      	orrs	r3, r6
    4da0:	459a      	cmp	sl, r3
    4da2:	d909      	bls.n	4db8 <__aeabi_ddiv+0x294>
    4da4:	191b      	adds	r3, r3, r4
    4da6:	1e7a      	subs	r2, r7, #1
    4da8:	429c      	cmp	r4, r3
    4daa:	d900      	bls.n	4dae <__aeabi_ddiv+0x28a>
    4dac:	e124      	b.n	4ff8 <__aeabi_ddiv+0x4d4>
    4dae:	459a      	cmp	sl, r3
    4db0:	d800      	bhi.n	4db4 <__aeabi_ddiv+0x290>
    4db2:	e121      	b.n	4ff8 <__aeabi_ddiv+0x4d4>
    4db4:	3f02      	subs	r7, #2
    4db6:	191b      	adds	r3, r3, r4
    4db8:	465e      	mov	r6, fp
    4dba:	0432      	lsls	r2, r6, #16
    4dbc:	4317      	orrs	r7, r2
    4dbe:	0c38      	lsrs	r0, r7, #16
    4dc0:	46bb      	mov	fp, r7
    4dc2:	9e00      	ldr	r6, [sp, #0]
    4dc4:	9f00      	ldr	r7, [sp, #0]
    4dc6:	4651      	mov	r1, sl
    4dc8:	0c3f      	lsrs	r7, r7, #16
    4dca:	0432      	lsls	r2, r6, #16
    4dcc:	1a5b      	subs	r3, r3, r1
    4dce:	4659      	mov	r1, fp
    4dd0:	46ba      	mov	sl, r7
    4dd2:	0c12      	lsrs	r2, r2, #16
    4dd4:	040f      	lsls	r7, r1, #16
    4dd6:	0c3f      	lsrs	r7, r7, #16
    4dd8:	4690      	mov	r8, r2
    4dda:	4651      	mov	r1, sl
    4ddc:	437a      	muls	r2, r7
    4dde:	434f      	muls	r7, r1
    4de0:	4641      	mov	r1, r8
    4de2:	4341      	muls	r1, r0
    4de4:	4656      	mov	r6, sl
    4de6:	4370      	muls	r0, r6
    4de8:	19cf      	adds	r7, r1, r7
    4dea:	0c16      	lsrs	r6, r2, #16
    4dec:	19be      	adds	r6, r7, r6
    4dee:	42b1      	cmp	r1, r6
    4df0:	d902      	bls.n	4df8 <__aeabi_ddiv+0x2d4>
    4df2:	2780      	movs	r7, #128	; 0x80
    4df4:	027f      	lsls	r7, r7, #9
    4df6:	19c0      	adds	r0, r0, r7
    4df8:	0c31      	lsrs	r1, r6, #16
    4dfa:	0412      	lsls	r2, r2, #16
    4dfc:	0436      	lsls	r6, r6, #16
    4dfe:	0c12      	lsrs	r2, r2, #16
    4e00:	1840      	adds	r0, r0, r1
    4e02:	18b6      	adds	r6, r6, r2
    4e04:	4283      	cmp	r3, r0
    4e06:	d200      	bcs.n	4e0a <__aeabi_ddiv+0x2e6>
    4e08:	e0c4      	b.n	4f94 <__aeabi_ddiv+0x470>
    4e0a:	d100      	bne.n	4e0e <__aeabi_ddiv+0x2ea>
    4e0c:	e0be      	b.n	4f8c <__aeabi_ddiv+0x468>
    4e0e:	1a19      	subs	r1, r3, r0
    4e10:	4648      	mov	r0, r9
    4e12:	1b86      	subs	r6, r0, r6
    4e14:	45b1      	cmp	r9, r6
    4e16:	41bf      	sbcs	r7, r7
    4e18:	427f      	negs	r7, r7
    4e1a:	1bcf      	subs	r7, r1, r7
    4e1c:	42a7      	cmp	r7, r4
    4e1e:	d100      	bne.n	4e22 <__aeabi_ddiv+0x2fe>
    4e20:	e113      	b.n	504a <__aeabi_ddiv+0x526>
    4e22:	1c29      	adds	r1, r5, #0
    4e24:	1c38      	adds	r0, r7, #0
    4e26:	f7ff f9fb 	bl	4220 <__aeabi_uidiv>
    4e2a:	9901      	ldr	r1, [sp, #4]
    4e2c:	9002      	str	r0, [sp, #8]
    4e2e:	4341      	muls	r1, r0
    4e30:	1c38      	adds	r0, r7, #0
    4e32:	4689      	mov	r9, r1
    4e34:	1c29      	adds	r1, r5, #0
    4e36:	f7ff fa37 	bl	42a8 <__aeabi_uidivmod>
    4e3a:	0c33      	lsrs	r3, r6, #16
    4e3c:	0409      	lsls	r1, r1, #16
    4e3e:	4319      	orrs	r1, r3
    4e40:	4589      	cmp	r9, r1
    4e42:	d90c      	bls.n	4e5e <__aeabi_ddiv+0x33a>
    4e44:	9b02      	ldr	r3, [sp, #8]
    4e46:	1909      	adds	r1, r1, r4
    4e48:	3b01      	subs	r3, #1
    4e4a:	428c      	cmp	r4, r1
    4e4c:	d900      	bls.n	4e50 <__aeabi_ddiv+0x32c>
    4e4e:	e0ff      	b.n	5050 <__aeabi_ddiv+0x52c>
    4e50:	4589      	cmp	r9, r1
    4e52:	d800      	bhi.n	4e56 <__aeabi_ddiv+0x332>
    4e54:	e0fc      	b.n	5050 <__aeabi_ddiv+0x52c>
    4e56:	9f02      	ldr	r7, [sp, #8]
    4e58:	1909      	adds	r1, r1, r4
    4e5a:	3f02      	subs	r7, #2
    4e5c:	9702      	str	r7, [sp, #8]
    4e5e:	464f      	mov	r7, r9
    4e60:	1bcf      	subs	r7, r1, r7
    4e62:	1c38      	adds	r0, r7, #0
    4e64:	1c29      	adds	r1, r5, #0
    4e66:	9705      	str	r7, [sp, #20]
    4e68:	f7ff f9da 	bl	4220 <__aeabi_uidiv>
    4e6c:	1c07      	adds	r7, r0, #0
    4e6e:	9801      	ldr	r0, [sp, #4]
    4e70:	1c29      	adds	r1, r5, #0
    4e72:	4378      	muls	r0, r7
    4e74:	4681      	mov	r9, r0
    4e76:	9805      	ldr	r0, [sp, #20]
    4e78:	f7ff fa16 	bl	42a8 <__aeabi_uidivmod>
    4e7c:	0436      	lsls	r6, r6, #16
    4e7e:	0409      	lsls	r1, r1, #16
    4e80:	0c36      	lsrs	r6, r6, #16
    4e82:	430e      	orrs	r6, r1
    4e84:	45b1      	cmp	r9, r6
    4e86:	d909      	bls.n	4e9c <__aeabi_ddiv+0x378>
    4e88:	1936      	adds	r6, r6, r4
    4e8a:	1e7b      	subs	r3, r7, #1
    4e8c:	42b4      	cmp	r4, r6
    4e8e:	d900      	bls.n	4e92 <__aeabi_ddiv+0x36e>
    4e90:	e0e0      	b.n	5054 <__aeabi_ddiv+0x530>
    4e92:	45b1      	cmp	r9, r6
    4e94:	d800      	bhi.n	4e98 <__aeabi_ddiv+0x374>
    4e96:	e0dd      	b.n	5054 <__aeabi_ddiv+0x530>
    4e98:	3f02      	subs	r7, #2
    4e9a:	1936      	adds	r6, r6, r4
    4e9c:	9d02      	ldr	r5, [sp, #8]
    4e9e:	4649      	mov	r1, r9
    4ea0:	1a76      	subs	r6, r6, r1
    4ea2:	0429      	lsls	r1, r5, #16
    4ea4:	4339      	orrs	r1, r7
    4ea6:	040b      	lsls	r3, r1, #16
    4ea8:	4657      	mov	r7, sl
    4eaa:	0c0a      	lsrs	r2, r1, #16
    4eac:	0c1b      	lsrs	r3, r3, #16
    4eae:	4640      	mov	r0, r8
    4eb0:	4645      	mov	r5, r8
    4eb2:	4358      	muls	r0, r3
    4eb4:	4355      	muls	r5, r2
    4eb6:	437b      	muls	r3, r7
    4eb8:	437a      	muls	r2, r7
    4eba:	18eb      	adds	r3, r5, r3
    4ebc:	0c07      	lsrs	r7, r0, #16
    4ebe:	19db      	adds	r3, r3, r7
    4ec0:	429d      	cmp	r5, r3
    4ec2:	d902      	bls.n	4eca <__aeabi_ddiv+0x3a6>
    4ec4:	2580      	movs	r5, #128	; 0x80
    4ec6:	026d      	lsls	r5, r5, #9
    4ec8:	1952      	adds	r2, r2, r5
    4eca:	0c1d      	lsrs	r5, r3, #16
    4ecc:	0400      	lsls	r0, r0, #16
    4ece:	041b      	lsls	r3, r3, #16
    4ed0:	0c00      	lsrs	r0, r0, #16
    4ed2:	1952      	adds	r2, r2, r5
    4ed4:	181b      	adds	r3, r3, r0
    4ed6:	4296      	cmp	r6, r2
    4ed8:	d335      	bcc.n	4f46 <__aeabi_ddiv+0x422>
    4eda:	d100      	bne.n	4ede <__aeabi_ddiv+0x3ba>
    4edc:	e0fc      	b.n	50d8 <__aeabi_ddiv+0x5b4>
    4ede:	2301      	movs	r3, #1
    4ee0:	4319      	orrs	r1, r3
    4ee2:	9e04      	ldr	r6, [sp, #16]
    4ee4:	4f99      	ldr	r7, [pc, #612]	; (514c <__aeabi_ddiv+0x628>)
    4ee6:	19f5      	adds	r5, r6, r7
    4ee8:	2d00      	cmp	r5, #0
    4eea:	dc00      	bgt.n	4eee <__aeabi_ddiv+0x3ca>
    4eec:	e0a1      	b.n	5032 <__aeabi_ddiv+0x50e>
    4eee:	0748      	lsls	r0, r1, #29
    4ef0:	d009      	beq.n	4f06 <__aeabi_ddiv+0x3e2>
    4ef2:	230f      	movs	r3, #15
    4ef4:	400b      	ands	r3, r1
    4ef6:	2b04      	cmp	r3, #4
    4ef8:	d005      	beq.n	4f06 <__aeabi_ddiv+0x3e2>
    4efa:	1d0b      	adds	r3, r1, #4
    4efc:	428b      	cmp	r3, r1
    4efe:	4189      	sbcs	r1, r1
    4f00:	4249      	negs	r1, r1
    4f02:	448b      	add	fp, r1
    4f04:	1c19      	adds	r1, r3, #0
    4f06:	465a      	mov	r2, fp
    4f08:	01d2      	lsls	r2, r2, #7
    4f0a:	d507      	bpl.n	4f1c <__aeabi_ddiv+0x3f8>
    4f0c:	4b90      	ldr	r3, [pc, #576]	; (5150 <__aeabi_ddiv+0x62c>)
    4f0e:	465c      	mov	r4, fp
    4f10:	9e04      	ldr	r6, [sp, #16]
    4f12:	2780      	movs	r7, #128	; 0x80
    4f14:	401c      	ands	r4, r3
    4f16:	00ff      	lsls	r7, r7, #3
    4f18:	46a3      	mov	fp, r4
    4f1a:	19f5      	adds	r5, r6, r7
    4f1c:	4b8d      	ldr	r3, [pc, #564]	; (5154 <__aeabi_ddiv+0x630>)
    4f1e:	429d      	cmp	r5, r3
    4f20:	dd7a      	ble.n	5018 <__aeabi_ddiv+0x4f4>
    4f22:	9c03      	ldr	r4, [sp, #12]
    4f24:	2201      	movs	r2, #1
    4f26:	4022      	ands	r2, r4
    4f28:	2400      	movs	r4, #0
    4f2a:	4d8b      	ldr	r5, [pc, #556]	; (5158 <__aeabi_ddiv+0x634>)
    4f2c:	46a1      	mov	r9, r4
    4f2e:	e6c1      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4f30:	2480      	movs	r4, #128	; 0x80
    4f32:	0324      	lsls	r4, r4, #12
    4f34:	4647      	mov	r7, r8
    4f36:	4227      	tst	r7, r4
    4f38:	d14c      	bne.n	4fd4 <__aeabi_ddiv+0x4b0>
    4f3a:	433c      	orrs	r4, r7
    4f3c:	0324      	lsls	r4, r4, #12
    4f3e:	0b24      	lsrs	r4, r4, #12
    4f40:	9a00      	ldr	r2, [sp, #0]
    4f42:	4d85      	ldr	r5, [pc, #532]	; (5158 <__aeabi_ddiv+0x634>)
    4f44:	e6b6      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4f46:	1936      	adds	r6, r6, r4
    4f48:	1e48      	subs	r0, r1, #1
    4f4a:	42b4      	cmp	r4, r6
    4f4c:	d95e      	bls.n	500c <__aeabi_ddiv+0x4e8>
    4f4e:	1c01      	adds	r1, r0, #0
    4f50:	4296      	cmp	r6, r2
    4f52:	d1c4      	bne.n	4ede <__aeabi_ddiv+0x3ba>
    4f54:	9e00      	ldr	r6, [sp, #0]
    4f56:	429e      	cmp	r6, r3
    4f58:	d1c1      	bne.n	4ede <__aeabi_ddiv+0x3ba>
    4f5a:	e7c2      	b.n	4ee2 <__aeabi_ddiv+0x3be>
    4f5c:	1c03      	adds	r3, r0, #0
    4f5e:	3b28      	subs	r3, #40	; 0x28
    4f60:	1c31      	adds	r1, r6, #0
    4f62:	4099      	lsls	r1, r3
    4f64:	468b      	mov	fp, r1
    4f66:	2100      	movs	r1, #0
    4f68:	e688      	b.n	4c7c <__aeabi_ddiv+0x158>
    4f6a:	1c30      	adds	r0, r6, #0
    4f6c:	f001 f98c 	bl	6288 <__clzsi2>
    4f70:	3020      	adds	r0, #32
    4f72:	e672      	b.n	4c5a <__aeabi_ddiv+0x136>
    4f74:	3b28      	subs	r3, #40	; 0x28
    4f76:	1c21      	adds	r1, r4, #0
    4f78:	4099      	lsls	r1, r3
    4f7a:	2200      	movs	r2, #0
    4f7c:	4688      	mov	r8, r1
    4f7e:	4691      	mov	r9, r2
    4f80:	e651      	b.n	4c26 <__aeabi_ddiv+0x102>
    4f82:	1c20      	adds	r0, r4, #0
    4f84:	f001 f980 	bl	6288 <__clzsi2>
    4f88:	3020      	adds	r0, #32
    4f8a:	e63b      	b.n	4c04 <__aeabi_ddiv+0xe0>
    4f8c:	2100      	movs	r1, #0
    4f8e:	45b1      	cmp	r9, r6
    4f90:	d300      	bcc.n	4f94 <__aeabi_ddiv+0x470>
    4f92:	e73d      	b.n	4e10 <__aeabi_ddiv+0x2ec>
    4f94:	9f00      	ldr	r7, [sp, #0]
    4f96:	465a      	mov	r2, fp
    4f98:	44b9      	add	r9, r7
    4f9a:	45b9      	cmp	r9, r7
    4f9c:	41bf      	sbcs	r7, r7
    4f9e:	427f      	negs	r7, r7
    4fa0:	193f      	adds	r7, r7, r4
    4fa2:	18fb      	adds	r3, r7, r3
    4fa4:	3a01      	subs	r2, #1
    4fa6:	429c      	cmp	r4, r3
    4fa8:	d21e      	bcs.n	4fe8 <__aeabi_ddiv+0x4c4>
    4faa:	4298      	cmp	r0, r3
    4fac:	d900      	bls.n	4fb0 <__aeabi_ddiv+0x48c>
    4fae:	e07e      	b.n	50ae <__aeabi_ddiv+0x58a>
    4fb0:	d100      	bne.n	4fb4 <__aeabi_ddiv+0x490>
    4fb2:	e0b5      	b.n	5120 <__aeabi_ddiv+0x5fc>
    4fb4:	1a19      	subs	r1, r3, r0
    4fb6:	4693      	mov	fp, r2
    4fb8:	e72a      	b.n	4e10 <__aeabi_ddiv+0x2ec>
    4fba:	4589      	cmp	r9, r1
    4fbc:	d800      	bhi.n	4fc0 <__aeabi_ddiv+0x49c>
    4fbe:	e6ad      	b.n	4d1c <__aeabi_ddiv+0x1f8>
    4fc0:	4648      	mov	r0, r9
    4fc2:	4646      	mov	r6, r8
    4fc4:	4642      	mov	r2, r8
    4fc6:	0877      	lsrs	r7, r6, #1
    4fc8:	07d3      	lsls	r3, r2, #31
    4fca:	0846      	lsrs	r6, r0, #1
    4fcc:	07c0      	lsls	r0, r0, #31
    4fce:	431e      	orrs	r6, r3
    4fd0:	4681      	mov	r9, r0
    4fd2:	e6aa      	b.n	4d2a <__aeabi_ddiv+0x206>
    4fd4:	4658      	mov	r0, fp
    4fd6:	4220      	tst	r0, r4
    4fd8:	d112      	bne.n	5000 <__aeabi_ddiv+0x4dc>
    4fda:	4304      	orrs	r4, r0
    4fdc:	0324      	lsls	r4, r4, #12
    4fde:	1c2a      	adds	r2, r5, #0
    4fe0:	0b24      	lsrs	r4, r4, #12
    4fe2:	4689      	mov	r9, r1
    4fe4:	4d5c      	ldr	r5, [pc, #368]	; (5158 <__aeabi_ddiv+0x634>)
    4fe6:	e665      	b.n	4cb4 <__aeabi_ddiv+0x190>
    4fe8:	42a3      	cmp	r3, r4
    4fea:	d1e3      	bne.n	4fb4 <__aeabi_ddiv+0x490>
    4fec:	9f00      	ldr	r7, [sp, #0]
    4fee:	454f      	cmp	r7, r9
    4ff0:	d9db      	bls.n	4faa <__aeabi_ddiv+0x486>
    4ff2:	1a21      	subs	r1, r4, r0
    4ff4:	4693      	mov	fp, r2
    4ff6:	e70b      	b.n	4e10 <__aeabi_ddiv+0x2ec>
    4ff8:	1c17      	adds	r7, r2, #0
    4ffa:	e6dd      	b.n	4db8 <__aeabi_ddiv+0x294>
    4ffc:	469b      	mov	fp, r3
    4ffe:	e6bc      	b.n	4d7a <__aeabi_ddiv+0x256>
    5000:	433c      	orrs	r4, r7
    5002:	0324      	lsls	r4, r4, #12
    5004:	0b24      	lsrs	r4, r4, #12
    5006:	9a00      	ldr	r2, [sp, #0]
    5008:	4d53      	ldr	r5, [pc, #332]	; (5158 <__aeabi_ddiv+0x634>)
    500a:	e653      	b.n	4cb4 <__aeabi_ddiv+0x190>
    500c:	42b2      	cmp	r2, r6
    500e:	d859      	bhi.n	50c4 <__aeabi_ddiv+0x5a0>
    5010:	d100      	bne.n	5014 <__aeabi_ddiv+0x4f0>
    5012:	e08a      	b.n	512a <__aeabi_ddiv+0x606>
    5014:	1c01      	adds	r1, r0, #0
    5016:	e762      	b.n	4ede <__aeabi_ddiv+0x3ba>
    5018:	465f      	mov	r7, fp
    501a:	08c9      	lsrs	r1, r1, #3
    501c:	077b      	lsls	r3, r7, #29
    501e:	9e03      	ldr	r6, [sp, #12]
    5020:	430b      	orrs	r3, r1
    5022:	027c      	lsls	r4, r7, #9
    5024:	056d      	lsls	r5, r5, #21
    5026:	2201      	movs	r2, #1
    5028:	4699      	mov	r9, r3
    502a:	0b24      	lsrs	r4, r4, #12
    502c:	0d6d      	lsrs	r5, r5, #21
    502e:	4032      	ands	r2, r6
    5030:	e640      	b.n	4cb4 <__aeabi_ddiv+0x190>
    5032:	4b4a      	ldr	r3, [pc, #296]	; (515c <__aeabi_ddiv+0x638>)
    5034:	9f04      	ldr	r7, [sp, #16]
    5036:	1bdb      	subs	r3, r3, r7
    5038:	2b38      	cmp	r3, #56	; 0x38
    503a:	dd10      	ble.n	505e <__aeabi_ddiv+0x53a>
    503c:	9c03      	ldr	r4, [sp, #12]
    503e:	2201      	movs	r2, #1
    5040:	4022      	ands	r2, r4
    5042:	2400      	movs	r4, #0
    5044:	2500      	movs	r5, #0
    5046:	46a1      	mov	r9, r4
    5048:	e634      	b.n	4cb4 <__aeabi_ddiv+0x190>
    504a:	2101      	movs	r1, #1
    504c:	4249      	negs	r1, r1
    504e:	e748      	b.n	4ee2 <__aeabi_ddiv+0x3be>
    5050:	9302      	str	r3, [sp, #8]
    5052:	e704      	b.n	4e5e <__aeabi_ddiv+0x33a>
    5054:	1c1f      	adds	r7, r3, #0
    5056:	e721      	b.n	4e9c <__aeabi_ddiv+0x378>
    5058:	9c01      	ldr	r4, [sp, #4]
    505a:	9403      	str	r4, [sp, #12]
    505c:	e741      	b.n	4ee2 <__aeabi_ddiv+0x3be>
    505e:	2b1f      	cmp	r3, #31
    5060:	dc40      	bgt.n	50e4 <__aeabi_ddiv+0x5c0>
    5062:	483f      	ldr	r0, [pc, #252]	; (5160 <__aeabi_ddiv+0x63c>)
    5064:	9f04      	ldr	r7, [sp, #16]
    5066:	1c0c      	adds	r4, r1, #0
    5068:	183a      	adds	r2, r7, r0
    506a:	4658      	mov	r0, fp
    506c:	4091      	lsls	r1, r2
    506e:	40dc      	lsrs	r4, r3
    5070:	4090      	lsls	r0, r2
    5072:	4320      	orrs	r0, r4
    5074:	1c0a      	adds	r2, r1, #0
    5076:	1e51      	subs	r1, r2, #1
    5078:	418a      	sbcs	r2, r1
    507a:	1c01      	adds	r1, r0, #0
    507c:	4311      	orrs	r1, r2
    507e:	465a      	mov	r2, fp
    5080:	40da      	lsrs	r2, r3
    5082:	1c13      	adds	r3, r2, #0
    5084:	0748      	lsls	r0, r1, #29
    5086:	d009      	beq.n	509c <__aeabi_ddiv+0x578>
    5088:	220f      	movs	r2, #15
    508a:	400a      	ands	r2, r1
    508c:	2a04      	cmp	r2, #4
    508e:	d005      	beq.n	509c <__aeabi_ddiv+0x578>
    5090:	1d0a      	adds	r2, r1, #4
    5092:	428a      	cmp	r2, r1
    5094:	4189      	sbcs	r1, r1
    5096:	4249      	negs	r1, r1
    5098:	185b      	adds	r3, r3, r1
    509a:	1c11      	adds	r1, r2, #0
    509c:	021a      	lsls	r2, r3, #8
    509e:	d534      	bpl.n	510a <__aeabi_ddiv+0x5e6>
    50a0:	9c03      	ldr	r4, [sp, #12]
    50a2:	2201      	movs	r2, #1
    50a4:	4022      	ands	r2, r4
    50a6:	2400      	movs	r4, #0
    50a8:	2501      	movs	r5, #1
    50aa:	46a1      	mov	r9, r4
    50ac:	e602      	b.n	4cb4 <__aeabi_ddiv+0x190>
    50ae:	9f00      	ldr	r7, [sp, #0]
    50b0:	2102      	movs	r1, #2
    50b2:	4249      	negs	r1, r1
    50b4:	44b9      	add	r9, r7
    50b6:	448b      	add	fp, r1
    50b8:	45b9      	cmp	r9, r7
    50ba:	4189      	sbcs	r1, r1
    50bc:	4249      	negs	r1, r1
    50be:	1909      	adds	r1, r1, r4
    50c0:	18cb      	adds	r3, r1, r3
    50c2:	e6a4      	b.n	4e0e <__aeabi_ddiv+0x2ea>
    50c4:	9d00      	ldr	r5, [sp, #0]
    50c6:	1e88      	subs	r0, r1, #2
    50c8:	0069      	lsls	r1, r5, #1
    50ca:	42a9      	cmp	r1, r5
    50cc:	41ad      	sbcs	r5, r5
    50ce:	426d      	negs	r5, r5
    50d0:	192c      	adds	r4, r5, r4
    50d2:	1936      	adds	r6, r6, r4
    50d4:	9100      	str	r1, [sp, #0]
    50d6:	e73a      	b.n	4f4e <__aeabi_ddiv+0x42a>
    50d8:	2b00      	cmp	r3, #0
    50da:	d000      	beq.n	50de <__aeabi_ddiv+0x5ba>
    50dc:	e733      	b.n	4f46 <__aeabi_ddiv+0x422>
    50de:	2400      	movs	r4, #0
    50e0:	9400      	str	r4, [sp, #0]
    50e2:	e737      	b.n	4f54 <__aeabi_ddiv+0x430>
    50e4:	4a1f      	ldr	r2, [pc, #124]	; (5164 <__aeabi_ddiv+0x640>)
    50e6:	9c04      	ldr	r4, [sp, #16]
    50e8:	465d      	mov	r5, fp
    50ea:	1b12      	subs	r2, r2, r4
    50ec:	40d5      	lsrs	r5, r2
    50ee:	1c2a      	adds	r2, r5, #0
    50f0:	2b20      	cmp	r3, #32
    50f2:	d01f      	beq.n	5134 <__aeabi_ddiv+0x610>
    50f4:	4e1c      	ldr	r6, [pc, #112]	; (5168 <__aeabi_ddiv+0x644>)
    50f6:	465f      	mov	r7, fp
    50f8:	19a3      	adds	r3, r4, r6
    50fa:	409f      	lsls	r7, r3
    50fc:	1c3b      	adds	r3, r7, #0
    50fe:	4319      	orrs	r1, r3
    5100:	1e4b      	subs	r3, r1, #1
    5102:	4199      	sbcs	r1, r3
    5104:	4311      	orrs	r1, r2
    5106:	2300      	movs	r3, #0
    5108:	e7bc      	b.n	5084 <__aeabi_ddiv+0x560>
    510a:	075a      	lsls	r2, r3, #29
    510c:	08c9      	lsrs	r1, r1, #3
    510e:	430a      	orrs	r2, r1
    5110:	9f03      	ldr	r7, [sp, #12]
    5112:	4691      	mov	r9, r2
    5114:	025b      	lsls	r3, r3, #9
    5116:	2201      	movs	r2, #1
    5118:	0b1c      	lsrs	r4, r3, #12
    511a:	403a      	ands	r2, r7
    511c:	2500      	movs	r5, #0
    511e:	e5c9      	b.n	4cb4 <__aeabi_ddiv+0x190>
    5120:	454e      	cmp	r6, r9
    5122:	d8c4      	bhi.n	50ae <__aeabi_ddiv+0x58a>
    5124:	4693      	mov	fp, r2
    5126:	2100      	movs	r1, #0
    5128:	e672      	b.n	4e10 <__aeabi_ddiv+0x2ec>
    512a:	9f00      	ldr	r7, [sp, #0]
    512c:	429f      	cmp	r7, r3
    512e:	d3c9      	bcc.n	50c4 <__aeabi_ddiv+0x5a0>
    5130:	1c01      	adds	r1, r0, #0
    5132:	e70f      	b.n	4f54 <__aeabi_ddiv+0x430>
    5134:	2300      	movs	r3, #0
    5136:	e7e2      	b.n	50fe <__aeabi_ddiv+0x5da>
    5138:	2480      	movs	r4, #128	; 0x80
    513a:	0324      	lsls	r4, r4, #12
    513c:	465f      	mov	r7, fp
    513e:	433c      	orrs	r4, r7
    5140:	0324      	lsls	r4, r4, #12
    5142:	0b24      	lsrs	r4, r4, #12
    5144:	9a01      	ldr	r2, [sp, #4]
    5146:	4689      	mov	r9, r1
    5148:	4d03      	ldr	r5, [pc, #12]	; (5158 <__aeabi_ddiv+0x634>)
    514a:	e5b3      	b.n	4cb4 <__aeabi_ddiv+0x190>
    514c:	000003ff 	.word	0x000003ff
    5150:	feffffff 	.word	0xfeffffff
    5154:	000007fe 	.word	0x000007fe
    5158:	000007ff 	.word	0x000007ff
    515c:	fffffc02 	.word	0xfffffc02
    5160:	0000041e 	.word	0x0000041e
    5164:	fffffbe2 	.word	0xfffffbe2
    5168:	0000043e 	.word	0x0000043e

0000516c <__eqdf2>:
    516c:	b5f0      	push	{r4, r5, r6, r7, lr}
    516e:	465f      	mov	r7, fp
    5170:	4656      	mov	r6, sl
    5172:	464d      	mov	r5, r9
    5174:	4644      	mov	r4, r8
    5176:	b4f0      	push	{r4, r5, r6, r7}
    5178:	1c0d      	adds	r5, r1, #0
    517a:	1c04      	adds	r4, r0, #0
    517c:	4680      	mov	r8, r0
    517e:	0fe8      	lsrs	r0, r5, #31
    5180:	4681      	mov	r9, r0
    5182:	0318      	lsls	r0, r3, #12
    5184:	030f      	lsls	r7, r1, #12
    5186:	0b00      	lsrs	r0, r0, #12
    5188:	0b3f      	lsrs	r7, r7, #12
    518a:	b083      	sub	sp, #12
    518c:	4684      	mov	ip, r0
    518e:	481b      	ldr	r0, [pc, #108]	; (51fc <__eqdf2+0x90>)
    5190:	9700      	str	r7, [sp, #0]
    5192:	0049      	lsls	r1, r1, #1
    5194:	005e      	lsls	r6, r3, #1
    5196:	0fdf      	lsrs	r7, r3, #31
    5198:	0d49      	lsrs	r1, r1, #21
    519a:	4692      	mov	sl, r2
    519c:	0d76      	lsrs	r6, r6, #21
    519e:	46bb      	mov	fp, r7
    51a0:	4281      	cmp	r1, r0
    51a2:	d00c      	beq.n	51be <__eqdf2+0x52>
    51a4:	4815      	ldr	r0, [pc, #84]	; (51fc <__eqdf2+0x90>)
    51a6:	4286      	cmp	r6, r0
    51a8:	d010      	beq.n	51cc <__eqdf2+0x60>
    51aa:	2001      	movs	r0, #1
    51ac:	42b1      	cmp	r1, r6
    51ae:	d015      	beq.n	51dc <__eqdf2+0x70>
    51b0:	b003      	add	sp, #12
    51b2:	bc3c      	pop	{r2, r3, r4, r5}
    51b4:	4690      	mov	r8, r2
    51b6:	4699      	mov	r9, r3
    51b8:	46a2      	mov	sl, r4
    51ba:	46ab      	mov	fp, r5
    51bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51be:	9f00      	ldr	r7, [sp, #0]
    51c0:	2001      	movs	r0, #1
    51c2:	4327      	orrs	r7, r4
    51c4:	d1f4      	bne.n	51b0 <__eqdf2+0x44>
    51c6:	480d      	ldr	r0, [pc, #52]	; (51fc <__eqdf2+0x90>)
    51c8:	4286      	cmp	r6, r0
    51ca:	d1ee      	bne.n	51aa <__eqdf2+0x3e>
    51cc:	4660      	mov	r0, ip
    51ce:	4302      	orrs	r2, r0
    51d0:	2001      	movs	r0, #1
    51d2:	2a00      	cmp	r2, #0
    51d4:	d1ec      	bne.n	51b0 <__eqdf2+0x44>
    51d6:	2001      	movs	r0, #1
    51d8:	42b1      	cmp	r1, r6
    51da:	d1e9      	bne.n	51b0 <__eqdf2+0x44>
    51dc:	9b00      	ldr	r3, [sp, #0]
    51de:	4563      	cmp	r3, ip
    51e0:	d1e6      	bne.n	51b0 <__eqdf2+0x44>
    51e2:	45d0      	cmp	r8, sl
    51e4:	d1e4      	bne.n	51b0 <__eqdf2+0x44>
    51e6:	45d9      	cmp	r9, fp
    51e8:	d006      	beq.n	51f8 <__eqdf2+0x8c>
    51ea:	2900      	cmp	r1, #0
    51ec:	d1e0      	bne.n	51b0 <__eqdf2+0x44>
    51ee:	431c      	orrs	r4, r3
    51f0:	1c20      	adds	r0, r4, #0
    51f2:	1e44      	subs	r4, r0, #1
    51f4:	41a0      	sbcs	r0, r4
    51f6:	e7db      	b.n	51b0 <__eqdf2+0x44>
    51f8:	2000      	movs	r0, #0
    51fa:	e7d9      	b.n	51b0 <__eqdf2+0x44>
    51fc:	000007ff 	.word	0x000007ff

00005200 <__gedf2>:
    5200:	b5f0      	push	{r4, r5, r6, r7, lr}
    5202:	465f      	mov	r7, fp
    5204:	4656      	mov	r6, sl
    5206:	464d      	mov	r5, r9
    5208:	4644      	mov	r4, r8
    520a:	b4f0      	push	{r4, r5, r6, r7}
    520c:	0fcd      	lsrs	r5, r1, #31
    520e:	0fde      	lsrs	r6, r3, #31
    5210:	46ac      	mov	ip, r5
    5212:	031d      	lsls	r5, r3, #12
    5214:	0b2d      	lsrs	r5, r5, #12
    5216:	46b1      	mov	r9, r6
    5218:	4e37      	ldr	r6, [pc, #220]	; (52f8 <__gedf2+0xf8>)
    521a:	030f      	lsls	r7, r1, #12
    521c:	004c      	lsls	r4, r1, #1
    521e:	46ab      	mov	fp, r5
    5220:	005d      	lsls	r5, r3, #1
    5222:	4680      	mov	r8, r0
    5224:	0b3f      	lsrs	r7, r7, #12
    5226:	0d64      	lsrs	r4, r4, #21
    5228:	4692      	mov	sl, r2
    522a:	0d6d      	lsrs	r5, r5, #21
    522c:	42b4      	cmp	r4, r6
    522e:	d032      	beq.n	5296 <__gedf2+0x96>
    5230:	4e31      	ldr	r6, [pc, #196]	; (52f8 <__gedf2+0xf8>)
    5232:	42b5      	cmp	r5, r6
    5234:	d035      	beq.n	52a2 <__gedf2+0xa2>
    5236:	2c00      	cmp	r4, #0
    5238:	d10e      	bne.n	5258 <__gedf2+0x58>
    523a:	4338      	orrs	r0, r7
    523c:	4241      	negs	r1, r0
    523e:	4141      	adcs	r1, r0
    5240:	1c08      	adds	r0, r1, #0
    5242:	2d00      	cmp	r5, #0
    5244:	d00b      	beq.n	525e <__gedf2+0x5e>
    5246:	2900      	cmp	r1, #0
    5248:	d119      	bne.n	527e <__gedf2+0x7e>
    524a:	45cc      	cmp	ip, r9
    524c:	d02d      	beq.n	52aa <__gedf2+0xaa>
    524e:	4665      	mov	r5, ip
    5250:	4268      	negs	r0, r5
    5252:	2301      	movs	r3, #1
    5254:	4318      	orrs	r0, r3
    5256:	e018      	b.n	528a <__gedf2+0x8a>
    5258:	2d00      	cmp	r5, #0
    525a:	d1f6      	bne.n	524a <__gedf2+0x4a>
    525c:	1c28      	adds	r0, r5, #0
    525e:	4659      	mov	r1, fp
    5260:	430a      	orrs	r2, r1
    5262:	4253      	negs	r3, r2
    5264:	4153      	adcs	r3, r2
    5266:	2800      	cmp	r0, #0
    5268:	d106      	bne.n	5278 <__gedf2+0x78>
    526a:	2b00      	cmp	r3, #0
    526c:	d0ed      	beq.n	524a <__gedf2+0x4a>
    526e:	4663      	mov	r3, ip
    5270:	4258      	negs	r0, r3
    5272:	2301      	movs	r3, #1
    5274:	4318      	orrs	r0, r3
    5276:	e008      	b.n	528a <__gedf2+0x8a>
    5278:	2000      	movs	r0, #0
    527a:	2b00      	cmp	r3, #0
    527c:	d105      	bne.n	528a <__gedf2+0x8a>
    527e:	464a      	mov	r2, r9
    5280:	4250      	negs	r0, r2
    5282:	4150      	adcs	r0, r2
    5284:	4240      	negs	r0, r0
    5286:	2301      	movs	r3, #1
    5288:	4318      	orrs	r0, r3
    528a:	bc3c      	pop	{r2, r3, r4, r5}
    528c:	4690      	mov	r8, r2
    528e:	4699      	mov	r9, r3
    5290:	46a2      	mov	sl, r4
    5292:	46ab      	mov	fp, r5
    5294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5296:	1c3e      	adds	r6, r7, #0
    5298:	4306      	orrs	r6, r0
    529a:	d0c9      	beq.n	5230 <__gedf2+0x30>
    529c:	2002      	movs	r0, #2
    529e:	4240      	negs	r0, r0
    52a0:	e7f3      	b.n	528a <__gedf2+0x8a>
    52a2:	465e      	mov	r6, fp
    52a4:	4316      	orrs	r6, r2
    52a6:	d0c6      	beq.n	5236 <__gedf2+0x36>
    52a8:	e7f8      	b.n	529c <__gedf2+0x9c>
    52aa:	42ac      	cmp	r4, r5
    52ac:	dc07      	bgt.n	52be <__gedf2+0xbe>
    52ae:	da0b      	bge.n	52c8 <__gedf2+0xc8>
    52b0:	4661      	mov	r1, ip
    52b2:	4248      	negs	r0, r1
    52b4:	4148      	adcs	r0, r1
    52b6:	4240      	negs	r0, r0
    52b8:	2301      	movs	r3, #1
    52ba:	4318      	orrs	r0, r3
    52bc:	e7e5      	b.n	528a <__gedf2+0x8a>
    52be:	4666      	mov	r6, ip
    52c0:	4270      	negs	r0, r6
    52c2:	2301      	movs	r3, #1
    52c4:	4318      	orrs	r0, r3
    52c6:	e7e0      	b.n	528a <__gedf2+0x8a>
    52c8:	455f      	cmp	r7, fp
    52ca:	d80a      	bhi.n	52e2 <__gedf2+0xe2>
    52cc:	d00e      	beq.n	52ec <__gedf2+0xec>
    52ce:	2000      	movs	r0, #0
    52d0:	455f      	cmp	r7, fp
    52d2:	d2da      	bcs.n	528a <__gedf2+0x8a>
    52d4:	4665      	mov	r5, ip
    52d6:	4268      	negs	r0, r5
    52d8:	4168      	adcs	r0, r5
    52da:	4240      	negs	r0, r0
    52dc:	2301      	movs	r3, #1
    52de:	4318      	orrs	r0, r3
    52e0:	e7d3      	b.n	528a <__gedf2+0x8a>
    52e2:	4662      	mov	r2, ip
    52e4:	4250      	negs	r0, r2
    52e6:	2301      	movs	r3, #1
    52e8:	4318      	orrs	r0, r3
    52ea:	e7ce      	b.n	528a <__gedf2+0x8a>
    52ec:	45d0      	cmp	r8, sl
    52ee:	d8f8      	bhi.n	52e2 <__gedf2+0xe2>
    52f0:	2000      	movs	r0, #0
    52f2:	45d0      	cmp	r8, sl
    52f4:	d3ee      	bcc.n	52d4 <__gedf2+0xd4>
    52f6:	e7c8      	b.n	528a <__gedf2+0x8a>
    52f8:	000007ff 	.word	0x000007ff

000052fc <__ledf2>:
    52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fe:	4656      	mov	r6, sl
    5300:	464d      	mov	r5, r9
    5302:	4644      	mov	r4, r8
    5304:	465f      	mov	r7, fp
    5306:	b4f0      	push	{r4, r5, r6, r7}
    5308:	1c0d      	adds	r5, r1, #0
    530a:	b083      	sub	sp, #12
    530c:	1c04      	adds	r4, r0, #0
    530e:	9001      	str	r0, [sp, #4]
    5310:	0fe8      	lsrs	r0, r5, #31
    5312:	4681      	mov	r9, r0
    5314:	0318      	lsls	r0, r3, #12
    5316:	030f      	lsls	r7, r1, #12
    5318:	0b00      	lsrs	r0, r0, #12
    531a:	0b3f      	lsrs	r7, r7, #12
    531c:	4684      	mov	ip, r0
    531e:	4835      	ldr	r0, [pc, #212]	; (53f4 <__ledf2+0xf8>)
    5320:	9700      	str	r7, [sp, #0]
    5322:	0049      	lsls	r1, r1, #1
    5324:	005e      	lsls	r6, r3, #1
    5326:	0fdf      	lsrs	r7, r3, #31
    5328:	0d49      	lsrs	r1, r1, #21
    532a:	4692      	mov	sl, r2
    532c:	0d76      	lsrs	r6, r6, #21
    532e:	46b8      	mov	r8, r7
    5330:	4281      	cmp	r1, r0
    5332:	d034      	beq.n	539e <__ledf2+0xa2>
    5334:	482f      	ldr	r0, [pc, #188]	; (53f4 <__ledf2+0xf8>)
    5336:	4286      	cmp	r6, r0
    5338:	d036      	beq.n	53a8 <__ledf2+0xac>
    533a:	2900      	cmp	r1, #0
    533c:	d018      	beq.n	5370 <__ledf2+0x74>
    533e:	2e00      	cmp	r6, #0
    5340:	d11f      	bne.n	5382 <__ledf2+0x86>
    5342:	1c34      	adds	r4, r6, #0
    5344:	4667      	mov	r7, ip
    5346:	433a      	orrs	r2, r7
    5348:	4253      	negs	r3, r2
    534a:	4153      	adcs	r3, r2
    534c:	2c00      	cmp	r4, #0
    534e:	d01f      	beq.n	5390 <__ledf2+0x94>
    5350:	2000      	movs	r0, #0
    5352:	2b00      	cmp	r3, #0
    5354:	d105      	bne.n	5362 <__ledf2+0x66>
    5356:	4642      	mov	r2, r8
    5358:	4250      	negs	r0, r2
    535a:	4150      	adcs	r0, r2
    535c:	4240      	negs	r0, r0
    535e:	2301      	movs	r3, #1
    5360:	4318      	orrs	r0, r3
    5362:	b003      	add	sp, #12
    5364:	bc3c      	pop	{r2, r3, r4, r5}
    5366:	4690      	mov	r8, r2
    5368:	4699      	mov	r9, r3
    536a:	46a2      	mov	sl, r4
    536c:	46ab      	mov	fp, r5
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5370:	9800      	ldr	r0, [sp, #0]
    5372:	4304      	orrs	r4, r0
    5374:	4260      	negs	r0, r4
    5376:	4160      	adcs	r0, r4
    5378:	1c04      	adds	r4, r0, #0
    537a:	2e00      	cmp	r6, #0
    537c:	d0e2      	beq.n	5344 <__ledf2+0x48>
    537e:	2800      	cmp	r0, #0
    5380:	d1e9      	bne.n	5356 <__ledf2+0x5a>
    5382:	45c1      	cmp	r9, r8
    5384:	d015      	beq.n	53b2 <__ledf2+0xb6>
    5386:	464f      	mov	r7, r9
    5388:	4278      	negs	r0, r7
    538a:	2301      	movs	r3, #1
    538c:	4318      	orrs	r0, r3
    538e:	e7e8      	b.n	5362 <__ledf2+0x66>
    5390:	2b00      	cmp	r3, #0
    5392:	d0f6      	beq.n	5382 <__ledf2+0x86>
    5394:	464b      	mov	r3, r9
    5396:	4258      	negs	r0, r3
    5398:	2301      	movs	r3, #1
    539a:	4318      	orrs	r0, r3
    539c:	e7e1      	b.n	5362 <__ledf2+0x66>
    539e:	9f00      	ldr	r7, [sp, #0]
    53a0:	2002      	movs	r0, #2
    53a2:	4327      	orrs	r7, r4
    53a4:	d1dd      	bne.n	5362 <__ledf2+0x66>
    53a6:	e7c5      	b.n	5334 <__ledf2+0x38>
    53a8:	4667      	mov	r7, ip
    53aa:	2002      	movs	r0, #2
    53ac:	4317      	orrs	r7, r2
    53ae:	d1d8      	bne.n	5362 <__ledf2+0x66>
    53b0:	e7c3      	b.n	533a <__ledf2+0x3e>
    53b2:	42b1      	cmp	r1, r6
    53b4:	dd04      	ble.n	53c0 <__ledf2+0xc4>
    53b6:	464a      	mov	r2, r9
    53b8:	4250      	negs	r0, r2
    53ba:	2301      	movs	r3, #1
    53bc:	4318      	orrs	r0, r3
    53be:	e7d0      	b.n	5362 <__ledf2+0x66>
    53c0:	42b1      	cmp	r1, r6
    53c2:	db07      	blt.n	53d4 <__ledf2+0xd8>
    53c4:	9800      	ldr	r0, [sp, #0]
    53c6:	4560      	cmp	r0, ip
    53c8:	d8e4      	bhi.n	5394 <__ledf2+0x98>
    53ca:	d00a      	beq.n	53e2 <__ledf2+0xe6>
    53cc:	9f00      	ldr	r7, [sp, #0]
    53ce:	2000      	movs	r0, #0
    53d0:	4567      	cmp	r7, ip
    53d2:	d2c6      	bcs.n	5362 <__ledf2+0x66>
    53d4:	464f      	mov	r7, r9
    53d6:	4278      	negs	r0, r7
    53d8:	4178      	adcs	r0, r7
    53da:	4240      	negs	r0, r0
    53dc:	2301      	movs	r3, #1
    53de:	4318      	orrs	r0, r3
    53e0:	e7bf      	b.n	5362 <__ledf2+0x66>
    53e2:	9a01      	ldr	r2, [sp, #4]
    53e4:	4552      	cmp	r2, sl
    53e6:	d8d5      	bhi.n	5394 <__ledf2+0x98>
    53e8:	9a01      	ldr	r2, [sp, #4]
    53ea:	2000      	movs	r0, #0
    53ec:	4552      	cmp	r2, sl
    53ee:	d3f1      	bcc.n	53d4 <__ledf2+0xd8>
    53f0:	e7b7      	b.n	5362 <__ledf2+0x66>
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	000007ff 	.word	0x000007ff

000053f8 <__aeabi_dmul>:
    53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53fa:	4656      	mov	r6, sl
    53fc:	4644      	mov	r4, r8
    53fe:	465f      	mov	r7, fp
    5400:	464d      	mov	r5, r9
    5402:	b4f0      	push	{r4, r5, r6, r7}
    5404:	1c1f      	adds	r7, r3, #0
    5406:	030b      	lsls	r3, r1, #12
    5408:	0b1b      	lsrs	r3, r3, #12
    540a:	469a      	mov	sl, r3
    540c:	004b      	lsls	r3, r1, #1
    540e:	b087      	sub	sp, #28
    5410:	1c04      	adds	r4, r0, #0
    5412:	4680      	mov	r8, r0
    5414:	0d5b      	lsrs	r3, r3, #21
    5416:	0fc8      	lsrs	r0, r1, #31
    5418:	1c16      	adds	r6, r2, #0
    541a:	9302      	str	r3, [sp, #8]
    541c:	4681      	mov	r9, r0
    541e:	2b00      	cmp	r3, #0
    5420:	d068      	beq.n	54f4 <__aeabi_dmul+0xfc>
    5422:	4b69      	ldr	r3, [pc, #420]	; (55c8 <__aeabi_dmul+0x1d0>)
    5424:	9902      	ldr	r1, [sp, #8]
    5426:	4299      	cmp	r1, r3
    5428:	d032      	beq.n	5490 <__aeabi_dmul+0x98>
    542a:	2280      	movs	r2, #128	; 0x80
    542c:	4653      	mov	r3, sl
    542e:	0352      	lsls	r2, r2, #13
    5430:	431a      	orrs	r2, r3
    5432:	00d2      	lsls	r2, r2, #3
    5434:	0f63      	lsrs	r3, r4, #29
    5436:	431a      	orrs	r2, r3
    5438:	4692      	mov	sl, r2
    543a:	4a64      	ldr	r2, [pc, #400]	; (55cc <__aeabi_dmul+0x1d4>)
    543c:	00e0      	lsls	r0, r4, #3
    543e:	1889      	adds	r1, r1, r2
    5440:	4680      	mov	r8, r0
    5442:	9102      	str	r1, [sp, #8]
    5444:	2400      	movs	r4, #0
    5446:	2500      	movs	r5, #0
    5448:	033b      	lsls	r3, r7, #12
    544a:	0b1b      	lsrs	r3, r3, #12
    544c:	469b      	mov	fp, r3
    544e:	0078      	lsls	r0, r7, #1
    5450:	0ffb      	lsrs	r3, r7, #31
    5452:	1c32      	adds	r2, r6, #0
    5454:	0d40      	lsrs	r0, r0, #21
    5456:	9303      	str	r3, [sp, #12]
    5458:	d100      	bne.n	545c <__aeabi_dmul+0x64>
    545a:	e075      	b.n	5548 <__aeabi_dmul+0x150>
    545c:	4b5a      	ldr	r3, [pc, #360]	; (55c8 <__aeabi_dmul+0x1d0>)
    545e:	4298      	cmp	r0, r3
    5460:	d069      	beq.n	5536 <__aeabi_dmul+0x13e>
    5462:	2280      	movs	r2, #128	; 0x80
    5464:	4659      	mov	r1, fp
    5466:	0352      	lsls	r2, r2, #13
    5468:	430a      	orrs	r2, r1
    546a:	0f73      	lsrs	r3, r6, #29
    546c:	00d2      	lsls	r2, r2, #3
    546e:	431a      	orrs	r2, r3
    5470:	4b56      	ldr	r3, [pc, #344]	; (55cc <__aeabi_dmul+0x1d4>)
    5472:	4693      	mov	fp, r2
    5474:	18c0      	adds	r0, r0, r3
    5476:	00f2      	lsls	r2, r6, #3
    5478:	2300      	movs	r3, #0
    547a:	9903      	ldr	r1, [sp, #12]
    547c:	464e      	mov	r6, r9
    547e:	4071      	eors	r1, r6
    5480:	431c      	orrs	r4, r3
    5482:	2c0f      	cmp	r4, #15
    5484:	d900      	bls.n	5488 <__aeabi_dmul+0x90>
    5486:	e0a9      	b.n	55dc <__aeabi_dmul+0x1e4>
    5488:	4e51      	ldr	r6, [pc, #324]	; (55d0 <__aeabi_dmul+0x1d8>)
    548a:	00a4      	lsls	r4, r4, #2
    548c:	5934      	ldr	r4, [r6, r4]
    548e:	46a7      	mov	pc, r4
    5490:	4653      	mov	r3, sl
    5492:	431c      	orrs	r4, r3
    5494:	d000      	beq.n	5498 <__aeabi_dmul+0xa0>
    5496:	e087      	b.n	55a8 <__aeabi_dmul+0x1b0>
    5498:	2500      	movs	r5, #0
    549a:	46aa      	mov	sl, r5
    549c:	46a8      	mov	r8, r5
    549e:	2408      	movs	r4, #8
    54a0:	2502      	movs	r5, #2
    54a2:	e7d1      	b.n	5448 <__aeabi_dmul+0x50>
    54a4:	4649      	mov	r1, r9
    54a6:	2d02      	cmp	r5, #2
    54a8:	d06c      	beq.n	5584 <__aeabi_dmul+0x18c>
    54aa:	2d03      	cmp	r5, #3
    54ac:	d100      	bne.n	54b0 <__aeabi_dmul+0xb8>
    54ae:	e217      	b.n	58e0 <__aeabi_dmul+0x4e8>
    54b0:	2d01      	cmp	r5, #1
    54b2:	d000      	beq.n	54b6 <__aeabi_dmul+0xbe>
    54b4:	e158      	b.n	5768 <__aeabi_dmul+0x370>
    54b6:	400d      	ands	r5, r1
    54b8:	b2ed      	uxtb	r5, r5
    54ba:	2400      	movs	r4, #0
    54bc:	46a9      	mov	r9, r5
    54be:	2300      	movs	r3, #0
    54c0:	46a0      	mov	r8, r4
    54c2:	2000      	movs	r0, #0
    54c4:	2100      	movs	r1, #0
    54c6:	0325      	lsls	r5, r4, #12
    54c8:	0d0a      	lsrs	r2, r1, #20
    54ca:	051c      	lsls	r4, r3, #20
    54cc:	0b2d      	lsrs	r5, r5, #12
    54ce:	0512      	lsls	r2, r2, #20
    54d0:	4b40      	ldr	r3, [pc, #256]	; (55d4 <__aeabi_dmul+0x1dc>)
    54d2:	432a      	orrs	r2, r5
    54d4:	4013      	ands	r3, r2
    54d6:	4323      	orrs	r3, r4
    54d8:	005b      	lsls	r3, r3, #1
    54da:	464c      	mov	r4, r9
    54dc:	085b      	lsrs	r3, r3, #1
    54de:	07e2      	lsls	r2, r4, #31
    54e0:	1c19      	adds	r1, r3, #0
    54e2:	4640      	mov	r0, r8
    54e4:	4311      	orrs	r1, r2
    54e6:	b007      	add	sp, #28
    54e8:	bc3c      	pop	{r2, r3, r4, r5}
    54ea:	4690      	mov	r8, r2
    54ec:	4699      	mov	r9, r3
    54ee:	46a2      	mov	sl, r4
    54f0:	46ab      	mov	fp, r5
    54f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54f4:	4653      	mov	r3, sl
    54f6:	4323      	orrs	r3, r4
    54f8:	d050      	beq.n	559c <__aeabi_dmul+0x1a4>
    54fa:	4653      	mov	r3, sl
    54fc:	2b00      	cmp	r3, #0
    54fe:	d100      	bne.n	5502 <__aeabi_dmul+0x10a>
    5500:	e184      	b.n	580c <__aeabi_dmul+0x414>
    5502:	4650      	mov	r0, sl
    5504:	f000 fec0 	bl	6288 <__clzsi2>
    5508:	1e03      	subs	r3, r0, #0
    550a:	2b27      	cmp	r3, #39	; 0x27
    550c:	dd00      	ble.n	5510 <__aeabi_dmul+0x118>
    550e:	e176      	b.n	57fe <__aeabi_dmul+0x406>
    5510:	2128      	movs	r1, #40	; 0x28
    5512:	1a0d      	subs	r5, r1, r0
    5514:	1c21      	adds	r1, r4, #0
    5516:	3b08      	subs	r3, #8
    5518:	4652      	mov	r2, sl
    551a:	40e9      	lsrs	r1, r5
    551c:	409a      	lsls	r2, r3
    551e:	1c0d      	adds	r5, r1, #0
    5520:	4315      	orrs	r5, r2
    5522:	1c22      	adds	r2, r4, #0
    5524:	409a      	lsls	r2, r3
    5526:	46aa      	mov	sl, r5
    5528:	4690      	mov	r8, r2
    552a:	4b2b      	ldr	r3, [pc, #172]	; (55d8 <__aeabi_dmul+0x1e0>)
    552c:	2400      	movs	r4, #0
    552e:	1a1b      	subs	r3, r3, r0
    5530:	9302      	str	r3, [sp, #8]
    5532:	2500      	movs	r5, #0
    5534:	e788      	b.n	5448 <__aeabi_dmul+0x50>
    5536:	465b      	mov	r3, fp
    5538:	431e      	orrs	r6, r3
    553a:	2303      	movs	r3, #3
    553c:	2e00      	cmp	r6, #0
    553e:	d19c      	bne.n	547a <__aeabi_dmul+0x82>
    5540:	46b3      	mov	fp, r6
    5542:	2200      	movs	r2, #0
    5544:	2302      	movs	r3, #2
    5546:	e798      	b.n	547a <__aeabi_dmul+0x82>
    5548:	465b      	mov	r3, fp
    554a:	4333      	orrs	r3, r6
    554c:	d021      	beq.n	5592 <__aeabi_dmul+0x19a>
    554e:	4658      	mov	r0, fp
    5550:	2800      	cmp	r0, #0
    5552:	d100      	bne.n	5556 <__aeabi_dmul+0x15e>
    5554:	e14e      	b.n	57f4 <__aeabi_dmul+0x3fc>
    5556:	f000 fe97 	bl	6288 <__clzsi2>
    555a:	2827      	cmp	r0, #39	; 0x27
    555c:	dd00      	ble.n	5560 <__aeabi_dmul+0x168>
    555e:	e142      	b.n	57e6 <__aeabi_dmul+0x3ee>
    5560:	2128      	movs	r1, #40	; 0x28
    5562:	1a0f      	subs	r7, r1, r0
    5564:	1c02      	adds	r2, r0, #0
    5566:	1c31      	adds	r1, r6, #0
    5568:	3a08      	subs	r2, #8
    556a:	465b      	mov	r3, fp
    556c:	40f9      	lsrs	r1, r7
    556e:	4093      	lsls	r3, r2
    5570:	1c0f      	adds	r7, r1, #0
    5572:	431f      	orrs	r7, r3
    5574:	1c33      	adds	r3, r6, #0
    5576:	4093      	lsls	r3, r2
    5578:	46bb      	mov	fp, r7
    557a:	1c1a      	adds	r2, r3, #0
    557c:	4b16      	ldr	r3, [pc, #88]	; (55d8 <__aeabi_dmul+0x1e0>)
    557e:	1a18      	subs	r0, r3, r0
    5580:	2300      	movs	r3, #0
    5582:	e77a      	b.n	547a <__aeabi_dmul+0x82>
    5584:	2301      	movs	r3, #1
    5586:	400b      	ands	r3, r1
    5588:	2400      	movs	r4, #0
    558a:	4699      	mov	r9, r3
    558c:	46a0      	mov	r8, r4
    558e:	4b0e      	ldr	r3, [pc, #56]	; (55c8 <__aeabi_dmul+0x1d0>)
    5590:	e797      	b.n	54c2 <__aeabi_dmul+0xca>
    5592:	2700      	movs	r7, #0
    5594:	46bb      	mov	fp, r7
    5596:	2200      	movs	r2, #0
    5598:	2301      	movs	r3, #1
    559a:	e76e      	b.n	547a <__aeabi_dmul+0x82>
    559c:	2100      	movs	r1, #0
    559e:	2404      	movs	r4, #4
    55a0:	468a      	mov	sl, r1
    55a2:	4688      	mov	r8, r1
    55a4:	2501      	movs	r5, #1
    55a6:	e74f      	b.n	5448 <__aeabi_dmul+0x50>
    55a8:	240c      	movs	r4, #12
    55aa:	2503      	movs	r5, #3
    55ac:	e74c      	b.n	5448 <__aeabi_dmul+0x50>
    55ae:	2500      	movs	r5, #0
    55b0:	2480      	movs	r4, #128	; 0x80
    55b2:	46a9      	mov	r9, r5
    55b4:	0324      	lsls	r4, r4, #12
    55b6:	46a8      	mov	r8, r5
    55b8:	4b03      	ldr	r3, [pc, #12]	; (55c8 <__aeabi_dmul+0x1d0>)
    55ba:	e782      	b.n	54c2 <__aeabi_dmul+0xca>
    55bc:	46da      	mov	sl, fp
    55be:	4690      	mov	r8, r2
    55c0:	9903      	ldr	r1, [sp, #12]
    55c2:	1c1d      	adds	r5, r3, #0
    55c4:	e76f      	b.n	54a6 <__aeabi_dmul+0xae>
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	000007ff 	.word	0x000007ff
    55cc:	fffffc01 	.word	0xfffffc01
    55d0:	00006654 	.word	0x00006654
    55d4:	800fffff 	.word	0x800fffff
    55d8:	fffffc0d 	.word	0xfffffc0d
    55dc:	9f02      	ldr	r7, [sp, #8]
    55de:	0c16      	lsrs	r6, r2, #16
    55e0:	1838      	adds	r0, r7, r0
    55e2:	9004      	str	r0, [sp, #16]
    55e4:	4640      	mov	r0, r8
    55e6:	0c07      	lsrs	r7, r0, #16
    55e8:	0400      	lsls	r0, r0, #16
    55ea:	0c00      	lsrs	r0, r0, #16
    55ec:	0412      	lsls	r2, r2, #16
    55ee:	0c12      	lsrs	r2, r2, #16
    55f0:	1c03      	adds	r3, r0, #0
    55f2:	4353      	muls	r3, r2
    55f4:	1c04      	adds	r4, r0, #0
    55f6:	1c3d      	adds	r5, r7, #0
    55f8:	4374      	muls	r4, r6
    55fa:	4355      	muls	r5, r2
    55fc:	4698      	mov	r8, r3
    55fe:	1c3b      	adds	r3, r7, #0
    5600:	4373      	muls	r3, r6
    5602:	1964      	adds	r4, r4, r5
    5604:	46a4      	mov	ip, r4
    5606:	4644      	mov	r4, r8
    5608:	9302      	str	r3, [sp, #8]
    560a:	0c23      	lsrs	r3, r4, #16
    560c:	4463      	add	r3, ip
    560e:	429d      	cmp	r5, r3
    5610:	d904      	bls.n	561c <__aeabi_dmul+0x224>
    5612:	9d02      	ldr	r5, [sp, #8]
    5614:	2480      	movs	r4, #128	; 0x80
    5616:	0264      	lsls	r4, r4, #9
    5618:	192d      	adds	r5, r5, r4
    561a:	9502      	str	r5, [sp, #8]
    561c:	0c1d      	lsrs	r5, r3, #16
    561e:	9503      	str	r5, [sp, #12]
    5620:	4645      	mov	r5, r8
    5622:	042c      	lsls	r4, r5, #16
    5624:	041b      	lsls	r3, r3, #16
    5626:	0c24      	lsrs	r4, r4, #16
    5628:	191c      	adds	r4, r3, r4
    562a:	9405      	str	r4, [sp, #20]
    562c:	465c      	mov	r4, fp
    562e:	0c23      	lsrs	r3, r4, #16
    5630:	1c05      	adds	r5, r0, #0
    5632:	4358      	muls	r0, r3
    5634:	0424      	lsls	r4, r4, #16
    5636:	0c24      	lsrs	r4, r4, #16
    5638:	4684      	mov	ip, r0
    563a:	1c38      	adds	r0, r7, #0
    563c:	4360      	muls	r0, r4
    563e:	4365      	muls	r5, r4
    5640:	435f      	muls	r7, r3
    5642:	4681      	mov	r9, r0
    5644:	44cc      	add	ip, r9
    5646:	0c28      	lsrs	r0, r5, #16
    5648:	4460      	add	r0, ip
    564a:	46bb      	mov	fp, r7
    564c:	4581      	cmp	r9, r0
    564e:	d902      	bls.n	5656 <__aeabi_dmul+0x25e>
    5650:	2780      	movs	r7, #128	; 0x80
    5652:	027f      	lsls	r7, r7, #9
    5654:	44bb      	add	fp, r7
    5656:	042d      	lsls	r5, r5, #16
    5658:	0c07      	lsrs	r7, r0, #16
    565a:	0c2d      	lsrs	r5, r5, #16
    565c:	0400      	lsls	r0, r0, #16
    565e:	1940      	adds	r0, r0, r5
    5660:	4655      	mov	r5, sl
    5662:	46bc      	mov	ip, r7
    5664:	042f      	lsls	r7, r5, #16
    5666:	44e3      	add	fp, ip
    5668:	4684      	mov	ip, r0
    566a:	0c28      	lsrs	r0, r5, #16
    566c:	0c3d      	lsrs	r5, r7, #16
    566e:	1c2f      	adds	r7, r5, #0
    5670:	4357      	muls	r7, r2
    5672:	46b8      	mov	r8, r7
    5674:	1c2f      	adds	r7, r5, #0
    5676:	4377      	muls	r7, r6
    5678:	4342      	muls	r2, r0
    567a:	46b9      	mov	r9, r7
    567c:	4647      	mov	r7, r8
    567e:	0c3f      	lsrs	r7, r7, #16
    5680:	4491      	add	r9, r2
    5682:	46ba      	mov	sl, r7
    5684:	44d1      	add	r9, sl
    5686:	4346      	muls	r6, r0
    5688:	454a      	cmp	r2, r9
    568a:	d902      	bls.n	5692 <__aeabi_dmul+0x29a>
    568c:	2280      	movs	r2, #128	; 0x80
    568e:	0252      	lsls	r2, r2, #9
    5690:	18b6      	adds	r6, r6, r2
    5692:	464f      	mov	r7, r9
    5694:	0c3a      	lsrs	r2, r7, #16
    5696:	18b6      	adds	r6, r6, r2
    5698:	043a      	lsls	r2, r7, #16
    569a:	4647      	mov	r7, r8
    569c:	043f      	lsls	r7, r7, #16
    569e:	0c3f      	lsrs	r7, r7, #16
    56a0:	46b8      	mov	r8, r7
    56a2:	1c2f      	adds	r7, r5, #0
    56a4:	4367      	muls	r7, r4
    56a6:	435d      	muls	r5, r3
    56a8:	4344      	muls	r4, r0
    56aa:	4358      	muls	r0, r3
    56ac:	1965      	adds	r5, r4, r5
    56ae:	9001      	str	r0, [sp, #4]
    56b0:	0c38      	lsrs	r0, r7, #16
    56b2:	182d      	adds	r5, r5, r0
    56b4:	4442      	add	r2, r8
    56b6:	46b8      	mov	r8, r7
    56b8:	42ac      	cmp	r4, r5
    56ba:	d904      	bls.n	56c6 <__aeabi_dmul+0x2ce>
    56bc:	9801      	ldr	r0, [sp, #4]
    56be:	2380      	movs	r3, #128	; 0x80
    56c0:	025b      	lsls	r3, r3, #9
    56c2:	18c0      	adds	r0, r0, r3
    56c4:	9001      	str	r0, [sp, #4]
    56c6:	9c03      	ldr	r4, [sp, #12]
    56c8:	9f02      	ldr	r7, [sp, #8]
    56ca:	1c20      	adds	r0, r4, #0
    56cc:	4460      	add	r0, ip
    56ce:	19c0      	adds	r0, r0, r7
    56d0:	4560      	cmp	r0, ip
    56d2:	41a4      	sbcs	r4, r4
    56d4:	4647      	mov	r7, r8
    56d6:	4264      	negs	r4, r4
    56d8:	46a4      	mov	ip, r4
    56da:	042b      	lsls	r3, r5, #16
    56dc:	043c      	lsls	r4, r7, #16
    56de:	4699      	mov	r9, r3
    56e0:	0c24      	lsrs	r4, r4, #16
    56e2:	444c      	add	r4, r9
    56e4:	46a0      	mov	r8, r4
    56e6:	44d8      	add	r8, fp
    56e8:	1880      	adds	r0, r0, r2
    56ea:	46c2      	mov	sl, r8
    56ec:	44e2      	add	sl, ip
    56ee:	4290      	cmp	r0, r2
    56f0:	4192      	sbcs	r2, r2
    56f2:	4657      	mov	r7, sl
    56f4:	4252      	negs	r2, r2
    56f6:	4691      	mov	r9, r2
    56f8:	19f2      	adds	r2, r6, r7
    56fa:	45e2      	cmp	sl, ip
    56fc:	41bf      	sbcs	r7, r7
    56fe:	427f      	negs	r7, r7
    5700:	464b      	mov	r3, r9
    5702:	46bc      	mov	ip, r7
    5704:	45d8      	cmp	r8, fp
    5706:	41bf      	sbcs	r7, r7
    5708:	18d4      	adds	r4, r2, r3
    570a:	427f      	negs	r7, r7
    570c:	4663      	mov	r3, ip
    570e:	431f      	orrs	r7, r3
    5710:	0c2d      	lsrs	r5, r5, #16
    5712:	197f      	adds	r7, r7, r5
    5714:	42b2      	cmp	r2, r6
    5716:	4192      	sbcs	r2, r2
    5718:	454c      	cmp	r4, r9
    571a:	41ad      	sbcs	r5, r5
    571c:	4252      	negs	r2, r2
    571e:	426d      	negs	r5, r5
    5720:	4315      	orrs	r5, r2
    5722:	9e01      	ldr	r6, [sp, #4]
    5724:	197d      	adds	r5, r7, r5
    5726:	19ab      	adds	r3, r5, r6
    5728:	0de2      	lsrs	r2, r4, #23
    572a:	025b      	lsls	r3, r3, #9
    572c:	9f05      	ldr	r7, [sp, #20]
    572e:	4313      	orrs	r3, r2
    5730:	0242      	lsls	r2, r0, #9
    5732:	433a      	orrs	r2, r7
    5734:	469a      	mov	sl, r3
    5736:	1e53      	subs	r3, r2, #1
    5738:	419a      	sbcs	r2, r3
    573a:	0dc3      	lsrs	r3, r0, #23
    573c:	1c10      	adds	r0, r2, #0
    573e:	4318      	orrs	r0, r3
    5740:	0264      	lsls	r4, r4, #9
    5742:	4320      	orrs	r0, r4
    5744:	4680      	mov	r8, r0
    5746:	4650      	mov	r0, sl
    5748:	01c0      	lsls	r0, r0, #7
    574a:	d50d      	bpl.n	5768 <__aeabi_dmul+0x370>
    574c:	4645      	mov	r5, r8
    574e:	2201      	movs	r2, #1
    5750:	4656      	mov	r6, sl
    5752:	9c04      	ldr	r4, [sp, #16]
    5754:	086b      	lsrs	r3, r5, #1
    5756:	402a      	ands	r2, r5
    5758:	431a      	orrs	r2, r3
    575a:	07f3      	lsls	r3, r6, #31
    575c:	3401      	adds	r4, #1
    575e:	431a      	orrs	r2, r3
    5760:	0876      	lsrs	r6, r6, #1
    5762:	9404      	str	r4, [sp, #16]
    5764:	4690      	mov	r8, r2
    5766:	46b2      	mov	sl, r6
    5768:	9e04      	ldr	r6, [sp, #16]
    576a:	4f63      	ldr	r7, [pc, #396]	; (58f8 <__aeabi_dmul+0x500>)
    576c:	19f3      	adds	r3, r6, r7
    576e:	2b00      	cmp	r3, #0
    5770:	dd61      	ble.n	5836 <__aeabi_dmul+0x43e>
    5772:	4640      	mov	r0, r8
    5774:	0740      	lsls	r0, r0, #29
    5776:	d00b      	beq.n	5790 <__aeabi_dmul+0x398>
    5778:	220f      	movs	r2, #15
    577a:	4644      	mov	r4, r8
    577c:	4022      	ands	r2, r4
    577e:	2a04      	cmp	r2, #4
    5780:	d006      	beq.n	5790 <__aeabi_dmul+0x398>
    5782:	4642      	mov	r2, r8
    5784:	3204      	adds	r2, #4
    5786:	4542      	cmp	r2, r8
    5788:	4180      	sbcs	r0, r0
    578a:	4240      	negs	r0, r0
    578c:	4482      	add	sl, r0
    578e:	4690      	mov	r8, r2
    5790:	4655      	mov	r5, sl
    5792:	01ed      	lsls	r5, r5, #7
    5794:	d507      	bpl.n	57a6 <__aeabi_dmul+0x3ae>
    5796:	4b59      	ldr	r3, [pc, #356]	; (58fc <__aeabi_dmul+0x504>)
    5798:	4656      	mov	r6, sl
    579a:	9f04      	ldr	r7, [sp, #16]
    579c:	2080      	movs	r0, #128	; 0x80
    579e:	401e      	ands	r6, r3
    57a0:	00c0      	lsls	r0, r0, #3
    57a2:	46b2      	mov	sl, r6
    57a4:	183b      	adds	r3, r7, r0
    57a6:	4a56      	ldr	r2, [pc, #344]	; (5900 <__aeabi_dmul+0x508>)
    57a8:	4293      	cmp	r3, r2
    57aa:	dd00      	ble.n	57ae <__aeabi_dmul+0x3b6>
    57ac:	e6ea      	b.n	5584 <__aeabi_dmul+0x18c>
    57ae:	4644      	mov	r4, r8
    57b0:	4655      	mov	r5, sl
    57b2:	08e2      	lsrs	r2, r4, #3
    57b4:	0768      	lsls	r0, r5, #29
    57b6:	4310      	orrs	r0, r2
    57b8:	2201      	movs	r2, #1
    57ba:	026c      	lsls	r4, r5, #9
    57bc:	055b      	lsls	r3, r3, #21
    57be:	400a      	ands	r2, r1
    57c0:	4680      	mov	r8, r0
    57c2:	0b24      	lsrs	r4, r4, #12
    57c4:	0d5b      	lsrs	r3, r3, #21
    57c6:	4691      	mov	r9, r2
    57c8:	e67b      	b.n	54c2 <__aeabi_dmul+0xca>
    57ca:	46da      	mov	sl, fp
    57cc:	4690      	mov	r8, r2
    57ce:	1c1d      	adds	r5, r3, #0
    57d0:	e669      	b.n	54a6 <__aeabi_dmul+0xae>
    57d2:	2480      	movs	r4, #128	; 0x80
    57d4:	0324      	lsls	r4, r4, #12
    57d6:	4657      	mov	r7, sl
    57d8:	4227      	tst	r7, r4
    57da:	d11c      	bne.n	5816 <__aeabi_dmul+0x41e>
    57dc:	433c      	orrs	r4, r7
    57de:	0324      	lsls	r4, r4, #12
    57e0:	0b24      	lsrs	r4, r4, #12
    57e2:	4b48      	ldr	r3, [pc, #288]	; (5904 <__aeabi_dmul+0x50c>)
    57e4:	e66d      	b.n	54c2 <__aeabi_dmul+0xca>
    57e6:	1c03      	adds	r3, r0, #0
    57e8:	3b28      	subs	r3, #40	; 0x28
    57ea:	1c31      	adds	r1, r6, #0
    57ec:	4099      	lsls	r1, r3
    57ee:	468b      	mov	fp, r1
    57f0:	2200      	movs	r2, #0
    57f2:	e6c3      	b.n	557c <__aeabi_dmul+0x184>
    57f4:	1c30      	adds	r0, r6, #0
    57f6:	f000 fd47 	bl	6288 <__clzsi2>
    57fa:	3020      	adds	r0, #32
    57fc:	e6ad      	b.n	555a <__aeabi_dmul+0x162>
    57fe:	3b28      	subs	r3, #40	; 0x28
    5800:	1c21      	adds	r1, r4, #0
    5802:	4099      	lsls	r1, r3
    5804:	2200      	movs	r2, #0
    5806:	468a      	mov	sl, r1
    5808:	4690      	mov	r8, r2
    580a:	e68e      	b.n	552a <__aeabi_dmul+0x132>
    580c:	1c20      	adds	r0, r4, #0
    580e:	f000 fd3b 	bl	6288 <__clzsi2>
    5812:	3020      	adds	r0, #32
    5814:	e678      	b.n	5508 <__aeabi_dmul+0x110>
    5816:	4658      	mov	r0, fp
    5818:	4220      	tst	r0, r4
    581a:	d107      	bne.n	582c <__aeabi_dmul+0x434>
    581c:	4304      	orrs	r4, r0
    581e:	9903      	ldr	r1, [sp, #12]
    5820:	0324      	lsls	r4, r4, #12
    5822:	0b24      	lsrs	r4, r4, #12
    5824:	4689      	mov	r9, r1
    5826:	4690      	mov	r8, r2
    5828:	4b36      	ldr	r3, [pc, #216]	; (5904 <__aeabi_dmul+0x50c>)
    582a:	e64a      	b.n	54c2 <__aeabi_dmul+0xca>
    582c:	433c      	orrs	r4, r7
    582e:	0324      	lsls	r4, r4, #12
    5830:	0b24      	lsrs	r4, r4, #12
    5832:	4b34      	ldr	r3, [pc, #208]	; (5904 <__aeabi_dmul+0x50c>)
    5834:	e645      	b.n	54c2 <__aeabi_dmul+0xca>
    5836:	4b34      	ldr	r3, [pc, #208]	; (5908 <__aeabi_dmul+0x510>)
    5838:	9e04      	ldr	r6, [sp, #16]
    583a:	1b9b      	subs	r3, r3, r6
    583c:	2b38      	cmp	r3, #56	; 0x38
    583e:	dd06      	ble.n	584e <__aeabi_dmul+0x456>
    5840:	2301      	movs	r3, #1
    5842:	400b      	ands	r3, r1
    5844:	2400      	movs	r4, #0
    5846:	4699      	mov	r9, r3
    5848:	46a0      	mov	r8, r4
    584a:	2300      	movs	r3, #0
    584c:	e639      	b.n	54c2 <__aeabi_dmul+0xca>
    584e:	2b1f      	cmp	r3, #31
    5850:	dc25      	bgt.n	589e <__aeabi_dmul+0x4a6>
    5852:	9c04      	ldr	r4, [sp, #16]
    5854:	4d2d      	ldr	r5, [pc, #180]	; (590c <__aeabi_dmul+0x514>)
    5856:	4646      	mov	r6, r8
    5858:	1960      	adds	r0, r4, r5
    585a:	4652      	mov	r2, sl
    585c:	4644      	mov	r4, r8
    585e:	4086      	lsls	r6, r0
    5860:	40dc      	lsrs	r4, r3
    5862:	4082      	lsls	r2, r0
    5864:	4657      	mov	r7, sl
    5866:	1c30      	adds	r0, r6, #0
    5868:	4322      	orrs	r2, r4
    586a:	40df      	lsrs	r7, r3
    586c:	1e44      	subs	r4, r0, #1
    586e:	41a0      	sbcs	r0, r4
    5870:	4302      	orrs	r2, r0
    5872:	1c3b      	adds	r3, r7, #0
    5874:	0754      	lsls	r4, r2, #29
    5876:	d009      	beq.n	588c <__aeabi_dmul+0x494>
    5878:	200f      	movs	r0, #15
    587a:	4010      	ands	r0, r2
    587c:	2804      	cmp	r0, #4
    587e:	d005      	beq.n	588c <__aeabi_dmul+0x494>
    5880:	1d10      	adds	r0, r2, #4
    5882:	4290      	cmp	r0, r2
    5884:	4192      	sbcs	r2, r2
    5886:	4252      	negs	r2, r2
    5888:	189b      	adds	r3, r3, r2
    588a:	1c02      	adds	r2, r0, #0
    588c:	021d      	lsls	r5, r3, #8
    588e:	d51a      	bpl.n	58c6 <__aeabi_dmul+0x4ce>
    5890:	2301      	movs	r3, #1
    5892:	400b      	ands	r3, r1
    5894:	2400      	movs	r4, #0
    5896:	4699      	mov	r9, r3
    5898:	46a0      	mov	r8, r4
    589a:	2301      	movs	r3, #1
    589c:	e611      	b.n	54c2 <__aeabi_dmul+0xca>
    589e:	481c      	ldr	r0, [pc, #112]	; (5910 <__aeabi_dmul+0x518>)
    58a0:	9c04      	ldr	r4, [sp, #16]
    58a2:	4655      	mov	r5, sl
    58a4:	1b00      	subs	r0, r0, r4
    58a6:	40c5      	lsrs	r5, r0
    58a8:	1c28      	adds	r0, r5, #0
    58aa:	2b20      	cmp	r3, #32
    58ac:	d016      	beq.n	58dc <__aeabi_dmul+0x4e4>
    58ae:	4e19      	ldr	r6, [pc, #100]	; (5914 <__aeabi_dmul+0x51c>)
    58b0:	4657      	mov	r7, sl
    58b2:	19a2      	adds	r2, r4, r6
    58b4:	4097      	lsls	r7, r2
    58b6:	1c3a      	adds	r2, r7, #0
    58b8:	4643      	mov	r3, r8
    58ba:	431a      	orrs	r2, r3
    58bc:	1e53      	subs	r3, r2, #1
    58be:	419a      	sbcs	r2, r3
    58c0:	4302      	orrs	r2, r0
    58c2:	2300      	movs	r3, #0
    58c4:	e7d6      	b.n	5874 <__aeabi_dmul+0x47c>
    58c6:	0758      	lsls	r0, r3, #29
    58c8:	025b      	lsls	r3, r3, #9
    58ca:	08d2      	lsrs	r2, r2, #3
    58cc:	0b1c      	lsrs	r4, r3, #12
    58ce:	2301      	movs	r3, #1
    58d0:	400b      	ands	r3, r1
    58d2:	4310      	orrs	r0, r2
    58d4:	4699      	mov	r9, r3
    58d6:	4680      	mov	r8, r0
    58d8:	2300      	movs	r3, #0
    58da:	e5f2      	b.n	54c2 <__aeabi_dmul+0xca>
    58dc:	2200      	movs	r2, #0
    58de:	e7eb      	b.n	58b8 <__aeabi_dmul+0x4c0>
    58e0:	2480      	movs	r4, #128	; 0x80
    58e2:	0324      	lsls	r4, r4, #12
    58e4:	4650      	mov	r0, sl
    58e6:	2301      	movs	r3, #1
    58e8:	4304      	orrs	r4, r0
    58ea:	4019      	ands	r1, r3
    58ec:	0324      	lsls	r4, r4, #12
    58ee:	0b24      	lsrs	r4, r4, #12
    58f0:	4689      	mov	r9, r1
    58f2:	4b04      	ldr	r3, [pc, #16]	; (5904 <__aeabi_dmul+0x50c>)
    58f4:	e5e5      	b.n	54c2 <__aeabi_dmul+0xca>
    58f6:	46c0      	nop			; (mov r8, r8)
    58f8:	000003ff 	.word	0x000003ff
    58fc:	feffffff 	.word	0xfeffffff
    5900:	000007fe 	.word	0x000007fe
    5904:	000007ff 	.word	0x000007ff
    5908:	fffffc02 	.word	0xfffffc02
    590c:	0000041e 	.word	0x0000041e
    5910:	fffffbe2 	.word	0xfffffbe2
    5914:	0000043e 	.word	0x0000043e

00005918 <__aeabi_dsub>:
    5918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    591a:	465f      	mov	r7, fp
    591c:	4656      	mov	r6, sl
    591e:	4644      	mov	r4, r8
    5920:	464d      	mov	r5, r9
    5922:	b4f0      	push	{r4, r5, r6, r7}
    5924:	030c      	lsls	r4, r1, #12
    5926:	004d      	lsls	r5, r1, #1
    5928:	0fcf      	lsrs	r7, r1, #31
    592a:	0a61      	lsrs	r1, r4, #9
    592c:	0f44      	lsrs	r4, r0, #29
    592e:	4321      	orrs	r1, r4
    5930:	00c4      	lsls	r4, r0, #3
    5932:	0318      	lsls	r0, r3, #12
    5934:	0fde      	lsrs	r6, r3, #31
    5936:	4680      	mov	r8, r0
    5938:	46b4      	mov	ip, r6
    593a:	4646      	mov	r6, r8
    593c:	0058      	lsls	r0, r3, #1
    593e:	0a76      	lsrs	r6, r6, #9
    5940:	0f53      	lsrs	r3, r2, #29
    5942:	4333      	orrs	r3, r6
    5944:	00d6      	lsls	r6, r2, #3
    5946:	4ad1      	ldr	r2, [pc, #836]	; (5c8c <__aeabi_dsub+0x374>)
    5948:	0d6d      	lsrs	r5, r5, #21
    594a:	46ba      	mov	sl, r7
    594c:	0d40      	lsrs	r0, r0, #21
    594e:	46b3      	mov	fp, r6
    5950:	4290      	cmp	r0, r2
    5952:	d100      	bne.n	5956 <__aeabi_dsub+0x3e>
    5954:	e0f5      	b.n	5b42 <__aeabi_dsub+0x22a>
    5956:	4662      	mov	r2, ip
    5958:	2601      	movs	r6, #1
    595a:	4072      	eors	r2, r6
    595c:	4694      	mov	ip, r2
    595e:	4567      	cmp	r7, ip
    5960:	d100      	bne.n	5964 <__aeabi_dsub+0x4c>
    5962:	e0ab      	b.n	5abc <__aeabi_dsub+0x1a4>
    5964:	1a2f      	subs	r7, r5, r0
    5966:	2f00      	cmp	r7, #0
    5968:	dc00      	bgt.n	596c <__aeabi_dsub+0x54>
    596a:	e111      	b.n	5b90 <__aeabi_dsub+0x278>
    596c:	2800      	cmp	r0, #0
    596e:	d13e      	bne.n	59ee <__aeabi_dsub+0xd6>
    5970:	4658      	mov	r0, fp
    5972:	4318      	orrs	r0, r3
    5974:	d000      	beq.n	5978 <__aeabi_dsub+0x60>
    5976:	e0f1      	b.n	5b5c <__aeabi_dsub+0x244>
    5978:	0760      	lsls	r0, r4, #29
    597a:	d100      	bne.n	597e <__aeabi_dsub+0x66>
    597c:	e097      	b.n	5aae <__aeabi_dsub+0x196>
    597e:	230f      	movs	r3, #15
    5980:	4023      	ands	r3, r4
    5982:	2b04      	cmp	r3, #4
    5984:	d100      	bne.n	5988 <__aeabi_dsub+0x70>
    5986:	e122      	b.n	5bce <__aeabi_dsub+0x2b6>
    5988:	1d22      	adds	r2, r4, #4
    598a:	42a2      	cmp	r2, r4
    598c:	41a4      	sbcs	r4, r4
    598e:	4264      	negs	r4, r4
    5990:	2380      	movs	r3, #128	; 0x80
    5992:	1909      	adds	r1, r1, r4
    5994:	041b      	lsls	r3, r3, #16
    5996:	2701      	movs	r7, #1
    5998:	4650      	mov	r0, sl
    599a:	400b      	ands	r3, r1
    599c:	4007      	ands	r7, r0
    599e:	1c14      	adds	r4, r2, #0
    59a0:	2b00      	cmp	r3, #0
    59a2:	d100      	bne.n	59a6 <__aeabi_dsub+0x8e>
    59a4:	e079      	b.n	5a9a <__aeabi_dsub+0x182>
    59a6:	4bb9      	ldr	r3, [pc, #740]	; (5c8c <__aeabi_dsub+0x374>)
    59a8:	3501      	adds	r5, #1
    59aa:	429d      	cmp	r5, r3
    59ac:	d100      	bne.n	59b0 <__aeabi_dsub+0x98>
    59ae:	e10b      	b.n	5bc8 <__aeabi_dsub+0x2b0>
    59b0:	4bb7      	ldr	r3, [pc, #732]	; (5c90 <__aeabi_dsub+0x378>)
    59b2:	08e4      	lsrs	r4, r4, #3
    59b4:	4019      	ands	r1, r3
    59b6:	0748      	lsls	r0, r1, #29
    59b8:	0249      	lsls	r1, r1, #9
    59ba:	4304      	orrs	r4, r0
    59bc:	0b0b      	lsrs	r3, r1, #12
    59be:	2000      	movs	r0, #0
    59c0:	2100      	movs	r1, #0
    59c2:	031b      	lsls	r3, r3, #12
    59c4:	0b1a      	lsrs	r2, r3, #12
    59c6:	0d0b      	lsrs	r3, r1, #20
    59c8:	056d      	lsls	r5, r5, #21
    59ca:	051b      	lsls	r3, r3, #20
    59cc:	4313      	orrs	r3, r2
    59ce:	086a      	lsrs	r2, r5, #1
    59d0:	4db0      	ldr	r5, [pc, #704]	; (5c94 <__aeabi_dsub+0x37c>)
    59d2:	07ff      	lsls	r7, r7, #31
    59d4:	401d      	ands	r5, r3
    59d6:	4315      	orrs	r5, r2
    59d8:	006d      	lsls	r5, r5, #1
    59da:	086d      	lsrs	r5, r5, #1
    59dc:	1c29      	adds	r1, r5, #0
    59de:	4339      	orrs	r1, r7
    59e0:	1c20      	adds	r0, r4, #0
    59e2:	bc3c      	pop	{r2, r3, r4, r5}
    59e4:	4690      	mov	r8, r2
    59e6:	4699      	mov	r9, r3
    59e8:	46a2      	mov	sl, r4
    59ea:	46ab      	mov	fp, r5
    59ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59ee:	48a7      	ldr	r0, [pc, #668]	; (5c8c <__aeabi_dsub+0x374>)
    59f0:	4285      	cmp	r5, r0
    59f2:	d0c1      	beq.n	5978 <__aeabi_dsub+0x60>
    59f4:	2080      	movs	r0, #128	; 0x80
    59f6:	0400      	lsls	r0, r0, #16
    59f8:	4303      	orrs	r3, r0
    59fa:	2f38      	cmp	r7, #56	; 0x38
    59fc:	dd00      	ble.n	5a00 <__aeabi_dsub+0xe8>
    59fe:	e0fd      	b.n	5bfc <__aeabi_dsub+0x2e4>
    5a00:	2f1f      	cmp	r7, #31
    5a02:	dd00      	ble.n	5a06 <__aeabi_dsub+0xee>
    5a04:	e131      	b.n	5c6a <__aeabi_dsub+0x352>
    5a06:	2020      	movs	r0, #32
    5a08:	1bc0      	subs	r0, r0, r7
    5a0a:	1c1a      	adds	r2, r3, #0
    5a0c:	465e      	mov	r6, fp
    5a0e:	4082      	lsls	r2, r0
    5a10:	40fe      	lsrs	r6, r7
    5a12:	4332      	orrs	r2, r6
    5a14:	4694      	mov	ip, r2
    5a16:	465a      	mov	r2, fp
    5a18:	4082      	lsls	r2, r0
    5a1a:	1c10      	adds	r0, r2, #0
    5a1c:	1e42      	subs	r2, r0, #1
    5a1e:	4190      	sbcs	r0, r2
    5a20:	40fb      	lsrs	r3, r7
    5a22:	4662      	mov	r2, ip
    5a24:	4302      	orrs	r2, r0
    5a26:	1c1f      	adds	r7, r3, #0
    5a28:	1aa2      	subs	r2, r4, r2
    5a2a:	4294      	cmp	r4, r2
    5a2c:	41a4      	sbcs	r4, r4
    5a2e:	4264      	negs	r4, r4
    5a30:	1bc9      	subs	r1, r1, r7
    5a32:	1b09      	subs	r1, r1, r4
    5a34:	1c14      	adds	r4, r2, #0
    5a36:	020a      	lsls	r2, r1, #8
    5a38:	d59e      	bpl.n	5978 <__aeabi_dsub+0x60>
    5a3a:	0249      	lsls	r1, r1, #9
    5a3c:	0a4f      	lsrs	r7, r1, #9
    5a3e:	2f00      	cmp	r7, #0
    5a40:	d100      	bne.n	5a44 <__aeabi_dsub+0x12c>
    5a42:	e0d6      	b.n	5bf2 <__aeabi_dsub+0x2da>
    5a44:	1c38      	adds	r0, r7, #0
    5a46:	f000 fc1f 	bl	6288 <__clzsi2>
    5a4a:	1c02      	adds	r2, r0, #0
    5a4c:	3a08      	subs	r2, #8
    5a4e:	2a1f      	cmp	r2, #31
    5a50:	dd00      	ble.n	5a54 <__aeabi_dsub+0x13c>
    5a52:	e0c3      	b.n	5bdc <__aeabi_dsub+0x2c4>
    5a54:	2128      	movs	r1, #40	; 0x28
    5a56:	1c23      	adds	r3, r4, #0
    5a58:	1a09      	subs	r1, r1, r0
    5a5a:	4097      	lsls	r7, r2
    5a5c:	40cb      	lsrs	r3, r1
    5a5e:	431f      	orrs	r7, r3
    5a60:	4094      	lsls	r4, r2
    5a62:	4295      	cmp	r5, r2
    5a64:	dd00      	ble.n	5a68 <__aeabi_dsub+0x150>
    5a66:	e0c0      	b.n	5bea <__aeabi_dsub+0x2d2>
    5a68:	1b55      	subs	r5, r2, r5
    5a6a:	1c69      	adds	r1, r5, #1
    5a6c:	291f      	cmp	r1, #31
    5a6e:	dd00      	ble.n	5a72 <__aeabi_dsub+0x15a>
    5a70:	e0ea      	b.n	5c48 <__aeabi_dsub+0x330>
    5a72:	221f      	movs	r2, #31
    5a74:	1b55      	subs	r5, r2, r5
    5a76:	1c3b      	adds	r3, r7, #0
    5a78:	1c22      	adds	r2, r4, #0
    5a7a:	40ab      	lsls	r3, r5
    5a7c:	40ca      	lsrs	r2, r1
    5a7e:	40ac      	lsls	r4, r5
    5a80:	1e65      	subs	r5, r4, #1
    5a82:	41ac      	sbcs	r4, r5
    5a84:	4313      	orrs	r3, r2
    5a86:	40cf      	lsrs	r7, r1
    5a88:	431c      	orrs	r4, r3
    5a8a:	1c39      	adds	r1, r7, #0
    5a8c:	2500      	movs	r5, #0
    5a8e:	e773      	b.n	5978 <__aeabi_dsub+0x60>
    5a90:	2180      	movs	r1, #128	; 0x80
    5a92:	4d7e      	ldr	r5, [pc, #504]	; (5c8c <__aeabi_dsub+0x374>)
    5a94:	2700      	movs	r7, #0
    5a96:	03c9      	lsls	r1, r1, #15
    5a98:	2400      	movs	r4, #0
    5a9a:	4b7c      	ldr	r3, [pc, #496]	; (5c8c <__aeabi_dsub+0x374>)
    5a9c:	0748      	lsls	r0, r1, #29
    5a9e:	08e4      	lsrs	r4, r4, #3
    5aa0:	4304      	orrs	r4, r0
    5aa2:	08c9      	lsrs	r1, r1, #3
    5aa4:	429d      	cmp	r5, r3
    5aa6:	d050      	beq.n	5b4a <__aeabi_dsub+0x232>
    5aa8:	0309      	lsls	r1, r1, #12
    5aaa:	0b0b      	lsrs	r3, r1, #12
    5aac:	e787      	b.n	59be <__aeabi_dsub+0xa6>
    5aae:	2380      	movs	r3, #128	; 0x80
    5ab0:	041b      	lsls	r3, r3, #16
    5ab2:	2701      	movs	r7, #1
    5ab4:	4652      	mov	r2, sl
    5ab6:	400b      	ands	r3, r1
    5ab8:	4017      	ands	r7, r2
    5aba:	e771      	b.n	59a0 <__aeabi_dsub+0x88>
    5abc:	1a2a      	subs	r2, r5, r0
    5abe:	4694      	mov	ip, r2
    5ac0:	2a00      	cmp	r2, #0
    5ac2:	dc00      	bgt.n	5ac6 <__aeabi_dsub+0x1ae>
    5ac4:	e0a1      	b.n	5c0a <__aeabi_dsub+0x2f2>
    5ac6:	2800      	cmp	r0, #0
    5ac8:	d054      	beq.n	5b74 <__aeabi_dsub+0x25c>
    5aca:	4870      	ldr	r0, [pc, #448]	; (5c8c <__aeabi_dsub+0x374>)
    5acc:	4285      	cmp	r5, r0
    5ace:	d100      	bne.n	5ad2 <__aeabi_dsub+0x1ba>
    5ad0:	e752      	b.n	5978 <__aeabi_dsub+0x60>
    5ad2:	2080      	movs	r0, #128	; 0x80
    5ad4:	0400      	lsls	r0, r0, #16
    5ad6:	4303      	orrs	r3, r0
    5ad8:	4660      	mov	r0, ip
    5ada:	2838      	cmp	r0, #56	; 0x38
    5adc:	dd00      	ble.n	5ae0 <__aeabi_dsub+0x1c8>
    5ade:	e10e      	b.n	5cfe <__aeabi_dsub+0x3e6>
    5ae0:	281f      	cmp	r0, #31
    5ae2:	dd00      	ble.n	5ae6 <__aeabi_dsub+0x1ce>
    5ae4:	e157      	b.n	5d96 <__aeabi_dsub+0x47e>
    5ae6:	4662      	mov	r2, ip
    5ae8:	2020      	movs	r0, #32
    5aea:	1a80      	subs	r0, r0, r2
    5aec:	1c1e      	adds	r6, r3, #0
    5aee:	4086      	lsls	r6, r0
    5af0:	46b1      	mov	r9, r6
    5af2:	465e      	mov	r6, fp
    5af4:	40d6      	lsrs	r6, r2
    5af6:	464a      	mov	r2, r9
    5af8:	4332      	orrs	r2, r6
    5afa:	465e      	mov	r6, fp
    5afc:	4086      	lsls	r6, r0
    5afe:	4690      	mov	r8, r2
    5b00:	1c30      	adds	r0, r6, #0
    5b02:	1e42      	subs	r2, r0, #1
    5b04:	4190      	sbcs	r0, r2
    5b06:	4642      	mov	r2, r8
    5b08:	4302      	orrs	r2, r0
    5b0a:	4660      	mov	r0, ip
    5b0c:	40c3      	lsrs	r3, r0
    5b0e:	1912      	adds	r2, r2, r4
    5b10:	42a2      	cmp	r2, r4
    5b12:	41a4      	sbcs	r4, r4
    5b14:	4264      	negs	r4, r4
    5b16:	1859      	adds	r1, r3, r1
    5b18:	1909      	adds	r1, r1, r4
    5b1a:	1c14      	adds	r4, r2, #0
    5b1c:	0208      	lsls	r0, r1, #8
    5b1e:	d400      	bmi.n	5b22 <__aeabi_dsub+0x20a>
    5b20:	e72a      	b.n	5978 <__aeabi_dsub+0x60>
    5b22:	4b5a      	ldr	r3, [pc, #360]	; (5c8c <__aeabi_dsub+0x374>)
    5b24:	3501      	adds	r5, #1
    5b26:	429d      	cmp	r5, r3
    5b28:	d100      	bne.n	5b2c <__aeabi_dsub+0x214>
    5b2a:	e131      	b.n	5d90 <__aeabi_dsub+0x478>
    5b2c:	4b58      	ldr	r3, [pc, #352]	; (5c90 <__aeabi_dsub+0x378>)
    5b2e:	0860      	lsrs	r0, r4, #1
    5b30:	4019      	ands	r1, r3
    5b32:	2301      	movs	r3, #1
    5b34:	4023      	ands	r3, r4
    5b36:	1c1c      	adds	r4, r3, #0
    5b38:	4304      	orrs	r4, r0
    5b3a:	07cb      	lsls	r3, r1, #31
    5b3c:	431c      	orrs	r4, r3
    5b3e:	0849      	lsrs	r1, r1, #1
    5b40:	e71a      	b.n	5978 <__aeabi_dsub+0x60>
    5b42:	431e      	orrs	r6, r3
    5b44:	d000      	beq.n	5b48 <__aeabi_dsub+0x230>
    5b46:	e70a      	b.n	595e <__aeabi_dsub+0x46>
    5b48:	e705      	b.n	5956 <__aeabi_dsub+0x3e>
    5b4a:	1c23      	adds	r3, r4, #0
    5b4c:	430b      	orrs	r3, r1
    5b4e:	d03b      	beq.n	5bc8 <__aeabi_dsub+0x2b0>
    5b50:	2380      	movs	r3, #128	; 0x80
    5b52:	031b      	lsls	r3, r3, #12
    5b54:	430b      	orrs	r3, r1
    5b56:	031b      	lsls	r3, r3, #12
    5b58:	0b1b      	lsrs	r3, r3, #12
    5b5a:	e730      	b.n	59be <__aeabi_dsub+0xa6>
    5b5c:	3f01      	subs	r7, #1
    5b5e:	2f00      	cmp	r7, #0
    5b60:	d16d      	bne.n	5c3e <__aeabi_dsub+0x326>
    5b62:	465e      	mov	r6, fp
    5b64:	1ba2      	subs	r2, r4, r6
    5b66:	4294      	cmp	r4, r2
    5b68:	41a4      	sbcs	r4, r4
    5b6a:	4264      	negs	r4, r4
    5b6c:	1ac9      	subs	r1, r1, r3
    5b6e:	1b09      	subs	r1, r1, r4
    5b70:	1c14      	adds	r4, r2, #0
    5b72:	e760      	b.n	5a36 <__aeabi_dsub+0x11e>
    5b74:	4658      	mov	r0, fp
    5b76:	4318      	orrs	r0, r3
    5b78:	d100      	bne.n	5b7c <__aeabi_dsub+0x264>
    5b7a:	e6fd      	b.n	5978 <__aeabi_dsub+0x60>
    5b7c:	2601      	movs	r6, #1
    5b7e:	4276      	negs	r6, r6
    5b80:	44b4      	add	ip, r6
    5b82:	4660      	mov	r0, ip
    5b84:	2800      	cmp	r0, #0
    5b86:	d000      	beq.n	5b8a <__aeabi_dsub+0x272>
    5b88:	e0d0      	b.n	5d2c <__aeabi_dsub+0x414>
    5b8a:	465e      	mov	r6, fp
    5b8c:	1932      	adds	r2, r6, r4
    5b8e:	e7bf      	b.n	5b10 <__aeabi_dsub+0x1f8>
    5b90:	2f00      	cmp	r7, #0
    5b92:	d000      	beq.n	5b96 <__aeabi_dsub+0x27e>
    5b94:	e080      	b.n	5c98 <__aeabi_dsub+0x380>
    5b96:	1c68      	adds	r0, r5, #1
    5b98:	0540      	lsls	r0, r0, #21
    5b9a:	0d40      	lsrs	r0, r0, #21
    5b9c:	2801      	cmp	r0, #1
    5b9e:	dc00      	bgt.n	5ba2 <__aeabi_dsub+0x28a>
    5ba0:	e0e8      	b.n	5d74 <__aeabi_dsub+0x45c>
    5ba2:	465a      	mov	r2, fp
    5ba4:	1aa2      	subs	r2, r4, r2
    5ba6:	4294      	cmp	r4, r2
    5ba8:	41bf      	sbcs	r7, r7
    5baa:	1ac8      	subs	r0, r1, r3
    5bac:	427f      	negs	r7, r7
    5bae:	1bc7      	subs	r7, r0, r7
    5bb0:	023e      	lsls	r6, r7, #8
    5bb2:	d400      	bmi.n	5bb6 <__aeabi_dsub+0x29e>
    5bb4:	e098      	b.n	5ce8 <__aeabi_dsub+0x3d0>
    5bb6:	4658      	mov	r0, fp
    5bb8:	1b04      	subs	r4, r0, r4
    5bba:	45a3      	cmp	fp, r4
    5bbc:	4192      	sbcs	r2, r2
    5bbe:	1a59      	subs	r1, r3, r1
    5bc0:	4252      	negs	r2, r2
    5bc2:	1a8f      	subs	r7, r1, r2
    5bc4:	46e2      	mov	sl, ip
    5bc6:	e73a      	b.n	5a3e <__aeabi_dsub+0x126>
    5bc8:	2300      	movs	r3, #0
    5bca:	2400      	movs	r4, #0
    5bcc:	e6f7      	b.n	59be <__aeabi_dsub+0xa6>
    5bce:	2380      	movs	r3, #128	; 0x80
    5bd0:	041b      	lsls	r3, r3, #16
    5bd2:	2701      	movs	r7, #1
    5bd4:	4656      	mov	r6, sl
    5bd6:	400b      	ands	r3, r1
    5bd8:	4037      	ands	r7, r6
    5bda:	e6e1      	b.n	59a0 <__aeabi_dsub+0x88>
    5bdc:	1c27      	adds	r7, r4, #0
    5bde:	3828      	subs	r0, #40	; 0x28
    5be0:	4087      	lsls	r7, r0
    5be2:	2400      	movs	r4, #0
    5be4:	4295      	cmp	r5, r2
    5be6:	dc00      	bgt.n	5bea <__aeabi_dsub+0x2d2>
    5be8:	e73e      	b.n	5a68 <__aeabi_dsub+0x150>
    5bea:	4929      	ldr	r1, [pc, #164]	; (5c90 <__aeabi_dsub+0x378>)
    5bec:	1aad      	subs	r5, r5, r2
    5bee:	4039      	ands	r1, r7
    5bf0:	e6c2      	b.n	5978 <__aeabi_dsub+0x60>
    5bf2:	1c20      	adds	r0, r4, #0
    5bf4:	f000 fb48 	bl	6288 <__clzsi2>
    5bf8:	3020      	adds	r0, #32
    5bfa:	e726      	b.n	5a4a <__aeabi_dsub+0x132>
    5bfc:	465a      	mov	r2, fp
    5bfe:	431a      	orrs	r2, r3
    5c00:	1e53      	subs	r3, r2, #1
    5c02:	419a      	sbcs	r2, r3
    5c04:	b2d2      	uxtb	r2, r2
    5c06:	2700      	movs	r7, #0
    5c08:	e70e      	b.n	5a28 <__aeabi_dsub+0x110>
    5c0a:	2a00      	cmp	r2, #0
    5c0c:	d000      	beq.n	5c10 <__aeabi_dsub+0x2f8>
    5c0e:	e0de      	b.n	5dce <__aeabi_dsub+0x4b6>
    5c10:	1c68      	adds	r0, r5, #1
    5c12:	0546      	lsls	r6, r0, #21
    5c14:	0d76      	lsrs	r6, r6, #21
    5c16:	2e01      	cmp	r6, #1
    5c18:	dc00      	bgt.n	5c1c <__aeabi_dsub+0x304>
    5c1a:	e090      	b.n	5d3e <__aeabi_dsub+0x426>
    5c1c:	4d1b      	ldr	r5, [pc, #108]	; (5c8c <__aeabi_dsub+0x374>)
    5c1e:	42a8      	cmp	r0, r5
    5c20:	d100      	bne.n	5c24 <__aeabi_dsub+0x30c>
    5c22:	e0f5      	b.n	5e10 <__aeabi_dsub+0x4f8>
    5c24:	465e      	mov	r6, fp
    5c26:	1932      	adds	r2, r6, r4
    5c28:	42a2      	cmp	r2, r4
    5c2a:	41a4      	sbcs	r4, r4
    5c2c:	4264      	negs	r4, r4
    5c2e:	1859      	adds	r1, r3, r1
    5c30:	1909      	adds	r1, r1, r4
    5c32:	07cc      	lsls	r4, r1, #31
    5c34:	0852      	lsrs	r2, r2, #1
    5c36:	4314      	orrs	r4, r2
    5c38:	0849      	lsrs	r1, r1, #1
    5c3a:	1c05      	adds	r5, r0, #0
    5c3c:	e69c      	b.n	5978 <__aeabi_dsub+0x60>
    5c3e:	4813      	ldr	r0, [pc, #76]	; (5c8c <__aeabi_dsub+0x374>)
    5c40:	4285      	cmp	r5, r0
    5c42:	d000      	beq.n	5c46 <__aeabi_dsub+0x32e>
    5c44:	e6d9      	b.n	59fa <__aeabi_dsub+0xe2>
    5c46:	e697      	b.n	5978 <__aeabi_dsub+0x60>
    5c48:	1c2b      	adds	r3, r5, #0
    5c4a:	3b1f      	subs	r3, #31
    5c4c:	1c3e      	adds	r6, r7, #0
    5c4e:	40de      	lsrs	r6, r3
    5c50:	1c33      	adds	r3, r6, #0
    5c52:	2920      	cmp	r1, #32
    5c54:	d06f      	beq.n	5d36 <__aeabi_dsub+0x41e>
    5c56:	223f      	movs	r2, #63	; 0x3f
    5c58:	1b55      	subs	r5, r2, r5
    5c5a:	40af      	lsls	r7, r5
    5c5c:	433c      	orrs	r4, r7
    5c5e:	1e60      	subs	r0, r4, #1
    5c60:	4184      	sbcs	r4, r0
    5c62:	431c      	orrs	r4, r3
    5c64:	2100      	movs	r1, #0
    5c66:	2500      	movs	r5, #0
    5c68:	e686      	b.n	5978 <__aeabi_dsub+0x60>
    5c6a:	1c38      	adds	r0, r7, #0
    5c6c:	3820      	subs	r0, #32
    5c6e:	1c1e      	adds	r6, r3, #0
    5c70:	40c6      	lsrs	r6, r0
    5c72:	1c30      	adds	r0, r6, #0
    5c74:	2f20      	cmp	r7, #32
    5c76:	d060      	beq.n	5d3a <__aeabi_dsub+0x422>
    5c78:	2240      	movs	r2, #64	; 0x40
    5c7a:	1bd7      	subs	r7, r2, r7
    5c7c:	40bb      	lsls	r3, r7
    5c7e:	465a      	mov	r2, fp
    5c80:	431a      	orrs	r2, r3
    5c82:	1e53      	subs	r3, r2, #1
    5c84:	419a      	sbcs	r2, r3
    5c86:	4302      	orrs	r2, r0
    5c88:	2700      	movs	r7, #0
    5c8a:	e6cd      	b.n	5a28 <__aeabi_dsub+0x110>
    5c8c:	000007ff 	.word	0x000007ff
    5c90:	ff7fffff 	.word	0xff7fffff
    5c94:	800fffff 	.word	0x800fffff
    5c98:	2d00      	cmp	r5, #0
    5c9a:	d037      	beq.n	5d0c <__aeabi_dsub+0x3f4>
    5c9c:	4db6      	ldr	r5, [pc, #728]	; (5f78 <__aeabi_dsub+0x660>)
    5c9e:	42a8      	cmp	r0, r5
    5ca0:	d100      	bne.n	5ca4 <__aeabi_dsub+0x38c>
    5ca2:	e08f      	b.n	5dc4 <__aeabi_dsub+0x4ac>
    5ca4:	2580      	movs	r5, #128	; 0x80
    5ca6:	042d      	lsls	r5, r5, #16
    5ca8:	427f      	negs	r7, r7
    5caa:	4329      	orrs	r1, r5
    5cac:	2f38      	cmp	r7, #56	; 0x38
    5cae:	dd00      	ble.n	5cb2 <__aeabi_dsub+0x39a>
    5cb0:	e0a8      	b.n	5e04 <__aeabi_dsub+0x4ec>
    5cb2:	2f1f      	cmp	r7, #31
    5cb4:	dd00      	ble.n	5cb8 <__aeabi_dsub+0x3a0>
    5cb6:	e124      	b.n	5f02 <__aeabi_dsub+0x5ea>
    5cb8:	2520      	movs	r5, #32
    5cba:	1bed      	subs	r5, r5, r7
    5cbc:	1c0e      	adds	r6, r1, #0
    5cbe:	40ae      	lsls	r6, r5
    5cc0:	46b0      	mov	r8, r6
    5cc2:	1c26      	adds	r6, r4, #0
    5cc4:	40fe      	lsrs	r6, r7
    5cc6:	4642      	mov	r2, r8
    5cc8:	40ac      	lsls	r4, r5
    5cca:	4316      	orrs	r6, r2
    5ccc:	1e65      	subs	r5, r4, #1
    5cce:	41ac      	sbcs	r4, r5
    5cd0:	4334      	orrs	r4, r6
    5cd2:	40f9      	lsrs	r1, r7
    5cd4:	465a      	mov	r2, fp
    5cd6:	1b14      	subs	r4, r2, r4
    5cd8:	45a3      	cmp	fp, r4
    5cda:	4192      	sbcs	r2, r2
    5cdc:	1a5b      	subs	r3, r3, r1
    5cde:	4252      	negs	r2, r2
    5ce0:	1a99      	subs	r1, r3, r2
    5ce2:	1c05      	adds	r5, r0, #0
    5ce4:	46e2      	mov	sl, ip
    5ce6:	e6a6      	b.n	5a36 <__aeabi_dsub+0x11e>
    5ce8:	1c13      	adds	r3, r2, #0
    5cea:	433b      	orrs	r3, r7
    5cec:	1c14      	adds	r4, r2, #0
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d000      	beq.n	5cf4 <__aeabi_dsub+0x3dc>
    5cf2:	e6a4      	b.n	5a3e <__aeabi_dsub+0x126>
    5cf4:	2700      	movs	r7, #0
    5cf6:	2100      	movs	r1, #0
    5cf8:	2500      	movs	r5, #0
    5cfa:	2400      	movs	r4, #0
    5cfc:	e6cd      	b.n	5a9a <__aeabi_dsub+0x182>
    5cfe:	465a      	mov	r2, fp
    5d00:	431a      	orrs	r2, r3
    5d02:	1e53      	subs	r3, r2, #1
    5d04:	419a      	sbcs	r2, r3
    5d06:	b2d2      	uxtb	r2, r2
    5d08:	2300      	movs	r3, #0
    5d0a:	e700      	b.n	5b0e <__aeabi_dsub+0x1f6>
    5d0c:	1c0d      	adds	r5, r1, #0
    5d0e:	4325      	orrs	r5, r4
    5d10:	d058      	beq.n	5dc4 <__aeabi_dsub+0x4ac>
    5d12:	43ff      	mvns	r7, r7
    5d14:	2f00      	cmp	r7, #0
    5d16:	d151      	bne.n	5dbc <__aeabi_dsub+0x4a4>
    5d18:	465a      	mov	r2, fp
    5d1a:	1b14      	subs	r4, r2, r4
    5d1c:	45a3      	cmp	fp, r4
    5d1e:	4192      	sbcs	r2, r2
    5d20:	1a59      	subs	r1, r3, r1
    5d22:	4252      	negs	r2, r2
    5d24:	1a89      	subs	r1, r1, r2
    5d26:	1c05      	adds	r5, r0, #0
    5d28:	46e2      	mov	sl, ip
    5d2a:	e684      	b.n	5a36 <__aeabi_dsub+0x11e>
    5d2c:	4892      	ldr	r0, [pc, #584]	; (5f78 <__aeabi_dsub+0x660>)
    5d2e:	4285      	cmp	r5, r0
    5d30:	d000      	beq.n	5d34 <__aeabi_dsub+0x41c>
    5d32:	e6d1      	b.n	5ad8 <__aeabi_dsub+0x1c0>
    5d34:	e620      	b.n	5978 <__aeabi_dsub+0x60>
    5d36:	2700      	movs	r7, #0
    5d38:	e790      	b.n	5c5c <__aeabi_dsub+0x344>
    5d3a:	2300      	movs	r3, #0
    5d3c:	e79f      	b.n	5c7e <__aeabi_dsub+0x366>
    5d3e:	1c08      	adds	r0, r1, #0
    5d40:	4320      	orrs	r0, r4
    5d42:	2d00      	cmp	r5, #0
    5d44:	d000      	beq.n	5d48 <__aeabi_dsub+0x430>
    5d46:	e0c2      	b.n	5ece <__aeabi_dsub+0x5b6>
    5d48:	2800      	cmp	r0, #0
    5d4a:	d100      	bne.n	5d4e <__aeabi_dsub+0x436>
    5d4c:	e0ef      	b.n	5f2e <__aeabi_dsub+0x616>
    5d4e:	4658      	mov	r0, fp
    5d50:	4318      	orrs	r0, r3
    5d52:	d100      	bne.n	5d56 <__aeabi_dsub+0x43e>
    5d54:	e610      	b.n	5978 <__aeabi_dsub+0x60>
    5d56:	4658      	mov	r0, fp
    5d58:	1902      	adds	r2, r0, r4
    5d5a:	42a2      	cmp	r2, r4
    5d5c:	41a4      	sbcs	r4, r4
    5d5e:	4264      	negs	r4, r4
    5d60:	1859      	adds	r1, r3, r1
    5d62:	1909      	adds	r1, r1, r4
    5d64:	1c14      	adds	r4, r2, #0
    5d66:	020a      	lsls	r2, r1, #8
    5d68:	d400      	bmi.n	5d6c <__aeabi_dsub+0x454>
    5d6a:	e605      	b.n	5978 <__aeabi_dsub+0x60>
    5d6c:	4b83      	ldr	r3, [pc, #524]	; (5f7c <__aeabi_dsub+0x664>)
    5d6e:	2501      	movs	r5, #1
    5d70:	4019      	ands	r1, r3
    5d72:	e601      	b.n	5978 <__aeabi_dsub+0x60>
    5d74:	1c08      	adds	r0, r1, #0
    5d76:	4320      	orrs	r0, r4
    5d78:	2d00      	cmp	r5, #0
    5d7a:	d138      	bne.n	5dee <__aeabi_dsub+0x4d6>
    5d7c:	2800      	cmp	r0, #0
    5d7e:	d16f      	bne.n	5e60 <__aeabi_dsub+0x548>
    5d80:	4659      	mov	r1, fp
    5d82:	4319      	orrs	r1, r3
    5d84:	d003      	beq.n	5d8e <__aeabi_dsub+0x476>
    5d86:	1c19      	adds	r1, r3, #0
    5d88:	465c      	mov	r4, fp
    5d8a:	46e2      	mov	sl, ip
    5d8c:	e5f4      	b.n	5978 <__aeabi_dsub+0x60>
    5d8e:	2700      	movs	r7, #0
    5d90:	2100      	movs	r1, #0
    5d92:	2400      	movs	r4, #0
    5d94:	e681      	b.n	5a9a <__aeabi_dsub+0x182>
    5d96:	4660      	mov	r0, ip
    5d98:	3820      	subs	r0, #32
    5d9a:	1c1a      	adds	r2, r3, #0
    5d9c:	40c2      	lsrs	r2, r0
    5d9e:	4666      	mov	r6, ip
    5da0:	1c10      	adds	r0, r2, #0
    5da2:	2e20      	cmp	r6, #32
    5da4:	d100      	bne.n	5da8 <__aeabi_dsub+0x490>
    5da6:	e0aa      	b.n	5efe <__aeabi_dsub+0x5e6>
    5da8:	2240      	movs	r2, #64	; 0x40
    5daa:	1b92      	subs	r2, r2, r6
    5dac:	4093      	lsls	r3, r2
    5dae:	465a      	mov	r2, fp
    5db0:	431a      	orrs	r2, r3
    5db2:	1e53      	subs	r3, r2, #1
    5db4:	419a      	sbcs	r2, r3
    5db6:	4302      	orrs	r2, r0
    5db8:	2300      	movs	r3, #0
    5dba:	e6a8      	b.n	5b0e <__aeabi_dsub+0x1f6>
    5dbc:	4d6e      	ldr	r5, [pc, #440]	; (5f78 <__aeabi_dsub+0x660>)
    5dbe:	42a8      	cmp	r0, r5
    5dc0:	d000      	beq.n	5dc4 <__aeabi_dsub+0x4ac>
    5dc2:	e773      	b.n	5cac <__aeabi_dsub+0x394>
    5dc4:	1c19      	adds	r1, r3, #0
    5dc6:	465c      	mov	r4, fp
    5dc8:	1c05      	adds	r5, r0, #0
    5dca:	46e2      	mov	sl, ip
    5dcc:	e5d4      	b.n	5978 <__aeabi_dsub+0x60>
    5dce:	2d00      	cmp	r5, #0
    5dd0:	d122      	bne.n	5e18 <__aeabi_dsub+0x500>
    5dd2:	1c0d      	adds	r5, r1, #0
    5dd4:	4325      	orrs	r5, r4
    5dd6:	d076      	beq.n	5ec6 <__aeabi_dsub+0x5ae>
    5dd8:	43d5      	mvns	r5, r2
    5dda:	2d00      	cmp	r5, #0
    5ddc:	d170      	bne.n	5ec0 <__aeabi_dsub+0x5a8>
    5dde:	445c      	add	r4, fp
    5de0:	455c      	cmp	r4, fp
    5de2:	4192      	sbcs	r2, r2
    5de4:	1859      	adds	r1, r3, r1
    5de6:	4252      	negs	r2, r2
    5de8:	1889      	adds	r1, r1, r2
    5dea:	1c05      	adds	r5, r0, #0
    5dec:	e696      	b.n	5b1c <__aeabi_dsub+0x204>
    5dee:	2800      	cmp	r0, #0
    5df0:	d14c      	bne.n	5e8c <__aeabi_dsub+0x574>
    5df2:	4659      	mov	r1, fp
    5df4:	4319      	orrs	r1, r3
    5df6:	d100      	bne.n	5dfa <__aeabi_dsub+0x4e2>
    5df8:	e64a      	b.n	5a90 <__aeabi_dsub+0x178>
    5dfa:	1c19      	adds	r1, r3, #0
    5dfc:	465c      	mov	r4, fp
    5dfe:	46e2      	mov	sl, ip
    5e00:	4d5d      	ldr	r5, [pc, #372]	; (5f78 <__aeabi_dsub+0x660>)
    5e02:	e5b9      	b.n	5978 <__aeabi_dsub+0x60>
    5e04:	430c      	orrs	r4, r1
    5e06:	1e61      	subs	r1, r4, #1
    5e08:	418c      	sbcs	r4, r1
    5e0a:	b2e4      	uxtb	r4, r4
    5e0c:	2100      	movs	r1, #0
    5e0e:	e761      	b.n	5cd4 <__aeabi_dsub+0x3bc>
    5e10:	1c05      	adds	r5, r0, #0
    5e12:	2100      	movs	r1, #0
    5e14:	2400      	movs	r4, #0
    5e16:	e640      	b.n	5a9a <__aeabi_dsub+0x182>
    5e18:	4d57      	ldr	r5, [pc, #348]	; (5f78 <__aeabi_dsub+0x660>)
    5e1a:	42a8      	cmp	r0, r5
    5e1c:	d053      	beq.n	5ec6 <__aeabi_dsub+0x5ae>
    5e1e:	4255      	negs	r5, r2
    5e20:	2280      	movs	r2, #128	; 0x80
    5e22:	0416      	lsls	r6, r2, #16
    5e24:	4331      	orrs	r1, r6
    5e26:	2d38      	cmp	r5, #56	; 0x38
    5e28:	dc7b      	bgt.n	5f22 <__aeabi_dsub+0x60a>
    5e2a:	2d1f      	cmp	r5, #31
    5e2c:	dd00      	ble.n	5e30 <__aeabi_dsub+0x518>
    5e2e:	e08c      	b.n	5f4a <__aeabi_dsub+0x632>
    5e30:	2220      	movs	r2, #32
    5e32:	1b56      	subs	r6, r2, r5
    5e34:	1c0a      	adds	r2, r1, #0
    5e36:	46b4      	mov	ip, r6
    5e38:	40b2      	lsls	r2, r6
    5e3a:	1c26      	adds	r6, r4, #0
    5e3c:	40ee      	lsrs	r6, r5
    5e3e:	4332      	orrs	r2, r6
    5e40:	4690      	mov	r8, r2
    5e42:	4662      	mov	r2, ip
    5e44:	4094      	lsls	r4, r2
    5e46:	1e66      	subs	r6, r4, #1
    5e48:	41b4      	sbcs	r4, r6
    5e4a:	4642      	mov	r2, r8
    5e4c:	4314      	orrs	r4, r2
    5e4e:	40e9      	lsrs	r1, r5
    5e50:	445c      	add	r4, fp
    5e52:	455c      	cmp	r4, fp
    5e54:	4192      	sbcs	r2, r2
    5e56:	18cb      	adds	r3, r1, r3
    5e58:	4252      	negs	r2, r2
    5e5a:	1899      	adds	r1, r3, r2
    5e5c:	1c05      	adds	r5, r0, #0
    5e5e:	e65d      	b.n	5b1c <__aeabi_dsub+0x204>
    5e60:	4658      	mov	r0, fp
    5e62:	4318      	orrs	r0, r3
    5e64:	d100      	bne.n	5e68 <__aeabi_dsub+0x550>
    5e66:	e587      	b.n	5978 <__aeabi_dsub+0x60>
    5e68:	465e      	mov	r6, fp
    5e6a:	1ba7      	subs	r7, r4, r6
    5e6c:	42bc      	cmp	r4, r7
    5e6e:	4192      	sbcs	r2, r2
    5e70:	1ac8      	subs	r0, r1, r3
    5e72:	4252      	negs	r2, r2
    5e74:	1a80      	subs	r0, r0, r2
    5e76:	0206      	lsls	r6, r0, #8
    5e78:	d560      	bpl.n	5f3c <__aeabi_dsub+0x624>
    5e7a:	4658      	mov	r0, fp
    5e7c:	1b04      	subs	r4, r0, r4
    5e7e:	45a3      	cmp	fp, r4
    5e80:	4192      	sbcs	r2, r2
    5e82:	1a59      	subs	r1, r3, r1
    5e84:	4252      	negs	r2, r2
    5e86:	1a89      	subs	r1, r1, r2
    5e88:	46e2      	mov	sl, ip
    5e8a:	e575      	b.n	5978 <__aeabi_dsub+0x60>
    5e8c:	4658      	mov	r0, fp
    5e8e:	4318      	orrs	r0, r3
    5e90:	d033      	beq.n	5efa <__aeabi_dsub+0x5e2>
    5e92:	0748      	lsls	r0, r1, #29
    5e94:	08e4      	lsrs	r4, r4, #3
    5e96:	4304      	orrs	r4, r0
    5e98:	2080      	movs	r0, #128	; 0x80
    5e9a:	08c9      	lsrs	r1, r1, #3
    5e9c:	0300      	lsls	r0, r0, #12
    5e9e:	4201      	tst	r1, r0
    5ea0:	d008      	beq.n	5eb4 <__aeabi_dsub+0x59c>
    5ea2:	08dd      	lsrs	r5, r3, #3
    5ea4:	4205      	tst	r5, r0
    5ea6:	d105      	bne.n	5eb4 <__aeabi_dsub+0x59c>
    5ea8:	4659      	mov	r1, fp
    5eaa:	08ca      	lsrs	r2, r1, #3
    5eac:	075c      	lsls	r4, r3, #29
    5eae:	4314      	orrs	r4, r2
    5eb0:	1c29      	adds	r1, r5, #0
    5eb2:	46e2      	mov	sl, ip
    5eb4:	0f63      	lsrs	r3, r4, #29
    5eb6:	00c9      	lsls	r1, r1, #3
    5eb8:	4319      	orrs	r1, r3
    5eba:	00e4      	lsls	r4, r4, #3
    5ebc:	4d2e      	ldr	r5, [pc, #184]	; (5f78 <__aeabi_dsub+0x660>)
    5ebe:	e55b      	b.n	5978 <__aeabi_dsub+0x60>
    5ec0:	4a2d      	ldr	r2, [pc, #180]	; (5f78 <__aeabi_dsub+0x660>)
    5ec2:	4290      	cmp	r0, r2
    5ec4:	d1af      	bne.n	5e26 <__aeabi_dsub+0x50e>
    5ec6:	1c19      	adds	r1, r3, #0
    5ec8:	465c      	mov	r4, fp
    5eca:	1c05      	adds	r5, r0, #0
    5ecc:	e554      	b.n	5978 <__aeabi_dsub+0x60>
    5ece:	2800      	cmp	r0, #0
    5ed0:	d030      	beq.n	5f34 <__aeabi_dsub+0x61c>
    5ed2:	4658      	mov	r0, fp
    5ed4:	4318      	orrs	r0, r3
    5ed6:	d010      	beq.n	5efa <__aeabi_dsub+0x5e2>
    5ed8:	2580      	movs	r5, #128	; 0x80
    5eda:	0748      	lsls	r0, r1, #29
    5edc:	08e4      	lsrs	r4, r4, #3
    5ede:	08c9      	lsrs	r1, r1, #3
    5ee0:	032d      	lsls	r5, r5, #12
    5ee2:	4304      	orrs	r4, r0
    5ee4:	4229      	tst	r1, r5
    5ee6:	d0e5      	beq.n	5eb4 <__aeabi_dsub+0x59c>
    5ee8:	08d8      	lsrs	r0, r3, #3
    5eea:	4228      	tst	r0, r5
    5eec:	d1e2      	bne.n	5eb4 <__aeabi_dsub+0x59c>
    5eee:	465d      	mov	r5, fp
    5ef0:	08ea      	lsrs	r2, r5, #3
    5ef2:	075c      	lsls	r4, r3, #29
    5ef4:	4314      	orrs	r4, r2
    5ef6:	1c01      	adds	r1, r0, #0
    5ef8:	e7dc      	b.n	5eb4 <__aeabi_dsub+0x59c>
    5efa:	4d1f      	ldr	r5, [pc, #124]	; (5f78 <__aeabi_dsub+0x660>)
    5efc:	e53c      	b.n	5978 <__aeabi_dsub+0x60>
    5efe:	2300      	movs	r3, #0
    5f00:	e755      	b.n	5dae <__aeabi_dsub+0x496>
    5f02:	1c3d      	adds	r5, r7, #0
    5f04:	3d20      	subs	r5, #32
    5f06:	1c0e      	adds	r6, r1, #0
    5f08:	40ee      	lsrs	r6, r5
    5f0a:	1c35      	adds	r5, r6, #0
    5f0c:	2f20      	cmp	r7, #32
    5f0e:	d02e      	beq.n	5f6e <__aeabi_dsub+0x656>
    5f10:	2640      	movs	r6, #64	; 0x40
    5f12:	1bf7      	subs	r7, r6, r7
    5f14:	40b9      	lsls	r1, r7
    5f16:	430c      	orrs	r4, r1
    5f18:	1e61      	subs	r1, r4, #1
    5f1a:	418c      	sbcs	r4, r1
    5f1c:	432c      	orrs	r4, r5
    5f1e:	2100      	movs	r1, #0
    5f20:	e6d8      	b.n	5cd4 <__aeabi_dsub+0x3bc>
    5f22:	430c      	orrs	r4, r1
    5f24:	1e61      	subs	r1, r4, #1
    5f26:	418c      	sbcs	r4, r1
    5f28:	b2e4      	uxtb	r4, r4
    5f2a:	2100      	movs	r1, #0
    5f2c:	e790      	b.n	5e50 <__aeabi_dsub+0x538>
    5f2e:	1c19      	adds	r1, r3, #0
    5f30:	465c      	mov	r4, fp
    5f32:	e521      	b.n	5978 <__aeabi_dsub+0x60>
    5f34:	1c19      	adds	r1, r3, #0
    5f36:	465c      	mov	r4, fp
    5f38:	4d0f      	ldr	r5, [pc, #60]	; (5f78 <__aeabi_dsub+0x660>)
    5f3a:	e51d      	b.n	5978 <__aeabi_dsub+0x60>
    5f3c:	1c03      	adds	r3, r0, #0
    5f3e:	433b      	orrs	r3, r7
    5f40:	d100      	bne.n	5f44 <__aeabi_dsub+0x62c>
    5f42:	e724      	b.n	5d8e <__aeabi_dsub+0x476>
    5f44:	1c01      	adds	r1, r0, #0
    5f46:	1c3c      	adds	r4, r7, #0
    5f48:	e516      	b.n	5978 <__aeabi_dsub+0x60>
    5f4a:	2620      	movs	r6, #32
    5f4c:	4276      	negs	r6, r6
    5f4e:	1976      	adds	r6, r6, r5
    5f50:	1c0a      	adds	r2, r1, #0
    5f52:	40f2      	lsrs	r2, r6
    5f54:	4690      	mov	r8, r2
    5f56:	2d20      	cmp	r5, #32
    5f58:	d00b      	beq.n	5f72 <__aeabi_dsub+0x65a>
    5f5a:	2640      	movs	r6, #64	; 0x40
    5f5c:	1b75      	subs	r5, r6, r5
    5f5e:	40a9      	lsls	r1, r5
    5f60:	430c      	orrs	r4, r1
    5f62:	1e61      	subs	r1, r4, #1
    5f64:	418c      	sbcs	r4, r1
    5f66:	4645      	mov	r5, r8
    5f68:	432c      	orrs	r4, r5
    5f6a:	2100      	movs	r1, #0
    5f6c:	e770      	b.n	5e50 <__aeabi_dsub+0x538>
    5f6e:	2100      	movs	r1, #0
    5f70:	e7d1      	b.n	5f16 <__aeabi_dsub+0x5fe>
    5f72:	2100      	movs	r1, #0
    5f74:	e7f4      	b.n	5f60 <__aeabi_dsub+0x648>
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	000007ff 	.word	0x000007ff
    5f7c:	ff7fffff 	.word	0xff7fffff

00005f80 <__aeabi_d2iz>:
    5f80:	b570      	push	{r4, r5, r6, lr}
    5f82:	1c0b      	adds	r3, r1, #0
    5f84:	4c12      	ldr	r4, [pc, #72]	; (5fd0 <__aeabi_d2iz+0x50>)
    5f86:	0309      	lsls	r1, r1, #12
    5f88:	0b0e      	lsrs	r6, r1, #12
    5f8a:	0059      	lsls	r1, r3, #1
    5f8c:	1c02      	adds	r2, r0, #0
    5f8e:	0d49      	lsrs	r1, r1, #21
    5f90:	0fdd      	lsrs	r5, r3, #31
    5f92:	2000      	movs	r0, #0
    5f94:	42a1      	cmp	r1, r4
    5f96:	dd11      	ble.n	5fbc <__aeabi_d2iz+0x3c>
    5f98:	480e      	ldr	r0, [pc, #56]	; (5fd4 <__aeabi_d2iz+0x54>)
    5f9a:	4281      	cmp	r1, r0
    5f9c:	dc0f      	bgt.n	5fbe <__aeabi_d2iz+0x3e>
    5f9e:	2080      	movs	r0, #128	; 0x80
    5fa0:	0340      	lsls	r0, r0, #13
    5fa2:	4306      	orrs	r6, r0
    5fa4:	480c      	ldr	r0, [pc, #48]	; (5fd8 <__aeabi_d2iz+0x58>)
    5fa6:	1a40      	subs	r0, r0, r1
    5fa8:	281f      	cmp	r0, #31
    5faa:	dd0b      	ble.n	5fc4 <__aeabi_d2iz+0x44>
    5fac:	4a0b      	ldr	r2, [pc, #44]	; (5fdc <__aeabi_d2iz+0x5c>)
    5fae:	1a52      	subs	r2, r2, r1
    5fb0:	40d6      	lsrs	r6, r2
    5fb2:	1c32      	adds	r2, r6, #0
    5fb4:	4250      	negs	r0, r2
    5fb6:	2d00      	cmp	r5, #0
    5fb8:	d100      	bne.n	5fbc <__aeabi_d2iz+0x3c>
    5fba:	1c10      	adds	r0, r2, #0
    5fbc:	bd70      	pop	{r4, r5, r6, pc}
    5fbe:	4b08      	ldr	r3, [pc, #32]	; (5fe0 <__aeabi_d2iz+0x60>)
    5fc0:	18e8      	adds	r0, r5, r3
    5fc2:	e7fb      	b.n	5fbc <__aeabi_d2iz+0x3c>
    5fc4:	4b07      	ldr	r3, [pc, #28]	; (5fe4 <__aeabi_d2iz+0x64>)
    5fc6:	40c2      	lsrs	r2, r0
    5fc8:	18c9      	adds	r1, r1, r3
    5fca:	408e      	lsls	r6, r1
    5fcc:	4332      	orrs	r2, r6
    5fce:	e7f1      	b.n	5fb4 <__aeabi_d2iz+0x34>
    5fd0:	000003fe 	.word	0x000003fe
    5fd4:	0000041d 	.word	0x0000041d
    5fd8:	00000433 	.word	0x00000433
    5fdc:	00000413 	.word	0x00000413
    5fe0:	7fffffff 	.word	0x7fffffff
    5fe4:	fffffbed 	.word	0xfffffbed

00005fe8 <__aeabi_i2d>:
    5fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fea:	1e04      	subs	r4, r0, #0
    5fec:	d031      	beq.n	6052 <__aeabi_i2d+0x6a>
    5fee:	0fc7      	lsrs	r7, r0, #31
    5ff0:	d000      	beq.n	5ff4 <__aeabi_i2d+0xc>
    5ff2:	4244      	negs	r4, r0
    5ff4:	1c20      	adds	r0, r4, #0
    5ff6:	f000 f947 	bl	6288 <__clzsi2>
    5ffa:	4d18      	ldr	r5, [pc, #96]	; (605c <__aeabi_i2d+0x74>)
    5ffc:	1a2d      	subs	r5, r5, r0
    5ffe:	280a      	cmp	r0, #10
    6000:	dd19      	ble.n	6036 <__aeabi_i2d+0x4e>
    6002:	380b      	subs	r0, #11
    6004:	4084      	lsls	r4, r0
    6006:	0324      	lsls	r4, r4, #12
    6008:	056d      	lsls	r5, r5, #21
    600a:	0b24      	lsrs	r4, r4, #12
    600c:	0d6d      	lsrs	r5, r5, #21
    600e:	1c3a      	adds	r2, r7, #0
    6010:	2600      	movs	r6, #0
    6012:	2000      	movs	r0, #0
    6014:	2100      	movs	r1, #0
    6016:	0d0b      	lsrs	r3, r1, #20
    6018:	0324      	lsls	r4, r4, #12
    601a:	0b24      	lsrs	r4, r4, #12
    601c:	051b      	lsls	r3, r3, #20
    601e:	4323      	orrs	r3, r4
    6020:	4c0f      	ldr	r4, [pc, #60]	; (6060 <__aeabi_i2d+0x78>)
    6022:	052d      	lsls	r5, r5, #20
    6024:	401c      	ands	r4, r3
    6026:	432c      	orrs	r4, r5
    6028:	0064      	lsls	r4, r4, #1
    602a:	0864      	lsrs	r4, r4, #1
    602c:	07d3      	lsls	r3, r2, #31
    602e:	1c21      	adds	r1, r4, #0
    6030:	1c30      	adds	r0, r6, #0
    6032:	4319      	orrs	r1, r3
    6034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6036:	1c06      	adds	r6, r0, #0
    6038:	3615      	adds	r6, #21
    603a:	1c23      	adds	r3, r4, #0
    603c:	40b3      	lsls	r3, r6
    603e:	1c1e      	adds	r6, r3, #0
    6040:	230b      	movs	r3, #11
    6042:	1a18      	subs	r0, r3, r0
    6044:	40c4      	lsrs	r4, r0
    6046:	0324      	lsls	r4, r4, #12
    6048:	056d      	lsls	r5, r5, #21
    604a:	0b24      	lsrs	r4, r4, #12
    604c:	0d6d      	lsrs	r5, r5, #21
    604e:	1c3a      	adds	r2, r7, #0
    6050:	e7df      	b.n	6012 <__aeabi_i2d+0x2a>
    6052:	2200      	movs	r2, #0
    6054:	2500      	movs	r5, #0
    6056:	2400      	movs	r4, #0
    6058:	2600      	movs	r6, #0
    605a:	e7da      	b.n	6012 <__aeabi_i2d+0x2a>
    605c:	0000041e 	.word	0x0000041e
    6060:	800fffff 	.word	0x800fffff

00006064 <__aeabi_ui2d>:
    6064:	b510      	push	{r4, lr}
    6066:	1e04      	subs	r4, r0, #0
    6068:	d028      	beq.n	60bc <__aeabi_ui2d+0x58>
    606a:	f000 f90d 	bl	6288 <__clzsi2>
    606e:	4a15      	ldr	r2, [pc, #84]	; (60c4 <__aeabi_ui2d+0x60>)
    6070:	1a12      	subs	r2, r2, r0
    6072:	280a      	cmp	r0, #10
    6074:	dd15      	ble.n	60a2 <__aeabi_ui2d+0x3e>
    6076:	380b      	subs	r0, #11
    6078:	4084      	lsls	r4, r0
    607a:	0324      	lsls	r4, r4, #12
    607c:	0552      	lsls	r2, r2, #21
    607e:	0b24      	lsrs	r4, r4, #12
    6080:	0d52      	lsrs	r2, r2, #21
    6082:	2300      	movs	r3, #0
    6084:	2000      	movs	r0, #0
    6086:	2100      	movs	r1, #0
    6088:	0324      	lsls	r4, r4, #12
    608a:	1c18      	adds	r0, r3, #0
    608c:	0d0b      	lsrs	r3, r1, #20
    608e:	0b24      	lsrs	r4, r4, #12
    6090:	051b      	lsls	r3, r3, #20
    6092:	4323      	orrs	r3, r4
    6094:	4c0c      	ldr	r4, [pc, #48]	; (60c8 <__aeabi_ui2d+0x64>)
    6096:	0512      	lsls	r2, r2, #20
    6098:	401c      	ands	r4, r3
    609a:	4314      	orrs	r4, r2
    609c:	0064      	lsls	r4, r4, #1
    609e:	0861      	lsrs	r1, r4, #1
    60a0:	bd10      	pop	{r4, pc}
    60a2:	1c03      	adds	r3, r0, #0
    60a4:	3315      	adds	r3, #21
    60a6:	1c21      	adds	r1, r4, #0
    60a8:	4099      	lsls	r1, r3
    60aa:	1c0b      	adds	r3, r1, #0
    60ac:	210b      	movs	r1, #11
    60ae:	1a08      	subs	r0, r1, r0
    60b0:	40c4      	lsrs	r4, r0
    60b2:	0324      	lsls	r4, r4, #12
    60b4:	0552      	lsls	r2, r2, #21
    60b6:	0b24      	lsrs	r4, r4, #12
    60b8:	0d52      	lsrs	r2, r2, #21
    60ba:	e7e3      	b.n	6084 <__aeabi_ui2d+0x20>
    60bc:	2200      	movs	r2, #0
    60be:	2400      	movs	r4, #0
    60c0:	2300      	movs	r3, #0
    60c2:	e7df      	b.n	6084 <__aeabi_ui2d+0x20>
    60c4:	0000041e 	.word	0x0000041e
    60c8:	800fffff 	.word	0x800fffff

000060cc <__aeabi_f2d>:
    60cc:	0043      	lsls	r3, r0, #1
    60ce:	0e1b      	lsrs	r3, r3, #24
    60d0:	1c5a      	adds	r2, r3, #1
    60d2:	0241      	lsls	r1, r0, #9
    60d4:	b2d2      	uxtb	r2, r2
    60d6:	b570      	push	{r4, r5, r6, lr}
    60d8:	0a4c      	lsrs	r4, r1, #9
    60da:	0fc5      	lsrs	r5, r0, #31
    60dc:	2a01      	cmp	r2, #1
    60de:	dd17      	ble.n	6110 <__aeabi_f2d+0x44>
    60e0:	22e0      	movs	r2, #224	; 0xe0
    60e2:	0092      	lsls	r2, r2, #2
    60e4:	0764      	lsls	r4, r4, #29
    60e6:	0b09      	lsrs	r1, r1, #12
    60e8:	1898      	adds	r0, r3, r2
    60ea:	2200      	movs	r2, #0
    60ec:	2300      	movs	r3, #0
    60ee:	0d1e      	lsrs	r6, r3, #20
    60f0:	1c22      	adds	r2, r4, #0
    60f2:	0534      	lsls	r4, r6, #20
    60f4:	430c      	orrs	r4, r1
    60f6:	491b      	ldr	r1, [pc, #108]	; (6164 <__aeabi_f2d+0x98>)
    60f8:	0540      	lsls	r0, r0, #21
    60fa:	0840      	lsrs	r0, r0, #1
    60fc:	4021      	ands	r1, r4
    60fe:	4301      	orrs	r1, r0
    6100:	0049      	lsls	r1, r1, #1
    6102:	0849      	lsrs	r1, r1, #1
    6104:	07ed      	lsls	r5, r5, #31
    6106:	1c0b      	adds	r3, r1, #0
    6108:	432b      	orrs	r3, r5
    610a:	1c10      	adds	r0, r2, #0
    610c:	1c19      	adds	r1, r3, #0
    610e:	bd70      	pop	{r4, r5, r6, pc}
    6110:	2b00      	cmp	r3, #0
    6112:	d115      	bne.n	6140 <__aeabi_f2d+0x74>
    6114:	2c00      	cmp	r4, #0
    6116:	d01c      	beq.n	6152 <__aeabi_f2d+0x86>
    6118:	1c20      	adds	r0, r4, #0
    611a:	f000 f8b5 	bl	6288 <__clzsi2>
    611e:	280a      	cmp	r0, #10
    6120:	dc1a      	bgt.n	6158 <__aeabi_f2d+0x8c>
    6122:	210b      	movs	r1, #11
    6124:	1a09      	subs	r1, r1, r0
    6126:	1c23      	adds	r3, r4, #0
    6128:	40cb      	lsrs	r3, r1
    612a:	1c19      	adds	r1, r3, #0
    612c:	1c03      	adds	r3, r0, #0
    612e:	3315      	adds	r3, #21
    6130:	409c      	lsls	r4, r3
    6132:	4b0d      	ldr	r3, [pc, #52]	; (6168 <__aeabi_f2d+0x9c>)
    6134:	0309      	lsls	r1, r1, #12
    6136:	1a18      	subs	r0, r3, r0
    6138:	0540      	lsls	r0, r0, #21
    613a:	0b09      	lsrs	r1, r1, #12
    613c:	0d40      	lsrs	r0, r0, #21
    613e:	e7d4      	b.n	60ea <__aeabi_f2d+0x1e>
    6140:	2c00      	cmp	r4, #0
    6142:	d003      	beq.n	614c <__aeabi_f2d+0x80>
    6144:	0764      	lsls	r4, r4, #29
    6146:	0b09      	lsrs	r1, r1, #12
    6148:	4808      	ldr	r0, [pc, #32]	; (616c <__aeabi_f2d+0xa0>)
    614a:	e7ce      	b.n	60ea <__aeabi_f2d+0x1e>
    614c:	4807      	ldr	r0, [pc, #28]	; (616c <__aeabi_f2d+0xa0>)
    614e:	2100      	movs	r1, #0
    6150:	e7cb      	b.n	60ea <__aeabi_f2d+0x1e>
    6152:	2000      	movs	r0, #0
    6154:	2100      	movs	r1, #0
    6156:	e7c8      	b.n	60ea <__aeabi_f2d+0x1e>
    6158:	1c01      	adds	r1, r0, #0
    615a:	390b      	subs	r1, #11
    615c:	408c      	lsls	r4, r1
    615e:	1c21      	adds	r1, r4, #0
    6160:	2400      	movs	r4, #0
    6162:	e7e6      	b.n	6132 <__aeabi_f2d+0x66>
    6164:	800fffff 	.word	0x800fffff
    6168:	00000389 	.word	0x00000389
    616c:	000007ff 	.word	0x000007ff

00006170 <__aeabi_d2f>:
    6170:	b5f0      	push	{r4, r5, r6, r7, lr}
    6172:	004b      	lsls	r3, r1, #1
    6174:	030d      	lsls	r5, r1, #12
    6176:	0f42      	lsrs	r2, r0, #29
    6178:	0d5b      	lsrs	r3, r3, #21
    617a:	0a6d      	lsrs	r5, r5, #9
    617c:	4315      	orrs	r5, r2
    617e:	1c5a      	adds	r2, r3, #1
    6180:	0552      	lsls	r2, r2, #21
    6182:	0fcc      	lsrs	r4, r1, #31
    6184:	00c6      	lsls	r6, r0, #3
    6186:	0d52      	lsrs	r2, r2, #21
    6188:	2a01      	cmp	r2, #1
    618a:	dd27      	ble.n	61dc <__aeabi_d2f+0x6c>
    618c:	4f39      	ldr	r7, [pc, #228]	; (6274 <__aeabi_d2f+0x104>)
    618e:	19da      	adds	r2, r3, r7
    6190:	2afe      	cmp	r2, #254	; 0xfe
    6192:	dc1a      	bgt.n	61ca <__aeabi_d2f+0x5a>
    6194:	2a00      	cmp	r2, #0
    6196:	dd35      	ble.n	6204 <__aeabi_d2f+0x94>
    6198:	0180      	lsls	r0, r0, #6
    619a:	00ed      	lsls	r5, r5, #3
    619c:	1e43      	subs	r3, r0, #1
    619e:	4198      	sbcs	r0, r3
    61a0:	4328      	orrs	r0, r5
    61a2:	0f76      	lsrs	r6, r6, #29
    61a4:	4330      	orrs	r0, r6
    61a6:	0743      	lsls	r3, r0, #29
    61a8:	d004      	beq.n	61b4 <__aeabi_d2f+0x44>
    61aa:	230f      	movs	r3, #15
    61ac:	4003      	ands	r3, r0
    61ae:	2b04      	cmp	r3, #4
    61b0:	d000      	beq.n	61b4 <__aeabi_d2f+0x44>
    61b2:	3004      	adds	r0, #4
    61b4:	2180      	movs	r1, #128	; 0x80
    61b6:	04c9      	lsls	r1, r1, #19
    61b8:	4001      	ands	r1, r0
    61ba:	d027      	beq.n	620c <__aeabi_d2f+0x9c>
    61bc:	3201      	adds	r2, #1
    61be:	2aff      	cmp	r2, #255	; 0xff
    61c0:	d01d      	beq.n	61fe <__aeabi_d2f+0x8e>
    61c2:	0183      	lsls	r3, r0, #6
    61c4:	0a5b      	lsrs	r3, r3, #9
    61c6:	b2d1      	uxtb	r1, r2
    61c8:	e001      	b.n	61ce <__aeabi_d2f+0x5e>
    61ca:	21ff      	movs	r1, #255	; 0xff
    61cc:	2300      	movs	r3, #0
    61ce:	0258      	lsls	r0, r3, #9
    61d0:	05c9      	lsls	r1, r1, #23
    61d2:	0a40      	lsrs	r0, r0, #9
    61d4:	07e4      	lsls	r4, r4, #31
    61d6:	4308      	orrs	r0, r1
    61d8:	4320      	orrs	r0, r4
    61da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61dc:	2b00      	cmp	r3, #0
    61de:	d106      	bne.n	61ee <__aeabi_d2f+0x7e>
    61e0:	4335      	orrs	r5, r6
    61e2:	d111      	bne.n	6208 <__aeabi_d2f+0x98>
    61e4:	2100      	movs	r1, #0
    61e6:	2000      	movs	r0, #0
    61e8:	0243      	lsls	r3, r0, #9
    61ea:	0a5b      	lsrs	r3, r3, #9
    61ec:	e7ef      	b.n	61ce <__aeabi_d2f+0x5e>
    61ee:	432e      	orrs	r6, r5
    61f0:	d0eb      	beq.n	61ca <__aeabi_d2f+0x5a>
    61f2:	2080      	movs	r0, #128	; 0x80
    61f4:	00ed      	lsls	r5, r5, #3
    61f6:	0480      	lsls	r0, r0, #18
    61f8:	4328      	orrs	r0, r5
    61fa:	22ff      	movs	r2, #255	; 0xff
    61fc:	e7d3      	b.n	61a6 <__aeabi_d2f+0x36>
    61fe:	21ff      	movs	r1, #255	; 0xff
    6200:	2300      	movs	r3, #0
    6202:	e7e4      	b.n	61ce <__aeabi_d2f+0x5e>
    6204:	3217      	adds	r2, #23
    6206:	da0d      	bge.n	6224 <__aeabi_d2f+0xb4>
    6208:	2005      	movs	r0, #5
    620a:	2200      	movs	r2, #0
    620c:	08c0      	lsrs	r0, r0, #3
    620e:	b2d1      	uxtb	r1, r2
    6210:	2aff      	cmp	r2, #255	; 0xff
    6212:	d1e9      	bne.n	61e8 <__aeabi_d2f+0x78>
    6214:	2800      	cmp	r0, #0
    6216:	d0d9      	beq.n	61cc <__aeabi_d2f+0x5c>
    6218:	2380      	movs	r3, #128	; 0x80
    621a:	03db      	lsls	r3, r3, #15
    621c:	4303      	orrs	r3, r0
    621e:	025b      	lsls	r3, r3, #9
    6220:	0a5b      	lsrs	r3, r3, #9
    6222:	e7d4      	b.n	61ce <__aeabi_d2f+0x5e>
    6224:	2280      	movs	r2, #128	; 0x80
    6226:	4914      	ldr	r1, [pc, #80]	; (6278 <__aeabi_d2f+0x108>)
    6228:	0412      	lsls	r2, r2, #16
    622a:	4315      	orrs	r5, r2
    622c:	1ac9      	subs	r1, r1, r3
    622e:	291f      	cmp	r1, #31
    6230:	dc0d      	bgt.n	624e <__aeabi_d2f+0xde>
    6232:	4a12      	ldr	r2, [pc, #72]	; (627c <__aeabi_d2f+0x10c>)
    6234:	1c37      	adds	r7, r6, #0
    6236:	189b      	adds	r3, r3, r2
    6238:	1c28      	adds	r0, r5, #0
    623a:	409f      	lsls	r7, r3
    623c:	4098      	lsls	r0, r3
    623e:	1c3b      	adds	r3, r7, #0
    6240:	1e5a      	subs	r2, r3, #1
    6242:	4193      	sbcs	r3, r2
    6244:	4318      	orrs	r0, r3
    6246:	40ce      	lsrs	r6, r1
    6248:	4330      	orrs	r0, r6
    624a:	2200      	movs	r2, #0
    624c:	e7ab      	b.n	61a6 <__aeabi_d2f+0x36>
    624e:	4f0c      	ldr	r7, [pc, #48]	; (6280 <__aeabi_d2f+0x110>)
    6250:	1c2a      	adds	r2, r5, #0
    6252:	1aff      	subs	r7, r7, r3
    6254:	40fa      	lsrs	r2, r7
    6256:	1c17      	adds	r7, r2, #0
    6258:	2920      	cmp	r1, #32
    625a:	d009      	beq.n	6270 <__aeabi_d2f+0x100>
    625c:	4a09      	ldr	r2, [pc, #36]	; (6284 <__aeabi_d2f+0x114>)
    625e:	1898      	adds	r0, r3, r2
    6260:	4085      	lsls	r5, r0
    6262:	1c28      	adds	r0, r5, #0
    6264:	4330      	orrs	r0, r6
    6266:	1e46      	subs	r6, r0, #1
    6268:	41b0      	sbcs	r0, r6
    626a:	4338      	orrs	r0, r7
    626c:	2200      	movs	r2, #0
    626e:	e79a      	b.n	61a6 <__aeabi_d2f+0x36>
    6270:	2000      	movs	r0, #0
    6272:	e7f7      	b.n	6264 <__aeabi_d2f+0xf4>
    6274:	fffffc80 	.word	0xfffffc80
    6278:	0000039e 	.word	0x0000039e
    627c:	fffffc82 	.word	0xfffffc82
    6280:	0000037e 	.word	0x0000037e
    6284:	fffffca2 	.word	0xfffffca2

00006288 <__clzsi2>:
    6288:	211c      	movs	r1, #28
    628a:	2301      	movs	r3, #1
    628c:	041b      	lsls	r3, r3, #16
    628e:	4298      	cmp	r0, r3
    6290:	d301      	bcc.n	6296 <__clzsi2+0xe>
    6292:	0c00      	lsrs	r0, r0, #16
    6294:	3910      	subs	r1, #16
    6296:	0a1b      	lsrs	r3, r3, #8
    6298:	4298      	cmp	r0, r3
    629a:	d301      	bcc.n	62a0 <__clzsi2+0x18>
    629c:	0a00      	lsrs	r0, r0, #8
    629e:	3908      	subs	r1, #8
    62a0:	091b      	lsrs	r3, r3, #4
    62a2:	4298      	cmp	r0, r3
    62a4:	d301      	bcc.n	62aa <__clzsi2+0x22>
    62a6:	0900      	lsrs	r0, r0, #4
    62a8:	3904      	subs	r1, #4
    62aa:	a202      	add	r2, pc, #8	; (adr r2, 62b4 <__clzsi2+0x2c>)
    62ac:	5c10      	ldrb	r0, [r2, r0]
    62ae:	1840      	adds	r0, r0, r1
    62b0:	4770      	bx	lr
    62b2:	46c0      	nop			; (mov r8, r8)
    62b4:	02020304 	.word	0x02020304
    62b8:	01010101 	.word	0x01010101
	...
    62c4:	42000800 	.word	0x42000800
    62c8:	42000c00 	.word	0x42000c00
    62cc:	42001000 	.word	0x42001000
    62d0:	42001400 	.word	0x42001400
    62d4:	42001800 	.word	0x42001800
    62d8:	42001c00 	.word	0x42001c00
    62dc:	0c0b0a09 	.word	0x0c0b0a09
    62e0:	00000e0d 	.word	0x00000e0d
    62e4:	00000e2e 	.word	0x00000e2e
    62e8:	00001074 	.word	0x00001074
    62ec:	00001074 	.word	0x00001074
    62f0:	00001074 	.word	0x00001074
    62f4:	00001074 	.word	0x00001074
    62f8:	00001074 	.word	0x00001074
    62fc:	00001074 	.word	0x00001074
    6300:	00001074 	.word	0x00001074
    6304:	00001074 	.word	0x00001074
    6308:	00001074 	.word	0x00001074
    630c:	00001074 	.word	0x00001074
    6310:	00001074 	.word	0x00001074
    6314:	00001074 	.word	0x00001074
    6318:	00001074 	.word	0x00001074
    631c:	00001074 	.word	0x00001074
    6320:	00001074 	.word	0x00001074
    6324:	00000e16 	.word	0x00000e16
    6328:	00001074 	.word	0x00001074
    632c:	00001074 	.word	0x00001074
    6330:	00001074 	.word	0x00001074
    6334:	00001074 	.word	0x00001074
    6338:	00001074 	.word	0x00001074
    633c:	00001074 	.word	0x00001074
    6340:	00001074 	.word	0x00001074
    6344:	00001074 	.word	0x00001074
    6348:	00001074 	.word	0x00001074
    634c:	00001074 	.word	0x00001074
    6350:	00001074 	.word	0x00001074
    6354:	00001074 	.word	0x00001074
    6358:	00001074 	.word	0x00001074
    635c:	00001074 	.word	0x00001074
    6360:	00001074 	.word	0x00001074
    6364:	00000e26 	.word	0x00000e26
    6368:	00001074 	.word	0x00001074
    636c:	00001074 	.word	0x00001074
    6370:	00001074 	.word	0x00001074
    6374:	00001074 	.word	0x00001074
    6378:	00001074 	.word	0x00001074
    637c:	00001074 	.word	0x00001074
    6380:	00001074 	.word	0x00001074
    6384:	00001074 	.word	0x00001074
    6388:	00001074 	.word	0x00001074
    638c:	00001074 	.word	0x00001074
    6390:	00001074 	.word	0x00001074
    6394:	00001074 	.word	0x00001074
    6398:	00001074 	.word	0x00001074
    639c:	00001074 	.word	0x00001074
    63a0:	00001074 	.word	0x00001074
    63a4:	00000e1e 	.word	0x00000e1e
    63a8:	00000dfe 	.word	0x00000dfe
    63ac:	00000e36 	.word	0x00000e36
    63b0:	00000e0e 	.word	0x00000e0e
    63b4:	00000e06 	.word	0x00000e06
    63b8:	00000002 	.word	0x00000002
    63bc:	00000003 	.word	0x00000003
    63c0:	00000028 	.word	0x00000028
    63c4:	00000029 	.word	0x00000029
    63c8:	00000004 	.word	0x00000004
    63cc:	00000005 	.word	0x00000005
    63d0:	00000006 	.word	0x00000006
    63d4:	00000007 	.word	0x00000007
    63d8:	00000020 	.word	0x00000020
    63dc:	00000021 	.word	0x00000021
    63e0:	00000022 	.word	0x00000022
    63e4:	00000023 	.word	0x00000023
    63e8:	00000024 	.word	0x00000024
    63ec:	00000025 	.word	0x00000025
    63f0:	00000026 	.word	0x00000026
    63f4:	00000027 	.word	0x00000027
    63f8:	00000008 	.word	0x00000008
    63fc:	00000009 	.word	0x00000009
    6400:	0000000a 	.word	0x0000000a
    6404:	0000000b 	.word	0x0000000b
    6408:	000010c8 	.word	0x000010c8
    640c:	00001124 	.word	0x00001124
    6410:	00001124 	.word	0x00001124
    6414:	000010c2 	.word	0x000010c2
    6418:	000010c2 	.word	0x000010c2
    641c:	000010de 	.word	0x000010de
    6420:	000010ce 	.word	0x000010ce
    6424:	000010e4 	.word	0x000010e4
    6428:	00001112 	.word	0x00001112
    642c:	000011ac 	.word	0x000011ac
    6430:	0000120c 	.word	0x0000120c
    6434:	0000120c 	.word	0x0000120c
    6438:	0000118c 	.word	0x0000118c
    643c:	0000119e 	.word	0x0000119e
    6440:	000011ba 	.word	0x000011ba
    6444:	00001190 	.word	0x00001190
    6448:	000011c8 	.word	0x000011c8
    644c:	000011fc 	.word	0x000011fc
    6450:	00206625 	.word	0x00206625
    6454:	00000043 	.word	0x00000043

00006458 <_global_impure_ptr>:
    6458:	20000004 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    6468:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    6478:	6e616e00 30003000 34333231 38373635     .nan.0.012345678
    6488:	43424139 00464544 33323130 37363534     9ABCDEF.01234567
    6498:	62613938 66656463 666e4900 74696e69     89abcdef.Infinit
    64a8:	614e0079 0000004e                       y.NaN...

000064b0 <__sf_fake_stdin>:
	...

000064d0 <__sf_fake_stdout>:
	...

000064f0 <__sf_fake_stderr>:
	...
    6510:	49534f50 002e0058                       POSIX...

00006518 <__mprec_tens>:
    6518:	00000000 3ff00000 00000000 40240000     .......?......$@
    6528:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    6538:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    6548:	00000000 412e8480 00000000 416312d0     .......A......cA
    6558:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    6568:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    6578:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    6588:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    6598:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    65a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    65b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    65c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    65d8:	79d99db4 44ea7843                       ...yCx.D

000065e0 <__mprec_bigtens>:
    65e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    65f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    6600:	7f73bf3c 75154fdd                       <.s..O.u

00006608 <p05.5281>:
    6608:	00000005 00000019 0000007d 00004d0c     ........}....M..
    6618:	00004ca8 00004cf0 00004bd6 00004cf0     .L...L...K...L..
    6628:	00004ce4 00004cf0 00004bd6 00004ca8     .L...L...K...L..
    6638:	00004ca8 00004ce4 00004bd6 00004bcc     .L...L...K...K..
    6648:	00004bcc 00004bcc 00004f30 000055dc     .K...K..0O...U..
    6658:	000057ca 000057ca 000055bc 000054a6     .W...W...U...T..
    6668:	000054a6 000055ae 000055bc 000054a6     .T...U...U...T..
    6678:	000055ae 000054a6 000055bc 000054a4     .U...T...U...T..
    6688:	000054a4 000054a4 000057d2              .T...T...W..

00006694 <_init>:
    6694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6696:	46c0      	nop			; (mov r8, r8)
    6698:	bcf8      	pop	{r3, r4, r5, r6, r7}
    669a:	bc08      	pop	{r3}
    669c:	469e      	mov	lr, r3
    669e:	4770      	bx	lr

000066a0 <__init_array_start>:
    66a0:	000000d9 	.word	0x000000d9

000066a4 <_fini>:
    66a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66a6:	46c0      	nop			; (mov r8, r8)
    66a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66aa:	bc08      	pop	{r3}
    66ac:	469e      	mov	lr, r3
    66ae:	4770      	bx	lr

000066b0 <__fini_array_start>:
    66b0:	000000b1 	.word	0x000000b1
