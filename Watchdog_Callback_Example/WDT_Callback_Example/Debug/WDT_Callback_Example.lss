
WDT_Callback_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000950  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000950  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000004  00000954  00010004  2**2
                  ALLOC
  3 .stack        00002004  20000044  00000994  00010004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008c6c  00000000  00000000  00010087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000186e  00000000  00000000  00018cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001c5b  00000000  00000000  0001a561  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000290  00000000  00000000  0001c1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f8  00000000  00000000  0001c44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016a8e  00000000  00000000  0001c644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006637  00000000  00000000  000330d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00080e87  00000000  00000000  00039709  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000568  00000000  00000000  000ba590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002048 	.word	0x20002048
   4:	00000785 	.word	0x00000785
   8:	00000781 	.word	0x00000781
   c:	00000781 	.word	0x00000781
	...
  2c:	00000781 	.word	0x00000781
	...
  38:	00000781 	.word	0x00000781
  3c:	00000781 	.word	0x00000781
  40:	00000781 	.word	0x00000781
  44:	00000781 	.word	0x00000781
  48:	00000765 	.word	0x00000765
  4c:	00000781 	.word	0x00000781
  50:	00000781 	.word	0x00000781
  54:	00000781 	.word	0x00000781
  58:	00000781 	.word	0x00000781
  5c:	00000781 	.word	0x00000781
  60:	00000781 	.word	0x00000781
  64:	00000781 	.word	0x00000781
  68:	00000781 	.word	0x00000781
  6c:	00000781 	.word	0x00000781
  70:	00000781 	.word	0x00000781
  74:	00000781 	.word	0x00000781
  78:	00000781 	.word	0x00000781
  7c:	00000781 	.word	0x00000781
  80:	00000781 	.word	0x00000781
  84:	00000781 	.word	0x00000781
  88:	00000781 	.word	0x00000781
  8c:	00000781 	.word	0x00000781
  90:	00000781 	.word	0x00000781
  94:	00000781 	.word	0x00000781
  98:	00000781 	.word	0x00000781
  9c:	00000781 	.word	0x00000781
  a0:	00000781 	.word	0x00000781
  a4:	00000781 	.word	0x00000781
  a8:	00000781 	.word	0x00000781
  ac:	00000781 	.word	0x00000781

000000b0 <__do_global_dtors_aux>:
  b0:	b510      	push	{r4, lr}
  b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
  b4:	7823      	ldrb	r3, [r4, #0]
  b6:	2b00      	cmp	r3, #0
  b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
  ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
  bc:	2b00      	cmp	r3, #0
  be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
  c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
  c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
  c4:	bf00      	nop
  c6:	2301      	movs	r3, #1
  c8:	7023      	strb	r3, [r4, #0]
  ca:	bd10      	pop	{r4, pc}
  cc:	20000004 	.word	0x20000004
  d0:	00000000 	.word	0x00000000
  d4:	00000950 	.word	0x00000950

000000d8 <frame_dummy>:
  d8:	b508      	push	{r3, lr}
  da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
  dc:	2b00      	cmp	r3, #0
  de:	d003      	beq.n	e8 <frame_dummy+0x10>
  e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
  e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
  e4:	e000      	b.n	e8 <frame_dummy+0x10>
  e6:	bf00      	nop
  e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
  ea:	6803      	ldr	r3, [r0, #0]
  ec:	2b00      	cmp	r3, #0
  ee:	d003      	beq.n	f8 <frame_dummy+0x20>
  f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
  f2:	2b00      	cmp	r3, #0
  f4:	d000      	beq.n	f8 <frame_dummy+0x20>
  f6:	4798      	blx	r3
  f8:	bd08      	pop	{r3, pc}
  fa:	46c0      	nop			; (mov r8, r8)
  fc:	00000000 	.word	0x00000000
 100:	00000950 	.word	0x00000950
 104:	20000008 	.word	0x20000008
 108:	00000950 	.word	0x00000950
 10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
 112:	681b      	ldr	r3, [r3, #0]
 114:	2b00      	cmp	r3, #0
 116:	d110      	bne.n	13a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 11c:	2b00      	cmp	r3, #0
 11e:	d109      	bne.n	134 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 120:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 122:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 126:	2200      	movs	r2, #0
 128:	4b07      	ldr	r3, [pc, #28]	; (148 <cpu_irq_enter_critical+0x38>)
 12a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 12c:	2201      	movs	r2, #1
 12e:	4b07      	ldr	r3, [pc, #28]	; (14c <cpu_irq_enter_critical+0x3c>)
 130:	701a      	strb	r2, [r3, #0]
 132:	e002      	b.n	13a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 134:	2200      	movs	r2, #0
 136:	4b05      	ldr	r3, [pc, #20]	; (14c <cpu_irq_enter_critical+0x3c>)
 138:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 13a:	4b02      	ldr	r3, [pc, #8]	; (144 <cpu_irq_enter_critical+0x34>)
 13c:	681a      	ldr	r2, [r3, #0]
 13e:	3201      	adds	r2, #1
 140:	601a      	str	r2, [r3, #0]
}
 142:	4770      	bx	lr
 144:	20000020 	.word	0x20000020
 148:	20000000 	.word	0x20000000
 14c:	20000024 	.word	0x20000024

00000150 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 150:	4b08      	ldr	r3, [pc, #32]	; (174 <cpu_irq_leave_critical+0x24>)
 152:	681a      	ldr	r2, [r3, #0]
 154:	3a01      	subs	r2, #1
 156:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 158:	681b      	ldr	r3, [r3, #0]
 15a:	2b00      	cmp	r3, #0
 15c:	d109      	bne.n	172 <cpu_irq_leave_critical+0x22>
 15e:	4b06      	ldr	r3, [pc, #24]	; (178 <cpu_irq_leave_critical+0x28>)
 160:	781b      	ldrb	r3, [r3, #0]
 162:	2b00      	cmp	r3, #0
 164:	d005      	beq.n	172 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 166:	2201      	movs	r2, #1
 168:	4b04      	ldr	r3, [pc, #16]	; (17c <cpu_irq_leave_critical+0x2c>)
 16a:	701a      	strb	r2, [r3, #0]
 16c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 170:	b662      	cpsie	i
	}
}
 172:	4770      	bx	lr
 174:	20000020 	.word	0x20000020
 178:	20000024 	.word	0x20000024
 17c:	20000000 	.word	0x20000000

00000180 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 180:	b5f0      	push	{r4, r5, r6, r7, lr}
 182:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 184:	ac01      	add	r4, sp, #4
 186:	2501      	movs	r5, #1
 188:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 18a:	2700      	movs	r7, #0
 18c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 18e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 190:	203e      	movs	r0, #62	; 0x3e
 192:	1c21      	adds	r1, r4, #0
 194:	4e06      	ldr	r6, [pc, #24]	; (1b0 <system_board_init+0x30>)
 196:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 198:	2280      	movs	r2, #128	; 0x80
 19a:	05d2      	lsls	r2, r2, #23
 19c:	4b05      	ldr	r3, [pc, #20]	; (1b4 <system_board_init+0x34>)
 19e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 1a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 1a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 1a4:	200f      	movs	r0, #15
 1a6:	1c21      	adds	r1, r4, #0
 1a8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 1aa:	b003      	add	sp, #12
 1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 1ae:	46c0      	nop			; (mov r8, r8)
 1b0:	000001b9 	.word	0x000001b9
 1b4:	41004480 	.word	0x41004480

000001b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 1b8:	b500      	push	{lr}
 1ba:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 1bc:	ab01      	add	r3, sp, #4
 1be:	2280      	movs	r2, #128	; 0x80
 1c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 1c2:	780a      	ldrb	r2, [r1, #0]
 1c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 1c6:	784a      	ldrb	r2, [r1, #1]
 1c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 1ca:	788a      	ldrb	r2, [r1, #2]
 1cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 1ce:	1c19      	adds	r1, r3, #0
 1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <port_pin_set_config+0x20>)
 1d2:	4798      	blx	r3
}
 1d4:	b003      	add	sp, #12
 1d6:	bd00      	pop	{pc}
 1d8:	000005cd 	.word	0x000005cd

000001dc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 1dc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 1de:	4b0c      	ldr	r3, [pc, #48]	; (210 <system_clock_source_osc8m_set_config+0x34>)
 1e0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 1e2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 1e4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 1e6:	7840      	ldrb	r0, [r0, #1]
 1e8:	2201      	movs	r2, #1
 1ea:	4010      	ands	r0, r2
 1ec:	0180      	lsls	r0, r0, #6
 1ee:	2640      	movs	r6, #64	; 0x40
 1f0:	43b4      	bics	r4, r6
 1f2:	4304      	orrs	r4, r0
 1f4:	402a      	ands	r2, r5
 1f6:	01d0      	lsls	r0, r2, #7
 1f8:	2280      	movs	r2, #128	; 0x80
 1fa:	4394      	bics	r4, r2
 1fc:	1c22      	adds	r2, r4, #0
 1fe:	4302      	orrs	r2, r0
 200:	2003      	movs	r0, #3
 202:	4001      	ands	r1, r0
 204:	0209      	lsls	r1, r1, #8
 206:	4803      	ldr	r0, [pc, #12]	; (214 <system_clock_source_osc8m_set_config+0x38>)
 208:	4002      	ands	r2, r0
 20a:	430a      	orrs	r2, r1
 20c:	621a      	str	r2, [r3, #32]
}
 20e:	bd70      	pop	{r4, r5, r6, pc}
 210:	40000800 	.word	0x40000800
 214:	fffffcff 	.word	0xfffffcff

00000218 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 218:	2808      	cmp	r0, #8
 21a:	d843      	bhi.n	2a4 <system_clock_source_enable+0x8c>
 21c:	0080      	lsls	r0, r0, #2
 21e:	4b22      	ldr	r3, [pc, #136]	; (2a8 <system_clock_source_enable+0x90>)
 220:	581b      	ldr	r3, [r3, r0]
 222:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 224:	2000      	movs	r0, #0
 226:	e03e      	b.n	2a6 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 228:	4b20      	ldr	r3, [pc, #128]	; (2ac <system_clock_source_enable+0x94>)
 22a:	6a19      	ldr	r1, [r3, #32]
 22c:	2202      	movs	r2, #2
 22e:	430a      	orrs	r2, r1
 230:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
 232:	2000      	movs	r0, #0
 234:	e037      	b.n	2a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 236:	4b1d      	ldr	r3, [pc, #116]	; (2ac <system_clock_source_enable+0x94>)
 238:	6999      	ldr	r1, [r3, #24]
 23a:	2202      	movs	r2, #2
 23c:	430a      	orrs	r2, r1
 23e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 240:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 242:	e030      	b.n	2a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 244:	4b19      	ldr	r3, [pc, #100]	; (2ac <system_clock_source_enable+0x94>)
 246:	8a19      	ldrh	r1, [r3, #16]
 248:	2202      	movs	r2, #2
 24a:	430a      	orrs	r2, r1
 24c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 24e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 250:	e029      	b.n	2a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 252:	4b16      	ldr	r3, [pc, #88]	; (2ac <system_clock_source_enable+0x94>)
 254:	8a99      	ldrh	r1, [r3, #20]
 256:	2202      	movs	r2, #2
 258:	430a      	orrs	r2, r1
 25a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 25c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 25e:	e022      	b.n	2a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 260:	4b13      	ldr	r3, [pc, #76]	; (2b0 <system_clock_source_enable+0x98>)
 262:	6819      	ldr	r1, [r3, #0]
 264:	2202      	movs	r2, #2
 266:	430a      	orrs	r2, r1
 268:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 26a:	681a      	ldr	r2, [r3, #0]
 26c:	4b11      	ldr	r3, [pc, #68]	; (2b4 <system_clock_source_enable+0x9c>)
 26e:	401a      	ands	r2, r3
 270:	4b0e      	ldr	r3, [pc, #56]	; (2ac <system_clock_source_enable+0x94>)
 272:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 274:	1c19      	adds	r1, r3, #0
 276:	2210      	movs	r2, #16
 278:	68cb      	ldr	r3, [r1, #12]
 27a:	421a      	tst	r2, r3
 27c:	d0fc      	beq.n	278 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 27e:	4a0c      	ldr	r2, [pc, #48]	; (2b0 <system_clock_source_enable+0x98>)
 280:	6891      	ldr	r1, [r2, #8]
 282:	4b0a      	ldr	r3, [pc, #40]	; (2ac <system_clock_source_enable+0x94>)
 284:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 286:	6851      	ldr	r1, [r2, #4]
 288:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 28a:	6812      	ldr	r2, [r2, #0]
 28c:	b292      	uxth	r2, r2
 28e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 290:	2000      	movs	r0, #0
 292:	e008      	b.n	2a6 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 294:	4a05      	ldr	r2, [pc, #20]	; (2ac <system_clock_source_enable+0x94>)
 296:	2344      	movs	r3, #68	; 0x44
 298:	5cd0      	ldrb	r0, [r2, r3]
 29a:	2102      	movs	r1, #2
 29c:	4301      	orrs	r1, r0
 29e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 2a0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
 2a2:	e000      	b.n	2a6 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 2a4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
 2a6:	4770      	bx	lr
 2a8:	0000090c 	.word	0x0000090c
 2ac:	40000800 	.word	0x40000800
 2b0:	20000028 	.word	0x20000028
 2b4:	0000ff7f 	.word	0x0000ff7f

000002b8 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
 2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 2ba:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 2bc:	22c2      	movs	r2, #194	; 0xc2
 2be:	00d2      	lsls	r2, r2, #3
 2c0:	4b1a      	ldr	r3, [pc, #104]	; (32c <system_clock_init+0x74>)
 2c2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 2c4:	4b1a      	ldr	r3, [pc, #104]	; (330 <system_clock_init+0x78>)
 2c6:	685a      	ldr	r2, [r3, #4]
 2c8:	211e      	movs	r1, #30
 2ca:	438a      	bics	r2, r1
 2cc:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 2ce:	a803      	add	r0, sp, #12
 2d0:	2400      	movs	r4, #0
 2d2:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 2d4:	2701      	movs	r7, #1
 2d6:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 2d8:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 2da:	4b16      	ldr	r3, [pc, #88]	; (334 <system_clock_init+0x7c>)
 2dc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 2de:	2006      	movs	r0, #6
 2e0:	4b15      	ldr	r3, [pc, #84]	; (338 <system_clock_init+0x80>)
 2e2:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 2e4:	4b15      	ldr	r3, [pc, #84]	; (33c <system_clock_init+0x84>)
 2e6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
 2e8:	466a      	mov	r2, sp
 2ea:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
 2ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 2ee:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
 2f0:	2303      	movs	r3, #3
 2f2:	7013      	strb	r3, [r2, #0]
 2f4:	2320      	movs	r3, #32
 2f6:	9301      	str	r3, [sp, #4]
 2f8:	2004      	movs	r0, #4
 2fa:	4669      	mov	r1, sp
 2fc:	4e10      	ldr	r6, [pc, #64]	; (340 <system_clock_init+0x88>)
 2fe:	47b0      	blx	r6
 300:	2004      	movs	r0, #4
 302:	4d10      	ldr	r5, [pc, #64]	; (344 <system_clock_init+0x8c>)
 304:	47a8      	blx	r5
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 306:	4b10      	ldr	r3, [pc, #64]	; (348 <system_clock_init+0x90>)
 308:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 30a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 30c:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 30e:	9701      	str	r7, [sp, #4]
	config->high_when_disabled = false;
 310:	466b      	mov	r3, sp
 312:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
 314:	2306      	movs	r3, #6
 316:	466a      	mov	r2, sp
 318:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
 31a:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 31c:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 31e:	2000      	movs	r0, #0
 320:	4669      	mov	r1, sp
 322:	47b0      	blx	r6
 324:	2000      	movs	r0, #0
 326:	47a8      	blx	r5
#endif
}
 328:	b005      	add	sp, #20
 32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 32c:	40000800 	.word	0x40000800
 330:	41004000 	.word	0x41004000
 334:	000001dd 	.word	0x000001dd
 338:	00000219 	.word	0x00000219
 33c:	0000034d 	.word	0x0000034d
 340:	00000371 	.word	0x00000371
 344:	00000425 	.word	0x00000425
 348:	40000400 	.word	0x40000400

0000034c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 34c:	4b06      	ldr	r3, [pc, #24]	; (368 <system_gclk_init+0x1c>)
 34e:	6999      	ldr	r1, [r3, #24]
 350:	2208      	movs	r2, #8
 352:	430a      	orrs	r2, r1
 354:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 356:	2201      	movs	r2, #1
 358:	4b04      	ldr	r3, [pc, #16]	; (36c <system_gclk_init+0x20>)
 35a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 35c:	1c19      	adds	r1, r3, #0
 35e:	780b      	ldrb	r3, [r1, #0]
 360:	4213      	tst	r3, r2
 362:	d1fc      	bne.n	35e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 364:	4770      	bx	lr
 366:	46c0      	nop			; (mov r8, r8)
 368:	40000400 	.word	0x40000400
 36c:	40000c00 	.word	0x40000c00

00000370 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 372:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 374:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 376:	780d      	ldrb	r5, [r1, #0]
 378:	022d      	lsls	r5, r5, #8
 37a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 37c:	784b      	ldrb	r3, [r1, #1]
 37e:	2b00      	cmp	r3, #0
 380:	d002      	beq.n	388 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 382:	2380      	movs	r3, #128	; 0x80
 384:	02db      	lsls	r3, r3, #11
 386:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 388:	7a4b      	ldrb	r3, [r1, #9]
 38a:	2b00      	cmp	r3, #0
 38c:	d002      	beq.n	394 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 38e:	2380      	movs	r3, #128	; 0x80
 390:	031b      	lsls	r3, r3, #12
 392:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 394:	684c      	ldr	r4, [r1, #4]
 396:	2c01      	cmp	r4, #1
 398:	d917      	bls.n	3ca <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 39a:	1e63      	subs	r3, r4, #1
 39c:	421c      	tst	r4, r3
 39e:	d10f      	bne.n	3c0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 3a0:	2c02      	cmp	r4, #2
 3a2:	d906      	bls.n	3b2 <system_gclk_gen_set_config+0x42>
 3a4:	2302      	movs	r3, #2
 3a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 3a8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 3aa:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 3ac:	429c      	cmp	r4, r3
 3ae:	d8fb      	bhi.n	3a8 <system_gclk_gen_set_config+0x38>
 3b0:	e000      	b.n	3b4 <system_gclk_gen_set_config+0x44>
 3b2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 3b4:	0217      	lsls	r7, r2, #8
 3b6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 3b8:	2380      	movs	r3, #128	; 0x80
 3ba:	035b      	lsls	r3, r3, #13
 3bc:	431d      	orrs	r5, r3
 3be:	e004      	b.n	3ca <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 3c0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 3c2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 3c4:	2380      	movs	r3, #128	; 0x80
 3c6:	029b      	lsls	r3, r3, #10
 3c8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 3ca:	7a0b      	ldrb	r3, [r1, #8]
 3cc:	2b00      	cmp	r3, #0
 3ce:	d002      	beq.n	3d6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 3d0:	2380      	movs	r3, #128	; 0x80
 3d2:	039b      	lsls	r3, r3, #14
 3d4:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
 3d6:	4a0f      	ldr	r2, [pc, #60]	; (414 <system_gclk_gen_set_config+0xa4>)
 3d8:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 3da:	b25b      	sxtb	r3, r3
 3dc:	2b00      	cmp	r3, #0
 3de:	dbfb      	blt.n	3d8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3e0:	4b0d      	ldr	r3, [pc, #52]	; (418 <system_gclk_gen_set_config+0xa8>)
 3e2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 3e4:	4b0d      	ldr	r3, [pc, #52]	; (41c <system_gclk_gen_set_config+0xac>)
 3e6:	701e      	strb	r6, [r3, #0]
 3e8:	4a0a      	ldr	r2, [pc, #40]	; (414 <system_gclk_gen_set_config+0xa4>)
 3ea:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 3ec:	b25b      	sxtb	r3, r3
 3ee:	2b00      	cmp	r3, #0
 3f0:	dbfb      	blt.n	3ea <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 3f2:	4b08      	ldr	r3, [pc, #32]	; (414 <system_gclk_gen_set_config+0xa4>)
 3f4:	609f      	str	r7, [r3, #8]
 3f6:	1c1a      	adds	r2, r3, #0
 3f8:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 3fa:	b25b      	sxtb	r3, r3
 3fc:	2b00      	cmp	r3, #0
 3fe:	dbfb      	blt.n	3f8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 400:	4b04      	ldr	r3, [pc, #16]	; (414 <system_gclk_gen_set_config+0xa4>)
 402:	6859      	ldr	r1, [r3, #4]
 404:	2280      	movs	r2, #128	; 0x80
 406:	0252      	lsls	r2, r2, #9
 408:	400a      	ands	r2, r1
 40a:	4315      	orrs	r5, r2
 40c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 40e:	4b04      	ldr	r3, [pc, #16]	; (420 <system_gclk_gen_set_config+0xb0>)
 410:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 414:	40000c00 	.word	0x40000c00
 418:	00000111 	.word	0x00000111
 41c:	40000c08 	.word	0x40000c08
 420:	00000151 	.word	0x00000151

00000424 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 424:	b510      	push	{r4, lr}
 426:	1c04      	adds	r4, r0, #0
 428:	4a0b      	ldr	r2, [pc, #44]	; (458 <system_gclk_gen_enable+0x34>)
 42a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 42c:	b25b      	sxtb	r3, r3
 42e:	2b00      	cmp	r3, #0
 430:	dbfb      	blt.n	42a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 432:	4b0a      	ldr	r3, [pc, #40]	; (45c <system_gclk_gen_enable+0x38>)
 434:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 436:	4b0a      	ldr	r3, [pc, #40]	; (460 <system_gclk_gen_enable+0x3c>)
 438:	701c      	strb	r4, [r3, #0]
 43a:	4a07      	ldr	r2, [pc, #28]	; (458 <system_gclk_gen_enable+0x34>)
 43c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 43e:	b25b      	sxtb	r3, r3
 440:	2b00      	cmp	r3, #0
 442:	dbfb      	blt.n	43c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 444:	4b04      	ldr	r3, [pc, #16]	; (458 <system_gclk_gen_enable+0x34>)
 446:	6859      	ldr	r1, [r3, #4]
 448:	2280      	movs	r2, #128	; 0x80
 44a:	0252      	lsls	r2, r2, #9
 44c:	430a      	orrs	r2, r1
 44e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 450:	4b04      	ldr	r3, [pc, #16]	; (464 <system_gclk_gen_enable+0x40>)
 452:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 454:	bd10      	pop	{r4, pc}
 456:	46c0      	nop			; (mov r8, r8)
 458:	40000c00 	.word	0x40000c00
 45c:	00000111 	.word	0x00000111
 460:	40000c04 	.word	0x40000c04
 464:	00000151 	.word	0x00000151

00000468 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
 468:	b510      	push	{r4, lr}
 46a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 46c:	4b06      	ldr	r3, [pc, #24]	; (488 <system_gclk_chan_enable+0x20>)
 46e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 470:	4b06      	ldr	r3, [pc, #24]	; (48c <system_gclk_chan_enable+0x24>)
 472:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 474:	4b06      	ldr	r3, [pc, #24]	; (490 <system_gclk_chan_enable+0x28>)
 476:	8859      	ldrh	r1, [r3, #2]
 478:	2280      	movs	r2, #128	; 0x80
 47a:	01d2      	lsls	r2, r2, #7
 47c:	430a      	orrs	r2, r1
 47e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 480:	4b04      	ldr	r3, [pc, #16]	; (494 <system_gclk_chan_enable+0x2c>)
 482:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 484:	bd10      	pop	{r4, pc}
 486:	46c0      	nop			; (mov r8, r8)
 488:	00000111 	.word	0x00000111
 48c:	40000c02 	.word	0x40000c02
 490:	40000c00 	.word	0x40000c00
 494:	00000151 	.word	0x00000151

00000498 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 498:	b510      	push	{r4, lr}
 49a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <system_gclk_chan_disable+0x44>)
 49e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 4a0:	4b0f      	ldr	r3, [pc, #60]	; (4e0 <system_gclk_chan_disable+0x48>)
 4a2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 4a4:	4b0f      	ldr	r3, [pc, #60]	; (4e4 <system_gclk_chan_disable+0x4c>)
 4a6:	8858      	ldrh	r0, [r3, #2]
 4a8:	0500      	lsls	r0, r0, #20
 4aa:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 4ac:	8859      	ldrh	r1, [r3, #2]
 4ae:	4a0e      	ldr	r2, [pc, #56]	; (4e8 <system_gclk_chan_disable+0x50>)
 4b0:	400a      	ands	r2, r1
 4b2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 4b4:	8859      	ldrh	r1, [r3, #2]
 4b6:	4a0d      	ldr	r2, [pc, #52]	; (4ec <system_gclk_chan_disable+0x54>)
 4b8:	400a      	ands	r2, r1
 4ba:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 4bc:	1c19      	adds	r1, r3, #0
 4be:	2280      	movs	r2, #128	; 0x80
 4c0:	01d2      	lsls	r2, r2, #7
 4c2:	884b      	ldrh	r3, [r1, #2]
 4c4:	4213      	tst	r3, r2
 4c6:	d1fc      	bne.n	4c2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 4c8:	4b06      	ldr	r3, [pc, #24]	; (4e4 <system_gclk_chan_disable+0x4c>)
 4ca:	0201      	lsls	r1, r0, #8
 4cc:	8858      	ldrh	r0, [r3, #2]
 4ce:	4a06      	ldr	r2, [pc, #24]	; (4e8 <system_gclk_chan_disable+0x50>)
 4d0:	4002      	ands	r2, r0
 4d2:	430a      	orrs	r2, r1
 4d4:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4d6:	4b06      	ldr	r3, [pc, #24]	; (4f0 <system_gclk_chan_disable+0x58>)
 4d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4da:	bd10      	pop	{r4, pc}
 4dc:	00000111 	.word	0x00000111
 4e0:	40000c02 	.word	0x40000c02
 4e4:	40000c00 	.word	0x40000c00
 4e8:	fffff0ff 	.word	0xfffff0ff
 4ec:	ffffbfff 	.word	0xffffbfff
 4f0:	00000151 	.word	0x00000151

000004f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 4f4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 4f6:	780c      	ldrb	r4, [r1, #0]
 4f8:	0224      	lsls	r4, r4, #8
 4fa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 4fc:	4b02      	ldr	r3, [pc, #8]	; (508 <system_gclk_chan_set_config+0x14>)
 4fe:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 500:	b2a4      	uxth	r4, r4
 502:	4b02      	ldr	r3, [pc, #8]	; (50c <system_gclk_chan_set_config+0x18>)
 504:	805c      	strh	r4, [r3, #2]
}
 506:	bd10      	pop	{r4, pc}
 508:	00000499 	.word	0x00000499
 50c:	40000c00 	.word	0x40000c00

00000510 <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
 510:	b510      	push	{r4, lr}
 512:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 514:	4b06      	ldr	r3, [pc, #24]	; (530 <system_gclk_chan_lock+0x20>)
 516:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 518:	4b06      	ldr	r3, [pc, #24]	; (534 <system_gclk_chan_lock+0x24>)
 51a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
 51c:	4b06      	ldr	r3, [pc, #24]	; (538 <system_gclk_chan_lock+0x28>)
 51e:	8859      	ldrh	r1, [r3, #2]
 520:	2280      	movs	r2, #128	; 0x80
 522:	01d2      	lsls	r2, r2, #7
 524:	430a      	orrs	r2, r1
 526:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 528:	4b04      	ldr	r3, [pc, #16]	; (53c <system_gclk_chan_lock+0x2c>)
 52a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 52c:	bd10      	pop	{r4, pc}
 52e:	46c0      	nop			; (mov r8, r8)
 530:	00000111 	.word	0x00000111
 534:	40000c02 	.word	0x40000c02
 538:	40000c00 	.word	0x40000c00
 53c:	00000151 	.word	0x00000151

00000540 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 540:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 542:	78d3      	ldrb	r3, [r2, #3]
 544:	2b00      	cmp	r3, #0
 546:	d11e      	bne.n	586 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 548:	7813      	ldrb	r3, [r2, #0]
 54a:	2b80      	cmp	r3, #128	; 0x80
 54c:	d004      	beq.n	558 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 54e:	061b      	lsls	r3, r3, #24
 550:	2480      	movs	r4, #128	; 0x80
 552:	0264      	lsls	r4, r4, #9
 554:	4323      	orrs	r3, r4
 556:	e000      	b.n	55a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 558:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 55a:	7854      	ldrb	r4, [r2, #1]
 55c:	2502      	movs	r5, #2
 55e:	43ac      	bics	r4, r5
 560:	d10a      	bne.n	578 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 562:	7894      	ldrb	r4, [r2, #2]
 564:	2c00      	cmp	r4, #0
 566:	d103      	bne.n	570 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 568:	2480      	movs	r4, #128	; 0x80
 56a:	02a4      	lsls	r4, r4, #10
 56c:	4323      	orrs	r3, r4
 56e:	e002      	b.n	576 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 570:	24c0      	movs	r4, #192	; 0xc0
 572:	02e4      	lsls	r4, r4, #11
 574:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 576:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 578:	7854      	ldrb	r4, [r2, #1]
 57a:	3c01      	subs	r4, #1
 57c:	2c01      	cmp	r4, #1
 57e:	d804      	bhi.n	58a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 580:	4c11      	ldr	r4, [pc, #68]	; (5c8 <_system_pinmux_config+0x88>)
 582:	4023      	ands	r3, r4
 584:	e001      	b.n	58a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 586:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 588:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 58a:	040d      	lsls	r5, r1, #16
 58c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 58e:	24a0      	movs	r4, #160	; 0xa0
 590:	05e4      	lsls	r4, r4, #23
 592:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 594:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 596:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
 598:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 59a:	24d0      	movs	r4, #208	; 0xd0
 59c:	0624      	lsls	r4, r4, #24
 59e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 5a0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 5a2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 5a4:	78d4      	ldrb	r4, [r2, #3]
 5a6:	2c00      	cmp	r4, #0
 5a8:	d10c      	bne.n	5c4 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 5aa:	035c      	lsls	r4, r3, #13
 5ac:	d505      	bpl.n	5ba <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 5ae:	7893      	ldrb	r3, [r2, #2]
 5b0:	2b01      	cmp	r3, #1
 5b2:	d101      	bne.n	5b8 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
 5b4:	6181      	str	r1, [r0, #24]
 5b6:	e000      	b.n	5ba <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
 5b8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 5ba:	7853      	ldrb	r3, [r2, #1]
 5bc:	3b01      	subs	r3, #1
 5be:	2b01      	cmp	r3, #1
 5c0:	d800      	bhi.n	5c4 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 5c2:	6081      	str	r1, [r0, #8]
		}
	}
}
 5c4:	bd30      	pop	{r4, r5, pc}
 5c6:	46c0      	nop			; (mov r8, r8)
 5c8:	fffbffff 	.word	0xfffbffff

000005cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 5cc:	b508      	push	{r3, lr}
 5ce:	1c03      	adds	r3, r0, #0
 5d0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 5d2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 5d4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 5d6:	2900      	cmp	r1, #0
 5d8:	d103      	bne.n	5e2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 5da:	0958      	lsrs	r0, r3, #5
 5dc:	01c0      	lsls	r0, r0, #7
 5de:	4904      	ldr	r1, [pc, #16]	; (5f0 <system_pinmux_pin_set_config+0x24>)
 5e0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 5e2:	211f      	movs	r1, #31
 5e4:	400b      	ands	r3, r1
 5e6:	2101      	movs	r1, #1
 5e8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
 5ea:	4b02      	ldr	r3, [pc, #8]	; (5f4 <system_pinmux_pin_set_config+0x28>)
 5ec:	4798      	blx	r3
}
 5ee:	bd08      	pop	{r3, pc}
 5f0:	41004400 	.word	0x41004400
 5f4:	00000541 	.word	0x00000541

000005f8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 5f8:	4770      	bx	lr
 5fa:	46c0      	nop			; (mov r8, r8)

000005fc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 5fc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <system_init+0x14>)
 600:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 602:	4b04      	ldr	r3, [pc, #16]	; (614 <system_init+0x18>)
 604:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 606:	4b04      	ldr	r3, [pc, #16]	; (618 <system_init+0x1c>)
 608:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 60a:	4b04      	ldr	r3, [pc, #16]	; (61c <system_init+0x20>)
 60c:	4798      	blx	r3
}
 60e:	bd08      	pop	{r3, pc}
 610:	000002b9 	.word	0x000002b9
 614:	00000181 	.word	0x00000181
 618:	000005f9 	.word	0x000005f9
 61c:	000005f9 	.word	0x000005f9

00000620 <wdt_set_config>:
 * \retval STATUS_ERR_INVALID_ARG   If invalid argument(s) were supplied
 * \retval STATUS_ERR_IO  If the Watchdog module is locked to be always on
 */
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
 620:	b510      	push	{r4, lr}
 622:	b082      	sub	sp, #8
 624:	1c04      	adds	r4, r0, #0
 626:	4b37      	ldr	r3, [pc, #220]	; (704 <wdt_set_config+0xe4>)
 628:	6999      	ldr	r1, [r3, #24]
 62a:	2210      	movs	r2, #16
 62c:	430a      	orrs	r2, r1
 62e:	619a      	str	r2, [r3, #24]
 */
static inline bool wdt_is_locked(void)
{
	Wdt *const WDT_module = WDT;

	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
 630:	4b35      	ldr	r3, [pc, #212]	; (708 <wdt_set_config+0xe8>)
 632:	781a      	ldrb	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
 634:	09d2      	lsrs	r2, r2, #7
		return STATUS_ERR_IO;
 636:	2010      	movs	r0, #16

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
 638:	2a00      	cmp	r2, #0
 63a:	d161      	bne.n	700 <wdt_set_config+0xe0>
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
 63c:	78e2      	ldrb	r2, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
 63e:	2017      	movs	r0, #23
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
 640:	2a00      	cmp	r2, #0
 642:	d05d      	beq.n	700 <wdt_set_config+0xe0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
 644:	7921      	ldrb	r1, [r4, #4]
 646:	4291      	cmp	r1, r2
 648:	d85a      	bhi.n	700 <wdt_set_config+0xe0>
 64a:	7961      	ldrb	r1, [r4, #5]
 64c:	4291      	cmp	r1, r2
 64e:	d857      	bhi.n	700 <wdt_set_config+0xe0>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
 650:	781a      	ldrb	r2, [r3, #0]
 652:	2102      	movs	r1, #2
 654:	438a      	bics	r2, r1
 656:	701a      	strb	r2, [r3, #0]

	if(config->enable == false) {
 658:	7862      	ldrb	r2, [r4, #1]
		return STATUS_OK;
 65a:	2000      	movs	r0, #0
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;

	if(config->enable == false) {
 65c:	2a00      	cmp	r2, #0
 65e:	d04f      	beq.n	700 <wdt_set_config+0xe0>
		return STATUS_OK;
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
 660:	a901      	add	r1, sp, #4
 662:	78a3      	ldrb	r3, [r4, #2]
 664:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
 666:	2003      	movs	r0, #3
 668:	4b28      	ldr	r3, [pc, #160]	; (70c <wdt_set_config+0xec>)
 66a:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
 66c:	2003      	movs	r0, #3
 66e:	4b28      	ldr	r3, [pc, #160]	; (710 <wdt_set_config+0xf0>)
 670:	4798      	blx	r3
	if (config->always_on) {
 672:	7823      	ldrb	r3, [r4, #0]
 674:	2b00      	cmp	r3, #0
 676:	d002      	beq.n	67e <wdt_set_config+0x5e>
		system_gclk_chan_lock(WDT_GCLK_ID);
 678:	2003      	movs	r0, #3
 67a:	4b26      	ldr	r3, [pc, #152]	; (714 <wdt_set_config+0xf4>)
 67c:	4798      	blx	r3
 */
static inline bool wdt_is_syncing(void)
{
	Wdt *const WDT_module = WDT;

	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
 67e:	4a22      	ldr	r2, [pc, #136]	; (708 <wdt_set_config+0xe8>)
 680:	79d3      	ldrb	r3, [r2, #7]
	}

	while (wdt_is_syncing()) {
 682:	b25b      	sxtb	r3, r3
 684:	2b00      	cmp	r3, #0
 686:	dbfb      	blt.n	680 <wdt_set_config+0x60>
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
 688:	78e3      	ldrb	r3, [r4, #3]
 68a:	3b01      	subs	r3, #1

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
 68c:	7922      	ldrb	r2, [r4, #4]
 68e:	2a00      	cmp	r2, #0
 690:	d009      	beq.n	6a6 <wdt_set_config+0x86>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
 692:	4a1d      	ldr	r2, [pc, #116]	; (708 <wdt_set_config+0xe8>)
 694:	7810      	ldrb	r0, [r2, #0]
 696:	2104      	movs	r1, #4
 698:	4301      	orrs	r1, r0
 69a:	7011      	strb	r1, [r2, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
 69c:	7922      	ldrb	r2, [r4, #4]
 69e:	3a01      	subs	r2, #1
 6a0:	0112      	lsls	r2, r2, #4
 6a2:	4313      	orrs	r3, r2
 6a4:	e004      	b.n	6b0 <wdt_set_config+0x90>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
 6a6:	4a18      	ldr	r2, [pc, #96]	; (708 <wdt_set_config+0xe8>)
 6a8:	7811      	ldrb	r1, [r2, #0]
 6aa:	2004      	movs	r0, #4
 6ac:	4381      	bics	r1, r0
 6ae:	7011      	strb	r1, [r2, #0]
 6b0:	4915      	ldr	r1, [pc, #84]	; (708 <wdt_set_config+0xe8>)
 6b2:	79ca      	ldrb	r2, [r1, #7]
	}

	while (wdt_is_syncing()) {
 6b4:	b252      	sxtb	r2, r2
 6b6:	2a00      	cmp	r2, #0
 6b8:	dbfb      	blt.n	6b2 <wdt_set_config+0x92>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
 6ba:	b2db      	uxtb	r3, r3
 6bc:	4a12      	ldr	r2, [pc, #72]	; (708 <wdt_set_config+0xe8>)
 6be:	7053      	strb	r3, [r2, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
 6c0:	7963      	ldrb	r3, [r4, #5]
 6c2:	2b00      	cmp	r3, #0
 6c4:	d007      	beq.n	6d6 <wdt_set_config+0xb6>
 6c6:	79d1      	ldrb	r1, [r2, #7]
		while (wdt_is_syncing()) {
 6c8:	b249      	sxtb	r1, r1
 6ca:	2900      	cmp	r1, #0
 6cc:	dbfb      	blt.n	6c6 <wdt_set_config+0xa6>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
 6ce:	3b01      	subs	r3, #1
 6d0:	b2db      	uxtb	r3, r3
 6d2:	4a0d      	ldr	r2, [pc, #52]	; (708 <wdt_set_config+0xe8>)
 6d4:	7093      	strb	r3, [r2, #2]
 6d6:	4a0c      	ldr	r2, [pc, #48]	; (708 <wdt_set_config+0xe8>)
 6d8:	79d3      	ldrb	r3, [r2, #7]
	}

	while (wdt_is_syncing()) {
 6da:	b25b      	sxtb	r3, r3
 6dc:	2b00      	cmp	r3, #0
 6de:	dbfb      	blt.n	6d8 <wdt_set_config+0xb8>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
 6e0:	7823      	ldrb	r3, [r4, #0]
 6e2:	2b00      	cmp	r3, #0
 6e4:	d006      	beq.n	6f4 <wdt_set_config+0xd4>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
 6e6:	4b08      	ldr	r3, [pc, #32]	; (708 <wdt_set_config+0xe8>)
 6e8:	7819      	ldrb	r1, [r3, #0]
 6ea:	2280      	movs	r2, #128	; 0x80
 6ec:	430a      	orrs	r2, r1
 6ee:	701a      	strb	r2, [r3, #0]
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
	}

	return STATUS_OK;
 6f0:	2000      	movs	r0, #0
 6f2:	e005      	b.n	700 <wdt_set_config+0xe0>
	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
 6f4:	4b04      	ldr	r3, [pc, #16]	; (708 <wdt_set_config+0xe8>)
 6f6:	7819      	ldrb	r1, [r3, #0]
 6f8:	2202      	movs	r2, #2
 6fa:	430a      	orrs	r2, r1
 6fc:	701a      	strb	r2, [r3, #0]
	}

	return STATUS_OK;
 6fe:	2000      	movs	r0, #0
}
 700:	b002      	add	sp, #8
 702:	bd10      	pop	{r4, pc}
 704:	40000400 	.word	0x40000400
 708:	40001000 	.word	0x40001000
 70c:	000004f5 	.word	0x000004f5
 710:	00000469 	.word	0x00000469
 714:	00000511 	.word	0x00000511

00000718 <wdt_reset_count>:
 718:	4a04      	ldr	r2, [pc, #16]	; (72c <wdt_reset_count+0x14>)
 71a:	79d3      	ldrb	r3, [r2, #7]
 */
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	while (wdt_is_syncing()) {
 71c:	b25b      	sxtb	r3, r3
 71e:	2b00      	cmp	r3, #0
 720:	dbfb      	blt.n	71a <wdt_reset_count+0x2>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
 722:	22a5      	movs	r2, #165	; 0xa5
 724:	4b01      	ldr	r3, [pc, #4]	; (72c <wdt_reset_count+0x14>)
 726:	721a      	strb	r2, [r3, #8]
}
 728:	4770      	bx	lr
 72a:	46c0      	nop			; (mov r8, r8)
 72c:	40001000 	.word	0x40001000

00000730 <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
 730:	2900      	cmp	r1, #0
 732:	d103      	bne.n	73c <wdt_register_callback+0xc>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
 734:	4b02      	ldr	r3, [pc, #8]	; (740 <wdt_register_callback+0x10>)
 736:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
 738:	2000      	movs	r0, #0
 73a:	e000      	b.n	73e <wdt_register_callback+0xe>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 73c:	2017      	movs	r0, #23
	}
}
 73e:	4770      	bx	lr
 740:	20000040 	.word	0x20000040

00000744 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
 744:	2800      	cmp	r0, #0
 746:	d106      	bne.n	756 <wdt_enable_callback+0x12>
	{
	case WDT_CALLBACK_EARLY_WARNING:
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
 748:	2201      	movs	r2, #1
 74a:	4b04      	ldr	r3, [pc, #16]	; (75c <wdt_enable_callback+0x18>)
 74c:	715a      	strb	r2, [r3, #5]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
 74e:	2204      	movs	r2, #4
 750:	4b03      	ldr	r3, [pc, #12]	; (760 <wdt_enable_callback+0x1c>)
 752:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
 754:	e000      	b.n	758 <wdt_enable_callback+0x14>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 756:	2017      	movs	r0, #23
	}
}
 758:	4770      	bx	lr
 75a:	46c0      	nop			; (mov r8, r8)
 75c:	40001000 	.word	0x40001000
 760:	e000e100 	.word	0xe000e100

00000764 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
 764:	b508      	push	{r3, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
 766:	2201      	movs	r2, #1
 768:	4b03      	ldr	r3, [pc, #12]	; (778 <WDT_Handler+0x14>)
 76a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
 76c:	4b03      	ldr	r3, [pc, #12]	; (77c <WDT_Handler+0x18>)
 76e:	681b      	ldr	r3, [r3, #0]
 770:	2b00      	cmp	r3, #0
 772:	d000      	beq.n	776 <WDT_Handler+0x12>
		wdt_early_warning_callback();
 774:	4798      	blx	r3
	}
}
 776:	bd08      	pop	{r3, pc}
 778:	40001000 	.word	0x40001000
 77c:	20000040 	.word	0x20000040

00000780 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 780:	e7fe      	b.n	780 <Dummy_Handler>
 782:	46c0      	nop			; (mov r8, r8)

00000784 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 784:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 786:	4b19      	ldr	r3, [pc, #100]	; (7ec <Reset_Handler+0x68>)
 788:	4a19      	ldr	r2, [pc, #100]	; (7f0 <Reset_Handler+0x6c>)
 78a:	429a      	cmp	r2, r3
 78c:	d003      	beq.n	796 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 78e:	4b19      	ldr	r3, [pc, #100]	; (7f4 <Reset_Handler+0x70>)
 790:	4a16      	ldr	r2, [pc, #88]	; (7ec <Reset_Handler+0x68>)
 792:	429a      	cmp	r2, r3
 794:	d304      	bcc.n	7a0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 796:	4b18      	ldr	r3, [pc, #96]	; (7f8 <Reset_Handler+0x74>)
 798:	4a18      	ldr	r2, [pc, #96]	; (7fc <Reset_Handler+0x78>)
 79a:	429a      	cmp	r2, r3
 79c:	d310      	bcc.n	7c0 <Reset_Handler+0x3c>
 79e:	e01b      	b.n	7d8 <Reset_Handler+0x54>
 7a0:	4b17      	ldr	r3, [pc, #92]	; (800 <Reset_Handler+0x7c>)
 7a2:	4814      	ldr	r0, [pc, #80]	; (7f4 <Reset_Handler+0x70>)
 7a4:	3003      	adds	r0, #3
 7a6:	1ac0      	subs	r0, r0, r3
 7a8:	0880      	lsrs	r0, r0, #2
 7aa:	3001      	adds	r0, #1
 7ac:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 7ae:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
 7b0:	490e      	ldr	r1, [pc, #56]	; (7ec <Reset_Handler+0x68>)
 7b2:	4a0f      	ldr	r2, [pc, #60]	; (7f0 <Reset_Handler+0x6c>)
 7b4:	58d4      	ldr	r4, [r2, r3]
 7b6:	50cc      	str	r4, [r1, r3]
 7b8:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 7ba:	4283      	cmp	r3, r0
 7bc:	d1fa      	bne.n	7b4 <Reset_Handler+0x30>
 7be:	e7ea      	b.n	796 <Reset_Handler+0x12>
 7c0:	4b0e      	ldr	r3, [pc, #56]	; (7fc <Reset_Handler+0x78>)
 7c2:	1d1a      	adds	r2, r3, #4
 7c4:	490c      	ldr	r1, [pc, #48]	; (7f8 <Reset_Handler+0x74>)
 7c6:	3103      	adds	r1, #3
 7c8:	1a89      	subs	r1, r1, r2
 7ca:	0889      	lsrs	r1, r1, #2
 7cc:	0089      	lsls	r1, r1, #2
 7ce:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
 7d0:	2100      	movs	r1, #0
 7d2:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 7d4:	4293      	cmp	r3, r2
 7d6:	d1fc      	bne.n	7d2 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 7d8:	4b0a      	ldr	r3, [pc, #40]	; (804 <Reset_Handler+0x80>)
 7da:	217f      	movs	r1, #127	; 0x7f
 7dc:	4a0a      	ldr	r2, [pc, #40]	; (808 <Reset_Handler+0x84>)
 7de:	438a      	bics	r2, r1
 7e0:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
 7e2:	4b0a      	ldr	r3, [pc, #40]	; (80c <Reset_Handler+0x88>)
 7e4:	4798      	blx	r3

        /* Branch to main function */
        main();
 7e6:	4b0a      	ldr	r3, [pc, #40]	; (810 <Reset_Handler+0x8c>)
 7e8:	4798      	blx	r3
 7ea:	e7fe      	b.n	7ea <Reset_Handler+0x66>
 7ec:	20000000 	.word	0x20000000
 7f0:	00000950 	.word	0x00000950
 7f4:	20000004 	.word	0x20000004
 7f8:	20000044 	.word	0x20000044
 7fc:	20000004 	.word	0x20000004
 800:	20000004 	.word	0x20000004
 804:	e000ed00 	.word	0xe000ed00
 808:	00000000 	.word	0x00000000
 80c:	000008c1 	.word	0x000008c1
 810:	00000871 	.word	0x00000871

00000814 <watchdog_early_warning_callback>:
	} else {
		port_base->OUTCLR.reg = pin_mask;
 814:	2280      	movs	r2, #128	; 0x80
 816:	05d2      	lsls	r2, r2, #23
 818:	4b01      	ldr	r3, [pc, #4]	; (820 <watchdog_early_warning_callback+0xc>)
 81a:	615a      	str	r2, [r3, #20]

//! [setup]
void watchdog_early_warning_callback(void)
{
	port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
}
 81c:	4770      	bx	lr
 81e:	46c0      	nop			; (mov r8, r8)
 820:	41004480 	.word	0x41004480

00000824 <configure_wdt>:

void configure_wdt(void)
{
 824:	b500      	push	{lr}
 826:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
 828:	2300      	movs	r3, #0
 82a:	4669      	mov	r1, sp
 82c:	700b      	strb	r3, [r1, #0]
	config->enable               = true;
 82e:	2201      	movs	r2, #1
 830:	704a      	strb	r2, [r1, #1]
	config->clock_source         = GCLK_GENERATOR_4;
 832:	2204      	movs	r2, #4
 834:	708a      	strb	r2, [r1, #2]
	config->timeout_period       = WDT_PERIOD_16384CLK;
	config->window_period        = WDT_PERIOD_NONE;
 836:	710b      	strb	r3, [r1, #4]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
	config_wdt.clock_source         = GCLK_GENERATOR_4;
	config_wdt.timeout_period       = WDT_PERIOD_4096CLK;
 838:	230a      	movs	r3, #10
 83a:	70cb      	strb	r3, [r1, #3]
	config_wdt.early_warning_period = WDT_PERIOD_2048CLK;
 83c:	2309      	movs	r3, #9
 83e:	714b      	strb	r3, [r1, #5]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
 840:	4668      	mov	r0, sp
 842:	4b02      	ldr	r3, [pc, #8]	; (84c <configure_wdt+0x28>)
 844:	4798      	blx	r3
	//! [setup_4]
}
 846:	b003      	add	sp, #12
 848:	bd00      	pop	{pc}
 84a:	46c0      	nop			; (mov r8, r8)
 84c:	00000621 	.word	0x00000621

00000850 <configure_wdt_callbacks>:

void configure_wdt_callbacks(void)
{
 850:	b508      	push	{r3, lr}
	//! [setup_5]
	wdt_register_callback(watchdog_early_warning_callback,
 852:	4804      	ldr	r0, [pc, #16]	; (864 <configure_wdt_callbacks+0x14>)
 854:	2100      	movs	r1, #0
 856:	4b04      	ldr	r3, [pc, #16]	; (868 <configure_wdt_callbacks+0x18>)
 858:	4798      	blx	r3
		WDT_CALLBACK_EARLY_WARNING);
	//! [setup_5]

	//! [setup_6]
	wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
 85a:	2000      	movs	r0, #0
 85c:	4b03      	ldr	r3, [pc, #12]	; (86c <configure_wdt_callbacks+0x1c>)
 85e:	4798      	blx	r3
	//! [setup_6]
}
 860:	bd08      	pop	{r3, pc}
 862:	46c0      	nop			; (mov r8, r8)
 864:	00000815 	.word	0x00000815
 868:	00000731 	.word	0x00000731
 86c:	00000745 	.word	0x00000745

00000870 <main>:
//! [setup]

int main(void)
{
 870:	b570      	push	{r4, r5, r6, lr}
	system_init();
 872:	4b0c      	ldr	r3, [pc, #48]	; (8a4 <main+0x34>)
 874:	4798      	blx	r3

	//! [setup_init]
	configure_wdt();
 876:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <main+0x38>)
 878:	4798      	blx	r3
	configure_wdt_callbacks();
 87a:	4b0c      	ldr	r3, [pc, #48]	; (8ac <main+0x3c>)
 87c:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 87e:	2280      	movs	r2, #128	; 0x80
 880:	05d2      	lsls	r2, r2, #23
 882:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <main+0x40>)
 884:	619a      	str	r2, [r3, #24]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
 886:	2201      	movs	r2, #1
 888:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <main+0x44>)
 88a:	701a      	strb	r2, [r3, #0]
 88c:	f3bf 8f5f 	dmb	sy
 890:	b662      	cpsie	i
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
 892:	4d09      	ldr	r5, [pc, #36]	; (8b8 <main+0x48>)
 894:	2480      	movs	r4, #128	; 0x80
 896:	0224      	lsls	r4, r4, #8
	//! [main_3]
	while (true) {
		/* Wait for callback */
		
		if (port_pin_get_input_level(BUTTON_0_PIN) == false) {			
			wdt_reset_count();
 898:	4e08      	ldr	r6, [pc, #32]	; (8bc <main+0x4c>)
 89a:	6a2b      	ldr	r3, [r5, #32]

	//! [main_3]
	while (true) {
		/* Wait for callback */
		
		if (port_pin_get_input_level(BUTTON_0_PIN) == false) {			
 89c:	4223      	tst	r3, r4
 89e:	d1fc      	bne.n	89a <main+0x2a>
			wdt_reset_count();
 8a0:	47b0      	blx	r6
 8a2:	e7fa      	b.n	89a <main+0x2a>
 8a4:	000005fd 	.word	0x000005fd
 8a8:	00000825 	.word	0x00000825
 8ac:	00000851 	.word	0x00000851
 8b0:	41004480 	.word	0x41004480
 8b4:	20000000 	.word	0x20000000
 8b8:	41004400 	.word	0x41004400
 8bc:	00000719 	.word	0x00000719

000008c0 <__libc_init_array>:
 8c0:	b570      	push	{r4, r5, r6, lr}
 8c2:	4b0e      	ldr	r3, [pc, #56]	; (8fc <__libc_init_array+0x3c>)
 8c4:	4d0e      	ldr	r5, [pc, #56]	; (900 <__libc_init_array+0x40>)
 8c6:	2400      	movs	r4, #0
 8c8:	1aed      	subs	r5, r5, r3
 8ca:	10ad      	asrs	r5, r5, #2
 8cc:	1c1e      	adds	r6, r3, #0
 8ce:	42ac      	cmp	r4, r5
 8d0:	d004      	beq.n	8dc <__libc_init_array+0x1c>
 8d2:	00a3      	lsls	r3, r4, #2
 8d4:	58f3      	ldr	r3, [r6, r3]
 8d6:	4798      	blx	r3
 8d8:	3401      	adds	r4, #1
 8da:	e7f8      	b.n	8ce <__libc_init_array+0xe>
 8dc:	f000 f828 	bl	930 <_init>
 8e0:	4b08      	ldr	r3, [pc, #32]	; (904 <__libc_init_array+0x44>)
 8e2:	4d09      	ldr	r5, [pc, #36]	; (908 <__libc_init_array+0x48>)
 8e4:	2400      	movs	r4, #0
 8e6:	1aed      	subs	r5, r5, r3
 8e8:	10ad      	asrs	r5, r5, #2
 8ea:	1c1e      	adds	r6, r3, #0
 8ec:	42ac      	cmp	r4, r5
 8ee:	d004      	beq.n	8fa <__libc_init_array+0x3a>
 8f0:	00a3      	lsls	r3, r4, #2
 8f2:	58f3      	ldr	r3, [r6, r3]
 8f4:	4798      	blx	r3
 8f6:	3401      	adds	r4, #1
 8f8:	e7f8      	b.n	8ec <__libc_init_array+0x2c>
 8fa:	bd70      	pop	{r4, r5, r6, pc}
 8fc:	0000093c 	.word	0x0000093c
 900:	0000093c 	.word	0x0000093c
 904:	0000093c 	.word	0x0000093c
 908:	00000940 	.word	0x00000940
 90c:	00000244 	.word	0x00000244
 910:	000002a4 	.word	0x000002a4
 914:	000002a4 	.word	0x000002a4
 918:	00000224 	.word	0x00000224
 91c:	00000236 	.word	0x00000236
 920:	00000252 	.word	0x00000252
 924:	00000228 	.word	0x00000228
 928:	00000260 	.word	0x00000260
 92c:	00000294 	.word	0x00000294

00000930 <_init>:
 930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 932:	46c0      	nop			; (mov r8, r8)
 934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 936:	bc08      	pop	{r3}
 938:	469e      	mov	lr, r3
 93a:	4770      	bx	lr

0000093c <__init_array_start>:
 93c:	000000d9 	.word	0x000000d9

00000940 <_fini>:
 940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 942:	46c0      	nop			; (mov r8, r8)
 944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 946:	bc08      	pop	{r3}
 948:	469e      	mov	lr, r3
 94a:	4770      	bx	lr

0000094c <__fini_array_start>:
 94c:	000000b1 	.word	0x000000b1
